;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (ironscheme base)
  ((g$caar$5129$19h1md
     g$caar$5322$19h1md
     (case-lambda ((g$x$5184$19h1md) (car (car g$x$5184$19h1md)))))
   (g$cadr$5130$19h1md
     g$cadr$5323$19h1md
     (case-lambda ((g$x$5185$19h1md) (car (cdr g$x$5185$19h1md)))))
   (g$cdar$5131$19h1md
     g$cdar$5324$19h1md
     (case-lambda ((g$x$5186$19h1md) (cdr (car g$x$5186$19h1md)))))
   (g$cddr$5132$19h1md
     g$cddr$5325$19h1md
     (case-lambda ((g$x$5187$19h1md) (cdr (cdr g$x$5187$19h1md)))))
   (g$caaar$5133$19h1md
     g$caaar$5326$19h1md
     (case-lambda
       ((g$x$5188$19h1md) (g$caar$5129$19h1md (car g$x$5188$19h1md)))))
   (g$caadr$5134$19h1md
     g$caadr$5327$19h1md
     (case-lambda
       ((g$x$5189$19h1md) (g$caar$5129$19h1md (cdr g$x$5189$19h1md)))))
   (g$cadar$5135$19h1md
     g$cadar$5328$19h1md
     (case-lambda
       ((g$x$5190$19h1md) (g$cadr$5130$19h1md (car g$x$5190$19h1md)))))
   (g$caddr$5136$19h1md
     g$caddr$5329$19h1md
     (case-lambda
       ((g$x$5191$19h1md) (g$cadr$5130$19h1md (cdr g$x$5191$19h1md)))))
   (g$cdaar$5137$19h1md
     g$cdaar$5330$19h1md
     (case-lambda
       ((g$x$5192$19h1md) (g$cdar$5131$19h1md (car g$x$5192$19h1md)))))
   (g$cdadr$5138$19h1md
     g$cdadr$5331$19h1md
     (case-lambda
       ((g$x$5193$19h1md) (g$cdar$5131$19h1md (cdr g$x$5193$19h1md)))))
   (g$cddar$5139$19h1md
     g$cddar$5332$19h1md
     (case-lambda
       ((g$x$5194$19h1md) (g$cddr$5132$19h1md (car g$x$5194$19h1md)))))
   (g$cdddr$5140$19h1md
     g$cdddr$5333$19h1md
     (case-lambda
       ((g$x$5195$19h1md) (g$cddr$5132$19h1md (cdr g$x$5195$19h1md)))))
   (g$caaaar$5141$19h1md
     g$caaaar$5334$19h1md
     (case-lambda
       ((g$x$5196$19h1md) (g$caaar$5133$19h1md (car g$x$5196$19h1md)))))
   (g$caaadr$5142$19h1md
     g$caaadr$5335$19h1md
     (case-lambda
       ((g$x$5197$19h1md) (g$caaar$5133$19h1md (cdr g$x$5197$19h1md)))))
   (g$caadar$5143$19h1md
     g$caadar$5336$19h1md
     (case-lambda
       ((g$x$5198$19h1md) (g$caadr$5134$19h1md (car g$x$5198$19h1md)))))
   (g$caaddr$5144$19h1md
     g$caaddr$5337$19h1md
     (case-lambda
       ((g$x$5199$19h1md) (g$caadr$5134$19h1md (cdr g$x$5199$19h1md)))))
   (g$cadaar$5145$19h1md
     g$cadaar$5338$19h1md
     (case-lambda
       ((g$x$5200$19h1md) (g$cadar$5135$19h1md (car g$x$5200$19h1md)))))
   (g$cadadr$5146$19h1md
     g$cadadr$5339$19h1md
     (case-lambda
       ((g$x$5201$19h1md) (g$cadar$5135$19h1md (cdr g$x$5201$19h1md)))))
   (g$caddar$5147$19h1md
     g$caddar$5340$19h1md
     (case-lambda
       ((g$x$5202$19h1md) (g$caddr$5136$19h1md (car g$x$5202$19h1md)))))
   (g$cadddr$5148$19h1md
     g$cadddr$5341$19h1md
     (case-lambda
       ((g$x$5203$19h1md) (g$caddr$5136$19h1md (cdr g$x$5203$19h1md)))))
   (g$cdaaar$5149$19h1md
     g$cdaaar$5342$19h1md
     (case-lambda
       ((g$x$5204$19h1md) (g$cdaar$5137$19h1md (car g$x$5204$19h1md)))))
   (g$cdaadr$5150$19h1md
     g$cdaadr$5343$19h1md
     (case-lambda
       ((g$x$5205$19h1md) (g$cdaar$5137$19h1md (cdr g$x$5205$19h1md)))))
   (g$cdadar$5151$19h1md
     g$cdadar$5344$19h1md
     (case-lambda
       ((g$x$5206$19h1md) (g$cdadr$5138$19h1md (car g$x$5206$19h1md)))))
   (g$cdaddr$5152$19h1md
     g$cdaddr$5345$19h1md
     (case-lambda
       ((g$x$5207$19h1md) (g$cdadr$5138$19h1md (cdr g$x$5207$19h1md)))))
   (g$cddaar$5153$19h1md
     g$cddaar$5346$19h1md
     (case-lambda
       ((g$x$5208$19h1md) (g$cddar$5139$19h1md (car g$x$5208$19h1md)))))
   (g$cddadr$5154$19h1md
     g$cddadr$5347$19h1md
     (case-lambda
       ((g$x$5209$19h1md) (g$cddar$5139$19h1md (cdr g$x$5209$19h1md)))))
   (g$cdddar$5155$19h1md
     g$cdddar$5348$19h1md
     (case-lambda
       ((g$x$5210$19h1md) (g$cdddr$5140$19h1md (car g$x$5210$19h1md)))))
   (g$cddddr$5156$19h1md
     g$cddddr$5349$19h1md
     (case-lambda
       ((g$x$5211$19h1md) (g$cdddr$5140$19h1md (cdr g$x$5211$19h1md)))))
   (g$string=?$5163$19h1md
     g$string=?$5350$19h1md
     (case-lambda
       ((g$a$5212$19h1md g$b$5213$19h1md . g$rest$5214$19h1md)
        (begin
          (if (not (string? g$a$5212$19h1md))
            (assertion-violation 'string=? '"not a string" g$a$5212$19h1md)
            (void))
          (if (not (string? g$b$5213$19h1md))
            (assertion-violation 'string=? '"not a string" g$b$5213$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$5215$19h1md)
               (if (not (string? g$x$5215$19h1md))
                 (assertion-violation 'string=? '"not a string" g$x$5215$19h1md)
                 (void))))
            g$rest$5214$19h1md)
          ((letrec ((g$f$5216$19h1md
                      (case-lambda
                        ((g$a$5217$19h1md g$b$5218$19h1md g$rest$5219$19h1md)
                         (if (null? g$rest$5219$19h1md)
                           (= (string-compare g$a$5217$19h1md g$b$5218$19h1md)
                              '0)
                           (if (= (string-compare
                                    g$a$5217$19h1md
                                    g$b$5218$19h1md)
                                  '0)
                             (begin
                               '#f
                               (g$f$5216$19h1md
                                 g$b$5218$19h1md
                                 (car g$rest$5219$19h1md)
                                 (cdr g$rest$5219$19h1md)))
                             '#f))))))
             g$f$5216$19h1md)
           g$a$5212$19h1md
           g$b$5213$19h1md
           g$rest$5214$19h1md)))))
   (g$string<?$5164$19h1md
     g$string<?$5351$19h1md
     (case-lambda
       ((g$a$5220$19h1md g$b$5221$19h1md . g$rest$5222$19h1md)
        (begin
          (if (not (string? g$a$5220$19h1md))
            (assertion-violation 'string<? '"not a string" g$a$5220$19h1md)
            (void))
          (if (not (string? g$b$5221$19h1md))
            (assertion-violation 'string<? '"not a string" g$b$5221$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$5223$19h1md)
               (if (not (string? g$x$5223$19h1md))
                 (assertion-violation 'string<? '"not a string" g$x$5223$19h1md)
                 (void))))
            g$rest$5222$19h1md)
          ((letrec ((g$f$5224$19h1md
                      (case-lambda
                        ((g$a$5225$19h1md g$b$5226$19h1md g$rest$5227$19h1md)
                         (if (null? g$rest$5227$19h1md)
                           (< (string-compare g$a$5225$19h1md g$b$5226$19h1md)
                              '0)
                           (if (< (string-compare
                                    g$a$5225$19h1md
                                    g$b$5226$19h1md)
                                  '0)
                             (begin
                               '#f
                               (g$f$5224$19h1md
                                 g$b$5226$19h1md
                                 (car g$rest$5227$19h1md)
                                 (cdr g$rest$5227$19h1md)))
                             '#f))))))
             g$f$5224$19h1md)
           g$a$5220$19h1md
           g$b$5221$19h1md
           g$rest$5222$19h1md)))))
   (g$string>?$5165$19h1md
     g$string>?$5352$19h1md
     (case-lambda
       ((g$a$5228$19h1md g$b$5229$19h1md . g$rest$5230$19h1md)
        (begin
          (if (not (string? g$a$5228$19h1md))
            (assertion-violation 'string>? '"not a string" g$a$5228$19h1md)
            (void))
          (if (not (string? g$b$5229$19h1md))
            (assertion-violation 'string>? '"not a string" g$b$5229$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$5231$19h1md)
               (if (not (string? g$x$5231$19h1md))
                 (assertion-violation 'string>? '"not a string" g$x$5231$19h1md)
                 (void))))
            g$rest$5230$19h1md)
          ((letrec ((g$f$5232$19h1md
                      (case-lambda
                        ((g$a$5233$19h1md g$b$5234$19h1md g$rest$5235$19h1md)
                         (if (null? g$rest$5235$19h1md)
                           (> (string-compare g$a$5233$19h1md g$b$5234$19h1md)
                              '0)
                           (if (> (string-compare
                                    g$a$5233$19h1md
                                    g$b$5234$19h1md)
                                  '0)
                             (begin
                               '#f
                               (g$f$5232$19h1md
                                 g$b$5234$19h1md
                                 (car g$rest$5235$19h1md)
                                 (cdr g$rest$5235$19h1md)))
                             '#f))))))
             g$f$5232$19h1md)
           g$a$5228$19h1md
           g$b$5229$19h1md
           g$rest$5230$19h1md)))))
   (g$string<=?$5166$19h1md
     g$string<=?$5353$19h1md
     (case-lambda
       ((g$a$5236$19h1md g$b$5237$19h1md . g$rest$5238$19h1md)
        (begin
          (if (not (string? g$a$5236$19h1md))
            (assertion-violation 'string<=? '"not a string" g$a$5236$19h1md)
            (void))
          (if (not (string? g$b$5237$19h1md))
            (assertion-violation 'string<=? '"not a string" g$b$5237$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$5239$19h1md)
               (if (not (string? g$x$5239$19h1md))
                 (assertion-violation
                   'string<=?
                   '"not a string"
                   g$x$5239$19h1md)
                 (void))))
            g$rest$5238$19h1md)
          ((letrec ((g$f$5240$19h1md
                      (case-lambda
                        ((g$a$5241$19h1md g$b$5242$19h1md g$rest$5243$19h1md)
                         (if (null? g$rest$5243$19h1md)
                           (<= (string-compare g$a$5241$19h1md g$b$5242$19h1md)
                               '0)
                           (if (<= (string-compare
                                     g$a$5241$19h1md
                                     g$b$5242$19h1md)
                                   '0)
                             (begin
                               '#f
                               (g$f$5240$19h1md
                                 g$b$5242$19h1md
                                 (car g$rest$5243$19h1md)
                                 (cdr g$rest$5243$19h1md)))
                             '#f))))))
             g$f$5240$19h1md)
           g$a$5236$19h1md
           g$b$5237$19h1md
           g$rest$5238$19h1md)))))
   (g$string>=?$5167$19h1md
     g$string>=?$5354$19h1md
     (case-lambda
       ((g$a$5244$19h1md g$b$5245$19h1md . g$rest$5246$19h1md)
        (begin
          (if (not (string? g$a$5244$19h1md))
            (assertion-violation 'string>=? '"not a string" g$a$5244$19h1md)
            (void))
          (if (not (string? g$b$5245$19h1md))
            (assertion-violation 'string>=? '"not a string" g$b$5245$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$5247$19h1md)
               (if (not (string? g$x$5247$19h1md))
                 (assertion-violation
                   'string>=?
                   '"not a string"
                   g$x$5247$19h1md)
                 (void))))
            g$rest$5246$19h1md)
          ((letrec ((g$f$5248$19h1md
                      (case-lambda
                        ((g$a$5249$19h1md g$b$5250$19h1md g$rest$5251$19h1md)
                         (if (null? g$rest$5251$19h1md)
                           (>= (string-compare g$a$5249$19h1md g$b$5250$19h1md)
                               '0)
                           (if (>= (string-compare
                                     g$a$5249$19h1md
                                     g$b$5250$19h1md)
                                   '0)
                             (begin
                               '#f
                               (g$f$5248$19h1md
                                 g$b$5250$19h1md
                                 (car g$rest$5251$19h1md)
                                 (cdr g$rest$5251$19h1md)))
                             '#f))))))
             g$f$5248$19h1md)
           g$a$5244$19h1md
           g$b$5245$19h1md
           g$rest$5246$19h1md)))))
   (g$symbol=?$5168$19h1md
     g$symbol=?$5355$19h1md
     (case-lambda
       ((g$a$5252$19h1md g$b$5253$19h1md . g$rest$5254$19h1md)
        (begin
          (if (not (symbol? g$a$5252$19h1md))
            (assertion-violation 'symbol=? '"not a symbol" g$a$5252$19h1md)
            (void))
          (if (not (symbol? g$b$5253$19h1md))
            (assertion-violation 'symbol=? '"not a symbol" g$b$5253$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$5255$19h1md)
               (if (not (symbol? g$x$5255$19h1md))
                 (assertion-violation 'symbol=? '"not a symbol" g$x$5255$19h1md)
                 (void))))
            g$rest$5254$19h1md)
          ((letrec ((g$f$5256$19h1md
                      (case-lambda
                        ((g$a$5257$19h1md g$b$5258$19h1md g$rest$5259$19h1md)
                         (if (null? g$rest$5259$19h1md)
                           (eq? g$a$5257$19h1md g$b$5258$19h1md)
                           (if (eq? g$a$5257$19h1md g$b$5258$19h1md)
                             (begin
                               '#f
                               (g$f$5256$19h1md
                                 g$b$5258$19h1md
                                 (car g$rest$5259$19h1md)
                                 (cdr g$rest$5259$19h1md)))
                             '#f))))))
             g$f$5256$19h1md)
           g$a$5252$19h1md
           g$b$5253$19h1md
           g$rest$5254$19h1md)))))
   (g$boolean=?$5169$19h1md
     g$boolean=?$5356$19h1md
     (case-lambda
       ((g$a$5260$19h1md g$b$5261$19h1md . g$rest$5262$19h1md)
        (begin
          (if (not (boolean? g$a$5260$19h1md))
            (assertion-violation 'boolean=? '"not a boolean" g$a$5260$19h1md)
            (void))
          (if (not (boolean? g$b$5261$19h1md))
            (assertion-violation 'boolean=? '"not a boolean" g$b$5261$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$5263$19h1md)
               (if (not (boolean? g$x$5263$19h1md))
                 (assertion-violation
                   'boolean=?
                   '"not a boolean"
                   g$x$5263$19h1md)
                 (void))))
            g$rest$5262$19h1md)
          ((letrec ((g$f$5264$19h1md
                      (case-lambda
                        ((g$a$5265$19h1md g$b$5266$19h1md g$rest$5267$19h1md)
                         (if (null? g$rest$5267$19h1md)
                           (eq? g$a$5265$19h1md g$b$5266$19h1md)
                           (if (eq? g$a$5265$19h1md g$b$5266$19h1md)
                             (begin
                               '#f
                               (g$f$5264$19h1md
                                 g$b$5266$19h1md
                                 (car g$rest$5267$19h1md)
                                 (cdr g$rest$5267$19h1md)))
                             '#f))))))
             g$f$5264$19h1md)
           g$a$5260$19h1md
           g$b$5261$19h1md
           g$rest$5262$19h1md)))))
   (g$char=?$5176$19h1md
     g$char=?$5357$19h1md
     (case-lambda
       ((g$a$5268$19h1md g$b$5269$19h1md . g$rest$5270$19h1md)
        (begin
          (if (not (char? g$a$5268$19h1md))
            (assertion-violation 'char=? '"not a char" g$a$5268$19h1md)
            (void))
          (if (not (char? g$b$5269$19h1md))
            (assertion-violation 'char=? '"not a char" g$b$5269$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$5271$19h1md)
               (if (not (char? g$x$5271$19h1md))
                 (assertion-violation 'char=? '"not a char" g$x$5271$19h1md)
                 (void))))
            g$rest$5270$19h1md)
          ((letrec ((g$f$5272$19h1md
                      (case-lambda
                        ((g$a$5273$19h1md g$b$5274$19h1md g$rest$5275$19h1md)
                         (if (null? g$rest$5275$19h1md)
                           (= (char->integer g$a$5273$19h1md)
                              (char->integer g$b$5274$19h1md))
                           (if (= (char->integer g$a$5273$19h1md)
                                  (char->integer g$b$5274$19h1md))
                             (begin
                               '#f
                               (g$f$5272$19h1md
                                 g$b$5274$19h1md
                                 (car g$rest$5275$19h1md)
                                 (cdr g$rest$5275$19h1md)))
                             '#f))))))
             g$f$5272$19h1md)
           g$a$5268$19h1md
           g$b$5269$19h1md
           g$rest$5270$19h1md)))))
   (g$char<?$5177$19h1md
     g$char<?$5358$19h1md
     (case-lambda
       ((g$a$5276$19h1md g$b$5277$19h1md . g$rest$5278$19h1md)
        (begin
          (if (not (char? g$a$5276$19h1md))
            (assertion-violation 'char<? '"not a char" g$a$5276$19h1md)
            (void))
          (if (not (char? g$b$5277$19h1md))
            (assertion-violation 'char<? '"not a char" g$b$5277$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$5279$19h1md)
               (if (not (char? g$x$5279$19h1md))
                 (assertion-violation 'char<? '"not a char" g$x$5279$19h1md)
                 (void))))
            g$rest$5278$19h1md)
          ((letrec ((g$f$5280$19h1md
                      (case-lambda
                        ((g$a$5281$19h1md g$b$5282$19h1md g$rest$5283$19h1md)
                         (if (null? g$rest$5283$19h1md)
                           (< (char->integer g$a$5281$19h1md)
                              (char->integer g$b$5282$19h1md))
                           (if (< (char->integer g$a$5281$19h1md)
                                  (char->integer g$b$5282$19h1md))
                             (begin
                               '#f
                               (g$f$5280$19h1md
                                 g$b$5282$19h1md
                                 (car g$rest$5283$19h1md)
                                 (cdr g$rest$5283$19h1md)))
                             '#f))))))
             g$f$5280$19h1md)
           g$a$5276$19h1md
           g$b$5277$19h1md
           g$rest$5278$19h1md)))))
   (g$char>?$5178$19h1md
     g$char>?$5359$19h1md
     (case-lambda
       ((g$a$5284$19h1md g$b$5285$19h1md . g$rest$5286$19h1md)
        (begin
          (if (not (char? g$a$5284$19h1md))
            (assertion-violation 'char>? '"not a char" g$a$5284$19h1md)
            (void))
          (if (not (char? g$b$5285$19h1md))
            (assertion-violation 'char>? '"not a char" g$b$5285$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$5287$19h1md)
               (if (not (char? g$x$5287$19h1md))
                 (assertion-violation 'char>? '"not a char" g$x$5287$19h1md)
                 (void))))
            g$rest$5286$19h1md)
          ((letrec ((g$f$5288$19h1md
                      (case-lambda
                        ((g$a$5289$19h1md g$b$5290$19h1md g$rest$5291$19h1md)
                         (if (null? g$rest$5291$19h1md)
                           (> (char->integer g$a$5289$19h1md)
                              (char->integer g$b$5290$19h1md))
                           (if (> (char->integer g$a$5289$19h1md)
                                  (char->integer g$b$5290$19h1md))
                             (begin
                               '#f
                               (g$f$5288$19h1md
                                 g$b$5290$19h1md
                                 (car g$rest$5291$19h1md)
                                 (cdr g$rest$5291$19h1md)))
                             '#f))))))
             g$f$5288$19h1md)
           g$a$5284$19h1md
           g$b$5285$19h1md
           g$rest$5286$19h1md)))))
   (g$char<=?$5179$19h1md
     g$char<=?$5360$19h1md
     (case-lambda
       ((g$a$5292$19h1md g$b$5293$19h1md . g$rest$5294$19h1md)
        (begin
          (if (not (char? g$a$5292$19h1md))
            (assertion-violation 'char<=? '"not a char" g$a$5292$19h1md)
            (void))
          (if (not (char? g$b$5293$19h1md))
            (assertion-violation 'char<=? '"not a char" g$b$5293$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$5295$19h1md)
               (if (not (char? g$x$5295$19h1md))
                 (assertion-violation 'char<=? '"not a char" g$x$5295$19h1md)
                 (void))))
            g$rest$5294$19h1md)
          ((letrec ((g$f$5296$19h1md
                      (case-lambda
                        ((g$a$5297$19h1md g$b$5298$19h1md g$rest$5299$19h1md)
                         (if (null? g$rest$5299$19h1md)
                           (<= (char->integer g$a$5297$19h1md)
                               (char->integer g$b$5298$19h1md))
                           (if (<= (char->integer g$a$5297$19h1md)
                                   (char->integer g$b$5298$19h1md))
                             (begin
                               '#f
                               (g$f$5296$19h1md
                                 g$b$5298$19h1md
                                 (car g$rest$5299$19h1md)
                                 (cdr g$rest$5299$19h1md)))
                             '#f))))))
             g$f$5296$19h1md)
           g$a$5292$19h1md
           g$b$5293$19h1md
           g$rest$5294$19h1md)))))
   (g$char>=?$5180$19h1md
     g$char>=?$5361$19h1md
     (case-lambda
       ((g$a$5300$19h1md g$b$5301$19h1md . g$rest$5302$19h1md)
        (begin
          (if (not (char? g$a$5300$19h1md))
            (assertion-violation 'char>=? '"not a char" g$a$5300$19h1md)
            (void))
          (if (not (char? g$b$5301$19h1md))
            (assertion-violation 'char>=? '"not a char" g$b$5301$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$5303$19h1md)
               (if (not (char? g$x$5303$19h1md))
                 (assertion-violation 'char>=? '"not a char" g$x$5303$19h1md)
                 (void))))
            g$rest$5302$19h1md)
          ((letrec ((g$f$5304$19h1md
                      (case-lambda
                        ((g$a$5305$19h1md g$b$5306$19h1md g$rest$5307$19h1md)
                         (if (null? g$rest$5307$19h1md)
                           (>= (char->integer g$a$5305$19h1md)
                               (char->integer g$b$5306$19h1md))
                           (if (>= (char->integer g$a$5305$19h1md)
                                   (char->integer g$b$5306$19h1md))
                             (begin
                               '#f
                               (g$f$5304$19h1md
                                 g$b$5306$19h1md
                                 (car g$rest$5307$19h1md)
                                 (cdr g$rest$5307$19h1md)))
                             '#f))))))
             g$f$5304$19h1md)
           g$a$5300$19h1md
           g$b$5301$19h1md
           g$rest$5302$19h1md)))))
   (g$rationalize$5181$19h1md
     g$rationalize$5362$19h1md
     (case-lambda
       ((g$x$5308$19h1md g$e$5309$19h1md)
        (if (if (infinite? g$x$5308$19h1md)
              (begin '#f (infinite? g$e$5309$19h1md))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$5310$19h1md)
              (if (if (exact? g$x$5308$19h1md)
                    (begin '#f (exact? g$e$5309$19h1md))
                    '#f)
                g$r$5310$19h1md
                (inexact g$r$5310$19h1md))))
           (apply
             /
             (g$find-ratio$5182$19h1md g$x$5308$19h1md g$e$5309$19h1md)))))))
   (g$find-ratio$5182$19h1md
     g$find-ratio$5363$19h1md
     (case-lambda
       ((g$x$5311$19h1md g$e$5312$19h1md)
        (g$find-ratio-between$5183$19h1md
          (- g$x$5311$19h1md g$e$5312$19h1md)
          (+ g$x$5311$19h1md g$e$5312$19h1md)))))
   (g$find-ratio-between$5183$19h1md
     g$find-ratio-between$5364$19h1md
     (case-lambda
       ((g$x$5313$19h1md g$y$5314$19h1md)
        (letrec* ((g$sr$5315$19h1md
                    (case-lambda
                      ((g$x$5317$19h1md g$y$5318$19h1md)
                       ((case-lambda
                          ((g$fx$5319$19h1md g$fy$5320$19h1md)
                           (if (>= g$fx$5319$19h1md g$x$5317$19h1md)
                             (list g$fx$5319$19h1md '1)
                             (if (= g$fx$5319$19h1md g$fy$5320$19h1md)
                               ((case-lambda
                                  ((g$rat$5321$19h1md)
                                   (list
                                     (+ (g$cadr$5130$19h1md g$rat$5321$19h1md)
                                        (* g$fx$5319$19h1md
                                           (car g$rat$5321$19h1md)))
                                     (car g$rat$5321$19h1md))))
                                (g$sr$5315$19h1md
                                  (/ (- g$y$5318$19h1md g$fy$5320$19h1md))
                                  (/ (- g$x$5317$19h1md g$fx$5319$19h1md))))
                               (list (+ '1 g$fx$5319$19h1md) '1)))))
                        (exact (floor g$x$5317$19h1md))
                        (exact (floor g$y$5318$19h1md)))))))
          (if (< g$y$5314$19h1md g$x$5313$19h1md)
            (g$find-ratio-between$5183$19h1md g$y$5314$19h1md g$x$5313$19h1md)
            (if (>= g$x$5313$19h1md g$y$5314$19h1md)
              (list g$x$5313$19h1md '1)
              (if (positive? g$x$5313$19h1md)
                (g$sr$5315$19h1md g$x$5313$19h1md g$y$5314$19h1md)
                (if (negative? g$y$5314$19h1md)
                  ((case-lambda
                     ((g$rat$5316$19h1md)
                      (list
                        (- (car g$rat$5316$19h1md))
                        (g$cadr$5130$19h1md g$rat$5316$19h1md))))
                   (g$sr$5315$19h1md (- g$y$5314$19h1md) (- g$x$5313$19h1md)))
                  '(0 1))))))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$5560$19h1md g$using$5595$19h1md (clr-using-internal 'system))
   (g$using$5562$19h1md
     g$using$5596$19h1md
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$5563$19h1md
     g$make-eq-hashtable$5597$19h1md
     (case-lambda
       (() (clr-new-internal 'hashtable))
       ((g$k$5574$19h1md)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$5574$19h1md)))))
   (g$make-eqv-hashtable$5564$19h1md
     g$make-eqv-hashtable$5598$19h1md
     (case-lambda
       (() (make-hashtable eqv-hash eqv?))
       ((g$k$5575$19h1md) (make-hashtable eqv-hash eqv? g$k$5575$19h1md))))
   (g$hashtable-size$5565$19h1md
     g$hashtable-size$5599$19h1md
     (case-lambda
       ((g$ht$5576$19h1md)
        (clr-call-internal 'hashtable 'get_count g$ht$5576$19h1md))))
   (g$hashtable-ref$5566$19h1md
     g$hashtable-ref$5600$19h1md
     (case-lambda
       ((g$ht$5577$19h1md g$key$5578$19h1md g$default$5579$19h1md)
        (letrec* ((g$r$5580$19h1md
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$5577$19h1md
                      g$key$5578$19h1md)))
          (if (not (null? g$r$5580$19h1md))
            g$r$5580$19h1md
            g$default$5579$19h1md)))))
   (g$hashtable-set!$5567$19h1md
     g$hashtable-set!$5601$19h1md
     (case-lambda
       ((g$ht$5581$19h1md g$key$5582$19h1md g$obj$5583$19h1md)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$5581$19h1md
          g$key$5582$19h1md
          g$obj$5583$19h1md))))
   (g$hashtable-delete!$5568$19h1md
     g$hashtable-delete!$5602$19h1md
     (case-lambda
       ((g$ht$5584$19h1md g$key$5585$19h1md)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$5584$19h1md
          g$key$5585$19h1md))))
   (g$hashtable-contains?$5569$19h1md
     g$hashtable-contains?$5603$19h1md
     (case-lambda
       ((g$ht$5586$19h1md g$key$5587$19h1md)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$5586$19h1md
          g$key$5587$19h1md))))
   (g$hashtable-update!$5570$19h1md
     g$hashtable-update!$5604$19h1md
     (case-lambda
       ((g$ht$5588$19h1md
          g$key$5589$19h1md
          g$proc$5590$19h1md
          g$default$5591$19h1md)
        (g$hashtable-set!$5567$19h1md
          g$ht$5588$19h1md
          g$key$5589$19h1md
          (g$proc$5590$19h1md
            (g$hashtable-ref$5566$19h1md
              g$ht$5588$19h1md
              g$key$5589$19h1md
              g$default$5591$19h1md))))))
   (g$hashtable-clear!$5571$19h1md
     g$hashtable-clear!$5605$19h1md
     (case-lambda
       ((g$ht$5592$19h1md)
        (clr-call-internal 'hashtable 'clear g$ht$5592$19h1md))
       ((g$ht$5593$19h1md g$k$5594$19h1md)
        (clr-call-internal 'hashtable 'clear g$ht$5593$19h1md))))
   (g$clear-usings$5573$19h1md
     g$clear-usings$5606$19h1md
     (clr-clear-usings-internal)))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$5608$19h1md
     g$using$5674$19h1md
     (clr-using-internal 'system.io))
   (g$file-exists?$5609$19h1md
     g$file-exists?$5675$19h1md
     (case-lambda
       ((g$fn$5637$19h1md)
        (clr-call-internal 'file 'exists '() g$fn$5637$19h1md))))
   (g$delete-file$5610$19h1md
     g$delete-file$5676$19h1md
     (case-lambda
       ((g$fn$5638$19h1md)
        (clr-call-internal 'file 'delete '() g$fn$5638$19h1md))))
   (g$file-copy$5611$19h1md
     g$file-copy$5677$19h1md
     (case-lambda
       ((g$from$5639$19h1md g$to$5640$19h1md)
        (g$file-copy$5611$19h1md g$from$5639$19h1md g$to$5640$19h1md '#f))
       ((g$from$5641$19h1md g$to$5642$19h1md g$overwrite?$5643$19h1md)
        (clr-call-internal
          'file
          'copy
          '()
          g$from$5641$19h1md
          g$to$5642$19h1md
          g$overwrite?$5643$19h1md))))
   (g$file-move$5612$19h1md
     g$file-move$5678$19h1md
     (case-lambda
       ((g$from$5644$19h1md g$to$5645$19h1md)
        (clr-call-internal
          'file
          'move
          '()
          g$from$5644$19h1md
          g$to$5645$19h1md))))
   (g$file-create-time$5613$19h1md
     g$file-create-time$5679$19h1md
     (case-lambda
       ((g$fn$5646$19h1md)
        (clr-call-internal 'file 'getcreationtime '() g$fn$5646$19h1md))))
   (g$file-access-time$5614$19h1md
     g$file-access-time$5680$19h1md
     (case-lambda
       ((g$fn$5647$19h1md)
        (clr-call-internal 'file 'getlastaccesstime '() g$fn$5647$19h1md))))
   (g$file-modified-time$5615$19h1md
     g$file-modified-time$5681$19h1md
     (case-lambda
       ((g$fn$5648$19h1md)
        (clr-call-internal 'file 'getlastwritetime '() g$fn$5648$19h1md))))
   (g$directory-exists?$5616$19h1md
     g$directory-exists?$5682$19h1md
     (case-lambda
       ((g$fn$5649$19h1md)
        (clr-call-internal 'directory 'exists '() g$fn$5649$19h1md))))
   (g$delete-directory$5617$19h1md
     g$delete-directory$5683$19h1md
     (case-lambda
       ((g$dir$5650$19h1md)
        (g$delete-directory$5617$19h1md g$dir$5650$19h1md '#f))
       ((g$dir$5651$19h1md g$recursive?$5652$19h1md)
        (clr-call-internal
          'directory
          'delete
          '()
          g$dir$5651$19h1md
          g$recursive?$5652$19h1md))))
   (g$directory-move$5618$19h1md
     g$directory-move$5684$19h1md
     (case-lambda
       ((g$from$5653$19h1md g$to$5654$19h1md)
        (clr-call-internal
          'directory
          'move
          '()
          g$from$5653$19h1md
          g$to$5654$19h1md))))
   (g$create-directory$5619$19h1md
     g$create-directory$5685$19h1md
     (case-lambda
       ((g$name$5655$19h1md)
        (clr-call-internal
          'directory
          'createdirectory
          '()
          g$name$5655$19h1md))))
   (g$get-files$5620$19h1md
     g$get-files$5686$19h1md
     (case-lambda
       ((g$dir$5656$19h1md) (g$get-files$5620$19h1md g$dir$5656$19h1md '"*"))
       ((g$dir$5657$19h1md g$pattern$5658$19h1md)
        (clr-call-internal
          'directory
          'getfiles
          '()
          g$dir$5657$19h1md
          g$pattern$5658$19h1md))))
   (g$get-directories$5621$19h1md
     g$get-directories$5687$19h1md
     (case-lambda
       ((g$dir$5659$19h1md)
        (g$get-directories$5621$19h1md g$dir$5659$19h1md '"*"))
       ((g$dir$5660$19h1md g$pattern$5661$19h1md)
        (clr-call-internal
          'directory
          'getdirectories
          '()
          g$dir$5660$19h1md
          g$pattern$5661$19h1md))))
   (g$change-extension$5622$19h1md
     g$change-extension$5688$19h1md
     (case-lambda
       ((g$path$5662$19h1md g$extension$5663$19h1md)
        (clr-call-internal
          'path
          'changeextension
          '()
          g$path$5662$19h1md
          g$extension$5663$19h1md))))
   (g$path-combine$5623$19h1md
     g$path-combine$5689$19h1md
     (case-lambda
       ((g$path1$5664$19h1md g$path2$5665$19h1md)
        (clr-call-internal
          'path
          'combine
          '()
          g$path1$5664$19h1md
          g$path2$5665$19h1md))))
   (g$get-directory-name$5624$19h1md
     g$get-directory-name$5690$19h1md
     (case-lambda
       ((g$path$5666$19h1md)
        (clr-call-internal 'path 'getdirectoryname '() g$path$5666$19h1md))))
   (g$get-extension$5625$19h1md
     g$get-extension$5691$19h1md
     (case-lambda
       ((g$path$5667$19h1md)
        (clr-call-internal 'path 'getextension '() g$path$5667$19h1md))))
   (g$get-filename$5626$19h1md
     g$get-filename$5692$19h1md
     (case-lambda
       ((g$path$5668$19h1md)
        (clr-call-internal 'path 'getfilename '() g$path$5668$19h1md))))
   (g$get-filename-without-extension$5627$19h1md
     g$get-filename-without-extension$5693$19h1md
     (case-lambda
       ((g$path$5669$19h1md)
        (clr-call-internal
          'path
          'getfilenamewithoutextension
          '()
          g$path$5669$19h1md))))
   (g$get-full-path$5628$19h1md
     g$get-full-path$5694$19h1md
     (case-lambda
       ((g$path$5670$19h1md)
        (clr-call-internal 'path 'getfullpath '() g$path$5670$19h1md))))
   (g$get-path-root$5629$19h1md
     g$get-path-root$5695$19h1md
     (case-lambda
       ((g$path$5671$19h1md)
        (clr-call-internal 'path 'getpathroot '() g$path$5671$19h1md))))
   (g$get-random-filename$5630$19h1md
     g$get-random-filename$5696$19h1md
     (case-lambda (() (clr-call-internal 'path 'getrandomfilename '()))))
   (g$get-temp-filename$5631$19h1md
     g$get-temp-filename$5697$19h1md
     (case-lambda (() (clr-call-internal 'path 'gettempfilename '()))))
   (g$get-temp-path$5632$19h1md
     g$get-temp-path$5698$19h1md
     (case-lambda (() (clr-call-internal 'path 'gettemppath '()))))
   (g$path-rooted?$5633$19h1md
     g$path-rooted?$5699$19h1md
     (case-lambda
       ((g$path$5672$19h1md)
        (clr-call-internal 'path 'ispathrooted '() g$path$5672$19h1md))))
   (g$path-has-extension?$5634$19h1md
     g$path-has-extension?$5700$19h1md
     (case-lambda
       ((g$path$5673$19h1md)
        (clr-call-internal 'path 'hasextension '() g$path$5673$19h1md))))
   (g$clear-usings$5636$19h1md
     g$clear-usings$5701$19h1md
     (clr-clear-usings-internal)))
  (void))

(library-letrec* (ironscheme lists)
  ((g$find$5702$19h1md
     g$find$5793$19h1md
     (case-lambda
       ((g$proc$5721$19h1md g$l$5722$19h1md)
        (if (null? g$l$5722$19h1md)
          '#f
          ((case-lambda
             ((g$e$5723$19h1md)
              (if (g$proc$5721$19h1md g$e$5723$19h1md)
                g$e$5723$19h1md
                (g$find$5702$19h1md g$proc$5721$19h1md (cdr g$l$5722$19h1md)))))
           (car g$l$5722$19h1md))))))
   (g$partition$5703$19h1md
     g$partition$5794$19h1md
     (case-lambda
       ((g$proc$5724$19h1md g$l$5725$19h1md)
        ((letrec ((g$f$5726$19h1md
                    (case-lambda
                      ((g$l$5727$19h1md g$a$5728$19h1md g$b$5729$19h1md)
                       (if (null? g$l$5727$19h1md)
                         (values
                           (reverse! g$a$5728$19h1md)
                           (reverse! g$b$5729$19h1md))
                         ((case-lambda
                            ((g$e$5730$19h1md)
                             (if (g$proc$5724$19h1md g$e$5730$19h1md)
                               (g$f$5726$19h1md
                                 (cdr g$l$5727$19h1md)
                                 (cons g$e$5730$19h1md g$a$5728$19h1md)
                                 g$b$5729$19h1md)
                               (g$f$5726$19h1md
                                 (cdr g$l$5727$19h1md)
                                 g$a$5728$19h1md
                                 (cons g$e$5730$19h1md g$b$5729$19h1md)))))
                          (car g$l$5727$19h1md)))))))
           g$f$5726$19h1md)
         g$l$5725$19h1md
         '()
         '()))))
   (g$remp$5704$19h1md
     g$remp$5795$19h1md
     (case-lambda
       ((g$proc$5731$19h1md g$l$5732$19h1md)
        ((letrec ((g$f$5733$19h1md
                    (case-lambda
                      ((g$l$5734$19h1md g$a$5735$19h1md)
                       (if (null? g$l$5734$19h1md)
                         (reverse! g$a$5735$19h1md)
                         ((case-lambda
                            ((g$e$5736$19h1md)
                             (if (g$proc$5731$19h1md g$e$5736$19h1md)
                               (g$f$5733$19h1md
                                 (cdr g$l$5734$19h1md)
                                 g$a$5735$19h1md)
                               (g$f$5733$19h1md
                                 (cdr g$l$5734$19h1md)
                                 (cons g$e$5736$19h1md g$a$5735$19h1md)))))
                          (car g$l$5734$19h1md)))))))
           g$f$5733$19h1md)
         g$l$5732$19h1md
         '()))))
   (g$filter$5705$19h1md
     g$filter$5796$19h1md
     (case-lambda
       ((g$proc$5737$19h1md g$l$5738$19h1md)
        ((letrec ((g$f$5739$19h1md
                    (case-lambda
                      ((g$l$5740$19h1md g$a$5741$19h1md)
                       (if (null? g$l$5740$19h1md)
                         (reverse! g$a$5741$19h1md)
                         ((case-lambda
                            ((g$e$5742$19h1md)
                             (if (g$proc$5737$19h1md g$e$5742$19h1md)
                               (g$f$5739$19h1md
                                 (cdr g$l$5740$19h1md)
                                 (cons g$e$5742$19h1md g$a$5741$19h1md))
                               (g$f$5739$19h1md
                                 (cdr g$l$5740$19h1md)
                                 g$a$5741$19h1md))))
                          (car g$l$5740$19h1md)))))))
           g$f$5739$19h1md)
         g$l$5738$19h1md
         '()))))
   (g$assv$5706$19h1md
     g$assv$5797$19h1md
     (case-lambda
       ((g$obj$5743$19h1md g$lst$5744$19h1md)
        (if (null? g$lst$5744$19h1md)
          '#f
          ((case-lambda
             ((g$c$5745$19h1md)
              (if (eqv? g$obj$5743$19h1md (car g$c$5745$19h1md))
                g$c$5745$19h1md
                (g$assv$5706$19h1md
                  g$obj$5743$19h1md
                  (cdr g$lst$5744$19h1md)))))
           (car g$lst$5744$19h1md))))))
   (g$assoc$5707$19h1md
     g$assoc$5798$19h1md
     (case-lambda
       ((g$obj$5746$19h1md g$lst$5747$19h1md)
        (if (null? g$lst$5747$19h1md)
          '#f
          ((case-lambda
             ((g$c$5748$19h1md)
              (if (equal? g$obj$5746$19h1md (car g$c$5748$19h1md))
                g$c$5748$19h1md
                (g$assoc$5707$19h1md
                  g$obj$5746$19h1md
                  (cdr g$lst$5747$19h1md)))))
           (car g$lst$5747$19h1md))))))
   (g$assp$5708$19h1md
     g$assp$5799$19h1md
     (case-lambda
       ((g$p?$5749$19h1md g$lst$5750$19h1md)
        (if (null? g$lst$5750$19h1md)
          '#f
          ((case-lambda
             ((g$c$5751$19h1md)
              (if (g$p?$5749$19h1md (car g$c$5751$19h1md))
                g$c$5751$19h1md
                (g$assp$5708$19h1md g$p?$5749$19h1md (cdr g$lst$5750$19h1md)))))
           (car g$lst$5750$19h1md))))))
   (g$member$5709$19h1md
     g$member$5800$19h1md
     (case-lambda
       ((g$obj$5752$19h1md g$lst$5753$19h1md)
        (if (null? g$lst$5753$19h1md)
          '#f
          (if (equal? g$obj$5752$19h1md (car g$lst$5753$19h1md))
            g$lst$5753$19h1md
            (g$member$5709$19h1md
              g$obj$5752$19h1md
              (cdr g$lst$5753$19h1md)))))))
   (g$memp$5710$19h1md
     g$memp$5801$19h1md
     (case-lambda
       ((g$p?$5754$19h1md g$lst$5755$19h1md)
        (if (null? g$lst$5755$19h1md)
          '#f
          (if (g$p?$5754$19h1md (car g$lst$5755$19h1md))
            g$lst$5755$19h1md
            (g$memp$5710$19h1md g$p?$5754$19h1md (cdr g$lst$5755$19h1md)))))))
   (g$all-empty?$5711$19h1md
     g$all-empty?$5802$19h1md
     (case-lambda
       ((g$ls$5756$19h1md)
        ((case-lambda
           ((g$t$5757$19h1md)
            (if g$t$5757$19h1md
              g$t$5757$19h1md
              (begin
                '#f
                (if (null? (car g$ls$5756$19h1md))
                  (begin '#f (g$all-empty?$5711$19h1md (cdr g$ls$5756$19h1md)))
                  '#f)))))
         (null? g$ls$5756$19h1md)))))
   (g$split$5712$19h1md
     g$split$5803$19h1md
     (case-lambda
       ((g$ls$5758$19h1md)
        (if (null? g$ls$5758$19h1md)
          (values '() '())
          (call-with-values
            (case-lambda (() (g$split$5712$19h1md (cdr g$ls$5758$19h1md))))
            (case-lambda
              ((g$cars$5759$19h1md g$cdrs$5760$19h1md)
               ((case-lambda
                  ((g$a$5761$19h1md)
                   (values
                     (cons (car g$a$5761$19h1md) g$cars$5759$19h1md)
                     (cons (cdr g$a$5761$19h1md) g$cdrs$5760$19h1md))))
                (car g$ls$5758$19h1md)))))))))
   (g$for-all$5713$19h1md
     g$for-all$5804$19h1md
     (case-lambda
       ((g$f$5762$19h1md . g$args$5763$19h1md)
        (if (g$all-empty?$5711$19h1md g$args$5763$19h1md)
          '#t
          (call-with-values
            (case-lambda (() (g$split$5712$19h1md g$args$5763$19h1md)))
            (case-lambda
              ((g$cars$5764$19h1md g$cdrs$5765$19h1md)
               (if (g$all-empty?$5711$19h1md g$cdrs$5765$19h1md)
                 (apply g$f$5762$19h1md g$cars$5764$19h1md)
                 (if (apply g$f$5762$19h1md g$cars$5764$19h1md)
                   (begin
                     '#f
                     (apply
                       g$for-all$5713$19h1md
                       g$f$5762$19h1md
                       g$cdrs$5765$19h1md))
                   '#f)))))))))
   (g$exists$5714$19h1md
     g$exists$5805$19h1md
     (case-lambda
       ((g$f$5766$19h1md . g$args$5767$19h1md)
        (if (g$all-empty?$5711$19h1md g$args$5767$19h1md)
          '#f
          (call-with-values
            (case-lambda (() (g$split$5712$19h1md g$args$5767$19h1md)))
            (case-lambda
              ((g$cars$5768$19h1md g$cdrs$5769$19h1md)
               ((case-lambda
                  ((g$t$5770$19h1md)
                   (if g$t$5770$19h1md
                     g$t$5770$19h1md
                     (begin
                       '#f
                       (apply
                         g$exists$5714$19h1md
                         g$f$5766$19h1md
                         g$cdrs$5769$19h1md)))))
                (apply g$f$5766$19h1md g$cars$5768$19h1md)))))))))
   (g$cons*$5715$19h1md
     g$cons*$5806$19h1md
     (case-lambda
       ((g$a$5771$19h1md . g$rest$5772$19h1md)
        ((letrec ((g$f$5773$19h1md
                    (case-lambda
                      ((g$a$5774$19h1md g$rest$5775$19h1md)
                       (if (null? g$rest$5775$19h1md)
                         g$a$5774$19h1md
                         (cons
                           g$a$5774$19h1md
                           (g$f$5773$19h1md
                             (car g$rest$5775$19h1md)
                             (cdr g$rest$5775$19h1md))))))))
           g$f$5773$19h1md)
         g$a$5771$19h1md
         g$rest$5772$19h1md))))
   (g$fold-left$5716$19h1md
     g$fold-left$5807$19h1md
     (case-lambda
       ((g$combine$5776$19h1md
          g$nil$5777$19h1md
          g$list1$5778$19h1md
          .
          g$lists$5779$19h1md)
        (if (null? g$list1$5778$19h1md)
          g$nil$5777$19h1md
          (apply
            g$fold-left$5716$19h1md
            (g$cons*$5715$19h1md
              g$combine$5776$19h1md
              (apply
                g$combine$5776$19h1md
                (g$cons*$5715$19h1md
                  g$nil$5777$19h1md
                  (car g$list1$5778$19h1md)
                  (map car g$lists$5779$19h1md)))
              (cdr g$list1$5778$19h1md)
              (map cdr g$lists$5779$19h1md)))))))
   (g$fold-right$5717$19h1md
     g$fold-right$5808$19h1md
     (case-lambda
       ((g$combine$5780$19h1md
          g$nil$5781$19h1md
          g$list1$5782$19h1md
          .
          g$lists$5783$19h1md)
        (if (null? g$list1$5782$19h1md)
          g$nil$5781$19h1md
          (apply
            g$combine$5780$19h1md
            (append
              (list (car g$list1$5782$19h1md))
              (map car g$lists$5783$19h1md)
              (list
                (apply
                  g$fold-right$5717$19h1md
                  (g$cons*$5715$19h1md
                    g$combine$5780$19h1md
                    g$nil$5781$19h1md
                    (cdr g$list1$5782$19h1md)
                    (map cdr g$lists$5783$19h1md))))))))))
   (g$remove$5718$19h1md
     g$remove$5809$19h1md
     (case-lambda
       ((g$obj$5784$19h1md g$list$5785$19h1md)
        (g$remp$5704$19h1md
          (case-lambda
            ((g$x$5786$19h1md) (equal? g$obj$5784$19h1md g$x$5786$19h1md)))
          g$list$5785$19h1md))))
   (g$remv$5719$19h1md
     g$remv$5810$19h1md
     (case-lambda
       ((g$obj$5787$19h1md g$list$5788$19h1md)
        (g$remp$5704$19h1md
          (case-lambda
            ((g$x$5789$19h1md) (eqv? g$obj$5787$19h1md g$x$5789$19h1md)))
          g$list$5788$19h1md))))
   (g$remq$5720$19h1md
     g$remq$5811$19h1md
     (case-lambda
       ((g$obj$5790$19h1md g$list$5791$19h1md)
        (g$remp$5704$19h1md
          (case-lambda
            ((g$x$5792$19h1md) (eq? g$obj$5790$19h1md g$x$5792$19h1md)))
          g$list$5791$19h1md)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$5812$19h1md
     g$native-endianness$5923$19h1md
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$5813$19h1md
     g$bytevector-u16-ref$5924$19h1md
     (case-lambda
       ((g$bytevector$5841$19h1md g$k$5842$19h1md g$endianness$5843$19h1md)
        (bytevector-uint-ref
          g$bytevector$5841$19h1md
          g$k$5842$19h1md
          g$endianness$5843$19h1md
          '2))))
   (g$bytevector-s16-ref$5814$19h1md
     g$bytevector-s16-ref$5925$19h1md
     (case-lambda
       ((g$bytevector$5844$19h1md g$k$5845$19h1md g$endianness$5846$19h1md)
        (bytevector-sint-ref
          g$bytevector$5844$19h1md
          g$k$5845$19h1md
          g$endianness$5846$19h1md
          '2))))
   (g$bytevector-u16-native-ref$5815$19h1md
     g$bytevector-u16-native-ref$5926$19h1md
     (case-lambda
       ((g$bytevector$5847$19h1md g$k$5848$19h1md)
        (bytevector-uint-ref
          g$bytevector$5847$19h1md
          g$k$5848$19h1md
          (g$native-endianness$5812$19h1md)
          '2))))
   (g$bytevector-s16-native-ref$5816$19h1md
     g$bytevector-s16-native-ref$5927$19h1md
     (case-lambda
       ((g$bytevector$5849$19h1md g$k$5850$19h1md)
        (bytevector-sint-ref
          g$bytevector$5849$19h1md
          g$k$5850$19h1md
          (g$native-endianness$5812$19h1md)
          '2))))
   (g$bytevector-u16-set!$5817$19h1md
     g$bytevector-u16-set!$5928$19h1md
     (case-lambda
       ((g$bytevector$5851$19h1md
          g$k$5852$19h1md
          g$n$5853$19h1md
          g$endianness$5854$19h1md)
        (bytevector-uint-set!
          g$bytevector$5851$19h1md
          g$k$5852$19h1md
          g$n$5853$19h1md
          g$endianness$5854$19h1md
          '2))))
   (g$bytevector-s16-set!$5818$19h1md
     g$bytevector-s16-set!$5929$19h1md
     (case-lambda
       ((g$bytevector$5855$19h1md
          g$k$5856$19h1md
          g$n$5857$19h1md
          g$endianness$5858$19h1md)
        (bytevector-sint-set!
          g$bytevector$5855$19h1md
          g$k$5856$19h1md
          g$n$5857$19h1md
          g$endianness$5858$19h1md
          '2))))
   (g$bytevector-u16-native-set!$5819$19h1md
     g$bytevector-u16-native-set!$5930$19h1md
     (case-lambda
       ((g$bytevector$5859$19h1md g$k$5860$19h1md g$n$5861$19h1md)
        (bytevector-uint-set!
          g$bytevector$5859$19h1md
          g$k$5860$19h1md
          g$n$5861$19h1md
          (g$native-endianness$5812$19h1md)
          '2))))
   (g$bytevector-s16-native-set!$5820$19h1md
     g$bytevector-s16-native-set!$5931$19h1md
     (case-lambda
       ((g$bytevector$5862$19h1md g$k$5863$19h1md g$n$5864$19h1md)
        (bytevector-sint-set!
          g$bytevector$5862$19h1md
          g$k$5863$19h1md
          g$n$5864$19h1md
          (g$native-endianness$5812$19h1md)
          '2))))
   (g$bytevector-u32-ref$5821$19h1md
     g$bytevector-u32-ref$5932$19h1md
     (case-lambda
       ((g$bytevector$5865$19h1md g$k$5866$19h1md g$endianness$5867$19h1md)
        (bytevector-uint-ref
          g$bytevector$5865$19h1md
          g$k$5866$19h1md
          g$endianness$5867$19h1md
          '4))))
   (g$bytevector-s32-ref$5822$19h1md
     g$bytevector-s32-ref$5933$19h1md
     (case-lambda
       ((g$bytevector$5868$19h1md g$k$5869$19h1md g$endianness$5870$19h1md)
        (bytevector-sint-ref
          g$bytevector$5868$19h1md
          g$k$5869$19h1md
          g$endianness$5870$19h1md
          '4))))
   (g$bytevector-u32-native-ref$5823$19h1md
     g$bytevector-u32-native-ref$5934$19h1md
     (case-lambda
       ((g$bytevector$5871$19h1md g$k$5872$19h1md)
        (bytevector-uint-ref
          g$bytevector$5871$19h1md
          g$k$5872$19h1md
          (g$native-endianness$5812$19h1md)
          '4))))
   (g$bytevector-s32-native-ref$5824$19h1md
     g$bytevector-s32-native-ref$5935$19h1md
     (case-lambda
       ((g$bytevector$5873$19h1md g$k$5874$19h1md)
        (bytevector-sint-ref
          g$bytevector$5873$19h1md
          g$k$5874$19h1md
          (g$native-endianness$5812$19h1md)
          '4))))
   (g$bytevector-u32-set!$5825$19h1md
     g$bytevector-u32-set!$5936$19h1md
     (case-lambda
       ((g$bytevector$5875$19h1md
          g$k$5876$19h1md
          g$n$5877$19h1md
          g$endianness$5878$19h1md)
        (bytevector-uint-set!
          g$bytevector$5875$19h1md
          g$k$5876$19h1md
          g$n$5877$19h1md
          g$endianness$5878$19h1md
          '4))))
   (g$bytevector-s32-set!$5826$19h1md
     g$bytevector-s32-set!$5937$19h1md
     (case-lambda
       ((g$bytevector$5879$19h1md
          g$k$5880$19h1md
          g$n$5881$19h1md
          g$endianness$5882$19h1md)
        (bytevector-sint-set!
          g$bytevector$5879$19h1md
          g$k$5880$19h1md
          g$n$5881$19h1md
          g$endianness$5882$19h1md
          '4))))
   (g$bytevector-u32-native-set!$5827$19h1md
     g$bytevector-u32-native-set!$5938$19h1md
     (case-lambda
       ((g$bytevector$5883$19h1md g$k$5884$19h1md g$n$5885$19h1md)
        (bytevector-uint-set!
          g$bytevector$5883$19h1md
          g$k$5884$19h1md
          g$n$5885$19h1md
          (g$native-endianness$5812$19h1md)
          '4))))
   (g$bytevector-s32-native-set!$5828$19h1md
     g$bytevector-s32-native-set!$5939$19h1md
     (case-lambda
       ((g$bytevector$5886$19h1md g$k$5887$19h1md g$n$5888$19h1md)
        (bytevector-sint-set!
          g$bytevector$5886$19h1md
          g$k$5887$19h1md
          g$n$5888$19h1md
          (g$native-endianness$5812$19h1md)
          '4))))
   (g$bytevector-u64-ref$5829$19h1md
     g$bytevector-u64-ref$5940$19h1md
     (case-lambda
       ((g$bytevector$5889$19h1md g$k$5890$19h1md g$endianness$5891$19h1md)
        (bytevector-uint-ref
          g$bytevector$5889$19h1md
          g$k$5890$19h1md
          g$endianness$5891$19h1md
          '8))))
   (g$bytevector-s64-ref$5830$19h1md
     g$bytevector-s64-ref$5941$19h1md
     (case-lambda
       ((g$bytevector$5892$19h1md g$k$5893$19h1md g$endianness$5894$19h1md)
        (bytevector-sint-ref
          g$bytevector$5892$19h1md
          g$k$5893$19h1md
          g$endianness$5894$19h1md
          '8))))
   (g$bytevector-u64-native-ref$5831$19h1md
     g$bytevector-u64-native-ref$5942$19h1md
     (case-lambda
       ((g$bytevector$5895$19h1md g$k$5896$19h1md)
        (bytevector-uint-ref
          g$bytevector$5895$19h1md
          g$k$5896$19h1md
          (g$native-endianness$5812$19h1md)
          '8))))
   (g$bytevector-s64-native-ref$5832$19h1md
     g$bytevector-s64-native-ref$5943$19h1md
     (case-lambda
       ((g$bytevector$5897$19h1md g$k$5898$19h1md)
        (bytevector-sint-ref
          g$bytevector$5897$19h1md
          g$k$5898$19h1md
          (g$native-endianness$5812$19h1md)
          '8))))
   (g$bytevector-u64-set!$5833$19h1md
     g$bytevector-u64-set!$5944$19h1md
     (case-lambda
       ((g$bytevector$5899$19h1md
          g$k$5900$19h1md
          g$n$5901$19h1md
          g$endianness$5902$19h1md)
        (bytevector-uint-set!
          g$bytevector$5899$19h1md
          g$k$5900$19h1md
          g$n$5901$19h1md
          g$endianness$5902$19h1md
          '8))))
   (g$bytevector-s64-set!$5834$19h1md
     g$bytevector-s64-set!$5945$19h1md
     (case-lambda
       ((g$bytevector$5903$19h1md
          g$k$5904$19h1md
          g$n$5905$19h1md
          g$endianness$5906$19h1md)
        (bytevector-sint-set!
          g$bytevector$5903$19h1md
          g$k$5904$19h1md
          g$n$5905$19h1md
          g$endianness$5906$19h1md
          '8))))
   (g$bytevector-u64-native-set!$5835$19h1md
     g$bytevector-u64-native-set!$5946$19h1md
     (case-lambda
       ((g$bytevector$5907$19h1md g$k$5908$19h1md g$n$5909$19h1md)
        (bytevector-uint-set!
          g$bytevector$5907$19h1md
          g$k$5908$19h1md
          g$n$5909$19h1md
          (g$native-endianness$5812$19h1md)
          '8))))
   (g$bytevector-s64-native-set!$5836$19h1md
     g$bytevector-s64-native-set!$5947$19h1md
     (case-lambda
       ((g$bytevector$5910$19h1md g$k$5911$19h1md g$n$5912$19h1md)
        (bytevector-sint-set!
          g$bytevector$5910$19h1md
          g$k$5911$19h1md
          g$n$5912$19h1md
          (g$native-endianness$5812$19h1md)
          '8))))
   (g$bytevector-ieee-single-native-ref$5837$19h1md
     g$bytevector-ieee-single-native-ref$5948$19h1md
     (case-lambda
       ((g$bytevector$5913$19h1md g$k$5914$19h1md)
        (if (not (zero? (mod g$k$5914$19h1md '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$5914$19h1md)
          (bytevector-ieee-single-ref
            g$bytevector$5913$19h1md
            g$k$5914$19h1md
            (g$native-endianness$5812$19h1md))))))
   (g$bytevector-ieee-double-native-ref$5838$19h1md
     g$bytevector-ieee-double-native-ref$5949$19h1md
     (case-lambda
       ((g$bytevector$5915$19h1md g$k$5916$19h1md)
        (if (not (zero? (mod g$k$5916$19h1md '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$5916$19h1md)
          (bytevector-ieee-double-ref
            g$bytevector$5915$19h1md
            g$k$5916$19h1md
            (g$native-endianness$5812$19h1md))))))
   (g$bytevector-ieee-single-native-set!$5839$19h1md
     g$bytevector-ieee-single-native-set!$5950$19h1md
     (case-lambda
       ((g$bytevector$5917$19h1md g$k$5918$19h1md g$x$5919$19h1md)
        (if (not (zero? (mod g$k$5918$19h1md '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$5918$19h1md)
          (bytevector-ieee-single-set!
            g$bytevector$5917$19h1md
            g$k$5918$19h1md
            g$x$5919$19h1md
            (g$native-endianness$5812$19h1md))))))
   (g$bytevector-ieee-double-native-set!$5840$19h1md
     g$bytevector-ieee-double-native-set!$5951$19h1md
     (case-lambda
       ((g$bytevector$5920$19h1md g$k$5921$19h1md g$x$5922$19h1md)
        (if (not (zero? (mod g$k$5921$19h1md '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$5921$19h1md)
          (bytevector-ieee-double-set!
            g$bytevector$5920$19h1md
            g$k$5921$19h1md
            g$x$5922$19h1md
            (g$native-endianness$5812$19h1md)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$7417$5952$19h1md
     g$7417$6047$19h1md
     (make-record-type-descriptor
       '&condition
       '#f
       'g$7420$19h1md
       '#f
       '#f
       '#()))
   (g$7419$5953$19h1md g$7419$6048$19h1md '#f)
   (g$7418$5954$19h1md
     g$7418$6049$19h1md
     (make-record-constructor-descriptor
       g$7417$5952$19h1md
       '#f
       g$7419$5953$19h1md))
   (g$&condition?$5955$19h1md
     g$&condition?$6050$19h1md
     (record-predicate g$7417$5952$19h1md))
   (g$make-&condition$5956$19h1md
     g$make-&condition$6051$19h1md
     (record-constructor g$7418$5954$19h1md))
   (g$&condition-rtd$5957$19h1md
     g$&condition-rtd$6052$19h1md
     g$7417$5952$19h1md)
   (g$&condition-rcd$5958$19h1md
     g$&condition-rcd$6053$19h1md
     g$7418$5954$19h1md)
   (g$7433$5959$19h1md
     g$7433$6054$19h1md
     (make-record-type-descriptor
       '&message
       g$7417$5952$19h1md
       'g$7436$19h1md
       '#f
       '#f
       '#((immutable message))))
   (g$7435$5960$19h1md g$7435$6055$19h1md '#f)
   (g$7434$5961$19h1md
     g$7434$6056$19h1md
     (make-record-constructor-descriptor
       g$7433$5959$19h1md
       g$7418$5954$19h1md
       g$7435$5960$19h1md))
   (g$7432$5962$19h1md
     g$7432$6057$19h1md
     (record-predicate g$7433$5959$19h1md))
   (g$make-message-condition$5963$19h1md
     g$make-message-condition$6058$19h1md
     (record-constructor g$7434$5961$19h1md))
   (g$7431$5964$19h1md
     g$7431$6059$19h1md
     (record-accessor g$7433$5959$19h1md '0))
   (g$message-condition?$5965$19h1md
     g$message-condition?$6060$19h1md
     (condition-predicate g$7433$5959$19h1md))
   (g$condition-message$5966$19h1md
     g$condition-message$6061$19h1md
     (condition-accessor g$7433$5959$19h1md g$7431$5964$19h1md))
   (g$7449$5967$19h1md
     g$7449$6062$19h1md
     (make-record-type-descriptor
       '&warning
       g$7417$5952$19h1md
       'g$7452$19h1md
       '#f
       '#f
       '#()))
   (g$7451$5968$19h1md g$7451$6063$19h1md '#f)
   (g$7450$5969$19h1md
     g$7450$6064$19h1md
     (make-record-constructor-descriptor
       g$7449$5967$19h1md
       g$7418$5954$19h1md
       g$7451$5968$19h1md))
   (g$7448$5970$19h1md
     g$7448$6065$19h1md
     (record-predicate g$7449$5967$19h1md))
   (g$make-warning$5971$19h1md
     g$make-warning$6066$19h1md
     (record-constructor g$7450$5969$19h1md))
   (g$warning?$5972$19h1md
     g$warning?$6067$19h1md
     (condition-predicate g$7449$5967$19h1md))
   (g$7463$5973$19h1md
     g$7463$6068$19h1md
     (make-record-type-descriptor
       '&serious
       g$7417$5952$19h1md
       'g$7466$19h1md
       '#f
       '#f
       '#()))
   (g$7465$5974$19h1md g$7465$6069$19h1md '#f)
   (g$7464$5975$19h1md
     g$7464$6070$19h1md
     (make-record-constructor-descriptor
       g$7463$5973$19h1md
       g$7418$5954$19h1md
       g$7465$5974$19h1md))
   (g$7462$5976$19h1md
     g$7462$6071$19h1md
     (record-predicate g$7463$5973$19h1md))
   (g$make-serious-condition$5977$19h1md
     g$make-serious-condition$6072$19h1md
     (record-constructor g$7464$5975$19h1md))
   (g$serious-condition?$5978$19h1md
     g$serious-condition?$6073$19h1md
     (condition-predicate g$7463$5973$19h1md))
   (g$7477$5979$19h1md
     g$7477$6074$19h1md
     (make-record-type-descriptor
       '&error
       g$7463$5973$19h1md
       'g$7480$19h1md
       '#f
       '#f
       '#()))
   (g$7479$5980$19h1md g$7479$6075$19h1md '#f)
   (g$7478$5981$19h1md
     g$7478$6076$19h1md
     (make-record-constructor-descriptor
       g$7477$5979$19h1md
       g$7464$5975$19h1md
       g$7479$5980$19h1md))
   (g$7476$5982$19h1md
     g$7476$6077$19h1md
     (record-predicate g$7477$5979$19h1md))
   (g$make-error$5983$19h1md
     g$make-error$6078$19h1md
     (record-constructor g$7478$5981$19h1md))
   (g$error?$5984$19h1md
     g$error?$6079$19h1md
     (condition-predicate g$7477$5979$19h1md))
   (g$7491$5985$19h1md
     g$7491$6080$19h1md
     (make-record-type-descriptor
       '&violation
       g$7463$5973$19h1md
       'g$7494$19h1md
       '#f
       '#f
       '#()))
   (g$7493$5986$19h1md g$7493$6081$19h1md '#f)
   (g$7492$5987$19h1md
     g$7492$6082$19h1md
     (make-record-constructor-descriptor
       g$7491$5985$19h1md
       g$7464$5975$19h1md
       g$7493$5986$19h1md))
   (g$7490$5988$19h1md
     g$7490$6083$19h1md
     (record-predicate g$7491$5985$19h1md))
   (g$make-violation$5989$19h1md
     g$make-violation$6084$19h1md
     (record-constructor g$7492$5987$19h1md))
   (g$violation?$5990$19h1md
     g$violation?$6085$19h1md
     (condition-predicate g$7491$5985$19h1md))
   (g$7505$5991$19h1md
     g$7505$6086$19h1md
     (make-record-type-descriptor
       '&assertion
       g$7491$5985$19h1md
       'g$7508$19h1md
       '#f
       '#f
       '#()))
   (g$7507$5992$19h1md g$7507$6087$19h1md '#f)
   (g$7506$5993$19h1md
     g$7506$6088$19h1md
     (make-record-constructor-descriptor
       g$7505$5991$19h1md
       g$7492$5987$19h1md
       g$7507$5992$19h1md))
   (g$7504$5994$19h1md
     g$7504$6089$19h1md
     (record-predicate g$7505$5991$19h1md))
   (g$make-assertion-violation$5995$19h1md
     g$make-assertion-violation$6090$19h1md
     (record-constructor g$7506$5993$19h1md))
   (g$assertion-violation?$5996$19h1md
     g$assertion-violation?$6091$19h1md
     (condition-predicate g$7505$5991$19h1md))
   (g$7520$5997$19h1md
     g$7520$6092$19h1md
     (make-record-type-descriptor
       '&irritants
       g$7417$5952$19h1md
       'g$7523$19h1md
       '#f
       '#f
       '#((immutable irritants))))
   (g$7522$5998$19h1md g$7522$6093$19h1md '#f)
   (g$7521$5999$19h1md
     g$7521$6094$19h1md
     (make-record-constructor-descriptor
       g$7520$5997$19h1md
       g$7418$5954$19h1md
       g$7522$5998$19h1md))
   (g$7519$6000$19h1md
     g$7519$6095$19h1md
     (record-predicate g$7520$5997$19h1md))
   (g$make-irritants-condition$6001$19h1md
     g$make-irritants-condition$6096$19h1md
     (record-constructor g$7521$5999$19h1md))
   (g$7518$6002$19h1md
     g$7518$6097$19h1md
     (record-accessor g$7520$5997$19h1md '0))
   (g$irritants-condition?$6003$19h1md
     g$irritants-condition?$6098$19h1md
     (condition-predicate g$7520$5997$19h1md))
   (g$condition-irritants$6004$19h1md
     g$condition-irritants$6099$19h1md
     (condition-accessor g$7520$5997$19h1md g$7518$6002$19h1md))
   (g$7537$6005$19h1md
     g$7537$6100$19h1md
     (make-record-type-descriptor
       '&who
       g$7417$5952$19h1md
       'g$7540$19h1md
       '#f
       '#f
       '#((immutable who))))
   (g$7539$6006$19h1md g$7539$6101$19h1md '#f)
   (g$7538$6007$19h1md
     g$7538$6102$19h1md
     (make-record-constructor-descriptor
       g$7537$6005$19h1md
       g$7418$5954$19h1md
       g$7539$6006$19h1md))
   (g$7536$6008$19h1md
     g$7536$6103$19h1md
     (record-predicate g$7537$6005$19h1md))
   (g$make-who-condition$6009$19h1md
     g$make-who-condition$6104$19h1md
     (record-constructor g$7538$6007$19h1md))
   (g$7535$6010$19h1md
     g$7535$6105$19h1md
     (record-accessor g$7537$6005$19h1md '0))
   (g$who-condition?$6011$19h1md
     g$who-condition?$6106$19h1md
     (condition-predicate g$7537$6005$19h1md))
   (g$condition-who$6012$19h1md
     g$condition-who$6107$19h1md
     (condition-accessor g$7537$6005$19h1md g$7535$6010$19h1md))
   (g$7553$6013$19h1md
     g$7553$6108$19h1md
     (make-record-type-descriptor
       '&non-continuable
       g$7491$5985$19h1md
       'g$7556$19h1md
       '#f
       '#f
       '#()))
   (g$7555$6014$19h1md g$7555$6109$19h1md '#f)
   (g$7554$6015$19h1md
     g$7554$6110$19h1md
     (make-record-constructor-descriptor
       g$7553$6013$19h1md
       g$7492$5987$19h1md
       g$7555$6014$19h1md))
   (g$7552$6016$19h1md
     g$7552$6111$19h1md
     (record-predicate g$7553$6013$19h1md))
   (g$make-non-continuable-violation$6017$19h1md
     g$make-non-continuable-violation$6112$19h1md
     (record-constructor g$7554$6015$19h1md))
   (g$non-continuable-violation?$6018$19h1md
     g$non-continuable-violation?$6113$19h1md
     (condition-predicate g$7553$6013$19h1md))
   (g$7567$6019$19h1md
     g$7567$6114$19h1md
     (make-record-type-descriptor
       '&implementation-restriction
       g$7491$5985$19h1md
       'g$7570$19h1md
       '#f
       '#f
       '#()))
   (g$7569$6020$19h1md g$7569$6115$19h1md '#f)
   (g$7568$6021$19h1md
     g$7568$6116$19h1md
     (make-record-constructor-descriptor
       g$7567$6019$19h1md
       g$7492$5987$19h1md
       g$7569$6020$19h1md))
   (g$7566$6022$19h1md
     g$7566$6117$19h1md
     (record-predicate g$7567$6019$19h1md))
   (g$make-implementation-restriction-violation$6023$19h1md
     g$make-implementation-restriction-violation$6118$19h1md
     (record-constructor g$7568$6021$19h1md))
   (g$implementation-restriction-violation?$6024$19h1md
     g$implementation-restriction-violation?$6119$19h1md
     (condition-predicate g$7567$6019$19h1md))
   (g$7581$6025$19h1md
     g$7581$6120$19h1md
     (make-record-type-descriptor
       '&lexical
       g$7491$5985$19h1md
       'g$7584$19h1md
       '#f
       '#f
       '#()))
   (g$7583$6026$19h1md g$7583$6121$19h1md '#f)
   (g$7582$6027$19h1md
     g$7582$6122$19h1md
     (make-record-constructor-descriptor
       g$7581$6025$19h1md
       g$7492$5987$19h1md
       g$7583$6026$19h1md))
   (g$7580$6028$19h1md
     g$7580$6123$19h1md
     (record-predicate g$7581$6025$19h1md))
   (g$make-lexical-violation$6029$19h1md
     g$make-lexical-violation$6124$19h1md
     (record-constructor g$7582$6027$19h1md))
   (g$lexical-violation?$6030$19h1md
     g$lexical-violation?$6125$19h1md
     (condition-predicate g$7581$6025$19h1md))
   (g$7597$6031$19h1md
     g$7597$6126$19h1md
     (make-record-type-descriptor
       '&syntax
       g$7491$5985$19h1md
       'g$7600$19h1md
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$7599$6032$19h1md g$7599$6127$19h1md '#f)
   (g$7598$6033$19h1md
     g$7598$6128$19h1md
     (make-record-constructor-descriptor
       g$7597$6031$19h1md
       g$7492$5987$19h1md
       g$7599$6032$19h1md))
   (g$7596$6034$19h1md
     g$7596$6129$19h1md
     (record-predicate g$7597$6031$19h1md))
   (g$make-syntax-violation$6035$19h1md
     g$make-syntax-violation$6130$19h1md
     (record-constructor g$7598$6033$19h1md))
   (g$7594$6036$19h1md
     g$7594$6131$19h1md
     (record-accessor g$7597$6031$19h1md '0))
   (g$7595$6037$19h1md
     g$7595$6132$19h1md
     (record-accessor g$7597$6031$19h1md '1))
   (g$syntax-violation?$6038$19h1md
     g$syntax-violation?$6133$19h1md
     (condition-predicate g$7597$6031$19h1md))
   (g$syntax-violation-form$6039$19h1md
     g$syntax-violation-form$6134$19h1md
     (condition-accessor g$7597$6031$19h1md g$7594$6036$19h1md))
   (g$syntax-violation-subform$6040$19h1md
     g$syntax-violation-subform$6135$19h1md
     (condition-accessor g$7597$6031$19h1md g$7595$6037$19h1md))
   (g$7615$6041$19h1md
     g$7615$6136$19h1md
     (make-record-type-descriptor
       '&undefined
       g$7491$5985$19h1md
       'g$7618$19h1md
       '#f
       '#f
       '#()))
   (g$7617$6042$19h1md g$7617$6137$19h1md '#f)
   (g$7616$6043$19h1md
     g$7616$6138$19h1md
     (make-record-constructor-descriptor
       g$7615$6041$19h1md
       g$7492$5987$19h1md
       g$7617$6042$19h1md))
   (g$7614$6044$19h1md
     g$7614$6139$19h1md
     (record-predicate g$7615$6041$19h1md))
   (g$make-undefined-violation$6045$19h1md
     g$make-undefined-violation$6140$19h1md
     (record-constructor g$7616$6043$19h1md))
   (g$undefined-violation?$6046$19h1md
     g$undefined-violation?$6141$19h1md
     (condition-predicate g$7615$6041$19h1md)))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$6142$19h1md
     g$append!$6148$19h1md
     (case-lambda
       ((g$a$6143$19h1md . g$b$6144$19h1md)
        (if (null? g$a$6143$19h1md)
          g$b$6144$19h1md
          (if (null? g$b$6144$19h1md)
            g$a$6143$19h1md
            (begin
              ((letrec ((g$f$6145$19h1md
                          (case-lambda
                            ((g$a$6146$19h1md)
                             ((case-lambda
                                ((g$n$6147$19h1md)
                                 (if (null? g$n$6147$19h1md)
                                   (set-cdr! g$a$6146$19h1md g$b$6144$19h1md)
                                   (g$f$6145$19h1md g$n$6147$19h1md))))
                              (cdr g$a$6146$19h1md))))))
                 g$f$6145$19h1md)
               g$a$6143$19h1md)
              g$a$6143$19h1md)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$sign$6149$19h1md
     g$sign$6167$19h1md
     (case-lambda
       ((g$n$6155$19h1md)
        (if (> g$n$6155$19h1md '0) '1 (if (< g$n$6155$19h1md '0) '-1 '0)))))
   (g$quotient$6150$19h1md
     g$quotient$6168$19h1md
     (case-lambda
       ((g$n1$6156$19h1md g$n2$6157$19h1md)
        (* (g$sign$6149$19h1md g$n1$6156$19h1md)
           (g$sign$6149$19h1md g$n2$6157$19h1md)
           (div (abs g$n1$6156$19h1md) (abs g$n2$6157$19h1md))))))
   (g$remainder$6151$19h1md
     g$remainder$6169$19h1md
     (case-lambda
       ((g$n1$6158$19h1md g$n2$6159$19h1md)
        (* (g$sign$6149$19h1md g$n1$6158$19h1md)
           (mod (abs g$n1$6158$19h1md) (abs g$n2$6159$19h1md))))))
   (g$modulo$6152$19h1md
     g$modulo$6170$19h1md
     (case-lambda
       ((g$n1$6160$19h1md g$n2$6161$19h1md)
        (* (g$sign$6149$19h1md g$n2$6161$19h1md)
           (mod (* (g$sign$6149$19h1md g$n2$6161$19h1md) g$n1$6160$19h1md)
                (abs g$n2$6161$19h1md))))))
   (g$make-promise$6153$19h1md
     g$make-promise$6171$19h1md
     (case-lambda
       ((g$proc$6162$19h1md)
        ((case-lambda
           ((g$result-ready?$6163$19h1md g$result$6164$19h1md)
            (case-lambda
              (()
               (if g$result-ready?$6163$19h1md
                 g$result$6164$19h1md
                 ((case-lambda
                    ((g$x$6165$19h1md)
                     (if g$result-ready?$6163$19h1md
                       g$result$6164$19h1md
                       (begin
                         (set! g$result-ready?$6163$19h1md '#t)
                         (set! g$result$6164$19h1md g$x$6165$19h1md)
                         g$result$6164$19h1md))))
                  (g$proc$6162$19h1md)))))))
         '#f
         '#f))))
   (g$force$6154$19h1md
     g$force$6172$19h1md
     (case-lambda ((g$object$6166$19h1md) (g$object$6166$19h1md)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$6173$19h1md
     g$split$6199$19h1md
     (case-lambda
       ((g$ls$6176$19h1md)
        ((letrec ((g$loop$6177$19h1md
                    (case-lambda
                      ((g$rest$6178$19h1md
                         g$left$6179$19h1md
                         g$right$6180$19h1md)
                       (if (null? g$rest$6178$19h1md)
                         (cons g$left$6179$19h1md g$right$6180$19h1md)
                         (if (null? (cdr g$rest$6178$19h1md))
                           (cons
                             (cons (car g$rest$6178$19h1md) g$left$6179$19h1md)
                             g$right$6180$19h1md)
                           (g$loop$6177$19h1md
                             (g$cddr$5325$19h1md g$rest$6178$19h1md)
                             (cons (car g$rest$6178$19h1md) g$left$6179$19h1md)
                             (cons
                               (g$cadr$5323$19h1md g$rest$6178$19h1md)
                               g$right$6180$19h1md))))))))
           g$loop$6177$19h1md)
         g$ls$6176$19h1md
         '()
         '()))))
   (g$reverse-it$6174$19h1md
     g$reverse-it$6200$19h1md
     (case-lambda
       ((g$head$6181$19h1md g$tail$6182$19h1md)
        (if (null? g$head$6181$19h1md)
          g$tail$6182$19h1md
          ((case-lambda
             ((g$hd$6183$19h1md g$tl$6184$19h1md)
              (g$reverse-it$6174$19h1md
                g$tl$6184$19h1md
                (cons g$hd$6183$19h1md g$tail$6182$19h1md))))
           (car g$head$6181$19h1md)
           (cdr g$head$6181$19h1md))))))
   (g$list-sort$6175$19h1md
     g$list-sort$6201$19h1md
     (case-lambda
       ((g$precedes?$6185$19h1md g$ls$6186$19h1md)
        ((case-lambda
           ((g$merge$6187$19h1md)
            ((case-lambda
               (()
                (if (null? g$ls$6186$19h1md)
                  '()
                  ((letrec ((g$helper$6188$19h1md
                              (case-lambda
                                ((g$piece$6189$19h1md)
                                 (if (null? (cdr g$piece$6189$19h1md))
                                   g$piece$6189$19h1md
                                   ((case-lambda
                                      ((g$parts$6190$19h1md)
                                       (g$merge$6187$19h1md
                                         (g$helper$6188$19h1md
                                           (car g$parts$6190$19h1md))
                                         (g$helper$6188$19h1md
                                           (cdr g$parts$6190$19h1md)))))
                                    (g$split$6173$19h1md
                                      g$piece$6189$19h1md)))))))
                     g$helper$6188$19h1md)
                   g$ls$6186$19h1md)))))))
         (case-lambda
           ((g$list-1$6191$19h1md g$list-2$6192$19h1md)
            ((letrec ((g$loop$6193$19h1md
                        (case-lambda
                          ((g$source-1$6194$19h1md
                             g$source-2$6195$19h1md
                             g$so-far$6196$19h1md)
                           (if (null? g$source-1$6194$19h1md)
                             (g$reverse-it$6174$19h1md
                               g$so-far$6196$19h1md
                               g$source-2$6195$19h1md)
                             (if (null? g$source-2$6195$19h1md)
                               (g$reverse-it$6174$19h1md
                                 g$so-far$6196$19h1md
                                 g$source-1$6194$19h1md)
                               ((case-lambda
                                  ((g$car-1$6197$19h1md g$car-2$6198$19h1md)
                                   (if (g$precedes?$6185$19h1md
                                         g$car-2$6198$19h1md
                                         g$car-1$6197$19h1md)
                                     (g$loop$6193$19h1md
                                       g$source-1$6194$19h1md
                                       (cdr g$source-2$6195$19h1md)
                                       (cons
                                         g$car-2$6198$19h1md
                                         g$so-far$6196$19h1md))
                                     (g$loop$6193$19h1md
                                       g$source-2$6195$19h1md
                                       (cdr g$source-1$6194$19h1md)
                                       (cons
                                         g$car-1$6197$19h1md
                                         g$so-far$6196$19h1md)))))
                                (car g$source-1$6194$19h1md)
                                (car g$source-2$6195$19h1md))))))))
               g$loop$6193$19h1md)
             g$list-1$6191$19h1md
             g$list-2$6192$19h1md
             '()))))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$6245$19h1md
     g$string-ci=?$6341$19h1md
     (case-lambda
       ((g$a$6261$19h1md g$b$6262$19h1md . g$rest$6263$19h1md)
        (begin
          (if (not (string? g$a$6261$19h1md))
            (assertion-violation 'string-ci=? '"not a string" g$a$6261$19h1md)
            (void))
          (if (not (string? g$b$6262$19h1md))
            (assertion-violation 'string-ci=? '"not a string" g$b$6262$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$6264$19h1md)
               (if (not (string? g$x$6264$19h1md))
                 (assertion-violation
                   'string-ci=?
                   '"not a string"
                   g$x$6264$19h1md)
                 (void))))
            g$rest$6263$19h1md)
          ((letrec ((g$f$6265$19h1md
                      (case-lambda
                        ((g$a$6266$19h1md g$b$6267$19h1md g$rest$6268$19h1md)
                         (if (null? g$rest$6268$19h1md)
                           (= (string-ci-compare
                                g$a$6266$19h1md
                                g$b$6267$19h1md)
                              '0)
                           (if (= (string-compare
                                    g$a$6266$19h1md
                                    g$b$6267$19h1md)
                                  '0)
                             (begin
                               '#f
                               (g$f$6265$19h1md
                                 g$b$6267$19h1md
                                 (car g$rest$6268$19h1md)
                                 (cdr g$rest$6268$19h1md)))
                             '#f))))))
             g$f$6265$19h1md)
           g$a$6261$19h1md
           g$b$6262$19h1md
           g$rest$6263$19h1md)))))
   (g$string-ci<?$6246$19h1md
     g$string-ci<?$6342$19h1md
     (case-lambda
       ((g$a$6269$19h1md g$b$6270$19h1md . g$rest$6271$19h1md)
        (begin
          (if (not (string? g$a$6269$19h1md))
            (assertion-violation 'string-ci<? '"not a string" g$a$6269$19h1md)
            (void))
          (if (not (string? g$b$6270$19h1md))
            (assertion-violation 'string-ci<? '"not a string" g$b$6270$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$6272$19h1md)
               (if (not (string? g$x$6272$19h1md))
                 (assertion-violation
                   'string-ci<?
                   '"not a string"
                   g$x$6272$19h1md)
                 (void))))
            g$rest$6271$19h1md)
          ((letrec ((g$f$6273$19h1md
                      (case-lambda
                        ((g$a$6274$19h1md g$b$6275$19h1md g$rest$6276$19h1md)
                         (if (null? g$rest$6276$19h1md)
                           (< (string-ci-compare
                                g$a$6274$19h1md
                                g$b$6275$19h1md)
                              '0)
                           (if (< (string-compare
                                    g$a$6274$19h1md
                                    g$b$6275$19h1md)
                                  '0)
                             (begin
                               '#f
                               (g$f$6273$19h1md
                                 g$b$6275$19h1md
                                 (car g$rest$6276$19h1md)
                                 (cdr g$rest$6276$19h1md)))
                             '#f))))))
             g$f$6273$19h1md)
           g$a$6269$19h1md
           g$b$6270$19h1md
           g$rest$6271$19h1md)))))
   (g$string-ci>?$6247$19h1md
     g$string-ci>?$6343$19h1md
     (case-lambda
       ((g$a$6277$19h1md g$b$6278$19h1md . g$rest$6279$19h1md)
        (begin
          (if (not (string? g$a$6277$19h1md))
            (assertion-violation 'string-ci>? '"not a string" g$a$6277$19h1md)
            (void))
          (if (not (string? g$b$6278$19h1md))
            (assertion-violation 'string-ci>? '"not a string" g$b$6278$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$6280$19h1md)
               (if (not (string? g$x$6280$19h1md))
                 (assertion-violation
                   'string-ci>?
                   '"not a string"
                   g$x$6280$19h1md)
                 (void))))
            g$rest$6279$19h1md)
          ((letrec ((g$f$6281$19h1md
                      (case-lambda
                        ((g$a$6282$19h1md g$b$6283$19h1md g$rest$6284$19h1md)
                         (if (null? g$rest$6284$19h1md)
                           (> (string-ci-compare
                                g$a$6282$19h1md
                                g$b$6283$19h1md)
                              '0)
                           (if (> (string-compare
                                    g$a$6282$19h1md
                                    g$b$6283$19h1md)
                                  '0)
                             (begin
                               '#f
                               (g$f$6281$19h1md
                                 g$b$6283$19h1md
                                 (car g$rest$6284$19h1md)
                                 (cdr g$rest$6284$19h1md)))
                             '#f))))))
             g$f$6281$19h1md)
           g$a$6277$19h1md
           g$b$6278$19h1md
           g$rest$6279$19h1md)))))
   (g$string-ci<=?$6248$19h1md
     g$string-ci<=?$6344$19h1md
     (case-lambda
       ((g$a$6285$19h1md g$b$6286$19h1md . g$rest$6287$19h1md)
        (begin
          (if (not (string? g$a$6285$19h1md))
            (assertion-violation 'string-ci<=? '"not a string" g$a$6285$19h1md)
            (void))
          (if (not (string? g$b$6286$19h1md))
            (assertion-violation 'string-ci<=? '"not a string" g$b$6286$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$6288$19h1md)
               (if (not (string? g$x$6288$19h1md))
                 (assertion-violation
                   'string-ci<=?
                   '"not a string"
                   g$x$6288$19h1md)
                 (void))))
            g$rest$6287$19h1md)
          ((letrec ((g$f$6289$19h1md
                      (case-lambda
                        ((g$a$6290$19h1md g$b$6291$19h1md g$rest$6292$19h1md)
                         (if (null? g$rest$6292$19h1md)
                           (<= (string-ci-compare
                                 g$a$6290$19h1md
                                 g$b$6291$19h1md)
                               '0)
                           (if (<= (string-compare
                                     g$a$6290$19h1md
                                     g$b$6291$19h1md)
                                   '0)
                             (begin
                               '#f
                               (g$f$6289$19h1md
                                 g$b$6291$19h1md
                                 (car g$rest$6292$19h1md)
                                 (cdr g$rest$6292$19h1md)))
                             '#f))))))
             g$f$6289$19h1md)
           g$a$6285$19h1md
           g$b$6286$19h1md
           g$rest$6287$19h1md)))))
   (g$string-ci>=?$6249$19h1md
     g$string-ci>=?$6345$19h1md
     (case-lambda
       ((g$a$6293$19h1md g$b$6294$19h1md . g$rest$6295$19h1md)
        (begin
          (if (not (string? g$a$6293$19h1md))
            (assertion-violation 'string-ci>=? '"not a string" g$a$6293$19h1md)
            (void))
          (if (not (string? g$b$6294$19h1md))
            (assertion-violation 'string-ci>=? '"not a string" g$b$6294$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$6296$19h1md)
               (if (not (string? g$x$6296$19h1md))
                 (assertion-violation
                   'string-ci>=?
                   '"not a string"
                   g$x$6296$19h1md)
                 (void))))
            g$rest$6295$19h1md)
          ((letrec ((g$f$6297$19h1md
                      (case-lambda
                        ((g$a$6298$19h1md g$b$6299$19h1md g$rest$6300$19h1md)
                         (if (null? g$rest$6300$19h1md)
                           (>= (string-ci-compare
                                 g$a$6298$19h1md
                                 g$b$6299$19h1md)
                               '0)
                           (if (>= (string-compare
                                     g$a$6298$19h1md
                                     g$b$6299$19h1md)
                                   '0)
                             (begin
                               '#f
                               (g$f$6297$19h1md
                                 g$b$6299$19h1md
                                 (car g$rest$6300$19h1md)
                                 (cdr g$rest$6300$19h1md)))
                             '#f))))))
             g$f$6297$19h1md)
           g$a$6293$19h1md
           g$b$6294$19h1md
           g$rest$6295$19h1md)))))
   (g$char-ci=?$6256$19h1md
     g$char-ci=?$6346$19h1md
     (case-lambda
       ((g$a$6301$19h1md g$b$6302$19h1md . g$rest$6303$19h1md)
        (begin
          (if (not (char? g$a$6301$19h1md))
            (assertion-violation 'char-ci=? '"not a char" g$a$6301$19h1md)
            (void))
          (if (not (char? g$b$6302$19h1md))
            (assertion-violation 'char-ci=? '"not a char" g$b$6302$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$6304$19h1md)
               (if (not (char? g$x$6304$19h1md))
                 (assertion-violation 'char-ci=? '"not a char" g$x$6304$19h1md)
                 (void))))
            g$rest$6303$19h1md)
          ((letrec ((g$f$6305$19h1md
                      (case-lambda
                        ((g$a$6306$19h1md g$b$6307$19h1md g$rest$6308$19h1md)
                         (if (null? g$rest$6308$19h1md)
                           (= (char->integer (char-upcase g$a$6306$19h1md))
                              (char->integer (char-upcase g$b$6307$19h1md)))
                           (if (= (char->integer (char-upcase g$a$6306$19h1md))
                                  (char->integer (char-upcase g$b$6307$19h1md)))
                             (begin
                               '#f
                               (g$f$6305$19h1md
                                 g$b$6307$19h1md
                                 (car g$rest$6308$19h1md)
                                 (cdr g$rest$6308$19h1md)))
                             '#f))))))
             g$f$6305$19h1md)
           g$a$6301$19h1md
           g$b$6302$19h1md
           g$rest$6303$19h1md)))))
   (g$char-ci<?$6257$19h1md
     g$char-ci<?$6347$19h1md
     (case-lambda
       ((g$a$6309$19h1md g$b$6310$19h1md . g$rest$6311$19h1md)
        (begin
          (if (not (char? g$a$6309$19h1md))
            (assertion-violation 'char-ci<? '"not a char" g$a$6309$19h1md)
            (void))
          (if (not (char? g$b$6310$19h1md))
            (assertion-violation 'char-ci<? '"not a char" g$b$6310$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$6312$19h1md)
               (if (not (char? g$x$6312$19h1md))
                 (assertion-violation 'char-ci<? '"not a char" g$x$6312$19h1md)
                 (void))))
            g$rest$6311$19h1md)
          ((letrec ((g$f$6313$19h1md
                      (case-lambda
                        ((g$a$6314$19h1md g$b$6315$19h1md g$rest$6316$19h1md)
                         (if (null? g$rest$6316$19h1md)
                           (< (char->integer (char-upcase g$a$6314$19h1md))
                              (char->integer (char-upcase g$b$6315$19h1md)))
                           (if (< (char->integer (char-upcase g$a$6314$19h1md))
                                  (char->integer (char-upcase g$b$6315$19h1md)))
                             (begin
                               '#f
                               (g$f$6313$19h1md
                                 g$b$6315$19h1md
                                 (car g$rest$6316$19h1md)
                                 (cdr g$rest$6316$19h1md)))
                             '#f))))))
             g$f$6313$19h1md)
           g$a$6309$19h1md
           g$b$6310$19h1md
           g$rest$6311$19h1md)))))
   (g$char-ci>?$6258$19h1md
     g$char-ci>?$6348$19h1md
     (case-lambda
       ((g$a$6317$19h1md g$b$6318$19h1md . g$rest$6319$19h1md)
        (begin
          (if (not (char? g$a$6317$19h1md))
            (assertion-violation 'char-ci>? '"not a char" g$a$6317$19h1md)
            (void))
          (if (not (char? g$b$6318$19h1md))
            (assertion-violation 'char-ci>? '"not a char" g$b$6318$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$6320$19h1md)
               (if (not (char? g$x$6320$19h1md))
                 (assertion-violation 'char-ci>? '"not a char" g$x$6320$19h1md)
                 (void))))
            g$rest$6319$19h1md)
          ((letrec ((g$f$6321$19h1md
                      (case-lambda
                        ((g$a$6322$19h1md g$b$6323$19h1md g$rest$6324$19h1md)
                         (if (null? g$rest$6324$19h1md)
                           (> (char->integer (char-upcase g$a$6322$19h1md))
                              (char->integer (char-upcase g$b$6323$19h1md)))
                           (if (> (char->integer (char-upcase g$a$6322$19h1md))
                                  (char->integer (char-upcase g$b$6323$19h1md)))
                             (begin
                               '#f
                               (g$f$6321$19h1md
                                 g$b$6323$19h1md
                                 (car g$rest$6324$19h1md)
                                 (cdr g$rest$6324$19h1md)))
                             '#f))))))
             g$f$6321$19h1md)
           g$a$6317$19h1md
           g$b$6318$19h1md
           g$rest$6319$19h1md)))))
   (g$char-ci<=?$6259$19h1md
     g$char-ci<=?$6349$19h1md
     (case-lambda
       ((g$a$6325$19h1md g$b$6326$19h1md . g$rest$6327$19h1md)
        (begin
          (if (not (char? g$a$6325$19h1md))
            (assertion-violation 'char-ci<=? '"not a char" g$a$6325$19h1md)
            (void))
          (if (not (char? g$b$6326$19h1md))
            (assertion-violation 'char-ci<=? '"not a char" g$b$6326$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$6328$19h1md)
               (if (not (char? g$x$6328$19h1md))
                 (assertion-violation 'char-ci<=? '"not a char" g$x$6328$19h1md)
                 (void))))
            g$rest$6327$19h1md)
          ((letrec ((g$f$6329$19h1md
                      (case-lambda
                        ((g$a$6330$19h1md g$b$6331$19h1md g$rest$6332$19h1md)
                         (if (null? g$rest$6332$19h1md)
                           (<= (char->integer (char-upcase g$a$6330$19h1md))
                               (char->integer (char-upcase g$b$6331$19h1md)))
                           (if (<= (char->integer (char-upcase g$a$6330$19h1md))
                                   (char->integer
                                     (char-upcase g$b$6331$19h1md)))
                             (begin
                               '#f
                               (g$f$6329$19h1md
                                 g$b$6331$19h1md
                                 (car g$rest$6332$19h1md)
                                 (cdr g$rest$6332$19h1md)))
                             '#f))))))
             g$f$6329$19h1md)
           g$a$6325$19h1md
           g$b$6326$19h1md
           g$rest$6327$19h1md)))))
   (g$char-ci>=?$6260$19h1md
     g$char-ci>=?$6350$19h1md
     (case-lambda
       ((g$a$6333$19h1md g$b$6334$19h1md . g$rest$6335$19h1md)
        (begin
          (if (not (char? g$a$6333$19h1md))
            (assertion-violation 'char-ci>=? '"not a char" g$a$6333$19h1md)
            (void))
          (if (not (char? g$b$6334$19h1md))
            (assertion-violation 'char-ci>=? '"not a char" g$b$6334$19h1md)
            (void))
          (for-each
            (case-lambda
              ((g$x$6336$19h1md)
               (if (not (char? g$x$6336$19h1md))
                 (assertion-violation 'char-ci>=? '"not a char" g$x$6336$19h1md)
                 (void))))
            g$rest$6335$19h1md)
          ((letrec ((g$f$6337$19h1md
                      (case-lambda
                        ((g$a$6338$19h1md g$b$6339$19h1md g$rest$6340$19h1md)
                         (if (null? g$rest$6340$19h1md)
                           (>= (char->integer (char-upcase g$a$6338$19h1md))
                               (char->integer (char-upcase g$b$6339$19h1md)))
                           (if (>= (char->integer (char-upcase g$a$6338$19h1md))
                                   (char->integer
                                     (char-upcase g$b$6339$19h1md)))
                             (begin
                               '#f
                               (g$f$6337$19h1md
                                 g$b$6339$19h1md
                                 (car g$rest$6340$19h1md)
                                 (cdr g$rest$6340$19h1md)))
                             '#f))))))
             g$f$6337$19h1md)
           g$a$6333$19h1md
           g$b$6334$19h1md
           g$rest$6335$19h1md))))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$6351$19h1md
     g$bitwise-if$6398$19h1md
     (case-lambda
       ((g$ei1$6358$19h1md g$ei2$6359$19h1md g$ei3$6360$19h1md)
        (bitwise-ior
          (bitwise-and g$ei1$6358$19h1md g$ei2$6359$19h1md)
          (bitwise-and (bitwise-not g$ei1$6358$19h1md) g$ei3$6360$19h1md)))))
   (g$bitwise-copy-bit$6352$19h1md
     g$bitwise-copy-bit$6399$19h1md
     (case-lambda
       ((g$ei1$6361$19h1md g$ei2$6362$19h1md g$ei3$6363$19h1md)
        ((case-lambda
           ((g$mask$6364$19h1md)
            ((case-lambda
               (()
                (g$bitwise-if$6351$19h1md
                  g$mask$6364$19h1md
                  (g$bitwise-arithmetic-shift-left$6355$19h1md
                    g$ei3$6363$19h1md
                    g$ei2$6362$19h1md)
                  g$ei1$6361$19h1md))))))
         (g$bitwise-arithmetic-shift-left$6355$19h1md '1 g$ei2$6362$19h1md)))))
   (g$bitwise-bit-field$6353$19h1md
     g$bitwise-bit-field$6400$19h1md
     (case-lambda
       ((g$ei1$6365$19h1md g$ei2$6366$19h1md g$ei3$6367$19h1md)
        ((case-lambda
           ((g$mask$6368$19h1md)
            (g$bitwise-arithmetic-shift-right$6356$19h1md
              (bitwise-and g$ei1$6365$19h1md g$mask$6368$19h1md)
              g$ei2$6366$19h1md)))
         (bitwise-not
           (g$bitwise-arithmetic-shift-left$6355$19h1md
             '-1
             g$ei3$6367$19h1md))))))
   (g$bitwise-copy-bit-field$6354$19h1md
     g$bitwise-copy-bit-field$6401$19h1md
     (case-lambda
       ((g$ei1$6369$19h1md
          g$ei2$6370$19h1md
          g$ei3$6371$19h1md
          g$ei4$6372$19h1md)
        ((case-lambda
           ((g$to$6373$19h1md)
            ((case-lambda
               ((g$start$6374$19h1md)
                ((case-lambda
                   ((g$end$6375$19h1md)
                    ((case-lambda
                       ((g$from$6376$19h1md)
                        ((case-lambda
                           ((g$mask1$6377$19h1md)
                            ((case-lambda
                               ((g$mask2$6378$19h1md)
                                ((case-lambda
                                   ((g$mask$6379$19h1md)
                                    ((case-lambda
                                       (()
                                        (g$bitwise-if$6351$19h1md
                                          g$mask$6379$19h1md
                                          (g$bitwise-arithmetic-shift-left$6355$19h1md
                                            g$from$6376$19h1md
                                            g$start$6374$19h1md)
                                          g$to$6373$19h1md))))))
                                 (bitwise-and
                                   g$mask1$6377$19h1md
                                   g$mask2$6378$19h1md))))
                             (bitwise-not
                               (g$bitwise-arithmetic-shift-left$6355$19h1md
                                 '-1
                                 g$end$6375$19h1md)))))
                         (g$bitwise-arithmetic-shift-left$6355$19h1md
                           '-1
                           g$start$6374$19h1md))))
                     g$ei4$6372$19h1md)))
                 g$ei3$6371$19h1md)))
             g$ei2$6370$19h1md)))
         g$ei1$6369$19h1md))))
   (g$bitwise-arithmetic-shift-left$6355$19h1md
     g$bitwise-arithmetic-shift-left$6402$19h1md
     (case-lambda
       ((g$ei1$6380$19h1md g$ei2$6381$19h1md)
        (bitwise-arithmetic-shift g$ei1$6380$19h1md g$ei2$6381$19h1md))))
   (g$bitwise-arithmetic-shift-right$6356$19h1md
     g$bitwise-arithmetic-shift-right$6403$19h1md
     (case-lambda
       ((g$ei1$6382$19h1md g$ei2$6383$19h1md)
        (bitwise-arithmetic-shift g$ei1$6382$19h1md (- g$ei2$6383$19h1md)))))
   (g$bitwise-rotate-bit-field$6357$19h1md
     g$bitwise-rotate-bit-field$6404$19h1md
     (case-lambda
       ((g$ei1$6384$19h1md
          g$ei2$6385$19h1md
          g$ei3$6386$19h1md
          g$ei4$6387$19h1md)
        ((case-lambda
           ((g$n$6388$19h1md)
            ((case-lambda
               ((g$start$6389$19h1md)
                ((case-lambda
                   ((g$end$6390$19h1md)
                    ((case-lambda
                       ((g$count$6391$19h1md)
                        ((case-lambda
                           ((g$width$6392$19h1md)
                            ((case-lambda
                               (()
                                (if (positive? g$width$6392$19h1md)
                                  ((case-lambda
                                     ((g$count$6393$19h1md)
                                      ((case-lambda
                                         ((g$field0$6394$19h1md)
                                          ((case-lambda
                                             ((g$field1$6395$19h1md)
                                              ((case-lambda
                                                 ((g$field2$6396$19h1md)
                                                  ((case-lambda
                                                     ((g$field$6397$19h1md)
                                                      ((case-lambda
                                                         (()
                                                          (g$bitwise-copy-bit-field$6354$19h1md
                                                            g$n$6388$19h1md
                                                            g$start$6389$19h1md
                                                            g$end$6390$19h1md
                                                            g$field$6397$19h1md))))))
                                                   (bitwise-ior
                                                     g$field1$6395$19h1md
                                                     g$field2$6396$19h1md))))
                                               (g$bitwise-arithmetic-shift-right$6356$19h1md
                                                 g$field0$6394$19h1md
                                                 (- g$width$6392$19h1md
                                                    g$count$6393$19h1md)))))
                                           (g$bitwise-arithmetic-shift-left$6355$19h1md
                                             g$field0$6394$19h1md
                                             g$count$6393$19h1md))))
                                       (g$bitwise-bit-field$6353$19h1md
                                         g$n$6388$19h1md
                                         g$start$6389$19h1md
                                         g$end$6390$19h1md))))
                                   (mod g$count$6391$19h1md
                                        g$width$6392$19h1md))
                                  g$n$6388$19h1md))))))
                         (- g$end$6390$19h1md g$start$6389$19h1md))))
                     g$ei4$6387$19h1md)))
                 g$ei3$6386$19h1md)))
             g$ei2$6385$19h1md)))
         g$ei1$6384$19h1md)))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fxif$6405$19h1md
     g$fxif$6452$19h1md
     (case-lambda
       ((g$fx1$6412$19h1md g$fx2$6413$19h1md g$fx3$6414$19h1md)
        (fxior
          (fxand g$fx1$6412$19h1md g$fx2$6413$19h1md)
          (fxand (fxnot g$fx1$6412$19h1md) g$fx3$6414$19h1md)))))
   (g$fxcopy-bit$6406$19h1md
     g$fxcopy-bit$6453$19h1md
     (case-lambda
       ((g$fx1$6415$19h1md g$fx2$6416$19h1md g$fx3$6417$19h1md)
        ((case-lambda
           ((g$mask$6418$19h1md)
            ((case-lambda
               (()
                (g$fxif$6405$19h1md
                  g$mask$6418$19h1md
                  (g$fxarithmetic-shift-left$6409$19h1md
                    g$fx3$6417$19h1md
                    g$fx2$6416$19h1md)
                  g$fx1$6415$19h1md))))))
         (g$fxarithmetic-shift-left$6409$19h1md '1 g$fx2$6416$19h1md)))))
   (g$fxbit-field$6407$19h1md
     g$fxbit-field$6454$19h1md
     (case-lambda
       ((g$fx1$6419$19h1md g$fx2$6420$19h1md g$fx3$6421$19h1md)
        ((case-lambda
           ((g$mask$6422$19h1md)
            ((case-lambda
               (()
                (g$fxarithmetic-shift-right$6410$19h1md
                  (fxand g$fx1$6419$19h1md g$mask$6422$19h1md)
                  g$fx2$6420$19h1md))))))
         (fxnot
           (g$fxarithmetic-shift-left$6409$19h1md '-1 g$fx3$6421$19h1md))))))
   (g$fxcopy-bit-field$6408$19h1md
     g$fxcopy-bit-field$6455$19h1md
     (case-lambda
       ((g$fx1$6423$19h1md
          g$fx2$6424$19h1md
          g$fx3$6425$19h1md
          g$fx4$6426$19h1md)
        ((case-lambda
           ((g$to$6427$19h1md)
            ((case-lambda
               ((g$start$6428$19h1md)
                ((case-lambda
                   ((g$end$6429$19h1md)
                    ((case-lambda
                       ((g$from$6430$19h1md)
                        ((case-lambda
                           ((g$mask1$6431$19h1md)
                            ((case-lambda
                               ((g$mask2$6432$19h1md)
                                ((case-lambda
                                   ((g$mask$6433$19h1md)
                                    ((case-lambda
                                       (()
                                        (g$fxif$6405$19h1md
                                          g$mask$6433$19h1md
                                          (g$fxarithmetic-shift-left$6409$19h1md
                                            g$from$6430$19h1md
                                            g$start$6428$19h1md)
                                          g$to$6427$19h1md))))))
                                 (fxand
                                   g$mask1$6431$19h1md
                                   g$mask2$6432$19h1md))))
                             (fxnot
                               (g$fxarithmetic-shift-left$6409$19h1md
                                 '-1
                                 g$end$6429$19h1md)))))
                         (g$fxarithmetic-shift-left$6409$19h1md
                           '-1
                           g$start$6428$19h1md))))
                     g$fx4$6426$19h1md)))
                 g$fx3$6425$19h1md)))
             g$fx2$6424$19h1md)))
         g$fx1$6423$19h1md))))
   (g$fxarithmetic-shift-left$6409$19h1md
     g$fxarithmetic-shift-left$6456$19h1md
     (case-lambda
       ((g$fx1$6434$19h1md g$fx2$6435$19h1md)
        (fxarithmetic-shift g$fx1$6434$19h1md g$fx2$6435$19h1md))))
   (g$fxarithmetic-shift-right$6410$19h1md
     g$fxarithmetic-shift-right$6457$19h1md
     (case-lambda
       ((g$fx1$6436$19h1md g$fx2$6437$19h1md)
        (fxarithmetic-shift g$fx1$6436$19h1md (- g$fx2$6437$19h1md)))))
   (g$fxrotate-bit-field$6411$19h1md
     g$fxrotate-bit-field$6458$19h1md
     (case-lambda
       ((g$fx1$6438$19h1md
          g$fx2$6439$19h1md
          g$fx3$6440$19h1md
          g$fx4$6441$19h1md)
        ((case-lambda
           ((g$n$6442$19h1md)
            ((case-lambda
               ((g$start$6443$19h1md)
                ((case-lambda
                   ((g$end$6444$19h1md)
                    ((case-lambda
                       ((g$count$6445$19h1md)
                        ((case-lambda
                           ((g$width$6446$19h1md)
                            ((case-lambda
                               (()
                                (if (positive? g$width$6446$19h1md)
                                  ((case-lambda
                                     ((g$count$6447$19h1md)
                                      ((case-lambda
                                         ((g$field0$6448$19h1md)
                                          ((case-lambda
                                             ((g$field1$6449$19h1md)
                                              ((case-lambda
                                                 ((g$field2$6450$19h1md)
                                                  ((case-lambda
                                                     ((g$field$6451$19h1md)
                                                      ((case-lambda
                                                         (()
                                                          (g$fxcopy-bit-field$6408$19h1md
                                                            g$n$6442$19h1md
                                                            g$start$6443$19h1md
                                                            g$end$6444$19h1md
                                                            g$field$6451$19h1md))))))
                                                   (fxior
                                                     g$field1$6449$19h1md
                                                     g$field2$6450$19h1md))))
                                               (g$fxarithmetic-shift-right$6410$19h1md
                                                 g$field0$6448$19h1md
                                                 (- g$width$6446$19h1md
                                                    g$count$6447$19h1md)))))
                                           (g$fxarithmetic-shift-left$6409$19h1md
                                             g$field0$6448$19h1md
                                             g$count$6447$19h1md))))
                                       (g$fxbit-field$6407$19h1md
                                         g$n$6442$19h1md
                                         g$start$6443$19h1md
                                         g$end$6444$19h1md))))
                                   (mod g$count$6445$19h1md
                                        g$width$6446$19h1md))
                                  g$n$6442$19h1md))))))
                         (- g$end$6444$19h1md g$start$6443$19h1md))))
                     g$fx4$6441$19h1md)))
                 g$fx3$6440$19h1md)))
             g$fx2$6439$19h1md)))
         g$fx1$6438$19h1md)))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$8019$6459$19h1md
     g$8019$6471$19h1md
     (make-record-type-descriptor
       '&no-infinities
       &implementation-restriction-rtd
       'g$8022$19h1md
       '#f
       '#f
       '#()))
   (g$8021$6460$19h1md g$8021$6472$19h1md '#f)
   (g$8020$6461$19h1md
     g$8020$6473$19h1md
     (make-record-constructor-descriptor
       g$8019$6459$19h1md
       &implementation-restriction-rcd
       g$8021$6460$19h1md))
   (g$8018$6462$19h1md
     g$8018$6474$19h1md
     (record-predicate g$8019$6459$19h1md))
   (g$make-no-infinities-violation$6463$19h1md
     g$make-no-infinities-violation$6475$19h1md
     (record-constructor g$8020$6461$19h1md))
   (g$no-infinities-violation?$6464$19h1md
     g$no-infinities-violation?$6476$19h1md
     (condition-predicate g$8019$6459$19h1md))
   (g$8033$6465$19h1md
     g$8033$6477$19h1md
     (make-record-type-descriptor
       '&no-nans
       &implementation-restriction-rtd
       'g$8036$19h1md
       '#f
       '#f
       '#()))
   (g$8035$6466$19h1md g$8035$6478$19h1md '#f)
   (g$8034$6467$19h1md
     g$8034$6479$19h1md
     (make-record-constructor-descriptor
       g$8033$6465$19h1md
       &implementation-restriction-rcd
       g$8035$6466$19h1md))
   (g$8032$6468$19h1md
     g$8032$6480$19h1md
     (record-predicate g$8033$6465$19h1md))
   (g$make-no-nans-violation$6469$19h1md
     g$make-no-nans-violation$6481$19h1md
     (record-constructor g$8034$6467$19h1md))
   (g$no-nans-violation?$6470$19h1md
     g$no-nans-violation?$6482$19h1md
     (condition-predicate g$8033$6465$19h1md)))
  (void))

(library-letrec* (ironscheme io conditions)
  ((g$8048$6483$19h1md
     g$8048$6563$19h1md
     (make-record-type-descriptor
       '&i/o
       &error-rtd
       'g$8051$19h1md
       '#f
       '#f
       '#()))
   (g$8050$6484$19h1md g$8050$6564$19h1md '#f)
   (g$8049$6485$19h1md
     g$8049$6565$19h1md
     (make-record-constructor-descriptor
       g$8048$6483$19h1md
       &error-rcd
       g$8050$6484$19h1md))
   (g$8047$6486$19h1md
     g$8047$6566$19h1md
     (record-predicate g$8048$6483$19h1md))
   (g$make-i/o-error$6487$19h1md
     g$make-i/o-error$6567$19h1md
     (record-constructor g$8049$6485$19h1md))
   (g$i/o-error?$6488$19h1md
     g$i/o-error?$6568$19h1md
     (condition-predicate g$8048$6483$19h1md))
   (g$8062$6489$19h1md
     g$8062$6569$19h1md
     (make-record-type-descriptor
       '&i/o-read
       g$8048$6483$19h1md
       'g$8065$19h1md
       '#f
       '#f
       '#()))
   (g$8064$6490$19h1md g$8064$6570$19h1md '#f)
   (g$8063$6491$19h1md
     g$8063$6571$19h1md
     (make-record-constructor-descriptor
       g$8062$6489$19h1md
       g$8049$6485$19h1md
       g$8064$6490$19h1md))
   (g$8061$6492$19h1md
     g$8061$6572$19h1md
     (record-predicate g$8062$6489$19h1md))
   (g$make-i/o-read-error$6493$19h1md
     g$make-i/o-read-error$6573$19h1md
     (record-constructor g$8063$6491$19h1md))
   (g$i/o-read-error?$6494$19h1md
     g$i/o-read-error?$6574$19h1md
     (condition-predicate g$8062$6489$19h1md))
   (g$8076$6495$19h1md
     g$8076$6575$19h1md
     (make-record-type-descriptor
       '&i/o-write
       g$8048$6483$19h1md
       'g$8079$19h1md
       '#f
       '#f
       '#()))
   (g$8078$6496$19h1md g$8078$6576$19h1md '#f)
   (g$8077$6497$19h1md
     g$8077$6577$19h1md
     (make-record-constructor-descriptor
       g$8076$6495$19h1md
       g$8049$6485$19h1md
       g$8078$6496$19h1md))
   (g$8075$6498$19h1md
     g$8075$6578$19h1md
     (record-predicate g$8076$6495$19h1md))
   (g$make-i/o-write-error$6499$19h1md
     g$make-i/o-write-error$6579$19h1md
     (record-constructor g$8077$6497$19h1md))
   (g$i/o-write-error?$6500$19h1md
     g$i/o-write-error?$6580$19h1md
     (condition-predicate g$8076$6495$19h1md))
   (g$8091$6501$19h1md
     g$8091$6581$19h1md
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$8048$6483$19h1md
       'g$8094$19h1md
       '#f
       '#f
       '#((immutable position))))
   (g$8093$6502$19h1md g$8093$6582$19h1md '#f)
   (g$8092$6503$19h1md
     g$8092$6583$19h1md
     (make-record-constructor-descriptor
       g$8091$6501$19h1md
       g$8049$6485$19h1md
       g$8093$6502$19h1md))
   (g$8090$6504$19h1md
     g$8090$6584$19h1md
     (record-predicate g$8091$6501$19h1md))
   (g$make-i/o-invalid-position-error$6505$19h1md
     g$make-i/o-invalid-position-error$6585$19h1md
     (record-constructor g$8092$6503$19h1md))
   (g$8089$6506$19h1md
     g$8089$6586$19h1md
     (record-accessor g$8091$6501$19h1md '0))
   (g$i/o-invalid-position-error?$6507$19h1md
     g$i/o-invalid-position-error?$6587$19h1md
     (condition-predicate g$8091$6501$19h1md))
   (g$i/o-error-position$6508$19h1md
     g$i/o-error-position$6588$19h1md
     (condition-accessor g$8091$6501$19h1md g$8089$6506$19h1md))
   (g$8108$6509$19h1md
     g$8108$6589$19h1md
     (make-record-type-descriptor
       '&i/o-filename
       g$8048$6483$19h1md
       'g$8111$19h1md
       '#f
       '#f
       '#((immutable filename))))
   (g$8110$6510$19h1md g$8110$6590$19h1md '#f)
   (g$8109$6511$19h1md
     g$8109$6591$19h1md
     (make-record-constructor-descriptor
       g$8108$6509$19h1md
       g$8049$6485$19h1md
       g$8110$6510$19h1md))
   (g$8107$6512$19h1md
     g$8107$6592$19h1md
     (record-predicate g$8108$6509$19h1md))
   (g$make-i/o-filename-error$6513$19h1md
     g$make-i/o-filename-error$6593$19h1md
     (record-constructor g$8109$6511$19h1md))
   (g$8106$6514$19h1md
     g$8106$6594$19h1md
     (record-accessor g$8108$6509$19h1md '0))
   (g$i/o-filename-error?$6515$19h1md
     g$i/o-filename-error?$6595$19h1md
     (condition-predicate g$8108$6509$19h1md))
   (g$i/o-error-filename$6516$19h1md
     g$i/o-error-filename$6596$19h1md
     (condition-accessor g$8108$6509$19h1md g$8106$6514$19h1md))
   (g$8124$6517$19h1md
     g$8124$6597$19h1md
     (make-record-type-descriptor
       '&i/o-file-protection
       g$8108$6509$19h1md
       'g$8127$19h1md
       '#f
       '#f
       '#()))
   (g$8126$6518$19h1md g$8126$6598$19h1md '#f)
   (g$8125$6519$19h1md
     g$8125$6599$19h1md
     (make-record-constructor-descriptor
       g$8124$6517$19h1md
       g$8109$6511$19h1md
       g$8126$6518$19h1md))
   (g$8123$6520$19h1md
     g$8123$6600$19h1md
     (record-predicate g$8124$6517$19h1md))
   (g$make-i/o-file-protection-error$6521$19h1md
     g$make-i/o-file-protection-error$6601$19h1md
     (record-constructor g$8125$6519$19h1md))
   (g$i/o-file-protection-error?$6522$19h1md
     g$i/o-file-protection-error?$6602$19h1md
     (condition-predicate g$8124$6517$19h1md))
   (g$8138$6523$19h1md
     g$8138$6603$19h1md
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$8124$6517$19h1md
       'g$8141$19h1md
       '#f
       '#f
       '#()))
   (g$8140$6524$19h1md g$8140$6604$19h1md '#f)
   (g$8139$6525$19h1md
     g$8139$6605$19h1md
     (make-record-constructor-descriptor
       g$8138$6523$19h1md
       g$8125$6519$19h1md
       g$8140$6524$19h1md))
   (g$8137$6526$19h1md
     g$8137$6606$19h1md
     (record-predicate g$8138$6523$19h1md))
   (g$make-i/o-file-is-read-only-error$6527$19h1md
     g$make-i/o-file-is-read-only-error$6607$19h1md
     (record-constructor g$8139$6525$19h1md))
   (g$i/o-file-is-read-only-error?$6528$19h1md
     g$i/o-file-is-read-only-error?$6608$19h1md
     (condition-predicate g$8138$6523$19h1md))
   (g$8152$6529$19h1md
     g$8152$6609$19h1md
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$8108$6509$19h1md
       'g$8155$19h1md
       '#f
       '#f
       '#()))
   (g$8154$6530$19h1md g$8154$6610$19h1md '#f)
   (g$8153$6531$19h1md
     g$8153$6611$19h1md
     (make-record-constructor-descriptor
       g$8152$6529$19h1md
       g$8109$6511$19h1md
       g$8154$6530$19h1md))
   (g$8151$6532$19h1md
     g$8151$6612$19h1md
     (record-predicate g$8152$6529$19h1md))
   (g$make-i/o-file-already-exists-error$6533$19h1md
     g$make-i/o-file-already-exists-error$6613$19h1md
     (record-constructor g$8153$6531$19h1md))
   (g$i/o-file-already-exists-error?$6534$19h1md
     g$i/o-file-already-exists-error?$6614$19h1md
     (condition-predicate g$8152$6529$19h1md))
   (g$8166$6535$19h1md
     g$8166$6615$19h1md
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$8108$6509$19h1md
       'g$8169$19h1md
       '#f
       '#f
       '#()))
   (g$8168$6536$19h1md g$8168$6616$19h1md '#f)
   (g$8167$6537$19h1md
     g$8167$6617$19h1md
     (make-record-constructor-descriptor
       g$8166$6535$19h1md
       g$8109$6511$19h1md
       g$8168$6536$19h1md))
   (g$8165$6538$19h1md
     g$8165$6618$19h1md
     (record-predicate g$8166$6535$19h1md))
   (g$make-i/o-file-does-not-exist-error$6539$19h1md
     g$make-i/o-file-does-not-exist-error$6619$19h1md
     (record-constructor g$8167$6537$19h1md))
   (g$i/o-file-does-not-exist-error?$6540$19h1md
     g$i/o-file-does-not-exist-error?$6620$19h1md
     (condition-predicate g$8166$6535$19h1md))
   (g$8181$6541$19h1md
     g$8181$6621$19h1md
     (make-record-type-descriptor
       '&i/o-port
       g$8048$6483$19h1md
       'g$8184$19h1md
       '#f
       '#f
       '#((immutable port))))
   (g$8183$6542$19h1md g$8183$6622$19h1md '#f)
   (g$8182$6543$19h1md
     g$8182$6623$19h1md
     (make-record-constructor-descriptor
       g$8181$6541$19h1md
       g$8049$6485$19h1md
       g$8183$6542$19h1md))
   (g$8180$6544$19h1md
     g$8180$6624$19h1md
     (record-predicate g$8181$6541$19h1md))
   (g$make-i/o-port-error$6545$19h1md
     g$make-i/o-port-error$6625$19h1md
     (record-constructor g$8182$6543$19h1md))
   (g$8179$6546$19h1md
     g$8179$6626$19h1md
     (record-accessor g$8181$6541$19h1md '0))
   (g$i/o-port-error?$6547$19h1md
     g$i/o-port-error?$6627$19h1md
     (condition-predicate g$8181$6541$19h1md))
   (g$i/o-error-port$6548$19h1md
     g$i/o-error-port$6628$19h1md
     (condition-accessor g$8181$6541$19h1md g$8179$6546$19h1md))
   (g$8197$6549$19h1md
     g$8197$6629$19h1md
     (make-record-type-descriptor
       '&i/o-decoding
       g$8181$6541$19h1md
       'g$8200$19h1md
       '#f
       '#f
       '#()))
   (g$8199$6550$19h1md g$8199$6630$19h1md '#f)
   (g$8198$6551$19h1md
     g$8198$6631$19h1md
     (make-record-constructor-descriptor
       g$8197$6549$19h1md
       g$8182$6543$19h1md
       g$8199$6550$19h1md))
   (g$8196$6552$19h1md
     g$8196$6632$19h1md
     (record-predicate g$8197$6549$19h1md))
   (g$make-i/o-decoding-error$6553$19h1md
     g$make-i/o-decoding-error$6633$19h1md
     (record-constructor g$8198$6551$19h1md))
   (g$i/o-decoding-error?$6554$19h1md
     g$i/o-decoding-error?$6634$19h1md
     (condition-predicate g$8197$6549$19h1md))
   (g$8212$6555$19h1md
     g$8212$6635$19h1md
     (make-record-type-descriptor
       '&i/o-encoding
       g$8181$6541$19h1md
       'g$8215$19h1md
       '#f
       '#f
       '#((immutable char))))
   (g$8214$6556$19h1md g$8214$6636$19h1md '#f)
   (g$8213$6557$19h1md
     g$8213$6637$19h1md
     (make-record-constructor-descriptor
       g$8212$6555$19h1md
       g$8182$6543$19h1md
       g$8214$6556$19h1md))
   (g$8211$6558$19h1md
     g$8211$6638$19h1md
     (record-predicate g$8212$6555$19h1md))
   (g$make-i/o-encoding-error$6559$19h1md
     g$make-i/o-encoding-error$6639$19h1md
     (record-constructor g$8213$6557$19h1md))
   (g$8210$6560$19h1md
     g$8210$6640$19h1md
     (record-accessor g$8212$6555$19h1md '0))
   (g$i/o-encoding-error?$6561$19h1md
     g$i/o-encoding-error?$6641$19h1md
     (condition-predicate g$8212$6555$19h1md))
   (g$i/o-encoding-error-char$6562$19h1md
     g$i/o-encoding-error-char$6642$19h1md
     (condition-accessor g$8212$6555$19h1md g$8210$6560$19h1md)))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$get-output-string$6643$19h1md
     g$get-output-string$6651$19h1md
     (case-lambda
       ((g$port$6647$19h1md)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$6647$19h1md))))
   (g$open-output-string$6644$19h1md
     g$open-output-string$6652$19h1md
     (case-lambda (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$6645$19h1md
     g$open-string-output-port$6653$19h1md
     (case-lambda
       (()
        ((case-lambda
           ((g$p$6648$19h1md)
            (values
              g$p$6648$19h1md
              (case-lambda
                (() (g$get-output-string$6643$19h1md g$p$6648$19h1md))))))
         (g$open-output-string$6644$19h1md)))))
   (g$port?$6646$19h1md
     g$port?$6654$19h1md
     (case-lambda
       ((g$obj$6649$19h1md)
        ((case-lambda
           ((g$t$6650$19h1md)
            (if g$t$6650$19h1md
              g$t$6650$19h1md
              (begin '#f (binary-port? g$obj$6649$19h1md)))))
         (textual-port? g$obj$6649$19h1md))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$with-input-from-file$6661$19h1md
     g$with-input-from-file$6687$19h1md
     (case-lambda
       ((g$filename$6665$19h1md g$thunk$6666$19h1md)
        ((case-lambda
           ((g$current-input-port$6669$19h1md g$t$6670$19h1md)
            ((case-lambda
               ((g$swap$6671$19h1md)
                (dynamic-wind
                  g$swap$6671$19h1md
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6666$19h1md)))
                       (case-lambda
                         (() (close-input-port (current-input-port)))))))
                  g$swap$6671$19h1md)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6672$19h1md)
                    (begin
                      (g$current-input-port$6669$19h1md g$t$6670$19h1md)
                      (set! g$t$6670$19h1md g$t$6672$19h1md))))
                 (g$current-input-port$6669$19h1md)))))))
         current-input-port
         (open-input-file g$filename$6665$19h1md)))))
   (g$with-output-to-file$6662$19h1md
     g$with-output-to-file$6688$19h1md
     (case-lambda
       ((g$filename$6673$19h1md g$thunk$6674$19h1md)
        ((case-lambda
           ((g$current-output-port$6677$19h1md g$t$6678$19h1md)
            ((case-lambda
               ((g$swap$6679$19h1md)
                (dynamic-wind
                  g$swap$6679$19h1md
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6674$19h1md)))
                       (case-lambda
                         (() (close-output-port (current-output-port)))))))
                  g$swap$6679$19h1md)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6680$19h1md)
                    (begin
                      (g$current-output-port$6677$19h1md g$t$6678$19h1md)
                      (set! g$t$6678$19h1md g$t$6680$19h1md))))
                 (g$current-output-port$6677$19h1md)))))))
         current-output-port
         (open-output-file g$filename$6673$19h1md)))))
   (g$call-with-input-file$6663$19h1md
     g$call-with-input-file$6689$19h1md
     (case-lambda
       ((g$filename$6681$19h1md g$proc$6682$19h1md)
        ((case-lambda
           ((g$p$6683$19h1md)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6682$19h1md g$p$6683$19h1md)))
              (case-lambda (() (close-input-port g$p$6683$19h1md))))))
         (open-input-file g$filename$6681$19h1md)))))
   (g$call-with-output-file$6664$19h1md
     g$call-with-output-file$6690$19h1md
     (case-lambda
       ((g$filename$6684$19h1md g$proc$6685$19h1md)
        ((case-lambda
           ((g$p$6686$19h1md)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6685$19h1md g$p$6686$19h1md)))
              (case-lambda (() (close-output-port g$p$6686$19h1md))))))
         (open-output-file g$filename$6684$19h1md))))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$8279$6691$19h1md
     g$8279$6797$19h1md
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$8281$6692$19h1md g$8281$6798$19h1md '#f)
   (g$8280$6693$19h1md
     g$8280$6799$19h1md
     (make-record-constructor-descriptor
       g$8279$6691$19h1md
       '#f
       g$8281$6692$19h1md))
   (g$enum?$6694$19h1md
     g$enum?$6800$19h1md
     (record-predicate g$8279$6691$19h1md))
   (g$make-enum$6695$19h1md
     g$make-enum$6801$19h1md
     (record-constructor g$8280$6693$19h1md))
   (g$enum-value$6696$19h1md
     g$enum-value$6802$19h1md
     (record-accessor g$8279$6691$19h1md '0))
   (g$enum-info$6697$19h1md
     g$enum-info$6803$19h1md
     (record-accessor g$8279$6691$19h1md '1))
   (g$8292$6698$19h1md
     g$8292$6804$19h1md
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$8294$6699$19h1md g$8294$6805$19h1md '#f)
   (g$8293$6700$19h1md
     g$8293$6806$19h1md
     (make-record-constructor-descriptor
       g$8292$6698$19h1md
       '#f
       g$8294$6699$19h1md))
   (g$enum-universe?$6701$19h1md
     g$enum-universe?$6807$19h1md
     (record-predicate g$8292$6698$19h1md))
   (g$make-enum-universe$6702$19h1md
     g$make-enum-universe$6808$19h1md
     (record-constructor g$8293$6700$19h1md))
   (g$enum-universe-id$6703$19h1md
     g$enum-universe-id$6809$19h1md
     (record-accessor g$8292$6698$19h1md '0))
   (g$enum-universe-symbols$6704$19h1md
     g$enum-universe-symbols$6810$19h1md
     (record-accessor g$8292$6698$19h1md '1))
   (g$enum-universe-mapping$6705$19h1md
     g$enum-universe-mapping$6811$19h1md
     (record-accessor g$8292$6698$19h1md '2))
   (g$enum-universe-value$6706$19h1md
     g$enum-universe-value$6812$19h1md
     (record-accessor g$8292$6698$19h1md '3))
   (g$enum-type=?$6707$19h1md
     g$enum-type=?$6813$19h1md
     (case-lambda
       ((g$enumset1$6727$19h1md g$enumset2$6728$19h1md)
        (eq? (g$enum-universe-id$6703$19h1md
               (g$enum-info$6697$19h1md g$enumset1$6727$19h1md))
             (g$enum-universe-id$6703$19h1md
               (g$enum-info$6697$19h1md g$enumset2$6728$19h1md))))))
   (g$get-symbols$6708$19h1md
     g$get-symbols$6814$19h1md
     (case-lambda
       ((g$enumset$6729$19h1md)
        (g$enum-universe-symbols$6704$19h1md
          (g$enum-info$6697$19h1md g$enumset$6729$19h1md)))))
   (g$get-value$6709$19h1md
     g$get-value$6815$19h1md
     (case-lambda
       ((g$enumset$6730$19h1md g$s$6731$19h1md)
        (g$hashtable-ref$5600$19h1md
          (g$enum-universe-mapping$6705$19h1md
            (g$enum-info$6697$19h1md g$enumset$6730$19h1md))
          g$s$6731$19h1md
          '#f))))
   (g$assert-enum$6710$19h1md
     g$assert-enum$6816$19h1md
     (case-lambda
       ((g$who$6732$19h1md g$enumset$6733$19h1md)
        (if (not (g$enum?$6694$19h1md g$enumset$6733$19h1md))
          (assertion-violation
            g$who$6732$19h1md
            '"not an enumeration"
            g$enumset$6733$19h1md)
          (void)))))
   (g$make-info$6711$19h1md
     g$make-info$6817$19h1md
     (case-lambda
       ((g$symbols$6734$19h1md)
        ((case-lambda
           ((g$ht$6735$19h1md)
            ((letrec ((g$f$6736$19h1md
                        (case-lambda
                          ((g$s$6737$19h1md g$a$6738$19h1md g$mask$6739$19h1md)
                           (if (null? g$s$6737$19h1md)
                             (values
                               (reverse! g$a$6738$19h1md)
                               g$ht$6735$19h1md
                               (- g$mask$6739$19h1md '1))
                             ((case-lambda
                                ((g$n$6740$19h1md)
                                 (if (symbol? g$n$6740$19h1md)
                                   (if (g$hashtable-contains?$5603$19h1md
                                         g$ht$6735$19h1md
                                         g$n$6740$19h1md)
                                     (g$f$6736$19h1md
                                       (cdr g$s$6737$19h1md)
                                       g$a$6738$19h1md
                                       g$mask$6739$19h1md)
                                     (begin
                                       (g$hashtable-set!$5601$19h1md
                                         g$ht$6735$19h1md
                                         g$n$6740$19h1md
                                         g$mask$6739$19h1md)
                                       (g$f$6736$19h1md
                                         (cdr g$s$6737$19h1md)
                                         (cons g$n$6740$19h1md g$a$6738$19h1md)
                                         (g$bitwise-arithmetic-shift-left$6402$19h1md
                                           g$mask$6739$19h1md
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$6740$19h1md))))
                              (car g$s$6737$19h1md)))))))
               g$f$6736$19h1md)
             g$symbols$6734$19h1md
             '()
             '1)))
         (g$make-eq-hashtable$5597$19h1md)))))
   (g$make-enumeration$6712$19h1md
     g$make-enumeration$6818$19h1md
     (case-lambda
       ((g$symbols$6741$19h1md)
        (call-with-values
          (case-lambda (() (g$make-info$6711$19h1md g$symbols$6741$19h1md)))
          (case-lambda
            ((g$s$6745$19h1md g$mapping$6746$19h1md g$mask$6747$19h1md)
             ((case-lambda
                ((g$mask$6748$19h1md g$mapping$6749$19h1md g$s$6750$19h1md)
                 (g$make-enum$6695$19h1md
                   g$mask$6748$19h1md
                   (g$make-enum-universe$6702$19h1md
                     (gensym)
                     g$s$6750$19h1md
                     g$mapping$6749$19h1md
                     g$mask$6748$19h1md))))
              g$mask$6747$19h1md
              g$mapping$6746$19h1md
              g$s$6745$19h1md)))))))
   (g$enum-set-universe$6713$19h1md
     g$enum-set-universe$6819$19h1md
     (case-lambda
       ((g$enumset$6751$19h1md)
        (begin
          (g$assert-enum$6710$19h1md 'enum-set-universe g$enumset$6751$19h1md)
          ((case-lambda
             ((g$ei$6752$19h1md)
              (g$make-enum$6695$19h1md
                (g$enum-universe-value$6706$19h1md g$ei$6752$19h1md)
                g$ei$6752$19h1md)))
           (g$enum-info$6697$19h1md g$enumset$6751$19h1md))))))
   (g$enum-set-indexer$6714$19h1md
     g$enum-set-indexer$6820$19h1md
     (case-lambda
       ((g$enumset$6753$19h1md)
        (begin
          (g$assert-enum$6710$19h1md 'enum-set-indexer g$enumset$6753$19h1md)
          (case-lambda
            ((g$symbol$6754$19h1md)
             (begin
               (if (not (symbol? g$symbol$6754$19h1md))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$6754$19h1md)
                 (void))
               ((case-lambda
                  ((g$v$6755$19h1md)
                   (if g$v$6755$19h1md
                     (- (bitwise-length g$v$6755$19h1md) '1)
                     '#f)))
                (g$get-value$6709$19h1md
                  g$enumset$6753$19h1md
                  g$symbol$6754$19h1md)))))))))
   (g$enum-set-constructor$6715$19h1md
     g$enum-set-constructor$6821$19h1md
     (case-lambda
       ((g$enumset$6756$19h1md)
        (begin
          (g$assert-enum$6710$19h1md
            'enum-set-constructor
            g$enumset$6756$19h1md)
          (case-lambda
            ((g$symbols$6757$19h1md)
             ((letrec ((g$f$6758$19h1md
                         (case-lambda
                           ((g$v$6759$19h1md g$s$6760$19h1md)
                            (if (null? g$s$6760$19h1md)
                              (g$make-enum$6695$19h1md
                                g$v$6759$19h1md
                                (g$enum-info$6697$19h1md g$enumset$6756$19h1md))
                              ((case-lambda
                                 ((g$n$6761$19h1md)
                                  (if (symbol? g$n$6761$19h1md)
                                    ((case-lambda
                                       ((g$v*$6762$19h1md)
                                        (if g$v*$6762$19h1md
                                          (g$f$6758$19h1md
                                            (bitwise-ior
                                              g$v$6759$19h1md
                                              g$v*$6762$19h1md)
                                            (cdr g$s$6760$19h1md))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$6761$19h1md))))
                                     (g$get-value$6709$19h1md
                                       g$enumset$6756$19h1md
                                       g$n$6761$19h1md))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$6761$19h1md))))
                               (car g$s$6760$19h1md)))))))
                g$f$6758$19h1md)
              '0
              g$symbols$6757$19h1md)))))))
   (g$enum-set->list$6716$19h1md
     g$enum-set->list$6822$19h1md
     (case-lambda
       ((g$enumset$6763$19h1md)
        (begin
          (g$assert-enum$6710$19h1md 'enum-set->list g$enumset$6763$19h1md)
          ((case-lambda
             ((g$value$6764$19h1md)
              ((letrec ((g$f$6765$19h1md
                          (case-lambda
                            ((g$s$6766$19h1md g$l$6767$19h1md)
                             (if (null? g$s$6766$19h1md)
                               (reverse! g$l$6767$19h1md)
                               (if (zero?
                                     (bitwise-and
                                       (g$get-value$6709$19h1md
                                         g$enumset$6763$19h1md
                                         (car g$s$6766$19h1md))
                                       g$value$6764$19h1md))
                                 (g$f$6765$19h1md
                                   (cdr g$s$6766$19h1md)
                                   g$l$6767$19h1md)
                                 (g$f$6765$19h1md
                                   (cdr g$s$6766$19h1md)
                                   (cons
                                     (car g$s$6766$19h1md)
                                     g$l$6767$19h1md))))))))
                 g$f$6765$19h1md)
               (g$get-symbols$6708$19h1md g$enumset$6763$19h1md)
               '())))
           (g$enum-value$6696$19h1md g$enumset$6763$19h1md))))))
   (g$enum-set-member?$6717$19h1md
     g$enum-set-member?$6823$19h1md
     (case-lambda
       ((g$symbol$6768$19h1md g$enumset$6769$19h1md)
        (begin
          (if (not (symbol? g$symbol$6768$19h1md))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$6768$19h1md)
            (void))
          (g$assert-enum$6710$19h1md 'enum-set-member? g$enumset$6769$19h1md)
          ((case-lambda
             ((g$v$6770$19h1md)
              (if g$v$6770$19h1md
                (not (zero?
                       (bitwise-and
                         g$v$6770$19h1md
                         (g$enum-value$6696$19h1md g$enumset$6769$19h1md))))
                '#f)))
           (g$get-value$6709$19h1md
             g$enumset$6769$19h1md
             g$symbol$6768$19h1md))))))
   (g$enum-set-subset?$6718$19h1md
     g$enum-set-subset?$6824$19h1md
     (case-lambda
       ((g$enumset1$6771$19h1md g$enumset2$6772$19h1md)
        (begin
          (g$assert-enum$6710$19h1md 'enum-set-subset? g$enumset1$6771$19h1md)
          (g$assert-enum$6710$19h1md 'enum-set-subset? g$enumset2$6772$19h1md)
          ((case-lambda
             ((g$v1$6773$19h1md g$v2$6774$19h1md)
              (if (g$enum-type=?$6707$19h1md
                    g$enumset1$6771$19h1md
                    g$enumset2$6772$19h1md)
                (= (bitwise-and g$v1$6773$19h1md g$v2$6774$19h1md)
                   g$v1$6773$19h1md)
                ((letrec ((g$f$6775$19h1md
                            (case-lambda
                              ((g$s$6776$19h1md)
                               (if (null? g$s$6776$19h1md)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$6777$19h1md g$v2*$6778$19h1md)
                                     (if g$v2*$6778$19h1md
                                       ((case-lambda
                                          ((g$has1$6779$19h1md
                                             g$has2$6780$19h1md)
                                           (if (if g$has1$6779$19h1md
                                                 (begin
                                                   '#f
                                                   (not g$has2$6780$19h1md))
                                                 '#f)
                                             '#f
                                             (g$f$6775$19h1md
                                               (cdr g$s$6776$19h1md)))))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v1$6773$19h1md
                                                 g$v1*$6777$19h1md)))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v2$6774$19h1md
                                                 g$v2*$6778$19h1md))))
                                       '#f)))
                                  (g$get-value$6709$19h1md
                                    g$enumset1$6771$19h1md
                                    (car g$s$6776$19h1md))
                                  (g$get-value$6709$19h1md
                                    g$enumset2$6772$19h1md
                                    (car g$s$6776$19h1md))))))))
                   g$f$6775$19h1md)
                 (g$get-symbols$6708$19h1md g$enumset1$6771$19h1md)))))
           (g$enum-value$6696$19h1md g$enumset1$6771$19h1md)
           (g$enum-value$6696$19h1md g$enumset2$6772$19h1md))))))
   (g$enum-set=?$6719$19h1md
     g$enum-set=?$6825$19h1md
     (case-lambda
       ((g$enumset1$6781$19h1md g$enumset2$6782$19h1md)
        (begin
          (g$assert-enum$6710$19h1md 'enum-set=? g$enumset1$6781$19h1md)
          (g$assert-enum$6710$19h1md 'enum-set=? g$enumset2$6782$19h1md)
          (if (g$enum-set-subset?$6718$19h1md
                g$enumset1$6781$19h1md
                g$enumset2$6782$19h1md)
            (begin
              '#f
              (g$enum-set-subset?$6718$19h1md
                g$enumset2$6782$19h1md
                g$enumset1$6781$19h1md))
            '#f)))))
   (g$enum-set-union$6720$19h1md
     g$enum-set-union$6826$19h1md
     (case-lambda
       ((g$enumset1$6783$19h1md g$enumset2$6784$19h1md)
        (begin
          (g$assert-enum$6710$19h1md 'enum-set-union g$enumset1$6783$19h1md)
          (g$assert-enum$6710$19h1md 'enum-set-union g$enumset2$6784$19h1md)
          (if (g$enum-type=?$6707$19h1md
                g$enumset1$6783$19h1md
                g$enumset2$6784$19h1md)
            (g$make-enum$6695$19h1md
              (bitwise-ior
                (g$enum-value$6696$19h1md g$enumset1$6783$19h1md)
                (g$enum-value$6696$19h1md g$enumset2$6784$19h1md))
              (g$enum-info$6697$19h1md g$enumset1$6783$19h1md))
            '#f)))))
   (g$enum-set-intersection$6721$19h1md
     g$enum-set-intersection$6827$19h1md
     (case-lambda
       ((g$enumset1$6785$19h1md g$enumset2$6786$19h1md)
        (begin
          (g$assert-enum$6710$19h1md
            'enum-set-intersection
            g$enumset1$6785$19h1md)
          (g$assert-enum$6710$19h1md
            'enum-set-intersection
            g$enumset2$6786$19h1md)
          (if (g$enum-type=?$6707$19h1md
                g$enumset1$6785$19h1md
                g$enumset2$6786$19h1md)
            (g$make-enum$6695$19h1md
              (bitwise-and
                (g$enum-value$6696$19h1md g$enumset1$6785$19h1md)
                (g$enum-value$6696$19h1md g$enumset2$6786$19h1md))
              (g$enum-info$6697$19h1md g$enumset1$6785$19h1md))
            '#f)))))
   (g$enum-set-difference$6722$19h1md
     g$enum-set-difference$6828$19h1md
     (case-lambda
       ((g$enumset1$6787$19h1md g$enumset2$6788$19h1md)
        (begin
          (g$assert-enum$6710$19h1md
            'enum-set-difference
            g$enumset1$6787$19h1md)
          (g$assert-enum$6710$19h1md
            'enum-set-difference
            g$enumset2$6788$19h1md)
          (if (g$enum-type=?$6707$19h1md
                g$enumset1$6787$19h1md
                g$enumset2$6788$19h1md)
            (g$make-enum$6695$19h1md
              (bitwise-and
                (g$enum-value$6696$19h1md g$enumset1$6787$19h1md)
                (bitwise-not (g$enum-value$6696$19h1md g$enumset2$6788$19h1md)))
              (g$enum-info$6697$19h1md g$enumset1$6787$19h1md))
            '#f)))))
   (g$enum-set-complement$6723$19h1md
     g$enum-set-complement$6829$19h1md
     (case-lambda
       ((g$enumset$6789$19h1md)
        (begin
          (g$assert-enum$6710$19h1md 'enum-set-complement g$enumset$6789$19h1md)
          (g$make-enum$6695$19h1md
            (bitwise-not (g$enum-value$6696$19h1md g$enumset$6789$19h1md))
            (g$enum-info$6697$19h1md g$enumset$6789$19h1md))))))
   (g$enum-set-projection$6724$19h1md
     g$enum-set-projection$6830$19h1md
     (case-lambda
       ((g$enumset1$6790$19h1md g$enumset2$6791$19h1md)
        (begin
          (g$assert-enum$6710$19h1md
            'enum-set-projection
            g$enumset1$6790$19h1md)
          (g$assert-enum$6710$19h1md
            'enum-set-projection
            g$enumset2$6791$19h1md)
          ((case-lambda
             ((g$v1$6792$19h1md)
              ((letrec ((g$f$6793$19h1md
                          (case-lambda
                            ((g$s$6794$19h1md g$v$6795$19h1md)
                             (if (null? g$s$6794$19h1md)
                               (g$make-enum$6695$19h1md
                                 g$v$6795$19h1md
                                 (g$enum-info$6697$19h1md
                                   g$enumset2$6791$19h1md))
                               (if (zero?
                                     (bitwise-and
                                       g$v1$6792$19h1md
                                       (g$get-value$6709$19h1md
                                         g$enumset1$6790$19h1md
                                         (car g$s$6794$19h1md))))
                                 (g$f$6793$19h1md
                                   (cdr g$s$6794$19h1md)
                                   g$v$6795$19h1md)
                                 ((case-lambda
                                    ((g$v2$6796$19h1md)
                                     (if g$v2$6796$19h1md
                                       (g$f$6793$19h1md
                                         (cdr g$s$6794$19h1md)
                                         (bitwise-ior
                                           g$v$6795$19h1md
                                           g$v2$6796$19h1md))
                                       (g$f$6793$19h1md
                                         (cdr g$s$6794$19h1md)
                                         g$v$6795$19h1md))))
                                  (g$get-value$6709$19h1md
                                    g$enumset2$6791$19h1md
                                    (car g$s$6794$19h1md)))))))))
                 g$f$6793$19h1md)
               (g$get-symbols$6708$19h1md g$enumset1$6790$19h1md)
               '0)))
           (g$enum-value$6696$19h1md g$enumset1$6790$19h1md)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$6725$19h1md g$p$6726$19h1md)
       (g$fprintf$6855$19h1md
         g$p$6726$19h1md
         '"#[enum-set ~a]"
         (g$enum-set->list$6716$19h1md g$x$6725$19h1md))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$6831$19h1md
     g$dofmt$6853$19h1md
     (case-lambda
       ((g$p$6835$19h1md g$cntl$6836$19h1md g$args$6837$19h1md)
        ((case-lambda
           ((g$nmax$6838$19h1md)
            ((letrec ((g$loop$6839$19h1md
                        (case-lambda
                          ((g$n$6840$19h1md g$a$6841$19h1md)
                           (if (fx<=? g$n$6840$19h1md g$nmax$6838$19h1md)
                             ((case-lambda
                                ((g$c$6842$19h1md)
                                 (if (if (g$char=?$5357$19h1md
                                           g$c$6842$19h1md
                                           '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$6840$19h1md
                                           g$nmax$6838$19h1md))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$6843$19h1md)
                                       (if (memv g$t$6843$19h1md '(#\a))
                                         (begin
                                           (display
                                             (car g$a$6841$19h1md)
                                             g$p$6835$19h1md)
                                           (g$loop$6839$19h1md
                                             (fx+ g$n$6840$19h1md '2)
                                             (cdr g$a$6841$19h1md)))
                                         (if (memv g$t$6843$19h1md '(#\s))
                                           (begin
                                             (write
                                               (car g$a$6841$19h1md)
                                               g$p$6835$19h1md)
                                             (g$loop$6839$19h1md
                                               (fx+ g$n$6840$19h1md '2)
                                               (cdr g$a$6841$19h1md)))
                                           (if (memv g$t$6843$19h1md '(#\b))
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$6841$19h1md)
                                                   '2)
                                                 g$p$6835$19h1md)
                                               (g$loop$6839$19h1md
                                                 (fx+ g$n$6840$19h1md '2)
                                                 (cdr g$a$6841$19h1md)))
                                             (if (memv g$t$6843$19h1md '(#\o))
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$6841$19h1md)
                                                     '8)
                                                   g$p$6835$19h1md)
                                                 (g$loop$6839$19h1md
                                                   (fx+ g$n$6840$19h1md '2)
                                                   (cdr g$a$6841$19h1md)))
                                               (if (memv g$t$6843$19h1md '(#\x))
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$6841$19h1md)
                                                       '16)
                                                     g$p$6835$19h1md)
                                                   (g$loop$6839$19h1md
                                                     (fx+ g$n$6840$19h1md '2)
                                                     (cdr g$a$6841$19h1md)))
                                                 (if (memv
                                                       g$t$6843$19h1md
                                                       '(#\d))
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$6841$19h1md)
                                                         '10)
                                                       g$p$6835$19h1md)
                                                     (g$loop$6839$19h1md
                                                       (fx+ g$n$6840$19h1md '2)
                                                       (cdr g$a$6841$19h1md)))
                                                   (if (memv
                                                         g$t$6843$19h1md
                                                         '(#\~))
                                                     (begin
                                                       (write-char
                                                         '#\~
                                                         g$p$6835$19h1md)
                                                       (g$loop$6839$19h1md
                                                         (fx+ g$n$6840$19h1md
                                                              '2)
                                                         g$a$6841$19h1md))
                                                     (begin
                                                       (write-char
                                                         g$c$6842$19h1md
                                                         g$p$6835$19h1md)
                                                       (g$loop$6839$19h1md
                                                         (fx+ g$n$6840$19h1md
                                                              '1)
                                                         g$a$6841$19h1md)))))))))))
                                    (string-ref
                                      g$cntl$6836$19h1md
                                      (fx+ g$n$6840$19h1md '1)))
                                   (begin
                                     (write-char
                                       g$c$6842$19h1md
                                       g$p$6835$19h1md)
                                     (g$loop$6839$19h1md
                                       (fx+ g$n$6840$19h1md '1)
                                       g$a$6841$19h1md)))))
                              (string-ref g$cntl$6836$19h1md g$n$6840$19h1md))
                             (void))))))
               g$loop$6839$19h1md)
             '0
             g$args$6837$19h1md)))
         (fx- (string-length g$cntl$6836$19h1md) '1)))))
   (g$printf$6832$19h1md
     g$printf$6854$19h1md
     (case-lambda
       ((g$control$6844$19h1md . g$args$6845$19h1md)
        (g$dofmt$6831$19h1md
          (current-output-port)
          g$control$6844$19h1md
          g$args$6845$19h1md))))
   (g$fprintf$6833$19h1md
     g$fprintf$6855$19h1md
     (case-lambda
       ((g$p$6846$19h1md g$control$6847$19h1md . g$args$6848$19h1md)
        (g$dofmt$6831$19h1md
          g$p$6846$19h1md
          g$control$6847$19h1md
          g$args$6848$19h1md))))
   (g$format$6834$19h1md
     g$format$6856$19h1md
     (case-lambda
       ((g$control$6849$19h1md . g$args$6850$19h1md)
        (call-with-values
          g$open-string-output-port$6653$19h1md
          (case-lambda
            ((g$p$6851$19h1md g$c$6852$19h1md)
             (begin
               (g$dofmt$6831$19h1md
                 g$p$6851$19h1md
                 g$control$6849$19h1md
                 g$args$6850$19h1md)
               (g$c$6852$19h1md)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$6857$19h1md
     g$make-traced-macro$6860$19h1md
     (case-lambda
       ((g$name$6858$19h1md g$x$6859$19h1md)
        (if (procedure? g$x$6859$19h1md)
          (make-traced-procedure
            g$name$6858$19h1md
            g$x$6859$19h1md
            g$syntax->datum$11503$19h1md)
          (if (g$variable-transformer?$11328$19h1md g$x$6859$19h1md)
            (g$make-variable-transformer$11327$19h1md
              (make-traced-procedure
                g$name$6858$19h1md
                (g$variable-transformer-procedure$11329$19h1md g$x$6859$19h1md)
                g$syntax->datum$11503$19h1md))
            g$x$6859$19h1md))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$read-library-source-file$6861$19h1md
     g$read-library-source-file$6940$19h1md
     (case-lambda
       ((g$file-name$6932$19h1md)
        (g$with-input-from-file$6687$19h1md
          g$file-name$6932$19h1md
          read-annotated))))
   (g$make-parameter$6862$19h1md
     g$make-parameter$6941$19h1md
     (case-lambda
       ((g$x$6933$19h1md)
        (g$make-parameter$6862$19h1md
          g$x$6933$19h1md
          (case-lambda ((g$x$6934$19h1md) g$x$6934$19h1md))))
       ((g$x$6935$19h1md g$fender$6936$19h1md)
        (begin
          (if (not (procedure? g$fender$6936$19h1md))
            (g$assertion-error$11496$19h1md
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(51,8) - (51,36)"))
            (void))
          ((case-lambda
             ((g$x$6937$19h1md)
              (case-lambda
                (() g$x$6937$19h1md)
                ((g$v$6938$19h1md)
                 (set! g$x$6937$19h1md
                   (g$fender$6936$19h1md g$v$6938$19h1md))))))
           (g$fender$6936$19h1md g$x$6935$19h1md))))))
   (g$file-options-constructor$6930$19h1md
     g$file-options-constructor$6942$19h1md
     (g$make-parameter$6862$19h1md '#f))
   (g$file-options-spec$6931$19h1md
     g$file-options-spec$6943$19h1md
     (case-lambda
       ((g$x$6939$19h1md)
        ((g$file-options-constructor$6930$19h1md) g$x$6939$19h1md)))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$7140$19h1md
     g$current-primitive-locations$7185$19h1md
     (g$make-parameter$6941$19h1md
       (case-lambda ((g$x$7146$19h1md) '#f))
       (case-lambda
         ((g$p$7147$19h1md)
          (begin
            (if (not (procedure? g$p$7147$19h1md))
              (g$assertion-error$11496$19h1md
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$7147$19h1md)))))
   (g$mutable?$7141$19h1md
     g$mutable?$7186$19h1md
     (case-lambda
       ((g$x$7148$19h1md)
        (letrec* ((g$simple?$7149$19h1md
                    (case-lambda
                      ((g$x$7150$19h1md)
                       ((case-lambda
                          ((g$t$7151$19h1md)
                           (if g$t$7151$19h1md
                             g$t$7151$19h1md
                             ((case-lambda
                                ((g$t$7152$19h1md)
                                 (if g$t$7152$19h1md
                                   g$t$7152$19h1md
                                   ((case-lambda
                                      ((g$t$7153$19h1md)
                                       (if g$t$7153$19h1md
                                         g$t$7153$19h1md
                                         ((case-lambda
                                            ((g$t$7154$19h1md)
                                             (if g$t$7154$19h1md
                                               g$t$7154$19h1md
                                               ((case-lambda
                                                  ((g$t$7155$19h1md)
                                                   (if g$t$7155$19h1md
                                                     g$t$7155$19h1md
                                                     ((case-lambda
                                                        ((g$t$7156$19h1md)
                                                         (if g$t$7156$19h1md
                                                           g$t$7156$19h1md
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$7150$19h1md)))))
                                                      (bytevector?
                                                        g$x$7150$19h1md)))))
                                                (string? g$x$7150$19h1md)))))
                                          (boolean? g$x$7150$19h1md)))))
                                    (symbol? g$x$7150$19h1md)))))
                              (char? g$x$7150$19h1md)))))
                        (null? g$x$7150$19h1md))))))
          (not (g$simple?$7149$19h1md g$x$7148$19h1md))))))
   (g$rewriter$7142$19h1md
     g$rewriter$7187$19h1md
     (case-lambda
       ((g$quote-hack?$7157$19h1md)
        (letrec* ((g$f$7158$19h1md
                    (case-lambda
                      ((g$x$7159$19h1md)
                       (if (pair? g$x$7159$19h1md)
                         ((case-lambda
                            ((g$t$7160$19h1md)
                             (if (memv g$t$7160$19h1md '(quote))
                               (if (if g$quote-hack?$7157$19h1md
                                     (begin
                                       '#f
                                       (g$mutable?$7141$19h1md
                                         (g$cadr$5323$19h1md g$x$7159$19h1md)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$7161$19h1md)
                                     (begin
                                       (set-symbol-value!
                                         g$g$7161$19h1md
                                         (g$cadr$5323$19h1md g$x$7159$19h1md))
                                       g$g$7161$19h1md)))
                                  (gensym))
                                 g$x$7159$19h1md)
                               (if (memv g$t$7160$19h1md '(case-lambda))
                                 (cons
                                   'case-lambda
                                   (map (case-lambda
                                          ((g$x$7162$19h1md)
                                           (cons
                                             (car g$x$7162$19h1md)
                                             (map g$f$7158$19h1md
                                                  (cdr g$x$7162$19h1md)))))
                                        (cdr g$x$7159$19h1md)))
                                 (if (memv g$t$7160$19h1md '(lambda))
                                   (g$cons*$5806$19h1md
                                     'lambda
                                     (g$cadr$5323$19h1md g$x$7159$19h1md)
                                     (map g$f$7158$19h1md
                                          (g$cddr$5325$19h1md g$x$7159$19h1md)))
                                   (if (memv g$t$7160$19h1md '(letrec))
                                     ((case-lambda
                                        ((g$bindings$7163$19h1md
                                           g$body*$7164$19h1md)
                                         ((case-lambda
                                            ((g$lhs*$7165$19h1md
                                               g$rhs*$7166$19h1md)
                                             (g$cons*$5806$19h1md
                                               'letrec
                                               (map list
                                                    g$lhs*$7165$19h1md
                                                    (map g$f$7158$19h1md
                                                         g$rhs*$7166$19h1md))
                                               (map g$f$7158$19h1md
                                                    g$body*$7164$19h1md))))
                                          (map car g$bindings$7163$19h1md)
                                          (map g$cadr$5323$19h1md
                                               g$bindings$7163$19h1md))))
                                      (g$cadr$5323$19h1md g$x$7159$19h1md)
                                      (g$cddr$5325$19h1md g$x$7159$19h1md))
                                     (if (memv g$t$7160$19h1md '(letrec*))
                                       ((case-lambda
                                          ((g$bindings$7167$19h1md
                                             g$body*$7168$19h1md)
                                           ((case-lambda
                                              ((g$lhs*$7169$19h1md
                                                 g$rhs*$7170$19h1md)
                                               (g$cons*$5806$19h1md
                                                 'letrec*
                                                 (map list
                                                      g$lhs*$7169$19h1md
                                                      (map g$f$7158$19h1md
                                                           g$rhs*$7170$19h1md))
                                                 (map g$f$7158$19h1md
                                                      g$body*$7168$19h1md))))
                                            (map car g$bindings$7167$19h1md)
                                            (map g$cadr$5323$19h1md
                                                 g$bindings$7167$19h1md))))
                                        (g$cadr$5323$19h1md g$x$7159$19h1md)
                                        (g$cddr$5325$19h1md g$x$7159$19h1md))
                                       (if (memv
                                             g$t$7160$19h1md
                                             '(library-letrec*))
                                         ((case-lambda
                                            ((g$name$7171$19h1md
                                               g$x$7172$19h1md)
                                             ((case-lambda
                                                ((g$bindings$7173$19h1md
                                                   g$body*$7174$19h1md)
                                                 ((case-lambda
                                                    ((g$lhs*$7175$19h1md
                                                       g$lhs**$7176$19h1md
                                                       g$rhs*$7177$19h1md)
                                                     (g$cons*$5806$19h1md
                                                       'library-letrec*
                                                       g$name$7171$19h1md
                                                       (map list
                                                            g$lhs*$7175$19h1md
                                                            g$lhs**$7176$19h1md
                                                            (map g$f$7158$19h1md
                                                                 g$rhs*$7177$19h1md))
                                                       (map g$f$7158$19h1md
                                                            g$body*$7174$19h1md))))
                                                  (map car
                                                       g$bindings$7173$19h1md)
                                                  (map g$cadr$5323$19h1md
                                                       g$bindings$7173$19h1md)
                                                  (map g$caddr$5329$19h1md
                                                       g$bindings$7173$19h1md))))
                                              (g$cadr$5323$19h1md
                                                g$x$7172$19h1md)
                                              (g$cddr$5325$19h1md
                                                g$x$7172$19h1md))))
                                          (g$cadr$5323$19h1md g$x$7159$19h1md)
                                          (cdr g$x$7159$19h1md))
                                         (if (memv g$t$7160$19h1md '(begin))
                                           (cons
                                             'begin
                                             (map g$f$7158$19h1md
                                                  (cdr g$x$7159$19h1md)))
                                           (if (memv g$t$7160$19h1md '(set!))
                                             (list
                                               'set!
                                               (g$cadr$5323$19h1md
                                                 g$x$7159$19h1md)
                                               (g$f$7158$19h1md
                                                 (g$caddr$5329$19h1md
                                                   g$x$7159$19h1md)))
                                             (if (memv
                                                   g$t$7160$19h1md
                                                   '(primitive))
                                               ((case-lambda
                                                  ((g$op$7178$19h1md)
                                                   ((case-lambda
                                                      ((g$t$7179$19h1md)
                                                       (if g$t$7179$19h1md
                                                         ((case-lambda
                                                            ((g$loc$7180$19h1md)
                                                             g$loc$7180$19h1md))
                                                          g$t$7179$19h1md)
                                                         g$op$7178$19h1md)))
                                                    ((g$current-primitive-locations$7140$19h1md)
                                                     g$op$7178$19h1md))))
                                                (g$cadr$5323$19h1md
                                                  g$x$7159$19h1md))
                                               (if (memv
                                                     g$t$7160$19h1md
                                                     '(define))
                                                 g$x$7159$19h1md
                                                 (if (list? g$x$7159$19h1md)
                                                   (map g$f$7158$19h1md
                                                        g$x$7159$19h1md)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$7159$19h1md
                                                     (list?
                                                       g$x$7159$19h1md)))))))))))))))
                          (car g$x$7159$19h1md))
                         g$x$7159$19h1md)))))
          g$f$7158$19h1md))))
   (g$expanded->core$7143$19h1md
     g$expanded->core$7188$19h1md
     (case-lambda
       ((g$x$7181$19h1md) ((g$rewriter$7142$19h1md '#t) g$x$7181$19h1md))))
   (g$compile-core-expr$7144$19h1md
     g$compile-core-expr$7189$19h1md
     (case-lambda
       ((g$x$7182$19h1md) ((g$rewriter$7142$19h1md '#f) g$x$7182$19h1md))))
   (g$compile-core-expr-to-port$7145$19h1md
     g$compile-core-expr-to-port$7190$19h1md
     (case-lambda
       ((g$x$7183$19h1md g$p$7184$19h1md)
        (g$pretty-print$7139$19h1md
          ((g$rewriter$7142$19h1md '#f) g$x$7183$19h1md)
          g$p$7184$19h1md)))))
  (void))

(library-letrec* (psyntax config) () (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$7229$19h1md
     g$make-collection$7433$19h1md
     (case-lambda
       (()
        ((case-lambda
           ((g$set$7290$19h1md)
            (letrec* ((g$set-cons$7291$19h1md
                        (case-lambda
                          ((g$x$7293$19h1md g$ls$7294$19h1md)
                           (if (memq g$x$7293$19h1md g$ls$7294$19h1md)
                             g$ls$7294$19h1md
                             (cons g$x$7293$19h1md g$ls$7294$19h1md))))))
              (case-lambda
                (() g$set$7290$19h1md)
                ((g$x$7292$19h1md)
                 (set! g$set$7290$19h1md
                   (g$set-cons$7291$19h1md
                     g$x$7292$19h1md
                     g$set$7290$19h1md)))))))
         '()))))
   (g$current-library-collection$7230$19h1md
     g$current-library-collection$7434$19h1md
     (g$make-parameter$6941$19h1md
       (g$make-collection$7229$19h1md)
       (case-lambda
         ((g$x$7295$19h1md)
          (begin
            (if (not (procedure? g$x$7295$19h1md))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$7295$19h1md)
              (void))
            g$x$7295$19h1md)))))
   (g$8811$7231$19h1md
     g$8811$7435$19h1md
     (make-record-type-descriptor
       'library
       '#f
       'g$8814$19h1md
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$8813$7232$19h1md g$8813$7436$19h1md '#f)
   (g$8812$7233$19h1md
     g$8812$7437$19h1md
     (make-record-constructor-descriptor
       g$8811$7231$19h1md
       '#f
       g$8813$7232$19h1md))
   (g$library?$7234$19h1md
     g$library?$7438$19h1md
     (record-predicate g$8811$7231$19h1md))
   (g$make-library$7235$19h1md
     g$make-library$7439$19h1md
     (record-constructor g$8812$7233$19h1md))
   (g$library-id$7236$19h1md
     g$library-id$7440$19h1md
     (record-accessor g$8811$7231$19h1md '0))
   (g$library-name$7237$19h1md
     g$library-name$7441$19h1md
     (record-accessor g$8811$7231$19h1md '1))
   (g$library-version$7238$19h1md
     g$library-version$7442$19h1md
     (record-accessor g$8811$7231$19h1md '2))
   (g$library-imp*$7239$19h1md
     g$library-imp*$7443$19h1md
     (record-accessor g$8811$7231$19h1md '3))
   (g$library-vis*$7240$19h1md
     g$library-vis*$7444$19h1md
     (record-accessor g$8811$7231$19h1md '4))
   (g$library-inv*$7241$19h1md
     g$library-inv*$7445$19h1md
     (record-accessor g$8811$7231$19h1md '5))
   (g$library-subst$7242$19h1md
     g$library-subst$7446$19h1md
     (record-accessor g$8811$7231$19h1md '6))
   (g$library-env$7243$19h1md
     g$library-env$7447$19h1md
     (record-accessor g$8811$7231$19h1md '7))
   (g$library-visit-state$7244$19h1md
     g$library-visit-state$7448$19h1md
     (record-accessor g$8811$7231$19h1md '8))
   (g$library-invoke-state$7245$19h1md
     g$library-invoke-state$7449$19h1md
     (record-accessor g$8811$7231$19h1md '9))
   (g$library-visit-code$7246$19h1md
     g$library-visit-code$7450$19h1md
     (record-accessor g$8811$7231$19h1md '10))
   (g$library-invoke-code$7247$19h1md
     g$library-invoke-code$7451$19h1md
     (record-accessor g$8811$7231$19h1md '11))
   (g$library-visible?$7248$19h1md
     g$library-visible?$7452$19h1md
     (record-accessor g$8811$7231$19h1md '12))
   (g$library-source-file-name$7249$19h1md
     g$library-source-file-name$7453$19h1md
     (record-accessor g$8811$7231$19h1md '13))
   (g$set-library-id!$7250$19h1md
     g$set-library-id!$7454$19h1md
     (record-mutator g$8811$7231$19h1md '0))
   (g$set-library-name!$7251$19h1md
     g$set-library-name!$7455$19h1md
     (record-mutator g$8811$7231$19h1md '1))
   (g$set-library-version!$7252$19h1md
     g$set-library-version!$7456$19h1md
     (record-mutator g$8811$7231$19h1md '2))
   (g$set-library-imp*!$7253$19h1md
     g$set-library-imp*!$7457$19h1md
     (record-mutator g$8811$7231$19h1md '3))
   (g$set-library-vis*!$7254$19h1md
     g$set-library-vis*!$7458$19h1md
     (record-mutator g$8811$7231$19h1md '4))
   (g$set-library-inv*!$7255$19h1md
     g$set-library-inv*!$7459$19h1md
     (record-mutator g$8811$7231$19h1md '5))
   (g$set-library-subst!$7256$19h1md
     g$set-library-subst!$7460$19h1md
     (record-mutator g$8811$7231$19h1md '6))
   (g$set-library-env!$7257$19h1md
     g$set-library-env!$7461$19h1md
     (record-mutator g$8811$7231$19h1md '7))
   (g$set-library-visit-state!$7258$19h1md
     g$set-library-visit-state!$7462$19h1md
     (record-mutator g$8811$7231$19h1md '8))
   (g$set-library-invoke-state!$7259$19h1md
     g$set-library-invoke-state!$7463$19h1md
     (record-mutator g$8811$7231$19h1md '9))
   (g$set-library-visit-code!$7260$19h1md
     g$set-library-visit-code!$7464$19h1md
     (record-mutator g$8811$7231$19h1md '10))
   (g$set-library-invoke-code!$7261$19h1md
     g$set-library-invoke-code!$7465$19h1md
     (record-mutator g$8811$7231$19h1md '11))
   (g$set-library-visible?!$7262$19h1md
     g$set-library-visible?!$7466$19h1md
     (record-mutator g$8811$7231$19h1md '12))
   (g$set-library-source-file-name!$7263$19h1md
     g$set-library-source-file-name!$7467$19h1md
     (record-mutator g$8811$7231$19h1md '13))
   (g$rp$7264$19h1md
     g$rp$7468$19h1md
     (make-record-printer
       'library
       (case-lambda
         ((g$x$7296$19h1md g$p$7297$19h1md)
          (begin
            (if (not (g$library?$7234$19h1md g$x$7296$19h1md))
              (assertion-violation 'record-type-printer '"not a library")
              (void))
            (display
              (g$format$6856$19h1md
                '"#<library ~s>"
                (if (null? (g$library-version$7238$19h1md g$x$7296$19h1md))
                  (g$library-name$7237$19h1md g$x$7296$19h1md)
                  (append
                    (g$library-name$7237$19h1md g$x$7296$19h1md)
                    (list (g$library-version$7238$19h1md g$x$7296$19h1md)))))
              g$p$7297$19h1md))))))
   (g$find-dependencies$7265$19h1md
     g$find-dependencies$7469$19h1md
     (case-lambda
       ((g$ls$7298$19h1md)
        (if (null? g$ls$7298$19h1md)
          '()
          (assertion-violation 'find-dependencies '"cannot handle deps yet")))))
   (g$find-library-by$7266$19h1md
     g$find-library-by$7470$19h1md
     (case-lambda
       ((g$pred$7299$19h1md)
        ((letrec ((g$f$7300$19h1md
                    (case-lambda
                      ((g$ls$7301$19h1md)
                       (if (null? g$ls$7301$19h1md)
                         '#f
                         (if (g$pred$7299$19h1md (car g$ls$7301$19h1md))
                           (car g$ls$7301$19h1md)
                           (g$f$7300$19h1md (cdr g$ls$7301$19h1md))))))))
           g$f$7300$19h1md)
         ((g$current-library-collection$7230$19h1md))))))
   (g$library-path$7267$19h1md
     g$library-path$7471$19h1md
     (g$make-parameter$6941$19h1md
       '(".")
       (case-lambda
         ((g$x$7302$19h1md)
          (if (if (list? g$x$7302$19h1md)
                (begin '#f (g$for-all$5804$19h1md string? g$x$7302$19h1md))
                '#f)
            (map (case-lambda ((g$x$7303$19h1md) g$x$7303$19h1md))
                 g$x$7302$19h1md)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$7302$19h1md))))))
   (g$library-extensions$7268$19h1md
     g$library-extensions$7472$19h1md
     (g$make-parameter$6941$19h1md
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$7304$19h1md)
          (if (if (list? g$x$7304$19h1md)
                (begin '#f (g$for-all$5804$19h1md string? g$x$7304$19h1md))
                '#f)
            (map (case-lambda ((g$x$7305$19h1md) g$x$7305$19h1md))
                 g$x$7304$19h1md)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$7304$19h1md))))))
   (g$library-name->file-name$7269$19h1md
     g$library-name->file-name$7473$19h1md
     (case-lambda
       ((g$x$7306$19h1md)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$6653$19h1md)))
          (case-lambda
            ((g$p$7309$19h1md g$extract$7310$19h1md)
             ((case-lambda
                ((g$extract$7311$19h1md g$p$7312$19h1md)
                 (letrec* ((g$display-hex$7313$19h1md
                             (case-lambda
                               ((g$n$7321$19h1md)
                                (if (<= '0 g$n$7321$19h1md '9)
                                  (display g$n$7321$19h1md g$p$7312$19h1md)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$7321$19h1md '10)))
                                    g$p$7312$19h1md))))))
                   (begin
                     ((letrec ((g$f$7314$19h1md
                                 (case-lambda
                                   ((g$ls$7315$19h1md)
                                    (if (not (null? g$ls$7315$19h1md))
                                      (begin
                                        (display '"/" g$p$7312$19h1md)
                                        (for-each
                                          (case-lambda
                                            ((g$c$7316$19h1md)
                                             (if ((case-lambda
                                                    ((g$t$7317$19h1md)
                                                     (if g$t$7317$19h1md
                                                       g$t$7317$19h1md
                                                       ((case-lambda
                                                          ((g$t$7318$19h1md)
                                                           (if g$t$7318$19h1md
                                                             g$t$7318$19h1md
                                                             ((case-lambda
                                                                ((g$t$7319$19h1md)
                                                                 (if g$t$7319$19h1md
                                                                   g$t$7319$19h1md
                                                                   (begin
                                                                     '#f
                                                                     (memv
                                                                       g$c$7316$19h1md
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$5360$19h1md
                                                                '#\0
                                                                g$c$7316$19h1md
                                                                '#\9)))))
                                                        (g$char<=?$5360$19h1md
                                                          '#\A
                                                          g$c$7316$19h1md
                                                          '#\Z)))))
                                                  (g$char<=?$5360$19h1md
                                                    '#\a
                                                    g$c$7316$19h1md
                                                    '#\z))
                                               (display
                                                 g$c$7316$19h1md
                                                 g$p$7312$19h1md)
                                               (begin
                                                 (display '"%" g$p$7312$19h1md)
                                                 ((case-lambda
                                                    ((g$n$7320$19h1md)
                                                     (begin
                                                       (g$display-hex$7313$19h1md
                                                         (g$quotient$6168$19h1md
                                                           g$n$7320$19h1md
                                                           '16))
                                                       (g$display-hex$7313$19h1md
                                                         (g$remainder$6169$19h1md
                                                           g$n$7320$19h1md
                                                           '16)))))
                                                  (char->integer
                                                    g$c$7316$19h1md))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$7315$19h1md))))
                                        (g$f$7314$19h1md
                                          (cdr g$ls$7315$19h1md)))
                                      (void))))))
                        g$f$7314$19h1md)
                      g$x$7306$19h1md)
                     (g$extract$7311$19h1md)))))
              g$extract$7310$19h1md
              g$p$7309$19h1md)))))))
   (g$file-locator$7270$19h1md
     g$file-locator$7474$19h1md
     (g$make-parameter$6941$19h1md
       (case-lambda
         ((g$x$7322$19h1md)
          ((case-lambda
             ((g$str$7323$19h1md)
              ((letrec ((g$f$7324$19h1md
                          (case-lambda
                            ((g$ls$7325$19h1md
                               g$exts$7326$19h1md
                               g$failed-list$7327$19h1md)
                             (if (null? g$ls$7325$19h1md)
                               ((case-lambda
                                  (()
                                   (letrec* ((g$8916$7328$19h1md
                                               (make-record-type-descriptor
                                                 '&library-resolution
                                                 &condition-rtd
                                                 'g$8919$19h1md
                                                 '#f
                                                 '#f
                                                 '#((immutable library)
                                                    (immutable files))))
                                             (g$8918$7329$19h1md '#f)
                                             (g$8917$7330$19h1md
                                               (make-record-constructor-descriptor
                                                 g$8916$7328$19h1md
                                                 &condition-rcd
                                                 g$8918$7329$19h1md))
                                             (g$8915$7331$19h1md
                                               (record-predicate
                                                 g$8916$7328$19h1md))
                                             (g$make-library-resolution-condition$7332$19h1md
                                               (record-constructor
                                                 g$8917$7330$19h1md))
                                             (g$8913$7333$19h1md
                                               (record-accessor
                                                 g$8916$7328$19h1md
                                                 '0))
                                             (g$8914$7334$19h1md
                                               (record-accessor
                                                 g$8916$7328$19h1md
                                                 '1))
                                             (g$library-resolution-condition?$7335$19h1md
                                               (condition-predicate
                                                 g$8916$7328$19h1md))
                                             (g$condition-library$7336$19h1md
                                               (condition-accessor
                                                 g$8916$7328$19h1md
                                                 g$8913$7333$19h1md))
                                             (g$condition-files$7337$19h1md
                                               (condition-accessor
                                                 g$8916$7328$19h1md
                                                 g$8914$7334$19h1md)))
                                     (raise
                                       (condition
                                         (g$make-error$6078$19h1md)
                                         (g$make-who-condition$6104$19h1md
                                           'expander)
                                         (g$make-message-condition$6058$19h1md
                                           '"cannot locate library in library-path")
                                         (g$make-library-resolution-condition$7332$19h1md
                                           g$x$7322$19h1md
                                           (reverse
                                             g$failed-list$7327$19h1md))))))))
                               (if (null? g$exts$7326$19h1md)
                                 (g$f$7324$19h1md
                                   (cdr g$ls$7325$19h1md)
                                   (g$library-extensions$7268$19h1md)
                                   g$failed-list$7327$19h1md)
                                 ((case-lambda
                                    ((g$name$7338$19h1md)
                                     (if (g$file-exists?$5675$19h1md
                                           g$name$7338$19h1md)
                                       g$name$7338$19h1md
                                       (g$f$7324$19h1md
                                         g$ls$7325$19h1md
                                         (cdr g$exts$7326$19h1md)
                                         (cons
                                           g$name$7338$19h1md
                                           g$failed-list$7327$19h1md)))))
                                  (string-append
                                    (car g$ls$7325$19h1md)
                                    g$str$7323$19h1md
                                    (car g$exts$7326$19h1md)))))))))
                 g$f$7324$19h1md)
               (g$library-path$7267$19h1md)
               (g$library-extensions$7268$19h1md)
               '())))
           (g$library-name->file-name$7269$19h1md g$x$7322$19h1md))))
       (case-lambda
         ((g$f$7339$19h1md)
          (if (procedure? g$f$7339$19h1md)
            g$f$7339$19h1md
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$7339$19h1md))))))
   (g$serialize-all$7271$19h1md
     g$serialize-all$7475$19h1md
     (case-lambda
       ((g$serialize$7340$19h1md g$compile$7341$19h1md)
        (letrec* ((g$library-desc$7342$19h1md
                    (case-lambda
                      ((g$x$7344$19h1md)
                       (list
                         (g$library-id$7236$19h1md g$x$7344$19h1md)
                         (g$library-name$7237$19h1md g$x$7344$19h1md))))))
          (for-each
            (case-lambda
              ((g$x$7343$19h1md)
               (if (g$library-source-file-name$7249$19h1md g$x$7343$19h1md)
                 (g$serialize$7340$19h1md
                   (g$library-source-file-name$7249$19h1md g$x$7343$19h1md)
                   (list
                     (g$library-id$7236$19h1md g$x$7343$19h1md)
                     (g$library-name$7237$19h1md g$x$7343$19h1md)
                     (g$library-version$7238$19h1md g$x$7343$19h1md)
                     (map g$library-desc$7342$19h1md
                          (g$library-imp*$7239$19h1md g$x$7343$19h1md))
                     (map g$library-desc$7342$19h1md
                          (g$library-vis*$7240$19h1md g$x$7343$19h1md))
                     (map g$library-desc$7342$19h1md
                          (g$library-inv*$7241$19h1md g$x$7343$19h1md))
                     (g$library-subst$7242$19h1md g$x$7343$19h1md)
                     (g$library-env$7243$19h1md g$x$7343$19h1md)
                     (g$compile$7341$19h1md
                       (g$library-visit-code$7246$19h1md g$x$7343$19h1md))
                     (g$compile$7341$19h1md
                       (g$library-invoke-code$7247$19h1md g$x$7343$19h1md))
                     (g$library-visible?$7248$19h1md g$x$7343$19h1md)))
                 (void))))
            ((g$current-library-collection$7230$19h1md)))))))
   (g$current-precompiled-library-loader$7272$19h1md
     g$current-precompiled-library-loader$7476$19h1md
     (g$make-parameter$6941$19h1md
       (case-lambda ((g$filename$7345$19h1md g$sk$7346$19h1md) '#f))))
   (g$try-load-from-file$7273$19h1md
     g$try-load-from-file$7477$19h1md
     (case-lambda
       ((g$filename$7347$19h1md)
        ((g$current-precompiled-library-loader$7272$19h1md)
         g$filename$7347$19h1md
         (case-lambda
           ((g$id$7348$19h1md
              g$name$7349$19h1md
              g$ver$7350$19h1md
              g$imp*$7351$19h1md
              g$vis*$7352$19h1md
              g$inv*$7353$19h1md
              g$exp-subst$7354$19h1md
              g$exp-env$7355$19h1md
              g$visit-proc$7356$19h1md
              g$invoke-proc$7357$19h1md
              g$visible?$7358$19h1md)
            ((letrec ((g$f$7359$19h1md
                        (case-lambda
                          ((g$deps$7360$19h1md)
                           (if (null? g$deps$7360$19h1md)
                             (begin
                               (g$install-library$7283$19h1md
                                 g$id$7348$19h1md
                                 g$name$7349$19h1md
                                 g$ver$7350$19h1md
                                 g$imp*$7351$19h1md
                                 g$vis*$7352$19h1md
                                 g$inv*$7353$19h1md
                                 g$exp-subst$7354$19h1md
                                 g$exp-env$7355$19h1md
                                 g$visit-proc$7356$19h1md
                                 g$invoke-proc$7357$19h1md
                                 '#f
                                 '#f
                                 g$visible?$7358$19h1md
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$7361$19h1md)
                                 ((case-lambda
                                    ((g$label$7362$19h1md g$dname$7363$19h1md)
                                     ((case-lambda
                                        ((g$l$7364$19h1md)
                                         (if (if (g$library?$7234$19h1md
                                                   g$l$7364$19h1md)
                                               (begin
                                                 '#f
                                                 (eq? g$label$7362$19h1md
                                                      (g$library-id$7236$19h1md
                                                        g$l$7364$19h1md)))
                                               '#f)
                                           (g$f$7359$19h1md
                                             (cdr g$deps$7360$19h1md))
                                           (begin
                                             (g$fprintf$6855$19h1md
                                               (current-error-port)
                                               '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
                                               g$name$7349$19h1md
                                               g$dname$7363$19h1md
                                               g$filename$7347$19h1md)
                                             '#f))))
                                      (g$find-library-by-name$7278$19h1md
                                        g$dname$7363$19h1md))))
                                  (car g$d$7361$19h1md)
                                  (g$cadr$5323$19h1md g$d$7361$19h1md))))
                              (car g$deps$7360$19h1md)))))))
               g$f$7359$19h1md)
             (append g$imp*$7351$19h1md g$vis*$7352$19h1md g$inv*$7353$19h1md)))
           (g$others$7365$19h1md '#f))))))
   (g$library-loader$7274$19h1md
     g$library-loader$7478$19h1md
     (g$make-parameter$6941$19h1md
       (case-lambda
         ((g$x$7366$19h1md)
          ((case-lambda
             ((g$file-name$7367$19h1md)
              (if (not g$file-name$7367$19h1md)
                (assertion-violation '#f '"cannot file library" g$x$7366$19h1md)
                ((case-lambda
                   ((g$t$7368$19h1md)
                    (if g$t$7368$19h1md
                      g$t$7368$19h1md
                      (begin
                        '#f
                        ((g$current-library-expander$7275$19h1md)
                         (g$read-library-source-file$6940$19h1md
                           g$file-name$7367$19h1md)
                         g$file-name$7367$19h1md
                         (case-lambda
                           ((g$name$7369$19h1md)
                            (if (not (equal?
                                       g$name$7369$19h1md
                                       g$x$7366$19h1md))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (g$open-string-output-port$6653$19h1md)))
                                  (case-lambda
                                    ((g$p$7372$19h1md g$e$7373$19h1md)
                                     ((case-lambda
                                        ((g$e$7374$19h1md g$p$7375$19h1md)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$7375$19h1md)
                                           (write
                                             g$x$7366$19h1md
                                             g$p$7375$19h1md)
                                           (display
                                             '" in file "
                                             g$p$7375$19h1md)
                                           (display
                                             g$file-name$7367$19h1md
                                             g$p$7375$19h1md)
                                           (display '", found " g$p$7375$19h1md)
                                           (write
                                             g$name$7369$19h1md
                                             g$p$7375$19h1md)
                                           (display '" instead" g$p$7375$19h1md)
                                           (g$e$7374$19h1md))))
                                      g$e$7373$19h1md
                                      g$p$7372$19h1md)))))
                              (void)))))))))
                 (g$try-load-from-file$7273$19h1md g$file-name$7367$19h1md)))))
           ((g$file-locator$7270$19h1md) g$x$7366$19h1md))))
       (case-lambda
         ((g$f$7376$19h1md)
          (if (procedure? g$f$7376$19h1md)
            g$f$7376$19h1md
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$7376$19h1md))))))
   (g$current-library-expander$7275$19h1md
     g$current-library-expander$7479$19h1md
     (g$make-parameter$6941$19h1md
       (case-lambda
         ((g$x$7377$19h1md)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$7378$19h1md)
          (if (procedure? g$f$7378$19h1md)
            g$f$7378$19h1md
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$7378$19h1md))))))
   (g$external-pending-libraries$7276$19h1md
     g$external-pending-libraries$7480$19h1md
     (g$make-parameter$6941$19h1md '()))
   (g$find-external-library$7277$19h1md
     g$find-external-library$7481$19h1md
     (case-lambda
       ((g$name$7379$19h1md)
        (begin
          (if (g$member$5800$19h1md
                g$name$7379$19h1md
                (g$external-pending-libraries$7276$19h1md))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$7379$19h1md)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$7382$19h1md
                g$external-pending-libraries$7383$19h1md)
              ((case-lambda
                 ((g$swap$7384$19h1md)
                  (dynamic-wind
                    g$swap$7384$19h1md
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$7274$19h1md) g$name$7379$19h1md)
                         ((case-lambda
                            ((g$t$7385$19h1md)
                             (if g$t$7385$19h1md
                               g$t$7385$19h1md
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$7379$19h1md)))))
                          (g$find-library-by$7266$19h1md
                            (case-lambda
                              ((g$x$7386$19h1md)
                               (equal?
                                 (g$library-name$7237$19h1md g$x$7386$19h1md)
                                 g$name$7379$19h1md))))))))
                    g$swap$7384$19h1md)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$7387$19h1md)
                      (begin
                        (g$external-pending-libraries$7382$19h1md
                          g$external-pending-libraries$7383$19h1md)
                        (set! g$external-pending-libraries$7383$19h1md
                          g$t$7387$19h1md))))
                   (g$external-pending-libraries$7382$19h1md)))))))
           g$external-pending-libraries$7276$19h1md
           (cons
             g$name$7379$19h1md
             (g$external-pending-libraries$7276$19h1md)))))))
   (g$find-library-by-name$7278$19h1md
     g$find-library-by-name$7482$19h1md
     (case-lambda
       ((g$name$7388$19h1md)
        ((case-lambda
           ((g$t$7389$19h1md)
            (if g$t$7389$19h1md
              g$t$7389$19h1md
              (begin
                '#f
                (g$find-external-library$7277$19h1md g$name$7388$19h1md)))))
         (g$find-library-by$7266$19h1md
           (case-lambda
             ((g$x$7390$19h1md)
              (equal?
                (g$library-name$7237$19h1md g$x$7390$19h1md)
                g$name$7388$19h1md))))))))
   (g$library-exists?$7279$19h1md
     g$library-exists?$7483$19h1md
     (case-lambda
       ((g$name$7391$19h1md)
        (if (g$find-library-by$7266$19h1md
              (case-lambda
                ((g$x$7392$19h1md)
                 (equal?
                   (g$library-name$7237$19h1md g$x$7392$19h1md)
                   g$name$7391$19h1md))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$7280$19h1md
     g$find-library-by-spec/die$7484$19h1md
     (case-lambda
       ((g$spec$7393$19h1md)
        ((case-lambda
           ((g$id$7394$19h1md)
            ((case-lambda
               ((g$t$7395$19h1md)
                (if g$t$7395$19h1md
                  g$t$7395$19h1md
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$7393$19h1md)))))
             (g$find-library-by$7266$19h1md
               (case-lambda
                 ((g$x$7396$19h1md)
                  (eq? g$id$7394$19h1md
                       (g$library-id$7236$19h1md g$x$7396$19h1md))))))))
         (car g$spec$7393$19h1md)))))
   (g$label->binding-table$7281$19h1md
     g$label->binding-table$7485$19h1md
     (g$make-eq-hashtable$5597$19h1md))
   (g$install-library-record$7282$19h1md
     g$install-library-record$7486$19h1md
     (case-lambda
       ((g$lib$7397$19h1md)
        (begin
          ((case-lambda
             ((g$exp-env$7398$19h1md)
              (for-each
                (case-lambda
                  ((g$x$7399$19h1md)
                   ((case-lambda
                      ((g$label$7400$19h1md g$binding$7401$19h1md)
                       ((case-lambda
                          ((g$binding$7402$19h1md)
                           (g$hashtable-set!$5601$19h1md
                             g$label->binding-table$7281$19h1md
                             g$label$7400$19h1md
                             g$binding$7402$19h1md)))
                        ((case-lambda
                           ((g$t$7403$19h1md)
                            (if (memv g$t$7403$19h1md '(global))
                              (cons
                                'global
                                (cons
                                  g$lib$7397$19h1md
                                  (cdr g$binding$7401$19h1md)))
                              (if (memv g$t$7403$19h1md '(global-macro))
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$7397$19h1md
                                    (cdr g$binding$7401$19h1md)))
                                (if (memv g$t$7403$19h1md '(global-macro!))
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$7397$19h1md
                                      (cdr g$binding$7401$19h1md)))
                                  g$binding$7401$19h1md)))))
                         (car g$binding$7401$19h1md)))))
                    (car g$x$7399$19h1md)
                    (cdr g$x$7399$19h1md))))
                g$exp-env$7398$19h1md)))
           (g$library-env$7243$19h1md g$lib$7397$19h1md))
          ((g$current-library-collection$7230$19h1md) g$lib$7397$19h1md)))))
   (g$install-library$7283$19h1md
     g$install-library$7487$19h1md
     (case-lambda
       ((g$id$7404$19h1md
          g$name$7405$19h1md
          g$ver$7406$19h1md
          g$imp*$7407$19h1md
          g$vis*$7408$19h1md
          g$inv*$7409$19h1md
          g$exp-subst$7410$19h1md
          g$exp-env$7411$19h1md
          g$visit-proc$7412$19h1md
          g$invoke-proc$7413$19h1md
          g$visit-code$7414$19h1md
          g$invoke-code$7415$19h1md
          g$visible?$7416$19h1md
          g$source-file-name$7417$19h1md)
        ((case-lambda
           ((g$imp-lib*$7418$19h1md
              g$vis-lib*$7419$19h1md
              g$inv-lib*$7420$19h1md)
            (begin
              (if (not (if (symbol? g$id$7404$19h1md)
                         (if (list? g$name$7405$19h1md)
                           (begin '#f (list? g$ver$7406$19h1md))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$7404$19h1md
                  g$name$7405$19h1md
                  g$ver$7406$19h1md)
                (void))
              (if (g$library-exists?$7279$19h1md g$name$7405$19h1md)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$7405$19h1md)
                (void))
              ((case-lambda
                 ((g$lib$7421$19h1md)
                  (g$install-library-record$7282$19h1md g$lib$7421$19h1md)))
               (g$make-library$7235$19h1md
                 g$id$7404$19h1md
                 g$name$7405$19h1md
                 g$ver$7406$19h1md
                 g$imp-lib*$7418$19h1md
                 g$vis-lib*$7419$19h1md
                 g$inv-lib*$7420$19h1md
                 g$exp-subst$7410$19h1md
                 g$exp-env$7411$19h1md
                 g$visit-proc$7412$19h1md
                 g$invoke-proc$7413$19h1md
                 g$visit-code$7414$19h1md
                 g$invoke-code$7415$19h1md
                 g$visible?$7416$19h1md
                 g$source-file-name$7417$19h1md)))))
         (map g$find-library-by-spec/die$7280$19h1md g$imp*$7407$19h1md)
         (map g$find-library-by-spec/die$7280$19h1md g$vis*$7408$19h1md)
         (map g$find-library-by-spec/die$7280$19h1md g$inv*$7409$19h1md)))))
   (g$imported-label->binding$7284$19h1md
     g$imported-label->binding$7488$19h1md
     (case-lambda
       ((g$lab$7422$19h1md)
        (g$hashtable-ref$5600$19h1md
          g$label->binding-table$7281$19h1md
          g$lab$7422$19h1md
          '#f))))
   (g$invoke-library$7285$19h1md
     g$invoke-library$7489$19h1md
     (case-lambda
       ((g$lib$7423$19h1md)
        ((case-lambda
           ((g$invoke$7424$19h1md)
            (if (procedure? g$invoke$7424$19h1md)
              (begin
                (g$set-library-invoke-state!$7259$19h1md
                  g$lib$7423$19h1md
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$7423$19h1md))))
                (for-each
                  g$invoke-library$7285$19h1md
                  (g$library-inv*$7241$19h1md g$lib$7423$19h1md))
                (g$set-library-invoke-state!$7259$19h1md
                  g$lib$7423$19h1md
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$7423$19h1md))))
                (g$invoke$7424$19h1md)
                (g$set-library-invoke-state!$7259$19h1md g$lib$7423$19h1md '#t))
              (void))))
         (g$library-invoke-state$7245$19h1md g$lib$7423$19h1md)))))
   (g$visit-library$7286$19h1md
     g$visit-library$7490$19h1md
     (case-lambda
       ((g$lib$7425$19h1md)
        ((case-lambda
           ((g$visit$7426$19h1md)
            (if (procedure? g$visit$7426$19h1md)
              (begin
                (g$set-library-visit-state!$7258$19h1md
                  g$lib$7425$19h1md
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$7425$19h1md))))
                (for-each
                  g$invoke-library$7285$19h1md
                  (g$library-vis*$7240$19h1md g$lib$7425$19h1md))
                (g$set-library-visit-state!$7258$19h1md
                  g$lib$7425$19h1md
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$7425$19h1md))))
                (g$visit$7426$19h1md)
                (g$set-library-visit-state!$7258$19h1md g$lib$7425$19h1md '#t))
              (void))))
         (g$library-visit-state$7244$19h1md g$lib$7425$19h1md)))))
   (g$invoke-library-by-spec$7287$19h1md
     g$invoke-library-by-spec$7491$19h1md
     (case-lambda
       ((g$spec$7427$19h1md)
        (g$invoke-library$7285$19h1md
          (g$find-library-by-spec/die$7280$19h1md g$spec$7427$19h1md)))))
   (g$installed-libraries$7288$19h1md
     g$installed-libraries$7492$19h1md
     (case-lambda
       ((g$all?$7428$19h1md)
        ((letrec ((g$f$7429$19h1md
                    (case-lambda
                      ((g$ls$7430$19h1md)
                       (if (null? g$ls$7430$19h1md)
                         '()
                         (if ((case-lambda
                                ((g$t$7431$19h1md)
                                 (if g$t$7431$19h1md
                                   g$t$7431$19h1md
                                   (begin
                                     '#f
                                     (g$library-visible?$7248$19h1md
                                       (car g$ls$7430$19h1md))))))
                              g$all?$7428$19h1md)
                           (cons
                             (car g$ls$7430$19h1md)
                             (g$f$7429$19h1md (cdr g$ls$7430$19h1md)))
                           (g$f$7429$19h1md (cdr g$ls$7430$19h1md))))))))
           g$f$7429$19h1md)
         ((g$current-library-collection$7230$19h1md))))
       (() (g$installed-libraries$7288$19h1md '#f))))
   (g$library-spec$7289$19h1md
     g$library-spec$7493$19h1md
     (case-lambda
       ((g$x$7432$19h1md)
        (begin
          (if (not (g$library?$7234$19h1md g$x$7432$19h1md))
            (assertion-violation 'library-spec '"not a library" g$x$7432$19h1md)
            (void))
          (list
            (g$library-id$7236$19h1md g$x$7432$19h1md)
            (g$library-name$7237$19h1md g$x$7432$19h1md)
            (g$library-version$7238$19h1md g$x$7432$19h1md)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$7494$19h1md
     g$build-global-define$7604$19h1md
     (case-lambda ((g$x$7575$19h1md) (g$build-void$7571$19h1md))))
   (g$build-lambda$7543$19h1md
     g$build-lambda$7605$19h1md
     (case-lambda
       ((g$ae$7576$19h1md g$vars$7577$19h1md g$exp$7578$19h1md)
        (list 'case-lambda (list g$vars$7577$19h1md g$exp$7578$19h1md)))))
   (g$build-case-lambda$7544$19h1md
     g$build-case-lambda$7606$19h1md
     (case-lambda
       ((g$ae$7579$19h1md g$vars*$7580$19h1md g$exp*$7581$19h1md)
        (cons 'case-lambda (map list g$vars*$7580$19h1md g$exp*$7581$19h1md)))))
   (g$build-let$7545$19h1md
     g$build-let$7607$19h1md
     (case-lambda
       ((g$ae$7582$19h1md
          g$lhs*$7583$19h1md
          g$rhs*$7584$19h1md
          g$body$7585$19h1md)
        (cons
          (g$build-lambda$7543$19h1md
            g$ae$7582$19h1md
            g$lhs*$7583$19h1md
            g$body$7585$19h1md)
          g$rhs*$7584$19h1md))))
   (g$build-sequence$7570$19h1md
     g$build-sequence$7608$19h1md
     (case-lambda
       ((g$ae$7586$19h1md g$exps$7587$19h1md)
        ((letrec ((g$loop$7588$19h1md
                    (case-lambda
                      ((g$exps$7589$19h1md)
                       (if (null? (cdr g$exps$7589$19h1md))
                         (car g$exps$7589$19h1md)
                         (if (equal?
                               (car g$exps$7589$19h1md)
                               (g$build-void$7571$19h1md))
                           (g$loop$7588$19h1md (cdr g$exps$7589$19h1md))
                           (cons 'begin g$exps$7589$19h1md)))))))
           g$loop$7588$19h1md)
         g$exps$7587$19h1md))))
   (g$build-void$7571$19h1md
     g$build-void$7609$19h1md
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$7572$19h1md
     g$build-letrec$7610$19h1md
     (case-lambda
       ((g$ae$7590$19h1md
          g$vars$7591$19h1md
          g$val-exps$7592$19h1md
          g$body-exp$7593$19h1md)
        (if (null? g$vars$7591$19h1md)
          g$body-exp$7593$19h1md
          (list
            'letrec
            (map list g$vars$7591$19h1md g$val-exps$7592$19h1md)
            g$body-exp$7593$19h1md)))))
   (g$build-letrec*$7573$19h1md
     g$build-letrec*$7611$19h1md
     (case-lambda
       ((g$ae$7594$19h1md
          g$vars$7595$19h1md
          g$val-exps$7596$19h1md
          g$body-exp$7597$19h1md)
        (if (null? g$vars$7595$19h1md)
          g$body-exp$7597$19h1md
          (list
            'letrec*
            (map list g$vars$7595$19h1md g$val-exps$7596$19h1md)
            g$body-exp$7597$19h1md)))))
   (g$build-library-letrec*$7574$19h1md
     g$build-library-letrec*$7612$19h1md
     (case-lambda
       ((g$ae$7598$19h1md
          g$name$7599$19h1md
          g$vars$7600$19h1md
          g$locs$7601$19h1md
          g$val-exps$7602$19h1md
          g$body-exp$7603$19h1md)
        (list
          'library-letrec*
          g$name$7599$19h1md
          (map list
               g$vars$7600$19h1md
               g$locs$7601$19h1md
               g$val-exps$7602$19h1md)
          g$body-exp$7603$19h1md)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$7613$19h1md
     g$set-cons$11245$19h1md
     (case-lambda
       ((g$x$8069$19h1md g$ls$8070$19h1md)
        (if (memq g$x$8069$19h1md g$ls$8070$19h1md)
          g$ls$8070$19h1md
          (cons g$x$8069$19h1md g$ls$8070$19h1md)))))
   (g$set-union$7614$19h1md
     g$set-union$11246$19h1md
     (case-lambda
       ((g$ls1$8071$19h1md g$ls2$8072$19h1md)
        (if (null? g$ls1$8071$19h1md)
          g$ls2$8072$19h1md
          (if (memq (car g$ls1$8071$19h1md) g$ls2$8072$19h1md)
            (g$set-union$7614$19h1md (cdr g$ls1$8071$19h1md) g$ls2$8072$19h1md)
            (cons
              (car g$ls1$8071$19h1md)
              (g$set-union$7614$19h1md
                (cdr g$ls1$8071$19h1md)
                g$ls2$8072$19h1md)))))))
   (g$top-mark*$7616$19h1md g$top-mark*$11247$19h1md '(top))
   (g$top-marked?$7617$19h1md
     g$top-marked?$11248$19h1md
     (case-lambda ((g$m*$8073$19h1md) (memq 'top g$m*$8073$19h1md))))
   (g$gen-lexical$7618$19h1md
     g$gen-lexical$11249$19h1md
     (case-lambda
       ((g$sym$8074$19h1md)
        (if (symbol? g$sym$8074$19h1md)
          (gensym g$sym$8074$19h1md)
          (if (g$stx?$7646$19h1md g$sym$8074$19h1md)
            (g$gen-lexical$7618$19h1md
              (g$id->sym$7675$19h1md g$sym$8074$19h1md))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$8074$19h1md))))))
   (g$gen-global$7619$19h1md
     g$gen-global$11250$19h1md
     (case-lambda
       ((g$x$8075$19h1md) (g$gen-lexical$7618$19h1md g$x$8075$19h1md))))
   (g$gen-label$7620$19h1md
     g$gen-label$11251$19h1md
     (case-lambda ((g$_$8076$19h1md) (gensym))))
   (g$gen-top-level-label$7621$19h1md
     g$gen-top-level-label$11252$19h1md
     (case-lambda
       ((g$id$8077$19h1md g$rib$8078$19h1md)
        (letrec* ((g$find$8079$19h1md
                    (case-lambda
                      ((g$sym$8085$19h1md
                         g$mark*$8086$19h1md
                         g$sym*$8087$19h1md
                         g$mark**$8088$19h1md
                         g$label*$8089$19h1md)
                       (if (pair? g$sym*$8087$19h1md)
                         (begin
                           '#f
                           (if (if (eq? g$sym$8085$19h1md
                                        (car g$sym*$8087$19h1md))
                                 (begin
                                   '#f
                                   (g$same-marks?$7676$19h1md
                                     g$mark*$8086$19h1md
                                     (car g$mark**$8088$19h1md)))
                                 '#f)
                             (car g$label*$8089$19h1md)
                             (g$find$8079$19h1md
                               g$sym$8085$19h1md
                               g$mark*$8086$19h1md
                               (cdr g$sym*$8087$19h1md)
                               (cdr g$mark**$8088$19h1md)
                               (cdr g$label*$8089$19h1md))))
                         '#f)))))
          ((case-lambda
             ((g$sym$8080$19h1md g$mark*$8081$19h1md)
              ((case-lambda
                 ((g$sym*$8082$19h1md)
                  ((case-lambda
                     ((g$t$8083$19h1md)
                      (if g$t$8083$19h1md
                        ((case-lambda
                           ((g$label$8084$19h1md)
                            (if (g$imported-label->binding$7488$19h1md
                                  g$label$8084$19h1md)
                              (gensym)
                              g$label$8084$19h1md)))
                         g$t$8083$19h1md)
                        (gensym))))
                   (if (memq
                         g$sym$8080$19h1md
                         (g$rib-sym*$7629$19h1md g$rib$8078$19h1md))
                     (begin
                       '#f
                       (g$find$8079$19h1md
                         g$sym$8080$19h1md
                         g$mark*$8081$19h1md
                         g$sym*$8082$19h1md
                         (g$rib-mark**$7630$19h1md g$rib$8078$19h1md)
                         (g$rib-label*$7631$19h1md g$rib$8078$19h1md)))
                     '#f))))
               (g$rib-sym*$7629$19h1md g$rib$8078$19h1md))))
           (g$id->sym$7675$19h1md g$id$8077$19h1md)
           (g$stx-mark*$7649$19h1md g$id$8077$19h1md))))))
   (g$gen-define-label+loc$7622$19h1md
     g$gen-define-label+loc$11253$19h1md
     (case-lambda
       ((g$id$8090$19h1md g$rib$8091$19h1md)
        ((case-lambda
           ((g$t$8092$19h1md)
            (if g$t$8092$19h1md
              ((case-lambda
                 ((g$env$8093$19h1md)
                  ((case-lambda
                     ((g$label$8094$19h1md g$locs$8095$19h1md)
                      (values
                        g$label$8094$19h1md
                        ((case-lambda
                           ((g$t$8096$19h1md)
                            (if g$t$8096$19h1md
                              (cdr g$t$8096$19h1md)
                              ((case-lambda
                                 ((g$loc$8097$19h1md)
                                  (begin
                                    (g$set-interaction-env-locs!$8035$19h1md
                                      g$env$8093$19h1md
                                      (cons
                                        (cons
                                          g$label$8094$19h1md
                                          g$loc$8097$19h1md)
                                        g$locs$8095$19h1md))
                                    g$loc$8097$19h1md)))
                               (g$gen-lexical$7618$19h1md g$id$8090$19h1md)))))
                         (assq g$label$8094$19h1md g$locs$8095$19h1md)))))
                   (g$gen-top-level-label$7621$19h1md
                     g$id$8090$19h1md
                     g$rib$8091$19h1md)
                   (g$interaction-env-locs$8032$19h1md g$env$8093$19h1md))))
               g$t$8092$19h1md)
              (values (gensym) (g$gen-lexical$7618$19h1md g$id$8090$19h1md)))))
         (g$top-level-context$8068$19h1md)))))
   (g$gen-define-label$7623$19h1md
     g$gen-define-label$11254$19h1md
     (case-lambda
       ((g$id$8098$19h1md g$rib$8099$19h1md)
        (if (g$top-level-context$8068$19h1md)
          (g$gen-top-level-label$7621$19h1md g$id$8098$19h1md g$rib$8099$19h1md)
          (gensym)))))
   (g$9214$7624$19h1md
     g$9214$11255$19h1md
     (make-record-type-descriptor
       'rib
       '#f
       'g$9217$19h1md
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq))))
   (g$9216$7625$19h1md g$9216$11256$19h1md '#f)
   (g$9215$7626$19h1md
     g$9215$11257$19h1md
     (make-record-constructor-descriptor
       g$9214$7624$19h1md
       '#f
       g$9216$7625$19h1md))
   (g$rib?$7627$19h1md
     g$rib?$11258$19h1md
     (record-predicate g$9214$7624$19h1md))
   (g$make-rib$7628$19h1md
     g$make-rib$11259$19h1md
     (record-constructor g$9215$7626$19h1md))
   (g$rib-sym*$7629$19h1md
     g$rib-sym*$11260$19h1md
     (record-accessor g$9214$7624$19h1md '0))
   (g$rib-mark**$7630$19h1md
     g$rib-mark**$11261$19h1md
     (record-accessor g$9214$7624$19h1md '1))
   (g$rib-label*$7631$19h1md
     g$rib-label*$11262$19h1md
     (record-accessor g$9214$7624$19h1md '2))
   (g$rib-sealed/freq$7632$19h1md
     g$rib-sealed/freq$11263$19h1md
     (record-accessor g$9214$7624$19h1md '3))
   (g$set-rib-sym*!$7633$19h1md
     g$set-rib-sym*!$11264$19h1md
     (record-mutator g$9214$7624$19h1md '0))
   (g$set-rib-mark**!$7634$19h1md
     g$set-rib-mark**!$11265$19h1md
     (record-mutator g$9214$7624$19h1md '1))
   (g$set-rib-label*!$7635$19h1md
     g$set-rib-label*!$11266$19h1md
     (record-mutator g$9214$7624$19h1md '2))
   (g$set-rib-sealed/freq!$7636$19h1md
     g$set-rib-sealed/freq!$11267$19h1md
     (record-mutator g$9214$7624$19h1md '3))
   (g$make-empty-rib$7637$19h1md
     g$make-empty-rib$11268$19h1md
     (case-lambda (() (g$make-rib$7628$19h1md '() '() '() '#f))))
   (g$extend-rib!$7638$19h1md
     g$extend-rib!$11269$19h1md
     (case-lambda
       ((g$rib$8100$19h1md g$id$8101$19h1md g$label$8102$19h1md)
        (letrec* ((g$find$8103$19h1md
                    (case-lambda
                      ((g$sym$8109$19h1md
                         g$mark*$8110$19h1md
                         g$sym*$8111$19h1md
                         g$mark**$8112$19h1md
                         g$label*$8113$19h1md)
                       (if (pair? g$sym*$8111$19h1md)
                         (begin
                           '#f
                           (if (if (eq? g$sym$8109$19h1md
                                        (car g$sym*$8111$19h1md))
                                 (begin
                                   '#f
                                   (g$same-marks?$7676$19h1md
                                     g$mark*$8110$19h1md
                                     (car g$mark**$8112$19h1md)))
                                 '#f)
                             g$label*$8113$19h1md
                             (g$find$8103$19h1md
                               g$sym$8109$19h1md
                               g$mark*$8110$19h1md
                               (cdr g$sym*$8111$19h1md)
                               (cdr g$mark**$8112$19h1md)
                               (cdr g$label*$8113$19h1md))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$7632$19h1md g$rib$8100$19h1md)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$8100$19h1md)
              (void))
            ((case-lambda
               ((g$sym$8104$19h1md g$mark*$8105$19h1md)
                ((case-lambda
                   ((g$sym*$8106$19h1md)
                    ((case-lambda
                       ((g$t$8107$19h1md)
                        (if g$t$8107$19h1md
                          ((case-lambda
                             ((g$p$8108$19h1md)
                              (if (not (eq? g$label$8102$19h1md
                                            (car g$p$8108$19h1md)))
                                (if (g$top-level-context$8068$19h1md)
                                  (set-car! g$p$8108$19h1md g$label$8102$19h1md)
                                  (g$syntax-violation$8061$19h1md
                                    '#f
                                    '"cannot redefine"
                                    g$id$8101$19h1md))
                                (void))))
                           g$t$8107$19h1md)
                          (begin
                            (g$set-rib-sym*!$7633$19h1md
                              g$rib$8100$19h1md
                              (cons g$sym$8104$19h1md g$sym*$8106$19h1md))
                            (g$set-rib-mark**!$7634$19h1md
                              g$rib$8100$19h1md
                              (cons
                                g$mark*$8105$19h1md
                                (g$rib-mark**$7630$19h1md g$rib$8100$19h1md)))
                            (g$set-rib-label*!$7635$19h1md
                              g$rib$8100$19h1md
                              (cons
                                g$label$8102$19h1md
                                (g$rib-label*$7631$19h1md
                                  g$rib$8100$19h1md)))))))
                     (if (memq
                           g$sym$8104$19h1md
                           (g$rib-sym*$7629$19h1md g$rib$8100$19h1md))
                       (begin
                         '#f
                         (g$find$8103$19h1md
                           g$sym$8104$19h1md
                           g$mark*$8105$19h1md
                           g$sym*$8106$19h1md
                           (g$rib-mark**$7630$19h1md g$rib$8100$19h1md)
                           (g$rib-label*$7631$19h1md g$rib$8100$19h1md)))
                       '#f))))
                 (g$rib-sym*$7629$19h1md g$rib$8100$19h1md))))
             (g$id->sym$7675$19h1md g$id$8101$19h1md)
             (g$stx-mark*$7649$19h1md g$id$8101$19h1md)))))))
   (g$make-rib-map$7639$19h1md
     g$make-rib-map$11270$19h1md
     (case-lambda
       ((g$sym*$8114$19h1md)
        ((case-lambda
           ((g$ht$8115$19h1md)
            ((letrec ((g$f$8116$19h1md
                        (case-lambda
                          ((g$i$8117$19h1md g$sym*$8118$19h1md)
                           (if (null? g$sym*$8118$19h1md)
                             g$ht$8115$19h1md
                             (begin
                               (g$hashtable-update!$5604$19h1md
                                 g$ht$8115$19h1md
                                 (car g$sym*$8118$19h1md)
                                 (case-lambda
                                   ((g$x$8119$19h1md)
                                    (cons g$i$8117$19h1md g$x$8119$19h1md)))
                                 '())
                               (g$f$8116$19h1md
                                 (+ g$i$8117$19h1md '1)
                                 (cdr g$sym*$8118$19h1md))))))))
               g$f$8116$19h1md)
             '0
             g$sym*$8114$19h1md)))
         (g$make-eq-hashtable$5597$19h1md)))))
   (g$seal-rib!$7640$19h1md
     g$seal-rib!$11271$19h1md
     (case-lambda
       ((g$rib$8120$19h1md)
        ((case-lambda
           ((g$sym*$8121$19h1md)
            (if (not (null? g$sym*$8121$19h1md))
              (begin
                (g$set-rib-sym*!$7633$19h1md
                  g$rib$8120$19h1md
                  (list->vector g$sym*$8121$19h1md))
                (g$set-rib-mark**!$7634$19h1md
                  g$rib$8120$19h1md
                  (list->vector (g$rib-mark**$7630$19h1md g$rib$8120$19h1md)))
                (g$set-rib-label*!$7635$19h1md
                  g$rib$8120$19h1md
                  (list->vector (g$rib-label*$7631$19h1md g$rib$8120$19h1md)))
                (g$set-rib-sealed/freq!$7636$19h1md
                  g$rib$8120$19h1md
                  (g$make-rib-map$7639$19h1md g$sym*$8121$19h1md)))
              (void))))
         (g$rib-sym*$7629$19h1md g$rib$8120$19h1md)))))
   (g$unseal-rib!$7641$19h1md
     g$unseal-rib!$11272$19h1md
     (case-lambda
       ((g$rib$8122$19h1md)
        (if (g$rib-sealed/freq$7632$19h1md g$rib$8122$19h1md)
          (begin
            (g$set-rib-sealed/freq!$7636$19h1md g$rib$8122$19h1md '#f)
            (g$set-rib-sym*!$7633$19h1md
              g$rib$8122$19h1md
              (vector->list (g$rib-sym*$7629$19h1md g$rib$8122$19h1md)))
            (g$set-rib-mark**!$7634$19h1md
              g$rib$8122$19h1md
              (vector->list (g$rib-mark**$7630$19h1md g$rib$8122$19h1md)))
            (g$set-rib-label*!$7635$19h1md
              g$rib$8122$19h1md
              (vector->list (g$rib-label*$7631$19h1md g$rib$8122$19h1md))))
          (void)))))
   (g$make-full-rib$7642$19h1md
     g$make-full-rib$11273$19h1md
     (case-lambda
       ((g$id*$8123$19h1md g$label*$8124$19h1md)
        ((case-lambda
           ((g$r$8125$19h1md)
            (begin (g$seal-rib!$7640$19h1md g$r$8125$19h1md) g$r$8125$19h1md)))
         (g$make-rib$7628$19h1md
           (map g$id->sym$7675$19h1md g$id*$8123$19h1md)
           (map g$stx-mark*$7649$19h1md g$id*$8123$19h1md)
           g$label*$8124$19h1md
           '#f)))))
   (g$9240$7643$19h1md
     g$9240$11274$19h1md
     (make-record-type-descriptor
       'stx
       '#f
       'g$9243$19h1md
       '#t
       '#t
       '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*))))
   (g$9242$7644$19h1md g$9242$11275$19h1md '#f)
   (g$9241$7645$19h1md
     g$9241$11276$19h1md
     (make-record-constructor-descriptor
       g$9240$7643$19h1md
       '#f
       g$9242$7644$19h1md))
   (g$stx?$7646$19h1md
     g$stx?$11277$19h1md
     (record-predicate g$9240$7643$19h1md))
   (g$make-stx$7647$19h1md
     g$make-stx$11278$19h1md
     (record-constructor g$9241$7645$19h1md))
   (g$stx-expr$7648$19h1md
     g$stx-expr$11279$19h1md
     (record-accessor g$9240$7643$19h1md '0))
   (g$stx-mark*$7649$19h1md
     g$stx-mark*$11280$19h1md
     (record-accessor g$9240$7643$19h1md '1))
   (g$stx-subst*$7650$19h1md
     g$stx-subst*$11281$19h1md
     (record-accessor g$9240$7643$19h1md '2))
   (g$stx-ae*$7651$19h1md
     g$stx-ae*$11282$19h1md
     (record-accessor g$9240$7643$19h1md '3))
   (g$set-stx-expr!$7652$19h1md
     g$set-stx-expr!$11283$19h1md
     (record-mutator g$9240$7643$19h1md '0))
   (g$set-stx-mark*!$7653$19h1md
     g$set-stx-mark*!$11284$19h1md
     (record-mutator g$9240$7643$19h1md '1))
   (g$set-stx-subst*!$7654$19h1md
     g$set-stx-subst*!$11285$19h1md
     (record-mutator g$9240$7643$19h1md '2))
   (g$set-stx-ae*!$7655$19h1md
     g$set-stx-ae*!$11286$19h1md
     (record-mutator g$9240$7643$19h1md '3))
   (g$rp$7656$19h1md
     g$rp$11287$19h1md
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$8126$19h1md g$p$8127$19h1md)
          (begin
            (display '"#<syntax " g$p$8127$19h1md)
            (write (g$stx->datum$7685$19h1md g$x$8126$19h1md) g$p$8127$19h1md)
            ((case-lambda
               ((g$expr$8128$19h1md)
                (if (annotation? g$expr$8128$19h1md)
                  ((case-lambda
                     ((g$src$8129$19h1md)
                      (if (pair? g$src$8129$19h1md)
                        (begin
                          (display '" [" g$p$8127$19h1md)
                          (display (cdr g$src$8129$19h1md) g$p$8127$19h1md)
                          (display '" of " g$p$8127$19h1md)
                          (display (car g$src$8129$19h1md) g$p$8127$19h1md)
                          (display '"]" g$p$8127$19h1md))
                        (void))))
                   (annotation-source g$expr$8128$19h1md))
                  (void))))
             (g$stx-expr$7648$19h1md g$x$8126$19h1md))
            (display '">" g$p$8127$19h1md))))))
   (g$datum->stx$7657$19h1md
     g$datum->stx$11288$19h1md
     (case-lambda
       ((g$id$8130$19h1md g$datum$8131$19h1md)
        (g$make-stx$7647$19h1md
          g$datum$8131$19h1md
          (g$stx-mark*$7649$19h1md g$id$8130$19h1md)
          (g$stx-subst*$7650$19h1md g$id$8130$19h1md)
          (g$stx-ae*$7651$19h1md g$id$8130$19h1md)))))
   (g$gen-mark$7658$19h1md
     g$gen-mark$11289$19h1md
     (case-lambda (() (string '#\m))))
   (g$anti-mark$7659$19h1md g$anti-mark$11290$19h1md '#f)
   (g$anti-mark?$7660$19h1md g$anti-mark?$11291$19h1md not)
   (g$join-wraps$7661$19h1md
     g$join-wraps$11292$19h1md
     (case-lambda
       ((g$m1*$8132$19h1md
          g$s1*$8133$19h1md
          g$ae1*$8134$19h1md
          g$e$8135$19h1md)
        (letrec* ((g$cancel$8136$19h1md
                    (case-lambda
                      ((g$ls1$8140$19h1md g$ls2$8141$19h1md)
                       ((letrec ((g$f$8142$19h1md
                                   (case-lambda
                                     ((g$x$8143$19h1md g$ls1$8144$19h1md)
                                      (if (null? g$ls1$8144$19h1md)
                                        (cdr g$ls2$8141$19h1md)
                                        (cons
                                          g$x$8143$19h1md
                                          (g$f$8142$19h1md
                                            (car g$ls1$8144$19h1md)
                                            (cdr g$ls1$8144$19h1md))))))))
                          g$f$8142$19h1md)
                        (car g$ls1$8140$19h1md)
                        (cdr g$ls1$8140$19h1md))))))
          ((case-lambda
             ((g$m2*$8137$19h1md g$s2*$8138$19h1md g$ae2*$8139$19h1md)
              (if (if (not (null? g$m1*$8132$19h1md))
                    (if (not (null? g$m2*$8137$19h1md))
                      (begin
                        '#f
                        (g$anti-mark?$7660$19h1md (car g$m2*$8137$19h1md)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$8136$19h1md g$m1*$8132$19h1md g$m2*$8137$19h1md)
                  (g$cancel$8136$19h1md g$s1*$8133$19h1md g$s2*$8138$19h1md)
                  (g$cancel$8136$19h1md g$ae1*$8134$19h1md g$ae2*$8139$19h1md))
                (values
                  (append g$m1*$8132$19h1md g$m2*$8137$19h1md)
                  (append g$s1*$8133$19h1md g$s2*$8138$19h1md)
                  (append g$ae1*$8134$19h1md g$ae2*$8139$19h1md)))))
           (g$stx-mark*$7649$19h1md g$e$8135$19h1md)
           (g$stx-subst*$7650$19h1md g$e$8135$19h1md)
           (g$stx-ae*$7651$19h1md g$e$8135$19h1md))))))
   (g$mkstx$7662$19h1md
     g$mkstx$11293$19h1md
     (case-lambda
       ((g$e$8145$19h1md g$m*$8146$19h1md g$s*$8147$19h1md g$ae*$8148$19h1md)
        (if (g$stx?$7646$19h1md g$e$8145$19h1md)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$7661$19h1md
                 g$m*$8146$19h1md
                 g$s*$8147$19h1md
                 g$ae*$8148$19h1md
                 g$e$8145$19h1md)))
            (case-lambda
              ((g$m*$8152$19h1md g$s*$8153$19h1md g$ae*$8154$19h1md)
               ((case-lambda
                  ((g$ae*$8155$19h1md g$s*$8156$19h1md g$m*$8157$19h1md)
                   (g$make-stx$7647$19h1md
                     (g$stx-expr$7648$19h1md g$e$8145$19h1md)
                     g$m*$8157$19h1md
                     g$s*$8156$19h1md
                     g$ae*$8155$19h1md)))
                g$ae*$8154$19h1md
                g$s*$8153$19h1md
                g$m*$8152$19h1md))))
          (g$make-stx$7647$19h1md
            g$e$8145$19h1md
            g$m*$8146$19h1md
            g$s*$8147$19h1md
            g$ae*$8148$19h1md)))))
   (g$add-mark$7663$19h1md
     g$add-mark$11294$19h1md
     (case-lambda
       ((g$m$8158$19h1md g$e$8159$19h1md g$ae$8160$19h1md)
        (g$mkstx$7662$19h1md
          g$e$8159$19h1md
          (list g$m$8158$19h1md)
          '(shift)
          (list g$ae$8160$19h1md)))))
   (g$add-subst$7664$19h1md
     g$add-subst$11295$19h1md
     (case-lambda
       ((g$subst$8161$19h1md g$e$8162$19h1md)
        (g$mkstx$7662$19h1md
          g$e$8162$19h1md
          '()
          (list g$subst$8161$19h1md)
          '()))))
   (g$syntax-kind?$7665$19h1md
     g$syntax-kind?$11296$19h1md
     (case-lambda
       ((g$x$8163$19h1md g$p?$8164$19h1md)
        (if (g$stx?$7646$19h1md g$x$8163$19h1md)
          (g$syntax-kind?$7665$19h1md
            (g$stx-expr$7648$19h1md g$x$8163$19h1md)
            g$p?$8164$19h1md)
          (if (annotation? g$x$8163$19h1md)
            (g$syntax-kind?$7665$19h1md
              (annotation-expression g$x$8163$19h1md)
              g$p?$8164$19h1md)
            (g$p?$8164$19h1md g$x$8163$19h1md))))))
   (g$syntax-vector->list$7666$19h1md
     g$syntax-vector->list$11297$19h1md
     (case-lambda
       ((g$x$8165$19h1md)
        (if (g$stx?$7646$19h1md g$x$8165$19h1md)
          ((case-lambda
             ((g$ls$8166$19h1md
                g$m*$8167$19h1md
                g$s*$8168$19h1md
                g$ae*$8169$19h1md)
              (map (case-lambda
                     ((g$x$8170$19h1md)
                      (g$mkstx$7662$19h1md
                        g$x$8170$19h1md
                        g$m*$8167$19h1md
                        g$s*$8168$19h1md
                        g$ae*$8169$19h1md)))
                   g$ls$8166$19h1md)))
           (g$syntax-vector->list$7666$19h1md
             (g$stx-expr$7648$19h1md g$x$8165$19h1md))
           (g$stx-mark*$7649$19h1md g$x$8165$19h1md)
           (g$stx-subst*$7650$19h1md g$x$8165$19h1md)
           (g$stx-ae*$7651$19h1md g$x$8165$19h1md))
          (if (annotation? g$x$8165$19h1md)
            (g$syntax-vector->list$7666$19h1md
              (annotation-expression g$x$8165$19h1md))
            (if (vector? g$x$8165$19h1md)
              (vector->list g$x$8165$19h1md)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$8165$19h1md)))))))
   (g$syntax-pair?$7667$19h1md
     g$syntax-pair?$11298$19h1md
     (case-lambda
       ((g$x$8171$19h1md) (g$syntax-kind?$7665$19h1md g$x$8171$19h1md pair?))))
   (g$syntax-vector?$7668$19h1md
     g$syntax-vector?$11299$19h1md
     (case-lambda
       ((g$x$8172$19h1md)
        (g$syntax-kind?$7665$19h1md g$x$8172$19h1md vector?))))
   (g$syntax-null?$7669$19h1md
     g$syntax-null?$11300$19h1md
     (case-lambda
       ((g$x$8173$19h1md) (g$syntax-kind?$7665$19h1md g$x$8173$19h1md null?))))
   (g$syntax-list?$7670$19h1md
     g$syntax-list?$11301$19h1md
     (case-lambda
       ((g$x$8174$19h1md)
        ((case-lambda
           ((g$t$8175$19h1md)
            (if g$t$8175$19h1md
              g$t$8175$19h1md
              (begin
                '#f
                (if (g$syntax-pair?$7667$19h1md g$x$8174$19h1md)
                  (begin
                    '#f
                    (g$syntax-list?$7670$19h1md
                      (g$syntax-cdr$7672$19h1md g$x$8174$19h1md)))
                  '#f)))))
         (g$syntax-null?$7669$19h1md g$x$8174$19h1md)))))
   (g$syntax-car$7671$19h1md
     g$syntax-car$11302$19h1md
     (case-lambda
       ((g$x$8176$19h1md)
        (if (g$stx?$7646$19h1md g$x$8176$19h1md)
          (g$mkstx$7662$19h1md
            (g$syntax-car$7671$19h1md (g$stx-expr$7648$19h1md g$x$8176$19h1md))
            (g$stx-mark*$7649$19h1md g$x$8176$19h1md)
            (g$stx-subst*$7650$19h1md g$x$8176$19h1md)
            (g$stx-ae*$7651$19h1md g$x$8176$19h1md))
          (if (annotation? g$x$8176$19h1md)
            (g$syntax-car$7671$19h1md (annotation-expression g$x$8176$19h1md))
            (if (pair? g$x$8176$19h1md)
              (car g$x$8176$19h1md)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$8176$19h1md)))))))
   (g$syntax-cdr$7672$19h1md
     g$syntax-cdr$11303$19h1md
     (case-lambda
       ((g$x$8177$19h1md)
        (if (g$stx?$7646$19h1md g$x$8177$19h1md)
          (g$mkstx$7662$19h1md
            (g$syntax-cdr$7672$19h1md (g$stx-expr$7648$19h1md g$x$8177$19h1md))
            (g$stx-mark*$7649$19h1md g$x$8177$19h1md)
            (g$stx-subst*$7650$19h1md g$x$8177$19h1md)
            (g$stx-ae*$7651$19h1md g$x$8177$19h1md))
          (if (annotation? g$x$8177$19h1md)
            (g$syntax-cdr$7672$19h1md (annotation-expression g$x$8177$19h1md))
            (if (pair? g$x$8177$19h1md)
              (cdr g$x$8177$19h1md)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$8177$19h1md)))))))
   (g$syntax->list$7673$19h1md
     g$syntax->list$11304$19h1md
     (case-lambda
       ((g$x$8178$19h1md)
        (if (g$syntax-pair?$7667$19h1md g$x$8178$19h1md)
          (cons
            (g$syntax-car$7671$19h1md g$x$8178$19h1md)
            (g$syntax->list$7673$19h1md
              (g$syntax-cdr$7672$19h1md g$x$8178$19h1md)))
          (if (g$syntax-null?$7669$19h1md g$x$8178$19h1md)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$8178$19h1md))))))
   (g$id?$7674$19h1md
     g$id?$11305$19h1md
     (case-lambda
       ((g$x$8179$19h1md)
        (if (g$stx?$7646$19h1md g$x$8179$19h1md)
          (begin
            '#f
            ((case-lambda
               ((g$expr$8180$19h1md)
                (symbol?
                  (if (annotation? g$expr$8180$19h1md)
                    (annotation-stripped g$expr$8180$19h1md)
                    g$expr$8180$19h1md))))
             (g$stx-expr$7648$19h1md g$x$8179$19h1md)))
          '#f))))
   (g$id->sym$7675$19h1md
     g$id->sym$11306$19h1md
     (case-lambda
       ((g$x$8181$19h1md)
        (begin
          (if (not (g$stx?$7646$19h1md g$x$8181$19h1md))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$8181$19h1md)
            (void))
          ((case-lambda
             ((g$expr$8182$19h1md)
              ((case-lambda
                 ((g$sym$8183$19h1md)
                  (if (symbol? g$sym$8183$19h1md)
                    g$sym$8183$19h1md
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$8181$19h1md))))
               (if (annotation? g$expr$8182$19h1md)
                 (annotation-stripped g$expr$8182$19h1md)
                 g$expr$8182$19h1md))))
           (g$stx-expr$7648$19h1md g$x$8181$19h1md))))))
   (g$same-marks?$7676$19h1md
     g$same-marks?$11307$19h1md
     (case-lambda
       ((g$x$8184$19h1md g$y$8185$19h1md)
        ((case-lambda
           ((g$t$8186$19h1md)
            (if g$t$8186$19h1md
              g$t$8186$19h1md
              (begin
                '#f
                (if (pair? g$x$8184$19h1md)
                  (if (pair? g$y$8185$19h1md)
                    (if (eq? (car g$x$8184$19h1md) (car g$y$8185$19h1md))
                      (begin
                        '#f
                        (g$same-marks?$7676$19h1md
                          (cdr g$x$8184$19h1md)
                          (cdr g$y$8185$19h1md)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$8184$19h1md)
           (begin '#f (null? g$y$8185$19h1md))
           '#f)))))
   (g$bound-id=?$7677$19h1md
     g$bound-id=?$11308$19h1md
     (case-lambda
       ((g$x$8187$19h1md g$y$8188$19h1md)
        (if (eq? (g$id->sym$7675$19h1md g$x$8187$19h1md)
                 (g$id->sym$7675$19h1md g$y$8188$19h1md))
          (begin
            '#f
            (g$same-marks?$7676$19h1md
              (g$stx-mark*$7649$19h1md g$x$8187$19h1md)
              (g$stx-mark*$7649$19h1md g$y$8188$19h1md)))
          '#f))))
   (g$free-id=?$7678$19h1md
     g$free-id=?$11309$19h1md
     (case-lambda
       ((g$i$8189$19h1md g$j$8190$19h1md)
        ((case-lambda
           ((g$t0$8191$19h1md g$t1$8192$19h1md)
            (if ((case-lambda
                   ((g$t$8193$19h1md)
                    (if g$t$8193$19h1md
                      g$t$8193$19h1md
                      (begin '#f g$t1$8192$19h1md))))
                 g$t0$8191$19h1md)
              (eq? g$t0$8191$19h1md g$t1$8192$19h1md)
              (eq? (g$id->sym$7675$19h1md g$i$8189$19h1md)
                   (g$id->sym$7675$19h1md g$j$8190$19h1md)))))
         (g$id->real-label$7688$19h1md g$i$8189$19h1md)
         (g$id->real-label$7688$19h1md g$j$8190$19h1md)))))
   (g$valid-bound-ids?$7679$19h1md
     g$valid-bound-ids?$11310$19h1md
     (case-lambda
       ((g$id*$8194$19h1md)
        (if (g$for-all$5804$19h1md g$id?$7674$19h1md g$id*$8194$19h1md)
          (begin '#f (g$distinct-bound-ids?$7680$19h1md g$id*$8194$19h1md))
          '#f))))
   (g$distinct-bound-ids?$7680$19h1md
     g$distinct-bound-ids?$11311$19h1md
     (case-lambda
       ((g$id*$8195$19h1md)
        ((case-lambda
           ((g$t$8196$19h1md)
            (if g$t$8196$19h1md
              g$t$8196$19h1md
              (begin
                '#f
                (if (not (g$bound-id-member?$7681$19h1md
                           (car g$id*$8195$19h1md)
                           (cdr g$id*$8195$19h1md)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$7680$19h1md (cdr g$id*$8195$19h1md)))
                  '#f)))))
         (null? g$id*$8195$19h1md)))))
   (g$bound-id-member?$7681$19h1md
     g$bound-id-member?$11312$19h1md
     (case-lambda
       ((g$id$8197$19h1md g$id*$8198$19h1md)
        (if (pair? g$id*$8198$19h1md)
          (begin
            '#f
            ((case-lambda
               ((g$t$8199$19h1md)
                (if g$t$8199$19h1md
                  g$t$8199$19h1md
                  (begin
                    '#f
                    (g$bound-id-member?$7681$19h1md
                      g$id$8197$19h1md
                      (cdr g$id*$8198$19h1md))))))
             (g$bound-id=?$7677$19h1md
               g$id$8197$19h1md
               (car g$id*$8198$19h1md))))
          '#f))))
   (g$self-evaluating?$7682$19h1md
     g$self-evaluating?$11313$19h1md
     (case-lambda
       ((g$x$8200$19h1md)
        ((case-lambda
           ((g$t$8201$19h1md)
            (if g$t$8201$19h1md
              g$t$8201$19h1md
              ((case-lambda
                 ((g$t$8202$19h1md)
                  (if g$t$8202$19h1md
                    g$t$8202$19h1md
                    ((case-lambda
                       ((g$t$8203$19h1md)
                        (if g$t$8203$19h1md
                          g$t$8203$19h1md
                          ((case-lambda
                             ((g$t$8204$19h1md)
                              (if g$t$8204$19h1md
                                g$t$8204$19h1md
                                (begin '#f (bytevector? g$x$8200$19h1md)))))
                           (boolean? g$x$8200$19h1md)))))
                     (char? g$x$8200$19h1md)))))
               (string? g$x$8200$19h1md)))))
         (number? g$x$8200$19h1md)))))
   (g$strip-annotations$7683$19h1md
     g$strip-annotations$11314$19h1md
     (case-lambda
       ((g$x$8205$19h1md)
        (if (pair? g$x$8205$19h1md)
          (cons
            (g$strip-annotations$7683$19h1md (car g$x$8205$19h1md))
            (g$strip-annotations$7683$19h1md (cdr g$x$8205$19h1md)))
          (if (vector? g$x$8205$19h1md)
            (vector-map g$strip-annotations$7683$19h1md g$x$8205$19h1md)
            (if (annotation? g$x$8205$19h1md)
              (annotation-stripped g$x$8205$19h1md)
              g$x$8205$19h1md))))))
   (g$strip$7684$19h1md
     g$strip$11315$19h1md
     (case-lambda
       ((g$x$8206$19h1md g$m*$8207$19h1md)
        (if (g$top-marked?$7617$19h1md g$m*$8207$19h1md)
          (if ((case-lambda
                 ((g$t$8208$19h1md)
                  (if g$t$8208$19h1md
                    g$t$8208$19h1md
                    ((case-lambda
                       ((g$t$8209$19h1md)
                        (if g$t$8209$19h1md
                          g$t$8209$19h1md
                          (begin
                            '#f
                            (if (vector? g$x$8206$19h1md)
                              (if (> (vector-length g$x$8206$19h1md) '0)
                                (begin
                                  '#f
                                  (annotation? (vector-ref g$x$8206$19h1md '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$8206$19h1md)
                       (begin '#f (annotation? (car g$x$8206$19h1md)))
                       '#f)))))
               (annotation? g$x$8206$19h1md))
            (g$strip-annotations$7683$19h1md g$x$8206$19h1md)
            g$x$8206$19h1md)
          ((letrec ((g$f$8210$19h1md
                      (case-lambda
                        ((g$x$8211$19h1md)
                         (if (g$stx?$7646$19h1md g$x$8211$19h1md)
                           (g$strip$7684$19h1md
                             (g$stx-expr$7648$19h1md g$x$8211$19h1md)
                             (g$stx-mark*$7649$19h1md g$x$8211$19h1md))
                           (if (annotation? g$x$8211$19h1md)
                             (annotation-stripped g$x$8211$19h1md)
                             (if (pair? g$x$8211$19h1md)
                               ((case-lambda
                                  ((g$a$8212$19h1md g$d$8213$19h1md)
                                   (if (if (eq? g$a$8212$19h1md
                                                (car g$x$8211$19h1md))
                                         (begin
                                           '#f
                                           (eq? g$d$8213$19h1md
                                                (cdr g$x$8211$19h1md)))
                                         '#f)
                                     g$x$8211$19h1md
                                     (cons g$a$8212$19h1md g$d$8213$19h1md))))
                                (g$f$8210$19h1md (car g$x$8211$19h1md))
                                (g$f$8210$19h1md (cdr g$x$8211$19h1md)))
                               (if (vector? g$x$8211$19h1md)
                                 ((case-lambda
                                    ((g$old$8214$19h1md)
                                     ((case-lambda
                                        ((g$new$8215$19h1md)
                                         (if (g$for-all$5804$19h1md
                                               eq?
                                               g$old$8214$19h1md
                                               g$new$8215$19h1md)
                                           g$x$8211$19h1md
                                           (list->vector g$new$8215$19h1md))))
                                      (map g$f$8210$19h1md g$old$8214$19h1md))))
                                  (vector->list g$x$8211$19h1md))
                                 g$x$8211$19h1md))))))))
             g$f$8210$19h1md)
           g$x$8206$19h1md)))))
   (g$stx->datum$7685$19h1md
     g$stx->datum$11316$19h1md
     (case-lambda
       ((g$x$8216$19h1md) (g$strip$7684$19h1md g$x$8216$19h1md '()))))
   (g$same-marks*?$7686$19h1md
     g$same-marks*?$11317$19h1md
     (case-lambda
       ((g$mark*$8217$19h1md g$mark**$8218$19h1md g$si$8219$19h1md)
        (if (null? g$si$8219$19h1md)
          '#f
          (if (g$same-marks?$7676$19h1md
                g$mark*$8217$19h1md
                (vector-ref g$mark**$8218$19h1md (car g$si$8219$19h1md)))
            (car g$si$8219$19h1md)
            (g$same-marks*?$7686$19h1md
              g$mark*$8217$19h1md
              g$mark**$8218$19h1md
              (cdr g$si$8219$19h1md)))))))
   (g$id->label$7687$19h1md
     g$id->label$11318$19h1md
     (case-lambda
       ((g$id$8220$19h1md)
        ((case-lambda
           ((g$t$8221$19h1md)
            (if g$t$8221$19h1md
              g$t$8221$19h1md
              (begin
                '#f
                ((case-lambda
                   ((g$t$8222$19h1md)
                    (if g$t$8222$19h1md
                      ((case-lambda
                         ((g$env$8223$19h1md)
                          ((case-lambda
                             ((g$rib$8224$19h1md)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$7622$19h1md
                                     g$id$8220$19h1md
                                     g$rib$8224$19h1md)))
                                (case-lambda
                                  ((g$lab$8227$19h1md g$loc_$8228$19h1md)
                                   ((case-lambda
                                      ((g$loc_$8229$19h1md g$lab$8230$19h1md)
                                       (begin
                                         (g$extend-rib!$7638$19h1md
                                           g$rib$8224$19h1md
                                           g$id$8220$19h1md
                                           g$lab$8230$19h1md)
                                         g$lab$8230$19h1md)))
                                    g$loc_$8228$19h1md
                                    g$lab$8227$19h1md))))))
                           (g$interaction-env-rib$8030$19h1md
                             g$env$8223$19h1md))))
                       g$t$8222$19h1md)
                      '#f)))
                 (g$top-level-context$8068$19h1md))))))
         (g$id->real-label$7688$19h1md g$id$8220$19h1md)))))
   (g$id->real-label$7688$19h1md
     g$id->real-label$11319$19h1md
     (case-lambda
       ((g$id$8231$19h1md)
        ((case-lambda
           ((g$sym$8232$19h1md)
            ((letrec ((g$search$8233$19h1md
                        (case-lambda
                          ((g$subst*$8234$19h1md g$mark*$8235$19h1md)
                           (if (null? g$subst*$8234$19h1md)
                             '#f
                             (if (eq? (car g$subst*$8234$19h1md) 'shift)
                               (g$search$8233$19h1md
                                 (cdr g$subst*$8234$19h1md)
                                 (cdr g$mark*$8235$19h1md))
                               ((case-lambda
                                  ((g$rib$8236$19h1md)
                                   ((case-lambda
                                      ((g$t$8237$19h1md)
                                       (if g$t$8237$19h1md
                                         ((case-lambda
                                            ((g$ht$8238$19h1md)
                                             ((case-lambda
                                                ((g$si$8239$19h1md)
                                                 ((case-lambda
                                                    ((g$i$8240$19h1md)
                                                     (if g$i$8240$19h1md
                                                       (vector-ref
                                                         (g$rib-label*$7631$19h1md
                                                           g$rib$8236$19h1md)
                                                         g$i$8240$19h1md)
                                                       (g$search$8233$19h1md
                                                         (cdr g$subst*$8234$19h1md)
                                                         g$mark*$8235$19h1md))))
                                                  (if g$si$8239$19h1md
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$7686$19h1md
                                                        g$mark*$8235$19h1md
                                                        (g$rib-mark**$7630$19h1md
                                                          g$rib$8236$19h1md)
                                                        (reverse
                                                          g$si$8239$19h1md)))
                                                    '#f))))
                                              (g$hashtable-ref$5600$19h1md
                                                g$ht$8238$19h1md
                                                g$sym$8232$19h1md
                                                '#f))))
                                          g$t$8237$19h1md)
                                         ((letrec ((g$f$8241$19h1md
                                                     (case-lambda
                                                       ((g$sym*$8242$19h1md
                                                          g$mark**$8243$19h1md
                                                          g$label*$8244$19h1md)
                                                        (if (null?
                                                              g$sym*$8242$19h1md)
                                                          (g$search$8233$19h1md
                                                            (cdr g$subst*$8234$19h1md)
                                                            g$mark*$8235$19h1md)
                                                          (if (if (eq? (car g$sym*$8242$19h1md)
                                                                       g$sym$8232$19h1md)
                                                                (begin
                                                                  '#f
                                                                  (g$same-marks?$7676$19h1md
                                                                    (car g$mark**$8243$19h1md)
                                                                    g$mark*$8235$19h1md))
                                                                '#f)
                                                            (car g$label*$8244$19h1md)
                                                            (g$f$8241$19h1md
                                                              (cdr g$sym*$8242$19h1md)
                                                              (cdr g$mark**$8243$19h1md)
                                                              (cdr g$label*$8244$19h1md))))))))
                                            g$f$8241$19h1md)
                                          (g$rib-sym*$7629$19h1md
                                            g$rib$8236$19h1md)
                                          (g$rib-mark**$7630$19h1md
                                            g$rib$8236$19h1md)
                                          (g$rib-label*$7631$19h1md
                                            g$rib$8236$19h1md)))))
                                    (g$rib-sealed/freq$7632$19h1md
                                      g$rib$8236$19h1md))))
                                (car g$subst*$8234$19h1md))))))))
               g$search$8233$19h1md)
             (g$stx-subst*$7650$19h1md g$id$8231$19h1md)
             (g$stx-mark*$7649$19h1md g$id$8231$19h1md))))
         (g$id->sym$7675$19h1md g$id$8231$19h1md)))))
   (g$label->binding$7689$19h1md
     g$label->binding$11320$19h1md
     (case-lambda
       ((g$x$8245$19h1md g$r$8246$19h1md)
        ((case-lambda
           ((g$t$8247$19h1md)
            (if g$t$8247$19h1md
              ((case-lambda
                 ((g$b$8248$19h1md)
                  (if (if (pair? g$b$8248$19h1md)
                        (begin '#f (eq? (car g$b$8248$19h1md) '$core-rtd))
                        '#f)
                    (cons '$rtd (map g$bless$7915$19h1md (cdr g$b$8248$19h1md)))
                    (if (if (pair? g$b$8248$19h1md)
                          (begin '#f (eq? (car g$b$8248$19h1md) 'global-rtd))
                          '#f)
                      ((case-lambda
                         ((g$lib$8249$19h1md g$loc$8250$19h1md)
                          (cons '$rtd (symbol-value g$loc$8250$19h1md))))
                       (g$cadr$5323$19h1md g$b$8248$19h1md)
                       (g$cddr$5325$19h1md g$b$8248$19h1md))
                      g$b$8248$19h1md))))
               g$t$8247$19h1md)
              ((case-lambda
                 ((g$t$8251$19h1md)
                  (if g$t$8251$19h1md
                    (cdr g$t$8251$19h1md)
                    ((case-lambda
                       ((g$t$8252$19h1md)
                        (if g$t$8252$19h1md
                          ((case-lambda
                             ((g$env$8253$19h1md)
                              ((case-lambda
                                 ((g$t$8254$19h1md)
                                  (if g$t$8254$19h1md
                                    ((case-lambda
                                       ((g$p$8255$19h1md)
                                        (g$cons*$5806$19h1md
                                          'lexical
                                          (cdr g$p$8255$19h1md)
                                          '#f)))
                                     g$t$8254$19h1md)
                                    '(displaced-lexical . #f))))
                               (assq
                                 g$x$8245$19h1md
                                 (g$interaction-env-locs$8032$19h1md
                                   g$env$8253$19h1md)))))
                           g$t$8252$19h1md)
                          '(displaced-lexical . #f))))
                     (g$top-level-context$8068$19h1md)))))
               (assq g$x$8245$19h1md g$r$8246$19h1md)))))
         (g$imported-label->binding$7488$19h1md g$x$8245$19h1md)))))
   (g$make-binding$7690$19h1md g$make-binding$11321$19h1md cons)
   (g$binding-type$7691$19h1md g$binding-type$11322$19h1md car)
   (g$binding-value$7692$19h1md g$binding-value$11323$19h1md cdr)
   (g$raise-unbound-error$7693$19h1md
     g$raise-unbound-error$11324$19h1md
     (case-lambda
       ((g$id$8256$19h1md)
        (g$syntax-violation*$8060$19h1md
          '#f
          '"unbound identifier"
          g$id$8256$19h1md
          (g$make-undefined-violation$6140$19h1md)))))
   (g$syntax-type$7694$19h1md
     g$syntax-type$11325$19h1md
     (case-lambda
       ((g$e$8257$19h1md g$r$8258$19h1md)
        (if (g$id?$7674$19h1md g$e$8257$19h1md)
          ((case-lambda
             ((g$id$8259$19h1md)
              ((case-lambda
                 ((g$label$8260$19h1md)
                  ((case-lambda
                     ((g$b$8261$19h1md)
                      ((case-lambda
                         ((g$type$8262$19h1md)
                          ((case-lambda
                             (()
                              (begin
                                (if (not g$label$8260$19h1md)
                                  (g$raise-unbound-error$7693$19h1md
                                    g$id$8259$19h1md)
                                  (void))
                                ((case-lambda
                                   ((g$t$8263$19h1md)
                                    (if (memv
                                          g$t$8263$19h1md
                                          '(lexical
                                             core-prim
                                             macro
                                             macro!
                                             global
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             displaced-lexical
                                             syntax
                                             import
                                             $module
                                             $core-rtd
                                             library
                                             mutable))
                                      (values
                                        g$type$8262$19h1md
                                        (g$binding-value$7692$19h1md
                                          g$b$8261$19h1md)
                                        g$id$8259$19h1md)
                                      (values 'other '#f '#f))))
                                 g$type$8262$19h1md)))))))
                       (g$binding-type$7691$19h1md g$b$8261$19h1md))))
                   (g$label->binding$7689$19h1md
                     g$label$8260$19h1md
                     g$r$8258$19h1md))))
               (g$id->label$7687$19h1md g$id$8259$19h1md))))
           g$e$8257$19h1md)
          (if (g$syntax-pair?$7667$19h1md g$e$8257$19h1md)
            ((case-lambda
               ((g$id$8264$19h1md)
                (if (g$id?$7674$19h1md g$id$8264$19h1md)
                  ((case-lambda
                     ((g$label$8265$19h1md)
                      ((case-lambda
                         ((g$b$8266$19h1md)
                          ((case-lambda
                             ((g$type$8267$19h1md)
                              ((case-lambda
                                 (()
                                  (begin
                                    (if (not g$label$8265$19h1md)
                                      (g$raise-unbound-error$7693$19h1md
                                        g$id$8264$19h1md)
                                      (void))
                                    ((case-lambda
                                       ((g$t$8268$19h1md)
                                        (if (memv
                                              g$t$8268$19h1md
                                              '(define define-syntax
                                                 core-macro
                                                 begin
                                                 macro
                                                 macro!
                                                 local-macro
                                                 local-macro!
                                                 global-macro
                                                 global-macro!
                                                 module
                                                 library
                                                 set!
                                                 let-syntax
                                                 letrec-syntax
                                                 import
                                                 $core-rtd))
                                          (values
                                            g$type$8267$19h1md
                                            (g$binding-value$7692$19h1md
                                              g$b$8266$19h1md)
                                            g$id$8264$19h1md)
                                          (values 'call '#f '#f))))
                                     g$type$8267$19h1md)))))))
                           (g$binding-type$7691$19h1md g$b$8266$19h1md))))
                       (g$label->binding$7689$19h1md
                         g$label$8265$19h1md
                         g$r$8258$19h1md))))
                   (g$id->label$7687$19h1md g$id$8264$19h1md))
                  (values 'call '#f '#f))))
             (g$syntax-car$7671$19h1md g$e$8257$19h1md))
            ((case-lambda
               ((g$d$8269$19h1md)
                (if (g$self-evaluating?$7682$19h1md g$d$8269$19h1md)
                  (values 'constant g$d$8269$19h1md '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$7685$19h1md g$e$8257$19h1md)))))))
   (g$sanitize-binding$7702$19h1md
     g$sanitize-binding$11326$19h1md
     (case-lambda
       ((g$x$8270$19h1md g$src$8271$19h1md)
        (if (procedure? g$x$8270$19h1md)
          (g$cons*$5806$19h1md 'local-macro g$x$8270$19h1md g$src$8271$19h1md)
          (if (if (pair? g$x$8270$19h1md)
                (if (eq? (car g$x$8270$19h1md) 'macro!)
                  (begin '#f (procedure? (cdr g$x$8270$19h1md)))
                  '#f)
                '#f)
            (g$cons*$5806$19h1md
              'local-macro!
              (cdr g$x$8270$19h1md)
              g$src$8271$19h1md)
            (if (if (pair? g$x$8270$19h1md)
                  (begin '#f (eq? (car g$x$8270$19h1md) '$rtd))
                  '#f)
              g$x$8270$19h1md
              (assertion-violation
                'expand
                '"invalid transformer"
                g$x$8270$19h1md)))))))
   (g$make-variable-transformer$7703$19h1md
     g$make-variable-transformer$11327$19h1md
     (case-lambda
       ((g$x$8272$19h1md)
        (if (procedure? g$x$8272$19h1md)
          (cons 'macro! g$x$8272$19h1md)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$8272$19h1md)))))
   (g$variable-transformer?$7704$19h1md
     g$variable-transformer?$11328$19h1md
     (case-lambda
       ((g$x$8273$19h1md)
        (if (pair? g$x$8273$19h1md)
          (if (eq? (car g$x$8273$19h1md) 'macro!)
            (begin '#f (procedure? (cdr g$x$8273$19h1md)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$7705$19h1md
     g$variable-transformer-procedure$11329$19h1md
     (case-lambda
       ((g$x$8274$19h1md)
        (if (g$variable-transformer?$7704$19h1md g$x$8274$19h1md)
          (cdr g$x$8274$19h1md)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$8274$19h1md)))))
   (g$make-eval-transformer$7706$19h1md
     g$make-eval-transformer$11330$19h1md
     (case-lambda
       ((g$x$8275$19h1md)
        (g$sanitize-binding$7702$19h1md
          (eval-core (g$expanded->core$7188$19h1md g$x$8275$19h1md))
          g$x$8275$19h1md))))
   (g$parse-define$7892$19h1md
     g$parse-define$11331$19h1md
     (case-lambda
       ((g$x$8276$19h1md)
        ((case-lambda
           ((g$t$8277$19h1md)
            ((case-lambda
               ((g$ls/false$8278$19h1md)
                (if (if g$ls/false$8278$19h1md
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8279$19h1md
                               g$fmls$8280$19h1md
                               g$b$8281$19h1md
                               g$b*$8282$19h1md)
                             (g$id?$7674$19h1md g$id$8279$19h1md)))
                          g$ls/false$8278$19h1md))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8283$19h1md
                         g$fmls$8284$19h1md
                         g$b$8285$19h1md
                         g$b*$8286$19h1md)
                       (begin
                         (g$verify-formals$7972$19h1md
                           g$fmls$8284$19h1md
                           g$x$8276$19h1md)
                         (values
                           g$id$8283$19h1md
                           (cons
                             'defun
                             (cons
                               g$fmls$8284$19h1md
                               (cons g$b$8285$19h1md g$b*$8286$19h1md)))))))
                    g$ls/false$8278$19h1md)
                  ((case-lambda
                     ((g$t$8287$19h1md)
                      ((case-lambda
                         ((g$ls/false$8288$19h1md)
                          (if (if g$ls/false$8288$19h1md
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$8289$19h1md g$val$8290$19h1md)
                                       (g$id?$7674$19h1md g$id$8289$19h1md)))
                                    g$ls/false$8288$19h1md))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$8291$19h1md g$val$8292$19h1md)
                                 (values
                                   g$id$8291$19h1md
                                   (cons 'expr g$val$8292$19h1md))))
                              g$ls/false$8288$19h1md)
                            ((case-lambda
                               ((g$t$8293$19h1md)
                                ((case-lambda
                                   ((g$ls/false$8294$19h1md)
                                    (if (if g$ls/false$8294$19h1md
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$8295$19h1md)
                                                 (g$id?$7674$19h1md
                                                   g$id$8295$19h1md)))
                                              g$ls/false$8294$19h1md))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$8296$19h1md)
                                           (values
                                             g$id$8296$19h1md
                                             (cons
                                               'expr
                                               (g$bless$7915$19h1md '(void))))))
                                        g$ls/false$8294$19h1md)
                                      (g$syntax-violation$8061$19h1md
                                        '#f
                                        '"invalid syntax"
                                        g$t$8293$19h1md))))
                                 (g$syntax-dispatch$7952$19h1md
                                   g$t$8293$19h1md
                                   '(_ any)))))
                             g$t$8287$19h1md))))
                       (g$syntax-dispatch$7952$19h1md
                         g$t$8287$19h1md
                         '(_ any any)))))
                   g$t$8277$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$8277$19h1md
               '(_ (any . any) any . each-any)))))
         g$x$8276$19h1md))))
   (g$parse-define-syntax$7893$19h1md
     g$parse-define-syntax$11332$19h1md
     (case-lambda
       ((g$x$8297$19h1md)
        ((case-lambda
           ((g$t$8298$19h1md)
            ((case-lambda
               ((g$ls/false$8299$19h1md)
                (if (if g$ls/false$8299$19h1md
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8300$19h1md g$val$8301$19h1md)
                             (g$id?$7674$19h1md g$id$8300$19h1md)))
                          g$ls/false$8299$19h1md))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8302$19h1md g$val$8303$19h1md)
                       (values g$id$8302$19h1md g$val$8303$19h1md)))
                    g$ls/false$8299$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8298$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$8298$19h1md '(_ any any)))))
         g$x$8297$19h1md))))
   (g$scheme-stx-hashtable$7894$19h1md
     g$scheme-stx-hashtable$11333$19h1md
     (g$make-eq-hashtable$5597$19h1md))
   (g$scheme-stx$7895$19h1md
     g$scheme-stx$11334$19h1md
     (case-lambda
       ((g$sym$8304$19h1md)
        ((case-lambda
           ((g$t$8305$19h1md)
            (if g$t$8305$19h1md
              g$t$8305$19h1md
              (begin
                '#f
                ((case-lambda
                   ((g$subst$8306$19h1md)
                    ((case-lambda
                       ((g$stx$8307$19h1md)
                        ((case-lambda
                           ((g$stx$8308$19h1md)
                            ((case-lambda
                               (()
                                (begin
                                  (g$hashtable-set!$5601$19h1md
                                    g$scheme-stx-hashtable$7894$19h1md
                                    g$sym$8304$19h1md
                                    g$stx$8308$19h1md)
                                  g$stx$8308$19h1md))))))
                         ((case-lambda
                            ((g$t$8309$19h1md)
                             (if g$t$8309$19h1md
                               ((case-lambda
                                  ((g$x$8310$19h1md)
                                   ((case-lambda
                                      ((g$name$8311$19h1md g$label$8312$19h1md)
                                       (g$add-subst$7664$19h1md
                                         (g$make-rib$7628$19h1md
                                           (list g$name$8311$19h1md)
                                           (list g$top-mark*$7616$19h1md)
                                           (list g$label$8312$19h1md)
                                           '#f)
                                         g$stx$8307$19h1md)))
                                    (car g$x$8310$19h1md)
                                    (cdr g$x$8310$19h1md))))
                                g$t$8309$19h1md)
                               g$stx$8307$19h1md)))
                          (assq g$sym$8304$19h1md g$subst$8306$19h1md)))))
                     (g$make-stx$7647$19h1md
                       g$sym$8304$19h1md
                       g$top-mark*$7616$19h1md
                       '()
                       '()))))
                 (g$library-subst$7446$19h1md
                   (g$find-library-by-name$7482$19h1md
                     '(psyntax system $all))))))))
         (g$hashtable-ref$5600$19h1md
           g$scheme-stx-hashtable$7894$19h1md
           g$sym$8304$19h1md
           '#f)))))
   (g$lexical-var$7896$19h1md g$lexical-var$11335$19h1md car)
   (g$lexical-mutable?$7897$19h1md g$lexical-mutable?$11336$19h1md cdr)
   (g$set-lexical-mutable!$7898$19h1md
     g$set-lexical-mutable!$11337$19h1md
     set-cdr!)
   (g$add-lexical$7899$19h1md
     g$add-lexical$11338$19h1md
     (case-lambda
       ((g$lab$8313$19h1md g$lex$8314$19h1md g$r$8315$19h1md)
        (cons
          (g$cons*$5806$19h1md g$lab$8313$19h1md 'lexical g$lex$8314$19h1md '#f)
          g$r$8315$19h1md))))
   (g$add-lexicals$7900$19h1md
     g$add-lexicals$11339$19h1md
     (case-lambda
       ((g$lab*$8316$19h1md g$lex*$8317$19h1md g$r$8318$19h1md)
        (if (null? g$lab*$8316$19h1md)
          g$r$8318$19h1md
          (g$add-lexicals$7900$19h1md
            (cdr g$lab*$8316$19h1md)
            (cdr g$lex*$8317$19h1md)
            (g$add-lexical$7899$19h1md
              (car g$lab*$8316$19h1md)
              (car g$lex*$8317$19h1md)
              g$r$8318$19h1md))))))
   (g$letrec-helper$7901$19h1md
     g$letrec-helper$11340$19h1md
     (case-lambda
       ((g$e$8319$19h1md g$r$8320$19h1md g$mr$8321$19h1md g$build$8322$19h1md)
        ((case-lambda
           ((g$t$8323$19h1md)
            ((case-lambda
               ((g$ls/false$8324$19h1md)
                (if g$ls/false$8324$19h1md
                  (apply
                    (case-lambda
                      ((g$lhs*$8325$19h1md
                         g$rhs*$8326$19h1md
                         g$b$8327$19h1md
                         g$b*$8328$19h1md)
                       (if (not (g$valid-bound-ids?$7679$19h1md
                                  g$lhs*$8325$19h1md))
                         (g$invalid-fmls-error$7917$19h1md
                           g$e$8319$19h1md
                           g$lhs*$8325$19h1md)
                         ((case-lambda
                            ((g$lex*$8329$19h1md g$lab*$8330$19h1md)
                             ((case-lambda
                                ((g$rib$8331$19h1md g$r$8332$19h1md)
                                 ((case-lambda
                                    ((g$body$8333$19h1md g$rhs*$8334$19h1md)
                                     (g$build$8322$19h1md
                                       '#f
                                       g$lex*$8329$19h1md
                                       g$rhs*$8334$19h1md
                                       g$body$8333$19h1md)))
                                  (g$chi-internal$7981$19h1md
                                    (g$add-subst$7664$19h1md
                                      g$rib$8331$19h1md
                                      (cons g$b$8327$19h1md g$b*$8328$19h1md))
                                    g$r$8332$19h1md
                                    g$mr$8321$19h1md)
                                  (g$chi-expr*$7968$19h1md
                                    (map (case-lambda
                                           ((g$x$8335$19h1md)
                                            (g$add-subst$7664$19h1md
                                              g$rib$8331$19h1md
                                              g$x$8335$19h1md)))
                                         g$rhs*$8326$19h1md)
                                    g$r$8332$19h1md
                                    g$mr$8321$19h1md))))
                              (g$make-full-rib$7642$19h1md
                                g$lhs*$8325$19h1md
                                g$lab*$8330$19h1md)
                              (g$add-lexicals$7900$19h1md
                                g$lab*$8330$19h1md
                                g$lex*$8329$19h1md
                                g$r$8320$19h1md))))
                          (map g$gen-lexical$7618$19h1md g$lhs*$8325$19h1md)
                          (map g$gen-label$7620$19h1md g$lhs*$8325$19h1md)))))
                    g$ls/false$8324$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8323$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$8323$19h1md
               '(_ #(each (any any)) any . each-any)))))
         g$e$8319$19h1md))))
   (g$letrec-transformer$7902$19h1md
     g$letrec-transformer$11341$19h1md
     (case-lambda
       ((g$e$8336$19h1md g$r$8337$19h1md g$mr$8338$19h1md)
        (g$letrec-helper$7901$19h1md
          g$e$8336$19h1md
          g$r$8337$19h1md
          g$mr$8338$19h1md
          g$build-letrec$7610$19h1md))))
   (g$letrec*-transformer$7903$19h1md
     g$letrec*-transformer$11342$19h1md
     (case-lambda
       ((g$e$8339$19h1md g$r$8340$19h1md g$mr$8341$19h1md)
        (g$letrec-helper$7901$19h1md
          g$e$8339$19h1md
          g$r$8340$19h1md
          g$mr$8341$19h1md
          g$build-letrec*$7611$19h1md))))
   (g$fluid-let-syntax-transformer$7904$19h1md
     g$fluid-let-syntax-transformer$11343$19h1md
     (case-lambda
       ((g$e$8342$19h1md g$r$8343$19h1md g$mr$8344$19h1md)
        (letrec* ((g$lookup$8345$19h1md
                    (case-lambda
                      ((g$x$8355$19h1md)
                       ((case-lambda
                          ((g$t$8356$19h1md)
                           (if g$t$8356$19h1md
                             g$t$8356$19h1md
                             (begin
                               '#f
                               (g$syntax-violation$8061$19h1md
                                 '#f
                                 '"unbound identifier"
                                 g$e$8342$19h1md
                                 g$x$8355$19h1md)))))
                        (g$id->label$7687$19h1md g$x$8355$19h1md))))))
          ((case-lambda
             ((g$t$8346$19h1md)
              ((case-lambda
                 ((g$ls/false$8347$19h1md)
                  (if g$ls/false$8347$19h1md
                    (apply
                      (case-lambda
                        ((g$lhs*$8348$19h1md
                           g$rhs*$8349$19h1md
                           g$b$8350$19h1md
                           g$b*$8351$19h1md)
                         (if (not (g$valid-bound-ids?$7679$19h1md
                                    g$lhs*$8348$19h1md))
                           (g$invalid-fmls-error$7917$19h1md
                             g$e$8342$19h1md
                             g$lhs*$8348$19h1md)
                           ((case-lambda
                              ((g$lab*$8352$19h1md g$rhs*$8353$19h1md)
                               (g$chi-internal$7981$19h1md
                                 (cons g$b$8350$19h1md g$b*$8351$19h1md)
                                 (append
                                   (map cons
                                        g$lab*$8352$19h1md
                                        g$rhs*$8353$19h1md)
                                   g$r$8343$19h1md)
                                 (append
                                   (map cons
                                        g$lab*$8352$19h1md
                                        g$rhs*$8353$19h1md)
                                   g$mr$8344$19h1md))))
                            (map g$lookup$8345$19h1md g$lhs*$8348$19h1md)
                            (map (case-lambda
                                   ((g$x$8354$19h1md)
                                    (g$make-eval-transformer$7706$19h1md
                                      (g$expand-transformer$7997$19h1md
                                        g$x$8354$19h1md
                                        g$mr$8344$19h1md))))
                                 g$rhs*$8349$19h1md)))))
                      g$ls/false$8347$19h1md)
                    (g$syntax-violation$8061$19h1md
                      '#f
                      '"invalid syntax"
                      g$t$8346$19h1md))))
               (g$syntax-dispatch$7952$19h1md
                 g$t$8346$19h1md
                 '(_ #(each (any any)) any . each-any)))))
           g$e$8342$19h1md)))))
   (g$type-descriptor-transformer$7905$19h1md
     g$type-descriptor-transformer$11344$19h1md
     (case-lambda
       ((g$e$8357$19h1md g$r$8358$19h1md g$mr$8359$19h1md)
        ((case-lambda
           ((g$t$8360$19h1md)
            ((case-lambda
               ((g$ls/false$8361$19h1md)
                (if (if g$ls/false$8361$19h1md
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8362$19h1md)
                             (g$id?$7674$19h1md g$id$8362$19h1md)))
                          g$ls/false$8361$19h1md))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8363$19h1md)
                       ((case-lambda
                          ((g$lab$8364$19h1md)
                           ((case-lambda
                              ((g$b$8365$19h1md)
                               ((case-lambda
                                  ((g$type$8366$19h1md)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$8364$19h1md)
                                           (g$raise-unbound-error$7693$19h1md
                                             g$id$8363$19h1md)
                                           (void))
                                         (if (not (if (eq? g$type$8366$19h1md
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (not (list?
                                                             (g$binding-value$7692$19h1md
                                                               g$b$8365$19h1md))))
                                                    '#f))
                                           (g$syntax-violation$8061$19h1md
                                             '#f
                                             '"not a record type"
                                             g$e$8357$19h1md)
                                           (void))
                                         (list
                                           'quote
                                           (g$binding-value$7692$19h1md
                                             g$b$8365$19h1md))))))))
                                (g$binding-type$7691$19h1md g$b$8365$19h1md))))
                            (g$label->binding$7689$19h1md
                              g$lab$8364$19h1md
                              g$r$8358$19h1md))))
                        (g$id->label$7687$19h1md g$id$8363$19h1md))))
                    g$ls/false$8361$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8360$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$8360$19h1md '(_ any)))))
         g$e$8357$19h1md))))
   (g$record-type-descriptor-transformer$7906$19h1md
     g$record-type-descriptor-transformer$11345$19h1md
     (case-lambda
       ((g$e$8367$19h1md g$r$8368$19h1md g$mr$8369$19h1md)
        ((case-lambda
           ((g$t$8370$19h1md)
            ((case-lambda
               ((g$ls/false$8371$19h1md)
                (if (if g$ls/false$8371$19h1md
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8372$19h1md)
                             (g$id?$7674$19h1md g$id$8372$19h1md)))
                          g$ls/false$8371$19h1md))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8373$19h1md)
                       ((case-lambda
                          ((g$lab$8374$19h1md)
                           ((case-lambda
                              ((g$b$8375$19h1md)
                               ((case-lambda
                                  ((g$type$8376$19h1md)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$8374$19h1md)
                                           (g$raise-unbound-error$7693$19h1md
                                             g$id$8373$19h1md)
                                           (void))
                                         (if (not (if (eq? g$type$8376$19h1md
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (list?
                                                        (g$binding-value$7692$19h1md
                                                          g$b$8375$19h1md)))
                                                    '#f))
                                           (g$syntax-violation$8061$19h1md
                                             '#f
                                             '"not a record type"
                                             g$e$8367$19h1md)
                                           (void))
                                         (g$chi-expr$7970$19h1md
                                           (car (g$binding-value$7692$19h1md
                                                  g$b$8375$19h1md))
                                           g$r$8368$19h1md
                                           g$mr$8369$19h1md)))))))
                                (g$binding-type$7691$19h1md g$b$8375$19h1md))))
                            (g$label->binding$7689$19h1md
                              g$lab$8374$19h1md
                              g$r$8368$19h1md))))
                        (g$id->label$7687$19h1md g$id$8373$19h1md))))
                    g$ls/false$8371$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8370$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$8370$19h1md '(_ any)))))
         g$e$8367$19h1md))))
   (g$record-constructor-descriptor-transformer$7907$19h1md
     g$record-constructor-descriptor-transformer$11346$19h1md
     (case-lambda
       ((g$e$8377$19h1md g$r$8378$19h1md g$mr$8379$19h1md)
        ((case-lambda
           ((g$t$8380$19h1md)
            ((case-lambda
               ((g$ls/false$8381$19h1md)
                (if (if g$ls/false$8381$19h1md
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8382$19h1md)
                             (g$id?$7674$19h1md g$id$8382$19h1md)))
                          g$ls/false$8381$19h1md))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8383$19h1md)
                       ((case-lambda
                          ((g$lab$8384$19h1md)
                           ((case-lambda
                              ((g$b$8385$19h1md)
                               ((case-lambda
                                  ((g$type$8386$19h1md)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$8384$19h1md)
                                           (g$raise-unbound-error$7693$19h1md
                                             g$id$8383$19h1md)
                                           (void))
                                         (if (not (if (eq? g$type$8386$19h1md
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (list?
                                                        (g$binding-value$7692$19h1md
                                                          g$b$8385$19h1md)))
                                                    '#f))
                                           (g$syntax-violation$8061$19h1md
                                             '#f
                                             '"invalid type"
                                             g$e$8377$19h1md)
                                           (void))
                                         (g$chi-expr$7970$19h1md
                                           (g$cadr$5323$19h1md
                                             (g$binding-value$7692$19h1md
                                               g$b$8385$19h1md))
                                           g$r$8378$19h1md
                                           g$mr$8379$19h1md)))))))
                                (g$binding-type$7691$19h1md g$b$8385$19h1md))))
                            (g$label->binding$7689$19h1md
                              g$lab$8384$19h1md
                              g$r$8378$19h1md))))
                        (g$id->label$7687$19h1md g$id$8383$19h1md))))
                    g$ls/false$8381$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8380$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$8380$19h1md '(_ any)))))
         g$e$8377$19h1md))))
   (g$when-macro$7908$19h1md
     g$when-macro$11347$19h1md
     (case-lambda
       ((g$e$8387$19h1md)
        ((case-lambda
           ((g$t$8388$19h1md)
            ((case-lambda
               ((g$ls/false$8389$19h1md)
                (if g$ls/false$8389$19h1md
                  (apply
                    (case-lambda
                      ((g$test$8390$19h1md g$e$8391$19h1md g$e*$8392$19h1md)
                       (g$bless$7915$19h1md
                         (list
                           'if
                           g$test$8390$19h1md
                           (cons
                             'begin
                             (cons g$e$8391$19h1md g$e*$8392$19h1md))))))
                    g$ls/false$8389$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8388$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$8388$19h1md
               '(_ any any . each-any)))))
         g$e$8387$19h1md))))
   (g$unless-macro$7909$19h1md
     g$unless-macro$11348$19h1md
     (case-lambda
       ((g$e$8393$19h1md)
        ((case-lambda
           ((g$t$8394$19h1md)
            ((case-lambda
               ((g$ls/false$8395$19h1md)
                (if g$ls/false$8395$19h1md
                  (apply
                    (case-lambda
                      ((g$test$8396$19h1md g$e$8397$19h1md g$e*$8398$19h1md)
                       (g$bless$7915$19h1md
                         (list
                           'if
                           (list 'not g$test$8396$19h1md)
                           (cons
                             'begin
                             (cons g$e$8397$19h1md g$e*$8398$19h1md))))))
                    g$ls/false$8395$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8394$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$8394$19h1md
               '(_ any any . each-any)))))
         g$e$8393$19h1md))))
   (g$if-transformer$7910$19h1md
     g$if-transformer$11349$19h1md
     (case-lambda
       ((g$e$8399$19h1md g$r$8400$19h1md g$mr$8401$19h1md)
        ((case-lambda
           ((g$t$8402$19h1md)
            ((case-lambda
               ((g$ls/false$8403$19h1md)
                (if g$ls/false$8403$19h1md
                  (apply
                    (case-lambda
                      ((g$e0$8404$19h1md g$e1$8405$19h1md g$e2$8406$19h1md)
                       (list
                         'if
                         (g$chi-expr$7970$19h1md
                           g$e0$8404$19h1md
                           g$r$8400$19h1md
                           g$mr$8401$19h1md)
                         (g$chi-expr$7970$19h1md
                           g$e1$8405$19h1md
                           g$r$8400$19h1md
                           g$mr$8401$19h1md)
                         (g$chi-expr$7970$19h1md
                           g$e2$8406$19h1md
                           g$r$8400$19h1md
                           g$mr$8401$19h1md))))
                    g$ls/false$8403$19h1md)
                  ((case-lambda
                     ((g$t$8407$19h1md)
                      ((case-lambda
                         ((g$ls/false$8408$19h1md)
                          (if g$ls/false$8408$19h1md
                            (apply
                              (case-lambda
                                ((g$e0$8409$19h1md g$e1$8410$19h1md)
                                 (list
                                   'if
                                   (g$chi-expr$7970$19h1md
                                     g$e0$8409$19h1md
                                     g$r$8400$19h1md
                                     g$mr$8401$19h1md)
                                   (g$chi-expr$7970$19h1md
                                     g$e1$8410$19h1md
                                     g$r$8400$19h1md
                                     g$mr$8401$19h1md)
                                   (g$build-void$7609$19h1md))))
                              g$ls/false$8408$19h1md)
                            (g$syntax-violation$8061$19h1md
                              '#f
                              '"invalid syntax"
                              g$t$8407$19h1md))))
                       (g$syntax-dispatch$7952$19h1md
                         g$t$8407$19h1md
                         '(_ any any)))))
                   g$t$8402$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$8402$19h1md '(_ any any any)))))
         g$e$8399$19h1md))))
   (g$case-macro$7911$19h1md
     g$case-macro$11350$19h1md
     (case-lambda
       ((g$e$8411$19h1md)
        (letrec* ((g$build-last$8412$19h1md
                    (case-lambda
                      ((g$cls$8432$19h1md)
                       ((case-lambda
                          ((g$t$8433$19h1md)
                           ((case-lambda
                              ((g$ls/false$8434$19h1md)
                               (if g$ls/false$8434$19h1md
                                 (apply
                                   (case-lambda
                                     ((g$e$8435$19h1md g$e*$8436$19h1md)
                                      (cons
                                        'begin
                                        (cons
                                          g$e$8435$19h1md
                                          g$e*$8436$19h1md))))
                                   g$ls/false$8434$19h1md)
                                 ((case-lambda
                                    ((g$t$8437$19h1md)
                                     ((case-lambda
                                        ((g$ls/false$8438$19h1md)
                                         (if g$ls/false$8438$19h1md
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$8413$19h1md
                                                  g$cls$8432$19h1md
                                                  '(if #f #f))))
                                             g$ls/false$8438$19h1md)
                                           (g$syntax-violation$8061$19h1md
                                             '#f
                                             '"invalid syntax"
                                             g$t$8437$19h1md))))
                                      (g$syntax-dispatch$7952$19h1md
                                        g$t$8437$19h1md
                                        '_))))
                                  g$t$8433$19h1md))))
                            (g$syntax-dispatch$7952$19h1md
                              g$t$8433$19h1md
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$8432$19h1md))))
                  (g$build-one$8413$19h1md
                    (case-lambda
                      ((g$cls$8425$19h1md g$k$8426$19h1md)
                       ((case-lambda
                          ((g$t$8427$19h1md)
                           ((case-lambda
                              ((g$ls/false$8428$19h1md)
                               (if g$ls/false$8428$19h1md
                                 (apply
                                   (case-lambda
                                     ((g$d*$8429$19h1md
                                        g$e$8430$19h1md
                                        g$e*$8431$19h1md)
                                      (list
                                        'if
                                        (list
                                          'memv
                                          't
                                          (list 'quote g$d*$8429$19h1md))
                                        (cons
                                          'begin
                                          (cons
                                            g$e$8430$19h1md
                                            g$e*$8431$19h1md))
                                        g$k$8426$19h1md)))
                                   g$ls/false$8428$19h1md)
                                 (g$syntax-violation$8061$19h1md
                                   '#f
                                   '"invalid syntax"
                                   g$t$8427$19h1md))))
                            (g$syntax-dispatch$7952$19h1md
                              g$t$8427$19h1md
                              '(each-any any . each-any)))))
                        g$cls$8425$19h1md)))))
          ((case-lambda
             ((g$t$8414$19h1md)
              ((case-lambda
                 ((g$ls/false$8415$19h1md)
                  (if g$ls/false$8415$19h1md
                    (apply
                      (case-lambda
                        ((g$expr$8416$19h1md)
                         (g$bless$7915$19h1md
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$8416$19h1md))
                               '((if #f #f)))))))
                      g$ls/false$8415$19h1md)
                    ((case-lambda
                       ((g$t$8417$19h1md)
                        ((case-lambda
                           ((g$ls/false$8418$19h1md)
                            (if g$ls/false$8418$19h1md
                              (apply
                                (case-lambda
                                  ((g$expr$8419$19h1md
                                     g$cls$8420$19h1md
                                     g$cls*$8421$19h1md)
                                   (g$bless$7915$19h1md
                                     (list
                                       'let
                                       (list (list 't g$expr$8419$19h1md))
                                       ((letrec ((g$f$8422$19h1md
                                                   (case-lambda
                                                     ((g$cls$8423$19h1md
                                                        g$cls*$8424$19h1md)
                                                      (if (null?
                                                            g$cls*$8424$19h1md)
                                                        (g$build-last$8412$19h1md
                                                          g$cls$8423$19h1md)
                                                        (g$build-one$8413$19h1md
                                                          g$cls$8423$19h1md
                                                          (g$f$8422$19h1md
                                                            (car g$cls*$8424$19h1md)
                                                            (cdr g$cls*$8424$19h1md))))))))
                                          g$f$8422$19h1md)
                                        g$cls$8420$19h1md
                                        g$cls*$8421$19h1md)))))
                                g$ls/false$8418$19h1md)
                              (g$syntax-violation$8061$19h1md
                                '#f
                                '"invalid syntax"
                                g$t$8417$19h1md))))
                         (g$syntax-dispatch$7952$19h1md
                           g$t$8417$19h1md
                           '(_ any any . each-any)))))
                     g$t$8414$19h1md))))
               (g$syntax-dispatch$7952$19h1md g$t$8414$19h1md '(_ any)))))
           g$e$8411$19h1md)))))
   (g$quote-transformer$7912$19h1md
     g$quote-transformer$11351$19h1md
     (case-lambda
       ((g$e$8439$19h1md g$r$8440$19h1md g$mr$8441$19h1md)
        ((case-lambda
           ((g$t$8442$19h1md)
            ((case-lambda
               ((g$ls/false$8443$19h1md)
                (if g$ls/false$8443$19h1md
                  (apply
                    (case-lambda
                      ((g$datum$8444$19h1md)
                       (list
                         'quote
                         (g$stx->datum$7685$19h1md g$datum$8444$19h1md))))
                    g$ls/false$8443$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8442$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$8442$19h1md '(_ any)))))
         g$e$8439$19h1md))))
   (g$case-lambda-transformer$7913$19h1md
     g$case-lambda-transformer$11352$19h1md
     (case-lambda
       ((g$e$8445$19h1md g$r$8446$19h1md g$mr$8447$19h1md)
        ((case-lambda
           ((g$t$8448$19h1md)
            ((case-lambda
               ((g$ls/false$8449$19h1md)
                (if g$ls/false$8449$19h1md
                  (apply
                    (case-lambda
                      ((g$fmls*$8450$19h1md g$b*$8451$19h1md g$b**$8452$19h1md)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$7974$19h1md
                              g$e$8445$19h1md
                              g$fmls*$8450$19h1md
                              (map cons g$b*$8451$19h1md g$b**$8452$19h1md)
                              g$r$8446$19h1md
                              g$mr$8447$19h1md)))
                         (case-lambda
                           ((g$fmls*$8455$19h1md g$body*$8456$19h1md)
                            ((case-lambda
                               ((g$body*$8457$19h1md g$fmls*$8458$19h1md)
                                (g$build-case-lambda$7606$19h1md
                                  '#f
                                  g$fmls*$8458$19h1md
                                  g$body*$8457$19h1md)))
                             g$body*$8456$19h1md
                             g$fmls*$8455$19h1md))))))
                    g$ls/false$8449$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8448$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$8448$19h1md
               '(_ . #(each (any any . each-any)))))))
         g$e$8445$19h1md))))
   (g$lambda-transformer$7914$19h1md
     g$lambda-transformer$11353$19h1md
     (case-lambda
       ((g$e$8459$19h1md g$r$8460$19h1md g$mr$8461$19h1md)
        ((case-lambda
           ((g$t$8462$19h1md)
            ((case-lambda
               ((g$ls/false$8463$19h1md)
                (if g$ls/false$8463$19h1md
                  (apply
                    (case-lambda
                      ((g$fmls$8464$19h1md g$b$8465$19h1md g$b*$8466$19h1md)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$7973$19h1md
                              g$e$8459$19h1md
                              g$fmls$8464$19h1md
                              (cons g$b$8465$19h1md g$b*$8466$19h1md)
                              g$r$8460$19h1md
                              g$mr$8461$19h1md)))
                         (case-lambda
                           ((g$fmls$8469$19h1md g$body$8470$19h1md)
                            ((case-lambda
                               ((g$body$8471$19h1md g$fmls$8472$19h1md)
                                (g$build-lambda$7605$19h1md
                                  '#f
                                  g$fmls$8472$19h1md
                                  g$body$8471$19h1md)))
                             g$body$8470$19h1md
                             g$fmls$8469$19h1md))))))
                    g$ls/false$8463$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8462$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$8462$19h1md
               '(_ any any . each-any)))))
         g$e$8459$19h1md))))
   (g$bless$7915$19h1md
     g$bless$11354$19h1md
     (case-lambda
       ((g$x$8473$19h1md)
        (g$mkstx$7662$19h1md
          ((letrec ((g$f$8474$19h1md
                      (case-lambda
                        ((g$x$8475$19h1md)
                         (if (g$stx?$7646$19h1md g$x$8475$19h1md)
                           g$x$8475$19h1md
                           (if (pair? g$x$8475$19h1md)
                             (cons
                               (g$f$8474$19h1md (car g$x$8475$19h1md))
                               (g$f$8474$19h1md (cdr g$x$8475$19h1md)))
                             (if (symbol? g$x$8475$19h1md)
                               (g$scheme-stx$7895$19h1md g$x$8475$19h1md)
                               (if (vector? g$x$8475$19h1md)
                                 (vector-map g$f$8474$19h1md g$x$8475$19h1md)
                                 g$x$8475$19h1md))))))))
             g$f$8474$19h1md)
           g$x$8473$19h1md)
          '()
          '()
          '()))))
   (g$with-syntax-macro$7916$19h1md
     g$with-syntax-macro$11355$19h1md
     (case-lambda
       ((g$e$8476$19h1md)
        ((case-lambda
           ((g$t$8477$19h1md)
            ((case-lambda
               ((g$ls/false$8478$19h1md)
                (if g$ls/false$8478$19h1md
                  (apply
                    (case-lambda
                      ((g$pat*$8479$19h1md
                         g$expr*$8480$19h1md
                         g$b$8481$19h1md
                         g$b*$8482$19h1md)
                       ((case-lambda
                          ((g$idn*$8483$19h1md)
                           (begin
                             (g$verify-formals$7972$19h1md
                               (map car g$idn*$8483$19h1md)
                               g$e$8476$19h1md)
                             ((case-lambda
                                ((g$t*$8484$19h1md)
                                 (g$bless$7915$19h1md
                                   (list
                                     'let
                                     (map list
                                          g$t*$8484$19h1md
                                          g$expr*$8480$19h1md)
                                     ((letrec ((g$f$8485$19h1md
                                                 (case-lambda
                                                   ((g$pat*$8486$19h1md
                                                      g$t*$8487$19h1md)
                                                    (if (null?
                                                          g$pat*$8486$19h1md)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$8481$19h1md
                                                            g$b*$8482$19h1md)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$8487$19h1md)
                                                        '()
                                                        (list
                                                          (car g$pat*$8486$19h1md)
                                                          (g$f$8485$19h1md
                                                            (cdr g$pat*$8486$19h1md)
                                                            (cdr g$t*$8487$19h1md)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$8486$19h1md))
                                                            (car g$t*$8487$19h1md)))))))))
                                        g$f$8485$19h1md)
                                      g$pat*$8479$19h1md
                                      g$t*$8484$19h1md)))))
                              (g$generate-temporaries$8051$19h1md
                                g$expr*$8480$19h1md)))))
                        ((letrec ((g$f$8488$19h1md
                                    (case-lambda
                                      ((g$pat*$8489$19h1md)
                                       (if (null? g$pat*$8489$19h1md)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$7951$19h1md
                                                (car g$pat*$8489$19h1md)
                                                '())))
                                           (case-lambda
                                             ((g$pat$8492$19h1md
                                                g$idn*$8493$19h1md)
                                              ((case-lambda
                                                 ((g$idn*$8494$19h1md
                                                    g$pat$8495$19h1md)
                                                  (append
                                                    g$idn*$8494$19h1md
                                                    (g$f$8488$19h1md
                                                      (cdr g$pat*$8489$19h1md)))))
                                               g$idn*$8493$19h1md
                                               g$pat$8492$19h1md)))))))))
                           g$f$8488$19h1md)
                         g$pat*$8479$19h1md))))
                    g$ls/false$8478$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8477$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$8477$19h1md
               '(_ #(each (any any)) any . each-any)))))
         g$e$8476$19h1md))))
   (g$invalid-fmls-error$7917$19h1md
     g$invalid-fmls-error$11356$19h1md
     (case-lambda
       ((g$stx$8496$19h1md g$fmls$8497$19h1md)
        ((case-lambda
           ((g$t$8498$19h1md)
            ((case-lambda
               ((g$ls/false$8499$19h1md)
                (if g$ls/false$8499$19h1md
                  (apply
                    (case-lambda
                      ((g$id*$8500$19h1md g$last$8501$19h1md)
                       ((letrec ((g$f$8502$19h1md
                                   (case-lambda
                                     ((g$id*$8503$19h1md)
                                      (if (null? g$id*$8503$19h1md)
                                        (values)
                                        (if (not (g$id?$7674$19h1md
                                                   (car g$id*$8503$19h1md)))
                                          (g$syntax-violation$8061$19h1md
                                            '#f
                                            '"not an identifier"
                                            g$stx$8496$19h1md
                                            (car g$id*$8503$19h1md))
                                          (begin
                                            (g$f$8502$19h1md
                                              (cdr g$id*$8503$19h1md))
                                            (if (g$bound-id-member?$7681$19h1md
                                                  (car g$id*$8503$19h1md)
                                                  (cdr g$id*$8503$19h1md))
                                              (g$syntax-violation$8061$19h1md
                                                '#f
                                                '"duplicate binding"
                                                g$stx$8496$19h1md
                                                (car g$id*$8503$19h1md))
                                              (void)))))))))
                          g$f$8502$19h1md)
                        (if (g$id?$7674$19h1md g$last$8501$19h1md)
                          (cons g$last$8501$19h1md g$id*$8500$19h1md)
                          (if (g$syntax-null?$7669$19h1md g$last$8501$19h1md)
                            g$id*$8500$19h1md
                            (g$syntax-violation$8061$19h1md
                              '#f
                              '"not an identifier"
                              g$stx$8496$19h1md
                              g$last$8501$19h1md))))))
                    g$ls/false$8499$19h1md)
                  ((case-lambda
                     ((g$t$8504$19h1md)
                      ((case-lambda
                         ((g$ls/false$8505$19h1md)
                          (if g$ls/false$8505$19h1md
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$8061$19h1md
                                   '#f
                                   '"malformed binding form"
                                   g$stx$8496$19h1md
                                   g$fmls$8497$19h1md)))
                              g$ls/false$8505$19h1md)
                            (g$syntax-violation$8061$19h1md
                              '#f
                              '"invalid syntax"
                              g$t$8504$19h1md))))
                       (g$syntax-dispatch$7952$19h1md g$t$8504$19h1md '_))))
                   g$t$8498$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$8498$19h1md
               '#(each+ any () any)))))
         g$fmls$8497$19h1md))))
   (g$let-macro$7918$19h1md
     g$let-macro$11357$19h1md
     (case-lambda
       ((g$stx$8506$19h1md)
        ((case-lambda
           ((g$t$8507$19h1md)
            ((case-lambda
               ((g$ls/false$8508$19h1md)
                (if g$ls/false$8508$19h1md
                  (apply
                    (case-lambda
                      ((g$lhs*$8509$19h1md
                         g$rhs*$8510$19h1md
                         g$b$8511$19h1md
                         g$b*$8512$19h1md)
                       (if (g$valid-bound-ids?$7679$19h1md g$lhs*$8509$19h1md)
                         (g$bless$7915$19h1md
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$8509$19h1md
                                 (cons g$b$8511$19h1md g$b*$8512$19h1md)))
                             g$rhs*$8510$19h1md))
                         (g$invalid-fmls-error$7917$19h1md
                           g$stx$8506$19h1md
                           g$lhs*$8509$19h1md))))
                    g$ls/false$8508$19h1md)
                  ((case-lambda
                     ((g$t$8513$19h1md)
                      ((case-lambda
                         ((g$ls/false$8514$19h1md)
                          (if (if g$ls/false$8514$19h1md
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$8515$19h1md
                                         g$lhs*$8516$19h1md
                                         g$rhs*$8517$19h1md
                                         g$b$8518$19h1md
                                         g$b*$8519$19h1md)
                                       (g$id?$7674$19h1md g$f$8515$19h1md)))
                                    g$ls/false$8514$19h1md))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$8520$19h1md
                                   g$lhs*$8521$19h1md
                                   g$rhs*$8522$19h1md
                                   g$b$8523$19h1md
                                   g$b*$8524$19h1md)
                                 (if (g$valid-bound-ids?$7679$19h1md
                                       g$lhs*$8521$19h1md)
                                   (g$bless$7915$19h1md
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$8520$19h1md
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$8521$19h1md
                                                 (cons
                                                   g$b$8523$19h1md
                                                   g$b*$8524$19h1md)))))
                                         g$f$8520$19h1md)
                                       g$rhs*$8522$19h1md))
                                   (g$invalid-fmls-error$7917$19h1md
                                     g$stx$8506$19h1md
                                     g$lhs*$8521$19h1md))))
                              g$ls/false$8514$19h1md)
                            (g$syntax-violation$8061$19h1md
                              '#f
                              '"invalid syntax"
                              g$t$8513$19h1md))))
                       (g$syntax-dispatch$7952$19h1md
                         g$t$8513$19h1md
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$8507$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$8507$19h1md
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8506$19h1md))))
   (g$let-values-macro$7919$19h1md
     g$let-values-macro$11358$19h1md
     (case-lambda
       ((g$stx$8525$19h1md)
        (letrec* ((g$rename$8526$19h1md
                    (case-lambda
                      ((g$x$8577$19h1md g$old*$8578$19h1md g$new*$8579$19h1md)
                       (begin
                         (if (not (g$id?$7674$19h1md g$x$8577$19h1md))
                           (g$syntax-violation$8061$19h1md
                             '#f
                             '"not an indentifier"
                             g$stx$8525$19h1md
                             g$x$8577$19h1md)
                           (void))
                         (if (g$bound-id-member?$7681$19h1md
                               g$x$8577$19h1md
                               g$old*$8578$19h1md)
                           (g$syntax-violation$8061$19h1md
                             '#f
                             '"duplicate binding"
                             g$stx$8525$19h1md
                             g$x$8577$19h1md)
                           (void))
                         ((case-lambda
                            ((g$y$8580$19h1md)
                             (values
                               g$y$8580$19h1md
                               (cons g$x$8577$19h1md g$old*$8578$19h1md)
                               (cons g$y$8580$19h1md g$new*$8579$19h1md))))
                          (gensym
                            (g$syntax->datum$8064$19h1md g$x$8577$19h1md)))))))
                  (g$rename*$8527$19h1md
                    (case-lambda
                      ((g$x*$8568$19h1md g$old*$8569$19h1md g$new*$8570$19h1md)
                       (if (null? g$x*$8568$19h1md)
                         (values '() g$old*$8569$19h1md g$new*$8570$19h1md)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$8526$19h1md
                                (car g$x*$8568$19h1md)
                                g$old*$8569$19h1md
                                g$new*$8570$19h1md)))
                           (case-lambda
                             ((g$x$8571$19h1md
                                g$old*$8572$19h1md
                                g$new*$8573$19h1md)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$8527$19h1md
                                     (cdr g$x*$8568$19h1md)
                                     g$old*$8572$19h1md
                                     g$new*$8573$19h1md)))
                                (case-lambda
                                  ((g$x*$8574$19h1md
                                     g$old*$8575$19h1md
                                     g$new*$8576$19h1md)
                                   (values
                                     (cons g$x$8571$19h1md g$x*$8574$19h1md)
                                     g$old*$8575$19h1md
                                     g$new*$8576$19h1md))))))))))))
          ((case-lambda
             ((g$t$8528$19h1md)
              ((case-lambda
                 ((g$ls/false$8529$19h1md)
                  (if g$ls/false$8529$19h1md
                    (apply
                      (case-lambda
                        ((g$b$8530$19h1md g$b*$8531$19h1md)
                         (g$cons*$5806$19h1md
                           (g$bless$7915$19h1md 'let)
                           '()
                           g$b$8530$19h1md
                           g$b*$8531$19h1md)))
                      g$ls/false$8529$19h1md)
                    ((case-lambda
                       ((g$t$8532$19h1md)
                        ((case-lambda
                           ((g$ls/false$8533$19h1md)
                            (if g$ls/false$8533$19h1md
                              (apply
                                (case-lambda
                                  ((g$lhs*$8534$19h1md
                                     g$rhs*$8535$19h1md
                                     g$b$8536$19h1md
                                     g$b*$8537$19h1md)
                                   (g$bless$7915$19h1md
                                     ((letrec ((g$f$8538$19h1md
                                                 (case-lambda
                                                   ((g$lhs*$8539$19h1md
                                                      g$rhs*$8540$19h1md
                                                      g$old*$8541$19h1md
                                                      g$new*$8542$19h1md)
                                                    (if (null?
                                                          g$lhs*$8539$19h1md)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (map list
                                                               g$old*$8541$19h1md
                                                               g$new*$8542$19h1md)
                                                          (cons
                                                            g$b$8536$19h1md
                                                            g$b*$8537$19h1md)))
                                                      ((case-lambda
                                                         ((g$t$8543$19h1md)
                                                          ((case-lambda
                                                             ((g$ls/false$8544$19h1md)
                                                              (if g$ls/false$8544$19h1md
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8545$19h1md)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$8527$19h1md
                                                                            g$x*$8545$19h1md
                                                                            g$old*$8541$19h1md
                                                                            g$new*$8542$19h1md)))
                                                                       (case-lambda
                                                                         ((g$y*$8549$19h1md
                                                                            g$old*$8550$19h1md
                                                                            g$new*$8551$19h1md)
                                                                          ((case-lambda
                                                                             ((g$new*$8552$19h1md
                                                                                g$old*$8553$19h1md
                                                                                g$y*$8554$19h1md)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$8540$19h1md))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$8554$19h1md
                                                                                  (g$f$8538$19h1md
                                                                                    (cdr g$lhs*$8539$19h1md)
                                                                                    (cdr g$rhs*$8540$19h1md)
                                                                                    g$old*$8553$19h1md
                                                                                    g$new*$8552$19h1md)))))
                                                                           g$new*$8551$19h1md
                                                                           g$old*$8550$19h1md
                                                                           g$y*$8549$19h1md))))))
                                                                  g$ls/false$8544$19h1md)
                                                                ((case-lambda
                                                                   ((g$t$8555$19h1md)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8556$19h1md)
                                                                        (if g$ls/false$8556$19h1md
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8557$19h1md
                                                                                 g$x$8558$19h1md)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$8526$19h1md
                                                                                      g$x$8558$19h1md
                                                                                      g$old*$8541$19h1md
                                                                                      g$new*$8542$19h1md)))
                                                                                 (case-lambda
                                                                                   ((g$y$8559$19h1md
                                                                                      g$old*$8560$19h1md
                                                                                      g$new*$8561$19h1md)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$8527$19h1md
                                                                                           g$x*$8557$19h1md
                                                                                           g$old*$8560$19h1md
                                                                                           g$new*$8561$19h1md)))
                                                                                      (case-lambda
                                                                                        ((g$y*$8562$19h1md
                                                                                           g$old*$8563$19h1md
                                                                                           g$new*$8564$19h1md)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$8540$19h1md))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$8562$19h1md
                                                                                               g$y$8559$19h1md)
                                                                                             (g$f$8538$19h1md
                                                                                               (cdr g$lhs*$8539$19h1md)
                                                                                               (cdr g$rhs*$8540$19h1md)
                                                                                               g$old*$8563$19h1md
                                                                                               g$new*$8564$19h1md)))))))))))
                                                                            g$ls/false$8556$19h1md)
                                                                          ((case-lambda
                                                                             ((g$t$8565$19h1md)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8566$19h1md)
                                                                                  (if g$ls/false$8566$19h1md
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8567$19h1md)
                                                                                         (g$syntax-violation$8061$19h1md
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8525$19h1md
                                                                                           g$others$8567$19h1md)))
                                                                                      g$ls/false$8566$19h1md)
                                                                                    (g$syntax-violation$8061$19h1md
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8565$19h1md))))
                                                                               (g$syntax-dispatch$7952$19h1md
                                                                                 g$t$8565$19h1md
                                                                                 'any))))
                                                                           g$t$8555$19h1md))))
                                                                     (g$syntax-dispatch$7952$19h1md
                                                                       g$t$8555$19h1md
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8543$19h1md))))
                                                           (g$syntax-dispatch$7952$19h1md
                                                             g$t$8543$19h1md
                                                             'each-any))))
                                                       (car g$lhs*$8539$19h1md)))))))
                                        g$f$8538$19h1md)
                                      g$lhs*$8534$19h1md
                                      g$rhs*$8535$19h1md
                                      '()
                                      '()))))
                                g$ls/false$8533$19h1md)
                              (g$syntax-violation$8061$19h1md
                                '#f
                                '"invalid syntax"
                                g$t$8532$19h1md))))
                         (g$syntax-dispatch$7952$19h1md
                           g$t$8532$19h1md
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8528$19h1md))))
               (g$syntax-dispatch$7952$19h1md
                 g$t$8528$19h1md
                 '(_ () any . each-any)))))
           g$stx$8525$19h1md)))))
   (g$let*-values-macro$7920$19h1md
     g$let*-values-macro$11359$19h1md
     (case-lambda
       ((g$stx$8581$19h1md)
        (letrec* ((g$check$8582$19h1md
                    (case-lambda
                      ((g$x*$8606$19h1md)
                       (if (not (null? g$x*$8606$19h1md))
                         ((case-lambda
                            ((g$x$8607$19h1md)
                             (begin
                               (if (not (g$id?$7674$19h1md g$x$8607$19h1md))
                                 (g$syntax-violation$8061$19h1md
                                   '#f
                                   '"not an identifier"
                                   g$stx$8581$19h1md
                                   g$x$8607$19h1md)
                                 (void))
                               (g$check$8582$19h1md (cdr g$x*$8606$19h1md))
                               (if (g$bound-id-member?$7681$19h1md
                                     g$x$8607$19h1md
                                     (cdr g$x*$8606$19h1md))
                                 (g$syntax-violation$8061$19h1md
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$8581$19h1md
                                   g$x$8607$19h1md)
                                 (void)))))
                          (car g$x*$8606$19h1md))
                         (void))))))
          ((case-lambda
             ((g$t$8583$19h1md)
              ((case-lambda
                 ((g$ls/false$8584$19h1md)
                  (if g$ls/false$8584$19h1md
                    (apply
                      (case-lambda
                        ((g$b$8585$19h1md g$b*$8586$19h1md)
                         (g$cons*$5806$19h1md
                           (g$bless$7915$19h1md 'let)
                           '()
                           g$b$8585$19h1md
                           g$b*$8586$19h1md)))
                      g$ls/false$8584$19h1md)
                    ((case-lambda
                       ((g$t$8587$19h1md)
                        ((case-lambda
                           ((g$ls/false$8588$19h1md)
                            (if g$ls/false$8588$19h1md
                              (apply
                                (case-lambda
                                  ((g$lhs*$8589$19h1md
                                     g$rhs*$8590$19h1md
                                     g$b$8591$19h1md
                                     g$b*$8592$19h1md)
                                   (g$bless$7915$19h1md
                                     ((letrec ((g$f$8593$19h1md
                                                 (case-lambda
                                                   ((g$lhs*$8594$19h1md
                                                      g$rhs*$8595$19h1md)
                                                    (if (null?
                                                          g$lhs*$8594$19h1md)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$8591$19h1md
                                                          g$b*$8592$19h1md))
                                                      ((case-lambda
                                                         ((g$t$8596$19h1md)
                                                          ((case-lambda
                                                             ((g$ls/false$8597$19h1md)
                                                              (if g$ls/false$8597$19h1md
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8598$19h1md)
                                                                     (begin
                                                                       (g$check$8582$19h1md
                                                                         g$x*$8598$19h1md)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$8595$19h1md))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$8598$19h1md
                                                                           (g$f$8593$19h1md
                                                                             (cdr g$lhs*$8594$19h1md)
                                                                             (cdr g$rhs*$8595$19h1md)))))))
                                                                  g$ls/false$8597$19h1md)
                                                                ((case-lambda
                                                                   ((g$t$8599$19h1md)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8600$19h1md)
                                                                        (if g$ls/false$8600$19h1md
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8601$19h1md
                                                                                 g$x$8602$19h1md)
                                                                               (begin
                                                                                 (g$check$8582$19h1md
                                                                                   (cons
                                                                                     g$x$8602$19h1md
                                                                                     g$x*$8601$19h1md))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$8595$19h1md))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$8601$19h1md
                                                                                       g$x$8602$19h1md)
                                                                                     (g$f$8593$19h1md
                                                                                       (cdr g$lhs*$8594$19h1md)
                                                                                       (cdr g$rhs*$8595$19h1md)))))))
                                                                            g$ls/false$8600$19h1md)
                                                                          ((case-lambda
                                                                             ((g$t$8603$19h1md)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8604$19h1md)
                                                                                  (if g$ls/false$8604$19h1md
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8605$19h1md)
                                                                                         (g$syntax-violation$8061$19h1md
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8581$19h1md
                                                                                           g$others$8605$19h1md)))
                                                                                      g$ls/false$8604$19h1md)
                                                                                    (g$syntax-violation$8061$19h1md
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8603$19h1md))))
                                                                               (g$syntax-dispatch$7952$19h1md
                                                                                 g$t$8603$19h1md
                                                                                 'any))))
                                                                           g$t$8599$19h1md))))
                                                                     (g$syntax-dispatch$7952$19h1md
                                                                       g$t$8599$19h1md
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8596$19h1md))))
                                                           (g$syntax-dispatch$7952$19h1md
                                                             g$t$8596$19h1md
                                                             'each-any))))
                                                       (car g$lhs*$8594$19h1md)))))))
                                        g$f$8593$19h1md)
                                      g$lhs*$8589$19h1md
                                      g$rhs*$8590$19h1md))))
                                g$ls/false$8588$19h1md)
                              (g$syntax-violation$8061$19h1md
                                '#f
                                '"invalid syntax"
                                g$t$8587$19h1md))))
                         (g$syntax-dispatch$7952$19h1md
                           g$t$8587$19h1md
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8583$19h1md))))
               (g$syntax-dispatch$7952$19h1md
                 g$t$8583$19h1md
                 '(_ () any . each-any)))))
           g$stx$8581$19h1md)))))
   (g$trace-lambda-macro$7921$19h1md
     g$trace-lambda-macro$11360$19h1md
     (case-lambda
       ((g$stx$8608$19h1md)
        ((case-lambda
           ((g$t$8609$19h1md)
            ((case-lambda
               ((g$ls/false$8610$19h1md)
                (if g$ls/false$8610$19h1md
                  (apply
                    (case-lambda
                      ((g$who$8611$19h1md
                         g$fmls$8612$19h1md
                         g$b$8613$19h1md
                         g$b*$8614$19h1md)
                       (if (g$valid-bound-ids?$7679$19h1md g$fmls$8612$19h1md)
                         (g$bless$7915$19h1md
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$8611$19h1md)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$8612$19h1md
                                 (cons g$b$8613$19h1md g$b*$8614$19h1md)))))
                         (g$invalid-fmls-error$7917$19h1md
                           g$stx$8608$19h1md
                           g$fmls$8612$19h1md))))
                    g$ls/false$8610$19h1md)
                  ((case-lambda
                     ((g$t$8615$19h1md)
                      ((case-lambda
                         ((g$ls/false$8616$19h1md)
                          (if g$ls/false$8616$19h1md
                            (apply
                              (case-lambda
                                ((g$who$8617$19h1md
                                   g$fmls$8618$19h1md
                                   g$last$8619$19h1md
                                   g$b$8620$19h1md
                                   g$b*$8621$19h1md)
                                 (if (g$valid-bound-ids?$7679$19h1md
                                       (cons
                                         g$last$8619$19h1md
                                         g$fmls$8618$19h1md))
                                   (g$bless$7915$19h1md
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$8617$19h1md)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$8618$19h1md
                                             g$last$8619$19h1md)
                                           (cons
                                             g$b$8620$19h1md
                                             g$b*$8621$19h1md)))))
                                   (g$invalid-fmls-error$7917$19h1md
                                     g$stx$8608$19h1md
                                     (append
                                       g$fmls$8618$19h1md
                                       g$last$8619$19h1md)))))
                              g$ls/false$8616$19h1md)
                            (g$syntax-violation$8061$19h1md
                              '#f
                              '"invalid syntax"
                              g$t$8615$19h1md))))
                       (g$syntax-dispatch$7952$19h1md
                         g$t$8615$19h1md
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$8609$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$8609$19h1md
               '(_ any each-any any . each-any)))))
         g$stx$8608$19h1md))))
   (g$trace-define-macro$7922$19h1md
     g$trace-define-macro$11361$19h1md
     (case-lambda
       ((g$stx$8622$19h1md)
        ((case-lambda
           ((g$t$8623$19h1md)
            ((case-lambda
               ((g$ls/false$8624$19h1md)
                (if g$ls/false$8624$19h1md
                  (apply
                    (case-lambda
                      ((g$who$8625$19h1md
                         g$fmls$8626$19h1md
                         g$b$8627$19h1md
                         g$b*$8628$19h1md)
                       (if (g$valid-bound-ids?$7679$19h1md g$fmls$8626$19h1md)
                         (g$bless$7915$19h1md
                           (list
                             'define
                             g$who$8625$19h1md
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$8625$19h1md)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$8626$19h1md
                                   (cons g$b$8627$19h1md g$b*$8628$19h1md))))))
                         (g$invalid-fmls-error$7917$19h1md
                           g$stx$8622$19h1md
                           g$fmls$8626$19h1md))))
                    g$ls/false$8624$19h1md)
                  ((case-lambda
                     ((g$t$8629$19h1md)
                      ((case-lambda
                         ((g$ls/false$8630$19h1md)
                          (if g$ls/false$8630$19h1md
                            (apply
                              (case-lambda
                                ((g$who$8631$19h1md
                                   g$fmls$8632$19h1md
                                   g$last$8633$19h1md
                                   g$b$8634$19h1md
                                   g$b*$8635$19h1md)
                                 (if (g$valid-bound-ids?$7679$19h1md
                                       (cons
                                         g$last$8633$19h1md
                                         g$fmls$8632$19h1md))
                                   (g$bless$7915$19h1md
                                     (list
                                       'define
                                       g$who$8631$19h1md
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$8631$19h1md)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$8632$19h1md
                                               g$last$8633$19h1md)
                                             (cons
                                               g$b$8634$19h1md
                                               g$b*$8635$19h1md))))))
                                   (g$invalid-fmls-error$7917$19h1md
                                     g$stx$8622$19h1md
                                     (append
                                       g$fmls$8632$19h1md
                                       g$last$8633$19h1md)))))
                              g$ls/false$8630$19h1md)
                            ((case-lambda
                               ((g$t$8636$19h1md)
                                ((case-lambda
                                   ((g$ls/false$8637$19h1md)
                                    (if g$ls/false$8637$19h1md
                                      (apply
                                        (case-lambda
                                          ((g$who$8638$19h1md
                                             g$expr$8639$19h1md)
                                           (if (g$id?$7674$19h1md
                                                 g$who$8638$19h1md)
                                             (g$bless$7915$19h1md
                                               (list
                                                 'define
                                                 g$who$8638$19h1md
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$8639$19h1md))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$8638$19h1md)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$8061$19h1md
                                               '#f
                                               '"invalid name"
                                               g$stx$8622$19h1md))))
                                        g$ls/false$8637$19h1md)
                                      (g$syntax-violation$8061$19h1md
                                        '#f
                                        '"invalid syntax"
                                        g$t$8636$19h1md))))
                                 (g$syntax-dispatch$7952$19h1md
                                   g$t$8636$19h1md
                                   '(_ any any)))))
                             g$t$8629$19h1md))))
                       (g$syntax-dispatch$7952$19h1md
                         g$t$8629$19h1md
                         '(_ (any . #(each+ any () any)) any . each-any)))))
                   g$t$8623$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$8623$19h1md
               '(_ (any . each-any) any . each-any)))))
         g$stx$8622$19h1md))))
   (g$trace-define-syntax-macro$7923$19h1md
     g$trace-define-syntax-macro$11362$19h1md
     (case-lambda
       ((g$stx$8640$19h1md)
        ((case-lambda
           ((g$t$8641$19h1md)
            ((case-lambda
               ((g$ls/false$8642$19h1md)
                (if g$ls/false$8642$19h1md
                  (apply
                    (case-lambda
                      ((g$who$8643$19h1md g$expr$8644$19h1md)
                       (if (g$id?$7674$19h1md g$who$8643$19h1md)
                         (g$bless$7915$19h1md
                           (list
                             'define-syntax
                             g$who$8643$19h1md
                             (list
                               'make-traced-macro
                               (list 'quote g$who$8643$19h1md)
                               g$expr$8644$19h1md)))
                         (g$syntax-violation$8061$19h1md
                           '#f
                           '"invalid name"
                           g$stx$8640$19h1md))))
                    g$ls/false$8642$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8641$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$8641$19h1md '(_ any any)))))
         g$stx$8640$19h1md))))
   (g$trace-let/rec-syntax$7924$19h1md
     g$trace-let/rec-syntax$11363$19h1md
     (case-lambda
       ((g$who$8645$19h1md)
        (case-lambda
          ((g$stx$8646$19h1md)
           ((case-lambda
              ((g$t$8647$19h1md)
               ((case-lambda
                  ((g$ls/false$8648$19h1md)
                   (if g$ls/false$8648$19h1md
                     (apply
                       (case-lambda
                         ((g$lhs*$8649$19h1md
                            g$rhs*$8650$19h1md
                            g$b$8651$19h1md
                            g$b*$8652$19h1md)
                          (if (g$valid-bound-ids?$7679$19h1md
                                g$lhs*$8649$19h1md)
                            ((case-lambda
                               ((g$rhs*$8653$19h1md)
                                (g$bless$7915$19h1md
                                  (cons
                                    g$who$8645$19h1md
                                    (cons
                                      (map list
                                           g$lhs*$8649$19h1md
                                           g$rhs*$8653$19h1md)
                                      (cons
                                        g$b$8651$19h1md
                                        g$b*$8652$19h1md))))))
                             (map (case-lambda
                                    ((g$lhs$8654$19h1md g$rhs$8655$19h1md)
                                     (list
                                       'make-traced-macro
                                       (list 'quote g$lhs$8654$19h1md)
                                       g$rhs$8655$19h1md)))
                                  g$lhs*$8649$19h1md
                                  g$rhs*$8650$19h1md))
                            (g$invalid-fmls-error$7917$19h1md
                              g$stx$8646$19h1md
                              g$lhs*$8649$19h1md))))
                       g$ls/false$8648$19h1md)
                     (g$syntax-violation$8061$19h1md
                       '#f
                       '"invalid syntax"
                       g$t$8647$19h1md))))
                (g$syntax-dispatch$7952$19h1md
                  g$t$8647$19h1md
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$8646$19h1md))))))
   (g$trace-let-syntax-macro$7925$19h1md
     g$trace-let-syntax-macro$11364$19h1md
     (g$trace-let/rec-syntax$7924$19h1md 'let-syntax))
   (g$trace-letrec-syntax-macro$7926$19h1md
     g$trace-letrec-syntax-macro$11365$19h1md
     (g$trace-let/rec-syntax$7924$19h1md 'letrec-syntax))
   (g$guard-macro$7927$19h1md
     g$guard-macro$11366$19h1md
     (case-lambda
       ((g$x$8656$19h1md)
        (letrec* ((g$gen-clauses$8657$19h1md
                    (case-lambda
                      ((g$con$8669$19h1md
                         g$outerk$8670$19h1md
                         g$clause*$8671$19h1md)
                       (letrec* ((g$f$8672$19h1md
                                   (case-lambda
                                     ((g$x$8700$19h1md g$k$8701$19h1md)
                                      ((case-lambda
                                         ((g$t$8702$19h1md)
                                          ((case-lambda
                                             ((g$ls/false$8703$19h1md)
                                              (if g$ls/false$8703$19h1md
                                                (apply
                                                  (case-lambda
                                                    ((g$e$8704$19h1md
                                                       g$p$8705$19h1md)
                                                     ((case-lambda
                                                        ((g$t$8706$19h1md)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$8706$19h1md
                                                               g$e$8704$19h1md))
                                                           (list
                                                             'if
                                                             g$t$8706$19h1md
                                                             (list
                                                               g$p$8705$19h1md
                                                               g$t$8706$19h1md)
                                                             g$k$8701$19h1md))))
                                                      (gensym))))
                                                  g$ls/false$8703$19h1md)
                                                ((case-lambda
                                                   ((g$t$8707$19h1md)
                                                    ((case-lambda
                                                       ((g$ls/false$8708$19h1md)
                                                        (if g$ls/false$8708$19h1md
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8709$19h1md)
                                                               ((case-lambda
                                                                  ((g$t$8710$19h1md)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$8710$19h1md
                                                                         g$e$8709$19h1md))
                                                                     (list
                                                                       'if
                                                                       g$t$8710$19h1md
                                                                       g$t$8710$19h1md
                                                                       g$k$8701$19h1md))))
                                                                (gensym))))
                                                            g$ls/false$8708$19h1md)
                                                          ((case-lambda
                                                             ((g$t$8711$19h1md)
                                                              ((case-lambda
                                                                 ((g$ls/false$8712$19h1md)
                                                                  (if g$ls/false$8712$19h1md
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$8713$19h1md
                                                                           g$v$8714$19h1md
                                                                           g$v*$8715$19h1md)
                                                                         (list
                                                                           'if
                                                                           g$e$8713$19h1md
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$8714$19h1md
                                                                               g$v*$8715$19h1md))
                                                                           g$k$8701$19h1md)))
                                                                      g$ls/false$8712$19h1md)
                                                                    ((case-lambda
                                                                       ((g$t$8716$19h1md)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8717$19h1md)
                                                                            (if g$ls/false$8717$19h1md
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$8061$19h1md
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$8700$19h1md)))
                                                                                g$ls/false$8717$19h1md)
                                                                              (g$syntax-violation$8061$19h1md
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8716$19h1md))))
                                                                         (g$syntax-dispatch$7952$19h1md
                                                                           g$t$8716$19h1md
                                                                           '_))))
                                                                     g$t$8711$19h1md))))
                                                               (g$syntax-dispatch$7952$19h1md
                                                                 g$t$8711$19h1md
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$8707$19h1md))))
                                                     (g$syntax-dispatch$7952$19h1md
                                                       g$t$8707$19h1md
                                                       '(any)))))
                                                 g$t$8702$19h1md))))
                                           (g$syntax-dispatch$7952$19h1md
                                             g$t$8702$19h1md
                                             '(any #(scheme-id =>) any)))))
                                       g$x$8700$19h1md))))
                                 (g$f*$8673$19h1md
                                   (case-lambda
                                     ((g$x*$8680$19h1md)
                                      ((case-lambda
                                         ((g$t$8681$19h1md)
                                          ((case-lambda
                                             ((g$ls/false$8682$19h1md)
                                              (if g$ls/false$8682$19h1md
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$8669$19h1md)
                                                       '#t)))
                                                  g$ls/false$8682$19h1md)
                                                ((case-lambda
                                                   ((g$t$8683$19h1md)
                                                    ((case-lambda
                                                       ((g$ls/false$8684$19h1md)
                                                        (if g$ls/false$8684$19h1md
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8685$19h1md
                                                                 g$e*$8686$19h1md)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$8685$19h1md
                                                                     g$e*$8686$19h1md))
                                                                 '#f)))
                                                            g$ls/false$8684$19h1md)
                                                          ((case-lambda
                                                             ((g$t$8687$19h1md)
                                                              ((case-lambda
                                                                 ((g$ls/false$8688$19h1md)
                                                                  (if g$ls/false$8688$19h1md
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$8689$19h1md
                                                                           g$cls*$8690$19h1md)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$8673$19h1md
                                                                                g$cls*$8690$19h1md)))
                                                                           (case-lambda
                                                                             ((g$e$8693$19h1md
                                                                                g$g$8694$19h1md)
                                                                              ((case-lambda
                                                                                 ((g$g$8695$19h1md
                                                                                    g$e$8696$19h1md)
                                                                                  (values
                                                                                    (g$f$8672$19h1md
                                                                                      g$cls$8689$19h1md
                                                                                      g$e$8696$19h1md)
                                                                                    g$g$8695$19h1md)))
                                                                               g$g$8694$19h1md
                                                                               g$e$8693$19h1md))))))
                                                                      g$ls/false$8688$19h1md)
                                                                    ((case-lambda
                                                                       ((g$t$8697$19h1md)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8698$19h1md)
                                                                            (if g$ls/false$8698$19h1md
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$8699$19h1md)
                                                                                   (g$syntax-violation$8061$19h1md
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$8699$19h1md)))
                                                                                g$ls/false$8698$19h1md)
                                                                              (g$syntax-violation$8061$19h1md
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8697$19h1md))))
                                                                         (g$syntax-dispatch$7952$19h1md
                                                                           g$t$8697$19h1md
                                                                           'any))))
                                                                     g$t$8687$19h1md))))
                                                               (g$syntax-dispatch$7952$19h1md
                                                                 g$t$8687$19h1md
                                                                 '(any .
                                                                       any)))))
                                                           g$t$8683$19h1md))))
                                                     (g$syntax-dispatch$7952$19h1md
                                                       g$t$8683$19h1md
                                                       '((#(scheme-id else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$8681$19h1md))))
                                           (g$syntax-dispatch$7952$19h1md
                                             g$t$8681$19h1md
                                             '()))))
                                       g$x*$8680$19h1md)))))
                         (call-with-values
                           (case-lambda
                             (() (g$f*$8673$19h1md g$clause*$8671$19h1md)))
                           (case-lambda
                             ((g$code$8676$19h1md g$raisek$8677$19h1md)
                              ((case-lambda
                                 ((g$raisek$8678$19h1md g$code$8679$19h1md)
                                  (if g$raisek$8678$19h1md
                                    (list
                                      g$outerk$8670$19h1md
                                      g$code$8679$19h1md)
                                    g$code$8679$19h1md)))
                               g$raisek$8677$19h1md
                               g$code$8676$19h1md)))))))))
          ((case-lambda
             ((g$t$8658$19h1md)
              ((case-lambda
                 ((g$ls/false$8659$19h1md)
                  (if (if g$ls/false$8659$19h1md
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$8660$19h1md
                                 g$clause*$8661$19h1md
                                 g$b$8662$19h1md
                                 g$b*$8663$19h1md)
                               (g$id?$7674$19h1md g$con$8660$19h1md)))
                            g$ls/false$8659$19h1md))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$8664$19h1md
                           g$clause*$8665$19h1md
                           g$b$8666$19h1md
                           g$b*$8667$19h1md)
                         ((case-lambda
                            ((g$outerk$8668$19h1md)
                             (g$bless$7915$19h1md
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$8668$19h1md)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$8664$19h1md)
                                           (g$gen-clauses$8657$19h1md
                                             g$con$8664$19h1md
                                             g$outerk$8668$19h1md
                                             g$clause*$8665$19h1md))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$8666$19h1md
                                                 g$b*$8667$19h1md))))))))))))
                          (gensym))))
                      g$ls/false$8659$19h1md)
                    (g$syntax-violation$8061$19h1md
                      '#f
                      '"invalid syntax"
                      g$t$8658$19h1md))))
               (g$syntax-dispatch$7952$19h1md
                 g$t$8658$19h1md
                 '(_ (any . each-any) any . each-any)))))
           g$x$8656$19h1md)))))
   (g$define-enumeration-macro$7928$19h1md
     g$define-enumeration-macro$11367$19h1md
     (case-lambda
       ((g$stx$8718$19h1md)
        (letrec* ((g$set?$8719$19h1md
                    (case-lambda
                      ((g$x$8732$19h1md)
                       ((case-lambda
                          ((g$t$8733$19h1md)
                           (if g$t$8733$19h1md
                             g$t$8733$19h1md
                             (begin
                               '#f
                               (if (not (memq
                                          (car g$x$8732$19h1md)
                                          (cdr g$x$8732$19h1md)))
                                 (begin
                                   '#f
                                   (g$set?$8719$19h1md (cdr g$x$8732$19h1md)))
                                 '#f)))))
                        (null? g$x$8732$19h1md)))))
                  (g$remove-dups$8720$19h1md
                    (case-lambda
                      ((g$ls$8731$19h1md)
                       (if (null? g$ls$8731$19h1md)
                         '()
                         (cons
                           (car g$ls$8731$19h1md)
                           (g$remove-dups$8720$19h1md
                             (g$remq$5811$19h1md
                               (car g$ls$8731$19h1md)
                               (cdr g$ls$8731$19h1md)))))))))
          ((case-lambda
             ((g$t$8721$19h1md)
              ((case-lambda
                 ((g$ls/false$8722$19h1md)
                  (if (if g$ls/false$8722$19h1md
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$8723$19h1md
                                 g$id*$8724$19h1md
                                 g$maker$8725$19h1md)
                               (if (g$id?$7674$19h1md g$name$8723$19h1md)
                                 (if (g$id?$7674$19h1md g$maker$8725$19h1md)
                                   (begin
                                     '#f
                                     (g$for-all$5804$19h1md
                                       g$id?$7674$19h1md
                                       g$id*$8724$19h1md))
                                   '#f)
                                 '#f)))
                            g$ls/false$8722$19h1md))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$8726$19h1md
                           g$id*$8727$19h1md
                           g$maker$8728$19h1md)
                         ((case-lambda
                            ((g$name*$8729$19h1md g$mk$8730$19h1md)
                             (g$bless$7915$19h1md
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$8730$19h1md
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list 'quote g$name*$8729$19h1md))))
                                 (list
                                   'define-syntax
                                   g$name$8726$19h1md
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list 'quote g$name*$8729$19h1md))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list 'quote g$name$8726$19h1md)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$8728$19h1md
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8728$19h1md)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$8729$19h1md))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8728$19h1md)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$8730$19h1md
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$8720$19h1md
                            (g$syntax->datum$8064$19h1md g$id*$8727$19h1md))
                          (gensym))))
                      g$ls/false$8722$19h1md)
                    (g$syntax-violation$8061$19h1md
                      '#f
                      '"invalid syntax"
                      g$t$8721$19h1md))))
               (g$syntax-dispatch$7952$19h1md
                 g$t$8721$19h1md
                 '(_ any each-any any)))))
           g$stx$8718$19h1md)))))
   (g$time-macro$7929$19h1md
     g$time-macro$11368$19h1md
     (case-lambda
       ((g$stx$8734$19h1md)
        ((case-lambda
           ((g$t$8735$19h1md)
            ((case-lambda
               ((g$ls/false$8736$19h1md)
                (if g$ls/false$8736$19h1md
                  (apply
                    (case-lambda
                      ((g$expr$8737$19h1md)
                       ((case-lambda
                          ((g$str$8738$19h1md)
                           (g$bless$7915$19h1md
                             (list
                               'time-it
                               g$str$8738$19h1md
                               (list 'lambda '() g$expr$8737$19h1md)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$6653$19h1md)))
                          (case-lambda
                            ((g$p$8741$19h1md g$e$8742$19h1md)
                             ((case-lambda
                                ((g$e$8743$19h1md g$p$8744$19h1md)
                                 (begin
                                   (write
                                     (g$syntax->datum$8064$19h1md
                                       g$expr$8737$19h1md)
                                     g$p$8744$19h1md)
                                   (g$e$8743$19h1md))))
                              g$e$8742$19h1md
                              g$p$8741$19h1md)))))))
                    g$ls/false$8736$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8735$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$8735$19h1md '(_ any)))))
         g$stx$8734$19h1md))))
   (g$delay-macro$7930$19h1md
     g$delay-macro$11369$19h1md
     (case-lambda
       ((g$stx$8745$19h1md)
        ((case-lambda
           ((g$t$8746$19h1md)
            ((case-lambda
               ((g$ls/false$8747$19h1md)
                (if g$ls/false$8747$19h1md
                  (apply
                    (case-lambda
                      ((g$expr$8748$19h1md)
                       (g$bless$7915$19h1md
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$8748$19h1md)))))
                    g$ls/false$8747$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8746$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$8746$19h1md '(_ any)))))
         g$stx$8745$19h1md))))
   (g$assert-macro$7931$19h1md
     g$assert-macro$11370$19h1md
     (case-lambda
       ((g$stx$8749$19h1md)
        ((case-lambda
           ((g$t$8750$19h1md)
            ((case-lambda
               ((g$ls/false$8751$19h1md)
                (if g$ls/false$8751$19h1md
                  (apply
                    (case-lambda
                      ((g$expr$8752$19h1md)
                       ((case-lambda
                          ((g$pos$8753$19h1md)
                           (g$bless$7915$19h1md
                             (list
                               'unless
                               g$expr$8752$19h1md
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$8752$19h1md)
                                 (list 'quote g$pos$8753$19h1md))))))
                        ((case-lambda
                           ((g$t$8754$19h1md)
                            (if g$t$8754$19h1md
                              g$t$8754$19h1md
                              (begin
                                '#f
                                (g$expression-position$8056$19h1md
                                  g$expr$8752$19h1md)))))
                         (g$expression-position$8056$19h1md
                           g$stx$8749$19h1md)))))
                    g$ls/false$8751$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8750$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$8750$19h1md '(_ any)))))
         g$stx$8749$19h1md))))
   (g$endianness-macro$7932$19h1md
     g$endianness-macro$11371$19h1md
     (case-lambda
       ((g$stx$8755$19h1md)
        ((case-lambda
           ((g$t$8756$19h1md)
            ((case-lambda
               ((g$ls/false$8757$19h1md)
                (if g$ls/false$8757$19h1md
                  (apply
                    (case-lambda
                      ((g$e$8758$19h1md)
                       ((case-lambda
                          ((g$t$8759$19h1md)
                           (if (memv g$t$8759$19h1md '(little))
                             (g$bless$7915$19h1md ''little)
                             (if (memv g$t$8759$19h1md '(big))
                               (g$bless$7915$19h1md ''big)
                               (g$syntax-violation$8061$19h1md
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$8755$19h1md)))))
                        (g$syntax->datum$8064$19h1md g$e$8758$19h1md))))
                    g$ls/false$8757$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8756$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$8756$19h1md '(_ any)))))
         g$stx$8755$19h1md))))
   (g$identifier-syntax-macro$7933$19h1md
     g$identifier-syntax-macro$11372$19h1md
     (case-lambda
       ((g$stx$8760$19h1md)
        ((case-lambda
           ((g$t$8761$19h1md)
            ((case-lambda
               ((g$ls/false$8762$19h1md)
                (if g$ls/false$8762$19h1md
                  (apply
                    (case-lambda
                      ((g$expr$8763$19h1md)
                       (g$bless$7915$19h1md
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$8763$19h1md))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$8763$19h1md)
                                   '(#'(e* ...))))))))))
                    g$ls/false$8762$19h1md)
                  ((case-lambda
                     ((g$t$8764$19h1md)
                      ((case-lambda
                         ((g$ls/false$8765$19h1md)
                          (if (if g$ls/false$8765$19h1md
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$8766$19h1md
                                         g$expr1$8767$19h1md
                                         g$id2$8768$19h1md
                                         g$expr2$8769$19h1md
                                         g$expr3$8770$19h1md)
                                       (if (g$id?$7674$19h1md g$id1$8766$19h1md)
                                         (if (g$id?$7674$19h1md
                                               g$id2$8768$19h1md)
                                           (begin
                                             '#f
                                             (g$id?$7674$19h1md
                                               g$expr2$8769$19h1md))
                                           '#f)
                                         '#f)))
                                    g$ls/false$8765$19h1md))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$8771$19h1md
                                   g$expr1$8772$19h1md
                                   g$id2$8773$19h1md
                                   g$expr2$8774$19h1md
                                   g$expr3$8775$19h1md)
                                 (g$bless$7915$19h1md
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list 'syntax g$expr1$8772$19h1md))
                                         (list
                                           (list 'set! 'id g$expr2$8774$19h1md)
                                           (list 'syntax g$expr3$8775$19h1md))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$8772$19h1md
                                               '(e* ...))))))))))
                              g$ls/false$8765$19h1md)
                            (g$syntax-violation$8061$19h1md
                              '#f
                              '"invalid syntax"
                              g$t$8764$19h1md))))
                       (g$syntax-dispatch$7952$19h1md
                         g$t$8764$19h1md
                         '(_ (any any) ((#(scheme-id set!) any any) any))))))
                   g$t$8761$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$8761$19h1md '(_ any)))))
         g$stx$8760$19h1md))))
   (g$do-macro$7934$19h1md
     g$do-macro$11373$19h1md
     (case-lambda
       ((g$stx$8776$19h1md)
        (letrec* ((g$bind$8777$19h1md
                    (case-lambda
                      ((g$x$8789$19h1md)
                       ((case-lambda
                          ((g$t$8790$19h1md)
                           ((case-lambda
                              ((g$ls/false$8791$19h1md)
                               (if g$ls/false$8791$19h1md
                                 (apply
                                   (case-lambda
                                     ((g$x$8792$19h1md g$init$8793$19h1md)
                                      (list
                                        g$x$8792$19h1md
                                        g$init$8793$19h1md
                                        g$x$8792$19h1md)))
                                   g$ls/false$8791$19h1md)
                                 ((case-lambda
                                    ((g$t$8794$19h1md)
                                     ((case-lambda
                                        ((g$ls/false$8795$19h1md)
                                         (if g$ls/false$8795$19h1md
                                           (apply
                                             (case-lambda
                                               ((g$x$8796$19h1md
                                                  g$init$8797$19h1md
                                                  g$step$8798$19h1md)
                                                (list
                                                  g$x$8796$19h1md
                                                  g$init$8797$19h1md
                                                  g$step$8798$19h1md)))
                                             g$ls/false$8795$19h1md)
                                           ((case-lambda
                                              ((g$t$8799$19h1md)
                                               ((case-lambda
                                                  ((g$ls/false$8800$19h1md)
                                                   (if g$ls/false$8800$19h1md
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$8061$19h1md
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$8776$19h1md)))
                                                       g$ls/false$8800$19h1md)
                                                     (g$syntax-violation$8061$19h1md
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8799$19h1md))))
                                                (g$syntax-dispatch$7952$19h1md
                                                  g$t$8799$19h1md
                                                  '_))))
                                            g$t$8794$19h1md))))
                                      (g$syntax-dispatch$7952$19h1md
                                        g$t$8794$19h1md
                                        '(any any any)))))
                                  g$t$8790$19h1md))))
                            (g$syntax-dispatch$7952$19h1md
                              g$t$8790$19h1md
                              '(any any)))))
                        g$x$8789$19h1md)))))
          ((case-lambda
             ((g$t$8778$19h1md)
              ((case-lambda
                 ((g$ls/false$8779$19h1md)
                  (if g$ls/false$8779$19h1md
                    (apply
                      (case-lambda
                        ((g$binding*$8780$19h1md
                           g$test$8781$19h1md
                           g$expr*$8782$19h1md
                           g$command*$8783$19h1md)
                         ((case-lambda
                            ((g$t$8784$19h1md)
                             ((case-lambda
                                ((g$ls/false$8785$19h1md)
                                 (if g$ls/false$8785$19h1md
                                   (apply
                                     (case-lambda
                                       ((g$x*$8786$19h1md
                                          g$init*$8787$19h1md
                                          g$step*$8788$19h1md)
                                        (if (g$valid-bound-ids?$7679$19h1md
                                              g$x*$8786$19h1md)
                                          (g$bless$7915$19h1md
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$8786$19h1md
                                                    (list
                                                      'if
                                                      g$test$8781$19h1md
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$8782$19h1md))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$8783$19h1md
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$8788$19h1md))))))))
                                              (cons 'loop g$init*$8787$19h1md)))
                                          (g$syntax-violation$8061$19h1md
                                            '#f
                                            '"invalid bindings"
                                            g$stx$8776$19h1md))))
                                     g$ls/false$8785$19h1md)
                                   (g$syntax-violation$8061$19h1md
                                     '#f
                                     '"invalid syntax"
                                     g$t$8784$19h1md))))
                              (g$syntax-dispatch$7952$19h1md
                                g$t$8784$19h1md
                                '#(each (any any any))))))
                          (map g$bind$8777$19h1md g$binding*$8780$19h1md))))
                      g$ls/false$8779$19h1md)
                    (g$syntax-violation$8061$19h1md
                      '#f
                      '"invalid syntax"
                      g$t$8778$19h1md))))
               (g$syntax-dispatch$7952$19h1md
                 g$t$8778$19h1md
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$8776$19h1md)))))
   (g$let*-macro$7935$19h1md
     g$let*-macro$11374$19h1md
     (case-lambda
       ((g$stx$8801$19h1md)
        ((case-lambda
           ((g$t$8802$19h1md)
            ((case-lambda
               ((g$ls/false$8803$19h1md)
                (if (if g$ls/false$8803$19h1md
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$8804$19h1md
                               g$rhs*$8805$19h1md
                               g$b$8806$19h1md
                               g$b*$8807$19h1md)
                             (g$for-all$5804$19h1md
                               g$id?$7674$19h1md
                               g$lhs*$8804$19h1md)))
                          g$ls/false$8803$19h1md))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$8808$19h1md
                         g$rhs*$8809$19h1md
                         g$b$8810$19h1md
                         g$b*$8811$19h1md)
                       (g$bless$7915$19h1md
                         ((letrec ((g$f$8812$19h1md
                                     (case-lambda
                                       ((g$x*$8813$19h1md)
                                        (if (null? g$x*$8813$19h1md)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$8810$19h1md
                                                g$b*$8811$19h1md)))
                                          (list
                                            'let
                                            (list (car g$x*$8813$19h1md))
                                            (g$f$8812$19h1md
                                              (cdr g$x*$8813$19h1md))))))))
                            g$f$8812$19h1md)
                          (map list g$lhs*$8808$19h1md g$rhs*$8809$19h1md)))))
                    g$ls/false$8803$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8802$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$8802$19h1md
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8801$19h1md))))
   (g$or-macro$7936$19h1md
     g$or-macro$11375$19h1md
     (case-lambda
       ((g$stx$8814$19h1md)
        ((case-lambda
           ((g$t$8815$19h1md)
            ((case-lambda
               ((g$ls/false$8816$19h1md)
                (if g$ls/false$8816$19h1md
                  (apply (case-lambda (() '#f)) g$ls/false$8816$19h1md)
                  ((case-lambda
                     ((g$t$8817$19h1md)
                      ((case-lambda
                         ((g$ls/false$8818$19h1md)
                          (if g$ls/false$8818$19h1md
                            (apply
                              (case-lambda
                                ((g$e$8819$19h1md g$e*$8820$19h1md)
                                 (g$bless$7915$19h1md
                                   ((letrec ((g$f$8821$19h1md
                                               (case-lambda
                                                 ((g$e$8822$19h1md
                                                    g$e*$8823$19h1md)
                                                  (if (null? g$e*$8823$19h1md)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8822$19h1md)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$8822$19h1md))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$8821$19h1md
                                                          (car g$e*$8823$19h1md)
                                                          (cdr g$e*$8823$19h1md)))))))))
                                      g$f$8821$19h1md)
                                    g$e$8819$19h1md
                                    g$e*$8820$19h1md))))
                              g$ls/false$8818$19h1md)
                            (g$syntax-violation$8061$19h1md
                              '#f
                              '"invalid syntax"
                              g$t$8817$19h1md))))
                       (g$syntax-dispatch$7952$19h1md
                         g$t$8817$19h1md
                         '(_ any . each-any)))))
                   g$t$8815$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$8815$19h1md '(_)))))
         g$stx$8814$19h1md))))
   (g$and-macro$7937$19h1md
     g$and-macro$11376$19h1md
     (case-lambda
       ((g$stx$8824$19h1md)
        ((case-lambda
           ((g$t$8825$19h1md)
            ((case-lambda
               ((g$ls/false$8826$19h1md)
                (if g$ls/false$8826$19h1md
                  (apply (case-lambda (() '#t)) g$ls/false$8826$19h1md)
                  ((case-lambda
                     ((g$t$8827$19h1md)
                      ((case-lambda
                         ((g$ls/false$8828$19h1md)
                          (if g$ls/false$8828$19h1md
                            (apply
                              (case-lambda
                                ((g$e$8829$19h1md g$e*$8830$19h1md)
                                 (g$bless$7915$19h1md
                                   ((letrec ((g$f$8831$19h1md
                                               (case-lambda
                                                 ((g$e$8832$19h1md
                                                    g$e*$8833$19h1md)
                                                  (if (null? g$e*$8833$19h1md)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8832$19h1md)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$8832$19h1md
                                                        (cons
                                                          (g$f$8831$19h1md
                                                            (car g$e*$8833$19h1md)
                                                            (cdr g$e*$8833$19h1md))
                                                          '(#f)))))))))
                                      g$f$8831$19h1md)
                                    g$e$8829$19h1md
                                    g$e*$8830$19h1md))))
                              g$ls/false$8828$19h1md)
                            (g$syntax-violation$8061$19h1md
                              '#f
                              '"invalid syntax"
                              g$t$8827$19h1md))))
                       (g$syntax-dispatch$7952$19h1md
                         g$t$8827$19h1md
                         '(_ any . each-any)))))
                   g$t$8825$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$8825$19h1md '(_)))))
         g$stx$8824$19h1md))))
   (g$cond-macro$7938$19h1md
     g$cond-macro$11377$19h1md
     (case-lambda
       ((g$stx$8834$19h1md)
        ((case-lambda
           ((g$t$8835$19h1md)
            ((case-lambda
               ((g$ls/false$8836$19h1md)
                (if g$ls/false$8836$19h1md
                  (apply
                    (case-lambda
                      ((g$cls$8837$19h1md g$cls*$8838$19h1md)
                       (g$bless$7915$19h1md
                         ((letrec ((g$f$8839$19h1md
                                     (case-lambda
                                       ((g$cls$8840$19h1md g$cls*$8841$19h1md)
                                        (if (null? g$cls*$8841$19h1md)
                                          ((case-lambda
                                             ((g$t$8842$19h1md)
                                              ((case-lambda
                                                 ((g$ls/false$8843$19h1md)
                                                  (if g$ls/false$8843$19h1md
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8844$19h1md
                                                           g$e*$8845$19h1md)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$8844$19h1md
                                                             g$e*$8845$19h1md))))
                                                      g$ls/false$8843$19h1md)
                                                    ((case-lambda
                                                       ((g$t$8846$19h1md)
                                                        ((case-lambda
                                                           ((g$ls/false$8847$19h1md)
                                                            (if g$ls/false$8847$19h1md
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8848$19h1md
                                                                     g$p$8849$19h1md)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8848$19h1md))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8849$19h1md
                                                                         '(t))))))
                                                                g$ls/false$8847$19h1md)
                                                              ((case-lambda
                                                                 ((g$t$8850$19h1md)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8851$19h1md)
                                                                      (if g$ls/false$8851$19h1md
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8852$19h1md)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$8852$19h1md
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$8851$19h1md)
                                                                        ((case-lambda
                                                                           ((g$t$8853$19h1md)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8854$19h1md)
                                                                                (if g$ls/false$8854$19h1md
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8855$19h1md
                                                                                         g$e*$8856$19h1md)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8855$19h1md
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8856$19h1md))))
                                                                                    g$ls/false$8854$19h1md)
                                                                                  ((case-lambda
                                                                                     ((g$t$8857$19h1md)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8858$19h1md)
                                                                                          (if g$ls/false$8858$19h1md
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8061$19h1md
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8834$19h1md)))
                                                                                              g$ls/false$8858$19h1md)
                                                                                            (g$syntax-violation$8061$19h1md
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8857$19h1md))))
                                                                                       (g$syntax-dispatch$7952$19h1md
                                                                                         g$t$8857$19h1md
                                                                                         '_))))
                                                                                   g$t$8853$19h1md))))
                                                                             (g$syntax-dispatch$7952$19h1md
                                                                               g$t$8853$19h1md
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8850$19h1md))))
                                                                   (g$syntax-dispatch$7952$19h1md
                                                                     g$t$8850$19h1md
                                                                     '(any)))))
                                                               g$t$8846$19h1md))))
                                                         (g$syntax-dispatch$7952$19h1md
                                                           g$t$8846$19h1md
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8842$19h1md))))
                                               (g$syntax-dispatch$7952$19h1md
                                                 g$t$8842$19h1md
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8840$19h1md)
                                          ((case-lambda
                                             ((g$t$8859$19h1md)
                                              ((case-lambda
                                                 ((g$ls/false$8860$19h1md)
                                                  (if g$ls/false$8860$19h1md
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8861$19h1md
                                                           g$e*$8862$19h1md)
                                                         (g$syntax-violation$8061$19h1md
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$8834$19h1md)))
                                                      g$ls/false$8860$19h1md)
                                                    ((case-lambda
                                                       ((g$t$8863$19h1md)
                                                        ((case-lambda
                                                           ((g$ls/false$8864$19h1md)
                                                            (if g$ls/false$8864$19h1md
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8865$19h1md
                                                                     g$p$8866$19h1md)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8865$19h1md))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8866$19h1md
                                                                         '(t))
                                                                       (g$f$8839$19h1md
                                                                         (car g$cls*$8841$19h1md)
                                                                         (cdr g$cls*$8841$19h1md))))))
                                                                g$ls/false$8864$19h1md)
                                                              ((case-lambda
                                                                 ((g$t$8867$19h1md)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8868$19h1md)
                                                                      (if g$ls/false$8868$19h1md
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8869$19h1md)
                                                                             (list
                                                                               'or
                                                                               g$e$8869$19h1md
                                                                               (g$f$8839$19h1md
                                                                                 (car g$cls*$8841$19h1md)
                                                                                 (cdr g$cls*$8841$19h1md)))))
                                                                          g$ls/false$8868$19h1md)
                                                                        ((case-lambda
                                                                           ((g$t$8870$19h1md)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8871$19h1md)
                                                                                (if g$ls/false$8871$19h1md
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8872$19h1md
                                                                                         g$e*$8873$19h1md)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8872$19h1md
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8873$19h1md)
                                                                                         (g$f$8839$19h1md
                                                                                           (car g$cls*$8841$19h1md)
                                                                                           (cdr g$cls*$8841$19h1md)))))
                                                                                    g$ls/false$8871$19h1md)
                                                                                  ((case-lambda
                                                                                     ((g$t$8874$19h1md)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8875$19h1md)
                                                                                          (if g$ls/false$8875$19h1md
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8061$19h1md
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8834$19h1md)))
                                                                                              g$ls/false$8875$19h1md)
                                                                                            (g$syntax-violation$8061$19h1md
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8874$19h1md))))
                                                                                       (g$syntax-dispatch$7952$19h1md
                                                                                         g$t$8874$19h1md
                                                                                         '_))))
                                                                                   g$t$8870$19h1md))))
                                                                             (g$syntax-dispatch$7952$19h1md
                                                                               g$t$8870$19h1md
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8867$19h1md))))
                                                                   (g$syntax-dispatch$7952$19h1md
                                                                     g$t$8867$19h1md
                                                                     '(any)))))
                                                               g$t$8863$19h1md))))
                                                         (g$syntax-dispatch$7952$19h1md
                                                           g$t$8863$19h1md
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8859$19h1md))))
                                               (g$syntax-dispatch$7952$19h1md
                                                 g$t$8859$19h1md
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8840$19h1md))))))
                            g$f$8839$19h1md)
                          g$cls$8837$19h1md
                          g$cls*$8838$19h1md))))
                    g$ls/false$8836$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8835$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$8835$19h1md
               '(_ any . each-any)))))
         g$stx$8834$19h1md))))
   (g$do-include$7939$19h1md
     g$do-include$11378$19h1md
     (case-lambda
       ((g$stx$8876$19h1md g$id$8877$19h1md g$filename$8878$19h1md)
        ((case-lambda
           ((g$filename$8879$19h1md)
            (begin
              (if (not (if (string? g$filename$8879$19h1md)
                         (begin '#f (g$id?$7674$19h1md g$id$8877$19h1md))
                         '#f))
                (g$syntax-violation$8061$19h1md
                  '#f
                  '"invalid syntax"
                  g$stx$8876$19h1md)
                (void))
              (cons
                (g$bless$7915$19h1md 'begin)
                (g$with-input-from-file$6687$19h1md
                  g$filename$8879$19h1md
                  (case-lambda
                    (()
                     ((letrec ((g$f$8880$19h1md
                                 (case-lambda
                                   ((g$ls$8881$19h1md)
                                    ((case-lambda
                                       ((g$x$8882$19h1md)
                                        (if (eof-object? g$x$8882$19h1md)
                                          (reverse g$ls$8881$19h1md)
                                          (g$f$8880$19h1md
                                            (cons
                                              (g$datum->stx$7657$19h1md
                                                g$id$8877$19h1md
                                                g$x$8882$19h1md)
                                              g$ls$8881$19h1md)))))
                                     (read-annotated))))))
                        g$f$8880$19h1md)
                      '()))))))))
         (g$stx->datum$7685$19h1md g$filename$8878$19h1md)))))
   (g$include-macro$7940$19h1md
     g$include-macro$11379$19h1md
     (case-lambda
       ((g$e$8883$19h1md)
        ((case-lambda
           ((g$t$8884$19h1md)
            ((case-lambda
               ((g$ls/false$8885$19h1md)
                (if g$ls/false$8885$19h1md
                  (apply
                    (case-lambda
                      ((g$id$8886$19h1md g$filename$8887$19h1md)
                       (g$do-include$7939$19h1md
                         g$e$8883$19h1md
                         g$id$8886$19h1md
                         g$filename$8887$19h1md)))
                    g$ls/false$8885$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8884$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$8884$19h1md '(any any)))))
         g$e$8883$19h1md))))
   (g$include-into-macro$7941$19h1md
     g$include-into-macro$11380$19h1md
     (case-lambda
       ((g$e$8888$19h1md)
        ((case-lambda
           ((g$t$8889$19h1md)
            ((case-lambda
               ((g$ls/false$8890$19h1md)
                (if g$ls/false$8890$19h1md
                  (apply
                    (case-lambda
                      ((g$id$8891$19h1md g$filename$8892$19h1md)
                       (g$do-include$7939$19h1md
                         g$e$8888$19h1md
                         g$id$8891$19h1md
                         g$filename$8892$19h1md)))
                    g$ls/false$8890$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8889$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$8889$19h1md '(_ any any)))))
         g$e$8888$19h1md))))
   (g$syntax-rules-macro$7942$19h1md
     g$syntax-rules-macro$11381$19h1md
     (case-lambda
       ((g$e$8893$19h1md)
        ((case-lambda
           ((g$t$8894$19h1md)
            ((case-lambda
               ((g$ls/false$8895$19h1md)
                (if g$ls/false$8895$19h1md
                  (apply
                    (case-lambda
                      ((g$lits$8896$19h1md
                         g$pat*$8897$19h1md
                         g$tmp*$8898$19h1md)
                       (begin
                         (g$verify-literals$7955$19h1md
                           g$lits$8896$19h1md
                           g$e$8893$19h1md)
                         (g$bless$7915$19h1md
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$8896$19h1md
                                   (map (case-lambda
                                          ((g$pat$8899$19h1md g$tmp$8900$19h1md)
                                           ((case-lambda
                                              ((g$t$8901$19h1md)
                                               ((case-lambda
                                                  ((g$ls/false$8902$19h1md)
                                                   (if g$ls/false$8902$19h1md
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$8903$19h1md)
                                                          (list
                                                            (cons
                                                              'g
                                                              g$rest$8903$19h1md)
                                                            (list
                                                              'syntax
                                                              g$tmp$8900$19h1md))))
                                                       g$ls/false$8902$19h1md)
                                                     ((case-lambda
                                                        ((g$t$8904$19h1md)
                                                         ((case-lambda
                                                            ((g$ls/false$8905$19h1md)
                                                             (if g$ls/false$8905$19h1md
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$8061$19h1md
                                                                      '#f
                                                                      '"invalid syntax-rules pattern"
                                                                      g$e$8893$19h1md
                                                                      g$pat$8899$19h1md)))
                                                                 g$ls/false$8905$19h1md)
                                                               (g$syntax-violation$8061$19h1md
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$8904$19h1md))))
                                                          (g$syntax-dispatch$7952$19h1md
                                                            g$t$8904$19h1md
                                                            '_))))
                                                      g$t$8901$19h1md))))
                                                (g$syntax-dispatch$7952$19h1md
                                                  g$t$8901$19h1md
                                                  '(_ . any)))))
                                            g$pat$8899$19h1md)))
                                        g$pat*$8897$19h1md
                                        g$tmp*$8898$19h1md)))))))))
                    g$ls/false$8895$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$8894$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$8894$19h1md
               '(_ each-any . #(each (any any)))))))
         g$e$8893$19h1md))))
   (g$quasiquote-macro$7943$19h1md
     g$quasiquote-macro$11382$19h1md
     ((case-lambda
        (()
         (letrec* ((g$datum$8906$19h1md
                     (case-lambda
                       ((g$x$9037$19h1md)
                        (list
                          (g$scheme-stx$7895$19h1md 'quote)
                          (g$mkstx$7662$19h1md g$x$9037$19h1md '() '() '())))))
                   (g$quasicons*$8922$19h1md
                     (case-lambda
                       ((g$x$9033$19h1md g$y$9034$19h1md)
                        ((letrec ((g$f$9035$19h1md
                                    (case-lambda
                                      ((g$x$9036$19h1md)
                                       (if (null? g$x$9036$19h1md)
                                         g$y$9034$19h1md
                                         (g$quasicons$8923$19h1md
                                           (car g$x$9036$19h1md)
                                           (g$f$9035$19h1md
                                             (cdr g$x$9036$19h1md))))))))
                           g$f$9035$19h1md)
                         g$x$9033$19h1md))))
                   (g$quasicons$8923$19h1md
                     (case-lambda
                       ((g$x$9014$19h1md g$y$9015$19h1md)
                        ((case-lambda
                           ((g$t$9016$19h1md)
                            ((case-lambda
                               ((g$ls/false$9017$19h1md)
                                (if g$ls/false$9017$19h1md
                                  (apply
                                    (case-lambda
                                      ((g$dy$9018$19h1md)
                                       ((case-lambda
                                          ((g$t$9019$19h1md)
                                           ((case-lambda
                                              ((g$ls/false$9020$19h1md)
                                               (if g$ls/false$9020$19h1md
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$9021$19h1md)
                                                      (list
                                                        (g$scheme-stx$7895$19h1md
                                                          'quote)
                                                        (cons
                                                          g$dx$9021$19h1md
                                                          g$dy$9018$19h1md))))
                                                   g$ls/false$9020$19h1md)
                                                 ((case-lambda
                                                    ((g$t$9022$19h1md)
                                                     ((case-lambda
                                                        ((g$ls/false$9023$19h1md)
                                                         (if g$ls/false$9023$19h1md
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$9024$19h1md)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9025$19h1md)
                                                                        (if g$ls/false$9025$19h1md
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$7895$19h1md
                                                                                   'list)
                                                                                 g$x$9014$19h1md)))
                                                                            g$ls/false$9025$19h1md)
                                                                          ((case-lambda
                                                                             ((g$t$9026$19h1md)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9027$19h1md)
                                                                                  (if g$ls/false$9027$19h1md
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$7895$19h1md
                                                                                             'cons)
                                                                                           g$x$9014$19h1md
                                                                                           g$y$9015$19h1md)))
                                                                                      g$ls/false$9027$19h1md)
                                                                                    (g$syntax-violation$8061$19h1md
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$9026$19h1md))))
                                                                               (g$syntax-dispatch$7952$19h1md
                                                                                 g$t$9026$19h1md
                                                                                 '_))))
                                                                           g$t$9024$19h1md))))
                                                                     (g$syntax-dispatch$7952$19h1md
                                                                       g$t$9024$19h1md
                                                                       '()))))
                                                                 g$dy$9018$19h1md)))
                                                             g$ls/false$9023$19h1md)
                                                           (g$syntax-violation$8061$19h1md
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$9022$19h1md))))
                                                      (g$syntax-dispatch$7952$19h1md
                                                        g$t$9022$19h1md
                                                        '_))))
                                                  g$t$9019$19h1md))))
                                            (g$syntax-dispatch$7952$19h1md
                                              g$t$9019$19h1md
                                              '(#(scheme-id quote) any)))))
                                        g$x$9014$19h1md)))
                                    g$ls/false$9017$19h1md)
                                  ((case-lambda
                                     ((g$t$9028$19h1md)
                                      ((case-lambda
                                         ((g$ls/false$9029$19h1md)
                                          (if g$ls/false$9029$19h1md
                                            (apply
                                              (case-lambda
                                                ((g$stuff$9030$19h1md)
                                                 (g$cons*$5806$19h1md
                                                   (g$scheme-stx$7895$19h1md
                                                     'list)
                                                   g$x$9014$19h1md
                                                   g$stuff$9030$19h1md)))
                                              g$ls/false$9029$19h1md)
                                            ((case-lambda
                                               ((g$t$9031$19h1md)
                                                ((case-lambda
                                                   ((g$ls/false$9032$19h1md)
                                                    (if g$ls/false$9032$19h1md
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$7895$19h1md
                                                               'cons)
                                                             g$x$9014$19h1md
                                                             g$y$9015$19h1md)))
                                                        g$ls/false$9032$19h1md)
                                                      (g$syntax-violation$8061$19h1md
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$9031$19h1md))))
                                                 (g$syntax-dispatch$7952$19h1md
                                                   g$t$9031$19h1md
                                                   '_))))
                                             g$t$9028$19h1md))))
                                       (g$syntax-dispatch$7952$19h1md
                                         g$t$9028$19h1md
                                         '(#(scheme-id list) . each-any)))))
                                   g$t$9016$19h1md))))
                             (g$syntax-dispatch$7952$19h1md
                               g$t$9016$19h1md
                               '(#(scheme-id quote) any)))))
                         g$y$9015$19h1md))))
                   (g$quasiappend$8924$19h1md
                     (case-lambda
                       ((g$x$9001$19h1md g$y$9002$19h1md)
                        ((case-lambda
                           ((g$ls$9003$19h1md)
                            (if (null? g$ls$9003$19h1md)
                              (list (g$scheme-stx$7895$19h1md 'quote) '())
                              (if (null? (cdr g$ls$9003$19h1md))
                                (car g$ls$9003$19h1md)
                                (g$cons*$5806$19h1md
                                  (g$scheme-stx$7895$19h1md 'append)
                                  g$ls$9003$19h1md)))))
                         ((letrec ((g$f$9004$19h1md
                                     (case-lambda
                                       ((g$x$9005$19h1md)
                                        (if (null? g$x$9005$19h1md)
                                          ((case-lambda
                                             ((g$t$9006$19h1md)
                                              ((case-lambda
                                                 ((g$ls/false$9007$19h1md)
                                                  (if g$ls/false$9007$19h1md
                                                    (apply
                                                      (case-lambda (() '()))
                                                      g$ls/false$9007$19h1md)
                                                    ((case-lambda
                                                       ((g$t$9008$19h1md)
                                                        ((case-lambda
                                                           ((g$ls/false$9009$19h1md)
                                                            (if g$ls/false$9009$19h1md
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$9002$19h1md)))
                                                                g$ls/false$9009$19h1md)
                                                              (g$syntax-violation$8061$19h1md
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9008$19h1md))))
                                                         (g$syntax-dispatch$7952$19h1md
                                                           g$t$9008$19h1md
                                                           '_))))
                                                     g$t$9006$19h1md))))
                                               (g$syntax-dispatch$7952$19h1md
                                                 g$t$9006$19h1md
                                                 '(#(scheme-id quote) ())))))
                                           g$y$9002$19h1md)
                                          ((case-lambda
                                             ((g$t$9010$19h1md)
                                              ((case-lambda
                                                 ((g$ls/false$9011$19h1md)
                                                  (if g$ls/false$9011$19h1md
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$9004$19h1md
                                                           (cdr g$x$9005$19h1md))))
                                                      g$ls/false$9011$19h1md)
                                                    ((case-lambda
                                                       ((g$t$9012$19h1md)
                                                        ((case-lambda
                                                           ((g$ls/false$9013$19h1md)
                                                            (if g$ls/false$9013$19h1md
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$9005$19h1md)
                                                                     (g$f$9004$19h1md
                                                                       (cdr g$x$9005$19h1md)))))
                                                                g$ls/false$9013$19h1md)
                                                              (g$syntax-violation$8061$19h1md
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9012$19h1md))))
                                                         (g$syntax-dispatch$7952$19h1md
                                                           g$t$9012$19h1md
                                                           '_))))
                                                     g$t$9010$19h1md))))
                                               (g$syntax-dispatch$7952$19h1md
                                                 g$t$9010$19h1md
                                                 '(#(scheme-id quote) ())))))
                                           (car g$x$9005$19h1md)))))))
                            g$f$9004$19h1md)
                          g$x$9001$19h1md)))))
                   (g$quasivector$8925$19h1md
                     (case-lambda
                       ((g$x$8976$19h1md)
                        ((case-lambda
                           ((g$pat-x$8977$19h1md)
                            ((case-lambda
                               ((g$t$8978$19h1md)
                                ((case-lambda
                                   ((g$ls/false$8979$19h1md)
                                    (if g$ls/false$8979$19h1md
                                      (apply
                                        (case-lambda
                                          ((g$x*$8980$19h1md)
                                           (list
                                             (g$scheme-stx$7895$19h1md 'quote)
                                             (list->vector g$x*$8980$19h1md))))
                                        g$ls/false$8979$19h1md)
                                      ((case-lambda
                                         ((g$t$8981$19h1md)
                                          ((case-lambda
                                             ((g$ls/false$8982$19h1md)
                                              (if g$ls/false$8982$19h1md
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$8983$19h1md
                                                                 (case-lambda
                                                                   ((g$x$8984$19h1md
                                                                      g$k$8985$19h1md)
                                                                    ((case-lambda
                                                                       ((g$t$8986$19h1md)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8987$19h1md)
                                                                            (if g$ls/false$8987$19h1md
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$8988$19h1md)
                                                                                   (g$k$8985$19h1md
                                                                                     (map (case-lambda
                                                                                            ((g$x$8989$19h1md)
                                                                                             (list
                                                                                               (g$scheme-stx$7895$19h1md
                                                                                                 'quote)
                                                                                               g$x$8989$19h1md)))
                                                                                          g$x*$8988$19h1md))))
                                                                                g$ls/false$8987$19h1md)
                                                                              ((case-lambda
                                                                                 ((g$t$8990$19h1md)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$8991$19h1md)
                                                                                      (if g$ls/false$8991$19h1md
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$8992$19h1md)
                                                                                             (g$k$8985$19h1md
                                                                                               g$x*$8992$19h1md)))
                                                                                          g$ls/false$8991$19h1md)
                                                                                        ((case-lambda
                                                                                           ((g$t$8993$19h1md)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$8994$19h1md)
                                                                                                (if g$ls/false$8994$19h1md
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$8995$19h1md
                                                                                                         g$y$8996$19h1md)
                                                                                                       (g$f$8983$19h1md
                                                                                                         g$y$8996$19h1md
                                                                                                         (case-lambda
                                                                                                           ((g$ls$8997$19h1md)
                                                                                                            (g$k$8985$19h1md
                                                                                                              (cons
                                                                                                                g$x$8995$19h1md
                                                                                                                g$ls$8997$19h1md)))))))
                                                                                                    g$ls/false$8994$19h1md)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$8998$19h1md)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$8999$19h1md)
                                                                                                          (if g$ls/false$8999$19h1md
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$7895$19h1md
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$8977$19h1md)))
                                                                                                              g$ls/false$8999$19h1md)
                                                                                                            (g$syntax-violation$8061$19h1md
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$8998$19h1md))))
                                                                                                       (g$syntax-dispatch$7952$19h1md
                                                                                                         g$t$8998$19h1md
                                                                                                         '_))))
                                                                                                   g$t$8993$19h1md))))
                                                                                             (g$syntax-dispatch$7952$19h1md
                                                                                               g$t$8993$19h1md
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$8990$19h1md))))
                                                                                   (g$syntax-dispatch$7952$19h1md
                                                                                     g$t$8990$19h1md
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$8986$19h1md))))
                                                                         (g$syntax-dispatch$7952$19h1md
                                                                           g$t$8986$19h1md
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$8984$19h1md)))))
                                                        g$f$8983$19h1md)
                                                      g$x$8976$19h1md
                                                      (case-lambda
                                                        ((g$ls$9000$19h1md)
                                                         (g$cons*$5806$19h1md
                                                           (g$scheme-stx$7895$19h1md
                                                             'vector)
                                                           g$ls$9000$19h1md))))))
                                                  g$ls/false$8982$19h1md)
                                                (g$syntax-violation$8061$19h1md
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$8981$19h1md))))
                                           (g$syntax-dispatch$7952$19h1md
                                             g$t$8981$19h1md
                                             '_))))
                                       g$t$8978$19h1md))))
                                 (g$syntax-dispatch$7952$19h1md
                                   g$t$8978$19h1md
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$8977$19h1md)))
                         g$x$8976$19h1md))))
                   (g$vquasi$8926$19h1md
                     (case-lambda
                       ((g$p$8959$19h1md g$lev$8960$19h1md)
                        ((case-lambda
                           ((g$t$8961$19h1md)
                            ((case-lambda
                               ((g$ls/false$8962$19h1md)
                                (if g$ls/false$8962$19h1md
                                  (apply
                                    (case-lambda
                                      ((g$p$8963$19h1md g$q$8964$19h1md)
                                       ((case-lambda
                                          ((g$t$8965$19h1md)
                                           ((case-lambda
                                              ((g$ls/false$8966$19h1md)
                                               (if g$ls/false$8966$19h1md
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$8967$19h1md)
                                                      (if (= g$lev$8960$19h1md
                                                             '0)
                                                        (g$quasicons*$8922$19h1md
                                                          g$p$8967$19h1md
                                                          (g$vquasi$8926$19h1md
                                                            g$q$8964$19h1md
                                                            g$lev$8960$19h1md))
                                                        (g$quasicons$8923$19h1md
                                                          (g$quasicons$8923$19h1md
                                                            (g$datum$8906$19h1md
                                                              'unquote)
                                                            (g$quasi$8927$19h1md
                                                              g$p$8967$19h1md
                                                              (- g$lev$8960$19h1md
                                                                 '1)))
                                                          (g$vquasi$8926$19h1md
                                                            g$q$8964$19h1md
                                                            g$lev$8960$19h1md)))))
                                                   g$ls/false$8966$19h1md)
                                                 ((case-lambda
                                                    ((g$t$8968$19h1md)
                                                     ((case-lambda
                                                        ((g$ls/false$8969$19h1md)
                                                         (if g$ls/false$8969$19h1md
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$8970$19h1md)
                                                                (if (= g$lev$8960$19h1md
                                                                       '0)
                                                                  (g$quasiappend$8924$19h1md
                                                                    g$p$8970$19h1md
                                                                    (g$vquasi$8926$19h1md
                                                                      g$q$8964$19h1md
                                                                      g$lev$8960$19h1md))
                                                                  (g$quasicons$8923$19h1md
                                                                    (g$quasicons$8923$19h1md
                                                                      (g$datum$8906$19h1md
                                                                        'unquote-splicing)
                                                                      (g$quasi$8927$19h1md
                                                                        g$p$8970$19h1md
                                                                        (- g$lev$8960$19h1md
                                                                           '1)))
                                                                    (g$vquasi$8926$19h1md
                                                                      g$q$8964$19h1md
                                                                      g$lev$8960$19h1md)))))
                                                             g$ls/false$8969$19h1md)
                                                           ((case-lambda
                                                              ((g$t$8971$19h1md)
                                                               ((case-lambda
                                                                  ((g$ls/false$8972$19h1md)
                                                                   (if g$ls/false$8972$19h1md
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$8973$19h1md)
                                                                          (g$quasicons$8923$19h1md
                                                                            (g$quasi$8927$19h1md
                                                                              g$p$8973$19h1md
                                                                              g$lev$8960$19h1md)
                                                                            (g$vquasi$8926$19h1md
                                                                              g$q$8964$19h1md
                                                                              g$lev$8960$19h1md))))
                                                                       g$ls/false$8972$19h1md)
                                                                     (g$syntax-violation$8061$19h1md
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$8971$19h1md))))
                                                                (g$syntax-dispatch$7952$19h1md
                                                                  g$t$8971$19h1md
                                                                  'any))))
                                                            g$t$8968$19h1md))))
                                                      (g$syntax-dispatch$7952$19h1md
                                                        g$t$8968$19h1md
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$8965$19h1md))))
                                            (g$syntax-dispatch$7952$19h1md
                                              g$t$8965$19h1md
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$8963$19h1md)))
                                    g$ls/false$8962$19h1md)
                                  ((case-lambda
                                     ((g$t$8974$19h1md)
                                      ((case-lambda
                                         ((g$ls/false$8975$19h1md)
                                          (if g$ls/false$8975$19h1md
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$7895$19h1md
                                                     'quote)
                                                   '())))
                                              g$ls/false$8975$19h1md)
                                            (g$syntax-violation$8061$19h1md
                                              '#f
                                              '"invalid syntax"
                                              g$t$8974$19h1md))))
                                       (g$syntax-dispatch$7952$19h1md
                                         g$t$8974$19h1md
                                         '()))))
                                   g$t$8961$19h1md))))
                             (g$syntax-dispatch$7952$19h1md
                               g$t$8961$19h1md
                               '(any . any)))))
                         g$p$8959$19h1md))))
                   (g$quasi$8927$19h1md
                     (case-lambda
                       ((g$p$8932$19h1md g$lev$8933$19h1md)
                        ((case-lambda
                           ((g$t$8934$19h1md)
                            ((case-lambda
                               ((g$ls/false$8935$19h1md)
                                (if g$ls/false$8935$19h1md
                                  (apply
                                    (case-lambda
                                      ((g$p$8936$19h1md)
                                       (if (= g$lev$8933$19h1md '0)
                                         g$p$8936$19h1md
                                         (g$quasicons$8923$19h1md
                                           (g$datum$8906$19h1md 'unquote)
                                           (g$quasi$8927$19h1md
                                             (list g$p$8936$19h1md)
                                             (- g$lev$8933$19h1md '1))))))
                                    g$ls/false$8935$19h1md)
                                  ((case-lambda
                                     ((g$t$8937$19h1md)
                                      ((case-lambda
                                         ((g$ls/false$8938$19h1md)
                                          (if g$ls/false$8938$19h1md
                                            (apply
                                              (case-lambda
                                                ((g$p$8939$19h1md
                                                   g$q$8940$19h1md)
                                                 (if (= g$lev$8933$19h1md '0)
                                                   (g$quasicons*$8922$19h1md
                                                     g$p$8939$19h1md
                                                     (g$quasi$8927$19h1md
                                                       g$q$8940$19h1md
                                                       g$lev$8933$19h1md))
                                                   (g$quasicons$8923$19h1md
                                                     (g$quasicons$8923$19h1md
                                                       (g$datum$8906$19h1md
                                                         'unquote)
                                                       (g$quasi$8927$19h1md
                                                         g$p$8939$19h1md
                                                         (- g$lev$8933$19h1md
                                                            '1)))
                                                     (g$quasi$8927$19h1md
                                                       g$q$8940$19h1md
                                                       g$lev$8933$19h1md)))))
                                              g$ls/false$8938$19h1md)
                                            ((case-lambda
                                               ((g$t$8941$19h1md)
                                                ((case-lambda
                                                   ((g$ls/false$8942$19h1md)
                                                    (if g$ls/false$8942$19h1md
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$8943$19h1md
                                                             g$q$8944$19h1md)
                                                           (if (= g$lev$8933$19h1md
                                                                  '0)
                                                             (g$quasiappend$8924$19h1md
                                                               g$p$8943$19h1md
                                                               (g$quasi$8927$19h1md
                                                                 g$q$8944$19h1md
                                                                 g$lev$8933$19h1md))
                                                             (g$quasicons$8923$19h1md
                                                               (g$quasicons$8923$19h1md
                                                                 (g$datum$8906$19h1md
                                                                   'unquote-splicing)
                                                                 (g$quasi$8927$19h1md
                                                                   g$p$8943$19h1md
                                                                   (- g$lev$8933$19h1md
                                                                      '1)))
                                                               (g$quasi$8927$19h1md
                                                                 g$q$8944$19h1md
                                                                 g$lev$8933$19h1md)))))
                                                        g$ls/false$8942$19h1md)
                                                      ((case-lambda
                                                         ((g$t$8945$19h1md)
                                                          ((case-lambda
                                                             ((g$ls/false$8946$19h1md)
                                                              (if g$ls/false$8946$19h1md
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$8947$19h1md)
                                                                     (g$quasicons$8923$19h1md
                                                                       (g$datum$8906$19h1md
                                                                         'quasiquote)
                                                                       (g$quasi$8927$19h1md
                                                                         (list
                                                                           g$p$8947$19h1md)
                                                                         (+ g$lev$8933$19h1md
                                                                            '1)))))
                                                                  g$ls/false$8946$19h1md)
                                                                ((case-lambda
                                                                   ((g$t$8948$19h1md)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8949$19h1md)
                                                                        (if g$ls/false$8949$19h1md
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$8950$19h1md
                                                                                 g$q$8951$19h1md)
                                                                               (g$quasicons$8923$19h1md
                                                                                 (g$quasi$8927$19h1md
                                                                                   g$p$8950$19h1md
                                                                                   g$lev$8933$19h1md)
                                                                                 (g$quasi$8927$19h1md
                                                                                   g$q$8951$19h1md
                                                                                   g$lev$8933$19h1md))))
                                                                            g$ls/false$8949$19h1md)
                                                                          ((case-lambda
                                                                             ((g$t$8952$19h1md)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8953$19h1md)
                                                                                  (if (if g$ls/false$8953$19h1md
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$8954$19h1md)
                                                                                               (not (g$stx?$7646$19h1md
                                                                                                      g$x$8954$19h1md))))
                                                                                            g$ls/false$8953$19h1md))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$8955$19h1md)
                                                                                         (g$quasivector$8925$19h1md
                                                                                           (g$vquasi$8926$19h1md
                                                                                             g$x$8955$19h1md
                                                                                             g$lev$8933$19h1md))))
                                                                                      g$ls/false$8953$19h1md)
                                                                                    ((case-lambda
                                                                                       ((g$t$8956$19h1md)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8957$19h1md)
                                                                                            (if g$ls/false$8957$19h1md
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$8958$19h1md)
                                                                                                   (list
                                                                                                     (g$scheme-stx$7895$19h1md
                                                                                                       'quote)
                                                                                                     g$p$8958$19h1md)))
                                                                                                g$ls/false$8957$19h1md)
                                                                                              (g$syntax-violation$8061$19h1md
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$8956$19h1md))))
                                                                                         (g$syntax-dispatch$7952$19h1md
                                                                                           g$t$8956$19h1md
                                                                                           'any))))
                                                                                     g$t$8952$19h1md))))
                                                                               (g$syntax-dispatch$7952$19h1md
                                                                                 g$t$8952$19h1md
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$8948$19h1md))))
                                                                     (g$syntax-dispatch$7952$19h1md
                                                                       g$t$8948$19h1md
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$8945$19h1md))))
                                                           (g$syntax-dispatch$7952$19h1md
                                                             g$t$8945$19h1md
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$8941$19h1md))))
                                                 (g$syntax-dispatch$7952$19h1md
                                                   g$t$8941$19h1md
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8937$19h1md))))
                                       (g$syntax-dispatch$7952$19h1md
                                         g$t$8937$19h1md
                                         '((#(scheme-id unquote) . each-any)
                                           .
                                           any)))))
                                   g$t$8934$19h1md))))
                             (g$syntax-dispatch$7952$19h1md
                               g$t$8934$19h1md
                               '(#(scheme-id unquote) any)))))
                         g$p$8932$19h1md)))))
           (case-lambda
             ((g$x$8928$19h1md)
              ((case-lambda
                 ((g$t$8929$19h1md)
                  ((case-lambda
                     ((g$ls/false$8930$19h1md)
                      (if g$ls/false$8930$19h1md
                        (apply
                          (case-lambda
                            ((g$e$8931$19h1md)
                             (g$quasi$8927$19h1md g$e$8931$19h1md '0)))
                          g$ls/false$8930$19h1md)
                        (g$syntax-violation$8061$19h1md
                          '#f
                          '"invalid syntax"
                          g$t$8929$19h1md))))
                   (g$syntax-dispatch$7952$19h1md g$t$8929$19h1md '(_ any)))))
               g$x$8928$19h1md))))))))
   (g$quasisyntax-macro$7944$19h1md
     g$quasisyntax-macro$11383$19h1md
     ((case-lambda
        (()
         (letrec* ((g$quasi$9038$19h1md
                     (case-lambda
                       ((g$p$9052$19h1md g$lev$9053$19h1md)
                        ((case-lambda
                           ((g$t$9054$19h1md)
                            ((case-lambda
                               ((g$ls/false$9055$19h1md)
                                (if g$ls/false$9055$19h1md
                                  (apply
                                    (case-lambda
                                      ((g$p$9056$19h1md)
                                       (if (= g$lev$9053$19h1md '0)
                                         ((case-lambda
                                            ((g$g$9057$19h1md)
                                             (values
                                               (list g$g$9057$19h1md)
                                               (list g$p$9056$19h1md)
                                               g$g$9057$19h1md)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$9038$19h1md
                                                g$p$9056$19h1md
                                                (- g$lev$9053$19h1md '1))))
                                           (case-lambda
                                             ((g$lhs*$9061$19h1md
                                                g$rhs*$9062$19h1md
                                                g$p$9063$19h1md)
                                              ((case-lambda
                                                 ((g$p$9064$19h1md
                                                    g$rhs*$9065$19h1md
                                                    g$lhs*$9066$19h1md)
                                                  (values
                                                    g$lhs*$9066$19h1md
                                                    g$rhs*$9065$19h1md
                                                    (list
                                                      'unsyntax
                                                      g$p$9064$19h1md))))
                                               g$p$9063$19h1md
                                               g$rhs*$9062$19h1md
                                               g$lhs*$9061$19h1md)))))))
                                    g$ls/false$9055$19h1md)
                                  ((case-lambda
                                     ((g$t$9067$19h1md)
                                      ((case-lambda
                                         ((g$ls/false$9068$19h1md)
                                          (if (if g$ls/false$9068$19h1md
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$9053$19h1md
                                                          '0)))
                                                    g$ls/false$9068$19h1md))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$8061$19h1md
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$9052$19h1md)))
                                              g$ls/false$9068$19h1md)
                                            ((case-lambda
                                               ((g$t$9069$19h1md)
                                                ((case-lambda
                                                   ((g$ls/false$9070$19h1md)
                                                    (if g$ls/false$9070$19h1md
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$9071$19h1md
                                                             g$q$9072$19h1md)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$9038$19h1md
                                                                  g$q$9072$19h1md
                                                                  g$lev$9053$19h1md)))
                                                             (case-lambda
                                                               ((g$lhs*$9076$19h1md
                                                                  g$rhs*$9077$19h1md
                                                                  g$q$9078$19h1md)
                                                                ((case-lambda
                                                                   ((g$q$9079$19h1md
                                                                      g$rhs*$9080$19h1md
                                                                      g$lhs*$9081$19h1md)
                                                                    (if (= g$lev$9053$19h1md
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$9082$19h1md)
                                                                          (values
                                                                            (append
                                                                              g$g*$9082$19h1md
                                                                              g$lhs*$9081$19h1md)
                                                                            (append
                                                                              g$p*$9071$19h1md
                                                                              g$rhs*$9080$19h1md)
                                                                            (append
                                                                              g$g*$9082$19h1md
                                                                              g$q$9079$19h1md))))
                                                                       (map (case-lambda
                                                                              ((g$x$9083$19h1md)
                                                                               (gensym)))
                                                                            g$p*$9071$19h1md))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$9038$19h1md
                                                                             g$p*$9071$19h1md
                                                                             (- g$lev$9053$19h1md
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$9087$19h1md
                                                                             g$rhs2*$9088$19h1md
                                                                             g$p*$9089$19h1md)
                                                                           ((case-lambda
                                                                              ((g$p*$9090$19h1md
                                                                                 g$rhs2*$9091$19h1md
                                                                                 g$lhs2*$9092$19h1md)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$9092$19h1md
                                                                                   g$lhs*$9081$19h1md)
                                                                                 (append
                                                                                   g$rhs2*$9091$19h1md
                                                                                   g$rhs*$9080$19h1md)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$9090$19h1md)
                                                                                   g$q$9079$19h1md))))
                                                                            g$p*$9089$19h1md
                                                                            g$rhs2*$9088$19h1md
                                                                            g$lhs2*$9087$19h1md)))))))
                                                                 g$q$9078$19h1md
                                                                 g$rhs*$9077$19h1md
                                                                 g$lhs*$9076$19h1md))))))
                                                        g$ls/false$9070$19h1md)
                                                      ((case-lambda
                                                         ((g$t$9093$19h1md)
                                                          ((case-lambda
                                                             ((g$ls/false$9094$19h1md)
                                                              (if g$ls/false$9094$19h1md
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$9095$19h1md
                                                                       g$q$9096$19h1md)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$9038$19h1md
                                                                            g$q$9096$19h1md
                                                                            g$lev$9053$19h1md)))
                                                                       (case-lambda
                                                                         ((g$lhs*$9100$19h1md
                                                                            g$rhs*$9101$19h1md
                                                                            g$q$9102$19h1md)
                                                                          ((case-lambda
                                                                             ((g$q$9103$19h1md
                                                                                g$rhs*$9104$19h1md
                                                                                g$lhs*$9105$19h1md)
                                                                              (if (= g$lev$9053$19h1md
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$9106$19h1md)
                                                                                    (values
                                                                                      (append
                                                                                        (map (case-lambda
                                                                                               ((g$g$9107$19h1md)
                                                                                                (cons
                                                                                                  g$g$9107$19h1md
                                                                                                  '(...))))
                                                                                             g$g*$9106$19h1md)
                                                                                        g$lhs*$9105$19h1md)
                                                                                      (append
                                                                                        g$p*$9095$19h1md
                                                                                        g$rhs*$9104$19h1md)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (map (case-lambda
                                                                                                 ((g$g$9108$19h1md)
                                                                                                  (cons
                                                                                                    g$g$9108$19h1md
                                                                                                    '(...))))
                                                                                               g$g*$9106$19h1md))
                                                                                        g$q$9103$19h1md))))
                                                                                 (map (case-lambda
                                                                                        ((g$x$9109$19h1md)
                                                                                         (gensym)))
                                                                                      g$p*$9095$19h1md))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$9038$19h1md
                                                                                       g$p*$9095$19h1md
                                                                                       (- g$lev$9053$19h1md
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$9113$19h1md
                                                                                       g$rhs2*$9114$19h1md
                                                                                       g$p*$9115$19h1md)
                                                                                     ((case-lambda
                                                                                        ((g$p*$9116$19h1md
                                                                                           g$rhs2*$9117$19h1md
                                                                                           g$lhs2*$9118$19h1md)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$9118$19h1md
                                                                                             g$lhs*$9105$19h1md)
                                                                                           (append
                                                                                             g$rhs2*$9117$19h1md
                                                                                             g$rhs*$9104$19h1md)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$9116$19h1md)
                                                                                             g$q$9103$19h1md))))
                                                                                      g$p*$9115$19h1md
                                                                                      g$rhs2*$9114$19h1md
                                                                                      g$lhs2*$9113$19h1md)))))))
                                                                           g$q$9102$19h1md
                                                                           g$rhs*$9101$19h1md
                                                                           g$lhs*$9100$19h1md))))))
                                                                  g$ls/false$9094$19h1md)
                                                                ((case-lambda
                                                                   ((g$t$9119$19h1md)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9120$19h1md)
                                                                        (if (if g$ls/false$9120$19h1md
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$9053$19h1md
                                                                                        '0)))
                                                                                  g$ls/false$9120$19h1md))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$8061$19h1md
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$9052$19h1md)))
                                                                            g$ls/false$9120$19h1md)
                                                                          ((case-lambda
                                                                             ((g$t$9121$19h1md)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9122$19h1md)
                                                                                  (if g$ls/false$9122$19h1md
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$9123$19h1md)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$9038$19h1md
                                                                                                g$p$9123$19h1md
                                                                                                (+ g$lev$9053$19h1md
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$9127$19h1md
                                                                                                g$rhs*$9128$19h1md
                                                                                                g$p$9129$19h1md)
                                                                                              ((case-lambda
                                                                                                 ((g$p$9130$19h1md
                                                                                                    g$rhs*$9131$19h1md
                                                                                                    g$lhs*$9132$19h1md)
                                                                                                  (values
                                                                                                    g$lhs*$9132$19h1md
                                                                                                    g$rhs*$9131$19h1md
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$9130$19h1md))))
                                                                                               g$p$9129$19h1md
                                                                                               g$rhs*$9128$19h1md
                                                                                               g$lhs*$9127$19h1md))))))
                                                                                      g$ls/false$9122$19h1md)
                                                                                    ((case-lambda
                                                                                       ((g$t$9133$19h1md)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9134$19h1md)
                                                                                            (if g$ls/false$9134$19h1md
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$9135$19h1md
                                                                                                     g$q$9136$19h1md)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$9038$19h1md
                                                                                                          g$p$9135$19h1md
                                                                                                          g$lev$9053$19h1md)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$9143$19h1md
                                                                                                          g$rhs*$9144$19h1md
                                                                                                          g$p$9145$19h1md)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$9038$19h1md
                                                                                                               g$q$9136$19h1md
                                                                                                               g$lev$9053$19h1md)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$9146$19h1md
                                                                                                               g$rhs2*$9147$19h1md
                                                                                                               g$q$9148$19h1md)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$9149$19h1md
                                                                                                                   g$rhs2*$9150$19h1md
                                                                                                                   g$lhs2*$9151$19h1md
                                                                                                                   g$p$9152$19h1md
                                                                                                                   g$rhs*$9153$19h1md
                                                                                                                   g$lhs*$9154$19h1md)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$9151$19h1md
                                                                                                                     g$lhs*$9154$19h1md)
                                                                                                                   (append
                                                                                                                     g$rhs2*$9150$19h1md
                                                                                                                     g$rhs*$9153$19h1md)
                                                                                                                   (cons
                                                                                                                     g$p$9152$19h1md
                                                                                                                     g$q$9149$19h1md))))
                                                                                                              g$q$9148$19h1md
                                                                                                              g$rhs2*$9147$19h1md
                                                                                                              g$lhs2*$9146$19h1md
                                                                                                              g$p$9145$19h1md
                                                                                                              g$rhs*$9144$19h1md
                                                                                                              g$lhs*$9143$19h1md)))))))))
                                                                                                g$ls/false$9134$19h1md)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9155$19h1md)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9156$19h1md)
                                                                                                      (if g$ls/false$9156$19h1md
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$9157$19h1md)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$9038$19h1md
                                                                                                                    g$x*$9157$19h1md
                                                                                                                    g$lev$9053$19h1md)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$9161$19h1md
                                                                                                                    g$rhs*$9162$19h1md
                                                                                                                    g$x*$9163$19h1md)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$9164$19h1md
                                                                                                                        g$rhs*$9165$19h1md
                                                                                                                        g$lhs*$9166$19h1md)
                                                                                                                      (values
                                                                                                                        g$lhs*$9166$19h1md
                                                                                                                        g$rhs*$9165$19h1md
                                                                                                                        (list->vector
                                                                                                                          g$x*$9164$19h1md))))
                                                                                                                   g$x*$9163$19h1md
                                                                                                                   g$rhs*$9162$19h1md
                                                                                                                   g$lhs*$9161$19h1md))))))
                                                                                                          g$ls/false$9156$19h1md)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9167$19h1md)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9168$19h1md)
                                                                                                                (if g$ls/false$9168$19h1md
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$9052$19h1md)))
                                                                                                                    g$ls/false$9168$19h1md)
                                                                                                                  (g$syntax-violation$8061$19h1md
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9167$19h1md))))
                                                                                                             (g$syntax-dispatch$7952$19h1md
                                                                                                               g$t$9167$19h1md
                                                                                                               '_))))
                                                                                                         g$t$9155$19h1md))))
                                                                                                   (g$syntax-dispatch$7952$19h1md
                                                                                                     g$t$9155$19h1md
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$9133$19h1md))))
                                                                                         (g$syntax-dispatch$7952$19h1md
                                                                                           g$t$9133$19h1md
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$9121$19h1md))))
                                                                               (g$syntax-dispatch$7952$19h1md
                                                                                 g$t$9121$19h1md
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$9119$19h1md))))
                                                                     (g$syntax-dispatch$7952$19h1md
                                                                       g$t$9119$19h1md
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$9093$19h1md))))
                                                           (g$syntax-dispatch$7952$19h1md
                                                             g$t$9093$19h1md
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$9069$19h1md))))
                                                 (g$syntax-dispatch$7952$19h1md
                                                   g$t$9069$19h1md
                                                   '((#(scheme-id unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$9067$19h1md))))
                                       (g$syntax-dispatch$7952$19h1md
                                         g$t$9067$19h1md
                                         '#(scheme-id unsyntax)))))
                                   g$t$9054$19h1md))))
                             (g$syntax-dispatch$7952$19h1md
                               g$t$9054$19h1md
                               '(#(scheme-id unsyntax) any)))))
                         g$p$9052$19h1md)))))
           (case-lambda
             ((g$x$9039$19h1md)
              ((case-lambda
                 ((g$t$9040$19h1md)
                  ((case-lambda
                     ((g$ls/false$9041$19h1md)
                      (if g$ls/false$9041$19h1md
                        (apply
                          (case-lambda
                            ((g$e$9042$19h1md)
                             (call-with-values
                               (case-lambda
                                 (() (g$quasi$9038$19h1md g$e$9042$19h1md '0)))
                               (case-lambda
                                 ((g$lhs*$9046$19h1md
                                    g$rhs*$9047$19h1md
                                    g$v$9048$19h1md)
                                  ((case-lambda
                                     ((g$v$9049$19h1md
                                        g$rhs*$9050$19h1md
                                        g$lhs*$9051$19h1md)
                                      (g$bless$7915$19h1md
                                        (list
                                          'syntax-case
                                          (cons 'list g$rhs*$9050$19h1md)
                                          '()
                                          (list
                                            g$lhs*$9051$19h1md
                                            (list 'syntax g$v$9049$19h1md))))))
                                   g$v$9048$19h1md
                                   g$rhs*$9047$19h1md
                                   g$lhs*$9046$19h1md))))))
                          g$ls/false$9041$19h1md)
                        (g$syntax-violation$8061$19h1md
                          '#f
                          '"invalid syntax"
                          g$t$9040$19h1md))))
                   (g$syntax-dispatch$7952$19h1md g$t$9040$19h1md '(_ any)))))
               g$x$9039$19h1md))))))))
   (g$define-struct-macro$7945$19h1md
     g$define-struct-macro$11384$19h1md
     (case-lambda
       ((g$stx$9169$19h1md)
        (g$syntax-violation$8061$19h1md
          '#f
          '"define-struct not supported"
          g$stx$9169$19h1md))))
   (g$define-record-type-macro$7946$19h1md
     g$define-record-type-macro$11385$19h1md
     (case-lambda
       ((g$x$9170$19h1md)
        (letrec* ((g$id$9171$19h1md
                    (case-lambda
                      ((g$ctxt$9423$19h1md . g$str*$9424$19h1md)
                       (g$datum->syntax$8063$19h1md
                         g$ctxt$9423$19h1md
                         (string->symbol
                           (apply
                             string-append
                             (map (case-lambda
                                    ((g$x$9425$19h1md)
                                     (if (symbol? g$x$9425$19h1md)
                                       (symbol->string g$x$9425$19h1md)
                                       (if (string? g$x$9425$19h1md)
                                         g$x$9425$19h1md
                                         (assertion-violation
                                           'define-record-type
                                           '"BUG")))))
                                  g$str*$9424$19h1md)))))))
                  (g$get-record-name$9172$19h1md
                    (case-lambda
                      ((g$spec$9414$19h1md)
                       ((case-lambda
                          ((g$t$9415$19h1md)
                           ((case-lambda
                              ((g$ls/false$9416$19h1md)
                               (if g$ls/false$9416$19h1md
                                 (apply
                                   (case-lambda
                                     ((g$foo$9417$19h1md
                                        g$make-foo$9418$19h1md
                                        g$foo?$9419$19h1md)
                                      g$foo$9417$19h1md))
                                   g$ls/false$9416$19h1md)
                                 ((case-lambda
                                    ((g$t$9420$19h1md)
                                     ((case-lambda
                                        ((g$ls/false$9421$19h1md)
                                         (if g$ls/false$9421$19h1md
                                           (apply
                                             (case-lambda
                                               ((g$foo$9422$19h1md)
                                                g$foo$9422$19h1md))
                                             g$ls/false$9421$19h1md)
                                           (g$syntax-violation$8061$19h1md
                                             '#f
                                             '"invalid syntax"
                                             g$t$9420$19h1md))))
                                      (g$syntax-dispatch$7952$19h1md
                                        g$t$9420$19h1md
                                        'any))))
                                  g$t$9415$19h1md))))
                            (g$syntax-dispatch$7952$19h1md
                              g$t$9415$19h1md
                              '(any any any)))))
                        g$spec$9414$19h1md))))
                  (g$get-record-constructor-name$9173$19h1md
                    (case-lambda
                      ((g$spec$9404$19h1md)
                       ((case-lambda
                          ((g$t$9405$19h1md)
                           ((case-lambda
                              ((g$ls/false$9406$19h1md)
                               (if g$ls/false$9406$19h1md
                                 (apply
                                   (case-lambda
                                     ((g$foo$9407$19h1md
                                        g$make-foo$9408$19h1md
                                        g$foo?$9409$19h1md)
                                      g$make-foo$9408$19h1md))
                                   g$ls/false$9406$19h1md)
                                 ((case-lambda
                                    ((g$t$9410$19h1md)
                                     ((case-lambda
                                        ((g$ls/false$9411$19h1md)
                                         (if (if g$ls/false$9411$19h1md
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9412$19h1md)
                                                      (g$id?$7674$19h1md
                                                        g$foo$9412$19h1md)))
                                                   g$ls/false$9411$19h1md))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9413$19h1md)
                                                (g$id$9171$19h1md
                                                  g$foo$9413$19h1md
                                                  '"make-"
                                                  (g$stx->datum$7685$19h1md
                                                    g$foo$9413$19h1md))))
                                             g$ls/false$9411$19h1md)
                                           (g$syntax-violation$8061$19h1md
                                             '#f
                                             '"invalid syntax"
                                             g$t$9410$19h1md))))
                                      (g$syntax-dispatch$7952$19h1md
                                        g$t$9410$19h1md
                                        'any))))
                                  g$t$9405$19h1md))))
                            (g$syntax-dispatch$7952$19h1md
                              g$t$9405$19h1md
                              '(any any any)))))
                        g$spec$9404$19h1md))))
                  (g$get-record-predicate-name$9174$19h1md
                    (case-lambda
                      ((g$spec$9394$19h1md)
                       ((case-lambda
                          ((g$t$9395$19h1md)
                           ((case-lambda
                              ((g$ls/false$9396$19h1md)
                               (if g$ls/false$9396$19h1md
                                 (apply
                                   (case-lambda
                                     ((g$foo$9397$19h1md
                                        g$make-foo$9398$19h1md
                                        g$foo?$9399$19h1md)
                                      g$foo?$9399$19h1md))
                                   g$ls/false$9396$19h1md)
                                 ((case-lambda
                                    ((g$t$9400$19h1md)
                                     ((case-lambda
                                        ((g$ls/false$9401$19h1md)
                                         (if (if g$ls/false$9401$19h1md
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9402$19h1md)
                                                      (g$id?$7674$19h1md
                                                        g$foo$9402$19h1md)))
                                                   g$ls/false$9401$19h1md))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9403$19h1md)
                                                (g$id$9171$19h1md
                                                  g$foo$9403$19h1md
                                                  (g$stx->datum$7685$19h1md
                                                    g$foo$9403$19h1md)
                                                  '"?")))
                                             g$ls/false$9401$19h1md)
                                           (g$syntax-violation$8061$19h1md
                                             '#f
                                             '"invalid syntax"
                                             g$t$9400$19h1md))))
                                      (g$syntax-dispatch$7952$19h1md
                                        g$t$9400$19h1md
                                        'any))))
                                  g$t$9395$19h1md))))
                            (g$syntax-dispatch$7952$19h1md
                              g$t$9395$19h1md
                              '(any any any)))))
                        g$spec$9394$19h1md))))
                  (g$get-clause$9175$19h1md
                    (case-lambda
                      ((g$id$9385$19h1md g$ls$9386$19h1md)
                       ((case-lambda
                          ((g$t$9387$19h1md)
                           ((case-lambda
                              ((g$ls/false$9388$19h1md)
                               (if g$ls/false$9388$19h1md
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$9388$19h1md)
                                 ((case-lambda
                                    ((g$t$9389$19h1md)
                                     ((case-lambda
                                        ((g$ls/false$9390$19h1md)
                                         (if g$ls/false$9390$19h1md
                                           (apply
                                             (case-lambda
                                               ((g$x$9391$19h1md
                                                  g$rest$9392$19h1md
                                                  g$ls$9393$19h1md)
                                                (if (g$free-id=?$7678$19h1md
                                                      (g$bless$7915$19h1md
                                                        g$id$9385$19h1md)
                                                      g$x$9391$19h1md)
                                                  (cons
                                                    g$x$9391$19h1md
                                                    g$rest$9392$19h1md)
                                                  (g$get-clause$9175$19h1md
                                                    g$id$9385$19h1md
                                                    g$ls$9393$19h1md))))
                                             g$ls/false$9390$19h1md)
                                           (g$syntax-violation$8061$19h1md
                                             '#f
                                             '"invalid syntax"
                                             g$t$9389$19h1md))))
                                      (g$syntax-dispatch$7952$19h1md
                                        g$t$9389$19h1md
                                        '((any . any) . any)))))
                                  g$t$9387$19h1md))))
                            (g$syntax-dispatch$7952$19h1md
                              g$t$9387$19h1md
                              '()))))
                        g$ls$9386$19h1md))))
                  (g$foo-rtd-code$9176$19h1md
                    (case-lambda
                      ((g$name$9344$19h1md
                         g$clause*$9345$19h1md
                         g$parent-rtd-code$9346$19h1md)
                       (letrec* ((g$convert-field-spec*$9347$19h1md
                                   (case-lambda
                                     ((g$ls$9372$19h1md)
                                      (list->vector
                                        (map (case-lambda
                                               ((g$x$9373$19h1md)
                                                ((case-lambda
                                                   ((g$t$9374$19h1md)
                                                    ((case-lambda
                                                       ((g$ls/false$9375$19h1md)
                                                        (if g$ls/false$9375$19h1md
                                                          (apply
                                                            (case-lambda
                                                              ((g$name$9376$19h1md
                                                                 g$rest$9377$19h1md)
                                                               (list
                                                                 'mutable
                                                                 g$name$9376$19h1md)))
                                                            g$ls/false$9375$19h1md)
                                                          ((case-lambda
                                                             ((g$t$9378$19h1md)
                                                              ((case-lambda
                                                                 ((g$ls/false$9379$19h1md)
                                                                  (if g$ls/false$9379$19h1md
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$name$9380$19h1md
                                                                           g$rest$9381$19h1md)
                                                                         (list
                                                                           'immutable
                                                                           g$name$9380$19h1md)))
                                                                      g$ls/false$9379$19h1md)
                                                                    ((case-lambda
                                                                       ((g$t$9382$19h1md)
                                                                        ((case-lambda
                                                                           ((g$ls/false$9383$19h1md)
                                                                            (if g$ls/false$9383$19h1md
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$name$9384$19h1md)
                                                                                   (list
                                                                                     'immutable
                                                                                     g$name$9384$19h1md)))
                                                                                g$ls/false$9383$19h1md)
                                                                              (g$syntax-violation$8061$19h1md
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$9382$19h1md))))
                                                                         (g$syntax-dispatch$7952$19h1md
                                                                           g$t$9382$19h1md
                                                                           'any))))
                                                                     g$t$9378$19h1md))))
                                                               (g$syntax-dispatch$7952$19h1md
                                                                 g$t$9378$19h1md
                                                                 '(#(scheme-id
                                                                     immutable)
                                                                   any
                                                                   .
                                                                   any)))))
                                                           g$t$9374$19h1md))))
                                                     (g$syntax-dispatch$7952$19h1md
                                                       g$t$9374$19h1md
                                                       '(#(scheme-id mutable)
                                                         any
                                                         .
                                                         any)))))
                                                 g$x$9373$19h1md)))
                                             g$ls$9372$19h1md))))))
                         ((case-lambda
                            ((g$uid-code$9348$19h1md
                               g$sealed?$9349$19h1md
                               g$opaque?$9350$19h1md
                               g$fields$9351$19h1md)
                             (g$bless$7915$19h1md
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$9344$19h1md)
                                 g$parent-rtd-code$9346$19h1md
                                 g$uid-code$9348$19h1md
                                 g$sealed?$9349$19h1md
                                 g$opaque?$9350$19h1md
                                 g$fields$9351$19h1md))))
                          ((case-lambda
                             ((g$t$9352$19h1md)
                              ((case-lambda
                                 ((g$ls/false$9353$19h1md)
                                  (if g$ls/false$9353$19h1md
                                    (apply
                                      (case-lambda (() (list 'quote (gensym))))
                                      g$ls/false$9353$19h1md)
                                    ((case-lambda
                                       ((g$t$9354$19h1md)
                                        ((case-lambda
                                           ((g$ls/false$9355$19h1md)
                                            (if g$ls/false$9355$19h1md
                                              (apply
                                                (case-lambda
                                                  ((g$uid$9356$19h1md)
                                                   (list
                                                     'quote
                                                     g$uid$9356$19h1md)))
                                                g$ls/false$9355$19h1md)
                                              ((case-lambda
                                                 ((g$t$9357$19h1md)
                                                  ((case-lambda
                                                     ((g$ls/false$9358$19h1md)
                                                      (if g$ls/false$9358$19h1md
                                                        (apply
                                                          (case-lambda (() '#f))
                                                          g$ls/false$9358$19h1md)
                                                        (g$syntax-violation$8061$19h1md
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$9357$19h1md))))
                                                   (g$syntax-dispatch$7952$19h1md
                                                     g$t$9357$19h1md
                                                     '_))))
                                               g$t$9354$19h1md))))
                                         (g$syntax-dispatch$7952$19h1md
                                           g$t$9354$19h1md
                                           '(_ any)))))
                                     g$t$9352$19h1md))))
                               (g$syntax-dispatch$7952$19h1md
                                 g$t$9352$19h1md
                                 '(_)))))
                           (g$get-clause$9175$19h1md
                             'nongenerative
                             g$clause*$9345$19h1md))
                          ((case-lambda
                             ((g$t$9359$19h1md)
                              ((case-lambda
                                 ((g$ls/false$9360$19h1md)
                                  (if g$ls/false$9360$19h1md
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9360$19h1md)
                                    ((case-lambda
                                       ((g$t$9361$19h1md)
                                        ((case-lambda
                                           ((g$ls/false$9362$19h1md)
                                            (if g$ls/false$9362$19h1md
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9362$19h1md)
                                              (g$syntax-violation$8061$19h1md
                                                '#f
                                                '"invalid syntax"
                                                g$t$9361$19h1md))))
                                         (g$syntax-dispatch$7952$19h1md
                                           g$t$9361$19h1md
                                           '_))))
                                     g$t$9359$19h1md))))
                               (g$syntax-dispatch$7952$19h1md
                                 g$t$9359$19h1md
                                 '(_ #(atom #t))))))
                           (g$get-clause$9175$19h1md
                             'sealed
                             g$clause*$9345$19h1md))
                          ((case-lambda
                             ((g$t$9363$19h1md)
                              ((case-lambda
                                 ((g$ls/false$9364$19h1md)
                                  (if g$ls/false$9364$19h1md
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9364$19h1md)
                                    ((case-lambda
                                       ((g$t$9365$19h1md)
                                        ((case-lambda
                                           ((g$ls/false$9366$19h1md)
                                            (if g$ls/false$9366$19h1md
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9366$19h1md)
                                              (g$syntax-violation$8061$19h1md
                                                '#f
                                                '"invalid syntax"
                                                g$t$9365$19h1md))))
                                         (g$syntax-dispatch$7952$19h1md
                                           g$t$9365$19h1md
                                           '_))))
                                     g$t$9363$19h1md))))
                               (g$syntax-dispatch$7952$19h1md
                                 g$t$9363$19h1md
                                 '(_ #(atom #t))))))
                           (g$get-clause$9175$19h1md
                             'opaque
                             g$clause*$9345$19h1md))
                          ((case-lambda
                             ((g$t$9367$19h1md)
                              ((case-lambda
                                 ((g$ls/false$9368$19h1md)
                                  (if g$ls/false$9368$19h1md
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$9369$19h1md)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$9347$19h1md
                                             g$field-spec*$9369$19h1md))))
                                      g$ls/false$9368$19h1md)
                                    ((case-lambda
                                       ((g$t$9370$19h1md)
                                        ((case-lambda
                                           ((g$ls/false$9371$19h1md)
                                            (if g$ls/false$9371$19h1md
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$9371$19h1md)
                                              (g$syntax-violation$8061$19h1md
                                                '#f
                                                '"invalid syntax"
                                                g$t$9370$19h1md))))
                                         (g$syntax-dispatch$7952$19h1md
                                           g$t$9370$19h1md
                                           '_))))
                                     g$t$9367$19h1md))))
                               (g$syntax-dispatch$7952$19h1md
                                 g$t$9367$19h1md
                                 '(_ . each-any)))))
                           (g$get-clause$9175$19h1md
                             'fields
                             g$clause*$9345$19h1md)))))))
                  (g$parent-rtd-code$9177$19h1md
                    (case-lambda
                      ((g$clause*$9332$19h1md)
                       ((case-lambda
                          ((g$t$9333$19h1md)
                           ((case-lambda
                              ((g$ls/false$9334$19h1md)
                               (if g$ls/false$9334$19h1md
                                 (apply
                                   (case-lambda
                                     ((g$name$9335$19h1md)
                                      (list
                                        'record-type-descriptor
                                        g$name$9335$19h1md)))
                                   g$ls/false$9334$19h1md)
                                 ((case-lambda
                                    ((g$t$9336$19h1md)
                                     ((case-lambda
                                        ((g$ls/false$9337$19h1md)
                                         (if g$ls/false$9337$19h1md
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$9338$19h1md)
                                                    ((case-lambda
                                                       ((g$ls/false$9339$19h1md)
                                                        (if g$ls/false$9339$19h1md
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$9340$19h1md
                                                                 g$rcd$9341$19h1md)
                                                               g$rtd$9340$19h1md))
                                                            g$ls/false$9339$19h1md)
                                                          ((case-lambda
                                                             ((g$t$9342$19h1md)
                                                              ((case-lambda
                                                                 ((g$ls/false$9343$19h1md)
                                                                  (if g$ls/false$9343$19h1md
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$9343$19h1md)
                                                                    (g$syntax-violation$8061$19h1md
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9342$19h1md))))
                                                               (g$syntax-dispatch$7952$19h1md
                                                                 g$t$9342$19h1md
                                                                 '#(atom #f)))))
                                                           g$t$9338$19h1md))))
                                                     (g$syntax-dispatch$7952$19h1md
                                                       g$t$9338$19h1md
                                                       '(_ any any)))))
                                                 (g$get-clause$9175$19h1md
                                                   'parent-rtd
                                                   g$clause*$9332$19h1md))))
                                             g$ls/false$9337$19h1md)
                                           (g$syntax-violation$8061$19h1md
                                             '#f
                                             '"invalid syntax"
                                             g$t$9336$19h1md))))
                                      (g$syntax-dispatch$7952$19h1md
                                        g$t$9336$19h1md
                                        '#(atom #f)))))
                                  g$t$9333$19h1md))))
                            (g$syntax-dispatch$7952$19h1md
                              g$t$9333$19h1md
                              '(_ any)))))
                        (g$get-clause$9175$19h1md
                          'parent
                          g$clause*$9332$19h1md)))))
                  (g$parent-rcd-code$9178$19h1md
                    (case-lambda
                      ((g$clause*$9320$19h1md)
                       ((case-lambda
                          ((g$t$9321$19h1md)
                           ((case-lambda
                              ((g$ls/false$9322$19h1md)
                               (if g$ls/false$9322$19h1md
                                 (apply
                                   (case-lambda
                                     ((g$name$9323$19h1md)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$9323$19h1md)))
                                   g$ls/false$9322$19h1md)
                                 ((case-lambda
                                    ((g$t$9324$19h1md)
                                     ((case-lambda
                                        ((g$ls/false$9325$19h1md)
                                         (if g$ls/false$9325$19h1md
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$9326$19h1md)
                                                    ((case-lambda
                                                       ((g$ls/false$9327$19h1md)
                                                        (if g$ls/false$9327$19h1md
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$9328$19h1md
                                                                 g$rcd$9329$19h1md)
                                                               g$rcd$9329$19h1md))
                                                            g$ls/false$9327$19h1md)
                                                          ((case-lambda
                                                             ((g$t$9330$19h1md)
                                                              ((case-lambda
                                                                 ((g$ls/false$9331$19h1md)
                                                                  (if g$ls/false$9331$19h1md
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$9331$19h1md)
                                                                    (g$syntax-violation$8061$19h1md
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9330$19h1md))))
                                                               (g$syntax-dispatch$7952$19h1md
                                                                 g$t$9330$19h1md
                                                                 '#(atom #f)))))
                                                           g$t$9326$19h1md))))
                                                     (g$syntax-dispatch$7952$19h1md
                                                       g$t$9326$19h1md
                                                       '(_ any any)))))
                                                 (g$get-clause$9175$19h1md
                                                   'parent-rtd
                                                   g$clause*$9320$19h1md))))
                                             g$ls/false$9325$19h1md)
                                           (g$syntax-violation$8061$19h1md
                                             '#f
                                             '"invalid syntax"
                                             g$t$9324$19h1md))))
                                      (g$syntax-dispatch$7952$19h1md
                                        g$t$9324$19h1md
                                        '#(atom #f)))))
                                  g$t$9321$19h1md))))
                            (g$syntax-dispatch$7952$19h1md
                              g$t$9321$19h1md
                              '(_ any)))))
                        (g$get-clause$9175$19h1md
                          'parent
                          g$clause*$9320$19h1md)))))
                  (g$foo-rcd-code$9179$19h1md
                    (case-lambda
                      ((g$clause*$9316$19h1md
                         g$foo-rtd$9317$19h1md
                         g$protocol$9318$19h1md
                         g$parent-rcd-code$9319$19h1md)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$9317$19h1md
                         g$parent-rcd-code$9319$19h1md
                         g$protocol$9318$19h1md))))
                  (g$get-protocol-code$9180$19h1md
                    (case-lambda
                      ((g$clause*$9310$19h1md)
                       ((case-lambda
                          ((g$t$9311$19h1md)
                           ((case-lambda
                              ((g$ls/false$9312$19h1md)
                               (if g$ls/false$9312$19h1md
                                 (apply
                                   (case-lambda
                                     ((g$expr$9313$19h1md) g$expr$9313$19h1md))
                                   g$ls/false$9312$19h1md)
                                 ((case-lambda
                                    ((g$t$9314$19h1md)
                                     ((case-lambda
                                        ((g$ls/false$9315$19h1md)
                                         (if g$ls/false$9315$19h1md
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$9315$19h1md)
                                           (g$syntax-violation$8061$19h1md
                                             '#f
                                             '"invalid syntax"
                                             g$t$9314$19h1md))))
                                      (g$syntax-dispatch$7952$19h1md
                                        g$t$9314$19h1md
                                        '_))))
                                  g$t$9311$19h1md))))
                            (g$syntax-dispatch$7952$19h1md
                              g$t$9311$19h1md
                              '(_ any)))))
                        (g$get-clause$9175$19h1md
                          'protocol
                          g$clause*$9310$19h1md)))))
                  (g$get-fields$9181$19h1md
                    (case-lambda
                      ((g$clause*$9301$19h1md)
                       ((case-lambda
                          ((g$t$9302$19h1md)
                           ((case-lambda
                              ((g$ls/false$9303$19h1md)
                               (if g$ls/false$9303$19h1md
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$9303$19h1md)
                                 ((case-lambda
                                    ((g$t$9304$19h1md)
                                     ((case-lambda
                                        ((g$ls/false$9305$19h1md)
                                         (if g$ls/false$9305$19h1md
                                           (apply
                                             (case-lambda
                                               ((g$f*$9306$19h1md)
                                                g$f*$9306$19h1md))
                                             g$ls/false$9305$19h1md)
                                           ((case-lambda
                                              ((g$t$9307$19h1md)
                                               ((case-lambda
                                                  ((g$ls/false$9308$19h1md)
                                                   (if g$ls/false$9308$19h1md
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$9309$19h1md)
                                                          (g$get-fields$9181$19h1md
                                                            g$rest$9309$19h1md)))
                                                       g$ls/false$9308$19h1md)
                                                     (g$syntax-violation$8061$19h1md
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9307$19h1md))))
                                                (g$syntax-dispatch$7952$19h1md
                                                  g$t$9307$19h1md
                                                  '(_ . any)))))
                                            g$t$9304$19h1md))))
                                      (g$syntax-dispatch$7952$19h1md
                                        g$t$9304$19h1md
                                        '((#(scheme-id fields) . each-any)
                                          .
                                          _)))))
                                  g$t$9302$19h1md))))
                            (g$syntax-dispatch$7952$19h1md
                              g$t$9302$19h1md
                              '()))))
                        g$clause*$9301$19h1md))))
                  (g$get-mutator-indices$9182$19h1md
                    (case-lambda
                      ((g$fields$9289$19h1md)
                       ((letrec ((g$f$9290$19h1md
                                   (case-lambda
                                     ((g$fields$9291$19h1md g$i$9292$19h1md)
                                      ((case-lambda
                                         ((g$t$9293$19h1md)
                                          ((case-lambda
                                             ((g$ls/false$9294$19h1md)
                                              (if g$ls/false$9294$19h1md
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$9294$19h1md)
                                                ((case-lambda
                                                   ((g$t$9295$19h1md)
                                                    ((case-lambda
                                                       ((g$ls/false$9296$19h1md)
                                                        (if g$ls/false$9296$19h1md
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$9297$19h1md)
                                                               (cons
                                                                 g$i$9292$19h1md
                                                                 (g$f$9290$19h1md
                                                                   g$rest$9297$19h1md
                                                                   (+ g$i$9292$19h1md
                                                                      '1)))))
                                                            g$ls/false$9296$19h1md)
                                                          ((case-lambda
                                                             ((g$t$9298$19h1md)
                                                              ((case-lambda
                                                                 ((g$ls/false$9299$19h1md)
                                                                  (if g$ls/false$9299$19h1md
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$9300$19h1md)
                                                                         (g$f$9290$19h1md
                                                                           g$rest$9300$19h1md
                                                                           (+ g$i$9292$19h1md
                                                                              '1))))
                                                                      g$ls/false$9299$19h1md)
                                                                    (g$syntax-violation$8061$19h1md
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9298$19h1md))))
                                                               (g$syntax-dispatch$7952$19h1md
                                                                 g$t$9298$19h1md
                                                                 '(_ . any)))))
                                                           g$t$9295$19h1md))))
                                                     (g$syntax-dispatch$7952$19h1md
                                                       g$t$9295$19h1md
                                                       '((#(scheme-id mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$9293$19h1md))))
                                           (g$syntax-dispatch$7952$19h1md
                                             g$t$9293$19h1md
                                             '()))))
                                       g$fields$9291$19h1md)))))
                          g$f$9290$19h1md)
                        g$fields$9289$19h1md
                        '0))))
                  (g$get-mutators$9183$19h1md
                    (case-lambda
                      ((g$foo$9268$19h1md g$fields$9269$19h1md)
                       (letrec* ((g$gen-name$9270$19h1md
                                   (case-lambda
                                     ((g$x$9288$19h1md)
                                      (g$datum->syntax$8063$19h1md
                                        g$foo$9268$19h1md
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$8064$19h1md
                                                g$foo$9268$19h1md))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$8064$19h1md
                                                g$x$9288$19h1md))
                                            '"-set!")))))))
                         ((letrec ((g$f$9271$19h1md
                                     (case-lambda
                                       ((g$fields$9272$19h1md)
                                        ((case-lambda
                                           ((g$t$9273$19h1md)
                                            ((case-lambda
                                               ((g$ls/false$9274$19h1md)
                                                (if g$ls/false$9274$19h1md
                                                  (apply
                                                    (case-lambda (() '()))
                                                    g$ls/false$9274$19h1md)
                                                  ((case-lambda
                                                     ((g$t$9275$19h1md)
                                                      ((case-lambda
                                                         ((g$ls/false$9276$19h1md)
                                                          (if g$ls/false$9276$19h1md
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$9277$19h1md
                                                                   g$accessor$9278$19h1md
                                                                   g$mutator$9279$19h1md
                                                                   g$rest$9280$19h1md)
                                                                 (cons
                                                                   g$mutator$9279$19h1md
                                                                   (g$f$9271$19h1md
                                                                     g$rest$9280$19h1md))))
                                                              g$ls/false$9276$19h1md)
                                                            ((case-lambda
                                                               ((g$t$9281$19h1md)
                                                                ((case-lambda
                                                                   ((g$ls/false$9282$19h1md)
                                                                    (if g$ls/false$9282$19h1md
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$9283$19h1md
                                                                             g$rest$9284$19h1md)
                                                                           (cons
                                                                             (g$gen-name$9270$19h1md
                                                                               g$name$9283$19h1md)
                                                                             (g$f$9271$19h1md
                                                                               g$rest$9284$19h1md))))
                                                                        g$ls/false$9282$19h1md)
                                                                      ((case-lambda
                                                                         ((g$t$9285$19h1md)
                                                                          ((case-lambda
                                                                             ((g$ls/false$9286$19h1md)
                                                                              (if g$ls/false$9286$19h1md
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$9287$19h1md)
                                                                                     (g$f$9271$19h1md
                                                                                       g$rest$9287$19h1md)))
                                                                                  g$ls/false$9286$19h1md)
                                                                                (g$syntax-violation$8061$19h1md
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$9285$19h1md))))
                                                                           (g$syntax-dispatch$7952$19h1md
                                                                             g$t$9285$19h1md
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$9281$19h1md))))
                                                                 (g$syntax-dispatch$7952$19h1md
                                                                   g$t$9281$19h1md
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$9275$19h1md))))
                                                       (g$syntax-dispatch$7952$19h1md
                                                         g$t$9275$19h1md
                                                         '((#(scheme-id mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$9273$19h1md))))
                                             (g$syntax-dispatch$7952$19h1md
                                               g$t$9273$19h1md
                                               '()))))
                                         g$fields$9272$19h1md)))))
                            g$f$9271$19h1md)
                          g$fields$9269$19h1md)))))
                  (g$get-accessors$9184$19h1md
                    (case-lambda
                      ((g$foo$9234$19h1md g$fields$9235$19h1md)
                       (letrec* ((g$gen-name$9236$19h1md
                                   (case-lambda
                                     ((g$x$9267$19h1md)
                                      (g$datum->syntax$8063$19h1md
                                        g$foo$9234$19h1md
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$8064$19h1md
                                                g$foo$9234$19h1md))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$8064$19h1md
                                                g$x$9267$19h1md)))))))))
                         (map (case-lambda
                                ((g$field$9237$19h1md)
                                 ((case-lambda
                                    ((g$t$9238$19h1md)
                                     ((case-lambda
                                        ((g$ls/false$9239$19h1md)
                                         (if (if g$ls/false$9239$19h1md
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$name$9240$19h1md
                                                        g$accessor$9241$19h1md
                                                        g$mutator$9242$19h1md)
                                                      (g$id?$7674$19h1md
                                                        g$accessor$9241$19h1md)))
                                                   g$ls/false$9239$19h1md))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$name$9243$19h1md
                                                  g$accessor$9244$19h1md
                                                  g$mutator$9245$19h1md)
                                                g$accessor$9244$19h1md))
                                             g$ls/false$9239$19h1md)
                                           ((case-lambda
                                              ((g$t$9246$19h1md)
                                               ((case-lambda
                                                  ((g$ls/false$9247$19h1md)
                                                   (if (if g$ls/false$9247$19h1md
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$name$9248$19h1md
                                                                  g$accessor$9249$19h1md)
                                                                (g$id?$7674$19h1md
                                                                  g$accessor$9249$19h1md)))
                                                             g$ls/false$9247$19h1md))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$name$9250$19h1md
                                                            g$accessor$9251$19h1md)
                                                          g$accessor$9251$19h1md))
                                                       g$ls/false$9247$19h1md)
                                                     ((case-lambda
                                                        ((g$t$9252$19h1md)
                                                         ((case-lambda
                                                            ((g$ls/false$9253$19h1md)
                                                             (if (if g$ls/false$9253$19h1md
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$name$9254$19h1md)
                                                                          (g$id?$7674$19h1md
                                                                            g$name$9254$19h1md)))
                                                                       g$ls/false$9253$19h1md))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$name$9255$19h1md)
                                                                    (g$gen-name$9236$19h1md
                                                                      g$name$9255$19h1md)))
                                                                 g$ls/false$9253$19h1md)
                                                               ((case-lambda
                                                                  ((g$t$9256$19h1md)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9257$19h1md)
                                                                       (if (if g$ls/false$9257$19h1md
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$name$9258$19h1md)
                                                                                    (g$id?$7674$19h1md
                                                                                      g$name$9258$19h1md)))
                                                                                 g$ls/false$9257$19h1md))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$name$9259$19h1md)
                                                                              (g$gen-name$9236$19h1md
                                                                                g$name$9259$19h1md)))
                                                                           g$ls/false$9257$19h1md)
                                                                         ((case-lambda
                                                                            ((g$t$9260$19h1md)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9261$19h1md)
                                                                                 (if (if g$ls/false$9261$19h1md
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$name$9262$19h1md)
                                                                                              (g$id?$7674$19h1md
                                                                                                g$name$9262$19h1md)))
                                                                                           g$ls/false$9261$19h1md))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$name$9263$19h1md)
                                                                                        (g$gen-name$9236$19h1md
                                                                                          g$name$9263$19h1md)))
                                                                                     g$ls/false$9261$19h1md)
                                                                                   ((case-lambda
                                                                                      ((g$t$9264$19h1md)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9265$19h1md)
                                                                                           (if g$ls/false$9265$19h1md
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$others$9266$19h1md)
                                                                                                  (g$syntax-violation$8061$19h1md
                                                                                                    '#f
                                                                                                    '"invalid field spec"
                                                                                                    g$field$9237$19h1md)))
                                                                                               g$ls/false$9265$19h1md)
                                                                                             (g$syntax-violation$8061$19h1md
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$9264$19h1md))))
                                                                                        (g$syntax-dispatch$7952$19h1md
                                                                                          g$t$9264$19h1md
                                                                                          'any))))
                                                                                    g$t$9260$19h1md))))
                                                                              (g$syntax-dispatch$7952$19h1md
                                                                                g$t$9260$19h1md
                                                                                'any))))
                                                                          g$t$9256$19h1md))))
                                                                    (g$syntax-dispatch$7952$19h1md
                                                                      g$t$9256$19h1md
                                                                      '(#(scheme-id
                                                                          immutable)
                                                                        any)))))
                                                                g$t$9252$19h1md))))
                                                          (g$syntax-dispatch$7952$19h1md
                                                            g$t$9252$19h1md
                                                            '(#(scheme-id
                                                                mutable)
                                                              any)))))
                                                      g$t$9246$19h1md))))
                                                (g$syntax-dispatch$7952$19h1md
                                                  g$t$9246$19h1md
                                                  '(#(scheme-id immutable)
                                                    any
                                                    any)))))
                                            g$t$9238$19h1md))))
                                      (g$syntax-dispatch$7952$19h1md
                                        g$t$9238$19h1md
                                        '(#(scheme-id mutable) any any any)))))
                                  g$field$9237$19h1md)))
                              g$fields$9235$19h1md)))))
                  (g$enumerate$9185$19h1md
                    (case-lambda
                      ((g$ls$9230$19h1md)
                       ((letrec ((g$f$9231$19h1md
                                   (case-lambda
                                     ((g$ls$9232$19h1md g$i$9233$19h1md)
                                      (if (null? g$ls$9232$19h1md)
                                        '()
                                        (cons
                                          g$i$9233$19h1md
                                          (g$f$9231$19h1md
                                            (cdr g$ls$9232$19h1md)
                                            (+ g$i$9233$19h1md '1))))))))
                          g$f$9231$19h1md)
                        g$ls$9230$19h1md
                        '0))))
                  (g$do-define-record$9186$19h1md
                    (case-lambda
                      ((g$namespec$9210$19h1md g$clause*$9211$19h1md)
                       ((case-lambda
                          ((g$foo$9212$19h1md)
                           ((case-lambda
                              ((g$foo-rtd$9213$19h1md)
                               ((case-lambda
                                  ((g$foo-rcd$9214$19h1md)
                                   ((case-lambda
                                      ((g$protocol$9215$19h1md)
                                       ((case-lambda
                                          ((g$make-foo$9216$19h1md)
                                           ((case-lambda
                                              ((g$fields$9217$19h1md)
                                               ((case-lambda
                                                  ((g$idx*$9218$19h1md)
                                                   ((case-lambda
                                                      ((g$foo-x*$9219$19h1md)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$9220$19h1md)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$9221$19h1md)
                                                               ((case-lambda
                                                                  ((g$foo?$9222$19h1md)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$9223$19h1md)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$9224$19h1md)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$9225$19h1md)
                                                                               ((case-lambda
                                                                                  (()
                                                                                   (g$bless$7915$19h1md
                                                                                     (cons
                                                                                       'begin
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rtd$9213$19h1md
                                                                                           g$foo-rtd-code$9223$19h1md)
                                                                                         (cons
                                                                                           (list
                                                                                             'define
                                                                                             g$protocol$9215$19h1md
                                                                                             g$protocol-code$9225$19h1md)
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo-rcd$9214$19h1md
                                                                                               g$foo-rcd-code$9224$19h1md)
                                                                                             (cons
                                                                                               (list
                                                                                                 'define-syntax
                                                                                                 g$foo$9212$19h1md
                                                                                                 (list
                                                                                                   'list
                                                                                                   ''$rtd
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rtd$9213$19h1md)
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rcd$9214$19h1md)))
                                                                                               (cons
                                                                                                 (list
                                                                                                   'define
                                                                                                   g$foo?$9222$19h1md
                                                                                                   (list
                                                                                                     'record-predicate
                                                                                                     g$foo-rtd$9213$19h1md))
                                                                                                 (cons
                                                                                                   (list
                                                                                                     'define
                                                                                                     g$make-foo$9216$19h1md
                                                                                                     (list
                                                                                                       'record-constructor
                                                                                                       g$foo-rcd$9214$19h1md))
                                                                                                   (append
                                                                                                     (map (case-lambda
                                                                                                            ((g$foo-x$9226$19h1md
                                                                                                               g$idx$9227$19h1md)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$foo-x$9226$19h1md
                                                                                                               (list
                                                                                                                 'record-accessor
                                                                                                                 g$foo-rtd$9213$19h1md
                                                                                                                 g$idx$9227$19h1md))))
                                                                                                          g$foo-x*$9219$19h1md
                                                                                                          g$idx*$9218$19h1md)
                                                                                                     (map (case-lambda
                                                                                                            ((g$set-foo-x!$9228$19h1md
                                                                                                               g$idx$9229$19h1md)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$set-foo-x!$9228$19h1md
                                                                                                               (list
                                                                                                                 'record-mutator
                                                                                                                 g$foo-rtd$9213$19h1md
                                                                                                                 g$idx$9229$19h1md))))
                                                                                                          g$set-foo-x!*$9220$19h1md
                                                                                                          g$set-foo-idx*$9221$19h1md)))))))))))))))
                                                                            (g$get-protocol-code$9180$19h1md
                                                                              g$clause*$9211$19h1md))))
                                                                        (g$foo-rcd-code$9179$19h1md
                                                                          g$clause*$9211$19h1md
                                                                          g$foo-rtd$9213$19h1md
                                                                          g$protocol$9215$19h1md
                                                                          (g$parent-rcd-code$9178$19h1md
                                                                            g$clause*$9211$19h1md)))))
                                                                    (g$foo-rtd-code$9176$19h1md
                                                                      g$foo$9212$19h1md
                                                                      g$clause*$9211$19h1md
                                                                      (g$parent-rtd-code$9177$19h1md
                                                                        g$clause*$9211$19h1md)))))
                                                                (g$get-record-predicate-name$9174$19h1md
                                                                  g$namespec$9210$19h1md))))
                                                            (g$get-mutator-indices$9182$19h1md
                                                              g$fields$9217$19h1md))))
                                                        (g$get-mutators$9183$19h1md
                                                          g$foo$9212$19h1md
                                                          g$fields$9217$19h1md))))
                                                    (g$get-accessors$9184$19h1md
                                                      g$foo$9212$19h1md
                                                      g$fields$9217$19h1md))))
                                                (g$enumerate$9185$19h1md
                                                  g$fields$9217$19h1md))))
                                            (g$get-fields$9181$19h1md
                                              g$clause*$9211$19h1md))))
                                        (g$get-record-constructor-name$9173$19h1md
                                          g$namespec$9210$19h1md))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$9172$19h1md
                          g$namespec$9210$19h1md)))))
                  (g$verify-clauses$9187$19h1md
                    (case-lambda
                      ((g$x$9192$19h1md g$cls*$9193$19h1md)
                       (letrec* ((g$valid-kwds$9194$19h1md
                                   (map g$bless$7915$19h1md
                                        '(fields
                                           parent
                                           parent-rtd
                                           protocol
                                           sealed
                                           opaque
                                           nongenerative)))
                                 (g$free-id-member?$9195$19h1md
                                   (case-lambda
                                     ((g$x$9207$19h1md g$ls$9208$19h1md)
                                      (if (pair? g$ls$9208$19h1md)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$9209$19h1md)
                                              (if g$t$9209$19h1md
                                                g$t$9209$19h1md
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$9195$19h1md
                                                    g$x$9207$19h1md
                                                    (cdr g$ls$9208$19h1md))))))
                                           (g$free-id=?$7678$19h1md
                                             g$x$9207$19h1md
                                             (car g$ls$9208$19h1md))))
                                        '#f)))))
                         ((letrec ((g$f$9196$19h1md
                                     (case-lambda
                                       ((g$cls*$9197$19h1md g$seen*$9198$19h1md)
                                        (if (not (null? g$cls*$9197$19h1md))
                                          ((case-lambda
                                             ((g$t$9199$19h1md)
                                              ((case-lambda
                                                 ((g$ls/false$9200$19h1md)
                                                  (if g$ls/false$9200$19h1md
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$9201$19h1md
                                                           g$rest$9202$19h1md)
                                                         (if ((case-lambda
                                                                ((g$t$9203$19h1md)
                                                                 (if g$t$9203$19h1md
                                                                   g$t$9203$19h1md
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$9195$19h1md
                                                                            g$kwd$9201$19h1md
                                                                            g$valid-kwds$9194$19h1md))))))
                                                              (not (g$id?$7674$19h1md
                                                                     g$kwd$9201$19h1md)))
                                                           (g$syntax-violation$8061$19h1md
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$9201$19h1md)
                                                           (if (g$bound-id-member?$7681$19h1md
                                                                 g$kwd$9201$19h1md
                                                                 g$seen*$9198$19h1md)
                                                             (g$syntax-violation$8061$19h1md
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$9192$19h1md
                                                               g$kwd$9201$19h1md)
                                                             (g$f$9196$19h1md
                                                               (cdr g$cls*$9197$19h1md)
                                                               (cons
                                                                 g$kwd$9201$19h1md
                                                                 g$seen*$9198$19h1md))))))
                                                      g$ls/false$9200$19h1md)
                                                    ((case-lambda
                                                       ((g$t$9204$19h1md)
                                                        ((case-lambda
                                                           ((g$ls/false$9205$19h1md)
                                                            (if g$ls/false$9205$19h1md
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$9206$19h1md)
                                                                   (g$syntax-violation$8061$19h1md
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$9206$19h1md)))
                                                                g$ls/false$9205$19h1md)
                                                              (g$syntax-violation$8061$19h1md
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9204$19h1md))))
                                                         (g$syntax-dispatch$7952$19h1md
                                                           g$t$9204$19h1md
                                                           'any))))
                                                     g$t$9199$19h1md))))
                                               (g$syntax-dispatch$7952$19h1md
                                                 g$t$9199$19h1md
                                                 '(any . any)))))
                                           (car g$cls*$9197$19h1md))
                                          (void))))))
                            g$f$9196$19h1md)
                          g$cls*$9193$19h1md
                          '()))))))
          ((case-lambda
             ((g$t$9188$19h1md)
              ((case-lambda
                 ((g$ls/false$9189$19h1md)
                  (if g$ls/false$9189$19h1md
                    (apply
                      (case-lambda
                        ((g$namespec$9190$19h1md g$clause*$9191$19h1md)
                         (begin
                           (g$verify-clauses$9187$19h1md
                             g$x$9170$19h1md
                             g$clause*$9191$19h1md)
                           (g$do-define-record$9186$19h1md
                             g$namespec$9190$19h1md
                             g$clause*$9191$19h1md))))
                      g$ls/false$9189$19h1md)
                    (g$syntax-violation$8061$19h1md
                      '#f
                      '"invalid syntax"
                      g$t$9188$19h1md))))
               (g$syntax-dispatch$7952$19h1md
                 g$t$9188$19h1md
                 '(_ any . each-any)))))
           g$x$9170$19h1md)))))
   (g$define-condition-type-macro$7947$19h1md
     g$define-condition-type-macro$11386$19h1md
     (case-lambda
       ((g$x$9426$19h1md)
        (letrec* ((g$mkname$9427$19h1md
                    (case-lambda
                      ((g$name$9450$19h1md g$suffix$9451$19h1md)
                       (g$datum->syntax$8063$19h1md
                         g$name$9450$19h1md
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$8064$19h1md g$name$9450$19h1md))
                             g$suffix$9451$19h1md)))))))
          ((case-lambda
             ((g$t$9428$19h1md)
              ((case-lambda
                 ((g$ls/false$9429$19h1md)
                  (if (if g$ls/false$9429$19h1md
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$9430$19h1md
                                 g$name$9431$19h1md
                                 g$super$9432$19h1md
                                 g$constructor$9433$19h1md
                                 g$predicate$9434$19h1md
                                 g$field*$9435$19h1md
                                 g$accessor*$9436$19h1md)
                               (if (g$id?$7674$19h1md g$name$9431$19h1md)
                                 (if (g$id?$7674$19h1md g$super$9432$19h1md)
                                   (if (g$id?$7674$19h1md
                                         g$constructor$9433$19h1md)
                                     (if (g$id?$7674$19h1md
                                           g$predicate$9434$19h1md)
                                       (if (g$for-all$5804$19h1md
                                             g$id?$7674$19h1md
                                             g$field*$9435$19h1md)
                                         (begin
                                           '#f
                                           (g$for-all$5804$19h1md
                                             g$id?$7674$19h1md
                                             g$accessor*$9436$19h1md))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$9429$19h1md))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$9437$19h1md
                           g$name$9438$19h1md
                           g$super$9439$19h1md
                           g$constructor$9440$19h1md
                           g$predicate$9441$19h1md
                           g$field*$9442$19h1md
                           g$accessor*$9443$19h1md)
                         ((case-lambda
                            ((g$aux-accessor*$9444$19h1md)
                             (g$bless$7915$19h1md
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$9438$19h1md
                                         g$constructor$9440$19h1md
                                         (gensym))
                                       (cons
                                         (list 'parent g$super$9439$19h1md)
                                         (cons
                                           (cons
                                             'fields
                                             (map (case-lambda
                                                    ((g$field$9445$19h1md
                                                       g$aux$9446$19h1md)
                                                     (list
                                                       'immutable
                                                       g$field$9445$19h1md
                                                       g$aux$9446$19h1md)))
                                                  g$field*$9442$19h1md
                                                  g$aux-accessor*$9444$19h1md))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$9441$19h1md
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$9438$19h1md)))
                                     (map (case-lambda
                                            ((g$accessor$9447$19h1md
                                               g$aux$9448$19h1md)
                                             (list
                                               'define
                                               g$accessor$9447$19h1md
                                               (list
                                                 'condition-accessor
                                                 (list
                                                   'record-type-descriptor
                                                   g$name$9438$19h1md)
                                                 g$aux$9448$19h1md))))
                                          g$accessor*$9443$19h1md
                                          g$aux-accessor*$9444$19h1md)))))))
                          (map (case-lambda ((g$x$9449$19h1md) (gensym)))
                               g$accessor*$9443$19h1md))))
                      g$ls/false$9429$19h1md)
                    (g$syntax-violation$8061$19h1md
                      '#f
                      '"invalid syntax"
                      g$t$9428$19h1md))))
               (g$syntax-dispatch$7952$19h1md
                 g$t$9428$19h1md
                 '(any any any any any . #(each (any any)))))))
           g$x$9426$19h1md)))))
   (g$incorrect-usage-macro$7948$19h1md
     g$incorrect-usage-macro$11387$19h1md
     (case-lambda
       ((g$e$9452$19h1md)
        (g$syntax-violation$8061$19h1md
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$9452$19h1md))))
   (g$parameterize-macro$7949$19h1md
     g$parameterize-macro$11388$19h1md
     (case-lambda
       ((g$e$9453$19h1md)
        ((case-lambda
           ((g$t$9454$19h1md)
            ((case-lambda
               ((g$ls/false$9455$19h1md)
                (if g$ls/false$9455$19h1md
                  (apply
                    (case-lambda
                      ((g$b$9456$19h1md g$b*$9457$19h1md)
                       (g$bless$7915$19h1md
                         (cons
                           'begin
                           (cons g$b$9456$19h1md g$b*$9457$19h1md)))))
                    g$ls/false$9455$19h1md)
                  ((case-lambda
                     ((g$t$9458$19h1md)
                      ((case-lambda
                         ((g$ls/false$9459$19h1md)
                          (if g$ls/false$9459$19h1md
                            (apply
                              (case-lambda
                                ((g$olhs*$9460$19h1md
                                   g$orhs*$9461$19h1md
                                   g$b$9462$19h1md
                                   g$b*$9463$19h1md)
                                 ((case-lambda
                                    ((g$lhs*$9464$19h1md g$rhs*$9465$19h1md)
                                     (g$bless$7915$19h1md
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$9464$19h1md
                                             g$rhs*$9465$19h1md)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (map (case-lambda
                                                            ((g$lhs$9466$19h1md
                                                               g$rhs$9467$19h1md)
                                                             (list
                                                               'let
                                                               (list
                                                                 (list
                                                                   't
                                                                   (list
                                                                     g$lhs$9466$19h1md)))
                                                               (list
                                                                 g$lhs$9466$19h1md
                                                                 g$rhs$9467$19h1md)
                                                               (cons
                                                                 'set!
                                                                 (cons
                                                                   g$rhs$9467$19h1md
                                                                   '(t))))))
                                                          g$lhs*$9464$19h1md
                                                          g$rhs*$9465$19h1md)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$9462$19h1md
                                                         g$b*$9463$19h1md)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$9460$19h1md
                                           g$orhs*$9461$19h1md)))))
                                  (g$generate-temporaries$8051$19h1md
                                    g$olhs*$9460$19h1md)
                                  (g$generate-temporaries$8051$19h1md
                                    g$orhs*$9461$19h1md))))
                              g$ls/false$9459$19h1md)
                            (g$syntax-violation$8061$19h1md
                              '#f
                              '"invalid syntax"
                              g$t$9458$19h1md))))
                       (g$syntax-dispatch$7952$19h1md
                         g$t$9458$19h1md
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$9454$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$9454$19h1md
               '(_ () any . each-any)))))
         g$e$9453$19h1md))))
   (g$foreign-call-transformer$7950$19h1md
     g$foreign-call-transformer$11389$19h1md
     (case-lambda
       ((g$e$9468$19h1md g$r$9469$19h1md g$mr$9470$19h1md)
        ((case-lambda
           ((g$t$9471$19h1md)
            ((case-lambda
               ((g$ls/false$9472$19h1md)
                (if g$ls/false$9472$19h1md
                  (apply
                    (case-lambda
                      ((g$name$9473$19h1md g$arg*$9474$19h1md)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$7970$19h1md
                             g$name$9473$19h1md
                             g$r$9469$19h1md
                             g$mr$9470$19h1md)
                           (g$chi-expr*$7968$19h1md
                             g$arg*$9474$19h1md
                             g$r$9469$19h1md
                             g$mr$9470$19h1md)))))
                    g$ls/false$9472$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$9471$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$9471$19h1md
               '(_ any . each-any)))))
         g$e$9468$19h1md))))
   (g$convert-pattern$7951$19h1md
     g$convert-pattern$11390$19h1md
     (case-lambda
       ((g$pattern$9475$19h1md g$keys$9476$19h1md)
        (letrec* ((g$cvt*$9477$19h1md
                    (case-lambda
                      ((g$p*$9557$19h1md g$n$9558$19h1md g$ids$9559$19h1md)
                       (if (null? g$p*$9557$19h1md)
                         (values '() g$ids$9559$19h1md)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$9477$19h1md
                                (cdr g$p*$9557$19h1md)
                                g$n$9558$19h1md
                                g$ids$9559$19h1md)))
                           (case-lambda
                             ((g$y$9562$19h1md g$ids$9563$19h1md)
                              ((case-lambda
                                 ((g$ids$9564$19h1md g$y$9565$19h1md)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$9478$19h1md
                                         (car g$p*$9557$19h1md)
                                         g$n$9558$19h1md
                                         g$ids$9564$19h1md)))
                                    (case-lambda
                                      ((g$x$9568$19h1md g$ids$9569$19h1md)
                                       ((case-lambda
                                          ((g$ids$9570$19h1md g$x$9571$19h1md)
                                           (values
                                             (cons
                                               g$x$9571$19h1md
                                               g$y$9565$19h1md)
                                             g$ids$9570$19h1md)))
                                        g$ids$9569$19h1md
                                        g$x$9568$19h1md))))))
                               g$ids$9563$19h1md
                               g$y$9562$19h1md))))))))
                  (g$cvt$9478$19h1md
                    (case-lambda
                      ((g$p$9479$19h1md g$n$9480$19h1md g$ids$9481$19h1md)
                       ((case-lambda
                          ((g$t$9482$19h1md)
                           ((case-lambda
                              ((g$ls/false$9483$19h1md)
                               (if (if g$ls/false$9483$19h1md
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$9484$19h1md)
                                            (g$id?$7674$19h1md
                                              g$id$9484$19h1md)))
                                         g$ls/false$9483$19h1md))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$9485$19h1md)
                                      (if (g$bound-id-member?$7681$19h1md
                                            g$p$9479$19h1md
                                            g$keys$9476$19h1md)
                                        (values
                                          (vector 'free-id g$p$9479$19h1md)
                                          g$ids$9481$19h1md)
                                        (if (g$free-id=?$7678$19h1md
                                              g$p$9479$19h1md
                                              (g$scheme-stx$7895$19h1md '_))
                                          (values '_ g$ids$9481$19h1md)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$9479$19h1md
                                                g$n$9480$19h1md)
                                              g$ids$9481$19h1md))))))
                                   g$ls/false$9483$19h1md)
                                 ((case-lambda
                                    ((g$t$9486$19h1md)
                                     ((case-lambda
                                        ((g$ls/false$9487$19h1md)
                                         (if (if g$ls/false$9487$19h1md
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9488$19h1md
                                                        g$dots$9489$19h1md)
                                                      (g$ellipsis?$7953$19h1md
                                                        g$dots$9489$19h1md)))
                                                   g$ls/false$9487$19h1md))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$9490$19h1md
                                                  g$dots$9491$19h1md)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$9478$19h1md
                                                       g$p$9490$19h1md
                                                       (+ g$n$9480$19h1md '1)
                                                       g$ids$9481$19h1md)))
                                                  (case-lambda
                                                    ((g$p$9494$19h1md
                                                       g$ids$9495$19h1md)
                                                     ((case-lambda
                                                        ((g$ids$9496$19h1md
                                                           g$p$9497$19h1md)
                                                         (values
                                                           (if (eq? g$p$9497$19h1md
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$9497$19h1md))
                                                           g$ids$9496$19h1md)))
                                                      g$ids$9495$19h1md
                                                      g$p$9494$19h1md))))))
                                             g$ls/false$9487$19h1md)
                                           ((case-lambda
                                              ((g$t$9498$19h1md)
                                               ((case-lambda
                                                  ((g$ls/false$9499$19h1md)
                                                   (if (if g$ls/false$9499$19h1md
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$9500$19h1md
                                                                  g$dots$9501$19h1md
                                                                  g$ys$9502$19h1md
                                                                  g$z$9503$19h1md)
                                                                (g$ellipsis?$7953$19h1md
                                                                  g$dots$9501$19h1md)))
                                                             g$ls/false$9499$19h1md))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9504$19h1md
                                                            g$dots$9505$19h1md
                                                            g$ys$9506$19h1md
                                                            g$z$9507$19h1md)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$9478$19h1md
                                                                 g$z$9507$19h1md
                                                                 g$n$9480$19h1md
                                                                 g$ids$9481$19h1md)))
                                                            (case-lambda
                                                              ((g$z$9510$19h1md
                                                                 g$ids$9511$19h1md)
                                                               ((case-lambda
                                                                  ((g$ids$9512$19h1md
                                                                     g$z$9513$19h1md)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$9477$19h1md
                                                                          g$ys$9506$19h1md
                                                                          g$n$9480$19h1md
                                                                          g$ids$9512$19h1md)))
                                                                     (case-lambda
                                                                       ((g$ys$9516$19h1md
                                                                          g$ids$9517$19h1md)
                                                                        ((case-lambda
                                                                           ((g$ids$9518$19h1md
                                                                              g$ys$9519$19h1md)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$9478$19h1md
                                                                                   g$x$9504$19h1md
                                                                                   (+ g$n$9480$19h1md
                                                                                      '1)
                                                                                   g$ids$9518$19h1md)))
                                                                              (case-lambda
                                                                                ((g$x$9522$19h1md
                                                                                   g$ids$9523$19h1md)
                                                                                 ((case-lambda
                                                                                    ((g$ids$9524$19h1md
                                                                                       g$x$9525$19h1md)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$9525$19h1md
                                                                                         (reverse
                                                                                           g$ys$9519$19h1md)
                                                                                         g$z$9513$19h1md)
                                                                                       g$ids$9524$19h1md)))
                                                                                  g$ids$9523$19h1md
                                                                                  g$x$9522$19h1md))))))
                                                                         g$ids$9517$19h1md
                                                                         g$ys$9516$19h1md))))))
                                                                g$ids$9511$19h1md
                                                                g$z$9510$19h1md))))))
                                                       g$ls/false$9499$19h1md)
                                                     ((case-lambda
                                                        ((g$t$9526$19h1md)
                                                         ((case-lambda
                                                            ((g$ls/false$9527$19h1md)
                                                             (if g$ls/false$9527$19h1md
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$9528$19h1md
                                                                      g$y$9529$19h1md)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$9478$19h1md
                                                                           g$y$9529$19h1md
                                                                           g$n$9480$19h1md
                                                                           g$ids$9481$19h1md)))
                                                                      (case-lambda
                                                                        ((g$y$9532$19h1md
                                                                           g$ids$9533$19h1md)
                                                                         ((case-lambda
                                                                            ((g$ids$9534$19h1md
                                                                               g$y$9535$19h1md)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$9478$19h1md
                                                                                    g$x$9528$19h1md
                                                                                    g$n$9480$19h1md
                                                                                    g$ids$9534$19h1md)))
                                                                               (case-lambda
                                                                                 ((g$x$9538$19h1md
                                                                                    g$ids$9539$19h1md)
                                                                                  ((case-lambda
                                                                                     ((g$ids$9540$19h1md
                                                                                        g$x$9541$19h1md)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$9541$19h1md
                                                                                          g$y$9535$19h1md)
                                                                                        g$ids$9540$19h1md)))
                                                                                   g$ids$9539$19h1md
                                                                                   g$x$9538$19h1md))))))
                                                                          g$ids$9533$19h1md
                                                                          g$y$9532$19h1md))))))
                                                                 g$ls/false$9527$19h1md)
                                                               ((case-lambda
                                                                  ((g$t$9542$19h1md)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9543$19h1md)
                                                                       (if g$ls/false$9543$19h1md
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$9481$19h1md)))
                                                                           g$ls/false$9543$19h1md)
                                                                         ((case-lambda
                                                                            ((g$t$9544$19h1md)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9545$19h1md)
                                                                                 (if (if g$ls/false$9545$19h1md
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$9546$19h1md)
                                                                                              (not (g$stx?$7646$19h1md
                                                                                                     g$p$9546$19h1md))))
                                                                                           g$ls/false$9545$19h1md))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$9547$19h1md)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$9478$19h1md
                                                                                               g$p$9547$19h1md
                                                                                               g$n$9480$19h1md
                                                                                               g$ids$9481$19h1md)))
                                                                                          (case-lambda
                                                                                            ((g$p$9550$19h1md
                                                                                               g$ids$9551$19h1md)
                                                                                             ((case-lambda
                                                                                                ((g$ids$9552$19h1md
                                                                                                   g$p$9553$19h1md)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$9553$19h1md)
                                                                                                   g$ids$9552$19h1md)))
                                                                                              g$ids$9551$19h1md
                                                                                              g$p$9550$19h1md))))))
                                                                                     g$ls/false$9545$19h1md)
                                                                                   ((case-lambda
                                                                                      ((g$t$9554$19h1md)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9555$19h1md)
                                                                                           (if g$ls/false$9555$19h1md
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$9556$19h1md)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$7685$19h1md
                                                                                                        g$datum$9556$19h1md))
                                                                                                    g$ids$9481$19h1md)))
                                                                                               g$ls/false$9555$19h1md)
                                                                                             (g$syntax-violation$8061$19h1md
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$9554$19h1md))))
                                                                                        (g$syntax-dispatch$7952$19h1md
                                                                                          g$t$9554$19h1md
                                                                                          'any))))
                                                                                    g$t$9544$19h1md))))
                                                                              (g$syntax-dispatch$7952$19h1md
                                                                                g$t$9544$19h1md
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$9542$19h1md))))
                                                                    (g$syntax-dispatch$7952$19h1md
                                                                      g$t$9542$19h1md
                                                                      '()))))
                                                                g$t$9526$19h1md))))
                                                          (g$syntax-dispatch$7952$19h1md
                                                            g$t$9526$19h1md
                                                            '(any . any)))))
                                                      g$t$9498$19h1md))))
                                                (g$syntax-dispatch$7952$19h1md
                                                  g$t$9498$19h1md
                                                  '(any any
                                                        .
                                                        #(each+ any () any))))))
                                            g$t$9486$19h1md))))
                                      (g$syntax-dispatch$7952$19h1md
                                        g$t$9486$19h1md
                                        '(any any)))))
                                  g$t$9482$19h1md))))
                            (g$syntax-dispatch$7952$19h1md
                              g$t$9482$19h1md
                              'any))))
                        g$p$9479$19h1md)))))
          (g$cvt$9478$19h1md g$pattern$9475$19h1md '0 '())))))
   (g$syntax-dispatch$7952$19h1md
     g$syntax-dispatch$11391$19h1md
     (case-lambda
       ((g$e$9572$19h1md g$p$9573$19h1md)
        (letrec* ((g$stx^$9574$19h1md
                    (case-lambda
                      ((g$e$9682$19h1md
                         g$m*$9683$19h1md
                         g$s*$9684$19h1md
                         g$ae*$9685$19h1md)
                       (if (if (null? g$m*$9683$19h1md)
                             (if (null? g$s*$9684$19h1md)
                               (begin '#f (null? g$ae*$9685$19h1md))
                               '#f)
                             '#f)
                         g$e$9682$19h1md
                         (g$mkstx$7662$19h1md
                           g$e$9682$19h1md
                           g$m*$9683$19h1md
                           g$s*$9684$19h1md
                           g$ae*$9685$19h1md)))))
                  (g$match-each$9575$19h1md
                    (case-lambda
                      ((g$e$9666$19h1md
                         g$p$9667$19h1md
                         g$m*$9668$19h1md
                         g$s*$9669$19h1md
                         g$ae*$9670$19h1md)
                       (if (pair? g$e$9666$19h1md)
                         ((case-lambda
                            ((g$first$9671$19h1md)
                             (if g$first$9671$19h1md
                               (begin
                                 '#f
                                 ((case-lambda
                                    ((g$rest$9672$19h1md)
                                     (if g$rest$9672$19h1md
                                       (begin
                                         '#f
                                         (cons
                                           g$first$9671$19h1md
                                           g$rest$9672$19h1md))
                                       '#f)))
                                  (g$match-each$9575$19h1md
                                    (cdr g$e$9666$19h1md)
                                    g$p$9667$19h1md
                                    g$m*$9668$19h1md
                                    g$s*$9669$19h1md
                                    g$ae*$9670$19h1md)))
                               '#f)))
                          (g$match$9581$19h1md
                            (car g$e$9666$19h1md)
                            g$p$9667$19h1md
                            g$m*$9668$19h1md
                            g$s*$9669$19h1md
                            g$ae*$9670$19h1md
                            '()))
                         (if (null? g$e$9666$19h1md)
                           '()
                           (if (g$stx?$7646$19h1md g$e$9666$19h1md)
                             (if (not (g$top-marked?$7617$19h1md
                                        g$m*$9668$19h1md))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$7661$19h1md
                                        g$m*$9668$19h1md
                                        g$s*$9669$19h1md
                                        g$ae*$9670$19h1md
                                        g$e$9666$19h1md)))
                                   (case-lambda
                                     ((g$m*$9676$19h1md
                                        g$s*$9677$19h1md
                                        g$ae*$9678$19h1md)
                                      ((case-lambda
                                         ((g$ae*$9679$19h1md
                                            g$s*$9680$19h1md
                                            g$m*$9681$19h1md)
                                          (g$match-each$9575$19h1md
                                            (g$stx-expr$7648$19h1md
                                              g$e$9666$19h1md)
                                            g$p$9667$19h1md
                                            g$m*$9681$19h1md
                                            g$s*$9680$19h1md
                                            g$ae*$9679$19h1md)))
                                       g$ae*$9678$19h1md
                                       g$s*$9677$19h1md
                                       g$m*$9676$19h1md)))))
                               '#f)
                             (if (annotation? g$e$9666$19h1md)
                               (g$match-each$9575$19h1md
                                 (annotation-expression g$e$9666$19h1md)
                                 g$p$9667$19h1md
                                 g$m*$9668$19h1md
                                 g$s*$9669$19h1md
                                 g$ae*$9670$19h1md)
                               '#f)))))))
                  (g$match-each+$9576$19h1md
                    (case-lambda
                      ((g$e$9634$19h1md
                         g$x-pat$9635$19h1md
                         g$y-pat$9636$19h1md
                         g$z-pat$9637$19h1md
                         g$m*$9638$19h1md
                         g$s*$9639$19h1md
                         g$ae*$9640$19h1md
                         g$r$9641$19h1md)
                       ((letrec ((g$f$9642$19h1md
                                   (case-lambda
                                     ((g$e$9643$19h1md
                                        g$m*$9644$19h1md
                                        g$s*$9645$19h1md
                                        g$ae*$9646$19h1md)
                                      (if (pair? g$e$9643$19h1md)
                                        (call-with-values
                                          (case-lambda
                                            (()
                                             (g$f$9642$19h1md
                                               (cdr g$e$9643$19h1md)
                                               g$m*$9644$19h1md
                                               g$s*$9645$19h1md
                                               g$ae*$9646$19h1md)))
                                          (case-lambda
                                            ((g$xr*$9650$19h1md
                                               g$y-pat$9651$19h1md
                                               g$r$9652$19h1md)
                                             ((case-lambda
                                                ((g$r$9653$19h1md
                                                   g$y-pat$9654$19h1md
                                                   g$xr*$9655$19h1md)
                                                 (if g$r$9653$19h1md
                                                   (if (null?
                                                         g$y-pat$9654$19h1md)
                                                     ((case-lambda
                                                        ((g$xr$9656$19h1md)
                                                         (if g$xr$9656$19h1md
                                                           (values
                                                             (cons
                                                               g$xr$9656$19h1md
                                                               g$xr*$9655$19h1md)
                                                             g$y-pat$9654$19h1md
                                                             g$r$9653$19h1md)
                                                           (values
                                                             '#f
                                                             '#f
                                                             '#f))))
                                                      (g$match$9581$19h1md
                                                        (car g$e$9643$19h1md)
                                                        g$x-pat$9635$19h1md
                                                        g$m*$9644$19h1md
                                                        g$s*$9645$19h1md
                                                        g$ae*$9646$19h1md
                                                        '()))
                                                     (values
                                                       '()
                                                       (cdr g$y-pat$9654$19h1md)
                                                       (g$match$9581$19h1md
                                                         (car g$e$9643$19h1md)
                                                         (car g$y-pat$9654$19h1md)
                                                         g$m*$9644$19h1md
                                                         g$s*$9645$19h1md
                                                         g$ae*$9646$19h1md
                                                         g$r$9653$19h1md)))
                                                   (values '#f '#f '#f))))
                                              g$r$9652$19h1md
                                              g$y-pat$9651$19h1md
                                              g$xr*$9650$19h1md))))
                                        (if (g$stx?$7646$19h1md g$e$9643$19h1md)
                                          (if (g$top-marked?$7617$19h1md
                                                g$m*$9644$19h1md)
                                            (values
                                              '()
                                              g$y-pat$9636$19h1md
                                              (g$match$9581$19h1md
                                                g$e$9643$19h1md
                                                g$z-pat$9637$19h1md
                                                g$m*$9644$19h1md
                                                g$s*$9645$19h1md
                                                g$ae*$9646$19h1md
                                                g$r$9641$19h1md))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$join-wraps$7661$19h1md
                                                   g$m*$9644$19h1md
                                                   g$s*$9645$19h1md
                                                   g$ae*$9646$19h1md
                                                   g$e$9643$19h1md)))
                                              (case-lambda
                                                ((g$m*$9660$19h1md
                                                   g$s*$9661$19h1md
                                                   g$ae*$9662$19h1md)
                                                 ((case-lambda
                                                    ((g$ae*$9663$19h1md
                                                       g$s*$9664$19h1md
                                                       g$m*$9665$19h1md)
                                                     (g$f$9642$19h1md
                                                       (g$stx-expr$7648$19h1md
                                                         g$e$9643$19h1md)
                                                       g$m*$9665$19h1md
                                                       g$s*$9664$19h1md
                                                       g$ae*$9663$19h1md)))
                                                  g$ae*$9662$19h1md
                                                  g$s*$9661$19h1md
                                                  g$m*$9660$19h1md)))))
                                          (if (annotation? g$e$9643$19h1md)
                                            (g$f$9642$19h1md
                                              (annotation-expression
                                                g$e$9643$19h1md)
                                              g$m*$9644$19h1md
                                              g$s*$9645$19h1md
                                              g$ae*$9646$19h1md)
                                            (values
                                              '()
                                              g$y-pat$9636$19h1md
                                              (g$match$9581$19h1md
                                                g$e$9643$19h1md
                                                g$z-pat$9637$19h1md
                                                g$m*$9644$19h1md
                                                g$s*$9645$19h1md
                                                g$ae*$9646$19h1md
                                                g$r$9641$19h1md)))))))))
                          g$f$9642$19h1md)
                        g$e$9634$19h1md
                        g$m*$9638$19h1md
                        g$s*$9639$19h1md
                        g$ae*$9640$19h1md))))
                  (g$match-each-any$9577$19h1md
                    (case-lambda
                      ((g$e$9620$19h1md
                         g$m*$9621$19h1md
                         g$s*$9622$19h1md
                         g$ae*$9623$19h1md)
                       (if (pair? g$e$9620$19h1md)
                         ((case-lambda
                            ((g$l$9624$19h1md)
                             (if g$l$9624$19h1md
                               (begin
                                 '#f
                                 (cons
                                   (g$stx^$9574$19h1md
                                     (car g$e$9620$19h1md)
                                     g$m*$9621$19h1md
                                     g$s*$9622$19h1md
                                     g$ae*$9623$19h1md)
                                   g$l$9624$19h1md))
                               '#f)))
                          (g$match-each-any$9577$19h1md
                            (cdr g$e$9620$19h1md)
                            g$m*$9621$19h1md
                            g$s*$9622$19h1md
                            g$ae*$9623$19h1md))
                         (if (null? g$e$9620$19h1md)
                           '()
                           (if (g$stx?$7646$19h1md g$e$9620$19h1md)
                             (if (not (g$top-marked?$7617$19h1md
                                        g$m*$9621$19h1md))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$7661$19h1md
                                        g$m*$9621$19h1md
                                        g$s*$9622$19h1md
                                        g$ae*$9623$19h1md
                                        g$e$9620$19h1md)))
                                   (case-lambda
                                     ((g$m*$9628$19h1md
                                        g$s*$9629$19h1md
                                        g$ae*$9630$19h1md)
                                      ((case-lambda
                                         ((g$ae*$9631$19h1md
                                            g$s*$9632$19h1md
                                            g$m*$9633$19h1md)
                                          (g$match-each-any$9577$19h1md
                                            (g$stx-expr$7648$19h1md
                                              g$e$9620$19h1md)
                                            g$m*$9633$19h1md
                                            g$s*$9632$19h1md
                                            g$ae*$9631$19h1md)))
                                       g$ae*$9630$19h1md
                                       g$s*$9629$19h1md
                                       g$m*$9628$19h1md)))))
                               '#f)
                             (if (annotation? g$e$9620$19h1md)
                               (g$match-each-any$9577$19h1md
                                 (annotation-expression g$e$9620$19h1md)
                                 g$m*$9621$19h1md
                                 g$s*$9622$19h1md
                                 g$ae*$9623$19h1md)
                               '#f)))))))
                  (g$match-empty$9578$19h1md
                    (case-lambda
                      ((g$p$9617$19h1md g$r$9618$19h1md)
                       (if (null? g$p$9617$19h1md)
                         g$r$9618$19h1md
                         (if (eq? g$p$9617$19h1md '_)
                           g$r$9618$19h1md
                           (if (eq? g$p$9617$19h1md 'any)
                             (cons '() g$r$9618$19h1md)
                             (if (pair? g$p$9617$19h1md)
                               (g$match-empty$9578$19h1md
                                 (car g$p$9617$19h1md)
                                 (g$match-empty$9578$19h1md
                                   (cdr g$p$9617$19h1md)
                                   g$r$9618$19h1md))
                               (if (eq? g$p$9617$19h1md 'each-any)
                                 (cons '() g$r$9618$19h1md)
                                 ((case-lambda
                                    ((g$t$9619$19h1md)
                                     (if (memv g$t$9619$19h1md '(each))
                                       (g$match-empty$9578$19h1md
                                         (vector-ref g$p$9617$19h1md '1)
                                         g$r$9618$19h1md)
                                       (if (memv g$t$9619$19h1md '(each+))
                                         (g$match-empty$9578$19h1md
                                           (vector-ref g$p$9617$19h1md '1)
                                           (g$match-empty$9578$19h1md
                                             (reverse
                                               (vector-ref g$p$9617$19h1md '2))
                                             (g$match-empty$9578$19h1md
                                               (vector-ref g$p$9617$19h1md '3)
                                               g$r$9618$19h1md)))
                                         (if (memv
                                               g$t$9619$19h1md
                                               '(free-id atom))
                                           g$r$9618$19h1md
                                           (if (memv
                                                 g$t$9619$19h1md
                                                 '(scheme-id atom))
                                             g$r$9618$19h1md
                                             (if (memv
                                                   g$t$9619$19h1md
                                                   '(vector))
                                               (g$match-empty$9578$19h1md
                                                 (vector-ref g$p$9617$19h1md '1)
                                                 g$r$9618$19h1md)
                                               (assertion-violation
                                                 'syntax-dispatch
                                                 '"invalid pattern"
                                                 g$p$9617$19h1md))))))))
                                  (vector-ref g$p$9617$19h1md '0))))))))))
                  (g$combine$9579$19h1md
                    (case-lambda
                      ((g$r*$9615$19h1md g$r$9616$19h1md)
                       (if (null? (car g$r*$9615$19h1md))
                         g$r$9616$19h1md
                         (cons
                           (map car g$r*$9615$19h1md)
                           (g$combine$9579$19h1md
                             (map cdr g$r*$9615$19h1md)
                             g$r$9616$19h1md))))))
                  (g$match*$9580$19h1md
                    (case-lambda
                      ((g$e$9597$19h1md
                         g$p$9598$19h1md
                         g$m*$9599$19h1md
                         g$s*$9600$19h1md
                         g$ae*$9601$19h1md
                         g$r$9602$19h1md)
                       (if (null? g$p$9598$19h1md)
                         (if (null? g$e$9597$19h1md)
                           (begin '#f g$r$9602$19h1md)
                           '#f)
                         (if (pair? g$p$9598$19h1md)
                           (if (pair? g$e$9597$19h1md)
                             (begin
                               '#f
                               (g$match$9581$19h1md
                                 (car g$e$9597$19h1md)
                                 (car g$p$9598$19h1md)
                                 g$m*$9599$19h1md
                                 g$s*$9600$19h1md
                                 g$ae*$9601$19h1md
                                 (g$match$9581$19h1md
                                   (cdr g$e$9597$19h1md)
                                   (cdr g$p$9598$19h1md)
                                   g$m*$9599$19h1md
                                   g$s*$9600$19h1md
                                   g$ae*$9601$19h1md
                                   g$r$9602$19h1md)))
                             '#f)
                           (if (eq? g$p$9598$19h1md 'each-any)
                             ((case-lambda
                                ((g$l$9603$19h1md)
                                 (if g$l$9603$19h1md
                                   (begin
                                     '#f
                                     (cons g$l$9603$19h1md g$r$9602$19h1md))
                                   '#f)))
                              (g$match-each-any$9577$19h1md
                                g$e$9597$19h1md
                                g$m*$9599$19h1md
                                g$s*$9600$19h1md
                                g$ae*$9601$19h1md))
                             ((case-lambda
                                ((g$t$9604$19h1md)
                                 (if (memv g$t$9604$19h1md '(each))
                                   (if (null? g$e$9597$19h1md)
                                     (g$match-empty$9578$19h1md
                                       (vector-ref g$p$9598$19h1md '1)
                                       g$r$9602$19h1md)
                                     ((case-lambda
                                        ((g$r*$9605$19h1md)
                                         (if g$r*$9605$19h1md
                                           (begin
                                             '#f
                                             (g$combine$9579$19h1md
                                               g$r*$9605$19h1md
                                               g$r$9602$19h1md))
                                           '#f)))
                                      (g$match-each$9575$19h1md
                                        g$e$9597$19h1md
                                        (vector-ref g$p$9598$19h1md '1)
                                        g$m*$9599$19h1md
                                        g$s*$9600$19h1md
                                        g$ae*$9601$19h1md)))
                                   (if (memv g$t$9604$19h1md '(free-id))
                                     (if (symbol? g$e$9597$19h1md)
                                       (if (g$top-marked?$7617$19h1md
                                             g$m*$9599$19h1md)
                                         (if (g$free-id=?$7678$19h1md
                                               (g$stx^$9574$19h1md
                                                 g$e$9597$19h1md
                                                 g$m*$9599$19h1md
                                                 g$s*$9600$19h1md
                                                 g$ae*$9601$19h1md)
                                               (vector-ref g$p$9598$19h1md '1))
                                           (begin '#f g$r$9602$19h1md)
                                           '#f)
                                         '#f)
                                       '#f)
                                     (if (memv g$t$9604$19h1md '(scheme-id))
                                       (if (symbol? g$e$9597$19h1md)
                                         (if (g$top-marked?$7617$19h1md
                                               g$m*$9599$19h1md)
                                           (if (g$free-id=?$7678$19h1md
                                                 (g$stx^$9574$19h1md
                                                   g$e$9597$19h1md
                                                   g$m*$9599$19h1md
                                                   g$s*$9600$19h1md
                                                   g$ae*$9601$19h1md)
                                                 (g$scheme-stx$7895$19h1md
                                                   (vector-ref
                                                     g$p$9598$19h1md
                                                     '1)))
                                             (begin '#f g$r$9602$19h1md)
                                             '#f)
                                           '#f)
                                         '#f)
                                       (if (memv g$t$9604$19h1md '(each+))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$match-each+$9576$19h1md
                                                g$e$9597$19h1md
                                                (vector-ref g$p$9598$19h1md '1)
                                                (vector-ref g$p$9598$19h1md '2)
                                                (vector-ref g$p$9598$19h1md '3)
                                                g$m*$9599$19h1md
                                                g$s*$9600$19h1md
                                                g$ae*$9601$19h1md
                                                g$r$9602$19h1md)))
                                           (case-lambda
                                             ((g$xr*$9609$19h1md
                                                g$y-pat$9610$19h1md
                                                g$r$9611$19h1md)
                                              ((case-lambda
                                                 ((g$r$9612$19h1md
                                                    g$y-pat$9613$19h1md
                                                    g$xr*$9614$19h1md)
                                                  (if g$r$9612$19h1md
                                                    (if (null?
                                                          g$y-pat$9613$19h1md)
                                                      (begin
                                                        '#f
                                                        (if (null?
                                                              g$xr*$9614$19h1md)
                                                          (g$match-empty$9578$19h1md
                                                            (vector-ref
                                                              g$p$9598$19h1md
                                                              '1)
                                                            g$r$9612$19h1md)
                                                          (g$combine$9579$19h1md
                                                            g$xr*$9614$19h1md
                                                            g$r$9612$19h1md)))
                                                      '#f)
                                                    '#f)))
                                               g$r$9611$19h1md
                                               g$y-pat$9610$19h1md
                                               g$xr*$9609$19h1md))))
                                         (if (memv g$t$9604$19h1md '(atom))
                                           (if (equal?
                                                 (vector-ref g$p$9598$19h1md '1)
                                                 (g$strip$7684$19h1md
                                                   g$e$9597$19h1md
                                                   g$m*$9599$19h1md))
                                             (begin '#f g$r$9602$19h1md)
                                             '#f)
                                           (if (memv g$t$9604$19h1md '(vector))
                                             (if (vector? g$e$9597$19h1md)
                                               (begin
                                                 '#f
                                                 (g$match$9581$19h1md
                                                   (vector->list
                                                     g$e$9597$19h1md)
                                                   (vector-ref
                                                     g$p$9598$19h1md
                                                     '1)
                                                   g$m*$9599$19h1md
                                                   g$s*$9600$19h1md
                                                   g$ae*$9601$19h1md
                                                   g$r$9602$19h1md))
                                               '#f)
                                             (assertion-violation
                                               'syntax-dispatch
                                               '"invalid pattern"
                                               g$p$9598$19h1md)))))))))
                              (vector-ref g$p$9598$19h1md '0))))))))
                  (g$match$9581$19h1md
                    (case-lambda
                      ((g$e$9582$19h1md
                         g$p$9583$19h1md
                         g$m*$9584$19h1md
                         g$s*$9585$19h1md
                         g$ae*$9586$19h1md
                         g$r$9587$19h1md)
                       (if (not g$r$9587$19h1md)
                         '#f
                         (if (eq? g$p$9583$19h1md '_)
                           g$r$9587$19h1md
                           (if (eq? g$p$9583$19h1md 'any)
                             (cons
                               (g$stx^$9574$19h1md
                                 g$e$9582$19h1md
                                 g$m*$9584$19h1md
                                 g$s*$9585$19h1md
                                 g$ae*$9586$19h1md)
                               g$r$9587$19h1md)
                             (if (g$stx?$7646$19h1md g$e$9582$19h1md)
                               (if (not (g$top-marked?$7617$19h1md
                                          g$m*$9584$19h1md))
                                 (begin
                                   '#f
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$join-wraps$7661$19h1md
                                          g$m*$9584$19h1md
                                          g$s*$9585$19h1md
                                          g$ae*$9586$19h1md
                                          g$e$9582$19h1md)))
                                     (case-lambda
                                       ((g$m*$9591$19h1md
                                          g$s*$9592$19h1md
                                          g$ae*$9593$19h1md)
                                        ((case-lambda
                                           ((g$ae*$9594$19h1md
                                              g$s*$9595$19h1md
                                              g$m*$9596$19h1md)
                                            (g$match$9581$19h1md
                                              (g$stx-expr$7648$19h1md
                                                g$e$9582$19h1md)
                                              g$p$9583$19h1md
                                              g$m*$9596$19h1md
                                              g$s*$9595$19h1md
                                              g$ae*$9594$19h1md
                                              g$r$9587$19h1md)))
                                         g$ae*$9593$19h1md
                                         g$s*$9592$19h1md
                                         g$m*$9591$19h1md)))))
                                 '#f)
                               (if (annotation? g$e$9582$19h1md)
                                 (g$match$9581$19h1md
                                   (annotation-expression g$e$9582$19h1md)
                                   g$p$9583$19h1md
                                   g$m*$9584$19h1md
                                   g$s*$9585$19h1md
                                   g$ae*$9586$19h1md
                                   g$r$9587$19h1md)
                                 (g$match*$9580$19h1md
                                   g$e$9582$19h1md
                                   g$p$9583$19h1md
                                   g$m*$9584$19h1md
                                   g$s*$9585$19h1md
                                   g$ae*$9586$19h1md
                                   g$r$9587$19h1md))))))))))
          (g$match$9581$19h1md
            g$e$9572$19h1md
            g$p$9573$19h1md
            '()
            '()
            '()
            '())))))
   (g$ellipsis?$7953$19h1md
     g$ellipsis?$11392$19h1md
     (case-lambda
       ((g$x$9686$19h1md)
        (if (g$id?$7674$19h1md g$x$9686$19h1md)
          (begin
            '#f
            (g$free-id=?$7678$19h1md
              g$x$9686$19h1md
              (g$scheme-stx$7895$19h1md '...)))
          '#f))))
   (g$underscore?$7954$19h1md
     g$underscore?$11393$19h1md
     (case-lambda
       ((g$x$9687$19h1md)
        (if (g$id?$7674$19h1md g$x$9687$19h1md)
          (begin
            '#f
            (g$free-id=?$7678$19h1md
              g$x$9687$19h1md
              (g$scheme-stx$7895$19h1md '_)))
          '#f))))
   (g$verify-literals$7955$19h1md
     g$verify-literals$11394$19h1md
     (case-lambda
       ((g$lits$9688$19h1md g$expr$9689$19h1md)
        (for-each
          (case-lambda
            ((g$x$9690$19h1md)
             (if ((case-lambda
                    ((g$t$9691$19h1md)
                     (if g$t$9691$19h1md
                       g$t$9691$19h1md
                       ((case-lambda
                          ((g$t$9692$19h1md)
                           (if g$t$9692$19h1md
                             g$t$9692$19h1md
                             (begin
                               '#f
                               (g$underscore?$7954$19h1md g$x$9690$19h1md)))))
                        (g$ellipsis?$7953$19h1md g$x$9690$19h1md)))))
                  (not (g$id?$7674$19h1md g$x$9690$19h1md)))
               (g$syntax-violation$8061$19h1md
                 '#f
                 '"invalid literal"
                 g$expr$9689$19h1md
                 g$x$9690$19h1md)
               (void))))
          g$lits$9688$19h1md))))
   (g$syntax-case-transformer$7956$19h1md
     g$syntax-case-transformer$11395$19h1md
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$9693$19h1md
                     (case-lambda
                       ((g$pvars$9750$19h1md
                          g$expr$9751$19h1md
                          g$y$9752$19h1md
                          g$r$9753$19h1md
                          g$mr$9754$19h1md)
                        ((case-lambda
                           ((g$ids$9755$19h1md g$levels$9756$19h1md)
                            ((case-lambda
                               ((g$labels$9757$19h1md g$new-vars$9758$19h1md)
                                ((case-lambda
                                   ((g$body$9759$19h1md)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$7605$19h1md
                                        '#f
                                        g$new-vars$9758$19h1md
                                        g$body$9759$19h1md)
                                      g$y$9752$19h1md)))
                                 (g$chi-expr$7970$19h1md
                                   (g$add-subst$7664$19h1md
                                     (g$make-full-rib$7642$19h1md
                                       g$ids$9755$19h1md
                                       g$labels$9757$19h1md)
                                     g$expr$9751$19h1md)
                                   (append
                                     (map (case-lambda
                                            ((g$label$9760$19h1md
                                               g$var$9761$19h1md
                                               g$level$9762$19h1md)
                                             (cons
                                               g$label$9760$19h1md
                                               (g$make-binding$7690$19h1md
                                                 'syntax
                                                 (cons
                                                   g$var$9761$19h1md
                                                   g$level$9762$19h1md)))))
                                          g$labels$9757$19h1md
                                          g$new-vars$9758$19h1md
                                          (map cdr g$pvars$9750$19h1md))
                                     g$r$9753$19h1md)
                                   g$mr$9754$19h1md))))
                             (map g$gen-label$7620$19h1md g$ids$9755$19h1md)
                             (map g$gen-lexical$7618$19h1md
                                  g$ids$9755$19h1md))))
                         (map car g$pvars$9750$19h1md)
                         (map cdr g$pvars$9750$19h1md)))))
                   (g$invalid-ids-error$9694$19h1md
                     (case-lambda
                       ((g$id*$9744$19h1md g$e$9745$19h1md g$class$9746$19h1md)
                        ((letrec ((g$find$9747$19h1md
                                    (case-lambda
                                      ((g$id*$9748$19h1md g$ok*$9749$19h1md)
                                       (if (null? g$id*$9748$19h1md)
                                         (g$syntax-violation$8061$19h1md
                                           '#f
                                           '"invalid syntax"
                                           g$e$9745$19h1md)
                                         (if (g$id?$7674$19h1md
                                               (car g$id*$9748$19h1md))
                                           (if (g$bound-id-member?$7681$19h1md
                                                 (car g$id*$9748$19h1md)
                                                 g$ok*$9749$19h1md)
                                             (g$syntax-error$8058$19h1md
                                               (car g$id*$9748$19h1md)
                                               '"duplicate "
                                               g$class$9746$19h1md)
                                             (g$find$9747$19h1md
                                               (cdr g$id*$9748$19h1md)
                                               (cons
                                                 (car g$id*$9748$19h1md)
                                                 g$ok*$9749$19h1md)))
                                           (g$syntax-error$8058$19h1md
                                             (car g$id*$9748$19h1md)
                                             '"invalid "
                                             g$class$9746$19h1md)))))))
                           g$find$9747$19h1md)
                         g$id*$9744$19h1md
                         '()))))
                   (g$gen-clause$9695$19h1md
                     (case-lambda
                       ((g$x$9724$19h1md
                          g$keys$9725$19h1md
                          g$clauses$9726$19h1md
                          g$r$9727$19h1md
                          g$mr$9728$19h1md
                          g$pat$9729$19h1md
                          g$fender$9730$19h1md
                          g$expr$9731$19h1md)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$7951$19h1md
                               g$pat$9729$19h1md
                               g$keys$9725$19h1md)))
                          (case-lambda
                            ((g$p$9734$19h1md g$pvars$9735$19h1md)
                             ((case-lambda
                                ((g$pvars$9736$19h1md g$p$9737$19h1md)
                                 (if (not (g$distinct-bound-ids?$7680$19h1md
                                            (map car g$pvars$9736$19h1md)))
                                   (g$invalid-ids-error$9694$19h1md
                                     (map car g$pvars$9736$19h1md)
                                     g$pat$9729$19h1md
                                     '"pattern variable")
                                   (if (not (g$for-all$5804$19h1md
                                              (case-lambda
                                                ((g$x$9738$19h1md)
                                                 (not (g$ellipsis?$7953$19h1md
                                                        (car g$x$9738$19h1md)))))
                                              g$pvars$9736$19h1md))
                                     (g$syntax-violation$8061$19h1md
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$9729$19h1md)
                                     ((case-lambda
                                        ((g$y$9739$19h1md)
                                         ((case-lambda
                                            ((g$test$9740$19h1md)
                                             ((case-lambda
                                                ((g$conseq$9741$19h1md)
                                                 ((case-lambda
                                                    ((g$altern$9742$19h1md)
                                                     (list
                                                       (g$build-lambda$7605$19h1md
                                                         '#f
                                                         (list g$y$9739$19h1md)
                                                         (list
                                                           'if
                                                           g$test$9740$19h1md
                                                           g$conseq$9741$19h1md
                                                           g$altern$9742$19h1md))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$9724$19h1md
                                                         (list
                                                           'quote
                                                           g$p$9737$19h1md)))))
                                                  (g$gen-syntax-case$9696$19h1md
                                                    g$x$9724$19h1md
                                                    g$keys$9725$19h1md
                                                    g$clauses$9726$19h1md
                                                    g$r$9727$19h1md
                                                    g$mr$9728$19h1md))))
                                              (g$build-dispatch-call$9693$19h1md
                                                g$pvars$9736$19h1md
                                                g$expr$9731$19h1md
                                                g$y$9739$19h1md
                                                g$r$9727$19h1md
                                                g$mr$9728$19h1md))))
                                          (if (eq? g$fender$9730$19h1md '#t)
                                            g$y$9739$19h1md
                                            ((case-lambda
                                               ((g$call$9743$19h1md)
                                                (list
                                                  'if
                                                  g$y$9739$19h1md
                                                  g$call$9743$19h1md
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$9693$19h1md
                                               g$pvars$9736$19h1md
                                               g$fender$9730$19h1md
                                               g$y$9739$19h1md
                                               g$r$9727$19h1md
                                               g$mr$9728$19h1md))))))
                                      (g$gen-lexical$7618$19h1md 'tmp))))))
                              g$pvars$9735$19h1md
                              g$p$9734$19h1md)))))))
                   (g$gen-syntax-case$9696$19h1md
                     (case-lambda
                       ((g$x$9707$19h1md
                          g$keys$9708$19h1md
                          g$clauses$9709$19h1md
                          g$r$9710$19h1md
                          g$mr$9711$19h1md)
                        (if (null? g$clauses$9709$19h1md)
                          (list '(primitive syntax-error) g$x$9707$19h1md)
                          ((case-lambda
                             ((g$t$9712$19h1md)
                              ((case-lambda
                                 ((g$ls/false$9713$19h1md)
                                  (if g$ls/false$9713$19h1md
                                    (apply
                                      (case-lambda
                                        ((g$pat$9714$19h1md g$expr$9715$19h1md)
                                         (if (if (g$id?$7674$19h1md
                                                   g$pat$9714$19h1md)
                                               (if (not (g$bound-id-member?$7681$19h1md
                                                          g$pat$9714$19h1md
                                                          g$keys$9708$19h1md))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$7953$19h1md
                                                          g$pat$9714$19h1md)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$7678$19h1md
                                                 g$pat$9714$19h1md
                                                 (g$scheme-stx$7895$19h1md '_))
                                             (g$chi-expr$7970$19h1md
                                               g$expr$9715$19h1md
                                               g$r$9710$19h1md
                                               g$mr$9711$19h1md)
                                             ((case-lambda
                                                ((g$lab$9716$19h1md
                                                   g$lex$9717$19h1md)
                                                 ((case-lambda
                                                    ((g$body$9718$19h1md)
                                                     (list
                                                       (g$build-lambda$7605$19h1md
                                                         '#f
                                                         (list
                                                           g$lex$9717$19h1md)
                                                         g$body$9718$19h1md)
                                                       g$x$9707$19h1md)))
                                                  (g$chi-expr$7970$19h1md
                                                    (g$add-subst$7664$19h1md
                                                      (g$make-full-rib$7642$19h1md
                                                        (list g$pat$9714$19h1md)
                                                        (list
                                                          g$lab$9716$19h1md))
                                                      g$expr$9715$19h1md)
                                                    (cons
                                                      (cons
                                                        g$lab$9716$19h1md
                                                        (g$make-binding$7690$19h1md
                                                          'syntax
                                                          (cons
                                                            g$lex$9717$19h1md
                                                            '0)))
                                                      g$r$9710$19h1md)
                                                    g$mr$9711$19h1md))))
                                              (g$gen-label$7620$19h1md
                                                g$pat$9714$19h1md)
                                              (g$gen-lexical$7618$19h1md
                                                g$pat$9714$19h1md)))
                                           (g$gen-clause$9695$19h1md
                                             g$x$9707$19h1md
                                             g$keys$9708$19h1md
                                             (cdr g$clauses$9709$19h1md)
                                             g$r$9710$19h1md
                                             g$mr$9711$19h1md
                                             g$pat$9714$19h1md
                                             '#t
                                             g$expr$9715$19h1md))))
                                      g$ls/false$9713$19h1md)
                                    ((case-lambda
                                       ((g$t$9719$19h1md)
                                        ((case-lambda
                                           ((g$ls/false$9720$19h1md)
                                            (if g$ls/false$9720$19h1md
                                              (apply
                                                (case-lambda
                                                  ((g$pat$9721$19h1md
                                                     g$fender$9722$19h1md
                                                     g$expr$9723$19h1md)
                                                   (g$gen-clause$9695$19h1md
                                                     g$x$9707$19h1md
                                                     g$keys$9708$19h1md
                                                     (cdr g$clauses$9709$19h1md)
                                                     g$r$9710$19h1md
                                                     g$mr$9711$19h1md
                                                     g$pat$9721$19h1md
                                                     g$fender$9722$19h1md
                                                     g$expr$9723$19h1md)))
                                                g$ls/false$9720$19h1md)
                                              (g$syntax-violation$8061$19h1md
                                                '#f
                                                '"invalid syntax"
                                                g$t$9719$19h1md))))
                                         (g$syntax-dispatch$7952$19h1md
                                           g$t$9719$19h1md
                                           '(any any any)))))
                                     g$t$9712$19h1md))))
                               (g$syntax-dispatch$7952$19h1md
                                 g$t$9712$19h1md
                                 '(any any)))))
                           (car g$clauses$9709$19h1md)))))))
           (case-lambda
             ((g$e$9697$19h1md g$r$9698$19h1md g$mr$9699$19h1md)
              ((case-lambda
                 ((g$t$9700$19h1md)
                  ((case-lambda
                     ((g$ls/false$9701$19h1md)
                      (if g$ls/false$9701$19h1md
                        (apply
                          (case-lambda
                            ((g$expr$9702$19h1md
                               g$keys$9703$19h1md
                               g$clauses$9704$19h1md)
                             (begin
                               (g$verify-literals$7955$19h1md
                                 g$keys$9703$19h1md
                                 g$e$9697$19h1md)
                               ((case-lambda
                                  ((g$x$9705$19h1md)
                                   ((case-lambda
                                      ((g$body$9706$19h1md)
                                       (list
                                         (g$build-lambda$7605$19h1md
                                           '#f
                                           (list g$x$9705$19h1md)
                                           g$body$9706$19h1md)
                                         (g$chi-expr$7970$19h1md
                                           g$expr$9702$19h1md
                                           g$r$9698$19h1md
                                           g$mr$9699$19h1md))))
                                    (g$gen-syntax-case$9696$19h1md
                                      g$x$9705$19h1md
                                      g$keys$9703$19h1md
                                      g$clauses$9704$19h1md
                                      g$r$9698$19h1md
                                      g$mr$9699$19h1md))))
                                (g$gen-lexical$7618$19h1md 'tmp)))))
                          g$ls/false$9701$19h1md)
                        (g$syntax-violation$8061$19h1md
                          '#f
                          '"invalid syntax"
                          g$t$9700$19h1md))))
                   (g$syntax-dispatch$7952$19h1md
                     g$t$9700$19h1md
                     '(_ any each-any . each-any)))))
               g$e$9697$19h1md))))))))
   (g$ellipsis-map$7957$19h1md
     g$ellipsis-map$11396$19h1md
     (case-lambda
       ((g$proc$9763$19h1md g$ls$9764$19h1md . g$ls*$9765$19h1md)
        (letrec* ((g$who$9766$19h1md '...))
          (begin
            (if (not (list? g$ls$9764$19h1md))
              (assertion-violation
                g$who$9766$19h1md
                '"not a list"
                g$ls$9764$19h1md)
              (void))
            (if (not (null? g$ls*$9765$19h1md))
              ((case-lambda
                 ((g$n$9767$19h1md)
                  (for-each
                    (case-lambda
                      ((g$x$9768$19h1md)
                       (begin
                         (if (not (list? g$x$9768$19h1md))
                           (assertion-violation
                             g$who$9766$19h1md
                             '"not a list"
                             g$x$9768$19h1md)
                           (void))
                         (if (not (= (length g$x$9768$19h1md) g$n$9767$19h1md))
                           (assertion-violation
                             g$who$9766$19h1md
                             '"length mismatch"
                             g$ls$9764$19h1md
                             g$x$9768$19h1md)
                           (void)))))
                    g$ls*$9765$19h1md)))
               (length g$ls$9764$19h1md))
              (void))
            (apply
              map
              g$proc$9763$19h1md
              g$ls$9764$19h1md
              g$ls*$9765$19h1md))))))
   (g$syntax-transformer$7958$19h1md
     g$syntax-transformer$11397$19h1md
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$9769$19h1md
                     (case-lambda
                       ((g$src$9829$19h1md
                          g$e$9830$19h1md
                          g$r$9831$19h1md
                          g$maps$9832$19h1md
                          g$ellipsis?$9833$19h1md
                          g$vec?$9834$19h1md)
                        ((case-lambda
                           ((g$t$9835$19h1md)
                            ((case-lambda
                               ((g$ls/false$9836$19h1md)
                                (if (if g$ls/false$9836$19h1md
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$9837$19h1md)
                                             (g$ellipsis?$9833$19h1md
                                               g$dots$9837$19h1md)))
                                          g$ls/false$9836$19h1md))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$9838$19h1md)
                                       (g$syntax-violation$8061$19h1md
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$9829$19h1md)))
                                    g$ls/false$9836$19h1md)
                                  ((case-lambda
                                     ((g$t$9839$19h1md)
                                      ((case-lambda
                                         ((g$ls/false$9840$19h1md)
                                          (if (if g$ls/false$9840$19h1md
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$9841$19h1md)
                                                       (g$id?$7674$19h1md
                                                         g$id$9841$19h1md)))
                                                    g$ls/false$9840$19h1md))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$9842$19h1md)
                                                 ((case-lambda
                                                    ((g$label$9843$19h1md)
                                                     ((case-lambda
                                                        ((g$b$9844$19h1md)
                                                         ((case-lambda
                                                            (()
                                                             (if (eq? (g$binding-type$7691$19h1md
                                                                        g$b$9844$19h1md)
                                                                      'syntax)
                                                               (call-with-values
                                                                 (case-lambda
                                                                   (()
                                                                    ((case-lambda
                                                                       ((g$var.lev$9847$19h1md)
                                                                        (g$gen-ref$9770$19h1md
                                                                          g$src$9829$19h1md
                                                                          (car g$var.lev$9847$19h1md)
                                                                          (cdr g$var.lev$9847$19h1md)
                                                                          g$maps$9832$19h1md)))
                                                                     (g$binding-value$7692$19h1md
                                                                       g$b$9844$19h1md))))
                                                                 (case-lambda
                                                                   ((g$var$9848$19h1md
                                                                      g$maps$9849$19h1md)
                                                                    ((case-lambda
                                                                       ((g$maps$9850$19h1md
                                                                          g$var$9851$19h1md)
                                                                        (values
                                                                          (list
                                                                            'ref
                                                                            g$var$9851$19h1md)
                                                                          g$maps$9850$19h1md)))
                                                                     g$maps$9849$19h1md
                                                                     g$var$9848$19h1md))))
                                                               (values
                                                                 (list
                                                                   'quote
                                                                   g$e$9830$19h1md)
                                                                 g$maps$9832$19h1md)))))))
                                                      (g$label->binding$7689$19h1md
                                                        g$label$9843$19h1md
                                                        g$r$9831$19h1md))))
                                                  (g$id->label$7687$19h1md
                                                    g$e$9830$19h1md))))
                                              g$ls/false$9840$19h1md)
                                            ((case-lambda
                                               ((g$t$9852$19h1md)
                                                ((case-lambda
                                                   ((g$ls/false$9853$19h1md)
                                                    (if (if g$ls/false$9853$19h1md
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$9854$19h1md
                                                                   g$e$9855$19h1md)
                                                                 (g$ellipsis?$9833$19h1md
                                                                   g$dots$9854$19h1md)))
                                                              g$ls/false$9853$19h1md))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$9856$19h1md
                                                             g$e$9857$19h1md)
                                                           (if g$vec?$9834$19h1md
                                                             (g$syntax-violation$8061$19h1md
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$9829$19h1md)
                                                             (g$gen-syntax$9769$19h1md
                                                               g$src$9829$19h1md
                                                               g$e$9857$19h1md
                                                               g$r$9831$19h1md
                                                               g$maps$9832$19h1md
                                                               (case-lambda
                                                                 ((g$x$9858$19h1md)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$9853$19h1md)
                                                      ((case-lambda
                                                         ((g$t$9859$19h1md)
                                                          ((case-lambda
                                                             ((g$ls/false$9860$19h1md)
                                                              (if (if g$ls/false$9860$19h1md
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$9861$19h1md
                                                                             g$dots$9862$19h1md
                                                                             g$y$9863$19h1md)
                                                                           (g$ellipsis?$9833$19h1md
                                                                             g$dots$9862$19h1md)))
                                                                        g$ls/false$9860$19h1md))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$9864$19h1md
                                                                       g$dots$9865$19h1md
                                                                       g$y$9866$19h1md)
                                                                     ((letrec ((g$f$9867$19h1md
                                                                                 (case-lambda
                                                                                   ((g$y$9868$19h1md
                                                                                      g$k$9869$19h1md)
                                                                                    ((case-lambda
                                                                                       ((g$t$9870$19h1md)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9871$19h1md)
                                                                                            (if g$ls/false$9871$19h1md
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$9869$19h1md
                                                                                                     g$maps$9832$19h1md)))
                                                                                                g$ls/false$9871$19h1md)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9872$19h1md)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9873$19h1md)
                                                                                                      (if (if g$ls/false$9873$19h1md
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$9874$19h1md
                                                                                                                     g$y$9875$19h1md)
                                                                                                                   (g$ellipsis?$9833$19h1md
                                                                                                                     g$dots$9874$19h1md)))
                                                                                                                g$ls/false$9873$19h1md))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$9876$19h1md
                                                                                                               g$y$9877$19h1md)
                                                                                                             (g$f$9867$19h1md
                                                                                                               g$y$9877$19h1md
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$9878$19h1md)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$9869$19h1md
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$9878$19h1md))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$9881$19h1md
                                                                                                                         g$maps$9882$19h1md)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$9883$19h1md
                                                                                                                             g$x$9884$19h1md)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$9883$19h1md))
                                                                                                                             (g$syntax-violation$8061$19h1md
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$9829$19h1md)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$9772$19h1md
                                                                                                                                 g$x$9884$19h1md
                                                                                                                                 (car g$maps$9883$19h1md))
                                                                                                                               (cdr g$maps$9883$19h1md)))))
                                                                                                                        g$maps$9882$19h1md
                                                                                                                        g$x$9881$19h1md)))))))))
                                                                                                          g$ls/false$9873$19h1md)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9885$19h1md)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9886$19h1md)
                                                                                                                (if g$ls/false$9886$19h1md
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$9769$19h1md
                                                                                                                              g$src$9829$19h1md
                                                                                                                              g$y$9868$19h1md
                                                                                                                              g$r$9831$19h1md
                                                                                                                              g$maps$9832$19h1md
                                                                                                                              g$ellipsis?$9833$19h1md
                                                                                                                              g$vec?$9834$19h1md)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$9889$19h1md
                                                                                                                              g$maps$9890$19h1md)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$9891$19h1md
                                                                                                                                  g$y$9892$19h1md)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$9869$19h1md
                                                                                                                                       g$maps$9891$19h1md)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$9895$19h1md
                                                                                                                                       g$maps$9896$19h1md)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$9897$19h1md
                                                                                                                                           g$x$9898$19h1md)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$9771$19h1md
                                                                                                                                             g$x$9898$19h1md
                                                                                                                                             g$y$9892$19h1md)
                                                                                                                                           g$maps$9897$19h1md)))
                                                                                                                                      g$maps$9896$19h1md
                                                                                                                                      g$x$9895$19h1md))))))
                                                                                                                             g$maps$9890$19h1md
                                                                                                                             g$y$9889$19h1md))))))
                                                                                                                    g$ls/false$9886$19h1md)
                                                                                                                  (g$syntax-violation$8061$19h1md
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9885$19h1md))))
                                                                                                             (g$syntax-dispatch$7952$19h1md
                                                                                                               g$t$9885$19h1md
                                                                                                               '_))))
                                                                                                         g$t$9872$19h1md))))
                                                                                                   (g$syntax-dispatch$7952$19h1md
                                                                                                     g$t$9872$19h1md
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$9870$19h1md))))
                                                                                         (g$syntax-dispatch$7952$19h1md
                                                                                           g$t$9870$19h1md
                                                                                           '()))))
                                                                                     g$y$9868$19h1md)))))
                                                                        g$f$9867$19h1md)
                                                                      g$y$9866$19h1md
                                                                      (case-lambda
                                                                        ((g$maps$9899$19h1md)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$9769$19h1md
                                                                                g$src$9829$19h1md
                                                                                g$x$9864$19h1md
                                                                                g$r$9831$19h1md
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$9899$19h1md)
                                                                                g$ellipsis?$9833$19h1md
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$9902$19h1md
                                                                                g$maps$9903$19h1md)
                                                                              ((case-lambda
                                                                                 ((g$maps$9904$19h1md
                                                                                    g$x$9905$19h1md)
                                                                                  (if (null?
                                                                                        (car g$maps$9904$19h1md))
                                                                                    (g$syntax-violation$8061$19h1md
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$9829$19h1md)
                                                                                    (values
                                                                                      (g$gen-map$9773$19h1md
                                                                                        g$x$9905$19h1md
                                                                                        (car g$maps$9904$19h1md))
                                                                                      (cdr g$maps$9904$19h1md)))))
                                                                               g$maps$9903$19h1md
                                                                               g$x$9902$19h1md)))))))))
                                                                  g$ls/false$9860$19h1md)
                                                                ((case-lambda
                                                                   ((g$t$9906$19h1md)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9907$19h1md)
                                                                        (if g$ls/false$9907$19h1md
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$9908$19h1md
                                                                                 g$y$9909$19h1md)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$9769$19h1md
                                                                                      g$src$9829$19h1md
                                                                                      g$x$9908$19h1md
                                                                                      g$r$9831$19h1md
                                                                                      g$maps$9832$19h1md
                                                                                      g$ellipsis?$9833$19h1md
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$9912$19h1md
                                                                                      g$maps$9913$19h1md)
                                                                                    ((case-lambda
                                                                                       ((g$maps$9914$19h1md
                                                                                          g$xnew$9915$19h1md)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$9769$19h1md
                                                                                               g$src$9829$19h1md
                                                                                               g$y$9909$19h1md
                                                                                               g$r$9831$19h1md
                                                                                               g$maps$9914$19h1md
                                                                                               g$ellipsis?$9833$19h1md
                                                                                               g$vec?$9834$19h1md)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$9918$19h1md
                                                                                               g$maps$9919$19h1md)
                                                                                             ((case-lambda
                                                                                                ((g$maps$9920$19h1md
                                                                                                   g$ynew$9921$19h1md)
                                                                                                 (values
                                                                                                   (g$gen-cons$9774$19h1md
                                                                                                     g$e$9830$19h1md
                                                                                                     g$x$9908$19h1md
                                                                                                     g$y$9909$19h1md
                                                                                                     g$xnew$9915$19h1md
                                                                                                     g$ynew$9921$19h1md)
                                                                                                   g$maps$9920$19h1md)))
                                                                                              g$maps$9919$19h1md
                                                                                              g$ynew$9918$19h1md))))))
                                                                                     g$maps$9913$19h1md
                                                                                     g$xnew$9912$19h1md))))))
                                                                            g$ls/false$9907$19h1md)
                                                                          ((case-lambda
                                                                             ((g$t$9922$19h1md)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9923$19h1md)
                                                                                  (if g$ls/false$9923$19h1md
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$9924$19h1md)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$9769$19h1md
                                                                                                g$src$9829$19h1md
                                                                                                g$ls$9924$19h1md
                                                                                                g$r$9831$19h1md
                                                                                                g$maps$9832$19h1md
                                                                                                g$ellipsis?$9833$19h1md
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$9927$19h1md
                                                                                                g$maps$9928$19h1md)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$9929$19h1md
                                                                                                    g$lsnew$9930$19h1md)
                                                                                                  (values
                                                                                                    (g$gen-vector$9775$19h1md
                                                                                                      g$e$9830$19h1md
                                                                                                      g$ls$9924$19h1md
                                                                                                      g$lsnew$9930$19h1md)
                                                                                                    g$maps$9929$19h1md)))
                                                                                               g$maps$9928$19h1md
                                                                                               g$lsnew$9927$19h1md))))))
                                                                                      g$ls/false$9923$19h1md)
                                                                                    ((case-lambda
                                                                                       ((g$t$9931$19h1md)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9932$19h1md)
                                                                                            (if g$ls/false$9932$19h1md
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$9830$19h1md)
                                                                                                     g$maps$9832$19h1md)))
                                                                                                g$ls/false$9932$19h1md)
                                                                                              (g$syntax-violation$8061$19h1md
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9931$19h1md))))
                                                                                         (g$syntax-dispatch$7952$19h1md
                                                                                           g$t$9931$19h1md
                                                                                           '_))))
                                                                                     g$t$9922$19h1md))))
                                                                               (g$syntax-dispatch$7952$19h1md
                                                                                 g$t$9922$19h1md
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9906$19h1md))))
                                                                     (g$syntax-dispatch$7952$19h1md
                                                                       g$t$9906$19h1md
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9859$19h1md))))
                                                           (g$syntax-dispatch$7952$19h1md
                                                             g$t$9859$19h1md
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$9852$19h1md))))
                                                 (g$syntax-dispatch$7952$19h1md
                                                   g$t$9852$19h1md
                                                   '(any any)))))
                                             g$t$9839$19h1md))))
                                       (g$syntax-dispatch$7952$19h1md
                                         g$t$9839$19h1md
                                         'any))))
                                   g$t$9835$19h1md))))
                             (g$syntax-dispatch$7952$19h1md
                               g$t$9835$19h1md
                               'any))))
                         g$e$9830$19h1md))))
                   (g$gen-ref$9770$19h1md
                     (case-lambda
                       ((g$src$9816$19h1md
                          g$var$9817$19h1md
                          g$level$9818$19h1md
                          g$maps$9819$19h1md)
                        (if (= g$level$9818$19h1md '0)
                          (values g$var$9817$19h1md g$maps$9819$19h1md)
                          (if (null? g$maps$9819$19h1md)
                            (g$syntax-violation$8061$19h1md
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$9816$19h1md)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$9770$19h1md
                                   g$src$9816$19h1md
                                   g$var$9817$19h1md
                                   (- g$level$9818$19h1md '1)
                                   (cdr g$maps$9819$19h1md))))
                              (case-lambda
                                ((g$outer-var$9822$19h1md
                                   g$outer-maps$9823$19h1md)
                                 ((case-lambda
                                    ((g$outer-maps$9824$19h1md
                                       g$outer-var$9825$19h1md)
                                     ((case-lambda
                                        ((g$t$9826$19h1md)
                                         (if g$t$9826$19h1md
                                           ((case-lambda
                                              ((g$b$9827$19h1md)
                                               (values
                                                 (cdr g$b$9827$19h1md)
                                                 g$maps$9819$19h1md)))
                                            g$t$9826$19h1md)
                                           ((case-lambda
                                              ((g$inner-var$9828$19h1md)
                                               (values
                                                 g$inner-var$9828$19h1md
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$9825$19h1md
                                                       g$inner-var$9828$19h1md)
                                                     (car g$maps$9819$19h1md))
                                                   g$outer-maps$9824$19h1md))))
                                            (g$gen-lexical$7618$19h1md 'tmp)))))
                                      (assq
                                        g$outer-var$9825$19h1md
                                        (car g$maps$9819$19h1md)))))
                                  g$outer-maps$9823$19h1md
                                  g$outer-var$9822$19h1md)))))))))
                   (g$gen-append$9771$19h1md
                     (case-lambda
                       ((g$x$9814$19h1md g$y$9815$19h1md)
                        (if (equal? g$y$9815$19h1md ''())
                          g$x$9814$19h1md
                          (list 'append g$x$9814$19h1md g$y$9815$19h1md)))))
                   (g$gen-mappend$9772$19h1md
                     (case-lambda
                       ((g$e$9812$19h1md g$map-env$9813$19h1md)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$9773$19h1md
                            g$e$9812$19h1md
                            g$map-env$9813$19h1md)))))
                   (g$gen-map$9773$19h1md
                     (case-lambda
                       ((g$e$9803$19h1md g$map-env$9804$19h1md)
                        ((case-lambda
                           ((g$formals$9805$19h1md g$actuals$9806$19h1md)
                            (if (eq? (car g$e$9803$19h1md) 'ref)
                              (car g$actuals$9806$19h1md)
                              (if (g$for-all$5804$19h1md
                                    (case-lambda
                                      ((g$x$9807$19h1md)
                                       (if (eq? (car g$x$9807$19h1md) 'ref)
                                         (begin
                                           '#f
                                           (memq
                                             (g$cadr$5323$19h1md
                                               g$x$9807$19h1md)
                                             g$formals$9805$19h1md))
                                         '#f)))
                                    (cdr g$e$9803$19h1md))
                                ((case-lambda
                                   ((g$args$9808$19h1md)
                                    (cons
                                      'map
                                      (cons
                                        (list 'primitive (car g$e$9803$19h1md))
                                        g$args$9808$19h1md))))
                                 (map ((case-lambda
                                         ((g$r$9809$19h1md)
                                          (case-lambda
                                            ((g$x$9810$19h1md)
                                             (cdr (assq
                                                    (g$cadr$5323$19h1md
                                                      g$x$9810$19h1md)
                                                    g$r$9809$19h1md))))))
                                       (map cons
                                            g$formals$9805$19h1md
                                            g$actuals$9806$19h1md))
                                      (cdr g$e$9803$19h1md)))
                                (g$cons*$5806$19h1md
                                  'map
                                  (list
                                    'lambda
                                    g$formals$9805$19h1md
                                    g$e$9803$19h1md)
                                  g$actuals$9806$19h1md)))))
                         (map cdr g$map-env$9804$19h1md)
                         (map (case-lambda
                                ((g$x$9811$19h1md)
                                 (list 'ref (car g$x$9811$19h1md))))
                              g$map-env$9804$19h1md)))))
                   (g$gen-cons$9774$19h1md
                     (case-lambda
                       ((g$e$9795$19h1md
                          g$x$9796$19h1md
                          g$y$9797$19h1md
                          g$xnew$9798$19h1md
                          g$ynew$9799$19h1md)
                        ((case-lambda
                           ((g$t$9800$19h1md)
                            (if (memv g$t$9800$19h1md '(quote))
                              (if (eq? (car g$xnew$9798$19h1md) 'quote)
                                ((case-lambda
                                   ((g$xnew$9801$19h1md g$ynew$9802$19h1md)
                                    (if (if (eq? g$xnew$9801$19h1md
                                                 g$x$9796$19h1md)
                                          (begin
                                            '#f
                                            (eq? g$ynew$9802$19h1md
                                                 g$y$9797$19h1md))
                                          '#f)
                                      (list 'quote g$e$9795$19h1md)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$9801$19h1md
                                          g$ynew$9802$19h1md)))))
                                 (g$cadr$5323$19h1md g$xnew$9798$19h1md)
                                 (g$cadr$5323$19h1md g$ynew$9799$19h1md))
                                (if (null?
                                      (g$cadr$5323$19h1md g$ynew$9799$19h1md))
                                  (list 'list g$xnew$9798$19h1md)
                                  (list
                                    'cons
                                    g$xnew$9798$19h1md
                                    g$ynew$9799$19h1md)))
                              (if (memv g$t$9800$19h1md '(list))
                                (cons
                                  'list
                                  (cons
                                    g$xnew$9798$19h1md
                                    (cdr g$ynew$9799$19h1md)))
                                (list
                                  'cons
                                  g$xnew$9798$19h1md
                                  g$ynew$9799$19h1md)))))
                         (car g$ynew$9799$19h1md)))))
                   (g$gen-vector$9775$19h1md
                     (case-lambda
                       ((g$e$9792$19h1md g$ls$9793$19h1md g$lsnew$9794$19h1md)
                        (if (eq? (car g$lsnew$9794$19h1md) 'quote)
                          (if (eq? (g$cadr$5323$19h1md g$lsnew$9794$19h1md)
                                   g$ls$9793$19h1md)
                            (list 'quote g$e$9792$19h1md)
                            (list
                              'quote
                              (list->vector
                                (g$cadr$5323$19h1md g$lsnew$9794$19h1md))))
                          (if (eq? (car g$lsnew$9794$19h1md) 'list)
                            (cons 'vector (cdr g$lsnew$9794$19h1md))
                            (list 'list->vector g$lsnew$9794$19h1md))))))
                   (g$regen$9776$19h1md
                     (case-lambda
                       ((g$x$9789$19h1md)
                        ((case-lambda
                           ((g$t$9790$19h1md)
                            (if (memv g$t$9790$19h1md '(ref))
                              (g$cadr$5323$19h1md g$x$9789$19h1md)
                              (if (memv g$t$9790$19h1md '(primitive))
                                (list
                                  'primitive
                                  (g$cadr$5323$19h1md g$x$9789$19h1md))
                                (if (memv g$t$9790$19h1md '(quote))
                                  (list
                                    'quote
                                    (g$cadr$5323$19h1md g$x$9789$19h1md))
                                  (if (memv g$t$9790$19h1md '(lambda))
                                    (g$build-lambda$7605$19h1md
                                      '#f
                                      (g$cadr$5323$19h1md g$x$9789$19h1md)
                                      (g$regen$9776$19h1md
                                        (g$caddr$5329$19h1md g$x$9789$19h1md)))
                                    (if (memv g$t$9790$19h1md '(map))
                                      ((case-lambda
                                         ((g$ls$9791$19h1md)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$9791$19h1md)))
                                       (map g$regen$9776$19h1md
                                            (cdr g$x$9789$19h1md)))
                                      (cons
                                        (list 'primitive (car g$x$9789$19h1md))
                                        (map g$regen$9776$19h1md
                                             (cdr g$x$9789$19h1md))))))))))
                         (car g$x$9789$19h1md))))))
           (case-lambda
             ((g$e$9777$19h1md g$r$9778$19h1md g$mr$9779$19h1md)
              ((case-lambda
                 ((g$t$9780$19h1md)
                  ((case-lambda
                     ((g$ls/false$9781$19h1md)
                      (if g$ls/false$9781$19h1md
                        (apply
                          (case-lambda
                            ((g$x$9782$19h1md)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$9769$19h1md
                                    g$e$9777$19h1md
                                    g$x$9782$19h1md
                                    g$r$9778$19h1md
                                    '()
                                    g$ellipsis?$7953$19h1md
                                    '#f)))
                               (case-lambda
                                 ((g$e$9785$19h1md g$maps$9786$19h1md)
                                  ((case-lambda
                                     ((g$maps$9787$19h1md g$e$9788$19h1md)
                                      (g$regen$9776$19h1md g$e$9788$19h1md)))
                                   g$maps$9786$19h1md
                                   g$e$9785$19h1md))))))
                          g$ls/false$9781$19h1md)
                        (g$syntax-violation$8061$19h1md
                          '#f
                          '"invalid syntax"
                          g$t$9780$19h1md))))
                   (g$syntax-dispatch$7952$19h1md g$t$9780$19h1md '(_ any)))))
               g$e$9777$19h1md))))))))
   (g$core-macro-transformer$7959$19h1md
     g$core-macro-transformer$11398$19h1md
     (case-lambda
       ((g$name$9933$19h1md)
        ((case-lambda
           ((g$t$9934$19h1md)
            (if (memv g$t$9934$19h1md '(quote))
              g$quote-transformer$7912$19h1md
              (if (memv g$t$9934$19h1md '(lambda))
                g$lambda-transformer$7914$19h1md
                (if (memv g$t$9934$19h1md '(case-lambda))
                  g$case-lambda-transformer$7913$19h1md
                  (if (memv g$t$9934$19h1md '(letrec))
                    g$letrec-transformer$7902$19h1md
                    (if (memv g$t$9934$19h1md '(letrec*))
                      g$letrec*-transformer$7903$19h1md
                      (if (memv g$t$9934$19h1md '(if))
                        g$if-transformer$7910$19h1md
                        (if (memv g$t$9934$19h1md '(foreign-call))
                          g$foreign-call-transformer$7950$19h1md
                          (if (memv g$t$9934$19h1md '(syntax-case))
                            g$syntax-case-transformer$7956$19h1md
                            (if (memv g$t$9934$19h1md '(syntax))
                              g$syntax-transformer$7958$19h1md
                              (if (memv g$t$9934$19h1md '(type-descriptor))
                                g$type-descriptor-transformer$7905$19h1md
                                (if (memv
                                      g$t$9934$19h1md
                                      '(record-type-descriptor))
                                  g$record-type-descriptor-transformer$7906$19h1md
                                  (if (memv
                                        g$t$9934$19h1md
                                        '(record-constructor-descriptor))
                                    g$record-constructor-descriptor-transformer$7907$19h1md
                                    (if (memv
                                          g$t$9934$19h1md
                                          '(fluid-let-syntax))
                                      g$fluid-let-syntax-transformer$7904$19h1md
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$9933$19h1md))))))))))))))))
         g$name$9933$19h1md))))
   (g$file-options-macro$7960$19h1md
     g$file-options-macro$11399$19h1md
     (case-lambda
       ((g$x$9935$19h1md)
        (letrec* ((g$valid-option?$9936$19h1md
                    (case-lambda
                      ((g$x$9941$19h1md)
                       (if (g$id?$7674$19h1md g$x$9941$19h1md)
                         (begin
                           '#f
                           (memq
                             (g$id->sym$7675$19h1md g$x$9941$19h1md)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$9937$19h1md)
              ((case-lambda
                 ((g$ls/false$9938$19h1md)
                  (if (if g$ls/false$9938$19h1md
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$9939$19h1md)
                               (if (g$for-all$5804$19h1md
                                     g$valid-option?$9936$19h1md
                                     g$opt*$9939$19h1md)
                                 (begin
                                   '#f
                                   (g$file-options-spec$6943$19h1md
                                     (map g$id->sym$7675$19h1md
                                          g$opt*$9939$19h1md)))
                                 '#f)))
                            g$ls/false$9938$19h1md))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$9940$19h1md)
                         (g$bless$7915$19h1md
                           (list
                             'quote
                             (g$file-options-spec$6943$19h1md
                               (map g$id->sym$7675$19h1md
                                    g$opt*$9940$19h1md))))))
                      g$ls/false$9938$19h1md)
                    (g$syntax-violation$8061$19h1md
                      '#f
                      '"invalid syntax"
                      g$t$9937$19h1md))))
               (g$syntax-dispatch$7952$19h1md
                 g$t$9937$19h1md
                 '(_ . each-any)))))
           g$x$9935$19h1md)))))
   (g$symbol-macro$7961$19h1md
     g$symbol-macro$11400$19h1md
     (case-lambda
       ((g$x$9942$19h1md g$set$9943$19h1md)
        ((case-lambda
           ((g$t$9944$19h1md)
            ((case-lambda
               ((g$ls/false$9945$19h1md)
                (if (if g$ls/false$9945$19h1md
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$9946$19h1md)
                             (if (g$id?$7674$19h1md g$name$9946$19h1md)
                               (begin
                                 '#f
                                 (memq
                                   (g$id->sym$7675$19h1md g$name$9946$19h1md)
                                   g$set$9943$19h1md))
                               '#f)))
                          g$ls/false$9945$19h1md))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$9947$19h1md)
                       (g$bless$7915$19h1md (list 'quote g$name$9947$19h1md))))
                    g$ls/false$9945$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$9944$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$9944$19h1md '(_ any)))))
         g$x$9942$19h1md))))
   (g$macro-transformer$7962$19h1md
     g$macro-transformer$11401$19h1md
     (case-lambda
       ((g$x$9948$19h1md)
        (if (procedure? g$x$9948$19h1md)
          g$x$9948$19h1md
          (if (symbol? g$x$9948$19h1md)
            ((case-lambda
               ((g$t$9949$19h1md)
                (if (memv g$t$9949$19h1md '(define-record-type))
                  g$define-record-type-macro$7946$19h1md
                  (if (memv g$t$9949$19h1md '(define-struct))
                    g$define-struct-macro$7945$19h1md
                    (if (memv g$t$9949$19h1md '(include))
                      g$include-macro$7940$19h1md
                      (if (memv g$t$9949$19h1md '(cond))
                        g$cond-macro$7938$19h1md
                        (if (memv g$t$9949$19h1md '(let))
                          g$let-macro$7918$19h1md
                          (if (memv g$t$9949$19h1md '(do))
                            g$do-macro$7934$19h1md
                            (if (memv g$t$9949$19h1md '(or))
                              g$or-macro$7936$19h1md
                              (if (memv g$t$9949$19h1md '(and))
                                g$and-macro$7937$19h1md
                                (if (memv g$t$9949$19h1md '(let*))
                                  g$let*-macro$7935$19h1md
                                  (if (memv g$t$9949$19h1md '(let-values))
                                    g$let-values-macro$7919$19h1md
                                    (if (memv g$t$9949$19h1md '(let*-values))
                                      g$let*-values-macro$7920$19h1md
                                      (if (memv g$t$9949$19h1md '(syntax-rules))
                                        g$syntax-rules-macro$7942$19h1md
                                        (if (memv g$t$9949$19h1md '(quasiquote))
                                          g$quasiquote-macro$7943$19h1md
                                          (if (memv
                                                g$t$9949$19h1md
                                                '(quasisyntax))
                                            g$quasisyntax-macro$7944$19h1md
                                            (if (memv
                                                  g$t$9949$19h1md
                                                  '(with-syntax))
                                              g$with-syntax-macro$7916$19h1md
                                              (if (memv g$t$9949$19h1md '(when))
                                                g$when-macro$7908$19h1md
                                                (if (memv
                                                      g$t$9949$19h1md
                                                      '(unless))
                                                  g$unless-macro$7909$19h1md
                                                  (if (memv
                                                        g$t$9949$19h1md
                                                        '(case))
                                                    g$case-macro$7911$19h1md
                                                    (if (memv
                                                          g$t$9949$19h1md
                                                          '(identifier-syntax))
                                                      g$identifier-syntax-macro$7933$19h1md
                                                      (if (memv
                                                            g$t$9949$19h1md
                                                            '(time))
                                                        g$time-macro$7929$19h1md
                                                        (if (memv
                                                              g$t$9949$19h1md
                                                              '(delay))
                                                          g$delay-macro$7930$19h1md
                                                          (if (memv
                                                                g$t$9949$19h1md
                                                                '(assert))
                                                            g$assert-macro$7931$19h1md
                                                            (if (memv
                                                                  g$t$9949$19h1md
                                                                  '(endianness))
                                                              g$endianness-macro$7932$19h1md
                                                              (if (memv
                                                                    g$t$9949$19h1md
                                                                    '(guard))
                                                                g$guard-macro$7927$19h1md
                                                                (if (memv
                                                                      g$t$9949$19h1md
                                                                      '(define-enumeration))
                                                                  g$define-enumeration-macro$7928$19h1md
                                                                  (if (memv
                                                                        g$t$9949$19h1md
                                                                        '(trace-lambda))
                                                                    g$trace-lambda-macro$7921$19h1md
                                                                    (if (memv
                                                                          g$t$9949$19h1md
                                                                          '(trace-define))
                                                                      g$trace-define-macro$7922$19h1md
                                                                      (if (memv
                                                                            g$t$9949$19h1md
                                                                            '(trace-define-syntax))
                                                                        g$trace-define-syntax-macro$7923$19h1md
                                                                        (if (memv
                                                                              g$t$9949$19h1md
                                                                              '(trace-let-syntax))
                                                                          g$trace-let-syntax-macro$7925$19h1md
                                                                          (if (memv
                                                                                g$t$9949$19h1md
                                                                                '(trace-letrec-syntax))
                                                                            g$trace-letrec-syntax-macro$7926$19h1md
                                                                            (if (memv
                                                                                  g$t$9949$19h1md
                                                                                  '(define-condition-type))
                                                                              g$define-condition-type-macro$7947$19h1md
                                                                              (if (memv
                                                                                    g$t$9949$19h1md
                                                                                    '(parameterize))
                                                                                g$parameterize-macro$7949$19h1md
                                                                                (if (memv
                                                                                      g$t$9949$19h1md
                                                                                      '(include-into))
                                                                                  g$include-into-macro$7941$19h1md
                                                                                  (if (memv
                                                                                        g$t$9949$19h1md
                                                                                        '(eol-style))
                                                                                    (case-lambda
                                                                                      ((g$x$9950$19h1md)
                                                                                       (g$symbol-macro$7961$19h1md
                                                                                         g$x$9950$19h1md
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (memv
                                                                                          g$t$9949$19h1md
                                                                                          '(error-handling-mode))
                                                                                      (case-lambda
                                                                                        ((g$x$9951$19h1md)
                                                                                         (g$symbol-macro$7961$19h1md
                                                                                           g$x$9951$19h1md
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (memv
                                                                                            g$t$9949$19h1md
                                                                                            '(buffer-mode))
                                                                                        (case-lambda
                                                                                          ((g$x$9952$19h1md)
                                                                                           (g$symbol-macro$7961$19h1md
                                                                                             g$x$9952$19h1md
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (memv
                                                                                              g$t$9949$19h1md
                                                                                              '(file-options))
                                                                                          g$file-options-macro$7960$19h1md
                                                                                          (if (memv
                                                                                                g$t$9949$19h1md
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$7948$19h1md
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$9948$19h1md)))))))))))))))))))))))))))))))))))))))))
             g$x$9948$19h1md)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$9948$19h1md))))))
   (g$local-macro-transformer$7963$19h1md
     g$local-macro-transformer$11402$19h1md
     (case-lambda ((g$x$9953$19h1md) (car g$x$9953$19h1md))))
   (g$do-macro-call$7964$19h1md
     g$do-macro-call$11403$19h1md
     (case-lambda
       ((g$transformer$9954$19h1md g$expr$9955$19h1md)
        ((case-lambda
           ((g$out$9956$19h1md)
            (begin
              ((letrec ((g$f$9957$19h1md
                          (case-lambda
                            ((g$x$9958$19h1md)
                             (if (not (g$stx?$7646$19h1md g$x$9958$19h1md))
                               (if (pair? g$x$9958$19h1md)
                                 (begin
                                   (g$f$9957$19h1md (car g$x$9958$19h1md))
                                   (g$f$9957$19h1md (cdr g$x$9958$19h1md)))
                                 (if (vector? g$x$9958$19h1md)
                                   (vector-for-each
                                     g$f$9957$19h1md
                                     g$x$9958$19h1md)
                                   (if (symbol? g$x$9958$19h1md)
                                     (g$syntax-violation$8061$19h1md
                                       '#f
                                       '"raw symbol encountered in output of macro"
                                       g$expr$9955$19h1md
                                       g$x$9958$19h1md)
                                     (void))))
                               (void))))))
                 g$f$9957$19h1md)
               g$out$9956$19h1md)
              (g$add-mark$7663$19h1md
                (g$gen-mark$7658$19h1md)
                g$out$9956$19h1md
                g$expr$9955$19h1md))))
         (g$transformer$9954$19h1md
           (g$add-mark$7663$19h1md
             g$anti-mark$7659$19h1md
             g$expr$9955$19h1md
             '#f))))))
   (g$chi-macro$7965$19h1md
     g$chi-macro$11404$19h1md
     (case-lambda
       ((g$p$9959$19h1md g$e$9960$19h1md)
        (g$do-macro-call$7964$19h1md
          (g$macro-transformer$7962$19h1md g$p$9959$19h1md)
          g$e$9960$19h1md))))
   (g$chi-local-macro$7966$19h1md
     g$chi-local-macro$11405$19h1md
     (case-lambda
       ((g$p$9961$19h1md g$e$9962$19h1md)
        (g$do-macro-call$7964$19h1md
          (g$local-macro-transformer$7963$19h1md g$p$9961$19h1md)
          g$e$9962$19h1md))))
   (g$chi-global-macro$7967$19h1md
     g$chi-global-macro$11406$19h1md
     (case-lambda
       ((g$p$9963$19h1md g$e$9964$19h1md)
        ((case-lambda
           ((g$lib$9965$19h1md g$loc$9966$19h1md)
            (begin
              (g$visit-library$7490$19h1md g$lib$9965$19h1md)
              ((case-lambda
                 ((g$x$9967$19h1md)
                  ((case-lambda
                     ((g$transformer$9968$19h1md)
                      (g$do-macro-call$7964$19h1md
                        g$transformer$9968$19h1md
                        g$e$9964$19h1md)))
                   (if (procedure? g$x$9967$19h1md)
                     g$x$9967$19h1md
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$9967$19h1md)))))
               (symbol-value g$loc$9966$19h1md)))))
         (car g$p$9963$19h1md)
         (cdr g$p$9963$19h1md)))))
   (g$chi-expr*$7968$19h1md
     g$chi-expr*$11407$19h1md
     (case-lambda
       ((g$e*$9969$19h1md g$r$9970$19h1md g$mr$9971$19h1md)
        (if (null? g$e*$9969$19h1md)
          '()
          ((case-lambda
             ((g$e$9972$19h1md)
              (cons
                g$e$9972$19h1md
                (g$chi-expr*$7968$19h1md
                  (cdr g$e*$9969$19h1md)
                  g$r$9970$19h1md
                  g$mr$9971$19h1md))))
           (g$chi-expr$7970$19h1md
             (car g$e*$9969$19h1md)
             g$r$9970$19h1md
             g$mr$9971$19h1md))))))
   (g$chi-application$7969$19h1md
     g$chi-application$11408$19h1md
     (case-lambda
       ((g$e$9973$19h1md g$r$9974$19h1md g$mr$9975$19h1md)
        ((case-lambda
           ((g$t$9976$19h1md)
            ((case-lambda
               ((g$ls/false$9977$19h1md)
                (if g$ls/false$9977$19h1md
                  (apply
                    (case-lambda
                      ((g$rator$9978$19h1md g$rands$9979$19h1md)
                       ((case-lambda
                          ((g$rator$9980$19h1md)
                           (cons
                             g$rator$9980$19h1md
                             (g$chi-expr*$7968$19h1md
                               g$rands$9979$19h1md
                               g$r$9974$19h1md
                               g$mr$9975$19h1md))))
                        (g$chi-expr$7970$19h1md
                          g$rator$9978$19h1md
                          g$r$9974$19h1md
                          g$mr$9975$19h1md))))
                    g$ls/false$9977$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$9976$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$9976$19h1md
               '(any . each-any)))))
         g$e$9973$19h1md))))
   (g$chi-expr$7970$19h1md
     g$chi-expr$11409$19h1md
     (case-lambda
       ((g$e$9981$19h1md g$r$9982$19h1md g$mr$9983$19h1md)
        (call-with-values
          (case-lambda
            (() (g$syntax-type$7694$19h1md g$e$9981$19h1md g$r$9982$19h1md)))
          (case-lambda
            ((g$type$9987$19h1md g$value$9988$19h1md g$kwd$9989$19h1md)
             ((case-lambda
                ((g$kwd$9990$19h1md g$value$9991$19h1md g$type$9992$19h1md)
                 ((case-lambda
                    ((g$t$9993$19h1md)
                     (if (memv g$t$9993$19h1md '(core-macro))
                       ((case-lambda
                          ((g$transformer$9994$19h1md)
                           (g$transformer$9994$19h1md
                             g$e$9981$19h1md
                             g$r$9982$19h1md
                             g$mr$9983$19h1md)))
                        (g$core-macro-transformer$7959$19h1md
                          g$value$9991$19h1md))
                       (if (memv g$t$9993$19h1md '(global))
                         ((case-lambda
                            ((g$lib$9995$19h1md)
                             ((case-lambda
                                ((g$loc$9996$19h1md)
                                 ((case-lambda
                                    (()
                                     (begin
                                       ((g$inv-collector$8004$19h1md)
                                        g$lib$9995$19h1md)
                                       g$loc$9996$19h1md))))))
                              (cdr g$value$9991$19h1md))))
                          (car g$value$9991$19h1md))
                         (if (memv g$t$9993$19h1md '(core-prim))
                           ((case-lambda
                              ((g$name$9997$19h1md)
                               (list 'primitive g$name$9997$19h1md)))
                            g$value$9991$19h1md)
                           (if (memv g$t$9993$19h1md '(call))
                             (g$chi-application$7969$19h1md
                               g$e$9981$19h1md
                               g$r$9982$19h1md
                               g$mr$9983$19h1md)
                             (if (memv g$t$9993$19h1md '(lexical))
                               ((case-lambda
                                  ((g$lex$9998$19h1md) g$lex$9998$19h1md))
                                (g$lexical-var$7896$19h1md g$value$9991$19h1md))
                               (if (memv
                                     g$t$9993$19h1md
                                     '(global-macro global-macro!))
                                 (g$chi-expr$7970$19h1md
                                   (g$chi-global-macro$7967$19h1md
                                     g$value$9991$19h1md
                                     g$e$9981$19h1md)
                                   g$r$9982$19h1md
                                   g$mr$9983$19h1md)
                                 (if (memv
                                       g$t$9993$19h1md
                                       '(local-macro local-macro!))
                                   (g$chi-expr$7970$19h1md
                                     (g$chi-local-macro$7966$19h1md
                                       g$value$9991$19h1md
                                       g$e$9981$19h1md)
                                     g$r$9982$19h1md
                                     g$mr$9983$19h1md)
                                   (if (memv g$t$9993$19h1md '(macro macro!))
                                     (g$chi-expr$7970$19h1md
                                       (g$chi-macro$7965$19h1md
                                         g$value$9991$19h1md
                                         g$e$9981$19h1md)
                                       g$r$9982$19h1md
                                       g$mr$9983$19h1md)
                                     (if (memv g$t$9993$19h1md '(constant))
                                       ((case-lambda
                                          ((g$datum$9999$19h1md)
                                           (list 'quote g$datum$9999$19h1md)))
                                        g$value$9991$19h1md)
                                       (if (memv g$t$9993$19h1md '(set!))
                                         (g$chi-set!$7971$19h1md
                                           g$e$9981$19h1md
                                           g$r$9982$19h1md
                                           g$mr$9983$19h1md)
                                         (if (memv g$t$9993$19h1md '(begin))
                                           ((case-lambda
                                              ((g$t$10000$19h1md)
                                               ((case-lambda
                                                  ((g$ls/false$10001$19h1md)
                                                   (if g$ls/false$10001$19h1md
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$10002$19h1md
                                                            g$x*$10003$19h1md)
                                                          (g$build-sequence$7608$19h1md
                                                            '#f
                                                            (g$chi-expr*$7968$19h1md
                                                              (cons
                                                                g$x$10002$19h1md
                                                                g$x*$10003$19h1md)
                                                              g$r$9982$19h1md
                                                              g$mr$9983$19h1md))))
                                                       g$ls/false$10001$19h1md)
                                                     (g$syntax-violation$8061$19h1md
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$10000$19h1md))))
                                                (g$syntax-dispatch$7952$19h1md
                                                  g$t$10000$19h1md
                                                  '(_ any . each-any)))))
                                            g$e$9981$19h1md)
                                           (if (memv
                                                 g$t$9993$19h1md
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$10004$19h1md)
                                                 ((case-lambda
                                                    ((g$ls/false$10005$19h1md)
                                                     (if (if g$ls/false$10005$19h1md
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$10006$19h1md
                                                                    g$xrhs*$10007$19h1md
                                                                    g$xbody$10008$19h1md
                                                                    g$xbody*$10009$19h1md)
                                                                  (if (not (g$valid-bound-ids?$7679$19h1md
                                                                             g$xlhs*$10006$19h1md))
                                                                    (g$syntax-violation$8061$19h1md
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$9981$19h1md)
                                                                    (void))))
                                                               g$ls/false$10005$19h1md))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$10010$19h1md
                                                              g$xrhs*$10011$19h1md
                                                              g$xbody$10012$19h1md
                                                              g$xbody*$10013$19h1md)
                                                            ((case-lambda
                                                               ((g$xlab*$10014$19h1md)
                                                                ((case-lambda
                                                                   ((g$xrib$10015$19h1md)
                                                                    ((case-lambda
                                                                       ((g$xb*$10016$19h1md)
                                                                        ((case-lambda
                                                                           (()
                                                                            (g$build-sequence$7608$19h1md
                                                                              '#f
                                                                              (g$chi-expr*$7968$19h1md
                                                                                (map (case-lambda
                                                                                       ((g$x$10017$19h1md)
                                                                                        (g$add-subst$7664$19h1md
                                                                                          g$xrib$10015$19h1md
                                                                                          g$x$10017$19h1md)))
                                                                                     (cons
                                                                                       g$xbody$10012$19h1md
                                                                                       g$xbody*$10013$19h1md))
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$10014$19h1md
                                                                                       g$xb*$10016$19h1md)
                                                                                  g$r$9982$19h1md)
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$10014$19h1md
                                                                                       g$xb*$10016$19h1md)
                                                                                  g$mr$9983$19h1md))))))))
                                                                     (map (case-lambda
                                                                            ((g$x$10018$19h1md)
                                                                             (g$make-eval-transformer$7706$19h1md
                                                                               (g$expand-transformer$7997$19h1md
                                                                                 (if (eq? g$type$9992$19h1md
                                                                                          'let-syntax)
                                                                                   g$x$10018$19h1md
                                                                                   (g$add-subst$7664$19h1md
                                                                                     g$xrib$10015$19h1md
                                                                                     g$x$10018$19h1md))
                                                                                 g$mr$9983$19h1md))))
                                                                          g$xrhs*$10011$19h1md))))
                                                                 (g$make-full-rib$7642$19h1md
                                                                   g$xlhs*$10010$19h1md
                                                                   g$xlab*$10014$19h1md))))
                                                             (map g$gen-label$7620$19h1md
                                                                  g$xlhs*$10010$19h1md))))
                                                         g$ls/false$10005$19h1md)
                                                       (g$syntax-violation$8061$19h1md
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$10004$19h1md))))
                                                  (g$syntax-dispatch$7952$19h1md
                                                    g$t$10004$19h1md
                                                    '(_ #(each (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$9981$19h1md)
                                             (if (memv
                                                   g$t$9993$19h1md
                                                   '(displaced-lexical))
                                               (g$syntax-violation$8061$19h1md
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$9981$19h1md)
                                               (if (memv
                                                     g$t$9993$19h1md
                                                     '(syntax))
                                                 (g$syntax-violation$8061$19h1md
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$9981$19h1md)
                                                 (if (memv
                                                       g$t$9993$19h1md
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$8061$19h1md
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$10019$19h1md)
                                                           (if (memv
                                                                 g$t$10019$19h1md
                                                                 '(define))
                                                             '"a definition"
                                                             (if (memv
                                                                   g$t$10019$19h1md
                                                                   '(define-syntax))
                                                               '"a define-syntax"
                                                               (if (memv
                                                                     g$t$10019$19h1md
                                                                     '(module))
                                                                 '"a module definition"
                                                                 (if (memv
                                                                       g$t$10019$19h1md
                                                                       '(library))
                                                                   '"a library definition"
                                                                   (if (memv
                                                                         g$t$10019$19h1md
                                                                         '(import))
                                                                     '"an import declaration"
                                                                     '"a non-expression")))))))
                                                        g$type$9992$19h1md)
                                                       '" was found where an expression was expected")
                                                     g$e$9981$19h1md)
                                                   (if (memv
                                                         g$t$9993$19h1md
                                                         '(mutable))
                                                     (g$syntax-violation$8061$19h1md
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$9981$19h1md)
                                                     (g$syntax-violation$8061$19h1md
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$9981$19h1md)))))))))))))))))))
                  g$type$9992$19h1md)))
              g$kwd$9989$19h1md
              g$value$9988$19h1md
              g$type$9987$19h1md)))))))
   (g$chi-set!$7971$19h1md
     g$chi-set!$11410$19h1md
     (case-lambda
       ((g$e$10020$19h1md g$r$10021$19h1md g$mr$10022$19h1md)
        ((case-lambda
           ((g$t$10023$19h1md)
            ((case-lambda
               ((g$ls/false$10024$19h1md)
                (if (if g$ls/false$10024$19h1md
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$10025$19h1md g$v$10026$19h1md)
                             (g$id?$7674$19h1md g$x$10025$19h1md)))
                          g$ls/false$10024$19h1md))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$10027$19h1md g$v$10028$19h1md)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$7694$19h1md
                              g$x$10027$19h1md
                              g$r$10021$19h1md)))
                         (case-lambda
                           ((g$type$10032$19h1md
                              g$value$10033$19h1md
                              g$kwd$10034$19h1md)
                            ((case-lambda
                               ((g$kwd$10035$19h1md
                                  g$value$10036$19h1md
                                  g$type$10037$19h1md)
                                ((case-lambda
                                   ((g$t$10038$19h1md)
                                    (if (memv g$t$10038$19h1md '(lexical))
                                      (begin
                                        (g$set-lexical-mutable!$7898$19h1md
                                          g$value$10036$19h1md
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$7896$19h1md
                                            g$value$10036$19h1md)
                                          (g$chi-expr$7970$19h1md
                                            g$v$10028$19h1md
                                            g$r$10021$19h1md
                                            g$mr$10022$19h1md)))
                                      (if (memv g$t$10038$19h1md '(core-prim))
                                        (g$syntax-violation$8061$19h1md
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$10020$19h1md)
                                        (if (memv g$t$10038$19h1md '(global))
                                          (g$syntax-violation$8061$19h1md
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$10020$19h1md)
                                          (if (memv
                                                g$t$10038$19h1md
                                                '(global-macro!))
                                            (g$chi-expr$7970$19h1md
                                              (g$chi-global-macro$7967$19h1md
                                                g$value$10036$19h1md
                                                g$e$10020$19h1md)
                                              g$r$10021$19h1md
                                              g$mr$10022$19h1md)
                                            (if (memv
                                                  g$t$10038$19h1md
                                                  '(local-macro!))
                                              (g$chi-expr$7970$19h1md
                                                (g$chi-local-macro$7966$19h1md
                                                  g$value$10036$19h1md
                                                  g$e$10020$19h1md)
                                                g$r$10021$19h1md
                                                g$mr$10022$19h1md)
                                              (if (memv
                                                    g$t$10038$19h1md
                                                    '(mutable))
                                                (g$syntax-violation$8061$19h1md
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$10020$19h1md)
                                                (g$syntax-violation$8061$19h1md
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$10020$19h1md)))))))))
                                 g$type$10037$19h1md)))
                             g$kwd$10034$19h1md
                             g$value$10033$19h1md
                             g$type$10032$19h1md))))))
                    g$ls/false$10024$19h1md)
                  (g$syntax-violation$8061$19h1md
                    '#f
                    '"invalid syntax"
                    g$t$10023$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$10023$19h1md '(_ any any)))))
         g$e$10020$19h1md))))
   (g$verify-formals$7972$19h1md
     g$verify-formals$11411$19h1md
     (case-lambda
       ((g$fmls$10039$19h1md g$stx$10040$19h1md)
        ((case-lambda
           ((g$t$10041$19h1md)
            ((case-lambda
               ((g$ls/false$10042$19h1md)
                (if g$ls/false$10042$19h1md
                  (apply
                    (case-lambda
                      ((g$x*$10043$19h1md)
                       (if (not (g$valid-bound-ids?$7679$19h1md
                                  g$x*$10043$19h1md))
                         (g$invalid-fmls-error$7917$19h1md
                           g$stx$10040$19h1md
                           g$fmls$10039$19h1md)
                         (void))))
                    g$ls/false$10042$19h1md)
                  ((case-lambda
                     ((g$t$10044$19h1md)
                      ((case-lambda
                         ((g$ls/false$10045$19h1md)
                          (if g$ls/false$10045$19h1md
                            (apply
                              (case-lambda
                                ((g$x*$10046$19h1md g$x$10047$19h1md)
                                 (if (not (g$valid-bound-ids?$7679$19h1md
                                            (cons
                                              g$x$10047$19h1md
                                              g$x*$10046$19h1md)))
                                   (g$invalid-fmls-error$7917$19h1md
                                     g$stx$10040$19h1md
                                     g$fmls$10039$19h1md)
                                   (void))))
                              g$ls/false$10045$19h1md)
                            ((case-lambda
                               ((g$t$10048$19h1md)
                                ((case-lambda
                                   ((g$ls/false$10049$19h1md)
                                    (if g$ls/false$10049$19h1md
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$8061$19h1md
                                             '#f
                                             '"invalid syntax"
                                             g$stx$10040$19h1md)))
                                        g$ls/false$10049$19h1md)
                                      (g$syntax-violation$8061$19h1md
                                        '#f
                                        '"invalid syntax"
                                        g$t$10048$19h1md))))
                                 (g$syntax-dispatch$7952$19h1md
                                   g$t$10048$19h1md
                                   '_))))
                             g$t$10044$19h1md))))
                       (g$syntax-dispatch$7952$19h1md
                         g$t$10044$19h1md
                         '#(each+ any () any)))))
                   g$t$10041$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$10041$19h1md 'each-any))))
         g$fmls$10039$19h1md))))
   (g$chi-lambda-clause$7973$19h1md
     g$chi-lambda-clause$11412$19h1md
     (case-lambda
       ((g$stx$10050$19h1md
          g$fmls$10051$19h1md
          g$body*$10052$19h1md
          g$r$10053$19h1md
          g$mr$10054$19h1md)
        ((case-lambda
           ((g$t$10055$19h1md)
            ((case-lambda
               ((g$ls/false$10056$19h1md)
                (if g$ls/false$10056$19h1md
                  (apply
                    (case-lambda
                      ((g$x*$10057$19h1md)
                       (begin
                         (g$verify-formals$7972$19h1md
                           g$fmls$10051$19h1md
                           g$stx$10050$19h1md)
                         ((case-lambda
                            ((g$lex*$10058$19h1md g$lab*$10059$19h1md)
                             (values
                               g$lex*$10058$19h1md
                               (g$chi-internal$7981$19h1md
                                 (g$add-subst$7664$19h1md
                                   (g$make-full-rib$7642$19h1md
                                     g$x*$10057$19h1md
                                     g$lab*$10059$19h1md)
                                   g$body*$10052$19h1md)
                                 (g$add-lexicals$7900$19h1md
                                   g$lab*$10059$19h1md
                                   g$lex*$10058$19h1md
                                   g$r$10053$19h1md)
                                 g$mr$10054$19h1md))))
                          (map g$gen-lexical$7618$19h1md g$x*$10057$19h1md)
                          (map g$gen-label$7620$19h1md g$x*$10057$19h1md)))))
                    g$ls/false$10056$19h1md)
                  ((case-lambda
                     ((g$t$10060$19h1md)
                      ((case-lambda
                         ((g$ls/false$10061$19h1md)
                          (if g$ls/false$10061$19h1md
                            (apply
                              (case-lambda
                                ((g$x*$10062$19h1md g$x$10063$19h1md)
                                 (begin
                                   (g$verify-formals$7972$19h1md
                                     g$fmls$10051$19h1md
                                     g$stx$10050$19h1md)
                                   ((case-lambda
                                      ((g$lex*$10064$19h1md
                                         g$lab*$10065$19h1md
                                         g$lex$10066$19h1md
                                         g$lab$10067$19h1md)
                                       (values
                                         (append
                                           g$lex*$10064$19h1md
                                           g$lex$10066$19h1md)
                                         (g$chi-internal$7981$19h1md
                                           (g$add-subst$7664$19h1md
                                             (g$make-full-rib$7642$19h1md
                                               (cons
                                                 g$x$10063$19h1md
                                                 g$x*$10062$19h1md)
                                               (cons
                                                 g$lab$10067$19h1md
                                                 g$lab*$10065$19h1md))
                                             g$body*$10052$19h1md)
                                           (g$add-lexicals$7900$19h1md
                                             (cons
                                               g$lab$10067$19h1md
                                               g$lab*$10065$19h1md)
                                             (cons
                                               g$lex$10066$19h1md
                                               g$lex*$10064$19h1md)
                                             g$r$10053$19h1md)
                                           g$mr$10054$19h1md))))
                                    (map g$gen-lexical$7618$19h1md
                                         g$x*$10062$19h1md)
                                    (map g$gen-label$7620$19h1md
                                         g$x*$10062$19h1md)
                                    (g$gen-lexical$7618$19h1md g$x$10063$19h1md)
                                    (g$gen-label$7620$19h1md
                                      g$x$10063$19h1md)))))
                              g$ls/false$10061$19h1md)
                            ((case-lambda
                               ((g$t$10068$19h1md)
                                ((case-lambda
                                   ((g$ls/false$10069$19h1md)
                                    (if g$ls/false$10069$19h1md
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$8061$19h1md
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$10051$19h1md)))
                                        g$ls/false$10069$19h1md)
                                      (g$syntax-violation$8061$19h1md
                                        '#f
                                        '"invalid syntax"
                                        g$t$10068$19h1md))))
                                 (g$syntax-dispatch$7952$19h1md
                                   g$t$10068$19h1md
                                   '_))))
                             g$t$10060$19h1md))))
                       (g$syntax-dispatch$7952$19h1md
                         g$t$10060$19h1md
                         '#(each+ any () any)))))
                   g$t$10055$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$10055$19h1md 'each-any))))
         g$fmls$10051$19h1md))))
   (g$chi-lambda-clause*$7974$19h1md
     g$chi-lambda-clause*$11413$19h1md
     (case-lambda
       ((g$stx$10070$19h1md
          g$fmls*$10071$19h1md
          g$body**$10072$19h1md
          g$r$10073$19h1md
          g$mr$10074$19h1md)
        (if (null? g$fmls*$10071$19h1md)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$7973$19h1md
                 g$stx$10070$19h1md
                 (car g$fmls*$10071$19h1md)
                 (car g$body**$10072$19h1md)
                 g$r$10073$19h1md
                 g$mr$10074$19h1md)))
            (case-lambda
              ((g$a$10077$19h1md g$b$10078$19h1md)
               ((case-lambda
                  ((g$b$10079$19h1md g$a$10080$19h1md)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$7974$19h1md
                          g$stx$10070$19h1md
                          (cdr g$fmls*$10071$19h1md)
                          (cdr g$body**$10072$19h1md)
                          g$r$10073$19h1md
                          g$mr$10074$19h1md)))
                     (case-lambda
                       ((g$a*$10083$19h1md g$b*$10084$19h1md)
                        ((case-lambda
                           ((g$b*$10085$19h1md g$a*$10086$19h1md)
                            (values
                              (cons g$a$10080$19h1md g$a*$10086$19h1md)
                              (cons g$b$10079$19h1md g$b*$10085$19h1md))))
                         g$b*$10084$19h1md
                         g$a*$10083$19h1md))))))
                g$b$10078$19h1md
                g$a$10077$19h1md))))))))
   (g$chi-defun$7975$19h1md
     g$chi-defun$11414$19h1md
     (case-lambda
       ((g$x$10087$19h1md g$r$10088$19h1md g$mr$10089$19h1md)
        ((case-lambda
           ((g$fmls$10090$19h1md g$body*$10091$19h1md)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$7973$19h1md
                   g$fmls$10090$19h1md
                   g$fmls$10090$19h1md
                   g$body*$10091$19h1md
                   g$r$10088$19h1md
                   g$mr$10089$19h1md)))
              (case-lambda
                ((g$fmls$10094$19h1md g$body$10095$19h1md)
                 ((case-lambda
                    ((g$body$10096$19h1md g$fmls$10097$19h1md)
                     (g$build-lambda$7605$19h1md
                       '#f
                       g$fmls$10097$19h1md
                       g$body$10096$19h1md)))
                  g$body$10095$19h1md
                  g$fmls$10094$19h1md))))))
         (car g$x$10087$19h1md)
         (cdr g$x$10087$19h1md)))))
   (g$chi-rhs$7976$19h1md
     g$chi-rhs$11415$19h1md
     (case-lambda
       ((g$rhs$10098$19h1md g$r$10099$19h1md g$mr$10100$19h1md)
        ((case-lambda
           ((g$t$10101$19h1md)
            (if (memv g$t$10101$19h1md '(defun))
              (g$chi-defun$7975$19h1md
                (cdr g$rhs$10098$19h1md)
                g$r$10099$19h1md
                g$mr$10100$19h1md)
              (if (memv g$t$10101$19h1md '(expr))
                ((case-lambda
                   ((g$expr$10102$19h1md)
                    (g$chi-expr$7970$19h1md
                      g$expr$10102$19h1md
                      g$r$10099$19h1md
                      g$mr$10100$19h1md)))
                 (cdr g$rhs$10098$19h1md))
                (if (memv g$t$10101$19h1md '(top-expr))
                  ((case-lambda
                     ((g$expr$10103$19h1md)
                      (g$build-sequence$7608$19h1md
                        '#f
                        (list
                          (g$chi-expr$7970$19h1md
                            g$expr$10103$19h1md
                            g$r$10099$19h1md
                            g$mr$10100$19h1md)
                          (g$build-void$7609$19h1md)))))
                   (cdr g$rhs$10098$19h1md))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$10098$19h1md))))))
         (car g$rhs$10098$19h1md)))))
   (g$expand-interaction-rhs*/init*$7977$19h1md
     g$expand-interaction-rhs*/init*$11416$19h1md
     (case-lambda
       ((g$lhs*$10104$19h1md
          g$rhs*$10105$19h1md
          g$init*$10106$19h1md
          g$r$10107$19h1md
          g$mr$10108$19h1md)
        ((letrec ((g$f$10109$19h1md
                    (case-lambda
                      ((g$lhs*$10110$19h1md g$rhs*$10111$19h1md)
                       (if (null? g$lhs*$10110$19h1md)
                         (map (case-lambda
                                ((g$x$10112$19h1md)
                                 (g$chi-expr$7970$19h1md
                                   g$x$10112$19h1md
                                   g$r$10107$19h1md
                                   g$mr$10108$19h1md)))
                              g$init*$10106$19h1md)
                         ((case-lambda
                            ((g$lhs$10113$19h1md g$rhs$10114$19h1md)
                             ((case-lambda
                                ((g$t$10115$19h1md)
                                 (if (memv g$t$10115$19h1md '(defun))
                                   ((case-lambda
                                      ((g$rhs$10116$19h1md)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$10113$19h1md
                                           g$rhs$10116$19h1md)
                                         (g$f$10109$19h1md
                                           (cdr g$lhs*$10110$19h1md)
                                           (cdr g$rhs*$10111$19h1md)))))
                                    (g$chi-defun$7975$19h1md
                                      (cdr g$rhs$10114$19h1md)
                                      g$r$10107$19h1md
                                      g$mr$10108$19h1md))
                                   (if (memv g$t$10115$19h1md '(expr))
                                     ((case-lambda
                                        ((g$rhs$10117$19h1md)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$10113$19h1md
                                             g$rhs$10117$19h1md)
                                           (g$f$10109$19h1md
                                             (cdr g$lhs*$10110$19h1md)
                                             (cdr g$rhs*$10111$19h1md)))))
                                      (g$chi-expr$7970$19h1md
                                        (cdr g$rhs$10114$19h1md)
                                        g$r$10107$19h1md
                                        g$mr$10108$19h1md))
                                     (if (memv g$t$10115$19h1md '(top-expr))
                                       ((case-lambda
                                          ((g$e$10118$19h1md)
                                           (cons
                                             g$e$10118$19h1md
                                             (g$f$10109$19h1md
                                               (cdr g$lhs*$10110$19h1md)
                                               (cdr g$rhs*$10111$19h1md)))))
                                        (g$chi-expr$7970$19h1md
                                          (cdr g$rhs$10114$19h1md)
                                          g$r$10107$19h1md
                                          g$mr$10108$19h1md))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$10114$19h1md))))))
                              (car g$rhs$10114$19h1md))))
                          (car g$lhs*$10110$19h1md)
                          (car g$rhs*$10111$19h1md)))))))
           g$f$10109$19h1md)
         g$lhs*$10104$19h1md
         g$rhs*$10105$19h1md))))
   (g$chi-rhs*$7978$19h1md
     g$chi-rhs*$11417$19h1md
     (case-lambda
       ((g$rhs*$10119$19h1md g$r$10120$19h1md g$mr$10121$19h1md)
        ((letrec ((g$f$10122$19h1md
                    (case-lambda
                      ((g$ls$10123$19h1md)
                       (if (null? g$ls$10123$19h1md)
                         '()
                         ((case-lambda
                            ((g$a$10124$19h1md)
                             (cons
                               g$a$10124$19h1md
                               (g$f$10122$19h1md (cdr g$ls$10123$19h1md)))))
                          (g$chi-rhs$7976$19h1md
                            (car g$ls$10123$19h1md)
                            g$r$10120$19h1md
                            g$mr$10121$19h1md)))))))
           g$f$10122$19h1md)
         g$rhs*$10119$19h1md))))
   (g$find-bound=?$7979$19h1md
     g$find-bound=?$11418$19h1md
     (case-lambda
       ((g$x$10125$19h1md g$lhs*$10126$19h1md g$rhs*$10127$19h1md)
        (if (null? g$lhs*$10126$19h1md)
          '#f
          (if (g$bound-id=?$7677$19h1md
                g$x$10125$19h1md
                (car g$lhs*$10126$19h1md))
            (car g$rhs*$10127$19h1md)
            (g$find-bound=?$7979$19h1md
              g$x$10125$19h1md
              (cdr g$lhs*$10126$19h1md)
              (cdr g$rhs*$10127$19h1md)))))))
   (g$find-dups$7980$19h1md
     g$find-dups$11419$19h1md
     (case-lambda
       ((g$ls$10128$19h1md)
        ((letrec ((g$f$10129$19h1md
                    (case-lambda
                      ((g$ls$10130$19h1md g$dups$10131$19h1md)
                       (if (null? g$ls$10130$19h1md)
                         g$dups$10131$19h1md
                         ((case-lambda
                            ((g$t$10132$19h1md)
                             (if g$t$10132$19h1md
                               ((case-lambda
                                  ((g$x$10133$19h1md)
                                   (g$f$10129$19h1md
                                     (cdr g$ls$10130$19h1md)
                                     (cons
                                       (list
                                         (car g$ls$10130$19h1md)
                                         g$x$10133$19h1md)
                                       g$dups$10131$19h1md))))
                                g$t$10132$19h1md)
                               (g$f$10129$19h1md
                                 (cdr g$ls$10130$19h1md)
                                 g$dups$10131$19h1md))))
                          (g$find-bound=?$7979$19h1md
                            (car g$ls$10130$19h1md)
                            (cdr g$ls$10130$19h1md)
                            (cdr g$ls$10130$19h1md))))))))
           g$f$10129$19h1md)
         g$ls$10128$19h1md
         '()))))
   (g$chi-internal$7981$19h1md
     g$chi-internal$11420$19h1md
     (case-lambda
       ((g$e*$10134$19h1md g$r$10135$19h1md g$mr$10136$19h1md)
        ((case-lambda
           ((g$rib$10137$19h1md)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$7996$19h1md
                   (map (case-lambda
                          ((g$x$10145$19h1md)
                           (g$add-subst$7664$19h1md
                             g$rib$10137$19h1md
                             g$x$10145$19h1md)))
                        (g$syntax->list$7673$19h1md g$e*$10134$19h1md))
                   g$r$10135$19h1md
                   g$mr$10136$19h1md
                   '()
                   '()
                   '()
                   '()
                   g$rib$10137$19h1md
                   '#f)))
              (case-lambda
                ((g$e*$10146$19h1md
                   g$r$10147$19h1md
                   g$mr$10148$19h1md
                   g$lex*$10149$19h1md
                   g$rhs*$10150$19h1md
                   g$mod**$10151$19h1md
                   g$kwd*$10152$19h1md)
                 ((case-lambda
                    ((g$kwd*$10153$19h1md
                       g$mod**$10154$19h1md
                       g$rhs*$10155$19h1md
                       g$lex*$10156$19h1md
                       g$mr$10157$19h1md
                       g$r$10158$19h1md
                       g$e*$10159$19h1md)
                     (begin
                       (if (null? g$e*$10159$19h1md)
                         (g$syntax-violation$8061$19h1md
                           '#f
                           '"no expression in body"
                           g$e*$10159$19h1md)
                         (void))
                       ((case-lambda
                          ((g$init*$10160$19h1md)
                           ((case-lambda
                              ((g$rhs*$10161$19h1md)
                               ((case-lambda
                                  (()
                                   (g$build-letrec*$7611$19h1md
                                     '#f
                                     (reverse g$lex*$10156$19h1md)
                                     (reverse g$rhs*$10161$19h1md)
                                     (g$build-sequence$7608$19h1md
                                       '#f
                                       g$init*$10160$19h1md)))))))
                            (g$chi-rhs*$7978$19h1md
                              g$rhs*$10155$19h1md
                              g$r$10158$19h1md
                              g$mr$10157$19h1md))))
                        (g$chi-expr*$7968$19h1md
                          (append
                            (apply append (reverse g$mod**$10154$19h1md))
                            g$e*$10159$19h1md)
                          g$r$10158$19h1md
                          g$mr$10157$19h1md)))))
                  g$kwd*$10152$19h1md
                  g$mod**$10151$19h1md
                  g$rhs*$10150$19h1md
                  g$lex*$10149$19h1md
                  g$mr$10148$19h1md
                  g$r$10147$19h1md
                  g$e*$10146$19h1md))))))
         (g$make-empty-rib$7637$19h1md)))))
   (g$parse-module$7982$19h1md
     g$parse-module$11421$19h1md
     (case-lambda
       ((g$e$10162$19h1md)
        ((case-lambda
           ((g$t$10163$19h1md)
            ((case-lambda
               ((g$ls/false$10164$19h1md)
                (if g$ls/false$10164$19h1md
                  (apply
                    (case-lambda
                      ((g$export*$10165$19h1md g$b*$10166$19h1md)
                       (begin
                         (if (not (g$for-all$5804$19h1md
                                    g$id?$7674$19h1md
                                    g$export*$10165$19h1md))
                           (g$syntax-violation$8061$19h1md
                             '#f
                             '"module exports must be identifiers"
                             g$e$10162$19h1md)
                           (void))
                         (values
                           '#f
                           (list->vector g$export*$10165$19h1md)
                           g$b*$10166$19h1md))))
                    g$ls/false$10164$19h1md)
                  ((case-lambda
                     ((g$t$10167$19h1md)
                      ((case-lambda
                         ((g$ls/false$10168$19h1md)
                          (if g$ls/false$10168$19h1md
                            (apply
                              (case-lambda
                                ((g$name$10169$19h1md
                                   g$export*$10170$19h1md
                                   g$b*$10171$19h1md)
                                 (begin
                                   (if (not (g$id?$7674$19h1md
                                              g$name$10169$19h1md))
                                     (g$syntax-violation$8061$19h1md
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$10162$19h1md)
                                     (void))
                                   (if (not (g$for-all$5804$19h1md
                                              g$id?$7674$19h1md
                                              g$export*$10170$19h1md))
                                     (g$syntax-violation$8061$19h1md
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$10162$19h1md)
                                     (void))
                                   (values
                                     g$name$10169$19h1md
                                     (list->vector g$export*$10170$19h1md)
                                     g$b*$10171$19h1md))))
                              g$ls/false$10168$19h1md)
                            (g$syntax-violation$8061$19h1md
                              '#f
                              '"invalid syntax"
                              g$t$10167$19h1md))))
                       (g$syntax-dispatch$7952$19h1md
                         g$t$10167$19h1md
                         '(_ any each-any . each-any)))))
                   g$t$10163$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$10163$19h1md
               '(_ each-any . each-any)))))
         g$e$10162$19h1md))))
   (g$9610$7983$19h1md
     g$9610$11422$19h1md
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$9613$19h1md
       '#t
       '#t
       '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec))))
   (g$9612$7984$19h1md g$9612$11423$19h1md '#f)
   (g$9611$7985$19h1md
     g$9611$11424$19h1md
     (make-record-constructor-descriptor
       g$9610$7983$19h1md
       '#f
       g$9612$7984$19h1md))
   (g$module-interface?$7986$19h1md
     g$module-interface?$11425$19h1md
     (record-predicate g$9610$7983$19h1md))
   (g$make-module-interface$7987$19h1md
     g$make-module-interface$11426$19h1md
     (record-constructor g$9611$7985$19h1md))
   (g$module-interface-first-mark$7988$19h1md
     g$module-interface-first-mark$11427$19h1md
     (record-accessor g$9610$7983$19h1md '0))
   (g$module-interface-exp-id-vec$7989$19h1md
     g$module-interface-exp-id-vec$11428$19h1md
     (record-accessor g$9610$7983$19h1md '1))
   (g$module-interface-exp-lab-vec$7990$19h1md
     g$module-interface-exp-lab-vec$11429$19h1md
     (record-accessor g$9610$7983$19h1md '2))
   (g$set-module-interface-first-mark!$7991$19h1md
     g$set-module-interface-first-mark!$11430$19h1md
     (record-mutator g$9610$7983$19h1md '0))
   (g$set-module-interface-exp-id-vec!$7992$19h1md
     g$set-module-interface-exp-id-vec!$11431$19h1md
     (record-mutator g$9610$7983$19h1md '1))
   (g$set-module-interface-exp-lab-vec!$7993$19h1md
     g$set-module-interface-exp-lab-vec!$11432$19h1md
     (record-mutator g$9610$7983$19h1md '2))
   (g$module-interface-exp-id*$7994$19h1md
     g$module-interface-exp-id*$11433$19h1md
     (case-lambda
       ((g$iface$10172$19h1md g$id$10173$19h1md)
        (letrec* ((g$diff-marks$10174$19h1md
                    (case-lambda
                      ((g$ls$10178$19h1md g$x$10179$19h1md)
                       (begin
                         (if (null? g$ls$10178$19h1md)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$10180$19h1md)
                             (if (eq? g$a$10180$19h1md g$x$10179$19h1md)
                               '()
                               (cons
                                 g$a$10180$19h1md
                                 (g$diff-marks$10174$19h1md
                                   (cdr g$ls$10178$19h1md)
                                   g$x$10179$19h1md)))))
                          (car g$ls$10178$19h1md)))))))
          ((case-lambda
             ((g$diff$10175$19h1md g$id-vec$10176$19h1md)
              (if (null? g$diff$10175$19h1md)
                g$id-vec$10176$19h1md
                (vector-map
                  (case-lambda
                    ((g$x$10177$19h1md)
                     (g$make-stx$7647$19h1md
                       (g$stx-expr$7648$19h1md g$x$10177$19h1md)
                       (append
                         g$diff$10175$19h1md
                         (g$stx-mark*$7649$19h1md g$x$10177$19h1md))
                       '()
                       '())))
                  g$id-vec$10176$19h1md))))
           (g$diff-marks$10174$19h1md
             (g$stx-mark*$7649$19h1md g$id$10173$19h1md)
             (g$module-interface-first-mark$7988$19h1md g$iface$10172$19h1md))
           (g$module-interface-exp-id-vec$7989$19h1md g$iface$10172$19h1md))))))
   (g$chi-internal-module$7995$19h1md
     g$chi-internal-module$11434$19h1md
     (case-lambda
       ((g$e$10181$19h1md
          g$r$10182$19h1md
          g$mr$10183$19h1md
          g$lex*$10184$19h1md
          g$rhs*$10185$19h1md
          g$mod**$10186$19h1md
          g$kwd*$10187$19h1md)
        (call-with-values
          (case-lambda (() (g$parse-module$7982$19h1md g$e$10181$19h1md)))
          (case-lambda
            ((g$name$10191$19h1md g$exp-id*$10192$19h1md g$e*$10193$19h1md)
             ((case-lambda
                ((g$e*$10194$19h1md g$exp-id*$10195$19h1md g$name$10196$19h1md)
                 ((case-lambda
                    ((g$rib$10197$19h1md)
                     ((case-lambda
                        ((g$e*$10198$19h1md)
                         ((case-lambda
                            (()
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$chi-body*$7996$19h1md
                                    g$e*$10198$19h1md
                                    g$r$10182$19h1md
                                    g$mr$10183$19h1md
                                    g$lex*$10184$19h1md
                                    g$rhs*$10185$19h1md
                                    g$mod**$10186$19h1md
                                    g$kwd*$10187$19h1md
                                    g$rib$10197$19h1md
                                    '#f)))
                               (case-lambda
                                 ((g$e*$10206$19h1md
                                    g$r$10207$19h1md
                                    g$mr$10208$19h1md
                                    g$lex*$10209$19h1md
                                    g$rhs*$10210$19h1md
                                    g$mod**$10211$19h1md
                                    g$kwd*$10212$19h1md)
                                  ((case-lambda
                                     ((g$kwd*$10213$19h1md
                                        g$mod**$10214$19h1md
                                        g$rhs*$10215$19h1md
                                        g$lex*$10216$19h1md
                                        g$mr$10217$19h1md
                                        g$r$10218$19h1md
                                        g$e*$10219$19h1md)
                                      ((case-lambda
                                         ((g$exp-lab*$10220$19h1md
                                            g$mod**$10221$19h1md)
                                          (if (not g$name$10196$19h1md)
                                            (values
                                              g$lex*$10216$19h1md
                                              g$rhs*$10215$19h1md
                                              g$exp-id*$10195$19h1md
                                              g$exp-lab*$10220$19h1md
                                              g$r$10218$19h1md
                                              g$mr$10217$19h1md
                                              g$mod**$10221$19h1md
                                              g$kwd*$10213$19h1md)
                                            ((case-lambda
                                               ((g$lab$10222$19h1md
                                                  g$iface$10223$19h1md)
                                                (values
                                                  g$lex*$10216$19h1md
                                                  g$rhs*$10215$19h1md
                                                  (vector g$name$10196$19h1md)
                                                  (vector g$lab$10222$19h1md)
                                                  (cons
                                                    (cons
                                                      g$lab$10222$19h1md
                                                      (cons
                                                        '$module
                                                        g$iface$10223$19h1md))
                                                    g$r$10218$19h1md)
                                                  (cons
                                                    (cons
                                                      g$lab$10222$19h1md
                                                      (cons
                                                        '$module
                                                        g$iface$10223$19h1md))
                                                    g$mr$10217$19h1md)
                                                  g$mod**$10221$19h1md
                                                  g$kwd*$10213$19h1md)))
                                             (g$gen-label$7620$19h1md 'module)
                                             (g$make-module-interface$7987$19h1md
                                               (car (g$stx-mark*$7649$19h1md
                                                      g$name$10196$19h1md))
                                               (vector-map
                                                 (case-lambda
                                                   ((g$x$10224$19h1md)
                                                    (g$make-stx$7647$19h1md
                                                      (g$stx-expr$7648$19h1md
                                                        g$x$10224$19h1md)
                                                      (g$stx-mark*$7649$19h1md
                                                        g$x$10224$19h1md)
                                                      '()
                                                      '())))
                                                 g$exp-id*$10195$19h1md)
                                               g$exp-lab*$10220$19h1md)))))
                                       (vector-map
                                         (case-lambda
                                           ((g$x$10225$19h1md)
                                            ((case-lambda
                                               ((g$t$10226$19h1md)
                                                (if g$t$10226$19h1md
                                                  g$t$10226$19h1md
                                                  (begin
                                                    '#f
                                                    (g$syntax-violation$8061$19h1md
                                                      '#f
                                                      '"cannot find module export"
                                                      g$x$10225$19h1md)))))
                                             (g$id->label$7687$19h1md
                                               (g$make-stx$7647$19h1md
                                                 (g$id->sym$7675$19h1md
                                                   g$x$10225$19h1md)
                                                 (g$stx-mark*$7649$19h1md
                                                   g$x$10225$19h1md)
                                                 (list g$rib$10197$19h1md)
                                                 '())))))
                                         g$exp-id*$10195$19h1md)
                                       (cons
                                         g$e*$10219$19h1md
                                         g$mod**$10214$19h1md))))
                                   g$kwd*$10212$19h1md
                                   g$mod**$10211$19h1md
                                   g$rhs*$10210$19h1md
                                   g$lex*$10209$19h1md
                                   g$mr$10208$19h1md
                                   g$r$10207$19h1md
                                   g$e*$10206$19h1md)))))))))
                      (map (case-lambda
                             ((g$x$10227$19h1md)
                              (g$add-subst$7664$19h1md
                                g$rib$10197$19h1md
                                g$x$10227$19h1md)))
                           (g$syntax->list$7673$19h1md g$e*$10194$19h1md)))))
                  (g$make-empty-rib$7637$19h1md))))
              g$e*$10193$19h1md
              g$exp-id*$10192$19h1md
              g$name$10191$19h1md)))))))
   (g$chi-body*$7996$19h1md
     g$chi-body*$11435$19h1md
     (case-lambda
       ((g$e*$10228$19h1md
          g$r$10229$19h1md
          g$mr$10230$19h1md
          g$lex*$10231$19h1md
          g$rhs*$10232$19h1md
          g$mod**$10233$19h1md
          g$kwd*$10234$19h1md
          g$rib$10235$19h1md
          g$top?$10236$19h1md)
        (if (null? g$e*$10228$19h1md)
          (values
            g$e*$10228$19h1md
            g$r$10229$19h1md
            g$mr$10230$19h1md
            g$lex*$10231$19h1md
            g$rhs*$10232$19h1md
            g$mod**$10233$19h1md
            g$kwd*$10234$19h1md)
          ((case-lambda
             ((g$e$10237$19h1md)
              (call-with-values
                (case-lambda
                  (()
                   (g$syntax-type$7694$19h1md
                     g$e$10237$19h1md
                     g$r$10229$19h1md)))
                (case-lambda
                  ((g$type$10241$19h1md g$value$10242$19h1md g$kwd$10243$19h1md)
                   ((case-lambda
                      ((g$kwd$10244$19h1md
                         g$value$10245$19h1md
                         g$type$10246$19h1md)
                       ((case-lambda
                          ((g$kwd*$10247$19h1md)
                           ((case-lambda
                              ((g$t$10248$19h1md)
                               (if (memv g$t$10248$19h1md '(define))
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$7892$19h1md
                                        g$e$10237$19h1md)))
                                   (case-lambda
                                     ((g$id$10251$19h1md g$rhs$10252$19h1md)
                                      ((case-lambda
                                         ((g$rhs$10253$19h1md g$id$10254$19h1md)
                                          (begin
                                            (if (g$bound-id-member?$7681$19h1md
                                                  g$id$10254$19h1md
                                                  g$kwd*$10247$19h1md)
                                              (g$syntax-violation$8061$19h1md
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$10237$19h1md)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$7622$19h1md
                                                   g$id$10254$19h1md
                                                   g$rib$10235$19h1md)))
                                              (case-lambda
                                                ((g$lab$10257$19h1md
                                                   g$lex$10258$19h1md)
                                                 ((case-lambda
                                                    ((g$lex$10259$19h1md
                                                       g$lab$10260$19h1md)
                                                     (begin
                                                       (g$extend-rib!$7638$19h1md
                                                         g$rib$10235$19h1md
                                                         g$id$10254$19h1md
                                                         g$lab$10260$19h1md)
                                                       (g$chi-body*$7996$19h1md
                                                         (cdr g$e*$10228$19h1md)
                                                         (g$add-lexical$7899$19h1md
                                                           g$lab$10260$19h1md
                                                           g$lex$10259$19h1md
                                                           g$r$10229$19h1md)
                                                         g$mr$10230$19h1md
                                                         (cons
                                                           g$lex$10259$19h1md
                                                           g$lex*$10231$19h1md)
                                                         (cons
                                                           g$rhs$10253$19h1md
                                                           g$rhs*$10232$19h1md)
                                                         g$mod**$10233$19h1md
                                                         g$kwd*$10247$19h1md
                                                         g$rib$10235$19h1md
                                                         g$top?$10236$19h1md))))
                                                  g$lex$10258$19h1md
                                                  g$lab$10257$19h1md)))))))
                                       g$rhs$10252$19h1md
                                       g$id$10251$19h1md))))
                                 (if (memv g$t$10248$19h1md '(define-syntax))
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$7893$19h1md
                                          g$e$10237$19h1md)))
                                     (case-lambda
                                       ((g$id$10263$19h1md g$rhs$10264$19h1md)
                                        ((case-lambda
                                           ((g$rhs$10265$19h1md
                                              g$id$10266$19h1md)
                                            (begin
                                              (if (g$bound-id-member?$7681$19h1md
                                                    g$id$10266$19h1md
                                                    g$kwd*$10247$19h1md)
                                                (g$syntax-violation$8061$19h1md
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$10237$19h1md)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$10267$19h1md
                                                    g$expanded-rhs$10268$19h1md)
                                                  (begin
                                                    (g$extend-rib!$7638$19h1md
                                                      g$rib$10235$19h1md
                                                      g$id$10266$19h1md
                                                      g$lab$10267$19h1md)
                                                    ((case-lambda
                                                       ((g$b$10269$19h1md)
                                                        (g$chi-body*$7996$19h1md
                                                          (cdr g$e*$10228$19h1md)
                                                          (cons
                                                            (cons
                                                              g$lab$10267$19h1md
                                                              g$b$10269$19h1md)
                                                            g$r$10229$19h1md)
                                                          (cons
                                                            (cons
                                                              g$lab$10267$19h1md
                                                              g$b$10269$19h1md)
                                                            g$mr$10230$19h1md)
                                                          g$lex*$10231$19h1md
                                                          g$rhs*$10232$19h1md
                                                          g$mod**$10233$19h1md
                                                          g$kwd*$10247$19h1md
                                                          g$rib$10235$19h1md
                                                          g$top?$10236$19h1md)))
                                                     (g$make-eval-transformer$7706$19h1md
                                                       g$expanded-rhs$10268$19h1md)))))
                                               (g$gen-define-label$7623$19h1md
                                                 g$id$10266$19h1md
                                                 g$rib$10235$19h1md)
                                               (g$expand-transformer$7997$19h1md
                                                 g$rhs$10265$19h1md
                                                 g$mr$10230$19h1md)))))
                                         g$rhs$10264$19h1md
                                         g$id$10263$19h1md))))
                                   (if (memv
                                         g$t$10248$19h1md
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$10270$19h1md)
                                         ((case-lambda
                                            ((g$ls/false$10271$19h1md)
                                             (if (if g$ls/false$10271$19h1md
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$10272$19h1md
                                                            g$xrhs*$10273$19h1md
                                                            g$xbody*$10274$19h1md)
                                                          (if (not (g$valid-bound-ids?$7679$19h1md
                                                                     g$xlhs*$10272$19h1md))
                                                            (g$syntax-violation$8061$19h1md
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$10237$19h1md)
                                                            (void))))
                                                       g$ls/false$10271$19h1md))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$10275$19h1md
                                                      g$xrhs*$10276$19h1md
                                                      g$xbody*$10277$19h1md)
                                                    ((case-lambda
                                                       ((g$xlab*$10278$19h1md)
                                                        ((case-lambda
                                                           ((g$xrib$10279$19h1md)
                                                            ((case-lambda
                                                               ((g$xb*$10280$19h1md)
                                                                ((case-lambda
                                                                   (()
                                                                    (g$chi-body*$7996$19h1md
                                                                      (append
                                                                        (map (case-lambda
                                                                               ((g$x$10281$19h1md)
                                                                                (g$add-subst$7664$19h1md
                                                                                  g$xrib$10279$19h1md
                                                                                  g$x$10281$19h1md)))
                                                                             g$xbody*$10277$19h1md)
                                                                        (cdr g$e*$10228$19h1md))
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$10278$19h1md
                                                                             g$xb*$10280$19h1md)
                                                                        g$r$10229$19h1md)
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$10278$19h1md
                                                                             g$xb*$10280$19h1md)
                                                                        g$mr$10230$19h1md)
                                                                      g$lex*$10231$19h1md
                                                                      g$rhs*$10232$19h1md
                                                                      g$mod**$10233$19h1md
                                                                      g$kwd*$10247$19h1md
                                                                      g$rib$10235$19h1md
                                                                      g$top?$10236$19h1md))))))
                                                             (map (case-lambda
                                                                    ((g$x$10282$19h1md)
                                                                     (g$make-eval-transformer$7706$19h1md
                                                                       (g$expand-transformer$7997$19h1md
                                                                         (if (eq? g$type$10246$19h1md
                                                                                  'let-syntax)
                                                                           g$x$10282$19h1md
                                                                           (g$add-subst$7664$19h1md
                                                                             g$xrib$10279$19h1md
                                                                             g$x$10282$19h1md))
                                                                         g$mr$10230$19h1md))))
                                                                  g$xrhs*$10276$19h1md))))
                                                         (g$make-full-rib$7642$19h1md
                                                           g$xlhs*$10275$19h1md
                                                           g$xlab*$10278$19h1md))))
                                                     (map g$gen-label$7620$19h1md
                                                          g$xlhs*$10275$19h1md))))
                                                 g$ls/false$10271$19h1md)
                                               (g$syntax-violation$8061$19h1md
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$10270$19h1md))))
                                          (g$syntax-dispatch$7952$19h1md
                                            g$t$10270$19h1md
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$10237$19h1md)
                                     (if (memv g$t$10248$19h1md '(begin))
                                       ((case-lambda
                                          ((g$t$10283$19h1md)
                                           ((case-lambda
                                              ((g$ls/false$10284$19h1md)
                                               (if g$ls/false$10284$19h1md
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$10285$19h1md)
                                                      (g$chi-body*$7996$19h1md
                                                        (append
                                                          g$x*$10285$19h1md
                                                          (cdr g$e*$10228$19h1md))
                                                        g$r$10229$19h1md
                                                        g$mr$10230$19h1md
                                                        g$lex*$10231$19h1md
                                                        g$rhs*$10232$19h1md
                                                        g$mod**$10233$19h1md
                                                        g$kwd*$10247$19h1md
                                                        g$rib$10235$19h1md
                                                        g$top?$10236$19h1md)))
                                                   g$ls/false$10284$19h1md)
                                                 (g$syntax-violation$8061$19h1md
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$10283$19h1md))))
                                            (g$syntax-dispatch$7952$19h1md
                                              g$t$10283$19h1md
                                              '(_ . each-any)))))
                                        g$e$10237$19h1md)
                                       (if (memv
                                             g$t$10248$19h1md
                                             '(global-macro global-macro!))
                                         (g$chi-body*$7996$19h1md
                                           (cons
                                             (g$add-subst$7664$19h1md
                                               g$rib$10235$19h1md
                                               (g$chi-global-macro$7967$19h1md
                                                 g$value$10245$19h1md
                                                 g$e$10237$19h1md))
                                             (cdr g$e*$10228$19h1md))
                                           g$r$10229$19h1md
                                           g$mr$10230$19h1md
                                           g$lex*$10231$19h1md
                                           g$rhs*$10232$19h1md
                                           g$mod**$10233$19h1md
                                           g$kwd*$10247$19h1md
                                           g$rib$10235$19h1md
                                           g$top?$10236$19h1md)
                                         (if (memv
                                               g$t$10248$19h1md
                                               '(local-macro local-macro!))
                                           (g$chi-body*$7996$19h1md
                                             (cons
                                               (g$add-subst$7664$19h1md
                                                 g$rib$10235$19h1md
                                                 (g$chi-local-macro$7966$19h1md
                                                   g$value$10245$19h1md
                                                   g$e$10237$19h1md))
                                               (cdr g$e*$10228$19h1md))
                                             g$r$10229$19h1md
                                             g$mr$10230$19h1md
                                             g$lex*$10231$19h1md
                                             g$rhs*$10232$19h1md
                                             g$mod**$10233$19h1md
                                             g$kwd*$10247$19h1md
                                             g$rib$10235$19h1md
                                             g$top?$10236$19h1md)
                                           (if (memv
                                                 g$t$10248$19h1md
                                                 '(macro macro!))
                                             (g$chi-body*$7996$19h1md
                                               (cons
                                                 (g$add-subst$7664$19h1md
                                                   g$rib$10235$19h1md
                                                   (g$chi-macro$7965$19h1md
                                                     g$value$10245$19h1md
                                                     g$e$10237$19h1md))
                                                 (cdr g$e*$10228$19h1md))
                                               g$r$10229$19h1md
                                               g$mr$10230$19h1md
                                               g$lex*$10231$19h1md
                                               g$rhs*$10232$19h1md
                                               g$mod**$10233$19h1md
                                               g$kwd*$10247$19h1md
                                               g$rib$10235$19h1md
                                               g$top?$10236$19h1md)
                                             (if (memv
                                                   g$t$10248$19h1md
                                                   '(module))
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$7995$19h1md
                                                      g$e$10237$19h1md
                                                      g$r$10229$19h1md
                                                      g$mr$10230$19h1md
                                                      g$lex*$10231$19h1md
                                                      g$rhs*$10232$19h1md
                                                      g$mod**$10233$19h1md
                                                      g$kwd*$10247$19h1md)))
                                                 (case-lambda
                                                   ((g$lex*$10294$19h1md
                                                      g$rhs*$10295$19h1md
                                                      g$m-exp-id*$10296$19h1md
                                                      g$m-exp-lab*$10297$19h1md
                                                      g$r$10298$19h1md
                                                      g$mr$10299$19h1md
                                                      g$mod**$10300$19h1md
                                                      g$kwd*$10301$19h1md)
                                                    ((case-lambda
                                                       ((g$kwd*$10302$19h1md
                                                          g$mod**$10303$19h1md
                                                          g$mr$10304$19h1md
                                                          g$r$10305$19h1md
                                                          g$m-exp-lab*$10306$19h1md
                                                          g$m-exp-id*$10307$19h1md
                                                          g$rhs*$10308$19h1md
                                                          g$lex*$10309$19h1md)
                                                        (begin
                                                          (vector-for-each
                                                            (case-lambda
                                                              ((g$id$10310$19h1md
                                                                 g$lab$10311$19h1md)
                                                               (g$extend-rib!$7638$19h1md
                                                                 g$rib$10235$19h1md
                                                                 g$id$10310$19h1md
                                                                 g$lab$10311$19h1md)))
                                                            g$m-exp-id*$10307$19h1md
                                                            g$m-exp-lab*$10306$19h1md)
                                                          (g$chi-body*$7996$19h1md
                                                            (cdr g$e*$10228$19h1md)
                                                            g$r$10305$19h1md
                                                            g$mr$10304$19h1md
                                                            g$lex*$10309$19h1md
                                                            g$rhs*$10308$19h1md
                                                            g$mod**$10303$19h1md
                                                            g$kwd*$10302$19h1md
                                                            g$rib$10235$19h1md
                                                            g$top?$10236$19h1md))))
                                                     g$kwd*$10301$19h1md
                                                     g$mod**$10300$19h1md
                                                     g$mr$10299$19h1md
                                                     g$r$10298$19h1md
                                                     g$m-exp-lab*$10297$19h1md
                                                     g$m-exp-id*$10296$19h1md
                                                     g$rhs*$10295$19h1md
                                                     g$lex*$10294$19h1md))))
                                               (if (memv
                                                     g$t$10248$19h1md
                                                     '(library))
                                                 (begin
                                                   (g$library-expander$8045$19h1md
                                                     (g$stx->datum$7685$19h1md
                                                       g$e$10237$19h1md))
                                                   (g$chi-body*$7996$19h1md
                                                     (cdr g$e*$10228$19h1md)
                                                     g$r$10229$19h1md
                                                     g$mr$10230$19h1md
                                                     g$lex*$10231$19h1md
                                                     g$rhs*$10232$19h1md
                                                     g$mod**$10233$19h1md
                                                     g$kwd*$10247$19h1md
                                                     g$rib$10235$19h1md
                                                     g$top?$10236$19h1md))
                                                 (if (memv
                                                       g$t$10248$19h1md
                                                       '(import))
                                                   (begin
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$10312$19h1md
                                                                     (case-lambda
                                                                       ((g$e$10354$19h1md)
                                                                        ((case-lambda
                                                                           ((g$t$10355$19h1md)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10356$19h1md)
                                                                                (if (if g$ls/false$10356$19h1md
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10357$19h1md)
                                                                                             (g$id?$7674$19h1md
                                                                                               g$id$10357$19h1md)))
                                                                                          g$ls/false$10356$19h1md))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10358$19h1md)
                                                                                       '#t))
                                                                                    g$ls/false$10356$19h1md)
                                                                                  ((case-lambda
                                                                                     ((g$t$10359$19h1md)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10360$19h1md)
                                                                                          (if g$ls/false$10360$19h1md
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$10361$19h1md)
                                                                                                 '#f))
                                                                                              g$ls/false$10360$19h1md)
                                                                                            ((case-lambda
                                                                                               ((g$t$10362$19h1md)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$10363$19h1md)
                                                                                                    (if g$ls/false$10363$19h1md
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$8061$19h1md
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$10354$19h1md)))
                                                                                                        g$ls/false$10363$19h1md)
                                                                                                      (g$syntax-violation$8061$19h1md
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$10362$19h1md))))
                                                                                                 (g$syntax-dispatch$7952$19h1md
                                                                                                   g$t$10362$19h1md
                                                                                                   '_))))
                                                                                             g$t$10359$19h1md))))
                                                                                       (g$syntax-dispatch$7952$19h1md
                                                                                         g$t$10359$19h1md
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$10355$19h1md))))
                                                                             (g$syntax-dispatch$7952$19h1md
                                                                               g$t$10355$19h1md
                                                                               '(_ any)))))
                                                                         g$e$10354$19h1md))))
                                                                   (g$module-import$10313$19h1md
                                                                     (case-lambda
                                                                       ((g$e$10337$19h1md
                                                                          g$r$10338$19h1md)
                                                                        ((case-lambda
                                                                           ((g$t$10339$19h1md)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10340$19h1md)
                                                                                (if (if g$ls/false$10340$19h1md
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10341$19h1md)
                                                                                             (g$id?$7674$19h1md
                                                                                               g$id$10341$19h1md)))
                                                                                          g$ls/false$10340$19h1md))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10342$19h1md)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$7694$19h1md
                                                                                              g$id$10342$19h1md
                                                                                              g$r$10338$19h1md)))
                                                                                         (case-lambda
                                                                                           ((g$type$10346$19h1md
                                                                                              g$value$10347$19h1md
                                                                                              g$kwd$10348$19h1md)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$10349$19h1md
                                                                                                  g$value$10350$19h1md
                                                                                                  g$type$10351$19h1md)
                                                                                                ((case-lambda
                                                                                                   ((g$t$10352$19h1md)
                                                                                                    (if (memv
                                                                                                          g$t$10352$19h1md
                                                                                                          '($module))
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$10353$19h1md)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$7994$19h1md
                                                                                                              g$iface$10353$19h1md
                                                                                                              g$id$10342$19h1md)
                                                                                                            (g$module-interface-exp-lab-vec$7990$19h1md
                                                                                                              g$iface$10353$19h1md))))
                                                                                                       g$value$10350$19h1md)
                                                                                                      (g$syntax-violation$8061$19h1md
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$10337$19h1md))))
                                                                                                 g$type$10351$19h1md)))
                                                                                             g$kwd$10348$19h1md
                                                                                             g$value$10347$19h1md
                                                                                             g$type$10346$19h1md))))))
                                                                                    g$ls/false$10340$19h1md)
                                                                                  (g$syntax-violation$8061$19h1md
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$10339$19h1md))))
                                                                             (g$syntax-dispatch$7952$19h1md
                                                                               g$t$10339$19h1md
                                                                               '(_ any)))))
                                                                         g$e$10337$19h1md))))
                                                                   (g$library-import$10314$19h1md
                                                                     (case-lambda
                                                                       ((g$e$10323$19h1md)
                                                                        ((case-lambda
                                                                           ((g$t$10324$19h1md)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10325$19h1md)
                                                                                (if g$ls/false$10325$19h1md
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$10326$19h1md
                                                                                         g$imp*$10327$19h1md)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$8001$19h1md
                                                                                              (g$syntax->datum$8064$19h1md
                                                                                                g$imp*$10327$19h1md))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$10330$19h1md
                                                                                              g$subst-labels$10331$19h1md)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$10332$19h1md
                                                                                                  g$subst-names$10333$19h1md)
                                                                                                (values
                                                                                                  (vector-map
                                                                                                    (case-lambda
                                                                                                      ((g$name$10334$19h1md)
                                                                                                       (g$datum->stx$7657$19h1md
                                                                                                         g$ctxt$10326$19h1md
                                                                                                         g$name$10334$19h1md)))
                                                                                                    g$subst-names$10333$19h1md)
                                                                                                  g$subst-labels$10332$19h1md)))
                                                                                             g$subst-labels$10331$19h1md
                                                                                             g$subst-names$10330$19h1md))))))
                                                                                    g$ls/false$10325$19h1md)
                                                                                  ((case-lambda
                                                                                     ((g$t$10335$19h1md)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10336$19h1md)
                                                                                          (if g$ls/false$10336$19h1md
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8061$19h1md
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$10323$19h1md)))
                                                                                              g$ls/false$10336$19h1md)
                                                                                            (g$syntax-violation$8061$19h1md
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$10335$19h1md))))
                                                                                       (g$syntax-dispatch$7952$19h1md
                                                                                         g$t$10335$19h1md
                                                                                         '_))))
                                                                                   g$t$10324$19h1md))))
                                                                             (g$syntax-dispatch$7952$19h1md
                                                                               g$t$10324$19h1md
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$10323$19h1md)))))
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (if (g$module-import?$10312$19h1md
                                                                      g$e$10237$19h1md)
                                                                  (g$module-import$10313$19h1md
                                                                    g$e$10237$19h1md
                                                                    g$r$10229$19h1md)
                                                                  (g$library-import$10314$19h1md
                                                                    g$e$10237$19h1md))))
                                                             (case-lambda
                                                               ((g$id*$10317$19h1md
                                                                  g$lab*$10318$19h1md)
                                                                ((case-lambda
                                                                   ((g$lab*$10319$19h1md
                                                                      g$id*$10320$19h1md)
                                                                    (vector-for-each
                                                                      (case-lambda
                                                                        ((g$id$10321$19h1md
                                                                           g$lab$10322$19h1md)
                                                                         (g$extend-rib!$7638$19h1md
                                                                           g$rib$10235$19h1md
                                                                           g$id$10321$19h1md
                                                                           g$lab$10322$19h1md)))
                                                                      g$id*$10320$19h1md
                                                                      g$lab*$10319$19h1md)))
                                                                 g$lab*$10318$19h1md
                                                                 g$id*$10317$19h1md))))))))
                                                     (g$chi-body*$7996$19h1md
                                                       (cdr g$e*$10228$19h1md)
                                                       g$r$10229$19h1md
                                                       g$mr$10230$19h1md
                                                       g$lex*$10231$19h1md
                                                       g$rhs*$10232$19h1md
                                                       g$mod**$10233$19h1md
                                                       g$kwd*$10247$19h1md
                                                       g$rib$10235$19h1md
                                                       g$top?$10236$19h1md))
                                                   (if g$top?$10236$19h1md
                                                     (g$chi-body*$7996$19h1md
                                                       (cdr g$e*$10228$19h1md)
                                                       g$r$10229$19h1md
                                                       g$mr$10230$19h1md
                                                       (cons
                                                         (g$gen-lexical$7618$19h1md
                                                           'dummy)
                                                         g$lex*$10231$19h1md)
                                                       (cons
                                                         (cons
                                                           'top-expr
                                                           g$e$10237$19h1md)
                                                         g$rhs*$10232$19h1md)
                                                       g$mod**$10233$19h1md
                                                       g$kwd*$10247$19h1md
                                                       g$rib$10235$19h1md
                                                       g$top?$10236$19h1md)
                                                     (values
                                                       g$e*$10228$19h1md
                                                       g$r$10229$19h1md
                                                       g$mr$10230$19h1md
                                                       g$lex*$10231$19h1md
                                                       g$rhs*$10232$19h1md
                                                       g$mod**$10233$19h1md
                                                       g$kwd*$10247$19h1md))))))))))))))
                            g$type$10246$19h1md)))
                        (if (g$id?$7674$19h1md g$kwd$10244$19h1md)
                          (cons g$kwd$10244$19h1md g$kwd*$10234$19h1md)
                          g$kwd*$10234$19h1md))))
                    g$kwd$10243$19h1md
                    g$value$10242$19h1md
                    g$type$10241$19h1md))))))
           (car g$e*$10228$19h1md))))))
   (g$expand-transformer$7997$19h1md
     g$expand-transformer$11436$19h1md
     (case-lambda
       ((g$expr$10364$19h1md g$r$10365$19h1md)
        ((case-lambda
           ((g$rtc$10366$19h1md)
            ((case-lambda
               ((g$expanded-rhs$10367$19h1md)
                (begin
                  (for-each
                    ((case-lambda
                       ((g$mark-visit$10368$19h1md)
                        (case-lambda
                          ((g$x$10369$19h1md)
                           (begin
                             (g$invoke-library$7489$19h1md g$x$10369$19h1md)
                             (g$mark-visit$10368$19h1md g$x$10369$19h1md))))))
                     (g$vis-collector$8005$19h1md))
                    (g$rtc$10366$19h1md))
                  g$expanded-rhs$10367$19h1md)))
             ((case-lambda
                ((g$inv-collector$10374$19h1md
                   g$vis-collector$10375$19h1md
                   g$inv-collector$10376$19h1md
                   g$vis-collector$10377$19h1md)
                 ((case-lambda
                    ((g$swap$10378$19h1md)
                     (dynamic-wind
                       g$swap$10378$19h1md
                       (case-lambda
                         (()
                          (g$chi-expr$7970$19h1md
                            g$expr$10364$19h1md
                            g$r$10365$19h1md
                            g$r$10365$19h1md)))
                       g$swap$10378$19h1md)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$10379$19h1md)
                           (begin
                             (g$inv-collector$10374$19h1md
                               g$inv-collector$10376$19h1md)
                             (set! g$inv-collector$10376$19h1md
                               g$t$10379$19h1md))))
                        (g$inv-collector$10374$19h1md))
                       ((case-lambda
                          ((g$t$10380$19h1md)
                           (begin
                             (g$vis-collector$10375$19h1md
                               g$vis-collector$10377$19h1md)
                             (set! g$vis-collector$10377$19h1md
                               g$t$10380$19h1md))))
                        (g$vis-collector$10375$19h1md))))))))
              g$inv-collector$8004$19h1md
              g$vis-collector$8005$19h1md
              g$rtc$10366$19h1md
              (case-lambda ((g$x$10381$19h1md) (values)))))))
         (g$make-collector$8003$19h1md)))))
   (g$parse-exports$7998$19h1md
     g$parse-exports$11437$19h1md
     (case-lambda
       ((g$exp*$10382$19h1md)
        (letrec* ((g$idsyn?$10383$19h1md
                    (case-lambda
                      ((g$x$10398$19h1md)
                       (symbol?
                         (g$syntax->datum$8064$19h1md g$x$10398$19h1md))))))
          ((letrec ((g$f$10384$19h1md
                      (case-lambda
                        ((g$exp*$10385$19h1md
                           g$int*$10386$19h1md
                           g$ext*$10387$19h1md)
                         (if (null? g$exp*$10385$19h1md)
                           (begin
                             ((case-lambda
                                ((g$id*$10388$19h1md)
                                 (if (not (g$valid-bound-ids?$7679$19h1md
                                            g$id*$10388$19h1md))
                                   (g$syntax-violation$8061$19h1md
                                     'export
                                     '"invalid exports"
                                     (g$find-dups$7980$19h1md
                                       g$id*$10388$19h1md))
                                   (void))))
                              (map (case-lambda
                                     ((g$x$10389$19h1md)
                                      (g$make-stx$7647$19h1md
                                        g$x$10389$19h1md
                                        g$top-mark*$7616$19h1md
                                        '()
                                        '())))
                                   g$ext*$10387$19h1md))
                             (values
                               (map g$syntax->datum$8064$19h1md
                                    g$int*$10386$19h1md)
                               (map g$syntax->datum$8064$19h1md
                                    g$ext*$10387$19h1md)))
                           ((case-lambda
                              ((g$t$10390$19h1md)
                               ((case-lambda
                                  ((g$ls/false$10391$19h1md)
                                   (if g$ls/false$10391$19h1md
                                     (apply
                                       (case-lambda
                                         ((g$rename$10392$19h1md
                                            g$i*$10393$19h1md
                                            g$e*$10394$19h1md)
                                          (begin
                                            (if (not (if (eq? (g$syntax->datum$8064$19h1md
                                                                g$rename$10392$19h1md)
                                                              'rename)
                                                       (if (g$for-all$5804$19h1md
                                                             g$idsyn?$10383$19h1md
                                                             g$i*$10393$19h1md)
                                                         (begin
                                                           '#f
                                                           (g$for-all$5804$19h1md
                                                             g$idsyn?$10383$19h1md
                                                             g$e*$10394$19h1md))
                                                         '#f)
                                                       '#f))
                                              (g$syntax-violation$8061$19h1md
                                                'export
                                                '"invalid export specifier"
                                                (car g$exp*$10385$19h1md))
                                              (void))
                                            (g$f$10384$19h1md
                                              (cdr g$exp*$10385$19h1md)
                                              (append
                                                g$i*$10393$19h1md
                                                g$int*$10386$19h1md)
                                              (append
                                                g$e*$10394$19h1md
                                                g$ext*$10387$19h1md)))))
                                       g$ls/false$10391$19h1md)
                                     ((case-lambda
                                        ((g$t$10395$19h1md)
                                         ((case-lambda
                                            ((g$ls/false$10396$19h1md)
                                             (if g$ls/false$10396$19h1md
                                               (apply
                                                 (case-lambda
                                                   ((g$ie$10397$19h1md)
                                                    (begin
                                                      (if (not (g$idsyn?$10383$19h1md
                                                                 g$ie$10397$19h1md))
                                                        (g$syntax-violation$8061$19h1md
                                                          'export
                                                          '"invalid export"
                                                          g$ie$10397$19h1md)
                                                        (void))
                                                      (g$f$10384$19h1md
                                                        (cdr g$exp*$10385$19h1md)
                                                        (cons
                                                          g$ie$10397$19h1md
                                                          g$int*$10386$19h1md)
                                                        (cons
                                                          g$ie$10397$19h1md
                                                          g$ext*$10387$19h1md)))))
                                                 g$ls/false$10396$19h1md)
                                               (g$syntax-violation$8061$19h1md
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$10395$19h1md))))
                                          (g$syntax-dispatch$7952$19h1md
                                            g$t$10395$19h1md
                                            'any))))
                                      g$t$10390$19h1md))))
                                (g$syntax-dispatch$7952$19h1md
                                  g$t$10390$19h1md
                                  '(any . #(each (any any)))))))
                            (car g$exp*$10385$19h1md)))))))
             g$f$10384$19h1md)
           g$exp*$10382$19h1md
           '()
           '())))))
   (g$parse-library-name$7999$19h1md
     g$parse-library-name$11438$19h1md
     (case-lambda
       ((g$spec$10399$19h1md)
        (letrec* ((g$parse$10400$19h1md
                    (case-lambda
                      ((g$x$10407$19h1md)
                       ((case-lambda
                          ((g$t$10408$19h1md)
                           ((case-lambda
                              ((g$ls/false$10409$19h1md)
                               (if (if g$ls/false$10409$19h1md
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$10410$19h1md)
                                            (g$for-all$5804$19h1md
                                              (case-lambda
                                                ((g$x$10411$19h1md)
                                                 ((case-lambda
                                                    ((g$x$10412$19h1md)
                                                     (if (integer?
                                                           g$x$10412$19h1md)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$10412$19h1md))
                                                       '#f)))
                                                  (g$syntax->datum$8064$19h1md
                                                    g$x$10411$19h1md))))
                                              g$v*$10410$19h1md)))
                                         g$ls/false$10409$19h1md))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$10413$19h1md)
                                      (values
                                        '()
                                        (map g$syntax->datum$8064$19h1md
                                             g$v*$10413$19h1md))))
                                   g$ls/false$10409$19h1md)
                                 ((case-lambda
                                    ((g$t$10414$19h1md)
                                     ((case-lambda
                                        ((g$ls/false$10415$19h1md)
                                         (if (if g$ls/false$10415$19h1md
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$10416$19h1md
                                                        g$rest$10417$19h1md)
                                                      (symbol?
                                                        (g$syntax->datum$8064$19h1md
                                                          g$x$10416$19h1md))))
                                                   g$ls/false$10415$19h1md))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$10418$19h1md
                                                  g$rest$10419$19h1md)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$10400$19h1md
                                                       g$rest$10419$19h1md)))
                                                  (case-lambda
                                                    ((g$x*$10422$19h1md
                                                       g$v*$10423$19h1md)
                                                     ((case-lambda
                                                        ((g$v*$10424$19h1md
                                                           g$x*$10425$19h1md)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$8064$19h1md
                                                               g$x$10418$19h1md)
                                                             g$x*$10425$19h1md)
                                                           g$v*$10424$19h1md)))
                                                      g$v*$10423$19h1md
                                                      g$x*$10422$19h1md))))))
                                             g$ls/false$10415$19h1md)
                                           ((case-lambda
                                              ((g$t$10426$19h1md)
                                               ((case-lambda
                                                  ((g$ls/false$10427$19h1md)
                                                   (if g$ls/false$10427$19h1md
                                                     (apply
                                                       (case-lambda
                                                         (() (values '() '())))
                                                       g$ls/false$10427$19h1md)
                                                     ((case-lambda
                                                        ((g$t$10428$19h1md)
                                                         ((case-lambda
                                                            ((g$ls/false$10429$19h1md)
                                                             (if g$ls/false$10429$19h1md
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$8061$19h1md
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$10399$19h1md)))
                                                                 g$ls/false$10429$19h1md)
                                                               (g$syntax-violation$8061$19h1md
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$10428$19h1md))))
                                                          (g$syntax-dispatch$7952$19h1md
                                                            g$t$10428$19h1md
                                                            '_))))
                                                      g$t$10426$19h1md))))
                                                (g$syntax-dispatch$7952$19h1md
                                                  g$t$10426$19h1md
                                                  '()))))
                                            g$t$10414$19h1md))))
                                      (g$syntax-dispatch$7952$19h1md
                                        g$t$10414$19h1md
                                        '(any . any)))))
                                  g$t$10408$19h1md))))
                            (g$syntax-dispatch$7952$19h1md
                              g$t$10408$19h1md
                              '(each-any)))))
                        g$x$10407$19h1md)))))
          (call-with-values
            (case-lambda (() (g$parse$10400$19h1md g$spec$10399$19h1md)))
            (case-lambda
              ((g$name*$10403$19h1md g$ver*$10404$19h1md)
               ((case-lambda
                  ((g$ver*$10405$19h1md g$name*$10406$19h1md)
                   (begin
                     (if (null? g$name*$10406$19h1md)
                       (g$syntax-violation$8061$19h1md
                         '#f
                         '"empty library name"
                         g$spec$10399$19h1md)
                       (void))
                     (values g$name*$10406$19h1md g$ver*$10405$19h1md))))
                g$ver*$10404$19h1md
                g$name*$10403$19h1md))))))))
   (g$parse-library$8000$19h1md
     g$parse-library$11439$19h1md
     (case-lambda
       ((g$e$10430$19h1md)
        ((case-lambda
           ((g$t$10431$19h1md)
            ((case-lambda
               ((g$ls/false$10432$19h1md)
                (if (if g$ls/false$10432$19h1md
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$10433$19h1md
                               g$name*$10434$19h1md
                               g$export$10435$19h1md
                               g$exp*$10436$19h1md
                               g$import$10437$19h1md
                               g$imp*$10438$19h1md
                               g$b*$10439$19h1md)
                             (if (eq? (g$syntax->datum$8064$19h1md
                                        g$export$10435$19h1md)
                                      'export)
                               (if (eq? (g$syntax->datum$8064$19h1md
                                          g$import$10437$19h1md)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$8064$19h1md
                                          g$library$10433$19h1md)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$10432$19h1md))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$10440$19h1md
                         g$name*$10441$19h1md
                         g$export$10442$19h1md
                         g$exp*$10443$19h1md
                         g$import$10444$19h1md
                         g$imp*$10445$19h1md
                         g$b*$10446$19h1md)
                       (values
                         g$name*$10441$19h1md
                         g$exp*$10443$19h1md
                         g$imp*$10445$19h1md
                         g$b*$10446$19h1md)))
                    g$ls/false$10432$19h1md)
                  ((case-lambda
                     ((g$t$10447$19h1md)
                      ((case-lambda
                         ((g$ls/false$10448$19h1md)
                          (if g$ls/false$10448$19h1md
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$8061$19h1md
                                   '#f
                                   '"malformed library"
                                   g$e$10430$19h1md)))
                              g$ls/false$10448$19h1md)
                            (g$syntax-violation$8061$19h1md
                              '#f
                              '"invalid syntax"
                              g$t$10447$19h1md))))
                       (g$syntax-dispatch$7952$19h1md g$t$10447$19h1md '_))))
                   g$t$10431$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$10431$19h1md
               '(any each-any (any . each-any) (any . each-any) . each-any)))))
         g$e$10430$19h1md))))
   (g$parse-import-spec*$8001$19h1md
     g$parse-import-spec*$11440$19h1md
     (case-lambda
       ((g$imp*$10449$19h1md)
        (letrec* ((g$idsyn?$10450$19h1md
                    (case-lambda
                      ((g$x$10710$19h1md)
                       (symbol?
                         (g$syntax->datum$8064$19h1md g$x$10710$19h1md)))))
                  (g$dup-error$10451$19h1md
                    (case-lambda
                      ((g$name$10709$19h1md)
                       (g$syntax-violation$8061$19h1md
                         'import
                         '"two imports with different bindings"
                         g$name$10709$19h1md))))
                  (g$merge-substs$10452$19h1md
                    (case-lambda
                      ((g$s$10700$19h1md g$subst$10701$19h1md)
                       (letrec* ((g$insert-to-subst$10702$19h1md
                                   (case-lambda
                                     ((g$a$10703$19h1md g$subst$10704$19h1md)
                                      ((case-lambda
                                         ((g$name$10705$19h1md
                                            g$label$10706$19h1md)
                                          ((case-lambda
                                             ((g$t$10707$19h1md)
                                              (if g$t$10707$19h1md
                                                ((case-lambda
                                                   ((g$x$10708$19h1md)
                                                    (if (eq? (cdr g$x$10708$19h1md)
                                                             g$label$10706$19h1md)
                                                      g$subst$10704$19h1md
                                                      (g$dup-error$10451$19h1md
                                                        g$name$10705$19h1md))))
                                                 g$t$10707$19h1md)
                                                (cons
                                                  g$a$10703$19h1md
                                                  g$subst$10704$19h1md))))
                                           (assq
                                             g$name$10705$19h1md
                                             g$subst$10704$19h1md))))
                                       (car g$a$10703$19h1md)
                                       (cdr g$a$10703$19h1md))))))
                         (if (null? g$s$10700$19h1md)
                           g$subst$10701$19h1md
                           (g$insert-to-subst$10702$19h1md
                             (car g$s$10700$19h1md)
                             (g$merge-substs$10452$19h1md
                               (cdr g$s$10700$19h1md)
                               g$subst$10701$19h1md)))))))
                  (g$exclude*$10453$19h1md
                    (case-lambda
                      ((g$sym*$10676$19h1md g$subst$10677$19h1md)
                       (letrec* ((g$exclude$10678$19h1md
                                   (case-lambda
                                     ((g$sym$10691$19h1md g$subst$10692$19h1md)
                                      (if (null? g$subst$10692$19h1md)
                                        (g$syntax-violation$8061$19h1md
                                          'import
                                          '"cannot rename unbound identifier"
                                          g$sym$10691$19h1md)
                                        (if (eq? g$sym$10691$19h1md
                                                 (g$caar$5322$19h1md
                                                   g$subst$10692$19h1md))
                                          (values
                                            (g$cdar$5324$19h1md
                                              g$subst$10692$19h1md)
                                            (cdr g$subst$10692$19h1md))
                                          ((case-lambda
                                             ((g$a$10693$19h1md)
                                              (call-with-values
                                                (case-lambda
                                                  (()
                                                   (g$exclude$10678$19h1md
                                                     g$sym$10691$19h1md
                                                     (cdr g$subst$10692$19h1md))))
                                                (case-lambda
                                                  ((g$old$10696$19h1md
                                                     g$subst$10697$19h1md)
                                                   ((case-lambda
                                                      ((g$subst$10698$19h1md
                                                         g$old$10699$19h1md)
                                                       (values
                                                         g$old$10699$19h1md
                                                         (cons
                                                           g$a$10693$19h1md
                                                           g$subst$10698$19h1md))))
                                                    g$subst$10697$19h1md
                                                    g$old$10696$19h1md))))))
                                           (car g$subst$10692$19h1md))))))))
                         (if (null? g$sym*$10676$19h1md)
                           (values '() g$subst$10677$19h1md)
                           (call-with-values
                             (case-lambda
                               (()
                                (g$exclude$10678$19h1md
                                  (car g$sym*$10676$19h1md)
                                  g$subst$10677$19h1md)))
                             (case-lambda
                               ((g$old$10681$19h1md g$subst$10682$19h1md)
                                ((case-lambda
                                   ((g$subst$10683$19h1md g$old$10684$19h1md)
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$exclude*$10453$19h1md
                                           (cdr g$sym*$10676$19h1md)
                                           g$subst$10683$19h1md)))
                                      (case-lambda
                                        ((g$old*$10687$19h1md
                                           g$subst$10688$19h1md)
                                         ((case-lambda
                                            ((g$subst$10689$19h1md
                                               g$old*$10690$19h1md)
                                             (values
                                               (cons
                                                 g$old$10684$19h1md
                                                 g$old*$10690$19h1md)
                                               g$subst$10689$19h1md)))
                                          g$subst$10688$19h1md
                                          g$old*$10687$19h1md))))))
                                 g$subst$10682$19h1md
                                 g$old$10681$19h1md)))))))))
                  (g$find*$10454$19h1md
                    (case-lambda
                      ((g$sym*$10672$19h1md g$subst$10673$19h1md)
                       (map (case-lambda
                              ((g$x$10674$19h1md)
                               ((case-lambda
                                  ((g$t$10675$19h1md)
                                   (if g$t$10675$19h1md
                                     (cdr g$t$10675$19h1md)
                                     (g$syntax-violation$8061$19h1md
                                       'import
                                       '"cannot find identifier"
                                       g$x$10674$19h1md))))
                                (assq g$x$10674$19h1md g$subst$10673$19h1md))))
                            g$sym*$10672$19h1md))))
                  (g$rem*$10455$19h1md
                    (case-lambda
                      ((g$sym*$10668$19h1md g$subst$10669$19h1md)
                       ((letrec ((g$f$10670$19h1md
                                   (case-lambda
                                     ((g$subst$10671$19h1md)
                                      (if (null? g$subst$10671$19h1md)
                                        '()
                                        (if (memq
                                              (g$caar$5322$19h1md
                                                g$subst$10671$19h1md)
                                              g$sym*$10668$19h1md)
                                          (g$f$10670$19h1md
                                            (cdr g$subst$10671$19h1md))
                                          (cons
                                            (car g$subst$10671$19h1md)
                                            (g$f$10670$19h1md
                                              (cdr g$subst$10671$19h1md)))))))))
                          g$f$10670$19h1md)
                        g$subst$10669$19h1md))))
                  (g$remove-dups$10456$19h1md
                    (case-lambda
                      ((g$ls$10667$19h1md)
                       (if (null? g$ls$10667$19h1md)
                         '()
                         (if (memq
                               (car g$ls$10667$19h1md)
                               (cdr g$ls$10667$19h1md))
                           (g$remove-dups$10456$19h1md (cdr g$ls$10667$19h1md))
                           (cons
                             (car g$ls$10667$19h1md)
                             (g$remove-dups$10456$19h1md
                               (cdr g$ls$10667$19h1md))))))))
                  (g$parse-library-name$10457$19h1md
                    (case-lambda
                      ((g$spec$10551$19h1md)
                       (letrec* ((g$subversion?$10552$19h1md
                                   (case-lambda
                                     ((g$x$10665$19h1md)
                                      ((case-lambda
                                         ((g$x$10666$19h1md)
                                          (if (integer? g$x$10666$19h1md)
                                            (if (exact? g$x$10666$19h1md)
                                              (begin
                                                '#f
                                                (>= g$x$10666$19h1md '0))
                                              '#f)
                                            '#f)))
                                       (g$syntax->datum$8064$19h1md
                                         g$x$10665$19h1md)))))
                                 (g$subversion-pred$10553$19h1md
                                   (case-lambda
                                     ((g$x*$10617$19h1md)
                                      ((case-lambda
                                         ((g$t$10618$19h1md)
                                          ((case-lambda
                                             ((g$ls/false$10619$19h1md)
                                              (if (if g$ls/false$10619$19h1md
                                                    (begin
                                                      '#f
                                                      (apply
                                                        (case-lambda
                                                          ((g$n$10620$19h1md)
                                                           (g$subversion?$10552$19h1md
                                                             g$n$10620$19h1md)))
                                                        g$ls/false$10619$19h1md))
                                                    '#f)
                                                (apply
                                                  (case-lambda
                                                    ((g$n$10621$19h1md)
                                                     (case-lambda
                                                       ((g$x$10622$19h1md)
                                                        (= g$x$10622$19h1md
                                                           (g$syntax->datum$8064$19h1md
                                                             g$n$10621$19h1md))))))
                                                  g$ls/false$10619$19h1md)
                                                ((case-lambda
                                                   ((g$t$10623$19h1md)
                                                    ((case-lambda
                                                       ((g$ls/false$10624$19h1md)
                                                        (if (if g$ls/false$10624$19h1md
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p?$10625$19h1md
                                                                       g$sub*$10626$19h1md)
                                                                     (eq? (g$syntax->datum$8064$19h1md
                                                                            g$p?$10625$19h1md)
                                                                          'and)))
                                                                  g$ls/false$10624$19h1md))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$p?$10627$19h1md
                                                                 g$sub*$10628$19h1md)
                                                               ((case-lambda
                                                                  ((g$p*$10629$19h1md)
                                                                   (case-lambda
                                                                     ((g$x$10630$19h1md)
                                                                      (g$for-all$5804$19h1md
                                                                        (case-lambda
                                                                          ((g$p$10631$19h1md)
                                                                           (g$p$10631$19h1md
                                                                             g$x$10630$19h1md)))
                                                                        g$p*$10629$19h1md)))))
                                                                (map g$subversion-pred$10553$19h1md
                                                                     g$sub*$10628$19h1md))))
                                                            g$ls/false$10624$19h1md)
                                                          ((case-lambda
                                                             ((g$t$10632$19h1md)
                                                              ((case-lambda
                                                                 ((g$ls/false$10633$19h1md)
                                                                  (if (if g$ls/false$10633$19h1md
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p?$10634$19h1md
                                                                                 g$sub*$10635$19h1md)
                                                                               (eq? (g$syntax->datum$8064$19h1md
                                                                                      g$p?$10634$19h1md)
                                                                                    'or)))
                                                                            g$ls/false$10633$19h1md))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$p?$10636$19h1md
                                                                           g$sub*$10637$19h1md)
                                                                         ((case-lambda
                                                                            ((g$p*$10638$19h1md)
                                                                             (case-lambda
                                                                               ((g$x$10639$19h1md)
                                                                                (g$exists$5805$19h1md
                                                                                  (case-lambda
                                                                                    ((g$p$10640$19h1md)
                                                                                     (g$p$10640$19h1md
                                                                                       g$x$10639$19h1md)))
                                                                                  g$p*$10638$19h1md)))))
                                                                          (map g$subversion-pred$10553$19h1md
                                                                               g$sub*$10637$19h1md))))
                                                                      g$ls/false$10633$19h1md)
                                                                    ((case-lambda
                                                                       ((g$t$10641$19h1md)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10642$19h1md)
                                                                            (if (if g$ls/false$10642$19h1md
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p?$10643$19h1md
                                                                                           g$sub$10644$19h1md)
                                                                                         (eq? (g$syntax->datum$8064$19h1md
                                                                                                g$p?$10643$19h1md)
                                                                                              'not)))
                                                                                      g$ls/false$10642$19h1md))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$p?$10645$19h1md
                                                                                     g$sub$10646$19h1md)
                                                                                   ((case-lambda
                                                                                      ((g$p$10647$19h1md)
                                                                                       (case-lambda
                                                                                         ((g$x$10648$19h1md)
                                                                                          (not (g$p$10647$19h1md
                                                                                                 g$x$10648$19h1md))))))
                                                                                    (g$subversion-pred$10553$19h1md
                                                                                      g$sub$10646$19h1md))))
                                                                                g$ls/false$10642$19h1md)
                                                                              ((case-lambda
                                                                                 ((g$t$10649$19h1md)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$10650$19h1md)
                                                                                      (if (if g$ls/false$10650$19h1md
                                                                                            (begin
                                                                                              '#f
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p?$10651$19h1md
                                                                                                     g$n$10652$19h1md)
                                                                                                   (if (eq? (g$syntax->datum$8064$19h1md
                                                                                                              g$p?$10651$19h1md)
                                                                                                            '<=)
                                                                                                     (begin
                                                                                                       '#f
                                                                                                       (g$subversion?$10552$19h1md
                                                                                                         g$n$10652$19h1md))
                                                                                                     '#f)))
                                                                                                g$ls/false$10650$19h1md))
                                                                                            '#f)
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$p?$10653$19h1md
                                                                                               g$n$10654$19h1md)
                                                                                             (case-lambda
                                                                                               ((g$x$10655$19h1md)
                                                                                                (<= g$x$10655$19h1md
                                                                                                    (g$syntax->datum$8064$19h1md
                                                                                                      g$n$10654$19h1md))))))
                                                                                          g$ls/false$10650$19h1md)
                                                                                        ((case-lambda
                                                                                           ((g$t$10656$19h1md)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$10657$19h1md)
                                                                                                (if (if g$ls/false$10657$19h1md
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$p?$10658$19h1md
                                                                                                               g$n$10659$19h1md)
                                                                                                             (if (eq? (g$syntax->datum$8064$19h1md
                                                                                                                        g$p?$10658$19h1md)
                                                                                                                      '>=)
                                                                                                               (begin
                                                                                                                 '#f
                                                                                                                 (g$subversion?$10552$19h1md
                                                                                                                   g$n$10659$19h1md))
                                                                                                               '#f)))
                                                                                                          g$ls/false$10657$19h1md))
                                                                                                      '#f)
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$p?$10660$19h1md
                                                                                                         g$n$10661$19h1md)
                                                                                                       (case-lambda
                                                                                                         ((g$x$10662$19h1md)
                                                                                                          (>= g$x$10662$19h1md
                                                                                                              (g$syntax->datum$8064$19h1md
                                                                                                                g$n$10661$19h1md))))))
                                                                                                    g$ls/false$10657$19h1md)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$10663$19h1md)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$10664$19h1md)
                                                                                                          (if g$ls/false$10664$19h1md
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (g$syntax-violation$8061$19h1md
                                                                                                                   'import
                                                                                                                   '"invalid sub-version spec"
                                                                                                                   g$spec$10551$19h1md
                                                                                                                   g$x*$10617$19h1md)))
                                                                                                              g$ls/false$10664$19h1md)
                                                                                                            (g$syntax-violation$8061$19h1md
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$10663$19h1md))))
                                                                                                       (g$syntax-dispatch$7952$19h1md
                                                                                                         g$t$10663$19h1md
                                                                                                         '_))))
                                                                                                   g$t$10656$19h1md))))
                                                                                             (g$syntax-dispatch$7952$19h1md
                                                                                               g$t$10656$19h1md
                                                                                               '(any any)))))
                                                                                         g$t$10649$19h1md))))
                                                                                   (g$syntax-dispatch$7952$19h1md
                                                                                     g$t$10649$19h1md
                                                                                     '(any any)))))
                                                                               g$t$10641$19h1md))))
                                                                         (g$syntax-dispatch$7952$19h1md
                                                                           g$t$10641$19h1md
                                                                           '(any any)))))
                                                                     g$t$10632$19h1md))))
                                                               (g$syntax-dispatch$7952$19h1md
                                                                 g$t$10632$19h1md
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$10623$19h1md))))
                                                     (g$syntax-dispatch$7952$19h1md
                                                       g$t$10623$19h1md
                                                       '(any . each-any)))))
                                                 g$t$10618$19h1md))))
                                           (g$syntax-dispatch$7952$19h1md
                                             g$t$10618$19h1md
                                             'any))))
                                       g$x*$10617$19h1md))))
                                 (g$version-pred$10554$19h1md
                                   (case-lambda
                                     ((g$x*$10577$19h1md)
                                      ((case-lambda
                                         ((g$t$10578$19h1md)
                                          ((case-lambda
                                             ((g$ls/false$10579$19h1md)
                                              (if g$ls/false$10579$19h1md
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (case-lambda
                                                       ((g$x$10580$19h1md)
                                                        '#t))))
                                                  g$ls/false$10579$19h1md)
                                                ((case-lambda
                                                   ((g$t$10581$19h1md)
                                                    ((case-lambda
                                                       ((g$ls/false$10582$19h1md)
                                                        (if (if g$ls/false$10582$19h1md
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$c$10583$19h1md
                                                                       g$ver*$10584$19h1md)
                                                                     (eq? (g$syntax->datum$8064$19h1md
                                                                            g$c$10583$19h1md)
                                                                          'and)))
                                                                  g$ls/false$10582$19h1md))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$c$10585$19h1md
                                                                 g$ver*$10586$19h1md)
                                                               ((case-lambda
                                                                  ((g$p*$10587$19h1md)
                                                                   (case-lambda
                                                                     ((g$x$10588$19h1md)
                                                                      (g$for-all$5804$19h1md
                                                                        (case-lambda
                                                                          ((g$p$10589$19h1md)
                                                                           (g$p$10589$19h1md
                                                                             g$x$10588$19h1md)))
                                                                        g$p*$10587$19h1md)))))
                                                                (map g$version-pred$10554$19h1md
                                                                     g$ver*$10586$19h1md))))
                                                            g$ls/false$10582$19h1md)
                                                          ((case-lambda
                                                             ((g$t$10590$19h1md)
                                                              ((case-lambda
                                                                 ((g$ls/false$10591$19h1md)
                                                                  (if (if g$ls/false$10591$19h1md
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$c$10592$19h1md
                                                                                 g$ver*$10593$19h1md)
                                                                               (eq? (g$syntax->datum$8064$19h1md
                                                                                      g$c$10592$19h1md)
                                                                                    'or)))
                                                                            g$ls/false$10591$19h1md))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$c$10594$19h1md
                                                                           g$ver*$10595$19h1md)
                                                                         ((case-lambda
                                                                            ((g$p*$10596$19h1md)
                                                                             (case-lambda
                                                                               ((g$x$10597$19h1md)
                                                                                (g$exists$5805$19h1md
                                                                                  (case-lambda
                                                                                    ((g$p$10598$19h1md)
                                                                                     (g$p$10598$19h1md
                                                                                       g$x$10597$19h1md)))
                                                                                  g$p*$10596$19h1md)))))
                                                                          (map g$version-pred$10554$19h1md
                                                                               g$ver*$10595$19h1md))))
                                                                      g$ls/false$10591$19h1md)
                                                                    ((case-lambda
                                                                       ((g$t$10599$19h1md)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10600$19h1md)
                                                                            (if (if g$ls/false$10600$19h1md
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$c$10601$19h1md
                                                                                           g$ver$10602$19h1md)
                                                                                         (eq? (g$syntax->datum$8064$19h1md
                                                                                                g$c$10601$19h1md)
                                                                                              'not)))
                                                                                      g$ls/false$10600$19h1md))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$c$10603$19h1md
                                                                                     g$ver$10604$19h1md)
                                                                                   ((case-lambda
                                                                                      ((g$p$10605$19h1md)
                                                                                       (case-lambda
                                                                                         ((g$x$10606$19h1md)
                                                                                          (not (g$p$10605$19h1md
                                                                                                 g$x$10606$19h1md))))))
                                                                                    (g$version-pred$10554$19h1md
                                                                                      g$ver$10604$19h1md))))
                                                                                g$ls/false$10600$19h1md)
                                                                              ((case-lambda
                                                                                 ((g$t$10607$19h1md)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$10608$19h1md)
                                                                                      (if g$ls/false$10608$19h1md
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$sub*$10609$19h1md)
                                                                                             ((case-lambda
                                                                                                ((g$p*$10610$19h1md)
                                                                                                 (case-lambda
                                                                                                   ((g$x$10611$19h1md)
                                                                                                    ((letrec ((g$f$10612$19h1md
                                                                                                                (case-lambda
                                                                                                                  ((g$p*$10613$19h1md
                                                                                                                     g$x$10614$19h1md)
                                                                                                                   (if (null?
                                                                                                                         g$p*$10613$19h1md)
                                                                                                                     '#t
                                                                                                                     (if (null?
                                                                                                                           g$x$10614$19h1md)
                                                                                                                       '#f
                                                                                                                       (if ((car g$p*$10613$19h1md)
                                                                                                                            (car g$x$10614$19h1md))
                                                                                                                         (begin
                                                                                                                           '#f
                                                                                                                           (g$f$10612$19h1md
                                                                                                                             (cdr g$p*$10613$19h1md)
                                                                                                                             (cdr g$x$10614$19h1md)))
                                                                                                                         '#f)))))))
                                                                                                       g$f$10612$19h1md)
                                                                                                     g$p*$10610$19h1md
                                                                                                     g$x$10611$19h1md)))))
                                                                                              (map g$subversion-pred$10553$19h1md
                                                                                                   g$sub*$10609$19h1md))))
                                                                                          g$ls/false$10608$19h1md)
                                                                                        ((case-lambda
                                                                                           ((g$t$10615$19h1md)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$10616$19h1md)
                                                                                                (if g$ls/false$10616$19h1md
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      (()
                                                                                                       (g$syntax-violation$8061$19h1md
                                                                                                         'import
                                                                                                         '"invalid version spec"
                                                                                                         g$spec$10551$19h1md
                                                                                                         g$x*$10577$19h1md)))
                                                                                                    g$ls/false$10616$19h1md)
                                                                                                  (g$syntax-violation$8061$19h1md
                                                                                                    '#f
                                                                                                    '"invalid syntax"
                                                                                                    g$t$10615$19h1md))))
                                                                                             (g$syntax-dispatch$7952$19h1md
                                                                                               g$t$10615$19h1md
                                                                                               '_))))
                                                                                         g$t$10607$19h1md))))
                                                                                   (g$syntax-dispatch$7952$19h1md
                                                                                     g$t$10607$19h1md
                                                                                     'each-any))))
                                                                               g$t$10599$19h1md))))
                                                                         (g$syntax-dispatch$7952$19h1md
                                                                           g$t$10599$19h1md
                                                                           '(any any)))))
                                                                     g$t$10590$19h1md))))
                                                               (g$syntax-dispatch$7952$19h1md
                                                                 g$t$10590$19h1md
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$10581$19h1md))))
                                                     (g$syntax-dispatch$7952$19h1md
                                                       g$t$10581$19h1md
                                                       '(any . each-any)))))
                                                 g$t$10578$19h1md))))
                                           (g$syntax-dispatch$7952$19h1md
                                             g$t$10578$19h1md
                                             '()))))
                                       g$x*$10577$19h1md)))))
                         ((letrec ((g$f$10555$19h1md
                                     (case-lambda
                                       ((g$x$10556$19h1md)
                                        ((case-lambda
                                           ((g$t$10557$19h1md)
                                            ((case-lambda
                                               ((g$ls/false$10558$19h1md)
                                                (if g$ls/false$10558$19h1md
                                                  (apply
                                                    (case-lambda
                                                      ((g$version-spec*$10559$19h1md)
                                                       (values
                                                         '()
                                                         (g$version-pred$10554$19h1md
                                                           g$version-spec*$10559$19h1md))))
                                                    g$ls/false$10558$19h1md)
                                                  ((case-lambda
                                                     ((g$t$10560$19h1md)
                                                      ((case-lambda
                                                         ((g$ls/false$10561$19h1md)
                                                          (if (if g$ls/false$10561$19h1md
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$x$10562$19h1md
                                                                         g$x*$10563$19h1md)
                                                                       (g$idsyn?$10450$19h1md
                                                                         g$x$10562$19h1md)))
                                                                    g$ls/false$10561$19h1md))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$x$10564$19h1md
                                                                   g$x*$10565$19h1md)
                                                                 (call-with-values
                                                                   (case-lambda
                                                                     (()
                                                                      (g$f$10555$19h1md
                                                                        g$x*$10565$19h1md)))
                                                                   (case-lambda
                                                                     ((g$name$10568$19h1md
                                                                        g$pred$10569$19h1md)
                                                                      ((case-lambda
                                                                         ((g$pred$10570$19h1md
                                                                            g$name$10571$19h1md)
                                                                          (values
                                                                            (cons
                                                                              (g$syntax->datum$8064$19h1md
                                                                                g$x$10564$19h1md)
                                                                              g$name$10571$19h1md)
                                                                            g$pred$10570$19h1md)))
                                                                       g$pred$10569$19h1md
                                                                       g$name$10568$19h1md))))))
                                                              g$ls/false$10561$19h1md)
                                                            ((case-lambda
                                                               ((g$t$10572$19h1md)
                                                                ((case-lambda
                                                                   ((g$ls/false$10573$19h1md)
                                                                    (if g$ls/false$10573$19h1md
                                                                      (apply
                                                                        (case-lambda
                                                                          (()
                                                                           (values
                                                                             '()
                                                                             (case-lambda
                                                                               ((g$x$10574$19h1md)
                                                                                '#t)))))
                                                                        g$ls/false$10573$19h1md)
                                                                      ((case-lambda
                                                                         ((g$t$10575$19h1md)
                                                                          ((case-lambda
                                                                             ((g$ls/false$10576$19h1md)
                                                                              (if g$ls/false$10576$19h1md
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$syntax-violation$8061$19h1md
                                                                                       '#f
                                                                                       '"invalid import spec"
                                                                                       g$spec$10551$19h1md)))
                                                                                  g$ls/false$10576$19h1md)
                                                                                (g$syntax-violation$8061$19h1md
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$10575$19h1md))))
                                                                           (g$syntax-dispatch$7952$19h1md
                                                                             g$t$10575$19h1md
                                                                             '_))))
                                                                       g$t$10572$19h1md))))
                                                                 (g$syntax-dispatch$7952$19h1md
                                                                   g$t$10572$19h1md
                                                                   '()))))
                                                             g$t$10560$19h1md))))
                                                       (g$syntax-dispatch$7952$19h1md
                                                         g$t$10560$19h1md
                                                         '(any . any)))))
                                                   g$t$10557$19h1md))))
                                             (g$syntax-dispatch$7952$19h1md
                                               g$t$10557$19h1md
                                               '(each-any)))))
                                         g$x$10556$19h1md)))))
                            g$f$10555$19h1md)
                          g$spec$10551$19h1md)))))
                  (g$import-library$10458$19h1md
                    (case-lambda
                      ((g$spec*$10543$19h1md)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-library-name$10457$19h1md
                              g$spec*$10543$19h1md)))
                         (case-lambda
                           ((g$name$10546$19h1md g$pred$10547$19h1md)
                            ((case-lambda
                               ((g$pred$10548$19h1md g$name$10549$19h1md)
                                (begin
                                  (if (null? g$name$10549$19h1md)
                                    (g$syntax-violation$8061$19h1md
                                      'import
                                      '"empty library name"
                                      g$spec*$10543$19h1md)
                                    (void))
                                  ((case-lambda
                                     ((g$lib$10550$19h1md)
                                      (begin
                                        (if (not g$lib$10550$19h1md)
                                          (g$syntax-violation$8061$19h1md
                                            'import
                                            '"cannot find library with required name"
                                            g$name$10549$19h1md)
                                          (void))
                                        (if (not (g$pred$10548$19h1md
                                                   (g$library-version$7442$19h1md
                                                     g$lib$10550$19h1md)))
                                          (g$syntax-violation$8061$19h1md
                                            'import
                                            '"library does not satisfy version specification"
                                            g$spec*$10543$19h1md
                                            g$lib$10550$19h1md)
                                          (void))
                                        ((g$imp-collector$8006$19h1md)
                                         g$lib$10550$19h1md)
                                        (g$library-subst$7446$19h1md
                                          g$lib$10550$19h1md))))
                                   (g$find-library-by-name$7482$19h1md
                                     g$name$10549$19h1md)))))
                             g$pred$10547$19h1md
                             g$name$10546$19h1md)))))))
                  (g$get-import$10459$19h1md
                    (case-lambda
                      ((g$spec$10472$19h1md)
                       ((case-lambda
                          ((g$t$10473$19h1md)
                           ((case-lambda
                              ((g$ls/false$10474$19h1md)
                               (if (if g$ls/false$10474$19h1md
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$x$10475$19h1md g$x*$10476$19h1md)
                                            (not (memq
                                                   (g$syntax->datum$8064$19h1md
                                                     g$x$10475$19h1md)
                                                   '(for rename
                                                         except
                                                         only
                                                         prefix
                                                         library)))))
                                         g$ls/false$10474$19h1md))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$x$10477$19h1md g$x*$10478$19h1md)
                                      (g$import-library$10458$19h1md
                                        (cons
                                          g$x$10477$19h1md
                                          g$x*$10478$19h1md))))
                                   g$ls/false$10474$19h1md)
                                 ((case-lambda
                                    ((g$t$10479$19h1md)
                                     ((case-lambda
                                        ((g$ls/false$10480$19h1md)
                                         (if (if g$ls/false$10480$19h1md
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$rename$10481$19h1md
                                                        g$isp$10482$19h1md
                                                        g$old*$10483$19h1md
                                                        g$new*$10484$19h1md)
                                                      (if (eq? (g$syntax->datum$8064$19h1md
                                                                 g$rename$10481$19h1md)
                                                               'rename)
                                                        (if (g$for-all$5804$19h1md
                                                              g$idsyn?$10450$19h1md
                                                              g$old*$10483$19h1md)
                                                          (begin
                                                            '#f
                                                            (g$for-all$5804$19h1md
                                                              g$idsyn?$10450$19h1md
                                                              g$new*$10484$19h1md))
                                                          '#f)
                                                        '#f)))
                                                   g$ls/false$10480$19h1md))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$rename$10485$19h1md
                                                  g$isp$10486$19h1md
                                                  g$old*$10487$19h1md
                                                  g$new*$10488$19h1md)
                                                ((case-lambda
                                                   ((g$subst$10489$19h1md
                                                      g$old*$10490$19h1md
                                                      g$new*$10491$19h1md)
                                                    ((case-lambda
                                                       ((g$old-label*$10492$19h1md)
                                                        ((case-lambda
                                                           ((g$subst$10493$19h1md)
                                                            (g$merge-substs$10452$19h1md
                                                              (map cons
                                                                   g$new*$10491$19h1md
                                                                   g$old-label*$10492$19h1md)
                                                              g$subst$10493$19h1md)))
                                                         (g$rem*$10455$19h1md
                                                           g$old*$10490$19h1md
                                                           g$subst$10489$19h1md))))
                                                     (g$find*$10454$19h1md
                                                       g$old*$10490$19h1md
                                                       g$subst$10489$19h1md))))
                                                 (g$get-import$10459$19h1md
                                                   g$isp$10486$19h1md)
                                                 (map g$syntax->datum$8064$19h1md
                                                      g$old*$10487$19h1md)
                                                 (map g$syntax->datum$8064$19h1md
                                                      g$new*$10488$19h1md))))
                                             g$ls/false$10480$19h1md)
                                           ((case-lambda
                                              ((g$t$10494$19h1md)
                                               ((case-lambda
                                                  ((g$ls/false$10495$19h1md)
                                                   (if (if g$ls/false$10495$19h1md
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$except$10496$19h1md
                                                                  g$isp$10497$19h1md
                                                                  g$sym*$10498$19h1md)
                                                                (if (eq? (g$syntax->datum$8064$19h1md
                                                                           g$except$10496$19h1md)
                                                                         'except)
                                                                  (begin
                                                                    '#f
                                                                    (g$for-all$5804$19h1md
                                                                      g$idsyn?$10450$19h1md
                                                                      g$sym*$10498$19h1md))
                                                                  '#f)))
                                                             g$ls/false$10495$19h1md))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$except$10499$19h1md
                                                            g$isp$10500$19h1md
                                                            g$sym*$10501$19h1md)
                                                          ((case-lambda
                                                             ((g$subst$10502$19h1md)
                                                              (g$rem*$10455$19h1md
                                                                (map g$syntax->datum$8064$19h1md
                                                                     g$sym*$10501$19h1md)
                                                                g$subst$10502$19h1md)))
                                                           (g$get-import$10459$19h1md
                                                             g$isp$10500$19h1md))))
                                                       g$ls/false$10495$19h1md)
                                                     ((case-lambda
                                                        ((g$t$10503$19h1md)
                                                         ((case-lambda
                                                            ((g$ls/false$10504$19h1md)
                                                             (if (if g$ls/false$10504$19h1md
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$only$10505$19h1md
                                                                            g$isp$10506$19h1md
                                                                            g$sym*$10507$19h1md)
                                                                          (if (eq? (g$syntax->datum$8064$19h1md
                                                                                     g$only$10505$19h1md)
                                                                                   'only)
                                                                            (begin
                                                                              '#f
                                                                              (g$for-all$5804$19h1md
                                                                                g$idsyn?$10450$19h1md
                                                                                g$sym*$10507$19h1md))
                                                                            '#f)))
                                                                       g$ls/false$10504$19h1md))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$only$10508$19h1md
                                                                      g$isp$10509$19h1md
                                                                      g$sym*$10510$19h1md)
                                                                    ((case-lambda
                                                                       ((g$subst$10511$19h1md
                                                                          g$sym*$10512$19h1md)
                                                                        ((case-lambda
                                                                           ((g$sym*$10513$19h1md)
                                                                            ((case-lambda
                                                                               ((g$lab*$10514$19h1md)
                                                                                (map cons
                                                                                     g$sym*$10513$19h1md
                                                                                     g$lab*$10514$19h1md)))
                                                                             (g$find*$10454$19h1md
                                                                               g$sym*$10513$19h1md
                                                                               g$subst$10511$19h1md))))
                                                                         (g$remove-dups$10456$19h1md
                                                                           g$sym*$10512$19h1md))))
                                                                     (g$get-import$10459$19h1md
                                                                       g$isp$10509$19h1md)
                                                                     (map g$syntax->datum$8064$19h1md
                                                                          g$sym*$10510$19h1md))))
                                                                 g$ls/false$10504$19h1md)
                                                               ((case-lambda
                                                                  ((g$t$10515$19h1md)
                                                                   ((case-lambda
                                                                      ((g$ls/false$10516$19h1md)
                                                                       (if (if g$ls/false$10516$19h1md
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$prefix$10517$19h1md
                                                                                      g$isp$10518$19h1md
                                                                                      g$p$10519$19h1md)
                                                                                    (if (eq? (g$syntax->datum$8064$19h1md
                                                                                               g$prefix$10517$19h1md)
                                                                                             'prefix)
                                                                                      (begin
                                                                                        '#f
                                                                                        (g$idsyn?$10450$19h1md
                                                                                          g$p$10519$19h1md))
                                                                                      '#f)))
                                                                                 g$ls/false$10516$19h1md))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$prefix$10520$19h1md
                                                                                g$isp$10521$19h1md
                                                                                g$p$10522$19h1md)
                                                                              ((case-lambda
                                                                                 ((g$subst$10523$19h1md
                                                                                    g$prefix$10524$19h1md)
                                                                                  (map (case-lambda
                                                                                         ((g$x$10525$19h1md)
                                                                                          (cons
                                                                                            (string->symbol
                                                                                              (string-append
                                                                                                g$prefix$10524$19h1md
                                                                                                (symbol->string
                                                                                                  (car g$x$10525$19h1md))))
                                                                                            (cdr g$x$10525$19h1md))))
                                                                                       g$subst$10523$19h1md)))
                                                                               (g$get-import$10459$19h1md
                                                                                 g$isp$10521$19h1md)
                                                                               (symbol->string
                                                                                 (g$syntax->datum$8064$19h1md
                                                                                   g$p$10522$19h1md)))))
                                                                           g$ls/false$10516$19h1md)
                                                                         ((case-lambda
                                                                            ((g$t$10526$19h1md)
                                                                             ((case-lambda
                                                                                ((g$ls/false$10527$19h1md)
                                                                                 (if (if g$ls/false$10527$19h1md
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$library$10528$19h1md
                                                                                                g$spec*$10529$19h1md)
                                                                                              (eq? (g$syntax->datum$8064$19h1md
                                                                                                     g$library$10528$19h1md)
                                                                                                   'library)))
                                                                                           g$ls/false$10527$19h1md))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$library$10530$19h1md
                                                                                          g$spec*$10531$19h1md)
                                                                                        (g$import-library$10458$19h1md
                                                                                          g$spec*$10531$19h1md)))
                                                                                     g$ls/false$10527$19h1md)
                                                                                   ((case-lambda
                                                                                      ((g$t$10532$19h1md)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$10533$19h1md)
                                                                                           (if (if g$ls/false$10533$19h1md
                                                                                                 (begin
                                                                                                   '#f
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$for$10534$19h1md
                                                                                                          g$isp$10535$19h1md
                                                                                                          g$rest$10536$19h1md)
                                                                                                        (eq? (g$syntax->datum$8064$19h1md
                                                                                                               g$for$10534$19h1md)
                                                                                                             'for)))
                                                                                                     g$ls/false$10533$19h1md))
                                                                                                 '#f)
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$for$10537$19h1md
                                                                                                    g$isp$10538$19h1md
                                                                                                    g$rest$10539$19h1md)
                                                                                                  (g$get-import$10459$19h1md
                                                                                                    g$isp$10538$19h1md)))
                                                                                               g$ls/false$10533$19h1md)
                                                                                             ((case-lambda
                                                                                                ((g$t$10540$19h1md)
                                                                                                 ((case-lambda
                                                                                                    ((g$ls/false$10541$19h1md)
                                                                                                     (if g$ls/false$10541$19h1md
                                                                                                       (apply
                                                                                                         (case-lambda
                                                                                                           ((g$spec$10542$19h1md)
                                                                                                            (g$syntax-violation$8061$19h1md
                                                                                                              'import
                                                                                                              '"invalid import spec"
                                                                                                              g$spec$10542$19h1md)))
                                                                                                         g$ls/false$10541$19h1md)
                                                                                                       (g$syntax-violation$8061$19h1md
                                                                                                         '#f
                                                                                                         '"invalid syntax"
                                                                                                         g$t$10540$19h1md))))
                                                                                                  (g$syntax-dispatch$7952$19h1md
                                                                                                    g$t$10540$19h1md
                                                                                                    'any))))
                                                                                              g$t$10532$19h1md))))
                                                                                        (g$syntax-dispatch$7952$19h1md
                                                                                          g$t$10532$19h1md
                                                                                          '(any any
                                                                                                .
                                                                                                any)))))
                                                                                    g$t$10526$19h1md))))
                                                                              (g$syntax-dispatch$7952$19h1md
                                                                                g$t$10526$19h1md
                                                                                '(any each-any)))))
                                                                          g$t$10515$19h1md))))
                                                                    (g$syntax-dispatch$7952$19h1md
                                                                      g$t$10515$19h1md
                                                                      '(any any
                                                                            any)))))
                                                                g$t$10503$19h1md))))
                                                          (g$syntax-dispatch$7952$19h1md
                                                            g$t$10503$19h1md
                                                            '(any any
                                                                  .
                                                                  each-any)))))
                                                      g$t$10494$19h1md))))
                                                (g$syntax-dispatch$7952$19h1md
                                                  g$t$10494$19h1md
                                                  '(any any . each-any)))))
                                            g$t$10479$19h1md))))
                                      (g$syntax-dispatch$7952$19h1md
                                        g$t$10479$19h1md
                                        '(any any . #(each (any any)))))))
                                  g$t$10473$19h1md))))
                            (g$syntax-dispatch$7952$19h1md
                              g$t$10473$19h1md
                              '(any . each-any)))))
                        g$spec$10472$19h1md))))
                  (g$add-imports!$10460$19h1md
                    (case-lambda
                      ((g$imp$10464$19h1md g$h$10465$19h1md)
                       ((case-lambda
                          ((g$subst$10466$19h1md)
                           (for-each
                             (case-lambda
                               ((g$x$10467$19h1md)
                                ((case-lambda
                                   ((g$name$10468$19h1md g$label$10469$19h1md)
                                    ((case-lambda
                                       ((g$t$10470$19h1md)
                                        (if g$t$10470$19h1md
                                          ((case-lambda
                                             ((g$l$10471$19h1md)
                                              (if (not (eq? g$l$10471$19h1md
                                                            g$label$10469$19h1md))
                                                (g$dup-error$10451$19h1md
                                                  g$name$10468$19h1md)
                                                (void))))
                                           g$t$10470$19h1md)
                                          (g$hashtable-set!$5601$19h1md
                                            g$h$10465$19h1md
                                            g$name$10468$19h1md
                                            g$label$10469$19h1md))))
                                     (g$hashtable-ref$5600$19h1md
                                       g$h$10465$19h1md
                                       g$name$10468$19h1md
                                       '#f))))
                                 (car g$x$10467$19h1md)
                                 (cdr g$x$10467$19h1md))))
                             g$subst$10466$19h1md)))
                        (g$get-import$10459$19h1md g$imp$10464$19h1md))))))
          ((letrec ((g$f$10461$19h1md
                      (case-lambda
                        ((g$imp*$10462$19h1md g$h$10463$19h1md)
                         (if (null? g$imp*$10462$19h1md)
                           (hashtable-entries g$h$10463$19h1md)
                           (begin
                             (g$add-imports!$10460$19h1md
                               (car g$imp*$10462$19h1md)
                               g$h$10463$19h1md)
                             (g$f$10461$19h1md
                               (cdr g$imp*$10462$19h1md)
                               g$h$10463$19h1md)))))))
             g$f$10461$19h1md)
           g$imp*$10449$19h1md
           (g$make-eq-hashtable$5597$19h1md))))))
   (g$make-top-rib$8002$19h1md
     g$make-top-rib$11441$19h1md
     (case-lambda
       ((g$names$10711$19h1md g$labels$10712$19h1md)
        ((case-lambda
           ((g$rib$10713$19h1md)
            (begin
              (vector-for-each
                (case-lambda
                  ((g$name$10714$19h1md g$label$10715$19h1md)
                   (begin
                     (if (not (symbol? g$name$10714$19h1md))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$10714$19h1md)
                       (void))
                     (g$extend-rib!$7638$19h1md
                       g$rib$10713$19h1md
                       (g$make-stx$7647$19h1md
                         g$name$10714$19h1md
                         g$top-mark*$7616$19h1md
                         '()
                         '())
                       g$label$10715$19h1md))))
                g$names$10711$19h1md
                g$labels$10712$19h1md)
              g$rib$10713$19h1md)))
         (g$make-empty-rib$7637$19h1md)))))
   (g$make-collector$8003$19h1md
     g$make-collector$11442$19h1md
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$10716$19h1md)
            (case-lambda
              (() g$ls$10716$19h1md)
              ((g$x$10717$19h1md)
               (set! g$ls$10716$19h1md
                 (g$set-cons$7613$19h1md
                   g$x$10717$19h1md
                   g$ls$10716$19h1md))))))
         '()))))
   (g$inv-collector$8004$19h1md
     g$inv-collector$11443$19h1md
     (g$make-parameter$6941$19h1md
       (case-lambda
         (g$args$10718$19h1md
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10719$19h1md)
          (begin
            (if (not (procedure? g$x$10719$19h1md))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$10719$19h1md)
              (void))
            g$x$10719$19h1md)))))
   (g$vis-collector$8005$19h1md
     g$vis-collector$11444$19h1md
     (g$make-parameter$6941$19h1md
       (case-lambda
         (g$args$10720$19h1md
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10721$19h1md)
          (begin
            (if (not (procedure? g$x$10721$19h1md))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$10721$19h1md)
              (void))
            g$x$10721$19h1md)))))
   (g$imp-collector$8006$19h1md
     g$imp-collector$11445$19h1md
     (g$make-parameter$6941$19h1md
       (case-lambda
         (g$args$10722$19h1md
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10723$19h1md)
          (begin
            (if (not (procedure? g$x$10723$19h1md))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$10723$19h1md)
              (void))
            g$x$10723$19h1md)))))
   (g$chi-library-internal$8007$19h1md
     g$chi-library-internal$11446$19h1md
     (case-lambda
       ((g$e*$10724$19h1md g$rib$10725$19h1md g$top?$10726$19h1md)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7996$19h1md
               g$e*$10724$19h1md
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$10725$19h1md
               g$top?$10726$19h1md)))
          (case-lambda
            ((g$e*$10734$19h1md
               g$r$10735$19h1md
               g$mr$10736$19h1md
               g$lex*$10737$19h1md
               g$rhs*$10738$19h1md
               g$mod**$10739$19h1md
               g$_kwd*$10740$19h1md)
             ((case-lambda
                ((g$_kwd*$10741$19h1md
                   g$mod**$10742$19h1md
                   g$rhs*$10743$19h1md
                   g$lex*$10744$19h1md
                   g$mr$10745$19h1md
                   g$r$10746$19h1md
                   g$e*$10747$19h1md)
                 (values
                   (append
                     (apply append (reverse g$mod**$10742$19h1md))
                     g$e*$10747$19h1md)
                   g$r$10746$19h1md
                   g$mr$10745$19h1md
                   (reverse g$lex*$10744$19h1md)
                   (reverse g$rhs*$10743$19h1md))))
              g$_kwd*$10740$19h1md
              g$mod**$10739$19h1md
              g$rhs*$10738$19h1md
              g$lex*$10737$19h1md
              g$mr$10736$19h1md
              g$r$10735$19h1md
              g$e*$10734$19h1md)))))))
   (g$chi-interaction-expr$8008$19h1md
     g$chi-interaction-expr$11447$19h1md
     (case-lambda
       ((g$e$10748$19h1md g$rib$10749$19h1md g$r$10750$19h1md)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7996$19h1md
               (list g$e$10748$19h1md)
               g$r$10750$19h1md
               g$r$10750$19h1md
               '()
               '()
               '()
               '()
               g$rib$10749$19h1md
               '#t)))
          (case-lambda
            ((g$e*$10758$19h1md
               g$r$10759$19h1md
               g$mr$10760$19h1md
               g$lex*$10761$19h1md
               g$rhs*$10762$19h1md
               g$mod**$10763$19h1md
               g$_kwd*$10764$19h1md)
             ((case-lambda
                ((g$_kwd*$10765$19h1md
                   g$mod**$10766$19h1md
                   g$rhs*$10767$19h1md
                   g$lex*$10768$19h1md
                   g$mr$10769$19h1md
                   g$r$10770$19h1md
                   g$e*$10771$19h1md)
                 ((case-lambda
                    ((g$e*$10772$19h1md)
                     ((case-lambda
                        ((g$e$10773$19h1md)
                         (values g$e$10773$19h1md g$r$10770$19h1md)))
                      (if (null? g$e*$10772$19h1md)
                        (g$build-void$7609$19h1md)
                        (if (null? (cdr g$e*$10772$19h1md))
                          (car g$e*$10772$19h1md)
                          (g$build-sequence$7608$19h1md
                            '#f
                            g$e*$10772$19h1md))))))
                  (g$expand-interaction-rhs*/init*$7977$19h1md
                    (reverse g$lex*$10768$19h1md)
                    (reverse g$rhs*$10767$19h1md)
                    (append
                      (apply append (reverse g$mod**$10766$19h1md))
                      g$e*$10771$19h1md)
                    g$r$10770$19h1md
                    g$mr$10769$19h1md))))
              g$_kwd*$10764$19h1md
              g$mod**$10763$19h1md
              g$rhs*$10762$19h1md
              g$lex*$10761$19h1md
              g$mr$10760$19h1md
              g$r$10759$19h1md
              g$e*$10758$19h1md)))))))
   (g$library-body-expander$8009$19h1md
     g$library-body-expander$11448$19h1md
     (case-lambda
       ((g$name$10774$19h1md
          g$exp*$10775$19h1md
          g$imp*$10776$19h1md
          g$b*$10777$19h1md
          g$top?$10778$19h1md)
        (letrec* ((g$itc$10779$19h1md (g$make-collector$8003$19h1md)))
          ((case-lambda
             ((g$imp-collector$10784$19h1md
                g$top-level-context$10785$19h1md
                g$imp-collector$10786$19h1md
                g$top-level-context$10787$19h1md)
              ((case-lambda
                 ((g$swap$10788$19h1md)
                  (dynamic-wind
                    g$swap$10788$19h1md
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-exports$7998$19h1md g$exp*$10775$19h1md)))
                         (case-lambda
                           ((g$exp-int*$10791$19h1md g$exp-ext*$10792$19h1md)
                            ((case-lambda
                               ((g$exp-ext*$10793$19h1md
                                  g$exp-int*$10794$19h1md)
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (g$parse-import-spec*$8001$19h1md
                                       g$imp*$10776$19h1md)))
                                  (case-lambda
                                    ((g$subst-names$10797$19h1md
                                       g$subst-labels$10798$19h1md)
                                     ((case-lambda
                                        ((g$subst-labels$10799$19h1md
                                           g$subst-names$10800$19h1md)
                                         ((case-lambda
                                            ((g$rib$10801$19h1md)
                                             ((case-lambda
                                                ((g$b*$10802$19h1md
                                                   g$rtc$10803$19h1md
                                                   g$vtc$10804$19h1md)
                                                 ((case-lambda
                                                    ((g$inv-collector$10809$19h1md
                                                       g$vis-collector$10810$19h1md
                                                       g$inv-collector$10811$19h1md
                                                       g$vis-collector$10812$19h1md)
                                                     ((case-lambda
                                                        ((g$swap$10813$19h1md)
                                                         (dynamic-wind
                                                           g$swap$10813$19h1md
                                                           (case-lambda
                                                             (()
                                                              (call-with-values
                                                                (case-lambda
                                                                  (()
                                                                   (g$chi-library-internal$8007$19h1md
                                                                     g$b*$10802$19h1md
                                                                     g$rib$10801$19h1md
                                                                     g$top?$10778$19h1md)))
                                                                (case-lambda
                                                                  ((g$init*$10819$19h1md
                                                                     g$r$10820$19h1md
                                                                     g$mr$10821$19h1md
                                                                     g$lex*$10822$19h1md
                                                                     g$rhs*$10823$19h1md)
                                                                   ((case-lambda
                                                                      ((g$rhs*$10824$19h1md
                                                                         g$lex*$10825$19h1md
                                                                         g$mr$10826$19h1md
                                                                         g$r$10827$19h1md
                                                                         g$init*$10828$19h1md)
                                                                       (begin
                                                                         (g$seal-rib!$7640$19h1md
                                                                           g$rib$10801$19h1md)
                                                                         ((case-lambda
                                                                            ((g$init*$10829$19h1md)
                                                                             ((case-lambda
                                                                                ((g$rhs*$10830$19h1md)
                                                                                 ((case-lambda
                                                                                    (()
                                                                                     (begin
                                                                                       (g$unseal-rib!$7641$19h1md
                                                                                         g$rib$10801$19h1md)
                                                                                       ((case-lambda
                                                                                          ((g$loc*$10831$19h1md
                                                                                             g$export-subst$10832$19h1md)
                                                                                           (letrec* ((g$errstr$10833$19h1md
                                                                                                       '"attempt to export mutated variable"))
                                                                                             (call-with-values
                                                                                               (case-lambda
                                                                                                 (()
                                                                                                  (g$make-export-env/macros$8050$19h1md
                                                                                                    g$lex*$10825$19h1md
                                                                                                    g$loc*$10831$19h1md
                                                                                                    g$r$10827$19h1md)))
                                                                                               (case-lambda
                                                                                                 ((g$export-env$10837$19h1md
                                                                                                    g$global*$10838$19h1md
                                                                                                    g$macro*$10839$19h1md)
                                                                                                  ((case-lambda
                                                                                                     ((g$macro*$10840$19h1md
                                                                                                        g$global*$10841$19h1md
                                                                                                        g$export-env$10842$19h1md)
                                                                                                      (begin
                                                                                                        (for-each
                                                                                                          (case-lambda
                                                                                                            ((g$s$10843$19h1md)
                                                                                                             ((case-lambda
                                                                                                                ((g$name$10844$19h1md
                                                                                                                   g$label$10845$19h1md)
                                                                                                                 ((case-lambda
                                                                                                                    ((g$p$10846$19h1md)
                                                                                                                     (if g$p$10846$19h1md
                                                                                                                       ((case-lambda
                                                                                                                          ((g$b$10847$19h1md)
                                                                                                                           ((case-lambda
                                                                                                                              ((g$type$10848$19h1md)
                                                                                                                               (if (eq? g$type$10848$19h1md
                                                                                                                                        'mutable)
                                                                                                                                 (g$syntax-violation$8061$19h1md
                                                                                                                                   'export
                                                                                                                                   g$errstr$10833$19h1md
                                                                                                                                   g$name$10844$19h1md)
                                                                                                                                 (void))))
                                                                                                                            (car g$b$10847$19h1md))))
                                                                                                                        (cdr g$p$10846$19h1md))
                                                                                                                       (void))))
                                                                                                                  (assq
                                                                                                                    g$label$10845$19h1md
                                                                                                                    g$export-env$10842$19h1md))))
                                                                                                              (car g$s$10843$19h1md)
                                                                                                              (cdr g$s$10843$19h1md))))
                                                                                                          g$export-subst$10832$19h1md)
                                                                                                        ((case-lambda
                                                                                                           ((g$invoke-body$10849$19h1md
                                                                                                              g$invoke-definitions$10850$19h1md)
                                                                                                            (values
                                                                                                              (g$itc$10779$19h1md)
                                                                                                              (g$rtc$10803$19h1md)
                                                                                                              (g$vtc$10804$19h1md)
                                                                                                              (g$build-sequence$7608$19h1md
                                                                                                                '#f
                                                                                                                (append
                                                                                                                  g$invoke-definitions$10850$19h1md
                                                                                                                  (list
                                                                                                                    g$invoke-body$10849$19h1md)))
                                                                                                              g$macro*$10840$19h1md
                                                                                                              g$export-subst$10832$19h1md
                                                                                                              g$export-env$10842$19h1md)))
                                                                                                         (g$build-library-letrec*$7612$19h1md
                                                                                                           '#f
                                                                                                           g$name$10774$19h1md
                                                                                                           g$lex*$10825$19h1md
                                                                                                           g$loc*$10831$19h1md
                                                                                                           g$rhs*$10830$19h1md
                                                                                                           (if (null?
                                                                                                                 g$init*$10829$19h1md)
                                                                                                             (g$build-void$7609$19h1md)
                                                                                                             (g$build-sequence$7608$19h1md
                                                                                                               '#f
                                                                                                               g$init*$10829$19h1md)))
                                                                                                         (map g$build-global-define$7604$19h1md
                                                                                                              (map cdr
                                                                                                                   g$global*$10841$19h1md))))))
                                                                                                   g$macro*$10839$19h1md
                                                                                                   g$global*$10838$19h1md
                                                                                                   g$export-env$10837$19h1md)))))))
                                                                                        (map g$gen-global$7619$19h1md
                                                                                             g$lex*$10825$19h1md)
                                                                                        (g$make-export-subst$8049$19h1md
                                                                                          g$exp-int*$10794$19h1md
                                                                                          g$exp-ext*$10793$19h1md
                                                                                          g$rib$10801$19h1md))))))))
                                                                              (g$chi-rhs*$7978$19h1md
                                                                                g$rhs*$10824$19h1md
                                                                                g$r$10827$19h1md
                                                                                g$mr$10826$19h1md))))
                                                                          (g$chi-expr*$7968$19h1md
                                                                            g$init*$10828$19h1md
                                                                            g$r$10827$19h1md
                                                                            g$mr$10826$19h1md)))))
                                                                    g$rhs*$10823$19h1md
                                                                    g$lex*$10822$19h1md
                                                                    g$mr$10821$19h1md
                                                                    g$r$10820$19h1md
                                                                    g$init*$10819$19h1md))))))
                                                           g$swap$10813$19h1md)))
                                                      (case-lambda
                                                        (()
                                                         (begin
                                                           ((case-lambda
                                                              ((g$t$10851$19h1md)
                                                               (begin
                                                                 (g$inv-collector$10809$19h1md
                                                                   g$inv-collector$10811$19h1md)
                                                                 (set! g$inv-collector$10811$19h1md
                                                                   g$t$10851$19h1md))))
                                                            (g$inv-collector$10809$19h1md))
                                                           ((case-lambda
                                                              ((g$t$10852$19h1md)
                                                               (begin
                                                                 (g$vis-collector$10810$19h1md
                                                                   g$vis-collector$10812$19h1md)
                                                                 (set! g$vis-collector$10812$19h1md
                                                                   g$t$10852$19h1md))))
                                                            (g$vis-collector$10810$19h1md))))))))
                                                  g$inv-collector$8004$19h1md
                                                  g$vis-collector$8005$19h1md
                                                  g$rtc$10803$19h1md
                                                  g$vtc$10804$19h1md)))
                                              (map (case-lambda
                                                     ((g$x$10853$19h1md)
                                                      (g$make-stx$7647$19h1md
                                                        g$x$10853$19h1md
                                                        g$top-mark*$7616$19h1md
                                                        (list
                                                          g$rib$10801$19h1md)
                                                        '())))
                                                   g$b*$10777$19h1md)
                                              (g$make-collector$8003$19h1md)
                                              (g$make-collector$8003$19h1md))))
                                          (g$make-top-rib$8002$19h1md
                                            g$subst-names$10800$19h1md
                                            g$subst-labels$10799$19h1md))))
                                      g$subst-labels$10798$19h1md
                                      g$subst-names$10797$19h1md))))))
                             g$exp-ext*$10792$19h1md
                             g$exp-int*$10791$19h1md))))))
                    g$swap$10788$19h1md)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$10854$19h1md)
                        (begin
                          (g$imp-collector$10784$19h1md
                            g$imp-collector$10786$19h1md)
                          (set! g$imp-collector$10786$19h1md
                            g$t$10854$19h1md))))
                     (g$imp-collector$10784$19h1md))
                    ((case-lambda
                       ((g$t$10855$19h1md)
                        (begin
                          (g$top-level-context$10785$19h1md
                            g$top-level-context$10787$19h1md)
                          (set! g$top-level-context$10787$19h1md
                            g$t$10855$19h1md))))
                     (g$top-level-context$10785$19h1md))))))))
           g$imp-collector$8006$19h1md
           g$top-level-context$8068$19h1md
           g$itc$10779$19h1md
           '#f)))))
   (g$core-library-expander$8010$19h1md
     g$core-library-expander$11449$19h1md
     (case-lambda
       ((g$e$10856$19h1md g$verify-name$10857$19h1md)
        (call-with-values
          (case-lambda (() (g$parse-library$8000$19h1md g$e$10856$19h1md)))
          (case-lambda
            ((g$name*$10862$19h1md
               g$exp*$10863$19h1md
               g$imp*$10864$19h1md
               g$b*$10865$19h1md)
             ((case-lambda
                ((g$b*$10866$19h1md
                   g$imp*$10867$19h1md
                   g$exp*$10868$19h1md
                   g$name*$10869$19h1md)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$parse-library-name$7999$19h1md g$name*$10869$19h1md)))
                   (case-lambda
                     ((g$name$10872$19h1md g$ver$10873$19h1md)
                      ((case-lambda
                         ((g$ver$10874$19h1md g$name$10875$19h1md)
                          (begin
                            (g$verify-name$10857$19h1md g$name$10875$19h1md)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$8009$19h1md
                                   g$name$10875$19h1md
                                   g$exp*$10868$19h1md
                                   g$imp*$10867$19h1md
                                   g$b*$10866$19h1md
                                   '#f)))
                              (case-lambda
                                ((g$imp*$10883$19h1md
                                   g$invoke-req*$10884$19h1md
                                   g$visit-req*$10885$19h1md
                                   g$invoke-code$10886$19h1md
                                   g$visit-code$10887$19h1md
                                   g$export-subst$10888$19h1md
                                   g$export-env$10889$19h1md)
                                 ((case-lambda
                                    ((g$export-env$10890$19h1md
                                       g$export-subst$10891$19h1md
                                       g$visit-code$10892$19h1md
                                       g$invoke-code$10893$19h1md
                                       g$visit-req*$10894$19h1md
                                       g$invoke-req*$10895$19h1md
                                       g$imp*$10896$19h1md)
                                     (values
                                       g$name$10875$19h1md
                                       g$ver$10874$19h1md
                                       g$imp*$10896$19h1md
                                       g$invoke-req*$10895$19h1md
                                       g$visit-req*$10894$19h1md
                                       g$invoke-code$10893$19h1md
                                       g$visit-code$10892$19h1md
                                       g$export-subst$10891$19h1md
                                       g$export-env$10890$19h1md)))
                                  g$export-env$10889$19h1md
                                  g$export-subst$10888$19h1md
                                  g$visit-code$10887$19h1md
                                  g$invoke-code$10886$19h1md
                                  g$visit-req*$10885$19h1md
                                  g$invoke-req*$10884$19h1md
                                  g$imp*$10883$19h1md)))))))
                       g$ver$10873$19h1md
                       g$name$10872$19h1md))))))
              g$b*$10865$19h1md
              g$imp*$10864$19h1md
              g$exp*$10863$19h1md
              g$name*$10862$19h1md)))))))
   (g$parse-top-level-program$8011$19h1md
     g$parse-top-level-program$11450$19h1md
     (case-lambda
       ((g$e*$10897$19h1md)
        ((case-lambda
           ((g$t$10898$19h1md)
            ((case-lambda
               ((g$ls/false$10899$19h1md)
                (if (if g$ls/false$10899$19h1md
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$10900$19h1md
                               g$imp*$10901$19h1md
                               g$b*$10902$19h1md)
                             (eq? (g$syntax->datum$8064$19h1md
                                    g$import$10900$19h1md)
                                  'import)))
                          g$ls/false$10899$19h1md))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$10903$19h1md
                         g$imp*$10904$19h1md
                         g$b*$10905$19h1md)
                       (values g$imp*$10904$19h1md g$b*$10905$19h1md)))
                    g$ls/false$10899$19h1md)
                  ((case-lambda
                     ((g$t$10906$19h1md)
                      ((case-lambda
                         ((g$ls/false$10907$19h1md)
                          (if (if g$ls/false$10907$19h1md
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$10908$19h1md
                                         g$x$10909$19h1md
                                         g$y$10910$19h1md)
                                       (eq? (g$syntax->datum$8064$19h1md
                                              g$import$10908$19h1md)
                                            'import)))
                                    g$ls/false$10907$19h1md))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$10911$19h1md
                                   g$x$10912$19h1md
                                   g$y$10913$19h1md)
                                 (g$syntax-violation$8061$19h1md
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$7671$19h1md
                                     g$e*$10897$19h1md))))
                              g$ls/false$10907$19h1md)
                            ((case-lambda
                               ((g$t$10914$19h1md)
                                ((case-lambda
                                   ((g$ls/false$10915$19h1md)
                                    (if g$ls/false$10915$19h1md
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$10915$19h1md)
                                      (g$syntax-violation$8061$19h1md
                                        '#f
                                        '"invalid syntax"
                                        g$t$10914$19h1md))))
                                 (g$syntax-dispatch$7952$19h1md
                                   g$t$10914$19h1md
                                   '_))))
                             g$t$10906$19h1md))))
                       (g$syntax-dispatch$7952$19h1md
                         g$t$10906$19h1md
                         '((any . any) . any)))))
                   g$t$10898$19h1md))))
             (g$syntax-dispatch$7952$19h1md
               g$t$10898$19h1md
               '((any . each-any) . each-any)))))
         g$e*$10897$19h1md))))
   (g$top-level-expander$8012$19h1md
     g$top-level-expander$11451$19h1md
     (case-lambda
       ((g$e*$10916$19h1md)
        (call-with-values
          (case-lambda
            (() (g$parse-top-level-program$8011$19h1md g$e*$10916$19h1md)))
          (case-lambda
            ((g$imp*$10919$19h1md g$b*$10920$19h1md)
             ((case-lambda
                ((g$b*$10921$19h1md g$imp*$10922$19h1md)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$8009$19h1md
                        '()
                        '()
                        g$imp*$10922$19h1md
                        g$b*$10921$19h1md
                        '#t)))
                   (case-lambda
                     ((g$imp*$10930$19h1md
                        g$invoke-req*$10931$19h1md
                        g$visit-req*$10932$19h1md
                        g$invoke-code$10933$19h1md
                        g$visit-code$10934$19h1md
                        g$export-subst$10935$19h1md
                        g$export-env$10936$19h1md)
                      ((case-lambda
                         ((g$export-env$10937$19h1md
                            g$export-subst$10938$19h1md
                            g$visit-code$10939$19h1md
                            g$invoke-code$10940$19h1md
                            g$visit-req*$10941$19h1md
                            g$invoke-req*$10942$19h1md
                            g$imp*$10943$19h1md)
                          (values
                            g$invoke-req*$10942$19h1md
                            g$invoke-code$10940$19h1md)))
                       g$export-env$10936$19h1md
                       g$export-subst$10935$19h1md
                       g$visit-code$10934$19h1md
                       g$invoke-code$10933$19h1md
                       g$visit-req*$10932$19h1md
                       g$invoke-req*$10931$19h1md
                       g$imp*$10930$19h1md))))))
              g$b*$10920$19h1md
              g$imp*$10919$19h1md)))))))
   (g$9647$8013$19h1md
     g$9647$11452$19h1md
     (make-record-type-descriptor
       'env
       '#f
       'g$9650$19h1md
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$9649$8014$19h1md g$9649$11453$19h1md '#f)
   (g$9648$8015$19h1md
     g$9648$11454$19h1md
     (make-record-constructor-descriptor
       g$9647$8013$19h1md
       '#f
       g$9649$8014$19h1md))
   (g$env?$8016$19h1md
     g$env?$11455$19h1md
     (record-predicate g$9647$8013$19h1md))
   (g$make-env$8017$19h1md
     g$make-env$11456$19h1md
     (record-constructor g$9648$8015$19h1md))
   (g$env-names$8018$19h1md
     g$env-names$11457$19h1md
     (record-accessor g$9647$8013$19h1md '0))
   (g$env-labels$8019$19h1md
     g$env-labels$11458$19h1md
     (record-accessor g$9647$8013$19h1md '1))
   (g$env-itc$8020$19h1md
     g$env-itc$11459$19h1md
     (record-accessor g$9647$8013$19h1md '2))
   (g$set-env-names!$8021$19h1md
     g$set-env-names!$11460$19h1md
     (record-mutator g$9647$8013$19h1md '0))
   (g$set-env-labels!$8022$19h1md
     g$set-env-labels!$11461$19h1md
     (record-mutator g$9647$8013$19h1md '1))
   (g$set-env-itc!$8023$19h1md
     g$set-env-itc!$11462$19h1md
     (record-mutator g$9647$8013$19h1md '2))
   (g$rp$8024$19h1md
     g$rp$11463$19h1md
     (make-record-printer
       'env
       (case-lambda
         ((g$x$10944$19h1md g$p$10945$19h1md)
          (display '"#<environment>" g$p$10945$19h1md)))))
   (g$9666$8025$19h1md
     g$9666$11464$19h1md
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$9669$19h1md
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$9668$8026$19h1md g$9668$11465$19h1md '#f)
   (g$9667$8027$19h1md
     g$9667$11466$19h1md
     (make-record-constructor-descriptor
       g$9666$8025$19h1md
       '#f
       g$9668$8026$19h1md))
   (g$interaction-env?$8028$19h1md
     g$interaction-env?$11467$19h1md
     (record-predicate g$9666$8025$19h1md))
   (g$make-interaction-env$8029$19h1md
     g$make-interaction-env$11468$19h1md
     (record-constructor g$9667$8027$19h1md))
   (g$interaction-env-rib$8030$19h1md
     g$interaction-env-rib$11469$19h1md
     (record-accessor g$9666$8025$19h1md '0))
   (g$interaction-env-r$8031$19h1md
     g$interaction-env-r$11470$19h1md
     (record-accessor g$9666$8025$19h1md '1))
   (g$interaction-env-locs$8032$19h1md
     g$interaction-env-locs$11471$19h1md
     (record-accessor g$9666$8025$19h1md '2))
   (g$set-interaction-env-rib!$8033$19h1md
     g$set-interaction-env-rib!$11472$19h1md
     (record-mutator g$9666$8025$19h1md '0))
   (g$set-interaction-env-r!$8034$19h1md
     g$set-interaction-env-r!$11473$19h1md
     (record-mutator g$9666$8025$19h1md '1))
   (g$set-interaction-env-locs!$8035$19h1md
     g$set-interaction-env-locs!$11474$19h1md
     (record-mutator g$9666$8025$19h1md '2))
   (g$rp$8036$19h1md
     g$rp$11475$19h1md
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$10946$19h1md g$p$10947$19h1md)
          (display '"#<environment>" g$p$10947$19h1md)))))
   (g$interaction-environment-symbols$8037$19h1md
     g$interaction-environment-symbols$11476$19h1md
     (case-lambda
       (()
        (map (case-lambda ((g$x$10948$19h1md) g$x$10948$19h1md))
             (g$rib-sym*$7629$19h1md
               (g$interaction-env-rib$8030$19h1md
                 (g$interaction-environment$8067$19h1md)))))))
   (g$environment-symbols$8038$19h1md
     g$environment-symbols$11477$19h1md
     (case-lambda
       ((g$e$10949$19h1md)
        (vector->list (g$env-names$8018$19h1md g$e$10949$19h1md)))))
   (g$environment?$8039$19h1md
     g$environment?$11478$19h1md
     (case-lambda
       ((g$x$10950$19h1md)
        ((case-lambda
           ((g$t$10951$19h1md)
            (if g$t$10951$19h1md
              g$t$10951$19h1md
              (begin '#f (g$interaction-env?$8028$19h1md g$x$10950$19h1md)))))
         (g$env?$8016$19h1md g$x$10950$19h1md)))))
   (g$environment$8040$19h1md
     g$environment$11479$19h1md
     (case-lambda
       (g$imp*$10952$19h1md
        ((case-lambda
           ((g$itc$10953$19h1md)
            ((case-lambda
               ((g$imp-collector$10956$19h1md g$imp-collector$10957$19h1md)
                ((case-lambda
                   ((g$swap$10958$19h1md)
                    (dynamic-wind
                      g$swap$10958$19h1md
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$8001$19h1md
                                g$imp*$10952$19h1md)))
                           (case-lambda
                             ((g$subst-names$10961$19h1md
                                g$subst-labels$10962$19h1md)
                              ((case-lambda
                                 ((g$subst-labels$10963$19h1md
                                    g$subst-names$10964$19h1md)
                                  (g$make-env$8017$19h1md
                                    g$subst-names$10964$19h1md
                                    g$subst-labels$10963$19h1md
                                    g$itc$10953$19h1md)))
                               g$subst-labels$10962$19h1md
                               g$subst-names$10961$19h1md))))))
                      g$swap$10958$19h1md)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$10965$19h1md)
                        (begin
                          (g$imp-collector$10956$19h1md
                            g$imp-collector$10957$19h1md)
                          (set! g$imp-collector$10957$19h1md
                            g$t$10965$19h1md))))
                     (g$imp-collector$10956$19h1md)))))))
             g$imp-collector$8006$19h1md
             g$itc$10953$19h1md)))
         (g$make-collector$8003$19h1md)))))
   (g$null-environment$8041$19h1md
     g$null-environment$11480$19h1md
     (case-lambda
       ((g$n$10966$19h1md)
        (begin
          (if (not (eqv? g$n$10966$19h1md '5))
            (assertion-violation 'null-environment '"not 5" g$n$10966$19h1md)
            (void))
          (g$environment$8040$19h1md '(psyntax null-environment-5))))))
   (g$scheme-report-environment$8042$19h1md
     g$scheme-report-environment$11481$19h1md
     (case-lambda
       ((g$n$10967$19h1md)
        (begin
          (if (not (eqv? g$n$10967$19h1md '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$10967$19h1md)
            (void))
          (g$environment$8040$19h1md '(psyntax scheme-report-environment-5))))))
   (g$expand$8043$19h1md
     g$expand$11482$19h1md
     (case-lambda
       ((g$x$10968$19h1md g$env$10969$19h1md)
        (if (g$env?$8016$19h1md g$env$10969$19h1md)
          ((case-lambda
             ((g$rib$10970$19h1md)
              ((case-lambda
                 ((g$x$10971$19h1md
                    g$itc$10972$19h1md
                    g$rtc$10973$19h1md
                    g$vtc$10974$19h1md)
                  ((case-lambda
                     ((g$x$10975$19h1md)
                      (begin
                        (g$seal-rib!$7640$19h1md g$rib$10970$19h1md)
                        (values g$x$10975$19h1md (g$rtc$10973$19h1md)))))
                   ((case-lambda
                      ((g$inv-collector$10982$19h1md
                         g$vis-collector$10983$19h1md
                         g$imp-collector$10984$19h1md
                         g$inv-collector$10985$19h1md
                         g$vis-collector$10986$19h1md
                         g$imp-collector$10987$19h1md)
                       ((case-lambda
                          ((g$swap$10988$19h1md)
                           (dynamic-wind
                             g$swap$10988$19h1md
                             (case-lambda
                               (()
                                (g$chi-expr$7970$19h1md
                                  g$x$10971$19h1md
                                  '()
                                  '())))
                             g$swap$10988$19h1md)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$10989$19h1md)
                                 (begin
                                   (g$inv-collector$10982$19h1md
                                     g$inv-collector$10985$19h1md)
                                   (set! g$inv-collector$10985$19h1md
                                     g$t$10989$19h1md))))
                              (g$inv-collector$10982$19h1md))
                             ((case-lambda
                                ((g$t$10990$19h1md)
                                 (begin
                                   (g$vis-collector$10983$19h1md
                                     g$vis-collector$10986$19h1md)
                                   (set! g$vis-collector$10986$19h1md
                                     g$t$10990$19h1md))))
                              (g$vis-collector$10983$19h1md))
                             ((case-lambda
                                ((g$t$10991$19h1md)
                                 (begin
                                   (g$imp-collector$10984$19h1md
                                     g$imp-collector$10987$19h1md)
                                   (set! g$imp-collector$10987$19h1md
                                     g$t$10991$19h1md))))
                              (g$imp-collector$10984$19h1md))))))))
                    g$inv-collector$8004$19h1md
                    g$vis-collector$8005$19h1md
                    g$imp-collector$8006$19h1md
                    g$rtc$10973$19h1md
                    g$vtc$10974$19h1md
                    g$itc$10972$19h1md))))
               (g$make-stx$7647$19h1md
                 g$x$10968$19h1md
                 g$top-mark*$7616$19h1md
                 (list g$rib$10970$19h1md)
                 '())
               (g$env-itc$8020$19h1md g$env$10969$19h1md)
               (g$make-collector$8003$19h1md)
               (g$make-collector$8003$19h1md))))
           (g$make-top-rib$8002$19h1md
             (g$env-names$8018$19h1md g$env$10969$19h1md)
             (g$env-labels$8019$19h1md g$env$10969$19h1md)))
          (if (g$interaction-env?$8028$19h1md g$env$10969$19h1md)
            ((case-lambda
               ((g$rib$10992$19h1md g$r$10993$19h1md g$rtc$10994$19h1md)
                ((case-lambda
                   ((g$x$10995$19h1md)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$11006$19h1md
                               g$inv-collector$11007$19h1md
                               g$vis-collector$11008$19h1md
                               g$imp-collector$11009$19h1md
                               g$top-level-context$11010$19h1md
                               g$inv-collector$11011$19h1md
                               g$vis-collector$11012$19h1md
                               g$imp-collector$11013$19h1md)
                             ((case-lambda
                                ((g$swap$11014$19h1md)
                                 (dynamic-wind
                                   g$swap$11014$19h1md
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$8008$19h1md
                                        g$x$10995$19h1md
                                        g$rib$10992$19h1md
                                        g$r$10993$19h1md)))
                                   g$swap$11014$19h1md)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$11015$19h1md)
                                       (begin
                                         (g$top-level-context$11006$19h1md
                                           g$top-level-context$11010$19h1md)
                                         (set! g$top-level-context$11010$19h1md
                                           g$t$11015$19h1md))))
                                    (g$top-level-context$11006$19h1md))
                                   ((case-lambda
                                      ((g$t$11016$19h1md)
                                       (begin
                                         (g$inv-collector$11007$19h1md
                                           g$inv-collector$11011$19h1md)
                                         (set! g$inv-collector$11011$19h1md
                                           g$t$11016$19h1md))))
                                    (g$inv-collector$11007$19h1md))
                                   ((case-lambda
                                      ((g$t$11017$19h1md)
                                       (begin
                                         (g$vis-collector$11008$19h1md
                                           g$vis-collector$11012$19h1md)
                                         (set! g$vis-collector$11012$19h1md
                                           g$t$11017$19h1md))))
                                    (g$vis-collector$11008$19h1md))
                                   ((case-lambda
                                      ((g$t$11018$19h1md)
                                       (begin
                                         (g$imp-collector$11009$19h1md
                                           g$imp-collector$11013$19h1md)
                                         (set! g$imp-collector$11013$19h1md
                                           g$t$11018$19h1md))))
                                    (g$imp-collector$11009$19h1md))))))))
                          g$top-level-context$8068$19h1md
                          g$inv-collector$8004$19h1md
                          g$vis-collector$8005$19h1md
                          g$imp-collector$8006$19h1md
                          g$env$10969$19h1md
                          g$rtc$10994$19h1md
                          (g$make-collector$8003$19h1md)
                          (g$make-collector$8003$19h1md))))
                      (case-lambda
                        ((g$e$11019$19h1md g$r^$11020$19h1md)
                         ((case-lambda
                            ((g$r^$11021$19h1md g$e$11022$19h1md)
                             (begin
                               (g$set-interaction-env-r!$8034$19h1md
                                 g$env$10969$19h1md
                                 g$r^$11021$19h1md)
                               (values g$e$11022$19h1md (g$rtc$10994$19h1md)))))
                          g$r^$11020$19h1md
                          g$e$11019$19h1md))))))
                 (g$make-stx$7647$19h1md
                   g$x$10968$19h1md
                   g$top-mark*$7616$19h1md
                   (list g$rib$10992$19h1md)
                   '()))))
             (g$interaction-env-rib$8030$19h1md g$env$10969$19h1md)
             (g$interaction-env-r$8031$19h1md g$env$10969$19h1md)
             (g$make-collector$8003$19h1md))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$10969$19h1md))))))
   (g$eval$8044$19h1md
     g$eval$11483$19h1md
     (case-lambda
       ((g$x$11023$19h1md g$env$11024$19h1md)
        (begin
          (if (not (g$environment?$8039$19h1md g$env$11024$19h1md))
            (error 'eval '"not an environment" g$env$11024$19h1md)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$8043$19h1md g$x$11023$19h1md g$env$11024$19h1md)))
            (case-lambda
              ((g$x$11027$19h1md g$invoke-req*$11028$19h1md)
               ((case-lambda
                  ((g$invoke-req*$11029$19h1md g$x$11030$19h1md)
                   (begin
                     (for-each
                       g$invoke-library$7489$19h1md
                       g$invoke-req*$11029$19h1md)
                     (eval-core
                       (g$expanded->core$7188$19h1md g$x$11030$19h1md)))))
                g$invoke-req*$11028$19h1md
                g$x$11027$19h1md))))))))
   (g$library-expander$8045$19h1md
     g$library-expander$11484$19h1md
     (case-lambda
       ((g$x$11031$19h1md g$filename$11032$19h1md g$verify-name$11033$19h1md)
        (letrec* ((g$build-visit-code$11034$19h1md
                    (case-lambda
                      ((g$macro*$11077$19h1md)
                       (if (null? g$macro*$11077$19h1md)
                         (g$build-void$7609$19h1md)
                         (g$build-sequence$7608$19h1md
                           '#f
                           (map (case-lambda
                                  ((g$x$11078$19h1md)
                                   ((case-lambda
                                      ((g$loc$11079$19h1md g$src$11080$19h1md)
                                       (list
                                         'set!
                                         g$loc$11079$19h1md
                                         g$src$11080$19h1md)))
                                    (car g$x$11078$19h1md)
                                    (g$cddr$5325$19h1md g$x$11078$19h1md))))
                                g$macro*$11077$19h1md))))))
                  (g$visit!$11035$19h1md
                    (case-lambda
                      ((g$macro*$11073$19h1md)
                       (for-each
                         (case-lambda
                           ((g$x$11074$19h1md)
                            ((case-lambda
                               ((g$loc$11075$19h1md g$proc$11076$19h1md)
                                (set-symbol-value!
                                  g$loc$11075$19h1md
                                  g$proc$11076$19h1md)))
                             (car g$x$11074$19h1md)
                             (g$cadr$5323$19h1md g$x$11074$19h1md))))
                         g$macro*$11073$19h1md)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$8010$19h1md
                 g$x$11031$19h1md
                 g$verify-name$11033$19h1md)))
            (case-lambda
              ((g$name$11045$19h1md
                 g$ver$11046$19h1md
                 g$imp*$11047$19h1md
                 g$inv*$11048$19h1md
                 g$vis*$11049$19h1md
                 g$invoke-code$11050$19h1md
                 g$macro*$11051$19h1md
                 g$export-subst$11052$19h1md
                 g$export-env$11053$19h1md)
               ((case-lambda
                  ((g$export-env$11054$19h1md
                     g$export-subst$11055$19h1md
                     g$macro*$11056$19h1md
                     g$invoke-code$11057$19h1md
                     g$vis*$11058$19h1md
                     g$inv*$11059$19h1md
                     g$imp*$11060$19h1md
                     g$ver$11061$19h1md
                     g$name$11062$19h1md)
                   ((case-lambda
                      ((g$id$11063$19h1md
                         g$name$11064$19h1md
                         g$ver$11065$19h1md
                         g$imp*$11066$19h1md
                         g$vis*$11067$19h1md
                         g$inv*$11068$19h1md
                         g$visit-proc$11069$19h1md
                         g$invoke-proc$11070$19h1md
                         g$visit-code$11071$19h1md
                         g$invoke-code$11072$19h1md)
                       (begin
                         (g$install-library$7487$19h1md
                           g$id$11063$19h1md
                           g$name$11064$19h1md
                           g$ver$11065$19h1md
                           g$imp*$11066$19h1md
                           g$vis*$11067$19h1md
                           g$inv*$11068$19h1md
                           g$export-subst$11055$19h1md
                           g$export-env$11054$19h1md
                           g$visit-proc$11069$19h1md
                           g$invoke-proc$11070$19h1md
                           g$visit-code$11071$19h1md
                           g$invoke-code$11072$19h1md
                           '#t
                           g$filename$11032$19h1md)
                         (values
                           g$id$11063$19h1md
                           g$name$11064$19h1md
                           g$ver$11065$19h1md
                           g$imp*$11066$19h1md
                           g$vis*$11067$19h1md
                           g$inv*$11068$19h1md
                           g$invoke-code$11072$19h1md
                           g$visit-code$11071$19h1md
                           g$export-subst$11055$19h1md
                           g$export-env$11054$19h1md))))
                    (gensym)
                    g$name$11062$19h1md
                    g$ver$11061$19h1md
                    (map g$library-spec$7493$19h1md g$imp*$11060$19h1md)
                    (map g$library-spec$7493$19h1md g$vis*$11058$19h1md)
                    (map g$library-spec$7493$19h1md g$inv*$11059$19h1md)
                    (case-lambda
                      (() (g$visit!$11035$19h1md g$macro*$11056$19h1md)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$7188$19h1md
                           g$invoke-code$11057$19h1md))))
                    (g$build-visit-code$11034$19h1md g$macro*$11056$19h1md)
                    g$invoke-code$11057$19h1md)))
                g$export-env$11053$19h1md
                g$export-subst$11052$19h1md
                g$macro*$11051$19h1md
                g$invoke-code$11050$19h1md
                g$vis*$11049$19h1md
                g$inv*$11048$19h1md
                g$imp*$11047$19h1md
                g$ver$11046$19h1md
                g$name$11045$19h1md))))))
       ((g$x$11081$19h1md g$filename$11082$19h1md)
        (g$library-expander$8045$19h1md
          g$x$11081$19h1md
          g$filename$11082$19h1md
          (case-lambda ((g$x$11083$19h1md) (values)))))
       ((g$x$11084$19h1md)
        (g$library-expander$8045$19h1md
          g$x$11084$19h1md
          '#f
          (case-lambda ((g$x$11085$19h1md) (values)))))))
   (g$boot-library-expand$8046$19h1md
     g$boot-library-expand$11485$19h1md
     (case-lambda
       ((g$x$11086$19h1md)
        (call-with-values
          (case-lambda (() (g$library-expander$8045$19h1md g$x$11086$19h1md)))
          (case-lambda
            ((g$id$11097$19h1md
               g$name$11098$19h1md
               g$ver$11099$19h1md
               g$imp*$11100$19h1md
               g$vis*$11101$19h1md
               g$inv*$11102$19h1md
               g$invoke-code$11103$19h1md
               g$visit-code$11104$19h1md
               g$export-subst$11105$19h1md
               g$export-env$11106$19h1md)
             ((case-lambda
                ((g$export-env$11107$19h1md
                   g$export-subst$11108$19h1md
                   g$visit-code$11109$19h1md
                   g$invoke-code$11110$19h1md
                   g$inv*$11111$19h1md
                   g$vis*$11112$19h1md
                   g$imp*$11113$19h1md
                   g$ver$11114$19h1md
                   g$name$11115$19h1md
                   g$id$11116$19h1md)
                 (values
                   g$name$11115$19h1md
                   g$invoke-code$11110$19h1md
                   g$export-subst$11108$19h1md
                   g$export-env$11107$19h1md)))
              g$export-env$11106$19h1md
              g$export-subst$11105$19h1md
              g$visit-code$11104$19h1md
              g$invoke-code$11103$19h1md
              g$inv*$11102$19h1md
              g$vis*$11101$19h1md
              g$imp*$11100$19h1md
              g$ver$11099$19h1md
              g$name$11098$19h1md
              g$id$11097$19h1md)))))))
   (g$rev-map-append$8047$19h1md
     g$rev-map-append$11486$19h1md
     (case-lambda
       ((g$f$11117$19h1md g$ls$11118$19h1md g$ac$11119$19h1md)
        (if (null? g$ls$11118$19h1md)
          g$ac$11119$19h1md
          (g$rev-map-append$8047$19h1md
            g$f$11117$19h1md
            (cdr g$ls$11118$19h1md)
            (cons
              (g$f$11117$19h1md (car g$ls$11118$19h1md))
              g$ac$11119$19h1md))))))
   (g$build-exports$8048$19h1md
     g$build-exports$11487$19h1md
     (case-lambda
       ((g$lex*+loc*$11120$19h1md g$init*$11121$19h1md)
        (g$build-sequence$7608$19h1md
          '#f
          (cons
            (g$build-void$7609$19h1md)
            (g$rev-map-append$8047$19h1md
              (case-lambda
                ((g$x$11122$19h1md)
                 (list 'set! (cdr g$x$11122$19h1md) (car g$x$11122$19h1md))))
              g$lex*+loc*$11120$19h1md
              g$init*$11121$19h1md))))))
   (g$make-export-subst$8049$19h1md
     g$make-export-subst$11488$19h1md
     (case-lambda
       ((g$int*$11123$19h1md g$ext*$11124$19h1md g$rib$11125$19h1md)
        (map (case-lambda
               ((g$int$11126$19h1md g$ext$11127$19h1md)
                ((case-lambda
                   ((g$id$11128$19h1md)
                    ((case-lambda
                       ((g$label$11129$19h1md)
                        ((case-lambda
                           (()
                            (begin
                              (if (not g$label$11129$19h1md)
                                (g$syntax-violation$8061$19h1md
                                  '#f
                                  '"cannot export unbound identifier"
                                  g$id$11128$19h1md)
                                (void))
                              (cons
                                g$ext$11127$19h1md
                                g$label$11129$19h1md)))))))
                     (g$id->label$7687$19h1md g$id$11128$19h1md))))
                 (g$make-stx$7647$19h1md
                   g$int$11126$19h1md
                   g$top-mark*$7616$19h1md
                   (list g$rib$11125$19h1md)
                   '()))))
             g$int*$11123$19h1md
             g$ext*$11124$19h1md))))
   (g$make-export-env/macros$8050$19h1md
     g$make-export-env/macros$11489$19h1md
     (case-lambda
       ((g$lex*$11130$19h1md g$loc*$11131$19h1md g$r$11132$19h1md)
        (letrec* ((g$lookup$11133$19h1md
                    (case-lambda
                      ((g$x$11148$19h1md)
                       ((letrec ((g$f$11149$19h1md
                                   (case-lambda
                                     ((g$x$11150$19h1md
                                        g$lex*$11151$19h1md
                                        g$loc*$11152$19h1md)
                                      (if (pair? g$lex*$11151$19h1md)
                                        (if (eq? g$x$11150$19h1md
                                                 (car g$lex*$11151$19h1md))
                                          (car g$loc*$11152$19h1md)
                                          (g$f$11149$19h1md
                                            g$x$11150$19h1md
                                            (cdr g$lex*$11151$19h1md)
                                            (cdr g$loc*$11152$19h1md)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$11149$19h1md)
                        g$x$11148$19h1md
                        g$lex*$11130$19h1md
                        g$loc*$11131$19h1md)))))
          ((letrec ((g$f$11134$19h1md
                      (case-lambda
                        ((g$r$11135$19h1md
                           g$env$11136$19h1md
                           g$global*$11137$19h1md
                           g$macro*$11138$19h1md)
                         (if (null? g$r$11135$19h1md)
                           (values
                             g$env$11136$19h1md
                             g$global*$11137$19h1md
                             g$macro*$11138$19h1md)
                           ((case-lambda
                              ((g$x$11139$19h1md)
                               ((case-lambda
                                  ((g$label$11140$19h1md g$b$11141$19h1md)
                                   ((case-lambda
                                      ((g$t$11142$19h1md)
                                       (if (memv g$t$11142$19h1md '(lexical))
                                         ((case-lambda
                                            ((g$v$11143$19h1md)
                                             ((case-lambda
                                                ((g$loc$11144$19h1md
                                                   g$type$11145$19h1md)
                                                 (g$f$11134$19h1md
                                                   (cdr g$r$11135$19h1md)
                                                   (cons
                                                     (g$cons*$5806$19h1md
                                                       g$label$11140$19h1md
                                                       g$type$11145$19h1md
                                                       g$loc$11144$19h1md)
                                                     g$env$11136$19h1md)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$7896$19h1md
                                                         g$v$11143$19h1md)
                                                       g$loc$11144$19h1md)
                                                     g$global*$11137$19h1md)
                                                   g$macro*$11138$19h1md)))
                                              (g$lookup$11133$19h1md
                                                (g$lexical-var$7896$19h1md
                                                  g$v$11143$19h1md))
                                              (if (g$lexical-mutable?$7897$19h1md
                                                    g$v$11143$19h1md)
                                                'mutable
                                                'global))))
                                          (g$binding-value$7692$19h1md
                                            g$b$11141$19h1md))
                                         (if (memv
                                               g$t$11142$19h1md
                                               '(local-macro))
                                           ((case-lambda
                                              ((g$loc$11146$19h1md)
                                               (g$f$11134$19h1md
                                                 (cdr g$r$11135$19h1md)
                                                 (cons
                                                   (g$cons*$5806$19h1md
                                                     g$label$11140$19h1md
                                                     'global-macro
                                                     g$loc$11146$19h1md)
                                                   g$env$11136$19h1md)
                                                 g$global*$11137$19h1md
                                                 (cons
                                                   (cons
                                                     g$loc$11146$19h1md
                                                     (g$binding-value$7692$19h1md
                                                       g$b$11141$19h1md))
                                                   g$macro*$11138$19h1md))))
                                            (gensym))
                                           (if (memv
                                                 g$t$11142$19h1md
                                                 '(local-macro!))
                                             ((case-lambda
                                                ((g$loc$11147$19h1md)
                                                 (g$f$11134$19h1md
                                                   (cdr g$r$11135$19h1md)
                                                   (cons
                                                     (g$cons*$5806$19h1md
                                                       g$label$11140$19h1md
                                                       'global-macro!
                                                       g$loc$11147$19h1md)
                                                     g$env$11136$19h1md)
                                                   g$global*$11137$19h1md
                                                   (cons
                                                     (cons
                                                       g$loc$11147$19h1md
                                                       (g$binding-value$7692$19h1md
                                                         g$b$11141$19h1md))
                                                     g$macro*$11138$19h1md))))
                                              (gensym))
                                             (if (memv
                                                   g$t$11142$19h1md
                                                   '($rtd $module))
                                               (g$f$11134$19h1md
                                                 (cdr g$r$11135$19h1md)
                                                 (cons
                                                   g$x$11139$19h1md
                                                   g$env$11136$19h1md)
                                                 g$global*$11137$19h1md
                                                 g$macro*$11138$19h1md)
                                               (assertion-violation
                                                 'expander
                                                 '"BUG: do not know how to export"
                                                 (g$binding-type$7691$19h1md
                                                   g$b$11141$19h1md)
                                                 (g$binding-value$7692$19h1md
                                                   g$b$11141$19h1md))))))))
                                    (g$binding-type$7691$19h1md
                                      g$b$11141$19h1md))))
                                (car g$x$11139$19h1md)
                                (cdr g$x$11139$19h1md))))
                            (car g$r$11135$19h1md)))))))
             g$f$11134$19h1md)
           g$r$11132$19h1md
           '()
           '()
           '())))))
   (g$generate-temporaries$8051$19h1md
     g$generate-temporaries$11490$19h1md
     (case-lambda
       ((g$ls$11153$19h1md)
        ((case-lambda
           ((g$t$11154$19h1md)
            ((case-lambda
               ((g$ls/false$11155$19h1md)
                (if g$ls/false$11155$19h1md
                  (apply
                    (case-lambda
                      ((g$ls$11156$19h1md)
                       (map (case-lambda
                              ((g$x$11157$19h1md)
                               (g$make-stx$7647$19h1md
                                 ((case-lambda
                                    ((g$x$11158$19h1md)
                                     (if ((case-lambda
                                            ((g$t$11159$19h1md)
                                             (if g$t$11159$19h1md
                                               g$t$11159$19h1md
                                               (begin
                                                 '#f
                                                 (string? g$x$11158$19h1md)))))
                                          (symbol? g$x$11158$19h1md))
                                       (gensym g$x$11158$19h1md)
                                       (gensym 't))))
                                  (g$syntax->datum$8064$19h1md
                                    g$x$11157$19h1md))
                                 g$top-mark*$7616$19h1md
                                 '()
                                 '())))
                            g$ls$11156$19h1md)))
                    g$ls/false$11155$19h1md)
                  ((case-lambda
                     ((g$t$11160$19h1md)
                      ((case-lambda
                         ((g$ls/false$11161$19h1md)
                          (if g$ls/false$11161$19h1md
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$11161$19h1md)
                            (g$syntax-violation$8061$19h1md
                              '#f
                              '"invalid syntax"
                              g$t$11160$19h1md))))
                       (g$syntax-dispatch$7952$19h1md g$t$11160$19h1md '_))))
                   g$t$11154$19h1md))))
             (g$syntax-dispatch$7952$19h1md g$t$11154$19h1md 'each-any))))
         g$ls$11153$19h1md))))
   (g$free-identifier=?$8052$19h1md
     g$free-identifier=?$11491$19h1md
     (case-lambda
       ((g$x$11162$19h1md g$y$11163$19h1md)
        (if (g$id?$7674$19h1md g$x$11162$19h1md)
          (if (g$id?$7674$19h1md g$y$11163$19h1md)
            (g$free-id=?$7678$19h1md g$x$11162$19h1md g$y$11163$19h1md)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$11163$19h1md))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$11162$19h1md)))))
   (g$bound-identifier=?$8053$19h1md
     g$bound-identifier=?$11492$19h1md
     (case-lambda
       ((g$x$11164$19h1md g$y$11165$19h1md)
        (if (g$id?$7674$19h1md g$x$11164$19h1md)
          (if (g$id?$7674$19h1md g$y$11165$19h1md)
            (g$bound-id=?$7677$19h1md g$x$11164$19h1md g$y$11165$19h1md)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$11165$19h1md))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$11164$19h1md)))))
   (g$make-source-condition$8054$19h1md
     g$make-source-condition$11493$19h1md
     (case-lambda
       ((g$x$11166$19h1md)
        (letrec* ((g$12551$11167$19h1md
                    (make-record-type-descriptor
                      '&source-information
                      &condition-rtd
                      'g$12554$19h1md
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$12553$11168$19h1md '#f)
                  (g$12552$11169$19h1md
                    (make-record-constructor-descriptor
                      g$12551$11167$19h1md
                      &condition-rcd
                      g$12553$11168$19h1md))
                  (g$12550$11170$19h1md (record-predicate g$12551$11167$19h1md))
                  (g$make-source-condition$11171$19h1md
                    (record-constructor g$12552$11169$19h1md))
                  (g$12548$11172$19h1md
                    (record-accessor g$12551$11167$19h1md '0))
                  (g$12549$11173$19h1md
                    (record-accessor g$12551$11167$19h1md '1))
                  (g$source-condition?$11174$19h1md
                    (condition-predicate g$12551$11167$19h1md))
                  (g$source-filename$11175$19h1md
                    (condition-accessor
                      g$12551$11167$19h1md
                      g$12548$11172$19h1md))
                  (g$source-character$11176$19h1md
                    (condition-accessor
                      g$12551$11167$19h1md
                      g$12549$11173$19h1md)))
          (if (pair? g$x$11166$19h1md)
            (g$make-source-condition$11171$19h1md
              (car g$x$11166$19h1md)
              (cdr g$x$11166$19h1md))
            (condition))))))
   (g$extract-position-condition$8055$19h1md
     g$extract-position-condition$11494$19h1md
     (case-lambda
       ((g$x$11177$19h1md)
        (g$make-source-condition$8054$19h1md
          (g$expression-position$8056$19h1md g$x$11177$19h1md)))))
   (g$expression-position$8056$19h1md
     g$expression-position$11495$19h1md
     (case-lambda
       ((g$x$11178$19h1md)
        (if (g$stx?$7646$19h1md g$x$11178$19h1md)
          (begin
            '#f
            ((case-lambda
               ((g$x$11179$19h1md)
                (if (annotation? g$x$11179$19h1md)
                  (begin '#f (annotation-source g$x$11179$19h1md))
                  '#f)))
             (g$stx-expr$7648$19h1md g$x$11178$19h1md)))
          '#f))))
   (g$assertion-error$8057$19h1md
     g$assertion-error$11496$19h1md
     (case-lambda
       ((g$expr$11180$19h1md g$pos$11181$19h1md)
        (raise
          (condition
            (g$make-assertion-violation$6090$19h1md)
            (g$make-who-condition$6104$19h1md 'assert)
            (g$make-message-condition$6058$19h1md '"assertion failed")
            (g$make-irritants-condition$6096$19h1md (list g$expr$11180$19h1md))
            (g$make-source-condition$8054$19h1md g$pos$11181$19h1md))))))
   (g$syntax-error$8058$19h1md
     g$syntax-error$11497$19h1md
     (case-lambda
       ((g$x$11182$19h1md . g$args$11183$19h1md)
        (begin
          (if (not (g$for-all$5804$19h1md string? g$args$11183$19h1md))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$11183$19h1md)
            (void))
          (raise
            (condition
              (g$make-message-condition$6058$19h1md
                (if (null? g$args$11183$19h1md)
                  '"invalid syntax"
                  (apply string-append g$args$11183$19h1md)))
              (g$make-syntax-violation$6130$19h1md
                (g$syntax->datum$8064$19h1md g$x$11182$19h1md)
                '#f)
              (g$extract-position-condition$8055$19h1md g$x$11182$19h1md)
              (g$extract-trace$8059$19h1md g$x$11182$19h1md)))))))
   (g$extract-trace$8059$19h1md
     g$extract-trace$11498$19h1md
     (case-lambda
       ((g$x$11184$19h1md)
        (letrec* ((g$12578$11185$19h1md
                    (make-record-type-descriptor
                      '&trace
                      &condition-rtd
                      'g$12581$19h1md
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$12580$11186$19h1md '#f)
                  (g$12579$11187$19h1md
                    (make-record-constructor-descriptor
                      g$12578$11185$19h1md
                      &condition-rcd
                      g$12580$11186$19h1md))
                  (g$12577$11188$19h1md (record-predicate g$12578$11185$19h1md))
                  (g$make-trace$11189$19h1md
                    (record-constructor g$12579$11187$19h1md))
                  (g$12576$11190$19h1md
                    (record-accessor g$12578$11185$19h1md '0))
                  (g$trace?$11191$19h1md
                    (condition-predicate g$12578$11185$19h1md))
                  (g$trace-form$11192$19h1md
                    (condition-accessor
                      g$12578$11185$19h1md
                      g$12576$11190$19h1md)))
          ((letrec ((g$f$11193$19h1md
                      (case-lambda
                        ((g$x$11194$19h1md)
                         (if (g$stx?$7646$19h1md g$x$11194$19h1md)
                           (apply
                             condition
                             (g$make-trace$11189$19h1md g$x$11194$19h1md)
                             (map g$f$11193$19h1md
                                  (g$stx-ae*$7651$19h1md g$x$11194$19h1md)))
                           (if (annotation? g$x$11194$19h1md)
                             (g$make-trace$11189$19h1md
                               (g$make-stx$7647$19h1md
                                 g$x$11194$19h1md
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$11193$19h1md)
           g$x$11184$19h1md)))))
   (g$syntax-violation*$8060$19h1md
     g$syntax-violation*$11499$19h1md
     (case-lambda
       ((g$who$11195$19h1md
          g$msg$11196$19h1md
          g$form$11197$19h1md
          g$condition-object$11198$19h1md)
        (begin
          (if (not (string? g$msg$11196$19h1md))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$11196$19h1md)
            (void))
          ((case-lambda
             ((g$who$11199$19h1md)
              (raise
                (condition
                  (if g$who$11199$19h1md
                    (g$make-who-condition$6104$19h1md g$who$11199$19h1md)
                    (condition))
                  (g$make-message-condition$6058$19h1md g$msg$11196$19h1md)
                  g$condition-object$11198$19h1md
                  (g$extract-position-condition$8055$19h1md g$form$11197$19h1md)
                  (g$extract-trace$8059$19h1md g$form$11197$19h1md)))))
           (if ((case-lambda
                  ((g$t$11200$19h1md)
                   (if g$t$11200$19h1md
                     g$t$11200$19h1md
                     (begin '#f (symbol? g$who$11195$19h1md)))))
                (string? g$who$11195$19h1md))
             g$who$11195$19h1md
             (if (not g$who$11195$19h1md)
               ((case-lambda
                  ((g$t$11201$19h1md)
                   ((case-lambda
                      ((g$ls/false$11202$19h1md)
                       (if (if g$ls/false$11202$19h1md
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$11203$19h1md)
                                    (g$id?$7674$19h1md g$id$11203$19h1md)))
                                 g$ls/false$11202$19h1md))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$11204$19h1md)
                              (g$syntax->datum$8064$19h1md g$id$11204$19h1md)))
                           g$ls/false$11202$19h1md)
                         ((case-lambda
                            ((g$t$11205$19h1md)
                             ((case-lambda
                                ((g$ls/false$11206$19h1md)
                                 (if (if g$ls/false$11206$19h1md
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$11207$19h1md
                                                g$rest$11208$19h1md)
                                              (g$id?$7674$19h1md
                                                g$id$11207$19h1md)))
                                           g$ls/false$11206$19h1md))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$11209$19h1md g$rest$11210$19h1md)
                                        (g$syntax->datum$8064$19h1md
                                          g$id$11209$19h1md)))
                                     g$ls/false$11206$19h1md)
                                   ((case-lambda
                                      ((g$t$11211$19h1md)
                                       ((case-lambda
                                          ((g$ls/false$11212$19h1md)
                                           (if g$ls/false$11212$19h1md
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$11212$19h1md)
                                             (g$syntax-violation$8061$19h1md
                                               '#f
                                               '"invalid syntax"
                                               g$t$11211$19h1md))))
                                        (g$syntax-dispatch$7952$19h1md
                                          g$t$11211$19h1md
                                          '_))))
                                    g$t$11205$19h1md))))
                              (g$syntax-dispatch$7952$19h1md
                                g$t$11205$19h1md
                                '(any . any)))))
                          g$t$11201$19h1md))))
                    (g$syntax-dispatch$7952$19h1md g$t$11201$19h1md 'any))))
                g$form$11197$19h1md)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$11195$19h1md))))))))
   (g$syntax-violation$8061$19h1md
     g$syntax-violation$11500$19h1md
     (case-lambda
       ((g$who$11213$19h1md g$msg$11214$19h1md g$form$11215$19h1md)
        (g$syntax-violation$8061$19h1md
          g$who$11213$19h1md
          g$msg$11214$19h1md
          g$form$11215$19h1md
          '#f))
       ((g$who$11216$19h1md
          g$msg$11217$19h1md
          g$form$11218$19h1md
          g$subform$11219$19h1md)
        (g$syntax-violation*$8060$19h1md
          g$who$11216$19h1md
          g$msg$11217$19h1md
          g$form$11218$19h1md
          (g$make-syntax-violation$6130$19h1md
            (g$syntax->datum$8064$19h1md g$form$11218$19h1md)
            (g$syntax->datum$8064$19h1md g$subform$11219$19h1md))))))
   (g$identifier?$8062$19h1md
     g$identifier?$11501$19h1md
     (case-lambda ((g$x$11220$19h1md) (g$id?$7674$19h1md g$x$11220$19h1md))))
   (g$datum->syntax$8063$19h1md
     g$datum->syntax$11502$19h1md
     (case-lambda
       ((g$id$11221$19h1md g$datum$11222$19h1md)
        (if (g$id?$7674$19h1md g$id$11221$19h1md)
          (g$datum->stx$7657$19h1md g$id$11221$19h1md g$datum$11222$19h1md)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$11221$19h1md)))))
   (g$syntax->datum$8064$19h1md
     g$syntax->datum$11503$19h1md
     (case-lambda
       ((g$x$11223$19h1md) (g$stx->datum$7685$19h1md g$x$11223$19h1md))))
   (g$compile-r6rs-top-level$8065$19h1md
     g$compile-r6rs-top-level$11504$19h1md
     (case-lambda
       ((g$x*$11224$19h1md)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$8012$19h1md g$x*$11224$19h1md)))
          (case-lambda
            ((g$lib*$11227$19h1md g$invoke-code$11228$19h1md)
             ((case-lambda
                ((g$invoke-code$11229$19h1md g$lib*$11230$19h1md)
                 (case-lambda
                   (()
                    (begin
                      (for-each
                        g$invoke-library$7489$19h1md
                        g$lib*$11230$19h1md)
                      (eval-core
                        (g$expanded->core$7188$19h1md
                          g$invoke-code$11229$19h1md)))))))
              g$invoke-code$11228$19h1md
              g$lib*$11227$19h1md)))))))
   (g$pre-compile-r6rs-top-level$8066$19h1md
     g$pre-compile-r6rs-top-level$11505$19h1md
     (case-lambda
       ((g$x*$11231$19h1md)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$8012$19h1md g$x*$11231$19h1md)))
          (case-lambda
            ((g$lib*$11234$19h1md g$invoke-code$11235$19h1md)
             ((case-lambda
                ((g$invoke-code$11236$19h1md g$lib*$11237$19h1md)
                 (begin
                   (for-each g$invoke-library$7489$19h1md g$lib*$11237$19h1md)
                   (compile-core
                     (g$expanded->core$7188$19h1md
                       g$invoke-code$11236$19h1md)))))
              g$invoke-code$11235$19h1md
              g$lib*$11234$19h1md)))))))
   (g$interaction-environment$8067$19h1md
     g$interaction-environment$11506$19h1md
     ((case-lambda
        ((g$the-env$11238$19h1md)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$11239$19h1md)
                (if g$t$11239$19h1md
                  g$t$11239$19h1md
                  (begin
                    '#f
                    ((case-lambda
                       ((g$lib$11240$19h1md g$rib$11241$19h1md)
                        (begin
                          ((case-lambda
                             ((g$subst$11242$19h1md)
                              (begin
                                (g$set-rib-sym*!$7633$19h1md
                                  g$rib$11241$19h1md
                                  (map car g$subst$11242$19h1md))
                                (g$set-rib-mark**!$7634$19h1md
                                  g$rib$11241$19h1md
                                  (map (case-lambda
                                         ((g$x$11243$19h1md)
                                          g$top-mark*$7616$19h1md))
                                       g$subst$11242$19h1md))
                                (g$set-rib-label*!$7635$19h1md
                                  g$rib$11241$19h1md
                                  (map cdr g$subst$11242$19h1md)))))
                           (g$library-subst$7446$19h1md g$lib$11240$19h1md))
                          ((case-lambda
                             ((g$env$11244$19h1md)
                              (begin
                                (set! g$the-env$11238$19h1md g$env$11244$19h1md)
                                g$env$11244$19h1md)))
                           (g$make-interaction-env$8029$19h1md
                             g$rib$11241$19h1md
                             '()
                             '())))))
                     (g$find-library-by-name$7482$19h1md '(ironscheme))
                     (g$make-empty-rib$7637$19h1md))))))
             g$the-env$11238$19h1md)))))
      '#f))
   (g$top-level-context$8068$19h1md
     g$top-level-context$11507$19h1md
     (g$make-parameter$6941$19h1md '#f)))
  (g$current-library-expander$7479$19h1md g$library-expander$8045$19h1md))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$7185$19h1md
      (case-lambda
        ((g$x$11560$19h1md)
         ((case-lambda
            ((g$t$11561$19h1md)
             (if g$t$11561$19h1md (cdr g$t$11561$19h1md) '#f)))
          (assq
            g$x$11560$19h1md
            '((ellipsis-map . g$ellipsis-map$11396$19h1md)
              (ironscheme-build . g$ironscheme-build$11553$19h1md)
              (syntax-error . g$syntax-error$11497$19h1md)
              (syntax-dispatch . g$syntax-dispatch$11391$19h1md)
              (compile-system-libraries
                .
                g$compile-system-libraries$11555$19h1md)
              (compile->closure . g$compile->closure$11557$19h1md)
              (compile . g$compile$11556$19h1md)
              (load . g$load$11552$19h1md)
              (interaction-environment . g$interaction-environment$11506$19h1md)
              (string-ci>? . g$string-ci>?$6343$19h1md)
              (string-ci>=? . g$string-ci>=?$6345$19h1md)
              (string-ci=? . g$string-ci=?$6341$19h1md)
              (string-ci<? . g$string-ci<?$6342$19h1md)
              (string-ci<=? . g$string-ci<=?$6344$19h1md)
              (char-ci>? . g$char-ci>?$6348$19h1md)
              (char-ci>=? . g$char-ci>=?$6350$19h1md)
              (char-ci=? . g$char-ci=?$6346$19h1md)
              (char-ci<? . g$char-ci<?$6347$19h1md)
              (char-ci<=? . g$char-ci<=?$6349$19h1md)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$11329$19h1md)
              (variable-transformer? . g$variable-transformer?$11328$19h1md)
              (make-variable-transformer
                .
                g$make-variable-transformer$11327$19h1md)
              (identifier? . g$identifier?$11501$19h1md)
              (generate-temporaries . g$generate-temporaries$11490$19h1md)
              (free-identifier=? . g$free-identifier=?$11491$19h1md)
              (syntax->datum . g$syntax->datum$11503$19h1md)
              (datum->syntax . g$datum->syntax$11502$19h1md)
              (bound-identifier=? . g$bound-identifier=?$11492$19h1md)
              (delete-file . g$delete-file$5676$19h1md)
              (file-exists? . g$file-exists?$5675$19h1md)
              (list-sort . g$list-sort$6201$19h1md)
              (make-eqv-hashtable . g$make-eqv-hashtable$5598$19h1md)
              (make-eq-hashtable . g$make-eq-hashtable$5597$19h1md)
              (hashtable-update! . g$hashtable-update!$5604$19h1md)
              (hashtable-size . g$hashtable-size$5599$19h1md)
              (hashtable-set! . g$hashtable-set!$5601$19h1md)
              (hashtable-ref . g$hashtable-ref$5600$19h1md)
              (hashtable-delete! . g$hashtable-delete!$5602$19h1md)
              (hashtable-contains? . g$hashtable-contains?$5603$19h1md)
              (hashtable-clear! . g$hashtable-clear!$5605$19h1md)
              (call-with-output-file . g$call-with-output-file$6690$19h1md)
              (call-with-input-file . g$call-with-input-file$6689$19h1md)
              (with-output-to-file . g$with-output-to-file$6688$19h1md)
              (with-input-from-file . g$with-input-from-file$6687$19h1md)
              (port? . g$port?$6654$19h1md)
              (open-string-output-port . g$open-string-output-port$6653$19h1md)
              (make-i/o-write-error . g$make-i/o-write-error$6579$19h1md)
              (make-i/o-read-error . g$make-i/o-read-error$6573$19h1md)
              (make-i/o-port-error . g$make-i/o-port-error$6625$19h1md)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$6585$19h1md)
              (make-i/o-filename-error . g$make-i/o-filename-error$6593$19h1md)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$6601$19h1md)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$6607$19h1md)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$6619$19h1md)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$6613$19h1md)
              (make-i/o-error . g$make-i/o-error$6567$19h1md)
              (make-i/o-encoding-error . g$make-i/o-encoding-error$6639$19h1md)
              (make-i/o-decoding-error . g$make-i/o-decoding-error$6633$19h1md)
              (i/o-write-error? . g$i/o-write-error?$6580$19h1md)
              (i/o-read-error? . g$i/o-read-error?$6574$19h1md)
              (i/o-port-error? . g$i/o-port-error?$6627$19h1md)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$6587$19h1md)
              (i/o-error-position . g$i/o-error-position$6588$19h1md)
              (i/o-filename-error? . g$i/o-filename-error?$6595$19h1md)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$6602$19h1md)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$6608$19h1md)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$6620$19h1md)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$6614$19h1md)
              (i/o-error? . g$i/o-error?$6568$19h1md)
              (i/o-error-port . g$i/o-error-port$6628$19h1md)
              (i/o-error-filename . g$i/o-error-filename$6596$19h1md)
              (i/o-encoding-error? . g$i/o-encoding-error?$6641$19h1md)
              (i/o-encoding-error-char . g$i/o-encoding-error-char$6642$19h1md)
              (i/o-decoding-error? . g$i/o-decoding-error?$6634$19h1md)
              (scheme-report-environment
                .
                g$scheme-report-environment$11481$19h1md)
              (quotient . g$quotient$6168$19h1md)
              (null-environment . g$null-environment$11480$19h1md)
              (remainder . g$remainder$6169$19h1md)
              (modulo . g$modulo$6170$19h1md)
              (force . g$force$6172$19h1md)
              (command-line . g$command-line$11549$19h1md)
              (remove . g$remove$5809$19h1md)
              (remv . g$remv$5810$19h1md)
              (remp . g$remp$5795$19h1md)
              (remq . g$remq$5811$19h1md)
              (partition . g$partition$5794$19h1md)
              (memp . g$memp$5801$19h1md)
              (member . g$member$5800$19h1md)
              (exists . g$exists$5805$19h1md)
              (for-all . g$for-all$5804$19h1md)
              (fold-right . g$fold-right$5808$19h1md)
              (fold-left . g$fold-left$5807$19h1md)
              (find . g$find$5793$19h1md)
              (filter . g$filter$5796$19h1md)
              (cons* . g$cons*$5806$19h1md)
              (assv . g$assv$5797$19h1md)
              (assp . g$assp$5799$19h1md)
              (assoc . g$assoc$5798$19h1md)
              (eval . g$eval$11483$19h1md)
              (environment . g$environment$11479$19h1md)
              (make-enumeration . g$make-enumeration$6818$19h1md)
              (enum-set=? . g$enum-set=?$6825$19h1md)
              (enum-set-universe . g$enum-set-universe$6819$19h1md)
              (enum-set-union . g$enum-set-union$6826$19h1md)
              (enum-set-subset? . g$enum-set-subset?$6824$19h1md)
              (enum-set-projection . g$enum-set-projection$6830$19h1md)
              (enum-set-member? . g$enum-set-member?$6823$19h1md)
              (enum-set-intersection . g$enum-set-intersection$6827$19h1md)
              (enum-set-indexer . g$enum-set-indexer$6820$19h1md)
              (enum-set-difference . g$enum-set-difference$6828$19h1md)
              (enum-set-constructor . g$enum-set-constructor$6821$19h1md)
              (enum-set-complement . g$enum-set-complement$6829$19h1md)
              (enum-set->list . g$enum-set->list$6822$19h1md)
              (who-condition? . g$who-condition?$6106$19h1md)
              (warning? . g$warning?$6067$19h1md)
              (violation? . g$violation?$6085$19h1md)
              (undefined-violation? . g$undefined-violation?$6141$19h1md)
              (syntax-violation? . g$syntax-violation?$6133$19h1md)
              (syntax-violation-subform
                .
                g$syntax-violation-subform$6135$19h1md)
              (syntax-violation-form . g$syntax-violation-form$6134$19h1md)
              (syntax-violation . g$syntax-violation$11500$19h1md)
              (serious-condition? . g$serious-condition?$6073$19h1md)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$6113$19h1md)
              (message-condition? . g$message-condition?$6060$19h1md)
              (make-who-condition . g$make-who-condition$6104$19h1md)
              (make-warning . g$make-warning$6066$19h1md)
              (make-violation . g$make-violation$6084$19h1md)
              (make-undefined-violation
                .
                g$make-undefined-violation$6140$19h1md)
              (make-syntax-violation . g$make-syntax-violation$6130$19h1md)
              (make-serious-condition . g$make-serious-condition$6072$19h1md)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$6112$19h1md)
              (make-message-condition . g$make-message-condition$6058$19h1md)
              (make-lexical-violation . g$make-lexical-violation$6124$19h1md)
              (make-irritants-condition
                .
                g$make-irritants-condition$6096$19h1md)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$6118$19h1md)
              (make-error . g$make-error$6078$19h1md)
              (make-assertion-violation
                .
                g$make-assertion-violation$6090$19h1md)
              (lexical-violation? . g$lexical-violation?$6125$19h1md)
              (irritants-condition? . g$irritants-condition?$6098$19h1md)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$6119$19h1md)
              (error? . g$error?$6079$19h1md)
              (condition-who . g$condition-who$6107$19h1md)
              (condition-message . g$condition-message$6061$19h1md)
              (condition-irritants . g$condition-irritants$6099$19h1md)
              (assertion-violation? . g$assertion-violation?$6091$19h1md)
              (native-endianness . g$native-endianness$5923$19h1md)
              (bytevector-u64-set! . g$bytevector-u64-set!$5944$19h1md)
              (bytevector-u64-ref . g$bytevector-u64-ref$5940$19h1md)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$5946$19h1md)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$5942$19h1md)
              (bytevector-u32-set! . g$bytevector-u32-set!$5936$19h1md)
              (bytevector-u32-ref . g$bytevector-u32-ref$5932$19h1md)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$5938$19h1md)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$5934$19h1md)
              (bytevector-u16-set! . g$bytevector-u16-set!$5928$19h1md)
              (bytevector-u16-ref . g$bytevector-u16-ref$5924$19h1md)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$5930$19h1md)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$5926$19h1md)
              (bytevector-s64-set! . g$bytevector-s64-set!$5945$19h1md)
              (bytevector-s64-ref . g$bytevector-s64-ref$5941$19h1md)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$5947$19h1md)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$5943$19h1md)
              (bytevector-s32-set! . g$bytevector-s32-set!$5937$19h1md)
              (bytevector-s32-ref . g$bytevector-s32-ref$5933$19h1md)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$5939$19h1md)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$5935$19h1md)
              (bytevector-s16-set! . g$bytevector-s16-set!$5929$19h1md)
              (bytevector-s16-ref . g$bytevector-s16-ref$5925$19h1md)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$5931$19h1md)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$5927$19h1md)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$5950$19h1md)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$5948$19h1md)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$5951$19h1md)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$5949$19h1md)
              (no-nans-violation? . g$no-nans-violation?$6482$19h1md)
              (no-infinities-violation?
                .
                g$no-infinities-violation?$6476$19h1md)
              (make-no-nans-violation . g$make-no-nans-violation$6481$19h1md)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$6475$19h1md)
              (fxrotate-bit-field . g$fxrotate-bit-field$6458$19h1md)
              (fxif . g$fxif$6452$19h1md)
              (fxcopy-bit-field . g$fxcopy-bit-field$6455$19h1md)
              (fxcopy-bit . g$fxcopy-bit$6453$19h1md)
              (fxbit-field . g$fxbit-field$6454$19h1md)
              (fxarithmetic-shift-right
                .
                g$fxarithmetic-shift-right$6457$19h1md)
              (fxarithmetic-shift-left . g$fxarithmetic-shift-left$6456$19h1md)
              (bitwise-rotate-bit-field
                .
                g$bitwise-rotate-bit-field$6404$19h1md)
              (bitwise-if . g$bitwise-if$6398$19h1md)
              (bitwise-copy-bit-field . g$bitwise-copy-bit-field$6401$19h1md)
              (bitwise-copy-bit . g$bitwise-copy-bit$6399$19h1md)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$6403$19h1md)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$6402$19h1md)
              (symbol=? . g$symbol=?$5355$19h1md)
              (string>? . g$string>?$5352$19h1md)
              (string>=? . g$string>=?$5354$19h1md)
              (string=? . g$string=?$5350$19h1md)
              (string<? . g$string<?$5351$19h1md)
              (string<=? . g$string<=?$5353$19h1md)
              (rationalize . g$rationalize$5362$19h1md)
              (char>? . g$char>?$5359$19h1md)
              (char>=? . g$char>=?$5361$19h1md)
              (char=? . g$char=?$5357$19h1md)
              (char<? . g$char<?$5358$19h1md)
              (char<=? . g$char<=?$5360$19h1md)
              (cddddr . g$cddddr$5349$19h1md)
              (cdddar . g$cdddar$5348$19h1md)
              (cddadr . g$cddadr$5347$19h1md)
              (cddaar . g$cddaar$5346$19h1md)
              (cdaddr . g$cdaddr$5345$19h1md)
              (cdadar . g$cdadar$5344$19h1md)
              (cdaadr . g$cdaadr$5343$19h1md)
              (cdaaar . g$cdaaar$5342$19h1md)
              (cadddr . g$cadddr$5341$19h1md)
              (caddar . g$caddar$5340$19h1md)
              (cadadr . g$cadadr$5339$19h1md)
              (cadaar . g$cadaar$5338$19h1md)
              (caaddr . g$caaddr$5337$19h1md)
              (caadar . g$caadar$5336$19h1md)
              (caaadr . g$caaadr$5335$19h1md)
              (caaaar . g$caaaar$5334$19h1md)
              (cdddr . g$cdddr$5333$19h1md)
              (cddar . g$cddar$5332$19h1md)
              (cdadr . g$cdadr$5331$19h1md)
              (cdaar . g$cdaar$5330$19h1md)
              (caddr . g$caddr$5329$19h1md)
              (cadar . g$cadar$5328$19h1md)
              (caadr . g$caadr$5327$19h1md)
              (caaar . g$caaar$5326$19h1md)
              (cddr . g$cddr$5325$19h1md)
              (cdar . g$cdar$5324$19h1md)
              (cadr . g$cadr$5323$19h1md)
              (caar . g$caar$5322$19h1md)
              (boolean=? . g$boolean=?$5356$19h1md)
              (make-promise . g$make-promise$6171$19h1md)
              (load/args . g$load/args$11551$19h1md)
              (printf . g$printf$6854$19h1md)
              (fprintf . g$fprintf$6855$19h1md)
              (format . g$format$6856$19h1md)
              (trace-printer . g$trace-printer$11548$19h1md)
              (make-traced-macro . g$make-traced-macro$6860$19h1md)
              (assertion-error . g$assertion-error$11496$19h1md)
              (make-parameter . g$make-parameter$6941$19h1md)
              (environment-symbols . g$environment-symbols$11477$19h1md)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$11476$19h1md)
              (library-path . g$library-path$7471$19h1md)
              (library-extensions . g$library-extensions$7472$19h1md)
              (installed-libraries . g$installed-libraries$7492$19h1md)
              (expand . g$expand$11482$19h1md)))))))
    (g$install-library$7487$19h1md
      'g$13301$19h1md
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$13238$19h1md)
        (cosh . g$13237$19h1md)
        (sinh . g$13236$19h1md)
        (make-guid . g$13235$19h1md)
        (unspecified? . g$13234$19h1md)
        (make-trace . g$13233$19h1md)
        (make-list . g$13232$19h1md)
        (last-pair . g$13231$19h1md)
        (load-r5rs . g$13230$19h1md)
        (license . g$13229$19h1md)
        (stacktrace . g$13228$19h1md)
        (ironscheme-build . g$12650$19h1md)
        (set-symbol-value! . g$13214$19h1md)
        (symbol-value . g$13213$19h1md)
        (ungensym . g$13212$19h1md)
        (gensym . g$13211$19h1md)
        (void . g$13210$19h1md)
        (compile-system-libraries . g$12652$19h1md)
        (compile->closure . g$12654$19h1md)
        (compile . g$12653$19h1md)
        (load . g$12649$19h1md)
        (interaction-environment . g$9715$19h1md)
        (string-upcase . g$13206$19h1md)
        (string-titlecase . g$13205$19h1md)
        (string-normalize-nfkd . g$13204$19h1md)
        (string-normalize-nfkc . g$13203$19h1md)
        (string-normalize-nfd . g$13202$19h1md)
        (string-normalize-nfc . g$13201$19h1md)
        (string-foldcase . g$13200$19h1md)
        (string-downcase . g$13199$19h1md)
        (string-ci>? . g$7785$19h1md)
        (string-ci>=? . g$7787$19h1md)
        (string-ci=? . g$7783$19h1md)
        (string-ci<? . g$7784$19h1md)
        (string-ci<=? . g$7786$19h1md)
        (char-whitespace? . g$13198$19h1md)
        (char-upper-case? . g$13197$19h1md)
        (char-title-case? . g$13196$19h1md)
        (char-numeric? . g$13195$19h1md)
        (char-lower-case? . g$13194$19h1md)
        (char-general-category . g$13193$19h1md)
        (char-upcase . g$13192$19h1md)
        (char-titlecase . g$13191$19h1md)
        (char-foldcase . g$13190$19h1md)
        (char-downcase . g$13189$19h1md)
        (char-ci>? . g$7836$19h1md)
        (char-ci>=? . g$7838$19h1md)
        (char-ci=? . g$7834$19h1md)
        (char-ci<? . g$7835$19h1md)
        (char-ci<=? . g$7837$19h1md)
        (char-alphabetic? . g$13188$19h1md)
        (variable-transformer-procedure . g$9316$19h1md)
        (variable-transformer? . g$9315$19h1md)
        (make-variable-transformer . g$9314$19h1md)
        (identifier? . g$9710$19h1md)
        (generate-temporaries . g$9699$19h1md)
        (free-identifier=? . g$9700$19h1md)
        (syntax->datum . g$9712$19h1md)
        (datum->syntax . g$9711$19h1md)
        (bound-identifier=? . g$9701$19h1md)
        (record-type-descriptor? . g$13187$19h1md)
        (record-predicate . g$13186$19h1md)
        (record-mutator . g$13185$19h1md)
        (record-constructor . g$13184$19h1md)
        (record-accessor . g$13183$19h1md)
        (make-record-type-descriptor . g$13182$19h1md)
        (make-record-constructor-descriptor . g$13181$19h1md)
        (record? . g$13180$19h1md)
        (record-type-uid . g$13179$19h1md)
        (record-type-sealed? . g$13178$19h1md)
        (record-type-parent . g$13177$19h1md)
        (record-type-opaque? . g$13176$19h1md)
        (record-type-name . g$13175$19h1md)
        (record-type-generative? . g$13174$19h1md)
        (record-type-field-names . g$13173$19h1md)
        (record-rtd . g$13172$19h1md)
        (record-field-mutable? . g$13171$19h1md)
        (delete-file . g$7146$19h1md)
        (file-exists? . g$7145$19h1md)
        (vector-sort! . g$13170$19h1md)
        (vector-sort . g$13169$19h1md)
        (list-sort . g$7659$19h1md)
        (symbol-hash . g$13168$19h1md)
        (string-ci-hash . g$13167$19h1md)
        (string-hash . g$13166$19h1md)
        (equal-hash . g$13165$19h1md)
        (hashtable-equivalence-function . g$13164$19h1md)
        (make-hashtable . g$13163$19h1md)
        (hashtable-hash-function . g$13162$19h1md)
        (make-eqv-hashtable . g$7113$19h1md)
        (make-eq-hashtable . g$7112$19h1md)
        (hashtable? . g$13161$19h1md)
        (hashtable-update! . g$7119$19h1md)
        (hashtable-size . g$7114$19h1md)
        (hashtable-set! . g$7116$19h1md)
        (hashtable-ref . g$7115$19h1md)
        (hashtable-mutable? . g$13160$19h1md)
        (hashtable-keys . g$13159$19h1md)
        (hashtable-entries . g$13158$19h1md)
        (hashtable-delete! . g$7117$19h1md)
        (hashtable-copy . g$13157$19h1md)
        (hashtable-contains? . g$7118$19h1md)
        (hashtable-clear! . g$7120$19h1md)
        (call-with-output-file . g$8255$19h1md)
        (call-with-input-file . g$8254$19h1md)
        (write-char . g$13156$19h1md)
        (write . g$13155$19h1md)
        (with-output-to-file . g$8253$19h1md)
        (with-input-from-file . g$8252$19h1md)
        (read-char . g$13154$19h1md)
        (read . g$13153$19h1md)
        (peek-char . g$13152$19h1md)
        (open-output-file . g$13151$19h1md)
        (open-input-file . g$13150$19h1md)
        (newline . g$13149$19h1md)
        (display . g$13148$19h1md)
        (close-output-port . g$13147$19h1md)
        (close-input-port . g$13146$19h1md)
        (eof-object? . g$13145$19h1md)
        (eof-object . g$13144$19h1md)
        (current-error-port . g$13143$19h1md)
        (current-output-port . g$13142$19h1md)
        (current-input-port . g$13141$19h1md)
        (output-port? . g$13140$19h1md)
        (input-port? . g$13139$19h1md)
        (utf-8-codec . g$13138$19h1md)
        (utf-16-codec . g$13137$19h1md)
        (transcoder-error-handling-mode . g$13136$19h1md)
        (transcoder-eol-style . g$13135$19h1md)
        (transcoder-codec . g$13134$19h1md)
        (transcoded-port . g$13133$19h1md)
        (textual-port? . g$13132$19h1md)
        (string->bytevector . g$13131$19h1md)
        (standard-output-port . g$13130$19h1md)
        (standard-input-port . g$13129$19h1md)
        (standard-error-port . g$13128$19h1md)
        (set-port-position! . g$13127$19h1md)
        (put-u8 . g$13126$19h1md)
        (put-string . g$13125$19h1md)
        (put-datum . g$13124$19h1md)
        (put-char . g$13123$19h1md)
        (put-bytevector . g$13122$19h1md)
        (port? . g$8231$19h1md)
        (port-transcoder . g$13121$19h1md)
        (port-position . g$13120$19h1md)
        (port-has-set-port-position!? . g$13119$19h1md)
        (port-has-port-position? . g$13118$19h1md)
        (port-eof? . g$13117$19h1md)
        (output-port-buffer-mode . g$13116$19h1md)
        (open-string-output-port . g$8230$19h1md)
        (open-string-input-port . g$13115$19h1md)
        (open-file-output-port . g$13114$19h1md)
        (open-file-input/output-port . g$13113$19h1md)
        (open-file-input-port . g$13112$19h1md)
        (open-bytevector-output-port . g$13111$19h1md)
        (open-bytevector-input-port . g$13110$19h1md)
        (native-transcoder . g$13109$19h1md)
        (native-eol-style . g$13108$19h1md)
        (make-transcoder . g$13107$19h1md)
        (latin-1-codec . g$13106$19h1md)
        (make-i/o-write-error . g$8087$19h1md)
        (make-i/o-read-error . g$8073$19h1md)
        (make-i/o-port-error . g$8192$19h1md)
        (make-i/o-invalid-position-error . g$8102$19h1md)
        (make-i/o-filename-error . g$8119$19h1md)
        (make-i/o-file-protection-error . g$8135$19h1md)
        (make-i/o-file-is-read-only-error . g$8149$19h1md)
        (make-i/o-file-does-not-exist-error . g$8177$19h1md)
        (make-i/o-file-already-exists-error . g$8163$19h1md)
        (make-i/o-error . g$8059$19h1md)
        (make-i/o-encoding-error . g$8223$19h1md)
        (make-i/o-decoding-error . g$8208$19h1md)
        (make-custom-textual-output-port . g$13105$19h1md)
        (make-custom-textual-input/output-port . g$13104$19h1md)
        (make-custom-textual-input-port . g$13103$19h1md)
        (make-custom-binary-output-port . g$13102$19h1md)
        (make-custom-binary-input/output-port . g$13101$19h1md)
        (make-custom-binary-input-port . g$13100$19h1md)
        (make-bytevector . g$13099$19h1md)
        (lookahead-u8 . g$13098$19h1md)
        (lookahead-char . g$13097$19h1md)
        (i/o-write-error? . g$8088$19h1md)
        (i/o-read-error? . g$8074$19h1md)
        (i/o-port-error? . g$8194$19h1md)
        (i/o-invalid-position-error? . g$8104$19h1md)
        (i/o-error-position . g$8105$19h1md)
        (i/o-filename-error? . g$8121$19h1md)
        (i/o-file-protection-error? . g$8136$19h1md)
        (i/o-file-is-read-only-error? . g$8150$19h1md)
        (i/o-file-does-not-exist-error? . g$8178$19h1md)
        (i/o-file-already-exists-error? . g$8164$19h1md)
        (i/o-error? . g$8060$19h1md)
        (i/o-error-port . g$8195$19h1md)
        (i/o-error-filename . g$8122$19h1md)
        (i/o-encoding-error? . g$8225$19h1md)
        (i/o-encoding-error-char . g$8226$19h1md)
        (i/o-decoding-error? . g$8209$19h1md)
        (get-u8 . g$13096$19h1md)
        (get-string-n! . g$13095$19h1md)
        (get-string-n . g$13094$19h1md)
        (get-string-all . g$13093$19h1md)
        (get-line . g$13092$19h1md)
        (get-datum . g$13091$19h1md)
        (get-char . g$13090$19h1md)
        (get-bytevector-some . g$13089$19h1md)
        (get-bytevector-n! . g$13088$19h1md)
        (get-bytevector-n . g$13087$19h1md)
        (get-bytevector-all . g$13086$19h1md)
        (flush-output-port . g$13085$19h1md)
        (close-port . g$13084$19h1md)
        (call-with-string-output-port . g$13083$19h1md)
        (call-with-port . g$13082$19h1md)
        (call-with-bytevector-output-port . g$13081$19h1md)
        (bytevector->string . g$13080$19h1md)
        (buffer-mode? . g$13079$19h1md)
        (binary-port? . g$13078$19h1md)
        (scheme-report-environment . g$9690$19h1md)
        (quotient . g$7639$19h1md)
        (null-environment . g$9689$19h1md)
        (remainder . g$7640$19h1md)
        (modulo . g$7641$19h1md)
        (inexact->exact . g$13077$19h1md)
        (force . g$7643$19h1md)
        (exact->inexact . g$13076$19h1md)
        (exit . g$13075$19h1md)
        (command-line . g$12646$19h1md)
        (string-fill! . g$13074$19h1md)
        (string-set! . g$13073$19h1md)
        (set-cdr! . g$13072$19h1md)
        (set-car! . g$13071$19h1md)
        (remove . g$7226$19h1md)
        (remv . g$7227$19h1md)
        (remp . g$7212$19h1md)
        (remq . g$7228$19h1md)
        (partition . g$7211$19h1md)
        (memv . g$13070$19h1md)
        (memq . g$13069$19h1md)
        (memp . g$7218$19h1md)
        (member . g$7217$19h1md)
        (exists . g$7222$19h1md)
        (for-all . g$7221$19h1md)
        (fold-right . g$7225$19h1md)
        (fold-left . g$7224$19h1md)
        (find . g$7210$19h1md)
        (filter . g$7213$19h1md)
        (cons* . g$7223$19h1md)
        (assv . g$7214$19h1md)
        (assq . g$13068$19h1md)
        (assp . g$7216$19h1md)
        (assoc . g$7215$19h1md)
        (with-exception-handler . g$13067$19h1md)
        (raise-continuable . g$13066$19h1md)
        (raise . g$13065$19h1md)
        (eval . g$9692$19h1md)
        (environment . g$9688$19h1md)
        (make-enumeration . g$8312$19h1md)
        (enum-set=? . g$8319$19h1md)
        (enum-set-universe . g$8313$19h1md)
        (enum-set-union . g$8320$19h1md)
        (enum-set-subset? . g$8318$19h1md)
        (enum-set-projection . g$8324$19h1md)
        (enum-set-member? . g$8317$19h1md)
        (enum-set-intersection . g$8321$19h1md)
        (enum-set-indexer . g$8314$19h1md)
        (enum-set-difference . g$8322$19h1md)
        (enum-set-constructor . g$8315$19h1md)
        (enum-set-complement . g$8323$19h1md)
        (enum-set->list . g$8316$19h1md)
        (who-condition? . g$7550$19h1md)
        (warning? . g$7461$19h1md)
        (violation? . g$7503$19h1md)
        (undefined-violation? . g$7627$19h1md)
        (syntax-violation? . g$7611$19h1md)
        (syntax-violation-subform . g$7613$19h1md)
        (syntax-violation-form . g$7612$19h1md)
        (syntax-violation . g$9709$19h1md)
        (simple-conditions . g$13064$19h1md)
        (serious-condition? . g$7475$19h1md)
        (non-continuable-violation? . g$7565$19h1md)
        (message-condition? . g$7446$19h1md)
        (make-who-condition . g$7548$19h1md)
        (make-warning . g$7460$19h1md)
        (make-violation . g$7502$19h1md)
        (make-undefined-violation . g$7626$19h1md)
        (make-syntax-violation . g$7608$19h1md)
        (make-serious-condition . g$7474$19h1md)
        (make-non-continuable-violation . g$7564$19h1md)
        (make-message-condition . g$7444$19h1md)
        (make-lexical-violation . g$7592$19h1md)
        (make-irritants-condition . g$7531$19h1md)
        (make-implementation-restriction-violation . g$7578$19h1md)
        (make-error . g$7488$19h1md)
        (make-assertion-violation . g$7516$19h1md)
        (lexical-violation? . g$7593$19h1md)
        (irritants-condition? . g$7533$19h1md)
        (implementation-restriction-violation? . g$7579$19h1md)
        (error? . g$7489$19h1md)
        (condition-who . g$7551$19h1md)
        (condition-predicate . g$13063$19h1md)
        (condition-message . g$7447$19h1md)
        (condition-irritants . g$7534$19h1md)
        (condition-accessor . g$13062$19h1md)
        (condition . g$13061$19h1md)
        (assertion-violation? . g$7517$19h1md)
        (condition? . g$13060$19h1md)
        (utf32->string . g$13059$19h1md)
        (utf16->string . g$13058$19h1md)
        (utf8->string . g$13057$19h1md)
        (uint-list->bytevector . g$13056$19h1md)
        (u8-list->bytevector . g$13055$19h1md)
        (string->utf8 . g$13054$19h1md)
        (string->utf32 . g$13053$19h1md)
        (string->utf16 . g$13052$19h1md)
        (sint-list->bytevector . g$13051$19h1md)
        (native-endianness . g$7302$19h1md)
        (bytevector? . g$13050$19h1md)
        (bytevector=? . g$13049$19h1md)
        (bytevector-uint-set! . g$13048$19h1md)
        (bytevector-uint-ref . g$13047$19h1md)
        (bytevector-u8-set! . g$13046$19h1md)
        (bytevector-u8-ref . g$13045$19h1md)
        (bytevector-u64-set! . g$7323$19h1md)
        (bytevector-u64-ref . g$7319$19h1md)
        (bytevector-u64-native-set! . g$7325$19h1md)
        (bytevector-u64-native-ref . g$7321$19h1md)
        (bytevector-u32-set! . g$7315$19h1md)
        (bytevector-u32-ref . g$7311$19h1md)
        (bytevector-u32-native-set! . g$7317$19h1md)
        (bytevector-u32-native-ref . g$7313$19h1md)
        (bytevector-u16-set! . g$7307$19h1md)
        (bytevector-u16-ref . g$7303$19h1md)
        (bytevector-u16-native-set! . g$7309$19h1md)
        (bytevector-u16-native-ref . g$7305$19h1md)
        (bytevector-sint-set! . g$13044$19h1md)
        (bytevector-sint-ref . g$13043$19h1md)
        (bytevector-s8-set! . g$13042$19h1md)
        (bytevector-s8-ref . g$13041$19h1md)
        (bytevector-s64-set! . g$7324$19h1md)
        (bytevector-s64-ref . g$7320$19h1md)
        (bytevector-s64-native-set! . g$7326$19h1md)
        (bytevector-s64-native-ref . g$7322$19h1md)
        (bytevector-s32-set! . g$7316$19h1md)
        (bytevector-s32-ref . g$7312$19h1md)
        (bytevector-s32-native-set! . g$7318$19h1md)
        (bytevector-s32-native-ref . g$7314$19h1md)
        (bytevector-s16-set! . g$7308$19h1md)
        (bytevector-s16-ref . g$7304$19h1md)
        (bytevector-s16-native-set! . g$7310$19h1md)
        (bytevector-s16-native-ref . g$7306$19h1md)
        (bytevector-length . g$13040$19h1md)
        (bytevector-ieee-single-set! . g$13039$19h1md)
        (bytevector-ieee-single-ref . g$13038$19h1md)
        (bytevector-ieee-single-native-set! . g$7329$19h1md)
        (bytevector-ieee-single-native-ref . g$7327$19h1md)
        (bytevector-ieee-double-set! . g$13037$19h1md)
        (bytevector-ieee-double-ref . g$13036$19h1md)
        (bytevector-ieee-double-native-set! . g$7330$19h1md)
        (bytevector-ieee-double-native-ref . g$7328$19h1md)
        (bytevector-fill! . g$13035$19h1md)
        (bytevector-copy! . g$13034$19h1md)
        (bytevector-copy . g$13033$19h1md)
        (bytevector->uint-list . g$13032$19h1md)
        (bytevector->u8-list . g$13031$19h1md)
        (bytevector->sint-list . g$13030$19h1md)
        (no-nans-violation? . g$8045$19h1md)
        (no-infinities-violation? . g$8031$19h1md)
        (make-no-nans-violation . g$8044$19h1md)
        (make-no-infinities-violation . g$8030$19h1md)
        (real->flonum . g$13029$19h1md)
        (flzero? . g$13028$19h1md)
        (fltruncate . g$13027$19h1md)
        (fltan . g$13026$19h1md)
        (flsqrt . g$13025$19h1md)
        (flsin . g$13024$19h1md)
        (flround . g$13023$19h1md)
        (flpositive? . g$13022$19h1md)
        (flonum? . g$13021$19h1md)
        (flodd? . g$13020$19h1md)
        (flnumerator . g$13019$19h1md)
        (flnegative? . g$13018$19h1md)
        (flnan? . g$13017$19h1md)
        (flmod0 . g$13016$19h1md)
        (flmod . g$13015$19h1md)
        (flmin . g$13014$19h1md)
        (flmax . g$13013$19h1md)
        (fllog . g$13012$19h1md)
        (flinteger? . g$13011$19h1md)
        (flinfinite? . g$13010$19h1md)
        (flfloor . g$13009$19h1md)
        (flfinite? . g$13008$19h1md)
        (flexpt . g$13007$19h1md)
        (flexp . g$13006$19h1md)
        (fleven? . g$13005$19h1md)
        (fldiv0-and-mod0 . g$13004$19h1md)
        (fldiv0 . g$13003$19h1md)
        (fldiv-and-mod . g$13002$19h1md)
        (fldiv . g$13001$19h1md)
        (fldenominator . g$13000$19h1md)
        (flcos . g$12999$19h1md)
        (flceiling . g$12998$19h1md)
        (flatan . g$12997$19h1md)
        (flasin . g$12996$19h1md)
        (flacos . g$12995$19h1md)
        (flabs . g$12994$19h1md)
        (fl>? . g$12993$19h1md)
        (fl>=? . g$12992$19h1md)
        (fl=? . g$12991$19h1md)
        (fl<? . g$12990$19h1md)
        (fl<=? . g$12989$19h1md)
        (fl/ . g$12988$19h1md)
        (fl- . g$12987$19h1md)
        (fl+ . g$12986$19h1md)
        (fl* . g$12985$19h1md)
        (fixnum->flonum . g$12984$19h1md)
        (fxzero? . g$12983$19h1md)
        (fxxor . g$12982$19h1md)
        (fxrotate-bit-field . g$7976$19h1md)
        (fxreverse-bit-field . g$12981$19h1md)
        (fxpositive? . g$12980$19h1md)
        (fxodd? . g$12979$19h1md)
        (fxnot . g$12978$19h1md)
        (fxnegative? . g$12977$19h1md)
        (fxmod0 . g$12976$19h1md)
        (fxmod . g$12975$19h1md)
        (fxmin . g$12974$19h1md)
        (fxmax . g$12973$19h1md)
        (fxlength . g$12972$19h1md)
        (fxior . g$12971$19h1md)
        (fxif . g$7970$19h1md)
        (fxfirst-bit-set . g$12970$19h1md)
        (fxeven? . g$12969$19h1md)
        (fxdiv0-and-mod0 . g$12968$19h1md)
        (fxdiv0 . g$12967$19h1md)
        (fxdiv-and-mod . g$12966$19h1md)
        (fxdiv . g$12965$19h1md)
        (fxcopy-bit-field . g$7973$19h1md)
        (fxcopy-bit . g$7971$19h1md)
        (fxbit-set? . g$12964$19h1md)
        (fxbit-field . g$7972$19h1md)
        (fxbit-count . g$12963$19h1md)
        (fxarithmetic-shift-right . g$7975$19h1md)
        (fxarithmetic-shift-left . g$7974$19h1md)
        (fxarithmetic-shift . g$12962$19h1md)
        (fxand . g$12961$19h1md)
        (fx>? . g$12960$19h1md)
        (fx>=? . g$12959$19h1md)
        (fx=? . g$12958$19h1md)
        (fx<? . g$12957$19h1md)
        (fx<=? . g$12956$19h1md)
        (fx-/carry . g$12955$19h1md)
        (fx- . g$12954$19h1md)
        (fx+/carry . g$12953$19h1md)
        (fx+ . g$12952$19h1md)
        (fx*/carry . g$12951$19h1md)
        (fx* . g$12950$19h1md)
        (greatest-fixnum . g$12949$19h1md)
        (least-fixnum . g$12948$19h1md)
        (fixnum-width . g$12947$19h1md)
        (fixnum? . g$12946$19h1md)
        (bitwise-rotate-bit-field . g$7928$19h1md)
        (bitwise-reverse-bit-field . g$12945$19h1md)
        (bitwise-length . g$12944$19h1md)
        (bitwise-if . g$7922$19h1md)
        (bitwise-first-bit-set . g$12943$19h1md)
        (bitwise-copy-bit-field . g$7925$19h1md)
        (bitwise-copy-bit . g$7923$19h1md)
        (bitwise-bit-set? . g$12942$19h1md)
        (bitwise-bit-field . g$12941$19h1md)
        (bitwise-bit-count . g$12940$19h1md)
        (bitwise-xor . g$12939$19h1md)
        (bitwise-ior . g$12938$19h1md)
        (bitwise-and . g$12937$19h1md)
        (bitwise-not . g$12936$19h1md)
        (bitwise-arithmetic-shift-right . g$7927$19h1md)
        (bitwise-arithmetic-shift-left . g$7926$19h1md)
        (bitwise-arithmetic-shift . g$12935$19h1md)
        (zero? . g$12934$19h1md)
        (vector? . g$12933$19h1md)
        (vector-set! . g$12932$19h1md)
        (vector-ref . g$12931$19h1md)
        (vector-map . g$12930$19h1md)
        (vector-length . g$12929$19h1md)
        (vector-for-each . g$12928$19h1md)
        (vector-fill! . g$12927$19h1md)
        (vector->list . g$12926$19h1md)
        (vector . g$12925$19h1md)
        (values . g$12924$19h1md)
        (truncate . g$12923$19h1md)
        (tan . g$12922$19h1md)
        (symbol? . g$12921$19h1md)
        (symbol=? . g$6611$19h1md)
        (symbol->string . g$12920$19h1md)
        (substring . g$12919$19h1md)
        (string? . g$12918$19h1md)
        (string>? . g$6608$19h1md)
        (string>=? . g$6610$19h1md)
        (string=? . g$6606$19h1md)
        (string<? . g$6607$19h1md)
        (string<=? . g$6609$19h1md)
        (string-ref . g$12917$19h1md)
        (string-length . g$12916$19h1md)
        (string-for-each . g$12915$19h1md)
        (string-copy . g$12914$19h1md)
        (string-append . g$12913$19h1md)
        (string->symbol . g$12912$19h1md)
        (string->number . g$12911$19h1md)
        (string->list . g$12910$19h1md)
        (string . g$12909$19h1md)
        (sqrt . g$12908$19h1md)
        (sin . g$12907$19h1md)
        (round . g$12906$19h1md)
        (reverse . g$12905$19h1md)
        (real? . g$12904$19h1md)
        (real-valued? . g$12903$19h1md)
        (real-part . g$12902$19h1md)
        (rationalize . g$6664$19h1md)
        (rational? . g$12901$19h1md)
        (rational-valued? . g$12900$19h1md)
        (procedure? . g$12899$19h1md)
        (positive? . g$12898$19h1md)
        (pair? . g$12897$19h1md)
        (odd? . g$12896$19h1md)
        (numerator . g$12895$19h1md)
        (number? . g$12894$19h1md)
        (number->string . g$12893$19h1md)
        (null? . g$12892$19h1md)
        (not . g$12891$19h1md)
        (negative? . g$12890$19h1md)
        (nan? . g$12889$19h1md)
        (min . g$12888$19h1md)
        (max . g$12887$19h1md)
        (map . g$12886$19h1md)
        (make-vector . g$12885$19h1md)
        (make-string . g$12884$19h1md)
        (make-rectangular . g$12883$19h1md)
        (make-polar . g$12882$19h1md)
        (magnitude . g$12881$19h1md)
        (log . g$12880$19h1md)
        (list? . g$12879$19h1md)
        (list-tail . g$12878$19h1md)
        (list-ref . g$12877$19h1md)
        (list->vector . g$12876$19h1md)
        (list->string . g$12875$19h1md)
        (list . g$12874$19h1md)
        (length . g$12873$19h1md)
        (lcm . g$12872$19h1md)
        (integer? . g$12871$19h1md)
        (integer-valued? . g$12870$19h1md)
        (integer->char . g$12869$19h1md)
        (infinite? . g$12868$19h1md)
        (inexact? . g$12867$19h1md)
        (inexact . g$12866$19h1md)
        (imag-part . g$12865$19h1md)
        (gcd . g$12864$19h1md)
        (for-each . g$12863$19h1md)
        (floor . g$12862$19h1md)
        (finite? . g$12861$19h1md)
        (expt . g$12860$19h1md)
        (exp . g$12859$19h1md)
        (exact? . g$12858$19h1md)
        (exact-integer-sqrt . g$12857$19h1md)
        (exact . g$12856$19h1md)
        (even? . g$12855$19h1md)
        (error . g$12854$19h1md)
        (eqv? . g$12853$19h1md)
        (equal? . g$12852$19h1md)
        (eq? . g$12851$19h1md)
        (dynamic-wind . g$12850$19h1md)
        (div0-and-mod0 . g$12849$19h1md)
        (mod0 . g$12848$19h1md)
        (div0 . g$12847$19h1md)
        (div-and-mod . g$12846$19h1md)
        (mod . g$12845$19h1md)
        (div . g$12844$19h1md)
        (denominator . g$12843$19h1md)
        (cos . g$12842$19h1md)
        (cons . g$12841$19h1md)
        (complex? . g$12840$19h1md)
        (char? . g$12839$19h1md)
        (char>? . g$6661$19h1md)
        (char>=? . g$6663$19h1md)
        (char=? . g$6659$19h1md)
        (char<? . g$6660$19h1md)
        (char<=? . g$6662$19h1md)
        (char->integer . g$12838$19h1md)
        (ceiling . g$12837$19h1md)
        (call-with-values . g$12836$19h1md)
        (call/cc . g$12835$19h1md)
        (call-with-current-continuation . g$12834$19h1md)
        (cddddr . g$6559$19h1md)
        (cdddar . g$6558$19h1md)
        (cddadr . g$6557$19h1md)
        (cddaar . g$6556$19h1md)
        (cdaddr . g$6555$19h1md)
        (cdadar . g$6554$19h1md)
        (cdaadr . g$6553$19h1md)
        (cdaaar . g$6552$19h1md)
        (cadddr . g$6551$19h1md)
        (caddar . g$6550$19h1md)
        (cadadr . g$6549$19h1md)
        (cadaar . g$6548$19h1md)
        (caaddr . g$6547$19h1md)
        (caadar . g$6546$19h1md)
        (caaadr . g$6545$19h1md)
        (caaaar . g$6544$19h1md)
        (cdddr . g$6543$19h1md)
        (cddar . g$6542$19h1md)
        (cdadr . g$6541$19h1md)
        (cdaar . g$6540$19h1md)
        (caddr . g$6539$19h1md)
        (cadar . g$6538$19h1md)
        (caadr . g$6537$19h1md)
        (caaar . g$6536$19h1md)
        (cddr . g$6535$19h1md)
        (cdar . g$6534$19h1md)
        (cadr . g$6533$19h1md)
        (caar . g$6532$19h1md)
        (cdr . g$12833$19h1md)
        (car . g$12832$19h1md)
        (boolean? . g$12831$19h1md)
        (boolean=? . g$6612$19h1md)
        (atan . g$12830$19h1md)
        (assertion-violation . g$12829$19h1md)
        (asin . g$12828$19h1md)
        (apply . g$12827$19h1md)
        (append . g$12826$19h1md)
        (angle . g$12825$19h1md)
        (acos . g$12824$19h1md)
        (abs . g$12823$19h1md)
        (/ . g$12822$19h1md)
        (* . g$12821$19h1md)
        (- . g$12820$19h1md)
        (+ . g$12819$19h1md)
        (>= . g$12818$19h1md)
        (> . g$12817$19h1md)
        (= . g$12816$19h1md)
        (<= . g$12815$19h1md)
        (< . g$12814$19h1md)
        (make-promise . g$7642$19h1md)
        (load/args . g$12648$19h1md)
        (printf . g$8396$19h1md)
        (fprintf . g$8397$19h1md)
        (format . g$8398$19h1md)
        (get-arity . g$12809$19h1md)
        (gc-collect . g$12808$19h1md)
        (clr-type? . g$12807$19h1md)
        (get-clr-type . g$12806$19h1md)
        (vector-append . g$12804$19h1md)
        (vector-filter . g$12803$19h1md)
        (vector-reverse! . g$12802$19h1md)
        (vector-contains? . g$12801$19h1md)
        (vector-index-of . g$12800$19h1md)
        (vector-copy . g$12799$19h1md)
        (vector-binary-search . g$12798$19h1md)
        (get-output-string . g$12797$19h1md)
        (open-output-string . g$12796$19h1md)
        (open-input-string . g$12795$19h1md)
        (string-ci-compare . g$12794$19h1md)
        (string-compare . g$12793$19h1md)
        (string-format . g$12792$19h1md)
        (trace-printer . g$12645$19h1md)
        (make-traced-procedure . g$12791$19h1md)
        (make-traced-macro . g$8418$19h1md)
        (pmap . g$12790$19h1md)
        (time-it . g$12789$19h1md)
        (make-parameter . g$8423$19h1md)
        (library-locator . g$12788$19h1md)
        (get-library-paths . g$12787$19h1md)
        (environment-symbols . g$9686$19h1md)
        (interaction-environment-symbols . g$9685$19h1md)
        (library-path . g$8854$19h1md)
        (library-extensions . g$8855$19h1md)
        (installed-libraries . g$8875$19h1md)
        (expand . g$9691$19h1md)
        (&no-nans . g$12786$19h1md)
        (&no-infinities . g$12785$19h1md)
        (&i/o-encoding . g$12784$19h1md)
        (&i/o-decoding . g$12783$19h1md)
        (&i/o-port . g$12782$19h1md)
        (&i/o-file-does-not-exist . g$12781$19h1md)
        (&i/o-file-already-exists . g$12780$19h1md)
        (&i/o-file-is-read-only . g$12779$19h1md)
        (&i/o-file-protection . g$12778$19h1md)
        (&i/o-filename . g$12777$19h1md)
        (&i/o-invalid-position . g$12776$19h1md)
        (&i/o-write . g$12775$19h1md)
        (&i/o-read . g$12774$19h1md)
        (&i/o . g$12773$19h1md)
        (&non-continuable . g$12772$19h1md)
        (&undefined . g$12771$19h1md)
        (&syntax . g$12770$19h1md)
        (&lexical . g$12769$19h1md)
        (&implementation-restriction . g$12768$19h1md)
        (&who . g$12766$19h1md)
        (&irritants . g$12765$19h1md)
        (&assertion . g$12764$19h1md)
        (&violation . g$12763$19h1md)
        (&error . g$12762$19h1md)
        (&serious . g$12761$19h1md)
        (&warning . g$12760$19h1md)
        (&message . g$12759$19h1md)
        (&condition . g$12758$19h1md)
        (define-condition-type . g$12757$19h1md)
        (define-enumeration . g$12756$19h1md)
        (define-record-type . g$12755$19h1md)
        (parent-rtd . g$12754$19h1md)
        (nongenerative . g$12753$19h1md)
        (opaque . g$12752$19h1md)
        (sealed . g$12751$19h1md)
        (protocol . g$12750$19h1md)
        (parent . g$12749$19h1md)
        (immutable . g$12748$19h1md)
        (mutable . g$12747$19h1md)
        (fields . g$12746$19h1md)
        (error-handling-mode . g$12745$19h1md)
        (file-options . g$12744$19h1md)
        (buffer-mode . g$12743$19h1md)
        (eol-style . g$12742$19h1md)
        (guard . g$12741$19h1md)
        (trace-letrec-syntax . g$12740$19h1md)
        (trace-let-syntax . g$12739$19h1md)
        (trace-define-syntax . g$12738$19h1md)
        (trace-define . g$12737$19h1md)
        (trace-lambda . g$12736$19h1md)
        (unsyntax-splicing . g$12735$19h1md)
        (unsyntax . g$12734$19h1md)
        (unquote-splicing . g$12733$19h1md)
        (unquote . g$12732$19h1md)
        (_ . g$12731$19h1md)
        (else . g$12730$19h1md)
        (=> . g$12729$19h1md)
        (... . g$12728$19h1md)
        (assert . g$12727$19h1md)
        (endianness . g$12726$19h1md)
        (delay . g$12725$19h1md)
        (time . g$12724$19h1md)
        (or . g$12723$19h1md)
        (and . g$12722$19h1md)
        (do . g$12721$19h1md)
        (cond . g$12720$19h1md)
        (let* . g$12719$19h1md)
        (let . g$12718$19h1md)
        (identifier-syntax . g$12717$19h1md)
        (with-syntax . g$12716$19h1md)
        (quasisyntax . g$12715$19h1md)
        (quasiquote . g$12714$19h1md)
        (syntax-rules . g$12713$19h1md)
        (include-into . g$12712$19h1md)
        (include . g$12711$19h1md)
        (let-values . g$12709$19h1md)
        (let*-values . g$12708$19h1md)
        (record-constructor-descriptor . g$12707$19h1md)
        (record-type-descriptor . g$12706$19h1md)
        (fluid-let-syntax . g$12705$19h1md)
        (case . g$12704$19h1md)
        (parameterize . g$12703$19h1md)
        (unless . g$12702$19h1md)
        (when . g$12701$19h1md)
        (if . g$12700$19h1md)
        (letrec* . g$12699$19h1md)
        (letrec . g$12698$19h1md)
        (case-lambda . g$12696$19h1md)
        (lambda . g$12695$19h1md)
        (syntax . g$12694$19h1md)
        (syntax-case . g$12693$19h1md)
        (quote . g$12692$19h1md)
        (letrec-syntax . g$12690$19h1md)
        (let-syntax . g$12689$19h1md)
        (set! . g$12688$19h1md)
        (import . g$12687$19h1md)
        (library . g$12686$19h1md)
        (begin . g$12685$19h1md)
        (module . g$12684$19h1md)
        (define-syntax . g$12683$19h1md)
        (define . g$12682$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13302$19h1md
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$12787$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7487$19h1md
      'g$13303$19h1md
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$13243$19h1md)
        (annotation-source . g$13242$19h1md)
        (annotation-expression . g$13241$19h1md)
        (annotation? . g$13240$19h1md)
        (read-annotated . g$13239$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7487$19h1md
      'g$13304$19h1md
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$13209$19h1md)
        (serialize-library . g$13208$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7487$19h1md
      'g$13305$19h1md
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((variable-transformer-procedure . g$9316$19h1md)
        (variable-transformer? . g$9315$19h1md)
        (eqv-hash . g$12812$19h1md)
        (eq-hash . g$12811$19h1md)
        (reverse! . g$12810$19h1md)
        (format . g$8398$19h1md)
        (get-command-line . g$12805$19h1md)
        (make-traced-procedure . g$12791$19h1md)
        (assertion-error . g$9705$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7487$19h1md
      'g$13306$19h1md
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$12813$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13307$19h1md
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$13227$19h1md)
        (clr-field-set!-internal . g$13226$19h1md)
        (clr-field-get-internal . g$13225$19h1md)
        (clr-cast-internal . g$13224$19h1md)
        (clr-call-internal . g$13223$19h1md)
        (clr-new-internal . g$13222$19h1md)
        (clr-new-array-internal . g$13221$19h1md)
        (clr-is-internal . g$13220$19h1md)
        (clr-reference-internal . g$13219$19h1md)
        (clr-using-internal . g$13218$19h1md)
        (clr-clear-usings-internal . g$13217$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13308$19h1md
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$12733$19h1md)
        (unquote . g$12732$19h1md)
        (else . g$12730$19h1md)
        (=> . g$12729$19h1md)
        (delay . g$12725$19h1md)
        (or . g$12723$19h1md)
        (and . g$12722$19h1md)
        (do . g$12721$19h1md)
        (cond . g$12720$19h1md)
        (let* . g$12719$19h1md)
        (let . g$12718$19h1md)
        (quasiquote . g$12714$19h1md)
        (syntax-rules . g$12713$19h1md)
        (case . g$12704$19h1md)
        (if . g$12700$19h1md)
        (letrec . g$12698$19h1md)
        (lambda . g$12695$19h1md)
        (quote . g$12692$19h1md)
        (letrec-syntax . g$12690$19h1md)
        (let-syntax . g$12689$19h1md)
        (set! . g$12688$19h1md)
        (begin . g$12685$19h1md)
        (define-syntax . g$12683$19h1md)
        (define . g$12682$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7487$19h1md
      'g$13309$19h1md
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((interaction-environment . g$9715$19h1md)
        (char-ready? . g$13207$19h1md)
        (string-ci>? . g$7785$19h1md)
        (string-ci>=? . g$7787$19h1md)
        (string-ci=? . g$7783$19h1md)
        (string-ci<? . g$7784$19h1md)
        (string-ci<=? . g$7786$19h1md)
        (char-whitespace? . g$13198$19h1md)
        (char-upper-case? . g$13197$19h1md)
        (char-numeric? . g$13195$19h1md)
        (char-lower-case? . g$13194$19h1md)
        (char-upcase . g$13192$19h1md)
        (char-downcase . g$13189$19h1md)
        (char-ci>? . g$7836$19h1md)
        (char-ci>=? . g$7838$19h1md)
        (char-ci=? . g$7834$19h1md)
        (char-ci<? . g$7835$19h1md)
        (char-ci<=? . g$7837$19h1md)
        (char-alphabetic? . g$13188$19h1md)
        (call-with-output-file . g$8255$19h1md)
        (call-with-input-file . g$8254$19h1md)
        (write-char . g$13156$19h1md)
        (write . g$13155$19h1md)
        (with-output-to-file . g$8253$19h1md)
        (with-input-from-file . g$8252$19h1md)
        (read-char . g$13154$19h1md)
        (read . g$13153$19h1md)
        (peek-char . g$13152$19h1md)
        (open-output-file . g$13151$19h1md)
        (open-input-file . g$13150$19h1md)
        (newline . g$13149$19h1md)
        (display . g$13148$19h1md)
        (close-output-port . g$13147$19h1md)
        (close-input-port . g$13146$19h1md)
        (eof-object? . g$13145$19h1md)
        (eof-object . g$13144$19h1md)
        (current-error-port . g$13143$19h1md)
        (current-output-port . g$13142$19h1md)
        (current-input-port . g$13141$19h1md)
        (output-port? . g$13140$19h1md)
        (input-port? . g$13139$19h1md)
        (scheme-report-environment . g$9690$19h1md)
        (quotient . g$7639$19h1md)
        (null-environment . g$9689$19h1md)
        (remainder . g$7640$19h1md)
        (modulo . g$7641$19h1md)
        (inexact->exact . g$13077$19h1md)
        (force . g$7643$19h1md)
        (exact->inexact . g$13076$19h1md)
        (string-fill! . g$13074$19h1md)
        (string-set! . g$13073$19h1md)
        (set-cdr! . g$13072$19h1md)
        (set-car! . g$13071$19h1md)
        (memv . g$13070$19h1md)
        (memq . g$13069$19h1md)
        (member . g$7217$19h1md)
        (assv . g$7214$19h1md)
        (assq . g$13068$19h1md)
        (assoc . g$7215$19h1md)
        (eval . g$9692$19h1md)
        (zero? . g$12934$19h1md)
        (vector? . g$12933$19h1md)
        (vector-set! . g$12932$19h1md)
        (vector-ref . g$12931$19h1md)
        (vector-length . g$12929$19h1md)
        (vector-fill! . g$12927$19h1md)
        (vector->list . g$12926$19h1md)
        (vector . g$12925$19h1md)
        (values . g$12924$19h1md)
        (truncate . g$12923$19h1md)
        (tan . g$12922$19h1md)
        (symbol? . g$12921$19h1md)
        (symbol->string . g$12920$19h1md)
        (substring . g$12919$19h1md)
        (string? . g$12918$19h1md)
        (string>? . g$6608$19h1md)
        (string>=? . g$6610$19h1md)
        (string=? . g$6606$19h1md)
        (string<? . g$6607$19h1md)
        (string<=? . g$6609$19h1md)
        (string-ref . g$12917$19h1md)
        (string-length . g$12916$19h1md)
        (string-copy . g$12914$19h1md)
        (string-append . g$12913$19h1md)
        (string->symbol . g$12912$19h1md)
        (string->number . g$12911$19h1md)
        (string->list . g$12910$19h1md)
        (string . g$12909$19h1md)
        (sqrt . g$12908$19h1md)
        (sin . g$12907$19h1md)
        (round . g$12906$19h1md)
        (reverse . g$12905$19h1md)
        (real? . g$12904$19h1md)
        (real-part . g$12902$19h1md)
        (rationalize . g$6664$19h1md)
        (rational? . g$12901$19h1md)
        (procedure? . g$12899$19h1md)
        (positive? . g$12898$19h1md)
        (pair? . g$12897$19h1md)
        (odd? . g$12896$19h1md)
        (numerator . g$12895$19h1md)
        (number? . g$12894$19h1md)
        (number->string . g$12893$19h1md)
        (null? . g$12892$19h1md)
        (not . g$12891$19h1md)
        (negative? . g$12890$19h1md)
        (min . g$12888$19h1md)
        (max . g$12887$19h1md)
        (map . g$12886$19h1md)
        (make-vector . g$12885$19h1md)
        (make-string . g$12884$19h1md)
        (make-rectangular . g$12883$19h1md)
        (make-polar . g$12882$19h1md)
        (magnitude . g$12881$19h1md)
        (log . g$12880$19h1md)
        (list? . g$12879$19h1md)
        (list-tail . g$12878$19h1md)
        (list-ref . g$12877$19h1md)
        (list->vector . g$12876$19h1md)
        (list->string . g$12875$19h1md)
        (list . g$12874$19h1md)
        (length . g$12873$19h1md)
        (lcm . g$12872$19h1md)
        (integer? . g$12871$19h1md)
        (integer->char . g$12869$19h1md)
        (inexact? . g$12867$19h1md)
        (imag-part . g$12865$19h1md)
        (gcd . g$12864$19h1md)
        (for-each . g$12863$19h1md)
        (floor . g$12862$19h1md)
        (expt . g$12860$19h1md)
        (exp . g$12859$19h1md)
        (exact? . g$12858$19h1md)
        (even? . g$12855$19h1md)
        (eqv? . g$12853$19h1md)
        (equal? . g$12852$19h1md)
        (eq? . g$12851$19h1md)
        (dynamic-wind . g$12850$19h1md)
        (denominator . g$12843$19h1md)
        (cos . g$12842$19h1md)
        (cons . g$12841$19h1md)
        (complex? . g$12840$19h1md)
        (char? . g$12839$19h1md)
        (char>? . g$6661$19h1md)
        (char>=? . g$6663$19h1md)
        (char=? . g$6659$19h1md)
        (char<? . g$6660$19h1md)
        (char<=? . g$6662$19h1md)
        (char->integer . g$12838$19h1md)
        (ceiling . g$12837$19h1md)
        (call-with-values . g$12836$19h1md)
        (call-with-current-continuation . g$12834$19h1md)
        (cddddr . g$6559$19h1md)
        (cdddar . g$6558$19h1md)
        (cddadr . g$6557$19h1md)
        (cddaar . g$6556$19h1md)
        (cdaddr . g$6555$19h1md)
        (cdadar . g$6554$19h1md)
        (cdaadr . g$6553$19h1md)
        (cdaaar . g$6552$19h1md)
        (cadddr . g$6551$19h1md)
        (caddar . g$6550$19h1md)
        (cadadr . g$6549$19h1md)
        (cadaar . g$6548$19h1md)
        (caaddr . g$6547$19h1md)
        (caadar . g$6546$19h1md)
        (caaadr . g$6545$19h1md)
        (caaaar . g$6544$19h1md)
        (cdddr . g$6543$19h1md)
        (cddar . g$6542$19h1md)
        (cdadr . g$6541$19h1md)
        (cdaar . g$6540$19h1md)
        (caddr . g$6539$19h1md)
        (cadar . g$6538$19h1md)
        (caadr . g$6537$19h1md)
        (caaar . g$6536$19h1md)
        (cddr . g$6535$19h1md)
        (cdar . g$6534$19h1md)
        (cadr . g$6533$19h1md)
        (caar . g$6532$19h1md)
        (cdr . g$12833$19h1md)
        (car . g$12832$19h1md)
        (boolean? . g$12831$19h1md)
        (atan . g$12830$19h1md)
        (asin . g$12828$19h1md)
        (apply . g$12827$19h1md)
        (append . g$12826$19h1md)
        (angle . g$12825$19h1md)
        (acos . g$12824$19h1md)
        (abs . g$12823$19h1md)
        (/ . g$12822$19h1md)
        (* . g$12821$19h1md)
        (- . g$12820$19h1md)
        (+ . g$12819$19h1md)
        (>= . g$12818$19h1md)
        (> . g$12817$19h1md)
        (= . g$12816$19h1md)
        (<= . g$12815$19h1md)
        (< . g$12814$19h1md)
        (unquote-splicing . g$12733$19h1md)
        (unquote . g$12732$19h1md)
        (else . g$12730$19h1md)
        (=> . g$12729$19h1md)
        (... . g$12728$19h1md)
        (delay . g$12725$19h1md)
        (or . g$12723$19h1md)
        (and . g$12722$19h1md)
        (do . g$12721$19h1md)
        (cond . g$12720$19h1md)
        (let* . g$12719$19h1md)
        (let . g$12718$19h1md)
        (quasiquote . g$12714$19h1md)
        (syntax-rules . g$12713$19h1md)
        (case . g$12704$19h1md)
        (if . g$12700$19h1md)
        (letrec . g$12698$19h1md)
        (lambda . g$12695$19h1md)
        (quote . g$12692$19h1md)
        (letrec-syntax . g$12690$19h1md)
        (let-syntax . g$12689$19h1md)
        (set! . g$12688$19h1md)
        (begin . g$12685$19h1md)
        (define-syntax . g$12683$19h1md)
        (define . g$12682$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7487$19h1md
      'g$13310$19h1md
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$13206$19h1md)
        (string-titlecase . g$13205$19h1md)
        (string-normalize-nfkd . g$13204$19h1md)
        (string-normalize-nfkc . g$13203$19h1md)
        (string-normalize-nfd . g$13202$19h1md)
        (string-normalize-nfc . g$13201$19h1md)
        (string-foldcase . g$13200$19h1md)
        (string-downcase . g$13199$19h1md)
        (string-ci>? . g$7785$19h1md)
        (string-ci>=? . g$7787$19h1md)
        (string-ci=? . g$7783$19h1md)
        (string-ci<? . g$7784$19h1md)
        (string-ci<=? . g$7786$19h1md)
        (char-whitespace? . g$13198$19h1md)
        (char-upper-case? . g$13197$19h1md)
        (char-title-case? . g$13196$19h1md)
        (char-numeric? . g$13195$19h1md)
        (char-lower-case? . g$13194$19h1md)
        (char-general-category . g$13193$19h1md)
        (char-upcase . g$13192$19h1md)
        (char-titlecase . g$13191$19h1md)
        (char-foldcase . g$13190$19h1md)
        (char-downcase . g$13189$19h1md)
        (char-ci>? . g$7836$19h1md)
        (char-ci>=? . g$7838$19h1md)
        (char-ci=? . g$7834$19h1md)
        (char-ci<? . g$7835$19h1md)
        (char-ci<=? . g$7837$19h1md)
        (char-alphabetic? . g$13188$19h1md)
        (make-variable-transformer . g$9314$19h1md)
        (identifier? . g$9710$19h1md)
        (generate-temporaries . g$9699$19h1md)
        (free-identifier=? . g$9700$19h1md)
        (syntax->datum . g$9712$19h1md)
        (datum->syntax . g$9711$19h1md)
        (bound-identifier=? . g$9701$19h1md)
        (record-type-descriptor? . g$13187$19h1md)
        (record-predicate . g$13186$19h1md)
        (record-mutator . g$13185$19h1md)
        (record-constructor . g$13184$19h1md)
        (record-accessor . g$13183$19h1md)
        (make-record-type-descriptor . g$13182$19h1md)
        (make-record-constructor-descriptor . g$13181$19h1md)
        (record? . g$13180$19h1md)
        (record-type-uid . g$13179$19h1md)
        (record-type-sealed? . g$13178$19h1md)
        (record-type-parent . g$13177$19h1md)
        (record-type-opaque? . g$13176$19h1md)
        (record-type-name . g$13175$19h1md)
        (record-type-generative? . g$13174$19h1md)
        (record-type-field-names . g$13173$19h1md)
        (record-rtd . g$13172$19h1md)
        (record-field-mutable? . g$13171$19h1md)
        (delete-file . g$7146$19h1md)
        (file-exists? . g$7145$19h1md)
        (vector-sort! . g$13170$19h1md)
        (vector-sort . g$13169$19h1md)
        (list-sort . g$7659$19h1md)
        (symbol-hash . g$13168$19h1md)
        (string-ci-hash . g$13167$19h1md)
        (string-hash . g$13166$19h1md)
        (equal-hash . g$13165$19h1md)
        (hashtable-equivalence-function . g$13164$19h1md)
        (make-hashtable . g$13163$19h1md)
        (hashtable-hash-function . g$13162$19h1md)
        (make-eqv-hashtable . g$7113$19h1md)
        (make-eq-hashtable . g$7112$19h1md)
        (hashtable? . g$13161$19h1md)
        (hashtable-update! . g$7119$19h1md)
        (hashtable-size . g$7114$19h1md)
        (hashtable-set! . g$7116$19h1md)
        (hashtable-ref . g$7115$19h1md)
        (hashtable-mutable? . g$13160$19h1md)
        (hashtable-keys . g$13159$19h1md)
        (hashtable-entries . g$13158$19h1md)
        (hashtable-delete! . g$7117$19h1md)
        (hashtable-copy . g$13157$19h1md)
        (hashtable-contains? . g$7118$19h1md)
        (hashtable-clear! . g$7120$19h1md)
        (call-with-output-file . g$8255$19h1md)
        (call-with-input-file . g$8254$19h1md)
        (write-char . g$13156$19h1md)
        (write . g$13155$19h1md)
        (with-output-to-file . g$8253$19h1md)
        (with-input-from-file . g$8252$19h1md)
        (read-char . g$13154$19h1md)
        (read . g$13153$19h1md)
        (peek-char . g$13152$19h1md)
        (open-output-file . g$13151$19h1md)
        (open-input-file . g$13150$19h1md)
        (newline . g$13149$19h1md)
        (display . g$13148$19h1md)
        (close-output-port . g$13147$19h1md)
        (close-input-port . g$13146$19h1md)
        (eof-object? . g$13145$19h1md)
        (eof-object . g$13144$19h1md)
        (current-error-port . g$13143$19h1md)
        (current-output-port . g$13142$19h1md)
        (current-input-port . g$13141$19h1md)
        (output-port? . g$13140$19h1md)
        (input-port? . g$13139$19h1md)
        (utf-8-codec . g$13138$19h1md)
        (utf-16-codec . g$13137$19h1md)
        (transcoder-error-handling-mode . g$13136$19h1md)
        (transcoder-eol-style . g$13135$19h1md)
        (transcoder-codec . g$13134$19h1md)
        (transcoded-port . g$13133$19h1md)
        (textual-port? . g$13132$19h1md)
        (string->bytevector . g$13131$19h1md)
        (standard-output-port . g$13130$19h1md)
        (standard-input-port . g$13129$19h1md)
        (standard-error-port . g$13128$19h1md)
        (set-port-position! . g$13127$19h1md)
        (put-u8 . g$13126$19h1md)
        (put-string . g$13125$19h1md)
        (put-datum . g$13124$19h1md)
        (put-char . g$13123$19h1md)
        (put-bytevector . g$13122$19h1md)
        (port? . g$8231$19h1md)
        (port-transcoder . g$13121$19h1md)
        (port-position . g$13120$19h1md)
        (port-has-set-port-position!? . g$13119$19h1md)
        (port-has-port-position? . g$13118$19h1md)
        (port-eof? . g$13117$19h1md)
        (output-port-buffer-mode . g$13116$19h1md)
        (open-string-output-port . g$8230$19h1md)
        (open-string-input-port . g$13115$19h1md)
        (open-file-output-port . g$13114$19h1md)
        (open-file-input/output-port . g$13113$19h1md)
        (open-file-input-port . g$13112$19h1md)
        (open-bytevector-output-port . g$13111$19h1md)
        (open-bytevector-input-port . g$13110$19h1md)
        (native-transcoder . g$13109$19h1md)
        (native-eol-style . g$13108$19h1md)
        (make-transcoder . g$13107$19h1md)
        (latin-1-codec . g$13106$19h1md)
        (make-i/o-write-error . g$8087$19h1md)
        (make-i/o-read-error . g$8073$19h1md)
        (make-i/o-port-error . g$8192$19h1md)
        (make-i/o-invalid-position-error . g$8102$19h1md)
        (make-i/o-filename-error . g$8119$19h1md)
        (make-i/o-file-protection-error . g$8135$19h1md)
        (make-i/o-file-is-read-only-error . g$8149$19h1md)
        (make-i/o-file-does-not-exist-error . g$8177$19h1md)
        (make-i/o-file-already-exists-error . g$8163$19h1md)
        (make-i/o-error . g$8059$19h1md)
        (make-i/o-encoding-error . g$8223$19h1md)
        (make-i/o-decoding-error . g$8208$19h1md)
        (make-custom-textual-output-port . g$13105$19h1md)
        (make-custom-textual-input/output-port . g$13104$19h1md)
        (make-custom-textual-input-port . g$13103$19h1md)
        (make-custom-binary-output-port . g$13102$19h1md)
        (make-custom-binary-input/output-port . g$13101$19h1md)
        (make-custom-binary-input-port . g$13100$19h1md)
        (make-bytevector . g$13099$19h1md)
        (lookahead-u8 . g$13098$19h1md)
        (lookahead-char . g$13097$19h1md)
        (i/o-write-error? . g$8088$19h1md)
        (i/o-read-error? . g$8074$19h1md)
        (i/o-port-error? . g$8194$19h1md)
        (i/o-invalid-position-error? . g$8104$19h1md)
        (i/o-error-position . g$8105$19h1md)
        (i/o-filename-error? . g$8121$19h1md)
        (i/o-file-protection-error? . g$8136$19h1md)
        (i/o-file-is-read-only-error? . g$8150$19h1md)
        (i/o-file-does-not-exist-error? . g$8178$19h1md)
        (i/o-file-already-exists-error? . g$8164$19h1md)
        (i/o-error? . g$8060$19h1md)
        (i/o-error-port . g$8195$19h1md)
        (i/o-error-filename . g$8122$19h1md)
        (i/o-encoding-error? . g$8225$19h1md)
        (i/o-encoding-error-char . g$8226$19h1md)
        (i/o-decoding-error? . g$8209$19h1md)
        (get-u8 . g$13096$19h1md)
        (get-string-n! . g$13095$19h1md)
        (get-string-n . g$13094$19h1md)
        (get-string-all . g$13093$19h1md)
        (get-line . g$13092$19h1md)
        (get-datum . g$13091$19h1md)
        (get-char . g$13090$19h1md)
        (get-bytevector-some . g$13089$19h1md)
        (get-bytevector-n! . g$13088$19h1md)
        (get-bytevector-n . g$13087$19h1md)
        (get-bytevector-all . g$13086$19h1md)
        (flush-output-port . g$13085$19h1md)
        (close-port . g$13084$19h1md)
        (call-with-string-output-port . g$13083$19h1md)
        (call-with-port . g$13082$19h1md)
        (call-with-bytevector-output-port . g$13081$19h1md)
        (bytevector->string . g$13080$19h1md)
        (buffer-mode? . g$13079$19h1md)
        (binary-port? . g$13078$19h1md)
        (exit . g$13075$19h1md)
        (command-line . g$12646$19h1md)
        (remove . g$7226$19h1md)
        (remv . g$7227$19h1md)
        (remp . g$7212$19h1md)
        (remq . g$7228$19h1md)
        (partition . g$7211$19h1md)
        (memv . g$13070$19h1md)
        (memq . g$13069$19h1md)
        (memp . g$7218$19h1md)
        (member . g$7217$19h1md)
        (exists . g$7222$19h1md)
        (for-all . g$7221$19h1md)
        (fold-right . g$7225$19h1md)
        (fold-left . g$7224$19h1md)
        (find . g$7210$19h1md)
        (filter . g$7213$19h1md)
        (cons* . g$7223$19h1md)
        (assv . g$7214$19h1md)
        (assq . g$13068$19h1md)
        (assp . g$7216$19h1md)
        (assoc . g$7215$19h1md)
        (with-exception-handler . g$13067$19h1md)
        (raise-continuable . g$13066$19h1md)
        (raise . g$13065$19h1md)
        (make-enumeration . g$8312$19h1md)
        (enum-set=? . g$8319$19h1md)
        (enum-set-universe . g$8313$19h1md)
        (enum-set-union . g$8320$19h1md)
        (enum-set-subset? . g$8318$19h1md)
        (enum-set-projection . g$8324$19h1md)
        (enum-set-member? . g$8317$19h1md)
        (enum-set-intersection . g$8321$19h1md)
        (enum-set-indexer . g$8314$19h1md)
        (enum-set-difference . g$8322$19h1md)
        (enum-set-constructor . g$8315$19h1md)
        (enum-set-complement . g$8323$19h1md)
        (enum-set->list . g$8316$19h1md)
        (who-condition? . g$7550$19h1md)
        (warning? . g$7461$19h1md)
        (violation? . g$7503$19h1md)
        (undefined-violation? . g$7627$19h1md)
        (syntax-violation? . g$7611$19h1md)
        (syntax-violation-subform . g$7613$19h1md)
        (syntax-violation-form . g$7612$19h1md)
        (syntax-violation . g$9709$19h1md)
        (simple-conditions . g$13064$19h1md)
        (serious-condition? . g$7475$19h1md)
        (non-continuable-violation? . g$7565$19h1md)
        (message-condition? . g$7446$19h1md)
        (make-who-condition . g$7548$19h1md)
        (make-warning . g$7460$19h1md)
        (make-violation . g$7502$19h1md)
        (make-undefined-violation . g$7626$19h1md)
        (make-syntax-violation . g$7608$19h1md)
        (make-serious-condition . g$7474$19h1md)
        (make-non-continuable-violation . g$7564$19h1md)
        (make-message-condition . g$7444$19h1md)
        (make-lexical-violation . g$7592$19h1md)
        (make-irritants-condition . g$7531$19h1md)
        (make-implementation-restriction-violation . g$7578$19h1md)
        (make-error . g$7488$19h1md)
        (make-assertion-violation . g$7516$19h1md)
        (lexical-violation? . g$7593$19h1md)
        (irritants-condition? . g$7533$19h1md)
        (implementation-restriction-violation? . g$7579$19h1md)
        (error? . g$7489$19h1md)
        (condition-who . g$7551$19h1md)
        (condition-predicate . g$13063$19h1md)
        (condition-message . g$7447$19h1md)
        (condition-irritants . g$7534$19h1md)
        (condition-accessor . g$13062$19h1md)
        (condition . g$13061$19h1md)
        (assertion-violation? . g$7517$19h1md)
        (condition? . g$13060$19h1md)
        (utf32->string . g$13059$19h1md)
        (utf16->string . g$13058$19h1md)
        (utf8->string . g$13057$19h1md)
        (uint-list->bytevector . g$13056$19h1md)
        (u8-list->bytevector . g$13055$19h1md)
        (string->utf8 . g$13054$19h1md)
        (string->utf32 . g$13053$19h1md)
        (string->utf16 . g$13052$19h1md)
        (sint-list->bytevector . g$13051$19h1md)
        (native-endianness . g$7302$19h1md)
        (bytevector? . g$13050$19h1md)
        (bytevector=? . g$13049$19h1md)
        (bytevector-uint-set! . g$13048$19h1md)
        (bytevector-uint-ref . g$13047$19h1md)
        (bytevector-u8-set! . g$13046$19h1md)
        (bytevector-u8-ref . g$13045$19h1md)
        (bytevector-u64-set! . g$7323$19h1md)
        (bytevector-u64-ref . g$7319$19h1md)
        (bytevector-u64-native-set! . g$7325$19h1md)
        (bytevector-u64-native-ref . g$7321$19h1md)
        (bytevector-u32-set! . g$7315$19h1md)
        (bytevector-u32-ref . g$7311$19h1md)
        (bytevector-u32-native-set! . g$7317$19h1md)
        (bytevector-u32-native-ref . g$7313$19h1md)
        (bytevector-u16-set! . g$7307$19h1md)
        (bytevector-u16-ref . g$7303$19h1md)
        (bytevector-u16-native-set! . g$7309$19h1md)
        (bytevector-u16-native-ref . g$7305$19h1md)
        (bytevector-sint-set! . g$13044$19h1md)
        (bytevector-sint-ref . g$13043$19h1md)
        (bytevector-s8-set! . g$13042$19h1md)
        (bytevector-s8-ref . g$13041$19h1md)
        (bytevector-s64-set! . g$7324$19h1md)
        (bytevector-s64-ref . g$7320$19h1md)
        (bytevector-s64-native-set! . g$7326$19h1md)
        (bytevector-s64-native-ref . g$7322$19h1md)
        (bytevector-s32-set! . g$7316$19h1md)
        (bytevector-s32-ref . g$7312$19h1md)
        (bytevector-s32-native-set! . g$7318$19h1md)
        (bytevector-s32-native-ref . g$7314$19h1md)
        (bytevector-s16-set! . g$7308$19h1md)
        (bytevector-s16-ref . g$7304$19h1md)
        (bytevector-s16-native-set! . g$7310$19h1md)
        (bytevector-s16-native-ref . g$7306$19h1md)
        (bytevector-length . g$13040$19h1md)
        (bytevector-ieee-single-set! . g$13039$19h1md)
        (bytevector-ieee-single-ref . g$13038$19h1md)
        (bytevector-ieee-single-native-set! . g$7329$19h1md)
        (bytevector-ieee-single-native-ref . g$7327$19h1md)
        (bytevector-ieee-double-set! . g$13037$19h1md)
        (bytevector-ieee-double-ref . g$13036$19h1md)
        (bytevector-ieee-double-native-set! . g$7330$19h1md)
        (bytevector-ieee-double-native-ref . g$7328$19h1md)
        (bytevector-fill! . g$13035$19h1md)
        (bytevector-copy! . g$13034$19h1md)
        (bytevector-copy . g$13033$19h1md)
        (bytevector->uint-list . g$13032$19h1md)
        (bytevector->u8-list . g$13031$19h1md)
        (bytevector->sint-list . g$13030$19h1md)
        (no-nans-violation? . g$8045$19h1md)
        (no-infinities-violation? . g$8031$19h1md)
        (make-no-nans-violation . g$8044$19h1md)
        (make-no-infinities-violation . g$8030$19h1md)
        (real->flonum . g$13029$19h1md)
        (flzero? . g$13028$19h1md)
        (fltruncate . g$13027$19h1md)
        (fltan . g$13026$19h1md)
        (flsqrt . g$13025$19h1md)
        (flsin . g$13024$19h1md)
        (flround . g$13023$19h1md)
        (flpositive? . g$13022$19h1md)
        (flonum? . g$13021$19h1md)
        (flodd? . g$13020$19h1md)
        (flnumerator . g$13019$19h1md)
        (flnegative? . g$13018$19h1md)
        (flnan? . g$13017$19h1md)
        (flmod0 . g$13016$19h1md)
        (flmod . g$13015$19h1md)
        (flmin . g$13014$19h1md)
        (flmax . g$13013$19h1md)
        (fllog . g$13012$19h1md)
        (flinteger? . g$13011$19h1md)
        (flinfinite? . g$13010$19h1md)
        (flfloor . g$13009$19h1md)
        (flfinite? . g$13008$19h1md)
        (flexpt . g$13007$19h1md)
        (flexp . g$13006$19h1md)
        (fleven? . g$13005$19h1md)
        (fldiv0-and-mod0 . g$13004$19h1md)
        (fldiv0 . g$13003$19h1md)
        (fldiv-and-mod . g$13002$19h1md)
        (fldiv . g$13001$19h1md)
        (fldenominator . g$13000$19h1md)
        (flcos . g$12999$19h1md)
        (flceiling . g$12998$19h1md)
        (flatan . g$12997$19h1md)
        (flasin . g$12996$19h1md)
        (flacos . g$12995$19h1md)
        (flabs . g$12994$19h1md)
        (fl>? . g$12993$19h1md)
        (fl>=? . g$12992$19h1md)
        (fl=? . g$12991$19h1md)
        (fl<? . g$12990$19h1md)
        (fl<=? . g$12989$19h1md)
        (fl/ . g$12988$19h1md)
        (fl- . g$12987$19h1md)
        (fl+ . g$12986$19h1md)
        (fl* . g$12985$19h1md)
        (fixnum->flonum . g$12984$19h1md)
        (fxzero? . g$12983$19h1md)
        (fxxor . g$12982$19h1md)
        (fxrotate-bit-field . g$7976$19h1md)
        (fxreverse-bit-field . g$12981$19h1md)
        (fxpositive? . g$12980$19h1md)
        (fxodd? . g$12979$19h1md)
        (fxnot . g$12978$19h1md)
        (fxnegative? . g$12977$19h1md)
        (fxmod0 . g$12976$19h1md)
        (fxmod . g$12975$19h1md)
        (fxmin . g$12974$19h1md)
        (fxmax . g$12973$19h1md)
        (fxlength . g$12972$19h1md)
        (fxior . g$12971$19h1md)
        (fxif . g$7970$19h1md)
        (fxfirst-bit-set . g$12970$19h1md)
        (fxeven? . g$12969$19h1md)
        (fxdiv0-and-mod0 . g$12968$19h1md)
        (fxdiv0 . g$12967$19h1md)
        (fxdiv-and-mod . g$12966$19h1md)
        (fxdiv . g$12965$19h1md)
        (fxcopy-bit-field . g$7973$19h1md)
        (fxcopy-bit . g$7971$19h1md)
        (fxbit-set? . g$12964$19h1md)
        (fxbit-field . g$7972$19h1md)
        (fxbit-count . g$12963$19h1md)
        (fxarithmetic-shift-right . g$7975$19h1md)
        (fxarithmetic-shift-left . g$7974$19h1md)
        (fxarithmetic-shift . g$12962$19h1md)
        (fxand . g$12961$19h1md)
        (fx>? . g$12960$19h1md)
        (fx>=? . g$12959$19h1md)
        (fx=? . g$12958$19h1md)
        (fx<? . g$12957$19h1md)
        (fx<=? . g$12956$19h1md)
        (fx-/carry . g$12955$19h1md)
        (fx- . g$12954$19h1md)
        (fx+/carry . g$12953$19h1md)
        (fx+ . g$12952$19h1md)
        (fx*/carry . g$12951$19h1md)
        (fx* . g$12950$19h1md)
        (greatest-fixnum . g$12949$19h1md)
        (least-fixnum . g$12948$19h1md)
        (fixnum-width . g$12947$19h1md)
        (fixnum? . g$12946$19h1md)
        (bitwise-rotate-bit-field . g$7928$19h1md)
        (bitwise-reverse-bit-field . g$12945$19h1md)
        (bitwise-length . g$12944$19h1md)
        (bitwise-if . g$7922$19h1md)
        (bitwise-first-bit-set . g$12943$19h1md)
        (bitwise-copy-bit-field . g$7925$19h1md)
        (bitwise-copy-bit . g$7923$19h1md)
        (bitwise-bit-set? . g$12942$19h1md)
        (bitwise-bit-field . g$12941$19h1md)
        (bitwise-bit-count . g$12940$19h1md)
        (bitwise-xor . g$12939$19h1md)
        (bitwise-ior . g$12938$19h1md)
        (bitwise-and . g$12937$19h1md)
        (bitwise-not . g$12936$19h1md)
        (bitwise-arithmetic-shift-right . g$7927$19h1md)
        (bitwise-arithmetic-shift-left . g$7926$19h1md)
        (bitwise-arithmetic-shift . g$12935$19h1md)
        (zero? . g$12934$19h1md)
        (vector? . g$12933$19h1md)
        (vector-set! . g$12932$19h1md)
        (vector-ref . g$12931$19h1md)
        (vector-map . g$12930$19h1md)
        (vector-length . g$12929$19h1md)
        (vector-for-each . g$12928$19h1md)
        (vector-fill! . g$12927$19h1md)
        (vector->list . g$12926$19h1md)
        (vector . g$12925$19h1md)
        (values . g$12924$19h1md)
        (truncate . g$12923$19h1md)
        (tan . g$12922$19h1md)
        (symbol? . g$12921$19h1md)
        (symbol=? . g$6611$19h1md)
        (symbol->string . g$12920$19h1md)
        (substring . g$12919$19h1md)
        (string? . g$12918$19h1md)
        (string>? . g$6608$19h1md)
        (string>=? . g$6610$19h1md)
        (string=? . g$6606$19h1md)
        (string<? . g$6607$19h1md)
        (string<=? . g$6609$19h1md)
        (string-ref . g$12917$19h1md)
        (string-length . g$12916$19h1md)
        (string-for-each . g$12915$19h1md)
        (string-copy . g$12914$19h1md)
        (string-append . g$12913$19h1md)
        (string->symbol . g$12912$19h1md)
        (string->number . g$12911$19h1md)
        (string->list . g$12910$19h1md)
        (string . g$12909$19h1md)
        (sqrt . g$12908$19h1md)
        (sin . g$12907$19h1md)
        (round . g$12906$19h1md)
        (reverse . g$12905$19h1md)
        (real? . g$12904$19h1md)
        (real-valued? . g$12903$19h1md)
        (real-part . g$12902$19h1md)
        (rationalize . g$6664$19h1md)
        (rational? . g$12901$19h1md)
        (rational-valued? . g$12900$19h1md)
        (procedure? . g$12899$19h1md)
        (positive? . g$12898$19h1md)
        (pair? . g$12897$19h1md)
        (odd? . g$12896$19h1md)
        (numerator . g$12895$19h1md)
        (number? . g$12894$19h1md)
        (number->string . g$12893$19h1md)
        (null? . g$12892$19h1md)
        (not . g$12891$19h1md)
        (negative? . g$12890$19h1md)
        (nan? . g$12889$19h1md)
        (min . g$12888$19h1md)
        (max . g$12887$19h1md)
        (map . g$12886$19h1md)
        (make-vector . g$12885$19h1md)
        (make-string . g$12884$19h1md)
        (make-rectangular . g$12883$19h1md)
        (make-polar . g$12882$19h1md)
        (magnitude . g$12881$19h1md)
        (log . g$12880$19h1md)
        (list? . g$12879$19h1md)
        (list-tail . g$12878$19h1md)
        (list-ref . g$12877$19h1md)
        (list->vector . g$12876$19h1md)
        (list->string . g$12875$19h1md)
        (list . g$12874$19h1md)
        (length . g$12873$19h1md)
        (lcm . g$12872$19h1md)
        (integer? . g$12871$19h1md)
        (integer-valued? . g$12870$19h1md)
        (integer->char . g$12869$19h1md)
        (infinite? . g$12868$19h1md)
        (inexact? . g$12867$19h1md)
        (inexact . g$12866$19h1md)
        (imag-part . g$12865$19h1md)
        (gcd . g$12864$19h1md)
        (for-each . g$12863$19h1md)
        (floor . g$12862$19h1md)
        (finite? . g$12861$19h1md)
        (expt . g$12860$19h1md)
        (exp . g$12859$19h1md)
        (exact? . g$12858$19h1md)
        (exact-integer-sqrt . g$12857$19h1md)
        (exact . g$12856$19h1md)
        (even? . g$12855$19h1md)
        (error . g$12854$19h1md)
        (eqv? . g$12853$19h1md)
        (equal? . g$12852$19h1md)
        (eq? . g$12851$19h1md)
        (dynamic-wind . g$12850$19h1md)
        (div0-and-mod0 . g$12849$19h1md)
        (mod0 . g$12848$19h1md)
        (div0 . g$12847$19h1md)
        (div-and-mod . g$12846$19h1md)
        (mod . g$12845$19h1md)
        (div . g$12844$19h1md)
        (denominator . g$12843$19h1md)
        (cos . g$12842$19h1md)
        (cons . g$12841$19h1md)
        (complex? . g$12840$19h1md)
        (char? . g$12839$19h1md)
        (char>? . g$6661$19h1md)
        (char>=? . g$6663$19h1md)
        (char=? . g$6659$19h1md)
        (char<? . g$6660$19h1md)
        (char<=? . g$6662$19h1md)
        (char->integer . g$12838$19h1md)
        (ceiling . g$12837$19h1md)
        (call-with-values . g$12836$19h1md)
        (call/cc . g$12835$19h1md)
        (call-with-current-continuation . g$12834$19h1md)
        (cddddr . g$6559$19h1md)
        (cdddar . g$6558$19h1md)
        (cddadr . g$6557$19h1md)
        (cddaar . g$6556$19h1md)
        (cdaddr . g$6555$19h1md)
        (cdadar . g$6554$19h1md)
        (cdaadr . g$6553$19h1md)
        (cdaaar . g$6552$19h1md)
        (cadddr . g$6551$19h1md)
        (caddar . g$6550$19h1md)
        (cadadr . g$6549$19h1md)
        (cadaar . g$6548$19h1md)
        (caaddr . g$6547$19h1md)
        (caadar . g$6546$19h1md)
        (caaadr . g$6545$19h1md)
        (caaaar . g$6544$19h1md)
        (cdddr . g$6543$19h1md)
        (cddar . g$6542$19h1md)
        (cdadr . g$6541$19h1md)
        (cdaar . g$6540$19h1md)
        (caddr . g$6539$19h1md)
        (cadar . g$6538$19h1md)
        (caadr . g$6537$19h1md)
        (caaar . g$6536$19h1md)
        (cddr . g$6535$19h1md)
        (cdar . g$6534$19h1md)
        (cadr . g$6533$19h1md)
        (caar . g$6532$19h1md)
        (cdr . g$12833$19h1md)
        (car . g$12832$19h1md)
        (boolean? . g$12831$19h1md)
        (boolean=? . g$6612$19h1md)
        (atan . g$12830$19h1md)
        (assertion-violation . g$12829$19h1md)
        (asin . g$12828$19h1md)
        (apply . g$12827$19h1md)
        (append . g$12826$19h1md)
        (angle . g$12825$19h1md)
        (acos . g$12824$19h1md)
        (abs . g$12823$19h1md)
        (/ . g$12822$19h1md)
        (* . g$12821$19h1md)
        (- . g$12820$19h1md)
        (+ . g$12819$19h1md)
        (>= . g$12818$19h1md)
        (> . g$12817$19h1md)
        (= . g$12816$19h1md)
        (<= . g$12815$19h1md)
        (< . g$12814$19h1md)
        (&no-nans . g$12786$19h1md)
        (&no-infinities . g$12785$19h1md)
        (&i/o-encoding . g$12784$19h1md)
        (&i/o-decoding . g$12783$19h1md)
        (&i/o-port . g$12782$19h1md)
        (&i/o-file-does-not-exist . g$12781$19h1md)
        (&i/o-file-already-exists . g$12780$19h1md)
        (&i/o-file-is-read-only . g$12779$19h1md)
        (&i/o-file-protection . g$12778$19h1md)
        (&i/o-filename . g$12777$19h1md)
        (&i/o-invalid-position . g$12776$19h1md)
        (&i/o-write . g$12775$19h1md)
        (&i/o-read . g$12774$19h1md)
        (&i/o . g$12773$19h1md)
        (&non-continuable . g$12772$19h1md)
        (&undefined . g$12771$19h1md)
        (&syntax . g$12770$19h1md)
        (&lexical . g$12769$19h1md)
        (&implementation-restriction . g$12768$19h1md)
        (&who . g$12766$19h1md)
        (&irritants . g$12765$19h1md)
        (&assertion . g$12764$19h1md)
        (&violation . g$12763$19h1md)
        (&error . g$12762$19h1md)
        (&serious . g$12761$19h1md)
        (&warning . g$12760$19h1md)
        (&message . g$12759$19h1md)
        (&condition . g$12758$19h1md)
        (define-condition-type . g$12757$19h1md)
        (define-enumeration . g$12756$19h1md)
        (define-record-type . g$12755$19h1md)
        (parent-rtd . g$12754$19h1md)
        (nongenerative . g$12753$19h1md)
        (opaque . g$12752$19h1md)
        (sealed . g$12751$19h1md)
        (protocol . g$12750$19h1md)
        (parent . g$12749$19h1md)
        (immutable . g$12748$19h1md)
        (mutable . g$12747$19h1md)
        (fields . g$12746$19h1md)
        (error-handling-mode . g$12745$19h1md)
        (file-options . g$12744$19h1md)
        (buffer-mode . g$12743$19h1md)
        (eol-style . g$12742$19h1md)
        (guard . g$12741$19h1md)
        (unsyntax-splicing . g$12735$19h1md)
        (unsyntax . g$12734$19h1md)
        (unquote-splicing . g$12733$19h1md)
        (unquote . g$12732$19h1md)
        (_ . g$12731$19h1md)
        (else . g$12730$19h1md)
        (=> . g$12729$19h1md)
        (... . g$12728$19h1md)
        (assert . g$12727$19h1md)
        (endianness . g$12726$19h1md)
        (or . g$12723$19h1md)
        (and . g$12722$19h1md)
        (do . g$12721$19h1md)
        (cond . g$12720$19h1md)
        (let* . g$12719$19h1md)
        (let . g$12718$19h1md)
        (identifier-syntax . g$12717$19h1md)
        (with-syntax . g$12716$19h1md)
        (quasisyntax . g$12715$19h1md)
        (quasiquote . g$12714$19h1md)
        (syntax-rules . g$12713$19h1md)
        (let-values . g$12709$19h1md)
        (let*-values . g$12708$19h1md)
        (record-constructor-descriptor . g$12707$19h1md)
        (record-type-descriptor . g$12706$19h1md)
        (case . g$12704$19h1md)
        (unless . g$12702$19h1md)
        (when . g$12701$19h1md)
        (if . g$12700$19h1md)
        (letrec* . g$12699$19h1md)
        (letrec . g$12698$19h1md)
        (case-lambda . g$12696$19h1md)
        (lambda . g$12695$19h1md)
        (syntax . g$12694$19h1md)
        (syntax-case . g$12693$19h1md)
        (quote . g$12692$19h1md)
        (letrec-syntax . g$12690$19h1md)
        (let-syntax . g$12689$19h1md)
        (set! . g$12688$19h1md)
        (import . g$12687$19h1md)
        (library . g$12686$19h1md)
        (begin . g$12685$19h1md)
        (define-syntax . g$12683$19h1md)
        (define . g$12682$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13311$19h1md
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((interaction-environment . g$9715$19h1md)
        (scheme-report-environment . g$9690$19h1md)
        (quotient . g$7639$19h1md)
        (null-environment . g$9689$19h1md)
        (remainder . g$7640$19h1md)
        (modulo . g$7641$19h1md)
        (inexact->exact . g$13077$19h1md)
        (force . g$7643$19h1md)
        (exact->inexact . g$13076$19h1md)
        (delay . g$12725$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13312$19h1md
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$12721$19h1md)
        (unless . g$12702$19h1md)
        (when . g$12701$19h1md)
        (case-lambda . g$12696$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13313$19h1md
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$9692$19h1md) (environment . g$9688$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13314$19h1md
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$13072$19h1md) (set-car! . g$13071$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13315$19h1md
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$13074$19h1md) (string-set! . g$13073$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13316$19h1md
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$13075$19h1md) (command-line . g$12646$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13317$19h1md
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$9314$19h1md)
        (identifier? . g$9710$19h1md)
        (generate-temporaries . g$9699$19h1md)
        (free-identifier=? . g$9700$19h1md)
        (syntax->datum . g$9712$19h1md)
        (datum->syntax . g$9711$19h1md)
        (bound-identifier=? . g$9701$19h1md)
        (syntax-violation . g$9709$19h1md)
        (unsyntax-splicing . g$12735$19h1md)
        (unsyntax . g$12734$19h1md)
        (_ . g$12731$19h1md)
        (... . g$12728$19h1md)
        (with-syntax . g$12716$19h1md)
        (quasisyntax . g$12715$19h1md)
        (syntax . g$12694$19h1md)
        (syntax-case . g$12693$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13318$19h1md
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$7146$19h1md)
        (file-exists? . g$7145$19h1md)
        (make-i/o-write-error . g$8087$19h1md)
        (make-i/o-read-error . g$8073$19h1md)
        (make-i/o-port-error . g$8192$19h1md)
        (make-i/o-invalid-position-error . g$8102$19h1md)
        (make-i/o-filename-error . g$8119$19h1md)
        (make-i/o-file-protection-error . g$8135$19h1md)
        (make-i/o-file-is-read-only-error . g$8149$19h1md)
        (make-i/o-file-does-not-exist-error . g$8177$19h1md)
        (make-i/o-file-already-exists-error . g$8163$19h1md)
        (make-i/o-error . g$8059$19h1md)
        (i/o-write-error? . g$8088$19h1md)
        (i/o-read-error? . g$8074$19h1md)
        (i/o-port-error? . g$8194$19h1md)
        (i/o-invalid-position-error? . g$8104$19h1md)
        (i/o-error-position . g$8105$19h1md)
        (i/o-filename-error? . g$8121$19h1md)
        (i/o-file-protection-error? . g$8136$19h1md)
        (i/o-file-is-read-only-error? . g$8150$19h1md)
        (i/o-file-does-not-exist-error? . g$8178$19h1md)
        (i/o-file-already-exists-error? . g$8164$19h1md)
        (i/o-error? . g$8060$19h1md)
        (i/o-error-port . g$8195$19h1md)
        (i/o-error-filename . g$8122$19h1md)
        (&i/o-port . g$12782$19h1md)
        (&i/o-file-does-not-exist . g$12781$19h1md)
        (&i/o-file-already-exists . g$12780$19h1md)
        (&i/o-file-is-read-only . g$12779$19h1md)
        (&i/o-file-protection . g$12778$19h1md)
        (&i/o-filename . g$12777$19h1md)
        (&i/o-invalid-position . g$12776$19h1md)
        (&i/o-write . g$12775$19h1md)
        (&i/o-read . g$12774$19h1md)
        (&i/o . g$12773$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13319$19h1md
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$13170$19h1md)
        (vector-sort . g$13169$19h1md)
        (list-sort . g$7659$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13320$19h1md
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$12934$19h1md)
        (vector? . g$12933$19h1md)
        (vector-set! . g$12932$19h1md)
        (vector-ref . g$12931$19h1md)
        (vector-map . g$12930$19h1md)
        (vector-length . g$12929$19h1md)
        (vector-for-each . g$12928$19h1md)
        (vector-fill! . g$12927$19h1md)
        (vector->list . g$12926$19h1md)
        (vector . g$12925$19h1md)
        (values . g$12924$19h1md)
        (truncate . g$12923$19h1md)
        (tan . g$12922$19h1md)
        (symbol? . g$12921$19h1md)
        (symbol=? . g$6611$19h1md)
        (symbol->string . g$12920$19h1md)
        (substring . g$12919$19h1md)
        (string? . g$12918$19h1md)
        (string>? . g$6608$19h1md)
        (string>=? . g$6610$19h1md)
        (string=? . g$6606$19h1md)
        (string<? . g$6607$19h1md)
        (string<=? . g$6609$19h1md)
        (string-ref . g$12917$19h1md)
        (string-length . g$12916$19h1md)
        (string-for-each . g$12915$19h1md)
        (string-copy . g$12914$19h1md)
        (string-append . g$12913$19h1md)
        (string->symbol . g$12912$19h1md)
        (string->number . g$12911$19h1md)
        (string->list . g$12910$19h1md)
        (string . g$12909$19h1md)
        (sqrt . g$12908$19h1md)
        (sin . g$12907$19h1md)
        (round . g$12906$19h1md)
        (reverse . g$12905$19h1md)
        (real? . g$12904$19h1md)
        (real-valued? . g$12903$19h1md)
        (real-part . g$12902$19h1md)
        (rationalize . g$6664$19h1md)
        (rational? . g$12901$19h1md)
        (rational-valued? . g$12900$19h1md)
        (procedure? . g$12899$19h1md)
        (positive? . g$12898$19h1md)
        (pair? . g$12897$19h1md)
        (odd? . g$12896$19h1md)
        (numerator . g$12895$19h1md)
        (number? . g$12894$19h1md)
        (number->string . g$12893$19h1md)
        (null? . g$12892$19h1md)
        (not . g$12891$19h1md)
        (negative? . g$12890$19h1md)
        (nan? . g$12889$19h1md)
        (min . g$12888$19h1md)
        (max . g$12887$19h1md)
        (map . g$12886$19h1md)
        (make-vector . g$12885$19h1md)
        (make-string . g$12884$19h1md)
        (make-rectangular . g$12883$19h1md)
        (make-polar . g$12882$19h1md)
        (magnitude . g$12881$19h1md)
        (log . g$12880$19h1md)
        (list? . g$12879$19h1md)
        (list-tail . g$12878$19h1md)
        (list-ref . g$12877$19h1md)
        (list->vector . g$12876$19h1md)
        (list->string . g$12875$19h1md)
        (list . g$12874$19h1md)
        (length . g$12873$19h1md)
        (lcm . g$12872$19h1md)
        (integer? . g$12871$19h1md)
        (integer-valued? . g$12870$19h1md)
        (integer->char . g$12869$19h1md)
        (infinite? . g$12868$19h1md)
        (inexact? . g$12867$19h1md)
        (inexact . g$12866$19h1md)
        (imag-part . g$12865$19h1md)
        (gcd . g$12864$19h1md)
        (for-each . g$12863$19h1md)
        (floor . g$12862$19h1md)
        (finite? . g$12861$19h1md)
        (expt . g$12860$19h1md)
        (exp . g$12859$19h1md)
        (exact? . g$12858$19h1md)
        (exact-integer-sqrt . g$12857$19h1md)
        (exact . g$12856$19h1md)
        (even? . g$12855$19h1md)
        (error . g$12854$19h1md)
        (eqv? . g$12853$19h1md)
        (equal? . g$12852$19h1md)
        (eq? . g$12851$19h1md)
        (dynamic-wind . g$12850$19h1md)
        (div0-and-mod0 . g$12849$19h1md)
        (mod0 . g$12848$19h1md)
        (div0 . g$12847$19h1md)
        (div-and-mod . g$12846$19h1md)
        (mod . g$12845$19h1md)
        (div . g$12844$19h1md)
        (denominator . g$12843$19h1md)
        (cos . g$12842$19h1md)
        (cons . g$12841$19h1md)
        (complex? . g$12840$19h1md)
        (char? . g$12839$19h1md)
        (char>? . g$6661$19h1md)
        (char>=? . g$6663$19h1md)
        (char=? . g$6659$19h1md)
        (char<? . g$6660$19h1md)
        (char<=? . g$6662$19h1md)
        (char->integer . g$12838$19h1md)
        (ceiling . g$12837$19h1md)
        (call-with-values . g$12836$19h1md)
        (call/cc . g$12835$19h1md)
        (call-with-current-continuation . g$12834$19h1md)
        (cddddr . g$6559$19h1md)
        (cdddar . g$6558$19h1md)
        (cddadr . g$6557$19h1md)
        (cddaar . g$6556$19h1md)
        (cdaddr . g$6555$19h1md)
        (cdadar . g$6554$19h1md)
        (cdaadr . g$6553$19h1md)
        (cdaaar . g$6552$19h1md)
        (cadddr . g$6551$19h1md)
        (caddar . g$6550$19h1md)
        (cadadr . g$6549$19h1md)
        (cadaar . g$6548$19h1md)
        (caaddr . g$6547$19h1md)
        (caadar . g$6546$19h1md)
        (caaadr . g$6545$19h1md)
        (caaaar . g$6544$19h1md)
        (cdddr . g$6543$19h1md)
        (cddar . g$6542$19h1md)
        (cdadr . g$6541$19h1md)
        (cdaar . g$6540$19h1md)
        (caddr . g$6539$19h1md)
        (cadar . g$6538$19h1md)
        (caadr . g$6537$19h1md)
        (caaar . g$6536$19h1md)
        (cddr . g$6535$19h1md)
        (cdar . g$6534$19h1md)
        (cadr . g$6533$19h1md)
        (caar . g$6532$19h1md)
        (cdr . g$12833$19h1md)
        (car . g$12832$19h1md)
        (boolean? . g$12831$19h1md)
        (boolean=? . g$6612$19h1md)
        (atan . g$12830$19h1md)
        (assertion-violation . g$12829$19h1md)
        (asin . g$12828$19h1md)
        (apply . g$12827$19h1md)
        (append . g$12826$19h1md)
        (angle . g$12825$19h1md)
        (acos . g$12824$19h1md)
        (abs . g$12823$19h1md)
        (/ . g$12822$19h1md)
        (* . g$12821$19h1md)
        (- . g$12820$19h1md)
        (+ . g$12819$19h1md)
        (>= . g$12818$19h1md)
        (> . g$12817$19h1md)
        (= . g$12816$19h1md)
        (<= . g$12815$19h1md)
        (< . g$12814$19h1md)
        (unquote-splicing . g$12733$19h1md)
        (unquote . g$12732$19h1md)
        (_ . g$12731$19h1md)
        (else . g$12730$19h1md)
        (=> . g$12729$19h1md)
        (... . g$12728$19h1md)
        (assert . g$12727$19h1md)
        (or . g$12723$19h1md)
        (and . g$12722$19h1md)
        (cond . g$12720$19h1md)
        (let* . g$12719$19h1md)
        (let . g$12718$19h1md)
        (identifier-syntax . g$12717$19h1md)
        (quasiquote . g$12714$19h1md)
        (syntax-rules . g$12713$19h1md)
        (let-values . g$12709$19h1md)
        (let*-values . g$12708$19h1md)
        (case . g$12704$19h1md)
        (if . g$12700$19h1md)
        (letrec* . g$12699$19h1md)
        (letrec . g$12698$19h1md)
        (lambda . g$12695$19h1md)
        (quote . g$12692$19h1md)
        (letrec-syntax . g$12690$19h1md)
        (let-syntax . g$12689$19h1md)
        (set! . g$12688$19h1md)
        (begin . g$12685$19h1md)
        (define-syntax . g$12683$19h1md)
        (define . g$12682$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13321$19h1md
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$7226$19h1md)
        (remv . g$7227$19h1md)
        (remp . g$7212$19h1md)
        (remq . g$7228$19h1md)
        (partition . g$7211$19h1md)
        (memv . g$13070$19h1md)
        (memq . g$13069$19h1md)
        (memp . g$7218$19h1md)
        (member . g$7217$19h1md)
        (exists . g$7222$19h1md)
        (for-all . g$7221$19h1md)
        (fold-right . g$7225$19h1md)
        (fold-left . g$7224$19h1md)
        (find . g$7210$19h1md)
        (filter . g$7213$19h1md)
        (cons* . g$7223$19h1md)
        (assv . g$7214$19h1md)
        (assq . g$13068$19h1md)
        (assp . g$7216$19h1md)
        (assoc . g$7215$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13322$19h1md
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$8255$19h1md)
        (call-with-input-file . g$8254$19h1md)
        (write-char . g$13156$19h1md)
        (write . g$13155$19h1md)
        (with-output-to-file . g$8253$19h1md)
        (with-input-from-file . g$8252$19h1md)
        (read-char . g$13154$19h1md)
        (read . g$13153$19h1md)
        (peek-char . g$13152$19h1md)
        (open-output-file . g$13151$19h1md)
        (open-input-file . g$13150$19h1md)
        (newline . g$13149$19h1md)
        (display . g$13148$19h1md)
        (close-output-port . g$13147$19h1md)
        (close-input-port . g$13146$19h1md)
        (eof-object? . g$13145$19h1md)
        (eof-object . g$13144$19h1md)
        (current-error-port . g$13143$19h1md)
        (current-output-port . g$13142$19h1md)
        (current-input-port . g$13141$19h1md)
        (output-port? . g$13140$19h1md)
        (input-port? . g$13139$19h1md)
        (make-i/o-write-error . g$8087$19h1md)
        (make-i/o-read-error . g$8073$19h1md)
        (make-i/o-port-error . g$8192$19h1md)
        (make-i/o-invalid-position-error . g$8102$19h1md)
        (make-i/o-filename-error . g$8119$19h1md)
        (make-i/o-file-protection-error . g$8135$19h1md)
        (make-i/o-file-is-read-only-error . g$8149$19h1md)
        (make-i/o-file-does-not-exist-error . g$8177$19h1md)
        (make-i/o-file-already-exists-error . g$8163$19h1md)
        (make-i/o-error . g$8059$19h1md)
        (i/o-write-error? . g$8088$19h1md)
        (i/o-read-error? . g$8074$19h1md)
        (i/o-port-error? . g$8194$19h1md)
        (i/o-invalid-position-error? . g$8104$19h1md)
        (i/o-error-position . g$8105$19h1md)
        (i/o-filename-error? . g$8121$19h1md)
        (i/o-file-protection-error? . g$8136$19h1md)
        (i/o-file-is-read-only-error? . g$8150$19h1md)
        (i/o-file-does-not-exist-error? . g$8178$19h1md)
        (i/o-file-already-exists-error? . g$8164$19h1md)
        (i/o-error? . g$8060$19h1md)
        (i/o-error-port . g$8195$19h1md)
        (i/o-error-filename . g$8122$19h1md)
        (&i/o-port . g$12782$19h1md)
        (&i/o-file-does-not-exist . g$12781$19h1md)
        (&i/o-file-already-exists . g$12780$19h1md)
        (&i/o-file-is-read-only . g$12779$19h1md)
        (&i/o-file-protection . g$12778$19h1md)
        (&i/o-filename . g$12777$19h1md)
        (&i/o-invalid-position . g$12776$19h1md)
        (&i/o-write . g$12775$19h1md)
        (&i/o-read . g$12774$19h1md)
        (&i/o . g$12773$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13323$19h1md
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$13099$19h1md)
        (utf32->string . g$13059$19h1md)
        (utf16->string . g$13058$19h1md)
        (utf8->string . g$13057$19h1md)
        (uint-list->bytevector . g$13056$19h1md)
        (u8-list->bytevector . g$13055$19h1md)
        (string->utf8 . g$13054$19h1md)
        (string->utf32 . g$13053$19h1md)
        (string->utf16 . g$13052$19h1md)
        (sint-list->bytevector . g$13051$19h1md)
        (native-endianness . g$7302$19h1md)
        (bytevector? . g$13050$19h1md)
        (bytevector=? . g$13049$19h1md)
        (bytevector-uint-set! . g$13048$19h1md)
        (bytevector-uint-ref . g$13047$19h1md)
        (bytevector-u8-set! . g$13046$19h1md)
        (bytevector-u8-ref . g$13045$19h1md)
        (bytevector-u64-set! . g$7323$19h1md)
        (bytevector-u64-ref . g$7319$19h1md)
        (bytevector-u64-native-set! . g$7325$19h1md)
        (bytevector-u64-native-ref . g$7321$19h1md)
        (bytevector-u32-set! . g$7315$19h1md)
        (bytevector-u32-ref . g$7311$19h1md)
        (bytevector-u32-native-set! . g$7317$19h1md)
        (bytevector-u32-native-ref . g$7313$19h1md)
        (bytevector-u16-set! . g$7307$19h1md)
        (bytevector-u16-ref . g$7303$19h1md)
        (bytevector-u16-native-set! . g$7309$19h1md)
        (bytevector-u16-native-ref . g$7305$19h1md)
        (bytevector-sint-set! . g$13044$19h1md)
        (bytevector-sint-ref . g$13043$19h1md)
        (bytevector-s8-set! . g$13042$19h1md)
        (bytevector-s8-ref . g$13041$19h1md)
        (bytevector-s64-set! . g$7324$19h1md)
        (bytevector-s64-ref . g$7320$19h1md)
        (bytevector-s64-native-set! . g$7326$19h1md)
        (bytevector-s64-native-ref . g$7322$19h1md)
        (bytevector-s32-set! . g$7316$19h1md)
        (bytevector-s32-ref . g$7312$19h1md)
        (bytevector-s32-native-set! . g$7318$19h1md)
        (bytevector-s32-native-ref . g$7314$19h1md)
        (bytevector-s16-set! . g$7308$19h1md)
        (bytevector-s16-ref . g$7304$19h1md)
        (bytevector-s16-native-set! . g$7310$19h1md)
        (bytevector-s16-native-ref . g$7306$19h1md)
        (bytevector-length . g$13040$19h1md)
        (bytevector-ieee-single-set! . g$13039$19h1md)
        (bytevector-ieee-single-ref . g$13038$19h1md)
        (bytevector-ieee-single-native-set! . g$7329$19h1md)
        (bytevector-ieee-single-native-ref . g$7327$19h1md)
        (bytevector-ieee-double-set! . g$13037$19h1md)
        (bytevector-ieee-double-ref . g$13036$19h1md)
        (bytevector-ieee-double-native-set! . g$7330$19h1md)
        (bytevector-ieee-double-native-ref . g$7328$19h1md)
        (bytevector-fill! . g$13035$19h1md)
        (bytevector-copy! . g$13034$19h1md)
        (bytevector-copy . g$13033$19h1md)
        (bytevector->uint-list . g$13032$19h1md)
        (bytevector->u8-list . g$13031$19h1md)
        (bytevector->sint-list . g$13030$19h1md)
        (endianness . g$12726$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13324$19h1md
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$13206$19h1md)
        (string-titlecase . g$13205$19h1md)
        (string-normalize-nfkd . g$13204$19h1md)
        (string-normalize-nfkc . g$13203$19h1md)
        (string-normalize-nfd . g$13202$19h1md)
        (string-normalize-nfc . g$13201$19h1md)
        (string-foldcase . g$13200$19h1md)
        (string-downcase . g$13199$19h1md)
        (string-ci>? . g$7785$19h1md)
        (string-ci>=? . g$7787$19h1md)
        (string-ci=? . g$7783$19h1md)
        (string-ci<? . g$7784$19h1md)
        (string-ci<=? . g$7786$19h1md)
        (char-whitespace? . g$13198$19h1md)
        (char-upper-case? . g$13197$19h1md)
        (char-title-case? . g$13196$19h1md)
        (char-numeric? . g$13195$19h1md)
        (char-lower-case? . g$13194$19h1md)
        (char-general-category . g$13193$19h1md)
        (char-upcase . g$13192$19h1md)
        (char-titlecase . g$13191$19h1md)
        (char-foldcase . g$13190$19h1md)
        (char-downcase . g$13189$19h1md)
        (char-ci>? . g$7836$19h1md)
        (char-ci>=? . g$7838$19h1md)
        (char-ci=? . g$7834$19h1md)
        (char-ci<? . g$7835$19h1md)
        (char-ci<=? . g$7837$19h1md)
        (char-alphabetic? . g$13188$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13325$19h1md
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$13067$19h1md)
        (raise-continuable . g$13066$19h1md)
        (raise . g$13065$19h1md)
        (guard . g$12741$19h1md)
        (else . g$12730$19h1md)
        (=> . g$12729$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13326$19h1md
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$7928$19h1md)
        (bitwise-reverse-bit-field . g$12945$19h1md)
        (bitwise-length . g$12944$19h1md)
        (bitwise-if . g$7922$19h1md)
        (bitwise-first-bit-set . g$12943$19h1md)
        (bitwise-copy-bit-field . g$7925$19h1md)
        (bitwise-copy-bit . g$7923$19h1md)
        (bitwise-bit-set? . g$12942$19h1md)
        (bitwise-bit-field . g$12941$19h1md)
        (bitwise-bit-count . g$12940$19h1md)
        (bitwise-xor . g$12939$19h1md)
        (bitwise-ior . g$12938$19h1md)
        (bitwise-and . g$12937$19h1md)
        (bitwise-not . g$12936$19h1md)
        (bitwise-arithmetic-shift-right . g$7927$19h1md)
        (bitwise-arithmetic-shift-left . g$7926$19h1md)
        (bitwise-arithmetic-shift . g$12935$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13327$19h1md
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$12983$19h1md)
        (fxxor . g$12982$19h1md)
        (fxrotate-bit-field . g$7976$19h1md)
        (fxreverse-bit-field . g$12981$19h1md)
        (fxpositive? . g$12980$19h1md)
        (fxodd? . g$12979$19h1md)
        (fxnot . g$12978$19h1md)
        (fxnegative? . g$12977$19h1md)
        (fxmod0 . g$12976$19h1md)
        (fxmod . g$12975$19h1md)
        (fxmin . g$12974$19h1md)
        (fxmax . g$12973$19h1md)
        (fxlength . g$12972$19h1md)
        (fxior . g$12971$19h1md)
        (fxif . g$7970$19h1md)
        (fxfirst-bit-set . g$12970$19h1md)
        (fxeven? . g$12969$19h1md)
        (fxdiv0-and-mod0 . g$12968$19h1md)
        (fxdiv0 . g$12967$19h1md)
        (fxdiv-and-mod . g$12966$19h1md)
        (fxdiv . g$12965$19h1md)
        (fxcopy-bit-field . g$7973$19h1md)
        (fxcopy-bit . g$7971$19h1md)
        (fxbit-set? . g$12964$19h1md)
        (fxbit-field . g$7972$19h1md)
        (fxbit-count . g$12963$19h1md)
        (fxarithmetic-shift-right . g$7975$19h1md)
        (fxarithmetic-shift-left . g$7974$19h1md)
        (fxarithmetic-shift . g$12962$19h1md)
        (fxand . g$12961$19h1md)
        (fx>? . g$12960$19h1md)
        (fx>=? . g$12959$19h1md)
        (fx=? . g$12958$19h1md)
        (fx<? . g$12957$19h1md)
        (fx<=? . g$12956$19h1md)
        (fx-/carry . g$12955$19h1md)
        (fx- . g$12954$19h1md)
        (fx+/carry . g$12953$19h1md)
        (fx+ . g$12952$19h1md)
        (fx*/carry . g$12951$19h1md)
        (fx* . g$12950$19h1md)
        (greatest-fixnum . g$12949$19h1md)
        (least-fixnum . g$12948$19h1md)
        (fixnum-width . g$12947$19h1md)
        (fixnum? . g$12946$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13328$19h1md
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$8045$19h1md)
        (no-infinities-violation? . g$8031$19h1md)
        (make-no-nans-violation . g$8044$19h1md)
        (make-no-infinities-violation . g$8030$19h1md)
        (real->flonum . g$13029$19h1md)
        (flzero? . g$13028$19h1md)
        (fltruncate . g$13027$19h1md)
        (fltan . g$13026$19h1md)
        (flsqrt . g$13025$19h1md)
        (flsin . g$13024$19h1md)
        (flround . g$13023$19h1md)
        (flpositive? . g$13022$19h1md)
        (flonum? . g$13021$19h1md)
        (flodd? . g$13020$19h1md)
        (flnumerator . g$13019$19h1md)
        (flnegative? . g$13018$19h1md)
        (flnan? . g$13017$19h1md)
        (flmod0 . g$13016$19h1md)
        (flmod . g$13015$19h1md)
        (flmin . g$13014$19h1md)
        (flmax . g$13013$19h1md)
        (fllog . g$13012$19h1md)
        (flinteger? . g$13011$19h1md)
        (flinfinite? . g$13010$19h1md)
        (flfloor . g$13009$19h1md)
        (flfinite? . g$13008$19h1md)
        (flexpt . g$13007$19h1md)
        (flexp . g$13006$19h1md)
        (fleven? . g$13005$19h1md)
        (fldiv0-and-mod0 . g$13004$19h1md)
        (fldiv0 . g$13003$19h1md)
        (fldiv-and-mod . g$13002$19h1md)
        (fldiv . g$13001$19h1md)
        (fldenominator . g$13000$19h1md)
        (flcos . g$12999$19h1md)
        (flceiling . g$12998$19h1md)
        (flatan . g$12997$19h1md)
        (flasin . g$12996$19h1md)
        (flacos . g$12995$19h1md)
        (flabs . g$12994$19h1md)
        (fl>? . g$12993$19h1md)
        (fl>=? . g$12992$19h1md)
        (fl=? . g$12991$19h1md)
        (fl<? . g$12990$19h1md)
        (fl<=? . g$12989$19h1md)
        (fl/ . g$12988$19h1md)
        (fl- . g$12987$19h1md)
        (fl+ . g$12986$19h1md)
        (fl* . g$12985$19h1md)
        (fixnum->flonum . g$12984$19h1md)
        (&no-nans . g$12786$19h1md)
        (&no-infinities . g$12785$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13329$19h1md
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$13168$19h1md)
        (string-ci-hash . g$13167$19h1md)
        (string-hash . g$13166$19h1md)
        (equal-hash . g$13165$19h1md)
        (hashtable-equivalence-function . g$13164$19h1md)
        (make-hashtable . g$13163$19h1md)
        (hashtable-hash-function . g$13162$19h1md)
        (make-eqv-hashtable . g$7113$19h1md)
        (make-eq-hashtable . g$7112$19h1md)
        (hashtable? . g$13161$19h1md)
        (hashtable-update! . g$7119$19h1md)
        (hashtable-size . g$7114$19h1md)
        (hashtable-set! . g$7116$19h1md)
        (hashtable-ref . g$7115$19h1md)
        (hashtable-mutable? . g$13160$19h1md)
        (hashtable-keys . g$13159$19h1md)
        (hashtable-entries . g$13158$19h1md)
        (hashtable-delete! . g$7117$19h1md)
        (hashtable-copy . g$13157$19h1md)
        (hashtable-contains? . g$7118$19h1md)
        (hashtable-clear! . g$7120$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13330$19h1md
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$13145$19h1md)
        (eof-object . g$13144$19h1md)
        (current-error-port . g$13143$19h1md)
        (current-output-port . g$13142$19h1md)
        (current-input-port . g$13141$19h1md)
        (output-port? . g$13140$19h1md)
        (input-port? . g$13139$19h1md)
        (utf-8-codec . g$13138$19h1md)
        (utf-16-codec . g$13137$19h1md)
        (transcoder-error-handling-mode . g$13136$19h1md)
        (transcoder-eol-style . g$13135$19h1md)
        (transcoder-codec . g$13134$19h1md)
        (transcoded-port . g$13133$19h1md)
        (textual-port? . g$13132$19h1md)
        (string->bytevector . g$13131$19h1md)
        (standard-output-port . g$13130$19h1md)
        (standard-input-port . g$13129$19h1md)
        (standard-error-port . g$13128$19h1md)
        (set-port-position! . g$13127$19h1md)
        (put-u8 . g$13126$19h1md)
        (put-string . g$13125$19h1md)
        (put-datum . g$13124$19h1md)
        (put-char . g$13123$19h1md)
        (put-bytevector . g$13122$19h1md)
        (port? . g$8231$19h1md)
        (port-transcoder . g$13121$19h1md)
        (port-position . g$13120$19h1md)
        (port-has-set-port-position!? . g$13119$19h1md)
        (port-has-port-position? . g$13118$19h1md)
        (port-eof? . g$13117$19h1md)
        (output-port-buffer-mode . g$13116$19h1md)
        (open-string-output-port . g$8230$19h1md)
        (open-string-input-port . g$13115$19h1md)
        (open-file-output-port . g$13114$19h1md)
        (open-file-input/output-port . g$13113$19h1md)
        (open-file-input-port . g$13112$19h1md)
        (open-bytevector-output-port . g$13111$19h1md)
        (open-bytevector-input-port . g$13110$19h1md)
        (native-transcoder . g$13109$19h1md)
        (native-eol-style . g$13108$19h1md)
        (make-transcoder . g$13107$19h1md)
        (latin-1-codec . g$13106$19h1md)
        (make-i/o-write-error . g$8087$19h1md)
        (make-i/o-read-error . g$8073$19h1md)
        (make-i/o-port-error . g$8192$19h1md)
        (make-i/o-invalid-position-error . g$8102$19h1md)
        (make-i/o-filename-error . g$8119$19h1md)
        (make-i/o-file-protection-error . g$8135$19h1md)
        (make-i/o-file-is-read-only-error . g$8149$19h1md)
        (make-i/o-file-does-not-exist-error . g$8177$19h1md)
        (make-i/o-file-already-exists-error . g$8163$19h1md)
        (make-i/o-error . g$8059$19h1md)
        (make-i/o-encoding-error . g$8223$19h1md)
        (make-i/o-decoding-error . g$8208$19h1md)
        (make-custom-textual-output-port . g$13105$19h1md)
        (make-custom-textual-input/output-port . g$13104$19h1md)
        (make-custom-textual-input-port . g$13103$19h1md)
        (make-custom-binary-output-port . g$13102$19h1md)
        (make-custom-binary-input/output-port . g$13101$19h1md)
        (make-custom-binary-input-port . g$13100$19h1md)
        (lookahead-u8 . g$13098$19h1md)
        (lookahead-char . g$13097$19h1md)
        (i/o-write-error? . g$8088$19h1md)
        (i/o-read-error? . g$8074$19h1md)
        (i/o-port-error? . g$8194$19h1md)
        (i/o-invalid-position-error? . g$8104$19h1md)
        (i/o-error-position . g$8105$19h1md)
        (i/o-filename-error? . g$8121$19h1md)
        (i/o-file-protection-error? . g$8136$19h1md)
        (i/o-file-is-read-only-error? . g$8150$19h1md)
        (i/o-file-does-not-exist-error? . g$8178$19h1md)
        (i/o-file-already-exists-error? . g$8164$19h1md)
        (i/o-error? . g$8060$19h1md)
        (i/o-error-port . g$8195$19h1md)
        (i/o-error-filename . g$8122$19h1md)
        (i/o-encoding-error? . g$8225$19h1md)
        (i/o-encoding-error-char . g$8226$19h1md)
        (i/o-decoding-error? . g$8209$19h1md)
        (get-u8 . g$13096$19h1md)
        (get-string-n! . g$13095$19h1md)
        (get-string-n . g$13094$19h1md)
        (get-string-all . g$13093$19h1md)
        (get-line . g$13092$19h1md)
        (get-datum . g$13091$19h1md)
        (get-char . g$13090$19h1md)
        (get-bytevector-some . g$13089$19h1md)
        (get-bytevector-n! . g$13088$19h1md)
        (get-bytevector-n . g$13087$19h1md)
        (get-bytevector-all . g$13086$19h1md)
        (flush-output-port . g$13085$19h1md)
        (close-port . g$13084$19h1md)
        (call-with-string-output-port . g$13083$19h1md)
        (call-with-port . g$13082$19h1md)
        (call-with-bytevector-output-port . g$13081$19h1md)
        (bytevector->string . g$13080$19h1md)
        (buffer-mode? . g$13079$19h1md)
        (binary-port? . g$13078$19h1md)
        (&i/o-encoding . g$12784$19h1md)
        (&i/o-decoding . g$12783$19h1md)
        (&i/o-port . g$12782$19h1md)
        (&i/o-file-does-not-exist . g$12781$19h1md)
        (&i/o-file-already-exists . g$12780$19h1md)
        (&i/o-file-is-read-only . g$12779$19h1md)
        (&i/o-file-protection . g$12778$19h1md)
        (&i/o-filename . g$12777$19h1md)
        (&i/o-invalid-position . g$12776$19h1md)
        (&i/o-write . g$12775$19h1md)
        (&i/o-read . g$12774$19h1md)
        (&i/o . g$12773$19h1md)
        (error-handling-mode . g$12745$19h1md)
        (file-options . g$12744$19h1md)
        (buffer-mode . g$12743$19h1md)
        (eol-style . g$12742$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13331$19h1md
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$8312$19h1md)
        (enum-set=? . g$8319$19h1md)
        (enum-set-universe . g$8313$19h1md)
        (enum-set-union . g$8320$19h1md)
        (enum-set-subset? . g$8318$19h1md)
        (enum-set-projection . g$8324$19h1md)
        (enum-set-member? . g$8317$19h1md)
        (enum-set-intersection . g$8321$19h1md)
        (enum-set-indexer . g$8314$19h1md)
        (enum-set-difference . g$8322$19h1md)
        (enum-set-constructor . g$8315$19h1md)
        (enum-set-complement . g$8323$19h1md)
        (enum-set->list . g$8316$19h1md)
        (define-enumeration . g$12756$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13332$19h1md
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$7550$19h1md)
        (warning? . g$7461$19h1md)
        (violation? . g$7503$19h1md)
        (undefined-violation? . g$7627$19h1md)
        (syntax-violation? . g$7611$19h1md)
        (syntax-violation-subform . g$7613$19h1md)
        (syntax-violation-form . g$7612$19h1md)
        (syntax-violation . g$9709$19h1md)
        (simple-conditions . g$13064$19h1md)
        (serious-condition? . g$7475$19h1md)
        (non-continuable-violation? . g$7565$19h1md)
        (message-condition? . g$7446$19h1md)
        (make-who-condition . g$7548$19h1md)
        (make-warning . g$7460$19h1md)
        (make-violation . g$7502$19h1md)
        (make-undefined-violation . g$7626$19h1md)
        (make-syntax-violation . g$7608$19h1md)
        (make-serious-condition . g$7474$19h1md)
        (make-non-continuable-violation . g$7564$19h1md)
        (make-message-condition . g$7444$19h1md)
        (make-lexical-violation . g$7592$19h1md)
        (make-irritants-condition . g$7531$19h1md)
        (make-implementation-restriction-violation . g$7578$19h1md)
        (make-error . g$7488$19h1md)
        (make-assertion-violation . g$7516$19h1md)
        (lexical-violation? . g$7593$19h1md)
        (irritants-condition? . g$7533$19h1md)
        (implementation-restriction-violation? . g$7579$19h1md)
        (error? . g$7489$19h1md)
        (condition-who . g$7551$19h1md)
        (condition-predicate . g$13063$19h1md)
        (condition-message . g$7447$19h1md)
        (condition-irritants . g$7534$19h1md)
        (condition-accessor . g$13062$19h1md)
        (condition . g$13061$19h1md)
        (assertion-violation? . g$7517$19h1md)
        (condition? . g$13060$19h1md)
        (&non-continuable . g$12772$19h1md)
        (&undefined . g$12771$19h1md)
        (&syntax . g$12770$19h1md)
        (&lexical . g$12769$19h1md)
        (&implementation-restriction . g$12768$19h1md)
        (&who . g$12766$19h1md)
        (&irritants . g$12765$19h1md)
        (&assertion . g$12764$19h1md)
        (&violation . g$12763$19h1md)
        (&error . g$12762$19h1md)
        (&serious . g$12761$19h1md)
        (&warning . g$12760$19h1md)
        (&message . g$12759$19h1md)
        (&condition . g$12758$19h1md)
        (define-condition-type . g$12757$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13333$19h1md
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$13180$19h1md)
        (record-type-uid . g$13179$19h1md)
        (record-type-sealed? . g$13178$19h1md)
        (record-type-parent . g$13177$19h1md)
        (record-type-opaque? . g$13176$19h1md)
        (record-type-name . g$13175$19h1md)
        (record-type-generative? . g$13174$19h1md)
        (record-type-field-names . g$13173$19h1md)
        (record-rtd . g$13172$19h1md)
        (record-field-mutable? . g$13171$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13334$19h1md
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$13187$19h1md)
        (record-predicate . g$13186$19h1md)
        (record-mutator . g$13185$19h1md)
        (record-constructor . g$13184$19h1md)
        (record-accessor . g$13183$19h1md)
        (make-record-type-descriptor . g$13182$19h1md)
        (make-record-constructor-descriptor . g$13181$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13335$19h1md
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$12755$19h1md)
        (parent-rtd . g$12754$19h1md)
        (nongenerative . g$12753$19h1md)
        (opaque . g$12752$19h1md)
        (sealed . g$12751$19h1md)
        (protocol . g$12750$19h1md)
        (parent . g$12749$19h1md)
        (immutable . g$12748$19h1md)
        (mutable . g$12747$19h1md)
        (fields . g$12746$19h1md)
        (record-constructor-descriptor . g$12707$19h1md)
        (record-type-descriptor . g$12706$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7487$19h1md
      'g$13336$19h1md
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$9584$19h1md)
        (&no-nans-rcd . g$13300$19h1md)
        (&no-nans-rtd . g$13299$19h1md)
        (&no-infinities-rcd . g$13298$19h1md)
        (&no-infinities-rtd . g$13297$19h1md)
        (&i/o-encoding-rcd . g$13296$19h1md)
        (&i/o-encoding-rtd . g$13295$19h1md)
        (&i/o-decoding-rcd . g$13294$19h1md)
        (&i/o-decoding-rtd . g$13293$19h1md)
        (&i/o-port-rcd . g$13292$19h1md)
        (&i/o-port-rtd . g$13291$19h1md)
        (&i/o-file-does-not-exist-rcd . g$13290$19h1md)
        (&i/o-file-does-not-exist-rtd . g$13289$19h1md)
        (&i/o-file-already-exists-rcd . g$13288$19h1md)
        (&i/o-file-already-exists-rtd . g$13287$19h1md)
        (&i/o-file-is-read-only-rcd . g$13286$19h1md)
        (&i/o-file-is-read-only-rtd . g$13285$19h1md)
        (&i/o-file-protection-rcd . g$13284$19h1md)
        (&i/o-file-protection-rtd . g$13283$19h1md)
        (&i/o-filename-rcd . g$13282$19h1md)
        (&i/o-filename-rtd . g$13281$19h1md)
        (&i/o-invalid-position-rcd . g$13280$19h1md)
        (&i/o-invalid-position-rtd . g$13279$19h1md)
        (&i/o-write-rcd . g$13278$19h1md)
        (&i/o-write-rtd . g$13277$19h1md)
        (&i/o-read-rcd . g$13276$19h1md)
        (&i/o-read-rtd . g$13275$19h1md)
        (&i/o-rcd . g$13274$19h1md)
        (&i/o-rtd . g$13273$19h1md)
        (&undefined-rcd . g$13272$19h1md)
        (&undefined-rtd . g$13271$19h1md)
        (&syntax-rcd . g$13270$19h1md)
        (&syntax-rtd . g$13269$19h1md)
        (&lexical-rcd . g$13268$19h1md)
        (&lexical-rtd . g$13267$19h1md)
        (&implementation-restriction-rcd . g$13266$19h1md)
        (&implementation-restriction-rtd . g$13265$19h1md)
        (&non-continuable-rcd . g$13264$19h1md)
        (&non-continuable-rtd . g$13263$19h1md)
        (&who-rcd . g$13262$19h1md)
        (&who-rtd . g$13261$19h1md)
        (&irritants-rcd . g$13260$19h1md)
        (&irritants-rtd . g$13259$19h1md)
        (&assertion-rcd . g$13258$19h1md)
        (&assertion-rtd . g$13257$19h1md)
        (&violation-rcd . g$13256$19h1md)
        (&violation-rtd . g$13255$19h1md)
        (&error-rcd . g$13254$19h1md)
        (&error-rtd . g$13253$19h1md)
        (&serious-rcd . g$13252$19h1md)
        (&serious-rtd . g$13251$19h1md)
        (&warning-rcd . g$13250$19h1md)
        (&warning-rtd . g$13249$19h1md)
        (&message-rcd . g$13248$19h1md)
        (&message-rtd . g$13247$19h1md)
        (&condition-rcd . g$13246$19h1md)
        (&condition-rtd . g$13245$19h1md)
        (library-letrec* . g$13244$19h1md)
        (annotation-stripped . g$13243$19h1md)
        (annotation-source . g$13242$19h1md)
        (annotation-expression . g$13241$19h1md)
        (annotation? . g$13240$19h1md)
        (read-annotated . g$13239$19h1md)
        (tanh . g$13238$19h1md)
        (cosh . g$13237$19h1md)
        (sinh . g$13236$19h1md)
        (make-guid . g$13235$19h1md)
        (unspecified? . g$13234$19h1md)
        (make-trace . g$13233$19h1md)
        (make-list . g$13232$19h1md)
        (last-pair . g$13231$19h1md)
        (load-r5rs . g$13230$19h1md)
        (license . g$13229$19h1md)
        (stacktrace . g$13228$19h1md)
        (ironscheme-build . g$12650$19h1md)
        (define-clr-class-internal . g$13227$19h1md)
        (clr-field-set!-internal . g$13226$19h1md)
        (clr-field-get-internal . g$13225$19h1md)
        (clr-cast-internal . g$13224$19h1md)
        (clr-call-internal . g$13223$19h1md)
        (clr-new-internal . g$13222$19h1md)
        (clr-new-array-internal . g$13221$19h1md)
        (clr-is-internal . g$13220$19h1md)
        (clr-reference-internal . g$13219$19h1md)
        (clr-using-internal . g$13218$19h1md)
        (clr-clear-usings-internal . g$13217$19h1md)
        (syntax-error . g$9706$19h1md)
        (syntax-dispatch . g$9579$19h1md)
        (compile-core . g$13216$19h1md)
        (eval-core . g$13215$19h1md)
        (set-symbol-value! . g$13214$19h1md)
        (symbol-value . g$13213$19h1md)
        (ungensym . g$13212$19h1md)
        (gensym . g$13211$19h1md)
        (void . g$13210$19h1md)
        (load-serialized-library . g$13209$19h1md)
        (serialize-library . g$13208$19h1md)
        (compile-system-libraries . g$12652$19h1md)
        (compile->closure . g$12654$19h1md)
        (compile . g$12653$19h1md)
        (load . g$12649$19h1md)
        (interaction-environment . g$9715$19h1md)
        (char-ready? . g$13207$19h1md)
        (string-upcase . g$13206$19h1md)
        (string-titlecase . g$13205$19h1md)
        (string-normalize-nfkd . g$13204$19h1md)
        (string-normalize-nfkc . g$13203$19h1md)
        (string-normalize-nfd . g$13202$19h1md)
        (string-normalize-nfc . g$13201$19h1md)
        (string-foldcase . g$13200$19h1md)
        (string-downcase . g$13199$19h1md)
        (string-ci>? . g$7785$19h1md)
        (string-ci>=? . g$7787$19h1md)
        (string-ci=? . g$7783$19h1md)
        (string-ci<? . g$7784$19h1md)
        (string-ci<=? . g$7786$19h1md)
        (char-whitespace? . g$13198$19h1md)
        (char-upper-case? . g$13197$19h1md)
        (char-title-case? . g$13196$19h1md)
        (char-numeric? . g$13195$19h1md)
        (char-lower-case? . g$13194$19h1md)
        (char-general-category . g$13193$19h1md)
        (char-upcase . g$13192$19h1md)
        (char-titlecase . g$13191$19h1md)
        (char-foldcase . g$13190$19h1md)
        (char-downcase . g$13189$19h1md)
        (char-ci>? . g$7836$19h1md)
        (char-ci>=? . g$7838$19h1md)
        (char-ci=? . g$7834$19h1md)
        (char-ci<? . g$7835$19h1md)
        (char-ci<=? . g$7837$19h1md)
        (char-alphabetic? . g$13188$19h1md)
        (variable-transformer-procedure . g$9316$19h1md)
        (variable-transformer? . g$9315$19h1md)
        (make-variable-transformer . g$9314$19h1md)
        (identifier? . g$9710$19h1md)
        (generate-temporaries . g$9699$19h1md)
        (free-identifier=? . g$9700$19h1md)
        (syntax->datum . g$9712$19h1md)
        (datum->syntax . g$9711$19h1md)
        (bound-identifier=? . g$9701$19h1md)
        (record-type-descriptor? . g$13187$19h1md)
        (record-predicate . g$13186$19h1md)
        (record-mutator . g$13185$19h1md)
        (record-constructor . g$13184$19h1md)
        (record-accessor . g$13183$19h1md)
        (make-record-type-descriptor . g$13182$19h1md)
        (make-record-constructor-descriptor . g$13181$19h1md)
        (record? . g$13180$19h1md)
        (record-type-uid . g$13179$19h1md)
        (record-type-sealed? . g$13178$19h1md)
        (record-type-parent . g$13177$19h1md)
        (record-type-opaque? . g$13176$19h1md)
        (record-type-name . g$13175$19h1md)
        (record-type-generative? . g$13174$19h1md)
        (record-type-field-names . g$13173$19h1md)
        (record-rtd . g$13172$19h1md)
        (record-field-mutable? . g$13171$19h1md)
        (delete-file . g$7146$19h1md)
        (file-exists? . g$7145$19h1md)
        (vector-sort! . g$13170$19h1md)
        (vector-sort . g$13169$19h1md)
        (list-sort . g$7659$19h1md)
        (symbol-hash . g$13168$19h1md)
        (string-ci-hash . g$13167$19h1md)
        (string-hash . g$13166$19h1md)
        (equal-hash . g$13165$19h1md)
        (hashtable-equivalence-function . g$13164$19h1md)
        (make-hashtable . g$13163$19h1md)
        (hashtable-hash-function . g$13162$19h1md)
        (make-eqv-hashtable . g$7113$19h1md)
        (make-eq-hashtable . g$7112$19h1md)
        (hashtable? . g$13161$19h1md)
        (hashtable-update! . g$7119$19h1md)
        (hashtable-size . g$7114$19h1md)
        (hashtable-set! . g$7116$19h1md)
        (hashtable-ref . g$7115$19h1md)
        (hashtable-mutable? . g$13160$19h1md)
        (hashtable-keys . g$13159$19h1md)
        (hashtable-entries . g$13158$19h1md)
        (hashtable-delete! . g$7117$19h1md)
        (hashtable-copy . g$13157$19h1md)
        (hashtable-contains? . g$7118$19h1md)
        (hashtable-clear! . g$7120$19h1md)
        (call-with-output-file . g$8255$19h1md)
        (call-with-input-file . g$8254$19h1md)
        (write-char . g$13156$19h1md)
        (write . g$13155$19h1md)
        (with-output-to-file . g$8253$19h1md)
        (with-input-from-file . g$8252$19h1md)
        (read-char . g$13154$19h1md)
        (read . g$13153$19h1md)
        (peek-char . g$13152$19h1md)
        (open-output-file . g$13151$19h1md)
        (open-input-file . g$13150$19h1md)
        (newline . g$13149$19h1md)
        (display . g$13148$19h1md)
        (close-output-port . g$13147$19h1md)
        (close-input-port . g$13146$19h1md)
        (eof-object? . g$13145$19h1md)
        (eof-object . g$13144$19h1md)
        (current-error-port . g$13143$19h1md)
        (current-output-port . g$13142$19h1md)
        (current-input-port . g$13141$19h1md)
        (output-port? . g$13140$19h1md)
        (input-port? . g$13139$19h1md)
        (utf-8-codec . g$13138$19h1md)
        (utf-16-codec . g$13137$19h1md)
        (transcoder-error-handling-mode . g$13136$19h1md)
        (transcoder-eol-style . g$13135$19h1md)
        (transcoder-codec . g$13134$19h1md)
        (transcoded-port . g$13133$19h1md)
        (textual-port? . g$13132$19h1md)
        (string->bytevector . g$13131$19h1md)
        (standard-output-port . g$13130$19h1md)
        (standard-input-port . g$13129$19h1md)
        (standard-error-port . g$13128$19h1md)
        (set-port-position! . g$13127$19h1md)
        (put-u8 . g$13126$19h1md)
        (put-string . g$13125$19h1md)
        (put-datum . g$13124$19h1md)
        (put-char . g$13123$19h1md)
        (put-bytevector . g$13122$19h1md)
        (port? . g$8231$19h1md)
        (port-transcoder . g$13121$19h1md)
        (port-position . g$13120$19h1md)
        (port-has-set-port-position!? . g$13119$19h1md)
        (port-has-port-position? . g$13118$19h1md)
        (port-eof? . g$13117$19h1md)
        (output-port-buffer-mode . g$13116$19h1md)
        (open-string-output-port . g$8230$19h1md)
        (open-string-input-port . g$13115$19h1md)
        (open-file-output-port . g$13114$19h1md)
        (open-file-input/output-port . g$13113$19h1md)
        (open-file-input-port . g$13112$19h1md)
        (open-bytevector-output-port . g$13111$19h1md)
        (open-bytevector-input-port . g$13110$19h1md)
        (native-transcoder . g$13109$19h1md)
        (native-eol-style . g$13108$19h1md)
        (make-transcoder . g$13107$19h1md)
        (latin-1-codec . g$13106$19h1md)
        (make-i/o-write-error . g$8087$19h1md)
        (make-i/o-read-error . g$8073$19h1md)
        (make-i/o-port-error . g$8192$19h1md)
        (make-i/o-invalid-position-error . g$8102$19h1md)
        (make-i/o-filename-error . g$8119$19h1md)
        (make-i/o-file-protection-error . g$8135$19h1md)
        (make-i/o-file-is-read-only-error . g$8149$19h1md)
        (make-i/o-file-does-not-exist-error . g$8177$19h1md)
        (make-i/o-file-already-exists-error . g$8163$19h1md)
        (make-i/o-error . g$8059$19h1md)
        (make-i/o-encoding-error . g$8223$19h1md)
        (make-i/o-decoding-error . g$8208$19h1md)
        (make-custom-textual-output-port . g$13105$19h1md)
        (make-custom-textual-input/output-port . g$13104$19h1md)
        (make-custom-textual-input-port . g$13103$19h1md)
        (make-custom-binary-output-port . g$13102$19h1md)
        (make-custom-binary-input/output-port . g$13101$19h1md)
        (make-custom-binary-input-port . g$13100$19h1md)
        (make-bytevector . g$13099$19h1md)
        (lookahead-u8 . g$13098$19h1md)
        (lookahead-char . g$13097$19h1md)
        (i/o-write-error? . g$8088$19h1md)
        (i/o-read-error? . g$8074$19h1md)
        (i/o-port-error? . g$8194$19h1md)
        (i/o-invalid-position-error? . g$8104$19h1md)
        (i/o-error-position . g$8105$19h1md)
        (i/o-filename-error? . g$8121$19h1md)
        (i/o-file-protection-error? . g$8136$19h1md)
        (i/o-file-is-read-only-error? . g$8150$19h1md)
        (i/o-file-does-not-exist-error? . g$8178$19h1md)
        (i/o-file-already-exists-error? . g$8164$19h1md)
        (i/o-error? . g$8060$19h1md)
        (i/o-error-port . g$8195$19h1md)
        (i/o-error-filename . g$8122$19h1md)
        (i/o-encoding-error? . g$8225$19h1md)
        (i/o-encoding-error-char . g$8226$19h1md)
        (i/o-decoding-error? . g$8209$19h1md)
        (get-u8 . g$13096$19h1md)
        (get-string-n! . g$13095$19h1md)
        (get-string-n . g$13094$19h1md)
        (get-string-all . g$13093$19h1md)
        (get-line . g$13092$19h1md)
        (get-datum . g$13091$19h1md)
        (get-char . g$13090$19h1md)
        (get-bytevector-some . g$13089$19h1md)
        (get-bytevector-n! . g$13088$19h1md)
        (get-bytevector-n . g$13087$19h1md)
        (get-bytevector-all . g$13086$19h1md)
        (flush-output-port . g$13085$19h1md)
        (close-port . g$13084$19h1md)
        (call-with-string-output-port . g$13083$19h1md)
        (call-with-port . g$13082$19h1md)
        (call-with-bytevector-output-port . g$13081$19h1md)
        (bytevector->string . g$13080$19h1md)
        (buffer-mode? . g$13079$19h1md)
        (binary-port? . g$13078$19h1md)
        (scheme-report-environment . g$9690$19h1md)
        (quotient . g$7639$19h1md)
        (null-environment . g$9689$19h1md)
        (remainder . g$7640$19h1md)
        (modulo . g$7641$19h1md)
        (inexact->exact . g$13077$19h1md)
        (force . g$7643$19h1md)
        (exact->inexact . g$13076$19h1md)
        (exit . g$13075$19h1md)
        (command-line . g$12646$19h1md)
        (string-fill! . g$13074$19h1md)
        (string-set! . g$13073$19h1md)
        (set-cdr! . g$13072$19h1md)
        (set-car! . g$13071$19h1md)
        (remove . g$7226$19h1md)
        (remv . g$7227$19h1md)
        (remp . g$7212$19h1md)
        (remq . g$7228$19h1md)
        (partition . g$7211$19h1md)
        (memv . g$13070$19h1md)
        (memq . g$13069$19h1md)
        (memp . g$7218$19h1md)
        (member . g$7217$19h1md)
        (exists . g$7222$19h1md)
        (for-all . g$7221$19h1md)
        (fold-right . g$7225$19h1md)
        (fold-left . g$7224$19h1md)
        (find . g$7210$19h1md)
        (filter . g$7213$19h1md)
        (cons* . g$7223$19h1md)
        (assv . g$7214$19h1md)
        (assq . g$13068$19h1md)
        (assp . g$7216$19h1md)
        (assoc . g$7215$19h1md)
        (with-exception-handler . g$13067$19h1md)
        (raise-continuable . g$13066$19h1md)
        (raise . g$13065$19h1md)
        (eval . g$9692$19h1md)
        (environment . g$9688$19h1md)
        (make-enumeration . g$8312$19h1md)
        (enum-set=? . g$8319$19h1md)
        (enum-set-universe . g$8313$19h1md)
        (enum-set-union . g$8320$19h1md)
        (enum-set-subset? . g$8318$19h1md)
        (enum-set-projection . g$8324$19h1md)
        (enum-set-member? . g$8317$19h1md)
        (enum-set-intersection . g$8321$19h1md)
        (enum-set-indexer . g$8314$19h1md)
        (enum-set-difference . g$8322$19h1md)
        (enum-set-constructor . g$8315$19h1md)
        (enum-set-complement . g$8323$19h1md)
        (enum-set->list . g$8316$19h1md)
        (who-condition? . g$7550$19h1md)
        (warning? . g$7461$19h1md)
        (violation? . g$7503$19h1md)
        (undefined-violation? . g$7627$19h1md)
        (syntax-violation? . g$7611$19h1md)
        (syntax-violation-subform . g$7613$19h1md)
        (syntax-violation-form . g$7612$19h1md)
        (syntax-violation . g$9709$19h1md)
        (simple-conditions . g$13064$19h1md)
        (serious-condition? . g$7475$19h1md)
        (non-continuable-violation? . g$7565$19h1md)
        (message-condition? . g$7446$19h1md)
        (make-who-condition . g$7548$19h1md)
        (make-warning . g$7460$19h1md)
        (make-violation . g$7502$19h1md)
        (make-undefined-violation . g$7626$19h1md)
        (make-syntax-violation . g$7608$19h1md)
        (make-serious-condition . g$7474$19h1md)
        (make-non-continuable-violation . g$7564$19h1md)
        (make-message-condition . g$7444$19h1md)
        (make-lexical-violation . g$7592$19h1md)
        (make-irritants-condition . g$7531$19h1md)
        (make-implementation-restriction-violation . g$7578$19h1md)
        (make-error . g$7488$19h1md)
        (make-assertion-violation . g$7516$19h1md)
        (lexical-violation? . g$7593$19h1md)
        (irritants-condition? . g$7533$19h1md)
        (implementation-restriction-violation? . g$7579$19h1md)
        (error? . g$7489$19h1md)
        (condition-who . g$7551$19h1md)
        (condition-predicate . g$13063$19h1md)
        (condition-message . g$7447$19h1md)
        (condition-irritants . g$7534$19h1md)
        (condition-accessor . g$13062$19h1md)
        (condition . g$13061$19h1md)
        (assertion-violation? . g$7517$19h1md)
        (condition? . g$13060$19h1md)
        (utf32->string . g$13059$19h1md)
        (utf16->string . g$13058$19h1md)
        (utf8->string . g$13057$19h1md)
        (uint-list->bytevector . g$13056$19h1md)
        (u8-list->bytevector . g$13055$19h1md)
        (string->utf8 . g$13054$19h1md)
        (string->utf32 . g$13053$19h1md)
        (string->utf16 . g$13052$19h1md)
        (sint-list->bytevector . g$13051$19h1md)
        (native-endianness . g$7302$19h1md)
        (bytevector? . g$13050$19h1md)
        (bytevector=? . g$13049$19h1md)
        (bytevector-uint-set! . g$13048$19h1md)
        (bytevector-uint-ref . g$13047$19h1md)
        (bytevector-u8-set! . g$13046$19h1md)
        (bytevector-u8-ref . g$13045$19h1md)
        (bytevector-u64-set! . g$7323$19h1md)
        (bytevector-u64-ref . g$7319$19h1md)
        (bytevector-u64-native-set! . g$7325$19h1md)
        (bytevector-u64-native-ref . g$7321$19h1md)
        (bytevector-u32-set! . g$7315$19h1md)
        (bytevector-u32-ref . g$7311$19h1md)
        (bytevector-u32-native-set! . g$7317$19h1md)
        (bytevector-u32-native-ref . g$7313$19h1md)
        (bytevector-u16-set! . g$7307$19h1md)
        (bytevector-u16-ref . g$7303$19h1md)
        (bytevector-u16-native-set! . g$7309$19h1md)
        (bytevector-u16-native-ref . g$7305$19h1md)
        (bytevector-sint-set! . g$13044$19h1md)
        (bytevector-sint-ref . g$13043$19h1md)
        (bytevector-s8-set! . g$13042$19h1md)
        (bytevector-s8-ref . g$13041$19h1md)
        (bytevector-s64-set! . g$7324$19h1md)
        (bytevector-s64-ref . g$7320$19h1md)
        (bytevector-s64-native-set! . g$7326$19h1md)
        (bytevector-s64-native-ref . g$7322$19h1md)
        (bytevector-s32-set! . g$7316$19h1md)
        (bytevector-s32-ref . g$7312$19h1md)
        (bytevector-s32-native-set! . g$7318$19h1md)
        (bytevector-s32-native-ref . g$7314$19h1md)
        (bytevector-s16-set! . g$7308$19h1md)
        (bytevector-s16-ref . g$7304$19h1md)
        (bytevector-s16-native-set! . g$7310$19h1md)
        (bytevector-s16-native-ref . g$7306$19h1md)
        (bytevector-length . g$13040$19h1md)
        (bytevector-ieee-single-set! . g$13039$19h1md)
        (bytevector-ieee-single-ref . g$13038$19h1md)
        (bytevector-ieee-single-native-set! . g$7329$19h1md)
        (bytevector-ieee-single-native-ref . g$7327$19h1md)
        (bytevector-ieee-double-set! . g$13037$19h1md)
        (bytevector-ieee-double-ref . g$13036$19h1md)
        (bytevector-ieee-double-native-set! . g$7330$19h1md)
        (bytevector-ieee-double-native-ref . g$7328$19h1md)
        (bytevector-fill! . g$13035$19h1md)
        (bytevector-copy! . g$13034$19h1md)
        (bytevector-copy . g$13033$19h1md)
        (bytevector->uint-list . g$13032$19h1md)
        (bytevector->u8-list . g$13031$19h1md)
        (bytevector->sint-list . g$13030$19h1md)
        (no-nans-violation? . g$8045$19h1md)
        (no-infinities-violation? . g$8031$19h1md)
        (make-no-nans-violation . g$8044$19h1md)
        (make-no-infinities-violation . g$8030$19h1md)
        (real->flonum . g$13029$19h1md)
        (flzero? . g$13028$19h1md)
        (fltruncate . g$13027$19h1md)
        (fltan . g$13026$19h1md)
        (flsqrt . g$13025$19h1md)
        (flsin . g$13024$19h1md)
        (flround . g$13023$19h1md)
        (flpositive? . g$13022$19h1md)
        (flonum? . g$13021$19h1md)
        (flodd? . g$13020$19h1md)
        (flnumerator . g$13019$19h1md)
        (flnegative? . g$13018$19h1md)
        (flnan? . g$13017$19h1md)
        (flmod0 . g$13016$19h1md)
        (flmod . g$13015$19h1md)
        (flmin . g$13014$19h1md)
        (flmax . g$13013$19h1md)
        (fllog . g$13012$19h1md)
        (flinteger? . g$13011$19h1md)
        (flinfinite? . g$13010$19h1md)
        (flfloor . g$13009$19h1md)
        (flfinite? . g$13008$19h1md)
        (flexpt . g$13007$19h1md)
        (flexp . g$13006$19h1md)
        (fleven? . g$13005$19h1md)
        (fldiv0-and-mod0 . g$13004$19h1md)
        (fldiv0 . g$13003$19h1md)
        (fldiv-and-mod . g$13002$19h1md)
        (fldiv . g$13001$19h1md)
        (fldenominator . g$13000$19h1md)
        (flcos . g$12999$19h1md)
        (flceiling . g$12998$19h1md)
        (flatan . g$12997$19h1md)
        (flasin . g$12996$19h1md)
        (flacos . g$12995$19h1md)
        (flabs . g$12994$19h1md)
        (fl>? . g$12993$19h1md)
        (fl>=? . g$12992$19h1md)
        (fl=? . g$12991$19h1md)
        (fl<? . g$12990$19h1md)
        (fl<=? . g$12989$19h1md)
        (fl/ . g$12988$19h1md)
        (fl- . g$12987$19h1md)
        (fl+ . g$12986$19h1md)
        (fl* . g$12985$19h1md)
        (fixnum->flonum . g$12984$19h1md)
        (fxzero? . g$12983$19h1md)
        (fxxor . g$12982$19h1md)
        (fxrotate-bit-field . g$7976$19h1md)
        (fxreverse-bit-field . g$12981$19h1md)
        (fxpositive? . g$12980$19h1md)
        (fxodd? . g$12979$19h1md)
        (fxnot . g$12978$19h1md)
        (fxnegative? . g$12977$19h1md)
        (fxmod0 . g$12976$19h1md)
        (fxmod . g$12975$19h1md)
        (fxmin . g$12974$19h1md)
        (fxmax . g$12973$19h1md)
        (fxlength . g$12972$19h1md)
        (fxior . g$12971$19h1md)
        (fxif . g$7970$19h1md)
        (fxfirst-bit-set . g$12970$19h1md)
        (fxeven? . g$12969$19h1md)
        (fxdiv0-and-mod0 . g$12968$19h1md)
        (fxdiv0 . g$12967$19h1md)
        (fxdiv-and-mod . g$12966$19h1md)
        (fxdiv . g$12965$19h1md)
        (fxcopy-bit-field . g$7973$19h1md)
        (fxcopy-bit . g$7971$19h1md)
        (fxbit-set? . g$12964$19h1md)
        (fxbit-field . g$7972$19h1md)
        (fxbit-count . g$12963$19h1md)
        (fxarithmetic-shift-right . g$7975$19h1md)
        (fxarithmetic-shift-left . g$7974$19h1md)
        (fxarithmetic-shift . g$12962$19h1md)
        (fxand . g$12961$19h1md)
        (fx>? . g$12960$19h1md)
        (fx>=? . g$12959$19h1md)
        (fx=? . g$12958$19h1md)
        (fx<? . g$12957$19h1md)
        (fx<=? . g$12956$19h1md)
        (fx-/carry . g$12955$19h1md)
        (fx- . g$12954$19h1md)
        (fx+/carry . g$12953$19h1md)
        (fx+ . g$12952$19h1md)
        (fx*/carry . g$12951$19h1md)
        (fx* . g$12950$19h1md)
        (greatest-fixnum . g$12949$19h1md)
        (least-fixnum . g$12948$19h1md)
        (fixnum-width . g$12947$19h1md)
        (fixnum? . g$12946$19h1md)
        (bitwise-rotate-bit-field . g$7928$19h1md)
        (bitwise-reverse-bit-field . g$12945$19h1md)
        (bitwise-length . g$12944$19h1md)
        (bitwise-if . g$7922$19h1md)
        (bitwise-first-bit-set . g$12943$19h1md)
        (bitwise-copy-bit-field . g$7925$19h1md)
        (bitwise-copy-bit . g$7923$19h1md)
        (bitwise-bit-set? . g$12942$19h1md)
        (bitwise-bit-field . g$12941$19h1md)
        (bitwise-bit-count . g$12940$19h1md)
        (bitwise-xor . g$12939$19h1md)
        (bitwise-ior . g$12938$19h1md)
        (bitwise-and . g$12937$19h1md)
        (bitwise-not . g$12936$19h1md)
        (bitwise-arithmetic-shift-right . g$7927$19h1md)
        (bitwise-arithmetic-shift-left . g$7926$19h1md)
        (bitwise-arithmetic-shift . g$12935$19h1md)
        (zero? . g$12934$19h1md)
        (vector? . g$12933$19h1md)
        (vector-set! . g$12932$19h1md)
        (vector-ref . g$12931$19h1md)
        (vector-map . g$12930$19h1md)
        (vector-length . g$12929$19h1md)
        (vector-for-each . g$12928$19h1md)
        (vector-fill! . g$12927$19h1md)
        (vector->list . g$12926$19h1md)
        (vector . g$12925$19h1md)
        (values . g$12924$19h1md)
        (truncate . g$12923$19h1md)
        (tan . g$12922$19h1md)
        (symbol? . g$12921$19h1md)
        (symbol=? . g$6611$19h1md)
        (symbol->string . g$12920$19h1md)
        (substring . g$12919$19h1md)
        (string? . g$12918$19h1md)
        (string>? . g$6608$19h1md)
        (string>=? . g$6610$19h1md)
        (string=? . g$6606$19h1md)
        (string<? . g$6607$19h1md)
        (string<=? . g$6609$19h1md)
        (string-ref . g$12917$19h1md)
        (string-length . g$12916$19h1md)
        (string-for-each . g$12915$19h1md)
        (string-copy . g$12914$19h1md)
        (string-append . g$12913$19h1md)
        (string->symbol . g$12912$19h1md)
        (string->number . g$12911$19h1md)
        (string->list . g$12910$19h1md)
        (string . g$12909$19h1md)
        (sqrt . g$12908$19h1md)
        (sin . g$12907$19h1md)
        (round . g$12906$19h1md)
        (reverse . g$12905$19h1md)
        (real? . g$12904$19h1md)
        (real-valued? . g$12903$19h1md)
        (real-part . g$12902$19h1md)
        (rationalize . g$6664$19h1md)
        (rational? . g$12901$19h1md)
        (rational-valued? . g$12900$19h1md)
        (procedure? . g$12899$19h1md)
        (positive? . g$12898$19h1md)
        (pair? . g$12897$19h1md)
        (odd? . g$12896$19h1md)
        (numerator . g$12895$19h1md)
        (number? . g$12894$19h1md)
        (number->string . g$12893$19h1md)
        (null? . g$12892$19h1md)
        (not . g$12891$19h1md)
        (negative? . g$12890$19h1md)
        (nan? . g$12889$19h1md)
        (min . g$12888$19h1md)
        (max . g$12887$19h1md)
        (map . g$12886$19h1md)
        (make-vector . g$12885$19h1md)
        (make-string . g$12884$19h1md)
        (make-rectangular . g$12883$19h1md)
        (make-polar . g$12882$19h1md)
        (magnitude . g$12881$19h1md)
        (log . g$12880$19h1md)
        (list? . g$12879$19h1md)
        (list-tail . g$12878$19h1md)
        (list-ref . g$12877$19h1md)
        (list->vector . g$12876$19h1md)
        (list->string . g$12875$19h1md)
        (list . g$12874$19h1md)
        (length . g$12873$19h1md)
        (lcm . g$12872$19h1md)
        (integer? . g$12871$19h1md)
        (integer-valued? . g$12870$19h1md)
        (integer->char . g$12869$19h1md)
        (infinite? . g$12868$19h1md)
        (inexact? . g$12867$19h1md)
        (inexact . g$12866$19h1md)
        (imag-part . g$12865$19h1md)
        (gcd . g$12864$19h1md)
        (for-each . g$12863$19h1md)
        (floor . g$12862$19h1md)
        (finite? . g$12861$19h1md)
        (expt . g$12860$19h1md)
        (exp . g$12859$19h1md)
        (exact? . g$12858$19h1md)
        (exact-integer-sqrt . g$12857$19h1md)
        (exact . g$12856$19h1md)
        (even? . g$12855$19h1md)
        (error . g$12854$19h1md)
        (eqv? . g$12853$19h1md)
        (equal? . g$12852$19h1md)
        (eq? . g$12851$19h1md)
        (dynamic-wind . g$12850$19h1md)
        (div0-and-mod0 . g$12849$19h1md)
        (mod0 . g$12848$19h1md)
        (div0 . g$12847$19h1md)
        (div-and-mod . g$12846$19h1md)
        (mod . g$12845$19h1md)
        (div . g$12844$19h1md)
        (denominator . g$12843$19h1md)
        (cos . g$12842$19h1md)
        (cons . g$12841$19h1md)
        (complex? . g$12840$19h1md)
        (char? . g$12839$19h1md)
        (char>? . g$6661$19h1md)
        (char>=? . g$6663$19h1md)
        (char=? . g$6659$19h1md)
        (char<? . g$6660$19h1md)
        (char<=? . g$6662$19h1md)
        (char->integer . g$12838$19h1md)
        (ceiling . g$12837$19h1md)
        (call-with-values . g$12836$19h1md)
        (call/cc . g$12835$19h1md)
        (call-with-current-continuation . g$12834$19h1md)
        (cddddr . g$6559$19h1md)
        (cdddar . g$6558$19h1md)
        (cddadr . g$6557$19h1md)
        (cddaar . g$6556$19h1md)
        (cdaddr . g$6555$19h1md)
        (cdadar . g$6554$19h1md)
        (cdaadr . g$6553$19h1md)
        (cdaaar . g$6552$19h1md)
        (cadddr . g$6551$19h1md)
        (caddar . g$6550$19h1md)
        (cadadr . g$6549$19h1md)
        (cadaar . g$6548$19h1md)
        (caaddr . g$6547$19h1md)
        (caadar . g$6546$19h1md)
        (caaadr . g$6545$19h1md)
        (caaaar . g$6544$19h1md)
        (cdddr . g$6543$19h1md)
        (cddar . g$6542$19h1md)
        (cdadr . g$6541$19h1md)
        (cdaar . g$6540$19h1md)
        (caddr . g$6539$19h1md)
        (cadar . g$6538$19h1md)
        (caadr . g$6537$19h1md)
        (caaar . g$6536$19h1md)
        (cddr . g$6535$19h1md)
        (cdar . g$6534$19h1md)
        (cadr . g$6533$19h1md)
        (caar . g$6532$19h1md)
        (cdr . g$12833$19h1md)
        (car . g$12832$19h1md)
        (boolean? . g$12831$19h1md)
        (boolean=? . g$6612$19h1md)
        (atan . g$12830$19h1md)
        (assertion-violation . g$12829$19h1md)
        (asin . g$12828$19h1md)
        (apply . g$12827$19h1md)
        (append . g$12826$19h1md)
        (angle . g$12825$19h1md)
        (acos . g$12824$19h1md)
        (abs . g$12823$19h1md)
        (/ . g$12822$19h1md)
        (* . g$12821$19h1md)
        (- . g$12820$19h1md)
        (+ . g$12819$19h1md)
        (>= . g$12818$19h1md)
        (> . g$12817$19h1md)
        (= . g$12816$19h1md)
        (<= . g$12815$19h1md)
        (< . g$12814$19h1md)
        (make-record-printer . g$12813$19h1md)
        (eqv-hash . g$12812$19h1md)
        (eq-hash . g$12811$19h1md)
        (reverse! . g$12810$19h1md)
        (make-promise . g$7642$19h1md)
        (load/args . g$12648$19h1md)
        (printf . g$8396$19h1md)
        (fprintf . g$8397$19h1md)
        (format . g$8398$19h1md)
        (get-arity . g$12809$19h1md)
        (gc-collect . g$12808$19h1md)
        (clr-type? . g$12807$19h1md)
        (get-clr-type . g$12806$19h1md)
        (get-command-line . g$12805$19h1md)
        (vector-append . g$12804$19h1md)
        (vector-filter . g$12803$19h1md)
        (vector-reverse! . g$12802$19h1md)
        (vector-contains? . g$12801$19h1md)
        (vector-index-of . g$12800$19h1md)
        (vector-copy . g$12799$19h1md)
        (vector-binary-search . g$12798$19h1md)
        (get-output-string . g$12797$19h1md)
        (open-output-string . g$12796$19h1md)
        (open-input-string . g$12795$19h1md)
        (string-ci-compare . g$12794$19h1md)
        (string-compare . g$12793$19h1md)
        (string-format . g$12792$19h1md)
        (trace-printer . g$12645$19h1md)
        (make-traced-procedure . g$12791$19h1md)
        (make-traced-macro . g$8418$19h1md)
        (assertion-error . g$9705$19h1md)
        (pmap . g$12790$19h1md)
        (time-it . g$12789$19h1md)
        (make-parameter . g$8423$19h1md)
        (library-locator . g$12788$19h1md)
        (get-library-paths . g$12787$19h1md)
        (environment-symbols . g$9686$19h1md)
        (interaction-environment-symbols . g$9685$19h1md)
        (library-path . g$8854$19h1md)
        (library-extensions . g$8855$19h1md)
        (installed-libraries . g$8875$19h1md)
        (expand . g$9691$19h1md)
        (&no-nans . g$12786$19h1md)
        (&no-infinities . g$12785$19h1md)
        (&i/o-encoding . g$12784$19h1md)
        (&i/o-decoding . g$12783$19h1md)
        (&i/o-port . g$12782$19h1md)
        (&i/o-file-does-not-exist . g$12781$19h1md)
        (&i/o-file-already-exists . g$12780$19h1md)
        (&i/o-file-is-read-only . g$12779$19h1md)
        (&i/o-file-protection . g$12778$19h1md)
        (&i/o-filename . g$12777$19h1md)
        (&i/o-invalid-position . g$12776$19h1md)
        (&i/o-write . g$12775$19h1md)
        (&i/o-read . g$12774$19h1md)
        (&i/o . g$12773$19h1md)
        (&non-continuable . g$12772$19h1md)
        (&undefined . g$12771$19h1md)
        (&syntax . g$12770$19h1md)
        (&lexical . g$12769$19h1md)
        (&implementation-restriction . g$12768$19h1md)
        (&non . g$12767$19h1md)
        (&who . g$12766$19h1md)
        (&irritants . g$12765$19h1md)
        (&assertion . g$12764$19h1md)
        (&violation . g$12763$19h1md)
        (&error . g$12762$19h1md)
        (&serious . g$12761$19h1md)
        (&warning . g$12760$19h1md)
        (&message . g$12759$19h1md)
        (&condition . g$12758$19h1md)
        (define-condition-type . g$12757$19h1md)
        (define-enumeration . g$12756$19h1md)
        (define-record-type . g$12755$19h1md)
        (parent-rtd . g$12754$19h1md)
        (nongenerative . g$12753$19h1md)
        (opaque . g$12752$19h1md)
        (sealed . g$12751$19h1md)
        (protocol . g$12750$19h1md)
        (parent . g$12749$19h1md)
        (immutable . g$12748$19h1md)
        (mutable . g$12747$19h1md)
        (fields . g$12746$19h1md)
        (error-handling-mode . g$12745$19h1md)
        (file-options . g$12744$19h1md)
        (buffer-mode . g$12743$19h1md)
        (eol-style . g$12742$19h1md)
        (guard . g$12741$19h1md)
        (trace-letrec-syntax . g$12740$19h1md)
        (trace-let-syntax . g$12739$19h1md)
        (trace-define-syntax . g$12738$19h1md)
        (trace-define . g$12737$19h1md)
        (trace-lambda . g$12736$19h1md)
        (unsyntax-splicing . g$12735$19h1md)
        (unsyntax . g$12734$19h1md)
        (unquote-splicing . g$12733$19h1md)
        (unquote . g$12732$19h1md)
        (_ . g$12731$19h1md)
        (else . g$12730$19h1md)
        (=> . g$12729$19h1md)
        (... . g$12728$19h1md)
        (assert . g$12727$19h1md)
        (endianness . g$12726$19h1md)
        (delay . g$12725$19h1md)
        (time . g$12724$19h1md)
        (or . g$12723$19h1md)
        (and . g$12722$19h1md)
        (do . g$12721$19h1md)
        (cond . g$12720$19h1md)
        (let* . g$12719$19h1md)
        (let . g$12718$19h1md)
        (identifier-syntax . g$12717$19h1md)
        (with-syntax . g$12716$19h1md)
        (quasisyntax . g$12715$19h1md)
        (quasiquote . g$12714$19h1md)
        (syntax-rules . g$12713$19h1md)
        (include-into . g$12712$19h1md)
        (include . g$12711$19h1md)
        (define-struct . g$12710$19h1md)
        (let-values . g$12709$19h1md)
        (let*-values . g$12708$19h1md)
        (record-constructor-descriptor . g$12707$19h1md)
        (record-type-descriptor . g$12706$19h1md)
        (fluid-let-syntax . g$12705$19h1md)
        (case . g$12704$19h1md)
        (parameterize . g$12703$19h1md)
        (unless . g$12702$19h1md)
        (when . g$12701$19h1md)
        (if . g$12700$19h1md)
        (letrec* . g$12699$19h1md)
        (letrec . g$12698$19h1md)
        (type-descriptor . g$12697$19h1md)
        (case-lambda . g$12696$19h1md)
        (lambda . g$12695$19h1md)
        (syntax . g$12694$19h1md)
        (syntax-case . g$12693$19h1md)
        (quote . g$12692$19h1md)
        (foreign-call . g$12691$19h1md)
        (letrec-syntax . g$12690$19h1md)
        (let-syntax . g$12689$19h1md)
        (set! . g$12688$19h1md)
        (import . g$12687$19h1md)
        (library . g$12686$19h1md)
        (begin . g$12685$19h1md)
        (module . g$12684$19h1md)
        (define-syntax . g$12683$19h1md)
        (define . g$12682$19h1md))
      '((g$9584$19h1md core-prim . ellipsis-map)
        (g$13300$19h1md core-prim . &no-nans-rcd)
        (g$13299$19h1md core-prim . &no-nans-rtd)
        (g$13298$19h1md core-prim . &no-infinities-rcd)
        (g$13297$19h1md core-prim . &no-infinities-rtd)
        (g$13296$19h1md core-prim . &i/o-encoding-rcd)
        (g$13295$19h1md core-prim . &i/o-encoding-rtd)
        (g$13294$19h1md core-prim . &i/o-decoding-rcd)
        (g$13293$19h1md core-prim . &i/o-decoding-rtd)
        (g$13292$19h1md core-prim . &i/o-port-rcd)
        (g$13291$19h1md core-prim . &i/o-port-rtd)
        (g$13290$19h1md core-prim . &i/o-file-does-not-exist-rcd)
        (g$13289$19h1md core-prim . &i/o-file-does-not-exist-rtd)
        (g$13288$19h1md core-prim . &i/o-file-already-exists-rcd)
        (g$13287$19h1md core-prim . &i/o-file-already-exists-rtd)
        (g$13286$19h1md core-prim . &i/o-file-is-read-only-rcd)
        (g$13285$19h1md core-prim . &i/o-file-is-read-only-rtd)
        (g$13284$19h1md core-prim . &i/o-file-protection-rcd)
        (g$13283$19h1md core-prim . &i/o-file-protection-rtd)
        (g$13282$19h1md core-prim . &i/o-filename-rcd)
        (g$13281$19h1md core-prim . &i/o-filename-rtd)
        (g$13280$19h1md core-prim . &i/o-invalid-position-rcd)
        (g$13279$19h1md core-prim . &i/o-invalid-position-rtd)
        (g$13278$19h1md core-prim . &i/o-write-rcd)
        (g$13277$19h1md core-prim . &i/o-write-rtd)
        (g$13276$19h1md core-prim . &i/o-read-rcd)
        (g$13275$19h1md core-prim . &i/o-read-rtd)
        (g$13274$19h1md core-prim . &i/o-rcd)
        (g$13273$19h1md core-prim . &i/o-rtd)
        (g$13272$19h1md core-prim . &undefined-rcd)
        (g$13271$19h1md core-prim . &undefined-rtd)
        (g$13270$19h1md core-prim . &syntax-rcd)
        (g$13269$19h1md core-prim . &syntax-rtd)
        (g$13268$19h1md core-prim . &lexical-rcd)
        (g$13267$19h1md core-prim . &lexical-rtd)
        (g$13266$19h1md core-prim . &implementation-restriction-rcd)
        (g$13265$19h1md core-prim . &implementation-restriction-rtd)
        (g$13264$19h1md core-prim . &non-continuable-rcd)
        (g$13263$19h1md core-prim . &non-continuable-rtd)
        (g$13262$19h1md core-prim . &who-rcd)
        (g$13261$19h1md core-prim . &who-rtd)
        (g$13260$19h1md core-prim . &irritants-rcd)
        (g$13259$19h1md core-prim . &irritants-rtd)
        (g$13258$19h1md core-prim . &assertion-rcd)
        (g$13257$19h1md core-prim . &assertion-rtd)
        (g$13256$19h1md core-prim . &violation-rcd)
        (g$13255$19h1md core-prim . &violation-rtd)
        (g$13254$19h1md core-prim . &error-rcd)
        (g$13253$19h1md core-prim . &error-rtd)
        (g$13252$19h1md core-prim . &serious-rcd)
        (g$13251$19h1md core-prim . &serious-rtd)
        (g$13250$19h1md core-prim . &warning-rcd)
        (g$13249$19h1md core-prim . &warning-rtd)
        (g$13248$19h1md core-prim . &message-rcd)
        (g$13247$19h1md core-prim . &message-rtd)
        (g$13246$19h1md core-prim . &condition-rcd)
        (g$13245$19h1md core-prim . &condition-rtd)
        (g$13244$19h1md core-prim . library-letrec*)
        (g$13243$19h1md core-prim . annotation-stripped)
        (g$13242$19h1md core-prim . annotation-source)
        (g$13241$19h1md core-prim . annotation-expression)
        (g$13240$19h1md core-prim . annotation?)
        (g$13239$19h1md core-prim . read-annotated)
        (g$13238$19h1md core-prim . tanh)
        (g$13237$19h1md core-prim . cosh)
        (g$13236$19h1md core-prim . sinh)
        (g$13235$19h1md core-prim . make-guid)
        (g$13234$19h1md core-prim . unspecified?)
        (g$13233$19h1md core-prim . make-trace)
        (g$13232$19h1md core-prim . make-list)
        (g$13231$19h1md core-prim . last-pair)
        (g$13230$19h1md core-prim . load-r5rs)
        (g$13229$19h1md core-prim . license)
        (g$13228$19h1md core-prim . stacktrace)
        (g$12650$19h1md core-prim . ironscheme-build)
        (g$13227$19h1md core-prim . define-clr-class-internal)
        (g$13226$19h1md core-prim . clr-field-set!-internal)
        (g$13225$19h1md core-prim . clr-field-get-internal)
        (g$13224$19h1md core-prim . clr-cast-internal)
        (g$13223$19h1md core-prim . clr-call-internal)
        (g$13222$19h1md core-prim . clr-new-internal)
        (g$13221$19h1md core-prim . clr-new-array-internal)
        (g$13220$19h1md core-prim . clr-is-internal)
        (g$13219$19h1md core-prim . clr-reference-internal)
        (g$13218$19h1md core-prim . clr-using-internal)
        (g$13217$19h1md core-prim . clr-clear-usings-internal)
        (g$9706$19h1md core-prim . syntax-error)
        (g$9579$19h1md core-prim . syntax-dispatch)
        (g$13216$19h1md core-prim . compile-core)
        (g$13215$19h1md core-prim . eval-core)
        (g$13214$19h1md core-prim . set-symbol-value!)
        (g$13213$19h1md core-prim . symbol-value)
        (g$13212$19h1md core-prim . ungensym)
        (g$13211$19h1md core-prim . gensym)
        (g$13210$19h1md core-prim . void)
        (g$13209$19h1md core-prim . load-serialized-library)
        (g$13208$19h1md core-prim . serialize-library)
        (g$12652$19h1md core-prim . compile-system-libraries)
        (g$12654$19h1md core-prim . compile->closure)
        (g$12653$19h1md core-prim . compile)
        (g$12649$19h1md core-prim . load)
        (g$9715$19h1md core-prim . interaction-environment)
        (g$13207$19h1md core-prim . char-ready?)
        (g$13206$19h1md core-prim . string-upcase)
        (g$13205$19h1md core-prim . string-titlecase)
        (g$13204$19h1md core-prim . string-normalize-nfkd)
        (g$13203$19h1md core-prim . string-normalize-nfkc)
        (g$13202$19h1md core-prim . string-normalize-nfd)
        (g$13201$19h1md core-prim . string-normalize-nfc)
        (g$13200$19h1md core-prim . string-foldcase)
        (g$13199$19h1md core-prim . string-downcase)
        (g$7785$19h1md core-prim . string-ci>?)
        (g$7787$19h1md core-prim . string-ci>=?)
        (g$7783$19h1md core-prim . string-ci=?)
        (g$7784$19h1md core-prim . string-ci<?)
        (g$7786$19h1md core-prim . string-ci<=?)
        (g$13198$19h1md core-prim . char-whitespace?)
        (g$13197$19h1md core-prim . char-upper-case?)
        (g$13196$19h1md core-prim . char-title-case?)
        (g$13195$19h1md core-prim . char-numeric?)
        (g$13194$19h1md core-prim . char-lower-case?)
        (g$13193$19h1md core-prim . char-general-category)
        (g$13192$19h1md core-prim . char-upcase)
        (g$13191$19h1md core-prim . char-titlecase)
        (g$13190$19h1md core-prim . char-foldcase)
        (g$13189$19h1md core-prim . char-downcase)
        (g$7836$19h1md core-prim . char-ci>?)
        (g$7838$19h1md core-prim . char-ci>=?)
        (g$7834$19h1md core-prim . char-ci=?)
        (g$7835$19h1md core-prim . char-ci<?)
        (g$7837$19h1md core-prim . char-ci<=?)
        (g$13188$19h1md core-prim . char-alphabetic?)
        (g$9316$19h1md core-prim . variable-transformer-procedure)
        (g$9315$19h1md core-prim . variable-transformer?)
        (g$9314$19h1md core-prim . make-variable-transformer)
        (g$9710$19h1md core-prim . identifier?)
        (g$9699$19h1md core-prim . generate-temporaries)
        (g$9700$19h1md core-prim . free-identifier=?)
        (g$9712$19h1md core-prim . syntax->datum)
        (g$9711$19h1md core-prim . datum->syntax)
        (g$9701$19h1md core-prim . bound-identifier=?)
        (g$13187$19h1md core-prim . record-type-descriptor?)
        (g$13186$19h1md core-prim . record-predicate)
        (g$13185$19h1md core-prim . record-mutator)
        (g$13184$19h1md core-prim . record-constructor)
        (g$13183$19h1md core-prim . record-accessor)
        (g$13182$19h1md core-prim . make-record-type-descriptor)
        (g$13181$19h1md core-prim . make-record-constructor-descriptor)
        (g$13180$19h1md core-prim . record?)
        (g$13179$19h1md core-prim . record-type-uid)
        (g$13178$19h1md core-prim . record-type-sealed?)
        (g$13177$19h1md core-prim . record-type-parent)
        (g$13176$19h1md core-prim . record-type-opaque?)
        (g$13175$19h1md core-prim . record-type-name)
        (g$13174$19h1md core-prim . record-type-generative?)
        (g$13173$19h1md core-prim . record-type-field-names)
        (g$13172$19h1md core-prim . record-rtd)
        (g$13171$19h1md core-prim . record-field-mutable?)
        (g$7146$19h1md core-prim . delete-file)
        (g$7145$19h1md core-prim . file-exists?)
        (g$13170$19h1md core-prim . vector-sort!)
        (g$13169$19h1md core-prim . vector-sort)
        (g$7659$19h1md core-prim . list-sort)
        (g$13168$19h1md core-prim . symbol-hash)
        (g$13167$19h1md core-prim . string-ci-hash)
        (g$13166$19h1md core-prim . string-hash)
        (g$13165$19h1md core-prim . equal-hash)
        (g$13164$19h1md core-prim . hashtable-equivalence-function)
        (g$13163$19h1md core-prim . make-hashtable)
        (g$13162$19h1md core-prim . hashtable-hash-function)
        (g$7113$19h1md core-prim . make-eqv-hashtable)
        (g$7112$19h1md core-prim . make-eq-hashtable)
        (g$13161$19h1md core-prim . hashtable?)
        (g$7119$19h1md core-prim . hashtable-update!)
        (g$7114$19h1md core-prim . hashtable-size)
        (g$7116$19h1md core-prim . hashtable-set!)
        (g$7115$19h1md core-prim . hashtable-ref)
        (g$13160$19h1md core-prim . hashtable-mutable?)
        (g$13159$19h1md core-prim . hashtable-keys)
        (g$13158$19h1md core-prim . hashtable-entries)
        (g$7117$19h1md core-prim . hashtable-delete!)
        (g$13157$19h1md core-prim . hashtable-copy)
        (g$7118$19h1md core-prim . hashtable-contains?)
        (g$7120$19h1md core-prim . hashtable-clear!)
        (g$8255$19h1md core-prim . call-with-output-file)
        (g$8254$19h1md core-prim . call-with-input-file)
        (g$13156$19h1md core-prim . write-char)
        (g$13155$19h1md core-prim . write)
        (g$8253$19h1md core-prim . with-output-to-file)
        (g$8252$19h1md core-prim . with-input-from-file)
        (g$13154$19h1md core-prim . read-char)
        (g$13153$19h1md core-prim . read)
        (g$13152$19h1md core-prim . peek-char)
        (g$13151$19h1md core-prim . open-output-file)
        (g$13150$19h1md core-prim . open-input-file)
        (g$13149$19h1md core-prim . newline)
        (g$13148$19h1md core-prim . display)
        (g$13147$19h1md core-prim . close-output-port)
        (g$13146$19h1md core-prim . close-input-port)
        (g$13145$19h1md core-prim . eof-object?)
        (g$13144$19h1md core-prim . eof-object)
        (g$13143$19h1md core-prim . current-error-port)
        (g$13142$19h1md core-prim . current-output-port)
        (g$13141$19h1md core-prim . current-input-port)
        (g$13140$19h1md core-prim . output-port?)
        (g$13139$19h1md core-prim . input-port?)
        (g$13138$19h1md core-prim . utf-8-codec)
        (g$13137$19h1md core-prim . utf-16-codec)
        (g$13136$19h1md core-prim . transcoder-error-handling-mode)
        (g$13135$19h1md core-prim . transcoder-eol-style)
        (g$13134$19h1md core-prim . transcoder-codec)
        (g$13133$19h1md core-prim . transcoded-port)
        (g$13132$19h1md core-prim . textual-port?)
        (g$13131$19h1md core-prim . string->bytevector)
        (g$13130$19h1md core-prim . standard-output-port)
        (g$13129$19h1md core-prim . standard-input-port)
        (g$13128$19h1md core-prim . standard-error-port)
        (g$13127$19h1md core-prim . set-port-position!)
        (g$13126$19h1md core-prim . put-u8)
        (g$13125$19h1md core-prim . put-string)
        (g$13124$19h1md core-prim . put-datum)
        (g$13123$19h1md core-prim . put-char)
        (g$13122$19h1md core-prim . put-bytevector)
        (g$8231$19h1md core-prim . port?)
        (g$13121$19h1md core-prim . port-transcoder)
        (g$13120$19h1md core-prim . port-position)
        (g$13119$19h1md core-prim . port-has-set-port-position!?)
        (g$13118$19h1md core-prim . port-has-port-position?)
        (g$13117$19h1md core-prim . port-eof?)
        (g$13116$19h1md core-prim . output-port-buffer-mode)
        (g$8230$19h1md core-prim . open-string-output-port)
        (g$13115$19h1md core-prim . open-string-input-port)
        (g$13114$19h1md core-prim . open-file-output-port)
        (g$13113$19h1md core-prim . open-file-input/output-port)
        (g$13112$19h1md core-prim . open-file-input-port)
        (g$13111$19h1md core-prim . open-bytevector-output-port)
        (g$13110$19h1md core-prim . open-bytevector-input-port)
        (g$13109$19h1md core-prim . native-transcoder)
        (g$13108$19h1md core-prim . native-eol-style)
        (g$13107$19h1md core-prim . make-transcoder)
        (g$13106$19h1md core-prim . latin-1-codec)
        (g$8087$19h1md core-prim . make-i/o-write-error)
        (g$8073$19h1md core-prim . make-i/o-read-error)
        (g$8192$19h1md core-prim . make-i/o-port-error)
        (g$8102$19h1md core-prim . make-i/o-invalid-position-error)
        (g$8119$19h1md core-prim . make-i/o-filename-error)
        (g$8135$19h1md core-prim . make-i/o-file-protection-error)
        (g$8149$19h1md core-prim . make-i/o-file-is-read-only-error)
        (g$8177$19h1md core-prim . make-i/o-file-does-not-exist-error)
        (g$8163$19h1md core-prim . make-i/o-file-already-exists-error)
        (g$8059$19h1md core-prim . make-i/o-error)
        (g$8223$19h1md core-prim . make-i/o-encoding-error)
        (g$8208$19h1md core-prim . make-i/o-decoding-error)
        (g$13105$19h1md core-prim . make-custom-textual-output-port)
        (g$13104$19h1md core-prim . make-custom-textual-input/output-port)
        (g$13103$19h1md core-prim . make-custom-textual-input-port)
        (g$13102$19h1md core-prim . make-custom-binary-output-port)
        (g$13101$19h1md core-prim . make-custom-binary-input/output-port)
        (g$13100$19h1md core-prim . make-custom-binary-input-port)
        (g$13099$19h1md core-prim . make-bytevector)
        (g$13098$19h1md core-prim . lookahead-u8)
        (g$13097$19h1md core-prim . lookahead-char)
        (g$8088$19h1md core-prim . i/o-write-error?)
        (g$8074$19h1md core-prim . i/o-read-error?)
        (g$8194$19h1md core-prim . i/o-port-error?)
        (g$8104$19h1md core-prim . i/o-invalid-position-error?)
        (g$8105$19h1md core-prim . i/o-error-position)
        (g$8121$19h1md core-prim . i/o-filename-error?)
        (g$8136$19h1md core-prim . i/o-file-protection-error?)
        (g$8150$19h1md core-prim . i/o-file-is-read-only-error?)
        (g$8178$19h1md core-prim . i/o-file-does-not-exist-error?)
        (g$8164$19h1md core-prim . i/o-file-already-exists-error?)
        (g$8060$19h1md core-prim . i/o-error?)
        (g$8195$19h1md core-prim . i/o-error-port)
        (g$8122$19h1md core-prim . i/o-error-filename)
        (g$8225$19h1md core-prim . i/o-encoding-error?)
        (g$8226$19h1md core-prim . i/o-encoding-error-char)
        (g$8209$19h1md core-prim . i/o-decoding-error?)
        (g$13096$19h1md core-prim . get-u8)
        (g$13095$19h1md core-prim . get-string-n!)
        (g$13094$19h1md core-prim . get-string-n)
        (g$13093$19h1md core-prim . get-string-all)
        (g$13092$19h1md core-prim . get-line)
        (g$13091$19h1md core-prim . get-datum)
        (g$13090$19h1md core-prim . get-char)
        (g$13089$19h1md core-prim . get-bytevector-some)
        (g$13088$19h1md core-prim . get-bytevector-n!)
        (g$13087$19h1md core-prim . get-bytevector-n)
        (g$13086$19h1md core-prim . get-bytevector-all)
        (g$13085$19h1md core-prim . flush-output-port)
        (g$13084$19h1md core-prim . close-port)
        (g$13083$19h1md core-prim . call-with-string-output-port)
        (g$13082$19h1md core-prim . call-with-port)
        (g$13081$19h1md core-prim . call-with-bytevector-output-port)
        (g$13080$19h1md core-prim . bytevector->string)
        (g$13079$19h1md core-prim . buffer-mode?)
        (g$13078$19h1md core-prim . binary-port?)
        (g$9690$19h1md core-prim . scheme-report-environment)
        (g$7639$19h1md core-prim . quotient)
        (g$9689$19h1md core-prim . null-environment)
        (g$7640$19h1md core-prim . remainder)
        (g$7641$19h1md core-prim . modulo)
        (g$13077$19h1md core-prim . inexact->exact)
        (g$7643$19h1md core-prim . force)
        (g$13076$19h1md core-prim . exact->inexact)
        (g$13075$19h1md core-prim . exit)
        (g$12646$19h1md core-prim . command-line)
        (g$13074$19h1md core-prim . string-fill!)
        (g$13073$19h1md core-prim . string-set!)
        (g$13072$19h1md core-prim . set-cdr!)
        (g$13071$19h1md core-prim . set-car!)
        (g$7226$19h1md core-prim . remove)
        (g$7227$19h1md core-prim . remv)
        (g$7212$19h1md core-prim . remp)
        (g$7228$19h1md core-prim . remq)
        (g$7211$19h1md core-prim . partition)
        (g$13070$19h1md core-prim . memv)
        (g$13069$19h1md core-prim . memq)
        (g$7218$19h1md core-prim . memp)
        (g$7217$19h1md core-prim . member)
        (g$7222$19h1md core-prim . exists)
        (g$7221$19h1md core-prim . for-all)
        (g$7225$19h1md core-prim . fold-right)
        (g$7224$19h1md core-prim . fold-left)
        (g$7210$19h1md core-prim . find)
        (g$7213$19h1md core-prim . filter)
        (g$7223$19h1md core-prim . cons*)
        (g$7214$19h1md core-prim . assv)
        (g$13068$19h1md core-prim . assq)
        (g$7216$19h1md core-prim . assp)
        (g$7215$19h1md core-prim . assoc)
        (g$13067$19h1md core-prim . with-exception-handler)
        (g$13066$19h1md core-prim . raise-continuable)
        (g$13065$19h1md core-prim . raise)
        (g$9692$19h1md core-prim . eval)
        (g$9688$19h1md core-prim . environment)
        (g$8312$19h1md core-prim . make-enumeration)
        (g$8319$19h1md core-prim . enum-set=?)
        (g$8313$19h1md core-prim . enum-set-universe)
        (g$8320$19h1md core-prim . enum-set-union)
        (g$8318$19h1md core-prim . enum-set-subset?)
        (g$8324$19h1md core-prim . enum-set-projection)
        (g$8317$19h1md core-prim . enum-set-member?)
        (g$8321$19h1md core-prim . enum-set-intersection)
        (g$8314$19h1md core-prim . enum-set-indexer)
        (g$8322$19h1md core-prim . enum-set-difference)
        (g$8315$19h1md core-prim . enum-set-constructor)
        (g$8323$19h1md core-prim . enum-set-complement)
        (g$8316$19h1md core-prim . enum-set->list)
        (g$7550$19h1md core-prim . who-condition?)
        (g$7461$19h1md core-prim . warning?)
        (g$7503$19h1md core-prim . violation?)
        (g$7627$19h1md core-prim . undefined-violation?)
        (g$7611$19h1md core-prim . syntax-violation?)
        (g$7613$19h1md core-prim . syntax-violation-subform)
        (g$7612$19h1md core-prim . syntax-violation-form)
        (g$9709$19h1md core-prim . syntax-violation)
        (g$13064$19h1md core-prim . simple-conditions)
        (g$7475$19h1md core-prim . serious-condition?)
        (g$7565$19h1md core-prim . non-continuable-violation?)
        (g$7446$19h1md core-prim . message-condition?)
        (g$7548$19h1md core-prim . make-who-condition)
        (g$7460$19h1md core-prim . make-warning)
        (g$7502$19h1md core-prim . make-violation)
        (g$7626$19h1md core-prim . make-undefined-violation)
        (g$7608$19h1md core-prim . make-syntax-violation)
        (g$7474$19h1md core-prim . make-serious-condition)
        (g$7564$19h1md core-prim . make-non-continuable-violation)
        (g$7444$19h1md core-prim . make-message-condition)
        (g$7592$19h1md core-prim . make-lexical-violation)
        (g$7531$19h1md core-prim . make-irritants-condition)
        (g$7578$19h1md core-prim . make-implementation-restriction-violation)
        (g$7488$19h1md core-prim . make-error)
        (g$7516$19h1md core-prim . make-assertion-violation)
        (g$7593$19h1md core-prim . lexical-violation?)
        (g$7533$19h1md core-prim . irritants-condition?)
        (g$7579$19h1md core-prim . implementation-restriction-violation?)
        (g$7489$19h1md core-prim . error?)
        (g$7551$19h1md core-prim . condition-who)
        (g$13063$19h1md core-prim . condition-predicate)
        (g$7447$19h1md core-prim . condition-message)
        (g$7534$19h1md core-prim . condition-irritants)
        (g$13062$19h1md core-prim . condition-accessor)
        (g$13061$19h1md core-prim . condition)
        (g$7517$19h1md core-prim . assertion-violation?)
        (g$13060$19h1md core-prim . condition?)
        (g$13059$19h1md core-prim . utf32->string)
        (g$13058$19h1md core-prim . utf16->string)
        (g$13057$19h1md core-prim . utf8->string)
        (g$13056$19h1md core-prim . uint-list->bytevector)
        (g$13055$19h1md core-prim . u8-list->bytevector)
        (g$13054$19h1md core-prim . string->utf8)
        (g$13053$19h1md core-prim . string->utf32)
        (g$13052$19h1md core-prim . string->utf16)
        (g$13051$19h1md core-prim . sint-list->bytevector)
        (g$7302$19h1md core-prim . native-endianness)
        (g$13050$19h1md core-prim . bytevector?)
        (g$13049$19h1md core-prim . bytevector=?)
        (g$13048$19h1md core-prim . bytevector-uint-set!)
        (g$13047$19h1md core-prim . bytevector-uint-ref)
        (g$13046$19h1md core-prim . bytevector-u8-set!)
        (g$13045$19h1md core-prim . bytevector-u8-ref)
        (g$7323$19h1md core-prim . bytevector-u64-set!)
        (g$7319$19h1md core-prim . bytevector-u64-ref)
        (g$7325$19h1md core-prim . bytevector-u64-native-set!)
        (g$7321$19h1md core-prim . bytevector-u64-native-ref)
        (g$7315$19h1md core-prim . bytevector-u32-set!)
        (g$7311$19h1md core-prim . bytevector-u32-ref)
        (g$7317$19h1md core-prim . bytevector-u32-native-set!)
        (g$7313$19h1md core-prim . bytevector-u32-native-ref)
        (g$7307$19h1md core-prim . bytevector-u16-set!)
        (g$7303$19h1md core-prim . bytevector-u16-ref)
        (g$7309$19h1md core-prim . bytevector-u16-native-set!)
        (g$7305$19h1md core-prim . bytevector-u16-native-ref)
        (g$13044$19h1md core-prim . bytevector-sint-set!)
        (g$13043$19h1md core-prim . bytevector-sint-ref)
        (g$13042$19h1md core-prim . bytevector-s8-set!)
        (g$13041$19h1md core-prim . bytevector-s8-ref)
        (g$7324$19h1md core-prim . bytevector-s64-set!)
        (g$7320$19h1md core-prim . bytevector-s64-ref)
        (g$7326$19h1md core-prim . bytevector-s64-native-set!)
        (g$7322$19h1md core-prim . bytevector-s64-native-ref)
        (g$7316$19h1md core-prim . bytevector-s32-set!)
        (g$7312$19h1md core-prim . bytevector-s32-ref)
        (g$7318$19h1md core-prim . bytevector-s32-native-set!)
        (g$7314$19h1md core-prim . bytevector-s32-native-ref)
        (g$7308$19h1md core-prim . bytevector-s16-set!)
        (g$7304$19h1md core-prim . bytevector-s16-ref)
        (g$7310$19h1md core-prim . bytevector-s16-native-set!)
        (g$7306$19h1md core-prim . bytevector-s16-native-ref)
        (g$13040$19h1md core-prim . bytevector-length)
        (g$13039$19h1md core-prim . bytevector-ieee-single-set!)
        (g$13038$19h1md core-prim . bytevector-ieee-single-ref)
        (g$7329$19h1md core-prim . bytevector-ieee-single-native-set!)
        (g$7327$19h1md core-prim . bytevector-ieee-single-native-ref)
        (g$13037$19h1md core-prim . bytevector-ieee-double-set!)
        (g$13036$19h1md core-prim . bytevector-ieee-double-ref)
        (g$7330$19h1md core-prim . bytevector-ieee-double-native-set!)
        (g$7328$19h1md core-prim . bytevector-ieee-double-native-ref)
        (g$13035$19h1md core-prim . bytevector-fill!)
        (g$13034$19h1md core-prim . bytevector-copy!)
        (g$13033$19h1md core-prim . bytevector-copy)
        (g$13032$19h1md core-prim . bytevector->uint-list)
        (g$13031$19h1md core-prim . bytevector->u8-list)
        (g$13030$19h1md core-prim . bytevector->sint-list)
        (g$8045$19h1md core-prim . no-nans-violation?)
        (g$8031$19h1md core-prim . no-infinities-violation?)
        (g$8044$19h1md core-prim . make-no-nans-violation)
        (g$8030$19h1md core-prim . make-no-infinities-violation)
        (g$13029$19h1md core-prim . real->flonum)
        (g$13028$19h1md core-prim . flzero?)
        (g$13027$19h1md core-prim . fltruncate)
        (g$13026$19h1md core-prim . fltan)
        (g$13025$19h1md core-prim . flsqrt)
        (g$13024$19h1md core-prim . flsin)
        (g$13023$19h1md core-prim . flround)
        (g$13022$19h1md core-prim . flpositive?)
        (g$13021$19h1md core-prim . flonum?)
        (g$13020$19h1md core-prim . flodd?)
        (g$13019$19h1md core-prim . flnumerator)
        (g$13018$19h1md core-prim . flnegative?)
        (g$13017$19h1md core-prim . flnan?)
        (g$13016$19h1md core-prim . flmod0)
        (g$13015$19h1md core-prim . flmod)
        (g$13014$19h1md core-prim . flmin)
        (g$13013$19h1md core-prim . flmax)
        (g$13012$19h1md core-prim . fllog)
        (g$13011$19h1md core-prim . flinteger?)
        (g$13010$19h1md core-prim . flinfinite?)
        (g$13009$19h1md core-prim . flfloor)
        (g$13008$19h1md core-prim . flfinite?)
        (g$13007$19h1md core-prim . flexpt)
        (g$13006$19h1md core-prim . flexp)
        (g$13005$19h1md core-prim . fleven?)
        (g$13004$19h1md core-prim . fldiv0-and-mod0)
        (g$13003$19h1md core-prim . fldiv0)
        (g$13002$19h1md core-prim . fldiv-and-mod)
        (g$13001$19h1md core-prim . fldiv)
        (g$13000$19h1md core-prim . fldenominator)
        (g$12999$19h1md core-prim . flcos)
        (g$12998$19h1md core-prim . flceiling)
        (g$12997$19h1md core-prim . flatan)
        (g$12996$19h1md core-prim . flasin)
        (g$12995$19h1md core-prim . flacos)
        (g$12994$19h1md core-prim . flabs)
        (g$12993$19h1md core-prim . fl>?)
        (g$12992$19h1md core-prim . fl>=?)
        (g$12991$19h1md core-prim . fl=?)
        (g$12990$19h1md core-prim . fl<?)
        (g$12989$19h1md core-prim . fl<=?)
        (g$12988$19h1md core-prim . fl/)
        (g$12987$19h1md core-prim . fl-)
        (g$12986$19h1md core-prim . fl+)
        (g$12985$19h1md core-prim . fl*)
        (g$12984$19h1md core-prim . fixnum->flonum)
        (g$12983$19h1md core-prim . fxzero?)
        (g$12982$19h1md core-prim . fxxor)
        (g$7976$19h1md core-prim . fxrotate-bit-field)
        (g$12981$19h1md core-prim . fxreverse-bit-field)
        (g$12980$19h1md core-prim . fxpositive?)
        (g$12979$19h1md core-prim . fxodd?)
        (g$12978$19h1md core-prim . fxnot)
        (g$12977$19h1md core-prim . fxnegative?)
        (g$12976$19h1md core-prim . fxmod0)
        (g$12975$19h1md core-prim . fxmod)
        (g$12974$19h1md core-prim . fxmin)
        (g$12973$19h1md core-prim . fxmax)
        (g$12972$19h1md core-prim . fxlength)
        (g$12971$19h1md core-prim . fxior)
        (g$7970$19h1md core-prim . fxif)
        (g$12970$19h1md core-prim . fxfirst-bit-set)
        (g$12969$19h1md core-prim . fxeven?)
        (g$12968$19h1md core-prim . fxdiv0-and-mod0)
        (g$12967$19h1md core-prim . fxdiv0)
        (g$12966$19h1md core-prim . fxdiv-and-mod)
        (g$12965$19h1md core-prim . fxdiv)
        (g$7973$19h1md core-prim . fxcopy-bit-field)
        (g$7971$19h1md core-prim . fxcopy-bit)
        (g$12964$19h1md core-prim . fxbit-set?)
        (g$7972$19h1md core-prim . fxbit-field)
        (g$12963$19h1md core-prim . fxbit-count)
        (g$7975$19h1md core-prim . fxarithmetic-shift-right)
        (g$7974$19h1md core-prim . fxarithmetic-shift-left)
        (g$12962$19h1md core-prim . fxarithmetic-shift)
        (g$12961$19h1md core-prim . fxand)
        (g$12960$19h1md core-prim . fx>?)
        (g$12959$19h1md core-prim . fx>=?)
        (g$12958$19h1md core-prim . fx=?)
        (g$12957$19h1md core-prim . fx<?)
        (g$12956$19h1md core-prim . fx<=?)
        (g$12955$19h1md core-prim . fx-/carry)
        (g$12954$19h1md core-prim . fx-)
        (g$12953$19h1md core-prim . fx+/carry)
        (g$12952$19h1md core-prim . fx+)
        (g$12951$19h1md core-prim . fx*/carry)
        (g$12950$19h1md core-prim . fx*)
        (g$12949$19h1md core-prim . greatest-fixnum)
        (g$12948$19h1md core-prim . least-fixnum)
        (g$12947$19h1md core-prim . fixnum-width)
        (g$12946$19h1md core-prim . fixnum?)
        (g$7928$19h1md core-prim . bitwise-rotate-bit-field)
        (g$12945$19h1md core-prim . bitwise-reverse-bit-field)
        (g$12944$19h1md core-prim . bitwise-length)
        (g$7922$19h1md core-prim . bitwise-if)
        (g$12943$19h1md core-prim . bitwise-first-bit-set)
        (g$7925$19h1md core-prim . bitwise-copy-bit-field)
        (g$7923$19h1md core-prim . bitwise-copy-bit)
        (g$12942$19h1md core-prim . bitwise-bit-set?)
        (g$12941$19h1md core-prim . bitwise-bit-field)
        (g$12940$19h1md core-prim . bitwise-bit-count)
        (g$12939$19h1md core-prim . bitwise-xor)
        (g$12938$19h1md core-prim . bitwise-ior)
        (g$12937$19h1md core-prim . bitwise-and)
        (g$12936$19h1md core-prim . bitwise-not)
        (g$7927$19h1md core-prim . bitwise-arithmetic-shift-right)
        (g$7926$19h1md core-prim . bitwise-arithmetic-shift-left)
        (g$12935$19h1md core-prim . bitwise-arithmetic-shift)
        (g$12934$19h1md core-prim . zero?)
        (g$12933$19h1md core-prim . vector?)
        (g$12932$19h1md core-prim . vector-set!)
        (g$12931$19h1md core-prim . vector-ref)
        (g$12930$19h1md core-prim . vector-map)
        (g$12929$19h1md core-prim . vector-length)
        (g$12928$19h1md core-prim . vector-for-each)
        (g$12927$19h1md core-prim . vector-fill!)
        (g$12926$19h1md core-prim . vector->list)
        (g$12925$19h1md core-prim . vector)
        (g$12924$19h1md core-prim . values)
        (g$12923$19h1md core-prim . truncate)
        (g$12922$19h1md core-prim . tan)
        (g$12921$19h1md core-prim . symbol?)
        (g$6611$19h1md core-prim . symbol=?)
        (g$12920$19h1md core-prim . symbol->string)
        (g$12919$19h1md core-prim . substring)
        (g$12918$19h1md core-prim . string?)
        (g$6608$19h1md core-prim . string>?)
        (g$6610$19h1md core-prim . string>=?)
        (g$6606$19h1md core-prim . string=?)
        (g$6607$19h1md core-prim . string<?)
        (g$6609$19h1md core-prim . string<=?)
        (g$12917$19h1md core-prim . string-ref)
        (g$12916$19h1md core-prim . string-length)
        (g$12915$19h1md core-prim . string-for-each)
        (g$12914$19h1md core-prim . string-copy)
        (g$12913$19h1md core-prim . string-append)
        (g$12912$19h1md core-prim . string->symbol)
        (g$12911$19h1md core-prim . string->number)
        (g$12910$19h1md core-prim . string->list)
        (g$12909$19h1md core-prim . string)
        (g$12908$19h1md core-prim . sqrt)
        (g$12907$19h1md core-prim . sin)
        (g$12906$19h1md core-prim . round)
        (g$12905$19h1md core-prim . reverse)
        (g$12904$19h1md core-prim . real?)
        (g$12903$19h1md core-prim . real-valued?)
        (g$12902$19h1md core-prim . real-part)
        (g$6664$19h1md core-prim . rationalize)
        (g$12901$19h1md core-prim . rational?)
        (g$12900$19h1md core-prim . rational-valued?)
        (g$12899$19h1md core-prim . procedure?)
        (g$12898$19h1md core-prim . positive?)
        (g$12897$19h1md core-prim . pair?)
        (g$12896$19h1md core-prim . odd?)
        (g$12895$19h1md core-prim . numerator)
        (g$12894$19h1md core-prim . number?)
        (g$12893$19h1md core-prim . number->string)
        (g$12892$19h1md core-prim . null?)
        (g$12891$19h1md core-prim . not)
        (g$12890$19h1md core-prim . negative?)
        (g$12889$19h1md core-prim . nan?)
        (g$12888$19h1md core-prim . min)
        (g$12887$19h1md core-prim . max)
        (g$12886$19h1md core-prim . map)
        (g$12885$19h1md core-prim . make-vector)
        (g$12884$19h1md core-prim . make-string)
        (g$12883$19h1md core-prim . make-rectangular)
        (g$12882$19h1md core-prim . make-polar)
        (g$12881$19h1md core-prim . magnitude)
        (g$12880$19h1md core-prim . log)
        (g$12879$19h1md core-prim . list?)
        (g$12878$19h1md core-prim . list-tail)
        (g$12877$19h1md core-prim . list-ref)
        (g$12876$19h1md core-prim . list->vector)
        (g$12875$19h1md core-prim . list->string)
        (g$12874$19h1md core-prim . list)
        (g$12873$19h1md core-prim . length)
        (g$12872$19h1md core-prim . lcm)
        (g$12871$19h1md core-prim . integer?)
        (g$12870$19h1md core-prim . integer-valued?)
        (g$12869$19h1md core-prim . integer->char)
        (g$12868$19h1md core-prim . infinite?)
        (g$12867$19h1md core-prim . inexact?)
        (g$12866$19h1md core-prim . inexact)
        (g$12865$19h1md core-prim . imag-part)
        (g$12864$19h1md core-prim . gcd)
        (g$12863$19h1md core-prim . for-each)
        (g$12862$19h1md core-prim . floor)
        (g$12861$19h1md core-prim . finite?)
        (g$12860$19h1md core-prim . expt)
        (g$12859$19h1md core-prim . exp)
        (g$12858$19h1md core-prim . exact?)
        (g$12857$19h1md core-prim . exact-integer-sqrt)
        (g$12856$19h1md core-prim . exact)
        (g$12855$19h1md core-prim . even?)
        (g$12854$19h1md core-prim . error)
        (g$12853$19h1md core-prim . eqv?)
        (g$12852$19h1md core-prim . equal?)
        (g$12851$19h1md core-prim . eq?)
        (g$12850$19h1md core-prim . dynamic-wind)
        (g$12849$19h1md core-prim . div0-and-mod0)
        (g$12848$19h1md core-prim . mod0)
        (g$12847$19h1md core-prim . div0)
        (g$12846$19h1md core-prim . div-and-mod)
        (g$12845$19h1md core-prim . mod)
        (g$12844$19h1md core-prim . div)
        (g$12843$19h1md core-prim . denominator)
        (g$12842$19h1md core-prim . cos)
        (g$12841$19h1md core-prim . cons)
        (g$12840$19h1md core-prim . complex?)
        (g$12839$19h1md core-prim . char?)
        (g$6661$19h1md core-prim . char>?)
        (g$6663$19h1md core-prim . char>=?)
        (g$6659$19h1md core-prim . char=?)
        (g$6660$19h1md core-prim . char<?)
        (g$6662$19h1md core-prim . char<=?)
        (g$12838$19h1md core-prim . char->integer)
        (g$12837$19h1md core-prim . ceiling)
        (g$12836$19h1md core-prim . call-with-values)
        (g$12835$19h1md core-prim . call/cc)
        (g$12834$19h1md core-prim . call-with-current-continuation)
        (g$6559$19h1md core-prim . cddddr)
        (g$6558$19h1md core-prim . cdddar)
        (g$6557$19h1md core-prim . cddadr)
        (g$6556$19h1md core-prim . cddaar)
        (g$6555$19h1md core-prim . cdaddr)
        (g$6554$19h1md core-prim . cdadar)
        (g$6553$19h1md core-prim . cdaadr)
        (g$6552$19h1md core-prim . cdaaar)
        (g$6551$19h1md core-prim . cadddr)
        (g$6550$19h1md core-prim . caddar)
        (g$6549$19h1md core-prim . cadadr)
        (g$6548$19h1md core-prim . cadaar)
        (g$6547$19h1md core-prim . caaddr)
        (g$6546$19h1md core-prim . caadar)
        (g$6545$19h1md core-prim . caaadr)
        (g$6544$19h1md core-prim . caaaar)
        (g$6543$19h1md core-prim . cdddr)
        (g$6542$19h1md core-prim . cddar)
        (g$6541$19h1md core-prim . cdadr)
        (g$6540$19h1md core-prim . cdaar)
        (g$6539$19h1md core-prim . caddr)
        (g$6538$19h1md core-prim . cadar)
        (g$6537$19h1md core-prim . caadr)
        (g$6536$19h1md core-prim . caaar)
        (g$6535$19h1md core-prim . cddr)
        (g$6534$19h1md core-prim . cdar)
        (g$6533$19h1md core-prim . cadr)
        (g$6532$19h1md core-prim . caar)
        (g$12833$19h1md core-prim . cdr)
        (g$12832$19h1md core-prim . car)
        (g$12831$19h1md core-prim . boolean?)
        (g$6612$19h1md core-prim . boolean=?)
        (g$12830$19h1md core-prim . atan)
        (g$12829$19h1md core-prim . assertion-violation)
        (g$12828$19h1md core-prim . asin)
        (g$12827$19h1md core-prim . apply)
        (g$12826$19h1md core-prim . append)
        (g$12825$19h1md core-prim . angle)
        (g$12824$19h1md core-prim . acos)
        (g$12823$19h1md core-prim . abs)
        (g$12822$19h1md core-prim . /)
        (g$12821$19h1md core-prim . *)
        (g$12820$19h1md core-prim . -)
        (g$12819$19h1md core-prim . +)
        (g$12818$19h1md core-prim . >=)
        (g$12817$19h1md core-prim . >)
        (g$12816$19h1md core-prim . =)
        (g$12815$19h1md core-prim . <=)
        (g$12814$19h1md core-prim . <)
        (g$12813$19h1md core-prim . make-record-printer)
        (g$12812$19h1md core-prim . eqv-hash)
        (g$12811$19h1md core-prim . eq-hash)
        (g$12810$19h1md core-prim . reverse!)
        (g$7642$19h1md core-prim . make-promise)
        (g$12648$19h1md core-prim . load/args)
        (g$8396$19h1md core-prim . printf)
        (g$8397$19h1md core-prim . fprintf)
        (g$8398$19h1md core-prim . format)
        (g$12809$19h1md core-prim . get-arity)
        (g$12808$19h1md core-prim . gc-collect)
        (g$12807$19h1md core-prim . clr-type?)
        (g$12806$19h1md core-prim . get-clr-type)
        (g$12805$19h1md core-prim . get-command-line)
        (g$12804$19h1md core-prim . vector-append)
        (g$12803$19h1md core-prim . vector-filter)
        (g$12802$19h1md core-prim . vector-reverse!)
        (g$12801$19h1md core-prim . vector-contains?)
        (g$12800$19h1md core-prim . vector-index-of)
        (g$12799$19h1md core-prim . vector-copy)
        (g$12798$19h1md core-prim . vector-binary-search)
        (g$12797$19h1md core-prim . get-output-string)
        (g$12796$19h1md core-prim . open-output-string)
        (g$12795$19h1md core-prim . open-input-string)
        (g$12794$19h1md core-prim . string-ci-compare)
        (g$12793$19h1md core-prim . string-compare)
        (g$12792$19h1md core-prim . string-format)
        (g$12645$19h1md core-prim . trace-printer)
        (g$12791$19h1md core-prim . make-traced-procedure)
        (g$8418$19h1md core-prim . make-traced-macro)
        (g$9705$19h1md core-prim . assertion-error)
        (g$12790$19h1md core-prim . pmap)
        (g$12789$19h1md core-prim . time-it)
        (g$8423$19h1md core-prim . make-parameter)
        (g$12788$19h1md core-prim . library-locator)
        (g$12787$19h1md core-prim . get-library-paths)
        (g$9686$19h1md core-prim . environment-symbols)
        (g$9685$19h1md core-prim . interaction-environment-symbols)
        (g$8854$19h1md core-prim . library-path)
        (g$8855$19h1md core-prim . library-extensions)
        (g$8875$19h1md core-prim . installed-libraries)
        (g$9691$19h1md core-prim . expand)
        (g$12786$19h1md $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$12785$19h1md $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$12784$19h1md $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$12783$19h1md $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$12782$19h1md $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$12781$19h1md
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$12780$19h1md
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$12779$19h1md
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$12778$19h1md
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$12777$19h1md $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$12776$19h1md
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$12775$19h1md $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$12774$19h1md $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$12773$19h1md $core-rtd &i/o-rtd &i/o-rcd)
        (g$12772$19h1md $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$12771$19h1md $core-rtd &undefined-rtd &undefined-rcd)
        (g$12770$19h1md $core-rtd &syntax-rtd &syntax-rcd)
        (g$12769$19h1md $core-rtd &lexical-rtd &lexical-rcd)
        (g$12768$19h1md
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$12767$19h1md $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$12766$19h1md $core-rtd &who-rtd &who-rcd)
        (g$12765$19h1md $core-rtd &irritants-rtd &irritants-rcd)
        (g$12764$19h1md $core-rtd &assertion-rtd &assertion-rcd)
        (g$12763$19h1md $core-rtd &violation-rtd &violation-rcd)
        (g$12762$19h1md $core-rtd &error-rtd &error-rcd)
        (g$12761$19h1md $core-rtd &serious-rtd &serious-rcd)
        (g$12760$19h1md $core-rtd &warning-rtd &warning-rcd)
        (g$12759$19h1md $core-rtd &message-rtd &message-rcd)
        (g$12758$19h1md $core-rtd &condition-rtd &condition-rcd)
        (g$12757$19h1md macro . define-condition-type)
        (g$12756$19h1md macro . define-enumeration)
        (g$12755$19h1md macro . define-record-type)
        (g$12754$19h1md macro . parent-rtd)
        (g$12753$19h1md macro . nongenerative)
        (g$12752$19h1md macro . opaque)
        (g$12751$19h1md macro . sealed)
        (g$12750$19h1md macro . protocol)
        (g$12749$19h1md macro . parent)
        (g$12748$19h1md macro . immutable)
        (g$12747$19h1md macro . mutable)
        (g$12746$19h1md macro . fields)
        (g$12745$19h1md macro . error-handling-mode)
        (g$12744$19h1md macro . file-options)
        (g$12743$19h1md macro . buffer-mode)
        (g$12742$19h1md macro . eol-style)
        (g$12741$19h1md macro . guard)
        (g$12740$19h1md macro . trace-letrec-syntax)
        (g$12739$19h1md macro . trace-let-syntax)
        (g$12738$19h1md macro . trace-define-syntax)
        (g$12737$19h1md macro . trace-define)
        (g$12736$19h1md macro . trace-lambda)
        (g$12735$19h1md macro . unsyntax-splicing)
        (g$12734$19h1md macro . unsyntax)
        (g$12733$19h1md macro . unquote-splicing)
        (g$12732$19h1md macro . unquote)
        (g$12731$19h1md macro . _)
        (g$12730$19h1md macro . else)
        (g$12729$19h1md macro . =>)
        (g$12728$19h1md macro . ...)
        (g$12727$19h1md macro . assert)
        (g$12726$19h1md macro . endianness)
        (g$12725$19h1md macro . delay)
        (g$12724$19h1md macro . time)
        (g$12723$19h1md macro . or)
        (g$12722$19h1md macro . and)
        (g$12721$19h1md macro . do)
        (g$12720$19h1md macro . cond)
        (g$12719$19h1md macro . let*)
        (g$12718$19h1md macro . let)
        (g$12717$19h1md macro . identifier-syntax)
        (g$12716$19h1md macro . with-syntax)
        (g$12715$19h1md macro . quasisyntax)
        (g$12714$19h1md macro . quasiquote)
        (g$12713$19h1md macro . syntax-rules)
        (g$12712$19h1md macro . include-into)
        (g$12711$19h1md macro . include)
        (g$12710$19h1md macro . define-struct)
        (g$12709$19h1md macro . let-values)
        (g$12708$19h1md macro . let*-values)
        (g$12707$19h1md core-macro . record-constructor-descriptor)
        (g$12706$19h1md core-macro . record-type-descriptor)
        (g$12705$19h1md core-macro . fluid-let-syntax)
        (g$12704$19h1md macro . case)
        (g$12703$19h1md macro . parameterize)
        (g$12702$19h1md macro . unless)
        (g$12701$19h1md macro . when)
        (g$12700$19h1md core-macro . if)
        (g$12699$19h1md core-macro . letrec*)
        (g$12698$19h1md core-macro . letrec)
        (g$12697$19h1md core-macro . type-descriptor)
        (g$12696$19h1md core-macro . case-lambda)
        (g$12695$19h1md core-macro . lambda)
        (g$12694$19h1md core-macro . syntax)
        (g$12693$19h1md core-macro . syntax-case)
        (g$12692$19h1md core-macro . quote)
        (g$12691$19h1md core-macro . foreign-call)
        (g$12690$19h1md letrec-syntax)
        (g$12689$19h1md let-syntax)
        (g$12688$19h1md set!)
        (g$12687$19h1md import)
        (g$12686$19h1md library)
        (g$12685$19h1md begin)
        (g$12684$19h1md module)
        (g$12683$19h1md define-syntax)
        (g$12682$19h1md define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7487$19h1md
      'g$13337$19h1md
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$13216$19h1md)
        (eval-core . g$13215$19h1md)
        (set-symbol-value! . g$13214$19h1md)
        (symbol-value . g$13213$19h1md)
        (gensym . g$13211$19h1md)
        (void . g$13210$19h1md))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$11508$19h1md
     g$trace-printer$11548$19h1md
     (g$make-parameter$6941$19h1md write))
   (g$command-line$11509$19h1md
     g$command-line$11549$19h1md
     (g$make-parameter$6941$19h1md (get-command-line)))
   (g$local-library-path$11510$19h1md
     g$local-library-path$11550$19h1md
     (case-lambda
       ((g$filename$11521$19h1md)
        (cons
          (g$get-directory-name$5690$19h1md g$filename$11521$19h1md)
          (g$library-path$7471$19h1md)))))
   (g$load/args$11511$19h1md
     g$load/args$11551$19h1md
     (case-lambda
       ((g$filename$11522$19h1md . g$args$11523$19h1md)
        (begin
          (apply
            g$load-r6rs-top-level$11518$19h1md
            g$filename$11522$19h1md
            'load
            g$args$11523$19h1md)
          (void)))))
   (g$load$11512$19h1md
     g$load$11552$19h1md
     (case-lambda
       ((g$filename$11524$19h1md)
        (begin
          (apply
            g$load-r6rs-top-level$11518$19h1md
            g$filename$11524$19h1md
            'load
            (cdr (g$command-line$11509$19h1md)))
          (void)))))
   (g$ironscheme-build$11513$19h1md
     g$ironscheme-build$11553$19h1md
     (case-lambda (() (g$load$11512$19h1md '"ironscheme-buildscript.ss"))))
   (g$eval-top-level$11514$19h1md
     g$eval-top-level$11554$19h1md
     (case-lambda
       ((g$x$11525$19h1md)
        (g$eval$11483$19h1md
          g$x$11525$19h1md
          (g$interaction-environment$11506$19h1md)))))
   (g$compile-system-libraries$11515$19h1md
     g$compile-system-libraries$11555$19h1md
     (case-lambda
       (()
        (g$eval-top-level$11514$19h1md
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$11516$19h1md
     g$compile$11556$19h1md
     (case-lambda
       ((g$filename$11526$19h1md)
        (g$load-r6rs-top-level$11518$19h1md g$filename$11526$19h1md 'compile))))
   (g$compile->closure$11517$19h1md
     g$compile->closure$11557$19h1md
     (case-lambda
       ((g$filename$11527$19h1md)
        (g$load-r6rs-top-level$11518$19h1md g$filename$11527$19h1md 'closure))))
   (g$load-r6rs-top-level$11518$19h1md
     g$load-r6rs-top-level$11558$19h1md
     (case-lambda
       ((g$filename$11528$19h1md g$how$11529$19h1md . g$args$11530$19h1md)
        ((case-lambda
           ((g$library-path$11533$19h1md g$library-path$11534$19h1md)
            ((case-lambda
               ((g$swap$11535$19h1md)
                (dynamic-wind
                  g$swap$11535$19h1md
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$11536$19h1md)
                         ((case-lambda
                            ((g$t$11537$19h1md)
                             (if (memv g$t$11537$19h1md '(closure))
                               (g$pre-compile-r6rs-top-level$11505$19h1md
                                 g$x*$11536$19h1md)
                               (if (memv g$t$11537$19h1md '(load))
                                 ((case-lambda
                                    ((g$command-line$11540$19h1md
                                       g$command-line$11541$19h1md)
                                     ((case-lambda
                                        ((g$swap$11542$19h1md)
                                         (dynamic-wind
                                           g$swap$11542$19h1md
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$11504$19h1md
                                                 g$x*$11536$19h1md))))
                                           g$swap$11542$19h1md)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$11543$19h1md)
                                             (begin
                                               (g$command-line$11540$19h1md
                                                 g$command-line$11541$19h1md)
                                               (set! g$command-line$11541$19h1md
                                                 g$t$11543$19h1md))))
                                          (g$command-line$11540$19h1md)))))))
                                  g$command-line$11509$19h1md
                                  (cons
                                    g$filename$11528$19h1md
                                    (map (case-lambda
                                           ((g$x$11544$19h1md)
                                            (g$format$6856$19h1md
                                              '"~a"
                                              g$x$11544$19h1md)))
                                         g$args$11530$19h1md)))
                                 (if (memv g$t$11537$19h1md '(compile))
                                   (begin
                                     (g$compile-r6rs-top-level$11504$19h1md
                                       g$x*$11536$19h1md)
                                     (g$serialize-all$7475$19h1md
                                       serialize-library
                                       g$compile-core-expr$7189$19h1md))
                                   (if '#f '#f (void)))))))
                          g$how$11529$19h1md)))
                      (g$with-input-from-file$6687$19h1md
                        g$filename$11528$19h1md
                        (case-lambda
                          (()
                           ((letrec ((g$f$11545$19h1md
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$11546$19h1md)
                                              (if (eof-object? g$x$11546$19h1md)
                                                '()
                                                (cons
                                                  g$x$11546$19h1md
                                                  (g$f$11545$19h1md)))))
                                           (read-annotated))))))
                              g$f$11545$19h1md))))))))
                  g$swap$11535$19h1md)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$11547$19h1md)
                    (begin
                      (g$library-path$11533$19h1md g$library-path$11534$19h1md)
                      (set! g$library-path$11534$19h1md g$t$11547$19h1md))))
                 (g$library-path$11533$19h1md)))))))
         g$library-path$7471$19h1md
         (g$local-library-path$11510$19h1md g$filename$11528$19h1md)))))
   (g$fo$11519$19h1md
     g$fo$11559$19h1md
     (g$make-enumeration$6818$19h1md '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$7476$19h1md
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$11520$19h1md)
         (if (g$serious-condition?$6073$19h1md g$ex$11520$19h1md)
           (raise g$ex$11520$19h1md)
           (begin (display g$ex$11520$19h1md) (newline))))))
    (set-symbol-value! 'load g$load$11512$19h1md)
    (set-symbol-value! 'compile g$compile$11516$19h1md)
    (set-symbol-value! 'compile->closure g$compile->closure$11517$19h1md)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$11514$19h1md)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$11476$19h1md)
    (set-symbol-value! 'expanded2core g$expanded->core$7188$19h1md)
    (set-symbol-value! 'trace-printer g$trace-printer$11508$19h1md)
    (g$file-options-constructor$6942$19h1md
      (g$enum-set-constructor$6821$19h1md g$fo$11519$19h1md))
    (g$library-path$7471$19h1md (get-library-paths))))

