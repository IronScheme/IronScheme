;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (ironscheme lists)
  ((g$find$4889$F0M
     g$find$5000$F0M
     (case-lambda
       ((g$proc$4911$F0M g$l$4912$F0M)
        (if (null? g$l$4912$F0M)
          '#f
          ((case-lambda
             ((g$e$4913$F0M g$r$4914$F0M g$proc$4915$F0M)
              (if (g$proc$4915$F0M g$e$4913$F0M)
                g$e$4913$F0M
                (g$find$4889$F0M g$proc$4915$F0M g$r$4914$F0M))))
           (car g$l$4912$F0M)
           (cdr g$l$4912$F0M)
           g$proc$4911$F0M)))))
   (g$partition$4890$F0M
     g$partition$5001$F0M
     (case-lambda
       ((g$proc$4916$F0M g$l$4917$F0M)
        ((letrec ((g$f$4918$F0M
                    (case-lambda
                      ((g$l$4919$F0M g$a$4920$F0M g$b$4921$F0M)
                       (if (null? g$l$4919$F0M)
                         (values
                           (reverse! g$a$4920$F0M)
                           (reverse! g$b$4921$F0M))
                         ((case-lambda
                            ((g$e$4922$F0M)
                             (if (g$proc$4916$F0M g$e$4922$F0M)
                               (g$f$4918$F0M
                                 (cdr g$l$4919$F0M)
                                 (cons g$e$4922$F0M g$a$4920$F0M)
                                 g$b$4921$F0M)
                               (g$f$4918$F0M
                                 (cdr g$l$4919$F0M)
                                 g$a$4920$F0M
                                 (cons g$e$4922$F0M g$b$4921$F0M)))))
                          (car g$l$4919$F0M)))))))
           g$f$4918$F0M)
         g$l$4917$F0M
         '()
         '()))))
   (g$remp$4891$F0M
     g$remp$5002$F0M
     (case-lambda
       ((g$proc$4923$F0M g$l$4924$F0M)
        ((letrec ((g$f$4925$F0M
                    (case-lambda
                      ((g$l$4926$F0M g$a$4927$F0M)
                       (if (null? g$l$4926$F0M)
                         (reverse! g$a$4927$F0M)
                         ((case-lambda
                            ((g$e$4928$F0M)
                             (if (g$proc$4923$F0M g$e$4928$F0M)
                               (g$f$4925$F0M (cdr g$l$4926$F0M) g$a$4927$F0M)
                               (g$f$4925$F0M
                                 (cdr g$l$4926$F0M)
                                 (cons g$e$4928$F0M g$a$4927$F0M)))))
                          (car g$l$4926$F0M)))))))
           g$f$4925$F0M)
         g$l$4924$F0M
         '()))))
   (g$filter$4892$F0M
     g$filter$5003$F0M
     (case-lambda
       ((g$proc$4929$F0M g$l$4930$F0M)
        ((letrec ((g$f$4931$F0M
                    (case-lambda
                      ((g$l$4932$F0M g$a$4933$F0M)
                       (if (null? g$l$4932$F0M)
                         (reverse! g$a$4933$F0M)
                         ((case-lambda
                            ((g$e$4934$F0M)
                             (if (g$proc$4929$F0M g$e$4934$F0M)
                               (g$f$4931$F0M
                                 (cdr g$l$4932$F0M)
                                 (cons g$e$4934$F0M g$a$4933$F0M))
                               (g$f$4931$F0M (cdr g$l$4932$F0M) g$a$4933$F0M))))
                          (car g$l$4932$F0M)))))))
           g$f$4931$F0M)
         g$l$4930$F0M
         '()))))
   (g$assq$4893$F0M
     g$assq$5004$F0M
     (case-lambda
       ((g$obj$4935$F0M g$lst$4936$F0M)
        (if (null? g$lst$4936$F0M)
          '#f
          ((case-lambda
             ((g$obj$4937$F0M g$t$4938$F0M g$r$4939$F0M)
              (if (eq? g$obj$4937$F0M (car g$t$4938$F0M))
                g$t$4938$F0M
                (g$assq$4893$F0M g$obj$4937$F0M g$r$4939$F0M))))
           g$obj$4935$F0M
           (car g$lst$4936$F0M)
           (cdr g$lst$4936$F0M))))))
   (g$assv$4894$F0M
     g$assv$5005$F0M
     (case-lambda
       ((g$obj$4940$F0M g$lst$4941$F0M)
        (if (null? g$lst$4941$F0M)
          '#f
          ((case-lambda
             ((g$obj$4942$F0M g$t$4943$F0M g$r$4944$F0M)
              (if (eqv? g$obj$4942$F0M (car g$t$4943$F0M))
                g$t$4943$F0M
                (g$assv$4894$F0M g$obj$4942$F0M g$r$4944$F0M))))
           g$obj$4940$F0M
           (car g$lst$4941$F0M)
           (cdr g$lst$4941$F0M))))))
   (g$assoc$4895$F0M
     g$assoc$5006$F0M
     (case-lambda
       ((g$obj$4945$F0M g$lst$4946$F0M)
        (if (null? g$lst$4946$F0M)
          '#f
          ((case-lambda
             ((g$obj$4947$F0M g$t$4948$F0M g$r$4949$F0M)
              (if (equal? g$obj$4947$F0M (car g$t$4948$F0M))
                g$t$4948$F0M
                (g$assoc$4895$F0M g$obj$4947$F0M g$r$4949$F0M))))
           g$obj$4945$F0M
           (car g$lst$4946$F0M)
           (cdr g$lst$4946$F0M))))))
   (g$assp$4896$F0M
     g$assp$5007$F0M
     (case-lambda
       ((g$p?$4950$F0M g$lst$4951$F0M)
        (if (null? g$lst$4951$F0M)
          '#f
          ((case-lambda
             ((g$p?$4952$F0M g$t$4953$F0M g$r$4954$F0M)
              (if (g$p?$4952$F0M (car g$t$4953$F0M))
                g$t$4953$F0M
                (g$assp$4896$F0M g$p?$4952$F0M g$r$4954$F0M))))
           g$p?$4950$F0M
           (car g$lst$4951$F0M)
           (cdr g$lst$4951$F0M))))))
   (g$memq$4897$F0M
     g$memq$5008$F0M
     (case-lambda
       ((g$obj$4955$F0M g$lst$4956$F0M)
        (if (null? g$lst$4956$F0M)
          '#f
          (if (eq? g$obj$4955$F0M (car g$lst$4956$F0M))
            g$lst$4956$F0M
            (g$memq$4897$F0M g$obj$4955$F0M (cdr g$lst$4956$F0M)))))))
   (g$memv$4898$F0M
     g$memv$5009$F0M
     (case-lambda
       ((g$obj$4957$F0M g$lst$4958$F0M)
        (if (null? g$lst$4958$F0M)
          '#f
          (if (eqv? g$obj$4957$F0M (car g$lst$4958$F0M))
            g$lst$4958$F0M
            (g$memv$4898$F0M g$obj$4957$F0M (cdr g$lst$4958$F0M)))))))
   (g$member$4899$F0M
     g$member$5010$F0M
     (case-lambda
       ((g$obj$4959$F0M g$lst$4960$F0M)
        (if (null? g$lst$4960$F0M)
          '#f
          (if (equal? g$obj$4959$F0M (car g$lst$4960$F0M))
            g$lst$4960$F0M
            (g$member$4899$F0M g$obj$4959$F0M (cdr g$lst$4960$F0M)))))))
   (g$memp$4900$F0M
     g$memp$5011$F0M
     (case-lambda
       ((g$p?$4961$F0M g$lst$4962$F0M)
        (if (null? g$lst$4962$F0M)
          '#f
          (if (g$p?$4961$F0M (car g$lst$4962$F0M))
            g$lst$4962$F0M
            (g$memp$4900$F0M g$p?$4961$F0M (cdr g$lst$4962$F0M)))))))
   (g$all-empty?$4901$F0M
     g$all-empty?$5012$F0M
     (case-lambda
       ((g$ls$4963$F0M)
        ((case-lambda
           ((g$t$4964$F0M)
            (if g$t$4964$F0M
              g$t$4964$F0M
              (begin
                '#f
                (if (null? (car g$ls$4963$F0M))
                  (begin '#f (g$all-empty?$4901$F0M (cdr g$ls$4963$F0M)))
                  '#f)))))
         (null? g$ls$4963$F0M)))))
   (g$split$4902$F0M
     g$split$5013$F0M
     (case-lambda
       ((g$ls$4965$F0M)
        (if (null? g$ls$4965$F0M)
          (values '() '())
          (call-with-values
            (case-lambda (() (g$split$4902$F0M (cdr g$ls$4965$F0M))))
            (case-lambda
              ((g$cars$4966$F0M g$cdrs$4967$F0M)
               ((case-lambda
                  ((g$a$4968$F0M)
                   (values
                     (cons (car g$a$4968$F0M) g$cars$4966$F0M)
                     (cons (cdr g$a$4968$F0M) g$cdrs$4967$F0M))))
                (car g$ls$4965$F0M)))))))))
   (g$for-all$4903$F0M
     g$for-all$5014$F0M
     (case-lambda
       ((g$f$4969$F0M . g$args$4970$F0M)
        (if (g$all-empty?$4901$F0M g$args$4970$F0M)
          '#t
          (call-with-values
            (case-lambda (() (g$split$4902$F0M g$args$4970$F0M)))
            (case-lambda
              ((g$cars$4971$F0M g$cdrs$4972$F0M)
               (if (g$all-empty?$4901$F0M g$cdrs$4972$F0M)
                 (apply g$f$4969$F0M g$cars$4971$F0M)
                 (if (apply g$f$4969$F0M g$cars$4971$F0M)
                   (begin
                     '#f
                     (apply g$for-all$4903$F0M g$f$4969$F0M g$cdrs$4972$F0M))
                   '#f)))))))))
   (g$exists$4904$F0M
     g$exists$5015$F0M
     (case-lambda
       ((g$f$4973$F0M . g$args$4974$F0M)
        (if (g$all-empty?$4901$F0M g$args$4974$F0M)
          '#f
          (call-with-values
            (case-lambda (() (g$split$4902$F0M g$args$4974$F0M)))
            (case-lambda
              ((g$cars$4975$F0M g$cdrs$4976$F0M)
               ((case-lambda
                  ((g$t$4977$F0M)
                   (if g$t$4977$F0M
                     g$t$4977$F0M
                     (begin
                       '#f
                       (apply
                         g$exists$4904$F0M
                         g$f$4973$F0M
                         g$cdrs$4976$F0M)))))
                (apply g$f$4973$F0M g$cars$4975$F0M)))))))))
   (g$cons*$4905$F0M
     g$cons*$5016$F0M
     (case-lambda
       ((g$a$4978$F0M . g$rest$4979$F0M)
        ((letrec ((g$f$4980$F0M
                    (case-lambda
                      ((g$a$4981$F0M g$rest$4982$F0M)
                       (if (null? g$rest$4982$F0M)
                         g$a$4981$F0M
                         (cons
                           g$a$4981$F0M
                           (g$f$4980$F0M
                             (car g$rest$4982$F0M)
                             (cdr g$rest$4982$F0M))))))))
           g$f$4980$F0M)
         g$a$4978$F0M
         g$rest$4979$F0M))))
   (g$fold-left$4906$F0M
     g$fold-left$5017$F0M
     (case-lambda
       ((g$combine$4983$F0M g$nil$4984$F0M g$list1$4985$F0M . g$lists$4986$F0M)
        (if (null? g$list1$4985$F0M)
          g$nil$4984$F0M
          (apply
            g$fold-left$4906$F0M
            (g$cons*$4905$F0M
              g$combine$4983$F0M
              (apply
                g$combine$4983$F0M
                (g$cons*$4905$F0M
                  g$nil$4984$F0M
                  (car g$list1$4985$F0M)
                  (map car g$lists$4986$F0M)))
              (cdr g$list1$4985$F0M)
              (map cdr g$lists$4986$F0M)))))))
   (g$fold-right$4907$F0M
     g$fold-right$5018$F0M
     (case-lambda
       ((g$combine$4987$F0M g$nil$4988$F0M g$list1$4989$F0M . g$lists$4990$F0M)
        (if (null? g$list1$4989$F0M)
          g$nil$4988$F0M
          (apply
            g$combine$4987$F0M
            (append
              (list (car g$list1$4989$F0M))
              (map car g$lists$4990$F0M)
              (list
                (apply
                  g$fold-right$4907$F0M
                  (g$cons*$4905$F0M
                    g$combine$4987$F0M
                    g$nil$4988$F0M
                    (cdr g$list1$4989$F0M)
                    (map cdr g$lists$4990$F0M))))))))))
   (g$remove$4908$F0M
     g$remove$5019$F0M
     (case-lambda
       ((g$obj$4991$F0M g$list$4992$F0M)
        (g$remp$4891$F0M
          (case-lambda ((g$x$4993$F0M) (equal? g$obj$4991$F0M g$x$4993$F0M)))
          g$list$4992$F0M))))
   (g$remv$4909$F0M
     g$remv$5020$F0M
     (case-lambda
       ((g$obj$4994$F0M g$list$4995$F0M)
        (g$remp$4891$F0M
          (case-lambda ((g$x$4996$F0M) (eqv? g$obj$4994$F0M g$x$4996$F0M)))
          g$list$4995$F0M))))
   (g$remq$4910$F0M
     g$remq$5021$F0M
     (case-lambda
       ((g$obj$4997$F0M g$list$4998$F0M)
        (g$remp$4891$F0M
          (case-lambda ((g$x$4999$F0M) (eq? g$obj$4997$F0M g$x$4999$F0M)))
          g$list$4998$F0M)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$caar$5022$F0M
     g$caar$5177$F0M
     (case-lambda ((g$x$5077$F0M) (car (car g$x$5077$F0M)))))
   (g$cadr$5023$F0M
     g$cadr$5178$F0M
     (case-lambda ((g$x$5078$F0M) (car (cdr g$x$5078$F0M)))))
   (g$cdar$5024$F0M
     g$cdar$5179$F0M
     (case-lambda ((g$x$5079$F0M) (cdr (car g$x$5079$F0M)))))
   (g$cddr$5025$F0M
     g$cddr$5180$F0M
     (case-lambda ((g$x$5080$F0M) (cdr (cdr g$x$5080$F0M)))))
   (g$caaar$5026$F0M
     g$caaar$5181$F0M
     (case-lambda ((g$x$5081$F0M) (g$caar$5022$F0M (car g$x$5081$F0M)))))
   (g$caadr$5027$F0M
     g$caadr$5182$F0M
     (case-lambda ((g$x$5082$F0M) (g$caar$5022$F0M (cdr g$x$5082$F0M)))))
   (g$cadar$5028$F0M
     g$cadar$5183$F0M
     (case-lambda ((g$x$5083$F0M) (g$cadr$5023$F0M (car g$x$5083$F0M)))))
   (g$caddr$5029$F0M
     g$caddr$5184$F0M
     (case-lambda ((g$x$5084$F0M) (g$cadr$5023$F0M (cdr g$x$5084$F0M)))))
   (g$cdaar$5030$F0M
     g$cdaar$5185$F0M
     (case-lambda ((g$x$5085$F0M) (g$cdar$5024$F0M (car g$x$5085$F0M)))))
   (g$cdadr$5031$F0M
     g$cdadr$5186$F0M
     (case-lambda ((g$x$5086$F0M) (g$cdar$5024$F0M (cdr g$x$5086$F0M)))))
   (g$cddar$5032$F0M
     g$cddar$5187$F0M
     (case-lambda ((g$x$5087$F0M) (g$cddr$5025$F0M (car g$x$5087$F0M)))))
   (g$cdddr$5033$F0M
     g$cdddr$5188$F0M
     (case-lambda ((g$x$5088$F0M) (g$cddr$5025$F0M (cdr g$x$5088$F0M)))))
   (g$caaaar$5034$F0M
     g$caaaar$5189$F0M
     (case-lambda ((g$x$5089$F0M) (g$caaar$5026$F0M (car g$x$5089$F0M)))))
   (g$caaadr$5035$F0M
     g$caaadr$5190$F0M
     (case-lambda ((g$x$5090$F0M) (g$caaar$5026$F0M (cdr g$x$5090$F0M)))))
   (g$caadar$5036$F0M
     g$caadar$5191$F0M
     (case-lambda ((g$x$5091$F0M) (g$caadr$5027$F0M (car g$x$5091$F0M)))))
   (g$caaddr$5037$F0M
     g$caaddr$5192$F0M
     (case-lambda ((g$x$5092$F0M) (g$caadr$5027$F0M (cdr g$x$5092$F0M)))))
   (g$cadaar$5038$F0M
     g$cadaar$5193$F0M
     (case-lambda ((g$x$5093$F0M) (g$cadar$5028$F0M (car g$x$5093$F0M)))))
   (g$cadadr$5039$F0M
     g$cadadr$5194$F0M
     (case-lambda ((g$x$5094$F0M) (g$cadar$5028$F0M (cdr g$x$5094$F0M)))))
   (g$caddar$5040$F0M
     g$caddar$5195$F0M
     (case-lambda ((g$x$5095$F0M) (g$caddr$5029$F0M (car g$x$5095$F0M)))))
   (g$cadddr$5041$F0M
     g$cadddr$5196$F0M
     (case-lambda ((g$x$5096$F0M) (g$caddr$5029$F0M (cdr g$x$5096$F0M)))))
   (g$cdaaar$5042$F0M
     g$cdaaar$5197$F0M
     (case-lambda ((g$x$5097$F0M) (g$cdaar$5030$F0M (car g$x$5097$F0M)))))
   (g$cdaadr$5043$F0M
     g$cdaadr$5198$F0M
     (case-lambda ((g$x$5098$F0M) (g$cdaar$5030$F0M (cdr g$x$5098$F0M)))))
   (g$cdadar$5044$F0M
     g$cdadar$5199$F0M
     (case-lambda ((g$x$5099$F0M) (g$cdadr$5031$F0M (car g$x$5099$F0M)))))
   (g$cdaddr$5045$F0M
     g$cdaddr$5200$F0M
     (case-lambda ((g$x$5100$F0M) (g$cdadr$5031$F0M (cdr g$x$5100$F0M)))))
   (g$cddaar$5046$F0M
     g$cddaar$5201$F0M
     (case-lambda ((g$x$5101$F0M) (g$cddar$5032$F0M (car g$x$5101$F0M)))))
   (g$cddadr$5047$F0M
     g$cddadr$5202$F0M
     (case-lambda ((g$x$5102$F0M) (g$cddar$5032$F0M (cdr g$x$5102$F0M)))))
   (g$cdddar$5048$F0M
     g$cdddar$5203$F0M
     (case-lambda ((g$x$5103$F0M) (g$cdddr$5033$F0M (car g$x$5103$F0M)))))
   (g$cddddr$5049$F0M
     g$cddddr$5204$F0M
     (case-lambda ((g$x$5104$F0M) (g$cdddr$5033$F0M (cdr g$x$5104$F0M)))))
   (g$string=?$5056$F0M
     g$string=?$5205$F0M
     (case-lambda
       ((g$a$5105$F0M g$b$5106$F0M . g$rest$5107$F0M)
        (begin
          (if (not (string? g$a$5105$F0M))
            (assertion-violation 'string=? '"not a string" g$a$5105$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5108$F0M)
               (begin
                 (if (not (string? g$x$5108$F0M))
                   (assertion-violation 'string=? '"not a string" g$x$5108$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5109$F0M)
                     (begin (set! g$a$5105$F0M g$x$5108$F0M) g$r$5109$F0M)))
                  (= (string-compare g$a$5105$F0M g$x$5108$F0M) '0)))))
            (cons g$b$5106$F0M g$rest$5107$F0M))))))
   (g$string<?$5057$F0M
     g$string<?$5206$F0M
     (case-lambda
       ((g$a$5110$F0M g$b$5111$F0M . g$rest$5112$F0M)
        (begin
          (if (not (string? g$a$5110$F0M))
            (assertion-violation 'string<? '"not a string" g$a$5110$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5113$F0M)
               (begin
                 (if (not (string? g$x$5113$F0M))
                   (assertion-violation 'string<? '"not a string" g$x$5113$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5114$F0M)
                     (begin (set! g$a$5110$F0M g$x$5113$F0M) g$r$5114$F0M)))
                  (< (string-compare g$a$5110$F0M g$x$5113$F0M) '0)))))
            (cons g$b$5111$F0M g$rest$5112$F0M))))))
   (g$string>?$5058$F0M
     g$string>?$5207$F0M
     (case-lambda
       ((g$a$5115$F0M g$b$5116$F0M . g$rest$5117$F0M)
        (begin
          (if (not (string? g$a$5115$F0M))
            (assertion-violation 'string>? '"not a string" g$a$5115$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5118$F0M)
               (begin
                 (if (not (string? g$x$5118$F0M))
                   (assertion-violation 'string>? '"not a string" g$x$5118$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5119$F0M)
                     (begin (set! g$a$5115$F0M g$x$5118$F0M) g$r$5119$F0M)))
                  (> (string-compare g$a$5115$F0M g$x$5118$F0M) '0)))))
            (cons g$b$5116$F0M g$rest$5117$F0M))))))
   (g$string<=?$5059$F0M
     g$string<=?$5208$F0M
     (case-lambda
       ((g$a$5120$F0M g$b$5121$F0M . g$rest$5122$F0M)
        (begin
          (if (not (string? g$a$5120$F0M))
            (assertion-violation 'string<=? '"not a string" g$a$5120$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5123$F0M)
               (begin
                 (if (not (string? g$x$5123$F0M))
                   (assertion-violation 'string<=? '"not a string" g$x$5123$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5124$F0M)
                     (begin (set! g$a$5120$F0M g$x$5123$F0M) g$r$5124$F0M)))
                  (<= (string-compare g$a$5120$F0M g$x$5123$F0M) '0)))))
            (cons g$b$5121$F0M g$rest$5122$F0M))))))
   (g$string>=?$5060$F0M
     g$string>=?$5209$F0M
     (case-lambda
       ((g$a$5125$F0M g$b$5126$F0M . g$rest$5127$F0M)
        (begin
          (if (not (string? g$a$5125$F0M))
            (assertion-violation 'string>=? '"not a string" g$a$5125$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5128$F0M)
               (begin
                 (if (not (string? g$x$5128$F0M))
                   (assertion-violation 'string>=? '"not a string" g$x$5128$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5129$F0M)
                     (begin (set! g$a$5125$F0M g$x$5128$F0M) g$r$5129$F0M)))
                  (>= (string-compare g$a$5125$F0M g$x$5128$F0M) '0)))))
            (cons g$b$5126$F0M g$rest$5127$F0M))))))
   (g$symbol=?$5061$F0M
     g$symbol=?$5210$F0M
     (case-lambda
       ((g$a$5130$F0M g$b$5131$F0M . g$rest$5132$F0M)
        (begin
          (if (not (symbol? g$a$5130$F0M))
            (assertion-violation 'symbol=? '"not a symbol" g$a$5130$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5133$F0M)
               (begin
                 (if (not (symbol? g$x$5133$F0M))
                   (assertion-violation 'symbol=? '"not a symbol" g$x$5133$F0M)
                   (void))
                 (eq? g$a$5130$F0M g$x$5133$F0M))))
            (cons g$b$5131$F0M g$rest$5132$F0M))))))
   (g$boolean=?$5062$F0M
     g$boolean=?$5211$F0M
     (case-lambda
       ((g$a$5134$F0M g$b$5135$F0M . g$rest$5136$F0M)
        (begin
          (if (not (boolean? g$a$5134$F0M))
            (assertion-violation 'boolean=? '"not a boolean" g$a$5134$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5137$F0M)
               (begin
                 (if (not (boolean? g$x$5137$F0M))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$5137$F0M)
                   (void))
                 (eq? g$a$5134$F0M g$x$5137$F0M))))
            (cons g$b$5135$F0M g$rest$5136$F0M))))))
   (g$char=?$5069$F0M
     g$char=?$5212$F0M
     (case-lambda
       ((g$a$5138$F0M g$b$5139$F0M . g$rest$5140$F0M)
        (begin
          (if (not (char? g$a$5138$F0M))
            (assertion-violation 'char=? '"not a char" g$a$5138$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5141$F0M)
               (begin
                 (if (not (char? g$x$5141$F0M))
                   (assertion-violation 'char=? '"not a char" g$x$5141$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5142$F0M)
                     (begin (set! g$a$5138$F0M g$x$5141$F0M) g$r$5142$F0M)))
                  (= (char->integer g$a$5138$F0M)
                     (char->integer g$x$5141$F0M))))))
            (cons g$b$5139$F0M g$rest$5140$F0M))))))
   (g$char<?$5070$F0M
     g$char<?$5213$F0M
     (case-lambda
       ((g$a$5143$F0M g$b$5144$F0M . g$rest$5145$F0M)
        (begin
          (if (not (char? g$a$5143$F0M))
            (assertion-violation 'char<? '"not a char" g$a$5143$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5146$F0M)
               (begin
                 (if (not (char? g$x$5146$F0M))
                   (assertion-violation 'char<? '"not a char" g$x$5146$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5147$F0M)
                     (begin (set! g$a$5143$F0M g$x$5146$F0M) g$r$5147$F0M)))
                  (< (char->integer g$a$5143$F0M)
                     (char->integer g$x$5146$F0M))))))
            (cons g$b$5144$F0M g$rest$5145$F0M))))))
   (g$char>?$5071$F0M
     g$char>?$5214$F0M
     (case-lambda
       ((g$a$5148$F0M g$b$5149$F0M . g$rest$5150$F0M)
        (begin
          (if (not (char? g$a$5148$F0M))
            (assertion-violation 'char>? '"not a char" g$a$5148$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5151$F0M)
               (begin
                 (if (not (char? g$x$5151$F0M))
                   (assertion-violation 'char>? '"not a char" g$x$5151$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5152$F0M)
                     (begin (set! g$a$5148$F0M g$x$5151$F0M) g$r$5152$F0M)))
                  (> (char->integer g$a$5148$F0M)
                     (char->integer g$x$5151$F0M))))))
            (cons g$b$5149$F0M g$rest$5150$F0M))))))
   (g$char<=?$5072$F0M
     g$char<=?$5215$F0M
     (case-lambda
       ((g$a$5153$F0M g$b$5154$F0M . g$rest$5155$F0M)
        (begin
          (if (not (char? g$a$5153$F0M))
            (assertion-violation 'char<=? '"not a char" g$a$5153$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5156$F0M)
               (begin
                 (if (not (char? g$x$5156$F0M))
                   (assertion-violation 'char<=? '"not a char" g$x$5156$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5157$F0M)
                     (begin (set! g$a$5153$F0M g$x$5156$F0M) g$r$5157$F0M)))
                  (<= (char->integer g$a$5153$F0M)
                      (char->integer g$x$5156$F0M))))))
            (cons g$b$5154$F0M g$rest$5155$F0M))))))
   (g$char>=?$5073$F0M
     g$char>=?$5216$F0M
     (case-lambda
       ((g$a$5158$F0M g$b$5159$F0M . g$rest$5160$F0M)
        (begin
          (if (not (char? g$a$5158$F0M))
            (assertion-violation 'char>=? '"not a char" g$a$5158$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5161$F0M)
               (begin
                 (if (not (char? g$x$5161$F0M))
                   (assertion-violation 'char>=? '"not a char" g$x$5161$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5162$F0M)
                     (begin (set! g$a$5158$F0M g$x$5161$F0M) g$r$5162$F0M)))
                  (>= (char->integer g$a$5158$F0M)
                      (char->integer g$x$5161$F0M))))))
            (cons g$b$5159$F0M g$rest$5160$F0M))))))
   (g$rationalize$5074$F0M
     g$rationalize$5217$F0M
     (case-lambda
       ((g$x$5163$F0M g$e$5164$F0M)
        (if (if (infinite? g$x$5163$F0M)
              (begin '#f (infinite? g$e$5164$F0M))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$5165$F0M)
              (if (if (exact? g$x$5163$F0M)
                    (begin '#f (exact? g$e$5164$F0M))
                    '#f)
                g$r$5165$F0M
                (inexact g$r$5165$F0M))))
           (apply / (g$find-ratio$5075$F0M g$x$5163$F0M g$e$5164$F0M)))))))
   (g$find-ratio$5075$F0M
     g$find-ratio$5218$F0M
     (case-lambda
       ((g$x$5166$F0M g$e$5167$F0M)
        (g$find-ratio-between$5076$F0M
          (- g$x$5166$F0M g$e$5167$F0M)
          (+ g$x$5166$F0M g$e$5167$F0M)))))
   (g$find-ratio-between$5076$F0M
     g$find-ratio-between$5219$F0M
     (case-lambda
       ((g$x$5168$F0M g$y$5169$F0M)
        (letrec* ((g$sr$5170$F0M
                    (case-lambda
                      ((g$x$5172$F0M g$y$5173$F0M)
                       ((case-lambda
                          ((g$fx$5174$F0M g$fy$5175$F0M)
                           (if (>= g$fx$5174$F0M g$x$5172$F0M)
                             (list g$fx$5174$F0M '1)
                             (if (= g$fx$5174$F0M g$fy$5175$F0M)
                               ((case-lambda
                                  ((g$rat$5176$F0M)
                                   (list
                                     (+ (g$cadr$5023$F0M g$rat$5176$F0M)
                                        (* g$fx$5174$F0M (car g$rat$5176$F0M)))
                                     (car g$rat$5176$F0M))))
                                (g$sr$5170$F0M
                                  (/ (- g$y$5173$F0M g$fy$5175$F0M))
                                  (/ (- g$x$5172$F0M g$fx$5174$F0M))))
                               (list (+ '1 g$fx$5174$F0M) '1)))))
                        (exact (floor g$x$5172$F0M))
                        (exact (floor g$y$5173$F0M)))))))
          (if (< g$y$5169$F0M g$x$5168$F0M)
            (g$find-ratio-between$5076$F0M g$y$5169$F0M g$x$5168$F0M)
            (if (>= g$x$5168$F0M g$y$5169$F0M)
              (list g$x$5168$F0M '1)
              (if (positive? g$x$5168$F0M)
                (g$sr$5170$F0M g$x$5168$F0M g$y$5169$F0M)
                (if (negative? g$y$5169$F0M)
                  ((case-lambda
                     ((g$rat$5171$F0M)
                      (list
                        (- (car g$rat$5171$F0M))
                        (g$cadr$5023$F0M g$rat$5171$F0M))))
                   (g$sr$5170$F0M (- g$y$5169$F0M) (- g$x$5168$F0M)))
                  '(0 1))))))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$5415$F0M g$using$5450$F0M (clr-using-internal 'system))
   (g$using$5417$F0M
     g$using$5451$F0M
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$5418$F0M
     g$make-eq-hashtable$5452$F0M
     (case-lambda
       (() (g$make-eq-hashtable$5418$F0M '32))
       ((g$k$5429$F0M)
        (clr-new-internal 'hashtable (clr-cast-internal 'int32 g$k$5429$F0M)))))
   (g$make-eqv-hashtable$5419$F0M
     g$make-eqv-hashtable$5453$F0M
     (case-lambda
       (() (g$make-eqv-hashtable$5419$F0M '32))
       ((g$k$5430$F0M) (make-hashtable eqv-hash eqv? g$k$5430$F0M))))
   (g$hashtable-size$5420$F0M
     g$hashtable-size$5454$F0M
     (case-lambda
       ((g$ht$5431$F0M)
        (clr-call-internal 'hashtable 'get_count g$ht$5431$F0M))))
   (g$hashtable-ref$5421$F0M
     g$hashtable-ref$5455$F0M
     (case-lambda
       ((g$ht$5432$F0M g$key$5433$F0M g$default$5434$F0M)
        (letrec* ((g$r$5435$F0M
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$5432$F0M
                      g$key$5433$F0M)))
          (if (not (null? g$r$5435$F0M)) g$r$5435$F0M g$default$5434$F0M)))))
   (g$hashtable-set!$5422$F0M
     g$hashtable-set!$5456$F0M
     (case-lambda
       ((g$ht$5436$F0M g$key$5437$F0M g$obj$5438$F0M)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$5436$F0M
          g$key$5437$F0M
          g$obj$5438$F0M))))
   (g$hashtable-delete!$5423$F0M
     g$hashtable-delete!$5457$F0M
     (case-lambda
       ((g$ht$5439$F0M g$key$5440$F0M)
        (clr-call-internal 'hashtable 'remove g$ht$5439$F0M g$key$5440$F0M))))
   (g$hashtable-contains?$5424$F0M
     g$hashtable-contains?$5458$F0M
     (case-lambda
       ((g$ht$5441$F0M g$key$5442$F0M)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$5441$F0M
          g$key$5442$F0M))))
   (g$hashtable-update!$5425$F0M
     g$hashtable-update!$5459$F0M
     (case-lambda
       ((g$ht$5443$F0M g$key$5444$F0M g$proc$5445$F0M g$default$5446$F0M)
        (g$hashtable-set!$5422$F0M
          g$ht$5443$F0M
          g$key$5444$F0M
          (g$proc$5445$F0M
            (g$hashtable-ref$5421$F0M
              g$ht$5443$F0M
              g$key$5444$F0M
              g$default$5446$F0M))))))
   (g$hashtable-clear!$5426$F0M
     g$hashtable-clear!$5460$F0M
     (case-lambda
       ((g$ht$5447$F0M) (g$hashtable-clear!$5426$F0M g$ht$5447$F0M '32))
       ((g$ht$5448$F0M g$k$5449$F0M)
        (clr-call-internal 'hashtable 'clear g$ht$5448$F0M))))
   (g$clear-usings$5428$F0M
     g$clear-usings$5461$F0M
     (clr-clear-usings-internal)))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$5463$F0M g$using$5470$F0M (clr-using-internal 'system.io))
   (g$file-exists?$5464$F0M
     g$file-exists?$5471$F0M
     (case-lambda
       ((g$fn$5467$F0M) (clr-call-internal 'file 'exists '() g$fn$5467$F0M))))
   (g$delete-file$5465$F0M
     g$delete-file$5472$F0M
     (case-lambda
       ((g$fn$5468$F0M) (clr-call-internal 'file 'delete '() g$fn$5468$F0M))))
   (g$get-directory-name$5466$F0M
     g$get-directory-name$5473$F0M
     (case-lambda
       ((g$path$5469$F0M)
        (clr-call-internal 'path 'getdirectoryname '() g$path$5469$F0M)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$5474$F0M
     g$native-endianness$5585$F0M
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$5475$F0M
     g$bytevector-u16-ref$5586$F0M
     (case-lambda
       ((g$bytevector$5503$F0M g$k$5504$F0M g$endianness$5505$F0M)
        (bytevector-uint-ref
          g$bytevector$5503$F0M
          g$k$5504$F0M
          g$endianness$5505$F0M
          '2))))
   (g$bytevector-s16-ref$5476$F0M
     g$bytevector-s16-ref$5587$F0M
     (case-lambda
       ((g$bytevector$5506$F0M g$k$5507$F0M g$endianness$5508$F0M)
        (bytevector-sint-ref
          g$bytevector$5506$F0M
          g$k$5507$F0M
          g$endianness$5508$F0M
          '2))))
   (g$bytevector-u16-native-ref$5477$F0M
     g$bytevector-u16-native-ref$5588$F0M
     (case-lambda
       ((g$bytevector$5509$F0M g$k$5510$F0M)
        (bytevector-uint-ref
          g$bytevector$5509$F0M
          g$k$5510$F0M
          (g$native-endianness$5474$F0M)
          '2))))
   (g$bytevector-s16-native-ref$5478$F0M
     g$bytevector-s16-native-ref$5589$F0M
     (case-lambda
       ((g$bytevector$5511$F0M g$k$5512$F0M)
        (bytevector-sint-ref
          g$bytevector$5511$F0M
          g$k$5512$F0M
          (g$native-endianness$5474$F0M)
          '2))))
   (g$bytevector-u16-set!$5479$F0M
     g$bytevector-u16-set!$5590$F0M
     (case-lambda
       ((g$bytevector$5513$F0M g$k$5514$F0M g$n$5515$F0M g$endianness$5516$F0M)
        (bytevector-uint-set!
          g$bytevector$5513$F0M
          g$k$5514$F0M
          g$n$5515$F0M
          g$endianness$5516$F0M
          '2))))
   (g$bytevector-s16-set!$5480$F0M
     g$bytevector-s16-set!$5591$F0M
     (case-lambda
       ((g$bytevector$5517$F0M g$k$5518$F0M g$n$5519$F0M g$endianness$5520$F0M)
        (bytevector-sint-set!
          g$bytevector$5517$F0M
          g$k$5518$F0M
          g$n$5519$F0M
          g$endianness$5520$F0M
          '2))))
   (g$bytevector-u16-native-set!$5481$F0M
     g$bytevector-u16-native-set!$5592$F0M
     (case-lambda
       ((g$bytevector$5521$F0M g$k$5522$F0M g$n$5523$F0M)
        (bytevector-uint-set!
          g$bytevector$5521$F0M
          g$k$5522$F0M
          g$n$5523$F0M
          (g$native-endianness$5474$F0M)
          '2))))
   (g$bytevector-s16-native-set!$5482$F0M
     g$bytevector-s16-native-set!$5593$F0M
     (case-lambda
       ((g$bytevector$5524$F0M g$k$5525$F0M g$n$5526$F0M)
        (bytevector-sint-set!
          g$bytevector$5524$F0M
          g$k$5525$F0M
          g$n$5526$F0M
          (g$native-endianness$5474$F0M)
          '2))))
   (g$bytevector-u32-ref$5483$F0M
     g$bytevector-u32-ref$5594$F0M
     (case-lambda
       ((g$bytevector$5527$F0M g$k$5528$F0M g$endianness$5529$F0M)
        (bytevector-uint-ref
          g$bytevector$5527$F0M
          g$k$5528$F0M
          g$endianness$5529$F0M
          '4))))
   (g$bytevector-s32-ref$5484$F0M
     g$bytevector-s32-ref$5595$F0M
     (case-lambda
       ((g$bytevector$5530$F0M g$k$5531$F0M g$endianness$5532$F0M)
        (bytevector-sint-ref
          g$bytevector$5530$F0M
          g$k$5531$F0M
          g$endianness$5532$F0M
          '4))))
   (g$bytevector-u32-native-ref$5485$F0M
     g$bytevector-u32-native-ref$5596$F0M
     (case-lambda
       ((g$bytevector$5533$F0M g$k$5534$F0M)
        (bytevector-uint-ref
          g$bytevector$5533$F0M
          g$k$5534$F0M
          (g$native-endianness$5474$F0M)
          '4))))
   (g$bytevector-s32-native-ref$5486$F0M
     g$bytevector-s32-native-ref$5597$F0M
     (case-lambda
       ((g$bytevector$5535$F0M g$k$5536$F0M)
        (bytevector-sint-ref
          g$bytevector$5535$F0M
          g$k$5536$F0M
          (g$native-endianness$5474$F0M)
          '4))))
   (g$bytevector-u32-set!$5487$F0M
     g$bytevector-u32-set!$5598$F0M
     (case-lambda
       ((g$bytevector$5537$F0M g$k$5538$F0M g$n$5539$F0M g$endianness$5540$F0M)
        (bytevector-uint-set!
          g$bytevector$5537$F0M
          g$k$5538$F0M
          g$n$5539$F0M
          g$endianness$5540$F0M
          '4))))
   (g$bytevector-s32-set!$5488$F0M
     g$bytevector-s32-set!$5599$F0M
     (case-lambda
       ((g$bytevector$5541$F0M g$k$5542$F0M g$n$5543$F0M g$endianness$5544$F0M)
        (bytevector-sint-set!
          g$bytevector$5541$F0M
          g$k$5542$F0M
          g$n$5543$F0M
          g$endianness$5544$F0M
          '4))))
   (g$bytevector-u32-native-set!$5489$F0M
     g$bytevector-u32-native-set!$5600$F0M
     (case-lambda
       ((g$bytevector$5545$F0M g$k$5546$F0M g$n$5547$F0M)
        (bytevector-uint-set!
          g$bytevector$5545$F0M
          g$k$5546$F0M
          g$n$5547$F0M
          (g$native-endianness$5474$F0M)
          '4))))
   (g$bytevector-s32-native-set!$5490$F0M
     g$bytevector-s32-native-set!$5601$F0M
     (case-lambda
       ((g$bytevector$5548$F0M g$k$5549$F0M g$n$5550$F0M)
        (bytevector-sint-set!
          g$bytevector$5548$F0M
          g$k$5549$F0M
          g$n$5550$F0M
          (g$native-endianness$5474$F0M)
          '4))))
   (g$bytevector-u64-ref$5491$F0M
     g$bytevector-u64-ref$5602$F0M
     (case-lambda
       ((g$bytevector$5551$F0M g$k$5552$F0M g$endianness$5553$F0M)
        (bytevector-uint-ref
          g$bytevector$5551$F0M
          g$k$5552$F0M
          g$endianness$5553$F0M
          '8))))
   (g$bytevector-s64-ref$5492$F0M
     g$bytevector-s64-ref$5603$F0M
     (case-lambda
       ((g$bytevector$5554$F0M g$k$5555$F0M g$endianness$5556$F0M)
        (bytevector-sint-ref
          g$bytevector$5554$F0M
          g$k$5555$F0M
          g$endianness$5556$F0M
          '8))))
   (g$bytevector-u64-native-ref$5493$F0M
     g$bytevector-u64-native-ref$5604$F0M
     (case-lambda
       ((g$bytevector$5557$F0M g$k$5558$F0M)
        (bytevector-uint-ref
          g$bytevector$5557$F0M
          g$k$5558$F0M
          (g$native-endianness$5474$F0M)
          '8))))
   (g$bytevector-s64-native-ref$5494$F0M
     g$bytevector-s64-native-ref$5605$F0M
     (case-lambda
       ((g$bytevector$5559$F0M g$k$5560$F0M)
        (bytevector-sint-ref
          g$bytevector$5559$F0M
          g$k$5560$F0M
          (g$native-endianness$5474$F0M)
          '8))))
   (g$bytevector-u64-set!$5495$F0M
     g$bytevector-u64-set!$5606$F0M
     (case-lambda
       ((g$bytevector$5561$F0M g$k$5562$F0M g$n$5563$F0M g$endianness$5564$F0M)
        (bytevector-uint-set!
          g$bytevector$5561$F0M
          g$k$5562$F0M
          g$n$5563$F0M
          g$endianness$5564$F0M
          '8))))
   (g$bytevector-s64-set!$5496$F0M
     g$bytevector-s64-set!$5607$F0M
     (case-lambda
       ((g$bytevector$5565$F0M g$k$5566$F0M g$n$5567$F0M g$endianness$5568$F0M)
        (bytevector-sint-set!
          g$bytevector$5565$F0M
          g$k$5566$F0M
          g$n$5567$F0M
          g$endianness$5568$F0M
          '8))))
   (g$bytevector-u64-native-set!$5497$F0M
     g$bytevector-u64-native-set!$5608$F0M
     (case-lambda
       ((g$bytevector$5569$F0M g$k$5570$F0M g$n$5571$F0M)
        (bytevector-uint-set!
          g$bytevector$5569$F0M
          g$k$5570$F0M
          g$n$5571$F0M
          (g$native-endianness$5474$F0M)
          '8))))
   (g$bytevector-s64-native-set!$5498$F0M
     g$bytevector-s64-native-set!$5609$F0M
     (case-lambda
       ((g$bytevector$5572$F0M g$k$5573$F0M g$n$5574$F0M)
        (bytevector-sint-set!
          g$bytevector$5572$F0M
          g$k$5573$F0M
          g$n$5574$F0M
          (g$native-endianness$5474$F0M)
          '8))))
   (g$bytevector-ieee-single-native-ref$5499$F0M
     g$bytevector-ieee-single-native-ref$5610$F0M
     (case-lambda
       ((g$bytevector$5575$F0M g$k$5576$F0M)
        (if (not (zero? (mod g$k$5576$F0M '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$5576$F0M)
          (bytevector-ieee-single-ref
            g$bytevector$5575$F0M
            g$k$5576$F0M
            (g$native-endianness$5474$F0M))))))
   (g$bytevector-ieee-double-native-ref$5500$F0M
     g$bytevector-ieee-double-native-ref$5611$F0M
     (case-lambda
       ((g$bytevector$5577$F0M g$k$5578$F0M)
        (if (not (zero? (mod g$k$5578$F0M '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$5578$F0M)
          (bytevector-ieee-double-ref
            g$bytevector$5577$F0M
            g$k$5578$F0M
            (g$native-endianness$5474$F0M))))))
   (g$bytevector-ieee-single-native-set!$5501$F0M
     g$bytevector-ieee-single-native-set!$5612$F0M
     (case-lambda
       ((g$bytevector$5579$F0M g$k$5580$F0M g$x$5581$F0M)
        (if (not (zero? (mod g$k$5580$F0M '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$5580$F0M)
          (bytevector-ieee-single-set!
            g$bytevector$5579$F0M
            g$k$5580$F0M
            g$x$5581$F0M
            (g$native-endianness$5474$F0M))))))
   (g$bytevector-ieee-double-native-set!$5502$F0M
     g$bytevector-ieee-double-native-set!$5613$F0M
     (case-lambda
       ((g$bytevector$5582$F0M g$k$5583$F0M g$x$5584$F0M)
        (if (not (zero? (mod g$k$5583$F0M '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$5583$F0M)
          (bytevector-ieee-double-set!
            g$bytevector$5582$F0M
            g$k$5583$F0M
            g$x$5584$F0M
            (g$native-endianness$5474$F0M)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$6624$5614$F0M
     g$6624$5709$F0M
     (make-record-type-descriptor '&condition '#f 'g$6627$F0M '#f '#f '#()))
   (g$6626$5615$F0M g$6626$5710$F0M '#f)
   (g$6625$5616$F0M
     g$6625$5711$F0M
     (make-record-constructor-descriptor
       g$6624$5614$F0M
       '#f
       g$6626$5615$F0M))
   (g$&condition?$5617$F0M
     g$&condition?$5712$F0M
     (record-predicate g$6624$5614$F0M))
   (g$make-&condition$5618$F0M
     g$make-&condition$5713$F0M
     (record-constructor g$6625$5616$F0M))
   (g$&condition-rtd$5619$F0M g$&condition-rtd$5714$F0M g$6624$5614$F0M)
   (g$&condition-rcd$5620$F0M g$&condition-rcd$5715$F0M g$6625$5616$F0M)
   (g$6640$5621$F0M
     g$6640$5716$F0M
     (make-record-type-descriptor
       '&message
       g$6624$5614$F0M
       'g$6643$F0M
       '#f
       '#f
       '#((immutable message))))
   (g$6642$5622$F0M g$6642$5717$F0M '#f)
   (g$6641$5623$F0M
     g$6641$5718$F0M
     (make-record-constructor-descriptor
       g$6640$5621$F0M
       g$6625$5616$F0M
       g$6642$5622$F0M))
   (g$6639$5624$F0M g$6639$5719$F0M (record-predicate g$6640$5621$F0M))
   (g$make-message-condition$5625$F0M
     g$make-message-condition$5720$F0M
     (record-constructor g$6641$5623$F0M))
   (g$6638$5626$F0M g$6638$5721$F0M (record-accessor g$6640$5621$F0M '0))
   (g$message-condition?$5627$F0M
     g$message-condition?$5722$F0M
     (condition-predicate g$6640$5621$F0M))
   (g$condition-message$5628$F0M
     g$condition-message$5723$F0M
     (condition-accessor g$6640$5621$F0M g$6638$5626$F0M))
   (g$6656$5629$F0M
     g$6656$5724$F0M
     (make-record-type-descriptor
       '&warning
       g$6624$5614$F0M
       'g$6659$F0M
       '#f
       '#f
       '#()))
   (g$6658$5630$F0M g$6658$5725$F0M '#f)
   (g$6657$5631$F0M
     g$6657$5726$F0M
     (make-record-constructor-descriptor
       g$6656$5629$F0M
       g$6625$5616$F0M
       g$6658$5630$F0M))
   (g$6655$5632$F0M g$6655$5727$F0M (record-predicate g$6656$5629$F0M))
   (g$make-warning$5633$F0M
     g$make-warning$5728$F0M
     (record-constructor g$6657$5631$F0M))
   (g$warning?$5634$F0M
     g$warning?$5729$F0M
     (condition-predicate g$6656$5629$F0M))
   (g$6670$5635$F0M
     g$6670$5730$F0M
     (make-record-type-descriptor
       '&serious
       g$6624$5614$F0M
       'g$6673$F0M
       '#f
       '#f
       '#()))
   (g$6672$5636$F0M g$6672$5731$F0M '#f)
   (g$6671$5637$F0M
     g$6671$5732$F0M
     (make-record-constructor-descriptor
       g$6670$5635$F0M
       g$6625$5616$F0M
       g$6672$5636$F0M))
   (g$6669$5638$F0M g$6669$5733$F0M (record-predicate g$6670$5635$F0M))
   (g$make-serious-condition$5639$F0M
     g$make-serious-condition$5734$F0M
     (record-constructor g$6671$5637$F0M))
   (g$serious-condition?$5640$F0M
     g$serious-condition?$5735$F0M
     (condition-predicate g$6670$5635$F0M))
   (g$6684$5641$F0M
     g$6684$5736$F0M
     (make-record-type-descriptor
       '&error
       g$6670$5635$F0M
       'g$6687$F0M
       '#f
       '#f
       '#()))
   (g$6686$5642$F0M g$6686$5737$F0M '#f)
   (g$6685$5643$F0M
     g$6685$5738$F0M
     (make-record-constructor-descriptor
       g$6684$5641$F0M
       g$6671$5637$F0M
       g$6686$5642$F0M))
   (g$6683$5644$F0M g$6683$5739$F0M (record-predicate g$6684$5641$F0M))
   (g$make-error$5645$F0M
     g$make-error$5740$F0M
     (record-constructor g$6685$5643$F0M))
   (g$error?$5646$F0M
     g$error?$5741$F0M
     (condition-predicate g$6684$5641$F0M))
   (g$6698$5647$F0M
     g$6698$5742$F0M
     (make-record-type-descriptor
       '&violation
       g$6670$5635$F0M
       'g$6701$F0M
       '#f
       '#f
       '#()))
   (g$6700$5648$F0M g$6700$5743$F0M '#f)
   (g$6699$5649$F0M
     g$6699$5744$F0M
     (make-record-constructor-descriptor
       g$6698$5647$F0M
       g$6671$5637$F0M
       g$6700$5648$F0M))
   (g$6697$5650$F0M g$6697$5745$F0M (record-predicate g$6698$5647$F0M))
   (g$make-violation$5651$F0M
     g$make-violation$5746$F0M
     (record-constructor g$6699$5649$F0M))
   (g$violation?$5652$F0M
     g$violation?$5747$F0M
     (condition-predicate g$6698$5647$F0M))
   (g$6712$5653$F0M
     g$6712$5748$F0M
     (make-record-type-descriptor
       '&assertion
       g$6698$5647$F0M
       'g$6715$F0M
       '#f
       '#f
       '#()))
   (g$6714$5654$F0M g$6714$5749$F0M '#f)
   (g$6713$5655$F0M
     g$6713$5750$F0M
     (make-record-constructor-descriptor
       g$6712$5653$F0M
       g$6699$5649$F0M
       g$6714$5654$F0M))
   (g$6711$5656$F0M g$6711$5751$F0M (record-predicate g$6712$5653$F0M))
   (g$make-assertion-violation$5657$F0M
     g$make-assertion-violation$5752$F0M
     (record-constructor g$6713$5655$F0M))
   (g$assertion-violation?$5658$F0M
     g$assertion-violation?$5753$F0M
     (condition-predicate g$6712$5653$F0M))
   (g$6727$5659$F0M
     g$6727$5754$F0M
     (make-record-type-descriptor
       '&irritants
       g$6624$5614$F0M
       'g$6730$F0M
       '#f
       '#f
       '#((immutable irritants))))
   (g$6729$5660$F0M g$6729$5755$F0M '#f)
   (g$6728$5661$F0M
     g$6728$5756$F0M
     (make-record-constructor-descriptor
       g$6727$5659$F0M
       g$6625$5616$F0M
       g$6729$5660$F0M))
   (g$6726$5662$F0M g$6726$5757$F0M (record-predicate g$6727$5659$F0M))
   (g$make-irritants-condition$5663$F0M
     g$make-irritants-condition$5758$F0M
     (record-constructor g$6728$5661$F0M))
   (g$6725$5664$F0M g$6725$5759$F0M (record-accessor g$6727$5659$F0M '0))
   (g$irritants-condition?$5665$F0M
     g$irritants-condition?$5760$F0M
     (condition-predicate g$6727$5659$F0M))
   (g$condition-irritants$5666$F0M
     g$condition-irritants$5761$F0M
     (condition-accessor g$6727$5659$F0M g$6725$5664$F0M))
   (g$6744$5667$F0M
     g$6744$5762$F0M
     (make-record-type-descriptor
       '&who
       g$6624$5614$F0M
       'g$6747$F0M
       '#f
       '#f
       '#((immutable who))))
   (g$6746$5668$F0M g$6746$5763$F0M '#f)
   (g$6745$5669$F0M
     g$6745$5764$F0M
     (make-record-constructor-descriptor
       g$6744$5667$F0M
       g$6625$5616$F0M
       g$6746$5668$F0M))
   (g$6743$5670$F0M g$6743$5765$F0M (record-predicate g$6744$5667$F0M))
   (g$make-who-condition$5671$F0M
     g$make-who-condition$5766$F0M
     (record-constructor g$6745$5669$F0M))
   (g$6742$5672$F0M g$6742$5767$F0M (record-accessor g$6744$5667$F0M '0))
   (g$who-condition?$5673$F0M
     g$who-condition?$5768$F0M
     (condition-predicate g$6744$5667$F0M))
   (g$condition-who$5674$F0M
     g$condition-who$5769$F0M
     (condition-accessor g$6744$5667$F0M g$6742$5672$F0M))
   (g$6760$5675$F0M
     g$6760$5770$F0M
     (make-record-type-descriptor
       '&non-continuable
       g$6698$5647$F0M
       'g$6763$F0M
       '#f
       '#f
       '#()))
   (g$6762$5676$F0M g$6762$5771$F0M '#f)
   (g$6761$5677$F0M
     g$6761$5772$F0M
     (make-record-constructor-descriptor
       g$6760$5675$F0M
       g$6699$5649$F0M
       g$6762$5676$F0M))
   (g$6759$5678$F0M g$6759$5773$F0M (record-predicate g$6760$5675$F0M))
   (g$make-non-continuable-violation$5679$F0M
     g$make-non-continuable-violation$5774$F0M
     (record-constructor g$6761$5677$F0M))
   (g$non-continuable-violation?$5680$F0M
     g$non-continuable-violation?$5775$F0M
     (condition-predicate g$6760$5675$F0M))
   (g$6774$5681$F0M
     g$6774$5776$F0M
     (make-record-type-descriptor
       '&implementation-restriction
       g$6698$5647$F0M
       'g$6777$F0M
       '#f
       '#f
       '#()))
   (g$6776$5682$F0M g$6776$5777$F0M '#f)
   (g$6775$5683$F0M
     g$6775$5778$F0M
     (make-record-constructor-descriptor
       g$6774$5681$F0M
       g$6699$5649$F0M
       g$6776$5682$F0M))
   (g$6773$5684$F0M g$6773$5779$F0M (record-predicate g$6774$5681$F0M))
   (g$make-implementation-restriction-violation$5685$F0M
     g$make-implementation-restriction-violation$5780$F0M
     (record-constructor g$6775$5683$F0M))
   (g$implementation-restriction-violation?$5686$F0M
     g$implementation-restriction-violation?$5781$F0M
     (condition-predicate g$6774$5681$F0M))
   (g$6788$5687$F0M
     g$6788$5782$F0M
     (make-record-type-descriptor
       '&lexical
       g$6698$5647$F0M
       'g$6791$F0M
       '#f
       '#f
       '#()))
   (g$6790$5688$F0M g$6790$5783$F0M '#f)
   (g$6789$5689$F0M
     g$6789$5784$F0M
     (make-record-constructor-descriptor
       g$6788$5687$F0M
       g$6699$5649$F0M
       g$6790$5688$F0M))
   (g$6787$5690$F0M g$6787$5785$F0M (record-predicate g$6788$5687$F0M))
   (g$make-lexical-violation$5691$F0M
     g$make-lexical-violation$5786$F0M
     (record-constructor g$6789$5689$F0M))
   (g$lexical-violation?$5692$F0M
     g$lexical-violation?$5787$F0M
     (condition-predicate g$6788$5687$F0M))
   (g$6804$5693$F0M
     g$6804$5788$F0M
     (make-record-type-descriptor
       '&syntax
       g$6698$5647$F0M
       'g$6807$F0M
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6806$5694$F0M g$6806$5789$F0M '#f)
   (g$6805$5695$F0M
     g$6805$5790$F0M
     (make-record-constructor-descriptor
       g$6804$5693$F0M
       g$6699$5649$F0M
       g$6806$5694$F0M))
   (g$6803$5696$F0M g$6803$5791$F0M (record-predicate g$6804$5693$F0M))
   (g$make-syntax-violation$5697$F0M
     g$make-syntax-violation$5792$F0M
     (record-constructor g$6805$5695$F0M))
   (g$6801$5698$F0M g$6801$5793$F0M (record-accessor g$6804$5693$F0M '0))
   (g$6802$5699$F0M g$6802$5794$F0M (record-accessor g$6804$5693$F0M '1))
   (g$syntax-violation?$5700$F0M
     g$syntax-violation?$5795$F0M
     (condition-predicate g$6804$5693$F0M))
   (g$syntax-violation-form$5701$F0M
     g$syntax-violation-form$5796$F0M
     (condition-accessor g$6804$5693$F0M g$6801$5698$F0M))
   (g$syntax-violation-subform$5702$F0M
     g$syntax-violation-subform$5797$F0M
     (condition-accessor g$6804$5693$F0M g$6802$5699$F0M))
   (g$6822$5703$F0M
     g$6822$5798$F0M
     (make-record-type-descriptor
       '&undefined
       g$6698$5647$F0M
       'g$6825$F0M
       '#f
       '#f
       '#()))
   (g$6824$5704$F0M g$6824$5799$F0M '#f)
   (g$6823$5705$F0M
     g$6823$5800$F0M
     (make-record-constructor-descriptor
       g$6822$5703$F0M
       g$6699$5649$F0M
       g$6824$5704$F0M))
   (g$6821$5706$F0M g$6821$5801$F0M (record-predicate g$6822$5703$F0M))
   (g$make-undefined-violation$5707$F0M
     g$make-undefined-violation$5802$F0M
     (record-constructor g$6823$5705$F0M))
   (g$undefined-violation?$5708$F0M
     g$undefined-violation?$5803$F0M
     (condition-predicate g$6822$5703$F0M)))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$5804$F0M
     g$append!$5810$F0M
     (case-lambda
       ((g$a$5805$F0M . g$b$5806$F0M)
        (if (null? g$a$5805$F0M)
          g$b$5806$F0M
          (if (null? g$b$5806$F0M)
            g$a$5805$F0M
            (begin
              ((letrec ((g$f$5807$F0M
                          (case-lambda
                            ((g$a$5808$F0M)
                             ((case-lambda
                                ((g$n$5809$F0M)
                                 (if (null? g$n$5809$F0M)
                                   (set-cdr! g$a$5808$F0M g$b$5806$F0M)
                                   (g$f$5807$F0M g$n$5809$F0M))))
                              (cdr g$a$5808$F0M))))))
                 g$f$5807$F0M)
               g$a$5805$F0M)
              g$a$5805$F0M)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$sign$5811$F0M
     g$sign$5829$F0M
     (case-lambda
       ((g$n$5817$F0M)
        (if (> g$n$5817$F0M '0) '1 (if (< g$n$5817$F0M '0) '-1 '0)))))
   (g$quotient$5812$F0M
     g$quotient$5830$F0M
     (case-lambda
       ((g$n1$5818$F0M g$n2$5819$F0M)
        (begin
          (if (not (integer-valued? g$n1$5818$F0M))
            (assertion-violation 'quotient '"not an integer" g$n1$5818$F0M)
            (void))
          (if (not (integer-valued? g$n2$5819$F0M))
            (assertion-violation 'quotient '"not an integer" g$n2$5819$F0M)
            (void))
          (* (g$sign$5811$F0M g$n1$5818$F0M)
             (g$sign$5811$F0M g$n2$5819$F0M)
             (div (abs g$n1$5818$F0M) (abs g$n2$5819$F0M)))))))
   (g$remainder$5813$F0M
     g$remainder$5831$F0M
     (case-lambda
       ((g$n1$5820$F0M g$n2$5821$F0M)
        (begin
          (if (not (integer-valued? g$n1$5820$F0M))
            (assertion-violation 'remainder '"not an integer" g$n1$5820$F0M)
            (void))
          (if (not (integer-valued? g$n2$5821$F0M))
            (assertion-violation 'remainder '"not an integer" g$n2$5821$F0M)
            (void))
          (* (g$sign$5811$F0M g$n1$5820$F0M)
             (mod (abs g$n1$5820$F0M) (abs g$n2$5821$F0M)))))))
   (g$modulo$5814$F0M
     g$modulo$5832$F0M
     (case-lambda
       ((g$n1$5822$F0M g$n2$5823$F0M)
        (begin
          (if (not (integer-valued? g$n1$5822$F0M))
            (assertion-violation 'modulo '"not an integer" g$n1$5822$F0M)
            (void))
          (if (not (integer-valued? g$n2$5823$F0M))
            (assertion-violation 'modulo '"not an integer" g$n2$5823$F0M)
            (void))
          (* (g$sign$5811$F0M g$n2$5823$F0M)
             (mod (* (g$sign$5811$F0M g$n2$5823$F0M) g$n1$5822$F0M)
                  (abs g$n2$5823$F0M)))))))
   (g$make-promise$5815$F0M
     g$make-promise$5833$F0M
     (case-lambda
       ((g$proc$5824$F0M)
        ((case-lambda
           ((g$result-ready?$5825$F0M g$result$5826$F0M)
            (case-lambda
              (()
               (if g$result-ready?$5825$F0M
                 g$result$5826$F0M
                 ((case-lambda
                    ((g$x$5827$F0M)
                     (if g$result-ready?$5825$F0M
                       g$result$5826$F0M
                       (begin
                         (set! g$result-ready?$5825$F0M '#t)
                         (set! g$result$5826$F0M g$x$5827$F0M)
                         g$result$5826$F0M))))
                  (g$proc$5824$F0M)))))))
         '#f
         '#f))))
   (g$force$5816$F0M
     g$force$5834$F0M
     (case-lambda ((g$object$5828$F0M) (g$object$5828$F0M)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$5835$F0M
     g$split$5861$F0M
     (case-lambda
       ((g$ls$5838$F0M)
        ((letrec ((g$loop$5839$F0M
                    (case-lambda
                      ((g$rest$5840$F0M g$left$5841$F0M g$right$5842$F0M)
                       (if (null? g$rest$5840$F0M)
                         (cons g$left$5841$F0M g$right$5842$F0M)
                         (if (null? (cdr g$rest$5840$F0M))
                           (cons
                             (cons (car g$rest$5840$F0M) g$left$5841$F0M)
                             g$right$5842$F0M)
                           (g$loop$5839$F0M
                             (g$cddr$5180$F0M g$rest$5840$F0M)
                             (cons (car g$rest$5840$F0M) g$left$5841$F0M)
                             (cons
                               (g$cadr$5178$F0M g$rest$5840$F0M)
                               g$right$5842$F0M))))))))
           g$loop$5839$F0M)
         g$ls$5838$F0M
         '()
         '()))))
   (g$reverse-it$5836$F0M
     g$reverse-it$5862$F0M
     (case-lambda
       ((g$head$5843$F0M g$tail$5844$F0M)
        (if (null? g$head$5843$F0M)
          g$tail$5844$F0M
          ((case-lambda
             ((g$hd$5845$F0M g$tl$5846$F0M)
              (g$reverse-it$5836$F0M
                g$tl$5846$F0M
                (cons g$hd$5845$F0M g$tail$5844$F0M))))
           (car g$head$5843$F0M)
           (cdr g$head$5843$F0M))))))
   (g$list-sort$5837$F0M
     g$list-sort$5863$F0M
     (case-lambda
       ((g$precedes?$5847$F0M g$ls$5848$F0M)
        ((case-lambda
           ((g$merge$5849$F0M)
            ((case-lambda
               (()
                (if (null? g$ls$5848$F0M)
                  '()
                  ((letrec ((g$helper$5850$F0M
                              (case-lambda
                                ((g$piece$5851$F0M)
                                 (if (null? (cdr g$piece$5851$F0M))
                                   g$piece$5851$F0M
                                   ((case-lambda
                                      ((g$parts$5852$F0M)
                                       (g$merge$5849$F0M
                                         (g$helper$5850$F0M
                                           (car g$parts$5852$F0M))
                                         (g$helper$5850$F0M
                                           (cdr g$parts$5852$F0M)))))
                                    (g$split$5835$F0M g$piece$5851$F0M)))))))
                     g$helper$5850$F0M)
                   g$ls$5848$F0M)))))))
         (case-lambda
           ((g$list-1$5853$F0M g$list-2$5854$F0M)
            ((letrec ((g$loop$5855$F0M
                        (case-lambda
                          ((g$source-1$5856$F0M
                             g$source-2$5857$F0M
                             g$so-far$5858$F0M)
                           (if (null? g$source-1$5856$F0M)
                             (g$reverse-it$5836$F0M
                               g$so-far$5858$F0M
                               g$source-2$5857$F0M)
                             (if (null? g$source-2$5857$F0M)
                               (g$reverse-it$5836$F0M
                                 g$so-far$5858$F0M
                                 g$source-1$5856$F0M)
                               ((case-lambda
                                  ((g$car-1$5859$F0M g$car-2$5860$F0M)
                                   (if (g$precedes?$5847$F0M
                                         g$car-2$5860$F0M
                                         g$car-1$5859$F0M)
                                     (g$loop$5855$F0M
                                       g$source-1$5856$F0M
                                       (cdr g$source-2$5857$F0M)
                                       (cons
                                         g$car-2$5860$F0M
                                         g$so-far$5858$F0M))
                                     (g$loop$5855$F0M
                                       g$source-2$5857$F0M
                                       (cdr g$source-1$5856$F0M)
                                       (cons
                                         g$car-1$5859$F0M
                                         g$so-far$5858$F0M)))))
                                (car g$source-1$5856$F0M)
                                (car g$source-2$5857$F0M))))))))
               g$loop$5855$F0M)
             g$list-1$5853$F0M
             g$list-2$5854$F0M
             '()))))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$5870$F0M
     g$string-ci=?$5936$F0M
     (case-lambda
       ((g$a$5886$F0M g$b$5887$F0M . g$rest$5888$F0M)
        (begin
          (if (not (string? g$a$5886$F0M))
            (assertion-violation 'string-ci=? '"not a string" g$a$5886$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5889$F0M)
               (begin
                 (if (not (string? g$x$5889$F0M))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$5889$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5890$F0M)
                     (begin (set! g$a$5886$F0M g$x$5889$F0M) g$r$5890$F0M)))
                  (= (string-ci-compare g$a$5886$F0M g$x$5889$F0M) '0)))))
            (cons g$b$5887$F0M g$rest$5888$F0M))))))
   (g$string-ci<?$5871$F0M
     g$string-ci<?$5937$F0M
     (case-lambda
       ((g$a$5891$F0M g$b$5892$F0M . g$rest$5893$F0M)
        (begin
          (if (not (string? g$a$5891$F0M))
            (assertion-violation 'string-ci<? '"not a string" g$a$5891$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5894$F0M)
               (begin
                 (if (not (string? g$x$5894$F0M))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$5894$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5895$F0M)
                     (begin (set! g$a$5891$F0M g$x$5894$F0M) g$r$5895$F0M)))
                  (< (string-ci-compare g$a$5891$F0M g$x$5894$F0M) '0)))))
            (cons g$b$5892$F0M g$rest$5893$F0M))))))
   (g$string-ci>?$5872$F0M
     g$string-ci>?$5938$F0M
     (case-lambda
       ((g$a$5896$F0M g$b$5897$F0M . g$rest$5898$F0M)
        (begin
          (if (not (string? g$a$5896$F0M))
            (assertion-violation 'string-ci>? '"not a string" g$a$5896$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5899$F0M)
               (begin
                 (if (not (string? g$x$5899$F0M))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$5899$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5900$F0M)
                     (begin (set! g$a$5896$F0M g$x$5899$F0M) g$r$5900$F0M)))
                  (> (string-ci-compare g$a$5896$F0M g$x$5899$F0M) '0)))))
            (cons g$b$5897$F0M g$rest$5898$F0M))))))
   (g$string-ci<=?$5873$F0M
     g$string-ci<=?$5939$F0M
     (case-lambda
       ((g$a$5901$F0M g$b$5902$F0M . g$rest$5903$F0M)
        (begin
          (if (not (string? g$a$5901$F0M))
            (assertion-violation 'string-ci<=? '"not a string" g$a$5901$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5904$F0M)
               (begin
                 (if (not (string? g$x$5904$F0M))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$5904$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5905$F0M)
                     (begin (set! g$a$5901$F0M g$x$5904$F0M) g$r$5905$F0M)))
                  (<= (string-ci-compare g$a$5901$F0M g$x$5904$F0M) '0)))))
            (cons g$b$5902$F0M g$rest$5903$F0M))))))
   (g$string-ci>=?$5874$F0M
     g$string-ci>=?$5940$F0M
     (case-lambda
       ((g$a$5906$F0M g$b$5907$F0M . g$rest$5908$F0M)
        (begin
          (if (not (string? g$a$5906$F0M))
            (assertion-violation 'string-ci>=? '"not a string" g$a$5906$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5909$F0M)
               (begin
                 (if (not (string? g$x$5909$F0M))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$5909$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5910$F0M)
                     (begin (set! g$a$5906$F0M g$x$5909$F0M) g$r$5910$F0M)))
                  (>= (string-ci-compare g$a$5906$F0M g$x$5909$F0M) '0)))))
            (cons g$b$5907$F0M g$rest$5908$F0M))))))
   (g$char-ci=?$5881$F0M
     g$char-ci=?$5941$F0M
     (case-lambda
       ((g$a$5911$F0M g$b$5912$F0M . g$rest$5913$F0M)
        (begin
          (if (not (char? g$a$5911$F0M))
            (assertion-violation 'char-ci=? '"not a char" g$a$5911$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5914$F0M)
               (begin
                 (if (not (char? g$x$5914$F0M))
                   (assertion-violation 'char-ci=? '"not a char" g$x$5914$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5915$F0M)
                     (begin (set! g$a$5911$F0M g$x$5914$F0M) g$r$5915$F0M)))
                  (= (char->integer (char-upcase g$a$5911$F0M))
                     (char->integer (char-upcase g$x$5914$F0M)))))))
            (cons g$b$5912$F0M g$rest$5913$F0M))))))
   (g$char-ci<?$5882$F0M
     g$char-ci<?$5942$F0M
     (case-lambda
       ((g$a$5916$F0M g$b$5917$F0M . g$rest$5918$F0M)
        (begin
          (if (not (char? g$a$5916$F0M))
            (assertion-violation 'char-ci<? '"not a char" g$a$5916$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5919$F0M)
               (begin
                 (if (not (char? g$x$5919$F0M))
                   (assertion-violation 'char-ci<? '"not a char" g$x$5919$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5920$F0M)
                     (begin (set! g$a$5916$F0M g$x$5919$F0M) g$r$5920$F0M)))
                  (< (char->integer (char-upcase g$a$5916$F0M))
                     (char->integer (char-upcase g$x$5919$F0M)))))))
            (cons g$b$5917$F0M g$rest$5918$F0M))))))
   (g$char-ci>?$5883$F0M
     g$char-ci>?$5943$F0M
     (case-lambda
       ((g$a$5921$F0M g$b$5922$F0M . g$rest$5923$F0M)
        (begin
          (if (not (char? g$a$5921$F0M))
            (assertion-violation 'char-ci>? '"not a char" g$a$5921$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5924$F0M)
               (begin
                 (if (not (char? g$x$5924$F0M))
                   (assertion-violation 'char-ci>? '"not a char" g$x$5924$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5925$F0M)
                     (begin (set! g$a$5921$F0M g$x$5924$F0M) g$r$5925$F0M)))
                  (> (char->integer (char-upcase g$a$5921$F0M))
                     (char->integer (char-upcase g$x$5924$F0M)))))))
            (cons g$b$5922$F0M g$rest$5923$F0M))))))
   (g$char-ci<=?$5884$F0M
     g$char-ci<=?$5944$F0M
     (case-lambda
       ((g$a$5926$F0M g$b$5927$F0M . g$rest$5928$F0M)
        (begin
          (if (not (char? g$a$5926$F0M))
            (assertion-violation 'char-ci<=? '"not a char" g$a$5926$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5929$F0M)
               (begin
                 (if (not (char? g$x$5929$F0M))
                   (assertion-violation 'char-ci<=? '"not a char" g$x$5929$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5930$F0M)
                     (begin (set! g$a$5926$F0M g$x$5929$F0M) g$r$5930$F0M)))
                  (<= (char->integer (char-upcase g$a$5926$F0M))
                      (char->integer (char-upcase g$x$5929$F0M)))))))
            (cons g$b$5927$F0M g$rest$5928$F0M))))))
   (g$char-ci>=?$5885$F0M
     g$char-ci>=?$5945$F0M
     (case-lambda
       ((g$a$5931$F0M g$b$5932$F0M . g$rest$5933$F0M)
        (begin
          (if (not (char? g$a$5931$F0M))
            (assertion-violation 'char-ci>=? '"not a char" g$a$5931$F0M)
            (void))
          (g$for-all$5014$F0M
            (case-lambda
              ((g$x$5934$F0M)
               (begin
                 (if (not (char? g$x$5934$F0M))
                   (assertion-violation 'char-ci>=? '"not a char" g$x$5934$F0M)
                   (void))
                 ((case-lambda
                    ((g$r$5935$F0M)
                     (begin (set! g$a$5931$F0M g$x$5934$F0M) g$r$5935$F0M)))
                  (>= (char->integer (char-upcase g$a$5931$F0M))
                      (char->integer (char-upcase g$x$5934$F0M)))))))
            (cons g$b$5932$F0M g$rest$5933$F0M)))))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$5946$F0M
     g$bitwise-if$5993$F0M
     (case-lambda
       ((g$ei1$5953$F0M g$ei2$5954$F0M g$ei3$5955$F0M)
        (bitwise-ior
          (bitwise-and g$ei1$5953$F0M g$ei2$5954$F0M)
          (bitwise-and (bitwise-not g$ei1$5953$F0M) g$ei3$5955$F0M)))))
   (g$bitwise-copy-bit$5947$F0M
     g$bitwise-copy-bit$5994$F0M
     (case-lambda
       ((g$ei1$5956$F0M g$ei2$5957$F0M g$ei3$5958$F0M)
        ((case-lambda
           ((g$mask$5959$F0M)
            ((case-lambda
               (()
                (g$bitwise-if$5946$F0M
                  g$mask$5959$F0M
                  (g$bitwise-arithmetic-shift-left$5950$F0M
                    g$ei3$5958$F0M
                    g$ei2$5957$F0M)
                  g$ei1$5956$F0M))))))
         (g$bitwise-arithmetic-shift-left$5950$F0M '1 g$ei2$5957$F0M)))))
   (g$bitwise-bit-field$5948$F0M
     g$bitwise-bit-field$5995$F0M
     (case-lambda
       ((g$ei1$5960$F0M g$ei2$5961$F0M g$ei3$5962$F0M)
        ((case-lambda
           ((g$mask$5963$F0M)
            (g$bitwise-arithmetic-shift-right$5951$F0M
              (bitwise-and g$ei1$5960$F0M g$mask$5963$F0M)
              g$ei2$5961$F0M)))
         (bitwise-not
           (g$bitwise-arithmetic-shift-left$5950$F0M '-1 g$ei3$5962$F0M))))))
   (g$bitwise-copy-bit-field$5949$F0M
     g$bitwise-copy-bit-field$5996$F0M
     (case-lambda
       ((g$ei1$5964$F0M g$ei2$5965$F0M g$ei3$5966$F0M g$ei4$5967$F0M)
        ((case-lambda
           ((g$to$5968$F0M)
            ((case-lambda
               ((g$start$5969$F0M)
                ((case-lambda
                   ((g$end$5970$F0M)
                    ((case-lambda
                       ((g$from$5971$F0M)
                        ((case-lambda
                           ((g$mask1$5972$F0M)
                            ((case-lambda
                               ((g$mask2$5973$F0M)
                                ((case-lambda
                                   ((g$mask$5974$F0M)
                                    ((case-lambda
                                       (()
                                        (g$bitwise-if$5946$F0M
                                          g$mask$5974$F0M
                                          (g$bitwise-arithmetic-shift-left$5950$F0M
                                            g$from$5971$F0M
                                            g$start$5969$F0M)
                                          g$to$5968$F0M))))))
                                 (bitwise-and
                                   g$mask1$5972$F0M
                                   g$mask2$5973$F0M))))
                             (bitwise-not
                               (g$bitwise-arithmetic-shift-left$5950$F0M
                                 '-1
                                 g$end$5970$F0M)))))
                         (g$bitwise-arithmetic-shift-left$5950$F0M
                           '-1
                           g$start$5969$F0M))))
                     g$ei4$5967$F0M)))
                 g$ei3$5966$F0M)))
             g$ei2$5965$F0M)))
         g$ei1$5964$F0M))))
   (g$bitwise-arithmetic-shift-left$5950$F0M
     g$bitwise-arithmetic-shift-left$5997$F0M
     (case-lambda
       ((g$ei1$5975$F0M g$ei2$5976$F0M)
        (bitwise-arithmetic-shift g$ei1$5975$F0M g$ei2$5976$F0M))))
   (g$bitwise-arithmetic-shift-right$5951$F0M
     g$bitwise-arithmetic-shift-right$5998$F0M
     (case-lambda
       ((g$ei1$5977$F0M g$ei2$5978$F0M)
        (bitwise-arithmetic-shift g$ei1$5977$F0M (- g$ei2$5978$F0M)))))
   (g$bitwise-rotate-bit-field$5952$F0M
     g$bitwise-rotate-bit-field$5999$F0M
     (case-lambda
       ((g$ei1$5979$F0M g$ei2$5980$F0M g$ei3$5981$F0M g$ei4$5982$F0M)
        ((case-lambda
           ((g$n$5983$F0M)
            ((case-lambda
               ((g$start$5984$F0M)
                ((case-lambda
                   ((g$end$5985$F0M)
                    ((case-lambda
                       ((g$count$5986$F0M)
                        ((case-lambda
                           ((g$width$5987$F0M)
                            ((case-lambda
                               (()
                                (if (positive? g$width$5987$F0M)
                                  ((case-lambda
                                     ((g$count$5988$F0M)
                                      ((case-lambda
                                         ((g$field0$5989$F0M)
                                          ((case-lambda
                                             ((g$field1$5990$F0M)
                                              ((case-lambda
                                                 ((g$field2$5991$F0M)
                                                  ((case-lambda
                                                     ((g$field$5992$F0M)
                                                      ((case-lambda
                                                         (()
                                                          (g$bitwise-copy-bit-field$5949$F0M
                                                            g$n$5983$F0M
                                                            g$start$5984$F0M
                                                            g$end$5985$F0M
                                                            g$field$5992$F0M))))))
                                                   (bitwise-ior
                                                     g$field1$5990$F0M
                                                     g$field2$5991$F0M))))
                                               (g$bitwise-arithmetic-shift-right$5951$F0M
                                                 g$field0$5989$F0M
                                                 (- g$width$5987$F0M
                                                    g$count$5988$F0M)))))
                                           (g$bitwise-arithmetic-shift-left$5950$F0M
                                             g$field0$5989$F0M
                                             g$count$5988$F0M))))
                                       (g$bitwise-bit-field$5948$F0M
                                         g$n$5983$F0M
                                         g$start$5984$F0M
                                         g$end$5985$F0M))))
                                   (mod g$count$5986$F0M g$width$5987$F0M))
                                  g$n$5983$F0M))))))
                         (- g$end$5985$F0M g$start$5984$F0M))))
                     g$ei4$5982$F0M)))
                 g$ei3$5981$F0M)))
             g$ei2$5980$F0M)))
         g$ei1$5979$F0M)))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fxif$6000$F0M
     g$fxif$6047$F0M
     (case-lambda
       ((g$fx1$6007$F0M g$fx2$6008$F0M g$fx3$6009$F0M)
        (fxior
          (fxand g$fx1$6007$F0M g$fx2$6008$F0M)
          (fxand (fxnot g$fx1$6007$F0M) g$fx3$6009$F0M)))))
   (g$fxcopy-bit$6001$F0M
     g$fxcopy-bit$6048$F0M
     (case-lambda
       ((g$fx1$6010$F0M g$fx2$6011$F0M g$fx3$6012$F0M)
        ((case-lambda
           ((g$mask$6013$F0M)
            ((case-lambda
               (()
                (g$fxif$6000$F0M
                  g$mask$6013$F0M
                  (g$fxarithmetic-shift-left$6004$F0M
                    g$fx3$6012$F0M
                    g$fx2$6011$F0M)
                  g$fx1$6010$F0M))))))
         (g$fxarithmetic-shift-left$6004$F0M '1 g$fx2$6011$F0M)))))
   (g$fxbit-field$6002$F0M
     g$fxbit-field$6049$F0M
     (case-lambda
       ((g$fx1$6014$F0M g$fx2$6015$F0M g$fx3$6016$F0M)
        ((case-lambda
           ((g$mask$6017$F0M)
            ((case-lambda
               (()
                (g$fxarithmetic-shift-right$6005$F0M
                  (fxand g$fx1$6014$F0M g$mask$6017$F0M)
                  g$fx2$6015$F0M))))))
         (fxnot (g$fxarithmetic-shift-left$6004$F0M '-1 g$fx3$6016$F0M))))))
   (g$fxcopy-bit-field$6003$F0M
     g$fxcopy-bit-field$6050$F0M
     (case-lambda
       ((g$fx1$6018$F0M g$fx2$6019$F0M g$fx3$6020$F0M g$fx4$6021$F0M)
        ((case-lambda
           ((g$to$6022$F0M)
            ((case-lambda
               ((g$start$6023$F0M)
                ((case-lambda
                   ((g$end$6024$F0M)
                    ((case-lambda
                       ((g$from$6025$F0M)
                        ((case-lambda
                           ((g$mask1$6026$F0M)
                            ((case-lambda
                               ((g$mask2$6027$F0M)
                                ((case-lambda
                                   ((g$mask$6028$F0M)
                                    ((case-lambda
                                       (()
                                        (g$fxif$6000$F0M
                                          g$mask$6028$F0M
                                          (g$fxarithmetic-shift-left$6004$F0M
                                            g$from$6025$F0M
                                            g$start$6023$F0M)
                                          g$to$6022$F0M))))))
                                 (fxand g$mask1$6026$F0M g$mask2$6027$F0M))))
                             (fxnot
                               (g$fxarithmetic-shift-left$6004$F0M
                                 '-1
                                 g$end$6024$F0M)))))
                         (g$fxarithmetic-shift-left$6004$F0M
                           '-1
                           g$start$6023$F0M))))
                     g$fx4$6021$F0M)))
                 g$fx3$6020$F0M)))
             g$fx2$6019$F0M)))
         g$fx1$6018$F0M))))
   (g$fxarithmetic-shift-left$6004$F0M
     g$fxarithmetic-shift-left$6051$F0M
     (case-lambda
       ((g$fx1$6029$F0M g$fx2$6030$F0M)
        (fxarithmetic-shift g$fx1$6029$F0M g$fx2$6030$F0M))))
   (g$fxarithmetic-shift-right$6005$F0M
     g$fxarithmetic-shift-right$6052$F0M
     (case-lambda
       ((g$fx1$6031$F0M g$fx2$6032$F0M)
        (fxarithmetic-shift g$fx1$6031$F0M (- g$fx2$6032$F0M)))))
   (g$fxrotate-bit-field$6006$F0M
     g$fxrotate-bit-field$6053$F0M
     (case-lambda
       ((g$fx1$6033$F0M g$fx2$6034$F0M g$fx3$6035$F0M g$fx4$6036$F0M)
        ((case-lambda
           ((g$n$6037$F0M)
            ((case-lambda
               ((g$start$6038$F0M)
                ((case-lambda
                   ((g$end$6039$F0M)
                    ((case-lambda
                       ((g$count$6040$F0M)
                        ((case-lambda
                           ((g$width$6041$F0M)
                            ((case-lambda
                               (()
                                (if (positive? g$width$6041$F0M)
                                  ((case-lambda
                                     ((g$count$6042$F0M)
                                      ((case-lambda
                                         ((g$field0$6043$F0M)
                                          ((case-lambda
                                             ((g$field1$6044$F0M)
                                              ((case-lambda
                                                 ((g$field2$6045$F0M)
                                                  ((case-lambda
                                                     ((g$field$6046$F0M)
                                                      ((case-lambda
                                                         (()
                                                          (g$fxcopy-bit-field$6003$F0M
                                                            g$n$6037$F0M
                                                            g$start$6038$F0M
                                                            g$end$6039$F0M
                                                            g$field$6046$F0M))))))
                                                   (fxior
                                                     g$field1$6044$F0M
                                                     g$field2$6045$F0M))))
                                               (g$fxarithmetic-shift-right$6005$F0M
                                                 g$field0$6043$F0M
                                                 (- g$width$6041$F0M
                                                    g$count$6042$F0M)))))
                                           (g$fxarithmetic-shift-left$6004$F0M
                                             g$field0$6043$F0M
                                             g$count$6042$F0M))))
                                       (g$fxbit-field$6002$F0M
                                         g$n$6037$F0M
                                         g$start$6038$F0M
                                         g$end$6039$F0M))))
                                   (mod g$count$6040$F0M g$width$6041$F0M))
                                  g$n$6037$F0M))))))
                         (- g$end$6039$F0M g$start$6038$F0M))))
                     g$fx4$6036$F0M)))
                 g$fx3$6035$F0M)))
             g$fx2$6034$F0M)))
         g$fx1$6033$F0M)))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$7120$6054$F0M
     g$7120$6066$F0M
     (make-record-type-descriptor
       '&no-infinities
       &implementation-restriction-rtd
       'g$7123$F0M
       '#f
       '#f
       '#()))
   (g$7122$6055$F0M g$7122$6067$F0M '#f)
   (g$7121$6056$F0M
     g$7121$6068$F0M
     (make-record-constructor-descriptor
       g$7120$6054$F0M
       &implementation-restriction-rcd
       g$7122$6055$F0M))
   (g$7119$6057$F0M g$7119$6069$F0M (record-predicate g$7120$6054$F0M))
   (g$make-no-infinities-violation$6058$F0M
     g$make-no-infinities-violation$6070$F0M
     (record-constructor g$7121$6056$F0M))
   (g$no-infinities-violation?$6059$F0M
     g$no-infinities-violation?$6071$F0M
     (condition-predicate g$7120$6054$F0M))
   (g$7134$6060$F0M
     g$7134$6072$F0M
     (make-record-type-descriptor
       '&no-nans
       &implementation-restriction-rtd
       'g$7137$F0M
       '#f
       '#f
       '#()))
   (g$7136$6061$F0M g$7136$6073$F0M '#f)
   (g$7135$6062$F0M
     g$7135$6074$F0M
     (make-record-constructor-descriptor
       g$7134$6060$F0M
       &implementation-restriction-rcd
       g$7136$6061$F0M))
   (g$7133$6063$F0M g$7133$6075$F0M (record-predicate g$7134$6060$F0M))
   (g$make-no-nans-violation$6064$F0M
     g$make-no-nans-violation$6076$F0M
     (record-constructor g$7135$6062$F0M))
   (g$no-nans-violation?$6065$F0M
     g$no-nans-violation?$6077$F0M
     (condition-predicate g$7134$6060$F0M)))
  (void))

(library-letrec* (ironscheme io conditions)
  ((g$7149$6078$F0M
     g$7149$6158$F0M
     (make-record-type-descriptor '&i/o &error-rtd 'g$7152$F0M '#f '#f '#()))
   (g$7151$6079$F0M g$7151$6159$F0M '#f)
   (g$7150$6080$F0M
     g$7150$6160$F0M
     (make-record-constructor-descriptor
       g$7149$6078$F0M
       &error-rcd
       g$7151$6079$F0M))
   (g$7148$6081$F0M g$7148$6161$F0M (record-predicate g$7149$6078$F0M))
   (g$make-i/o-error$6082$F0M
     g$make-i/o-error$6162$F0M
     (record-constructor g$7150$6080$F0M))
   (g$i/o-error?$6083$F0M
     g$i/o-error?$6163$F0M
     (condition-predicate g$7149$6078$F0M))
   (g$7163$6084$F0M
     g$7163$6164$F0M
     (make-record-type-descriptor
       '&i/o-read
       g$7149$6078$F0M
       'g$7166$F0M
       '#f
       '#f
       '#()))
   (g$7165$6085$F0M g$7165$6165$F0M '#f)
   (g$7164$6086$F0M
     g$7164$6166$F0M
     (make-record-constructor-descriptor
       g$7163$6084$F0M
       g$7150$6080$F0M
       g$7165$6085$F0M))
   (g$7162$6087$F0M g$7162$6167$F0M (record-predicate g$7163$6084$F0M))
   (g$make-i/o-read-error$6088$F0M
     g$make-i/o-read-error$6168$F0M
     (record-constructor g$7164$6086$F0M))
   (g$i/o-read-error?$6089$F0M
     g$i/o-read-error?$6169$F0M
     (condition-predicate g$7163$6084$F0M))
   (g$7177$6090$F0M
     g$7177$6170$F0M
     (make-record-type-descriptor
       '&i/o-write
       g$7149$6078$F0M
       'g$7180$F0M
       '#f
       '#f
       '#()))
   (g$7179$6091$F0M g$7179$6171$F0M '#f)
   (g$7178$6092$F0M
     g$7178$6172$F0M
     (make-record-constructor-descriptor
       g$7177$6090$F0M
       g$7150$6080$F0M
       g$7179$6091$F0M))
   (g$7176$6093$F0M g$7176$6173$F0M (record-predicate g$7177$6090$F0M))
   (g$make-i/o-write-error$6094$F0M
     g$make-i/o-write-error$6174$F0M
     (record-constructor g$7178$6092$F0M))
   (g$i/o-write-error?$6095$F0M
     g$i/o-write-error?$6175$F0M
     (condition-predicate g$7177$6090$F0M))
   (g$7192$6096$F0M
     g$7192$6176$F0M
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$7149$6078$F0M
       'g$7195$F0M
       '#f
       '#f
       '#((immutable position))))
   (g$7194$6097$F0M g$7194$6177$F0M '#f)
   (g$7193$6098$F0M
     g$7193$6178$F0M
     (make-record-constructor-descriptor
       g$7192$6096$F0M
       g$7150$6080$F0M
       g$7194$6097$F0M))
   (g$7191$6099$F0M g$7191$6179$F0M (record-predicate g$7192$6096$F0M))
   (g$make-i/o-invalid-position-error$6100$F0M
     g$make-i/o-invalid-position-error$6180$F0M
     (record-constructor g$7193$6098$F0M))
   (g$7190$6101$F0M g$7190$6181$F0M (record-accessor g$7192$6096$F0M '0))
   (g$i/o-invalid-position-error?$6102$F0M
     g$i/o-invalid-position-error?$6182$F0M
     (condition-predicate g$7192$6096$F0M))
   (g$i/o-error-position$6103$F0M
     g$i/o-error-position$6183$F0M
     (condition-accessor g$7192$6096$F0M g$7190$6101$F0M))
   (g$7209$6104$F0M
     g$7209$6184$F0M
     (make-record-type-descriptor
       '&i/o-filename
       g$7149$6078$F0M
       'g$7212$F0M
       '#f
       '#f
       '#((immutable filename))))
   (g$7211$6105$F0M g$7211$6185$F0M '#f)
   (g$7210$6106$F0M
     g$7210$6186$F0M
     (make-record-constructor-descriptor
       g$7209$6104$F0M
       g$7150$6080$F0M
       g$7211$6105$F0M))
   (g$7208$6107$F0M g$7208$6187$F0M (record-predicate g$7209$6104$F0M))
   (g$make-i/o-filename-error$6108$F0M
     g$make-i/o-filename-error$6188$F0M
     (record-constructor g$7210$6106$F0M))
   (g$7207$6109$F0M g$7207$6189$F0M (record-accessor g$7209$6104$F0M '0))
   (g$i/o-filename-error?$6110$F0M
     g$i/o-filename-error?$6190$F0M
     (condition-predicate g$7209$6104$F0M))
   (g$i/o-error-filename$6111$F0M
     g$i/o-error-filename$6191$F0M
     (condition-accessor g$7209$6104$F0M g$7207$6109$F0M))
   (g$7225$6112$F0M
     g$7225$6192$F0M
     (make-record-type-descriptor
       '&i/o-file-protection
       g$7209$6104$F0M
       'g$7228$F0M
       '#f
       '#f
       '#()))
   (g$7227$6113$F0M g$7227$6193$F0M '#f)
   (g$7226$6114$F0M
     g$7226$6194$F0M
     (make-record-constructor-descriptor
       g$7225$6112$F0M
       g$7210$6106$F0M
       g$7227$6113$F0M))
   (g$7224$6115$F0M g$7224$6195$F0M (record-predicate g$7225$6112$F0M))
   (g$make-i/o-file-protection-error$6116$F0M
     g$make-i/o-file-protection-error$6196$F0M
     (record-constructor g$7226$6114$F0M))
   (g$i/o-file-protection-error?$6117$F0M
     g$i/o-file-protection-error?$6197$F0M
     (condition-predicate g$7225$6112$F0M))
   (g$7239$6118$F0M
     g$7239$6198$F0M
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$7225$6112$F0M
       'g$7242$F0M
       '#f
       '#f
       '#()))
   (g$7241$6119$F0M g$7241$6199$F0M '#f)
   (g$7240$6120$F0M
     g$7240$6200$F0M
     (make-record-constructor-descriptor
       g$7239$6118$F0M
       g$7226$6114$F0M
       g$7241$6119$F0M))
   (g$7238$6121$F0M g$7238$6201$F0M (record-predicate g$7239$6118$F0M))
   (g$make-i/o-file-is-read-only-error$6122$F0M
     g$make-i/o-file-is-read-only-error$6202$F0M
     (record-constructor g$7240$6120$F0M))
   (g$i/o-file-is-read-only-error?$6123$F0M
     g$i/o-file-is-read-only-error?$6203$F0M
     (condition-predicate g$7239$6118$F0M))
   (g$7253$6124$F0M
     g$7253$6204$F0M
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$7209$6104$F0M
       'g$7256$F0M
       '#f
       '#f
       '#()))
   (g$7255$6125$F0M g$7255$6205$F0M '#f)
   (g$7254$6126$F0M
     g$7254$6206$F0M
     (make-record-constructor-descriptor
       g$7253$6124$F0M
       g$7210$6106$F0M
       g$7255$6125$F0M))
   (g$7252$6127$F0M g$7252$6207$F0M (record-predicate g$7253$6124$F0M))
   (g$make-i/o-file-already-exists-error$6128$F0M
     g$make-i/o-file-already-exists-error$6208$F0M
     (record-constructor g$7254$6126$F0M))
   (g$i/o-file-already-exists-error?$6129$F0M
     g$i/o-file-already-exists-error?$6209$F0M
     (condition-predicate g$7253$6124$F0M))
   (g$7267$6130$F0M
     g$7267$6210$F0M
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$7209$6104$F0M
       'g$7270$F0M
       '#f
       '#f
       '#()))
   (g$7269$6131$F0M g$7269$6211$F0M '#f)
   (g$7268$6132$F0M
     g$7268$6212$F0M
     (make-record-constructor-descriptor
       g$7267$6130$F0M
       g$7210$6106$F0M
       g$7269$6131$F0M))
   (g$7266$6133$F0M g$7266$6213$F0M (record-predicate g$7267$6130$F0M))
   (g$make-i/o-file-does-not-exist-error$6134$F0M
     g$make-i/o-file-does-not-exist-error$6214$F0M
     (record-constructor g$7268$6132$F0M))
   (g$i/o-file-does-not-exist-error?$6135$F0M
     g$i/o-file-does-not-exist-error?$6215$F0M
     (condition-predicate g$7267$6130$F0M))
   (g$7282$6136$F0M
     g$7282$6216$F0M
     (make-record-type-descriptor
       '&i/o-port
       g$7149$6078$F0M
       'g$7285$F0M
       '#f
       '#f
       '#((immutable port))))
   (g$7284$6137$F0M g$7284$6217$F0M '#f)
   (g$7283$6138$F0M
     g$7283$6218$F0M
     (make-record-constructor-descriptor
       g$7282$6136$F0M
       g$7150$6080$F0M
       g$7284$6137$F0M))
   (g$7281$6139$F0M g$7281$6219$F0M (record-predicate g$7282$6136$F0M))
   (g$make-i/o-port-error$6140$F0M
     g$make-i/o-port-error$6220$F0M
     (record-constructor g$7283$6138$F0M))
   (g$7280$6141$F0M g$7280$6221$F0M (record-accessor g$7282$6136$F0M '0))
   (g$i/o-port-error?$6142$F0M
     g$i/o-port-error?$6222$F0M
     (condition-predicate g$7282$6136$F0M))
   (g$i/o-error-port$6143$F0M
     g$i/o-error-port$6223$F0M
     (condition-accessor g$7282$6136$F0M g$7280$6141$F0M))
   (g$7298$6144$F0M
     g$7298$6224$F0M
     (make-record-type-descriptor
       '&i/o-decoding
       g$7282$6136$F0M
       'g$7301$F0M
       '#f
       '#f
       '#()))
   (g$7300$6145$F0M g$7300$6225$F0M '#f)
   (g$7299$6146$F0M
     g$7299$6226$F0M
     (make-record-constructor-descriptor
       g$7298$6144$F0M
       g$7283$6138$F0M
       g$7300$6145$F0M))
   (g$7297$6147$F0M g$7297$6227$F0M (record-predicate g$7298$6144$F0M))
   (g$make-i/o-decoding-error$6148$F0M
     g$make-i/o-decoding-error$6228$F0M
     (record-constructor g$7299$6146$F0M))
   (g$i/o-decoding-error?$6149$F0M
     g$i/o-decoding-error?$6229$F0M
     (condition-predicate g$7298$6144$F0M))
   (g$7313$6150$F0M
     g$7313$6230$F0M
     (make-record-type-descriptor
       '&i/o-encoding
       g$7282$6136$F0M
       'g$7316$F0M
       '#f
       '#f
       '#((immutable char))))
   (g$7315$6151$F0M g$7315$6231$F0M '#f)
   (g$7314$6152$F0M
     g$7314$6232$F0M
     (make-record-constructor-descriptor
       g$7313$6150$F0M
       g$7283$6138$F0M
       g$7315$6151$F0M))
   (g$7312$6153$F0M g$7312$6233$F0M (record-predicate g$7313$6150$F0M))
   (g$make-i/o-encoding-error$6154$F0M
     g$make-i/o-encoding-error$6234$F0M
     (record-constructor g$7314$6152$F0M))
   (g$7311$6155$F0M g$7311$6235$F0M (record-accessor g$7313$6150$F0M '0))
   (g$i/o-encoding-error?$6156$F0M
     g$i/o-encoding-error?$6236$F0M
     (condition-predicate g$7313$6150$F0M))
   (g$i/o-encoding-error-char$6157$F0M
     g$i/o-encoding-error-char$6237$F0M
     (condition-accessor g$7313$6150$F0M g$7311$6155$F0M)))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$get-output-string$6238$F0M
     g$get-output-string$6249$F0M
     (case-lambda
       ((g$port$6243$F0M)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$6243$F0M))))
   (g$open-output-string$6239$F0M
     g$open-output-string$6250$F0M
     (case-lambda (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$6240$F0M
     g$open-string-output-port$6251$F0M
     (case-lambda
       (()
        ((case-lambda
           ((g$p$6244$F0M)
            (values
              g$p$6244$F0M
              (case-lambda (() (g$get-output-string$6238$F0M g$p$6244$F0M))))))
         (g$open-output-string$6239$F0M)))))
   (g$port?$6241$F0M
     g$port?$6252$F0M
     (case-lambda
       ((g$obj$6245$F0M)
        ((case-lambda
           ((g$t$6246$F0M)
            (if g$t$6246$F0M
              g$t$6246$F0M
              (begin '#f (binary-port? g$obj$6245$F0M)))))
         (textual-port? g$obj$6245$F0M)))))
   (g$call-with-string-output-port$6242$F0M
     g$call-with-string-output-port$6253$F0M
     (case-lambda
       ((g$proc$6247$F0M)
        ((case-lambda
           ((g$p$6248$F0M)
            (begin
              (call-with-port g$p$6248$F0M g$proc$6247$F0M)
              (g$get-output-string$6238$F0M g$p$6248$F0M))))
         (g$open-output-string$6239$F0M))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$with-input-from-file$6260$F0M
     g$with-input-from-file$6286$F0M
     (case-lambda
       ((g$filename$6264$F0M g$thunk$6265$F0M)
        ((case-lambda
           ((g$current-input-port$6268$F0M g$t$6269$F0M)
            ((case-lambda
               ((g$swap$6270$F0M)
                (dynamic-wind
                  g$swap$6270$F0M
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6265$F0M)))
                       (case-lambda
                         (() (close-input-port (current-input-port)))))))
                  g$swap$6270$F0M)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6271$F0M)
                    (begin
                      (g$current-input-port$6268$F0M g$t$6269$F0M)
                      (set! g$t$6269$F0M g$t$6271$F0M))))
                 (g$current-input-port$6268$F0M)))))))
         current-input-port
         (open-input-file g$filename$6264$F0M)))))
   (g$with-output-to-file$6261$F0M
     g$with-output-to-file$6287$F0M
     (case-lambda
       ((g$filename$6272$F0M g$thunk$6273$F0M)
        ((case-lambda
           ((g$current-output-port$6276$F0M g$t$6277$F0M)
            ((case-lambda
               ((g$swap$6278$F0M)
                (dynamic-wind
                  g$swap$6278$F0M
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6273$F0M)))
                       (case-lambda
                         (() (close-output-port (current-output-port)))))))
                  g$swap$6278$F0M)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6279$F0M)
                    (begin
                      (g$current-output-port$6276$F0M g$t$6277$F0M)
                      (set! g$t$6277$F0M g$t$6279$F0M))))
                 (g$current-output-port$6276$F0M)))))))
         current-output-port
         (open-output-file g$filename$6272$F0M)))))
   (g$call-with-input-file$6262$F0M
     g$call-with-input-file$6288$F0M
     (case-lambda
       ((g$filename$6280$F0M g$proc$6281$F0M)
        ((case-lambda
           ((g$p$6282$F0M)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6281$F0M g$p$6282$F0M)))
              (case-lambda (() (close-input-port g$p$6282$F0M))))))
         (open-input-file g$filename$6280$F0M)))))
   (g$call-with-output-file$6263$F0M
     g$call-with-output-file$6289$F0M
     (case-lambda
       ((g$filename$6283$F0M g$proc$6284$F0M)
        ((case-lambda
           ((g$p$6285$F0M)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6284$F0M g$p$6285$F0M)))
              (case-lambda (() (close-output-port g$p$6285$F0M))))))
         (open-output-file g$filename$6283$F0M))))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$7383$6290$F0M
     g$7383$6399$F0M
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$7385$6291$F0M g$7385$6400$F0M '#f)
   (g$7384$6292$F0M
     g$7384$6401$F0M
     (make-record-constructor-descriptor
       g$7383$6290$F0M
       '#f
       g$7385$6291$F0M))
   (g$enum?$6293$F0M g$enum?$6402$F0M (record-predicate g$7383$6290$F0M))
   (g$make-enum$6294$F0M
     g$make-enum$6403$F0M
     (record-constructor g$7384$6292$F0M))
   (g$enum-value$6295$F0M
     g$enum-value$6404$F0M
     (record-accessor g$7383$6290$F0M '0))
   (g$enum-info$6296$F0M
     g$enum-info$6405$F0M
     (record-accessor g$7383$6290$F0M '1))
   (g$7396$6297$F0M
     g$7396$6406$F0M
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$7398$6298$F0M g$7398$6407$F0M '#f)
   (g$7397$6299$F0M
     g$7397$6408$F0M
     (make-record-constructor-descriptor
       g$7396$6297$F0M
       '#f
       g$7398$6298$F0M))
   (g$enum-universe?$6300$F0M
     g$enum-universe?$6409$F0M
     (record-predicate g$7396$6297$F0M))
   (g$make-enum-universe$6301$F0M
     g$make-enum-universe$6410$F0M
     (record-constructor g$7397$6299$F0M))
   (g$enum-universe-id$6302$F0M
     g$enum-universe-id$6411$F0M
     (record-accessor g$7396$6297$F0M '0))
   (g$enum-universe-symbols$6303$F0M
     g$enum-universe-symbols$6412$F0M
     (record-accessor g$7396$6297$F0M '1))
   (g$enum-universe-mapping$6304$F0M
     g$enum-universe-mapping$6413$F0M
     (record-accessor g$7396$6297$F0M '2))
   (g$enum-universe-value$6305$F0M
     g$enum-universe-value$6414$F0M
     (record-accessor g$7396$6297$F0M '3))
   (g$enum-type=?$6306$F0M
     g$enum-type=?$6415$F0M
     (case-lambda
       ((g$enumset1$6328$F0M g$enumset2$6329$F0M)
        (eq? (g$enum-universe-id$6302$F0M
               (g$enum-info$6296$F0M g$enumset1$6328$F0M))
             (g$enum-universe-id$6302$F0M
               (g$enum-info$6296$F0M g$enumset2$6329$F0M))))))
   (g$get-symbols$6307$F0M
     g$get-symbols$6416$F0M
     (case-lambda
       ((g$enumset$6330$F0M)
        (g$enum-universe-symbols$6303$F0M
          (g$enum-info$6296$F0M g$enumset$6330$F0M)))))
   (g$get-value$6308$F0M
     g$get-value$6417$F0M
     (case-lambda
       ((g$enumset$6331$F0M g$s$6332$F0M)
        (g$hashtable-ref$5455$F0M
          (g$enum-universe-mapping$6304$F0M
            (g$enum-info$6296$F0M g$enumset$6331$F0M))
          g$s$6332$F0M
          '#f))))
   (g$assert-enum$6309$F0M
     g$assert-enum$6418$F0M
     (case-lambda
       ((g$who$6333$F0M g$enumset$6334$F0M)
        (if (not (g$enum?$6293$F0M g$enumset$6334$F0M))
          (assertion-violation
            g$who$6333$F0M
            '"not an enumeration"
            g$enumset$6334$F0M)
          (void)))))
   (g$make-info$6310$F0M
     g$make-info$6419$F0M
     (case-lambda
       ((g$symbols$6335$F0M)
        ((case-lambda
           ((g$ht$6336$F0M)
            ((letrec ((g$f$6337$F0M
                        (case-lambda
                          ((g$s$6338$F0M g$a$6339$F0M g$mask$6340$F0M)
                           (if (null? g$s$6338$F0M)
                             (values
                               (reverse! g$a$6339$F0M)
                               g$ht$6336$F0M
                               (- g$mask$6340$F0M '1))
                             ((case-lambda
                                ((g$n$6341$F0M)
                                 (if (symbol? g$n$6341$F0M)
                                   (if (g$hashtable-contains?$5458$F0M
                                         g$ht$6336$F0M
                                         g$n$6341$F0M)
                                     (g$f$6337$F0M
                                       (cdr g$s$6338$F0M)
                                       g$a$6339$F0M
                                       g$mask$6340$F0M)
                                     (begin
                                       (g$hashtable-set!$5456$F0M
                                         g$ht$6336$F0M
                                         g$n$6341$F0M
                                         g$mask$6340$F0M)
                                       (g$f$6337$F0M
                                         (cdr g$s$6338$F0M)
                                         (cons g$n$6341$F0M g$a$6339$F0M)
                                         (g$bitwise-arithmetic-shift-left$5997$F0M
                                           g$mask$6340$F0M
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$6341$F0M))))
                              (car g$s$6338$F0M)))))))
               g$f$6337$F0M)
             g$symbols$6335$F0M
             '()
             '1)))
         (g$make-eq-hashtable$5452$F0M)))))
   (g$make-name$6311$F0M
     g$make-name$6420$F0M
     (case-lambda
       ((g$symbols$6342$F0M)
        (string->symbol (g$format$6459$F0M '"~a" g$symbols$6342$F0M)))))
   (g$make-enumeration$6312$F0M
     g$make-enumeration$6421$F0M
     (case-lambda
       ((g$symbols$6343$F0M)
        (call-with-values
          (case-lambda (() (g$make-info$6310$F0M g$symbols$6343$F0M)))
          (case-lambda
            ((g$s$6347$F0M g$mapping$6348$F0M g$mask$6349$F0M)
             ((case-lambda
                ((g$mask$6350$F0M g$mapping$6351$F0M g$s$6352$F0M)
                 (g$make-enum$6294$F0M
                   g$mask$6350$F0M
                   (g$make-enum-universe$6301$F0M
                     (g$make-name$6311$F0M g$s$6352$F0M)
                     g$s$6352$F0M
                     g$mapping$6351$F0M
                     g$mask$6350$F0M))))
              g$mask$6349$F0M
              g$mapping$6348$F0M
              g$s$6347$F0M)))))))
   (g$enum-set-universe$6313$F0M
     g$enum-set-universe$6422$F0M
     (case-lambda
       ((g$enumset$6353$F0M)
        (begin
          (g$assert-enum$6309$F0M 'enum-set-universe g$enumset$6353$F0M)
          ((case-lambda
             ((g$ei$6354$F0M)
              (g$make-enum$6294$F0M
                (g$enum-universe-value$6305$F0M g$ei$6354$F0M)
                g$ei$6354$F0M)))
           (g$enum-info$6296$F0M g$enumset$6353$F0M))))))
   (g$enum-set-indexer$6314$F0M
     g$enum-set-indexer$6423$F0M
     (case-lambda
       ((g$enumset$6355$F0M)
        (begin
          (g$assert-enum$6309$F0M 'enum-set-indexer g$enumset$6355$F0M)
          (case-lambda
            ((g$symbol$6356$F0M)
             (begin
               (if (not (symbol? g$symbol$6356$F0M))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$6356$F0M)
                 (void))
               ((case-lambda
                  ((g$v$6357$F0M)
                   (if g$v$6357$F0M (- (bitwise-length g$v$6357$F0M) '1) '#f)))
                (g$get-value$6308$F0M
                  g$enumset$6355$F0M
                  g$symbol$6356$F0M)))))))))
   (g$enum-set-constructor$6315$F0M
     g$enum-set-constructor$6424$F0M
     (case-lambda
       ((g$enumset$6358$F0M)
        (begin
          (g$assert-enum$6309$F0M 'enum-set-constructor g$enumset$6358$F0M)
          (case-lambda
            ((g$symbols$6359$F0M)
             ((letrec ((g$f$6360$F0M
                         (case-lambda
                           ((g$v$6361$F0M g$s$6362$F0M)
                            (if (null? g$s$6362$F0M)
                              (g$make-enum$6294$F0M
                                g$v$6361$F0M
                                (g$enum-info$6296$F0M g$enumset$6358$F0M))
                              ((case-lambda
                                 ((g$n$6363$F0M)
                                  (if (symbol? g$n$6363$F0M)
                                    ((case-lambda
                                       ((g$v*$6364$F0M)
                                        (if g$v*$6364$F0M
                                          (g$f$6360$F0M
                                            (bitwise-ior
                                              g$v$6361$F0M
                                              g$v*$6364$F0M)
                                            (cdr g$s$6362$F0M))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$6363$F0M))))
                                     (g$get-value$6308$F0M
                                       g$enumset$6358$F0M
                                       g$n$6363$F0M))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$6363$F0M))))
                               (car g$s$6362$F0M)))))))
                g$f$6360$F0M)
              '0
              g$symbols$6359$F0M)))))))
   (g$enum-set->list$6316$F0M
     g$enum-set->list$6425$F0M
     (case-lambda
       ((g$enumset$6365$F0M)
        (begin
          (g$assert-enum$6309$F0M 'enum-set->list g$enumset$6365$F0M)
          ((case-lambda
             ((g$value$6366$F0M)
              ((letrec ((g$f$6367$F0M
                          (case-lambda
                            ((g$s$6368$F0M g$l$6369$F0M)
                             (if (null? g$s$6368$F0M)
                               (reverse! g$l$6369$F0M)
                               (if (zero?
                                     (bitwise-and
                                       (g$get-value$6308$F0M
                                         g$enumset$6365$F0M
                                         (car g$s$6368$F0M))
                                       g$value$6366$F0M))
                                 (g$f$6367$F0M (cdr g$s$6368$F0M) g$l$6369$F0M)
                                 (g$f$6367$F0M
                                   (cdr g$s$6368$F0M)
                                   (cons (car g$s$6368$F0M) g$l$6369$F0M))))))))
                 g$f$6367$F0M)
               (g$get-symbols$6307$F0M g$enumset$6365$F0M)
               '())))
           (g$enum-value$6295$F0M g$enumset$6365$F0M))))))
   (g$enum-set-member?$6317$F0M
     g$enum-set-member?$6426$F0M
     (case-lambda
       ((g$symbol$6370$F0M g$enumset$6371$F0M)
        (begin
          (if (not (symbol? g$symbol$6370$F0M))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$6370$F0M)
            (void))
          (g$assert-enum$6309$F0M 'enum-set-member? g$enumset$6371$F0M)
          ((case-lambda
             ((g$v$6372$F0M)
              (if g$v$6372$F0M
                (not (zero?
                       (bitwise-and
                         g$v$6372$F0M
                         (g$enum-value$6295$F0M g$enumset$6371$F0M))))
                '#f)))
           (g$get-value$6308$F0M g$enumset$6371$F0M g$symbol$6370$F0M))))))
   (g$enum-set-subset?$6318$F0M
     g$enum-set-subset?$6427$F0M
     (case-lambda
       ((g$enumset1$6373$F0M g$enumset2$6374$F0M)
        (begin
          (g$assert-enum$6309$F0M 'enum-set-subset? g$enumset1$6373$F0M)
          (g$assert-enum$6309$F0M 'enum-set-subset? g$enumset2$6374$F0M)
          ((case-lambda
             ((g$v1$6375$F0M g$v2$6376$F0M)
              (if (g$enum-type=?$6306$F0M
                    g$enumset1$6373$F0M
                    g$enumset2$6374$F0M)
                (= (bitwise-and g$v1$6375$F0M g$v2$6376$F0M) g$v1$6375$F0M)
                ((letrec ((g$f$6377$F0M
                            (case-lambda
                              ((g$s$6378$F0M)
                               (if (null? g$s$6378$F0M)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$6379$F0M g$v2*$6380$F0M)
                                     (if g$v2*$6380$F0M
                                       ((case-lambda
                                          ((g$has1$6381$F0M g$has2$6382$F0M)
                                           (if (if g$has1$6381$F0M
                                                 (begin
                                                   '#f
                                                   (not g$has2$6382$F0M))
                                                 '#f)
                                             '#f
                                             (g$f$6377$F0M
                                               (cdr g$s$6378$F0M)))))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v1$6375$F0M
                                                 g$v1*$6379$F0M)))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v2$6376$F0M
                                                 g$v2*$6380$F0M))))
                                       '#f)))
                                  (g$get-value$6308$F0M
                                    g$enumset1$6373$F0M
                                    (car g$s$6378$F0M))
                                  (g$get-value$6308$F0M
                                    g$enumset2$6374$F0M
                                    (car g$s$6378$F0M))))))))
                   g$f$6377$F0M)
                 (g$get-symbols$6307$F0M g$enumset1$6373$F0M)))))
           (g$enum-value$6295$F0M g$enumset1$6373$F0M)
           (g$enum-value$6295$F0M g$enumset2$6374$F0M))))))
   (g$enum-set=?$6319$F0M
     g$enum-set=?$6428$F0M
     (case-lambda
       ((g$enumset1$6383$F0M g$enumset2$6384$F0M)
        (begin
          (g$assert-enum$6309$F0M 'enum-set=? g$enumset1$6383$F0M)
          (g$assert-enum$6309$F0M 'enum-set=? g$enumset2$6384$F0M)
          (if (g$enum-set-subset?$6318$F0M
                g$enumset1$6383$F0M
                g$enumset2$6384$F0M)
            (begin
              '#f
              (g$enum-set-subset?$6318$F0M
                g$enumset2$6384$F0M
                g$enumset1$6383$F0M))
            '#f)))))
   (g$enum-set-union$6320$F0M
     g$enum-set-union$6429$F0M
     (case-lambda
       ((g$enumset1$6385$F0M g$enumset2$6386$F0M)
        (begin
          (g$assert-enum$6309$F0M 'enum-set-union g$enumset1$6385$F0M)
          (g$assert-enum$6309$F0M 'enum-set-union g$enumset2$6386$F0M)
          (if (g$enum-type=?$6306$F0M g$enumset1$6385$F0M g$enumset2$6386$F0M)
            (g$make-enum$6294$F0M
              (bitwise-ior
                (g$enum-value$6295$F0M g$enumset1$6385$F0M)
                (g$enum-value$6295$F0M g$enumset2$6386$F0M))
              (g$enum-info$6296$F0M g$enumset1$6385$F0M))
            '#f)))))
   (g$enum-set-intersection$6321$F0M
     g$enum-set-intersection$6430$F0M
     (case-lambda
       ((g$enumset1$6387$F0M g$enumset2$6388$F0M)
        (begin
          (g$assert-enum$6309$F0M 'enum-set-intersection g$enumset1$6387$F0M)
          (g$assert-enum$6309$F0M 'enum-set-intersection g$enumset2$6388$F0M)
          (if (g$enum-type=?$6306$F0M g$enumset1$6387$F0M g$enumset2$6388$F0M)
            (g$make-enum$6294$F0M
              (bitwise-and
                (g$enum-value$6295$F0M g$enumset1$6387$F0M)
                (g$enum-value$6295$F0M g$enumset2$6388$F0M))
              (g$enum-info$6296$F0M g$enumset1$6387$F0M))
            '#f)))))
   (g$enum-set-difference$6322$F0M
     g$enum-set-difference$6431$F0M
     (case-lambda
       ((g$enumset1$6389$F0M g$enumset2$6390$F0M)
        (begin
          (g$assert-enum$6309$F0M 'enum-set-difference g$enumset1$6389$F0M)
          (g$assert-enum$6309$F0M 'enum-set-difference g$enumset2$6390$F0M)
          (if (g$enum-type=?$6306$F0M g$enumset1$6389$F0M g$enumset2$6390$F0M)
            (g$make-enum$6294$F0M
              (bitwise-and
                (g$enum-value$6295$F0M g$enumset1$6389$F0M)
                (bitwise-not (g$enum-value$6295$F0M g$enumset2$6390$F0M)))
              (g$enum-info$6296$F0M g$enumset1$6389$F0M))
            '#f)))))
   (g$enum-set-complement$6323$F0M
     g$enum-set-complement$6432$F0M
     (case-lambda
       ((g$enumset$6391$F0M)
        (begin
          (g$assert-enum$6309$F0M 'enum-set-complement g$enumset$6391$F0M)
          (g$make-enum$6294$F0M
            (bitwise-not (g$enum-value$6295$F0M g$enumset$6391$F0M))
            (g$enum-info$6296$F0M g$enumset$6391$F0M))))))
   (g$enum-set-projection$6324$F0M
     g$enum-set-projection$6433$F0M
     (case-lambda
       ((g$enumset1$6392$F0M g$enumset2$6393$F0M)
        (begin
          (g$assert-enum$6309$F0M 'enum-set-projection g$enumset1$6392$F0M)
          (g$assert-enum$6309$F0M 'enum-set-projection g$enumset2$6393$F0M)
          ((case-lambda
             ((g$v1$6394$F0M)
              ((letrec ((g$f$6395$F0M
                          (case-lambda
                            ((g$s$6396$F0M g$v$6397$F0M)
                             (if (null? g$s$6396$F0M)
                               (g$make-enum$6294$F0M
                                 g$v$6397$F0M
                                 (g$enum-info$6296$F0M g$enumset2$6393$F0M))
                               (if (zero?
                                     (bitwise-and
                                       g$v1$6394$F0M
                                       (g$get-value$6308$F0M
                                         g$enumset1$6392$F0M
                                         (car g$s$6396$F0M))))
                                 (g$f$6395$F0M (cdr g$s$6396$F0M) g$v$6397$F0M)
                                 ((case-lambda
                                    ((g$v2$6398$F0M)
                                     (if g$v2$6398$F0M
                                       (g$f$6395$F0M
                                         (cdr g$s$6396$F0M)
                                         (bitwise-ior
                                           g$v$6397$F0M
                                           g$v2$6398$F0M))
                                       (g$f$6395$F0M
                                         (cdr g$s$6396$F0M)
                                         g$v$6397$F0M))))
                                  (g$get-value$6308$F0M
                                    g$enumset2$6393$F0M
                                    (car g$s$6396$F0M)))))))))
                 g$f$6395$F0M)
               (g$get-symbols$6307$F0M g$enumset1$6392$F0M)
               '0)))
           (g$enum-value$6295$F0M g$enumset1$6392$F0M)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$6325$F0M g$p$6326$F0M g$wr$6327$F0M)
       (g$fprintf$6458$F0M
         g$p$6326$F0M
         '"#[enum-set ~a]"
         (g$enum-set->list$6316$F0M g$x$6325$F0M))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$6434$F0M
     g$dofmt$6456$F0M
     (case-lambda
       ((g$p$6438$F0M g$cntl$6439$F0M g$args$6440$F0M)
        ((case-lambda
           ((g$nmax$6441$F0M)
            ((letrec ((g$loop$6442$F0M
                        (case-lambda
                          ((g$n$6443$F0M g$a$6444$F0M)
                           (if (fx<=? g$n$6443$F0M g$nmax$6441$F0M)
                             ((case-lambda
                                ((g$c$6445$F0M)
                                 (if (if (g$char=?$5212$F0M g$c$6445$F0M '#\~)
                                       (begin
                                         '#f
                                         (fx<? g$n$6443$F0M g$nmax$6441$F0M))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$6446$F0M)
                                       (if (g$memv$5009$F0M g$t$6446$F0M '(#\a))
                                         (begin
                                           (display
                                             (car g$a$6444$F0M)
                                             g$p$6438$F0M)
                                           (g$loop$6442$F0M
                                             (fx+ g$n$6443$F0M '2)
                                             (cdr g$a$6444$F0M)))
                                         (if (g$memv$5009$F0M
                                               g$t$6446$F0M
                                               '(#\s))
                                           (begin
                                             (write
                                               (car g$a$6444$F0M)
                                               g$p$6438$F0M)
                                             (g$loop$6442$F0M
                                               (fx+ g$n$6443$F0M '2)
                                               (cdr g$a$6444$F0M)))
                                           (if (g$memv$5009$F0M
                                                 g$t$6446$F0M
                                                 '(#\b))
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$6444$F0M)
                                                   '2)
                                                 g$p$6438$F0M)
                                               (g$loop$6442$F0M
                                                 (fx+ g$n$6443$F0M '2)
                                                 (cdr g$a$6444$F0M)))
                                             (if (g$memv$5009$F0M
                                                   g$t$6446$F0M
                                                   '(#\o))
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$6444$F0M)
                                                     '8)
                                                   g$p$6438$F0M)
                                                 (g$loop$6442$F0M
                                                   (fx+ g$n$6443$F0M '2)
                                                   (cdr g$a$6444$F0M)))
                                               (if (g$memv$5009$F0M
                                                     g$t$6446$F0M
                                                     '(#\x))
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$6444$F0M)
                                                       '16)
                                                     g$p$6438$F0M)
                                                   (g$loop$6442$F0M
                                                     (fx+ g$n$6443$F0M '2)
                                                     (cdr g$a$6444$F0M)))
                                                 (if (g$memv$5009$F0M
                                                       g$t$6446$F0M
                                                       '(#\d))
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$6444$F0M)
                                                         '10)
                                                       g$p$6438$F0M)
                                                     (g$loop$6442$F0M
                                                       (fx+ g$n$6443$F0M '2)
                                                       (cdr g$a$6444$F0M)))
                                                   (if (g$memv$5009$F0M
                                                         g$t$6446$F0M
                                                         '(#\~))
                                                     (begin
                                                       (write-char
                                                         '#\~
                                                         g$p$6438$F0M)
                                                       (g$loop$6442$F0M
                                                         (fx+ g$n$6443$F0M '2)
                                                         g$a$6444$F0M))
                                                     (begin
                                                       (write-char
                                                         g$c$6445$F0M
                                                         g$p$6438$F0M)
                                                       (g$loop$6442$F0M
                                                         (fx+ g$n$6443$F0M '1)
                                                         g$a$6444$F0M)))))))))))
                                    (string-ref
                                      g$cntl$6439$F0M
                                      (fx+ g$n$6443$F0M '1)))
                                   (begin
                                     (write-char g$c$6445$F0M g$p$6438$F0M)
                                     (g$loop$6442$F0M
                                       (fx+ g$n$6443$F0M '1)
                                       g$a$6444$F0M)))))
                              (string-ref g$cntl$6439$F0M g$n$6443$F0M))
                             (void))))))
               g$loop$6442$F0M)
             '0
             g$args$6440$F0M)))
         (fx- (string-length g$cntl$6439$F0M) '1)))))
   (g$printf$6435$F0M
     g$printf$6457$F0M
     (case-lambda
       ((g$control$6447$F0M . g$args$6448$F0M)
        (g$dofmt$6434$F0M
          (current-output-port)
          g$control$6447$F0M
          g$args$6448$F0M))))
   (g$fprintf$6436$F0M
     g$fprintf$6458$F0M
     (case-lambda
       ((g$p$6449$F0M g$control$6450$F0M . g$args$6451$F0M)
        (g$dofmt$6434$F0M g$p$6449$F0M g$control$6450$F0M g$args$6451$F0M))))
   (g$format$6437$F0M
     g$format$6459$F0M
     (case-lambda
       ((g$control$6452$F0M . g$args$6453$F0M)
        (call-with-values
          g$open-string-output-port$6251$F0M
          (case-lambda
            ((g$p$6454$F0M g$c$6455$F0M)
             (begin
               (g$dofmt$6434$F0M
                 g$p$6454$F0M
                 g$control$6452$F0M
                 g$args$6453$F0M)
               (g$c$6455$F0M)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$6460$F0M
     g$make-traced-macro$6463$F0M
     (case-lambda
       ((g$name$6461$F0M g$x$6462$F0M)
        (if (procedure? g$x$6462$F0M)
          (make-traced-procedure
            g$name$6461$F0M
            g$x$6462$F0M
            g$syntax->datum$11174$F0M)
          (if (g$variable-transformer?$10997$F0M g$x$6462$F0M)
            (g$make-variable-transformer$10996$F0M
              (make-traced-procedure
                g$name$6461$F0M
                (g$variable-transformer-procedure$10998$F0M g$x$6462$F0M)
                g$syntax->datum$11174$F0M))
            g$x$6462$F0M))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$library-version-mismatch-warning$6464$F0M
     g$library-version-mismatch-warning$6560$F0M
     (case-lambda
       ((g$name$6537$F0M g$depname$6538$F0M g$filename$6539$F0M)
        (g$fprintf$6458$F0M
          (current-error-port)
          '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
          g$name$6537$F0M
          g$depname$6538$F0M
          g$filename$6539$F0M))))
   (g$file-locator-resolution-error$6465$F0M
     g$file-locator-resolution-error$6561$F0M
     (case-lambda
       ((g$libname$6540$F0M g$failed-list$6541$F0M)
        (letrec* ((g$7628$6542$F0M
                    (make-record-type-descriptor
                      '&library-resolution
                      &condition-rtd
                      'g$7631$F0M
                      '#f
                      '#f
                      '#((immutable library) (immutable files))))
                  (g$7630$6543$F0M '#f)
                  (g$7629$6544$F0M
                    (make-record-constructor-descriptor
                      g$7628$6542$F0M
                      &condition-rcd
                      g$7630$6543$F0M))
                  (g$7627$6545$F0M (record-predicate g$7628$6542$F0M))
                  (g$make-library-resolution-condition$6546$F0M
                    (record-constructor g$7629$6544$F0M))
                  (g$7625$6547$F0M (record-accessor g$7628$6542$F0M '0))
                  (g$7626$6548$F0M (record-accessor g$7628$6542$F0M '1))
                  (g$library-resolution-condition?$6549$F0M
                    (condition-predicate g$7628$6542$F0M))
                  (g$condition-library$6550$F0M
                    (condition-accessor g$7628$6542$F0M g$7625$6547$F0M))
                  (g$condition-files$6551$F0M
                    (condition-accessor g$7628$6542$F0M g$7626$6548$F0M)))
          (raise
            (condition
              (g$make-error$5740$F0M)
              (g$make-who-condition$5766$F0M 'expander)
              (g$make-message-condition$5720$F0M
                '"cannot locate library in library-path")
              (g$make-library-resolution-condition$6546$F0M
                g$libname$6540$F0M
                g$failed-list$6541$F0M)))))))
   (g$read-library-source-file$6466$F0M
     g$read-library-source-file$6562$F0M
     (case-lambda
       ((g$file-name$6552$F0M)
        (g$with-input-from-file$6286$F0M g$file-name$6552$F0M read-annotated))))
   (g$make-parameter$6467$F0M
     g$make-parameter$6563$F0M
     (case-lambda
       ((g$x$6553$F0M)
        (g$make-parameter$6467$F0M
          g$x$6553$F0M
          (case-lambda ((g$x$6554$F0M) g$x$6554$F0M))))
       ((g$x$6555$F0M g$fender$6556$F0M)
        (begin
          (if (not (procedure? g$fender$6556$F0M))
            (g$assertion-error$11167$F0M
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(89,8) - (89,36)"))
            (void))
          ((case-lambda
             ((g$x$6557$F0M)
              (case-lambda
                (() g$x$6557$F0M)
                ((g$v$6558$F0M)
                 (set! g$x$6557$F0M (g$fender$6556$F0M g$v$6558$F0M))))))
           (g$fender$6556$F0M g$x$6555$F0M))))))
   (g$file-options-constructor$6535$F0M
     g$file-options-constructor$6564$F0M
     (g$make-parameter$6467$F0M '#f))
   (g$file-options-spec$6536$F0M
     g$file-options-spec$6565$F0M
     (case-lambda
       ((g$x$6559$F0M) ((g$file-options-constructor$6535$F0M) g$x$6559$F0M)))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$6761$F0M
     g$current-primitive-locations$6806$F0M
     (g$make-parameter$6563$F0M
       (case-lambda ((g$x$6767$F0M) '#f))
       (case-lambda
         ((g$p$6768$F0M)
          (begin
            (if (not (procedure? g$p$6768$F0M))
              (g$assertion-error$11167$F0M
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$6768$F0M)))))
   (g$mutable?$6762$F0M
     g$mutable?$6807$F0M
     (case-lambda
       ((g$x$6769$F0M)
        (letrec* ((g$simple?$6770$F0M
                    (case-lambda
                      ((g$x$6771$F0M)
                       ((case-lambda
                          ((g$t$6772$F0M)
                           (if g$t$6772$F0M
                             g$t$6772$F0M
                             ((case-lambda
                                ((g$t$6773$F0M)
                                 (if g$t$6773$F0M
                                   g$t$6773$F0M
                                   ((case-lambda
                                      ((g$t$6774$F0M)
                                       (if g$t$6774$F0M
                                         g$t$6774$F0M
                                         ((case-lambda
                                            ((g$t$6775$F0M)
                                             (if g$t$6775$F0M
                                               g$t$6775$F0M
                                               ((case-lambda
                                                  ((g$t$6776$F0M)
                                                   (if g$t$6776$F0M
                                                     g$t$6776$F0M
                                                     ((case-lambda
                                                        ((g$t$6777$F0M)
                                                         (if g$t$6777$F0M
                                                           g$t$6777$F0M
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$6771$F0M)))))
                                                      (bytevector?
                                                        g$x$6771$F0M)))))
                                                (string? g$x$6771$F0M)))))
                                          (boolean? g$x$6771$F0M)))))
                                    (symbol? g$x$6771$F0M)))))
                              (char? g$x$6771$F0M)))))
                        (null? g$x$6771$F0M))))))
          (not (g$simple?$6770$F0M g$x$6769$F0M))))))
   (g$rewriter$6763$F0M
     g$rewriter$6808$F0M
     (case-lambda
       ((g$quote-hack?$6778$F0M)
        (letrec* ((g$f$6779$F0M
                    (case-lambda
                      ((g$x$6780$F0M)
                       (if (pair? g$x$6780$F0M)
                         ((case-lambda
                            ((g$t$6781$F0M)
                             (if (g$memv$5009$F0M g$t$6781$F0M '(quote))
                               (if (if g$quote-hack?$6778$F0M
                                     (begin
                                       '#f
                                       (g$mutable?$6762$F0M
                                         (g$cadr$5178$F0M g$x$6780$F0M)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$6782$F0M)
                                     (begin
                                       (set-symbol-value!
                                         g$g$6782$F0M
                                         (g$cadr$5178$F0M g$x$6780$F0M))
                                       g$g$6782$F0M)))
                                  (gensym))
                                 g$x$6780$F0M)
                               (if (g$memv$5009$F0M g$t$6781$F0M '(case-lambda))
                                 (cons
                                   'case-lambda
                                   (map (case-lambda
                                          ((g$x$6783$F0M)
                                           (cons
                                             (car g$x$6783$F0M)
                                             (map g$f$6779$F0M
                                                  (cdr g$x$6783$F0M)))))
                                        (cdr g$x$6780$F0M)))
                                 (if (g$memv$5009$F0M g$t$6781$F0M '(lambda))
                                   (g$cons*$5016$F0M
                                     'lambda
                                     (g$cadr$5178$F0M g$x$6780$F0M)
                                     (map g$f$6779$F0M
                                          (g$cddr$5180$F0M g$x$6780$F0M)))
                                   (if (g$memv$5009$F0M g$t$6781$F0M '(letrec))
                                     ((case-lambda
                                        ((g$bindings$6784$F0M g$body*$6785$F0M)
                                         ((case-lambda
                                            ((g$lhs*$6786$F0M g$rhs*$6787$F0M)
                                             (g$cons*$5016$F0M
                                               'letrec
                                               (map list
                                                    g$lhs*$6786$F0M
                                                    (map g$f$6779$F0M
                                                         g$rhs*$6787$F0M))
                                               (map g$f$6779$F0M
                                                    g$body*$6785$F0M))))
                                          (map car g$bindings$6784$F0M)
                                          (map g$cadr$5178$F0M
                                               g$bindings$6784$F0M))))
                                      (g$cadr$5178$F0M g$x$6780$F0M)
                                      (g$cddr$5180$F0M g$x$6780$F0M))
                                     (if (g$memv$5009$F0M
                                           g$t$6781$F0M
                                           '(letrec*))
                                       ((case-lambda
                                          ((g$bindings$6788$F0M
                                             g$body*$6789$F0M)
                                           ((case-lambda
                                              ((g$lhs*$6790$F0M g$rhs*$6791$F0M)
                                               (g$cons*$5016$F0M
                                                 'letrec*
                                                 (map list
                                                      g$lhs*$6790$F0M
                                                      (map g$f$6779$F0M
                                                           g$rhs*$6791$F0M))
                                                 (map g$f$6779$F0M
                                                      g$body*$6789$F0M))))
                                            (map car g$bindings$6788$F0M)
                                            (map g$cadr$5178$F0M
                                                 g$bindings$6788$F0M))))
                                        (g$cadr$5178$F0M g$x$6780$F0M)
                                        (g$cddr$5180$F0M g$x$6780$F0M))
                                       (if (g$memv$5009$F0M
                                             g$t$6781$F0M
                                             '(library-letrec*))
                                         ((case-lambda
                                            ((g$name$6792$F0M g$x$6793$F0M)
                                             ((case-lambda
                                                ((g$bindings$6794$F0M
                                                   g$body*$6795$F0M)
                                                 ((case-lambda
                                                    ((g$lhs*$6796$F0M
                                                       g$lhs**$6797$F0M
                                                       g$rhs*$6798$F0M)
                                                     (g$cons*$5016$F0M
                                                       'library-letrec*
                                                       g$name$6792$F0M
                                                       (map list
                                                            g$lhs*$6796$F0M
                                                            g$lhs**$6797$F0M
                                                            (map g$f$6779$F0M
                                                                 g$rhs*$6798$F0M))
                                                       (map g$f$6779$F0M
                                                            g$body*$6795$F0M))))
                                                  (map car g$bindings$6794$F0M)
                                                  (map g$cadr$5178$F0M
                                                       g$bindings$6794$F0M)
                                                  (map g$caddr$5184$F0M
                                                       g$bindings$6794$F0M))))
                                              (g$cadr$5178$F0M g$x$6793$F0M)
                                              (g$cddr$5180$F0M g$x$6793$F0M))))
                                          (g$cadr$5178$F0M g$x$6780$F0M)
                                          (cdr g$x$6780$F0M))
                                         (if (g$memv$5009$F0M
                                               g$t$6781$F0M
                                               '(begin))
                                           (cons
                                             'begin
                                             (map g$f$6779$F0M
                                                  (cdr g$x$6780$F0M)))
                                           (if (g$memv$5009$F0M
                                                 g$t$6781$F0M
                                                 '(set!))
                                             (list
                                               'set!
                                               (g$cadr$5178$F0M g$x$6780$F0M)
                                               (g$f$6779$F0M
                                                 (g$caddr$5184$F0M
                                                   g$x$6780$F0M)))
                                             (if (g$memv$5009$F0M
                                                   g$t$6781$F0M
                                                   '(primitive))
                                               ((case-lambda
                                                  ((g$op$6799$F0M)
                                                   ((case-lambda
                                                      ((g$t$6800$F0M)
                                                       (if g$t$6800$F0M
                                                         ((case-lambda
                                                            ((g$loc$6801$F0M)
                                                             g$loc$6801$F0M))
                                                          g$t$6800$F0M)
                                                         g$op$6799$F0M)))
                                                    ((g$current-primitive-locations$6761$F0M)
                                                     g$op$6799$F0M))))
                                                (g$cadr$5178$F0M g$x$6780$F0M))
                                               (if (g$memv$5009$F0M
                                                     g$t$6781$F0M
                                                     '(define))
                                                 g$x$6780$F0M
                                                 (if (list? g$x$6780$F0M)
                                                   (map g$f$6779$F0M
                                                        g$x$6780$F0M)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$6780$F0M
                                                     (list?
                                                       g$x$6780$F0M)))))))))))))))
                          (car g$x$6780$F0M))
                         g$x$6780$F0M)))))
          g$f$6779$F0M))))
   (g$expanded->core$6764$F0M
     g$expanded->core$6809$F0M
     (case-lambda ((g$x$6802$F0M) ((g$rewriter$6763$F0M '#t) g$x$6802$F0M))))
   (g$compile-core-expr$6765$F0M
     g$compile-core-expr$6810$F0M
     (case-lambda ((g$x$6803$F0M) ((g$rewriter$6763$F0M '#f) g$x$6803$F0M))))
   (g$compile-core-expr-to-port$6766$F0M
     g$compile-core-expr-to-port$6811$F0M
     (case-lambda
       ((g$x$6804$F0M g$p$6805$F0M)
        (g$pretty-print$6760$F0M
          ((g$rewriter$6763$F0M '#f) g$x$6804$F0M)
          g$p$6805$F0M)))))
  (void))

(library-letrec* (psyntax config) () (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$6850$F0M
     g$make-collection$7045$F0M
     (case-lambda
       (()
        ((case-lambda
           ((g$set$6911$F0M)
            (letrec* ((g$set-cons$6912$F0M
                        (case-lambda
                          ((g$x$6914$F0M g$ls$6915$F0M)
                           (if (g$memq$5008$F0M g$x$6914$F0M g$ls$6915$F0M)
                             g$ls$6915$F0M
                             (cons g$x$6914$F0M g$ls$6915$F0M))))))
              (case-lambda
                (() g$set$6911$F0M)
                ((g$x$6913$F0M)
                 (set! g$set$6911$F0M
                   (g$set-cons$6912$F0M g$x$6913$F0M g$set$6911$F0M)))))))
         '()))))
   (g$current-library-collection$6851$F0M
     g$current-library-collection$7046$F0M
     (g$make-parameter$6563$F0M
       (g$make-collection$6850$F0M)
       (case-lambda
         ((g$x$6916$F0M)
          (begin
            (if (not (procedure? g$x$6916$F0M))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$6916$F0M)
              (void))
            g$x$6916$F0M)))))
   (g$7944$6852$F0M
     g$7944$7047$F0M
     (make-record-type-descriptor
       'library
       '#f
       'g$7947$F0M
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$7946$6853$F0M g$7946$7048$F0M '#f)
   (g$7945$6854$F0M
     g$7945$7049$F0M
     (make-record-constructor-descriptor
       g$7944$6852$F0M
       '#f
       g$7946$6853$F0M))
   (g$library?$6855$F0M
     g$library?$7050$F0M
     (record-predicate g$7944$6852$F0M))
   (g$make-library$6856$F0M
     g$make-library$7051$F0M
     (record-constructor g$7945$6854$F0M))
   (g$library-id$6857$F0M
     g$library-id$7052$F0M
     (record-accessor g$7944$6852$F0M '0))
   (g$library-name$6858$F0M
     g$library-name$7053$F0M
     (record-accessor g$7944$6852$F0M '1))
   (g$library-version$6859$F0M
     g$library-version$7054$F0M
     (record-accessor g$7944$6852$F0M '2))
   (g$library-imp*$6860$F0M
     g$library-imp*$7055$F0M
     (record-accessor g$7944$6852$F0M '3))
   (g$library-vis*$6861$F0M
     g$library-vis*$7056$F0M
     (record-accessor g$7944$6852$F0M '4))
   (g$library-inv*$6862$F0M
     g$library-inv*$7057$F0M
     (record-accessor g$7944$6852$F0M '5))
   (g$library-subst$6863$F0M
     g$library-subst$7058$F0M
     (record-accessor g$7944$6852$F0M '6))
   (g$library-env$6864$F0M
     g$library-env$7059$F0M
     (record-accessor g$7944$6852$F0M '7))
   (g$library-visit-state$6865$F0M
     g$library-visit-state$7060$F0M
     (record-accessor g$7944$6852$F0M '8))
   (g$library-invoke-state$6866$F0M
     g$library-invoke-state$7061$F0M
     (record-accessor g$7944$6852$F0M '9))
   (g$library-visit-code$6867$F0M
     g$library-visit-code$7062$F0M
     (record-accessor g$7944$6852$F0M '10))
   (g$library-invoke-code$6868$F0M
     g$library-invoke-code$7063$F0M
     (record-accessor g$7944$6852$F0M '11))
   (g$library-visible?$6869$F0M
     g$library-visible?$7064$F0M
     (record-accessor g$7944$6852$F0M '12))
   (g$library-source-file-name$6870$F0M
     g$library-source-file-name$7065$F0M
     (record-accessor g$7944$6852$F0M '13))
   (g$set-library-id!$6871$F0M
     g$set-library-id!$7066$F0M
     (record-mutator g$7944$6852$F0M '0))
   (g$set-library-name!$6872$F0M
     g$set-library-name!$7067$F0M
     (record-mutator g$7944$6852$F0M '1))
   (g$set-library-version!$6873$F0M
     g$set-library-version!$7068$F0M
     (record-mutator g$7944$6852$F0M '2))
   (g$set-library-imp*!$6874$F0M
     g$set-library-imp*!$7069$F0M
     (record-mutator g$7944$6852$F0M '3))
   (g$set-library-vis*!$6875$F0M
     g$set-library-vis*!$7070$F0M
     (record-mutator g$7944$6852$F0M '4))
   (g$set-library-inv*!$6876$F0M
     g$set-library-inv*!$7071$F0M
     (record-mutator g$7944$6852$F0M '5))
   (g$set-library-subst!$6877$F0M
     g$set-library-subst!$7072$F0M
     (record-mutator g$7944$6852$F0M '6))
   (g$set-library-env!$6878$F0M
     g$set-library-env!$7073$F0M
     (record-mutator g$7944$6852$F0M '7))
   (g$set-library-visit-state!$6879$F0M
     g$set-library-visit-state!$7074$F0M
     (record-mutator g$7944$6852$F0M '8))
   (g$set-library-invoke-state!$6880$F0M
     g$set-library-invoke-state!$7075$F0M
     (record-mutator g$7944$6852$F0M '9))
   (g$set-library-visit-code!$6881$F0M
     g$set-library-visit-code!$7076$F0M
     (record-mutator g$7944$6852$F0M '10))
   (g$set-library-invoke-code!$6882$F0M
     g$set-library-invoke-code!$7077$F0M
     (record-mutator g$7944$6852$F0M '11))
   (g$set-library-visible?!$6883$F0M
     g$set-library-visible?!$7078$F0M
     (record-mutator g$7944$6852$F0M '12))
   (g$set-library-source-file-name!$6884$F0M
     g$set-library-source-file-name!$7079$F0M
     (record-mutator g$7944$6852$F0M '13))
   (g$rp$6885$F0M
     g$rp$7080$F0M
     (make-record-printer
       'library
       (case-lambda
         ((g$x$6917$F0M g$p$6918$F0M g$wr$6919$F0M)
          (begin
            (if (not (g$library?$6855$F0M g$x$6917$F0M))
              (assertion-violation 'record-type-printer '"not a library")
              (void))
            (display
              (g$format$6459$F0M
                '"#<library ~s>"
                (if (null? (g$library-version$6859$F0M g$x$6917$F0M))
                  (g$library-name$6858$F0M g$x$6917$F0M)
                  (append
                    (g$library-name$6858$F0M g$x$6917$F0M)
                    (list (g$library-version$6859$F0M g$x$6917$F0M)))))
              g$p$6918$F0M))))))
   (g$find-dependencies$6886$F0M
     g$find-dependencies$7081$F0M
     (case-lambda
       ((g$ls$6920$F0M)
        (if (null? g$ls$6920$F0M)
          '()
          (assertion-violation 'find-dependencies '"cannot handle deps yet")))))
   (g$find-library-by$6887$F0M
     g$find-library-by$7082$F0M
     (case-lambda
       ((g$pred$6921$F0M)
        ((letrec ((g$f$6922$F0M
                    (case-lambda
                      ((g$ls$6923$F0M)
                       (if (null? g$ls$6923$F0M)
                         '#f
                         (if (g$pred$6921$F0M (car g$ls$6923$F0M))
                           (car g$ls$6923$F0M)
                           (g$f$6922$F0M (cdr g$ls$6923$F0M))))))))
           g$f$6922$F0M)
         ((g$current-library-collection$6851$F0M))))))
   (g$library-path$6888$F0M
     g$library-path$7083$F0M
     (g$make-parameter$6563$F0M
       '(".")
       (case-lambda
         ((g$x$6924$F0M)
          (if (if (list? g$x$6924$F0M)
                (begin '#f (g$for-all$5014$F0M string? g$x$6924$F0M))
                '#f)
            (map (case-lambda ((g$x$6925$F0M) g$x$6925$F0M)) g$x$6924$F0M)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$6924$F0M))))))
   (g$library-extensions$6889$F0M
     g$library-extensions$7084$F0M
     (g$make-parameter$6563$F0M
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$6926$F0M)
          (if (if (list? g$x$6926$F0M)
                (begin '#f (g$for-all$5014$F0M string? g$x$6926$F0M))
                '#f)
            (map (case-lambda ((g$x$6927$F0M) g$x$6927$F0M)) g$x$6926$F0M)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$6926$F0M))))))
   (g$library-name->file-name$6890$F0M
     g$library-name->file-name$7085$F0M
     (case-lambda
       ((g$x$6928$F0M)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$6251$F0M)))
          (case-lambda
            ((g$p$6931$F0M g$extract$6932$F0M)
             ((case-lambda
                ((g$extract$6933$F0M g$p$6934$F0M)
                 (letrec* ((g$display-hex$6935$F0M
                             (case-lambda
                               ((g$n$6943$F0M)
                                (if (<= '0 g$n$6943$F0M '9)
                                  (display g$n$6943$F0M g$p$6934$F0M)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$6943$F0M '10)))
                                    g$p$6934$F0M))))))
                   (begin
                     ((letrec ((g$f$6936$F0M
                                 (case-lambda
                                   ((g$ls$6937$F0M)
                                    (if (not (null? g$ls$6937$F0M))
                                      (begin
                                        (display '"/" g$p$6934$F0M)
                                        (for-each
                                          (case-lambda
                                            ((g$c$6938$F0M)
                                             (if ((case-lambda
                                                    ((g$t$6939$F0M)
                                                     (if g$t$6939$F0M
                                                       g$t$6939$F0M
                                                       ((case-lambda
                                                          ((g$t$6940$F0M)
                                                           (if g$t$6940$F0M
                                                             g$t$6940$F0M
                                                             ((case-lambda
                                                                ((g$t$6941$F0M)
                                                                 (if g$t$6941$F0M
                                                                   g$t$6941$F0M
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$5009$F0M
                                                                       g$c$6938$F0M
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$5215$F0M
                                                                '#\0
                                                                g$c$6938$F0M
                                                                '#\9)))))
                                                        (g$char<=?$5215$F0M
                                                          '#\A
                                                          g$c$6938$F0M
                                                          '#\Z)))))
                                                  (g$char<=?$5215$F0M
                                                    '#\a
                                                    g$c$6938$F0M
                                                    '#\z))
                                               (display
                                                 g$c$6938$F0M
                                                 g$p$6934$F0M)
                                               (begin
                                                 (display '"%" g$p$6934$F0M)
                                                 ((case-lambda
                                                    ((g$n$6942$F0M)
                                                     (begin
                                                       (g$display-hex$6935$F0M
                                                         (g$quotient$5830$F0M
                                                           g$n$6942$F0M
                                                           '16))
                                                       (g$display-hex$6935$F0M
                                                         (g$remainder$5831$F0M
                                                           g$n$6942$F0M
                                                           '16)))))
                                                  (char->integer
                                                    g$c$6938$F0M))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$6937$F0M))))
                                        (g$f$6936$F0M (cdr g$ls$6937$F0M)))
                                      (void))))))
                        g$f$6936$F0M)
                      g$x$6928$F0M)
                     (g$extract$6933$F0M)))))
              g$extract$6932$F0M
              g$p$6931$F0M)))))))
   (g$file-locator$6891$F0M
     g$file-locator$7086$F0M
     (g$make-parameter$6563$F0M
       (case-lambda
         ((g$x$6944$F0M)
          ((case-lambda
             ((g$str$6945$F0M)
              ((letrec ((g$f$6946$F0M
                          (case-lambda
                            ((g$ls$6947$F0M
                               g$exts$6948$F0M
                               g$failed-list$6949$F0M)
                             (if (null? g$ls$6947$F0M)
                               (g$file-locator-resolution-error$6561$F0M
                                 g$x$6944$F0M
                                 (reverse g$failed-list$6949$F0M))
                               (if (null? g$exts$6948$F0M)
                                 (g$f$6946$F0M
                                   (cdr g$ls$6947$F0M)
                                   (g$library-extensions$6889$F0M)
                                   g$failed-list$6949$F0M)
                                 ((case-lambda
                                    ((g$name$6950$F0M)
                                     (if (g$file-exists?$5471$F0M
                                           g$name$6950$F0M)
                                       g$name$6950$F0M
                                       (g$f$6946$F0M
                                         g$ls$6947$F0M
                                         (cdr g$exts$6948$F0M)
                                         (cons
                                           g$name$6950$F0M
                                           g$failed-list$6949$F0M)))))
                                  (string-append
                                    (car g$ls$6947$F0M)
                                    g$str$6945$F0M
                                    (car g$exts$6948$F0M)))))))))
                 g$f$6946$F0M)
               (g$library-path$6888$F0M)
               (g$library-extensions$6889$F0M)
               '())))
           (g$library-name->file-name$6890$F0M g$x$6944$F0M))))
       (case-lambda
         ((g$f$6951$F0M)
          (if (procedure? g$f$6951$F0M)
            g$f$6951$F0M
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$6951$F0M))))))
   (g$serialize-all$6892$F0M
     g$serialize-all$7087$F0M
     (case-lambda
       ((g$serialize$6952$F0M g$compile$6953$F0M)
        (letrec* ((g$library-desc$6954$F0M
                    (case-lambda
                      ((g$x$6956$F0M)
                       (list
                         (g$library-id$6857$F0M g$x$6956$F0M)
                         (g$library-name$6858$F0M g$x$6956$F0M))))))
          (for-each
            (case-lambda
              ((g$x$6955$F0M)
               (if (g$library-source-file-name$6870$F0M g$x$6955$F0M)
                 (g$serialize$6952$F0M
                   (g$library-source-file-name$6870$F0M g$x$6955$F0M)
                   (list
                     (g$library-id$6857$F0M g$x$6955$F0M)
                     (g$library-name$6858$F0M g$x$6955$F0M)
                     (g$library-version$6859$F0M g$x$6955$F0M)
                     (map g$library-desc$6954$F0M
                          (g$library-imp*$6860$F0M g$x$6955$F0M))
                     (map g$library-desc$6954$F0M
                          (g$library-vis*$6861$F0M g$x$6955$F0M))
                     (map g$library-desc$6954$F0M
                          (g$library-inv*$6862$F0M g$x$6955$F0M))
                     (g$library-subst$6863$F0M g$x$6955$F0M)
                     (g$library-env$6864$F0M g$x$6955$F0M)
                     (g$compile$6953$F0M
                       (g$library-visit-code$6867$F0M g$x$6955$F0M))
                     (g$compile$6953$F0M
                       (g$library-invoke-code$6868$F0M g$x$6955$F0M))
                     (g$library-visible?$6869$F0M g$x$6955$F0M)))
                 (void))))
            ((g$current-library-collection$6851$F0M)))))))
   (g$current-precompiled-library-loader$6893$F0M
     g$current-precompiled-library-loader$7088$F0M
     (g$make-parameter$6563$F0M
       (case-lambda ((g$filename$6957$F0M g$sk$6958$F0M) '#f))))
   (g$try-load-from-file$6894$F0M
     g$try-load-from-file$7089$F0M
     (case-lambda
       ((g$filename$6959$F0M)
        ((g$current-precompiled-library-loader$6893$F0M)
         g$filename$6959$F0M
         (case-lambda
           ((g$id$6960$F0M
              g$name$6961$F0M
              g$ver$6962$F0M
              g$imp*$6963$F0M
              g$vis*$6964$F0M
              g$inv*$6965$F0M
              g$exp-subst$6966$F0M
              g$exp-env$6967$F0M
              g$visit-proc$6968$F0M
              g$invoke-proc$6969$F0M
              g$visible?$6970$F0M)
            ((letrec ((g$f$6971$F0M
                        (case-lambda
                          ((g$deps$6972$F0M)
                           (if (null? g$deps$6972$F0M)
                             (begin
                               (g$install-library$6904$F0M
                                 g$id$6960$F0M
                                 g$name$6961$F0M
                                 g$ver$6962$F0M
                                 g$imp*$6963$F0M
                                 g$vis*$6964$F0M
                                 g$inv*$6965$F0M
                                 g$exp-subst$6966$F0M
                                 g$exp-env$6967$F0M
                                 g$visit-proc$6968$F0M
                                 g$invoke-proc$6969$F0M
                                 '#f
                                 '#f
                                 g$visible?$6970$F0M
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$6973$F0M)
                                 ((case-lambda
                                    ((g$label$6974$F0M g$dname$6975$F0M)
                                     ((case-lambda
                                        ((g$l$6976$F0M)
                                         (if (if (g$library?$6855$F0M
                                                   g$l$6976$F0M)
                                               (begin
                                                 '#f
                                                 (eq? g$label$6974$F0M
                                                      (g$library-id$6857$F0M
                                                        g$l$6976$F0M)))
                                               '#f)
                                           (g$f$6971$F0M (cdr g$deps$6972$F0M))
                                           (begin
                                             (g$library-version-mismatch-warning$6560$F0M
                                               g$name$6961$F0M
                                               g$dname$6975$F0M
                                               g$filename$6959$F0M)
                                             '#f))))
                                      (g$find-library-by-name$6899$F0M
                                        g$dname$6975$F0M))))
                                  (car g$d$6973$F0M)
                                  (g$cadr$5178$F0M g$d$6973$F0M))))
                              (car g$deps$6972$F0M)))))))
               g$f$6971$F0M)
             (append g$imp*$6963$F0M g$vis*$6964$F0M g$inv*$6965$F0M)))
           (g$others$6977$F0M '#f))))))
   (g$library-loader$6895$F0M
     g$library-loader$7090$F0M
     (g$make-parameter$6563$F0M
       (case-lambda
         ((g$x$6978$F0M)
          ((case-lambda
             ((g$file-name$6979$F0M)
              (if (not g$file-name$6979$F0M)
                (assertion-violation '#f '"cannot file library" g$x$6978$F0M)
                ((case-lambda
                   ((g$t$6980$F0M)
                    (if g$t$6980$F0M
                      g$t$6980$F0M
                      (begin
                        '#f
                        ((g$current-library-expander$6896$F0M)
                         (g$read-library-source-file$6562$F0M
                           g$file-name$6979$F0M)
                         g$file-name$6979$F0M
                         (case-lambda
                           ((g$name$6981$F0M)
                            (if (not (equal? g$name$6981$F0M g$x$6978$F0M))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (() (g$open-string-output-port$6251$F0M)))
                                  (case-lambda
                                    ((g$p$6984$F0M g$e$6985$F0M)
                                     ((case-lambda
                                        ((g$e$6986$F0M g$p$6987$F0M)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$6987$F0M)
                                           (write g$x$6978$F0M g$p$6987$F0M)
                                           (display '" in file " g$p$6987$F0M)
                                           (display
                                             g$file-name$6979$F0M
                                             g$p$6987$F0M)
                                           (display '", found " g$p$6987$F0M)
                                           (write g$name$6981$F0M g$p$6987$F0M)
                                           (display '" instead" g$p$6987$F0M)
                                           (g$e$6986$F0M))))
                                      g$e$6985$F0M
                                      g$p$6984$F0M)))))
                              (void)))))))))
                 (g$try-load-from-file$6894$F0M g$file-name$6979$F0M)))))
           ((g$file-locator$6891$F0M) g$x$6978$F0M))))
       (case-lambda
         ((g$f$6988$F0M)
          (if (procedure? g$f$6988$F0M)
            g$f$6988$F0M
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$6988$F0M))))))
   (g$current-library-expander$6896$F0M
     g$current-library-expander$7091$F0M
     (g$make-parameter$6563$F0M
       (case-lambda
         ((g$x$6989$F0M)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$6990$F0M)
          (if (procedure? g$f$6990$F0M)
            g$f$6990$F0M
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$6990$F0M))))))
   (g$external-pending-libraries$6897$F0M
     g$external-pending-libraries$7092$F0M
     (g$make-parameter$6563$F0M '()))
   (g$find-external-library$6898$F0M
     g$find-external-library$7093$F0M
     (case-lambda
       ((g$name$6991$F0M)
        (begin
          (if (g$member$5010$F0M
                g$name$6991$F0M
                (g$external-pending-libraries$6897$F0M))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$6991$F0M)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$6994$F0M
                g$external-pending-libraries$6995$F0M)
              ((case-lambda
                 ((g$swap$6996$F0M)
                  (dynamic-wind
                    g$swap$6996$F0M
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$6895$F0M) g$name$6991$F0M)
                         ((case-lambda
                            ((g$t$6997$F0M)
                             (if g$t$6997$F0M
                               g$t$6997$F0M
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$6991$F0M)))))
                          (g$find-library-by$6887$F0M
                            (case-lambda
                              ((g$x$6998$F0M)
                               (equal?
                                 (g$library-name$6858$F0M g$x$6998$F0M)
                                 g$name$6991$F0M))))))))
                    g$swap$6996$F0M)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$6999$F0M)
                      (begin
                        (g$external-pending-libraries$6994$F0M
                          g$external-pending-libraries$6995$F0M)
                        (set! g$external-pending-libraries$6995$F0M
                          g$t$6999$F0M))))
                   (g$external-pending-libraries$6994$F0M)))))))
           g$external-pending-libraries$6897$F0M
           (cons g$name$6991$F0M (g$external-pending-libraries$6897$F0M)))))))
   (g$find-library-by-name$6899$F0M
     g$find-library-by-name$7094$F0M
     (case-lambda
       ((g$name$7000$F0M)
        ((case-lambda
           ((g$t$7001$F0M)
            (if g$t$7001$F0M
              g$t$7001$F0M
              (begin '#f (g$find-external-library$6898$F0M g$name$7000$F0M)))))
         (g$find-library-by$6887$F0M
           (case-lambda
             ((g$x$7002$F0M)
              (equal?
                (g$library-name$6858$F0M g$x$7002$F0M)
                g$name$7000$F0M))))))))
   (g$library-exists?$6900$F0M
     g$library-exists?$7095$F0M
     (case-lambda
       ((g$name$7003$F0M)
        (if (g$find-library-by$6887$F0M
              (case-lambda
                ((g$x$7004$F0M)
                 (equal?
                   (g$library-name$6858$F0M g$x$7004$F0M)
                   g$name$7003$F0M))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$6901$F0M
     g$find-library-by-spec/die$7096$F0M
     (case-lambda
       ((g$spec$7005$F0M)
        ((case-lambda
           ((g$id$7006$F0M)
            ((case-lambda
               ((g$t$7007$F0M)
                (if g$t$7007$F0M
                  g$t$7007$F0M
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$7005$F0M)))))
             (g$find-library-by$6887$F0M
               (case-lambda
                 ((g$x$7008$F0M)
                  (eq? g$id$7006$F0M (g$library-id$6857$F0M g$x$7008$F0M))))))))
         (car g$spec$7005$F0M)))))
   (g$label->binding-table$6902$F0M
     g$label->binding-table$7097$F0M
     (g$make-eq-hashtable$5452$F0M))
   (g$install-library-record$6903$F0M
     g$install-library-record$7098$F0M
     (case-lambda
       ((g$lib$7009$F0M)
        (begin
          ((case-lambda
             ((g$exp-env$7010$F0M)
              (for-each
                (case-lambda
                  ((g$x$7011$F0M)
                   ((case-lambda
                      ((g$label$7012$F0M g$binding$7013$F0M)
                       ((case-lambda
                          ((g$binding$7014$F0M)
                           (g$hashtable-set!$5456$F0M
                             g$label->binding-table$6902$F0M
                             g$label$7012$F0M
                             g$binding$7014$F0M)))
                        ((case-lambda
                           ((g$t$7015$F0M)
                            (if (g$memv$5009$F0M g$t$7015$F0M '(global))
                              (cons
                                'global
                                (cons g$lib$7009$F0M (cdr g$binding$7013$F0M)))
                              (if (g$memv$5009$F0M g$t$7015$F0M '(global-macro))
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$7009$F0M
                                    (cdr g$binding$7013$F0M)))
                                (if (g$memv$5009$F0M
                                      g$t$7015$F0M
                                      '(global-macro!))
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$7009$F0M
                                      (cdr g$binding$7013$F0M)))
                                  g$binding$7013$F0M)))))
                         (car g$binding$7013$F0M)))))
                    (car g$x$7011$F0M)
                    (cdr g$x$7011$F0M))))
                g$exp-env$7010$F0M)))
           (g$library-env$6864$F0M g$lib$7009$F0M))
          ((g$current-library-collection$6851$F0M) g$lib$7009$F0M)))))
   (g$install-library$6904$F0M
     g$install-library$7099$F0M
     (case-lambda
       ((g$id$7016$F0M
          g$name$7017$F0M
          g$ver$7018$F0M
          g$imp*$7019$F0M
          g$vis*$7020$F0M
          g$inv*$7021$F0M
          g$exp-subst$7022$F0M
          g$exp-env$7023$F0M
          g$visit-proc$7024$F0M
          g$invoke-proc$7025$F0M
          g$visit-code$7026$F0M
          g$invoke-code$7027$F0M
          g$visible?$7028$F0M
          g$source-file-name$7029$F0M)
        ((case-lambda
           ((g$imp-lib*$7030$F0M g$vis-lib*$7031$F0M g$inv-lib*$7032$F0M)
            (begin
              (if (not (if (symbol? g$id$7016$F0M)
                         (if (list? g$name$7017$F0M)
                           (begin '#f (list? g$ver$7018$F0M))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$7016$F0M
                  g$name$7017$F0M
                  g$ver$7018$F0M)
                (void))
              (if (g$library-exists?$6900$F0M g$name$7017$F0M)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$7017$F0M)
                (void))
              ((case-lambda
                 ((g$lib$7033$F0M)
                  (g$install-library-record$6903$F0M g$lib$7033$F0M)))
               (g$make-library$6856$F0M
                 g$id$7016$F0M
                 g$name$7017$F0M
                 g$ver$7018$F0M
                 g$imp-lib*$7030$F0M
                 g$vis-lib*$7031$F0M
                 g$inv-lib*$7032$F0M
                 g$exp-subst$7022$F0M
                 g$exp-env$7023$F0M
                 g$visit-proc$7024$F0M
                 g$invoke-proc$7025$F0M
                 g$visit-code$7026$F0M
                 g$invoke-code$7027$F0M
                 g$visible?$7028$F0M
                 g$source-file-name$7029$F0M)))))
         (map g$find-library-by-spec/die$6901$F0M g$imp*$7019$F0M)
         (map g$find-library-by-spec/die$6901$F0M g$vis*$7020$F0M)
         (map g$find-library-by-spec/die$6901$F0M g$inv*$7021$F0M)))))
   (g$imported-label->binding$6905$F0M
     g$imported-label->binding$7100$F0M
     (case-lambda
       ((g$lab$7034$F0M)
        (g$hashtable-ref$5455$F0M
          g$label->binding-table$6902$F0M
          g$lab$7034$F0M
          '#f))))
   (g$invoke-library$6906$F0M
     g$invoke-library$7101$F0M
     (case-lambda
       ((g$lib$7035$F0M)
        ((case-lambda
           ((g$invoke$7036$F0M)
            (if (procedure? g$invoke$7036$F0M)
              (begin
                (g$set-library-invoke-state!$6880$F0M
                  g$lib$7035$F0M
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$7035$F0M))))
                (for-each
                  g$invoke-library$6906$F0M
                  (g$library-inv*$6862$F0M g$lib$7035$F0M))
                (g$set-library-invoke-state!$6880$F0M
                  g$lib$7035$F0M
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$7035$F0M))))
                (g$invoke$7036$F0M)
                (g$set-library-invoke-state!$6880$F0M g$lib$7035$F0M '#t))
              (void))))
         (g$library-invoke-state$6866$F0M g$lib$7035$F0M)))))
   (g$visit-library$6907$F0M
     g$visit-library$7102$F0M
     (case-lambda
       ((g$lib$7037$F0M)
        ((case-lambda
           ((g$visit$7038$F0M)
            (if (procedure? g$visit$7038$F0M)
              (begin
                (g$set-library-visit-state!$6879$F0M
                  g$lib$7037$F0M
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$7037$F0M))))
                (for-each
                  g$invoke-library$6906$F0M
                  (g$library-vis*$6861$F0M g$lib$7037$F0M))
                (g$set-library-visit-state!$6879$F0M
                  g$lib$7037$F0M
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$7037$F0M))))
                (g$visit$7038$F0M)
                (g$set-library-visit-state!$6879$F0M g$lib$7037$F0M '#t))
              (void))))
         (g$library-visit-state$6865$F0M g$lib$7037$F0M)))))
   (g$invoke-library-by-spec$6908$F0M
     g$invoke-library-by-spec$7103$F0M
     (case-lambda
       ((g$spec$7039$F0M)
        (g$invoke-library$6906$F0M
          (g$find-library-by-spec/die$6901$F0M g$spec$7039$F0M)))))
   (g$installed-libraries$6909$F0M
     g$installed-libraries$7104$F0M
     (case-lambda
       ((g$all?$7040$F0M)
        ((letrec ((g$f$7041$F0M
                    (case-lambda
                      ((g$ls$7042$F0M)
                       (if (null? g$ls$7042$F0M)
                         '()
                         (if ((case-lambda
                                ((g$t$7043$F0M)
                                 (if g$t$7043$F0M
                                   g$t$7043$F0M
                                   (begin
                                     '#f
                                     (g$library-visible?$6869$F0M
                                       (car g$ls$7042$F0M))))))
                              g$all?$7040$F0M)
                           (cons
                             (car g$ls$7042$F0M)
                             (g$f$7041$F0M (cdr g$ls$7042$F0M)))
                           (g$f$7041$F0M (cdr g$ls$7042$F0M))))))))
           g$f$7041$F0M)
         ((g$current-library-collection$6851$F0M))))
       (() (g$installed-libraries$6909$F0M '#f))))
   (g$library-spec$6910$F0M
     g$library-spec$7105$F0M
     (case-lambda
       ((g$x$7044$F0M)
        (begin
          (if (not (g$library?$6855$F0M g$x$7044$F0M))
            (assertion-violation 'library-spec '"not a library" g$x$7044$F0M)
            (void))
          (list
            (g$library-id$6857$F0M g$x$7044$F0M)
            (g$library-name$6858$F0M g$x$7044$F0M)
            (g$library-version$6859$F0M g$x$7044$F0M)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$7106$F0M
     g$build-global-define$7216$F0M
     (case-lambda ((g$x$7187$F0M) (g$build-void$7183$F0M))))
   (g$build-lambda$7155$F0M
     g$build-lambda$7217$F0M
     (case-lambda
       ((g$ae$7188$F0M g$vars$7189$F0M g$exp$7190$F0M)
        (list 'case-lambda (list g$vars$7189$F0M g$exp$7190$F0M)))))
   (g$build-case-lambda$7156$F0M
     g$build-case-lambda$7218$F0M
     (case-lambda
       ((g$ae$7191$F0M g$vars*$7192$F0M g$exp*$7193$F0M)
        (cons 'case-lambda (map list g$vars*$7192$F0M g$exp*$7193$F0M)))))
   (g$build-let$7157$F0M
     g$build-let$7219$F0M
     (case-lambda
       ((g$ae$7194$F0M g$lhs*$7195$F0M g$rhs*$7196$F0M g$body$7197$F0M)
        (cons
          (g$build-lambda$7155$F0M
            g$ae$7194$F0M
            g$lhs*$7195$F0M
            g$body$7197$F0M)
          g$rhs*$7196$F0M))))
   (g$build-sequence$7182$F0M
     g$build-sequence$7220$F0M
     (case-lambda
       ((g$ae$7198$F0M g$exps$7199$F0M)
        ((letrec ((g$loop$7200$F0M
                    (case-lambda
                      ((g$exps$7201$F0M)
                       (if (null? (cdr g$exps$7201$F0M))
                         (car g$exps$7201$F0M)
                         (if (equal?
                               (car g$exps$7201$F0M)
                               (g$build-void$7183$F0M))
                           (g$loop$7200$F0M (cdr g$exps$7201$F0M))
                           (cons 'begin g$exps$7201$F0M)))))))
           g$loop$7200$F0M)
         g$exps$7199$F0M))))
   (g$build-void$7183$F0M
     g$build-void$7221$F0M
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$7184$F0M
     g$build-letrec$7222$F0M
     (case-lambda
       ((g$ae$7202$F0M g$vars$7203$F0M g$val-exps$7204$F0M g$body-exp$7205$F0M)
        (if (null? g$vars$7203$F0M)
          g$body-exp$7205$F0M
          (list
            'letrec
            (map list g$vars$7203$F0M g$val-exps$7204$F0M)
            g$body-exp$7205$F0M)))))
   (g$build-letrec*$7185$F0M
     g$build-letrec*$7223$F0M
     (case-lambda
       ((g$ae$7206$F0M g$vars$7207$F0M g$val-exps$7208$F0M g$body-exp$7209$F0M)
        (if (null? g$vars$7207$F0M)
          g$body-exp$7209$F0M
          (list
            'letrec*
            (map list g$vars$7207$F0M g$val-exps$7208$F0M)
            g$body-exp$7209$F0M)))))
   (g$build-library-letrec*$7186$F0M
     g$build-library-letrec*$7224$F0M
     (case-lambda
       ((g$ae$7210$F0M
          g$name$7211$F0M
          g$vars$7212$F0M
          g$locs$7213$F0M
          g$val-exps$7214$F0M
          g$body-exp$7215$F0M)
        (list
          'library-letrec*
          g$name$7211$F0M
          (map list g$vars$7212$F0M g$locs$7213$F0M g$val-exps$7214$F0M)
          g$body-exp$7215$F0M)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$7225$F0M
     g$set-cons$10909$F0M
     (case-lambda
       ((g$x$7688$F0M g$ls$7689$F0M)
        (if (g$memq$5008$F0M g$x$7688$F0M g$ls$7689$F0M)
          g$ls$7689$F0M
          (cons g$x$7688$F0M g$ls$7689$F0M)))))
   (g$set-union$7226$F0M
     g$set-union$10910$F0M
     (case-lambda
       ((g$ls1$7690$F0M g$ls2$7691$F0M)
        (if (null? g$ls1$7690$F0M)
          g$ls2$7691$F0M
          (if (g$memq$5008$F0M (car g$ls1$7690$F0M) g$ls2$7691$F0M)
            (g$set-union$7226$F0M (cdr g$ls1$7690$F0M) g$ls2$7691$F0M)
            (cons
              (car g$ls1$7690$F0M)
              (g$set-union$7226$F0M (cdr g$ls1$7690$F0M) g$ls2$7691$F0M)))))))
   (g$top-mark*$7228$F0M g$top-mark*$10911$F0M '(top))
   (g$top-marked?$7229$F0M
     g$top-marked?$10912$F0M
     (case-lambda ((g$m*$7692$F0M) (g$memq$5008$F0M 'top g$m*$7692$F0M))))
   (g$gen-lexical$7230$F0M
     g$gen-lexical$10913$F0M
     (case-lambda
       ((g$sym$7693$F0M)
        (if (symbol? g$sym$7693$F0M)
          (gensym g$sym$7693$F0M)
          (if (g$stx?$7263$F0M g$sym$7693$F0M)
            (g$gen-lexical$7230$F0M (g$id->sym$7292$F0M g$sym$7693$F0M))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$7693$F0M))))))
   (g$gen-global$7231$F0M
     g$gen-global$10914$F0M
     (case-lambda ((g$x$7694$F0M) (g$gen-lexical$7230$F0M g$x$7694$F0M))))
   (g$gen-label$7232$F0M
     g$gen-label$10915$F0M
     (case-lambda ((g$_$7695$F0M) (gensym))))
   (g$gen-top-level-label$7233$F0M
     g$gen-top-level-label$10916$F0M
     (case-lambda
       ((g$id$7696$F0M g$rib$7697$F0M)
        (letrec* ((g$find$7698$F0M
                    (case-lambda
                      ((g$sym$7704$F0M
                         g$mark*$7705$F0M
                         g$sym*$7706$F0M
                         g$mark**$7707$F0M
                         g$label*$7708$F0M)
                       (if (pair? g$sym*$7706$F0M)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7704$F0M (car g$sym*$7706$F0M))
                                 (begin
                                   '#f
                                   (g$same-marks?$7293$F0M
                                     g$mark*$7705$F0M
                                     (car g$mark**$7707$F0M)))
                                 '#f)
                             (car g$label*$7708$F0M)
                             (g$find$7698$F0M
                               g$sym$7704$F0M
                               g$mark*$7705$F0M
                               (cdr g$sym*$7706$F0M)
                               (cdr g$mark**$7707$F0M)
                               (cdr g$label*$7708$F0M))))
                         '#f)))))
          ((case-lambda
             ((g$sym$7699$F0M g$mark*$7700$F0M)
              ((case-lambda
                 ((g$sym*$7701$F0M)
                  ((case-lambda
                     ((g$t$7702$F0M)
                      (if g$t$7702$F0M
                        ((case-lambda
                           ((g$label$7703$F0M)
                            (if (g$imported-label->binding$7100$F0M
                                  g$label$7703$F0M)
                              (gensym)
                              g$label$7703$F0M)))
                         g$t$7702$F0M)
                        (gensym))))
                   (if (g$memq$5008$F0M
                         g$sym$7699$F0M
                         (g$rib-sym*$7241$F0M g$rib$7697$F0M))
                     (begin
                       '#f
                       (g$find$7698$F0M
                         g$sym$7699$F0M
                         g$mark*$7700$F0M
                         g$sym*$7701$F0M
                         (g$rib-mark**$7242$F0M g$rib$7697$F0M)
                         (g$rib-label*$7243$F0M g$rib$7697$F0M)))
                     '#f))))
               (g$rib-sym*$7241$F0M g$rib$7697$F0M))))
           (g$id->sym$7292$F0M g$id$7696$F0M)
           (g$stx-mark*$7266$F0M g$id$7696$F0M))))))
   (g$gen-define-label+loc$7234$F0M
     g$gen-define-label+loc$10917$F0M
     (case-lambda
       ((g$id$7709$F0M g$rib$7710$F0M)
        ((case-lambda
           ((g$t$7711$F0M)
            (if g$t$7711$F0M
              ((case-lambda
                 ((g$env$7712$F0M)
                  ((case-lambda
                     ((g$label$7713$F0M g$locs$7714$F0M)
                      (values
                        g$label$7713$F0M
                        ((case-lambda
                           ((g$t$7715$F0M)
                            (if g$t$7715$F0M
                              (cdr g$t$7715$F0M)
                              ((case-lambda
                                 ((g$loc$7716$F0M)
                                  (begin
                                    (g$set-interaction-env-locs!$7652$F0M
                                      g$env$7712$F0M
                                      (cons
                                        (cons g$label$7713$F0M g$loc$7716$F0M)
                                        g$locs$7714$F0M))
                                    g$loc$7716$F0M)))
                               (g$gen-lexical$7230$F0M g$id$7709$F0M)))))
                         (g$assq$5004$F0M g$label$7713$F0M g$locs$7714$F0M)))))
                   (g$gen-top-level-label$7233$F0M g$id$7709$F0M g$rib$7710$F0M)
                   (g$interaction-env-locs$7649$F0M g$env$7712$F0M))))
               g$t$7711$F0M)
              (values (gensym) (g$gen-lexical$7230$F0M g$id$7709$F0M)))))
         (g$top-level-context$7687$F0M)))))
   (g$gen-define-label$7235$F0M
     g$gen-define-label$10918$F0M
     (case-lambda
       ((g$id$7717$F0M g$rib$7718$F0M)
        (if (g$top-level-context$7687$F0M)
          (g$gen-top-level-label$7233$F0M g$id$7717$F0M g$rib$7718$F0M)
          (gensym)))))
   (g$8328$7236$F0M
     g$8328$10919$F0M
     (make-record-type-descriptor
       'rib
       '#f
       'g$8331$F0M
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq)
          (mutable cache))))
   (g$8330$7237$F0M g$8330$10920$F0M '#f)
   (g$8329$7238$F0M
     g$8329$10921$F0M
     (make-record-constructor-descriptor
       g$8328$7236$F0M
       '#f
       g$8330$7237$F0M))
   (g$rib?$7239$F0M g$rib?$10922$F0M (record-predicate g$8328$7236$F0M))
   (g$make-rib$7240$F0M
     g$make-rib$10923$F0M
     (record-constructor g$8329$7238$F0M))
   (g$rib-sym*$7241$F0M
     g$rib-sym*$10924$F0M
     (record-accessor g$8328$7236$F0M '0))
   (g$rib-mark**$7242$F0M
     g$rib-mark**$10925$F0M
     (record-accessor g$8328$7236$F0M '1))
   (g$rib-label*$7243$F0M
     g$rib-label*$10926$F0M
     (record-accessor g$8328$7236$F0M '2))
   (g$rib-sealed/freq$7244$F0M
     g$rib-sealed/freq$10927$F0M
     (record-accessor g$8328$7236$F0M '3))
   (g$rib-cache$7245$F0M
     g$rib-cache$10928$F0M
     (record-accessor g$8328$7236$F0M '4))
   (g$set-rib-sym*!$7246$F0M
     g$set-rib-sym*!$10929$F0M
     (record-mutator g$8328$7236$F0M '0))
   (g$set-rib-mark**!$7247$F0M
     g$set-rib-mark**!$10930$F0M
     (record-mutator g$8328$7236$F0M '1))
   (g$set-rib-label*!$7248$F0M
     g$set-rib-label*!$10931$F0M
     (record-mutator g$8328$7236$F0M '2))
   (g$set-rib-sealed/freq!$7249$F0M
     g$set-rib-sealed/freq!$10932$F0M
     (record-mutator g$8328$7236$F0M '3))
   (g$set-rib-cache!$7250$F0M
     g$set-rib-cache!$10933$F0M
     (record-mutator g$8328$7236$F0M '4))
   (g$make-empty-rib$7251$F0M
     g$make-empty-rib$10934$F0M
     (case-lambda (() (g$make-rib$7240$F0M '() '() '() '#f '#f))))
   (g$make-cache-rib$7252$F0M
     g$make-cache-rib$10935$F0M
     (case-lambda
       (()
        (g$make-rib$7240$F0M '() '() '() '#f (g$make-eq-hashtable$5452$F0M)))))
   (g$find-label$7253$F0M
     g$find-label$10936$F0M
     (case-lambda
       ((g$rib$7719$F0M g$sym$7720$F0M g$mark*$7721$F0M)
        ((case-lambda
           ((g$ht$7722$F0M)
            (if g$ht$7722$F0M
              (begin
                '#f
                ((case-lambda
                   ((g$cv$7723$F0M)
                    ((case-lambda
                       ((g$t$7724$F0M)
                        (if g$t$7724$F0M (cdr g$t$7724$F0M) '#f)))
                     (if g$cv$7723$F0M
                       (begin
                         '#f
                         (g$assp$5007$F0M
                           (case-lambda
                             ((g$m$7725$F0M)
                              (g$same-marks?$7293$F0M
                                g$mark*$7721$F0M
                                g$m$7725$F0M)))
                           g$cv$7723$F0M))
                       '#f))))
                 (g$hashtable-ref$5455$F0M g$ht$7722$F0M g$sym$7720$F0M '#f)))
              '#f)))
         (g$rib-cache$7245$F0M g$rib$7719$F0M)))))
   (g$extend-rib!$7254$F0M
     g$extend-rib!$10937$F0M
     (case-lambda
       ((g$rib$7726$F0M g$id$7727$F0M g$label$7728$F0M)
        (letrec* ((g$find$7729$F0M
                    (case-lambda
                      ((g$sym$7738$F0M
                         g$mark*$7739$F0M
                         g$sym*$7740$F0M
                         g$mark**$7741$F0M
                         g$label*$7742$F0M)
                       (if (pair? g$sym*$7740$F0M)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7738$F0M (car g$sym*$7740$F0M))
                                 (begin
                                   '#f
                                   (g$same-marks?$7293$F0M
                                     g$mark*$7739$F0M
                                     (car g$mark**$7741$F0M)))
                                 '#f)
                             g$label*$7742$F0M
                             (g$find$7729$F0M
                               g$sym$7738$F0M
                               g$mark*$7739$F0M
                               (cdr g$sym*$7740$F0M)
                               (cdr g$mark**$7741$F0M)
                               (cdr g$label*$7742$F0M))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$7244$F0M g$rib$7726$F0M)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$7726$F0M)
              (void))
            ((case-lambda
               ((g$sym$7730$F0M g$mark*$7731$F0M)
                ((case-lambda
                   ((g$sym*$7732$F0M)
                    ((case-lambda
                       ((g$t$7733$F0M)
                        (if g$t$7733$F0M
                          ((case-lambda
                             ((g$p$7734$F0M)
                              (if (not (eq? g$label$7728$F0M g$p$7734$F0M))
                                (g$syntax-violation$7680$F0M
                                  '#f
                                  '"multiple definitions of identifier"
                                  g$id$7727$F0M)
                                (void))))
                           g$t$7733$F0M)
                          ((case-lambda
                             ((g$t$7735$F0M)
                              (if g$t$7735$F0M
                                ((case-lambda
                                   ((g$p$7736$F0M)
                                    (if (not (eq? g$label$7728$F0M
                                                  (car g$p$7736$F0M)))
                                      (if (g$top-level-context$7687$F0M)
                                        (set-car! g$p$7736$F0M g$label$7728$F0M)
                                        (g$syntax-violation$7680$F0M
                                          '#f
                                          '"multiple definitions of identifier"
                                          g$id$7727$F0M))
                                      (void))))
                                 g$t$7735$F0M)
                                (begin
                                  (if (g$rib-cache$7245$F0M g$rib$7726$F0M)
                                    (g$hashtable-update!$5459$F0M
                                      (g$rib-cache$7245$F0M g$rib$7726$F0M)
                                      g$sym$7730$F0M
                                      (case-lambda
                                        ((g$e$7737$F0M)
                                         (cons
                                           (cons
                                             g$mark*$7731$F0M
                                             g$label$7728$F0M)
                                           g$e$7737$F0M)))
                                      '())
                                    (void))
                                  (g$set-rib-sym*!$7246$F0M
                                    g$rib$7726$F0M
                                    (cons g$sym$7730$F0M g$sym*$7732$F0M))
                                  (g$set-rib-mark**!$7247$F0M
                                    g$rib$7726$F0M
                                    (cons
                                      g$mark*$7731$F0M
                                      (g$rib-mark**$7242$F0M g$rib$7726$F0M)))
                                  (g$set-rib-label*!$7248$F0M
                                    g$rib$7726$F0M
                                    (cons
                                      g$label$7728$F0M
                                      (g$rib-label*$7243$F0M
                                        g$rib$7726$F0M)))))))
                           (if (g$memq$5008$F0M
                                 g$sym$7730$F0M
                                 (g$rib-sym*$7241$F0M g$rib$7726$F0M))
                             (begin
                               '#f
                               (g$find$7729$F0M
                                 g$sym$7730$F0M
                                 g$mark*$7731$F0M
                                 g$sym*$7732$F0M
                                 (g$rib-mark**$7242$F0M g$rib$7726$F0M)
                                 (g$rib-label*$7243$F0M g$rib$7726$F0M)))
                             '#f)))))
                     (g$find-label$7253$F0M
                       g$rib$7726$F0M
                       g$sym$7730$F0M
                       g$mark*$7731$F0M))))
                 (g$rib-sym*$7241$F0M g$rib$7726$F0M))))
             (g$id->sym$7292$F0M g$id$7727$F0M)
             (g$stx-mark*$7266$F0M g$id$7727$F0M)))))))
   (g$extend-rib/nc!$7255$F0M
     g$extend-rib/nc!$10938$F0M
     (case-lambda
       ((g$rib$7743$F0M g$id$7744$F0M g$label$7745$F0M)
        ((case-lambda
           ((g$sym$7746$F0M g$mark*$7747$F0M)
            ((case-lambda
               ((g$sym*$7748$F0M)
                (begin
                  (if (g$rib-cache$7245$F0M g$rib$7743$F0M)
                    (g$hashtable-update!$5459$F0M
                      (g$rib-cache$7245$F0M g$rib$7743$F0M)
                      g$sym$7746$F0M
                      (case-lambda
                        ((g$e$7749$F0M)
                         (cons
                           (cons g$mark*$7747$F0M g$label$7745$F0M)
                           g$e$7749$F0M)))
                      '())
                    (void))
                  (g$set-rib-sym*!$7246$F0M
                    g$rib$7743$F0M
                    (cons g$sym$7746$F0M g$sym*$7748$F0M))
                  (g$set-rib-mark**!$7247$F0M
                    g$rib$7743$F0M
                    (cons
                      g$mark*$7747$F0M
                      (g$rib-mark**$7242$F0M g$rib$7743$F0M)))
                  (g$set-rib-label*!$7248$F0M
                    g$rib$7743$F0M
                    (cons
                      g$label$7745$F0M
                      (g$rib-label*$7243$F0M g$rib$7743$F0M))))))
             (g$rib-sym*$7241$F0M g$rib$7743$F0M))))
         (g$id->sym$7292$F0M g$id$7744$F0M)
         (g$stx-mark*$7266$F0M g$id$7744$F0M)))))
   (g$make-rib-map$7256$F0M
     g$make-rib-map$10939$F0M
     (case-lambda
       ((g$sym*$7750$F0M)
        ((case-lambda
           ((g$ht$7751$F0M)
            ((letrec ((g$f$7752$F0M
                        (case-lambda
                          ((g$i$7753$F0M g$sym*$7754$F0M)
                           (if (null? g$sym*$7754$F0M)
                             g$ht$7751$F0M
                             (begin
                               (g$hashtable-update!$5459$F0M
                                 g$ht$7751$F0M
                                 (car g$sym*$7754$F0M)
                                 (case-lambda
                                   ((g$x$7755$F0M)
                                    (cons g$i$7753$F0M g$x$7755$F0M)))
                                 '())
                               (g$f$7752$F0M
                                 (+ g$i$7753$F0M '1)
                                 (cdr g$sym*$7754$F0M))))))))
               g$f$7752$F0M)
             '0
             g$sym*$7750$F0M)))
         (g$make-eq-hashtable$5452$F0M)))))
   (g$seal-rib!$7257$F0M
     g$seal-rib!$10940$F0M
     (case-lambda
       ((g$rib$7756$F0M)
        ((case-lambda
           ((g$sym*$7757$F0M)
            (if (not (null? g$sym*$7757$F0M))
              (begin
                (g$set-rib-sym*!$7246$F0M
                  g$rib$7756$F0M
                  (list->vector g$sym*$7757$F0M))
                (g$set-rib-mark**!$7247$F0M
                  g$rib$7756$F0M
                  (list->vector (g$rib-mark**$7242$F0M g$rib$7756$F0M)))
                (g$set-rib-label*!$7248$F0M
                  g$rib$7756$F0M
                  (list->vector (g$rib-label*$7243$F0M g$rib$7756$F0M)))
                (g$set-rib-sealed/freq!$7249$F0M
                  g$rib$7756$F0M
                  (g$make-rib-map$7256$F0M g$sym*$7757$F0M)))
              (void))))
         (g$rib-sym*$7241$F0M g$rib$7756$F0M)))))
   (g$unseal-rib!$7258$F0M
     g$unseal-rib!$10941$F0M
     (case-lambda
       ((g$rib$7758$F0M)
        (if (g$rib-sealed/freq$7244$F0M g$rib$7758$F0M)
          (begin
            (g$set-rib-sealed/freq!$7249$F0M g$rib$7758$F0M '#f)
            (g$set-rib-sym*!$7246$F0M
              g$rib$7758$F0M
              (vector->list (g$rib-sym*$7241$F0M g$rib$7758$F0M)))
            (g$set-rib-mark**!$7247$F0M
              g$rib$7758$F0M
              (vector->list (g$rib-mark**$7242$F0M g$rib$7758$F0M)))
            (g$set-rib-label*!$7248$F0M
              g$rib$7758$F0M
              (vector->list (g$rib-label*$7243$F0M g$rib$7758$F0M))))
          (void)))))
   (g$make-full-rib$7259$F0M
     g$make-full-rib$10942$F0M
     (case-lambda
       ((g$id*$7759$F0M g$label*$7760$F0M)
        ((case-lambda
           ((g$r$7761$F0M)
            (begin (g$seal-rib!$7257$F0M g$r$7761$F0M) g$r$7761$F0M)))
         (g$make-rib$7240$F0M
           (map g$id->sym$7292$F0M g$id*$7759$F0M)
           (map g$stx-mark*$7266$F0M g$id*$7759$F0M)
           g$label*$7760$F0M
           '#f
           '#f)))))
   (g$8359$7260$F0M
     g$8359$10943$F0M
     (make-record-type-descriptor
       'stx
       '#f
       'g$8362$F0M
       '#t
       '#t
       '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*))))
   (g$8361$7261$F0M g$8361$10944$F0M '#f)
   (g$8360$7262$F0M
     g$8360$10945$F0M
     (make-record-constructor-descriptor
       g$8359$7260$F0M
       '#f
       g$8361$7261$F0M))
   (g$stx?$7263$F0M g$stx?$10946$F0M (record-predicate g$8359$7260$F0M))
   (g$make-stx$7264$F0M
     g$make-stx$10947$F0M
     (record-constructor g$8360$7262$F0M))
   (g$stx-expr$7265$F0M
     g$stx-expr$10948$F0M
     (record-accessor g$8359$7260$F0M '0))
   (g$stx-mark*$7266$F0M
     g$stx-mark*$10949$F0M
     (record-accessor g$8359$7260$F0M '1))
   (g$stx-subst*$7267$F0M
     g$stx-subst*$10950$F0M
     (record-accessor g$8359$7260$F0M '2))
   (g$stx-ae*$7268$F0M
     g$stx-ae*$10951$F0M
     (record-accessor g$8359$7260$F0M '3))
   (g$set-stx-expr!$7269$F0M
     g$set-stx-expr!$10952$F0M
     (record-mutator g$8359$7260$F0M '0))
   (g$set-stx-mark*!$7270$F0M
     g$set-stx-mark*!$10953$F0M
     (record-mutator g$8359$7260$F0M '1))
   (g$set-stx-subst*!$7271$F0M
     g$set-stx-subst*!$10954$F0M
     (record-mutator g$8359$7260$F0M '2))
   (g$set-stx-ae*!$7272$F0M
     g$set-stx-ae*!$10955$F0M
     (record-mutator g$8359$7260$F0M '3))
   (g$rp$7273$F0M
     g$rp$10956$F0M
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$7762$F0M g$p$7763$F0M g$wr$7764$F0M)
          (begin
            (display '"#<syntax " g$p$7763$F0M)
            (write (g$stx->datum$7302$F0M g$x$7762$F0M) g$p$7763$F0M)
            ((case-lambda
               ((g$expr$7765$F0M)
                (if (annotation? g$expr$7765$F0M)
                  ((case-lambda
                     ((g$src$7766$F0M)
                      (if (pair? g$src$7766$F0M)
                        (begin
                          (display '" (" g$p$7763$F0M)
                          (display (cdr g$src$7766$F0M) g$p$7763$F0M)
                          (display '" of " g$p$7763$F0M)
                          (display (car g$src$7766$F0M) g$p$7763$F0M)
                          (display '")" g$p$7763$F0M))
                        (void))))
                   (annotation-source g$expr$7765$F0M))
                  (void))))
             (g$stx-expr$7265$F0M g$x$7762$F0M))
            (display '">" g$p$7763$F0M))))))
   (g$datum->stx$7274$F0M
     g$datum->stx$10957$F0M
     (case-lambda
       ((g$id$7767$F0M g$datum$7768$F0M)
        (g$make-stx$7264$F0M
          g$datum$7768$F0M
          (g$stx-mark*$7266$F0M g$id$7767$F0M)
          (g$stx-subst*$7267$F0M g$id$7767$F0M)
          (g$stx-ae*$7268$F0M g$id$7767$F0M)))))
   (g$gen-mark$7275$F0M
     g$gen-mark$10958$F0M
     (case-lambda (() (string '#\m))))
   (g$anti-mark$7276$F0M g$anti-mark$10959$F0M '#f)
   (g$anti-mark?$7277$F0M g$anti-mark?$10960$F0M not)
   (g$join-wraps$7278$F0M
     g$join-wraps$10961$F0M
     (case-lambda
       ((g$m1*$7769$F0M g$s1*$7770$F0M g$ae1*$7771$F0M g$e$7772$F0M)
        (letrec* ((g$cancel$7773$F0M
                    (case-lambda
                      ((g$ls1$7777$F0M g$ls2$7778$F0M)
                       ((letrec ((g$f$7779$F0M
                                   (case-lambda
                                     ((g$x$7780$F0M g$ls1$7781$F0M)
                                      (if (null? g$ls1$7781$F0M)
                                        (cdr g$ls2$7778$F0M)
                                        (cons
                                          g$x$7780$F0M
                                          (g$f$7779$F0M
                                            (car g$ls1$7781$F0M)
                                            (cdr g$ls1$7781$F0M))))))))
                          g$f$7779$F0M)
                        (car g$ls1$7777$F0M)
                        (cdr g$ls1$7777$F0M))))))
          ((case-lambda
             ((g$m2*$7774$F0M g$s2*$7775$F0M g$ae2*$7776$F0M)
              (if (if (not (null? g$m1*$7769$F0M))
                    (if (not (null? g$m2*$7774$F0M))
                      (begin '#f (g$anti-mark?$7277$F0M (car g$m2*$7774$F0M)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$7773$F0M g$m1*$7769$F0M g$m2*$7774$F0M)
                  (g$cancel$7773$F0M g$s1*$7770$F0M g$s2*$7775$F0M)
                  (g$cancel$7773$F0M g$ae1*$7771$F0M g$ae2*$7776$F0M))
                (values
                  (append g$m1*$7769$F0M g$m2*$7774$F0M)
                  (append g$s1*$7770$F0M g$s2*$7775$F0M)
                  (append g$ae1*$7771$F0M g$ae2*$7776$F0M)))))
           (g$stx-mark*$7266$F0M g$e$7772$F0M)
           (g$stx-subst*$7267$F0M g$e$7772$F0M)
           (g$stx-ae*$7268$F0M g$e$7772$F0M))))))
   (g$mkstx$7279$F0M
     g$mkstx$10962$F0M
     (case-lambda
       ((g$e$7782$F0M g$m*$7783$F0M g$s*$7784$F0M g$ae*$7785$F0M)
        (if (if (g$stx?$7263$F0M g$e$7782$F0M)
              (begin '#f (not (g$top-marked?$7229$F0M g$m*$7783$F0M)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$7278$F0M
                 g$m*$7783$F0M
                 g$s*$7784$F0M
                 g$ae*$7785$F0M
                 g$e$7782$F0M)))
            (case-lambda
              ((g$m*$7789$F0M g$s*$7790$F0M g$ae*$7791$F0M)
               ((case-lambda
                  ((g$ae*$7792$F0M g$s*$7793$F0M g$m*$7794$F0M)
                   (g$make-stx$7264$F0M
                     (g$stx-expr$7265$F0M g$e$7782$F0M)
                     g$m*$7794$F0M
                     g$s*$7793$F0M
                     g$ae*$7792$F0M)))
                g$ae*$7791$F0M
                g$s*$7790$F0M
                g$m*$7789$F0M))))
          (g$make-stx$7264$F0M
            g$e$7782$F0M
            g$m*$7783$F0M
            g$s*$7784$F0M
            g$ae*$7785$F0M)))))
   (g$add-mark$7280$F0M
     g$add-mark$10963$F0M
     (case-lambda
       ((g$m$7795$F0M g$e$7796$F0M g$ae$7797$F0M)
        (g$mkstx$7279$F0M
          g$e$7796$F0M
          (list g$m$7795$F0M)
          '(shift)
          (list g$ae$7797$F0M)))))
   (g$add-subst$7281$F0M
     g$add-subst$10964$F0M
     (case-lambda
       ((g$subst$7798$F0M g$e$7799$F0M)
        (g$mkstx$7279$F0M g$e$7799$F0M '() (list g$subst$7798$F0M) '()))))
   (g$syntax-kind?$7282$F0M
     g$syntax-kind?$10965$F0M
     (case-lambda
       ((g$x$7800$F0M g$p?$7801$F0M)
        (if (g$stx?$7263$F0M g$x$7800$F0M)
          (g$syntax-kind?$7282$F0M
            (g$stx-expr$7265$F0M g$x$7800$F0M)
            g$p?$7801$F0M)
          (if (annotation? g$x$7800$F0M)
            (g$syntax-kind?$7282$F0M
              (annotation-expression g$x$7800$F0M)
              g$p?$7801$F0M)
            (g$p?$7801$F0M g$x$7800$F0M))))))
   (g$syntax-vector->list$7283$F0M
     g$syntax-vector->list$10966$F0M
     (case-lambda
       ((g$x$7802$F0M)
        (if (g$stx?$7263$F0M g$x$7802$F0M)
          ((case-lambda
             ((g$ls$7803$F0M g$m*$7804$F0M g$s*$7805$F0M g$ae*$7806$F0M)
              (map (case-lambda
                     ((g$x$7807$F0M)
                      (g$mkstx$7279$F0M
                        g$x$7807$F0M
                        g$m*$7804$F0M
                        g$s*$7805$F0M
                        g$ae*$7806$F0M)))
                   g$ls$7803$F0M)))
           (g$syntax-vector->list$7283$F0M (g$stx-expr$7265$F0M g$x$7802$F0M))
           (g$stx-mark*$7266$F0M g$x$7802$F0M)
           (g$stx-subst*$7267$F0M g$x$7802$F0M)
           (g$stx-ae*$7268$F0M g$x$7802$F0M))
          (if (annotation? g$x$7802$F0M)
            (g$syntax-vector->list$7283$F0M
              (annotation-expression g$x$7802$F0M))
            (if (vector? g$x$7802$F0M)
              (vector->list g$x$7802$F0M)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$7802$F0M)))))))
   (g$syntax-pair?$7284$F0M
     g$syntax-pair?$10967$F0M
     (case-lambda
       ((g$x$7808$F0M) (g$syntax-kind?$7282$F0M g$x$7808$F0M pair?))))
   (g$syntax-vector?$7285$F0M
     g$syntax-vector?$10968$F0M
     (case-lambda
       ((g$x$7809$F0M) (g$syntax-kind?$7282$F0M g$x$7809$F0M vector?))))
   (g$syntax-null?$7286$F0M
     g$syntax-null?$10969$F0M
     (case-lambda
       ((g$x$7810$F0M) (g$syntax-kind?$7282$F0M g$x$7810$F0M null?))))
   (g$syntax-list?$7287$F0M
     g$syntax-list?$10970$F0M
     (case-lambda
       ((g$x$7811$F0M)
        ((case-lambda
           ((g$t$7812$F0M)
            (if g$t$7812$F0M
              g$t$7812$F0M
              (begin
                '#f
                (if (g$syntax-pair?$7284$F0M g$x$7811$F0M)
                  (begin
                    '#f
                    (g$syntax-list?$7287$F0M
                      (g$syntax-cdr$7289$F0M g$x$7811$F0M)))
                  '#f)))))
         (g$syntax-null?$7286$F0M g$x$7811$F0M)))))
   (g$syntax-car$7288$F0M
     g$syntax-car$10971$F0M
     (case-lambda
       ((g$x$7813$F0M)
        (if (g$stx?$7263$F0M g$x$7813$F0M)
          (g$mkstx$7279$F0M
            (g$syntax-car$7288$F0M (g$stx-expr$7265$F0M g$x$7813$F0M))
            (g$stx-mark*$7266$F0M g$x$7813$F0M)
            (g$stx-subst*$7267$F0M g$x$7813$F0M)
            (g$stx-ae*$7268$F0M g$x$7813$F0M))
          (if (annotation? g$x$7813$F0M)
            (g$syntax-car$7288$F0M (annotation-expression g$x$7813$F0M))
            (if (pair? g$x$7813$F0M)
              (car g$x$7813$F0M)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$7813$F0M)))))))
   (g$syntax-cdr$7289$F0M
     g$syntax-cdr$10972$F0M
     (case-lambda
       ((g$x$7814$F0M)
        (if (g$stx?$7263$F0M g$x$7814$F0M)
          (g$mkstx$7279$F0M
            (g$syntax-cdr$7289$F0M (g$stx-expr$7265$F0M g$x$7814$F0M))
            (g$stx-mark*$7266$F0M g$x$7814$F0M)
            (g$stx-subst*$7267$F0M g$x$7814$F0M)
            (g$stx-ae*$7268$F0M g$x$7814$F0M))
          (if (annotation? g$x$7814$F0M)
            (g$syntax-cdr$7289$F0M (annotation-expression g$x$7814$F0M))
            (if (pair? g$x$7814$F0M)
              (cdr g$x$7814$F0M)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$7814$F0M)))))))
   (g$syntax->list$7290$F0M
     g$syntax->list$10973$F0M
     (case-lambda
       ((g$x$7815$F0M)
        (if (g$syntax-pair?$7284$F0M g$x$7815$F0M)
          (cons
            (g$syntax-car$7288$F0M g$x$7815$F0M)
            (g$syntax->list$7290$F0M (g$syntax-cdr$7289$F0M g$x$7815$F0M)))
          (if (g$syntax-null?$7286$F0M g$x$7815$F0M)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$7815$F0M))))))
   (g$id?$7291$F0M
     g$id?$10974$F0M
     (case-lambda
       ((g$x$7816$F0M)
        (if (g$stx?$7263$F0M g$x$7816$F0M)
          (begin
            '#f
            ((case-lambda
               ((g$expr$7817$F0M)
                (symbol?
                  (if (annotation? g$expr$7817$F0M)
                    (annotation-stripped g$expr$7817$F0M)
                    g$expr$7817$F0M))))
             (g$stx-expr$7265$F0M g$x$7816$F0M)))
          '#f))))
   (g$id->sym$7292$F0M
     g$id->sym$10975$F0M
     (case-lambda
       ((g$x$7818$F0M)
        (begin
          (if (not (g$stx?$7263$F0M g$x$7818$F0M))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$7818$F0M)
            (void))
          ((case-lambda
             ((g$expr$7819$F0M)
              ((case-lambda
                 ((g$sym$7820$F0M)
                  (if (symbol? g$sym$7820$F0M)
                    g$sym$7820$F0M
                    (error 'id->sym '"BUG in ikarus: not an id" g$x$7818$F0M))))
               (if (annotation? g$expr$7819$F0M)
                 (annotation-stripped g$expr$7819$F0M)
                 g$expr$7819$F0M))))
           (g$stx-expr$7265$F0M g$x$7818$F0M))))))
   (g$same-marks?$7293$F0M
     g$same-marks?$10976$F0M
     (case-lambda
       ((g$x$7821$F0M g$y$7822$F0M)
        ((case-lambda
           ((g$t$7823$F0M)
            (if g$t$7823$F0M
              g$t$7823$F0M
              (begin
                '#f
                (if (pair? g$x$7821$F0M)
                  (if (pair? g$y$7822$F0M)
                    (if (eq? (car g$x$7821$F0M) (car g$y$7822$F0M))
                      (begin
                        '#f
                        (g$same-marks?$7293$F0M
                          (cdr g$x$7821$F0M)
                          (cdr g$y$7822$F0M)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$7821$F0M) (begin '#f (null? g$y$7822$F0M)) '#f)))))
   (g$bound-id=?$7294$F0M
     g$bound-id=?$10977$F0M
     (case-lambda
       ((g$x$7824$F0M g$y$7825$F0M)
        (if (eq? (g$id->sym$7292$F0M g$x$7824$F0M)
                 (g$id->sym$7292$F0M g$y$7825$F0M))
          (begin
            '#f
            (g$same-marks?$7293$F0M
              (g$stx-mark*$7266$F0M g$x$7824$F0M)
              (g$stx-mark*$7266$F0M g$y$7825$F0M)))
          '#f))))
   (g$free-id=?$7295$F0M
     g$free-id=?$10978$F0M
     (case-lambda
       ((g$i$7826$F0M g$j$7827$F0M)
        ((case-lambda
           ((g$t0$7828$F0M g$t1$7829$F0M)
            (if ((case-lambda
                   ((g$t$7830$F0M)
                    (if g$t$7830$F0M g$t$7830$F0M (begin '#f g$t1$7829$F0M))))
                 g$t0$7828$F0M)
              (eq? g$t0$7828$F0M g$t1$7829$F0M)
              (eq? (g$id->sym$7292$F0M g$i$7826$F0M)
                   (g$id->sym$7292$F0M g$j$7827$F0M)))))
         (g$id->real-label$7305$F0M g$i$7826$F0M)
         (g$id->real-label$7305$F0M g$j$7827$F0M)))))
   (g$valid-bound-ids?$7296$F0M
     g$valid-bound-ids?$10979$F0M
     (case-lambda
       ((g$id*$7831$F0M)
        (if (g$for-all$5014$F0M g$id?$7291$F0M g$id*$7831$F0M)
          (begin '#f (g$distinct-bound-ids?$7297$F0M g$id*$7831$F0M))
          '#f))))
   (g$distinct-bound-ids?$7297$F0M
     g$distinct-bound-ids?$10980$F0M
     (case-lambda
       ((g$id*$7832$F0M)
        ((case-lambda
           ((g$t$7833$F0M)
            (if g$t$7833$F0M
              g$t$7833$F0M
              (begin
                '#f
                (if (not (g$bound-id-member?$7298$F0M
                           (car g$id*$7832$F0M)
                           (cdr g$id*$7832$F0M)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$7297$F0M (cdr g$id*$7832$F0M)))
                  '#f)))))
         (null? g$id*$7832$F0M)))))
   (g$bound-id-member?$7298$F0M
     g$bound-id-member?$10981$F0M
     (case-lambda
       ((g$id$7834$F0M g$id*$7835$F0M)
        (if (pair? g$id*$7835$F0M)
          (begin
            '#f
            ((case-lambda
               ((g$t$7836$F0M)
                (if g$t$7836$F0M
                  g$t$7836$F0M
                  (begin
                    '#f
                    (g$bound-id-member?$7298$F0M
                      g$id$7834$F0M
                      (cdr g$id*$7835$F0M))))))
             (g$bound-id=?$7294$F0M g$id$7834$F0M (car g$id*$7835$F0M))))
          '#f))))
   (g$self-evaluating?$7299$F0M
     g$self-evaluating?$10982$F0M
     (case-lambda
       ((g$x$7837$F0M)
        ((case-lambda
           ((g$t$7838$F0M)
            (if g$t$7838$F0M
              g$t$7838$F0M
              ((case-lambda
                 ((g$t$7839$F0M)
                  (if g$t$7839$F0M
                    g$t$7839$F0M
                    ((case-lambda
                       ((g$t$7840$F0M)
                        (if g$t$7840$F0M
                          g$t$7840$F0M
                          ((case-lambda
                             ((g$t$7841$F0M)
                              (if g$t$7841$F0M
                                g$t$7841$F0M
                                (begin '#f (bytevector? g$x$7837$F0M)))))
                           (boolean? g$x$7837$F0M)))))
                     (char? g$x$7837$F0M)))))
               (string? g$x$7837$F0M)))))
         (number? g$x$7837$F0M)))))
   (g$strip-annotations$7300$F0M
     g$strip-annotations$10983$F0M
     (case-lambda
       ((g$x$7842$F0M)
        (if (pair? g$x$7842$F0M)
          (cons
            (g$strip-annotations$7300$F0M (car g$x$7842$F0M))
            (g$strip-annotations$7300$F0M (cdr g$x$7842$F0M)))
          (if (vector? g$x$7842$F0M)
            (vector-map g$strip-annotations$7300$F0M g$x$7842$F0M)
            (if (annotation? g$x$7842$F0M)
              (annotation-stripped g$x$7842$F0M)
              g$x$7842$F0M))))))
   (g$strip$7301$F0M
     g$strip$10984$F0M
     (case-lambda
       ((g$x$7843$F0M g$m*$7844$F0M)
        (if (g$top-marked?$7229$F0M g$m*$7844$F0M)
          (if ((case-lambda
                 ((g$t$7845$F0M)
                  (if g$t$7845$F0M
                    g$t$7845$F0M
                    ((case-lambda
                       ((g$t$7846$F0M)
                        (if g$t$7846$F0M
                          g$t$7846$F0M
                          (begin
                            '#f
                            (if (vector? g$x$7843$F0M)
                              (if (> (vector-length g$x$7843$F0M) '0)
                                (begin
                                  '#f
                                  (annotation? (vector-ref g$x$7843$F0M '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$7843$F0M)
                       (begin '#f (annotation? (car g$x$7843$F0M)))
                       '#f)))))
               (annotation? g$x$7843$F0M))
            (g$strip-annotations$7300$F0M g$x$7843$F0M)
            g$x$7843$F0M)
          ((letrec ((g$f$7847$F0M
                      (case-lambda
                        ((g$x$7848$F0M)
                         (if (g$stx?$7263$F0M g$x$7848$F0M)
                           (g$strip$7301$F0M
                             (g$stx-expr$7265$F0M g$x$7848$F0M)
                             (g$stx-mark*$7266$F0M g$x$7848$F0M))
                           (if (annotation? g$x$7848$F0M)
                             (annotation-stripped g$x$7848$F0M)
                             (if (pair? g$x$7848$F0M)
                               ((case-lambda
                                  ((g$a$7849$F0M g$d$7850$F0M)
                                   (if (if (eq? g$a$7849$F0M (car g$x$7848$F0M))
                                         (begin
                                           '#f
                                           (eq? g$d$7850$F0M
                                                (cdr g$x$7848$F0M)))
                                         '#f)
                                     g$x$7848$F0M
                                     (cons g$a$7849$F0M g$d$7850$F0M))))
                                (g$f$7847$F0M (car g$x$7848$F0M))
                                (g$f$7847$F0M (cdr g$x$7848$F0M)))
                               (if (vector? g$x$7848$F0M)
                                 ((case-lambda
                                    ((g$old$7851$F0M)
                                     ((case-lambda
                                        ((g$new$7852$F0M)
                                         (if (g$for-all$5014$F0M
                                               eq?
                                               g$old$7851$F0M
                                               g$new$7852$F0M)
                                           g$x$7848$F0M
                                           (list->vector g$new$7852$F0M))))
                                      (map g$f$7847$F0M g$old$7851$F0M))))
                                  (vector->list g$x$7848$F0M))
                                 g$x$7848$F0M))))))))
             g$f$7847$F0M)
           g$x$7843$F0M)))))
   (g$stx->datum$7302$F0M
     g$stx->datum$10985$F0M
     (case-lambda ((g$x$7853$F0M) (g$strip$7301$F0M g$x$7853$F0M '()))))
   (g$same-marks*?$7303$F0M
     g$same-marks*?$10986$F0M
     (case-lambda
       ((g$mark*$7854$F0M g$mark**$7855$F0M g$si$7856$F0M)
        (if (null? g$si$7856$F0M)
          '#f
          (if (g$same-marks?$7293$F0M
                g$mark*$7854$F0M
                (vector-ref g$mark**$7855$F0M (car g$si$7856$F0M)))
            (car g$si$7856$F0M)
            (g$same-marks*?$7303$F0M
              g$mark*$7854$F0M
              g$mark**$7855$F0M
              (cdr g$si$7856$F0M)))))))
   (g$id->label$7304$F0M
     g$id->label$10987$F0M
     (case-lambda
       ((g$id$7857$F0M)
        ((case-lambda
           ((g$t$7858$F0M)
            (if g$t$7858$F0M
              g$t$7858$F0M
              (begin
                '#f
                ((case-lambda
                   ((g$t$7859$F0M)
                    (if g$t$7859$F0M
                      ((case-lambda
                         ((g$env$7860$F0M)
                          ((case-lambda
                             ((g$rib$7861$F0M)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$7234$F0M
                                     g$id$7857$F0M
                                     g$rib$7861$F0M)))
                                (case-lambda
                                  ((g$lab$7864$F0M g$loc_$7865$F0M)
                                   ((case-lambda
                                      ((g$loc_$7866$F0M g$lab$7867$F0M)
                                       (begin
                                         (g$extend-rib!$7254$F0M
                                           g$rib$7861$F0M
                                           g$id$7857$F0M
                                           g$lab$7867$F0M)
                                         g$lab$7867$F0M)))
                                    g$loc_$7865$F0M
                                    g$lab$7864$F0M))))))
                           (g$interaction-env-rib$7647$F0M g$env$7860$F0M))))
                       g$t$7859$F0M)
                      '#f)))
                 (g$top-level-context$7687$F0M))))))
         (g$id->real-label$7305$F0M g$id$7857$F0M)))))
   (g$id->real-label$7305$F0M
     g$id->real-label$10988$F0M
     (case-lambda
       ((g$id$7868$F0M)
        ((case-lambda
           ((g$sym$7869$F0M)
            ((letrec ((g$search$7870$F0M
                        (case-lambda
                          ((g$subst*$7871$F0M g$mark*$7872$F0M)
                           (if (null? g$subst*$7871$F0M)
                             '#f
                             (if (eq? (car g$subst*$7871$F0M) 'shift)
                               (g$search$7870$F0M
                                 (cdr g$subst*$7871$F0M)
                                 (cdr g$mark*$7872$F0M))
                               ((case-lambda
                                  ((g$rib$7873$F0M)
                                   ((case-lambda
                                      ((g$t$7874$F0M)
                                       (if g$t$7874$F0M
                                         ((case-lambda
                                            ((g$ht$7875$F0M)
                                             ((case-lambda
                                                ((g$si$7876$F0M)
                                                 ((case-lambda
                                                    ((g$i$7877$F0M)
                                                     (if g$i$7877$F0M
                                                       (vector-ref
                                                         (g$rib-label*$7243$F0M
                                                           g$rib$7873$F0M)
                                                         g$i$7877$F0M)
                                                       (g$search$7870$F0M
                                                         (cdr g$subst*$7871$F0M)
                                                         g$mark*$7872$F0M))))
                                                  (if g$si$7876$F0M
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$7303$F0M
                                                        g$mark*$7872$F0M
                                                        (g$rib-mark**$7242$F0M
                                                          g$rib$7873$F0M)
                                                        (reverse
                                                          g$si$7876$F0M)))
                                                    '#f))))
                                              (g$hashtable-ref$5455$F0M
                                                g$ht$7875$F0M
                                                g$sym$7869$F0M
                                                '#f))))
                                          g$t$7874$F0M)
                                         ((case-lambda
                                            ((g$t$7878$F0M)
                                             (if g$t$7878$F0M
                                               g$t$7878$F0M
                                               (begin
                                                 '#f
                                                 ((letrec ((g$f$7879$F0M
                                                             (case-lambda
                                                               ((g$sym*$7880$F0M
                                                                  g$mark**$7881$F0M
                                                                  g$label*$7882$F0M)
                                                                (if (null?
                                                                      g$sym*$7880$F0M)
                                                                  (g$search$7870$F0M
                                                                    (cdr g$subst*$7871$F0M)
                                                                    g$mark*$7872$F0M)
                                                                  (if (if (eq? (car g$sym*$7880$F0M)
                                                                               g$sym$7869$F0M)
                                                                        (begin
                                                                          '#f
                                                                          (g$same-marks?$7293$F0M
                                                                            (car g$mark**$7881$F0M)
                                                                            g$mark*$7872$F0M))
                                                                        '#f)
                                                                    (car g$label*$7882$F0M)
                                                                    (g$f$7879$F0M
                                                                      (cdr g$sym*$7880$F0M)
                                                                      (cdr g$mark**$7881$F0M)
                                                                      (cdr g$label*$7882$F0M))))))))
                                                    g$f$7879$F0M)
                                                  (g$rib-sym*$7241$F0M
                                                    g$rib$7873$F0M)
                                                  (g$rib-mark**$7242$F0M
                                                    g$rib$7873$F0M)
                                                  (g$rib-label*$7243$F0M
                                                    g$rib$7873$F0M))))))
                                          (g$find-label$7253$F0M
                                            g$rib$7873$F0M
                                            g$sym$7869$F0M
                                            g$mark*$7872$F0M)))))
                                    (g$rib-sealed/freq$7244$F0M
                                      g$rib$7873$F0M))))
                                (car g$subst*$7871$F0M))))))))
               g$search$7870$F0M)
             (g$stx-subst*$7267$F0M g$id$7868$F0M)
             (g$stx-mark*$7266$F0M g$id$7868$F0M))))
         (g$id->sym$7292$F0M g$id$7868$F0M)))))
   (g$label->binding$7306$F0M
     g$label->binding$10989$F0M
     (case-lambda
       ((g$x$7883$F0M g$r$7884$F0M)
        ((case-lambda
           ((g$t$7885$F0M)
            (if g$t$7885$F0M
              ((case-lambda
                 ((g$b$7886$F0M)
                  (if (if (pair? g$b$7886$F0M)
                        (begin '#f (eq? (car g$b$7886$F0M) '$core-rtd))
                        '#f)
                    (cons '$rtd (map g$bless$7532$F0M (cdr g$b$7886$F0M)))
                    (if (if (pair? g$b$7886$F0M)
                          (begin '#f (eq? (car g$b$7886$F0M) 'global-rtd))
                          '#f)
                      ((case-lambda
                         ((g$lib$7887$F0M g$loc$7888$F0M)
                          (cons '$rtd (symbol-value g$loc$7888$F0M))))
                       (g$cadr$5178$F0M g$b$7886$F0M)
                       (g$cddr$5180$F0M g$b$7886$F0M))
                      g$b$7886$F0M))))
               g$t$7885$F0M)
              ((case-lambda
                 ((g$t$7889$F0M)
                  (if g$t$7889$F0M
                    (cdr g$t$7889$F0M)
                    ((case-lambda
                       ((g$t$7890$F0M)
                        (if g$t$7890$F0M
                          ((case-lambda
                             ((g$env$7891$F0M)
                              ((case-lambda
                                 ((g$t$7892$F0M)
                                  (if g$t$7892$F0M
                                    ((case-lambda
                                       ((g$p$7893$F0M)
                                        (g$cons*$5016$F0M
                                          'lexical
                                          (cdr g$p$7893$F0M)
                                          '#f)))
                                     g$t$7892$F0M)
                                    '(displaced-lexical . #f))))
                               (g$assq$5004$F0M
                                 g$x$7883$F0M
                                 (g$interaction-env-locs$7649$F0M
                                   g$env$7891$F0M)))))
                           g$t$7890$F0M)
                          '(displaced-lexical . #f))))
                     (g$top-level-context$7687$F0M)))))
               (g$assq$5004$F0M g$x$7883$F0M g$r$7884$F0M)))))
         (g$imported-label->binding$7100$F0M g$x$7883$F0M)))))
   (g$make-binding$7307$F0M g$make-binding$10990$F0M cons)
   (g$binding-type$7308$F0M g$binding-type$10991$F0M car)
   (g$binding-value$7309$F0M g$binding-value$10992$F0M cdr)
   (g$raise-unbound-error$7310$F0M
     g$raise-unbound-error$10993$F0M
     (case-lambda
       ((g$id$7894$F0M)
        (g$syntax-violation*$7679$F0M
          '#f
          '"unbound identifier"
          g$id$7894$F0M
          (g$make-undefined-violation$5802$F0M)))))
   (g$syntax-type$7311$F0M
     g$syntax-type$10994$F0M
     (case-lambda
       ((g$e$7895$F0M g$r$7896$F0M)
        (if (g$id?$7291$F0M g$e$7895$F0M)
          ((case-lambda
             ((g$id$7897$F0M)
              ((case-lambda
                 ((g$label$7898$F0M)
                  ((case-lambda
                     ((g$b$7899$F0M)
                      ((case-lambda
                         ((g$type$7900$F0M)
                          ((case-lambda
                             (()
                              (begin
                                (if (not g$label$7898$F0M)
                                  (g$raise-unbound-error$7310$F0M g$id$7897$F0M)
                                  (void))
                                ((case-lambda
                                   ((g$t$7901$F0M)
                                    (if (g$memv$5009$F0M
                                          g$t$7901$F0M
                                          '(lexical
                                             core-prim
                                             macro
                                             macro!
                                             global
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             displaced-lexical
                                             syntax
                                             import
                                             export
                                             $module
                                             $core-rtd
                                             library
                                             mutable))
                                      (values
                                        g$type$7900$F0M
                                        (g$binding-value$7309$F0M g$b$7899$F0M)
                                        g$id$7897$F0M)
                                      (values 'other '#f '#f))))
                                 g$type$7900$F0M)))))))
                       (g$binding-type$7308$F0M g$b$7899$F0M))))
                   (g$label->binding$7306$F0M g$label$7898$F0M g$r$7896$F0M))))
               (g$id->label$7304$F0M g$id$7897$F0M))))
           g$e$7895$F0M)
          (if (g$syntax-pair?$7284$F0M g$e$7895$F0M)
            ((case-lambda
               ((g$id$7902$F0M)
                (if (g$id?$7291$F0M g$id$7902$F0M)
                  ((case-lambda
                     ((g$label$7903$F0M)
                      ((case-lambda
                         ((g$b$7904$F0M)
                          ((case-lambda
                             ((g$type$7905$F0M)
                              ((case-lambda
                                 (()
                                  (begin
                                    (if (not g$label$7903$F0M)
                                      (g$raise-unbound-error$7310$F0M
                                        g$id$7902$F0M)
                                      (void))
                                    ((case-lambda
                                       ((g$t$7906$F0M)
                                        (if (g$memv$5009$F0M
                                              g$t$7906$F0M
                                              '(define define-syntax
                                                 core-macro
                                                 begin
                                                 macro
                                                 macro!
                                                 local-macro
                                                 local-macro!
                                                 global-macro
                                                 global-macro!
                                                 module
                                                 library
                                                 set!
                                                 let-syntax
                                                 letrec-syntax
                                                 import
                                                 export
                                                 $core-rtd))
                                          (values
                                            g$type$7905$F0M
                                            (g$binding-value$7309$F0M
                                              g$b$7904$F0M)
                                            g$id$7902$F0M)
                                          (values 'call '#f '#f))))
                                     g$type$7905$F0M)))))))
                           (g$binding-type$7308$F0M g$b$7904$F0M))))
                       (g$label->binding$7306$F0M
                         g$label$7903$F0M
                         g$r$7896$F0M))))
                   (g$id->label$7304$F0M g$id$7902$F0M))
                  (values 'call '#f '#f))))
             (g$syntax-car$7288$F0M g$e$7895$F0M))
            ((case-lambda
               ((g$d$7907$F0M)
                (if (g$self-evaluating?$7299$F0M g$d$7907$F0M)
                  (values 'constant g$d$7907$F0M '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$7302$F0M g$e$7895$F0M)))))))
   (g$sanitize-binding$7319$F0M
     g$sanitize-binding$10995$F0M
     (case-lambda
       ((g$x$7908$F0M g$src$7909$F0M)
        (if (procedure? g$x$7908$F0M)
          (g$cons*$5016$F0M 'local-macro g$x$7908$F0M g$src$7909$F0M)
          (if (if (pair? g$x$7908$F0M)
                (if (eq? (car g$x$7908$F0M) 'macro!)
                  (begin '#f (procedure? (cdr g$x$7908$F0M)))
                  '#f)
                '#f)
            (g$cons*$5016$F0M 'local-macro! (cdr g$x$7908$F0M) g$src$7909$F0M)
            (if (if (pair? g$x$7908$F0M)
                  (begin '#f (eq? (car g$x$7908$F0M) '$rtd))
                  '#f)
              g$x$7908$F0M
              (assertion-violation
                'expand
                '"invalid transformer"
                g$x$7908$F0M)))))))
   (g$make-variable-transformer$7320$F0M
     g$make-variable-transformer$10996$F0M
     (case-lambda
       ((g$x$7910$F0M)
        (if (procedure? g$x$7910$F0M)
          (cons 'macro! g$x$7910$F0M)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$7910$F0M)))))
   (g$variable-transformer?$7321$F0M
     g$variable-transformer?$10997$F0M
     (case-lambda
       ((g$x$7911$F0M)
        (if (pair? g$x$7911$F0M)
          (if (eq? (car g$x$7911$F0M) 'macro!)
            (begin '#f (procedure? (cdr g$x$7911$F0M)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$7322$F0M
     g$variable-transformer-procedure$10998$F0M
     (case-lambda
       ((g$x$7912$F0M)
        (if (g$variable-transformer?$7321$F0M g$x$7912$F0M)
          (cdr g$x$7912$F0M)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$7912$F0M)))))
   (g$make-eval-transformer$7323$F0M
     g$make-eval-transformer$10999$F0M
     (case-lambda
       ((g$x$7913$F0M)
        (g$sanitize-binding$7319$F0M
          (eval-core (g$expanded->core$6809$F0M g$x$7913$F0M))
          g$x$7913$F0M))))
   (g$parse-define$7509$F0M
     g$parse-define$11000$F0M
     (case-lambda
       ((g$x$7914$F0M)
        ((case-lambda
           ((g$t$7915$F0M)
            ((case-lambda
               ((g$ls/false$7916$F0M)
                (if (if g$ls/false$7916$F0M
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7917$F0M
                               g$fmls$7918$F0M
                               g$b$7919$F0M
                               g$b*$7920$F0M)
                             (g$id?$7291$F0M g$id$7917$F0M)))
                          g$ls/false$7916$F0M))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7921$F0M
                         g$fmls$7922$F0M
                         g$b$7923$F0M
                         g$b*$7924$F0M)
                       (begin
                         (g$verify-formals$7589$F0M
                           g$fmls$7922$F0M
                           g$x$7914$F0M)
                         (values
                           g$id$7921$F0M
                           (cons
                             'defun
                             (cons
                               g$fmls$7922$F0M
                               (cons g$b$7923$F0M g$b*$7924$F0M)))))))
                    g$ls/false$7916$F0M)
                  ((case-lambda
                     ((g$t$7925$F0M)
                      ((case-lambda
                         ((g$ls/false$7926$F0M)
                          (if (if g$ls/false$7926$F0M
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$7927$F0M g$val$7928$F0M)
                                       (g$id?$7291$F0M g$id$7927$F0M)))
                                    g$ls/false$7926$F0M))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$7929$F0M g$val$7930$F0M)
                                 (values
                                   g$id$7929$F0M
                                   (cons 'expr g$val$7930$F0M))))
                              g$ls/false$7926$F0M)
                            ((case-lambda
                               ((g$t$7931$F0M)
                                ((case-lambda
                                   ((g$ls/false$7932$F0M)
                                    (if (if g$ls/false$7932$F0M
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$7933$F0M)
                                                 (g$id?$7291$F0M
                                                   g$id$7933$F0M)))
                                              g$ls/false$7932$F0M))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$7934$F0M)
                                           (values
                                             g$id$7934$F0M
                                             (cons
                                               'expr
                                               (g$bless$7532$F0M '(void))))))
                                        g$ls/false$7932$F0M)
                                      (g$syntax-violation$7680$F0M
                                        '#f
                                        '"invalid syntax"
                                        g$t$7931$F0M))))
                                 (g$syntax-dispatch$7569$F0M
                                   g$t$7931$F0M
                                   '(_ any)))))
                             g$t$7925$F0M))))
                       (g$syntax-dispatch$7569$F0M g$t$7925$F0M '(_ any any)))))
                   g$t$7915$F0M))))
             (g$syntax-dispatch$7569$F0M
               g$t$7915$F0M
               '(_ (any . any) any . each-any)))))
         g$x$7914$F0M))))
   (g$parse-define-syntax$7510$F0M
     g$parse-define-syntax$11001$F0M
     (case-lambda
       ((g$x$7935$F0M)
        ((case-lambda
           ((g$t$7936$F0M)
            ((case-lambda
               ((g$ls/false$7937$F0M)
                (if (if g$ls/false$7937$F0M
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7938$F0M g$val$7939$F0M)
                             (g$id?$7291$F0M g$id$7938$F0M)))
                          g$ls/false$7937$F0M))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7940$F0M g$val$7941$F0M)
                       (values g$id$7940$F0M g$val$7941$F0M)))
                    g$ls/false$7937$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$7936$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$7936$F0M '(_ any any)))))
         g$x$7935$F0M))))
   (g$scheme-stx-hashtable$7511$F0M
     g$scheme-stx-hashtable$11002$F0M
     (g$make-eq-hashtable$5452$F0M))
   (g$scheme-stx$7512$F0M
     g$scheme-stx$11003$F0M
     (case-lambda
       ((g$sym$7942$F0M)
        ((case-lambda
           ((g$t$7943$F0M)
            (if g$t$7943$F0M
              g$t$7943$F0M
              (begin
                '#f
                ((case-lambda
                   ((g$subst$7944$F0M)
                    ((case-lambda
                       ((g$stx$7945$F0M)
                        ((case-lambda
                           ((g$stx$7946$F0M)
                            ((case-lambda
                               (()
                                (begin
                                  (g$hashtable-set!$5456$F0M
                                    g$scheme-stx-hashtable$7511$F0M
                                    g$sym$7942$F0M
                                    g$stx$7946$F0M)
                                  g$stx$7946$F0M))))))
                         ((case-lambda
                            ((g$t$7947$F0M)
                             (if g$t$7947$F0M
                               ((case-lambda
                                  ((g$x$7948$F0M)
                                   ((case-lambda
                                      ((g$name$7949$F0M g$label$7950$F0M)
                                       (g$add-subst$7281$F0M
                                         (g$make-rib$7240$F0M
                                           (list g$name$7949$F0M)
                                           (list g$top-mark*$7228$F0M)
                                           (list g$label$7950$F0M)
                                           '#f
                                           '#f)
                                         g$stx$7945$F0M)))
                                    (car g$x$7948$F0M)
                                    (cdr g$x$7948$F0M))))
                                g$t$7947$F0M)
                               g$stx$7945$F0M)))
                          (g$assq$5004$F0M g$sym$7942$F0M g$subst$7944$F0M)))))
                     (g$make-stx$7264$F0M
                       g$sym$7942$F0M
                       g$top-mark*$7228$F0M
                       '()
                       '()))))
                 (g$library-subst$7058$F0M
                   (g$find-library-by-name$7094$F0M
                     '(psyntax system $all))))))))
         (g$hashtable-ref$5455$F0M
           g$scheme-stx-hashtable$7511$F0M
           g$sym$7942$F0M
           '#f)))))
   (g$lexical-var$7513$F0M g$lexical-var$11004$F0M car)
   (g$lexical-mutable?$7514$F0M g$lexical-mutable?$11005$F0M cdr)
   (g$set-lexical-mutable!$7515$F0M
     g$set-lexical-mutable!$11006$F0M
     set-cdr!)
   (g$add-lexical$7516$F0M
     g$add-lexical$11007$F0M
     (case-lambda
       ((g$lab$7951$F0M g$lex$7952$F0M g$r$7953$F0M)
        (cons
          (g$cons*$5016$F0M g$lab$7951$F0M 'lexical g$lex$7952$F0M '#f)
          g$r$7953$F0M))))
   (g$add-lexicals$7517$F0M
     g$add-lexicals$11008$F0M
     (case-lambda
       ((g$lab*$7954$F0M g$lex*$7955$F0M g$r$7956$F0M)
        (if (null? g$lab*$7954$F0M)
          g$r$7956$F0M
          (g$add-lexicals$7517$F0M
            (cdr g$lab*$7954$F0M)
            (cdr g$lex*$7955$F0M)
            (g$add-lexical$7516$F0M
              (car g$lab*$7954$F0M)
              (car g$lex*$7955$F0M)
              g$r$7956$F0M))))))
   (g$letrec-helper$7518$F0M
     g$letrec-helper$11009$F0M
     (case-lambda
       ((g$e$7957$F0M g$r$7958$F0M g$mr$7959$F0M g$build$7960$F0M)
        ((case-lambda
           ((g$t$7961$F0M)
            ((case-lambda
               ((g$ls/false$7962$F0M)
                (if g$ls/false$7962$F0M
                  (apply
                    (case-lambda
                      ((g$lhs*$7963$F0M
                         g$rhs*$7964$F0M
                         g$b$7965$F0M
                         g$b*$7966$F0M)
                       (if (not (g$valid-bound-ids?$7296$F0M g$lhs*$7963$F0M))
                         (g$invalid-fmls-error$7534$F0M
                           g$e$7957$F0M
                           g$lhs*$7963$F0M)
                         ((case-lambda
                            ((g$lex*$7967$F0M g$lab*$7968$F0M)
                             ((case-lambda
                                ((g$rib$7969$F0M g$r$7970$F0M)
                                 ((case-lambda
                                    ((g$body$7971$F0M g$rhs*$7972$F0M)
                                     (g$build$7960$F0M
                                       '#f
                                       g$lex*$7967$F0M
                                       g$rhs*$7972$F0M
                                       g$body$7971$F0M)))
                                  (g$chi-internal$7598$F0M
                                    (g$add-subst$7281$F0M
                                      g$rib$7969$F0M
                                      (cons g$b$7965$F0M g$b*$7966$F0M))
                                    g$r$7970$F0M
                                    g$mr$7959$F0M)
                                  (g$chi-expr*$7585$F0M
                                    (map (case-lambda
                                           ((g$x$7973$F0M)
                                            (g$add-subst$7281$F0M
                                              g$rib$7969$F0M
                                              g$x$7973$F0M)))
                                         g$rhs*$7964$F0M)
                                    g$r$7970$F0M
                                    g$mr$7959$F0M))))
                              (g$make-full-rib$7259$F0M
                                g$lhs*$7963$F0M
                                g$lab*$7968$F0M)
                              (g$add-lexicals$7517$F0M
                                g$lab*$7968$F0M
                                g$lex*$7967$F0M
                                g$r$7958$F0M))))
                          (map g$gen-lexical$7230$F0M g$lhs*$7963$F0M)
                          (map g$gen-label$7232$F0M g$lhs*$7963$F0M)))))
                    g$ls/false$7962$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$7961$F0M))))
             (g$syntax-dispatch$7569$F0M
               g$t$7961$F0M
               '(_ #(each (any any)) any . each-any)))))
         g$e$7957$F0M))))
   (g$letrec-transformer$7519$F0M
     g$letrec-transformer$11010$F0M
     (case-lambda
       ((g$e$7974$F0M g$r$7975$F0M g$mr$7976$F0M)
        (g$letrec-helper$7518$F0M
          g$e$7974$F0M
          g$r$7975$F0M
          g$mr$7976$F0M
          g$build-letrec$7222$F0M))))
   (g$letrec*-transformer$7520$F0M
     g$letrec*-transformer$11011$F0M
     (case-lambda
       ((g$e$7977$F0M g$r$7978$F0M g$mr$7979$F0M)
        (g$letrec-helper$7518$F0M
          g$e$7977$F0M
          g$r$7978$F0M
          g$mr$7979$F0M
          g$build-letrec*$7223$F0M))))
   (g$fluid-let-syntax-transformer$7521$F0M
     g$fluid-let-syntax-transformer$11012$F0M
     (case-lambda
       ((g$e$7980$F0M g$r$7981$F0M g$mr$7982$F0M)
        (letrec* ((g$lookup$7983$F0M
                    (case-lambda
                      ((g$x$7993$F0M)
                       ((case-lambda
                          ((g$t$7994$F0M)
                           (if g$t$7994$F0M
                             g$t$7994$F0M
                             (begin
                               '#f
                               (g$syntax-violation$7680$F0M
                                 '#f
                                 '"unbound identifier"
                                 g$e$7980$F0M
                                 g$x$7993$F0M)))))
                        (g$id->label$7304$F0M g$x$7993$F0M))))))
          ((case-lambda
             ((g$t$7984$F0M)
              ((case-lambda
                 ((g$ls/false$7985$F0M)
                  (if g$ls/false$7985$F0M
                    (apply
                      (case-lambda
                        ((g$lhs*$7986$F0M
                           g$rhs*$7987$F0M
                           g$b$7988$F0M
                           g$b*$7989$F0M)
                         (if (not (g$valid-bound-ids?$7296$F0M g$lhs*$7986$F0M))
                           (g$invalid-fmls-error$7534$F0M
                             g$e$7980$F0M
                             g$lhs*$7986$F0M)
                           ((case-lambda
                              ((g$lab*$7990$F0M g$rhs*$7991$F0M)
                               (g$chi-internal$7598$F0M
                                 (cons g$b$7988$F0M g$b*$7989$F0M)
                                 (append
                                   (map cons g$lab*$7990$F0M g$rhs*$7991$F0M)
                                   g$r$7981$F0M)
                                 (append
                                   (map cons g$lab*$7990$F0M g$rhs*$7991$F0M)
                                   g$mr$7982$F0M))))
                            (map g$lookup$7983$F0M g$lhs*$7986$F0M)
                            (map (case-lambda
                                   ((g$x$7992$F0M)
                                    (g$make-eval-transformer$7323$F0M
                                      (g$expand-transformer$7614$F0M
                                        g$x$7992$F0M
                                        g$mr$7982$F0M))))
                                 g$rhs*$7987$F0M)))))
                      g$ls/false$7985$F0M)
                    (g$syntax-violation$7680$F0M
                      '#f
                      '"invalid syntax"
                      g$t$7984$F0M))))
               (g$syntax-dispatch$7569$F0M
                 g$t$7984$F0M
                 '(_ #(each (any any)) any . each-any)))))
           g$e$7980$F0M)))))
   (g$type-descriptor-transformer$7522$F0M
     g$type-descriptor-transformer$11013$F0M
     (case-lambda
       ((g$e$7995$F0M g$r$7996$F0M g$mr$7997$F0M)
        ((case-lambda
           ((g$t$7998$F0M)
            ((case-lambda
               ((g$ls/false$7999$F0M)
                (if (if g$ls/false$7999$F0M
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8000$F0M) (g$id?$7291$F0M g$id$8000$F0M)))
                          g$ls/false$7999$F0M))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8001$F0M)
                       ((case-lambda
                          ((g$lab$8002$F0M)
                           ((case-lambda
                              ((g$b$8003$F0M)
                               ((case-lambda
                                  ((g$type$8004$F0M)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$8002$F0M)
                                           (g$raise-unbound-error$7310$F0M
                                             g$id$8001$F0M)
                                           (void))
                                         (if (not (if (eq? g$type$8004$F0M
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (not (list?
                                                             (g$binding-value$7309$F0M
                                                               g$b$8003$F0M))))
                                                    '#f))
                                           (g$syntax-violation$7680$F0M
                                             '#f
                                             '"not a record type"
                                             g$e$7995$F0M)
                                           (void))
                                         (list
                                           'quote
                                           (g$binding-value$7309$F0M
                                             g$b$8003$F0M))))))))
                                (g$binding-type$7308$F0M g$b$8003$F0M))))
                            (g$label->binding$7306$F0M
                              g$lab$8002$F0M
                              g$r$7996$F0M))))
                        (g$id->label$7304$F0M g$id$8001$F0M))))
                    g$ls/false$7999$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$7998$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$7998$F0M '(_ any)))))
         g$e$7995$F0M))))
   (g$record-type-descriptor-transformer$7523$F0M
     g$record-type-descriptor-transformer$11014$F0M
     (case-lambda
       ((g$e$8005$F0M g$r$8006$F0M g$mr$8007$F0M)
        ((case-lambda
           ((g$t$8008$F0M)
            ((case-lambda
               ((g$ls/false$8009$F0M)
                (if (if g$ls/false$8009$F0M
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8010$F0M) (g$id?$7291$F0M g$id$8010$F0M)))
                          g$ls/false$8009$F0M))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8011$F0M)
                       ((case-lambda
                          ((g$lab$8012$F0M)
                           ((case-lambda
                              ((g$b$8013$F0M)
                               ((case-lambda
                                  ((g$type$8014$F0M)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$8012$F0M)
                                           (g$raise-unbound-error$7310$F0M
                                             g$id$8011$F0M)
                                           (void))
                                         (if (not (if (eq? g$type$8014$F0M
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (list?
                                                        (g$binding-value$7309$F0M
                                                          g$b$8013$F0M)))
                                                    '#f))
                                           (g$syntax-violation$7680$F0M
                                             '#f
                                             '"not a record type"
                                             g$e$8005$F0M)
                                           (void))
                                         (g$chi-expr$7587$F0M
                                           (car (g$binding-value$7309$F0M
                                                  g$b$8013$F0M))
                                           g$r$8006$F0M
                                           g$mr$8007$F0M)))))))
                                (g$binding-type$7308$F0M g$b$8013$F0M))))
                            (g$label->binding$7306$F0M
                              g$lab$8012$F0M
                              g$r$8006$F0M))))
                        (g$id->label$7304$F0M g$id$8011$F0M))))
                    g$ls/false$8009$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8008$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$8008$F0M '(_ any)))))
         g$e$8005$F0M))))
   (g$record-constructor-descriptor-transformer$7524$F0M
     g$record-constructor-descriptor-transformer$11015$F0M
     (case-lambda
       ((g$e$8015$F0M g$r$8016$F0M g$mr$8017$F0M)
        ((case-lambda
           ((g$t$8018$F0M)
            ((case-lambda
               ((g$ls/false$8019$F0M)
                (if (if g$ls/false$8019$F0M
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8020$F0M) (g$id?$7291$F0M g$id$8020$F0M)))
                          g$ls/false$8019$F0M))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8021$F0M)
                       ((case-lambda
                          ((g$lab$8022$F0M)
                           ((case-lambda
                              ((g$b$8023$F0M)
                               ((case-lambda
                                  ((g$type$8024$F0M)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$8022$F0M)
                                           (g$raise-unbound-error$7310$F0M
                                             g$id$8021$F0M)
                                           (void))
                                         (if (not (if (eq? g$type$8024$F0M
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (list?
                                                        (g$binding-value$7309$F0M
                                                          g$b$8023$F0M)))
                                                    '#f))
                                           (g$syntax-violation$7680$F0M
                                             '#f
                                             '"invalid type"
                                             g$e$8015$F0M)
                                           (void))
                                         (g$chi-expr$7587$F0M
                                           (g$cadr$5178$F0M
                                             (g$binding-value$7309$F0M
                                               g$b$8023$F0M))
                                           g$r$8016$F0M
                                           g$mr$8017$F0M)))))))
                                (g$binding-type$7308$F0M g$b$8023$F0M))))
                            (g$label->binding$7306$F0M
                              g$lab$8022$F0M
                              g$r$8016$F0M))))
                        (g$id->label$7304$F0M g$id$8021$F0M))))
                    g$ls/false$8019$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8018$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$8018$F0M '(_ any)))))
         g$e$8015$F0M))))
   (g$when-macro$7525$F0M
     g$when-macro$11016$F0M
     (case-lambda
       ((g$e$8025$F0M)
        ((case-lambda
           ((g$t$8026$F0M)
            ((case-lambda
               ((g$ls/false$8027$F0M)
                (if g$ls/false$8027$F0M
                  (apply
                    (case-lambda
                      ((g$test$8028$F0M g$e$8029$F0M g$e*$8030$F0M)
                       (g$bless$7532$F0M
                         (list
                           'if
                           g$test$8028$F0M
                           (cons 'begin (cons g$e$8029$F0M g$e*$8030$F0M))))))
                    g$ls/false$8027$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8026$F0M))))
             (g$syntax-dispatch$7569$F0M
               g$t$8026$F0M
               '(_ any any . each-any)))))
         g$e$8025$F0M))))
   (g$unless-macro$7526$F0M
     g$unless-macro$11017$F0M
     (case-lambda
       ((g$e$8031$F0M)
        ((case-lambda
           ((g$t$8032$F0M)
            ((case-lambda
               ((g$ls/false$8033$F0M)
                (if g$ls/false$8033$F0M
                  (apply
                    (case-lambda
                      ((g$test$8034$F0M g$e$8035$F0M g$e*$8036$F0M)
                       (g$bless$7532$F0M
                         (list
                           'if
                           (list 'not g$test$8034$F0M)
                           (cons 'begin (cons g$e$8035$F0M g$e*$8036$F0M))))))
                    g$ls/false$8033$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8032$F0M))))
             (g$syntax-dispatch$7569$F0M
               g$t$8032$F0M
               '(_ any any . each-any)))))
         g$e$8031$F0M))))
   (g$if-transformer$7527$F0M
     g$if-transformer$11018$F0M
     (case-lambda
       ((g$e$8037$F0M g$r$8038$F0M g$mr$8039$F0M)
        ((case-lambda
           ((g$t$8040$F0M)
            ((case-lambda
               ((g$ls/false$8041$F0M)
                (if g$ls/false$8041$F0M
                  (apply
                    (case-lambda
                      ((g$e0$8042$F0M g$e1$8043$F0M g$e2$8044$F0M)
                       (list
                         'if
                         (g$chi-expr$7587$F0M
                           g$e0$8042$F0M
                           g$r$8038$F0M
                           g$mr$8039$F0M)
                         (g$chi-expr$7587$F0M
                           g$e1$8043$F0M
                           g$r$8038$F0M
                           g$mr$8039$F0M)
                         (g$chi-expr$7587$F0M
                           g$e2$8044$F0M
                           g$r$8038$F0M
                           g$mr$8039$F0M))))
                    g$ls/false$8041$F0M)
                  ((case-lambda
                     ((g$t$8045$F0M)
                      ((case-lambda
                         ((g$ls/false$8046$F0M)
                          (if g$ls/false$8046$F0M
                            (apply
                              (case-lambda
                                ((g$e0$8047$F0M g$e1$8048$F0M)
                                 (list
                                   'if
                                   (g$chi-expr$7587$F0M
                                     g$e0$8047$F0M
                                     g$r$8038$F0M
                                     g$mr$8039$F0M)
                                   (g$chi-expr$7587$F0M
                                     g$e1$8048$F0M
                                     g$r$8038$F0M
                                     g$mr$8039$F0M)
                                   (g$build-void$7221$F0M))))
                              g$ls/false$8046$F0M)
                            (g$syntax-violation$7680$F0M
                              '#f
                              '"invalid syntax"
                              g$t$8045$F0M))))
                       (g$syntax-dispatch$7569$F0M g$t$8045$F0M '(_ any any)))))
                   g$t$8040$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$8040$F0M '(_ any any any)))))
         g$e$8037$F0M))))
   (g$case-macro$7528$F0M
     g$case-macro$11019$F0M
     (case-lambda
       ((g$e$8049$F0M)
        (letrec* ((g$build-last$8050$F0M
                    (case-lambda
                      ((g$cls$8070$F0M)
                       ((case-lambda
                          ((g$t$8071$F0M)
                           ((case-lambda
                              ((g$ls/false$8072$F0M)
                               (if g$ls/false$8072$F0M
                                 (apply
                                   (case-lambda
                                     ((g$e$8073$F0M g$e*$8074$F0M)
                                      (cons
                                        'begin
                                        (cons g$e$8073$F0M g$e*$8074$F0M))))
                                   g$ls/false$8072$F0M)
                                 ((case-lambda
                                    ((g$t$8075$F0M)
                                     ((case-lambda
                                        ((g$ls/false$8076$F0M)
                                         (if g$ls/false$8076$F0M
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$8051$F0M
                                                  g$cls$8070$F0M
                                                  '(if #f #f))))
                                             g$ls/false$8076$F0M)
                                           (g$syntax-violation$7680$F0M
                                             '#f
                                             '"invalid syntax"
                                             g$t$8075$F0M))))
                                      (g$syntax-dispatch$7569$F0M
                                        g$t$8075$F0M
                                        '_))))
                                  g$t$8071$F0M))))
                            (g$syntax-dispatch$7569$F0M
                              g$t$8071$F0M
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$8070$F0M))))
                  (g$build-one$8051$F0M
                    (case-lambda
                      ((g$cls$8063$F0M g$k$8064$F0M)
                       ((case-lambda
                          ((g$t$8065$F0M)
                           ((case-lambda
                              ((g$ls/false$8066$F0M)
                               (if g$ls/false$8066$F0M
                                 (apply
                                   (case-lambda
                                     ((g$d*$8067$F0M g$e$8068$F0M g$e*$8069$F0M)
                                      (list
                                        'if
                                        (list
                                          'memv
                                          't
                                          (list 'quote g$d*$8067$F0M))
                                        (cons
                                          'begin
                                          (cons g$e$8068$F0M g$e*$8069$F0M))
                                        g$k$8064$F0M)))
                                   g$ls/false$8066$F0M)
                                 (g$syntax-violation$7680$F0M
                                   '#f
                                   '"invalid syntax"
                                   g$t$8065$F0M))))
                            (g$syntax-dispatch$7569$F0M
                              g$t$8065$F0M
                              '(each-any any . each-any)))))
                        g$cls$8063$F0M)))))
          ((case-lambda
             ((g$t$8052$F0M)
              ((case-lambda
                 ((g$ls/false$8053$F0M)
                  (if g$ls/false$8053$F0M
                    (apply
                      (case-lambda
                        ((g$expr$8054$F0M)
                         (g$bless$7532$F0M
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$8054$F0M))
                               '((if #f #f)))))))
                      g$ls/false$8053$F0M)
                    ((case-lambda
                       ((g$t$8055$F0M)
                        ((case-lambda
                           ((g$ls/false$8056$F0M)
                            (if g$ls/false$8056$F0M
                              (apply
                                (case-lambda
                                  ((g$expr$8057$F0M
                                     g$cls$8058$F0M
                                     g$cls*$8059$F0M)
                                   (g$bless$7532$F0M
                                     (list
                                       'let
                                       (list (list 't g$expr$8057$F0M))
                                       ((letrec ((g$f$8060$F0M
                                                   (case-lambda
                                                     ((g$cls$8061$F0M
                                                        g$cls*$8062$F0M)
                                                      (if (null?
                                                            g$cls*$8062$F0M)
                                                        (g$build-last$8050$F0M
                                                          g$cls$8061$F0M)
                                                        (g$build-one$8051$F0M
                                                          g$cls$8061$F0M
                                                          (g$f$8060$F0M
                                                            (car g$cls*$8062$F0M)
                                                            (cdr g$cls*$8062$F0M))))))))
                                          g$f$8060$F0M)
                                        g$cls$8058$F0M
                                        g$cls*$8059$F0M)))))
                                g$ls/false$8056$F0M)
                              (g$syntax-violation$7680$F0M
                                '#f
                                '"invalid syntax"
                                g$t$8055$F0M))))
                         (g$syntax-dispatch$7569$F0M
                           g$t$8055$F0M
                           '(_ any any . each-any)))))
                     g$t$8052$F0M))))
               (g$syntax-dispatch$7569$F0M g$t$8052$F0M '(_ any)))))
           g$e$8049$F0M)))))
   (g$quote-transformer$7529$F0M
     g$quote-transformer$11020$F0M
     (case-lambda
       ((g$e$8077$F0M g$r$8078$F0M g$mr$8079$F0M)
        ((case-lambda
           ((g$t$8080$F0M)
            ((case-lambda
               ((g$ls/false$8081$F0M)
                (if g$ls/false$8081$F0M
                  (apply
                    (case-lambda
                      ((g$datum$8082$F0M)
                       (list 'quote (g$stx->datum$7302$F0M g$datum$8082$F0M))))
                    g$ls/false$8081$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8080$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$8080$F0M '(_ any)))))
         g$e$8077$F0M))))
   (g$case-lambda-transformer$7530$F0M
     g$case-lambda-transformer$11021$F0M
     (case-lambda
       ((g$e$8083$F0M g$r$8084$F0M g$mr$8085$F0M)
        ((case-lambda
           ((g$t$8086$F0M)
            ((case-lambda
               ((g$ls/false$8087$F0M)
                (if g$ls/false$8087$F0M
                  (apply
                    (case-lambda
                      ((g$fmls*$8088$F0M g$b*$8089$F0M g$b**$8090$F0M)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$7591$F0M
                              g$e$8083$F0M
                              g$fmls*$8088$F0M
                              (map cons g$b*$8089$F0M g$b**$8090$F0M)
                              g$r$8084$F0M
                              g$mr$8085$F0M)))
                         (case-lambda
                           ((g$fmls*$8093$F0M g$body*$8094$F0M)
                            ((case-lambda
                               ((g$body*$8095$F0M g$fmls*$8096$F0M)
                                (g$build-case-lambda$7218$F0M
                                  '#f
                                  g$fmls*$8096$F0M
                                  g$body*$8095$F0M)))
                             g$body*$8094$F0M
                             g$fmls*$8093$F0M))))))
                    g$ls/false$8087$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8086$F0M))))
             (g$syntax-dispatch$7569$F0M
               g$t$8086$F0M
               '(_ . #(each (any any . each-any)))))))
         g$e$8083$F0M))))
   (g$lambda-transformer$7531$F0M
     g$lambda-transformer$11022$F0M
     (case-lambda
       ((g$e$8097$F0M g$r$8098$F0M g$mr$8099$F0M)
        ((case-lambda
           ((g$t$8100$F0M)
            ((case-lambda
               ((g$ls/false$8101$F0M)
                (if g$ls/false$8101$F0M
                  (apply
                    (case-lambda
                      ((g$fmls$8102$F0M g$b$8103$F0M g$b*$8104$F0M)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$7590$F0M
                              g$e$8097$F0M
                              g$fmls$8102$F0M
                              (cons g$b$8103$F0M g$b*$8104$F0M)
                              g$r$8098$F0M
                              g$mr$8099$F0M)))
                         (case-lambda
                           ((g$fmls$8107$F0M g$body$8108$F0M)
                            ((case-lambda
                               ((g$body$8109$F0M g$fmls$8110$F0M)
                                (g$build-lambda$7217$F0M
                                  '#f
                                  g$fmls$8110$F0M
                                  g$body$8109$F0M)))
                             g$body$8108$F0M
                             g$fmls$8107$F0M))))))
                    g$ls/false$8101$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8100$F0M))))
             (g$syntax-dispatch$7569$F0M
               g$t$8100$F0M
               '(_ any any . each-any)))))
         g$e$8097$F0M))))
   (g$bless$7532$F0M
     g$bless$11023$F0M
     (case-lambda
       ((g$x$8111$F0M)
        (g$mkstx$7279$F0M
          ((letrec ((g$f$8112$F0M
                      (case-lambda
                        ((g$x$8113$F0M)
                         (if (g$stx?$7263$F0M g$x$8113$F0M)
                           g$x$8113$F0M
                           (if (pair? g$x$8113$F0M)
                             (cons
                               (g$f$8112$F0M (car g$x$8113$F0M))
                               (g$f$8112$F0M (cdr g$x$8113$F0M)))
                             (if (symbol? g$x$8113$F0M)
                               (g$scheme-stx$7512$F0M g$x$8113$F0M)
                               (if (vector? g$x$8113$F0M)
                                 (vector-map g$f$8112$F0M g$x$8113$F0M)
                                 g$x$8113$F0M))))))))
             g$f$8112$F0M)
           g$x$8111$F0M)
          '()
          '()
          '()))))
   (g$with-syntax-macro$7533$F0M
     g$with-syntax-macro$11024$F0M
     (case-lambda
       ((g$e$8114$F0M)
        ((case-lambda
           ((g$t$8115$F0M)
            ((case-lambda
               ((g$ls/false$8116$F0M)
                (if g$ls/false$8116$F0M
                  (apply
                    (case-lambda
                      ((g$pat*$8117$F0M
                         g$expr*$8118$F0M
                         g$b$8119$F0M
                         g$b*$8120$F0M)
                       ((case-lambda
                          ((g$idn*$8121$F0M)
                           (begin
                             (g$verify-formals$7589$F0M
                               (map car g$idn*$8121$F0M)
                               g$e$8114$F0M)
                             ((case-lambda
                                ((g$t*$8122$F0M)
                                 (g$bless$7532$F0M
                                   (list
                                     'let
                                     (map list g$t*$8122$F0M g$expr*$8118$F0M)
                                     ((letrec ((g$f$8123$F0M
                                                 (case-lambda
                                                   ((g$pat*$8124$F0M
                                                      g$t*$8125$F0M)
                                                    (if (null? g$pat*$8124$F0M)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$8119$F0M
                                                            g$b*$8120$F0M)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$8125$F0M)
                                                        '()
                                                        (list
                                                          (car g$pat*$8124$F0M)
                                                          (g$f$8123$F0M
                                                            (cdr g$pat*$8124$F0M)
                                                            (cdr g$t*$8125$F0M)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$8124$F0M))
                                                            (car g$t*$8125$F0M)))))))))
                                        g$f$8123$F0M)
                                      g$pat*$8117$F0M
                                      g$t*$8122$F0M)))))
                              (g$generate-temporaries$7670$F0M
                                g$expr*$8118$F0M)))))
                        ((letrec ((g$f$8126$F0M
                                    (case-lambda
                                      ((g$pat*$8127$F0M)
                                       (if (null? g$pat*$8127$F0M)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$7568$F0M
                                                (car g$pat*$8127$F0M)
                                                '())))
                                           (case-lambda
                                             ((g$pat$8130$F0M g$idn*$8131$F0M)
                                              ((case-lambda
                                                 ((g$idn*$8132$F0M
                                                    g$pat$8133$F0M)
                                                  (append
                                                    g$idn*$8132$F0M
                                                    (g$f$8126$F0M
                                                      (cdr g$pat*$8127$F0M)))))
                                               g$idn*$8131$F0M
                                               g$pat$8130$F0M)))))))))
                           g$f$8126$F0M)
                         g$pat*$8117$F0M))))
                    g$ls/false$8116$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8115$F0M))))
             (g$syntax-dispatch$7569$F0M
               g$t$8115$F0M
               '(_ #(each (any any)) any . each-any)))))
         g$e$8114$F0M))))
   (g$invalid-fmls-error$7534$F0M
     g$invalid-fmls-error$11025$F0M
     (case-lambda
       ((g$stx$8134$F0M g$fmls$8135$F0M)
        ((case-lambda
           ((g$t$8136$F0M)
            ((case-lambda
               ((g$ls/false$8137$F0M)
                (if g$ls/false$8137$F0M
                  (apply
                    (case-lambda
                      ((g$id*$8138$F0M g$last$8139$F0M)
                       ((letrec ((g$f$8140$F0M
                                   (case-lambda
                                     ((g$id*$8141$F0M)
                                      (if (null? g$id*$8141$F0M)
                                        (values)
                                        (if (not (g$id?$7291$F0M
                                                   (car g$id*$8141$F0M)))
                                          (g$syntax-violation$7680$F0M
                                            '#f
                                            '"not an identifier"
                                            g$stx$8134$F0M
                                            (car g$id*$8141$F0M))
                                          (begin
                                            (g$f$8140$F0M (cdr g$id*$8141$F0M))
                                            (if (g$bound-id-member?$7298$F0M
                                                  (car g$id*$8141$F0M)
                                                  (cdr g$id*$8141$F0M))
                                              (g$syntax-violation$7680$F0M
                                                '#f
                                                '"duplicate binding"
                                                g$stx$8134$F0M
                                                (car g$id*$8141$F0M))
                                              (void)))))))))
                          g$f$8140$F0M)
                        (if (g$id?$7291$F0M g$last$8139$F0M)
                          (cons g$last$8139$F0M g$id*$8138$F0M)
                          (if (g$syntax-null?$7286$F0M g$last$8139$F0M)
                            g$id*$8138$F0M
                            (g$syntax-violation$7680$F0M
                              '#f
                              '"not an identifier"
                              g$stx$8134$F0M
                              g$last$8139$F0M))))))
                    g$ls/false$8137$F0M)
                  ((case-lambda
                     ((g$t$8142$F0M)
                      ((case-lambda
                         ((g$ls/false$8143$F0M)
                          (if g$ls/false$8143$F0M
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7680$F0M
                                   '#f
                                   '"malformed binding form"
                                   g$stx$8134$F0M
                                   g$fmls$8135$F0M)))
                              g$ls/false$8143$F0M)
                            (g$syntax-violation$7680$F0M
                              '#f
                              '"invalid syntax"
                              g$t$8142$F0M))))
                       (g$syntax-dispatch$7569$F0M g$t$8142$F0M '_))))
                   g$t$8136$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$8136$F0M '#(each+ any () any)))))
         g$fmls$8135$F0M))))
   (g$let-macro$7535$F0M
     g$let-macro$11026$F0M
     (case-lambda
       ((g$stx$8144$F0M)
        ((case-lambda
           ((g$t$8145$F0M)
            ((case-lambda
               ((g$ls/false$8146$F0M)
                (if g$ls/false$8146$F0M
                  (apply
                    (case-lambda
                      ((g$lhs*$8147$F0M
                         g$rhs*$8148$F0M
                         g$b$8149$F0M
                         g$b*$8150$F0M)
                       (if (g$valid-bound-ids?$7296$F0M g$lhs*$8147$F0M)
                         (g$bless$7532$F0M
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$8147$F0M
                                 (cons g$b$8149$F0M g$b*$8150$F0M)))
                             g$rhs*$8148$F0M))
                         (g$invalid-fmls-error$7534$F0M
                           g$stx$8144$F0M
                           g$lhs*$8147$F0M))))
                    g$ls/false$8146$F0M)
                  ((case-lambda
                     ((g$t$8151$F0M)
                      ((case-lambda
                         ((g$ls/false$8152$F0M)
                          (if (if g$ls/false$8152$F0M
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$8153$F0M
                                         g$lhs*$8154$F0M
                                         g$rhs*$8155$F0M
                                         g$b$8156$F0M
                                         g$b*$8157$F0M)
                                       (g$id?$7291$F0M g$f$8153$F0M)))
                                    g$ls/false$8152$F0M))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$8158$F0M
                                   g$lhs*$8159$F0M
                                   g$rhs*$8160$F0M
                                   g$b$8161$F0M
                                   g$b*$8162$F0M)
                                 (if (g$valid-bound-ids?$7296$F0M
                                       g$lhs*$8159$F0M)
                                   (g$bless$7532$F0M
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$8158$F0M
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$8159$F0M
                                                 (cons
                                                   g$b$8161$F0M
                                                   g$b*$8162$F0M)))))
                                         g$f$8158$F0M)
                                       g$rhs*$8160$F0M))
                                   (g$invalid-fmls-error$7534$F0M
                                     g$stx$8144$F0M
                                     g$lhs*$8159$F0M))))
                              g$ls/false$8152$F0M)
                            (g$syntax-violation$7680$F0M
                              '#f
                              '"invalid syntax"
                              g$t$8151$F0M))))
                       (g$syntax-dispatch$7569$F0M
                         g$t$8151$F0M
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$8145$F0M))))
             (g$syntax-dispatch$7569$F0M
               g$t$8145$F0M
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8144$F0M))))
   (g$let-values-macro$7536$F0M
     g$let-values-macro$11027$F0M
     (case-lambda
       ((g$stx$8163$F0M)
        (letrec* ((g$rename$8164$F0M
                    (case-lambda
                      ((g$x$8215$F0M g$old*$8216$F0M g$new*$8217$F0M)
                       (begin
                         (if (not (g$id?$7291$F0M g$x$8215$F0M))
                           (g$syntax-violation$7680$F0M
                             '#f
                             '"not an indentifier"
                             g$stx$8163$F0M
                             g$x$8215$F0M)
                           (void))
                         (if (g$bound-id-member?$7298$F0M
                               g$x$8215$F0M
                               g$old*$8216$F0M)
                           (g$syntax-violation$7680$F0M
                             '#f
                             '"duplicate binding"
                             g$stx$8163$F0M
                             g$x$8215$F0M)
                           (void))
                         ((case-lambda
                            ((g$y$8218$F0M)
                             (values
                               g$y$8218$F0M
                               (cons g$x$8215$F0M g$old*$8216$F0M)
                               (cons g$y$8218$F0M g$new*$8217$F0M))))
                          (gensym (g$syntax->datum$7683$F0M g$x$8215$F0M)))))))
                  (g$rename*$8165$F0M
                    (case-lambda
                      ((g$x*$8206$F0M g$old*$8207$F0M g$new*$8208$F0M)
                       (if (null? g$x*$8206$F0M)
                         (values '() g$old*$8207$F0M g$new*$8208$F0M)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$8164$F0M
                                (car g$x*$8206$F0M)
                                g$old*$8207$F0M
                                g$new*$8208$F0M)))
                           (case-lambda
                             ((g$x$8209$F0M g$old*$8210$F0M g$new*$8211$F0M)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$8165$F0M
                                     (cdr g$x*$8206$F0M)
                                     g$old*$8210$F0M
                                     g$new*$8211$F0M)))
                                (case-lambda
                                  ((g$x*$8212$F0M
                                     g$old*$8213$F0M
                                     g$new*$8214$F0M)
                                   (values
                                     (cons g$x$8209$F0M g$x*$8212$F0M)
                                     g$old*$8213$F0M
                                     g$new*$8214$F0M))))))))))))
          ((case-lambda
             ((g$t$8166$F0M)
              ((case-lambda
                 ((g$ls/false$8167$F0M)
                  (if g$ls/false$8167$F0M
                    (apply
                      (case-lambda
                        ((g$b$8168$F0M g$b*$8169$F0M)
                         (g$cons*$5016$F0M
                           (g$bless$7532$F0M 'let)
                           '()
                           g$b$8168$F0M
                           g$b*$8169$F0M)))
                      g$ls/false$8167$F0M)
                    ((case-lambda
                       ((g$t$8170$F0M)
                        ((case-lambda
                           ((g$ls/false$8171$F0M)
                            (if g$ls/false$8171$F0M
                              (apply
                                (case-lambda
                                  ((g$lhs*$8172$F0M
                                     g$rhs*$8173$F0M
                                     g$b$8174$F0M
                                     g$b*$8175$F0M)
                                   (g$bless$7532$F0M
                                     ((letrec ((g$f$8176$F0M
                                                 (case-lambda
                                                   ((g$lhs*$8177$F0M
                                                      g$rhs*$8178$F0M
                                                      g$old*$8179$F0M
                                                      g$new*$8180$F0M)
                                                    (if (null? g$lhs*$8177$F0M)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (map list
                                                               g$old*$8179$F0M
                                                               g$new*$8180$F0M)
                                                          (cons
                                                            g$b$8174$F0M
                                                            g$b*$8175$F0M)))
                                                      ((case-lambda
                                                         ((g$t$8181$F0M)
                                                          ((case-lambda
                                                             ((g$ls/false$8182$F0M)
                                                              (if g$ls/false$8182$F0M
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8183$F0M)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$8165$F0M
                                                                            g$x*$8183$F0M
                                                                            g$old*$8179$F0M
                                                                            g$new*$8180$F0M)))
                                                                       (case-lambda
                                                                         ((g$y*$8187$F0M
                                                                            g$old*$8188$F0M
                                                                            g$new*$8189$F0M)
                                                                          ((case-lambda
                                                                             ((g$new*$8190$F0M
                                                                                g$old*$8191$F0M
                                                                                g$y*$8192$F0M)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$8178$F0M))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$8192$F0M
                                                                                  (g$f$8176$F0M
                                                                                    (cdr g$lhs*$8177$F0M)
                                                                                    (cdr g$rhs*$8178$F0M)
                                                                                    g$old*$8191$F0M
                                                                                    g$new*$8190$F0M)))))
                                                                           g$new*$8189$F0M
                                                                           g$old*$8188$F0M
                                                                           g$y*$8187$F0M))))))
                                                                  g$ls/false$8182$F0M)
                                                                ((case-lambda
                                                                   ((g$t$8193$F0M)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8194$F0M)
                                                                        (if g$ls/false$8194$F0M
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8195$F0M
                                                                                 g$x$8196$F0M)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$8164$F0M
                                                                                      g$x$8196$F0M
                                                                                      g$old*$8179$F0M
                                                                                      g$new*$8180$F0M)))
                                                                                 (case-lambda
                                                                                   ((g$y$8197$F0M
                                                                                      g$old*$8198$F0M
                                                                                      g$new*$8199$F0M)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$8165$F0M
                                                                                           g$x*$8195$F0M
                                                                                           g$old*$8198$F0M
                                                                                           g$new*$8199$F0M)))
                                                                                      (case-lambda
                                                                                        ((g$y*$8200$F0M
                                                                                           g$old*$8201$F0M
                                                                                           g$new*$8202$F0M)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$8178$F0M))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$8200$F0M
                                                                                               g$y$8197$F0M)
                                                                                             (g$f$8176$F0M
                                                                                               (cdr g$lhs*$8177$F0M)
                                                                                               (cdr g$rhs*$8178$F0M)
                                                                                               g$old*$8201$F0M
                                                                                               g$new*$8202$F0M)))))))))))
                                                                            g$ls/false$8194$F0M)
                                                                          ((case-lambda
                                                                             ((g$t$8203$F0M)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8204$F0M)
                                                                                  (if g$ls/false$8204$F0M
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8205$F0M)
                                                                                         (g$syntax-violation$7680$F0M
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8163$F0M
                                                                                           g$others$8205$F0M)))
                                                                                      g$ls/false$8204$F0M)
                                                                                    (g$syntax-violation$7680$F0M
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8203$F0M))))
                                                                               (g$syntax-dispatch$7569$F0M
                                                                                 g$t$8203$F0M
                                                                                 'any))))
                                                                           g$t$8193$F0M))))
                                                                     (g$syntax-dispatch$7569$F0M
                                                                       g$t$8193$F0M
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8181$F0M))))
                                                           (g$syntax-dispatch$7569$F0M
                                                             g$t$8181$F0M
                                                             'each-any))))
                                                       (car g$lhs*$8177$F0M)))))))
                                        g$f$8176$F0M)
                                      g$lhs*$8172$F0M
                                      g$rhs*$8173$F0M
                                      '()
                                      '()))))
                                g$ls/false$8171$F0M)
                              (g$syntax-violation$7680$F0M
                                '#f
                                '"invalid syntax"
                                g$t$8170$F0M))))
                         (g$syntax-dispatch$7569$F0M
                           g$t$8170$F0M
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8166$F0M))))
               (g$syntax-dispatch$7569$F0M
                 g$t$8166$F0M
                 '(_ () any . each-any)))))
           g$stx$8163$F0M)))))
   (g$let*-values-macro$7537$F0M
     g$let*-values-macro$11028$F0M
     (case-lambda
       ((g$stx$8219$F0M)
        (letrec* ((g$check$8220$F0M
                    (case-lambda
                      ((g$x*$8244$F0M)
                       (if (not (null? g$x*$8244$F0M))
                         ((case-lambda
                            ((g$x$8245$F0M)
                             (begin
                               (if (not (g$id?$7291$F0M g$x$8245$F0M))
                                 (g$syntax-violation$7680$F0M
                                   '#f
                                   '"not an identifier"
                                   g$stx$8219$F0M
                                   g$x$8245$F0M)
                                 (void))
                               (g$check$8220$F0M (cdr g$x*$8244$F0M))
                               (if (g$bound-id-member?$7298$F0M
                                     g$x$8245$F0M
                                     (cdr g$x*$8244$F0M))
                                 (g$syntax-violation$7680$F0M
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$8219$F0M
                                   g$x$8245$F0M)
                                 (void)))))
                          (car g$x*$8244$F0M))
                         (void))))))
          ((case-lambda
             ((g$t$8221$F0M)
              ((case-lambda
                 ((g$ls/false$8222$F0M)
                  (if g$ls/false$8222$F0M
                    (apply
                      (case-lambda
                        ((g$b$8223$F0M g$b*$8224$F0M)
                         (g$cons*$5016$F0M
                           (g$bless$7532$F0M 'let)
                           '()
                           g$b$8223$F0M
                           g$b*$8224$F0M)))
                      g$ls/false$8222$F0M)
                    ((case-lambda
                       ((g$t$8225$F0M)
                        ((case-lambda
                           ((g$ls/false$8226$F0M)
                            (if g$ls/false$8226$F0M
                              (apply
                                (case-lambda
                                  ((g$lhs*$8227$F0M
                                     g$rhs*$8228$F0M
                                     g$b$8229$F0M
                                     g$b*$8230$F0M)
                                   (g$bless$7532$F0M
                                     ((letrec ((g$f$8231$F0M
                                                 (case-lambda
                                                   ((g$lhs*$8232$F0M
                                                      g$rhs*$8233$F0M)
                                                    (if (null? g$lhs*$8232$F0M)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$8229$F0M
                                                          g$b*$8230$F0M))
                                                      ((case-lambda
                                                         ((g$t$8234$F0M)
                                                          ((case-lambda
                                                             ((g$ls/false$8235$F0M)
                                                              (if g$ls/false$8235$F0M
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8236$F0M)
                                                                     (begin
                                                                       (g$check$8220$F0M
                                                                         g$x*$8236$F0M)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$8233$F0M))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$8236$F0M
                                                                           (g$f$8231$F0M
                                                                             (cdr g$lhs*$8232$F0M)
                                                                             (cdr g$rhs*$8233$F0M)))))))
                                                                  g$ls/false$8235$F0M)
                                                                ((case-lambda
                                                                   ((g$t$8237$F0M)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8238$F0M)
                                                                        (if g$ls/false$8238$F0M
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8239$F0M
                                                                                 g$x$8240$F0M)
                                                                               (begin
                                                                                 (g$check$8220$F0M
                                                                                   (cons
                                                                                     g$x$8240$F0M
                                                                                     g$x*$8239$F0M))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$8233$F0M))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$8239$F0M
                                                                                       g$x$8240$F0M)
                                                                                     (g$f$8231$F0M
                                                                                       (cdr g$lhs*$8232$F0M)
                                                                                       (cdr g$rhs*$8233$F0M)))))))
                                                                            g$ls/false$8238$F0M)
                                                                          ((case-lambda
                                                                             ((g$t$8241$F0M)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8242$F0M)
                                                                                  (if g$ls/false$8242$F0M
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8243$F0M)
                                                                                         (g$syntax-violation$7680$F0M
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8219$F0M
                                                                                           g$others$8243$F0M)))
                                                                                      g$ls/false$8242$F0M)
                                                                                    (g$syntax-violation$7680$F0M
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8241$F0M))))
                                                                               (g$syntax-dispatch$7569$F0M
                                                                                 g$t$8241$F0M
                                                                                 'any))))
                                                                           g$t$8237$F0M))))
                                                                     (g$syntax-dispatch$7569$F0M
                                                                       g$t$8237$F0M
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8234$F0M))))
                                                           (g$syntax-dispatch$7569$F0M
                                                             g$t$8234$F0M
                                                             'each-any))))
                                                       (car g$lhs*$8232$F0M)))))))
                                        g$f$8231$F0M)
                                      g$lhs*$8227$F0M
                                      g$rhs*$8228$F0M))))
                                g$ls/false$8226$F0M)
                              (g$syntax-violation$7680$F0M
                                '#f
                                '"invalid syntax"
                                g$t$8225$F0M))))
                         (g$syntax-dispatch$7569$F0M
                           g$t$8225$F0M
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8221$F0M))))
               (g$syntax-dispatch$7569$F0M
                 g$t$8221$F0M
                 '(_ () any . each-any)))))
           g$stx$8219$F0M)))))
   (g$trace-lambda-macro$7538$F0M
     g$trace-lambda-macro$11029$F0M
     (case-lambda
       ((g$stx$8246$F0M)
        ((case-lambda
           ((g$t$8247$F0M)
            ((case-lambda
               ((g$ls/false$8248$F0M)
                (if g$ls/false$8248$F0M
                  (apply
                    (case-lambda
                      ((g$who$8249$F0M
                         g$fmls$8250$F0M
                         g$b$8251$F0M
                         g$b*$8252$F0M)
                       (if (g$valid-bound-ids?$7296$F0M g$fmls$8250$F0M)
                         (g$bless$7532$F0M
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$8249$F0M)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$8250$F0M
                                 (cons g$b$8251$F0M g$b*$8252$F0M)))))
                         (g$invalid-fmls-error$7534$F0M
                           g$stx$8246$F0M
                           g$fmls$8250$F0M))))
                    g$ls/false$8248$F0M)
                  ((case-lambda
                     ((g$t$8253$F0M)
                      ((case-lambda
                         ((g$ls/false$8254$F0M)
                          (if g$ls/false$8254$F0M
                            (apply
                              (case-lambda
                                ((g$who$8255$F0M
                                   g$fmls$8256$F0M
                                   g$last$8257$F0M
                                   g$b$8258$F0M
                                   g$b*$8259$F0M)
                                 (if (g$valid-bound-ids?$7296$F0M
                                       (cons g$last$8257$F0M g$fmls$8256$F0M))
                                   (g$bless$7532$F0M
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$8255$F0M)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$8256$F0M
                                             g$last$8257$F0M)
                                           (cons g$b$8258$F0M g$b*$8259$F0M)))))
                                   (g$invalid-fmls-error$7534$F0M
                                     g$stx$8246$F0M
                                     (append
                                       g$fmls$8256$F0M
                                       g$last$8257$F0M)))))
                              g$ls/false$8254$F0M)
                            (g$syntax-violation$7680$F0M
                              '#f
                              '"invalid syntax"
                              g$t$8253$F0M))))
                       (g$syntax-dispatch$7569$F0M
                         g$t$8253$F0M
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$8247$F0M))))
             (g$syntax-dispatch$7569$F0M
               g$t$8247$F0M
               '(_ any each-any any . each-any)))))
         g$stx$8246$F0M))))
   (g$trace-define-macro$7539$F0M
     g$trace-define-macro$11030$F0M
     (case-lambda
       ((g$stx$8260$F0M)
        ((case-lambda
           ((g$t$8261$F0M)
            ((case-lambda
               ((g$ls/false$8262$F0M)
                (if g$ls/false$8262$F0M
                  (apply
                    (case-lambda
                      ((g$who$8263$F0M
                         g$fmls$8264$F0M
                         g$b$8265$F0M
                         g$b*$8266$F0M)
                       (if (g$valid-bound-ids?$7296$F0M g$fmls$8264$F0M)
                         (g$bless$7532$F0M
                           (list
                             'define
                             g$who$8263$F0M
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$8263$F0M)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$8264$F0M
                                   (cons g$b$8265$F0M g$b*$8266$F0M))))))
                         (g$invalid-fmls-error$7534$F0M
                           g$stx$8260$F0M
                           g$fmls$8264$F0M))))
                    g$ls/false$8262$F0M)
                  ((case-lambda
                     ((g$t$8267$F0M)
                      ((case-lambda
                         ((g$ls/false$8268$F0M)
                          (if g$ls/false$8268$F0M
                            (apply
                              (case-lambda
                                ((g$who$8269$F0M
                                   g$fmls$8270$F0M
                                   g$last$8271$F0M
                                   g$b$8272$F0M
                                   g$b*$8273$F0M)
                                 (if (g$valid-bound-ids?$7296$F0M
                                       (cons g$last$8271$F0M g$fmls$8270$F0M))
                                   (g$bless$7532$F0M
                                     (list
                                       'define
                                       g$who$8269$F0M
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$8269$F0M)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$8270$F0M
                                               g$last$8271$F0M)
                                             (cons
                                               g$b$8272$F0M
                                               g$b*$8273$F0M))))))
                                   (g$invalid-fmls-error$7534$F0M
                                     g$stx$8260$F0M
                                     (append
                                       g$fmls$8270$F0M
                                       g$last$8271$F0M)))))
                              g$ls/false$8268$F0M)
                            ((case-lambda
                               ((g$t$8274$F0M)
                                ((case-lambda
                                   ((g$ls/false$8275$F0M)
                                    (if g$ls/false$8275$F0M
                                      (apply
                                        (case-lambda
                                          ((g$who$8276$F0M g$expr$8277$F0M)
                                           (if (g$id?$7291$F0M g$who$8276$F0M)
                                             (g$bless$7532$F0M
                                               (list
                                                 'define
                                                 g$who$8276$F0M
                                                 (list
                                                   'let
                                                   (list
                                                     (list 'v g$expr$8277$F0M))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$8276$F0M)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$7680$F0M
                                               '#f
                                               '"invalid name"
                                               g$stx$8260$F0M))))
                                        g$ls/false$8275$F0M)
                                      (g$syntax-violation$7680$F0M
                                        '#f
                                        '"invalid syntax"
                                        g$t$8274$F0M))))
                                 (g$syntax-dispatch$7569$F0M
                                   g$t$8274$F0M
                                   '(_ any any)))))
                             g$t$8267$F0M))))
                       (g$syntax-dispatch$7569$F0M
                         g$t$8267$F0M
                         '(_ (any . #(each+ any () any)) any . each-any)))))
                   g$t$8261$F0M))))
             (g$syntax-dispatch$7569$F0M
               g$t$8261$F0M
               '(_ (any . each-any) any . each-any)))))
         g$stx$8260$F0M))))
   (g$trace-define-syntax-macro$7540$F0M
     g$trace-define-syntax-macro$11031$F0M
     (case-lambda
       ((g$stx$8278$F0M)
        ((case-lambda
           ((g$t$8279$F0M)
            ((case-lambda
               ((g$ls/false$8280$F0M)
                (if g$ls/false$8280$F0M
                  (apply
                    (case-lambda
                      ((g$who$8281$F0M g$expr$8282$F0M)
                       (if (g$id?$7291$F0M g$who$8281$F0M)
                         (g$bless$7532$F0M
                           (list
                             'define-syntax
                             g$who$8281$F0M
                             (list
                               'make-traced-macro
                               (list 'quote g$who$8281$F0M)
                               g$expr$8282$F0M)))
                         (g$syntax-violation$7680$F0M
                           '#f
                           '"invalid name"
                           g$stx$8278$F0M))))
                    g$ls/false$8280$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8279$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$8279$F0M '(_ any any)))))
         g$stx$8278$F0M))))
   (g$trace-let/rec-syntax$7541$F0M
     g$trace-let/rec-syntax$11032$F0M
     (case-lambda
       ((g$who$8283$F0M)
        (case-lambda
          ((g$stx$8284$F0M)
           ((case-lambda
              ((g$t$8285$F0M)
               ((case-lambda
                  ((g$ls/false$8286$F0M)
                   (if g$ls/false$8286$F0M
                     (apply
                       (case-lambda
                         ((g$lhs*$8287$F0M
                            g$rhs*$8288$F0M
                            g$b$8289$F0M
                            g$b*$8290$F0M)
                          (if (g$valid-bound-ids?$7296$F0M g$lhs*$8287$F0M)
                            ((case-lambda
                               ((g$rhs*$8291$F0M)
                                (g$bless$7532$F0M
                                  (cons
                                    g$who$8283$F0M
                                    (cons
                                      (map list g$lhs*$8287$F0M g$rhs*$8291$F0M)
                                      (cons g$b$8289$F0M g$b*$8290$F0M))))))
                             (map (case-lambda
                                    ((g$lhs$8292$F0M g$rhs$8293$F0M)
                                     (list
                                       'make-traced-macro
                                       (list 'quote g$lhs$8292$F0M)
                                       g$rhs$8293$F0M)))
                                  g$lhs*$8287$F0M
                                  g$rhs*$8288$F0M))
                            (g$invalid-fmls-error$7534$F0M
                              g$stx$8284$F0M
                              g$lhs*$8287$F0M))))
                       g$ls/false$8286$F0M)
                     (g$syntax-violation$7680$F0M
                       '#f
                       '"invalid syntax"
                       g$t$8285$F0M))))
                (g$syntax-dispatch$7569$F0M
                  g$t$8285$F0M
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$8284$F0M))))))
   (g$trace-let-syntax-macro$7542$F0M
     g$trace-let-syntax-macro$11033$F0M
     (g$trace-let/rec-syntax$7541$F0M 'let-syntax))
   (g$trace-letrec-syntax-macro$7543$F0M
     g$trace-letrec-syntax-macro$11034$F0M
     (g$trace-let/rec-syntax$7541$F0M 'letrec-syntax))
   (g$guard-macro$7544$F0M
     g$guard-macro$11035$F0M
     (case-lambda
       ((g$x$8294$F0M)
        (letrec* ((g$gen-clauses$8295$F0M
                    (case-lambda
                      ((g$con$8307$F0M g$outerk$8308$F0M g$clause*$8309$F0M)
                       (letrec* ((g$f$8310$F0M
                                   (case-lambda
                                     ((g$x$8338$F0M g$k$8339$F0M)
                                      ((case-lambda
                                         ((g$t$8340$F0M)
                                          ((case-lambda
                                             ((g$ls/false$8341$F0M)
                                              (if g$ls/false$8341$F0M
                                                (apply
                                                  (case-lambda
                                                    ((g$e$8342$F0M g$p$8343$F0M)
                                                     ((case-lambda
                                                        ((g$t$8344$F0M)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$8344$F0M
                                                               g$e$8342$F0M))
                                                           (list
                                                             'if
                                                             g$t$8344$F0M
                                                             (list
                                                               g$p$8343$F0M
                                                               g$t$8344$F0M)
                                                             g$k$8339$F0M))))
                                                      (gensym))))
                                                  g$ls/false$8341$F0M)
                                                ((case-lambda
                                                   ((g$t$8345$F0M)
                                                    ((case-lambda
                                                       ((g$ls/false$8346$F0M)
                                                        (if g$ls/false$8346$F0M
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8347$F0M)
                                                               ((case-lambda
                                                                  ((g$t$8348$F0M)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$8348$F0M
                                                                         g$e$8347$F0M))
                                                                     (list
                                                                       'if
                                                                       g$t$8348$F0M
                                                                       g$t$8348$F0M
                                                                       g$k$8339$F0M))))
                                                                (gensym))))
                                                            g$ls/false$8346$F0M)
                                                          ((case-lambda
                                                             ((g$t$8349$F0M)
                                                              ((case-lambda
                                                                 ((g$ls/false$8350$F0M)
                                                                  (if g$ls/false$8350$F0M
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$8351$F0M
                                                                           g$v$8352$F0M
                                                                           g$v*$8353$F0M)
                                                                         (list
                                                                           'if
                                                                           g$e$8351$F0M
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$8352$F0M
                                                                               g$v*$8353$F0M))
                                                                           g$k$8339$F0M)))
                                                                      g$ls/false$8350$F0M)
                                                                    ((case-lambda
                                                                       ((g$t$8354$F0M)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8355$F0M)
                                                                            (if g$ls/false$8355$F0M
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$7680$F0M
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$8338$F0M)))
                                                                                g$ls/false$8355$F0M)
                                                                              (g$syntax-violation$7680$F0M
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8354$F0M))))
                                                                         (g$syntax-dispatch$7569$F0M
                                                                           g$t$8354$F0M
                                                                           '_))))
                                                                     g$t$8349$F0M))))
                                                               (g$syntax-dispatch$7569$F0M
                                                                 g$t$8349$F0M
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$8345$F0M))))
                                                     (g$syntax-dispatch$7569$F0M
                                                       g$t$8345$F0M
                                                       '(any)))))
                                                 g$t$8340$F0M))))
                                           (g$syntax-dispatch$7569$F0M
                                             g$t$8340$F0M
                                             '(any #(scheme-id =>) any)))))
                                       g$x$8338$F0M))))
                                 (g$f*$8311$F0M
                                   (case-lambda
                                     ((g$x*$8318$F0M)
                                      ((case-lambda
                                         ((g$t$8319$F0M)
                                          ((case-lambda
                                             ((g$ls/false$8320$F0M)
                                              (if g$ls/false$8320$F0M
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$8307$F0M)
                                                       '#t)))
                                                  g$ls/false$8320$F0M)
                                                ((case-lambda
                                                   ((g$t$8321$F0M)
                                                    ((case-lambda
                                                       ((g$ls/false$8322$F0M)
                                                        (if g$ls/false$8322$F0M
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8323$F0M
                                                                 g$e*$8324$F0M)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$8323$F0M
                                                                     g$e*$8324$F0M))
                                                                 '#f)))
                                                            g$ls/false$8322$F0M)
                                                          ((case-lambda
                                                             ((g$t$8325$F0M)
                                                              ((case-lambda
                                                                 ((g$ls/false$8326$F0M)
                                                                  (if g$ls/false$8326$F0M
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$8327$F0M
                                                                           g$cls*$8328$F0M)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$8311$F0M
                                                                                g$cls*$8328$F0M)))
                                                                           (case-lambda
                                                                             ((g$e$8331$F0M
                                                                                g$g$8332$F0M)
                                                                              ((case-lambda
                                                                                 ((g$g$8333$F0M
                                                                                    g$e$8334$F0M)
                                                                                  (values
                                                                                    (g$f$8310$F0M
                                                                                      g$cls$8327$F0M
                                                                                      g$e$8334$F0M)
                                                                                    g$g$8333$F0M)))
                                                                               g$g$8332$F0M
                                                                               g$e$8331$F0M))))))
                                                                      g$ls/false$8326$F0M)
                                                                    ((case-lambda
                                                                       ((g$t$8335$F0M)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8336$F0M)
                                                                            (if g$ls/false$8336$F0M
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$8337$F0M)
                                                                                   (g$syntax-violation$7680$F0M
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$8337$F0M)))
                                                                                g$ls/false$8336$F0M)
                                                                              (g$syntax-violation$7680$F0M
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8335$F0M))))
                                                                         (g$syntax-dispatch$7569$F0M
                                                                           g$t$8335$F0M
                                                                           'any))))
                                                                     g$t$8325$F0M))))
                                                               (g$syntax-dispatch$7569$F0M
                                                                 g$t$8325$F0M
                                                                 '(any .
                                                                       any)))))
                                                           g$t$8321$F0M))))
                                                     (g$syntax-dispatch$7569$F0M
                                                       g$t$8321$F0M
                                                       '((#(scheme-id else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$8319$F0M))))
                                           (g$syntax-dispatch$7569$F0M
                                             g$t$8319$F0M
                                             '()))))
                                       g$x*$8318$F0M)))))
                         (call-with-values
                           (case-lambda (() (g$f*$8311$F0M g$clause*$8309$F0M)))
                           (case-lambda
                             ((g$code$8314$F0M g$raisek$8315$F0M)
                              ((case-lambda
                                 ((g$raisek$8316$F0M g$code$8317$F0M)
                                  (if g$raisek$8316$F0M
                                    (list g$outerk$8308$F0M g$code$8317$F0M)
                                    g$code$8317$F0M)))
                               g$raisek$8315$F0M
                               g$code$8314$F0M)))))))))
          ((case-lambda
             ((g$t$8296$F0M)
              ((case-lambda
                 ((g$ls/false$8297$F0M)
                  (if (if g$ls/false$8297$F0M
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$8298$F0M
                                 g$clause*$8299$F0M
                                 g$b$8300$F0M
                                 g$b*$8301$F0M)
                               (g$id?$7291$F0M g$con$8298$F0M)))
                            g$ls/false$8297$F0M))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$8302$F0M
                           g$clause*$8303$F0M
                           g$b$8304$F0M
                           g$b*$8305$F0M)
                         ((case-lambda
                            ((g$outerk$8306$F0M)
                             (g$bless$7532$F0M
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$8306$F0M)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$8302$F0M)
                                           (g$gen-clauses$8295$F0M
                                             g$con$8302$F0M
                                             g$outerk$8306$F0M
                                             g$clause*$8303$F0M))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$8304$F0M
                                                 g$b*$8305$F0M))))))))))))
                          (gensym))))
                      g$ls/false$8297$F0M)
                    (g$syntax-violation$7680$F0M
                      '#f
                      '"invalid syntax"
                      g$t$8296$F0M))))
               (g$syntax-dispatch$7569$F0M
                 g$t$8296$F0M
                 '(_ (any . each-any) any . each-any)))))
           g$x$8294$F0M)))))
   (g$define-enumeration-macro$7545$F0M
     g$define-enumeration-macro$11036$F0M
     (case-lambda
       ((g$stx$8356$F0M)
        (letrec* ((g$set?$8357$F0M
                    (case-lambda
                      ((g$x$8370$F0M)
                       ((case-lambda
                          ((g$t$8371$F0M)
                           (if g$t$8371$F0M
                             g$t$8371$F0M
                             (begin
                               '#f
                               (if (not (g$memq$5008$F0M
                                          (car g$x$8370$F0M)
                                          (cdr g$x$8370$F0M)))
                                 (begin
                                   '#f
                                   (g$set?$8357$F0M (cdr g$x$8370$F0M)))
                                 '#f)))))
                        (null? g$x$8370$F0M)))))
                  (g$remove-dups$8358$F0M
                    (case-lambda
                      ((g$ls$8369$F0M)
                       (if (null? g$ls$8369$F0M)
                         '()
                         (cons
                           (car g$ls$8369$F0M)
                           (g$remove-dups$8358$F0M
                             (g$remq$5021$F0M
                               (car g$ls$8369$F0M)
                               (cdr g$ls$8369$F0M)))))))))
          ((case-lambda
             ((g$t$8359$F0M)
              ((case-lambda
                 ((g$ls/false$8360$F0M)
                  (if (if g$ls/false$8360$F0M
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$8361$F0M g$id*$8362$F0M g$maker$8363$F0M)
                               (if (g$id?$7291$F0M g$name$8361$F0M)
                                 (if (g$id?$7291$F0M g$maker$8363$F0M)
                                   (begin
                                     '#f
                                     (g$for-all$5014$F0M
                                       g$id?$7291$F0M
                                       g$id*$8362$F0M))
                                   '#f)
                                 '#f)))
                            g$ls/false$8360$F0M))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$8364$F0M g$id*$8365$F0M g$maker$8366$F0M)
                         ((case-lambda
                            ((g$name*$8367$F0M g$mk$8368$F0M)
                             (g$bless$7532$F0M
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$8368$F0M
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list 'quote g$name*$8367$F0M))))
                                 (list
                                   'define-syntax
                                   g$name$8364$F0M
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list 'quote g$name*$8367$F0M))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list 'quote g$name$8364$F0M)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$8366$F0M
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8366$F0M)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$8367$F0M))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8366$F0M)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$8368$F0M
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$8358$F0M
                            (g$syntax->datum$7683$F0M g$id*$8365$F0M))
                          (gensym))))
                      g$ls/false$8360$F0M)
                    (g$syntax-violation$7680$F0M
                      '#f
                      '"invalid syntax"
                      g$t$8359$F0M))))
               (g$syntax-dispatch$7569$F0M
                 g$t$8359$F0M
                 '(_ any each-any any)))))
           g$stx$8356$F0M)))))
   (g$time-macro$7546$F0M
     g$time-macro$11037$F0M
     (case-lambda
       ((g$stx$8372$F0M)
        ((case-lambda
           ((g$t$8373$F0M)
            ((case-lambda
               ((g$ls/false$8374$F0M)
                (if g$ls/false$8374$F0M
                  (apply
                    (case-lambda
                      ((g$expr$8375$F0M)
                       ((case-lambda
                          ((g$str$8376$F0M)
                           (g$bless$7532$F0M
                             (list
                               'time-it
                               g$str$8376$F0M
                               (list 'lambda '() g$expr$8375$F0M)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$6251$F0M)))
                          (case-lambda
                            ((g$p$8379$F0M g$e$8380$F0M)
                             ((case-lambda
                                ((g$e$8381$F0M g$p$8382$F0M)
                                 (begin
                                   (write
                                     (g$syntax->datum$7683$F0M g$expr$8375$F0M)
                                     g$p$8382$F0M)
                                   (g$e$8381$F0M))))
                              g$e$8380$F0M
                              g$p$8379$F0M)))))))
                    g$ls/false$8374$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8373$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$8373$F0M '(_ any)))))
         g$stx$8372$F0M))))
   (g$delay-macro$7547$F0M
     g$delay-macro$11038$F0M
     (case-lambda
       ((g$stx$8383$F0M)
        ((case-lambda
           ((g$t$8384$F0M)
            ((case-lambda
               ((g$ls/false$8385$F0M)
                (if g$ls/false$8385$F0M
                  (apply
                    (case-lambda
                      ((g$expr$8386$F0M)
                       (g$bless$7532$F0M
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$8386$F0M)))))
                    g$ls/false$8385$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8384$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$8384$F0M '(_ any)))))
         g$stx$8383$F0M))))
   (g$assert-macro$7548$F0M
     g$assert-macro$11039$F0M
     (case-lambda
       ((g$stx$8387$F0M)
        ((case-lambda
           ((g$t$8388$F0M)
            ((case-lambda
               ((g$ls/false$8389$F0M)
                (if g$ls/false$8389$F0M
                  (apply
                    (case-lambda
                      ((g$expr$8390$F0M)
                       ((case-lambda
                          ((g$pos$8391$F0M)
                           (g$bless$7532$F0M
                             (list
                               'unless
                               g$expr$8390$F0M
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$8390$F0M)
                                 (list 'quote g$pos$8391$F0M))))))
                        ((case-lambda
                           ((g$t$8392$F0M)
                            (if g$t$8392$F0M
                              g$t$8392$F0M
                              (begin
                                '#f
                                (g$expression-position$7675$F0M
                                  g$expr$8390$F0M)))))
                         (g$expression-position$7675$F0M g$stx$8387$F0M)))))
                    g$ls/false$8389$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8388$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$8388$F0M '(_ any)))))
         g$stx$8387$F0M))))
   (g$endianness-macro$7549$F0M
     g$endianness-macro$11040$F0M
     (case-lambda
       ((g$stx$8393$F0M)
        ((case-lambda
           ((g$t$8394$F0M)
            ((case-lambda
               ((g$ls/false$8395$F0M)
                (if g$ls/false$8395$F0M
                  (apply
                    (case-lambda
                      ((g$e$8396$F0M)
                       ((case-lambda
                          ((g$t$8397$F0M)
                           (if (g$memv$5009$F0M g$t$8397$F0M '(little))
                             (g$bless$7532$F0M ''little)
                             (if (g$memv$5009$F0M g$t$8397$F0M '(big))
                               (g$bless$7532$F0M ''big)
                               (g$syntax-violation$7680$F0M
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$8393$F0M)))))
                        (g$syntax->datum$7683$F0M g$e$8396$F0M))))
                    g$ls/false$8395$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8394$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$8394$F0M '(_ any)))))
         g$stx$8393$F0M))))
   (g$identifier-syntax-macro$7550$F0M
     g$identifier-syntax-macro$11041$F0M
     (case-lambda
       ((g$stx$8398$F0M)
        ((case-lambda
           ((g$t$8399$F0M)
            ((case-lambda
               ((g$ls/false$8400$F0M)
                (if g$ls/false$8400$F0M
                  (apply
                    (case-lambda
                      ((g$expr$8401$F0M)
                       (g$bless$7532$F0M
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$8401$F0M))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$8401$F0M)
                                   '(#'(e* ...))))))))))
                    g$ls/false$8400$F0M)
                  ((case-lambda
                     ((g$t$8402$F0M)
                      ((case-lambda
                         ((g$ls/false$8403$F0M)
                          (if (if g$ls/false$8403$F0M
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$8404$F0M
                                         g$expr1$8405$F0M
                                         g$id2$8406$F0M
                                         g$expr2$8407$F0M
                                         g$expr3$8408$F0M)
                                       (if (g$id?$7291$F0M g$id1$8404$F0M)
                                         (if (g$id?$7291$F0M g$id2$8406$F0M)
                                           (begin
                                             '#f
                                             (g$id?$7291$F0M g$expr2$8407$F0M))
                                           '#f)
                                         '#f)))
                                    g$ls/false$8403$F0M))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$8409$F0M
                                   g$expr1$8410$F0M
                                   g$id2$8411$F0M
                                   g$expr2$8412$F0M
                                   g$expr3$8413$F0M)
                                 (g$bless$7532$F0M
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list 'syntax g$expr1$8410$F0M))
                                         (list
                                           (list 'set! 'id g$expr2$8412$F0M)
                                           (list 'syntax g$expr3$8413$F0M))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$8410$F0M
                                               '(e* ...))))))))))
                              g$ls/false$8403$F0M)
                            (g$syntax-violation$7680$F0M
                              '#f
                              '"invalid syntax"
                              g$t$8402$F0M))))
                       (g$syntax-dispatch$7569$F0M
                         g$t$8402$F0M
                         '(_ (any any) ((#(scheme-id set!) any any) any))))))
                   g$t$8399$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$8399$F0M '(_ any)))))
         g$stx$8398$F0M))))
   (g$do-macro$7551$F0M
     g$do-macro$11042$F0M
     (case-lambda
       ((g$stx$8414$F0M)
        (letrec* ((g$bind$8415$F0M
                    (case-lambda
                      ((g$x$8427$F0M)
                       ((case-lambda
                          ((g$t$8428$F0M)
                           ((case-lambda
                              ((g$ls/false$8429$F0M)
                               (if g$ls/false$8429$F0M
                                 (apply
                                   (case-lambda
                                     ((g$x$8430$F0M g$init$8431$F0M)
                                      (list
                                        g$x$8430$F0M
                                        g$init$8431$F0M
                                        g$x$8430$F0M)))
                                   g$ls/false$8429$F0M)
                                 ((case-lambda
                                    ((g$t$8432$F0M)
                                     ((case-lambda
                                        ((g$ls/false$8433$F0M)
                                         (if g$ls/false$8433$F0M
                                           (apply
                                             (case-lambda
                                               ((g$x$8434$F0M
                                                  g$init$8435$F0M
                                                  g$step$8436$F0M)
                                                (list
                                                  g$x$8434$F0M
                                                  g$init$8435$F0M
                                                  g$step$8436$F0M)))
                                             g$ls/false$8433$F0M)
                                           ((case-lambda
                                              ((g$t$8437$F0M)
                                               ((case-lambda
                                                  ((g$ls/false$8438$F0M)
                                                   (if g$ls/false$8438$F0M
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$7680$F0M
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$8414$F0M)))
                                                       g$ls/false$8438$F0M)
                                                     (g$syntax-violation$7680$F0M
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8437$F0M))))
                                                (g$syntax-dispatch$7569$F0M
                                                  g$t$8437$F0M
                                                  '_))))
                                            g$t$8432$F0M))))
                                      (g$syntax-dispatch$7569$F0M
                                        g$t$8432$F0M
                                        '(any any any)))))
                                  g$t$8428$F0M))))
                            (g$syntax-dispatch$7569$F0M
                              g$t$8428$F0M
                              '(any any)))))
                        g$x$8427$F0M)))))
          ((case-lambda
             ((g$t$8416$F0M)
              ((case-lambda
                 ((g$ls/false$8417$F0M)
                  (if g$ls/false$8417$F0M
                    (apply
                      (case-lambda
                        ((g$binding*$8418$F0M
                           g$test$8419$F0M
                           g$expr*$8420$F0M
                           g$command*$8421$F0M)
                         ((case-lambda
                            ((g$t$8422$F0M)
                             ((case-lambda
                                ((g$ls/false$8423$F0M)
                                 (if g$ls/false$8423$F0M
                                   (apply
                                     (case-lambda
                                       ((g$x*$8424$F0M
                                          g$init*$8425$F0M
                                          g$step*$8426$F0M)
                                        (if (g$valid-bound-ids?$7296$F0M
                                              g$x*$8424$F0M)
                                          (g$bless$7532$F0M
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$8424$F0M
                                                    (list
                                                      'if
                                                      g$test$8419$F0M
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$8420$F0M))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$8421$F0M
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$8426$F0M))))))))
                                              (cons 'loop g$init*$8425$F0M)))
                                          (g$syntax-violation$7680$F0M
                                            '#f
                                            '"invalid bindings"
                                            g$stx$8414$F0M))))
                                     g$ls/false$8423$F0M)
                                   (g$syntax-violation$7680$F0M
                                     '#f
                                     '"invalid syntax"
                                     g$t$8422$F0M))))
                              (g$syntax-dispatch$7569$F0M
                                g$t$8422$F0M
                                '#(each (any any any))))))
                          (map g$bind$8415$F0M g$binding*$8418$F0M))))
                      g$ls/false$8417$F0M)
                    (g$syntax-violation$7680$F0M
                      '#f
                      '"invalid syntax"
                      g$t$8416$F0M))))
               (g$syntax-dispatch$7569$F0M
                 g$t$8416$F0M
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$8414$F0M)))))
   (g$let*-macro$7552$F0M
     g$let*-macro$11043$F0M
     (case-lambda
       ((g$stx$8439$F0M)
        ((case-lambda
           ((g$t$8440$F0M)
            ((case-lambda
               ((g$ls/false$8441$F0M)
                (if (if g$ls/false$8441$F0M
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$8442$F0M
                               g$rhs*$8443$F0M
                               g$b$8444$F0M
                               g$b*$8445$F0M)
                             (g$for-all$5014$F0M
                               g$id?$7291$F0M
                               g$lhs*$8442$F0M)))
                          g$ls/false$8441$F0M))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$8446$F0M
                         g$rhs*$8447$F0M
                         g$b$8448$F0M
                         g$b*$8449$F0M)
                       (g$bless$7532$F0M
                         ((letrec ((g$f$8450$F0M
                                     (case-lambda
                                       ((g$x*$8451$F0M)
                                        (if (null? g$x*$8451$F0M)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$8448$F0M
                                                g$b*$8449$F0M)))
                                          (list
                                            'let
                                            (list (car g$x*$8451$F0M))
                                            (g$f$8450$F0M
                                              (cdr g$x*$8451$F0M))))))))
                            g$f$8450$F0M)
                          (map list g$lhs*$8446$F0M g$rhs*$8447$F0M)))))
                    g$ls/false$8441$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8440$F0M))))
             (g$syntax-dispatch$7569$F0M
               g$t$8440$F0M
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8439$F0M))))
   (g$or-macro$7553$F0M
     g$or-macro$11044$F0M
     (case-lambda
       ((g$stx$8452$F0M)
        ((case-lambda
           ((g$t$8453$F0M)
            ((case-lambda
               ((g$ls/false$8454$F0M)
                (if g$ls/false$8454$F0M
                  (apply (case-lambda (() '#f)) g$ls/false$8454$F0M)
                  ((case-lambda
                     ((g$t$8455$F0M)
                      ((case-lambda
                         ((g$ls/false$8456$F0M)
                          (if g$ls/false$8456$F0M
                            (apply
                              (case-lambda
                                ((g$e$8457$F0M g$e*$8458$F0M)
                                 (g$bless$7532$F0M
                                   ((letrec ((g$f$8459$F0M
                                               (case-lambda
                                                 ((g$e$8460$F0M g$e*$8461$F0M)
                                                  (if (null? g$e*$8461$F0M)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8460$F0M)
                                                    (list
                                                      'let
                                                      (list
                                                        (list 't g$e$8460$F0M))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$8459$F0M
                                                          (car g$e*$8461$F0M)
                                                          (cdr g$e*$8461$F0M)))))))))
                                      g$f$8459$F0M)
                                    g$e$8457$F0M
                                    g$e*$8458$F0M))))
                              g$ls/false$8456$F0M)
                            (g$syntax-violation$7680$F0M
                              '#f
                              '"invalid syntax"
                              g$t$8455$F0M))))
                       (g$syntax-dispatch$7569$F0M
                         g$t$8455$F0M
                         '(_ any . each-any)))))
                   g$t$8453$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$8453$F0M '(_)))))
         g$stx$8452$F0M))))
   (g$and-macro$7554$F0M
     g$and-macro$11045$F0M
     (case-lambda
       ((g$stx$8462$F0M)
        ((case-lambda
           ((g$t$8463$F0M)
            ((case-lambda
               ((g$ls/false$8464$F0M)
                (if g$ls/false$8464$F0M
                  (apply (case-lambda (() '#t)) g$ls/false$8464$F0M)
                  ((case-lambda
                     ((g$t$8465$F0M)
                      ((case-lambda
                         ((g$ls/false$8466$F0M)
                          (if g$ls/false$8466$F0M
                            (apply
                              (case-lambda
                                ((g$e$8467$F0M g$e*$8468$F0M)
                                 (g$bless$7532$F0M
                                   ((letrec ((g$f$8469$F0M
                                               (case-lambda
                                                 ((g$e$8470$F0M g$e*$8471$F0M)
                                                  (if (null? g$e*$8471$F0M)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8470$F0M)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$8470$F0M
                                                        (cons
                                                          (g$f$8469$F0M
                                                            (car g$e*$8471$F0M)
                                                            (cdr g$e*$8471$F0M))
                                                          '(#f)))))))))
                                      g$f$8469$F0M)
                                    g$e$8467$F0M
                                    g$e*$8468$F0M))))
                              g$ls/false$8466$F0M)
                            (g$syntax-violation$7680$F0M
                              '#f
                              '"invalid syntax"
                              g$t$8465$F0M))))
                       (g$syntax-dispatch$7569$F0M
                         g$t$8465$F0M
                         '(_ any . each-any)))))
                   g$t$8463$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$8463$F0M '(_)))))
         g$stx$8462$F0M))))
   (g$cond-macro$7555$F0M
     g$cond-macro$11046$F0M
     (case-lambda
       ((g$stx$8472$F0M)
        ((case-lambda
           ((g$t$8473$F0M)
            ((case-lambda
               ((g$ls/false$8474$F0M)
                (if g$ls/false$8474$F0M
                  (apply
                    (case-lambda
                      ((g$cls$8475$F0M g$cls*$8476$F0M)
                       (g$bless$7532$F0M
                         ((letrec ((g$f$8477$F0M
                                     (case-lambda
                                       ((g$cls$8478$F0M g$cls*$8479$F0M)
                                        (if (null? g$cls*$8479$F0M)
                                          ((case-lambda
                                             ((g$t$8480$F0M)
                                              ((case-lambda
                                                 ((g$ls/false$8481$F0M)
                                                  (if g$ls/false$8481$F0M
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8482$F0M
                                                           g$e*$8483$F0M)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$8482$F0M
                                                             g$e*$8483$F0M))))
                                                      g$ls/false$8481$F0M)
                                                    ((case-lambda
                                                       ((g$t$8484$F0M)
                                                        ((case-lambda
                                                           ((g$ls/false$8485$F0M)
                                                            (if g$ls/false$8485$F0M
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8486$F0M
                                                                     g$p$8487$F0M)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8486$F0M))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8487$F0M
                                                                         '(t))))))
                                                                g$ls/false$8485$F0M)
                                                              ((case-lambda
                                                                 ((g$t$8488$F0M)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8489$F0M)
                                                                      (if g$ls/false$8489$F0M
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8490$F0M)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$8490$F0M
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$8489$F0M)
                                                                        ((case-lambda
                                                                           ((g$t$8491$F0M)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8492$F0M)
                                                                                (if g$ls/false$8492$F0M
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8493$F0M
                                                                                         g$e*$8494$F0M)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8493$F0M
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8494$F0M))))
                                                                                    g$ls/false$8492$F0M)
                                                                                  ((case-lambda
                                                                                     ((g$t$8495$F0M)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8496$F0M)
                                                                                          (if g$ls/false$8496$F0M
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7680$F0M
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8472$F0M)))
                                                                                              g$ls/false$8496$F0M)
                                                                                            (g$syntax-violation$7680$F0M
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8495$F0M))))
                                                                                       (g$syntax-dispatch$7569$F0M
                                                                                         g$t$8495$F0M
                                                                                         '_))))
                                                                                   g$t$8491$F0M))))
                                                                             (g$syntax-dispatch$7569$F0M
                                                                               g$t$8491$F0M
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8488$F0M))))
                                                                   (g$syntax-dispatch$7569$F0M
                                                                     g$t$8488$F0M
                                                                     '(any)))))
                                                               g$t$8484$F0M))))
                                                         (g$syntax-dispatch$7569$F0M
                                                           g$t$8484$F0M
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8480$F0M))))
                                               (g$syntax-dispatch$7569$F0M
                                                 g$t$8480$F0M
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8478$F0M)
                                          ((case-lambda
                                             ((g$t$8497$F0M)
                                              ((case-lambda
                                                 ((g$ls/false$8498$F0M)
                                                  (if g$ls/false$8498$F0M
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8499$F0M
                                                           g$e*$8500$F0M)
                                                         (g$syntax-violation$7680$F0M
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$8472$F0M)))
                                                      g$ls/false$8498$F0M)
                                                    ((case-lambda
                                                       ((g$t$8501$F0M)
                                                        ((case-lambda
                                                           ((g$ls/false$8502$F0M)
                                                            (if g$ls/false$8502$F0M
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8503$F0M
                                                                     g$p$8504$F0M)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8503$F0M))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8504$F0M
                                                                         '(t))
                                                                       (g$f$8477$F0M
                                                                         (car g$cls*$8479$F0M)
                                                                         (cdr g$cls*$8479$F0M))))))
                                                                g$ls/false$8502$F0M)
                                                              ((case-lambda
                                                                 ((g$t$8505$F0M)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8506$F0M)
                                                                      (if g$ls/false$8506$F0M
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8507$F0M)
                                                                             (list
                                                                               'or
                                                                               g$e$8507$F0M
                                                                               (g$f$8477$F0M
                                                                                 (car g$cls*$8479$F0M)
                                                                                 (cdr g$cls*$8479$F0M)))))
                                                                          g$ls/false$8506$F0M)
                                                                        ((case-lambda
                                                                           ((g$t$8508$F0M)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8509$F0M)
                                                                                (if g$ls/false$8509$F0M
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8510$F0M
                                                                                         g$e*$8511$F0M)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8510$F0M
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8511$F0M)
                                                                                         (g$f$8477$F0M
                                                                                           (car g$cls*$8479$F0M)
                                                                                           (cdr g$cls*$8479$F0M)))))
                                                                                    g$ls/false$8509$F0M)
                                                                                  ((case-lambda
                                                                                     ((g$t$8512$F0M)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8513$F0M)
                                                                                          (if g$ls/false$8513$F0M
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7680$F0M
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8472$F0M)))
                                                                                              g$ls/false$8513$F0M)
                                                                                            (g$syntax-violation$7680$F0M
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8512$F0M))))
                                                                                       (g$syntax-dispatch$7569$F0M
                                                                                         g$t$8512$F0M
                                                                                         '_))))
                                                                                   g$t$8508$F0M))))
                                                                             (g$syntax-dispatch$7569$F0M
                                                                               g$t$8508$F0M
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8505$F0M))))
                                                                   (g$syntax-dispatch$7569$F0M
                                                                     g$t$8505$F0M
                                                                     '(any)))))
                                                               g$t$8501$F0M))))
                                                         (g$syntax-dispatch$7569$F0M
                                                           g$t$8501$F0M
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8497$F0M))))
                                               (g$syntax-dispatch$7569$F0M
                                                 g$t$8497$F0M
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8478$F0M))))))
                            g$f$8477$F0M)
                          g$cls$8475$F0M
                          g$cls*$8476$F0M))))
                    g$ls/false$8474$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8473$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$8473$F0M '(_ any . each-any)))))
         g$stx$8472$F0M))))
   (g$do-include$7556$F0M
     g$do-include$11047$F0M
     (case-lambda
       ((g$stx$8514$F0M g$id$8515$F0M g$filename$8516$F0M)
        ((case-lambda
           ((g$filename$8517$F0M)
            (begin
              (if (not (if (string? g$filename$8517$F0M)
                         (begin '#f (g$id?$7291$F0M g$id$8515$F0M))
                         '#f))
                (g$syntax-violation$7680$F0M
                  '#f
                  '"invalid syntax"
                  g$stx$8514$F0M)
                (void))
              (cons
                (g$bless$7532$F0M 'begin)
                (g$with-input-from-file$6286$F0M
                  g$filename$8517$F0M
                  (case-lambda
                    (()
                     ((letrec ((g$f$8518$F0M
                                 (case-lambda
                                   ((g$ls$8519$F0M)
                                    ((case-lambda
                                       ((g$x$8520$F0M)
                                        (if (eof-object? g$x$8520$F0M)
                                          (reverse g$ls$8519$F0M)
                                          (g$f$8518$F0M
                                            (cons
                                              (g$datum->stx$7274$F0M
                                                g$id$8515$F0M
                                                g$x$8520$F0M)
                                              g$ls$8519$F0M)))))
                                     (read-annotated))))))
                        g$f$8518$F0M)
                      '()))))))))
         (g$stx->datum$7302$F0M g$filename$8516$F0M)))))
   (g$include-macro$7557$F0M
     g$include-macro$11048$F0M
     (case-lambda
       ((g$e$8521$F0M)
        ((case-lambda
           ((g$t$8522$F0M)
            ((case-lambda
               ((g$ls/false$8523$F0M)
                (if g$ls/false$8523$F0M
                  (apply
                    (case-lambda
                      ((g$id$8524$F0M g$filename$8525$F0M)
                       (g$do-include$7556$F0M
                         g$e$8521$F0M
                         g$id$8524$F0M
                         g$filename$8525$F0M)))
                    g$ls/false$8523$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8522$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$8522$F0M '(any any)))))
         g$e$8521$F0M))))
   (g$include-into-macro$7558$F0M
     g$include-into-macro$11049$F0M
     (case-lambda
       ((g$e$8526$F0M)
        ((case-lambda
           ((g$t$8527$F0M)
            ((case-lambda
               ((g$ls/false$8528$F0M)
                (if g$ls/false$8528$F0M
                  (apply
                    (case-lambda
                      ((g$id$8529$F0M g$filename$8530$F0M)
                       (g$do-include$7556$F0M
                         g$e$8526$F0M
                         g$id$8529$F0M
                         g$filename$8530$F0M)))
                    g$ls/false$8528$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8527$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$8527$F0M '(_ any any)))))
         g$e$8526$F0M))))
   (g$syntax-rules-macro$7559$F0M
     g$syntax-rules-macro$11050$F0M
     (case-lambda
       ((g$e$8531$F0M)
        ((case-lambda
           ((g$t$8532$F0M)
            ((case-lambda
               ((g$ls/false$8533$F0M)
                (if g$ls/false$8533$F0M
                  (apply
                    (case-lambda
                      ((g$lits$8534$F0M g$pat*$8535$F0M g$tmp*$8536$F0M)
                       (begin
                         (g$verify-literals$7572$F0M
                           g$lits$8534$F0M
                           g$e$8531$F0M)
                         (g$bless$7532$F0M
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$8534$F0M
                                   (map (case-lambda
                                          ((g$pat$8537$F0M g$tmp$8538$F0M)
                                           ((case-lambda
                                              ((g$t$8539$F0M)
                                               ((case-lambda
                                                  ((g$ls/false$8540$F0M)
                                                   (if g$ls/false$8540$F0M
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$8541$F0M)
                                                          (list
                                                            (cons
                                                              'g
                                                              g$rest$8541$F0M)
                                                            (list
                                                              'syntax
                                                              g$tmp$8538$F0M))))
                                                       g$ls/false$8540$F0M)
                                                     ((case-lambda
                                                        ((g$t$8542$F0M)
                                                         ((case-lambda
                                                            ((g$ls/false$8543$F0M)
                                                             (if g$ls/false$8543$F0M
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$7680$F0M
                                                                      '#f
                                                                      '"invalid syntax-rules pattern"
                                                                      g$e$8531$F0M
                                                                      g$pat$8537$F0M)))
                                                                 g$ls/false$8543$F0M)
                                                               (g$syntax-violation$7680$F0M
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$8542$F0M))))
                                                          (g$syntax-dispatch$7569$F0M
                                                            g$t$8542$F0M
                                                            '_))))
                                                      g$t$8539$F0M))))
                                                (g$syntax-dispatch$7569$F0M
                                                  g$t$8539$F0M
                                                  '(_ . any)))))
                                            g$pat$8537$F0M)))
                                        g$pat*$8535$F0M
                                        g$tmp*$8536$F0M)))))))))
                    g$ls/false$8533$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$8532$F0M))))
             (g$syntax-dispatch$7569$F0M
               g$t$8532$F0M
               '(_ each-any . #(each (any any)))))))
         g$e$8531$F0M))))
   (g$quasiquote-macro$7560$F0M
     g$quasiquote-macro$11051$F0M
     ((case-lambda
        (()
         (letrec* ((g$datum$8544$F0M
                     (case-lambda
                       ((g$x$8675$F0M)
                        (list
                          (g$scheme-stx$7512$F0M 'quote)
                          (g$mkstx$7279$F0M g$x$8675$F0M '() '() '())))))
                   (g$quasicons*$8560$F0M
                     (case-lambda
                       ((g$x$8671$F0M g$y$8672$F0M)
                        ((letrec ((g$f$8673$F0M
                                    (case-lambda
                                      ((g$x$8674$F0M)
                                       (if (null? g$x$8674$F0M)
                                         g$y$8672$F0M
                                         (g$quasicons$8561$F0M
                                           (car g$x$8674$F0M)
                                           (g$f$8673$F0M
                                             (cdr g$x$8674$F0M))))))))
                           g$f$8673$F0M)
                         g$x$8671$F0M))))
                   (g$quasicons$8561$F0M
                     (case-lambda
                       ((g$x$8652$F0M g$y$8653$F0M)
                        ((case-lambda
                           ((g$t$8654$F0M)
                            ((case-lambda
                               ((g$ls/false$8655$F0M)
                                (if g$ls/false$8655$F0M
                                  (apply
                                    (case-lambda
                                      ((g$dy$8656$F0M)
                                       ((case-lambda
                                          ((g$t$8657$F0M)
                                           ((case-lambda
                                              ((g$ls/false$8658$F0M)
                                               (if g$ls/false$8658$F0M
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$8659$F0M)
                                                      (list
                                                        (g$scheme-stx$7512$F0M
                                                          'quote)
                                                        (cons
                                                          g$dx$8659$F0M
                                                          g$dy$8656$F0M))))
                                                   g$ls/false$8658$F0M)
                                                 ((case-lambda
                                                    ((g$t$8660$F0M)
                                                     ((case-lambda
                                                        ((g$ls/false$8661$F0M)
                                                         (if g$ls/false$8661$F0M
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$8662$F0M)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8663$F0M)
                                                                        (if g$ls/false$8663$F0M
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$7512$F0M
                                                                                   'list)
                                                                                 g$x$8652$F0M)))
                                                                            g$ls/false$8663$F0M)
                                                                          ((case-lambda
                                                                             ((g$t$8664$F0M)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8665$F0M)
                                                                                  (if g$ls/false$8665$F0M
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$7512$F0M
                                                                                             'cons)
                                                                                           g$x$8652$F0M
                                                                                           g$y$8653$F0M)))
                                                                                      g$ls/false$8665$F0M)
                                                                                    (g$syntax-violation$7680$F0M
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8664$F0M))))
                                                                               (g$syntax-dispatch$7569$F0M
                                                                                 g$t$8664$F0M
                                                                                 '_))))
                                                                           g$t$8662$F0M))))
                                                                     (g$syntax-dispatch$7569$F0M
                                                                       g$t$8662$F0M
                                                                       '()))))
                                                                 g$dy$8656$F0M)))
                                                             g$ls/false$8661$F0M)
                                                           (g$syntax-violation$7680$F0M
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$8660$F0M))))
                                                      (g$syntax-dispatch$7569$F0M
                                                        g$t$8660$F0M
                                                        '_))))
                                                  g$t$8657$F0M))))
                                            (g$syntax-dispatch$7569$F0M
                                              g$t$8657$F0M
                                              '(#(scheme-id quote) any)))))
                                        g$x$8652$F0M)))
                                    g$ls/false$8655$F0M)
                                  ((case-lambda
                                     ((g$t$8666$F0M)
                                      ((case-lambda
                                         ((g$ls/false$8667$F0M)
                                          (if g$ls/false$8667$F0M
                                            (apply
                                              (case-lambda
                                                ((g$stuff$8668$F0M)
                                                 (g$cons*$5016$F0M
                                                   (g$scheme-stx$7512$F0M 'list)
                                                   g$x$8652$F0M
                                                   g$stuff$8668$F0M)))
                                              g$ls/false$8667$F0M)
                                            ((case-lambda
                                               ((g$t$8669$F0M)
                                                ((case-lambda
                                                   ((g$ls/false$8670$F0M)
                                                    (if g$ls/false$8670$F0M
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$7512$F0M
                                                               'cons)
                                                             g$x$8652$F0M
                                                             g$y$8653$F0M)))
                                                        g$ls/false$8670$F0M)
                                                      (g$syntax-violation$7680$F0M
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$8669$F0M))))
                                                 (g$syntax-dispatch$7569$F0M
                                                   g$t$8669$F0M
                                                   '_))))
                                             g$t$8666$F0M))))
                                       (g$syntax-dispatch$7569$F0M
                                         g$t$8666$F0M
                                         '(#(scheme-id list) . each-any)))))
                                   g$t$8654$F0M))))
                             (g$syntax-dispatch$7569$F0M
                               g$t$8654$F0M
                               '(#(scheme-id quote) any)))))
                         g$y$8653$F0M))))
                   (g$quasiappend$8562$F0M
                     (case-lambda
                       ((g$x$8639$F0M g$y$8640$F0M)
                        ((case-lambda
                           ((g$ls$8641$F0M)
                            (if (null? g$ls$8641$F0M)
                              (list (g$scheme-stx$7512$F0M 'quote) '())
                              (if (null? (cdr g$ls$8641$F0M))
                                (car g$ls$8641$F0M)
                                (g$cons*$5016$F0M
                                  (g$scheme-stx$7512$F0M 'append)
                                  g$ls$8641$F0M)))))
                         ((letrec ((g$f$8642$F0M
                                     (case-lambda
                                       ((g$x$8643$F0M)
                                        (if (null? g$x$8643$F0M)
                                          ((case-lambda
                                             ((g$t$8644$F0M)
                                              ((case-lambda
                                                 ((g$ls/false$8645$F0M)
                                                  (if g$ls/false$8645$F0M
                                                    (apply
                                                      (case-lambda (() '()))
                                                      g$ls/false$8645$F0M)
                                                    ((case-lambda
                                                       ((g$t$8646$F0M)
                                                        ((case-lambda
                                                           ((g$ls/false$8647$F0M)
                                                            (if g$ls/false$8647$F0M
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$8640$F0M)))
                                                                g$ls/false$8647$F0M)
                                                              (g$syntax-violation$7680$F0M
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8646$F0M))))
                                                         (g$syntax-dispatch$7569$F0M
                                                           g$t$8646$F0M
                                                           '_))))
                                                     g$t$8644$F0M))))
                                               (g$syntax-dispatch$7569$F0M
                                                 g$t$8644$F0M
                                                 '(#(scheme-id quote) ())))))
                                           g$y$8640$F0M)
                                          ((case-lambda
                                             ((g$t$8648$F0M)
                                              ((case-lambda
                                                 ((g$ls/false$8649$F0M)
                                                  (if g$ls/false$8649$F0M
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$8642$F0M
                                                           (cdr g$x$8643$F0M))))
                                                      g$ls/false$8649$F0M)
                                                    ((case-lambda
                                                       ((g$t$8650$F0M)
                                                        ((case-lambda
                                                           ((g$ls/false$8651$F0M)
                                                            (if g$ls/false$8651$F0M
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$8643$F0M)
                                                                     (g$f$8642$F0M
                                                                       (cdr g$x$8643$F0M)))))
                                                                g$ls/false$8651$F0M)
                                                              (g$syntax-violation$7680$F0M
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8650$F0M))))
                                                         (g$syntax-dispatch$7569$F0M
                                                           g$t$8650$F0M
                                                           '_))))
                                                     g$t$8648$F0M))))
                                               (g$syntax-dispatch$7569$F0M
                                                 g$t$8648$F0M
                                                 '(#(scheme-id quote) ())))))
                                           (car g$x$8643$F0M)))))))
                            g$f$8642$F0M)
                          g$x$8639$F0M)))))
                   (g$quasivector$8563$F0M
                     (case-lambda
                       ((g$x$8614$F0M)
                        ((case-lambda
                           ((g$pat-x$8615$F0M)
                            ((case-lambda
                               ((g$t$8616$F0M)
                                ((case-lambda
                                   ((g$ls/false$8617$F0M)
                                    (if g$ls/false$8617$F0M
                                      (apply
                                        (case-lambda
                                          ((g$x*$8618$F0M)
                                           (list
                                             (g$scheme-stx$7512$F0M 'quote)
                                             (list->vector g$x*$8618$F0M))))
                                        g$ls/false$8617$F0M)
                                      ((case-lambda
                                         ((g$t$8619$F0M)
                                          ((case-lambda
                                             ((g$ls/false$8620$F0M)
                                              (if g$ls/false$8620$F0M
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$8621$F0M
                                                                 (case-lambda
                                                                   ((g$x$8622$F0M
                                                                      g$k$8623$F0M)
                                                                    ((case-lambda
                                                                       ((g$t$8624$F0M)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8625$F0M)
                                                                            (if g$ls/false$8625$F0M
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$8626$F0M)
                                                                                   (g$k$8623$F0M
                                                                                     (map (case-lambda
                                                                                            ((g$x$8627$F0M)
                                                                                             (list
                                                                                               (g$scheme-stx$7512$F0M
                                                                                                 'quote)
                                                                                               g$x$8627$F0M)))
                                                                                          g$x*$8626$F0M))))
                                                                                g$ls/false$8625$F0M)
                                                                              ((case-lambda
                                                                                 ((g$t$8628$F0M)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$8629$F0M)
                                                                                      (if g$ls/false$8629$F0M
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$8630$F0M)
                                                                                             (g$k$8623$F0M
                                                                                               g$x*$8630$F0M)))
                                                                                          g$ls/false$8629$F0M)
                                                                                        ((case-lambda
                                                                                           ((g$t$8631$F0M)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$8632$F0M)
                                                                                                (if g$ls/false$8632$F0M
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$8633$F0M
                                                                                                         g$y$8634$F0M)
                                                                                                       (g$f$8621$F0M
                                                                                                         g$y$8634$F0M
                                                                                                         (case-lambda
                                                                                                           ((g$ls$8635$F0M)
                                                                                                            (g$k$8623$F0M
                                                                                                              (cons
                                                                                                                g$x$8633$F0M
                                                                                                                g$ls$8635$F0M)))))))
                                                                                                    g$ls/false$8632$F0M)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$8636$F0M)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$8637$F0M)
                                                                                                          (if g$ls/false$8637$F0M
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$7512$F0M
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$8615$F0M)))
                                                                                                              g$ls/false$8637$F0M)
                                                                                                            (g$syntax-violation$7680$F0M
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$8636$F0M))))
                                                                                                       (g$syntax-dispatch$7569$F0M
                                                                                                         g$t$8636$F0M
                                                                                                         '_))))
                                                                                                   g$t$8631$F0M))))
                                                                                             (g$syntax-dispatch$7569$F0M
                                                                                               g$t$8631$F0M
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$8628$F0M))))
                                                                                   (g$syntax-dispatch$7569$F0M
                                                                                     g$t$8628$F0M
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$8624$F0M))))
                                                                         (g$syntax-dispatch$7569$F0M
                                                                           g$t$8624$F0M
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$8622$F0M)))))
                                                        g$f$8621$F0M)
                                                      g$x$8614$F0M
                                                      (case-lambda
                                                        ((g$ls$8638$F0M)
                                                         (g$cons*$5016$F0M
                                                           (g$scheme-stx$7512$F0M
                                                             'vector)
                                                           g$ls$8638$F0M))))))
                                                  g$ls/false$8620$F0M)
                                                (g$syntax-violation$7680$F0M
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$8619$F0M))))
                                           (g$syntax-dispatch$7569$F0M
                                             g$t$8619$F0M
                                             '_))))
                                       g$t$8616$F0M))))
                                 (g$syntax-dispatch$7569$F0M
                                   g$t$8616$F0M
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$8615$F0M)))
                         g$x$8614$F0M))))
                   (g$vquasi$8564$F0M
                     (case-lambda
                       ((g$p$8597$F0M g$lev$8598$F0M)
                        ((case-lambda
                           ((g$t$8599$F0M)
                            ((case-lambda
                               ((g$ls/false$8600$F0M)
                                (if g$ls/false$8600$F0M
                                  (apply
                                    (case-lambda
                                      ((g$p$8601$F0M g$q$8602$F0M)
                                       ((case-lambda
                                          ((g$t$8603$F0M)
                                           ((case-lambda
                                              ((g$ls/false$8604$F0M)
                                               (if g$ls/false$8604$F0M
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$8605$F0M)
                                                      (if (= g$lev$8598$F0M '0)
                                                        (g$quasicons*$8560$F0M
                                                          g$p$8605$F0M
                                                          (g$vquasi$8564$F0M
                                                            g$q$8602$F0M
                                                            g$lev$8598$F0M))
                                                        (g$quasicons$8561$F0M
                                                          (g$quasicons$8561$F0M
                                                            (g$datum$8544$F0M
                                                              'unquote)
                                                            (g$quasi$8565$F0M
                                                              g$p$8605$F0M
                                                              (- g$lev$8598$F0M
                                                                 '1)))
                                                          (g$vquasi$8564$F0M
                                                            g$q$8602$F0M
                                                            g$lev$8598$F0M)))))
                                                   g$ls/false$8604$F0M)
                                                 ((case-lambda
                                                    ((g$t$8606$F0M)
                                                     ((case-lambda
                                                        ((g$ls/false$8607$F0M)
                                                         (if g$ls/false$8607$F0M
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$8608$F0M)
                                                                (if (= g$lev$8598$F0M
                                                                       '0)
                                                                  (g$quasiappend$8562$F0M
                                                                    g$p$8608$F0M
                                                                    (g$vquasi$8564$F0M
                                                                      g$q$8602$F0M
                                                                      g$lev$8598$F0M))
                                                                  (g$quasicons$8561$F0M
                                                                    (g$quasicons$8561$F0M
                                                                      (g$datum$8544$F0M
                                                                        'unquote-splicing)
                                                                      (g$quasi$8565$F0M
                                                                        g$p$8608$F0M
                                                                        (- g$lev$8598$F0M
                                                                           '1)))
                                                                    (g$vquasi$8564$F0M
                                                                      g$q$8602$F0M
                                                                      g$lev$8598$F0M)))))
                                                             g$ls/false$8607$F0M)
                                                           ((case-lambda
                                                              ((g$t$8609$F0M)
                                                               ((case-lambda
                                                                  ((g$ls/false$8610$F0M)
                                                                   (if g$ls/false$8610$F0M
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$8611$F0M)
                                                                          (g$quasicons$8561$F0M
                                                                            (g$quasi$8565$F0M
                                                                              g$p$8611$F0M
                                                                              g$lev$8598$F0M)
                                                                            (g$vquasi$8564$F0M
                                                                              g$q$8602$F0M
                                                                              g$lev$8598$F0M))))
                                                                       g$ls/false$8610$F0M)
                                                                     (g$syntax-violation$7680$F0M
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$8609$F0M))))
                                                                (g$syntax-dispatch$7569$F0M
                                                                  g$t$8609$F0M
                                                                  'any))))
                                                            g$t$8606$F0M))))
                                                      (g$syntax-dispatch$7569$F0M
                                                        g$t$8606$F0M
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$8603$F0M))))
                                            (g$syntax-dispatch$7569$F0M
                                              g$t$8603$F0M
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$8601$F0M)))
                                    g$ls/false$8600$F0M)
                                  ((case-lambda
                                     ((g$t$8612$F0M)
                                      ((case-lambda
                                         ((g$ls/false$8613$F0M)
                                          (if g$ls/false$8613$F0M
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$7512$F0M
                                                     'quote)
                                                   '())))
                                              g$ls/false$8613$F0M)
                                            (g$syntax-violation$7680$F0M
                                              '#f
                                              '"invalid syntax"
                                              g$t$8612$F0M))))
                                       (g$syntax-dispatch$7569$F0M
                                         g$t$8612$F0M
                                         '()))))
                                   g$t$8599$F0M))))
                             (g$syntax-dispatch$7569$F0M
                               g$t$8599$F0M
                               '(any . any)))))
                         g$p$8597$F0M))))
                   (g$quasi$8565$F0M
                     (case-lambda
                       ((g$p$8570$F0M g$lev$8571$F0M)
                        ((case-lambda
                           ((g$t$8572$F0M)
                            ((case-lambda
                               ((g$ls/false$8573$F0M)
                                (if g$ls/false$8573$F0M
                                  (apply
                                    (case-lambda
                                      ((g$p$8574$F0M)
                                       (if (= g$lev$8571$F0M '0)
                                         g$p$8574$F0M
                                         (g$quasicons$8561$F0M
                                           (g$datum$8544$F0M 'unquote)
                                           (g$quasi$8565$F0M
                                             (list g$p$8574$F0M)
                                             (- g$lev$8571$F0M '1))))))
                                    g$ls/false$8573$F0M)
                                  ((case-lambda
                                     ((g$t$8575$F0M)
                                      ((case-lambda
                                         ((g$ls/false$8576$F0M)
                                          (if g$ls/false$8576$F0M
                                            (apply
                                              (case-lambda
                                                ((g$p$8577$F0M g$q$8578$F0M)
                                                 (if (= g$lev$8571$F0M '0)
                                                   (g$quasicons*$8560$F0M
                                                     g$p$8577$F0M
                                                     (g$quasi$8565$F0M
                                                       g$q$8578$F0M
                                                       g$lev$8571$F0M))
                                                   (g$quasicons$8561$F0M
                                                     (g$quasicons$8561$F0M
                                                       (g$datum$8544$F0M
                                                         'unquote)
                                                       (g$quasi$8565$F0M
                                                         g$p$8577$F0M
                                                         (- g$lev$8571$F0M '1)))
                                                     (g$quasi$8565$F0M
                                                       g$q$8578$F0M
                                                       g$lev$8571$F0M)))))
                                              g$ls/false$8576$F0M)
                                            ((case-lambda
                                               ((g$t$8579$F0M)
                                                ((case-lambda
                                                   ((g$ls/false$8580$F0M)
                                                    (if g$ls/false$8580$F0M
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$8581$F0M
                                                             g$q$8582$F0M)
                                                           (if (= g$lev$8571$F0M
                                                                  '0)
                                                             (g$quasiappend$8562$F0M
                                                               g$p$8581$F0M
                                                               (g$quasi$8565$F0M
                                                                 g$q$8582$F0M
                                                                 g$lev$8571$F0M))
                                                             (g$quasicons$8561$F0M
                                                               (g$quasicons$8561$F0M
                                                                 (g$datum$8544$F0M
                                                                   'unquote-splicing)
                                                                 (g$quasi$8565$F0M
                                                                   g$p$8581$F0M
                                                                   (- g$lev$8571$F0M
                                                                      '1)))
                                                               (g$quasi$8565$F0M
                                                                 g$q$8582$F0M
                                                                 g$lev$8571$F0M)))))
                                                        g$ls/false$8580$F0M)
                                                      ((case-lambda
                                                         ((g$t$8583$F0M)
                                                          ((case-lambda
                                                             ((g$ls/false$8584$F0M)
                                                              (if g$ls/false$8584$F0M
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$8585$F0M)
                                                                     (g$quasicons$8561$F0M
                                                                       (g$datum$8544$F0M
                                                                         'quasiquote)
                                                                       (g$quasi$8565$F0M
                                                                         (list
                                                                           g$p$8585$F0M)
                                                                         (+ g$lev$8571$F0M
                                                                            '1)))))
                                                                  g$ls/false$8584$F0M)
                                                                ((case-lambda
                                                                   ((g$t$8586$F0M)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8587$F0M)
                                                                        (if g$ls/false$8587$F0M
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$8588$F0M
                                                                                 g$q$8589$F0M)
                                                                               (g$quasicons$8561$F0M
                                                                                 (g$quasi$8565$F0M
                                                                                   g$p$8588$F0M
                                                                                   g$lev$8571$F0M)
                                                                                 (g$quasi$8565$F0M
                                                                                   g$q$8589$F0M
                                                                                   g$lev$8571$F0M))))
                                                                            g$ls/false$8587$F0M)
                                                                          ((case-lambda
                                                                             ((g$t$8590$F0M)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8591$F0M)
                                                                                  (if (if g$ls/false$8591$F0M
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$8592$F0M)
                                                                                               (not (g$stx?$7263$F0M
                                                                                                      g$x$8592$F0M))))
                                                                                            g$ls/false$8591$F0M))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$8593$F0M)
                                                                                         (g$quasivector$8563$F0M
                                                                                           (g$vquasi$8564$F0M
                                                                                             g$x$8593$F0M
                                                                                             g$lev$8571$F0M))))
                                                                                      g$ls/false$8591$F0M)
                                                                                    ((case-lambda
                                                                                       ((g$t$8594$F0M)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8595$F0M)
                                                                                            (if g$ls/false$8595$F0M
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$8596$F0M)
                                                                                                   (list
                                                                                                     (g$scheme-stx$7512$F0M
                                                                                                       'quote)
                                                                                                     g$p$8596$F0M)))
                                                                                                g$ls/false$8595$F0M)
                                                                                              (g$syntax-violation$7680$F0M
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$8594$F0M))))
                                                                                         (g$syntax-dispatch$7569$F0M
                                                                                           g$t$8594$F0M
                                                                                           'any))))
                                                                                     g$t$8590$F0M))))
                                                                               (g$syntax-dispatch$7569$F0M
                                                                                 g$t$8590$F0M
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$8586$F0M))))
                                                                     (g$syntax-dispatch$7569$F0M
                                                                       g$t$8586$F0M
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$8583$F0M))))
                                                           (g$syntax-dispatch$7569$F0M
                                                             g$t$8583$F0M
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$8579$F0M))))
                                                 (g$syntax-dispatch$7569$F0M
                                                   g$t$8579$F0M
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8575$F0M))))
                                       (g$syntax-dispatch$7569$F0M
                                         g$t$8575$F0M
                                         '((#(scheme-id unquote) . each-any)
                                           .
                                           any)))))
                                   g$t$8572$F0M))))
                             (g$syntax-dispatch$7569$F0M
                               g$t$8572$F0M
                               '(#(scheme-id unquote) any)))))
                         g$p$8570$F0M)))))
           (case-lambda
             ((g$x$8566$F0M)
              ((case-lambda
                 ((g$t$8567$F0M)
                  ((case-lambda
                     ((g$ls/false$8568$F0M)
                      (if g$ls/false$8568$F0M
                        (apply
                          (case-lambda
                            ((g$e$8569$F0M) (g$quasi$8565$F0M g$e$8569$F0M '0)))
                          g$ls/false$8568$F0M)
                        (g$syntax-violation$7680$F0M
                          '#f
                          '"invalid syntax"
                          g$t$8567$F0M))))
                   (g$syntax-dispatch$7569$F0M g$t$8567$F0M '(_ any)))))
               g$x$8566$F0M))))))))
   (g$quasisyntax-macro$7561$F0M
     g$quasisyntax-macro$11052$F0M
     ((case-lambda
        (()
         (letrec* ((g$quasi$8676$F0M
                     (case-lambda
                       ((g$p$8690$F0M g$lev$8691$F0M)
                        ((case-lambda
                           ((g$t$8692$F0M)
                            ((case-lambda
                               ((g$ls/false$8693$F0M)
                                (if g$ls/false$8693$F0M
                                  (apply
                                    (case-lambda
                                      ((g$p$8694$F0M)
                                       (if (= g$lev$8691$F0M '0)
                                         ((case-lambda
                                            ((g$g$8695$F0M)
                                             (values
                                               (list g$g$8695$F0M)
                                               (list g$p$8694$F0M)
                                               g$g$8695$F0M)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$8676$F0M
                                                g$p$8694$F0M
                                                (- g$lev$8691$F0M '1))))
                                           (case-lambda
                                             ((g$lhs*$8699$F0M
                                                g$rhs*$8700$F0M
                                                g$p$8701$F0M)
                                              ((case-lambda
                                                 ((g$p$8702$F0M
                                                    g$rhs*$8703$F0M
                                                    g$lhs*$8704$F0M)
                                                  (values
                                                    g$lhs*$8704$F0M
                                                    g$rhs*$8703$F0M
                                                    (list
                                                      'unsyntax
                                                      g$p$8702$F0M))))
                                               g$p$8701$F0M
                                               g$rhs*$8700$F0M
                                               g$lhs*$8699$F0M)))))))
                                    g$ls/false$8693$F0M)
                                  ((case-lambda
                                     ((g$t$8705$F0M)
                                      ((case-lambda
                                         ((g$ls/false$8706$F0M)
                                          (if (if g$ls/false$8706$F0M
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$8691$F0M '0)))
                                                    g$ls/false$8706$F0M))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$7680$F0M
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$8690$F0M)))
                                              g$ls/false$8706$F0M)
                                            ((case-lambda
                                               ((g$t$8707$F0M)
                                                ((case-lambda
                                                   ((g$ls/false$8708$F0M)
                                                    (if g$ls/false$8708$F0M
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$8709$F0M
                                                             g$q$8710$F0M)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$8676$F0M
                                                                  g$q$8710$F0M
                                                                  g$lev$8691$F0M)))
                                                             (case-lambda
                                                               ((g$lhs*$8714$F0M
                                                                  g$rhs*$8715$F0M
                                                                  g$q$8716$F0M)
                                                                ((case-lambda
                                                                   ((g$q$8717$F0M
                                                                      g$rhs*$8718$F0M
                                                                      g$lhs*$8719$F0M)
                                                                    (if (= g$lev$8691$F0M
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$8720$F0M)
                                                                          (values
                                                                            (append
                                                                              g$g*$8720$F0M
                                                                              g$lhs*$8719$F0M)
                                                                            (append
                                                                              g$p*$8709$F0M
                                                                              g$rhs*$8718$F0M)
                                                                            (append
                                                                              g$g*$8720$F0M
                                                                              g$q$8717$F0M))))
                                                                       (map (case-lambda
                                                                              ((g$x$8721$F0M)
                                                                               (gensym)))
                                                                            g$p*$8709$F0M))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$8676$F0M
                                                                             g$p*$8709$F0M
                                                                             (- g$lev$8691$F0M
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$8725$F0M
                                                                             g$rhs2*$8726$F0M
                                                                             g$p*$8727$F0M)
                                                                           ((case-lambda
                                                                              ((g$p*$8728$F0M
                                                                                 g$rhs2*$8729$F0M
                                                                                 g$lhs2*$8730$F0M)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$8730$F0M
                                                                                   g$lhs*$8719$F0M)
                                                                                 (append
                                                                                   g$rhs2*$8729$F0M
                                                                                   g$rhs*$8718$F0M)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$8728$F0M)
                                                                                   g$q$8717$F0M))))
                                                                            g$p*$8727$F0M
                                                                            g$rhs2*$8726$F0M
                                                                            g$lhs2*$8725$F0M)))))))
                                                                 g$q$8716$F0M
                                                                 g$rhs*$8715$F0M
                                                                 g$lhs*$8714$F0M))))))
                                                        g$ls/false$8708$F0M)
                                                      ((case-lambda
                                                         ((g$t$8731$F0M)
                                                          ((case-lambda
                                                             ((g$ls/false$8732$F0M)
                                                              (if g$ls/false$8732$F0M
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$8733$F0M
                                                                       g$q$8734$F0M)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$8676$F0M
                                                                            g$q$8734$F0M
                                                                            g$lev$8691$F0M)))
                                                                       (case-lambda
                                                                         ((g$lhs*$8738$F0M
                                                                            g$rhs*$8739$F0M
                                                                            g$q$8740$F0M)
                                                                          ((case-lambda
                                                                             ((g$q$8741$F0M
                                                                                g$rhs*$8742$F0M
                                                                                g$lhs*$8743$F0M)
                                                                              (if (= g$lev$8691$F0M
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$8744$F0M)
                                                                                    (values
                                                                                      (append
                                                                                        (map (case-lambda
                                                                                               ((g$g$8745$F0M)
                                                                                                (cons
                                                                                                  g$g$8745$F0M
                                                                                                  '(...))))
                                                                                             g$g*$8744$F0M)
                                                                                        g$lhs*$8743$F0M)
                                                                                      (append
                                                                                        g$p*$8733$F0M
                                                                                        g$rhs*$8742$F0M)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (map (case-lambda
                                                                                                 ((g$g$8746$F0M)
                                                                                                  (cons
                                                                                                    g$g$8746$F0M
                                                                                                    '(...))))
                                                                                               g$g*$8744$F0M))
                                                                                        g$q$8741$F0M))))
                                                                                 (map (case-lambda
                                                                                        ((g$x$8747$F0M)
                                                                                         (gensym)))
                                                                                      g$p*$8733$F0M))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$8676$F0M
                                                                                       g$p*$8733$F0M
                                                                                       (- g$lev$8691$F0M
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$8751$F0M
                                                                                       g$rhs2*$8752$F0M
                                                                                       g$p*$8753$F0M)
                                                                                     ((case-lambda
                                                                                        ((g$p*$8754$F0M
                                                                                           g$rhs2*$8755$F0M
                                                                                           g$lhs2*$8756$F0M)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$8756$F0M
                                                                                             g$lhs*$8743$F0M)
                                                                                           (append
                                                                                             g$rhs2*$8755$F0M
                                                                                             g$rhs*$8742$F0M)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$8754$F0M)
                                                                                             g$q$8741$F0M))))
                                                                                      g$p*$8753$F0M
                                                                                      g$rhs2*$8752$F0M
                                                                                      g$lhs2*$8751$F0M)))))))
                                                                           g$q$8740$F0M
                                                                           g$rhs*$8739$F0M
                                                                           g$lhs*$8738$F0M))))))
                                                                  g$ls/false$8732$F0M)
                                                                ((case-lambda
                                                                   ((g$t$8757$F0M)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8758$F0M)
                                                                        (if (if g$ls/false$8758$F0M
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$8691$F0M
                                                                                        '0)))
                                                                                  g$ls/false$8758$F0M))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$7680$F0M
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$8690$F0M)))
                                                                            g$ls/false$8758$F0M)
                                                                          ((case-lambda
                                                                             ((g$t$8759$F0M)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8760$F0M)
                                                                                  (if g$ls/false$8760$F0M
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$8761$F0M)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$8676$F0M
                                                                                                g$p$8761$F0M
                                                                                                (+ g$lev$8691$F0M
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$8765$F0M
                                                                                                g$rhs*$8766$F0M
                                                                                                g$p$8767$F0M)
                                                                                              ((case-lambda
                                                                                                 ((g$p$8768$F0M
                                                                                                    g$rhs*$8769$F0M
                                                                                                    g$lhs*$8770$F0M)
                                                                                                  (values
                                                                                                    g$lhs*$8770$F0M
                                                                                                    g$rhs*$8769$F0M
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$8768$F0M))))
                                                                                               g$p$8767$F0M
                                                                                               g$rhs*$8766$F0M
                                                                                               g$lhs*$8765$F0M))))))
                                                                                      g$ls/false$8760$F0M)
                                                                                    ((case-lambda
                                                                                       ((g$t$8771$F0M)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8772$F0M)
                                                                                            (if g$ls/false$8772$F0M
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$8773$F0M
                                                                                                     g$q$8774$F0M)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$8676$F0M
                                                                                                          g$p$8773$F0M
                                                                                                          g$lev$8691$F0M)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$8781$F0M
                                                                                                          g$rhs*$8782$F0M
                                                                                                          g$p$8783$F0M)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$8676$F0M
                                                                                                               g$q$8774$F0M
                                                                                                               g$lev$8691$F0M)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$8784$F0M
                                                                                                               g$rhs2*$8785$F0M
                                                                                                               g$q$8786$F0M)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$8787$F0M
                                                                                                                   g$rhs2*$8788$F0M
                                                                                                                   g$lhs2*$8789$F0M
                                                                                                                   g$p$8790$F0M
                                                                                                                   g$rhs*$8791$F0M
                                                                                                                   g$lhs*$8792$F0M)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$8789$F0M
                                                                                                                     g$lhs*$8792$F0M)
                                                                                                                   (append
                                                                                                                     g$rhs2*$8788$F0M
                                                                                                                     g$rhs*$8791$F0M)
                                                                                                                   (cons
                                                                                                                     g$p$8790$F0M
                                                                                                                     g$q$8787$F0M))))
                                                                                                              g$q$8786$F0M
                                                                                                              g$rhs2*$8785$F0M
                                                                                                              g$lhs2*$8784$F0M
                                                                                                              g$p$8783$F0M
                                                                                                              g$rhs*$8782$F0M
                                                                                                              g$lhs*$8781$F0M)))))))))
                                                                                                g$ls/false$8772$F0M)
                                                                                              ((case-lambda
                                                                                                 ((g$t$8793$F0M)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$8794$F0M)
                                                                                                      (if g$ls/false$8794$F0M
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$8795$F0M)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$8676$F0M
                                                                                                                    g$x*$8795$F0M
                                                                                                                    g$lev$8691$F0M)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$8799$F0M
                                                                                                                    g$rhs*$8800$F0M
                                                                                                                    g$x*$8801$F0M)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$8802$F0M
                                                                                                                        g$rhs*$8803$F0M
                                                                                                                        g$lhs*$8804$F0M)
                                                                                                                      (values
                                                                                                                        g$lhs*$8804$F0M
                                                                                                                        g$rhs*$8803$F0M
                                                                                                                        (list->vector
                                                                                                                          g$x*$8802$F0M))))
                                                                                                                   g$x*$8801$F0M
                                                                                                                   g$rhs*$8800$F0M
                                                                                                                   g$lhs*$8799$F0M))))))
                                                                                                          g$ls/false$8794$F0M)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$8805$F0M)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$8806$F0M)
                                                                                                                (if g$ls/false$8806$F0M
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$8690$F0M)))
                                                                                                                    g$ls/false$8806$F0M)
                                                                                                                  (g$syntax-violation$7680$F0M
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$8805$F0M))))
                                                                                                             (g$syntax-dispatch$7569$F0M
                                                                                                               g$t$8805$F0M
                                                                                                               '_))))
                                                                                                         g$t$8793$F0M))))
                                                                                                   (g$syntax-dispatch$7569$F0M
                                                                                                     g$t$8793$F0M
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$8771$F0M))))
                                                                                         (g$syntax-dispatch$7569$F0M
                                                                                           g$t$8771$F0M
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$8759$F0M))))
                                                                               (g$syntax-dispatch$7569$F0M
                                                                                 g$t$8759$F0M
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$8757$F0M))))
                                                                     (g$syntax-dispatch$7569$F0M
                                                                       g$t$8757$F0M
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$8731$F0M))))
                                                           (g$syntax-dispatch$7569$F0M
                                                             g$t$8731$F0M
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$8707$F0M))))
                                                 (g$syntax-dispatch$7569$F0M
                                                   g$t$8707$F0M
                                                   '((#(scheme-id unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8705$F0M))))
                                       (g$syntax-dispatch$7569$F0M
                                         g$t$8705$F0M
                                         '#(scheme-id unsyntax)))))
                                   g$t$8692$F0M))))
                             (g$syntax-dispatch$7569$F0M
                               g$t$8692$F0M
                               '(#(scheme-id unsyntax) any)))))
                         g$p$8690$F0M)))))
           (case-lambda
             ((g$x$8677$F0M)
              ((case-lambda
                 ((g$t$8678$F0M)
                  ((case-lambda
                     ((g$ls/false$8679$F0M)
                      (if g$ls/false$8679$F0M
                        (apply
                          (case-lambda
                            ((g$e$8680$F0M)
                             (call-with-values
                               (case-lambda
                                 (() (g$quasi$8676$F0M g$e$8680$F0M '0)))
                               (case-lambda
                                 ((g$lhs*$8684$F0M g$rhs*$8685$F0M g$v$8686$F0M)
                                  ((case-lambda
                                     ((g$v$8687$F0M
                                        g$rhs*$8688$F0M
                                        g$lhs*$8689$F0M)
                                      (g$bless$7532$F0M
                                        (list
                                          'syntax-case
                                          (cons 'list g$rhs*$8688$F0M)
                                          '()
                                          (list
                                            g$lhs*$8689$F0M
                                            (list 'syntax g$v$8687$F0M))))))
                                   g$v$8686$F0M
                                   g$rhs*$8685$F0M
                                   g$lhs*$8684$F0M))))))
                          g$ls/false$8679$F0M)
                        (g$syntax-violation$7680$F0M
                          '#f
                          '"invalid syntax"
                          g$t$8678$F0M))))
                   (g$syntax-dispatch$7569$F0M g$t$8678$F0M '(_ any)))))
               g$x$8677$F0M))))))))
   (g$define-struct-macro$7562$F0M
     g$define-struct-macro$11053$F0M
     (case-lambda
       ((g$stx$8807$F0M)
        (g$syntax-violation$7680$F0M
          '#f
          '"define-struct not supported"
          g$stx$8807$F0M))))
   (g$define-record-type-macro$7563$F0M
     g$define-record-type-macro$11054$F0M
     (case-lambda
       ((g$x$8808$F0M)
        (letrec* ((g$id$8809$F0M
                    (case-lambda
                      ((g$ctxt$9061$F0M . g$str*$9062$F0M)
                       (g$datum->syntax$7682$F0M
                         g$ctxt$9061$F0M
                         (string->symbol
                           (apply
                             string-append
                             (map (case-lambda
                                    ((g$x$9063$F0M)
                                     (if (symbol? g$x$9063$F0M)
                                       (symbol->string g$x$9063$F0M)
                                       (if (string? g$x$9063$F0M)
                                         g$x$9063$F0M
                                         (assertion-violation
                                           'define-record-type
                                           '"BUG")))))
                                  g$str*$9062$F0M)))))))
                  (g$get-record-name$8810$F0M
                    (case-lambda
                      ((g$spec$9052$F0M)
                       ((case-lambda
                          ((g$t$9053$F0M)
                           ((case-lambda
                              ((g$ls/false$9054$F0M)
                               (if g$ls/false$9054$F0M
                                 (apply
                                   (case-lambda
                                     ((g$foo$9055$F0M
                                        g$make-foo$9056$F0M
                                        g$foo?$9057$F0M)
                                      g$foo$9055$F0M))
                                   g$ls/false$9054$F0M)
                                 ((case-lambda
                                    ((g$t$9058$F0M)
                                     ((case-lambda
                                        ((g$ls/false$9059$F0M)
                                         (if g$ls/false$9059$F0M
                                           (apply
                                             (case-lambda
                                               ((g$foo$9060$F0M)
                                                g$foo$9060$F0M))
                                             g$ls/false$9059$F0M)
                                           (g$syntax-violation$7680$F0M
                                             '#f
                                             '"invalid syntax"
                                             g$t$9058$F0M))))
                                      (g$syntax-dispatch$7569$F0M
                                        g$t$9058$F0M
                                        'any))))
                                  g$t$9053$F0M))))
                            (g$syntax-dispatch$7569$F0M
                              g$t$9053$F0M
                              '(any any any)))))
                        g$spec$9052$F0M))))
                  (g$get-record-constructor-name$8811$F0M
                    (case-lambda
                      ((g$spec$9042$F0M)
                       ((case-lambda
                          ((g$t$9043$F0M)
                           ((case-lambda
                              ((g$ls/false$9044$F0M)
                               (if g$ls/false$9044$F0M
                                 (apply
                                   (case-lambda
                                     ((g$foo$9045$F0M
                                        g$make-foo$9046$F0M
                                        g$foo?$9047$F0M)
                                      g$make-foo$9046$F0M))
                                   g$ls/false$9044$F0M)
                                 ((case-lambda
                                    ((g$t$9048$F0M)
                                     ((case-lambda
                                        ((g$ls/false$9049$F0M)
                                         (if (if g$ls/false$9049$F0M
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9050$F0M)
                                                      (g$id?$7291$F0M
                                                        g$foo$9050$F0M)))
                                                   g$ls/false$9049$F0M))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9051$F0M)
                                                (g$id$8809$F0M
                                                  g$foo$9051$F0M
                                                  '"make-"
                                                  (g$stx->datum$7302$F0M
                                                    g$foo$9051$F0M))))
                                             g$ls/false$9049$F0M)
                                           (g$syntax-violation$7680$F0M
                                             '#f
                                             '"invalid syntax"
                                             g$t$9048$F0M))))
                                      (g$syntax-dispatch$7569$F0M
                                        g$t$9048$F0M
                                        'any))))
                                  g$t$9043$F0M))))
                            (g$syntax-dispatch$7569$F0M
                              g$t$9043$F0M
                              '(any any any)))))
                        g$spec$9042$F0M))))
                  (g$get-record-predicate-name$8812$F0M
                    (case-lambda
                      ((g$spec$9032$F0M)
                       ((case-lambda
                          ((g$t$9033$F0M)
                           ((case-lambda
                              ((g$ls/false$9034$F0M)
                               (if g$ls/false$9034$F0M
                                 (apply
                                   (case-lambda
                                     ((g$foo$9035$F0M
                                        g$make-foo$9036$F0M
                                        g$foo?$9037$F0M)
                                      g$foo?$9037$F0M))
                                   g$ls/false$9034$F0M)
                                 ((case-lambda
                                    ((g$t$9038$F0M)
                                     ((case-lambda
                                        ((g$ls/false$9039$F0M)
                                         (if (if g$ls/false$9039$F0M
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9040$F0M)
                                                      (g$id?$7291$F0M
                                                        g$foo$9040$F0M)))
                                                   g$ls/false$9039$F0M))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9041$F0M)
                                                (g$id$8809$F0M
                                                  g$foo$9041$F0M
                                                  (g$stx->datum$7302$F0M
                                                    g$foo$9041$F0M)
                                                  '"?")))
                                             g$ls/false$9039$F0M)
                                           (g$syntax-violation$7680$F0M
                                             '#f
                                             '"invalid syntax"
                                             g$t$9038$F0M))))
                                      (g$syntax-dispatch$7569$F0M
                                        g$t$9038$F0M
                                        'any))))
                                  g$t$9033$F0M))))
                            (g$syntax-dispatch$7569$F0M
                              g$t$9033$F0M
                              '(any any any)))))
                        g$spec$9032$F0M))))
                  (g$get-clause$8813$F0M
                    (case-lambda
                      ((g$id$9023$F0M g$ls$9024$F0M)
                       ((case-lambda
                          ((g$t$9025$F0M)
                           ((case-lambda
                              ((g$ls/false$9026$F0M)
                               (if g$ls/false$9026$F0M
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$9026$F0M)
                                 ((case-lambda
                                    ((g$t$9027$F0M)
                                     ((case-lambda
                                        ((g$ls/false$9028$F0M)
                                         (if g$ls/false$9028$F0M
                                           (apply
                                             (case-lambda
                                               ((g$x$9029$F0M
                                                  g$rest$9030$F0M
                                                  g$ls$9031$F0M)
                                                (if (g$free-id=?$7295$F0M
                                                      (g$bless$7532$F0M
                                                        g$id$9023$F0M)
                                                      g$x$9029$F0M)
                                                  (cons
                                                    g$x$9029$F0M
                                                    g$rest$9030$F0M)
                                                  (g$get-clause$8813$F0M
                                                    g$id$9023$F0M
                                                    g$ls$9031$F0M))))
                                             g$ls/false$9028$F0M)
                                           (g$syntax-violation$7680$F0M
                                             '#f
                                             '"invalid syntax"
                                             g$t$9027$F0M))))
                                      (g$syntax-dispatch$7569$F0M
                                        g$t$9027$F0M
                                        '((any . any) . any)))))
                                  g$t$9025$F0M))))
                            (g$syntax-dispatch$7569$F0M g$t$9025$F0M '()))))
                        g$ls$9024$F0M))))
                  (g$foo-rtd-code$8814$F0M
                    (case-lambda
                      ((g$name$8982$F0M
                         g$clause*$8983$F0M
                         g$parent-rtd-code$8984$F0M)
                       (letrec* ((g$convert-field-spec*$8985$F0M
                                   (case-lambda
                                     ((g$ls$9010$F0M)
                                      (list->vector
                                        (map (case-lambda
                                               ((g$x$9011$F0M)
                                                ((case-lambda
                                                   ((g$t$9012$F0M)
                                                    ((case-lambda
                                                       ((g$ls/false$9013$F0M)
                                                        (if g$ls/false$9013$F0M
                                                          (apply
                                                            (case-lambda
                                                              ((g$name$9014$F0M
                                                                 g$rest$9015$F0M)
                                                               (list
                                                                 'mutable
                                                                 g$name$9014$F0M)))
                                                            g$ls/false$9013$F0M)
                                                          ((case-lambda
                                                             ((g$t$9016$F0M)
                                                              ((case-lambda
                                                                 ((g$ls/false$9017$F0M)
                                                                  (if g$ls/false$9017$F0M
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$name$9018$F0M
                                                                           g$rest$9019$F0M)
                                                                         (list
                                                                           'immutable
                                                                           g$name$9018$F0M)))
                                                                      g$ls/false$9017$F0M)
                                                                    ((case-lambda
                                                                       ((g$t$9020$F0M)
                                                                        ((case-lambda
                                                                           ((g$ls/false$9021$F0M)
                                                                            (if g$ls/false$9021$F0M
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$name$9022$F0M)
                                                                                   (list
                                                                                     'immutable
                                                                                     g$name$9022$F0M)))
                                                                                g$ls/false$9021$F0M)
                                                                              (g$syntax-violation$7680$F0M
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$9020$F0M))))
                                                                         (g$syntax-dispatch$7569$F0M
                                                                           g$t$9020$F0M
                                                                           'any))))
                                                                     g$t$9016$F0M))))
                                                               (g$syntax-dispatch$7569$F0M
                                                                 g$t$9016$F0M
                                                                 '(#(scheme-id
                                                                     immutable)
                                                                   any
                                                                   .
                                                                   any)))))
                                                           g$t$9012$F0M))))
                                                     (g$syntax-dispatch$7569$F0M
                                                       g$t$9012$F0M
                                                       '(#(scheme-id mutable)
                                                         any
                                                         .
                                                         any)))))
                                                 g$x$9011$F0M)))
                                             g$ls$9010$F0M))))))
                         ((case-lambda
                            ((g$uid-code$8986$F0M
                               g$sealed?$8987$F0M
                               g$opaque?$8988$F0M
                               g$fields$8989$F0M)
                             (g$bless$7532$F0M
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$8982$F0M)
                                 g$parent-rtd-code$8984$F0M
                                 g$uid-code$8986$F0M
                                 g$sealed?$8987$F0M
                                 g$opaque?$8988$F0M
                                 g$fields$8989$F0M))))
                          ((case-lambda
                             ((g$t$8990$F0M)
                              ((case-lambda
                                 ((g$ls/false$8991$F0M)
                                  (if g$ls/false$8991$F0M
                                    (apply
                                      (case-lambda (() (list 'quote (gensym))))
                                      g$ls/false$8991$F0M)
                                    ((case-lambda
                                       ((g$t$8992$F0M)
                                        ((case-lambda
                                           ((g$ls/false$8993$F0M)
                                            (if g$ls/false$8993$F0M
                                              (apply
                                                (case-lambda
                                                  ((g$uid$8994$F0M)
                                                   (list
                                                     'quote
                                                     g$uid$8994$F0M)))
                                                g$ls/false$8993$F0M)
                                              ((case-lambda
                                                 ((g$t$8995$F0M)
                                                  ((case-lambda
                                                     ((g$ls/false$8996$F0M)
                                                      (if g$ls/false$8996$F0M
                                                        (apply
                                                          (case-lambda (() '#f))
                                                          g$ls/false$8996$F0M)
                                                        (g$syntax-violation$7680$F0M
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$8995$F0M))))
                                                   (g$syntax-dispatch$7569$F0M
                                                     g$t$8995$F0M
                                                     '_))))
                                               g$t$8992$F0M))))
                                         (g$syntax-dispatch$7569$F0M
                                           g$t$8992$F0M
                                           '(_ any)))))
                                     g$t$8990$F0M))))
                               (g$syntax-dispatch$7569$F0M g$t$8990$F0M '(_)))))
                           (g$get-clause$8813$F0M
                             'nongenerative
                             g$clause*$8983$F0M))
                          ((case-lambda
                             ((g$t$8997$F0M)
                              ((case-lambda
                                 ((g$ls/false$8998$F0M)
                                  (if g$ls/false$8998$F0M
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$8998$F0M)
                                    ((case-lambda
                                       ((g$t$8999$F0M)
                                        ((case-lambda
                                           ((g$ls/false$9000$F0M)
                                            (if g$ls/false$9000$F0M
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9000$F0M)
                                              (g$syntax-violation$7680$F0M
                                                '#f
                                                '"invalid syntax"
                                                g$t$8999$F0M))))
                                         (g$syntax-dispatch$7569$F0M
                                           g$t$8999$F0M
                                           '_))))
                                     g$t$8997$F0M))))
                               (g$syntax-dispatch$7569$F0M
                                 g$t$8997$F0M
                                 '(_ #(atom #t))))))
                           (g$get-clause$8813$F0M 'sealed g$clause*$8983$F0M))
                          ((case-lambda
                             ((g$t$9001$F0M)
                              ((case-lambda
                                 ((g$ls/false$9002$F0M)
                                  (if g$ls/false$9002$F0M
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9002$F0M)
                                    ((case-lambda
                                       ((g$t$9003$F0M)
                                        ((case-lambda
                                           ((g$ls/false$9004$F0M)
                                            (if g$ls/false$9004$F0M
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9004$F0M)
                                              (g$syntax-violation$7680$F0M
                                                '#f
                                                '"invalid syntax"
                                                g$t$9003$F0M))))
                                         (g$syntax-dispatch$7569$F0M
                                           g$t$9003$F0M
                                           '_))))
                                     g$t$9001$F0M))))
                               (g$syntax-dispatch$7569$F0M
                                 g$t$9001$F0M
                                 '(_ #(atom #t))))))
                           (g$get-clause$8813$F0M 'opaque g$clause*$8983$F0M))
                          ((case-lambda
                             ((g$t$9005$F0M)
                              ((case-lambda
                                 ((g$ls/false$9006$F0M)
                                  (if g$ls/false$9006$F0M
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$9007$F0M)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$8985$F0M
                                             g$field-spec*$9007$F0M))))
                                      g$ls/false$9006$F0M)
                                    ((case-lambda
                                       ((g$t$9008$F0M)
                                        ((case-lambda
                                           ((g$ls/false$9009$F0M)
                                            (if g$ls/false$9009$F0M
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$9009$F0M)
                                              (g$syntax-violation$7680$F0M
                                                '#f
                                                '"invalid syntax"
                                                g$t$9008$F0M))))
                                         (g$syntax-dispatch$7569$F0M
                                           g$t$9008$F0M
                                           '_))))
                                     g$t$9005$F0M))))
                               (g$syntax-dispatch$7569$F0M
                                 g$t$9005$F0M
                                 '(_ . each-any)))))
                           (g$get-clause$8813$F0M
                             'fields
                             g$clause*$8983$F0M)))))))
                  (g$parent-rtd-code$8815$F0M
                    (case-lambda
                      ((g$clause*$8970$F0M)
                       ((case-lambda
                          ((g$t$8971$F0M)
                           ((case-lambda
                              ((g$ls/false$8972$F0M)
                               (if g$ls/false$8972$F0M
                                 (apply
                                   (case-lambda
                                     ((g$name$8973$F0M)
                                      (list
                                        'record-type-descriptor
                                        g$name$8973$F0M)))
                                   g$ls/false$8972$F0M)
                                 ((case-lambda
                                    ((g$t$8974$F0M)
                                     ((case-lambda
                                        ((g$ls/false$8975$F0M)
                                         (if g$ls/false$8975$F0M
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$8976$F0M)
                                                    ((case-lambda
                                                       ((g$ls/false$8977$F0M)
                                                        (if g$ls/false$8977$F0M
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$8978$F0M
                                                                 g$rcd$8979$F0M)
                                                               g$rtd$8978$F0M))
                                                            g$ls/false$8977$F0M)
                                                          ((case-lambda
                                                             ((g$t$8980$F0M)
                                                              ((case-lambda
                                                                 ((g$ls/false$8981$F0M)
                                                                  (if g$ls/false$8981$F0M
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$8981$F0M)
                                                                    (g$syntax-violation$7680$F0M
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8980$F0M))))
                                                               (g$syntax-dispatch$7569$F0M
                                                                 g$t$8980$F0M
                                                                 '#(atom #f)))))
                                                           g$t$8976$F0M))))
                                                     (g$syntax-dispatch$7569$F0M
                                                       g$t$8976$F0M
                                                       '(_ any any)))))
                                                 (g$get-clause$8813$F0M
                                                   'parent-rtd
                                                   g$clause*$8970$F0M))))
                                             g$ls/false$8975$F0M)
                                           (g$syntax-violation$7680$F0M
                                             '#f
                                             '"invalid syntax"
                                             g$t$8974$F0M))))
                                      (g$syntax-dispatch$7569$F0M
                                        g$t$8974$F0M
                                        '#(atom #f)))))
                                  g$t$8971$F0M))))
                            (g$syntax-dispatch$7569$F0M
                              g$t$8971$F0M
                              '(_ any)))))
                        (g$get-clause$8813$F0M 'parent g$clause*$8970$F0M)))))
                  (g$parent-rcd-code$8816$F0M
                    (case-lambda
                      ((g$clause*$8958$F0M)
                       ((case-lambda
                          ((g$t$8959$F0M)
                           ((case-lambda
                              ((g$ls/false$8960$F0M)
                               (if g$ls/false$8960$F0M
                                 (apply
                                   (case-lambda
                                     ((g$name$8961$F0M)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$8961$F0M)))
                                   g$ls/false$8960$F0M)
                                 ((case-lambda
                                    ((g$t$8962$F0M)
                                     ((case-lambda
                                        ((g$ls/false$8963$F0M)
                                         (if g$ls/false$8963$F0M
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$8964$F0M)
                                                    ((case-lambda
                                                       ((g$ls/false$8965$F0M)
                                                        (if g$ls/false$8965$F0M
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$8966$F0M
                                                                 g$rcd$8967$F0M)
                                                               g$rcd$8967$F0M))
                                                            g$ls/false$8965$F0M)
                                                          ((case-lambda
                                                             ((g$t$8968$F0M)
                                                              ((case-lambda
                                                                 ((g$ls/false$8969$F0M)
                                                                  (if g$ls/false$8969$F0M
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$8969$F0M)
                                                                    (g$syntax-violation$7680$F0M
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8968$F0M))))
                                                               (g$syntax-dispatch$7569$F0M
                                                                 g$t$8968$F0M
                                                                 '#(atom #f)))))
                                                           g$t$8964$F0M))))
                                                     (g$syntax-dispatch$7569$F0M
                                                       g$t$8964$F0M
                                                       '(_ any any)))))
                                                 (g$get-clause$8813$F0M
                                                   'parent-rtd
                                                   g$clause*$8958$F0M))))
                                             g$ls/false$8963$F0M)
                                           (g$syntax-violation$7680$F0M
                                             '#f
                                             '"invalid syntax"
                                             g$t$8962$F0M))))
                                      (g$syntax-dispatch$7569$F0M
                                        g$t$8962$F0M
                                        '#(atom #f)))))
                                  g$t$8959$F0M))))
                            (g$syntax-dispatch$7569$F0M
                              g$t$8959$F0M
                              '(_ any)))))
                        (g$get-clause$8813$F0M 'parent g$clause*$8958$F0M)))))
                  (g$foo-rcd-code$8817$F0M
                    (case-lambda
                      ((g$clause*$8954$F0M
                         g$foo-rtd$8955$F0M
                         g$protocol$8956$F0M
                         g$parent-rcd-code$8957$F0M)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$8955$F0M
                         g$parent-rcd-code$8957$F0M
                         g$protocol$8956$F0M))))
                  (g$get-protocol-code$8818$F0M
                    (case-lambda
                      ((g$clause*$8948$F0M)
                       ((case-lambda
                          ((g$t$8949$F0M)
                           ((case-lambda
                              ((g$ls/false$8950$F0M)
                               (if g$ls/false$8950$F0M
                                 (apply
                                   (case-lambda
                                     ((g$expr$8951$F0M) g$expr$8951$F0M))
                                   g$ls/false$8950$F0M)
                                 ((case-lambda
                                    ((g$t$8952$F0M)
                                     ((case-lambda
                                        ((g$ls/false$8953$F0M)
                                         (if g$ls/false$8953$F0M
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$8953$F0M)
                                           (g$syntax-violation$7680$F0M
                                             '#f
                                             '"invalid syntax"
                                             g$t$8952$F0M))))
                                      (g$syntax-dispatch$7569$F0M
                                        g$t$8952$F0M
                                        '_))))
                                  g$t$8949$F0M))))
                            (g$syntax-dispatch$7569$F0M
                              g$t$8949$F0M
                              '(_ any)))))
                        (g$get-clause$8813$F0M 'protocol g$clause*$8948$F0M)))))
                  (g$get-fields$8819$F0M
                    (case-lambda
                      ((g$clause*$8939$F0M)
                       ((case-lambda
                          ((g$t$8940$F0M)
                           ((case-lambda
                              ((g$ls/false$8941$F0M)
                               (if g$ls/false$8941$F0M
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$8941$F0M)
                                 ((case-lambda
                                    ((g$t$8942$F0M)
                                     ((case-lambda
                                        ((g$ls/false$8943$F0M)
                                         (if g$ls/false$8943$F0M
                                           (apply
                                             (case-lambda
                                               ((g$f*$8944$F0M) g$f*$8944$F0M))
                                             g$ls/false$8943$F0M)
                                           ((case-lambda
                                              ((g$t$8945$F0M)
                                               ((case-lambda
                                                  ((g$ls/false$8946$F0M)
                                                   (if g$ls/false$8946$F0M
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$8947$F0M)
                                                          (g$get-fields$8819$F0M
                                                            g$rest$8947$F0M)))
                                                       g$ls/false$8946$F0M)
                                                     (g$syntax-violation$7680$F0M
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8945$F0M))))
                                                (g$syntax-dispatch$7569$F0M
                                                  g$t$8945$F0M
                                                  '(_ . any)))))
                                            g$t$8942$F0M))))
                                      (g$syntax-dispatch$7569$F0M
                                        g$t$8942$F0M
                                        '((#(scheme-id fields) . each-any)
                                          .
                                          _)))))
                                  g$t$8940$F0M))))
                            (g$syntax-dispatch$7569$F0M g$t$8940$F0M '()))))
                        g$clause*$8939$F0M))))
                  (g$get-mutator-indices$8820$F0M
                    (case-lambda
                      ((g$fields$8927$F0M)
                       ((letrec ((g$f$8928$F0M
                                   (case-lambda
                                     ((g$fields$8929$F0M g$i$8930$F0M)
                                      ((case-lambda
                                         ((g$t$8931$F0M)
                                          ((case-lambda
                                             ((g$ls/false$8932$F0M)
                                              (if g$ls/false$8932$F0M
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$8932$F0M)
                                                ((case-lambda
                                                   ((g$t$8933$F0M)
                                                    ((case-lambda
                                                       ((g$ls/false$8934$F0M)
                                                        (if g$ls/false$8934$F0M
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$8935$F0M)
                                                               (cons
                                                                 g$i$8930$F0M
                                                                 (g$f$8928$F0M
                                                                   g$rest$8935$F0M
                                                                   (+ g$i$8930$F0M
                                                                      '1)))))
                                                            g$ls/false$8934$F0M)
                                                          ((case-lambda
                                                             ((g$t$8936$F0M)
                                                              ((case-lambda
                                                                 ((g$ls/false$8937$F0M)
                                                                  (if g$ls/false$8937$F0M
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$8938$F0M)
                                                                         (g$f$8928$F0M
                                                                           g$rest$8938$F0M
                                                                           (+ g$i$8930$F0M
                                                                              '1))))
                                                                      g$ls/false$8937$F0M)
                                                                    (g$syntax-violation$7680$F0M
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8936$F0M))))
                                                               (g$syntax-dispatch$7569$F0M
                                                                 g$t$8936$F0M
                                                                 '(_ . any)))))
                                                           g$t$8933$F0M))))
                                                     (g$syntax-dispatch$7569$F0M
                                                       g$t$8933$F0M
                                                       '((#(scheme-id mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$8931$F0M))))
                                           (g$syntax-dispatch$7569$F0M
                                             g$t$8931$F0M
                                             '()))))
                                       g$fields$8929$F0M)))))
                          g$f$8928$F0M)
                        g$fields$8927$F0M
                        '0))))
                  (g$get-mutators$8821$F0M
                    (case-lambda
                      ((g$foo$8906$F0M g$fields$8907$F0M)
                       (letrec* ((g$gen-name$8908$F0M
                                   (case-lambda
                                     ((g$x$8926$F0M)
                                      (g$datum->syntax$7682$F0M
                                        g$foo$8906$F0M
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7683$F0M
                                                g$foo$8906$F0M))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7683$F0M
                                                g$x$8926$F0M))
                                            '"-set!")))))))
                         ((letrec ((g$f$8909$F0M
                                     (case-lambda
                                       ((g$fields$8910$F0M)
                                        ((case-lambda
                                           ((g$t$8911$F0M)
                                            ((case-lambda
                                               ((g$ls/false$8912$F0M)
                                                (if g$ls/false$8912$F0M
                                                  (apply
                                                    (case-lambda (() '()))
                                                    g$ls/false$8912$F0M)
                                                  ((case-lambda
                                                     ((g$t$8913$F0M)
                                                      ((case-lambda
                                                         ((g$ls/false$8914$F0M)
                                                          (if g$ls/false$8914$F0M
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$8915$F0M
                                                                   g$accessor$8916$F0M
                                                                   g$mutator$8917$F0M
                                                                   g$rest$8918$F0M)
                                                                 (cons
                                                                   g$mutator$8917$F0M
                                                                   (g$f$8909$F0M
                                                                     g$rest$8918$F0M))))
                                                              g$ls/false$8914$F0M)
                                                            ((case-lambda
                                                               ((g$t$8919$F0M)
                                                                ((case-lambda
                                                                   ((g$ls/false$8920$F0M)
                                                                    (if g$ls/false$8920$F0M
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$8921$F0M
                                                                             g$rest$8922$F0M)
                                                                           (cons
                                                                             (g$gen-name$8908$F0M
                                                                               g$name$8921$F0M)
                                                                             (g$f$8909$F0M
                                                                               g$rest$8922$F0M))))
                                                                        g$ls/false$8920$F0M)
                                                                      ((case-lambda
                                                                         ((g$t$8923$F0M)
                                                                          ((case-lambda
                                                                             ((g$ls/false$8924$F0M)
                                                                              (if g$ls/false$8924$F0M
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$8925$F0M)
                                                                                     (g$f$8909$F0M
                                                                                       g$rest$8925$F0M)))
                                                                                  g$ls/false$8924$F0M)
                                                                                (g$syntax-violation$7680$F0M
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$8923$F0M))))
                                                                           (g$syntax-dispatch$7569$F0M
                                                                             g$t$8923$F0M
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$8919$F0M))))
                                                                 (g$syntax-dispatch$7569$F0M
                                                                   g$t$8919$F0M
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$8913$F0M))))
                                                       (g$syntax-dispatch$7569$F0M
                                                         g$t$8913$F0M
                                                         '((#(scheme-id mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$8911$F0M))))
                                             (g$syntax-dispatch$7569$F0M
                                               g$t$8911$F0M
                                               '()))))
                                         g$fields$8910$F0M)))))
                            g$f$8909$F0M)
                          g$fields$8907$F0M)))))
                  (g$get-accessors$8822$F0M
                    (case-lambda
                      ((g$foo$8872$F0M g$fields$8873$F0M)
                       (letrec* ((g$gen-name$8874$F0M
                                   (case-lambda
                                     ((g$x$8905$F0M)
                                      (g$datum->syntax$7682$F0M
                                        g$foo$8872$F0M
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7683$F0M
                                                g$foo$8872$F0M))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7683$F0M
                                                g$x$8905$F0M)))))))))
                         (map (case-lambda
                                ((g$field$8875$F0M)
                                 ((case-lambda
                                    ((g$t$8876$F0M)
                                     ((case-lambda
                                        ((g$ls/false$8877$F0M)
                                         (if (if g$ls/false$8877$F0M
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$name$8878$F0M
                                                        g$accessor$8879$F0M
                                                        g$mutator$8880$F0M)
                                                      (g$id?$7291$F0M
                                                        g$accessor$8879$F0M)))
                                                   g$ls/false$8877$F0M))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$name$8881$F0M
                                                  g$accessor$8882$F0M
                                                  g$mutator$8883$F0M)
                                                g$accessor$8882$F0M))
                                             g$ls/false$8877$F0M)
                                           ((case-lambda
                                              ((g$t$8884$F0M)
                                               ((case-lambda
                                                  ((g$ls/false$8885$F0M)
                                                   (if (if g$ls/false$8885$F0M
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$name$8886$F0M
                                                                  g$accessor$8887$F0M)
                                                                (g$id?$7291$F0M
                                                                  g$accessor$8887$F0M)))
                                                             g$ls/false$8885$F0M))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$name$8888$F0M
                                                            g$accessor$8889$F0M)
                                                          g$accessor$8889$F0M))
                                                       g$ls/false$8885$F0M)
                                                     ((case-lambda
                                                        ((g$t$8890$F0M)
                                                         ((case-lambda
                                                            ((g$ls/false$8891$F0M)
                                                             (if (if g$ls/false$8891$F0M
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$name$8892$F0M)
                                                                          (g$id?$7291$F0M
                                                                            g$name$8892$F0M)))
                                                                       g$ls/false$8891$F0M))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$name$8893$F0M)
                                                                    (g$gen-name$8874$F0M
                                                                      g$name$8893$F0M)))
                                                                 g$ls/false$8891$F0M)
                                                               ((case-lambda
                                                                  ((g$t$8894$F0M)
                                                                   ((case-lambda
                                                                      ((g$ls/false$8895$F0M)
                                                                       (if (if g$ls/false$8895$F0M
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$name$8896$F0M)
                                                                                    (g$id?$7291$F0M
                                                                                      g$name$8896$F0M)))
                                                                                 g$ls/false$8895$F0M))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$name$8897$F0M)
                                                                              (g$gen-name$8874$F0M
                                                                                g$name$8897$F0M)))
                                                                           g$ls/false$8895$F0M)
                                                                         ((case-lambda
                                                                            ((g$t$8898$F0M)
                                                                             ((case-lambda
                                                                                ((g$ls/false$8899$F0M)
                                                                                 (if (if g$ls/false$8899$F0M
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$name$8900$F0M)
                                                                                              (g$id?$7291$F0M
                                                                                                g$name$8900$F0M)))
                                                                                           g$ls/false$8899$F0M))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$name$8901$F0M)
                                                                                        (g$gen-name$8874$F0M
                                                                                          g$name$8901$F0M)))
                                                                                     g$ls/false$8899$F0M)
                                                                                   ((case-lambda
                                                                                      ((g$t$8902$F0M)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$8903$F0M)
                                                                                           (if g$ls/false$8903$F0M
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$others$8904$F0M)
                                                                                                  (g$syntax-violation$7680$F0M
                                                                                                    '#f
                                                                                                    '"invalid field spec"
                                                                                                    g$field$8875$F0M)))
                                                                                               g$ls/false$8903$F0M)
                                                                                             (g$syntax-violation$7680$F0M
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$8902$F0M))))
                                                                                        (g$syntax-dispatch$7569$F0M
                                                                                          g$t$8902$F0M
                                                                                          'any))))
                                                                                    g$t$8898$F0M))))
                                                                              (g$syntax-dispatch$7569$F0M
                                                                                g$t$8898$F0M
                                                                                'any))))
                                                                          g$t$8894$F0M))))
                                                                    (g$syntax-dispatch$7569$F0M
                                                                      g$t$8894$F0M
                                                                      '(#(scheme-id
                                                                          immutable)
                                                                        any)))))
                                                                g$t$8890$F0M))))
                                                          (g$syntax-dispatch$7569$F0M
                                                            g$t$8890$F0M
                                                            '(#(scheme-id
                                                                mutable)
                                                              any)))))
                                                      g$t$8884$F0M))))
                                                (g$syntax-dispatch$7569$F0M
                                                  g$t$8884$F0M
                                                  '(#(scheme-id immutable)
                                                    any
                                                    any)))))
                                            g$t$8876$F0M))))
                                      (g$syntax-dispatch$7569$F0M
                                        g$t$8876$F0M
                                        '(#(scheme-id mutable) any any any)))))
                                  g$field$8875$F0M)))
                              g$fields$8873$F0M)))))
                  (g$enumerate$8823$F0M
                    (case-lambda
                      ((g$ls$8868$F0M)
                       ((letrec ((g$f$8869$F0M
                                   (case-lambda
                                     ((g$ls$8870$F0M g$i$8871$F0M)
                                      (if (null? g$ls$8870$F0M)
                                        '()
                                        (cons
                                          g$i$8871$F0M
                                          (g$f$8869$F0M
                                            (cdr g$ls$8870$F0M)
                                            (+ g$i$8871$F0M '1))))))))
                          g$f$8869$F0M)
                        g$ls$8868$F0M
                        '0))))
                  (g$do-define-record$8824$F0M
                    (case-lambda
                      ((g$namespec$8848$F0M g$clause*$8849$F0M)
                       ((case-lambda
                          ((g$foo$8850$F0M)
                           ((case-lambda
                              ((g$foo-rtd$8851$F0M)
                               ((case-lambda
                                  ((g$foo-rcd$8852$F0M)
                                   ((case-lambda
                                      ((g$protocol$8853$F0M)
                                       ((case-lambda
                                          ((g$make-foo$8854$F0M)
                                           ((case-lambda
                                              ((g$fields$8855$F0M)
                                               ((case-lambda
                                                  ((g$idx*$8856$F0M)
                                                   ((case-lambda
                                                      ((g$foo-x*$8857$F0M)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$8858$F0M)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$8859$F0M)
                                                               ((case-lambda
                                                                  ((g$foo?$8860$F0M)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$8861$F0M)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$8862$F0M)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$8863$F0M)
                                                                               ((case-lambda
                                                                                  (()
                                                                                   (g$bless$7532$F0M
                                                                                     (cons
                                                                                       'begin
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rtd$8851$F0M
                                                                                           g$foo-rtd-code$8861$F0M)
                                                                                         (cons
                                                                                           (list
                                                                                             'define
                                                                                             g$protocol$8853$F0M
                                                                                             g$protocol-code$8863$F0M)
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo-rcd$8852$F0M
                                                                                               g$foo-rcd-code$8862$F0M)
                                                                                             (cons
                                                                                               (list
                                                                                                 'define-syntax
                                                                                                 g$foo$8850$F0M
                                                                                                 (list
                                                                                                   'list
                                                                                                   ''$rtd
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rtd$8851$F0M)
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rcd$8852$F0M)))
                                                                                               (cons
                                                                                                 (list
                                                                                                   'define
                                                                                                   g$foo?$8860$F0M
                                                                                                   (list
                                                                                                     'record-predicate
                                                                                                     g$foo-rtd$8851$F0M))
                                                                                                 (cons
                                                                                                   (list
                                                                                                     'define
                                                                                                     g$make-foo$8854$F0M
                                                                                                     (list
                                                                                                       'record-constructor
                                                                                                       g$foo-rcd$8852$F0M))
                                                                                                   (append
                                                                                                     (map (case-lambda
                                                                                                            ((g$foo-x$8864$F0M
                                                                                                               g$idx$8865$F0M)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$foo-x$8864$F0M
                                                                                                               (list
                                                                                                                 'record-accessor
                                                                                                                 g$foo-rtd$8851$F0M
                                                                                                                 g$idx$8865$F0M))))
                                                                                                          g$foo-x*$8857$F0M
                                                                                                          g$idx*$8856$F0M)
                                                                                                     (map (case-lambda
                                                                                                            ((g$set-foo-x!$8866$F0M
                                                                                                               g$idx$8867$F0M)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$set-foo-x!$8866$F0M
                                                                                                               (list
                                                                                                                 'record-mutator
                                                                                                                 g$foo-rtd$8851$F0M
                                                                                                                 g$idx$8867$F0M))))
                                                                                                          g$set-foo-x!*$8858$F0M
                                                                                                          g$set-foo-idx*$8859$F0M)))))))))))))))
                                                                            (g$get-protocol-code$8818$F0M
                                                                              g$clause*$8849$F0M))))
                                                                        (g$foo-rcd-code$8817$F0M
                                                                          g$clause*$8849$F0M
                                                                          g$foo-rtd$8851$F0M
                                                                          g$protocol$8853$F0M
                                                                          (g$parent-rcd-code$8816$F0M
                                                                            g$clause*$8849$F0M)))))
                                                                    (g$foo-rtd-code$8814$F0M
                                                                      g$foo$8850$F0M
                                                                      g$clause*$8849$F0M
                                                                      (g$parent-rtd-code$8815$F0M
                                                                        g$clause*$8849$F0M)))))
                                                                (g$get-record-predicate-name$8812$F0M
                                                                  g$namespec$8848$F0M))))
                                                            (g$get-mutator-indices$8820$F0M
                                                              g$fields$8855$F0M))))
                                                        (g$get-mutators$8821$F0M
                                                          g$foo$8850$F0M
                                                          g$fields$8855$F0M))))
                                                    (g$get-accessors$8822$F0M
                                                      g$foo$8850$F0M
                                                      g$fields$8855$F0M))))
                                                (g$enumerate$8823$F0M
                                                  g$fields$8855$F0M))))
                                            (g$get-fields$8819$F0M
                                              g$clause*$8849$F0M))))
                                        (g$get-record-constructor-name$8811$F0M
                                          g$namespec$8848$F0M))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$8810$F0M g$namespec$8848$F0M)))))
                  (g$verify-clauses$8825$F0M
                    (case-lambda
                      ((g$x$8830$F0M g$cls*$8831$F0M)
                       (letrec* ((g$valid-kwds$8832$F0M
                                   (map g$bless$7532$F0M
                                        '(fields
                                           parent
                                           parent-rtd
                                           protocol
                                           sealed
                                           opaque
                                           nongenerative)))
                                 (g$free-id-member?$8833$F0M
                                   (case-lambda
                                     ((g$x$8845$F0M g$ls$8846$F0M)
                                      (if (pair? g$ls$8846$F0M)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$8847$F0M)
                                              (if g$t$8847$F0M
                                                g$t$8847$F0M
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$8833$F0M
                                                    g$x$8845$F0M
                                                    (cdr g$ls$8846$F0M))))))
                                           (g$free-id=?$7295$F0M
                                             g$x$8845$F0M
                                             (car g$ls$8846$F0M))))
                                        '#f)))))
                         ((letrec ((g$f$8834$F0M
                                     (case-lambda
                                       ((g$cls*$8835$F0M g$seen*$8836$F0M)
                                        (if (not (null? g$cls*$8835$F0M))
                                          ((case-lambda
                                             ((g$t$8837$F0M)
                                              ((case-lambda
                                                 ((g$ls/false$8838$F0M)
                                                  (if g$ls/false$8838$F0M
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$8839$F0M
                                                           g$rest$8840$F0M)
                                                         (if ((case-lambda
                                                                ((g$t$8841$F0M)
                                                                 (if g$t$8841$F0M
                                                                   g$t$8841$F0M
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$8833$F0M
                                                                            g$kwd$8839$F0M
                                                                            g$valid-kwds$8832$F0M))))))
                                                              (not (g$id?$7291$F0M
                                                                     g$kwd$8839$F0M)))
                                                           (g$syntax-violation$7680$F0M
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$8839$F0M)
                                                           (if (g$bound-id-member?$7298$F0M
                                                                 g$kwd$8839$F0M
                                                                 g$seen*$8836$F0M)
                                                             (g$syntax-violation$7680$F0M
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$8830$F0M
                                                               g$kwd$8839$F0M)
                                                             (g$f$8834$F0M
                                                               (cdr g$cls*$8835$F0M)
                                                               (cons
                                                                 g$kwd$8839$F0M
                                                                 g$seen*$8836$F0M))))))
                                                      g$ls/false$8838$F0M)
                                                    ((case-lambda
                                                       ((g$t$8842$F0M)
                                                        ((case-lambda
                                                           ((g$ls/false$8843$F0M)
                                                            (if g$ls/false$8843$F0M
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$8844$F0M)
                                                                   (g$syntax-violation$7680$F0M
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$8844$F0M)))
                                                                g$ls/false$8843$F0M)
                                                              (g$syntax-violation$7680$F0M
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8842$F0M))))
                                                         (g$syntax-dispatch$7569$F0M
                                                           g$t$8842$F0M
                                                           'any))))
                                                     g$t$8837$F0M))))
                                               (g$syntax-dispatch$7569$F0M
                                                 g$t$8837$F0M
                                                 '(any . any)))))
                                           (car g$cls*$8835$F0M))
                                          (void))))))
                            g$f$8834$F0M)
                          g$cls*$8831$F0M
                          '()))))))
          ((case-lambda
             ((g$t$8826$F0M)
              ((case-lambda
                 ((g$ls/false$8827$F0M)
                  (if g$ls/false$8827$F0M
                    (apply
                      (case-lambda
                        ((g$namespec$8828$F0M g$clause*$8829$F0M)
                         (begin
                           (g$verify-clauses$8825$F0M
                             g$x$8808$F0M
                             g$clause*$8829$F0M)
                           (g$do-define-record$8824$F0M
                             g$namespec$8828$F0M
                             g$clause*$8829$F0M))))
                      g$ls/false$8827$F0M)
                    (g$syntax-violation$7680$F0M
                      '#f
                      '"invalid syntax"
                      g$t$8826$F0M))))
               (g$syntax-dispatch$7569$F0M g$t$8826$F0M '(_ any . each-any)))))
           g$x$8808$F0M)))))
   (g$define-condition-type-macro$7564$F0M
     g$define-condition-type-macro$11055$F0M
     (case-lambda
       ((g$x$9064$F0M)
        (letrec* ((g$mkname$9065$F0M
                    (case-lambda
                      ((g$name$9088$F0M g$suffix$9089$F0M)
                       (g$datum->syntax$7682$F0M
                         g$name$9088$F0M
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$7683$F0M g$name$9088$F0M))
                             g$suffix$9089$F0M)))))))
          ((case-lambda
             ((g$t$9066$F0M)
              ((case-lambda
                 ((g$ls/false$9067$F0M)
                  (if (if g$ls/false$9067$F0M
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$9068$F0M
                                 g$name$9069$F0M
                                 g$super$9070$F0M
                                 g$constructor$9071$F0M
                                 g$predicate$9072$F0M
                                 g$field*$9073$F0M
                                 g$accessor*$9074$F0M)
                               (if (g$id?$7291$F0M g$name$9069$F0M)
                                 (if (g$id?$7291$F0M g$super$9070$F0M)
                                   (if (g$id?$7291$F0M g$constructor$9071$F0M)
                                     (if (g$id?$7291$F0M g$predicate$9072$F0M)
                                       (if (g$for-all$5014$F0M
                                             g$id?$7291$F0M
                                             g$field*$9073$F0M)
                                         (begin
                                           '#f
                                           (g$for-all$5014$F0M
                                             g$id?$7291$F0M
                                             g$accessor*$9074$F0M))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$9067$F0M))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$9075$F0M
                           g$name$9076$F0M
                           g$super$9077$F0M
                           g$constructor$9078$F0M
                           g$predicate$9079$F0M
                           g$field*$9080$F0M
                           g$accessor*$9081$F0M)
                         ((case-lambda
                            ((g$aux-accessor*$9082$F0M)
                             (g$bless$7532$F0M
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$9076$F0M
                                         g$constructor$9078$F0M
                                         (gensym))
                                       (cons
                                         (list 'parent g$super$9077$F0M)
                                         (cons
                                           (cons
                                             'fields
                                             (map (case-lambda
                                                    ((g$field$9083$F0M
                                                       g$aux$9084$F0M)
                                                     (list
                                                       'immutable
                                                       g$field$9083$F0M
                                                       g$aux$9084$F0M)))
                                                  g$field*$9080$F0M
                                                  g$aux-accessor*$9082$F0M))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$9079$F0M
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$9076$F0M)))
                                     (map (case-lambda
                                            ((g$accessor$9085$F0M
                                               g$aux$9086$F0M)
                                             (list
                                               'define
                                               g$accessor$9085$F0M
                                               (list
                                                 'condition-accessor
                                                 (list
                                                   'record-type-descriptor
                                                   g$name$9076$F0M)
                                                 g$aux$9086$F0M))))
                                          g$accessor*$9081$F0M
                                          g$aux-accessor*$9082$F0M)))))))
                          (map (case-lambda ((g$x$9087$F0M) (gensym)))
                               g$accessor*$9081$F0M))))
                      g$ls/false$9067$F0M)
                    (g$syntax-violation$7680$F0M
                      '#f
                      '"invalid syntax"
                      g$t$9066$F0M))))
               (g$syntax-dispatch$7569$F0M
                 g$t$9066$F0M
                 '(any any any any any . #(each (any any)))))))
           g$x$9064$F0M)))))
   (g$incorrect-usage-macro$7565$F0M
     g$incorrect-usage-macro$11056$F0M
     (case-lambda
       ((g$e$9090$F0M)
        (g$syntax-violation$7680$F0M
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$9090$F0M))))
   (g$parameterize-macro$7566$F0M
     g$parameterize-macro$11057$F0M
     (case-lambda
       ((g$e$9091$F0M)
        ((case-lambda
           ((g$t$9092$F0M)
            ((case-lambda
               ((g$ls/false$9093$F0M)
                (if g$ls/false$9093$F0M
                  (apply
                    (case-lambda
                      ((g$b$9094$F0M g$b*$9095$F0M)
                       (g$bless$7532$F0M
                         (cons
                           'let
                           (cons '() (cons g$b$9094$F0M g$b*$9095$F0M))))))
                    g$ls/false$9093$F0M)
                  ((case-lambda
                     ((g$t$9096$F0M)
                      ((case-lambda
                         ((g$ls/false$9097$F0M)
                          (if g$ls/false$9097$F0M
                            (apply
                              (case-lambda
                                ((g$olhs*$9098$F0M
                                   g$orhs*$9099$F0M
                                   g$b$9100$F0M
                                   g$b*$9101$F0M)
                                 ((case-lambda
                                    ((g$lhs*$9102$F0M g$rhs*$9103$F0M)
                                     (g$bless$7532$F0M
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$9102$F0M
                                             g$rhs*$9103$F0M)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (map (case-lambda
                                                            ((g$lhs$9104$F0M
                                                               g$rhs$9105$F0M)
                                                             (list
                                                               'let
                                                               (list
                                                                 (list
                                                                   't
                                                                   (list
                                                                     g$lhs$9104$F0M)))
                                                               (list
                                                                 g$lhs$9104$F0M
                                                                 g$rhs$9105$F0M)
                                                               (cons
                                                                 'set!
                                                                 (cons
                                                                   g$rhs$9105$F0M
                                                                   '(t))))))
                                                          g$lhs*$9102$F0M
                                                          g$rhs*$9103$F0M)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$9100$F0M
                                                         g$b*$9101$F0M)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$9098$F0M
                                           g$orhs*$9099$F0M)))))
                                  (g$generate-temporaries$7670$F0M
                                    g$olhs*$9098$F0M)
                                  (g$generate-temporaries$7670$F0M
                                    g$orhs*$9099$F0M))))
                              g$ls/false$9097$F0M)
                            (g$syntax-violation$7680$F0M
                              '#f
                              '"invalid syntax"
                              g$t$9096$F0M))))
                       (g$syntax-dispatch$7569$F0M
                         g$t$9096$F0M
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$9092$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$9092$F0M '(_ () any . each-any)))))
         g$e$9091$F0M))))
   (g$foreign-call-transformer$7567$F0M
     g$foreign-call-transformer$11058$F0M
     (case-lambda
       ((g$e$9106$F0M g$r$9107$F0M g$mr$9108$F0M)
        ((case-lambda
           ((g$t$9109$F0M)
            ((case-lambda
               ((g$ls/false$9110$F0M)
                (if g$ls/false$9110$F0M
                  (apply
                    (case-lambda
                      ((g$name$9111$F0M g$arg*$9112$F0M)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$7587$F0M
                             g$name$9111$F0M
                             g$r$9107$F0M
                             g$mr$9108$F0M)
                           (g$chi-expr*$7585$F0M
                             g$arg*$9112$F0M
                             g$r$9107$F0M
                             g$mr$9108$F0M)))))
                    g$ls/false$9110$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$9109$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$9109$F0M '(_ any . each-any)))))
         g$e$9106$F0M))))
   (g$convert-pattern$7568$F0M
     g$convert-pattern$11059$F0M
     (case-lambda
       ((g$pattern$9113$F0M g$keys$9114$F0M)
        (letrec* ((g$cvt*$9115$F0M
                    (case-lambda
                      ((g$p*$9195$F0M g$n$9196$F0M g$ids$9197$F0M)
                       (if (null? g$p*$9195$F0M)
                         (values '() g$ids$9197$F0M)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$9115$F0M
                                (cdr g$p*$9195$F0M)
                                g$n$9196$F0M
                                g$ids$9197$F0M)))
                           (case-lambda
                             ((g$y$9200$F0M g$ids$9201$F0M)
                              ((case-lambda
                                 ((g$ids$9202$F0M g$y$9203$F0M)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$9116$F0M
                                         (car g$p*$9195$F0M)
                                         g$n$9196$F0M
                                         g$ids$9202$F0M)))
                                    (case-lambda
                                      ((g$x$9206$F0M g$ids$9207$F0M)
                                       ((case-lambda
                                          ((g$ids$9208$F0M g$x$9209$F0M)
                                           (values
                                             (cons g$x$9209$F0M g$y$9203$F0M)
                                             g$ids$9208$F0M)))
                                        g$ids$9207$F0M
                                        g$x$9206$F0M))))))
                               g$ids$9201$F0M
                               g$y$9200$F0M))))))))
                  (g$cvt$9116$F0M
                    (case-lambda
                      ((g$p$9117$F0M g$n$9118$F0M g$ids$9119$F0M)
                       ((case-lambda
                          ((g$t$9120$F0M)
                           ((case-lambda
                              ((g$ls/false$9121$F0M)
                               (if (if g$ls/false$9121$F0M
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$9122$F0M)
                                            (g$id?$7291$F0M g$id$9122$F0M)))
                                         g$ls/false$9121$F0M))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$9123$F0M)
                                      (if (g$bound-id-member?$7298$F0M
                                            g$p$9117$F0M
                                            g$keys$9114$F0M)
                                        (values
                                          (vector 'free-id g$p$9117$F0M)
                                          g$ids$9119$F0M)
                                        (if (g$free-id=?$7295$F0M
                                              g$p$9117$F0M
                                              (g$scheme-stx$7512$F0M '_))
                                          (values '_ g$ids$9119$F0M)
                                          (values
                                            'any
                                            (cons
                                              (cons g$p$9117$F0M g$n$9118$F0M)
                                              g$ids$9119$F0M))))))
                                   g$ls/false$9121$F0M)
                                 ((case-lambda
                                    ((g$t$9124$F0M)
                                     ((case-lambda
                                        ((g$ls/false$9125$F0M)
                                         (if (if g$ls/false$9125$F0M
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9126$F0M
                                                        g$dots$9127$F0M)
                                                      (g$ellipsis?$7570$F0M
                                                        g$dots$9127$F0M)))
                                                   g$ls/false$9125$F0M))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$9128$F0M g$dots$9129$F0M)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$9116$F0M
                                                       g$p$9128$F0M
                                                       (+ g$n$9118$F0M '1)
                                                       g$ids$9119$F0M)))
                                                  (case-lambda
                                                    ((g$p$9132$F0M
                                                       g$ids$9133$F0M)
                                                     ((case-lambda
                                                        ((g$ids$9134$F0M
                                                           g$p$9135$F0M)
                                                         (values
                                                           (if (eq? g$p$9135$F0M
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$9135$F0M))
                                                           g$ids$9134$F0M)))
                                                      g$ids$9133$F0M
                                                      g$p$9132$F0M))))))
                                             g$ls/false$9125$F0M)
                                           ((case-lambda
                                              ((g$t$9136$F0M)
                                               ((case-lambda
                                                  ((g$ls/false$9137$F0M)
                                                   (if (if g$ls/false$9137$F0M
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$9138$F0M
                                                                  g$dots$9139$F0M
                                                                  g$ys$9140$F0M
                                                                  g$z$9141$F0M)
                                                                (g$ellipsis?$7570$F0M
                                                                  g$dots$9139$F0M)))
                                                             g$ls/false$9137$F0M))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9142$F0M
                                                            g$dots$9143$F0M
                                                            g$ys$9144$F0M
                                                            g$z$9145$F0M)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$9116$F0M
                                                                 g$z$9145$F0M
                                                                 g$n$9118$F0M
                                                                 g$ids$9119$F0M)))
                                                            (case-lambda
                                                              ((g$z$9148$F0M
                                                                 g$ids$9149$F0M)
                                                               ((case-lambda
                                                                  ((g$ids$9150$F0M
                                                                     g$z$9151$F0M)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$9115$F0M
                                                                          g$ys$9144$F0M
                                                                          g$n$9118$F0M
                                                                          g$ids$9150$F0M)))
                                                                     (case-lambda
                                                                       ((g$ys$9154$F0M
                                                                          g$ids$9155$F0M)
                                                                        ((case-lambda
                                                                           ((g$ids$9156$F0M
                                                                              g$ys$9157$F0M)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$9116$F0M
                                                                                   g$x$9142$F0M
                                                                                   (+ g$n$9118$F0M
                                                                                      '1)
                                                                                   g$ids$9156$F0M)))
                                                                              (case-lambda
                                                                                ((g$x$9160$F0M
                                                                                   g$ids$9161$F0M)
                                                                                 ((case-lambda
                                                                                    ((g$ids$9162$F0M
                                                                                       g$x$9163$F0M)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$9163$F0M
                                                                                         (reverse
                                                                                           g$ys$9157$F0M)
                                                                                         g$z$9151$F0M)
                                                                                       g$ids$9162$F0M)))
                                                                                  g$ids$9161$F0M
                                                                                  g$x$9160$F0M))))))
                                                                         g$ids$9155$F0M
                                                                         g$ys$9154$F0M))))))
                                                                g$ids$9149$F0M
                                                                g$z$9148$F0M))))))
                                                       g$ls/false$9137$F0M)
                                                     ((case-lambda
                                                        ((g$t$9164$F0M)
                                                         ((case-lambda
                                                            ((g$ls/false$9165$F0M)
                                                             (if g$ls/false$9165$F0M
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$9166$F0M
                                                                      g$y$9167$F0M)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$9116$F0M
                                                                           g$y$9167$F0M
                                                                           g$n$9118$F0M
                                                                           g$ids$9119$F0M)))
                                                                      (case-lambda
                                                                        ((g$y$9170$F0M
                                                                           g$ids$9171$F0M)
                                                                         ((case-lambda
                                                                            ((g$ids$9172$F0M
                                                                               g$y$9173$F0M)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$9116$F0M
                                                                                    g$x$9166$F0M
                                                                                    g$n$9118$F0M
                                                                                    g$ids$9172$F0M)))
                                                                               (case-lambda
                                                                                 ((g$x$9176$F0M
                                                                                    g$ids$9177$F0M)
                                                                                  ((case-lambda
                                                                                     ((g$ids$9178$F0M
                                                                                        g$x$9179$F0M)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$9179$F0M
                                                                                          g$y$9173$F0M)
                                                                                        g$ids$9178$F0M)))
                                                                                   g$ids$9177$F0M
                                                                                   g$x$9176$F0M))))))
                                                                          g$ids$9171$F0M
                                                                          g$y$9170$F0M))))))
                                                                 g$ls/false$9165$F0M)
                                                               ((case-lambda
                                                                  ((g$t$9180$F0M)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9181$F0M)
                                                                       (if g$ls/false$9181$F0M
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$9119$F0M)))
                                                                           g$ls/false$9181$F0M)
                                                                         ((case-lambda
                                                                            ((g$t$9182$F0M)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9183$F0M)
                                                                                 (if (if g$ls/false$9183$F0M
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$9184$F0M)
                                                                                              (not (g$stx?$7263$F0M
                                                                                                     g$p$9184$F0M))))
                                                                                           g$ls/false$9183$F0M))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$9185$F0M)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$9116$F0M
                                                                                               g$p$9185$F0M
                                                                                               g$n$9118$F0M
                                                                                               g$ids$9119$F0M)))
                                                                                          (case-lambda
                                                                                            ((g$p$9188$F0M
                                                                                               g$ids$9189$F0M)
                                                                                             ((case-lambda
                                                                                                ((g$ids$9190$F0M
                                                                                                   g$p$9191$F0M)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$9191$F0M)
                                                                                                   g$ids$9190$F0M)))
                                                                                              g$ids$9189$F0M
                                                                                              g$p$9188$F0M))))))
                                                                                     g$ls/false$9183$F0M)
                                                                                   ((case-lambda
                                                                                      ((g$t$9192$F0M)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9193$F0M)
                                                                                           (if g$ls/false$9193$F0M
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$9194$F0M)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$7302$F0M
                                                                                                        g$datum$9194$F0M))
                                                                                                    g$ids$9119$F0M)))
                                                                                               g$ls/false$9193$F0M)
                                                                                             (g$syntax-violation$7680$F0M
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$9192$F0M))))
                                                                                        (g$syntax-dispatch$7569$F0M
                                                                                          g$t$9192$F0M
                                                                                          'any))))
                                                                                    g$t$9182$F0M))))
                                                                              (g$syntax-dispatch$7569$F0M
                                                                                g$t$9182$F0M
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$9180$F0M))))
                                                                    (g$syntax-dispatch$7569$F0M
                                                                      g$t$9180$F0M
                                                                      '()))))
                                                                g$t$9164$F0M))))
                                                          (g$syntax-dispatch$7569$F0M
                                                            g$t$9164$F0M
                                                            '(any . any)))))
                                                      g$t$9136$F0M))))
                                                (g$syntax-dispatch$7569$F0M
                                                  g$t$9136$F0M
                                                  '(any any
                                                        .
                                                        #(each+ any () any))))))
                                            g$t$9124$F0M))))
                                      (g$syntax-dispatch$7569$F0M
                                        g$t$9124$F0M
                                        '(any any)))))
                                  g$t$9120$F0M))))
                            (g$syntax-dispatch$7569$F0M g$t$9120$F0M 'any))))
                        g$p$9117$F0M)))))
          (g$cvt$9116$F0M g$pattern$9113$F0M '0 '())))))
   (g$syntax-dispatch$7569$F0M
     g$syntax-dispatch$11060$F0M
     ((case-lambda
        (()
         (letrec* ((g$stx^$9210$F0M
                     (case-lambda
                       ((g$e$9320$F0M
                          g$m*$9321$F0M
                          g$s*$9322$F0M
                          g$ae*$9323$F0M)
                        (if (if (null? g$m*$9321$F0M)
                              (if (null? g$s*$9322$F0M)
                                (begin '#f (null? g$ae*$9323$F0M))
                                '#f)
                              '#f)
                          g$e$9320$F0M
                          (g$mkstx$7279$F0M
                            g$e$9320$F0M
                            g$m*$9321$F0M
                            g$s*$9322$F0M
                            g$ae*$9323$F0M)))))
                   (g$match-each$9211$F0M
                     (case-lambda
                       ((g$e$9304$F0M
                          g$p$9305$F0M
                          g$m*$9306$F0M
                          g$s*$9307$F0M
                          g$ae*$9308$F0M)
                        (if (pair? g$e$9304$F0M)
                          ((case-lambda
                             ((g$first$9309$F0M)
                              (if g$first$9309$F0M
                                (begin
                                  '#f
                                  ((case-lambda
                                     ((g$rest$9310$F0M)
                                      (if g$rest$9310$F0M
                                        (begin
                                          '#f
                                          (cons
                                            g$first$9309$F0M
                                            g$rest$9310$F0M))
                                        '#f)))
                                   (g$match-each$9211$F0M
                                     (cdr g$e$9304$F0M)
                                     g$p$9305$F0M
                                     g$m*$9306$F0M
                                     g$s*$9307$F0M
                                     g$ae*$9308$F0M)))
                                '#f)))
                           (g$match$9217$F0M
                             (car g$e$9304$F0M)
                             g$p$9305$F0M
                             g$m*$9306$F0M
                             g$s*$9307$F0M
                             g$ae*$9308$F0M
                             '()))
                          (if (null? g$e$9304$F0M)
                            '()
                            (if (g$stx?$7263$F0M g$e$9304$F0M)
                              (if (not (g$top-marked?$7229$F0M g$m*$9306$F0M))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7278$F0M
                                         g$m*$9306$F0M
                                         g$s*$9307$F0M
                                         g$ae*$9308$F0M
                                         g$e$9304$F0M)))
                                    (case-lambda
                                      ((g$m*$9314$F0M
                                         g$s*$9315$F0M
                                         g$ae*$9316$F0M)
                                       ((case-lambda
                                          ((g$ae*$9317$F0M
                                             g$s*$9318$F0M
                                             g$m*$9319$F0M)
                                           (g$match-each$9211$F0M
                                             (g$stx-expr$7265$F0M g$e$9304$F0M)
                                             g$p$9305$F0M
                                             g$m*$9319$F0M
                                             g$s*$9318$F0M
                                             g$ae*$9317$F0M)))
                                        g$ae*$9316$F0M
                                        g$s*$9315$F0M
                                        g$m*$9314$F0M)))))
                                '#f)
                              (if (annotation? g$e$9304$F0M)
                                (g$match-each$9211$F0M
                                  (annotation-expression g$e$9304$F0M)
                                  g$p$9305$F0M
                                  g$m*$9306$F0M
                                  g$s*$9307$F0M
                                  g$ae*$9308$F0M)
                                '#f)))))))
                   (g$match-each+$9212$F0M
                     (case-lambda
                       ((g$e$9272$F0M
                          g$x-pat$9273$F0M
                          g$y-pat$9274$F0M
                          g$z-pat$9275$F0M
                          g$m*$9276$F0M
                          g$s*$9277$F0M
                          g$ae*$9278$F0M
                          g$r$9279$F0M)
                        ((letrec ((g$f$9280$F0M
                                    (case-lambda
                                      ((g$e$9281$F0M
                                         g$m*$9282$F0M
                                         g$s*$9283$F0M
                                         g$ae*$9284$F0M)
                                       (if (pair? g$e$9281$F0M)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$f$9280$F0M
                                                (cdr g$e$9281$F0M)
                                                g$m*$9282$F0M
                                                g$s*$9283$F0M
                                                g$ae*$9284$F0M)))
                                           (case-lambda
                                             ((g$xr*$9288$F0M
                                                g$y-pat$9289$F0M
                                                g$r$9290$F0M)
                                              ((case-lambda
                                                 ((g$r$9291$F0M
                                                    g$y-pat$9292$F0M
                                                    g$xr*$9293$F0M)
                                                  (if g$r$9291$F0M
                                                    (if (null? g$y-pat$9292$F0M)
                                                      ((case-lambda
                                                         ((g$xr$9294$F0M)
                                                          (if g$xr$9294$F0M
                                                            (values
                                                              (cons
                                                                g$xr$9294$F0M
                                                                g$xr*$9293$F0M)
                                                              g$y-pat$9292$F0M
                                                              g$r$9291$F0M)
                                                            (values
                                                              '#f
                                                              '#f
                                                              '#f))))
                                                       (g$match$9217$F0M
                                                         (car g$e$9281$F0M)
                                                         g$x-pat$9273$F0M
                                                         g$m*$9282$F0M
                                                         g$s*$9283$F0M
                                                         g$ae*$9284$F0M
                                                         '()))
                                                      (values
                                                        '()
                                                        (cdr g$y-pat$9292$F0M)
                                                        (g$match$9217$F0M
                                                          (car g$e$9281$F0M)
                                                          (car g$y-pat$9292$F0M)
                                                          g$m*$9282$F0M
                                                          g$s*$9283$F0M
                                                          g$ae*$9284$F0M
                                                          g$r$9291$F0M)))
                                                    (values '#f '#f '#f))))
                                               g$r$9290$F0M
                                               g$y-pat$9289$F0M
                                               g$xr*$9288$F0M))))
                                         (if (g$stx?$7263$F0M g$e$9281$F0M)
                                           (if (g$top-marked?$7229$F0M
                                                 g$m*$9282$F0M)
                                             (values
                                               '()
                                               g$y-pat$9274$F0M
                                               (g$match$9217$F0M
                                                 g$e$9281$F0M
                                                 g$z-pat$9275$F0M
                                                 g$m*$9282$F0M
                                                 g$s*$9283$F0M
                                                 g$ae*$9284$F0M
                                                 g$r$9279$F0M))
                                             (call-with-values
                                               (case-lambda
                                                 (()
                                                  (g$join-wraps$7278$F0M
                                                    g$m*$9282$F0M
                                                    g$s*$9283$F0M
                                                    g$ae*$9284$F0M
                                                    g$e$9281$F0M)))
                                               (case-lambda
                                                 ((g$m*$9298$F0M
                                                    g$s*$9299$F0M
                                                    g$ae*$9300$F0M)
                                                  ((case-lambda
                                                     ((g$ae*$9301$F0M
                                                        g$s*$9302$F0M
                                                        g$m*$9303$F0M)
                                                      (g$f$9280$F0M
                                                        (g$stx-expr$7265$F0M
                                                          g$e$9281$F0M)
                                                        g$m*$9303$F0M
                                                        g$s*$9302$F0M
                                                        g$ae*$9301$F0M)))
                                                   g$ae*$9300$F0M
                                                   g$s*$9299$F0M
                                                   g$m*$9298$F0M)))))
                                           (if (annotation? g$e$9281$F0M)
                                             (g$f$9280$F0M
                                               (annotation-expression
                                                 g$e$9281$F0M)
                                               g$m*$9282$F0M
                                               g$s*$9283$F0M
                                               g$ae*$9284$F0M)
                                             (values
                                               '()
                                               g$y-pat$9274$F0M
                                               (g$match$9217$F0M
                                                 g$e$9281$F0M
                                                 g$z-pat$9275$F0M
                                                 g$m*$9282$F0M
                                                 g$s*$9283$F0M
                                                 g$ae*$9284$F0M
                                                 g$r$9279$F0M)))))))))
                           g$f$9280$F0M)
                         g$e$9272$F0M
                         g$m*$9276$F0M
                         g$s*$9277$F0M
                         g$ae*$9278$F0M))))
                   (g$match-each-any$9213$F0M
                     (case-lambda
                       ((g$e$9258$F0M
                          g$m*$9259$F0M
                          g$s*$9260$F0M
                          g$ae*$9261$F0M)
                        (if (pair? g$e$9258$F0M)
                          ((case-lambda
                             ((g$l$9262$F0M)
                              (if g$l$9262$F0M
                                (begin
                                  '#f
                                  (cons
                                    (g$stx^$9210$F0M
                                      (car g$e$9258$F0M)
                                      g$m*$9259$F0M
                                      g$s*$9260$F0M
                                      g$ae*$9261$F0M)
                                    g$l$9262$F0M))
                                '#f)))
                           (g$match-each-any$9213$F0M
                             (cdr g$e$9258$F0M)
                             g$m*$9259$F0M
                             g$s*$9260$F0M
                             g$ae*$9261$F0M))
                          (if (null? g$e$9258$F0M)
                            '()
                            (if (g$stx?$7263$F0M g$e$9258$F0M)
                              (if (not (g$top-marked?$7229$F0M g$m*$9259$F0M))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7278$F0M
                                         g$m*$9259$F0M
                                         g$s*$9260$F0M
                                         g$ae*$9261$F0M
                                         g$e$9258$F0M)))
                                    (case-lambda
                                      ((g$m*$9266$F0M
                                         g$s*$9267$F0M
                                         g$ae*$9268$F0M)
                                       ((case-lambda
                                          ((g$ae*$9269$F0M
                                             g$s*$9270$F0M
                                             g$m*$9271$F0M)
                                           (g$match-each-any$9213$F0M
                                             (g$stx-expr$7265$F0M g$e$9258$F0M)
                                             g$m*$9271$F0M
                                             g$s*$9270$F0M
                                             g$ae*$9269$F0M)))
                                        g$ae*$9268$F0M
                                        g$s*$9267$F0M
                                        g$m*$9266$F0M)))))
                                '#f)
                              (if (annotation? g$e$9258$F0M)
                                (g$match-each-any$9213$F0M
                                  (annotation-expression g$e$9258$F0M)
                                  g$m*$9259$F0M
                                  g$s*$9260$F0M
                                  g$ae*$9261$F0M)
                                '#f)))))))
                   (g$match-empty$9214$F0M
                     (case-lambda
                       ((g$p$9255$F0M g$r$9256$F0M)
                        (if (null? g$p$9255$F0M)
                          g$r$9256$F0M
                          (if (eq? g$p$9255$F0M '_)
                            g$r$9256$F0M
                            (if (eq? g$p$9255$F0M 'any)
                              (cons '() g$r$9256$F0M)
                              (if (pair? g$p$9255$F0M)
                                (g$match-empty$9214$F0M
                                  (car g$p$9255$F0M)
                                  (g$match-empty$9214$F0M
                                    (cdr g$p$9255$F0M)
                                    g$r$9256$F0M))
                                (if (eq? g$p$9255$F0M 'each-any)
                                  (cons '() g$r$9256$F0M)
                                  ((case-lambda
                                     ((g$t$9257$F0M)
                                      (if (g$memv$5009$F0M g$t$9257$F0M '(each))
                                        (g$match-empty$9214$F0M
                                          (vector-ref g$p$9255$F0M '1)
                                          g$r$9256$F0M)
                                        (if (g$memv$5009$F0M
                                              g$t$9257$F0M
                                              '(each+))
                                          (g$match-empty$9214$F0M
                                            (vector-ref g$p$9255$F0M '1)
                                            (g$match-empty$9214$F0M
                                              (reverse
                                                (vector-ref g$p$9255$F0M '2))
                                              (g$match-empty$9214$F0M
                                                (vector-ref g$p$9255$F0M '3)
                                                g$r$9256$F0M)))
                                          (if (g$memv$5009$F0M
                                                g$t$9257$F0M
                                                '(free-id atom))
                                            g$r$9256$F0M
                                            (if (g$memv$5009$F0M
                                                  g$t$9257$F0M
                                                  '(scheme-id atom))
                                              g$r$9256$F0M
                                              (if (g$memv$5009$F0M
                                                    g$t$9257$F0M
                                                    '(vector))
                                                (g$match-empty$9214$F0M
                                                  (vector-ref g$p$9255$F0M '1)
                                                  g$r$9256$F0M)
                                                (assertion-violation
                                                  'syntax-dispatch
                                                  '"invalid pattern"
                                                  g$p$9255$F0M))))))))
                                   (vector-ref g$p$9255$F0M '0))))))))))
                   (g$combine$9215$F0M
                     (case-lambda
                       ((g$r*$9253$F0M g$r$9254$F0M)
                        (if (null? (car g$r*$9253$F0M))
                          g$r$9254$F0M
                          (cons
                            (map car g$r*$9253$F0M)
                            (g$combine$9215$F0M
                              (map cdr g$r*$9253$F0M)
                              g$r$9254$F0M))))))
                   (g$match*$9216$F0M
                     (case-lambda
                       ((g$e$9235$F0M
                          g$p$9236$F0M
                          g$m*$9237$F0M
                          g$s*$9238$F0M
                          g$ae*$9239$F0M
                          g$r$9240$F0M)
                        (if (null? g$p$9236$F0M)
                          (if (null? g$e$9235$F0M) (begin '#f g$r$9240$F0M) '#f)
                          (if (pair? g$p$9236$F0M)
                            (if (pair? g$e$9235$F0M)
                              (begin
                                '#f
                                (g$match$9217$F0M
                                  (car g$e$9235$F0M)
                                  (car g$p$9236$F0M)
                                  g$m*$9237$F0M
                                  g$s*$9238$F0M
                                  g$ae*$9239$F0M
                                  (g$match$9217$F0M
                                    (cdr g$e$9235$F0M)
                                    (cdr g$p$9236$F0M)
                                    g$m*$9237$F0M
                                    g$s*$9238$F0M
                                    g$ae*$9239$F0M
                                    g$r$9240$F0M)))
                              '#f)
                            (if (eq? g$p$9236$F0M 'each-any)
                              ((case-lambda
                                 ((g$l$9241$F0M)
                                  (if g$l$9241$F0M
                                    (begin '#f (cons g$l$9241$F0M g$r$9240$F0M))
                                    '#f)))
                               (g$match-each-any$9213$F0M
                                 g$e$9235$F0M
                                 g$m*$9237$F0M
                                 g$s*$9238$F0M
                                 g$ae*$9239$F0M))
                              ((case-lambda
                                 ((g$t$9242$F0M)
                                  (if (g$memv$5009$F0M g$t$9242$F0M '(each))
                                    (if (null? g$e$9235$F0M)
                                      (g$match-empty$9214$F0M
                                        (vector-ref g$p$9236$F0M '1)
                                        g$r$9240$F0M)
                                      ((case-lambda
                                         ((g$r*$9243$F0M)
                                          (if g$r*$9243$F0M
                                            (begin
                                              '#f
                                              (g$combine$9215$F0M
                                                g$r*$9243$F0M
                                                g$r$9240$F0M))
                                            '#f)))
                                       (g$match-each$9211$F0M
                                         g$e$9235$F0M
                                         (vector-ref g$p$9236$F0M '1)
                                         g$m*$9237$F0M
                                         g$s*$9238$F0M
                                         g$ae*$9239$F0M)))
                                    (if (g$memv$5009$F0M
                                          g$t$9242$F0M
                                          '(free-id))
                                      (if (symbol? g$e$9235$F0M)
                                        (if (g$top-marked?$7229$F0M
                                              g$m*$9237$F0M)
                                          (if (g$free-id=?$7295$F0M
                                                (g$stx^$9210$F0M
                                                  g$e$9235$F0M
                                                  g$m*$9237$F0M
                                                  g$s*$9238$F0M
                                                  g$ae*$9239$F0M)
                                                (vector-ref g$p$9236$F0M '1))
                                            (begin '#f g$r$9240$F0M)
                                            '#f)
                                          '#f)
                                        '#f)
                                      (if (g$memv$5009$F0M
                                            g$t$9242$F0M
                                            '(scheme-id))
                                        (if (symbol? g$e$9235$F0M)
                                          (if (g$top-marked?$7229$F0M
                                                g$m*$9237$F0M)
                                            (if (g$free-id=?$7295$F0M
                                                  (g$stx^$9210$F0M
                                                    g$e$9235$F0M
                                                    g$m*$9237$F0M
                                                    g$s*$9238$F0M
                                                    g$ae*$9239$F0M)
                                                  (g$scheme-stx$7512$F0M
                                                    (vector-ref
                                                      g$p$9236$F0M
                                                      '1)))
                                              (begin '#f g$r$9240$F0M)
                                              '#f)
                                            '#f)
                                          '#f)
                                        (if (g$memv$5009$F0M
                                              g$t$9242$F0M
                                              '(each+))
                                          (call-with-values
                                            (case-lambda
                                              (()
                                               (g$match-each+$9212$F0M
                                                 g$e$9235$F0M
                                                 (vector-ref g$p$9236$F0M '1)
                                                 (vector-ref g$p$9236$F0M '2)
                                                 (vector-ref g$p$9236$F0M '3)
                                                 g$m*$9237$F0M
                                                 g$s*$9238$F0M
                                                 g$ae*$9239$F0M
                                                 g$r$9240$F0M)))
                                            (case-lambda
                                              ((g$xr*$9247$F0M
                                                 g$y-pat$9248$F0M
                                                 g$r$9249$F0M)
                                               ((case-lambda
                                                  ((g$r$9250$F0M
                                                     g$y-pat$9251$F0M
                                                     g$xr*$9252$F0M)
                                                   (if g$r$9250$F0M
                                                     (if (null?
                                                           g$y-pat$9251$F0M)
                                                       (begin
                                                         '#f
                                                         (if (null?
                                                               g$xr*$9252$F0M)
                                                           (g$match-empty$9214$F0M
                                                             (vector-ref
                                                               g$p$9236$F0M
                                                               '1)
                                                             g$r$9250$F0M)
                                                           (g$combine$9215$F0M
                                                             g$xr*$9252$F0M
                                                             g$r$9250$F0M)))
                                                       '#f)
                                                     '#f)))
                                                g$r$9249$F0M
                                                g$y-pat$9248$F0M
                                                g$xr*$9247$F0M))))
                                          (if (g$memv$5009$F0M
                                                g$t$9242$F0M
                                                '(atom))
                                            (if (equal?
                                                  (vector-ref g$p$9236$F0M '1)
                                                  (g$strip$7301$F0M
                                                    g$e$9235$F0M
                                                    g$m*$9237$F0M))
                                              (begin '#f g$r$9240$F0M)
                                              '#f)
                                            (if (g$memv$5009$F0M
                                                  g$t$9242$F0M
                                                  '(vector))
                                              (if (vector? g$e$9235$F0M)
                                                (begin
                                                  '#f
                                                  (g$match$9217$F0M
                                                    (vector->list g$e$9235$F0M)
                                                    (vector-ref g$p$9236$F0M '1)
                                                    g$m*$9237$F0M
                                                    g$s*$9238$F0M
                                                    g$ae*$9239$F0M
                                                    g$r$9240$F0M))
                                                '#f)
                                              (assertion-violation
                                                'syntax-dispatch
                                                '"invalid pattern"
                                                g$p$9236$F0M)))))))))
                               (vector-ref g$p$9236$F0M '0))))))))
                   (g$match$9217$F0M
                     (case-lambda
                       ((g$e$9220$F0M
                          g$p$9221$F0M
                          g$m*$9222$F0M
                          g$s*$9223$F0M
                          g$ae*$9224$F0M
                          g$r$9225$F0M)
                        (if (not g$r$9225$F0M)
                          '#f
                          (if (eq? g$p$9221$F0M '_)
                            g$r$9225$F0M
                            (if (eq? g$p$9221$F0M 'any)
                              (cons
                                (g$stx^$9210$F0M
                                  g$e$9220$F0M
                                  g$m*$9222$F0M
                                  g$s*$9223$F0M
                                  g$ae*$9224$F0M)
                                g$r$9225$F0M)
                              (if (g$stx?$7263$F0M g$e$9220$F0M)
                                (if (not (g$top-marked?$7229$F0M g$m*$9222$F0M))
                                  (begin
                                    '#f
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$join-wraps$7278$F0M
                                           g$m*$9222$F0M
                                           g$s*$9223$F0M
                                           g$ae*$9224$F0M
                                           g$e$9220$F0M)))
                                      (case-lambda
                                        ((g$m*$9229$F0M
                                           g$s*$9230$F0M
                                           g$ae*$9231$F0M)
                                         ((case-lambda
                                            ((g$ae*$9232$F0M
                                               g$s*$9233$F0M
                                               g$m*$9234$F0M)
                                             (g$match$9217$F0M
                                               (g$stx-expr$7265$F0M
                                                 g$e$9220$F0M)
                                               g$p$9221$F0M
                                               g$m*$9234$F0M
                                               g$s*$9233$F0M
                                               g$ae*$9232$F0M
                                               g$r$9225$F0M)))
                                          g$ae*$9231$F0M
                                          g$s*$9230$F0M
                                          g$m*$9229$F0M)))))
                                  '#f)
                                (if (annotation? g$e$9220$F0M)
                                  (g$match$9217$F0M
                                    (annotation-expression g$e$9220$F0M)
                                    g$p$9221$F0M
                                    g$m*$9222$F0M
                                    g$s*$9223$F0M
                                    g$ae*$9224$F0M
                                    g$r$9225$F0M)
                                  (g$match*$9216$F0M
                                    g$e$9220$F0M
                                    g$p$9221$F0M
                                    g$m*$9222$F0M
                                    g$s*$9223$F0M
                                    g$ae*$9224$F0M
                                    g$r$9225$F0M))))))))))
           (case-lambda
             ((g$e$9218$F0M g$p$9219$F0M)
              (g$match$9217$F0M
                g$e$9218$F0M
                g$p$9219$F0M
                '()
                '()
                '()
                '()))))))))
   (g$ellipsis?$7570$F0M
     g$ellipsis?$11061$F0M
     (case-lambda
       ((g$x$9324$F0M)
        (if (g$id?$7291$F0M g$x$9324$F0M)
          (begin
            '#f
            (g$free-id=?$7295$F0M g$x$9324$F0M (g$scheme-stx$7512$F0M '...)))
          '#f))))
   (g$underscore?$7571$F0M
     g$underscore?$11062$F0M
     (case-lambda
       ((g$x$9325$F0M)
        (if (g$id?$7291$F0M g$x$9325$F0M)
          (begin
            '#f
            (g$free-id=?$7295$F0M g$x$9325$F0M (g$scheme-stx$7512$F0M '_)))
          '#f))))
   (g$verify-literals$7572$F0M
     g$verify-literals$11063$F0M
     (case-lambda
       ((g$lits$9326$F0M g$expr$9327$F0M)
        (for-each
          (case-lambda
            ((g$x$9328$F0M)
             (if ((case-lambda
                    ((g$t$9329$F0M)
                     (if g$t$9329$F0M
                       g$t$9329$F0M
                       ((case-lambda
                          ((g$t$9330$F0M)
                           (if g$t$9330$F0M
                             g$t$9330$F0M
                             (begin
                               '#f
                               (g$underscore?$7571$F0M g$x$9328$F0M)))))
                        (g$ellipsis?$7570$F0M g$x$9328$F0M)))))
                  (not (g$id?$7291$F0M g$x$9328$F0M)))
               (g$syntax-violation$7680$F0M
                 '#f
                 '"invalid literal"
                 g$expr$9327$F0M
                 g$x$9328$F0M)
               (void))))
          g$lits$9326$F0M))))
   (g$syntax-case-transformer$7573$F0M
     g$syntax-case-transformer$11064$F0M
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$9331$F0M
                     (case-lambda
                       ((g$pvars$9388$F0M
                          g$expr$9389$F0M
                          g$y$9390$F0M
                          g$r$9391$F0M
                          g$mr$9392$F0M)
                        ((case-lambda
                           ((g$ids$9393$F0M g$levels$9394$F0M)
                            ((case-lambda
                               ((g$labels$9395$F0M g$new-vars$9396$F0M)
                                ((case-lambda
                                   ((g$body$9397$F0M)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$7217$F0M
                                        '#f
                                        g$new-vars$9396$F0M
                                        g$body$9397$F0M)
                                      g$y$9390$F0M)))
                                 (g$chi-expr$7587$F0M
                                   (g$add-subst$7281$F0M
                                     (g$make-full-rib$7259$F0M
                                       g$ids$9393$F0M
                                       g$labels$9395$F0M)
                                     g$expr$9389$F0M)
                                   (append
                                     (map (case-lambda
                                            ((g$label$9398$F0M
                                               g$var$9399$F0M
                                               g$level$9400$F0M)
                                             (cons
                                               g$label$9398$F0M
                                               (g$make-binding$7307$F0M
                                                 'syntax
                                                 (cons
                                                   g$var$9399$F0M
                                                   g$level$9400$F0M)))))
                                          g$labels$9395$F0M
                                          g$new-vars$9396$F0M
                                          (map cdr g$pvars$9388$F0M))
                                     g$r$9391$F0M)
                                   g$mr$9392$F0M))))
                             (map g$gen-label$7232$F0M g$ids$9393$F0M)
                             (map g$gen-lexical$7230$F0M g$ids$9393$F0M))))
                         (map car g$pvars$9388$F0M)
                         (map cdr g$pvars$9388$F0M)))))
                   (g$invalid-ids-error$9332$F0M
                     (case-lambda
                       ((g$id*$9382$F0M g$e$9383$F0M g$class$9384$F0M)
                        ((letrec ((g$find$9385$F0M
                                    (case-lambda
                                      ((g$id*$9386$F0M g$ok*$9387$F0M)
                                       (if (null? g$id*$9386$F0M)
                                         (g$syntax-violation$7680$F0M
                                           '#f
                                           '"invalid syntax"
                                           g$e$9383$F0M)
                                         (if (g$id?$7291$F0M
                                               (car g$id*$9386$F0M))
                                           (if (g$bound-id-member?$7298$F0M
                                                 (car g$id*$9386$F0M)
                                                 g$ok*$9387$F0M)
                                             (g$syntax-error$7677$F0M
                                               (car g$id*$9386$F0M)
                                               '"duplicate "
                                               g$class$9384$F0M)
                                             (g$find$9385$F0M
                                               (cdr g$id*$9386$F0M)
                                               (cons
                                                 (car g$id*$9386$F0M)
                                                 g$ok*$9387$F0M)))
                                           (g$syntax-error$7677$F0M
                                             (car g$id*$9386$F0M)
                                             '"invalid "
                                             g$class$9384$F0M)))))))
                           g$find$9385$F0M)
                         g$id*$9382$F0M
                         '()))))
                   (g$gen-clause$9333$F0M
                     (case-lambda
                       ((g$x$9362$F0M
                          g$keys$9363$F0M
                          g$clauses$9364$F0M
                          g$r$9365$F0M
                          g$mr$9366$F0M
                          g$pat$9367$F0M
                          g$fender$9368$F0M
                          g$expr$9369$F0M)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$7568$F0M
                               g$pat$9367$F0M
                               g$keys$9363$F0M)))
                          (case-lambda
                            ((g$p$9372$F0M g$pvars$9373$F0M)
                             ((case-lambda
                                ((g$pvars$9374$F0M g$p$9375$F0M)
                                 (if (not (g$distinct-bound-ids?$7297$F0M
                                            (map car g$pvars$9374$F0M)))
                                   (g$invalid-ids-error$9332$F0M
                                     (map car g$pvars$9374$F0M)
                                     g$pat$9367$F0M
                                     '"pattern variable")
                                   (if (not (g$for-all$5014$F0M
                                              (case-lambda
                                                ((g$x$9376$F0M)
                                                 (not (g$ellipsis?$7570$F0M
                                                        (car g$x$9376$F0M)))))
                                              g$pvars$9374$F0M))
                                     (g$syntax-violation$7680$F0M
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$9367$F0M)
                                     ((case-lambda
                                        ((g$y$9377$F0M)
                                         ((case-lambda
                                            ((g$test$9378$F0M)
                                             ((case-lambda
                                                ((g$conseq$9379$F0M)
                                                 ((case-lambda
                                                    ((g$altern$9380$F0M)
                                                     (list
                                                       (g$build-lambda$7217$F0M
                                                         '#f
                                                         (list g$y$9377$F0M)
                                                         (list
                                                           'if
                                                           g$test$9378$F0M
                                                           g$conseq$9379$F0M
                                                           g$altern$9380$F0M))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$9362$F0M
                                                         (list
                                                           'quote
                                                           g$p$9375$F0M)))))
                                                  (g$gen-syntax-case$9334$F0M
                                                    g$x$9362$F0M
                                                    g$keys$9363$F0M
                                                    g$clauses$9364$F0M
                                                    g$r$9365$F0M
                                                    g$mr$9366$F0M))))
                                              (g$build-dispatch-call$9331$F0M
                                                g$pvars$9374$F0M
                                                g$expr$9369$F0M
                                                g$y$9377$F0M
                                                g$r$9365$F0M
                                                g$mr$9366$F0M))))
                                          (if (eq? g$fender$9368$F0M '#t)
                                            g$y$9377$F0M
                                            ((case-lambda
                                               ((g$call$9381$F0M)
                                                (list
                                                  'if
                                                  g$y$9377$F0M
                                                  g$call$9381$F0M
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$9331$F0M
                                               g$pvars$9374$F0M
                                               g$fender$9368$F0M
                                               g$y$9377$F0M
                                               g$r$9365$F0M
                                               g$mr$9366$F0M))))))
                                      (g$gen-lexical$7230$F0M 'tmp))))))
                              g$pvars$9373$F0M
                              g$p$9372$F0M)))))))
                   (g$gen-syntax-case$9334$F0M
                     (case-lambda
                       ((g$x$9345$F0M
                          g$keys$9346$F0M
                          g$clauses$9347$F0M
                          g$r$9348$F0M
                          g$mr$9349$F0M)
                        (if (null? g$clauses$9347$F0M)
                          (list '(primitive syntax-error) g$x$9345$F0M)
                          ((case-lambda
                             ((g$t$9350$F0M)
                              ((case-lambda
                                 ((g$ls/false$9351$F0M)
                                  (if g$ls/false$9351$F0M
                                    (apply
                                      (case-lambda
                                        ((g$pat$9352$F0M g$expr$9353$F0M)
                                         (if (if (g$id?$7291$F0M g$pat$9352$F0M)
                                               (if (not (g$bound-id-member?$7298$F0M
                                                          g$pat$9352$F0M
                                                          g$keys$9346$F0M))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$7570$F0M
                                                          g$pat$9352$F0M)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$7295$F0M
                                                 g$pat$9352$F0M
                                                 (g$scheme-stx$7512$F0M '_))
                                             (g$chi-expr$7587$F0M
                                               g$expr$9353$F0M
                                               g$r$9348$F0M
                                               g$mr$9349$F0M)
                                             ((case-lambda
                                                ((g$lab$9354$F0M g$lex$9355$F0M)
                                                 ((case-lambda
                                                    ((g$body$9356$F0M)
                                                     (list
                                                       (g$build-lambda$7217$F0M
                                                         '#f
                                                         (list g$lex$9355$F0M)
                                                         g$body$9356$F0M)
                                                       g$x$9345$F0M)))
                                                  (g$chi-expr$7587$F0M
                                                    (g$add-subst$7281$F0M
                                                      (g$make-full-rib$7259$F0M
                                                        (list g$pat$9352$F0M)
                                                        (list g$lab$9354$F0M))
                                                      g$expr$9353$F0M)
                                                    (cons
                                                      (cons
                                                        g$lab$9354$F0M
                                                        (g$make-binding$7307$F0M
                                                          'syntax
                                                          (cons
                                                            g$lex$9355$F0M
                                                            '0)))
                                                      g$r$9348$F0M)
                                                    g$mr$9349$F0M))))
                                              (g$gen-label$7232$F0M
                                                g$pat$9352$F0M)
                                              (g$gen-lexical$7230$F0M
                                                g$pat$9352$F0M)))
                                           (g$gen-clause$9333$F0M
                                             g$x$9345$F0M
                                             g$keys$9346$F0M
                                             (cdr g$clauses$9347$F0M)
                                             g$r$9348$F0M
                                             g$mr$9349$F0M
                                             g$pat$9352$F0M
                                             '#t
                                             g$expr$9353$F0M))))
                                      g$ls/false$9351$F0M)
                                    ((case-lambda
                                       ((g$t$9357$F0M)
                                        ((case-lambda
                                           ((g$ls/false$9358$F0M)
                                            (if g$ls/false$9358$F0M
                                              (apply
                                                (case-lambda
                                                  ((g$pat$9359$F0M
                                                     g$fender$9360$F0M
                                                     g$expr$9361$F0M)
                                                   (g$gen-clause$9333$F0M
                                                     g$x$9345$F0M
                                                     g$keys$9346$F0M
                                                     (cdr g$clauses$9347$F0M)
                                                     g$r$9348$F0M
                                                     g$mr$9349$F0M
                                                     g$pat$9359$F0M
                                                     g$fender$9360$F0M
                                                     g$expr$9361$F0M)))
                                                g$ls/false$9358$F0M)
                                              (g$syntax-violation$7680$F0M
                                                '#f
                                                '"invalid syntax"
                                                g$t$9357$F0M))))
                                         (g$syntax-dispatch$7569$F0M
                                           g$t$9357$F0M
                                           '(any any any)))))
                                     g$t$9350$F0M))))
                               (g$syntax-dispatch$7569$F0M
                                 g$t$9350$F0M
                                 '(any any)))))
                           (car g$clauses$9347$F0M)))))))
           (case-lambda
             ((g$e$9335$F0M g$r$9336$F0M g$mr$9337$F0M)
              ((case-lambda
                 ((g$t$9338$F0M)
                  ((case-lambda
                     ((g$ls/false$9339$F0M)
                      (if g$ls/false$9339$F0M
                        (apply
                          (case-lambda
                            ((g$expr$9340$F0M
                               g$keys$9341$F0M
                               g$clauses$9342$F0M)
                             (begin
                               (g$verify-literals$7572$F0M
                                 g$keys$9341$F0M
                                 g$e$9335$F0M)
                               ((case-lambda
                                  ((g$x$9343$F0M)
                                   ((case-lambda
                                      ((g$body$9344$F0M)
                                       (list
                                         (g$build-lambda$7217$F0M
                                           '#f
                                           (list g$x$9343$F0M)
                                           g$body$9344$F0M)
                                         (g$chi-expr$7587$F0M
                                           g$expr$9340$F0M
                                           g$r$9336$F0M
                                           g$mr$9337$F0M))))
                                    (g$gen-syntax-case$9334$F0M
                                      g$x$9343$F0M
                                      g$keys$9341$F0M
                                      g$clauses$9342$F0M
                                      g$r$9336$F0M
                                      g$mr$9337$F0M))))
                                (g$gen-lexical$7230$F0M 'tmp)))))
                          g$ls/false$9339$F0M)
                        (g$syntax-violation$7680$F0M
                          '#f
                          '"invalid syntax"
                          g$t$9338$F0M))))
                   (g$syntax-dispatch$7569$F0M
                     g$t$9338$F0M
                     '(_ any each-any . each-any)))))
               g$e$9335$F0M))))))))
   (g$ellipsis-map$7574$F0M
     g$ellipsis-map$11065$F0M
     (case-lambda
       ((g$proc$9401$F0M g$ls$9402$F0M . g$ls*$9403$F0M)
        (letrec* ((g$who$9404$F0M '...))
          (begin
            (if (not (list? g$ls$9402$F0M))
              (assertion-violation g$who$9404$F0M '"not a list" g$ls$9402$F0M)
              (void))
            (if (not (null? g$ls*$9403$F0M))
              ((case-lambda
                 ((g$n$9405$F0M)
                  (for-each
                    (case-lambda
                      ((g$x$9406$F0M)
                       (begin
                         (if (not (list? g$x$9406$F0M))
                           (assertion-violation
                             g$who$9404$F0M
                             '"not a list"
                             g$x$9406$F0M)
                           (void))
                         (if (not (= (length g$x$9406$F0M) g$n$9405$F0M))
                           (assertion-violation
                             g$who$9404$F0M
                             '"length mismatch"
                             g$ls$9402$F0M
                             g$x$9406$F0M)
                           (void)))))
                    g$ls*$9403$F0M)))
               (length g$ls$9402$F0M))
              (void))
            (apply map g$proc$9401$F0M g$ls$9402$F0M g$ls*$9403$F0M))))))
   (g$syntax-transformer$7575$F0M
     g$syntax-transformer$11066$F0M
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$9407$F0M
                     (case-lambda
                       ((g$src$9467$F0M
                          g$e$9468$F0M
                          g$r$9469$F0M
                          g$maps$9470$F0M
                          g$ellipsis?$9471$F0M
                          g$vec?$9472$F0M)
                        ((case-lambda
                           ((g$t$9473$F0M)
                            ((case-lambda
                               ((g$ls/false$9474$F0M)
                                (if (if g$ls/false$9474$F0M
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$9475$F0M)
                                             (g$ellipsis?$9471$F0M
                                               g$dots$9475$F0M)))
                                          g$ls/false$9474$F0M))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$9476$F0M)
                                       (g$syntax-violation$7680$F0M
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$9467$F0M)))
                                    g$ls/false$9474$F0M)
                                  ((case-lambda
                                     ((g$t$9477$F0M)
                                      ((case-lambda
                                         ((g$ls/false$9478$F0M)
                                          (if (if g$ls/false$9478$F0M
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$9479$F0M)
                                                       (g$id?$7291$F0M
                                                         g$id$9479$F0M)))
                                                    g$ls/false$9478$F0M))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$9480$F0M)
                                                 ((case-lambda
                                                    ((g$label$9481$F0M)
                                                     ((case-lambda
                                                        ((g$b$9482$F0M)
                                                         ((case-lambda
                                                            (()
                                                             (if (eq? (g$binding-type$7308$F0M
                                                                        g$b$9482$F0M)
                                                                      'syntax)
                                                               (call-with-values
                                                                 (case-lambda
                                                                   (()
                                                                    ((case-lambda
                                                                       ((g$var.lev$9485$F0M)
                                                                        (g$gen-ref$9408$F0M
                                                                          g$src$9467$F0M
                                                                          (car g$var.lev$9485$F0M)
                                                                          (cdr g$var.lev$9485$F0M)
                                                                          g$maps$9470$F0M)))
                                                                     (g$binding-value$7309$F0M
                                                                       g$b$9482$F0M))))
                                                                 (case-lambda
                                                                   ((g$var$9486$F0M
                                                                      g$maps$9487$F0M)
                                                                    ((case-lambda
                                                                       ((g$maps$9488$F0M
                                                                          g$var$9489$F0M)
                                                                        (values
                                                                          (list
                                                                            'ref
                                                                            g$var$9489$F0M)
                                                                          g$maps$9488$F0M)))
                                                                     g$maps$9487$F0M
                                                                     g$var$9486$F0M))))
                                                               (values
                                                                 (list
                                                                   'quote
                                                                   g$e$9468$F0M)
                                                                 g$maps$9470$F0M)))))))
                                                      (g$label->binding$7306$F0M
                                                        g$label$9481$F0M
                                                        g$r$9469$F0M))))
                                                  (g$id->label$7304$F0M
                                                    g$e$9468$F0M))))
                                              g$ls/false$9478$F0M)
                                            ((case-lambda
                                               ((g$t$9490$F0M)
                                                ((case-lambda
                                                   ((g$ls/false$9491$F0M)
                                                    (if (if g$ls/false$9491$F0M
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$9492$F0M
                                                                   g$e$9493$F0M)
                                                                 (g$ellipsis?$9471$F0M
                                                                   g$dots$9492$F0M)))
                                                              g$ls/false$9491$F0M))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$9494$F0M
                                                             g$e$9495$F0M)
                                                           (if g$vec?$9472$F0M
                                                             (g$syntax-violation$7680$F0M
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$9467$F0M)
                                                             (g$gen-syntax$9407$F0M
                                                               g$src$9467$F0M
                                                               g$e$9495$F0M
                                                               g$r$9469$F0M
                                                               g$maps$9470$F0M
                                                               (case-lambda
                                                                 ((g$x$9496$F0M)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$9491$F0M)
                                                      ((case-lambda
                                                         ((g$t$9497$F0M)
                                                          ((case-lambda
                                                             ((g$ls/false$9498$F0M)
                                                              (if (if g$ls/false$9498$F0M
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$9499$F0M
                                                                             g$dots$9500$F0M
                                                                             g$y$9501$F0M)
                                                                           (g$ellipsis?$9471$F0M
                                                                             g$dots$9500$F0M)))
                                                                        g$ls/false$9498$F0M))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$9502$F0M
                                                                       g$dots$9503$F0M
                                                                       g$y$9504$F0M)
                                                                     ((letrec ((g$f$9505$F0M
                                                                                 (case-lambda
                                                                                   ((g$y$9506$F0M
                                                                                      g$k$9507$F0M)
                                                                                    ((case-lambda
                                                                                       ((g$t$9508$F0M)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9509$F0M)
                                                                                            (if g$ls/false$9509$F0M
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$9507$F0M
                                                                                                     g$maps$9470$F0M)))
                                                                                                g$ls/false$9509$F0M)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9510$F0M)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9511$F0M)
                                                                                                      (if (if g$ls/false$9511$F0M
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$9512$F0M
                                                                                                                     g$y$9513$F0M)
                                                                                                                   (g$ellipsis?$9471$F0M
                                                                                                                     g$dots$9512$F0M)))
                                                                                                                g$ls/false$9511$F0M))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$9514$F0M
                                                                                                               g$y$9515$F0M)
                                                                                                             (g$f$9505$F0M
                                                                                                               g$y$9515$F0M
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$9516$F0M)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$9507$F0M
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$9516$F0M))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$9519$F0M
                                                                                                                         g$maps$9520$F0M)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$9521$F0M
                                                                                                                             g$x$9522$F0M)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$9521$F0M))
                                                                                                                             (g$syntax-violation$7680$F0M
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$9467$F0M)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$9410$F0M
                                                                                                                                 g$x$9522$F0M
                                                                                                                                 (car g$maps$9521$F0M))
                                                                                                                               (cdr g$maps$9521$F0M)))))
                                                                                                                        g$maps$9520$F0M
                                                                                                                        g$x$9519$F0M)))))))))
                                                                                                          g$ls/false$9511$F0M)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9523$F0M)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9524$F0M)
                                                                                                                (if g$ls/false$9524$F0M
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$9407$F0M
                                                                                                                              g$src$9467$F0M
                                                                                                                              g$y$9506$F0M
                                                                                                                              g$r$9469$F0M
                                                                                                                              g$maps$9470$F0M
                                                                                                                              g$ellipsis?$9471$F0M
                                                                                                                              g$vec?$9472$F0M)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$9527$F0M
                                                                                                                              g$maps$9528$F0M)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$9529$F0M
                                                                                                                                  g$y$9530$F0M)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$9507$F0M
                                                                                                                                       g$maps$9529$F0M)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$9533$F0M
                                                                                                                                       g$maps$9534$F0M)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$9535$F0M
                                                                                                                                           g$x$9536$F0M)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$9409$F0M
                                                                                                                                             g$x$9536$F0M
                                                                                                                                             g$y$9530$F0M)
                                                                                                                                           g$maps$9535$F0M)))
                                                                                                                                      g$maps$9534$F0M
                                                                                                                                      g$x$9533$F0M))))))
                                                                                                                             g$maps$9528$F0M
                                                                                                                             g$y$9527$F0M))))))
                                                                                                                    g$ls/false$9524$F0M)
                                                                                                                  (g$syntax-violation$7680$F0M
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9523$F0M))))
                                                                                                             (g$syntax-dispatch$7569$F0M
                                                                                                               g$t$9523$F0M
                                                                                                               '_))))
                                                                                                         g$t$9510$F0M))))
                                                                                                   (g$syntax-dispatch$7569$F0M
                                                                                                     g$t$9510$F0M
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$9508$F0M))))
                                                                                         (g$syntax-dispatch$7569$F0M
                                                                                           g$t$9508$F0M
                                                                                           '()))))
                                                                                     g$y$9506$F0M)))))
                                                                        g$f$9505$F0M)
                                                                      g$y$9504$F0M
                                                                      (case-lambda
                                                                        ((g$maps$9537$F0M)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$9407$F0M
                                                                                g$src$9467$F0M
                                                                                g$x$9502$F0M
                                                                                g$r$9469$F0M
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$9537$F0M)
                                                                                g$ellipsis?$9471$F0M
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$9540$F0M
                                                                                g$maps$9541$F0M)
                                                                              ((case-lambda
                                                                                 ((g$maps$9542$F0M
                                                                                    g$x$9543$F0M)
                                                                                  (if (null?
                                                                                        (car g$maps$9542$F0M))
                                                                                    (g$syntax-violation$7680$F0M
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$9467$F0M)
                                                                                    (values
                                                                                      (g$gen-map$9411$F0M
                                                                                        g$x$9543$F0M
                                                                                        (car g$maps$9542$F0M))
                                                                                      (cdr g$maps$9542$F0M)))))
                                                                               g$maps$9541$F0M
                                                                               g$x$9540$F0M)))))))))
                                                                  g$ls/false$9498$F0M)
                                                                ((case-lambda
                                                                   ((g$t$9544$F0M)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9545$F0M)
                                                                        (if g$ls/false$9545$F0M
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$9546$F0M
                                                                                 g$y$9547$F0M)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$9407$F0M
                                                                                      g$src$9467$F0M
                                                                                      g$x$9546$F0M
                                                                                      g$r$9469$F0M
                                                                                      g$maps$9470$F0M
                                                                                      g$ellipsis?$9471$F0M
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$9550$F0M
                                                                                      g$maps$9551$F0M)
                                                                                    ((case-lambda
                                                                                       ((g$maps$9552$F0M
                                                                                          g$xnew$9553$F0M)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$9407$F0M
                                                                                               g$src$9467$F0M
                                                                                               g$y$9547$F0M
                                                                                               g$r$9469$F0M
                                                                                               g$maps$9552$F0M
                                                                                               g$ellipsis?$9471$F0M
                                                                                               g$vec?$9472$F0M)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$9556$F0M
                                                                                               g$maps$9557$F0M)
                                                                                             ((case-lambda
                                                                                                ((g$maps$9558$F0M
                                                                                                   g$ynew$9559$F0M)
                                                                                                 (values
                                                                                                   (g$gen-cons$9412$F0M
                                                                                                     g$e$9468$F0M
                                                                                                     g$x$9546$F0M
                                                                                                     g$y$9547$F0M
                                                                                                     g$xnew$9553$F0M
                                                                                                     g$ynew$9559$F0M)
                                                                                                   g$maps$9558$F0M)))
                                                                                              g$maps$9557$F0M
                                                                                              g$ynew$9556$F0M))))))
                                                                                     g$maps$9551$F0M
                                                                                     g$xnew$9550$F0M))))))
                                                                            g$ls/false$9545$F0M)
                                                                          ((case-lambda
                                                                             ((g$t$9560$F0M)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9561$F0M)
                                                                                  (if g$ls/false$9561$F0M
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$9562$F0M)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$9407$F0M
                                                                                                g$src$9467$F0M
                                                                                                g$ls$9562$F0M
                                                                                                g$r$9469$F0M
                                                                                                g$maps$9470$F0M
                                                                                                g$ellipsis?$9471$F0M
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$9565$F0M
                                                                                                g$maps$9566$F0M)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$9567$F0M
                                                                                                    g$lsnew$9568$F0M)
                                                                                                  (values
                                                                                                    (g$gen-vector$9413$F0M
                                                                                                      g$e$9468$F0M
                                                                                                      g$ls$9562$F0M
                                                                                                      g$lsnew$9568$F0M)
                                                                                                    g$maps$9567$F0M)))
                                                                                               g$maps$9566$F0M
                                                                                               g$lsnew$9565$F0M))))))
                                                                                      g$ls/false$9561$F0M)
                                                                                    ((case-lambda
                                                                                       ((g$t$9569$F0M)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9570$F0M)
                                                                                            (if g$ls/false$9570$F0M
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$9468$F0M)
                                                                                                     g$maps$9470$F0M)))
                                                                                                g$ls/false$9570$F0M)
                                                                                              (g$syntax-violation$7680$F0M
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9569$F0M))))
                                                                                         (g$syntax-dispatch$7569$F0M
                                                                                           g$t$9569$F0M
                                                                                           '_))))
                                                                                     g$t$9560$F0M))))
                                                                               (g$syntax-dispatch$7569$F0M
                                                                                 g$t$9560$F0M
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9544$F0M))))
                                                                     (g$syntax-dispatch$7569$F0M
                                                                       g$t$9544$F0M
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9497$F0M))))
                                                           (g$syntax-dispatch$7569$F0M
                                                             g$t$9497$F0M
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$9490$F0M))))
                                                 (g$syntax-dispatch$7569$F0M
                                                   g$t$9490$F0M
                                                   '(any any)))))
                                             g$t$9477$F0M))))
                                       (g$syntax-dispatch$7569$F0M
                                         g$t$9477$F0M
                                         'any))))
                                   g$t$9473$F0M))))
                             (g$syntax-dispatch$7569$F0M g$t$9473$F0M 'any))))
                         g$e$9468$F0M))))
                   (g$gen-ref$9408$F0M
                     (case-lambda
                       ((g$src$9454$F0M
                          g$var$9455$F0M
                          g$level$9456$F0M
                          g$maps$9457$F0M)
                        (if (= g$level$9456$F0M '0)
                          (values g$var$9455$F0M g$maps$9457$F0M)
                          (if (null? g$maps$9457$F0M)
                            (g$syntax-violation$7680$F0M
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$9454$F0M)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$9408$F0M
                                   g$src$9454$F0M
                                   g$var$9455$F0M
                                   (- g$level$9456$F0M '1)
                                   (cdr g$maps$9457$F0M))))
                              (case-lambda
                                ((g$outer-var$9460$F0M g$outer-maps$9461$F0M)
                                 ((case-lambda
                                    ((g$outer-maps$9462$F0M
                                       g$outer-var$9463$F0M)
                                     ((case-lambda
                                        ((g$t$9464$F0M)
                                         (if g$t$9464$F0M
                                           ((case-lambda
                                              ((g$b$9465$F0M)
                                               (values
                                                 (cdr g$b$9465$F0M)
                                                 g$maps$9457$F0M)))
                                            g$t$9464$F0M)
                                           ((case-lambda
                                              ((g$inner-var$9466$F0M)
                                               (values
                                                 g$inner-var$9466$F0M
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$9463$F0M
                                                       g$inner-var$9466$F0M)
                                                     (car g$maps$9457$F0M))
                                                   g$outer-maps$9462$F0M))))
                                            (g$gen-lexical$7230$F0M 'tmp)))))
                                      (g$assq$5004$F0M
                                        g$outer-var$9463$F0M
                                        (car g$maps$9457$F0M)))))
                                  g$outer-maps$9461$F0M
                                  g$outer-var$9460$F0M)))))))))
                   (g$gen-append$9409$F0M
                     (case-lambda
                       ((g$x$9452$F0M g$y$9453$F0M)
                        (if (equal? g$y$9453$F0M ''())
                          g$x$9452$F0M
                          (list 'append g$x$9452$F0M g$y$9453$F0M)))))
                   (g$gen-mappend$9410$F0M
                     (case-lambda
                       ((g$e$9450$F0M g$map-env$9451$F0M)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$9411$F0M
                            g$e$9450$F0M
                            g$map-env$9451$F0M)))))
                   (g$gen-map$9411$F0M
                     (case-lambda
                       ((g$e$9441$F0M g$map-env$9442$F0M)
                        ((case-lambda
                           ((g$formals$9443$F0M g$actuals$9444$F0M)
                            (if (eq? (car g$e$9441$F0M) 'ref)
                              (car g$actuals$9444$F0M)
                              (if (g$for-all$5014$F0M
                                    (case-lambda
                                      ((g$x$9445$F0M)
                                       (if (eq? (car g$x$9445$F0M) 'ref)
                                         (begin
                                           '#f
                                           (g$memq$5008$F0M
                                             (g$cadr$5178$F0M g$x$9445$F0M)
                                             g$formals$9443$F0M))
                                         '#f)))
                                    (cdr g$e$9441$F0M))
                                ((case-lambda
                                   ((g$args$9446$F0M)
                                    (cons
                                      'map
                                      (cons
                                        (list 'primitive (car g$e$9441$F0M))
                                        g$args$9446$F0M))))
                                 (map ((case-lambda
                                         ((g$r$9447$F0M)
                                          (case-lambda
                                            ((g$x$9448$F0M)
                                             (cdr (g$assq$5004$F0M
                                                    (g$cadr$5178$F0M
                                                      g$x$9448$F0M)
                                                    g$r$9447$F0M))))))
                                       (map cons
                                            g$formals$9443$F0M
                                            g$actuals$9444$F0M))
                                      (cdr g$e$9441$F0M)))
                                (g$cons*$5016$F0M
                                  'map
                                  (list 'lambda g$formals$9443$F0M g$e$9441$F0M)
                                  g$actuals$9444$F0M)))))
                         (map cdr g$map-env$9442$F0M)
                         (map (case-lambda
                                ((g$x$9449$F0M) (list 'ref (car g$x$9449$F0M))))
                              g$map-env$9442$F0M)))))
                   (g$gen-cons$9412$F0M
                     (case-lambda
                       ((g$e$9433$F0M
                          g$x$9434$F0M
                          g$y$9435$F0M
                          g$xnew$9436$F0M
                          g$ynew$9437$F0M)
                        ((case-lambda
                           ((g$t$9438$F0M)
                            (if (g$memv$5009$F0M g$t$9438$F0M '(quote))
                              (if (eq? (car g$xnew$9436$F0M) 'quote)
                                ((case-lambda
                                   ((g$xnew$9439$F0M g$ynew$9440$F0M)
                                    (if (if (eq? g$xnew$9439$F0M g$x$9434$F0M)
                                          (begin
                                            '#f
                                            (eq? g$ynew$9440$F0M g$y$9435$F0M))
                                          '#f)
                                      (list 'quote g$e$9433$F0M)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$9439$F0M
                                          g$ynew$9440$F0M)))))
                                 (g$cadr$5178$F0M g$xnew$9436$F0M)
                                 (g$cadr$5178$F0M g$ynew$9437$F0M))
                                (if (null? (g$cadr$5178$F0M g$ynew$9437$F0M))
                                  (list 'list g$xnew$9436$F0M)
                                  (list 'cons g$xnew$9436$F0M g$ynew$9437$F0M)))
                              (if (g$memv$5009$F0M g$t$9438$F0M '(list))
                                (cons
                                  'list
                                  (cons g$xnew$9436$F0M (cdr g$ynew$9437$F0M)))
                                (list 'cons g$xnew$9436$F0M g$ynew$9437$F0M)))))
                         (car g$ynew$9437$F0M)))))
                   (g$gen-vector$9413$F0M
                     (case-lambda
                       ((g$e$9430$F0M g$ls$9431$F0M g$lsnew$9432$F0M)
                        (if (eq? (car g$lsnew$9432$F0M) 'quote)
                          (if (eq? (g$cadr$5178$F0M g$lsnew$9432$F0M)
                                   g$ls$9431$F0M)
                            (list 'quote g$e$9430$F0M)
                            (list
                              'quote
                              (list->vector
                                (g$cadr$5178$F0M g$lsnew$9432$F0M))))
                          (if (eq? (car g$lsnew$9432$F0M) 'list)
                            (cons 'vector (cdr g$lsnew$9432$F0M))
                            (list 'list->vector g$lsnew$9432$F0M))))))
                   (g$regen$9414$F0M
                     (case-lambda
                       ((g$x$9427$F0M)
                        ((case-lambda
                           ((g$t$9428$F0M)
                            (if (g$memv$5009$F0M g$t$9428$F0M '(ref))
                              (g$cadr$5178$F0M g$x$9427$F0M)
                              (if (g$memv$5009$F0M g$t$9428$F0M '(primitive))
                                (list 'primitive (g$cadr$5178$F0M g$x$9427$F0M))
                                (if (g$memv$5009$F0M g$t$9428$F0M '(quote))
                                  (list 'quote (g$cadr$5178$F0M g$x$9427$F0M))
                                  (if (g$memv$5009$F0M g$t$9428$F0M '(lambda))
                                    (g$build-lambda$7217$F0M
                                      '#f
                                      (g$cadr$5178$F0M g$x$9427$F0M)
                                      (g$regen$9414$F0M
                                        (g$caddr$5184$F0M g$x$9427$F0M)))
                                    (if (g$memv$5009$F0M g$t$9428$F0M '(map))
                                      ((case-lambda
                                         ((g$ls$9429$F0M)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$9429$F0M)))
                                       (map g$regen$9414$F0M
                                            (cdr g$x$9427$F0M)))
                                      (cons
                                        (list 'primitive (car g$x$9427$F0M))
                                        (map g$regen$9414$F0M
                                             (cdr g$x$9427$F0M))))))))))
                         (car g$x$9427$F0M))))))
           (case-lambda
             ((g$e$9415$F0M g$r$9416$F0M g$mr$9417$F0M)
              ((case-lambda
                 ((g$t$9418$F0M)
                  ((case-lambda
                     ((g$ls/false$9419$F0M)
                      (if g$ls/false$9419$F0M
                        (apply
                          (case-lambda
                            ((g$x$9420$F0M)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$9407$F0M
                                    g$e$9415$F0M
                                    g$x$9420$F0M
                                    g$r$9416$F0M
                                    '()
                                    g$ellipsis?$7570$F0M
                                    '#f)))
                               (case-lambda
                                 ((g$e$9423$F0M g$maps$9424$F0M)
                                  ((case-lambda
                                     ((g$maps$9425$F0M g$e$9426$F0M)
                                      (g$regen$9414$F0M g$e$9426$F0M)))
                                   g$maps$9424$F0M
                                   g$e$9423$F0M))))))
                          g$ls/false$9419$F0M)
                        (g$syntax-violation$7680$F0M
                          '#f
                          '"invalid syntax"
                          g$t$9418$F0M))))
                   (g$syntax-dispatch$7569$F0M g$t$9418$F0M '(_ any)))))
               g$e$9415$F0M))))))))
   (g$core-macro-transformer$7576$F0M
     g$core-macro-transformer$11067$F0M
     (case-lambda
       ((g$name$9571$F0M)
        ((case-lambda
           ((g$t$9572$F0M)
            (if (g$memv$5009$F0M g$t$9572$F0M '(quote))
              g$quote-transformer$7529$F0M
              (if (g$memv$5009$F0M g$t$9572$F0M '(lambda))
                g$lambda-transformer$7531$F0M
                (if (g$memv$5009$F0M g$t$9572$F0M '(case-lambda))
                  g$case-lambda-transformer$7530$F0M
                  (if (g$memv$5009$F0M g$t$9572$F0M '(letrec))
                    g$letrec-transformer$7519$F0M
                    (if (g$memv$5009$F0M g$t$9572$F0M '(letrec*))
                      g$letrec*-transformer$7520$F0M
                      (if (g$memv$5009$F0M g$t$9572$F0M '(if))
                        g$if-transformer$7527$F0M
                        (if (g$memv$5009$F0M g$t$9572$F0M '(foreign-call))
                          g$foreign-call-transformer$7567$F0M
                          (if (g$memv$5009$F0M g$t$9572$F0M '(syntax-case))
                            g$syntax-case-transformer$7573$F0M
                            (if (g$memv$5009$F0M g$t$9572$F0M '(syntax))
                              g$syntax-transformer$7575$F0M
                              (if (g$memv$5009$F0M
                                    g$t$9572$F0M
                                    '(type-descriptor))
                                g$type-descriptor-transformer$7522$F0M
                                (if (g$memv$5009$F0M
                                      g$t$9572$F0M
                                      '(record-type-descriptor))
                                  g$record-type-descriptor-transformer$7523$F0M
                                  (if (g$memv$5009$F0M
                                        g$t$9572$F0M
                                        '(record-constructor-descriptor))
                                    g$record-constructor-descriptor-transformer$7524$F0M
                                    (if (g$memv$5009$F0M
                                          g$t$9572$F0M
                                          '(fluid-let-syntax))
                                      g$fluid-let-syntax-transformer$7521$F0M
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$9571$F0M))))))))))))))))
         g$name$9571$F0M))))
   (g$file-options-macro$7577$F0M
     g$file-options-macro$11068$F0M
     (case-lambda
       ((g$x$9573$F0M)
        (letrec* ((g$valid-option?$9574$F0M
                    (case-lambda
                      ((g$x$9579$F0M)
                       (if (g$id?$7291$F0M g$x$9579$F0M)
                         (begin
                           '#f
                           (g$memq$5008$F0M
                             (g$id->sym$7292$F0M g$x$9579$F0M)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$9575$F0M)
              ((case-lambda
                 ((g$ls/false$9576$F0M)
                  (if (if g$ls/false$9576$F0M
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$9577$F0M)
                               (if (g$for-all$5014$F0M
                                     g$valid-option?$9574$F0M
                                     g$opt*$9577$F0M)
                                 (begin
                                   '#f
                                   (g$file-options-spec$6565$F0M
                                     (map g$id->sym$7292$F0M g$opt*$9577$F0M)))
                                 '#f)))
                            g$ls/false$9576$F0M))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$9578$F0M)
                         (g$bless$7532$F0M
                           (list
                             'quote
                             (g$file-options-spec$6565$F0M
                               (map g$id->sym$7292$F0M g$opt*$9578$F0M))))))
                      g$ls/false$9576$F0M)
                    (g$syntax-violation$7680$F0M
                      '#f
                      '"invalid syntax"
                      g$t$9575$F0M))))
               (g$syntax-dispatch$7569$F0M g$t$9575$F0M '(_ . each-any)))))
           g$x$9573$F0M)))))
   (g$symbol-macro$7578$F0M
     g$symbol-macro$11069$F0M
     (case-lambda
       ((g$x$9580$F0M g$set$9581$F0M)
        ((case-lambda
           ((g$t$9582$F0M)
            ((case-lambda
               ((g$ls/false$9583$F0M)
                (if (if g$ls/false$9583$F0M
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$9584$F0M)
                             (if (g$id?$7291$F0M g$name$9584$F0M)
                               (begin
                                 '#f
                                 (g$memq$5008$F0M
                                   (g$id->sym$7292$F0M g$name$9584$F0M)
                                   g$set$9581$F0M))
                               '#f)))
                          g$ls/false$9583$F0M))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$9585$F0M)
                       (g$bless$7532$F0M (list 'quote g$name$9585$F0M))))
                    g$ls/false$9583$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$9582$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$9582$F0M '(_ any)))))
         g$x$9580$F0M))))
   (g$macro-transformer$7579$F0M
     g$macro-transformer$11070$F0M
     (case-lambda
       ((g$x$9586$F0M)
        (if (procedure? g$x$9586$F0M)
          g$x$9586$F0M
          (if (symbol? g$x$9586$F0M)
            ((case-lambda
               ((g$t$9587$F0M)
                (if (g$memv$5009$F0M g$t$9587$F0M '(define-record-type))
                  g$define-record-type-macro$7563$F0M
                  (if (g$memv$5009$F0M g$t$9587$F0M '(define-struct))
                    g$define-struct-macro$7562$F0M
                    (if (g$memv$5009$F0M g$t$9587$F0M '(include))
                      g$include-macro$7557$F0M
                      (if (g$memv$5009$F0M g$t$9587$F0M '(cond))
                        g$cond-macro$7555$F0M
                        (if (g$memv$5009$F0M g$t$9587$F0M '(let))
                          g$let-macro$7535$F0M
                          (if (g$memv$5009$F0M g$t$9587$F0M '(do))
                            g$do-macro$7551$F0M
                            (if (g$memv$5009$F0M g$t$9587$F0M '(or))
                              g$or-macro$7553$F0M
                              (if (g$memv$5009$F0M g$t$9587$F0M '(and))
                                g$and-macro$7554$F0M
                                (if (g$memv$5009$F0M g$t$9587$F0M '(let*))
                                  g$let*-macro$7552$F0M
                                  (if (g$memv$5009$F0M
                                        g$t$9587$F0M
                                        '(let-values))
                                    g$let-values-macro$7536$F0M
                                    (if (g$memv$5009$F0M
                                          g$t$9587$F0M
                                          '(let*-values))
                                      g$let*-values-macro$7537$F0M
                                      (if (g$memv$5009$F0M
                                            g$t$9587$F0M
                                            '(syntax-rules))
                                        g$syntax-rules-macro$7559$F0M
                                        (if (g$memv$5009$F0M
                                              g$t$9587$F0M
                                              '(quasiquote))
                                          g$quasiquote-macro$7560$F0M
                                          (if (g$memv$5009$F0M
                                                g$t$9587$F0M
                                                '(quasisyntax))
                                            g$quasisyntax-macro$7561$F0M
                                            (if (g$memv$5009$F0M
                                                  g$t$9587$F0M
                                                  '(with-syntax))
                                              g$with-syntax-macro$7533$F0M
                                              (if (g$memv$5009$F0M
                                                    g$t$9587$F0M
                                                    '(when))
                                                g$when-macro$7525$F0M
                                                (if (g$memv$5009$F0M
                                                      g$t$9587$F0M
                                                      '(unless))
                                                  g$unless-macro$7526$F0M
                                                  (if (g$memv$5009$F0M
                                                        g$t$9587$F0M
                                                        '(case))
                                                    g$case-macro$7528$F0M
                                                    (if (g$memv$5009$F0M
                                                          g$t$9587$F0M
                                                          '(identifier-syntax))
                                                      g$identifier-syntax-macro$7550$F0M
                                                      (if (g$memv$5009$F0M
                                                            g$t$9587$F0M
                                                            '(time))
                                                        g$time-macro$7546$F0M
                                                        (if (g$memv$5009$F0M
                                                              g$t$9587$F0M
                                                              '(delay))
                                                          g$delay-macro$7547$F0M
                                                          (if (g$memv$5009$F0M
                                                                g$t$9587$F0M
                                                                '(assert))
                                                            g$assert-macro$7548$F0M
                                                            (if (g$memv$5009$F0M
                                                                  g$t$9587$F0M
                                                                  '(endianness))
                                                              g$endianness-macro$7549$F0M
                                                              (if (g$memv$5009$F0M
                                                                    g$t$9587$F0M
                                                                    '(guard))
                                                                g$guard-macro$7544$F0M
                                                                (if (g$memv$5009$F0M
                                                                      g$t$9587$F0M
                                                                      '(define-enumeration))
                                                                  g$define-enumeration-macro$7545$F0M
                                                                  (if (g$memv$5009$F0M
                                                                        g$t$9587$F0M
                                                                        '(trace-lambda))
                                                                    g$trace-lambda-macro$7538$F0M
                                                                    (if (g$memv$5009$F0M
                                                                          g$t$9587$F0M
                                                                          '(trace-define))
                                                                      g$trace-define-macro$7539$F0M
                                                                      (if (g$memv$5009$F0M
                                                                            g$t$9587$F0M
                                                                            '(trace-define-syntax))
                                                                        g$trace-define-syntax-macro$7540$F0M
                                                                        (if (g$memv$5009$F0M
                                                                              g$t$9587$F0M
                                                                              '(trace-let-syntax))
                                                                          g$trace-let-syntax-macro$7542$F0M
                                                                          (if (g$memv$5009$F0M
                                                                                g$t$9587$F0M
                                                                                '(trace-letrec-syntax))
                                                                            g$trace-letrec-syntax-macro$7543$F0M
                                                                            (if (g$memv$5009$F0M
                                                                                  g$t$9587$F0M
                                                                                  '(define-condition-type))
                                                                              g$define-condition-type-macro$7564$F0M
                                                                              (if (g$memv$5009$F0M
                                                                                    g$t$9587$F0M
                                                                                    '(parameterize))
                                                                                g$parameterize-macro$7566$F0M
                                                                                (if (g$memv$5009$F0M
                                                                                      g$t$9587$F0M
                                                                                      '(include-into))
                                                                                  g$include-into-macro$7558$F0M
                                                                                  (if (g$memv$5009$F0M
                                                                                        g$t$9587$F0M
                                                                                        '(eol-style))
                                                                                    (case-lambda
                                                                                      ((g$x$9588$F0M)
                                                                                       (g$symbol-macro$7578$F0M
                                                                                         g$x$9588$F0M
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (g$memv$5009$F0M
                                                                                          g$t$9587$F0M
                                                                                          '(error-handling-mode))
                                                                                      (case-lambda
                                                                                        ((g$x$9589$F0M)
                                                                                         (g$symbol-macro$7578$F0M
                                                                                           g$x$9589$F0M
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (g$memv$5009$F0M
                                                                                            g$t$9587$F0M
                                                                                            '(buffer-mode))
                                                                                        (case-lambda
                                                                                          ((g$x$9590$F0M)
                                                                                           (g$symbol-macro$7578$F0M
                                                                                             g$x$9590$F0M
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (g$memv$5009$F0M
                                                                                              g$t$9587$F0M
                                                                                              '(file-options))
                                                                                          g$file-options-macro$7577$F0M
                                                                                          (if (g$memv$5009$F0M
                                                                                                g$t$9587$F0M
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$7565$F0M
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$9586$F0M)))))))))))))))))))))))))))))))))))))))))
             g$x$9586$F0M)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$9586$F0M))))))
   (g$local-macro-transformer$7580$F0M
     g$local-macro-transformer$11071$F0M
     (case-lambda ((g$x$9591$F0M) (car g$x$9591$F0M))))
   (g$do-macro-call$7581$F0M
     g$do-macro-call$11072$F0M
     (case-lambda
       ((g$transformer$9592$F0M g$expr$9593$F0M)
        ((case-lambda
           ((g$out$9594$F0M)
            (begin
              ((letrec ((g$f$9595$F0M
                          (case-lambda
                            ((g$x$9596$F0M)
                             (if (not (g$stx?$7263$F0M g$x$9596$F0M))
                               (if (pair? g$x$9596$F0M)
                                 (begin
                                   (g$f$9595$F0M (car g$x$9596$F0M))
                                   (g$f$9595$F0M (cdr g$x$9596$F0M)))
                                 (if (vector? g$x$9596$F0M)
                                   (vector-for-each g$f$9595$F0M g$x$9596$F0M)
                                   (if (symbol? g$x$9596$F0M)
                                     (g$syntax-violation$7680$F0M
                                       '#f
                                       '"raw symbol encountered in output of macro"
                                       g$expr$9593$F0M
                                       g$x$9596$F0M)
                                     (void))))
                               (void))))))
                 g$f$9595$F0M)
               g$out$9594$F0M)
              (g$add-mark$7280$F0M
                (g$gen-mark$7275$F0M)
                g$out$9594$F0M
                g$expr$9593$F0M))))
         (g$transformer$9592$F0M
           (g$add-mark$7280$F0M g$anti-mark$7276$F0M g$expr$9593$F0M '#f))))))
   (g$chi-macro$7582$F0M
     g$chi-macro$11073$F0M
     (case-lambda
       ((g$p$9597$F0M g$e$9598$F0M)
        (g$do-macro-call$7581$F0M
          (g$macro-transformer$7579$F0M g$p$9597$F0M)
          g$e$9598$F0M))))
   (g$chi-local-macro$7583$F0M
     g$chi-local-macro$11074$F0M
     (case-lambda
       ((g$p$9599$F0M g$e$9600$F0M)
        (g$do-macro-call$7581$F0M
          (g$local-macro-transformer$7580$F0M g$p$9599$F0M)
          g$e$9600$F0M))))
   (g$chi-global-macro$7584$F0M
     g$chi-global-macro$11075$F0M
     (case-lambda
       ((g$p$9601$F0M g$e$9602$F0M)
        ((case-lambda
           ((g$lib$9603$F0M g$loc$9604$F0M)
            (begin
              (g$visit-library$7102$F0M g$lib$9603$F0M)
              ((case-lambda
                 ((g$x$9605$F0M)
                  ((case-lambda
                     ((g$transformer$9606$F0M)
                      (g$do-macro-call$7581$F0M
                        g$transformer$9606$F0M
                        g$e$9602$F0M)))
                   (if (procedure? g$x$9605$F0M)
                     g$x$9605$F0M
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$9605$F0M)))))
               (symbol-value g$loc$9604$F0M)))))
         (car g$p$9601$F0M)
         (cdr g$p$9601$F0M)))))
   (g$chi-expr*$7585$F0M
     g$chi-expr*$11076$F0M
     (case-lambda
       ((g$e*$9607$F0M g$r$9608$F0M g$mr$9609$F0M)
        (if (null? g$e*$9607$F0M)
          '()
          ((case-lambda
             ((g$e$9610$F0M)
              (cons
                g$e$9610$F0M
                (g$chi-expr*$7585$F0M
                  (cdr g$e*$9607$F0M)
                  g$r$9608$F0M
                  g$mr$9609$F0M))))
           (g$chi-expr$7587$F0M
             (car g$e*$9607$F0M)
             g$r$9608$F0M
             g$mr$9609$F0M))))))
   (g$chi-application$7586$F0M
     g$chi-application$11077$F0M
     (case-lambda
       ((g$e$9611$F0M g$r$9612$F0M g$mr$9613$F0M)
        ((case-lambda
           ((g$t$9614$F0M)
            ((case-lambda
               ((g$ls/false$9615$F0M)
                (if g$ls/false$9615$F0M
                  (apply
                    (case-lambda
                      ((g$rator$9616$F0M g$rands$9617$F0M)
                       ((case-lambda
                          ((g$rator$9618$F0M)
                           (cons
                             g$rator$9618$F0M
                             (g$chi-expr*$7585$F0M
                               g$rands$9617$F0M
                               g$r$9612$F0M
                               g$mr$9613$F0M))))
                        (g$chi-expr$7587$F0M
                          g$rator$9616$F0M
                          g$r$9612$F0M
                          g$mr$9613$F0M))))
                    g$ls/false$9615$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$9614$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$9614$F0M '(any . each-any)))))
         g$e$9611$F0M))))
   (g$chi-expr$7587$F0M
     g$chi-expr$11078$F0M
     (case-lambda
       ((g$e$9619$F0M g$r$9620$F0M g$mr$9621$F0M)
        (call-with-values
          (case-lambda (() (g$syntax-type$7311$F0M g$e$9619$F0M g$r$9620$F0M)))
          (case-lambda
            ((g$type$9625$F0M g$value$9626$F0M g$kwd$9627$F0M)
             ((case-lambda
                ((g$kwd$9628$F0M g$value$9629$F0M g$type$9630$F0M)
                 ((case-lambda
                    ((g$t$9631$F0M)
                     (if (g$memv$5009$F0M g$t$9631$F0M '(core-macro))
                       ((case-lambda
                          ((g$transformer$9632$F0M)
                           (g$transformer$9632$F0M
                             g$e$9619$F0M
                             g$r$9620$F0M
                             g$mr$9621$F0M)))
                        (g$core-macro-transformer$7576$F0M g$value$9629$F0M))
                       (if (g$memv$5009$F0M g$t$9631$F0M '(global))
                         ((case-lambda
                            ((g$lib$9633$F0M)
                             ((case-lambda
                                ((g$loc$9634$F0M)
                                 ((case-lambda
                                    (()
                                     (begin
                                       ((g$inv-collector$7621$F0M)
                                        g$lib$9633$F0M)
                                       g$loc$9634$F0M))))))
                              (cdr g$value$9629$F0M))))
                          (car g$value$9629$F0M))
                         (if (g$memv$5009$F0M g$t$9631$F0M '(core-prim))
                           ((case-lambda
                              ((g$name$9635$F0M)
                               (list 'primitive g$name$9635$F0M)))
                            g$value$9629$F0M)
                           (if (g$memv$5009$F0M g$t$9631$F0M '(call))
                             (g$chi-application$7586$F0M
                               g$e$9619$F0M
                               g$r$9620$F0M
                               g$mr$9621$F0M)
                             (if (g$memv$5009$F0M g$t$9631$F0M '(lexical))
                               ((case-lambda ((g$lex$9636$F0M) g$lex$9636$F0M))
                                (g$lexical-var$7513$F0M g$value$9629$F0M))
                               (if (g$memv$5009$F0M
                                     g$t$9631$F0M
                                     '(global-macro global-macro!))
                                 (g$chi-expr$7587$F0M
                                   (g$chi-global-macro$7584$F0M
                                     g$value$9629$F0M
                                     g$e$9619$F0M)
                                   g$r$9620$F0M
                                   g$mr$9621$F0M)
                                 (if (g$memv$5009$F0M
                                       g$t$9631$F0M
                                       '(local-macro local-macro!))
                                   (g$chi-expr$7587$F0M
                                     (g$chi-local-macro$7583$F0M
                                       g$value$9629$F0M
                                       g$e$9619$F0M)
                                     g$r$9620$F0M
                                     g$mr$9621$F0M)
                                   (if (g$memv$5009$F0M
                                         g$t$9631$F0M
                                         '(macro macro!))
                                     (g$chi-expr$7587$F0M
                                       (g$chi-macro$7582$F0M
                                         g$value$9629$F0M
                                         g$e$9619$F0M)
                                       g$r$9620$F0M
                                       g$mr$9621$F0M)
                                     (if (g$memv$5009$F0M
                                           g$t$9631$F0M
                                           '(constant))
                                       ((case-lambda
                                          ((g$datum$9637$F0M)
                                           (list 'quote g$datum$9637$F0M)))
                                        g$value$9629$F0M)
                                       (if (g$memv$5009$F0M
                                             g$t$9631$F0M
                                             '(set!))
                                         (g$chi-set!$7588$F0M
                                           g$e$9619$F0M
                                           g$r$9620$F0M
                                           g$mr$9621$F0M)
                                         (if (g$memv$5009$F0M
                                               g$t$9631$F0M
                                               '(begin))
                                           ((case-lambda
                                              ((g$t$9638$F0M)
                                               ((case-lambda
                                                  ((g$ls/false$9639$F0M)
                                                   (if g$ls/false$9639$F0M
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9640$F0M
                                                            g$x*$9641$F0M)
                                                          (g$build-sequence$7220$F0M
                                                            '#f
                                                            (g$chi-expr*$7585$F0M
                                                              (cons
                                                                g$x$9640$F0M
                                                                g$x*$9641$F0M)
                                                              g$r$9620$F0M
                                                              g$mr$9621$F0M))))
                                                       g$ls/false$9639$F0M)
                                                     (g$syntax-violation$7680$F0M
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9638$F0M))))
                                                (g$syntax-dispatch$7569$F0M
                                                  g$t$9638$F0M
                                                  '(_ any . each-any)))))
                                            g$e$9619$F0M)
                                           (if (g$memv$5009$F0M
                                                 g$t$9631$F0M
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$9642$F0M)
                                                 ((case-lambda
                                                    ((g$ls/false$9643$F0M)
                                                     (if (if g$ls/false$9643$F0M
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$9644$F0M
                                                                    g$xrhs*$9645$F0M
                                                                    g$xbody$9646$F0M
                                                                    g$xbody*$9647$F0M)
                                                                  (if (not (g$valid-bound-ids?$7296$F0M
                                                                             g$xlhs*$9644$F0M))
                                                                    (g$syntax-violation$7680$F0M
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$9619$F0M)
                                                                    (void))))
                                                               g$ls/false$9643$F0M))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$9648$F0M
                                                              g$xrhs*$9649$F0M
                                                              g$xbody$9650$F0M
                                                              g$xbody*$9651$F0M)
                                                            ((case-lambda
                                                               ((g$xlab*$9652$F0M)
                                                                ((case-lambda
                                                                   ((g$xrib$9653$F0M)
                                                                    ((case-lambda
                                                                       ((g$xb*$9654$F0M)
                                                                        ((case-lambda
                                                                           (()
                                                                            (g$build-sequence$7220$F0M
                                                                              '#f
                                                                              (g$chi-expr*$7585$F0M
                                                                                (map (case-lambda
                                                                                       ((g$x$9655$F0M)
                                                                                        (g$add-subst$7281$F0M
                                                                                          g$xrib$9653$F0M
                                                                                          g$x$9655$F0M)))
                                                                                     (cons
                                                                                       g$xbody$9650$F0M
                                                                                       g$xbody*$9651$F0M))
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$9652$F0M
                                                                                       g$xb*$9654$F0M)
                                                                                  g$r$9620$F0M)
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$9652$F0M
                                                                                       g$xb*$9654$F0M)
                                                                                  g$mr$9621$F0M))))))))
                                                                     (map (case-lambda
                                                                            ((g$x$9656$F0M)
                                                                             (g$make-eval-transformer$7323$F0M
                                                                               (g$expand-transformer$7614$F0M
                                                                                 (if (eq? g$type$9630$F0M
                                                                                          'let-syntax)
                                                                                   g$x$9656$F0M
                                                                                   (g$add-subst$7281$F0M
                                                                                     g$xrib$9653$F0M
                                                                                     g$x$9656$F0M))
                                                                                 g$mr$9621$F0M))))
                                                                          g$xrhs*$9649$F0M))))
                                                                 (g$make-full-rib$7259$F0M
                                                                   g$xlhs*$9648$F0M
                                                                   g$xlab*$9652$F0M))))
                                                             (map g$gen-label$7232$F0M
                                                                  g$xlhs*$9648$F0M))))
                                                         g$ls/false$9643$F0M)
                                                       (g$syntax-violation$7680$F0M
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$9642$F0M))))
                                                  (g$syntax-dispatch$7569$F0M
                                                    g$t$9642$F0M
                                                    '(_ #(each (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$9619$F0M)
                                             (if (g$memv$5009$F0M
                                                   g$t$9631$F0M
                                                   '(displaced-lexical))
                                               (g$syntax-violation$7680$F0M
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$9619$F0M)
                                               (if (g$memv$5009$F0M
                                                     g$t$9631$F0M
                                                     '(syntax))
                                                 (g$syntax-violation$7680$F0M
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$9619$F0M)
                                                 (if (g$memv$5009$F0M
                                                       g$t$9631$F0M
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$7680$F0M
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$9657$F0M)
                                                           (if (g$memv$5009$F0M
                                                                 g$t$9657$F0M
                                                                 '(define))
                                                             '"a definition"
                                                             (if (g$memv$5009$F0M
                                                                   g$t$9657$F0M
                                                                   '(define-syntax))
                                                               '"a define-syntax"
                                                               (if (g$memv$5009$F0M
                                                                     g$t$9657$F0M
                                                                     '(module))
                                                                 '"a module definition"
                                                                 (if (g$memv$5009$F0M
                                                                       g$t$9657$F0M
                                                                       '(library))
                                                                   '"a library definition"
                                                                   (if (g$memv$5009$F0M
                                                                         g$t$9657$F0M
                                                                         '(import))
                                                                     '"an import declaration"
                                                                     (if (g$memv$5009$F0M
                                                                           g$t$9657$F0M
                                                                           '(export))
                                                                       '"an export declaration"
                                                                       '"a non-expression"))))))))
                                                        g$type$9630$F0M)
                                                       '" was found where an expression was expected")
                                                     g$e$9619$F0M)
                                                   (if (g$memv$5009$F0M
                                                         g$t$9631$F0M
                                                         '(mutable))
                                                     (g$syntax-violation$7680$F0M
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$9619$F0M)
                                                     (g$syntax-violation$7680$F0M
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$9619$F0M)))))))))))))))))))
                  g$type$9630$F0M)))
              g$kwd$9627$F0M
              g$value$9626$F0M
              g$type$9625$F0M)))))))
   (g$chi-set!$7588$F0M
     g$chi-set!$11079$F0M
     (case-lambda
       ((g$e$9658$F0M g$r$9659$F0M g$mr$9660$F0M)
        ((case-lambda
           ((g$t$9661$F0M)
            ((case-lambda
               ((g$ls/false$9662$F0M)
                (if (if g$ls/false$9662$F0M
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$9663$F0M g$v$9664$F0M)
                             (g$id?$7291$F0M g$x$9663$F0M)))
                          g$ls/false$9662$F0M))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$9665$F0M g$v$9666$F0M)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$7311$F0M g$x$9665$F0M g$r$9659$F0M)))
                         (case-lambda
                           ((g$type$9670$F0M g$value$9671$F0M g$kwd$9672$F0M)
                            ((case-lambda
                               ((g$kwd$9673$F0M
                                  g$value$9674$F0M
                                  g$type$9675$F0M)
                                ((case-lambda
                                   ((g$t$9676$F0M)
                                    (if (g$memv$5009$F0M
                                          g$t$9676$F0M
                                          '(lexical))
                                      (begin
                                        (g$set-lexical-mutable!$7515$F0M
                                          g$value$9674$F0M
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$7513$F0M
                                            g$value$9674$F0M)
                                          (g$chi-expr$7587$F0M
                                            g$v$9666$F0M
                                            g$r$9659$F0M
                                            g$mr$9660$F0M)))
                                      (if (g$memv$5009$F0M
                                            g$t$9676$F0M
                                            '(core-prim))
                                        (g$syntax-violation$7680$F0M
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$9658$F0M)
                                        (if (g$memv$5009$F0M
                                              g$t$9676$F0M
                                              '(global))
                                          (g$syntax-violation$7680$F0M
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$9658$F0M)
                                          (if (g$memv$5009$F0M
                                                g$t$9676$F0M
                                                '(global-macro!))
                                            (g$chi-expr$7587$F0M
                                              (g$chi-global-macro$7584$F0M
                                                g$value$9674$F0M
                                                g$e$9658$F0M)
                                              g$r$9659$F0M
                                              g$mr$9660$F0M)
                                            (if (g$memv$5009$F0M
                                                  g$t$9676$F0M
                                                  '(local-macro!))
                                              (g$chi-expr$7587$F0M
                                                (g$chi-local-macro$7583$F0M
                                                  g$value$9674$F0M
                                                  g$e$9658$F0M)
                                                g$r$9659$F0M
                                                g$mr$9660$F0M)
                                              (if (g$memv$5009$F0M
                                                    g$t$9676$F0M
                                                    '(mutable))
                                                (g$syntax-violation$7680$F0M
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$9658$F0M)
                                                (g$syntax-violation$7680$F0M
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$9658$F0M)))))))))
                                 g$type$9675$F0M)))
                             g$kwd$9672$F0M
                             g$value$9671$F0M
                             g$type$9670$F0M))))))
                    g$ls/false$9662$F0M)
                  (g$syntax-violation$7680$F0M
                    '#f
                    '"invalid syntax"
                    g$t$9661$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$9661$F0M '(_ any any)))))
         g$e$9658$F0M))))
   (g$verify-formals$7589$F0M
     g$verify-formals$11080$F0M
     (case-lambda
       ((g$fmls$9677$F0M g$stx$9678$F0M)
        ((case-lambda
           ((g$t$9679$F0M)
            ((case-lambda
               ((g$ls/false$9680$F0M)
                (if g$ls/false$9680$F0M
                  (apply
                    (case-lambda
                      ((g$x*$9681$F0M)
                       (if (not (g$valid-bound-ids?$7296$F0M g$x*$9681$F0M))
                         (g$invalid-fmls-error$7534$F0M
                           g$stx$9678$F0M
                           g$fmls$9677$F0M)
                         (void))))
                    g$ls/false$9680$F0M)
                  ((case-lambda
                     ((g$t$9682$F0M)
                      ((case-lambda
                         ((g$ls/false$9683$F0M)
                          (if g$ls/false$9683$F0M
                            (apply
                              (case-lambda
                                ((g$x*$9684$F0M g$x$9685$F0M)
                                 (if (not (g$valid-bound-ids?$7296$F0M
                                            (cons g$x$9685$F0M g$x*$9684$F0M)))
                                   (g$invalid-fmls-error$7534$F0M
                                     g$stx$9678$F0M
                                     g$fmls$9677$F0M)
                                   (void))))
                              g$ls/false$9683$F0M)
                            ((case-lambda
                               ((g$t$9686$F0M)
                                ((case-lambda
                                   ((g$ls/false$9687$F0M)
                                    (if g$ls/false$9687$F0M
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7680$F0M
                                             '#f
                                             '"invalid syntax"
                                             g$stx$9678$F0M)))
                                        g$ls/false$9687$F0M)
                                      (g$syntax-violation$7680$F0M
                                        '#f
                                        '"invalid syntax"
                                        g$t$9686$F0M))))
                                 (g$syntax-dispatch$7569$F0M g$t$9686$F0M '_))))
                             g$t$9682$F0M))))
                       (g$syntax-dispatch$7569$F0M
                         g$t$9682$F0M
                         '#(each+ any () any)))))
                   g$t$9679$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$9679$F0M 'each-any))))
         g$fmls$9677$F0M))))
   (g$chi-lambda-clause$7590$F0M
     g$chi-lambda-clause$11081$F0M
     (case-lambda
       ((g$stx$9688$F0M
          g$fmls$9689$F0M
          g$body*$9690$F0M
          g$r$9691$F0M
          g$mr$9692$F0M)
        ((case-lambda
           ((g$t$9693$F0M)
            ((case-lambda
               ((g$ls/false$9694$F0M)
                (if g$ls/false$9694$F0M
                  (apply
                    (case-lambda
                      ((g$x*$9695$F0M)
                       (begin
                         (g$verify-formals$7589$F0M
                           g$fmls$9689$F0M
                           g$stx$9688$F0M)
                         ((case-lambda
                            ((g$lex*$9696$F0M g$lab*$9697$F0M)
                             (values
                               g$lex*$9696$F0M
                               (g$chi-internal$7598$F0M
                                 (g$add-subst$7281$F0M
                                   (g$make-full-rib$7259$F0M
                                     g$x*$9695$F0M
                                     g$lab*$9697$F0M)
                                   g$body*$9690$F0M)
                                 (g$add-lexicals$7517$F0M
                                   g$lab*$9697$F0M
                                   g$lex*$9696$F0M
                                   g$r$9691$F0M)
                                 g$mr$9692$F0M))))
                          (map g$gen-lexical$7230$F0M g$x*$9695$F0M)
                          (map g$gen-label$7232$F0M g$x*$9695$F0M)))))
                    g$ls/false$9694$F0M)
                  ((case-lambda
                     ((g$t$9698$F0M)
                      ((case-lambda
                         ((g$ls/false$9699$F0M)
                          (if g$ls/false$9699$F0M
                            (apply
                              (case-lambda
                                ((g$x*$9700$F0M g$x$9701$F0M)
                                 (begin
                                   (g$verify-formals$7589$F0M
                                     g$fmls$9689$F0M
                                     g$stx$9688$F0M)
                                   ((case-lambda
                                      ((g$lex*$9702$F0M
                                         g$lab*$9703$F0M
                                         g$lex$9704$F0M
                                         g$lab$9705$F0M)
                                       (values
                                         (append g$lex*$9702$F0M g$lex$9704$F0M)
                                         (g$chi-internal$7598$F0M
                                           (g$add-subst$7281$F0M
                                             (g$make-full-rib$7259$F0M
                                               (cons g$x$9701$F0M g$x*$9700$F0M)
                                               (cons
                                                 g$lab$9705$F0M
                                                 g$lab*$9703$F0M))
                                             g$body*$9690$F0M)
                                           (g$add-lexicals$7517$F0M
                                             (cons
                                               g$lab$9705$F0M
                                               g$lab*$9703$F0M)
                                             (cons
                                               g$lex$9704$F0M
                                               g$lex*$9702$F0M)
                                             g$r$9691$F0M)
                                           g$mr$9692$F0M))))
                                    (map g$gen-lexical$7230$F0M g$x*$9700$F0M)
                                    (map g$gen-label$7232$F0M g$x*$9700$F0M)
                                    (g$gen-lexical$7230$F0M g$x$9701$F0M)
                                    (g$gen-label$7232$F0M g$x$9701$F0M)))))
                              g$ls/false$9699$F0M)
                            ((case-lambda
                               ((g$t$9706$F0M)
                                ((case-lambda
                                   ((g$ls/false$9707$F0M)
                                    (if g$ls/false$9707$F0M
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7680$F0M
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$9689$F0M)))
                                        g$ls/false$9707$F0M)
                                      (g$syntax-violation$7680$F0M
                                        '#f
                                        '"invalid syntax"
                                        g$t$9706$F0M))))
                                 (g$syntax-dispatch$7569$F0M g$t$9706$F0M '_))))
                             g$t$9698$F0M))))
                       (g$syntax-dispatch$7569$F0M
                         g$t$9698$F0M
                         '#(each+ any () any)))))
                   g$t$9693$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$9693$F0M 'each-any))))
         g$fmls$9689$F0M))))
   (g$chi-lambda-clause*$7591$F0M
     g$chi-lambda-clause*$11082$F0M
     (case-lambda
       ((g$stx$9708$F0M
          g$fmls*$9709$F0M
          g$body**$9710$F0M
          g$r$9711$F0M
          g$mr$9712$F0M)
        (if (null? g$fmls*$9709$F0M)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$7590$F0M
                 g$stx$9708$F0M
                 (car g$fmls*$9709$F0M)
                 (car g$body**$9710$F0M)
                 g$r$9711$F0M
                 g$mr$9712$F0M)))
            (case-lambda
              ((g$a$9715$F0M g$b$9716$F0M)
               ((case-lambda
                  ((g$b$9717$F0M g$a$9718$F0M)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$7591$F0M
                          g$stx$9708$F0M
                          (cdr g$fmls*$9709$F0M)
                          (cdr g$body**$9710$F0M)
                          g$r$9711$F0M
                          g$mr$9712$F0M)))
                     (case-lambda
                       ((g$a*$9721$F0M g$b*$9722$F0M)
                        ((case-lambda
                           ((g$b*$9723$F0M g$a*$9724$F0M)
                            (values
                              (cons g$a$9718$F0M g$a*$9724$F0M)
                              (cons g$b$9717$F0M g$b*$9723$F0M))))
                         g$b*$9722$F0M
                         g$a*$9721$F0M))))))
                g$b$9716$F0M
                g$a$9715$F0M))))))))
   (g$chi-defun$7592$F0M
     g$chi-defun$11083$F0M
     (case-lambda
       ((g$x$9725$F0M g$r$9726$F0M g$mr$9727$F0M)
        ((case-lambda
           ((g$fmls$9728$F0M g$body*$9729$F0M)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$7590$F0M
                   g$fmls$9728$F0M
                   g$fmls$9728$F0M
                   g$body*$9729$F0M
                   g$r$9726$F0M
                   g$mr$9727$F0M)))
              (case-lambda
                ((g$fmls$9732$F0M g$body$9733$F0M)
                 ((case-lambda
                    ((g$body$9734$F0M g$fmls$9735$F0M)
                     (g$build-lambda$7217$F0M
                       '#f
                       g$fmls$9735$F0M
                       g$body$9734$F0M)))
                  g$body$9733$F0M
                  g$fmls$9732$F0M))))))
         (car g$x$9725$F0M)
         (cdr g$x$9725$F0M)))))
   (g$chi-rhs$7593$F0M
     g$chi-rhs$11084$F0M
     (case-lambda
       ((g$rhs$9736$F0M g$r$9737$F0M g$mr$9738$F0M)
        ((case-lambda
           ((g$t$9739$F0M)
            (if (g$memv$5009$F0M g$t$9739$F0M '(defun))
              (g$chi-defun$7592$F0M
                (cdr g$rhs$9736$F0M)
                g$r$9737$F0M
                g$mr$9738$F0M)
              (if (g$memv$5009$F0M g$t$9739$F0M '(expr))
                ((case-lambda
                   ((g$expr$9740$F0M)
                    (g$chi-expr$7587$F0M
                      g$expr$9740$F0M
                      g$r$9737$F0M
                      g$mr$9738$F0M)))
                 (cdr g$rhs$9736$F0M))
                (if (g$memv$5009$F0M g$t$9739$F0M '(top-expr))
                  ((case-lambda
                     ((g$expr$9741$F0M)
                      (g$build-sequence$7220$F0M
                        '#f
                        (list
                          (g$chi-expr$7587$F0M
                            g$expr$9741$F0M
                            g$r$9737$F0M
                            g$mr$9738$F0M)
                          (g$build-void$7221$F0M)))))
                   (cdr g$rhs$9736$F0M))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$9736$F0M))))))
         (car g$rhs$9736$F0M)))))
   (g$expand-interaction-rhs*/init*$7594$F0M
     g$expand-interaction-rhs*/init*$11085$F0M
     (case-lambda
       ((g$lhs*$9742$F0M
          g$rhs*$9743$F0M
          g$init*$9744$F0M
          g$r$9745$F0M
          g$mr$9746$F0M)
        ((letrec ((g$f$9747$F0M
                    (case-lambda
                      ((g$lhs*$9748$F0M g$rhs*$9749$F0M)
                       (if (null? g$lhs*$9748$F0M)
                         (map (case-lambda
                                ((g$x$9750$F0M)
                                 (g$chi-expr$7587$F0M
                                   g$x$9750$F0M
                                   g$r$9745$F0M
                                   g$mr$9746$F0M)))
                              g$init*$9744$F0M)
                         ((case-lambda
                            ((g$lhs$9751$F0M g$rhs$9752$F0M)
                             ((case-lambda
                                ((g$t$9753$F0M)
                                 (if (g$memv$5009$F0M g$t$9753$F0M '(defun))
                                   ((case-lambda
                                      ((g$rhs$9754$F0M)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$9751$F0M
                                           g$rhs$9754$F0M)
                                         (g$f$9747$F0M
                                           (cdr g$lhs*$9748$F0M)
                                           (cdr g$rhs*$9749$F0M)))))
                                    (g$chi-defun$7592$F0M
                                      (cdr g$rhs$9752$F0M)
                                      g$r$9745$F0M
                                      g$mr$9746$F0M))
                                   (if (g$memv$5009$F0M g$t$9753$F0M '(expr))
                                     ((case-lambda
                                        ((g$rhs$9755$F0M)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$9751$F0M
                                             g$rhs$9755$F0M)
                                           (g$f$9747$F0M
                                             (cdr g$lhs*$9748$F0M)
                                             (cdr g$rhs*$9749$F0M)))))
                                      (g$chi-expr$7587$F0M
                                        (cdr g$rhs$9752$F0M)
                                        g$r$9745$F0M
                                        g$mr$9746$F0M))
                                     (if (g$memv$5009$F0M
                                           g$t$9753$F0M
                                           '(top-expr))
                                       ((case-lambda
                                          ((g$e$9756$F0M)
                                           (cons
                                             g$e$9756$F0M
                                             (g$f$9747$F0M
                                               (cdr g$lhs*$9748$F0M)
                                               (cdr g$rhs*$9749$F0M)))))
                                        (g$chi-expr$7587$F0M
                                          (cdr g$rhs$9752$F0M)
                                          g$r$9745$F0M
                                          g$mr$9746$F0M))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$9752$F0M))))))
                              (car g$rhs$9752$F0M))))
                          (car g$lhs*$9748$F0M)
                          (car g$rhs*$9749$F0M)))))))
           g$f$9747$F0M)
         g$lhs*$9742$F0M
         g$rhs*$9743$F0M))))
   (g$chi-rhs*$7595$F0M
     g$chi-rhs*$11086$F0M
     (case-lambda
       ((g$rhs*$9757$F0M g$r$9758$F0M g$mr$9759$F0M)
        ((letrec ((g$f$9760$F0M
                    (case-lambda
                      ((g$ls$9761$F0M)
                       (if (null? g$ls$9761$F0M)
                         '()
                         ((case-lambda
                            ((g$a$9762$F0M)
                             (cons
                               g$a$9762$F0M
                               (g$f$9760$F0M (cdr g$ls$9761$F0M)))))
                          (g$chi-rhs$7593$F0M
                            (car g$ls$9761$F0M)
                            g$r$9758$F0M
                            g$mr$9759$F0M)))))))
           g$f$9760$F0M)
         g$rhs*$9757$F0M))))
   (g$find-bound=?$7596$F0M
     g$find-bound=?$11087$F0M
     (case-lambda
       ((g$x$9763$F0M g$lhs*$9764$F0M g$rhs*$9765$F0M)
        (if (null? g$lhs*$9764$F0M)
          '#f
          (if (g$bound-id=?$7294$F0M g$x$9763$F0M (car g$lhs*$9764$F0M))
            (car g$rhs*$9765$F0M)
            (g$find-bound=?$7596$F0M
              g$x$9763$F0M
              (cdr g$lhs*$9764$F0M)
              (cdr g$rhs*$9765$F0M)))))))
   (g$find-dups$7597$F0M
     g$find-dups$11088$F0M
     (case-lambda
       ((g$ls$9766$F0M)
        ((letrec ((g$f$9767$F0M
                    (case-lambda
                      ((g$ls$9768$F0M g$dups$9769$F0M)
                       (if (null? g$ls$9768$F0M)
                         g$dups$9769$F0M
                         ((case-lambda
                            ((g$t$9770$F0M)
                             (if g$t$9770$F0M
                               ((case-lambda
                                  ((g$x$9771$F0M)
                                   (g$f$9767$F0M
                                     (cdr g$ls$9768$F0M)
                                     (cons
                                       (list (car g$ls$9768$F0M) g$x$9771$F0M)
                                       g$dups$9769$F0M))))
                                g$t$9770$F0M)
                               (g$f$9767$F0M
                                 (cdr g$ls$9768$F0M)
                                 g$dups$9769$F0M))))
                          (g$find-bound=?$7596$F0M
                            (car g$ls$9768$F0M)
                            (cdr g$ls$9768$F0M)
                            (cdr g$ls$9768$F0M))))))))
           g$f$9767$F0M)
         g$ls$9766$F0M
         '()))))
   (g$chi-internal$7598$F0M
     g$chi-internal$11089$F0M
     (case-lambda
       ((g$e*$9772$F0M g$r$9773$F0M g$mr$9774$F0M)
        ((case-lambda
           ((g$rib$9775$F0M)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$7613$F0M
                   (map (case-lambda
                          ((g$x$9784$F0M)
                           (g$add-subst$7281$F0M g$rib$9775$F0M g$x$9784$F0M)))
                        (g$syntax->list$7290$F0M g$e*$9772$F0M))
                   g$r$9773$F0M
                   g$mr$9774$F0M
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$9775$F0M
                   '#f)))
              (case-lambda
                ((g$e*$9785$F0M
                   g$r$9786$F0M
                   g$mr$9787$F0M
                   g$lex*$9788$F0M
                   g$rhs*$9789$F0M
                   g$mod**$9790$F0M
                   g$kwd*$9791$F0M
                   g$_exp*$9792$F0M)
                 ((case-lambda
                    ((g$_exp*$9793$F0M
                       g$kwd*$9794$F0M
                       g$mod**$9795$F0M
                       g$rhs*$9796$F0M
                       g$lex*$9797$F0M
                       g$mr$9798$F0M
                       g$r$9799$F0M
                       g$e*$9800$F0M)
                     (begin
                       (if (null? g$e*$9800$F0M)
                         (g$syntax-violation$7680$F0M
                           '#f
                           '"no expression in body"
                           g$e*$9800$F0M)
                         (void))
                       ((case-lambda
                          ((g$init*$9801$F0M)
                           ((case-lambda
                              ((g$rhs*$9802$F0M)
                               ((case-lambda
                                  (()
                                   (g$build-letrec*$7223$F0M
                                     '#f
                                     (reverse g$lex*$9797$F0M)
                                     (reverse g$rhs*$9802$F0M)
                                     (g$build-sequence$7220$F0M
                                       '#f
                                       g$init*$9801$F0M)))))))
                            (g$chi-rhs*$7595$F0M
                              g$rhs*$9796$F0M
                              g$r$9799$F0M
                              g$mr$9798$F0M))))
                        (g$chi-expr*$7585$F0M
                          (append
                            (apply append (reverse g$mod**$9795$F0M))
                            g$e*$9800$F0M)
                          g$r$9799$F0M
                          g$mr$9798$F0M)))))
                  g$_exp*$9792$F0M
                  g$kwd*$9791$F0M
                  g$mod**$9790$F0M
                  g$rhs*$9789$F0M
                  g$lex*$9788$F0M
                  g$mr$9787$F0M
                  g$r$9786$F0M
                  g$e*$9785$F0M))))))
         (g$make-empty-rib$7251$F0M)))))
   (g$parse-module$7599$F0M
     g$parse-module$11090$F0M
     (case-lambda
       ((g$e$9803$F0M)
        ((case-lambda
           ((g$t$9804$F0M)
            ((case-lambda
               ((g$ls/false$9805$F0M)
                (if g$ls/false$9805$F0M
                  (apply
                    (case-lambda
                      ((g$export*$9806$F0M g$b*$9807$F0M)
                       (begin
                         (if (not (g$for-all$5014$F0M
                                    g$id?$7291$F0M
                                    g$export*$9806$F0M))
                           (g$syntax-violation$7680$F0M
                             '#f
                             '"module exports must be identifiers"
                             g$e$9803$F0M)
                           (void))
                         (values
                           '#f
                           (list->vector g$export*$9806$F0M)
                           g$b*$9807$F0M))))
                    g$ls/false$9805$F0M)
                  ((case-lambda
                     ((g$t$9808$F0M)
                      ((case-lambda
                         ((g$ls/false$9809$F0M)
                          (if g$ls/false$9809$F0M
                            (apply
                              (case-lambda
                                ((g$name$9810$F0M
                                   g$export*$9811$F0M
                                   g$b*$9812$F0M)
                                 (begin
                                   (if (not (g$id?$7291$F0M g$name$9810$F0M))
                                     (g$syntax-violation$7680$F0M
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$9803$F0M)
                                     (void))
                                   (if (not (g$for-all$5014$F0M
                                              g$id?$7291$F0M
                                              g$export*$9811$F0M))
                                     (g$syntax-violation$7680$F0M
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$9803$F0M)
                                     (void))
                                   (values
                                     g$name$9810$F0M
                                     (list->vector g$export*$9811$F0M)
                                     g$b*$9812$F0M))))
                              g$ls/false$9809$F0M)
                            (g$syntax-violation$7680$F0M
                              '#f
                              '"invalid syntax"
                              g$t$9808$F0M))))
                       (g$syntax-dispatch$7569$F0M
                         g$t$9808$F0M
                         '(_ any each-any . each-any)))))
                   g$t$9804$F0M))))
             (g$syntax-dispatch$7569$F0M
               g$t$9804$F0M
               '(_ each-any . each-any)))))
         g$e$9803$F0M))))
   (g$8729$7600$F0M
     g$8729$11091$F0M
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$8732$F0M
       '#t
       '#t
       '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec))))
   (g$8731$7601$F0M g$8731$11092$F0M '#f)
   (g$8730$7602$F0M
     g$8730$11093$F0M
     (make-record-constructor-descriptor
       g$8729$7600$F0M
       '#f
       g$8731$7601$F0M))
   (g$module-interface?$7603$F0M
     g$module-interface?$11094$F0M
     (record-predicate g$8729$7600$F0M))
   (g$make-module-interface$7604$F0M
     g$make-module-interface$11095$F0M
     (record-constructor g$8730$7602$F0M))
   (g$module-interface-first-mark$7605$F0M
     g$module-interface-first-mark$11096$F0M
     (record-accessor g$8729$7600$F0M '0))
   (g$module-interface-exp-id-vec$7606$F0M
     g$module-interface-exp-id-vec$11097$F0M
     (record-accessor g$8729$7600$F0M '1))
   (g$module-interface-exp-lab-vec$7607$F0M
     g$module-interface-exp-lab-vec$11098$F0M
     (record-accessor g$8729$7600$F0M '2))
   (g$set-module-interface-first-mark!$7608$F0M
     g$set-module-interface-first-mark!$11099$F0M
     (record-mutator g$8729$7600$F0M '0))
   (g$set-module-interface-exp-id-vec!$7609$F0M
     g$set-module-interface-exp-id-vec!$11100$F0M
     (record-mutator g$8729$7600$F0M '1))
   (g$set-module-interface-exp-lab-vec!$7610$F0M
     g$set-module-interface-exp-lab-vec!$11101$F0M
     (record-mutator g$8729$7600$F0M '2))
   (g$module-interface-exp-id*$7611$F0M
     g$module-interface-exp-id*$11102$F0M
     (case-lambda
       ((g$iface$9813$F0M g$id$9814$F0M)
        (letrec* ((g$diff-marks$9815$F0M
                    (case-lambda
                      ((g$ls$9819$F0M g$x$9820$F0M)
                       (begin
                         (if (null? g$ls$9819$F0M)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$9821$F0M)
                             (if (eq? g$a$9821$F0M g$x$9820$F0M)
                               '()
                               (cons
                                 g$a$9821$F0M
                                 (g$diff-marks$9815$F0M
                                   (cdr g$ls$9819$F0M)
                                   g$x$9820$F0M)))))
                          (car g$ls$9819$F0M)))))))
          ((case-lambda
             ((g$diff$9816$F0M g$id-vec$9817$F0M)
              (if (null? g$diff$9816$F0M)
                g$id-vec$9817$F0M
                (vector-map
                  (case-lambda
                    ((g$x$9818$F0M)
                     (g$make-stx$7264$F0M
                       (g$stx-expr$7265$F0M g$x$9818$F0M)
                       (append
                         g$diff$9816$F0M
                         (g$stx-mark*$7266$F0M g$x$9818$F0M))
                       '()
                       '())))
                  g$id-vec$9817$F0M))))
           (g$diff-marks$9815$F0M
             (g$stx-mark*$7266$F0M g$id$9814$F0M)
             (g$module-interface-first-mark$7605$F0M g$iface$9813$F0M))
           (g$module-interface-exp-id-vec$7606$F0M g$iface$9813$F0M))))))
   (g$chi-internal-module$7612$F0M
     g$chi-internal-module$11103$F0M
     (case-lambda
       ((g$e$9822$F0M
          g$r$9823$F0M
          g$mr$9824$F0M
          g$lex*$9825$F0M
          g$rhs*$9826$F0M
          g$mod**$9827$F0M
          g$kwd*$9828$F0M)
        (call-with-values
          (case-lambda (() (g$parse-module$7599$F0M g$e$9822$F0M)))
          (case-lambda
            ((g$name$9832$F0M g$exp-id*$9833$F0M g$e*$9834$F0M)
             ((case-lambda
                ((g$e*$9835$F0M g$exp-id*$9836$F0M g$name$9837$F0M)
                 ((case-lambda
                    ((g$rib$9838$F0M)
                     ((case-lambda
                        ((g$e*$9839$F0M)
                         ((case-lambda
                            (()
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$chi-body*$7613$F0M
                                    g$e*$9839$F0M
                                    g$r$9823$F0M
                                    g$mr$9824$F0M
                                    g$lex*$9825$F0M
                                    g$rhs*$9826$F0M
                                    g$mod**$9827$F0M
                                    g$kwd*$9828$F0M
                                    '()
                                    g$rib$9838$F0M
                                    '#f)))
                               (case-lambda
                                 ((g$e*$9848$F0M
                                    g$r$9849$F0M
                                    g$mr$9850$F0M
                                    g$lex*$9851$F0M
                                    g$rhs*$9852$F0M
                                    g$mod**$9853$F0M
                                    g$kwd*$9854$F0M
                                    g$_exp*$9855$F0M)
                                  ((case-lambda
                                     ((g$_exp*$9856$F0M
                                        g$kwd*$9857$F0M
                                        g$mod**$9858$F0M
                                        g$rhs*$9859$F0M
                                        g$lex*$9860$F0M
                                        g$mr$9861$F0M
                                        g$r$9862$F0M
                                        g$e*$9863$F0M)
                                      ((case-lambda
                                         ((g$exp-lab*$9864$F0M g$mod**$9865$F0M)
                                          (if (not g$name$9837$F0M)
                                            (values
                                              g$lex*$9860$F0M
                                              g$rhs*$9859$F0M
                                              g$exp-id*$9836$F0M
                                              g$exp-lab*$9864$F0M
                                              g$r$9862$F0M
                                              g$mr$9861$F0M
                                              g$mod**$9865$F0M
                                              g$kwd*$9857$F0M)
                                            ((case-lambda
                                               ((g$lab$9866$F0M
                                                  g$iface$9867$F0M)
                                                (values
                                                  g$lex*$9860$F0M
                                                  g$rhs*$9859$F0M
                                                  (vector g$name$9837$F0M)
                                                  (vector g$lab$9866$F0M)
                                                  (cons
                                                    (cons
                                                      g$lab$9866$F0M
                                                      (cons
                                                        '$module
                                                        g$iface$9867$F0M))
                                                    g$r$9862$F0M)
                                                  (cons
                                                    (cons
                                                      g$lab$9866$F0M
                                                      (cons
                                                        '$module
                                                        g$iface$9867$F0M))
                                                    g$mr$9861$F0M)
                                                  g$mod**$9865$F0M
                                                  g$kwd*$9857$F0M)))
                                             (g$gen-label$7232$F0M 'module)
                                             (g$make-module-interface$7604$F0M
                                               (car (g$stx-mark*$7266$F0M
                                                      g$name$9837$F0M))
                                               (vector-map
                                                 (case-lambda
                                                   ((g$x$9868$F0M)
                                                    (g$make-stx$7264$F0M
                                                      (g$stx-expr$7265$F0M
                                                        g$x$9868$F0M)
                                                      (g$stx-mark*$7266$F0M
                                                        g$x$9868$F0M)
                                                      '()
                                                      '())))
                                                 g$exp-id*$9836$F0M)
                                               g$exp-lab*$9864$F0M)))))
                                       (vector-map
                                         (case-lambda
                                           ((g$x$9869$F0M)
                                            ((case-lambda
                                               ((g$t$9870$F0M)
                                                (if g$t$9870$F0M
                                                  g$t$9870$F0M
                                                  (begin
                                                    '#f
                                                    (g$syntax-violation$7680$F0M
                                                      '#f
                                                      '"cannot find module export"
                                                      g$x$9869$F0M)))))
                                             (g$id->label$7304$F0M
                                               (g$make-stx$7264$F0M
                                                 (g$id->sym$7292$F0M
                                                   g$x$9869$F0M)
                                                 (g$stx-mark*$7266$F0M
                                                   g$x$9869$F0M)
                                                 (list g$rib$9838$F0M)
                                                 '())))))
                                         g$exp-id*$9836$F0M)
                                       (cons g$e*$9863$F0M g$mod**$9858$F0M))))
                                   g$_exp*$9855$F0M
                                   g$kwd*$9854$F0M
                                   g$mod**$9853$F0M
                                   g$rhs*$9852$F0M
                                   g$lex*$9851$F0M
                                   g$mr$9850$F0M
                                   g$r$9849$F0M
                                   g$e*$9848$F0M)))))))))
                      (map (case-lambda
                             ((g$x$9871$F0M)
                              (g$add-subst$7281$F0M
                                g$rib$9838$F0M
                                g$x$9871$F0M)))
                           (g$syntax->list$7290$F0M g$e*$9835$F0M)))))
                  (g$make-empty-rib$7251$F0M))))
              g$e*$9834$F0M
              g$exp-id*$9833$F0M
              g$name$9832$F0M)))))))
   (g$chi-body*$7613$F0M
     g$chi-body*$11104$F0M
     (case-lambda
       ((g$e*$9872$F0M
          g$r$9873$F0M
          g$mr$9874$F0M
          g$lex*$9875$F0M
          g$rhs*$9876$F0M
          g$mod**$9877$F0M
          g$kwd*$9878$F0M
          g$exp*$9879$F0M
          g$rib$9880$F0M
          g$top?$9881$F0M)
        (if (null? g$e*$9872$F0M)
          (values
            g$e*$9872$F0M
            g$r$9873$F0M
            g$mr$9874$F0M
            g$lex*$9875$F0M
            g$rhs*$9876$F0M
            g$mod**$9877$F0M
            g$kwd*$9878$F0M
            g$exp*$9879$F0M)
          ((case-lambda
             ((g$e$9882$F0M)
              (call-with-values
                (case-lambda
                  (() (g$syntax-type$7311$F0M g$e$9882$F0M g$r$9873$F0M)))
                (case-lambda
                  ((g$type$9886$F0M g$value$9887$F0M g$kwd$9888$F0M)
                   ((case-lambda
                      ((g$kwd$9889$F0M g$value$9890$F0M g$type$9891$F0M)
                       ((case-lambda
                          ((g$kwd*$9892$F0M)
                           ((case-lambda
                              ((g$t$9893$F0M)
                               (if (g$memv$5009$F0M g$t$9893$F0M '(define))
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$7509$F0M g$e$9882$F0M)))
                                   (case-lambda
                                     ((g$id$9896$F0M g$rhs$9897$F0M)
                                      ((case-lambda
                                         ((g$rhs$9898$F0M g$id$9899$F0M)
                                          (begin
                                            (if (g$bound-id-member?$7298$F0M
                                                  g$id$9899$F0M
                                                  g$kwd*$9892$F0M)
                                              (g$syntax-violation$7680$F0M
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$9882$F0M)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$7234$F0M
                                                   g$id$9899$F0M
                                                   g$rib$9880$F0M)))
                                              (case-lambda
                                                ((g$lab$9902$F0M g$lex$9903$F0M)
                                                 ((case-lambda
                                                    ((g$lex$9904$F0M
                                                       g$lab$9905$F0M)
                                                     (begin
                                                       (g$extend-rib!$7254$F0M
                                                         g$rib$9880$F0M
                                                         g$id$9899$F0M
                                                         g$lab$9905$F0M)
                                                       (g$chi-body*$7613$F0M
                                                         (cdr g$e*$9872$F0M)
                                                         (g$add-lexical$7516$F0M
                                                           g$lab$9905$F0M
                                                           g$lex$9904$F0M
                                                           g$r$9873$F0M)
                                                         g$mr$9874$F0M
                                                         (cons
                                                           g$lex$9904$F0M
                                                           g$lex*$9875$F0M)
                                                         (cons
                                                           g$rhs$9898$F0M
                                                           g$rhs*$9876$F0M)
                                                         g$mod**$9877$F0M
                                                         g$kwd*$9892$F0M
                                                         g$exp*$9879$F0M
                                                         g$rib$9880$F0M
                                                         g$top?$9881$F0M))))
                                                  g$lex$9903$F0M
                                                  g$lab$9902$F0M)))))))
                                       g$rhs$9897$F0M
                                       g$id$9896$F0M))))
                                 (if (g$memv$5009$F0M
                                       g$t$9893$F0M
                                       '(define-syntax))
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$7510$F0M
                                          g$e$9882$F0M)))
                                     (case-lambda
                                       ((g$id$9908$F0M g$rhs$9909$F0M)
                                        ((case-lambda
                                           ((g$rhs$9910$F0M g$id$9911$F0M)
                                            (begin
                                              (if (g$bound-id-member?$7298$F0M
                                                    g$id$9911$F0M
                                                    g$kwd*$9892$F0M)
                                                (g$syntax-violation$7680$F0M
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$9882$F0M)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$9912$F0M
                                                    g$expanded-rhs$9913$F0M)
                                                  (begin
                                                    (g$extend-rib!$7254$F0M
                                                      g$rib$9880$F0M
                                                      g$id$9911$F0M
                                                      g$lab$9912$F0M)
                                                    ((case-lambda
                                                       ((g$b$9914$F0M)
                                                        (g$chi-body*$7613$F0M
                                                          (cdr g$e*$9872$F0M)
                                                          (cons
                                                            (cons
                                                              g$lab$9912$F0M
                                                              g$b$9914$F0M)
                                                            g$r$9873$F0M)
                                                          (cons
                                                            (cons
                                                              g$lab$9912$F0M
                                                              g$b$9914$F0M)
                                                            g$mr$9874$F0M)
                                                          g$lex*$9875$F0M
                                                          g$rhs*$9876$F0M
                                                          g$mod**$9877$F0M
                                                          g$kwd*$9892$F0M
                                                          g$exp*$9879$F0M
                                                          g$rib$9880$F0M
                                                          g$top?$9881$F0M)))
                                                     (g$make-eval-transformer$7323$F0M
                                                       g$expanded-rhs$9913$F0M)))))
                                               (g$gen-define-label$7235$F0M
                                                 g$id$9911$F0M
                                                 g$rib$9880$F0M)
                                               (g$expand-transformer$7614$F0M
                                                 g$rhs$9910$F0M
                                                 g$mr$9874$F0M)))))
                                         g$rhs$9909$F0M
                                         g$id$9908$F0M))))
                                   (if (g$memv$5009$F0M
                                         g$t$9893$F0M
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$9915$F0M)
                                         ((case-lambda
                                            ((g$ls/false$9916$F0M)
                                             (if (if g$ls/false$9916$F0M
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$9917$F0M
                                                            g$xrhs*$9918$F0M
                                                            g$xbody*$9919$F0M)
                                                          (if (not (g$valid-bound-ids?$7296$F0M
                                                                     g$xlhs*$9917$F0M))
                                                            (g$syntax-violation$7680$F0M
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$9882$F0M)
                                                            (void))))
                                                       g$ls/false$9916$F0M))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$9920$F0M
                                                      g$xrhs*$9921$F0M
                                                      g$xbody*$9922$F0M)
                                                    ((case-lambda
                                                       ((g$xlab*$9923$F0M)
                                                        ((case-lambda
                                                           ((g$xrib$9924$F0M)
                                                            ((case-lambda
                                                               ((g$xb*$9925$F0M)
                                                                ((case-lambda
                                                                   (()
                                                                    (g$chi-body*$7613$F0M
                                                                      (append
                                                                        (map (case-lambda
                                                                               ((g$x$9926$F0M)
                                                                                (g$add-subst$7281$F0M
                                                                                  g$xrib$9924$F0M
                                                                                  g$x$9926$F0M)))
                                                                             g$xbody*$9922$F0M)
                                                                        (cdr g$e*$9872$F0M))
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$9923$F0M
                                                                             g$xb*$9925$F0M)
                                                                        g$r$9873$F0M)
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$9923$F0M
                                                                             g$xb*$9925$F0M)
                                                                        g$mr$9874$F0M)
                                                                      g$lex*$9875$F0M
                                                                      g$rhs*$9876$F0M
                                                                      g$mod**$9877$F0M
                                                                      g$kwd*$9892$F0M
                                                                      g$exp*$9879$F0M
                                                                      g$rib$9880$F0M
                                                                      g$top?$9881$F0M))))))
                                                             (map (case-lambda
                                                                    ((g$x$9927$F0M)
                                                                     (g$make-eval-transformer$7323$F0M
                                                                       (g$expand-transformer$7614$F0M
                                                                         (if (eq? g$type$9891$F0M
                                                                                  'let-syntax)
                                                                           g$x$9927$F0M
                                                                           (g$add-subst$7281$F0M
                                                                             g$xrib$9924$F0M
                                                                             g$x$9927$F0M))
                                                                         g$mr$9874$F0M))))
                                                                  g$xrhs*$9921$F0M))))
                                                         (g$make-full-rib$7259$F0M
                                                           g$xlhs*$9920$F0M
                                                           g$xlab*$9923$F0M))))
                                                     (map g$gen-label$7232$F0M
                                                          g$xlhs*$9920$F0M))))
                                                 g$ls/false$9916$F0M)
                                               (g$syntax-violation$7680$F0M
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$9915$F0M))))
                                          (g$syntax-dispatch$7569$F0M
                                            g$t$9915$F0M
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$9882$F0M)
                                     (if (g$memv$5009$F0M g$t$9893$F0M '(begin))
                                       ((case-lambda
                                          ((g$t$9928$F0M)
                                           ((case-lambda
                                              ((g$ls/false$9929$F0M)
                                               (if g$ls/false$9929$F0M
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$9930$F0M)
                                                      (g$chi-body*$7613$F0M
                                                        (append
                                                          g$x*$9930$F0M
                                                          (cdr g$e*$9872$F0M))
                                                        g$r$9873$F0M
                                                        g$mr$9874$F0M
                                                        g$lex*$9875$F0M
                                                        g$rhs*$9876$F0M
                                                        g$mod**$9877$F0M
                                                        g$kwd*$9892$F0M
                                                        g$exp*$9879$F0M
                                                        g$rib$9880$F0M
                                                        g$top?$9881$F0M)))
                                                   g$ls/false$9929$F0M)
                                                 (g$syntax-violation$7680$F0M
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$9928$F0M))))
                                            (g$syntax-dispatch$7569$F0M
                                              g$t$9928$F0M
                                              '(_ . each-any)))))
                                        g$e$9882$F0M)
                                       (if (g$memv$5009$F0M
                                             g$t$9893$F0M
                                             '(global-macro global-macro!))
                                         (g$chi-body*$7613$F0M
                                           (cons
                                             (g$add-subst$7281$F0M
                                               g$rib$9880$F0M
                                               (g$chi-global-macro$7584$F0M
                                                 g$value$9890$F0M
                                                 g$e$9882$F0M))
                                             (cdr g$e*$9872$F0M))
                                           g$r$9873$F0M
                                           g$mr$9874$F0M
                                           g$lex*$9875$F0M
                                           g$rhs*$9876$F0M
                                           g$mod**$9877$F0M
                                           g$kwd*$9892$F0M
                                           g$exp*$9879$F0M
                                           g$rib$9880$F0M
                                           g$top?$9881$F0M)
                                         (if (g$memv$5009$F0M
                                               g$t$9893$F0M
                                               '(local-macro local-macro!))
                                           (g$chi-body*$7613$F0M
                                             (cons
                                               (g$add-subst$7281$F0M
                                                 g$rib$9880$F0M
                                                 (g$chi-local-macro$7583$F0M
                                                   g$value$9890$F0M
                                                   g$e$9882$F0M))
                                               (cdr g$e*$9872$F0M))
                                             g$r$9873$F0M
                                             g$mr$9874$F0M
                                             g$lex*$9875$F0M
                                             g$rhs*$9876$F0M
                                             g$mod**$9877$F0M
                                             g$kwd*$9892$F0M
                                             g$exp*$9879$F0M
                                             g$rib$9880$F0M
                                             g$top?$9881$F0M)
                                           (if (g$memv$5009$F0M
                                                 g$t$9893$F0M
                                                 '(macro macro!))
                                             (g$chi-body*$7613$F0M
                                               (cons
                                                 (g$add-subst$7281$F0M
                                                   g$rib$9880$F0M
                                                   (g$chi-macro$7582$F0M
                                                     g$value$9890$F0M
                                                     g$e$9882$F0M))
                                                 (cdr g$e*$9872$F0M))
                                               g$r$9873$F0M
                                               g$mr$9874$F0M
                                               g$lex*$9875$F0M
                                               g$rhs*$9876$F0M
                                               g$mod**$9877$F0M
                                               g$kwd*$9892$F0M
                                               g$exp*$9879$F0M
                                               g$rib$9880$F0M
                                               g$top?$9881$F0M)
                                             (if (g$memv$5009$F0M
                                                   g$t$9893$F0M
                                                   '(module))
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$7612$F0M
                                                      g$e$9882$F0M
                                                      g$r$9873$F0M
                                                      g$mr$9874$F0M
                                                      g$lex*$9875$F0M
                                                      g$rhs*$9876$F0M
                                                      g$mod**$9877$F0M
                                                      g$kwd*$9892$F0M)))
                                                 (case-lambda
                                                   ((g$lex*$9939$F0M
                                                      g$rhs*$9940$F0M
                                                      g$m-exp-id*$9941$F0M
                                                      g$m-exp-lab*$9942$F0M
                                                      g$r$9943$F0M
                                                      g$mr$9944$F0M
                                                      g$mod**$9945$F0M
                                                      g$kwd*$9946$F0M)
                                                    ((case-lambda
                                                       ((g$kwd*$9947$F0M
                                                          g$mod**$9948$F0M
                                                          g$mr$9949$F0M
                                                          g$r$9950$F0M
                                                          g$m-exp-lab*$9951$F0M
                                                          g$m-exp-id*$9952$F0M
                                                          g$rhs*$9953$F0M
                                                          g$lex*$9954$F0M)
                                                        (begin
                                                          (vector-for-each
                                                            (case-lambda
                                                              ((g$id$9955$F0M
                                                                 g$lab$9956$F0M)
                                                               (g$extend-rib!$7254$F0M
                                                                 g$rib$9880$F0M
                                                                 g$id$9955$F0M
                                                                 g$lab$9956$F0M)))
                                                            g$m-exp-id*$9952$F0M
                                                            g$m-exp-lab*$9951$F0M)
                                                          (g$chi-body*$7613$F0M
                                                            (cdr g$e*$9872$F0M)
                                                            g$r$9950$F0M
                                                            g$mr$9949$F0M
                                                            g$lex*$9954$F0M
                                                            g$rhs*$9953$F0M
                                                            g$mod**$9948$F0M
                                                            g$kwd*$9947$F0M
                                                            g$exp*$9879$F0M
                                                            g$rib$9880$F0M
                                                            g$top?$9881$F0M))))
                                                     g$kwd*$9946$F0M
                                                     g$mod**$9945$F0M
                                                     g$mr$9944$F0M
                                                     g$r$9943$F0M
                                                     g$m-exp-lab*$9942$F0M
                                                     g$m-exp-id*$9941$F0M
                                                     g$rhs*$9940$F0M
                                                     g$lex*$9939$F0M))))
                                               (if (g$memv$5009$F0M
                                                     g$t$9893$F0M
                                                     '(library))
                                                 (begin
                                                   (g$library-expander$7664$F0M
                                                     (g$stx->datum$7302$F0M
                                                       g$e$9882$F0M))
                                                   (g$chi-body*$7613$F0M
                                                     (cdr g$e*$9872$F0M)
                                                     g$r$9873$F0M
                                                     g$mr$9874$F0M
                                                     g$lex*$9875$F0M
                                                     g$rhs*$9876$F0M
                                                     g$mod**$9877$F0M
                                                     g$kwd*$9892$F0M
                                                     g$exp*$9879$F0M
                                                     g$rib$9880$F0M
                                                     g$top?$9881$F0M))
                                                 (if (g$memv$5009$F0M
                                                       g$t$9893$F0M
                                                       '(export))
                                                   ((case-lambda
                                                      ((g$t$9957$F0M)
                                                       ((case-lambda
                                                          ((g$ls/false$9958$F0M)
                                                           (if g$ls/false$9958$F0M
                                                             (apply
                                                               (case-lambda
                                                                 ((g$exp-decl*$9959$F0M)
                                                                  (g$chi-body*$7613$F0M
                                                                    (cdr g$e*$9872$F0M)
                                                                    g$r$9873$F0M
                                                                    g$mr$9874$F0M
                                                                    g$lex*$9875$F0M
                                                                    g$rhs*$9876$F0M
                                                                    g$mod**$9877$F0M
                                                                    g$kwd*$9892$F0M
                                                                    (append
                                                                      g$exp-decl*$9959$F0M
                                                                      g$exp*$9879$F0M)
                                                                    g$rib$9880$F0M
                                                                    g$top?$9881$F0M)))
                                                               g$ls/false$9958$F0M)
                                                             (g$syntax-violation$7680$F0M
                                                               '#f
                                                               '"invalid syntax"
                                                               g$t$9957$F0M))))
                                                        (g$syntax-dispatch$7569$F0M
                                                          g$t$9957$F0M
                                                          '(_ . each-any)))))
                                                    g$e$9882$F0M)
                                                   (if (g$memv$5009$F0M
                                                         g$t$9893$F0M
                                                         '(import))
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$9960$F0M
                                                                     (case-lambda
                                                                       ((g$e$10002$F0M)
                                                                        ((case-lambda
                                                                           ((g$t$10003$F0M)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10004$F0M)
                                                                                (if (if g$ls/false$10004$F0M
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10005$F0M)
                                                                                             (g$id?$7291$F0M
                                                                                               g$id$10005$F0M)))
                                                                                          g$ls/false$10004$F0M))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10006$F0M)
                                                                                       '#t))
                                                                                    g$ls/false$10004$F0M)
                                                                                  ((case-lambda
                                                                                     ((g$t$10007$F0M)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10008$F0M)
                                                                                          (if g$ls/false$10008$F0M
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$10009$F0M)
                                                                                                 '#f))
                                                                                              g$ls/false$10008$F0M)
                                                                                            ((case-lambda
                                                                                               ((g$t$10010$F0M)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$10011$F0M)
                                                                                                    (if g$ls/false$10011$F0M
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$7680$F0M
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$10002$F0M)))
                                                                                                        g$ls/false$10011$F0M)
                                                                                                      (g$syntax-violation$7680$F0M
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$10010$F0M))))
                                                                                                 (g$syntax-dispatch$7569$F0M
                                                                                                   g$t$10010$F0M
                                                                                                   '_))))
                                                                                             g$t$10007$F0M))))
                                                                                       (g$syntax-dispatch$7569$F0M
                                                                                         g$t$10007$F0M
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$10003$F0M))))
                                                                             (g$syntax-dispatch$7569$F0M
                                                                               g$t$10003$F0M
                                                                               '(_ any)))))
                                                                         g$e$10002$F0M))))
                                                                   (g$module-import$9961$F0M
                                                                     (case-lambda
                                                                       ((g$e$9985$F0M
                                                                          g$r$9986$F0M)
                                                                        ((case-lambda
                                                                           ((g$t$9987$F0M)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9988$F0M)
                                                                                (if (if g$ls/false$9988$F0M
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$9989$F0M)
                                                                                             (g$id?$7291$F0M
                                                                                               g$id$9989$F0M)))
                                                                                          g$ls/false$9988$F0M))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$9990$F0M)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$7311$F0M
                                                                                              g$id$9990$F0M
                                                                                              g$r$9986$F0M)))
                                                                                         (case-lambda
                                                                                           ((g$type$9994$F0M
                                                                                              g$value$9995$F0M
                                                                                              g$kwd$9996$F0M)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$9997$F0M
                                                                                                  g$value$9998$F0M
                                                                                                  g$type$9999$F0M)
                                                                                                ((case-lambda
                                                                                                   ((g$t$10000$F0M)
                                                                                                    (if (g$memv$5009$F0M
                                                                                                          g$t$10000$F0M
                                                                                                          '($module))
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$10001$F0M)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$7611$F0M
                                                                                                              g$iface$10001$F0M
                                                                                                              g$id$9990$F0M)
                                                                                                            (g$module-interface-exp-lab-vec$7607$F0M
                                                                                                              g$iface$10001$F0M))))
                                                                                                       g$value$9998$F0M)
                                                                                                      (g$syntax-violation$7680$F0M
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$9985$F0M))))
                                                                                                 g$type$9999$F0M)))
                                                                                             g$kwd$9996$F0M
                                                                                             g$value$9995$F0M
                                                                                             g$type$9994$F0M))))))
                                                                                    g$ls/false$9988$F0M)
                                                                                  (g$syntax-violation$7680$F0M
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$9987$F0M))))
                                                                             (g$syntax-dispatch$7569$F0M
                                                                               g$t$9987$F0M
                                                                               '(_ any)))))
                                                                         g$e$9985$F0M))))
                                                                   (g$library-import$9962$F0M
                                                                     (case-lambda
                                                                       ((g$e$9971$F0M)
                                                                        ((case-lambda
                                                                           ((g$t$9972$F0M)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9973$F0M)
                                                                                (if g$ls/false$9973$F0M
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$9974$F0M
                                                                                         g$imp*$9975$F0M)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$7618$F0M
                                                                                              (g$syntax->datum$7683$F0M
                                                                                                g$imp*$9975$F0M))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$9978$F0M
                                                                                              g$subst-labels$9979$F0M)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$9980$F0M
                                                                                                  g$subst-names$9981$F0M)
                                                                                                (values
                                                                                                  (vector-map
                                                                                                    (case-lambda
                                                                                                      ((g$name$9982$F0M)
                                                                                                       (g$datum->stx$7274$F0M
                                                                                                         g$ctxt$9974$F0M
                                                                                                         g$name$9982$F0M)))
                                                                                                    g$subst-names$9981$F0M)
                                                                                                  g$subst-labels$9980$F0M)))
                                                                                             g$subst-labels$9979$F0M
                                                                                             g$subst-names$9978$F0M))))))
                                                                                    g$ls/false$9973$F0M)
                                                                                  ((case-lambda
                                                                                     ((g$t$9983$F0M)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$9984$F0M)
                                                                                          (if g$ls/false$9984$F0M
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7680$F0M
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$9971$F0M)))
                                                                                              g$ls/false$9984$F0M)
                                                                                            (g$syntax-violation$7680$F0M
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$9983$F0M))))
                                                                                       (g$syntax-dispatch$7569$F0M
                                                                                         g$t$9983$F0M
                                                                                         '_))))
                                                                                   g$t$9972$F0M))))
                                                                             (g$syntax-dispatch$7569$F0M
                                                                               g$t$9972$F0M
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$9971$F0M)))))
                                                           (begin
                                                             (call-with-values
                                                               (case-lambda
                                                                 (()
                                                                  (if (g$module-import?$9960$F0M
                                                                        g$e$9882$F0M)
                                                                    (g$module-import$9961$F0M
                                                                      g$e$9882$F0M
                                                                      g$r$9873$F0M)
                                                                    (g$library-import$9962$F0M
                                                                      g$e$9882$F0M))))
                                                               (case-lambda
                                                                 ((g$id*$9965$F0M
                                                                    g$lab*$9966$F0M)
                                                                  ((case-lambda
                                                                     ((g$lab*$9967$F0M
                                                                        g$id*$9968$F0M)
                                                                      (vector-for-each
                                                                        (case-lambda
                                                                          ((g$id$9969$F0M
                                                                             g$lab$9970$F0M)
                                                                           (g$extend-rib!$7254$F0M
                                                                             g$rib$9880$F0M
                                                                             g$id$9969$F0M
                                                                             g$lab$9970$F0M)))
                                                                        g$id*$9968$F0M
                                                                        g$lab*$9967$F0M)))
                                                                   g$lab*$9966$F0M
                                                                   g$id*$9965$F0M))))
                                                             (g$chi-body*$7613$F0M
                                                               (cdr g$e*$9872$F0M)
                                                               g$r$9873$F0M
                                                               g$mr$9874$F0M
                                                               g$lex*$9875$F0M
                                                               g$rhs*$9876$F0M
                                                               g$mod**$9877$F0M
                                                               g$kwd*$9892$F0M
                                                               g$exp*$9879$F0M
                                                               g$rib$9880$F0M
                                                               g$top?$9881$F0M))))))
                                                     (if g$top?$9881$F0M
                                                       (g$chi-body*$7613$F0M
                                                         (cdr g$e*$9872$F0M)
                                                         g$r$9873$F0M
                                                         g$mr$9874$F0M
                                                         (cons
                                                           (g$gen-lexical$7230$F0M
                                                             'dummy)
                                                           g$lex*$9875$F0M)
                                                         (cons
                                                           (cons
                                                             'top-expr
                                                             g$e$9882$F0M)
                                                           g$rhs*$9876$F0M)
                                                         g$mod**$9877$F0M
                                                         g$kwd*$9892$F0M
                                                         g$exp*$9879$F0M
                                                         g$rib$9880$F0M
                                                         g$top?$9881$F0M)
                                                       (values
                                                         g$e*$9872$F0M
                                                         g$r$9873$F0M
                                                         g$mr$9874$F0M
                                                         g$lex*$9875$F0M
                                                         g$rhs*$9876$F0M
                                                         g$mod**$9877$F0M
                                                         g$kwd*$9892$F0M
                                                         g$exp*$9879$F0M)))))))))))))))
                            g$type$9891$F0M)))
                        (if (g$id?$7291$F0M g$kwd$9889$F0M)
                          (cons g$kwd$9889$F0M g$kwd*$9878$F0M)
                          g$kwd*$9878$F0M))))
                    g$kwd$9888$F0M
                    g$value$9887$F0M
                    g$type$9886$F0M))))))
           (car g$e*$9872$F0M))))))
   (g$expand-transformer$7614$F0M
     g$expand-transformer$11105$F0M
     (case-lambda
       ((g$expr$10012$F0M g$r$10013$F0M)
        ((case-lambda
           ((g$rtc$10014$F0M)
            ((case-lambda
               ((g$expanded-rhs$10015$F0M)
                (begin
                  (for-each
                    ((case-lambda
                       ((g$mark-visit$10016$F0M)
                        (case-lambda
                          ((g$x$10017$F0M)
                           (begin
                             (g$invoke-library$7101$F0M g$x$10017$F0M)
                             (g$mark-visit$10016$F0M g$x$10017$F0M))))))
                     (g$vis-collector$7622$F0M))
                    (g$rtc$10014$F0M))
                  g$expanded-rhs$10015$F0M)))
             ((case-lambda
                ((g$inv-collector$10022$F0M
                   g$vis-collector$10023$F0M
                   g$inv-collector$10024$F0M
                   g$vis-collector$10025$F0M)
                 ((case-lambda
                    ((g$swap$10026$F0M)
                     (dynamic-wind
                       g$swap$10026$F0M
                       (case-lambda
                         (()
                          (g$chi-expr$7587$F0M
                            g$expr$10012$F0M
                            g$r$10013$F0M
                            g$r$10013$F0M)))
                       g$swap$10026$F0M)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$10027$F0M)
                           (begin
                             (g$inv-collector$10022$F0M
                               g$inv-collector$10024$F0M)
                             (set! g$inv-collector$10024$F0M g$t$10027$F0M))))
                        (g$inv-collector$10022$F0M))
                       ((case-lambda
                          ((g$t$10028$F0M)
                           (begin
                             (g$vis-collector$10023$F0M
                               g$vis-collector$10025$F0M)
                             (set! g$vis-collector$10025$F0M g$t$10028$F0M))))
                        (g$vis-collector$10023$F0M))))))))
              g$inv-collector$7621$F0M
              g$vis-collector$7622$F0M
              g$rtc$10014$F0M
              (case-lambda ((g$x$10029$F0M) (values)))))))
         (g$make-collector$7620$F0M)))))
   (g$parse-exports$7615$F0M
     g$parse-exports$11106$F0M
     (case-lambda
       ((g$exp*$10030$F0M)
        ((letrec ((g$f$10031$F0M
                    (case-lambda
                      ((g$exp*$10032$F0M g$int*$10033$F0M g$ext*$10034$F0M)
                       (if (null? g$exp*$10032$F0M)
                         (begin
                           (if (not (g$valid-bound-ids?$7296$F0M
                                      g$ext*$10034$F0M))
                             (g$syntax-violation$7680$F0M
                               'export
                               '"invalid exports"
                               (g$find-dups$7597$F0M g$ext*$10034$F0M))
                             (void))
                           (values
                             (map g$syntax->datum$7683$F0M g$ext*$10034$F0M)
                             g$int*$10033$F0M))
                         ((case-lambda
                            ((g$t$10035$F0M)
                             ((case-lambda
                                ((g$ls/false$10036$F0M)
                                 (if g$ls/false$10036$F0M
                                   (apply
                                     (case-lambda
                                       ((g$rename$10037$F0M
                                          g$i*$10038$F0M
                                          g$e*$10039$F0M)
                                        (begin
                                          (if (not (if (eq? (g$syntax->datum$7683$F0M
                                                              g$rename$10037$F0M)
                                                            'rename)
                                                     (if (g$for-all$5014$F0M
                                                           g$id?$7291$F0M
                                                           g$i*$10038$F0M)
                                                       (begin
                                                         '#f
                                                         (g$for-all$5014$F0M
                                                           g$id?$7291$F0M
                                                           g$e*$10039$F0M))
                                                       '#f)
                                                     '#f))
                                            (g$syntax-violation$7680$F0M
                                              'export
                                              '"invalid export specifier"
                                              (car g$exp*$10032$F0M))
                                            (void))
                                          (g$f$10031$F0M
                                            (cdr g$exp*$10032$F0M)
                                            (append
                                              g$i*$10038$F0M
                                              g$int*$10033$F0M)
                                            (append
                                              g$e*$10039$F0M
                                              g$ext*$10034$F0M)))))
                                     g$ls/false$10036$F0M)
                                   ((case-lambda
                                      ((g$t$10040$F0M)
                                       ((case-lambda
                                          ((g$ls/false$10041$F0M)
                                           (if g$ls/false$10041$F0M
                                             (apply
                                               (case-lambda
                                                 ((g$ie$10042$F0M)
                                                  (begin
                                                    (if (not (g$id?$7291$F0M
                                                               g$ie$10042$F0M))
                                                      (g$syntax-violation$7680$F0M
                                                        'export
                                                        '"invalid export"
                                                        g$ie$10042$F0M)
                                                      (void))
                                                    (g$f$10031$F0M
                                                      (cdr g$exp*$10032$F0M)
                                                      (cons
                                                        g$ie$10042$F0M
                                                        g$int*$10033$F0M)
                                                      (cons
                                                        g$ie$10042$F0M
                                                        g$ext*$10034$F0M)))))
                                               g$ls/false$10041$F0M)
                                             (g$syntax-violation$7680$F0M
                                               '#f
                                               '"invalid syntax"
                                               g$t$10040$F0M))))
                                        (g$syntax-dispatch$7569$F0M
                                          g$t$10040$F0M
                                          'any))))
                                    g$t$10035$F0M))))
                              (g$syntax-dispatch$7569$F0M
                                g$t$10035$F0M
                                '(any . #(each (any any)))))))
                          (car g$exp*$10032$F0M)))))))
           g$f$10031$F0M)
         g$exp*$10030$F0M
         '()
         '()))))
   (g$parse-library-name$7616$F0M
     g$parse-library-name$11107$F0M
     (case-lambda
       ((g$spec$10043$F0M)
        (letrec* ((g$parse$10044$F0M
                    (case-lambda
                      ((g$x$10051$F0M)
                       ((case-lambda
                          ((g$t$10052$F0M)
                           ((case-lambda
                              ((g$ls/false$10053$F0M)
                               (if (if g$ls/false$10053$F0M
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$10054$F0M)
                                            (g$for-all$5014$F0M
                                              (case-lambda
                                                ((g$x$10055$F0M)
                                                 ((case-lambda
                                                    ((g$x$10056$F0M)
                                                     (if (integer?
                                                           g$x$10056$F0M)
                                                       (begin
                                                         '#f
                                                         (exact? g$x$10056$F0M))
                                                       '#f)))
                                                  (g$syntax->datum$7683$F0M
                                                    g$x$10055$F0M))))
                                              g$v*$10054$F0M)))
                                         g$ls/false$10053$F0M))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$10057$F0M)
                                      (values
                                        '()
                                        (map g$syntax->datum$7683$F0M
                                             g$v*$10057$F0M))))
                                   g$ls/false$10053$F0M)
                                 ((case-lambda
                                    ((g$t$10058$F0M)
                                     ((case-lambda
                                        ((g$ls/false$10059$F0M)
                                         (if (if g$ls/false$10059$F0M
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$10060$F0M
                                                        g$rest$10061$F0M)
                                                      (symbol?
                                                        (g$syntax->datum$7683$F0M
                                                          g$x$10060$F0M))))
                                                   g$ls/false$10059$F0M))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$10062$F0M g$rest$10063$F0M)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$10044$F0M
                                                       g$rest$10063$F0M)))
                                                  (case-lambda
                                                    ((g$x*$10066$F0M
                                                       g$v*$10067$F0M)
                                                     ((case-lambda
                                                        ((g$v*$10068$F0M
                                                           g$x*$10069$F0M)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$7683$F0M
                                                               g$x$10062$F0M)
                                                             g$x*$10069$F0M)
                                                           g$v*$10068$F0M)))
                                                      g$v*$10067$F0M
                                                      g$x*$10066$F0M))))))
                                             g$ls/false$10059$F0M)
                                           ((case-lambda
                                              ((g$t$10070$F0M)
                                               ((case-lambda
                                                  ((g$ls/false$10071$F0M)
                                                   (if g$ls/false$10071$F0M
                                                     (apply
                                                       (case-lambda
                                                         (() (values '() '())))
                                                       g$ls/false$10071$F0M)
                                                     ((case-lambda
                                                        ((g$t$10072$F0M)
                                                         ((case-lambda
                                                            ((g$ls/false$10073$F0M)
                                                             (if g$ls/false$10073$F0M
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$7680$F0M
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$10043$F0M)))
                                                                 g$ls/false$10073$F0M)
                                                               (g$syntax-violation$7680$F0M
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$10072$F0M))))
                                                          (g$syntax-dispatch$7569$F0M
                                                            g$t$10072$F0M
                                                            '_))))
                                                      g$t$10070$F0M))))
                                                (g$syntax-dispatch$7569$F0M
                                                  g$t$10070$F0M
                                                  '()))))
                                            g$t$10058$F0M))))
                                      (g$syntax-dispatch$7569$F0M
                                        g$t$10058$F0M
                                        '(any . any)))))
                                  g$t$10052$F0M))))
                            (g$syntax-dispatch$7569$F0M
                              g$t$10052$F0M
                              '(each-any)))))
                        g$x$10051$F0M)))))
          (call-with-values
            (case-lambda (() (g$parse$10044$F0M g$spec$10043$F0M)))
            (case-lambda
              ((g$name*$10047$F0M g$ver*$10048$F0M)
               ((case-lambda
                  ((g$ver*$10049$F0M g$name*$10050$F0M)
                   (begin
                     (if (null? g$name*$10050$F0M)
                       (g$syntax-violation$7680$F0M
                         '#f
                         '"empty library name"
                         g$spec$10043$F0M)
                       (void))
                     (values g$name*$10050$F0M g$ver*$10049$F0M))))
                g$ver*$10048$F0M
                g$name*$10047$F0M))))))))
   (g$parse-library$7617$F0M
     g$parse-library$11108$F0M
     (case-lambda
       ((g$e$10074$F0M)
        ((case-lambda
           ((g$t$10075$F0M)
            ((case-lambda
               ((g$ls/false$10076$F0M)
                (if (if g$ls/false$10076$F0M
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$10077$F0M
                               g$name*$10078$F0M
                               g$export$10079$F0M
                               g$exp*$10080$F0M
                               g$import$10081$F0M
                               g$imp*$10082$F0M
                               g$b*$10083$F0M)
                             (if (eq? (g$syntax->datum$7683$F0M
                                        g$export$10079$F0M)
                                      'export)
                               (if (eq? (g$syntax->datum$7683$F0M
                                          g$import$10081$F0M)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$7683$F0M
                                          g$library$10077$F0M)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$10076$F0M))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$10084$F0M
                         g$name*$10085$F0M
                         g$export$10086$F0M
                         g$exp*$10087$F0M
                         g$import$10088$F0M
                         g$imp*$10089$F0M
                         g$b*$10090$F0M)
                       (values
                         g$name*$10085$F0M
                         g$exp*$10087$F0M
                         g$imp*$10089$F0M
                         g$b*$10090$F0M)))
                    g$ls/false$10076$F0M)
                  ((case-lambda
                     ((g$t$10091$F0M)
                      ((case-lambda
                         ((g$ls/false$10092$F0M)
                          (if g$ls/false$10092$F0M
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7680$F0M
                                   '#f
                                   '"malformed library"
                                   g$e$10074$F0M)))
                              g$ls/false$10092$F0M)
                            (g$syntax-violation$7680$F0M
                              '#f
                              '"invalid syntax"
                              g$t$10091$F0M))))
                       (g$syntax-dispatch$7569$F0M g$t$10091$F0M '_))))
                   g$t$10075$F0M))))
             (g$syntax-dispatch$7569$F0M
               g$t$10075$F0M
               '(any each-any (any . each-any) (any . each-any) . each-any)))))
         g$e$10074$F0M))))
   (g$parse-import-spec*$7618$F0M
     g$parse-import-spec*$11109$F0M
     ((case-lambda
        (()
         (letrec* ((g$idsyn?$10093$F0M
                     (case-lambda
                       ((g$x$10354$F0M)
                        (symbol? (g$syntax->datum$7683$F0M g$x$10354$F0M)))))
                   (g$dup-error$10094$F0M
                     (case-lambda
                       ((g$name$10353$F0M)
                        (g$syntax-violation$7680$F0M
                          'import
                          '"two imports with different bindings"
                          g$name$10353$F0M))))
                   (g$merge-substs$10095$F0M
                     (case-lambda
                       ((g$s$10344$F0M g$subst$10345$F0M)
                        (letrec* ((g$insert-to-subst$10346$F0M
                                    (case-lambda
                                      ((g$a$10347$F0M g$subst$10348$F0M)
                                       ((case-lambda
                                          ((g$name$10349$F0M g$label$10350$F0M)
                                           ((case-lambda
                                              ((g$t$10351$F0M)
                                               (if g$t$10351$F0M
                                                 ((case-lambda
                                                    ((g$x$10352$F0M)
                                                     (if (eq? (cdr g$x$10352$F0M)
                                                              g$label$10350$F0M)
                                                       g$subst$10348$F0M
                                                       (g$dup-error$10094$F0M
                                                         g$name$10349$F0M))))
                                                  g$t$10351$F0M)
                                                 (cons
                                                   g$a$10347$F0M
                                                   g$subst$10348$F0M))))
                                            (g$assq$5004$F0M
                                              g$name$10349$F0M
                                              g$subst$10348$F0M))))
                                        (car g$a$10347$F0M)
                                        (cdr g$a$10347$F0M))))))
                          (if (null? g$s$10344$F0M)
                            g$subst$10345$F0M
                            (g$insert-to-subst$10346$F0M
                              (car g$s$10344$F0M)
                              (g$merge-substs$10095$F0M
                                (cdr g$s$10344$F0M)
                                g$subst$10345$F0M)))))))
                   (g$exclude*$10096$F0M
                     (case-lambda
                       ((g$sym*$10320$F0M g$subst$10321$F0M)
                        (letrec* ((g$exclude$10322$F0M
                                    (case-lambda
                                      ((g$sym$10335$F0M g$subst$10336$F0M)
                                       (if (null? g$subst$10336$F0M)
                                         (g$syntax-violation$7680$F0M
                                           'import
                                           '"cannot rename unbound identifier"
                                           g$sym$10335$F0M)
                                         (if (eq? g$sym$10335$F0M
                                                  (g$caar$5177$F0M
                                                    g$subst$10336$F0M))
                                           (values
                                             (g$cdar$5179$F0M g$subst$10336$F0M)
                                             (cdr g$subst$10336$F0M))
                                           ((case-lambda
                                              ((g$a$10337$F0M)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$exclude$10322$F0M
                                                      g$sym$10335$F0M
                                                      (cdr g$subst$10336$F0M))))
                                                 (case-lambda
                                                   ((g$old$10340$F0M
                                                      g$subst$10341$F0M)
                                                    ((case-lambda
                                                       ((g$subst$10342$F0M
                                                          g$old$10343$F0M)
                                                        (values
                                                          g$old$10343$F0M
                                                          (cons
                                                            g$a$10337$F0M
                                                            g$subst$10342$F0M))))
                                                     g$subst$10341$F0M
                                                     g$old$10340$F0M))))))
                                            (car g$subst$10336$F0M))))))))
                          (if (null? g$sym*$10320$F0M)
                            (values '() g$subst$10321$F0M)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$exclude$10322$F0M
                                   (car g$sym*$10320$F0M)
                                   g$subst$10321$F0M)))
                              (case-lambda
                                ((g$old$10325$F0M g$subst$10326$F0M)
                                 ((case-lambda
                                    ((g$subst$10327$F0M g$old$10328$F0M)
                                     (call-with-values
                                       (case-lambda
                                         (()
                                          (g$exclude*$10096$F0M
                                            (cdr g$sym*$10320$F0M)
                                            g$subst$10327$F0M)))
                                       (case-lambda
                                         ((g$old*$10331$F0M g$subst$10332$F0M)
                                          ((case-lambda
                                             ((g$subst$10333$F0M
                                                g$old*$10334$F0M)
                                              (values
                                                (cons
                                                  g$old$10328$F0M
                                                  g$old*$10334$F0M)
                                                g$subst$10333$F0M)))
                                           g$subst$10332$F0M
                                           g$old*$10331$F0M))))))
                                  g$subst$10326$F0M
                                  g$old$10325$F0M)))))))))
                   (g$find*$10097$F0M
                     (case-lambda
                       ((g$sym*$10316$F0M g$subst$10317$F0M)
                        (map (case-lambda
                               ((g$x$10318$F0M)
                                ((case-lambda
                                   ((g$t$10319$F0M)
                                    (if g$t$10319$F0M
                                      (cdr g$t$10319$F0M)
                                      (g$syntax-violation$7680$F0M
                                        'import
                                        '"cannot find identifier"
                                        g$x$10318$F0M))))
                                 (g$assq$5004$F0M
                                   g$x$10318$F0M
                                   g$subst$10317$F0M))))
                             g$sym*$10316$F0M))))
                   (g$rem*$10098$F0M
                     (case-lambda
                       ((g$sym*$10312$F0M g$subst$10313$F0M)
                        ((letrec ((g$f$10314$F0M
                                    (case-lambda
                                      ((g$subst$10315$F0M)
                                       (if (null? g$subst$10315$F0M)
                                         '()
                                         (if (g$memq$5008$F0M
                                               (g$caar$5177$F0M
                                                 g$subst$10315$F0M)
                                               g$sym*$10312$F0M)
                                           (g$f$10314$F0M
                                             (cdr g$subst$10315$F0M))
                                           (cons
                                             (car g$subst$10315$F0M)
                                             (g$f$10314$F0M
                                               (cdr g$subst$10315$F0M)))))))))
                           g$f$10314$F0M)
                         g$subst$10313$F0M))))
                   (g$remove-dups$10099$F0M
                     (case-lambda
                       ((g$ls$10311$F0M)
                        (if (null? g$ls$10311$F0M)
                          '()
                          (if (g$memq$5008$F0M
                                (car g$ls$10311$F0M)
                                (cdr g$ls$10311$F0M))
                            (g$remove-dups$10099$F0M (cdr g$ls$10311$F0M))
                            (cons
                              (car g$ls$10311$F0M)
                              (g$remove-dups$10099$F0M
                                (cdr g$ls$10311$F0M))))))))
                   (g$parse-library-name$10100$F0M
                     (case-lambda
                       ((g$spec$10195$F0M)
                        (letrec* ((g$subversion?$10196$F0M
                                    (case-lambda
                                      ((g$x$10309$F0M)
                                       ((case-lambda
                                          ((g$x$10310$F0M)
                                           (if (integer? g$x$10310$F0M)
                                             (if (exact? g$x$10310$F0M)
                                               (begin '#f (>= g$x$10310$F0M '0))
                                               '#f)
                                             '#f)))
                                        (g$syntax->datum$7683$F0M
                                          g$x$10309$F0M)))))
                                  (g$subversion-pred$10197$F0M
                                    (case-lambda
                                      ((g$x*$10261$F0M)
                                       ((case-lambda
                                          ((g$t$10262$F0M)
                                           ((case-lambda
                                              ((g$ls/false$10263$F0M)
                                               (if (if g$ls/false$10263$F0M
                                                     (begin
                                                       '#f
                                                       (apply
                                                         (case-lambda
                                                           ((g$n$10264$F0M)
                                                            (g$subversion?$10196$F0M
                                                              g$n$10264$F0M)))
                                                         g$ls/false$10263$F0M))
                                                     '#f)
                                                 (apply
                                                   (case-lambda
                                                     ((g$n$10265$F0M)
                                                      (case-lambda
                                                        ((g$x$10266$F0M)
                                                         (= g$x$10266$F0M
                                                            (g$syntax->datum$7683$F0M
                                                              g$n$10265$F0M))))))
                                                   g$ls/false$10263$F0M)
                                                 ((case-lambda
                                                    ((g$t$10267$F0M)
                                                     ((case-lambda
                                                        ((g$ls/false$10268$F0M)
                                                         (if (if g$ls/false$10268$F0M
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$p?$10269$F0M
                                                                        g$sub*$10270$F0M)
                                                                      (eq? (g$syntax->datum$7683$F0M
                                                                             g$p?$10269$F0M)
                                                                           'and)))
                                                                   g$ls/false$10268$F0M))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$p?$10271$F0M
                                                                  g$sub*$10272$F0M)
                                                                ((case-lambda
                                                                   ((g$p*$10273$F0M)
                                                                    (case-lambda
                                                                      ((g$x$10274$F0M)
                                                                       (g$for-all$5014$F0M
                                                                         (case-lambda
                                                                           ((g$p$10275$F0M)
                                                                            (g$p$10275$F0M
                                                                              g$x$10274$F0M)))
                                                                         g$p*$10273$F0M)))))
                                                                 (map g$subversion-pred$10197$F0M
                                                                      g$sub*$10272$F0M))))
                                                             g$ls/false$10268$F0M)
                                                           ((case-lambda
                                                              ((g$t$10276$F0M)
                                                               ((case-lambda
                                                                  ((g$ls/false$10277$F0M)
                                                                   (if (if g$ls/false$10277$F0M
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$p?$10278$F0M
                                                                                  g$sub*$10279$F0M)
                                                                                (eq? (g$syntax->datum$7683$F0M
                                                                                       g$p?$10278$F0M)
                                                                                     'or)))
                                                                             g$ls/false$10277$F0M))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p?$10280$F0M
                                                                            g$sub*$10281$F0M)
                                                                          ((case-lambda
                                                                             ((g$p*$10282$F0M)
                                                                              (case-lambda
                                                                                ((g$x$10283$F0M)
                                                                                 (g$exists$5015$F0M
                                                                                   (case-lambda
                                                                                     ((g$p$10284$F0M)
                                                                                      (g$p$10284$F0M
                                                                                        g$x$10283$F0M)))
                                                                                   g$p*$10282$F0M)))))
                                                                           (map g$subversion-pred$10197$F0M
                                                                                g$sub*$10281$F0M))))
                                                                       g$ls/false$10277$F0M)
                                                                     ((case-lambda
                                                                        ((g$t$10285$F0M)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10286$F0M)
                                                                             (if (if g$ls/false$10286$F0M
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$p?$10287$F0M
                                                                                            g$sub$10288$F0M)
                                                                                          (eq? (g$syntax->datum$7683$F0M
                                                                                                 g$p?$10287$F0M)
                                                                                               'not)))
                                                                                       g$ls/false$10286$F0M))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$p?$10289$F0M
                                                                                      g$sub$10290$F0M)
                                                                                    ((case-lambda
                                                                                       ((g$p$10291$F0M)
                                                                                        (case-lambda
                                                                                          ((g$x$10292$F0M)
                                                                                           (not (g$p$10291$F0M
                                                                                                  g$x$10292$F0M))))))
                                                                                     (g$subversion-pred$10197$F0M
                                                                                       g$sub$10290$F0M))))
                                                                                 g$ls/false$10286$F0M)
                                                                               ((case-lambda
                                                                                  ((g$t$10293$F0M)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10294$F0M)
                                                                                       (if (if g$ls/false$10294$F0M
                                                                                             (begin
                                                                                               '#f
                                                                                               (apply
                                                                                                 (case-lambda
                                                                                                   ((g$p?$10295$F0M
                                                                                                      g$n$10296$F0M)
                                                                                                    (if (eq? (g$syntax->datum$7683$F0M
                                                                                                               g$p?$10295$F0M)
                                                                                                             '<=)
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (g$subversion?$10196$F0M
                                                                                                          g$n$10296$F0M))
                                                                                                      '#f)))
                                                                                                 g$ls/false$10294$F0M))
                                                                                             '#f)
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p?$10297$F0M
                                                                                                g$n$10298$F0M)
                                                                                              (case-lambda
                                                                                                ((g$x$10299$F0M)
                                                                                                 (<= g$x$10299$F0M
                                                                                                     (g$syntax->datum$7683$F0M
                                                                                                       g$n$10298$F0M))))))
                                                                                           g$ls/false$10294$F0M)
                                                                                         ((case-lambda
                                                                                            ((g$t$10300$F0M)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10301$F0M)
                                                                                                 (if (if g$ls/false$10301$F0M
                                                                                                       (begin
                                                                                                         '#f
                                                                                                         (apply
                                                                                                           (case-lambda
                                                                                                             ((g$p?$10302$F0M
                                                                                                                g$n$10303$F0M)
                                                                                                              (if (eq? (g$syntax->datum$7683$F0M
                                                                                                                         g$p?$10302$F0M)
                                                                                                                       '>=)
                                                                                                                (begin
                                                                                                                  '#f
                                                                                                                  (g$subversion?$10196$F0M
                                                                                                                    g$n$10303$F0M))
                                                                                                                '#f)))
                                                                                                           g$ls/false$10301$F0M))
                                                                                                       '#f)
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$p?$10304$F0M
                                                                                                          g$n$10305$F0M)
                                                                                                        (case-lambda
                                                                                                          ((g$x$10306$F0M)
                                                                                                           (>= g$x$10306$F0M
                                                                                                               (g$syntax->datum$7683$F0M
                                                                                                                 g$n$10305$F0M))))))
                                                                                                     g$ls/false$10301$F0M)
                                                                                                   ((case-lambda
                                                                                                      ((g$t$10307$F0M)
                                                                                                       ((case-lambda
                                                                                                          ((g$ls/false$10308$F0M)
                                                                                                           (if g$ls/false$10308$F0M
                                                                                                             (apply
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$syntax-violation$7680$F0M
                                                                                                                    'import
                                                                                                                    '"invalid sub-version spec"
                                                                                                                    g$spec$10195$F0M
                                                                                                                    g$x*$10261$F0M)))
                                                                                                               g$ls/false$10308$F0M)
                                                                                                             (g$syntax-violation$7680$F0M
                                                                                                               '#f
                                                                                                               '"invalid syntax"
                                                                                                               g$t$10307$F0M))))
                                                                                                        (g$syntax-dispatch$7569$F0M
                                                                                                          g$t$10307$F0M
                                                                                                          '_))))
                                                                                                    g$t$10300$F0M))))
                                                                                              (g$syntax-dispatch$7569$F0M
                                                                                                g$t$10300$F0M
                                                                                                '(any any)))))
                                                                                          g$t$10293$F0M))))
                                                                                    (g$syntax-dispatch$7569$F0M
                                                                                      g$t$10293$F0M
                                                                                      '(any any)))))
                                                                                g$t$10285$F0M))))
                                                                          (g$syntax-dispatch$7569$F0M
                                                                            g$t$10285$F0M
                                                                            '(any any)))))
                                                                      g$t$10276$F0M))))
                                                                (g$syntax-dispatch$7569$F0M
                                                                  g$t$10276$F0M
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10267$F0M))))
                                                      (g$syntax-dispatch$7569$F0M
                                                        g$t$10267$F0M
                                                        '(any . each-any)))))
                                                  g$t$10262$F0M))))
                                            (g$syntax-dispatch$7569$F0M
                                              g$t$10262$F0M
                                              'any))))
                                        g$x*$10261$F0M))))
                                  (g$version-pred$10198$F0M
                                    (case-lambda
                                      ((g$x*$10221$F0M)
                                       ((case-lambda
                                          ((g$t$10222$F0M)
                                           ((case-lambda
                                              ((g$ls/false$10223$F0M)
                                               (if g$ls/false$10223$F0M
                                                 (apply
                                                   (case-lambda
                                                     (()
                                                      (case-lambda
                                                        ((g$x$10224$F0M) '#t))))
                                                   g$ls/false$10223$F0M)
                                                 ((case-lambda
                                                    ((g$t$10225$F0M)
                                                     ((case-lambda
                                                        ((g$ls/false$10226$F0M)
                                                         (if (if g$ls/false$10226$F0M
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$c$10227$F0M
                                                                        g$ver*$10228$F0M)
                                                                      (eq? (g$syntax->datum$7683$F0M
                                                                             g$c$10227$F0M)
                                                                           'and)))
                                                                   g$ls/false$10226$F0M))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$c$10229$F0M
                                                                  g$ver*$10230$F0M)
                                                                ((case-lambda
                                                                   ((g$p*$10231$F0M)
                                                                    (case-lambda
                                                                      ((g$x$10232$F0M)
                                                                       (g$for-all$5014$F0M
                                                                         (case-lambda
                                                                           ((g$p$10233$F0M)
                                                                            (g$p$10233$F0M
                                                                              g$x$10232$F0M)))
                                                                         g$p*$10231$F0M)))))
                                                                 (map g$version-pred$10198$F0M
                                                                      g$ver*$10230$F0M))))
                                                             g$ls/false$10226$F0M)
                                                           ((case-lambda
                                                              ((g$t$10234$F0M)
                                                               ((case-lambda
                                                                  ((g$ls/false$10235$F0M)
                                                                   (if (if g$ls/false$10235$F0M
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$c$10236$F0M
                                                                                  g$ver*$10237$F0M)
                                                                                (eq? (g$syntax->datum$7683$F0M
                                                                                       g$c$10236$F0M)
                                                                                     'or)))
                                                                             g$ls/false$10235$F0M))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$c$10238$F0M
                                                                            g$ver*$10239$F0M)
                                                                          ((case-lambda
                                                                             ((g$p*$10240$F0M)
                                                                              (case-lambda
                                                                                ((g$x$10241$F0M)
                                                                                 (g$exists$5015$F0M
                                                                                   (case-lambda
                                                                                     ((g$p$10242$F0M)
                                                                                      (g$p$10242$F0M
                                                                                        g$x$10241$F0M)))
                                                                                   g$p*$10240$F0M)))))
                                                                           (map g$version-pred$10198$F0M
                                                                                g$ver*$10239$F0M))))
                                                                       g$ls/false$10235$F0M)
                                                                     ((case-lambda
                                                                        ((g$t$10243$F0M)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10244$F0M)
                                                                             (if (if g$ls/false$10244$F0M
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$c$10245$F0M
                                                                                            g$ver$10246$F0M)
                                                                                          (eq? (g$syntax->datum$7683$F0M
                                                                                                 g$c$10245$F0M)
                                                                                               'not)))
                                                                                       g$ls/false$10244$F0M))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$c$10247$F0M
                                                                                      g$ver$10248$F0M)
                                                                                    ((case-lambda
                                                                                       ((g$p$10249$F0M)
                                                                                        (case-lambda
                                                                                          ((g$x$10250$F0M)
                                                                                           (not (g$p$10249$F0M
                                                                                                  g$x$10250$F0M))))))
                                                                                     (g$version-pred$10198$F0M
                                                                                       g$ver$10248$F0M))))
                                                                                 g$ls/false$10244$F0M)
                                                                               ((case-lambda
                                                                                  ((g$t$10251$F0M)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10252$F0M)
                                                                                       (if g$ls/false$10252$F0M
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$sub*$10253$F0M)
                                                                                              ((case-lambda
                                                                                                 ((g$p*$10254$F0M)
                                                                                                  (case-lambda
                                                                                                    ((g$x$10255$F0M)
                                                                                                     ((letrec ((g$f$10256$F0M
                                                                                                                 (case-lambda
                                                                                                                   ((g$p*$10257$F0M
                                                                                                                      g$x$10258$F0M)
                                                                                                                    (if (null?
                                                                                                                          g$p*$10257$F0M)
                                                                                                                      '#t
                                                                                                                      (if (null?
                                                                                                                            g$x$10258$F0M)
                                                                                                                        '#f
                                                                                                                        (if ((car g$p*$10257$F0M)
                                                                                                                             (car g$x$10258$F0M))
                                                                                                                          (begin
                                                                                                                            '#f
                                                                                                                            (g$f$10256$F0M
                                                                                                                              (cdr g$p*$10257$F0M)
                                                                                                                              (cdr g$x$10258$F0M)))
                                                                                                                          '#f)))))))
                                                                                                        g$f$10256$F0M)
                                                                                                      g$p*$10254$F0M
                                                                                                      g$x$10255$F0M)))))
                                                                                               (map g$subversion-pred$10197$F0M
                                                                                                    g$sub*$10253$F0M))))
                                                                                           g$ls/false$10252$F0M)
                                                                                         ((case-lambda
                                                                                            ((g$t$10259$F0M)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10260$F0M)
                                                                                                 (if g$ls/false$10260$F0M
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$syntax-violation$7680$F0M
                                                                                                          'import
                                                                                                          '"invalid version spec"
                                                                                                          g$spec$10195$F0M
                                                                                                          g$x*$10221$F0M)))
                                                                                                     g$ls/false$10260$F0M)
                                                                                                   (g$syntax-violation$7680$F0M
                                                                                                     '#f
                                                                                                     '"invalid syntax"
                                                                                                     g$t$10259$F0M))))
                                                                                              (g$syntax-dispatch$7569$F0M
                                                                                                g$t$10259$F0M
                                                                                                '_))))
                                                                                          g$t$10251$F0M))))
                                                                                    (g$syntax-dispatch$7569$F0M
                                                                                      g$t$10251$F0M
                                                                                      'each-any))))
                                                                                g$t$10243$F0M))))
                                                                          (g$syntax-dispatch$7569$F0M
                                                                            g$t$10243$F0M
                                                                            '(any any)))))
                                                                      g$t$10234$F0M))))
                                                                (g$syntax-dispatch$7569$F0M
                                                                  g$t$10234$F0M
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10225$F0M))))
                                                      (g$syntax-dispatch$7569$F0M
                                                        g$t$10225$F0M
                                                        '(any . each-any)))))
                                                  g$t$10222$F0M))))
                                            (g$syntax-dispatch$7569$F0M
                                              g$t$10222$F0M
                                              '()))))
                                        g$x*$10221$F0M)))))
                          ((letrec ((g$f$10199$F0M
                                      (case-lambda
                                        ((g$x$10200$F0M)
                                         ((case-lambda
                                            ((g$t$10201$F0M)
                                             ((case-lambda
                                                ((g$ls/false$10202$F0M)
                                                 (if g$ls/false$10202$F0M
                                                   (apply
                                                     (case-lambda
                                                       ((g$version-spec*$10203$F0M)
                                                        (values
                                                          '()
                                                          (g$version-pred$10198$F0M
                                                            g$version-spec*$10203$F0M))))
                                                     g$ls/false$10202$F0M)
                                                   ((case-lambda
                                                      ((g$t$10204$F0M)
                                                       ((case-lambda
                                                          ((g$ls/false$10205$F0M)
                                                           (if (if g$ls/false$10205$F0M
                                                                 (begin
                                                                   '#f
                                                                   (apply
                                                                     (case-lambda
                                                                       ((g$x$10206$F0M
                                                                          g$x*$10207$F0M)
                                                                        (g$idsyn?$10093$F0M
                                                                          g$x$10206$F0M)))
                                                                     g$ls/false$10205$F0M))
                                                                 '#f)
                                                             (apply
                                                               (case-lambda
                                                                 ((g$x$10208$F0M
                                                                    g$x*$10209$F0M)
                                                                  (call-with-values
                                                                    (case-lambda
                                                                      (()
                                                                       (g$f$10199$F0M
                                                                         g$x*$10209$F0M)))
                                                                    (case-lambda
                                                                      ((g$name$10212$F0M
                                                                         g$pred$10213$F0M)
                                                                       ((case-lambda
                                                                          ((g$pred$10214$F0M
                                                                             g$name$10215$F0M)
                                                                           (values
                                                                             (cons
                                                                               (g$syntax->datum$7683$F0M
                                                                                 g$x$10208$F0M)
                                                                               g$name$10215$F0M)
                                                                             g$pred$10214$F0M)))
                                                                        g$pred$10213$F0M
                                                                        g$name$10212$F0M))))))
                                                               g$ls/false$10205$F0M)
                                                             ((case-lambda
                                                                ((g$t$10216$F0M)
                                                                 ((case-lambda
                                                                    ((g$ls/false$10217$F0M)
                                                                     (if g$ls/false$10217$F0M
                                                                       (apply
                                                                         (case-lambda
                                                                           (()
                                                                            (values
                                                                              '()
                                                                              (case-lambda
                                                                                ((g$x$10218$F0M)
                                                                                 '#t)))))
                                                                         g$ls/false$10217$F0M)
                                                                       ((case-lambda
                                                                          ((g$t$10219$F0M)
                                                                           ((case-lambda
                                                                              ((g$ls/false$10220$F0M)
                                                                               (if g$ls/false$10220$F0M
                                                                                 (apply
                                                                                   (case-lambda
                                                                                     (()
                                                                                      (g$syntax-violation$7680$F0M
                                                                                        '#f
                                                                                        '"invalid import spec"
                                                                                        g$spec$10195$F0M)))
                                                                                   g$ls/false$10220$F0M)
                                                                                 (g$syntax-violation$7680$F0M
                                                                                   '#f
                                                                                   '"invalid syntax"
                                                                                   g$t$10219$F0M))))
                                                                            (g$syntax-dispatch$7569$F0M
                                                                              g$t$10219$F0M
                                                                              '_))))
                                                                        g$t$10216$F0M))))
                                                                  (g$syntax-dispatch$7569$F0M
                                                                    g$t$10216$F0M
                                                                    '()))))
                                                              g$t$10204$F0M))))
                                                        (g$syntax-dispatch$7569$F0M
                                                          g$t$10204$F0M
                                                          '(any . any)))))
                                                    g$t$10201$F0M))))
                                              (g$syntax-dispatch$7569$F0M
                                                g$t$10201$F0M
                                                '(each-any)))))
                                          g$x$10200$F0M)))))
                             g$f$10199$F0M)
                           g$spec$10195$F0M)))))
                   (g$import-library$10101$F0M
                     (case-lambda
                       ((g$spec*$10187$F0M)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$parse-library-name$10100$F0M
                               g$spec*$10187$F0M)))
                          (case-lambda
                            ((g$name$10190$F0M g$pred$10191$F0M)
                             ((case-lambda
                                ((g$pred$10192$F0M g$name$10193$F0M)
                                 (begin
                                   (if (null? g$name$10193$F0M)
                                     (g$syntax-violation$7680$F0M
                                       'import
                                       '"empty library name"
                                       g$spec*$10187$F0M)
                                     (void))
                                   ((case-lambda
                                      ((g$lib$10194$F0M)
                                       (begin
                                         (if (not g$lib$10194$F0M)
                                           (g$syntax-violation$7680$F0M
                                             'import
                                             '"cannot find library with required name"
                                             g$name$10193$F0M)
                                           (void))
                                         (if (not (g$pred$10192$F0M
                                                    (g$library-version$7054$F0M
                                                      g$lib$10194$F0M)))
                                           (g$syntax-violation$7680$F0M
                                             'import
                                             '"library does not satisfy version specification"
                                             g$spec*$10187$F0M
                                             g$lib$10194$F0M)
                                           (void))
                                         ((g$imp-collector$7623$F0M)
                                          g$lib$10194$F0M)
                                         (g$library-subst$7058$F0M
                                           g$lib$10194$F0M))))
                                    (g$find-library-by-name$7094$F0M
                                      g$name$10193$F0M)))))
                              g$pred$10191$F0M
                              g$name$10190$F0M)))))))
                   (g$get-import$10102$F0M
                     (case-lambda
                       ((g$spec$10116$F0M)
                        ((case-lambda
                           ((g$t$10117$F0M)
                            ((case-lambda
                               ((g$ls/false$10118$F0M)
                                (if (if g$ls/false$10118$F0M
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$x$10119$F0M g$x*$10120$F0M)
                                             (not (g$memq$5008$F0M
                                                    (g$syntax->datum$7683$F0M
                                                      g$x$10119$F0M)
                                                    '(for rename
                                                          except
                                                          only
                                                          prefix
                                                          library)))))
                                          g$ls/false$10118$F0M))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$x$10121$F0M g$x*$10122$F0M)
                                       (g$import-library$10101$F0M
                                         (cons g$x$10121$F0M g$x*$10122$F0M))))
                                    g$ls/false$10118$F0M)
                                  ((case-lambda
                                     ((g$t$10123$F0M)
                                      ((case-lambda
                                         ((g$ls/false$10124$F0M)
                                          (if (if g$ls/false$10124$F0M
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$rename$10125$F0M
                                                         g$isp$10126$F0M
                                                         g$old*$10127$F0M
                                                         g$new*$10128$F0M)
                                                       (if (eq? (g$syntax->datum$7683$F0M
                                                                  g$rename$10125$F0M)
                                                                'rename)
                                                         (if (g$for-all$5014$F0M
                                                               g$idsyn?$10093$F0M
                                                               g$old*$10127$F0M)
                                                           (begin
                                                             '#f
                                                             (g$for-all$5014$F0M
                                                               g$idsyn?$10093$F0M
                                                               g$new*$10128$F0M))
                                                           '#f)
                                                         '#f)))
                                                    g$ls/false$10124$F0M))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$rename$10129$F0M
                                                   g$isp$10130$F0M
                                                   g$old*$10131$F0M
                                                   g$new*$10132$F0M)
                                                 ((case-lambda
                                                    ((g$subst$10133$F0M
                                                       g$old*$10134$F0M
                                                       g$new*$10135$F0M)
                                                     ((case-lambda
                                                        ((g$old-label*$10136$F0M)
                                                         ((case-lambda
                                                            ((g$subst$10137$F0M)
                                                             (g$merge-substs$10095$F0M
                                                               (map cons
                                                                    g$new*$10135$F0M
                                                                    g$old-label*$10136$F0M)
                                                               g$subst$10137$F0M)))
                                                          (g$rem*$10098$F0M
                                                            g$old*$10134$F0M
                                                            g$subst$10133$F0M))))
                                                      (g$find*$10097$F0M
                                                        g$old*$10134$F0M
                                                        g$subst$10133$F0M))))
                                                  (g$get-import$10102$F0M
                                                    g$isp$10130$F0M)
                                                  (map g$syntax->datum$7683$F0M
                                                       g$old*$10131$F0M)
                                                  (map g$syntax->datum$7683$F0M
                                                       g$new*$10132$F0M))))
                                              g$ls/false$10124$F0M)
                                            ((case-lambda
                                               ((g$t$10138$F0M)
                                                ((case-lambda
                                                   ((g$ls/false$10139$F0M)
                                                    (if (if g$ls/false$10139$F0M
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$except$10140$F0M
                                                                   g$isp$10141$F0M
                                                                   g$sym*$10142$F0M)
                                                                 (if (eq? (g$syntax->datum$7683$F0M
                                                                            g$except$10140$F0M)
                                                                          'except)
                                                                   (begin
                                                                     '#f
                                                                     (g$for-all$5014$F0M
                                                                       g$idsyn?$10093$F0M
                                                                       g$sym*$10142$F0M))
                                                                   '#f)))
                                                              g$ls/false$10139$F0M))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$except$10143$F0M
                                                             g$isp$10144$F0M
                                                             g$sym*$10145$F0M)
                                                           ((case-lambda
                                                              ((g$subst$10146$F0M)
                                                               (g$rem*$10098$F0M
                                                                 (map g$syntax->datum$7683$F0M
                                                                      g$sym*$10145$F0M)
                                                                 g$subst$10146$F0M)))
                                                            (g$get-import$10102$F0M
                                                              g$isp$10144$F0M))))
                                                        g$ls/false$10139$F0M)
                                                      ((case-lambda
                                                         ((g$t$10147$F0M)
                                                          ((case-lambda
                                                             ((g$ls/false$10148$F0M)
                                                              (if (if g$ls/false$10148$F0M
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$only$10149$F0M
                                                                             g$isp$10150$F0M
                                                                             g$sym*$10151$F0M)
                                                                           (if (eq? (g$syntax->datum$7683$F0M
                                                                                      g$only$10149$F0M)
                                                                                    'only)
                                                                             (begin
                                                                               '#f
                                                                               (g$for-all$5014$F0M
                                                                                 g$idsyn?$10093$F0M
                                                                                 g$sym*$10151$F0M))
                                                                             '#f)))
                                                                        g$ls/false$10148$F0M))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$only$10152$F0M
                                                                       g$isp$10153$F0M
                                                                       g$sym*$10154$F0M)
                                                                     ((case-lambda
                                                                        ((g$subst$10155$F0M
                                                                           g$sym*$10156$F0M)
                                                                         ((case-lambda
                                                                            ((g$sym*$10157$F0M)
                                                                             ((case-lambda
                                                                                ((g$lab*$10158$F0M)
                                                                                 (map cons
                                                                                      g$sym*$10157$F0M
                                                                                      g$lab*$10158$F0M)))
                                                                              (g$find*$10097$F0M
                                                                                g$sym*$10157$F0M
                                                                                g$subst$10155$F0M))))
                                                                          (g$remove-dups$10099$F0M
                                                                            g$sym*$10156$F0M))))
                                                                      (g$get-import$10102$F0M
                                                                        g$isp$10153$F0M)
                                                                      (map g$syntax->datum$7683$F0M
                                                                           g$sym*$10154$F0M))))
                                                                  g$ls/false$10148$F0M)
                                                                ((case-lambda
                                                                   ((g$t$10159$F0M)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10160$F0M)
                                                                        (if (if g$ls/false$10160$F0M
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$prefix$10161$F0M
                                                                                       g$isp$10162$F0M
                                                                                       g$p$10163$F0M)
                                                                                     (if (eq? (g$syntax->datum$7683$F0M
                                                                                                g$prefix$10161$F0M)
                                                                                              'prefix)
                                                                                       (begin
                                                                                         '#f
                                                                                         (g$idsyn?$10093$F0M
                                                                                           g$p$10163$F0M))
                                                                                       '#f)))
                                                                                  g$ls/false$10160$F0M))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$prefix$10164$F0M
                                                                                 g$isp$10165$F0M
                                                                                 g$p$10166$F0M)
                                                                               ((case-lambda
                                                                                  ((g$subst$10167$F0M
                                                                                     g$prefix$10168$F0M)
                                                                                   (map (case-lambda
                                                                                          ((g$x$10169$F0M)
                                                                                           (cons
                                                                                             (string->symbol
                                                                                               (string-append
                                                                                                 g$prefix$10168$F0M
                                                                                                 (symbol->string
                                                                                                   (car g$x$10169$F0M))))
                                                                                             (cdr g$x$10169$F0M))))
                                                                                        g$subst$10167$F0M)))
                                                                                (g$get-import$10102$F0M
                                                                                  g$isp$10165$F0M)
                                                                                (symbol->string
                                                                                  (g$syntax->datum$7683$F0M
                                                                                    g$p$10166$F0M)))))
                                                                            g$ls/false$10160$F0M)
                                                                          ((case-lambda
                                                                             ((g$t$10170$F0M)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10171$F0M)
                                                                                  (if (if g$ls/false$10171$F0M
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$library$10172$F0M
                                                                                                 g$spec*$10173$F0M)
                                                                                               (eq? (g$syntax->datum$7683$F0M
                                                                                                      g$library$10172$F0M)
                                                                                                    'library)))
                                                                                            g$ls/false$10171$F0M))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$library$10174$F0M
                                                                                           g$spec*$10175$F0M)
                                                                                         (g$import-library$10101$F0M
                                                                                           g$spec*$10175$F0M)))
                                                                                      g$ls/false$10171$F0M)
                                                                                    ((case-lambda
                                                                                       ((g$t$10176$F0M)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10177$F0M)
                                                                                            (if (if g$ls/false$10177$F0M
                                                                                                  (begin
                                                                                                    '#f
                                                                                                    (apply
                                                                                                      (case-lambda
                                                                                                        ((g$for$10178$F0M
                                                                                                           g$isp$10179$F0M
                                                                                                           g$rest$10180$F0M)
                                                                                                         (eq? (g$syntax->datum$7683$F0M
                                                                                                                g$for$10178$F0M)
                                                                                                              'for)))
                                                                                                      g$ls/false$10177$F0M))
                                                                                                  '#f)
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$for$10181$F0M
                                                                                                     g$isp$10182$F0M
                                                                                                     g$rest$10183$F0M)
                                                                                                   (g$get-import$10102$F0M
                                                                                                     g$isp$10182$F0M)))
                                                                                                g$ls/false$10177$F0M)
                                                                                              ((case-lambda
                                                                                                 ((g$t$10184$F0M)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$10185$F0M)
                                                                                                      (if g$ls/false$10185$F0M
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$spec$10186$F0M)
                                                                                                             (g$syntax-violation$7680$F0M
                                                                                                               'import
                                                                                                               '"invalid import spec"
                                                                                                               g$spec$10186$F0M)))
                                                                                                          g$ls/false$10185$F0M)
                                                                                                        (g$syntax-violation$7680$F0M
                                                                                                          '#f
                                                                                                          '"invalid syntax"
                                                                                                          g$t$10184$F0M))))
                                                                                                   (g$syntax-dispatch$7569$F0M
                                                                                                     g$t$10184$F0M
                                                                                                     'any))))
                                                                                               g$t$10176$F0M))))
                                                                                         (g$syntax-dispatch$7569$F0M
                                                                                           g$t$10176$F0M
                                                                                           '(any any
                                                                                                 .
                                                                                                 any)))))
                                                                                     g$t$10170$F0M))))
                                                                               (g$syntax-dispatch$7569$F0M
                                                                                 g$t$10170$F0M
                                                                                 '(any each-any)))))
                                                                           g$t$10159$F0M))))
                                                                     (g$syntax-dispatch$7569$F0M
                                                                       g$t$10159$F0M
                                                                       '(any any
                                                                             any)))))
                                                                 g$t$10147$F0M))))
                                                           (g$syntax-dispatch$7569$F0M
                                                             g$t$10147$F0M
                                                             '(any any
                                                                   .
                                                                   each-any)))))
                                                       g$t$10138$F0M))))
                                                 (g$syntax-dispatch$7569$F0M
                                                   g$t$10138$F0M
                                                   '(any any . each-any)))))
                                             g$t$10123$F0M))))
                                       (g$syntax-dispatch$7569$F0M
                                         g$t$10123$F0M
                                         '(any any . #(each (any any)))))))
                                   g$t$10117$F0M))))
                             (g$syntax-dispatch$7569$F0M
                               g$t$10117$F0M
                               '(any . each-any)))))
                         g$spec$10116$F0M))))
                   (g$add-imports!$10103$F0M
                     (case-lambda
                       ((g$imp$10108$F0M g$h$10109$F0M)
                        ((case-lambda
                           ((g$subst$10110$F0M)
                            (for-each
                              (case-lambda
                                ((g$x$10111$F0M)
                                 ((case-lambda
                                    ((g$name$10112$F0M g$label$10113$F0M)
                                     ((case-lambda
                                        ((g$t$10114$F0M)
                                         (if g$t$10114$F0M
                                           ((case-lambda
                                              ((g$l$10115$F0M)
                                               (if (not (eq? g$l$10115$F0M
                                                             g$label$10113$F0M))
                                                 (g$dup-error$10094$F0M
                                                   g$name$10112$F0M)
                                                 (void))))
                                            g$t$10114$F0M)
                                           (g$hashtable-set!$5456$F0M
                                             g$h$10109$F0M
                                             g$name$10112$F0M
                                             g$label$10113$F0M))))
                                      (g$hashtable-ref$5455$F0M
                                        g$h$10109$F0M
                                        g$name$10112$F0M
                                        '#f))))
                                  (car g$x$10111$F0M)
                                  (cdr g$x$10111$F0M))))
                              g$subst$10110$F0M)))
                         (g$get-import$10102$F0M g$imp$10108$F0M))))))
           (case-lambda
             ((g$imp*$10104$F0M)
              ((letrec ((g$f$10105$F0M
                          (case-lambda
                            ((g$imp*$10106$F0M g$h$10107$F0M)
                             (if (null? g$imp*$10106$F0M)
                               (hashtable-entries g$h$10107$F0M)
                               (begin
                                 (g$add-imports!$10103$F0M
                                   (car g$imp*$10106$F0M)
                                   g$h$10107$F0M)
                                 (g$f$10105$F0M
                                   (cdr g$imp*$10106$F0M)
                                   g$h$10107$F0M)))))))
                 g$f$10105$F0M)
               g$imp*$10104$F0M
               (g$make-eq-hashtable$5452$F0M)))))))))
   (g$make-top-rib$7619$F0M
     g$make-top-rib$11110$F0M
     (case-lambda
       ((g$names$10355$F0M g$labels$10356$F0M)
        ((case-lambda
           ((g$rib$10357$F0M)
            (begin
              (vector-for-each
                (case-lambda
                  ((g$name$10358$F0M g$label$10359$F0M)
                   (begin
                     (if (not (symbol? g$name$10358$F0M))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$10358$F0M)
                       (void))
                     (g$extend-rib/nc!$7255$F0M
                       g$rib$10357$F0M
                       (g$make-stx$7264$F0M
                         g$name$10358$F0M
                         g$top-mark*$7228$F0M
                         '()
                         '())
                       g$label$10359$F0M))))
                g$names$10355$F0M
                g$labels$10356$F0M)
              g$rib$10357$F0M)))
         (g$make-cache-rib$7252$F0M)))))
   (g$make-collector$7620$F0M
     g$make-collector$11111$F0M
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$10360$F0M)
            (case-lambda
              (() g$ls$10360$F0M)
              ((g$x$10361$F0M)
               (set! g$ls$10360$F0M
                 (g$set-cons$7225$F0M g$x$10361$F0M g$ls$10360$F0M))))))
         '()))))
   (g$inv-collector$7621$F0M
     g$inv-collector$11112$F0M
     (g$make-parameter$6563$F0M
       (case-lambda
         (g$args$10362$F0M
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10363$F0M)
          (begin
            (if (not (procedure? g$x$10363$F0M))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$10363$F0M)
              (void))
            g$x$10363$F0M)))))
   (g$vis-collector$7622$F0M
     g$vis-collector$11113$F0M
     (g$make-parameter$6563$F0M
       (case-lambda
         (g$args$10364$F0M
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10365$F0M)
          (begin
            (if (not (procedure? g$x$10365$F0M))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$10365$F0M)
              (void))
            g$x$10365$F0M)))))
   (g$imp-collector$7623$F0M
     g$imp-collector$11114$F0M
     (g$make-parameter$6563$F0M
       (case-lambda
         (g$args$10366$F0M
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10367$F0M)
          (begin
            (if (not (procedure? g$x$10367$F0M))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$10367$F0M)
              (void))
            g$x$10367$F0M)))))
   (g$chi-library-internal$7624$F0M
     g$chi-library-internal$11115$F0M
     (case-lambda
       ((g$e*$10368$F0M g$rib$10369$F0M g$top?$10370$F0M)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7613$F0M
               g$e*$10368$F0M
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$10369$F0M
               g$top?$10370$F0M)))
          (case-lambda
            ((g$e*$10379$F0M
               g$r$10380$F0M
               g$mr$10381$F0M
               g$lex*$10382$F0M
               g$rhs*$10383$F0M
               g$mod**$10384$F0M
               g$_kwd*$10385$F0M
               g$exp*$10386$F0M)
             ((case-lambda
                ((g$exp*$10387$F0M
                   g$_kwd*$10388$F0M
                   g$mod**$10389$F0M
                   g$rhs*$10390$F0M
                   g$lex*$10391$F0M
                   g$mr$10392$F0M
                   g$r$10393$F0M
                   g$e*$10394$F0M)
                 (values
                   (append
                     (apply append (reverse g$mod**$10389$F0M))
                     g$e*$10394$F0M)
                   g$r$10393$F0M
                   g$mr$10392$F0M
                   (reverse g$lex*$10391$F0M)
                   (reverse g$rhs*$10390$F0M)
                   g$exp*$10387$F0M)))
              g$exp*$10386$F0M
              g$_kwd*$10385$F0M
              g$mod**$10384$F0M
              g$rhs*$10383$F0M
              g$lex*$10382$F0M
              g$mr$10381$F0M
              g$r$10380$F0M
              g$e*$10379$F0M)))))))
   (g$chi-interaction-expr$7625$F0M
     g$chi-interaction-expr$11116$F0M
     (case-lambda
       ((g$e$10395$F0M g$rib$10396$F0M g$r$10397$F0M)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7613$F0M
               (list g$e$10395$F0M)
               g$r$10397$F0M
               g$r$10397$F0M
               '()
               '()
               '()
               '()
               '()
               g$rib$10396$F0M
               '#t)))
          (case-lambda
            ((g$e*$10406$F0M
               g$r$10407$F0M
               g$mr$10408$F0M
               g$lex*$10409$F0M
               g$rhs*$10410$F0M
               g$mod**$10411$F0M
               g$_kwd*$10412$F0M
               g$_exp*$10413$F0M)
             ((case-lambda
                ((g$_exp*$10414$F0M
                   g$_kwd*$10415$F0M
                   g$mod**$10416$F0M
                   g$rhs*$10417$F0M
                   g$lex*$10418$F0M
                   g$mr$10419$F0M
                   g$r$10420$F0M
                   g$e*$10421$F0M)
                 ((case-lambda
                    ((g$e*$10422$F0M)
                     ((case-lambda
                        ((g$e$10423$F0M) (values g$e$10423$F0M g$r$10420$F0M)))
                      (if (null? g$e*$10422$F0M)
                        (g$build-void$7221$F0M)
                        (if (null? (cdr g$e*$10422$F0M))
                          (car g$e*$10422$F0M)
                          (g$build-sequence$7220$F0M '#f g$e*$10422$F0M))))))
                  (g$expand-interaction-rhs*/init*$7594$F0M
                    (reverse g$lex*$10418$F0M)
                    (reverse g$rhs*$10417$F0M)
                    (append
                      (apply append (reverse g$mod**$10416$F0M))
                      g$e*$10421$F0M)
                    g$r$10420$F0M
                    g$mr$10419$F0M))))
              g$_exp*$10413$F0M
              g$_kwd*$10412$F0M
              g$mod**$10411$F0M
              g$rhs*$10410$F0M
              g$lex*$10409$F0M
              g$mr$10408$F0M
              g$r$10407$F0M
              g$e*$10406$F0M)))))))
   (g$library-body-expander$7626$F0M
     g$library-body-expander$11117$F0M
     (case-lambda
       ((g$name$10424$F0M
          g$main-exp*$10425$F0M
          g$imp*$10426$F0M
          g$b*$10427$F0M
          g$top?$10428$F0M)
        (letrec* ((g$itc$10429$F0M (g$make-collector$7620$F0M)))
          ((case-lambda
             ((g$imp-collector$10434$F0M
                g$top-level-context$10435$F0M
                g$imp-collector$10436$F0M
                g$top-level-context$10437$F0M)
              ((case-lambda
                 ((g$swap$10438$F0M)
                  (dynamic-wind
                    g$swap$10438$F0M
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$7618$F0M g$imp*$10426$F0M)))
                         (case-lambda
                           ((g$subst-names$10441$F0M g$subst-labels$10442$F0M)
                            ((case-lambda
                               ((g$subst-labels$10443$F0M
                                  g$subst-names$10444$F0M)
                                ((case-lambda
                                   ((g$rib$10445$F0M)
                                    (letrec* ((g$wrap$10446$F0M
                                                (case-lambda
                                                  ((g$x$10508$F0M)
                                                   (g$make-stx$7264$F0M
                                                     g$x$10508$F0M
                                                     g$top-mark*$7228$F0M
                                                     (list g$rib$10445$F0M)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$10447$F0M
                                            g$main-exp*$10448$F0M
                                            g$rtc$10449$F0M
                                            g$vtc$10450$F0M)
                                          ((case-lambda
                                             ((g$inv-collector$10455$F0M
                                                g$vis-collector$10456$F0M
                                                g$inv-collector$10457$F0M
                                                g$vis-collector$10458$F0M)
                                              ((case-lambda
                                                 ((g$swap$10459$F0M)
                                                  (dynamic-wind
                                                    g$swap$10459$F0M
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$7624$F0M
                                                              g$b*$10447$F0M
                                                              g$rib$10445$F0M
                                                              g$top?$10428$F0M)))
                                                         (case-lambda
                                                           ((g$init*$10466$F0M
                                                              g$r$10467$F0M
                                                              g$mr$10468$F0M
                                                              g$lex*$10469$F0M
                                                              g$rhs*$10470$F0M
                                                              g$internal-exp*$10471$F0M)
                                                            ((case-lambda
                                                               ((g$internal-exp*$10472$F0M
                                                                  g$rhs*$10473$F0M
                                                                  g$lex*$10474$F0M
                                                                  g$mr$10475$F0M
                                                                  g$r$10476$F0M
                                                                  g$init*$10477$F0M)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$7615$F0M
                                                                       (append
                                                                         g$main-exp*$10448$F0M
                                                                         g$internal-exp*$10472$F0M))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$10480$F0M
                                                                       g$exp-id*$10481$F0M)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$10482$F0M
                                                                           g$exp-name*$10483$F0M)
                                                                         (begin
                                                                           (g$seal-rib!$7257$F0M
                                                                             g$rib$10445$F0M)
                                                                           ((case-lambda
                                                                              ((g$init*$10484$F0M)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$10485$F0M)
                                                                                   ((case-lambda
                                                                                      (()
                                                                                       (begin
                                                                                         (g$unseal-rib!$7258$F0M
                                                                                           g$rib$10445$F0M)
                                                                                         ((case-lambda
                                                                                            ((g$loc*$10486$F0M
                                                                                               g$export-subst$10487$F0M)
                                                                                             (letrec* ((g$errstr$10488$F0M
                                                                                                         '"attempt to export mutated variable"))
                                                                                               (call-with-values
                                                                                                 (case-lambda
                                                                                                   (()
                                                                                                    (g$make-export-env/macros$7669$F0M
                                                                                                      g$lex*$10474$F0M
                                                                                                      g$loc*$10486$F0M
                                                                                                      g$r$10476$F0M)))
                                                                                                 (case-lambda
                                                                                                   ((g$export-env$10492$F0M
                                                                                                      g$global*$10493$F0M
                                                                                                      g$macro*$10494$F0M)
                                                                                                    ((case-lambda
                                                                                                       ((g$macro*$10495$F0M
                                                                                                          g$global*$10496$F0M
                                                                                                          g$export-env$10497$F0M)
                                                                                                        (begin
                                                                                                          (for-each
                                                                                                            (case-lambda
                                                                                                              ((g$s$10498$F0M)
                                                                                                               ((case-lambda
                                                                                                                  ((g$name$10499$F0M
                                                                                                                     g$label$10500$F0M)
                                                                                                                   ((case-lambda
                                                                                                                      ((g$p$10501$F0M)
                                                                                                                       (if g$p$10501$F0M
                                                                                                                         ((case-lambda
                                                                                                                            ((g$b$10502$F0M)
                                                                                                                             ((case-lambda
                                                                                                                                ((g$type$10503$F0M)
                                                                                                                                 (if (eq? g$type$10503$F0M
                                                                                                                                          'mutable)
                                                                                                                                   (g$syntax-violation$7680$F0M
                                                                                                                                     'export
                                                                                                                                     g$errstr$10488$F0M
                                                                                                                                     g$name$10499$F0M)
                                                                                                                                   (void))))
                                                                                                                              (car g$b$10502$F0M))))
                                                                                                                          (cdr g$p$10501$F0M))
                                                                                                                         (void))))
                                                                                                                    (g$assq$5004$F0M
                                                                                                                      g$label$10500$F0M
                                                                                                                      g$export-env$10497$F0M))))
                                                                                                                (car g$s$10498$F0M)
                                                                                                                (cdr g$s$10498$F0M))))
                                                                                                            g$export-subst$10487$F0M)
                                                                                                          ((case-lambda
                                                                                                             ((g$invoke-body$10504$F0M
                                                                                                                g$invoke-definitions$10505$F0M)
                                                                                                              (values
                                                                                                                (g$itc$10429$F0M)
                                                                                                                (g$rtc$10449$F0M)
                                                                                                                (g$vtc$10450$F0M)
                                                                                                                (g$build-sequence$7220$F0M
                                                                                                                  '#f
                                                                                                                  (append
                                                                                                                    g$invoke-definitions$10505$F0M
                                                                                                                    (list
                                                                                                                      g$invoke-body$10504$F0M)))
                                                                                                                g$macro*$10495$F0M
                                                                                                                g$export-subst$10487$F0M
                                                                                                                g$export-env$10497$F0M)))
                                                                                                           (g$build-library-letrec*$7224$F0M
                                                                                                             '#f
                                                                                                             g$name$10424$F0M
                                                                                                             g$lex*$10474$F0M
                                                                                                             g$loc*$10486$F0M
                                                                                                             g$rhs*$10485$F0M
                                                                                                             (if (null?
                                                                                                                   g$init*$10484$F0M)
                                                                                                               (g$build-void$7221$F0M)
                                                                                                               (g$build-sequence$7220$F0M
                                                                                                                 '#f
                                                                                                                 g$init*$10484$F0M)))
                                                                                                           (map g$build-global-define$7216$F0M
                                                                                                                (map cdr
                                                                                                                     g$global*$10496$F0M))))))
                                                                                                     g$macro*$10494$F0M
                                                                                                     g$global*$10493$F0M
                                                                                                     g$export-env$10492$F0M)))))))
                                                                                          (map g$gen-global$7231$F0M
                                                                                               g$lex*$10474$F0M)
                                                                                          (g$make-export-subst$7668$F0M
                                                                                            g$exp-name*$10483$F0M
                                                                                            g$exp-id*$10482$F0M))))))))
                                                                                (g$chi-rhs*$7595$F0M
                                                                                  g$rhs*$10473$F0M
                                                                                  g$r$10476$F0M
                                                                                  g$mr$10475$F0M))))
                                                                            (g$chi-expr*$7585$F0M
                                                                              g$init*$10477$F0M
                                                                              g$r$10476$F0M
                                                                              g$mr$10475$F0M)))))
                                                                      g$exp-id*$10481$F0M
                                                                      g$exp-name*$10480$F0M))))))
                                                             g$internal-exp*$10471$F0M
                                                             g$rhs*$10470$F0M
                                                             g$lex*$10469$F0M
                                                             g$mr$10468$F0M
                                                             g$r$10467$F0M
                                                             g$init*$10466$F0M))))))
                                                    g$swap$10459$F0M)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$10506$F0M)
                                                        (begin
                                                          (g$inv-collector$10455$F0M
                                                            g$inv-collector$10457$F0M)
                                                          (set! g$inv-collector$10457$F0M
                                                            g$t$10506$F0M))))
                                                     (g$inv-collector$10455$F0M))
                                                    ((case-lambda
                                                       ((g$t$10507$F0M)
                                                        (begin
                                                          (g$vis-collector$10456$F0M
                                                            g$vis-collector$10458$F0M)
                                                          (set! g$vis-collector$10458$F0M
                                                            g$t$10507$F0M))))
                                                     (g$vis-collector$10456$F0M))))))))
                                           g$inv-collector$7621$F0M
                                           g$vis-collector$7622$F0M
                                           g$rtc$10449$F0M
                                           g$vtc$10450$F0M)))
                                       (map g$wrap$10446$F0M g$b*$10427$F0M)
                                       (map g$wrap$10446$F0M
                                            g$main-exp*$10425$F0M)
                                       (g$make-collector$7620$F0M)
                                       (g$make-collector$7620$F0M)))))
                                 (g$make-top-rib$7619$F0M
                                   g$subst-names$10444$F0M
                                   g$subst-labels$10443$F0M))))
                             g$subst-labels$10442$F0M
                             g$subst-names$10441$F0M))))))
                    g$swap$10438$F0M)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$10509$F0M)
                        (begin
                          (g$imp-collector$10434$F0M g$imp-collector$10436$F0M)
                          (set! g$imp-collector$10436$F0M g$t$10509$F0M))))
                     (g$imp-collector$10434$F0M))
                    ((case-lambda
                       ((g$t$10510$F0M)
                        (begin
                          (g$top-level-context$10435$F0M
                            g$top-level-context$10437$F0M)
                          (set! g$top-level-context$10437$F0M g$t$10510$F0M))))
                     (g$top-level-context$10435$F0M))))))))
           g$imp-collector$7623$F0M
           g$top-level-context$7687$F0M
           g$itc$10429$F0M
           '#f)))))
   (g$core-library-expander$7627$F0M
     g$core-library-expander$11118$F0M
     (case-lambda
       ((g$e$10511$F0M g$verify-name$10512$F0M)
        (call-with-values
          (case-lambda (() (g$parse-library$7617$F0M g$e$10511$F0M)))
          (case-lambda
            ((g$name*$10517$F0M
               g$exp*$10518$F0M
               g$imp*$10519$F0M
               g$b*$10520$F0M)
             ((case-lambda
                ((g$b*$10521$F0M
                   g$imp*$10522$F0M
                   g$exp*$10523$F0M
                   g$name*$10524$F0M)
                 (call-with-values
                   (case-lambda
                     (() (g$parse-library-name$7616$F0M g$name*$10524$F0M)))
                   (case-lambda
                     ((g$name$10527$F0M g$ver$10528$F0M)
                      ((case-lambda
                         ((g$ver$10529$F0M g$name$10530$F0M)
                          (begin
                            (g$verify-name$10512$F0M g$name$10530$F0M)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$7626$F0M
                                   g$name$10530$F0M
                                   g$exp*$10523$F0M
                                   g$imp*$10522$F0M
                                   g$b*$10521$F0M
                                   '#f)))
                              (case-lambda
                                ((g$imp*$10538$F0M
                                   g$invoke-req*$10539$F0M
                                   g$visit-req*$10540$F0M
                                   g$invoke-code$10541$F0M
                                   g$visit-code$10542$F0M
                                   g$export-subst$10543$F0M
                                   g$export-env$10544$F0M)
                                 ((case-lambda
                                    ((g$export-env$10545$F0M
                                       g$export-subst$10546$F0M
                                       g$visit-code$10547$F0M
                                       g$invoke-code$10548$F0M
                                       g$visit-req*$10549$F0M
                                       g$invoke-req*$10550$F0M
                                       g$imp*$10551$F0M)
                                     (values
                                       g$name$10530$F0M
                                       g$ver$10529$F0M
                                       g$imp*$10551$F0M
                                       g$invoke-req*$10550$F0M
                                       g$visit-req*$10549$F0M
                                       g$invoke-code$10548$F0M
                                       g$visit-code$10547$F0M
                                       g$export-subst$10546$F0M
                                       g$export-env$10545$F0M)))
                                  g$export-env$10544$F0M
                                  g$export-subst$10543$F0M
                                  g$visit-code$10542$F0M
                                  g$invoke-code$10541$F0M
                                  g$visit-req*$10540$F0M
                                  g$invoke-req*$10539$F0M
                                  g$imp*$10538$F0M)))))))
                       g$ver$10528$F0M
                       g$name$10527$F0M))))))
              g$b*$10520$F0M
              g$imp*$10519$F0M
              g$exp*$10518$F0M
              g$name*$10517$F0M)))))))
   (g$parse-top-level-program$7628$F0M
     g$parse-top-level-program$11119$F0M
     (case-lambda
       ((g$e*$10552$F0M)
        ((case-lambda
           ((g$t$10553$F0M)
            ((case-lambda
               ((g$ls/false$10554$F0M)
                (if (if g$ls/false$10554$F0M
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$10555$F0M
                               g$imp*$10556$F0M
                               g$b*$10557$F0M)
                             (eq? (g$syntax->datum$7683$F0M g$import$10555$F0M)
                                  'import)))
                          g$ls/false$10554$F0M))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$10558$F0M g$imp*$10559$F0M g$b*$10560$F0M)
                       (values g$imp*$10559$F0M g$b*$10560$F0M)))
                    g$ls/false$10554$F0M)
                  ((case-lambda
                     ((g$t$10561$F0M)
                      ((case-lambda
                         ((g$ls/false$10562$F0M)
                          (if (if g$ls/false$10562$F0M
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$10563$F0M
                                         g$x$10564$F0M
                                         g$y$10565$F0M)
                                       (eq? (g$syntax->datum$7683$F0M
                                              g$import$10563$F0M)
                                            'import)))
                                    g$ls/false$10562$F0M))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$10566$F0M
                                   g$x$10567$F0M
                                   g$y$10568$F0M)
                                 (g$syntax-violation$7680$F0M
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$7288$F0M g$e*$10552$F0M))))
                              g$ls/false$10562$F0M)
                            ((case-lambda
                               ((g$t$10569$F0M)
                                ((case-lambda
                                   ((g$ls/false$10570$F0M)
                                    (if g$ls/false$10570$F0M
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$10570$F0M)
                                      (g$syntax-violation$7680$F0M
                                        '#f
                                        '"invalid syntax"
                                        g$t$10569$F0M))))
                                 (g$syntax-dispatch$7569$F0M
                                   g$t$10569$F0M
                                   '_))))
                             g$t$10561$F0M))))
                       (g$syntax-dispatch$7569$F0M
                         g$t$10561$F0M
                         '((any . any) . any)))))
                   g$t$10553$F0M))))
             (g$syntax-dispatch$7569$F0M
               g$t$10553$F0M
               '((any . each-any) . each-any)))))
         g$e*$10552$F0M))))
   (g$top-level-expander$7629$F0M
     g$top-level-expander$11120$F0M
     (case-lambda
       ((g$e*$10571$F0M)
        (call-with-values
          (case-lambda (() (g$parse-top-level-program$7628$F0M g$e*$10571$F0M)))
          (case-lambda
            ((g$imp*$10574$F0M g$b*$10575$F0M)
             ((case-lambda
                ((g$b*$10576$F0M g$imp*$10577$F0M)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$7626$F0M
                        '()
                        '()
                        g$imp*$10577$F0M
                        g$b*$10576$F0M
                        '#t)))
                   (case-lambda
                     ((g$imp*$10585$F0M
                        g$invoke-req*$10586$F0M
                        g$visit-req*$10587$F0M
                        g$invoke-code$10588$F0M
                        g$visit-code$10589$F0M
                        g$export-subst$10590$F0M
                        g$export-env$10591$F0M)
                      ((case-lambda
                         ((g$export-env$10592$F0M
                            g$export-subst$10593$F0M
                            g$visit-code$10594$F0M
                            g$invoke-code$10595$F0M
                            g$visit-req*$10596$F0M
                            g$invoke-req*$10597$F0M
                            g$imp*$10598$F0M)
                          (values
                            g$invoke-req*$10597$F0M
                            g$invoke-code$10595$F0M)))
                       g$export-env$10591$F0M
                       g$export-subst$10590$F0M
                       g$visit-code$10589$F0M
                       g$invoke-code$10588$F0M
                       g$visit-req*$10587$F0M
                       g$invoke-req*$10586$F0M
                       g$imp*$10585$F0M))))))
              g$b*$10575$F0M
              g$imp*$10574$F0M)))))))
   (g$8766$7630$F0M
     g$8766$11121$F0M
     (make-record-type-descriptor
       'env
       '#f
       'g$8769$F0M
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$8768$7631$F0M g$8768$11122$F0M '#f)
   (g$8767$7632$F0M
     g$8767$11123$F0M
     (make-record-constructor-descriptor
       g$8766$7630$F0M
       '#f
       g$8768$7631$F0M))
   (g$env?$7633$F0M g$env?$11124$F0M (record-predicate g$8766$7630$F0M))
   (g$make-env$7634$F0M
     g$make-env$11125$F0M
     (record-constructor g$8767$7632$F0M))
   (g$env-names$7635$F0M
     g$env-names$11126$F0M
     (record-accessor g$8766$7630$F0M '0))
   (g$env-labels$7636$F0M
     g$env-labels$11127$F0M
     (record-accessor g$8766$7630$F0M '1))
   (g$env-itc$7637$F0M
     g$env-itc$11128$F0M
     (record-accessor g$8766$7630$F0M '2))
   (g$set-env-names!$7638$F0M
     g$set-env-names!$11129$F0M
     (record-mutator g$8766$7630$F0M '0))
   (g$set-env-labels!$7639$F0M
     g$set-env-labels!$11130$F0M
     (record-mutator g$8766$7630$F0M '1))
   (g$set-env-itc!$7640$F0M
     g$set-env-itc!$11131$F0M
     (record-mutator g$8766$7630$F0M '2))
   (g$rp$7641$F0M
     g$rp$11132$F0M
     (make-record-printer
       'env
       (case-lambda
         ((g$x$10599$F0M g$p$10600$F0M g$wr$10601$F0M)
          (display '"#<environment>" g$p$10600$F0M)))))
   (g$8785$7642$F0M
     g$8785$11133$F0M
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$8788$F0M
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$8787$7643$F0M g$8787$11134$F0M '#f)
   (g$8786$7644$F0M
     g$8786$11135$F0M
     (make-record-constructor-descriptor
       g$8785$7642$F0M
       '#f
       g$8787$7643$F0M))
   (g$interaction-env?$7645$F0M
     g$interaction-env?$11136$F0M
     (record-predicate g$8785$7642$F0M))
   (g$make-interaction-env$7646$F0M
     g$make-interaction-env$11137$F0M
     (record-constructor g$8786$7644$F0M))
   (g$interaction-env-rib$7647$F0M
     g$interaction-env-rib$11138$F0M
     (record-accessor g$8785$7642$F0M '0))
   (g$interaction-env-r$7648$F0M
     g$interaction-env-r$11139$F0M
     (record-accessor g$8785$7642$F0M '1))
   (g$interaction-env-locs$7649$F0M
     g$interaction-env-locs$11140$F0M
     (record-accessor g$8785$7642$F0M '2))
   (g$set-interaction-env-rib!$7650$F0M
     g$set-interaction-env-rib!$11141$F0M
     (record-mutator g$8785$7642$F0M '0))
   (g$set-interaction-env-r!$7651$F0M
     g$set-interaction-env-r!$11142$F0M
     (record-mutator g$8785$7642$F0M '1))
   (g$set-interaction-env-locs!$7652$F0M
     g$set-interaction-env-locs!$11143$F0M
     (record-mutator g$8785$7642$F0M '2))
   (g$rp$7653$F0M
     g$rp$11144$F0M
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$10602$F0M g$p$10603$F0M g$wr$10604$F0M)
          (display '"#<environment>" g$p$10603$F0M)))))
   (g$interaction-environment-symbols$7654$F0M
     g$interaction-environment-symbols$11145$F0M
     (case-lambda
       (()
        (g$environment-symbols$7658$F0M (g$interaction-environment$7686$F0M)))))
   (g$environment-bindings$7655$F0M
     g$environment-bindings$11146$F0M
     (case-lambda
       ((g$e$10605$F0M)
        (vector->list
          (vector-map
            (case-lambda
              ((g$name$10606$F0M g$label$10607$F0M)
               (g$parse-binding$7656$F0M
                 (cons
                   g$name$10606$F0M
                   (g$imported-label->binding$7100$F0M g$label$10607$F0M)))))
            (g$env-names$7635$F0M g$e$10605$F0M)
            (g$env-labels$7636$F0M g$e$10605$F0M))))))
   (g$parse-binding$7656$F0M
     g$parse-binding$11147$F0M
     (case-lambda
       ((g$b$10608$F0M)
        (cons
          (car g$b$10608$F0M)
          ((case-lambda
             ((g$t$10609$F0M)
              (if (g$memv$5009$F0M g$t$10609$F0M '(core-prim global))
                'procedure
                (if (g$memv$5009$F0M
                      g$t$10609$F0M
                      '(core-macro macro global-macro))
                  'syntax
                  (if (g$memv$5009$F0M g$t$10609$F0M '($core-rtd))
                    'record
                    (if (eq? (car g$b$10608$F0M)
                             (g$cadr$5178$F0M g$b$10608$F0M))
                      'syntax
                      'unknown))))))
           (g$cadr$5178$F0M g$b$10608$F0M))))))
   (g$environment?$7657$F0M
     g$environment?$11148$F0M
     (case-lambda
       ((g$x$10610$F0M)
        ((case-lambda
           ((g$t$10611$F0M)
            (if g$t$10611$F0M
              g$t$10611$F0M
              (begin '#f (g$interaction-env?$7645$F0M g$x$10610$F0M)))))
         (g$env?$7633$F0M g$x$10610$F0M)))))
   (g$environment-symbols$7658$F0M
     g$environment-symbols$11149$F0M
     (case-lambda
       ((g$x$10612$F0M)
        (if (g$env?$7633$F0M g$x$10612$F0M)
          (vector->list (g$env-names$7635$F0M g$x$10612$F0M))
          (if (g$interaction-env?$7645$F0M g$x$10612$F0M)
            (map values
                 (g$rib-sym*$7241$F0M
                   (g$interaction-env-rib$7647$F0M g$x$10612$F0M)))
            (assertion-violation
              'environment-symbols
              '"not an environment"
              g$x$10612$F0M))))))
   (g$environment$7659$F0M
     g$environment$11150$F0M
     (case-lambda
       (g$imp*$10613$F0M
        ((case-lambda
           ((g$itc$10614$F0M)
            ((case-lambda
               ((g$imp-collector$10617$F0M g$imp-collector$10618$F0M)
                ((case-lambda
                   ((g$swap$10619$F0M)
                    (dynamic-wind
                      g$swap$10619$F0M
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$7618$F0M g$imp*$10613$F0M)))
                           (case-lambda
                             ((g$subst-names$10622$F0M g$subst-labels$10623$F0M)
                              ((case-lambda
                                 ((g$subst-labels$10624$F0M
                                    g$subst-names$10625$F0M)
                                  (g$make-env$7634$F0M
                                    g$subst-names$10625$F0M
                                    g$subst-labels$10624$F0M
                                    g$itc$10614$F0M)))
                               g$subst-labels$10623$F0M
                               g$subst-names$10622$F0M))))))
                      g$swap$10619$F0M)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$10626$F0M)
                        (begin
                          (g$imp-collector$10617$F0M g$imp-collector$10618$F0M)
                          (set! g$imp-collector$10618$F0M g$t$10626$F0M))))
                     (g$imp-collector$10617$F0M)))))))
             g$imp-collector$7623$F0M
             g$itc$10614$F0M)))
         (g$make-collector$7620$F0M)))))
   (g$null-environment$7660$F0M
     g$null-environment$11151$F0M
     (case-lambda
       ((g$n$10627$F0M)
        (begin
          (if (not (eqv? g$n$10627$F0M '5))
            (assertion-violation 'null-environment '"not 5" g$n$10627$F0M)
            (void))
          (g$environment$7659$F0M '(psyntax null-environment-5))))))
   (g$scheme-report-environment$7661$F0M
     g$scheme-report-environment$11152$F0M
     (case-lambda
       ((g$n$10628$F0M)
        (begin
          (if (not (eqv? g$n$10628$F0M '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$10628$F0M)
            (void))
          (g$environment$7659$F0M '(psyntax scheme-report-environment-5))))))
   (g$expand$7662$F0M
     g$expand$11153$F0M
     (case-lambda
       ((g$x$10629$F0M g$env$10630$F0M)
        (if (g$env?$7633$F0M g$env$10630$F0M)
          ((case-lambda
             ((g$rib$10631$F0M)
              ((case-lambda
                 ((g$x$10632$F0M
                    g$itc$10633$F0M
                    g$rtc$10634$F0M
                    g$vtc$10635$F0M)
                  ((case-lambda
                     ((g$x$10636$F0M)
                      (begin
                        (g$seal-rib!$7257$F0M g$rib$10631$F0M)
                        (values g$x$10636$F0M (g$rtc$10634$F0M)))))
                   ((case-lambda
                      ((g$top-level-context$10645$F0M
                         g$inv-collector$10646$F0M
                         g$vis-collector$10647$F0M
                         g$imp-collector$10648$F0M
                         g$top-level-context$10649$F0M
                         g$inv-collector$10650$F0M
                         g$vis-collector$10651$F0M
                         g$imp-collector$10652$F0M)
                       ((case-lambda
                          ((g$swap$10653$F0M)
                           (dynamic-wind
                             g$swap$10653$F0M
                             (case-lambda
                               (() (g$chi-expr$7587$F0M g$x$10632$F0M '() '())))
                             g$swap$10653$F0M)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$10654$F0M)
                                 (begin
                                   (g$top-level-context$10645$F0M
                                     g$top-level-context$10649$F0M)
                                   (set! g$top-level-context$10649$F0M
                                     g$t$10654$F0M))))
                              (g$top-level-context$10645$F0M))
                             ((case-lambda
                                ((g$t$10655$F0M)
                                 (begin
                                   (g$inv-collector$10646$F0M
                                     g$inv-collector$10650$F0M)
                                   (set! g$inv-collector$10650$F0M
                                     g$t$10655$F0M))))
                              (g$inv-collector$10646$F0M))
                             ((case-lambda
                                ((g$t$10656$F0M)
                                 (begin
                                   (g$vis-collector$10647$F0M
                                     g$vis-collector$10651$F0M)
                                   (set! g$vis-collector$10651$F0M
                                     g$t$10656$F0M))))
                              (g$vis-collector$10647$F0M))
                             ((case-lambda
                                ((g$t$10657$F0M)
                                 (begin
                                   (g$imp-collector$10648$F0M
                                     g$imp-collector$10652$F0M)
                                   (set! g$imp-collector$10652$F0M
                                     g$t$10657$F0M))))
                              (g$imp-collector$10648$F0M))))))))
                    g$top-level-context$7687$F0M
                    g$inv-collector$7621$F0M
                    g$vis-collector$7622$F0M
                    g$imp-collector$7623$F0M
                    '#f
                    g$rtc$10634$F0M
                    g$vtc$10635$F0M
                    g$itc$10633$F0M))))
               (g$make-stx$7264$F0M
                 g$x$10629$F0M
                 g$top-mark*$7228$F0M
                 (list g$rib$10631$F0M)
                 '())
               (g$env-itc$7637$F0M g$env$10630$F0M)
               (g$make-collector$7620$F0M)
               (g$make-collector$7620$F0M))))
           (g$make-top-rib$7619$F0M
             (g$env-names$7635$F0M g$env$10630$F0M)
             (g$env-labels$7636$F0M g$env$10630$F0M)))
          (if (g$interaction-env?$7645$F0M g$env$10630$F0M)
            ((case-lambda
               ((g$rib$10658$F0M g$r$10659$F0M g$rtc$10660$F0M)
                ((case-lambda
                   ((g$x$10661$F0M)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$10672$F0M
                               g$inv-collector$10673$F0M
                               g$vis-collector$10674$F0M
                               g$imp-collector$10675$F0M
                               g$top-level-context$10676$F0M
                               g$inv-collector$10677$F0M
                               g$vis-collector$10678$F0M
                               g$imp-collector$10679$F0M)
                             ((case-lambda
                                ((g$swap$10680$F0M)
                                 (dynamic-wind
                                   g$swap$10680$F0M
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$7625$F0M
                                        g$x$10661$F0M
                                        g$rib$10658$F0M
                                        g$r$10659$F0M)))
                                   g$swap$10680$F0M)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$10681$F0M)
                                       (begin
                                         (g$top-level-context$10672$F0M
                                           g$top-level-context$10676$F0M)
                                         (set! g$top-level-context$10676$F0M
                                           g$t$10681$F0M))))
                                    (g$top-level-context$10672$F0M))
                                   ((case-lambda
                                      ((g$t$10682$F0M)
                                       (begin
                                         (g$inv-collector$10673$F0M
                                           g$inv-collector$10677$F0M)
                                         (set! g$inv-collector$10677$F0M
                                           g$t$10682$F0M))))
                                    (g$inv-collector$10673$F0M))
                                   ((case-lambda
                                      ((g$t$10683$F0M)
                                       (begin
                                         (g$vis-collector$10674$F0M
                                           g$vis-collector$10678$F0M)
                                         (set! g$vis-collector$10678$F0M
                                           g$t$10683$F0M))))
                                    (g$vis-collector$10674$F0M))
                                   ((case-lambda
                                      ((g$t$10684$F0M)
                                       (begin
                                         (g$imp-collector$10675$F0M
                                           g$imp-collector$10679$F0M)
                                         (set! g$imp-collector$10679$F0M
                                           g$t$10684$F0M))))
                                    (g$imp-collector$10675$F0M))))))))
                          g$top-level-context$7687$F0M
                          g$inv-collector$7621$F0M
                          g$vis-collector$7622$F0M
                          g$imp-collector$7623$F0M
                          g$env$10630$F0M
                          g$rtc$10660$F0M
                          (g$make-collector$7620$F0M)
                          (g$make-collector$7620$F0M))))
                      (case-lambda
                        ((g$e$10685$F0M g$r^$10686$F0M)
                         ((case-lambda
                            ((g$r^$10687$F0M g$e$10688$F0M)
                             (begin
                               (g$set-interaction-env-r!$7651$F0M
                                 g$env$10630$F0M
                                 g$r^$10687$F0M)
                               (values g$e$10688$F0M (g$rtc$10660$F0M)))))
                          g$r^$10686$F0M
                          g$e$10685$F0M))))))
                 (g$make-stx$7264$F0M
                   g$x$10629$F0M
                   g$top-mark*$7228$F0M
                   (list g$rib$10658$F0M)
                   '()))))
             (g$interaction-env-rib$7647$F0M g$env$10630$F0M)
             (g$interaction-env-r$7648$F0M g$env$10630$F0M)
             (g$make-collector$7620$F0M))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$10630$F0M))))))
   (g$eval$7663$F0M
     g$eval$11154$F0M
     (case-lambda
       ((g$x$10689$F0M g$env$10690$F0M)
        (begin
          (if (not (g$environment?$7657$F0M g$env$10690$F0M))
            (error 'eval '"not an environment" g$env$10690$F0M)
            (void))
          (call-with-values
            (case-lambda (() (g$expand$7662$F0M g$x$10689$F0M g$env$10690$F0M)))
            (case-lambda
              ((g$x$10693$F0M g$invoke-req*$10694$F0M)
               ((case-lambda
                  ((g$invoke-req*$10695$F0M g$x$10696$F0M)
                   (begin
                     (for-each
                       g$invoke-library$7101$F0M
                       g$invoke-req*$10695$F0M)
                     (eval-core (g$expanded->core$6809$F0M g$x$10696$F0M)))))
                g$invoke-req*$10694$F0M
                g$x$10693$F0M))))))))
   (g$library-expander$7664$F0M
     g$library-expander$11155$F0M
     (case-lambda
       ((g$x$10697$F0M g$filename$10698$F0M g$verify-name$10699$F0M)
        (letrec* ((g$build-visit-code$10700$F0M
                    (case-lambda
                      ((g$macro*$10743$F0M)
                       (if (null? g$macro*$10743$F0M)
                         (g$build-void$7221$F0M)
                         (g$build-sequence$7220$F0M
                           '#f
                           (map (case-lambda
                                  ((g$x$10744$F0M)
                                   ((case-lambda
                                      ((g$loc$10745$F0M g$src$10746$F0M)
                                       (list
                                         'set!
                                         g$loc$10745$F0M
                                         g$src$10746$F0M)))
                                    (car g$x$10744$F0M)
                                    (g$cddr$5180$F0M g$x$10744$F0M))))
                                g$macro*$10743$F0M))))))
                  (g$visit!$10701$F0M
                    (case-lambda
                      ((g$macro*$10739$F0M)
                       (for-each
                         (case-lambda
                           ((g$x$10740$F0M)
                            ((case-lambda
                               ((g$loc$10741$F0M g$proc$10742$F0M)
                                (set-symbol-value!
                                  g$loc$10741$F0M
                                  g$proc$10742$F0M)))
                             (car g$x$10740$F0M)
                             (g$cadr$5178$F0M g$x$10740$F0M))))
                         g$macro*$10739$F0M)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$7627$F0M
                 g$x$10697$F0M
                 g$verify-name$10699$F0M)))
            (case-lambda
              ((g$name$10711$F0M
                 g$ver$10712$F0M
                 g$imp*$10713$F0M
                 g$inv*$10714$F0M
                 g$vis*$10715$F0M
                 g$invoke-code$10716$F0M
                 g$macro*$10717$F0M
                 g$export-subst$10718$F0M
                 g$export-env$10719$F0M)
               ((case-lambda
                  ((g$export-env$10720$F0M
                     g$export-subst$10721$F0M
                     g$macro*$10722$F0M
                     g$invoke-code$10723$F0M
                     g$vis*$10724$F0M
                     g$inv*$10725$F0M
                     g$imp*$10726$F0M
                     g$ver$10727$F0M
                     g$name$10728$F0M)
                   ((case-lambda
                      ((g$id$10729$F0M
                         g$name$10730$F0M
                         g$ver$10731$F0M
                         g$imp*$10732$F0M
                         g$vis*$10733$F0M
                         g$inv*$10734$F0M
                         g$visit-proc$10735$F0M
                         g$invoke-proc$10736$F0M
                         g$visit-code$10737$F0M
                         g$invoke-code$10738$F0M)
                       (begin
                         (g$install-library$7099$F0M
                           g$id$10729$F0M
                           g$name$10730$F0M
                           g$ver$10731$F0M
                           g$imp*$10732$F0M
                           g$vis*$10733$F0M
                           g$inv*$10734$F0M
                           g$export-subst$10721$F0M
                           g$export-env$10720$F0M
                           g$visit-proc$10735$F0M
                           g$invoke-proc$10736$F0M
                           g$visit-code$10737$F0M
                           g$invoke-code$10738$F0M
                           '#t
                           g$filename$10698$F0M)
                         (values
                           g$id$10729$F0M
                           g$name$10730$F0M
                           g$ver$10731$F0M
                           g$imp*$10732$F0M
                           g$vis*$10733$F0M
                           g$inv*$10734$F0M
                           g$invoke-code$10738$F0M
                           g$visit-code$10737$F0M
                           g$export-subst$10721$F0M
                           g$export-env$10720$F0M))))
                    (gensym)
                    g$name$10728$F0M
                    g$ver$10727$F0M
                    (map g$library-spec$7105$F0M g$imp*$10726$F0M)
                    (map g$library-spec$7105$F0M g$vis*$10724$F0M)
                    (map g$library-spec$7105$F0M g$inv*$10725$F0M)
                    (case-lambda (() (g$visit!$10701$F0M g$macro*$10722$F0M)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$6809$F0M g$invoke-code$10723$F0M))))
                    (g$build-visit-code$10700$F0M g$macro*$10722$F0M)
                    g$invoke-code$10723$F0M)))
                g$export-env$10719$F0M
                g$export-subst$10718$F0M
                g$macro*$10717$F0M
                g$invoke-code$10716$F0M
                g$vis*$10715$F0M
                g$inv*$10714$F0M
                g$imp*$10713$F0M
                g$ver$10712$F0M
                g$name$10711$F0M))))))
       ((g$x$10747$F0M g$filename$10748$F0M)
        (g$library-expander$7664$F0M
          g$x$10747$F0M
          g$filename$10748$F0M
          (case-lambda ((g$x$10749$F0M) (values)))))
       ((g$x$10750$F0M)
        (g$library-expander$7664$F0M
          g$x$10750$F0M
          '#f
          (case-lambda ((g$x$10751$F0M) (values)))))))
   (g$boot-library-expand$7665$F0M
     g$boot-library-expand$11156$F0M
     (case-lambda
       ((g$x$10752$F0M)
        (call-with-values
          (case-lambda (() (g$library-expander$7664$F0M g$x$10752$F0M)))
          (case-lambda
            ((g$id$10763$F0M
               g$name$10764$F0M
               g$ver$10765$F0M
               g$imp*$10766$F0M
               g$vis*$10767$F0M
               g$inv*$10768$F0M
               g$invoke-code$10769$F0M
               g$visit-code$10770$F0M
               g$export-subst$10771$F0M
               g$export-env$10772$F0M)
             ((case-lambda
                ((g$export-env$10773$F0M
                   g$export-subst$10774$F0M
                   g$visit-code$10775$F0M
                   g$invoke-code$10776$F0M
                   g$inv*$10777$F0M
                   g$vis*$10778$F0M
                   g$imp*$10779$F0M
                   g$ver$10780$F0M
                   g$name$10781$F0M
                   g$id$10782$F0M)
                 (values
                   g$name$10781$F0M
                   g$invoke-code$10776$F0M
                   g$export-subst$10774$F0M
                   g$export-env$10773$F0M)))
              g$export-env$10772$F0M
              g$export-subst$10771$F0M
              g$visit-code$10770$F0M
              g$invoke-code$10769$F0M
              g$inv*$10768$F0M
              g$vis*$10767$F0M
              g$imp*$10766$F0M
              g$ver$10765$F0M
              g$name$10764$F0M
              g$id$10763$F0M)))))))
   (g$rev-map-append$7666$F0M
     g$rev-map-append$11157$F0M
     (case-lambda
       ((g$f$10783$F0M g$ls$10784$F0M g$ac$10785$F0M)
        (if (null? g$ls$10784$F0M)
          g$ac$10785$F0M
          (g$rev-map-append$7666$F0M
            g$f$10783$F0M
            (cdr g$ls$10784$F0M)
            (cons (g$f$10783$F0M (car g$ls$10784$F0M)) g$ac$10785$F0M))))))
   (g$build-exports$7667$F0M
     g$build-exports$11158$F0M
     (case-lambda
       ((g$lex*+loc*$10786$F0M g$init*$10787$F0M)
        (g$build-sequence$7220$F0M
          '#f
          (cons
            (g$build-void$7221$F0M)
            (g$rev-map-append$7666$F0M
              (case-lambda
                ((g$x$10788$F0M)
                 (list 'set! (cdr g$x$10788$F0M) (car g$x$10788$F0M))))
              g$lex*+loc*$10786$F0M
              g$init*$10787$F0M))))))
   (g$make-export-subst$7668$F0M
     g$make-export-subst$11159$F0M
     (case-lambda
       ((g$name*$10789$F0M g$id*$10790$F0M)
        (map (case-lambda
               ((g$name$10791$F0M g$id$10792$F0M)
                ((case-lambda
                   ((g$label$10793$F0M)
                    (begin
                      (if (not g$label$10793$F0M)
                        (g$syntax-violation$7680$F0M
                          '#f
                          '"cannot export unbound identifier"
                          g$id$10792$F0M)
                        (void))
                      (cons g$name$10791$F0M g$label$10793$F0M))))
                 (g$id->label$7304$F0M g$id$10792$F0M))))
             g$name*$10789$F0M
             g$id*$10790$F0M))))
   (g$make-export-env/macros$7669$F0M
     g$make-export-env/macros$11160$F0M
     (case-lambda
       ((g$lex*$10794$F0M g$loc*$10795$F0M g$r$10796$F0M)
        (letrec* ((g$lookup$10797$F0M
                    (case-lambda
                      ((g$x$10812$F0M)
                       ((letrec ((g$f$10813$F0M
                                   (case-lambda
                                     ((g$x$10814$F0M
                                        g$lex*$10815$F0M
                                        g$loc*$10816$F0M)
                                      (if (pair? g$lex*$10815$F0M)
                                        (if (eq? g$x$10814$F0M
                                                 (car g$lex*$10815$F0M))
                                          (car g$loc*$10816$F0M)
                                          (g$f$10813$F0M
                                            g$x$10814$F0M
                                            (cdr g$lex*$10815$F0M)
                                            (cdr g$loc*$10816$F0M)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$10813$F0M)
                        g$x$10812$F0M
                        g$lex*$10794$F0M
                        g$loc*$10795$F0M)))))
          ((letrec ((g$f$10798$F0M
                      (case-lambda
                        ((g$r$10799$F0M
                           g$env$10800$F0M
                           g$global*$10801$F0M
                           g$macro*$10802$F0M)
                         (if (null? g$r$10799$F0M)
                           (values
                             g$env$10800$F0M
                             g$global*$10801$F0M
                             g$macro*$10802$F0M)
                           ((case-lambda
                              ((g$x$10803$F0M)
                               ((case-lambda
                                  ((g$label$10804$F0M g$b$10805$F0M)
                                   ((case-lambda
                                      ((g$t$10806$F0M)
                                       (if (g$memv$5009$F0M
                                             g$t$10806$F0M
                                             '(lexical))
                                         ((case-lambda
                                            ((g$v$10807$F0M)
                                             ((case-lambda
                                                ((g$loc$10808$F0M
                                                   g$type$10809$F0M)
                                                 (g$f$10798$F0M
                                                   (cdr g$r$10799$F0M)
                                                   (cons
                                                     (g$cons*$5016$F0M
                                                       g$label$10804$F0M
                                                       g$type$10809$F0M
                                                       g$loc$10808$F0M)
                                                     g$env$10800$F0M)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$7513$F0M
                                                         g$v$10807$F0M)
                                                       g$loc$10808$F0M)
                                                     g$global*$10801$F0M)
                                                   g$macro*$10802$F0M)))
                                              (g$lookup$10797$F0M
                                                (g$lexical-var$7513$F0M
                                                  g$v$10807$F0M))
                                              (if (g$lexical-mutable?$7514$F0M
                                                    g$v$10807$F0M)
                                                'mutable
                                                'global))))
                                          (g$binding-value$7309$F0M
                                            g$b$10805$F0M))
                                         (if (g$memv$5009$F0M
                                               g$t$10806$F0M
                                               '(local-macro))
                                           ((case-lambda
                                              ((g$loc$10810$F0M)
                                               (g$f$10798$F0M
                                                 (cdr g$r$10799$F0M)
                                                 (cons
                                                   (g$cons*$5016$F0M
                                                     g$label$10804$F0M
                                                     'global-macro
                                                     g$loc$10810$F0M)
                                                   g$env$10800$F0M)
                                                 g$global*$10801$F0M
                                                 (cons
                                                   (cons
                                                     g$loc$10810$F0M
                                                     (g$binding-value$7309$F0M
                                                       g$b$10805$F0M))
                                                   g$macro*$10802$F0M))))
                                            (gensym))
                                           (if (g$memv$5009$F0M
                                                 g$t$10806$F0M
                                                 '(local-macro!))
                                             ((case-lambda
                                                ((g$loc$10811$F0M)
                                                 (g$f$10798$F0M
                                                   (cdr g$r$10799$F0M)
                                                   (cons
                                                     (g$cons*$5016$F0M
                                                       g$label$10804$F0M
                                                       'global-macro!
                                                       g$loc$10811$F0M)
                                                     g$env$10800$F0M)
                                                   g$global*$10801$F0M
                                                   (cons
                                                     (cons
                                                       g$loc$10811$F0M
                                                       (g$binding-value$7309$F0M
                                                         g$b$10805$F0M))
                                                     g$macro*$10802$F0M))))
                                              (gensym))
                                             (if (g$memv$5009$F0M
                                                   g$t$10806$F0M
                                                   '($rtd $module))
                                               (g$f$10798$F0M
                                                 (cdr g$r$10799$F0M)
                                                 (cons
                                                   g$x$10803$F0M
                                                   g$env$10800$F0M)
                                                 g$global*$10801$F0M
                                                 g$macro*$10802$F0M)
                                               (assertion-violation
                                                 'expander
                                                 '"BUG: do not know how to export"
                                                 (g$binding-type$7308$F0M
                                                   g$b$10805$F0M)
                                                 (g$binding-value$7309$F0M
                                                   g$b$10805$F0M))))))))
                                    (g$binding-type$7308$F0M g$b$10805$F0M))))
                                (car g$x$10803$F0M)
                                (cdr g$x$10803$F0M))))
                            (car g$r$10799$F0M)))))))
             g$f$10798$F0M)
           g$r$10796$F0M
           '()
           '()
           '())))))
   (g$generate-temporaries$7670$F0M
     g$generate-temporaries$11161$F0M
     (case-lambda
       ((g$ls$10817$F0M)
        ((case-lambda
           ((g$t$10818$F0M)
            ((case-lambda
               ((g$ls/false$10819$F0M)
                (if g$ls/false$10819$F0M
                  (apply
                    (case-lambda
                      ((g$ls$10820$F0M)
                       (map (case-lambda
                              ((g$x$10821$F0M)
                               (g$make-stx$7264$F0M
                                 ((case-lambda
                                    ((g$x$10822$F0M)
                                     (if ((case-lambda
                                            ((g$t$10823$F0M)
                                             (if g$t$10823$F0M
                                               g$t$10823$F0M
                                               (begin
                                                 '#f
                                                 (string? g$x$10822$F0M)))))
                                          (symbol? g$x$10822$F0M))
                                       (gensym g$x$10822$F0M)
                                       (gensym 't))))
                                  (g$syntax->datum$7683$F0M g$x$10821$F0M))
                                 g$top-mark*$7228$F0M
                                 '()
                                 '())))
                            g$ls$10820$F0M)))
                    g$ls/false$10819$F0M)
                  ((case-lambda
                     ((g$t$10824$F0M)
                      ((case-lambda
                         ((g$ls/false$10825$F0M)
                          (if g$ls/false$10825$F0M
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$10825$F0M)
                            (g$syntax-violation$7680$F0M
                              '#f
                              '"invalid syntax"
                              g$t$10824$F0M))))
                       (g$syntax-dispatch$7569$F0M g$t$10824$F0M '_))))
                   g$t$10818$F0M))))
             (g$syntax-dispatch$7569$F0M g$t$10818$F0M 'each-any))))
         g$ls$10817$F0M))))
   (g$free-identifier=?$7671$F0M
     g$free-identifier=?$11162$F0M
     (case-lambda
       ((g$x$10826$F0M g$y$10827$F0M)
        (if (g$id?$7291$F0M g$x$10826$F0M)
          (if (g$id?$7291$F0M g$y$10827$F0M)
            (g$free-id=?$7295$F0M g$x$10826$F0M g$y$10827$F0M)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$10827$F0M))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$10826$F0M)))))
   (g$bound-identifier=?$7672$F0M
     g$bound-identifier=?$11163$F0M
     (case-lambda
       ((g$x$10828$F0M g$y$10829$F0M)
        (if (g$id?$7291$F0M g$x$10828$F0M)
          (if (g$id?$7291$F0M g$y$10829$F0M)
            (g$bound-id=?$7294$F0M g$x$10828$F0M g$y$10829$F0M)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$10829$F0M))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$10828$F0M)))))
   (g$make-source-condition$7673$F0M
     g$make-source-condition$11164$F0M
     (case-lambda
       ((g$x$10830$F0M)
        (letrec* ((g$11710$10831$F0M
                    (make-record-type-descriptor
                      '&source-information
                      &condition-rtd
                      'g$11713$F0M
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$11712$10832$F0M '#f)
                  (g$11711$10833$F0M
                    (make-record-constructor-descriptor
                      g$11710$10831$F0M
                      &condition-rcd
                      g$11712$10832$F0M))
                  (g$11709$10834$F0M (record-predicate g$11710$10831$F0M))
                  (g$make-source-condition$10835$F0M
                    (record-constructor g$11711$10833$F0M))
                  (g$11707$10836$F0M (record-accessor g$11710$10831$F0M '0))
                  (g$11708$10837$F0M (record-accessor g$11710$10831$F0M '1))
                  (g$source-condition?$10838$F0M
                    (condition-predicate g$11710$10831$F0M))
                  (g$source-filename$10839$F0M
                    (condition-accessor g$11710$10831$F0M g$11707$10836$F0M))
                  (g$source-character$10840$F0M
                    (condition-accessor g$11710$10831$F0M g$11708$10837$F0M)))
          (if (pair? g$x$10830$F0M)
            (g$make-source-condition$10835$F0M
              (car g$x$10830$F0M)
              (cdr g$x$10830$F0M))
            (condition))))))
   (g$extract-position-condition$7674$F0M
     g$extract-position-condition$11165$F0M
     (case-lambda
       ((g$x$10841$F0M)
        (g$make-source-condition$7673$F0M
          (g$expression-position$7675$F0M g$x$10841$F0M)))))
   (g$expression-position$7675$F0M
     g$expression-position$11166$F0M
     (case-lambda
       ((g$x$10842$F0M)
        (if (g$stx?$7263$F0M g$x$10842$F0M)
          (begin
            '#f
            ((case-lambda
               ((g$x$10843$F0M)
                (if (annotation? g$x$10843$F0M)
                  (begin '#f (annotation-source g$x$10843$F0M))
                  '#f)))
             (g$stx-expr$7265$F0M g$x$10842$F0M)))
          '#f))))
   (g$assertion-error$7676$F0M
     g$assertion-error$11167$F0M
     (case-lambda
       ((g$expr$10844$F0M g$pos$10845$F0M)
        (raise
          (condition
            (g$make-assertion-violation$5752$F0M)
            (g$make-who-condition$5766$F0M 'assert)
            (g$make-message-condition$5720$F0M '"assertion failed")
            (g$make-irritants-condition$5758$F0M (list g$expr$10844$F0M))
            (g$make-source-condition$7673$F0M g$pos$10845$F0M))))))
   (g$syntax-error$7677$F0M
     g$syntax-error$11168$F0M
     (case-lambda
       ((g$x$10846$F0M . g$args$10847$F0M)
        (begin
          (if (not (g$for-all$5014$F0M string? g$args$10847$F0M))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$10847$F0M)
            (void))
          (raise
            (condition
              (g$make-message-condition$5720$F0M
                (if (null? g$args$10847$F0M)
                  '"invalid syntax"
                  (apply string-append g$args$10847$F0M)))
              (g$make-syntax-violation$5792$F0M
                (g$syntax->datum$7683$F0M g$x$10846$F0M)
                '#f)
              (g$extract-position-condition$7674$F0M g$x$10846$F0M)
              (g$extract-trace$7678$F0M g$x$10846$F0M)))))))
   (g$extract-trace$7678$F0M
     g$extract-trace$11169$F0M
     (case-lambda
       ((g$x$10848$F0M)
        (letrec* ((g$11737$10849$F0M
                    (make-record-type-descriptor
                      '&trace
                      &condition-rtd
                      'g$11740$F0M
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$11739$10850$F0M '#f)
                  (g$11738$10851$F0M
                    (make-record-constructor-descriptor
                      g$11737$10849$F0M
                      &condition-rcd
                      g$11739$10850$F0M))
                  (g$11736$10852$F0M (record-predicate g$11737$10849$F0M))
                  (g$make-trace$10853$F0M
                    (record-constructor g$11738$10851$F0M))
                  (g$11735$10854$F0M (record-accessor g$11737$10849$F0M '0))
                  (g$trace?$10855$F0M (condition-predicate g$11737$10849$F0M))
                  (g$trace-form$10856$F0M
                    (condition-accessor g$11737$10849$F0M g$11735$10854$F0M)))
          ((letrec ((g$f$10857$F0M
                      (case-lambda
                        ((g$x$10858$F0M)
                         (if (g$stx?$7263$F0M g$x$10858$F0M)
                           (apply
                             condition
                             (g$make-trace$10853$F0M g$x$10858$F0M)
                             (map g$f$10857$F0M
                                  (g$stx-ae*$7268$F0M g$x$10858$F0M)))
                           (if (annotation? g$x$10858$F0M)
                             (g$make-trace$10853$F0M
                               (g$make-stx$7264$F0M g$x$10858$F0M '() '() '()))
                             (condition)))))))
             g$f$10857$F0M)
           g$x$10848$F0M)))))
   (g$syntax-violation*$7679$F0M
     g$syntax-violation*$11170$F0M
     (case-lambda
       ((g$who$10859$F0M
          g$msg$10860$F0M
          g$form$10861$F0M
          g$condition-object$10862$F0M)
        (begin
          (if (not (string? g$msg$10860$F0M))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$10860$F0M)
            (void))
          ((case-lambda
             ((g$who$10863$F0M)
              (raise
                (condition
                  (if g$who$10863$F0M
                    (g$make-who-condition$5766$F0M g$who$10863$F0M)
                    (condition))
                  (g$make-message-condition$5720$F0M g$msg$10860$F0M)
                  g$condition-object$10862$F0M
                  (g$extract-position-condition$7674$F0M g$form$10861$F0M)
                  (g$extract-trace$7678$F0M g$form$10861$F0M)))))
           (if ((case-lambda
                  ((g$t$10864$F0M)
                   (if g$t$10864$F0M
                     g$t$10864$F0M
                     (begin '#f (symbol? g$who$10859$F0M)))))
                (string? g$who$10859$F0M))
             g$who$10859$F0M
             (if (not g$who$10859$F0M)
               ((case-lambda
                  ((g$t$10865$F0M)
                   ((case-lambda
                      ((g$ls/false$10866$F0M)
                       (if (if g$ls/false$10866$F0M
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$10867$F0M)
                                    (g$id?$7291$F0M g$id$10867$F0M)))
                                 g$ls/false$10866$F0M))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$10868$F0M)
                              (g$syntax->datum$7683$F0M g$id$10868$F0M)))
                           g$ls/false$10866$F0M)
                         ((case-lambda
                            ((g$t$10869$F0M)
                             ((case-lambda
                                ((g$ls/false$10870$F0M)
                                 (if (if g$ls/false$10870$F0M
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$10871$F0M g$rest$10872$F0M)
                                              (g$id?$7291$F0M g$id$10871$F0M)))
                                           g$ls/false$10870$F0M))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$10873$F0M g$rest$10874$F0M)
                                        (g$syntax->datum$7683$F0M
                                          g$id$10873$F0M)))
                                     g$ls/false$10870$F0M)
                                   ((case-lambda
                                      ((g$t$10875$F0M)
                                       ((case-lambda
                                          ((g$ls/false$10876$F0M)
                                           (if g$ls/false$10876$F0M
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$10876$F0M)
                                             (g$syntax-violation$7680$F0M
                                               '#f
                                               '"invalid syntax"
                                               g$t$10875$F0M))))
                                        (g$syntax-dispatch$7569$F0M
                                          g$t$10875$F0M
                                          '_))))
                                    g$t$10869$F0M))))
                              (g$syntax-dispatch$7569$F0M
                                g$t$10869$F0M
                                '(any . any)))))
                          g$t$10865$F0M))))
                    (g$syntax-dispatch$7569$F0M g$t$10865$F0M 'any))))
                g$form$10861$F0M)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$10859$F0M))))))))
   (g$syntax-violation$7680$F0M
     g$syntax-violation$11171$F0M
     (case-lambda
       ((g$who$10877$F0M g$msg$10878$F0M g$form$10879$F0M)
        (g$syntax-violation$7680$F0M
          g$who$10877$F0M
          g$msg$10878$F0M
          g$form$10879$F0M
          '#f))
       ((g$who$10880$F0M g$msg$10881$F0M g$form$10882$F0M g$subform$10883$F0M)
        (g$syntax-violation*$7679$F0M
          g$who$10880$F0M
          g$msg$10881$F0M
          g$form$10882$F0M
          (g$make-syntax-violation$5792$F0M
            (g$syntax->datum$7683$F0M g$form$10882$F0M)
            (g$syntax->datum$7683$F0M g$subform$10883$F0M))))))
   (g$identifier?$7681$F0M
     g$identifier?$11172$F0M
     (case-lambda ((g$x$10884$F0M) (g$id?$7291$F0M g$x$10884$F0M))))
   (g$datum->syntax$7682$F0M
     g$datum->syntax$11173$F0M
     (case-lambda
       ((g$id$10885$F0M g$datum$10886$F0M)
        (if (g$id?$7291$F0M g$id$10885$F0M)
          (g$datum->stx$7274$F0M g$id$10885$F0M g$datum$10886$F0M)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$10885$F0M)))))
   (g$syntax->datum$7683$F0M
     g$syntax->datum$11174$F0M
     (case-lambda ((g$x$10887$F0M) (g$stx->datum$7302$F0M g$x$10887$F0M))))
   (g$compile-r6rs-top-level$7684$F0M
     g$compile-r6rs-top-level$11175$F0M
     (case-lambda
       ((g$x*$10888$F0M)
        (call-with-values
          (case-lambda (() (g$top-level-expander$7629$F0M g$x*$10888$F0M)))
          (case-lambda
            ((g$lib*$10891$F0M g$invoke-code$10892$F0M)
             ((case-lambda
                ((g$invoke-code$10893$F0M g$lib*$10894$F0M)
                 (case-lambda
                   (()
                    (begin
                      (for-each g$invoke-library$7101$F0M g$lib*$10894$F0M)
                      (eval-core
                        (g$expanded->core$6809$F0M
                          g$invoke-code$10893$F0M)))))))
              g$invoke-code$10892$F0M
              g$lib*$10891$F0M)))))))
   (g$pre-compile-r6rs-top-level$7685$F0M
     g$pre-compile-r6rs-top-level$11176$F0M
     (case-lambda
       ((g$x*$10895$F0M)
        (call-with-values
          (case-lambda (() (g$top-level-expander$7629$F0M g$x*$10895$F0M)))
          (case-lambda
            ((g$lib*$10898$F0M g$invoke-code$10899$F0M)
             ((case-lambda
                ((g$invoke-code$10900$F0M g$lib*$10901$F0M)
                 (begin
                   (for-each g$invoke-library$7101$F0M g$lib*$10901$F0M)
                   (compile-core
                     (g$expanded->core$6809$F0M g$invoke-code$10900$F0M)))))
              g$invoke-code$10899$F0M
              g$lib*$10898$F0M)))))))
   (g$interaction-environment$7686$F0M
     g$interaction-environment$11177$F0M
     ((case-lambda
        ((g$the-env$10902$F0M)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$10903$F0M)
                (if g$t$10903$F0M
                  g$t$10903$F0M
                  (begin
                    '#f
                    ((case-lambda
                       ((g$lib$10904$F0M g$rib$10905$F0M)
                        (begin
                          ((case-lambda
                             ((g$subst$10906$F0M)
                              (begin
                                (g$set-rib-sym*!$7246$F0M
                                  g$rib$10905$F0M
                                  (map car g$subst$10906$F0M))
                                (g$set-rib-mark**!$7247$F0M
                                  g$rib$10905$F0M
                                  (map (case-lambda
                                         ((g$x$10907$F0M) g$top-mark*$7228$F0M))
                                       g$subst$10906$F0M))
                                (g$set-rib-label*!$7248$F0M
                                  g$rib$10905$F0M
                                  (map cdr g$subst$10906$F0M)))))
                           (g$library-subst$7058$F0M g$lib$10904$F0M))
                          ((case-lambda
                             ((g$env$10908$F0M)
                              (begin
                                (set! g$the-env$10902$F0M g$env$10908$F0M)
                                g$env$10908$F0M)))
                           (g$make-interaction-env$7646$F0M
                             g$rib$10905$F0M
                             '()
                             '())))))
                     (g$find-library-by-name$7094$F0M '(ironscheme))
                     (g$make-cache-rib$7252$F0M))))))
             g$the-env$10902$F0M)))))
      '#f))
   (g$top-level-context$7687$F0M
     g$top-level-context$11178$F0M
     (g$make-parameter$6563$F0M '#f)))
  (g$current-library-expander$7091$F0M g$library-expander$7664$F0M))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$6806$F0M
      (case-lambda
        ((g$x$11231$F0M)
         ((case-lambda
            ((g$t$11232$F0M) (if g$t$11232$F0M (cdr g$t$11232$F0M) '#f)))
          (g$assq$5004$F0M
            g$x$11231$F0M
            '((ellipsis-map . g$ellipsis-map$11065$F0M)
              (ironscheme-build . g$ironscheme-build$11224$F0M)
              (syntax-error . g$syntax-error$11168$F0M)
              (syntax-dispatch . g$syntax-dispatch$11060$F0M)
              (compile-system-libraries . g$compile-system-libraries$11226$F0M)
              (compile->closure . g$compile->closure$11228$F0M)
              (compile . g$compile$11227$F0M)
              (load . g$load$11223$F0M)
              (interaction-environment . g$interaction-environment$11177$F0M)
              (string-ci>? . g$string-ci>?$5938$F0M)
              (string-ci>=? . g$string-ci>=?$5940$F0M)
              (string-ci=? . g$string-ci=?$5936$F0M)
              (string-ci<? . g$string-ci<?$5937$F0M)
              (string-ci<=? . g$string-ci<=?$5939$F0M)
              (char-ci>? . g$char-ci>?$5943$F0M)
              (char-ci>=? . g$char-ci>=?$5945$F0M)
              (char-ci=? . g$char-ci=?$5941$F0M)
              (char-ci<? . g$char-ci<?$5942$F0M)
              (char-ci<=? . g$char-ci<=?$5944$F0M)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$10998$F0M)
              (variable-transformer? . g$variable-transformer?$10997$F0M)
              (make-variable-transformer
                .
                g$make-variable-transformer$10996$F0M)
              (identifier? . g$identifier?$11172$F0M)
              (generate-temporaries . g$generate-temporaries$11161$F0M)
              (free-identifier=? . g$free-identifier=?$11162$F0M)
              (syntax->datum . g$syntax->datum$11174$F0M)
              (datum->syntax . g$datum->syntax$11173$F0M)
              (bound-identifier=? . g$bound-identifier=?$11163$F0M)
              (delete-file . g$delete-file$5472$F0M)
              (file-exists? . g$file-exists?$5471$F0M)
              (list-sort . g$list-sort$5863$F0M)
              (make-eqv-hashtable . g$make-eqv-hashtable$5453$F0M)
              (make-eq-hashtable . g$make-eq-hashtable$5452$F0M)
              (hashtable-update! . g$hashtable-update!$5459$F0M)
              (hashtable-size . g$hashtable-size$5454$F0M)
              (hashtable-set! . g$hashtable-set!$5456$F0M)
              (hashtable-ref . g$hashtable-ref$5455$F0M)
              (hashtable-delete! . g$hashtable-delete!$5457$F0M)
              (hashtable-contains? . g$hashtable-contains?$5458$F0M)
              (hashtable-clear! . g$hashtable-clear!$5460$F0M)
              (call-with-output-file . g$call-with-output-file$6289$F0M)
              (call-with-input-file . g$call-with-input-file$6288$F0M)
              (with-output-to-file . g$with-output-to-file$6287$F0M)
              (with-input-from-file . g$with-input-from-file$6286$F0M)
              (port? . g$port?$6252$F0M)
              (open-string-output-port . g$open-string-output-port$6251$F0M)
              (make-i/o-write-error . g$make-i/o-write-error$6174$F0M)
              (make-i/o-read-error . g$make-i/o-read-error$6168$F0M)
              (make-i/o-port-error . g$make-i/o-port-error$6220$F0M)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$6180$F0M)
              (make-i/o-filename-error . g$make-i/o-filename-error$6188$F0M)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$6196$F0M)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$6202$F0M)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$6214$F0M)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$6208$F0M)
              (make-i/o-error . g$make-i/o-error$6162$F0M)
              (make-i/o-encoding-error . g$make-i/o-encoding-error$6234$F0M)
              (make-i/o-decoding-error . g$make-i/o-decoding-error$6228$F0M)
              (i/o-write-error? . g$i/o-write-error?$6175$F0M)
              (i/o-read-error? . g$i/o-read-error?$6169$F0M)
              (i/o-port-error? . g$i/o-port-error?$6222$F0M)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$6182$F0M)
              (i/o-error-position . g$i/o-error-position$6183$F0M)
              (i/o-filename-error? . g$i/o-filename-error?$6190$F0M)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$6197$F0M)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$6203$F0M)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$6215$F0M)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$6209$F0M)
              (i/o-error? . g$i/o-error?$6163$F0M)
              (i/o-error-port . g$i/o-error-port$6223$F0M)
              (i/o-error-filename . g$i/o-error-filename$6191$F0M)
              (i/o-encoding-error? . g$i/o-encoding-error?$6236$F0M)
              (i/o-encoding-error-char . g$i/o-encoding-error-char$6237$F0M)
              (i/o-decoding-error? . g$i/o-decoding-error?$6229$F0M)
              (call-with-string-output-port
                .
                g$call-with-string-output-port$6253$F0M)
              (scheme-report-environment
                .
                g$scheme-report-environment$11152$F0M)
              (quotient . g$quotient$5830$F0M)
              (null-environment . g$null-environment$11151$F0M)
              (remainder . g$remainder$5831$F0M)
              (modulo . g$modulo$5832$F0M)
              (force . g$force$5834$F0M)
              (command-line . g$command-line$11220$F0M)
              (remove . g$remove$5019$F0M)
              (remv . g$remv$5020$F0M)
              (remp . g$remp$5002$F0M)
              (remq . g$remq$5021$F0M)
              (partition . g$partition$5001$F0M)
              (memv . g$memv$5009$F0M)
              (memq . g$memq$5008$F0M)
              (memp . g$memp$5011$F0M)
              (member . g$member$5010$F0M)
              (exists . g$exists$5015$F0M)
              (for-all . g$for-all$5014$F0M)
              (fold-right . g$fold-right$5018$F0M)
              (fold-left . g$fold-left$5017$F0M)
              (find . g$find$5000$F0M)
              (filter . g$filter$5003$F0M)
              (cons* . g$cons*$5016$F0M)
              (assv . g$assv$5005$F0M)
              (assq . g$assq$5004$F0M)
              (assp . g$assp$5007$F0M)
              (assoc . g$assoc$5006$F0M)
              (eval . g$eval$11154$F0M)
              (environment . g$environment$11150$F0M)
              (make-enumeration . g$make-enumeration$6421$F0M)
              (enum-set=? . g$enum-set=?$6428$F0M)
              (enum-set-universe . g$enum-set-universe$6422$F0M)
              (enum-set-union . g$enum-set-union$6429$F0M)
              (enum-set-subset? . g$enum-set-subset?$6427$F0M)
              (enum-set-projection . g$enum-set-projection$6433$F0M)
              (enum-set-member? . g$enum-set-member?$6426$F0M)
              (enum-set-intersection . g$enum-set-intersection$6430$F0M)
              (enum-set-indexer . g$enum-set-indexer$6423$F0M)
              (enum-set-difference . g$enum-set-difference$6431$F0M)
              (enum-set-constructor . g$enum-set-constructor$6424$F0M)
              (enum-set-complement . g$enum-set-complement$6432$F0M)
              (enum-set->list . g$enum-set->list$6425$F0M)
              (who-condition? . g$who-condition?$5768$F0M)
              (warning? . g$warning?$5729$F0M)
              (violation? . g$violation?$5747$F0M)
              (undefined-violation? . g$undefined-violation?$5803$F0M)
              (syntax-violation? . g$syntax-violation?$5795$F0M)
              (syntax-violation-subform . g$syntax-violation-subform$5797$F0M)
              (syntax-violation-form . g$syntax-violation-form$5796$F0M)
              (syntax-violation . g$syntax-violation$11171$F0M)
              (serious-condition? . g$serious-condition?$5735$F0M)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$5775$F0M)
              (message-condition? . g$message-condition?$5722$F0M)
              (make-who-condition . g$make-who-condition$5766$F0M)
              (make-warning . g$make-warning$5728$F0M)
              (make-violation . g$make-violation$5746$F0M)
              (make-undefined-violation . g$make-undefined-violation$5802$F0M)
              (make-syntax-violation . g$make-syntax-violation$5792$F0M)
              (make-serious-condition . g$make-serious-condition$5734$F0M)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$5774$F0M)
              (make-message-condition . g$make-message-condition$5720$F0M)
              (make-lexical-violation . g$make-lexical-violation$5786$F0M)
              (make-irritants-condition . g$make-irritants-condition$5758$F0M)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$5780$F0M)
              (make-error . g$make-error$5740$F0M)
              (make-assertion-violation . g$make-assertion-violation$5752$F0M)
              (lexical-violation? . g$lexical-violation?$5787$F0M)
              (irritants-condition? . g$irritants-condition?$5760$F0M)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$5781$F0M)
              (error? . g$error?$5741$F0M)
              (condition-who . g$condition-who$5769$F0M)
              (condition-message . g$condition-message$5723$F0M)
              (condition-irritants . g$condition-irritants$5761$F0M)
              (assertion-violation? . g$assertion-violation?$5753$F0M)
              (native-endianness . g$native-endianness$5585$F0M)
              (bytevector-u64-set! . g$bytevector-u64-set!$5606$F0M)
              (bytevector-u64-ref . g$bytevector-u64-ref$5602$F0M)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$5608$F0M)
              (bytevector-u64-native-ref . g$bytevector-u64-native-ref$5604$F0M)
              (bytevector-u32-set! . g$bytevector-u32-set!$5598$F0M)
              (bytevector-u32-ref . g$bytevector-u32-ref$5594$F0M)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$5600$F0M)
              (bytevector-u32-native-ref . g$bytevector-u32-native-ref$5596$F0M)
              (bytevector-u16-set! . g$bytevector-u16-set!$5590$F0M)
              (bytevector-u16-ref . g$bytevector-u16-ref$5586$F0M)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$5592$F0M)
              (bytevector-u16-native-ref . g$bytevector-u16-native-ref$5588$F0M)
              (bytevector-s64-set! . g$bytevector-s64-set!$5607$F0M)
              (bytevector-s64-ref . g$bytevector-s64-ref$5603$F0M)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$5609$F0M)
              (bytevector-s64-native-ref . g$bytevector-s64-native-ref$5605$F0M)
              (bytevector-s32-set! . g$bytevector-s32-set!$5599$F0M)
              (bytevector-s32-ref . g$bytevector-s32-ref$5595$F0M)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$5601$F0M)
              (bytevector-s32-native-ref . g$bytevector-s32-native-ref$5597$F0M)
              (bytevector-s16-set! . g$bytevector-s16-set!$5591$F0M)
              (bytevector-s16-ref . g$bytevector-s16-ref$5587$F0M)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$5593$F0M)
              (bytevector-s16-native-ref . g$bytevector-s16-native-ref$5589$F0M)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$5612$F0M)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$5610$F0M)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$5613$F0M)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$5611$F0M)
              (no-nans-violation? . g$no-nans-violation?$6077$F0M)
              (no-infinities-violation? . g$no-infinities-violation?$6071$F0M)
              (make-no-nans-violation . g$make-no-nans-violation$6076$F0M)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$6070$F0M)
              (fxrotate-bit-field . g$fxrotate-bit-field$6053$F0M)
              (fxif . g$fxif$6047$F0M)
              (fxcopy-bit-field . g$fxcopy-bit-field$6050$F0M)
              (fxcopy-bit . g$fxcopy-bit$6048$F0M)
              (fxbit-field . g$fxbit-field$6049$F0M)
              (fxarithmetic-shift-right . g$fxarithmetic-shift-right$6052$F0M)
              (fxarithmetic-shift-left . g$fxarithmetic-shift-left$6051$F0M)
              (bitwise-rotate-bit-field . g$bitwise-rotate-bit-field$5999$F0M)
              (bitwise-if . g$bitwise-if$5993$F0M)
              (bitwise-copy-bit-field . g$bitwise-copy-bit-field$5996$F0M)
              (bitwise-copy-bit . g$bitwise-copy-bit$5994$F0M)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$5998$F0M)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$5997$F0M)
              (symbol=? . g$symbol=?$5210$F0M)
              (string>? . g$string>?$5207$F0M)
              (string>=? . g$string>=?$5209$F0M)
              (string=? . g$string=?$5205$F0M)
              (string<? . g$string<?$5206$F0M)
              (string<=? . g$string<=?$5208$F0M)
              (rationalize . g$rationalize$5217$F0M)
              (char>? . g$char>?$5214$F0M)
              (char>=? . g$char>=?$5216$F0M)
              (char=? . g$char=?$5212$F0M)
              (char<? . g$char<?$5213$F0M)
              (char<=? . g$char<=?$5215$F0M)
              (cddddr . g$cddddr$5204$F0M)
              (cdddar . g$cdddar$5203$F0M)
              (cddadr . g$cddadr$5202$F0M)
              (cddaar . g$cddaar$5201$F0M)
              (cdaddr . g$cdaddr$5200$F0M)
              (cdadar . g$cdadar$5199$F0M)
              (cdaadr . g$cdaadr$5198$F0M)
              (cdaaar . g$cdaaar$5197$F0M)
              (cadddr . g$cadddr$5196$F0M)
              (caddar . g$caddar$5195$F0M)
              (cadadr . g$cadadr$5194$F0M)
              (cadaar . g$cadaar$5193$F0M)
              (caaddr . g$caaddr$5192$F0M)
              (caadar . g$caadar$5191$F0M)
              (caaadr . g$caaadr$5190$F0M)
              (caaaar . g$caaaar$5189$F0M)
              (cdddr . g$cdddr$5188$F0M)
              (cddar . g$cddar$5187$F0M)
              (cdadr . g$cdadr$5186$F0M)
              (cdaar . g$cdaar$5185$F0M)
              (caddr . g$caddr$5184$F0M)
              (cadar . g$cadar$5183$F0M)
              (caadr . g$caadr$5182$F0M)
              (caaar . g$caaar$5181$F0M)
              (cddr . g$cddr$5180$F0M)
              (cdar . g$cdar$5179$F0M)
              (cadr . g$cadr$5178$F0M)
              (caar . g$caar$5177$F0M)
              (boolean=? . g$boolean=?$5211$F0M)
              (enum-set? . g$enum?$6402$F0M)
              (make-promise . g$make-promise$5833$F0M)
              (load/args . g$load/args$11222$F0M)
              (printf . g$printf$6457$F0M)
              (fprintf . g$fprintf$6458$F0M)
              (format . g$format$6459$F0M)
              (trace-printer . g$trace-printer$11219$F0M)
              (make-traced-macro . g$make-traced-macro$6463$F0M)
              (assertion-error . g$assertion-error$11167$F0M)
              (make-parameter . g$make-parameter$6563$F0M)
              (environment-bindings . g$environment-bindings$11146$F0M)
              (environment-symbols . g$environment-symbols$11149$F0M)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$11145$F0M)
              (library-path . g$library-path$7083$F0M)
              (expand . g$expand$11153$F0M)))))))
    (g$install-library$7099$F0M
      'g$12458$F0M
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$12395$F0M)
        (cosh . g$12394$F0M)
        (sinh . g$12393$F0M)
        (make-guid . g$12392$F0M)
        (unspecified? . g$12391$F0M)
        (make-trace . g$12390$F0M)
        (make-list . g$12389$F0M)
        (last-pair . g$12388$F0M)
        (load-r5rs . g$12387$F0M)
        (license . g$12386$F0M)
        (stacktrace . g$12385$F0M)
        (ironscheme-build . g$11809$F0M)
        (set-symbol-value! . g$12371$F0M)
        (symbol-value . g$12370$F0M)
        (ungensym . g$12369$F0M)
        (gensym . g$12368$F0M)
        (void . g$12367$F0M)
        (compile-system-libraries . g$11811$F0M)
        (compile->closure . g$11813$F0M)
        (compile . g$11812$F0M)
        (load . g$11808$F0M)
        (interaction-environment . g$8836$F0M)
        (string-upcase . g$12363$F0M)
        (string-titlecase . g$12362$F0M)
        (string-normalize-nfkd . g$12361$F0M)
        (string-normalize-nfkc . g$12360$F0M)
        (string-normalize-nfd . g$12359$F0M)
        (string-normalize-nfc . g$12358$F0M)
        (string-foldcase . g$12357$F0M)
        (string-downcase . g$12356$F0M)
        (string-ci>? . g$6928$F0M)
        (string-ci>=? . g$6930$F0M)
        (string-ci=? . g$6926$F0M)
        (string-ci<? . g$6927$F0M)
        (string-ci<=? . g$6929$F0M)
        (char-whitespace? . g$12355$F0M)
        (char-upper-case? . g$12354$F0M)
        (char-title-case? . g$12353$F0M)
        (char-numeric? . g$12352$F0M)
        (char-lower-case? . g$12351$F0M)
        (char-general-category . g$12350$F0M)
        (char-upcase . g$12349$F0M)
        (char-titlecase . g$12348$F0M)
        (char-foldcase . g$12347$F0M)
        (char-downcase . g$12346$F0M)
        (char-ci>? . g$6967$F0M)
        (char-ci>=? . g$6969$F0M)
        (char-ci=? . g$6965$F0M)
        (char-ci<? . g$6966$F0M)
        (char-ci<=? . g$6968$F0M)
        (char-alphabetic? . g$12345$F0M)
        (make-variable-transformer . g$8433$F0M)
        (identifier? . g$8831$F0M)
        (generate-temporaries . g$8820$F0M)
        (free-identifier=? . g$8821$F0M)
        (syntax->datum . g$8833$F0M)
        (datum->syntax . g$8832$F0M)
        (bound-identifier=? . g$8822$F0M)
        (record-type-descriptor? . g$12344$F0M)
        (record-predicate . g$12343$F0M)
        (record-mutator . g$12342$F0M)
        (record-constructor . g$12341$F0M)
        (record-accessor . g$12340$F0M)
        (make-record-type-descriptor . g$12339$F0M)
        (make-record-constructor-descriptor . g$12338$F0M)
        (record? . g$12337$F0M)
        (record-type-uid . g$12336$F0M)
        (record-type-sealed? . g$12335$F0M)
        (record-type-parent . g$12334$F0M)
        (record-type-opaque? . g$12333$F0M)
        (record-type-name . g$12332$F0M)
        (record-type-generative? . g$12331$F0M)
        (record-type-field-names . g$12330$F0M)
        (record-rtd . g$12329$F0M)
        (record-field-mutable? . g$12328$F0M)
        (delete-file . g$6503$F0M)
        (file-exists? . g$6502$F0M)
        (vector-sort! . g$12327$F0M)
        (vector-sort . g$12326$F0M)
        (list-sort . g$6866$F0M)
        (symbol-hash . g$12325$F0M)
        (string-ci-hash . g$12324$F0M)
        (string-hash . g$12323$F0M)
        (equal-hash . g$12322$F0M)
        (hashtable-equivalence-function . g$12321$F0M)
        (make-hashtable . g$12320$F0M)
        (hashtable-hash-function . g$12319$F0M)
        (make-eqv-hashtable . g$6470$F0M)
        (make-eq-hashtable . g$6469$F0M)
        (hashtable? . g$12318$F0M)
        (hashtable-update! . g$6476$F0M)
        (hashtable-size . g$6471$F0M)
        (hashtable-set! . g$6473$F0M)
        (hashtable-ref . g$6472$F0M)
        (hashtable-mutable? . g$12317$F0M)
        (hashtable-keys . g$12316$F0M)
        (hashtable-entries . g$12315$F0M)
        (hashtable-delete! . g$6474$F0M)
        (hashtable-copy . g$12314$F0M)
        (hashtable-contains? . g$6475$F0M)
        (hashtable-clear! . g$6477$F0M)
        (call-with-output-file . g$7359$F0M)
        (call-with-input-file . g$7358$F0M)
        (write-char . g$12313$F0M)
        (write . g$12312$F0M)
        (with-output-to-file . g$7357$F0M)
        (with-input-from-file . g$7356$F0M)
        (read-char . g$12311$F0M)
        (read . g$12310$F0M)
        (peek-char . g$12309$F0M)
        (open-output-file . g$12308$F0M)
        (open-input-file . g$12307$F0M)
        (newline . g$12306$F0M)
        (display . g$12305$F0M)
        (close-output-port . g$12304$F0M)
        (close-input-port . g$12303$F0M)
        (eof-object? . g$12302$F0M)
        (eof-object . g$12301$F0M)
        (current-error-port . g$12300$F0M)
        (current-output-port . g$12299$F0M)
        (current-input-port . g$12298$F0M)
        (output-port? . g$12297$F0M)
        (input-port? . g$12296$F0M)
        (utf-8-codec . g$12295$F0M)
        (utf-16-codec . g$12294$F0M)
        (transcoder-error-handling-mode . g$12293$F0M)
        (transcoder-eol-style . g$12292$F0M)
        (transcoder-codec . g$12291$F0M)
        (transcoded-port . g$12290$F0M)
        (textual-port? . g$12289$F0M)
        (string->bytevector . g$12288$F0M)
        (standard-output-port . g$12287$F0M)
        (standard-input-port . g$12286$F0M)
        (standard-error-port . g$12285$F0M)
        (set-port-position! . g$12284$F0M)
        (put-u8 . g$12283$F0M)
        (put-string . g$12282$F0M)
        (put-datum . g$12281$F0M)
        (put-char . g$12280$F0M)
        (put-bytevector . g$12279$F0M)
        (port? . g$7332$F0M)
        (port-transcoder . g$12278$F0M)
        (port-position . g$12277$F0M)
        (port-has-set-port-position!? . g$12276$F0M)
        (port-has-port-position? . g$12275$F0M)
        (port-eof? . g$12274$F0M)
        (output-port-buffer-mode . g$12273$F0M)
        (open-string-output-port . g$7331$F0M)
        (open-string-input-port . g$12272$F0M)
        (open-file-output-port . g$12271$F0M)
        (open-file-input/output-port . g$12270$F0M)
        (open-file-input-port . g$12269$F0M)
        (open-bytevector-output-port . g$12268$F0M)
        (open-bytevector-input-port . g$12267$F0M)
        (native-transcoder . g$12266$F0M)
        (native-eol-style . g$12265$F0M)
        (make-transcoder . g$12264$F0M)
        (latin-1-codec . g$12263$F0M)
        (make-i/o-write-error . g$7188$F0M)
        (make-i/o-read-error . g$7174$F0M)
        (make-i/o-port-error . g$7293$F0M)
        (make-i/o-invalid-position-error . g$7203$F0M)
        (make-i/o-filename-error . g$7220$F0M)
        (make-i/o-file-protection-error . g$7236$F0M)
        (make-i/o-file-is-read-only-error . g$7250$F0M)
        (make-i/o-file-does-not-exist-error . g$7278$F0M)
        (make-i/o-file-already-exists-error . g$7264$F0M)
        (make-i/o-error . g$7160$F0M)
        (make-i/o-encoding-error . g$7324$F0M)
        (make-i/o-decoding-error . g$7309$F0M)
        (make-custom-textual-output-port . g$12262$F0M)
        (make-custom-textual-input/output-port . g$12261$F0M)
        (make-custom-textual-input-port . g$12260$F0M)
        (make-custom-binary-output-port . g$12259$F0M)
        (make-custom-binary-input/output-port . g$12258$F0M)
        (make-custom-binary-input-port . g$12257$F0M)
        (make-bytevector . g$12256$F0M)
        (lookahead-u8 . g$12255$F0M)
        (lookahead-char . g$12254$F0M)
        (i/o-write-error? . g$7189$F0M)
        (i/o-read-error? . g$7175$F0M)
        (i/o-port-error? . g$7295$F0M)
        (i/o-invalid-position-error? . g$7205$F0M)
        (i/o-error-position . g$7206$F0M)
        (i/o-filename-error? . g$7222$F0M)
        (i/o-file-protection-error? . g$7237$F0M)
        (i/o-file-is-read-only-error? . g$7251$F0M)
        (i/o-file-does-not-exist-error? . g$7279$F0M)
        (i/o-file-already-exists-error? . g$7265$F0M)
        (i/o-error? . g$7161$F0M)
        (i/o-error-port . g$7296$F0M)
        (i/o-error-filename . g$7223$F0M)
        (i/o-encoding-error? . g$7326$F0M)
        (i/o-encoding-error-char . g$7327$F0M)
        (i/o-decoding-error? . g$7310$F0M)
        (get-u8 . g$12253$F0M)
        (get-string-n! . g$12252$F0M)
        (get-string-n . g$12251$F0M)
        (get-string-all . g$12250$F0M)
        (get-line . g$12249$F0M)
        (get-datum . g$12248$F0M)
        (get-char . g$12247$F0M)
        (get-bytevector-some . g$12246$F0M)
        (get-bytevector-n! . g$12245$F0M)
        (get-bytevector-n . g$12244$F0M)
        (get-bytevector-all . g$12243$F0M)
        (flush-output-port . g$12242$F0M)
        (close-port . g$12241$F0M)
        (call-with-string-output-port . g$7333$F0M)
        (call-with-port . g$12240$F0M)
        (call-with-bytevector-output-port . g$12239$F0M)
        (bytevector->string . g$12238$F0M)
        (buffer-mode? . g$12237$F0M)
        (binary-port? . g$12236$F0M)
        (scheme-report-environment . g$8811$F0M)
        (quotient . g$6846$F0M)
        (null-environment . g$8810$F0M)
        (remainder . g$6847$F0M)
        (modulo . g$6848$F0M)
        (inexact->exact . g$12235$F0M)
        (force . g$6850$F0M)
        (exact->inexact . g$12234$F0M)
        (exit . g$12233$F0M)
        (command-line . g$11805$F0M)
        (string-fill! . g$12232$F0M)
        (string-set! . g$12231$F0M)
        (set-cdr! . g$12230$F0M)
        (set-car! . g$12229$F0M)
        (remove . g$5858$F0M)
        (remv . g$5859$F0M)
        (remp . g$5841$F0M)
        (remq . g$5860$F0M)
        (partition . g$5840$F0M)
        (memv . g$5848$F0M)
        (memq . g$5847$F0M)
        (memp . g$5850$F0M)
        (member . g$5849$F0M)
        (exists . g$5854$F0M)
        (for-all . g$5853$F0M)
        (fold-right . g$5857$F0M)
        (fold-left . g$5856$F0M)
        (find . g$5839$F0M)
        (filter . g$5842$F0M)
        (cons* . g$5855$F0M)
        (assv . g$5844$F0M)
        (assq . g$5843$F0M)
        (assp . g$5846$F0M)
        (assoc . g$5845$F0M)
        (with-exception-handler . g$12228$F0M)
        (raise-continuable . g$12227$F0M)
        (raise . g$12226$F0M)
        (eval . g$8813$F0M)
        (environment . g$8809$F0M)
        (make-enumeration . g$7417$F0M)
        (enum-set=? . g$7424$F0M)
        (enum-set-universe . g$7418$F0M)
        (enum-set-union . g$7425$F0M)
        (enum-set-subset? . g$7423$F0M)
        (enum-set-projection . g$7429$F0M)
        (enum-set-member? . g$7422$F0M)
        (enum-set-intersection . g$7426$F0M)
        (enum-set-indexer . g$7419$F0M)
        (enum-set-difference . g$7427$F0M)
        (enum-set-constructor . g$7420$F0M)
        (enum-set-complement . g$7428$F0M)
        (enum-set->list . g$7421$F0M)
        (who-condition? . g$6757$F0M)
        (warning? . g$6668$F0M)
        (violation? . g$6710$F0M)
        (undefined-violation? . g$6834$F0M)
        (syntax-violation? . g$6818$F0M)
        (syntax-violation-subform . g$6820$F0M)
        (syntax-violation-form . g$6819$F0M)
        (syntax-violation . g$8830$F0M)
        (simple-conditions . g$12225$F0M)
        (serious-condition? . g$6682$F0M)
        (non-continuable-violation? . g$6772$F0M)
        (message-condition? . g$6653$F0M)
        (make-who-condition . g$6755$F0M)
        (make-warning . g$6667$F0M)
        (make-violation . g$6709$F0M)
        (make-undefined-violation . g$6833$F0M)
        (make-syntax-violation . g$6815$F0M)
        (make-serious-condition . g$6681$F0M)
        (make-non-continuable-violation . g$6771$F0M)
        (make-message-condition . g$6651$F0M)
        (make-lexical-violation . g$6799$F0M)
        (make-irritants-condition . g$6738$F0M)
        (make-implementation-restriction-violation . g$6785$F0M)
        (make-error . g$6695$F0M)
        (make-assertion-violation . g$6723$F0M)
        (lexical-violation? . g$6800$F0M)
        (irritants-condition? . g$6740$F0M)
        (implementation-restriction-violation? . g$6786$F0M)
        (error? . g$6696$F0M)
        (condition-who . g$6758$F0M)
        (condition-predicate . g$12224$F0M)
        (condition-message . g$6654$F0M)
        (condition-irritants . g$6741$F0M)
        (condition-accessor . g$12223$F0M)
        (condition . g$12222$F0M)
        (assertion-violation? . g$6724$F0M)
        (condition? . g$12221$F0M)
        (utf32->string . g$12220$F0M)
        (utf16->string . g$12219$F0M)
        (utf8->string . g$12218$F0M)
        (uint-list->bytevector . g$12217$F0M)
        (u8-list->bytevector . g$12216$F0M)
        (string->utf8 . g$12215$F0M)
        (string->utf32 . g$12214$F0M)
        (string->utf16 . g$12213$F0M)
        (sint-list->bytevector . g$12212$F0M)
        (native-endianness . g$6509$F0M)
        (bytevector? . g$12211$F0M)
        (bytevector=? . g$12210$F0M)
        (bytevector-uint-set! . g$12209$F0M)
        (bytevector-uint-ref . g$12208$F0M)
        (bytevector-u8-set! . g$12207$F0M)
        (bytevector-u8-ref . g$12206$F0M)
        (bytevector-u64-set! . g$6530$F0M)
        (bytevector-u64-ref . g$6526$F0M)
        (bytevector-u64-native-set! . g$6532$F0M)
        (bytevector-u64-native-ref . g$6528$F0M)
        (bytevector-u32-set! . g$6522$F0M)
        (bytevector-u32-ref . g$6518$F0M)
        (bytevector-u32-native-set! . g$6524$F0M)
        (bytevector-u32-native-ref . g$6520$F0M)
        (bytevector-u16-set! . g$6514$F0M)
        (bytevector-u16-ref . g$6510$F0M)
        (bytevector-u16-native-set! . g$6516$F0M)
        (bytevector-u16-native-ref . g$6512$F0M)
        (bytevector-sint-set! . g$12205$F0M)
        (bytevector-sint-ref . g$12204$F0M)
        (bytevector-s8-set! . g$12203$F0M)
        (bytevector-s8-ref . g$12202$F0M)
        (bytevector-s64-set! . g$6531$F0M)
        (bytevector-s64-ref . g$6527$F0M)
        (bytevector-s64-native-set! . g$6533$F0M)
        (bytevector-s64-native-ref . g$6529$F0M)
        (bytevector-s32-set! . g$6523$F0M)
        (bytevector-s32-ref . g$6519$F0M)
        (bytevector-s32-native-set! . g$6525$F0M)
        (bytevector-s32-native-ref . g$6521$F0M)
        (bytevector-s16-set! . g$6515$F0M)
        (bytevector-s16-ref . g$6511$F0M)
        (bytevector-s16-native-set! . g$6517$F0M)
        (bytevector-s16-native-ref . g$6513$F0M)
        (bytevector-length . g$12201$F0M)
        (bytevector-ieee-single-set! . g$12200$F0M)
        (bytevector-ieee-single-ref . g$12199$F0M)
        (bytevector-ieee-single-native-set! . g$6536$F0M)
        (bytevector-ieee-single-native-ref . g$6534$F0M)
        (bytevector-ieee-double-set! . g$12198$F0M)
        (bytevector-ieee-double-ref . g$12197$F0M)
        (bytevector-ieee-double-native-set! . g$6537$F0M)
        (bytevector-ieee-double-native-ref . g$6535$F0M)
        (bytevector-fill! . g$12196$F0M)
        (bytevector-copy! . g$12195$F0M)
        (bytevector-copy . g$12194$F0M)
        (bytevector->uint-list . g$12193$F0M)
        (bytevector->u8-list . g$12192$F0M)
        (bytevector->sint-list . g$12191$F0M)
        (no-nans-violation? . g$7146$F0M)
        (no-infinities-violation? . g$7132$F0M)
        (make-no-nans-violation . g$7145$F0M)
        (make-no-infinities-violation . g$7131$F0M)
        (real->flonum . g$12190$F0M)
        (flzero? . g$12189$F0M)
        (fltruncate . g$12188$F0M)
        (fltan . g$12187$F0M)
        (flsqrt . g$12186$F0M)
        (flsin . g$12185$F0M)
        (flround . g$12184$F0M)
        (flpositive? . g$12183$F0M)
        (flonum? . g$12182$F0M)
        (flodd? . g$12181$F0M)
        (flnumerator . g$12180$F0M)
        (flnegative? . g$12179$F0M)
        (flnan? . g$12178$F0M)
        (flmod0 . g$12177$F0M)
        (flmod . g$12176$F0M)
        (flmin . g$12175$F0M)
        (flmax . g$12174$F0M)
        (fllog . g$12173$F0M)
        (flinteger? . g$12172$F0M)
        (flinfinite? . g$12171$F0M)
        (flfloor . g$12170$F0M)
        (flfinite? . g$12169$F0M)
        (flexpt . g$12168$F0M)
        (flexp . g$12167$F0M)
        (fleven? . g$12166$F0M)
        (fldiv0-and-mod0 . g$12165$F0M)
        (fldiv0 . g$12164$F0M)
        (fldiv-and-mod . g$12163$F0M)
        (fldiv . g$12162$F0M)
        (fldenominator . g$12161$F0M)
        (flcos . g$12160$F0M)
        (flceiling . g$12159$F0M)
        (flatan . g$12158$F0M)
        (flasin . g$12157$F0M)
        (flacos . g$12156$F0M)
        (flabs . g$12155$F0M)
        (fl>? . g$12154$F0M)
        (fl>=? . g$12153$F0M)
        (fl=? . g$12152$F0M)
        (fl<? . g$12151$F0M)
        (fl<=? . g$12150$F0M)
        (fl/ . g$12149$F0M)
        (fl- . g$12148$F0M)
        (fl+ . g$12147$F0M)
        (fl* . g$12146$F0M)
        (fixnum->flonum . g$12145$F0M)
        (fxzero? . g$12144$F0M)
        (fxxor . g$12143$F0M)
        (fxrotate-bit-field . g$7077$F0M)
        (fxreverse-bit-field . g$12142$F0M)
        (fxpositive? . g$12141$F0M)
        (fxodd? . g$12140$F0M)
        (fxnot . g$12139$F0M)
        (fxnegative? . g$12138$F0M)
        (fxmod0 . g$12137$F0M)
        (fxmod . g$12136$F0M)
        (fxmin . g$12135$F0M)
        (fxmax . g$12134$F0M)
        (fxlength . g$12133$F0M)
        (fxior . g$12132$F0M)
        (fxif . g$7071$F0M)
        (fxfirst-bit-set . g$12131$F0M)
        (fxeven? . g$12130$F0M)
        (fxdiv0-and-mod0 . g$12129$F0M)
        (fxdiv0 . g$12128$F0M)
        (fxdiv-and-mod . g$12127$F0M)
        (fxdiv . g$12126$F0M)
        (fxcopy-bit-field . g$7074$F0M)
        (fxcopy-bit . g$7072$F0M)
        (fxbit-set? . g$12125$F0M)
        (fxbit-field . g$7073$F0M)
        (fxbit-count . g$12124$F0M)
        (fxarithmetic-shift-right . g$7076$F0M)
        (fxarithmetic-shift-left . g$7075$F0M)
        (fxarithmetic-shift . g$12123$F0M)
        (fxand . g$12122$F0M)
        (fx>? . g$12121$F0M)
        (fx>=? . g$12120$F0M)
        (fx=? . g$12119$F0M)
        (fx<? . g$12118$F0M)
        (fx<=? . g$12117$F0M)
        (fx-/carry . g$12116$F0M)
        (fx- . g$12115$F0M)
        (fx+/carry . g$12114$F0M)
        (fx+ . g$12113$F0M)
        (fx*/carry . g$12112$F0M)
        (fx* . g$12111$F0M)
        (greatest-fixnum . g$12110$F0M)
        (least-fixnum . g$12109$F0M)
        (fixnum-width . g$12108$F0M)
        (fixnum? . g$12107$F0M)
        (bitwise-rotate-bit-field . g$7029$F0M)
        (bitwise-reverse-bit-field . g$12106$F0M)
        (bitwise-length . g$12105$F0M)
        (bitwise-if . g$7023$F0M)
        (bitwise-first-bit-set . g$12104$F0M)
        (bitwise-copy-bit-field . g$7026$F0M)
        (bitwise-copy-bit . g$7024$F0M)
        (bitwise-bit-set? . g$12103$F0M)
        (bitwise-bit-field . g$12102$F0M)
        (bitwise-bit-count . g$12101$F0M)
        (bitwise-xor . g$12100$F0M)
        (bitwise-ior . g$12099$F0M)
        (bitwise-and . g$12098$F0M)
        (bitwise-not . g$12097$F0M)
        (bitwise-arithmetic-shift-right . g$7028$F0M)
        (bitwise-arithmetic-shift-left . g$7027$F0M)
        (bitwise-arithmetic-shift . g$12096$F0M)
        (zero? . g$12095$F0M)
        (vector? . g$12094$F0M)
        (vector-set! . g$12093$F0M)
        (vector-ref . g$12092$F0M)
        (vector-map . g$12091$F0M)
        (vector-length . g$12090$F0M)
        (vector-for-each . g$12089$F0M)
        (vector-fill! . g$12088$F0M)
        (vector->list . g$12087$F0M)
        (vector . g$12086$F0M)
        (values . g$12085$F0M)
        (truncate . g$12084$F0M)
        (tan . g$12083$F0M)
        (symbol? . g$12082$F0M)
        (symbol=? . g$6018$F0M)
        (symbol->string . g$12081$F0M)
        (substring . g$12080$F0M)
        (string? . g$12079$F0M)
        (string>? . g$6015$F0M)
        (string>=? . g$6017$F0M)
        (string=? . g$6013$F0M)
        (string<? . g$6014$F0M)
        (string<=? . g$6016$F0M)
        (string-ref . g$12078$F0M)
        (string-length . g$12077$F0M)
        (string-for-each . g$12076$F0M)
        (string-copy . g$12075$F0M)
        (string-append . g$12074$F0M)
        (string->symbol . g$12073$F0M)
        (string->number . g$12072$F0M)
        (string->list . g$12071$F0M)
        (string . g$12070$F0M)
        (sqrt . g$12069$F0M)
        (sin . g$12068$F0M)
        (round . g$12067$F0M)
        (reverse . g$12066$F0M)
        (real? . g$12065$F0M)
        (real-valued? . g$12064$F0M)
        (real-part . g$12063$F0M)
        (rationalize . g$6059$F0M)
        (rational? . g$12062$F0M)
        (rational-valued? . g$12061$F0M)
        (procedure? . g$12060$F0M)
        (positive? . g$12059$F0M)
        (pair? . g$12058$F0M)
        (odd? . g$12057$F0M)
        (numerator . g$12056$F0M)
        (number? . g$12055$F0M)
        (number->string . g$12054$F0M)
        (null? . g$12053$F0M)
        (not . g$12052$F0M)
        (negative? . g$12051$F0M)
        (nan? . g$12050$F0M)
        (min . g$12049$F0M)
        (max . g$12048$F0M)
        (map . g$12047$F0M)
        (make-vector . g$12046$F0M)
        (make-string . g$12045$F0M)
        (make-rectangular . g$12044$F0M)
        (make-polar . g$12043$F0M)
        (magnitude . g$12042$F0M)
        (log . g$12041$F0M)
        (list? . g$12040$F0M)
        (list-tail . g$12039$F0M)
        (list-ref . g$12038$F0M)
        (list->vector . g$12037$F0M)
        (list->string . g$12036$F0M)
        (list . g$12035$F0M)
        (length . g$12034$F0M)
        (lcm . g$12033$F0M)
        (integer? . g$12032$F0M)
        (integer-valued? . g$12031$F0M)
        (integer->char . g$12030$F0M)
        (infinite? . g$12029$F0M)
        (inexact? . g$12028$F0M)
        (inexact . g$12027$F0M)
        (imag-part . g$12026$F0M)
        (gcd . g$12025$F0M)
        (for-each . g$12024$F0M)
        (floor . g$12023$F0M)
        (finite? . g$12022$F0M)
        (expt . g$12021$F0M)
        (exp . g$12020$F0M)
        (exact? . g$12019$F0M)
        (exact-integer-sqrt . g$12018$F0M)
        (exact . g$12017$F0M)
        (even? . g$12016$F0M)
        (error . g$12015$F0M)
        (eqv? . g$12014$F0M)
        (equal? . g$12013$F0M)
        (eq? . g$12012$F0M)
        (dynamic-wind . g$12011$F0M)
        (div0-and-mod0 . g$12010$F0M)
        (mod0 . g$12009$F0M)
        (div0 . g$12008$F0M)
        (div-and-mod . g$12007$F0M)
        (mod . g$12006$F0M)
        (div . g$12005$F0M)
        (denominator . g$12004$F0M)
        (cos . g$12003$F0M)
        (cons . g$12002$F0M)
        (complex? . g$12001$F0M)
        (char? . g$12000$F0M)
        (char>? . g$6056$F0M)
        (char>=? . g$6058$F0M)
        (char=? . g$6054$F0M)
        (char<? . g$6055$F0M)
        (char<=? . g$6057$F0M)
        (char->integer . g$11999$F0M)
        (ceiling . g$11998$F0M)
        (call-with-values . g$11997$F0M)
        (call/cc . g$11996$F0M)
        (call-with-current-continuation . g$11995$F0M)
        (cddddr . g$5978$F0M)
        (cdddar . g$5977$F0M)
        (cddadr . g$5976$F0M)
        (cddaar . g$5975$F0M)
        (cdaddr . g$5974$F0M)
        (cdadar . g$5973$F0M)
        (cdaadr . g$5972$F0M)
        (cdaaar . g$5971$F0M)
        (cadddr . g$5970$F0M)
        (caddar . g$5969$F0M)
        (cadadr . g$5968$F0M)
        (cadaar . g$5967$F0M)
        (caaddr . g$5966$F0M)
        (caadar . g$5965$F0M)
        (caaadr . g$5964$F0M)
        (caaaar . g$5963$F0M)
        (cdddr . g$5962$F0M)
        (cddar . g$5961$F0M)
        (cdadr . g$5960$F0M)
        (cdaar . g$5959$F0M)
        (caddr . g$5958$F0M)
        (cadar . g$5957$F0M)
        (caadr . g$5956$F0M)
        (caaar . g$5955$F0M)
        (cddr . g$5954$F0M)
        (cdar . g$5953$F0M)
        (cadr . g$5952$F0M)
        (caar . g$5951$F0M)
        (cdr . g$11994$F0M)
        (car . g$11993$F0M)
        (boolean? . g$11992$F0M)
        (boolean=? . g$6019$F0M)
        (atan . g$11991$F0M)
        (assertion-violation . g$11990$F0M)
        (asin . g$11989$F0M)
        (apply . g$11988$F0M)
        (append . g$11987$F0M)
        (angle . g$11986$F0M)
        (acos . g$11985$F0M)
        (abs . g$11984$F0M)
        (/ . g$11983$F0M)
        (* . g$11982$F0M)
        (- . g$11981$F0M)
        (+ . g$11980$F0M)
        (>= . g$11979$F0M)
        (> . g$11978$F0M)
        (= . g$11977$F0M)
        (<= . g$11976$F0M)
        (< . g$11975$F0M)
        (deserialize-port . g$11971$F0M)
        (serialize-port . g$11970$F0M)
        (enum-set? . g$7392$F0M)
        (load/args . g$11807$F0M)
        (printf . g$7503$F0M)
        (fprintf . g$7504$F0M)
        (format . g$7505$F0M)
        (procedure-form . g$11969$F0M)
        (procedure-environment . g$11968$F0M)
        (procedure-name . g$11967$F0M)
        (procedure-arity . g$11966$F0M)
        (gc-collect . g$11965$F0M)
        (clr-type? . g$11964$F0M)
        (get-clr-type . g$11963$F0M)
        (vector-append . g$11961$F0M)
        (vector-filter . g$11960$F0M)
        (vector-reverse! . g$11959$F0M)
        (vector-contains? . g$11958$F0M)
        (vector-index-of . g$11957$F0M)
        (vector-copy . g$11956$F0M)
        (vector-binary-search . g$11955$F0M)
        (string-ci-compare . g$11954$F0M)
        (string-compare . g$11953$F0M)
        (string-format . g$11952$F0M)
        (trace-printer . g$11804$F0M)
        (pmap . g$11950$F0M)
        (time-it . g$11949$F0M)
        (make-parameter . g$7532$F0M)
        (environment-bindings . g$8805$F0M)
        (environment-symbols . g$8808$F0M)
        (interaction-environment-symbols . g$8804$F0M)
        (optimization-level . g$11946$F0M)
        (library-path . g$7987$F0M)
        (expand . g$8812$F0M)
        (&no-nans . g$11945$F0M)
        (&no-infinities . g$11944$F0M)
        (&i/o-encoding . g$11943$F0M)
        (&i/o-decoding . g$11942$F0M)
        (&i/o-port . g$11941$F0M)
        (&i/o-file-does-not-exist . g$11940$F0M)
        (&i/o-file-already-exists . g$11939$F0M)
        (&i/o-file-is-read-only . g$11938$F0M)
        (&i/o-file-protection . g$11937$F0M)
        (&i/o-filename . g$11936$F0M)
        (&i/o-invalid-position . g$11935$F0M)
        (&i/o-write . g$11934$F0M)
        (&i/o-read . g$11933$F0M)
        (&i/o . g$11932$F0M)
        (&non-continuable . g$11931$F0M)
        (&undefined . g$11930$F0M)
        (&syntax . g$11929$F0M)
        (&lexical . g$11928$F0M)
        (&implementation-restriction . g$11927$F0M)
        (&who . g$11926$F0M)
        (&irritants . g$11925$F0M)
        (&assertion . g$11924$F0M)
        (&violation . g$11923$F0M)
        (&error . g$11922$F0M)
        (&serious . g$11921$F0M)
        (&warning . g$11920$F0M)
        (&message . g$11919$F0M)
        (&condition . g$11918$F0M)
        (define-condition-type . g$11917$F0M)
        (define-enumeration . g$11916$F0M)
        (define-record-type . g$11915$F0M)
        (parent-rtd . g$11914$F0M)
        (nongenerative . g$11913$F0M)
        (opaque . g$11912$F0M)
        (sealed . g$11911$F0M)
        (protocol . g$11910$F0M)
        (parent . g$11909$F0M)
        (immutable . g$11908$F0M)
        (mutable . g$11907$F0M)
        (fields . g$11906$F0M)
        (error-handling-mode . g$11905$F0M)
        (file-options . g$11904$F0M)
        (buffer-mode . g$11903$F0M)
        (eol-style . g$11902$F0M)
        (guard . g$11901$F0M)
        (trace-letrec-syntax . g$11900$F0M)
        (trace-let-syntax . g$11899$F0M)
        (trace-define-syntax . g$11898$F0M)
        (trace-define . g$11897$F0M)
        (trace-lambda . g$11896$F0M)
        (unsyntax-splicing . g$11895$F0M)
        (unsyntax . g$11894$F0M)
        (unquote-splicing . g$11893$F0M)
        (unquote . g$11892$F0M)
        (_ . g$11891$F0M)
        (else . g$11890$F0M)
        (=> . g$11889$F0M)
        (... . g$11888$F0M)
        (assert . g$11887$F0M)
        (endianness . g$11886$F0M)
        (delay . g$11885$F0M)
        (time . g$11884$F0M)
        (or . g$11883$F0M)
        (and . g$11882$F0M)
        (do . g$11881$F0M)
        (cond . g$11880$F0M)
        (let* . g$11879$F0M)
        (let . g$11878$F0M)
        (identifier-syntax . g$11877$F0M)
        (with-syntax . g$11876$F0M)
        (quasisyntax . g$11875$F0M)
        (quasiquote . g$11874$F0M)
        (syntax-rules . g$11873$F0M)
        (include-into . g$11872$F0M)
        (include . g$11871$F0M)
        (let-values . g$11869$F0M)
        (let*-values . g$11868$F0M)
        (record-constructor-descriptor . g$11867$F0M)
        (record-type-descriptor . g$11866$F0M)
        (fluid-let-syntax . g$11865$F0M)
        (case . g$11864$F0M)
        (parameterize . g$11863$F0M)
        (unless . g$11862$F0M)
        (when . g$11861$F0M)
        (if . g$11860$F0M)
        (letrec* . g$11859$F0M)
        (letrec . g$11858$F0M)
        (case-lambda . g$11856$F0M)
        (lambda . g$11855$F0M)
        (syntax . g$11854$F0M)
        (syntax-case . g$11853$F0M)
        (quote . g$11852$F0M)
        (letrec-syntax . g$11850$F0M)
        (let-syntax . g$11849$F0M)
        (set! . g$11848$F0M)
        (export . g$11847$F0M)
        (import . g$11846$F0M)
        (library . g$11845$F0M)
        (begin . g$11844$F0M)
        (module . g$11843$F0M)
        (define-syntax . g$11842$F0M)
        (define . g$11841$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12459$F0M
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$11947$F0M))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7099$F0M
      'g$12460$F0M
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$12400$F0M)
        (annotation-source . g$12399$F0M)
        (annotation-expression . g$12398$F0M)
        (annotation? . g$12397$F0M)
        (read-annotated . g$12396$F0M))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7099$F0M
      'g$12461$F0M
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$12366$F0M)
        (serialize-library . g$12365$F0M))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7099$F0M
      'g$12462$F0M
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((variable-transformer-procedure . g$8435$F0M)
        (variable-transformer? . g$8434$F0M)
        (eqv-hash . g$11973$F0M)
        (reverse! . g$11972$F0M)
        (make-promise . g$6849$F0M)
        (format . g$7505$F0M)
        (get-command-line . g$11962$F0M)
        (make-traced-procedure . g$11951$F0M)
        (make-traced-macro . g$7525$F0M)
        (assertion-error . g$8826$F0M)
        (library-locator . g$11948$F0M)
        (get-library-paths . g$11947$F0M)
        (library-path . g$7987$F0M))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7099$F0M
      'g$12463$F0M
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$11974$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12464$F0M
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$12384$F0M)
        (clr-field-set!-internal . g$12383$F0M)
        (clr-field-get-internal . g$12382$F0M)
        (clr-cast-internal . g$12381$F0M)
        (clr-call-internal . g$12380$F0M)
        (clr-new-internal . g$12379$F0M)
        (clr-new-array-internal . g$12378$F0M)
        (clr-is-internal . g$12377$F0M)
        (clr-reference-internal . g$12376$F0M)
        (clr-using-internal . g$12375$F0M)
        (clr-clear-usings-internal . g$12374$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12465$F0M
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$11893$F0M)
        (unquote . g$11892$F0M)
        (else . g$11890$F0M)
        (=> . g$11889$F0M)
        (delay . g$11885$F0M)
        (or . g$11883$F0M)
        (and . g$11882$F0M)
        (do . g$11881$F0M)
        (cond . g$11880$F0M)
        (let* . g$11879$F0M)
        (let . g$11878$F0M)
        (quasiquote . g$11874$F0M)
        (syntax-rules . g$11873$F0M)
        (case . g$11864$F0M)
        (if . g$11860$F0M)
        (letrec . g$11858$F0M)
        (lambda . g$11855$F0M)
        (quote . g$11852$F0M)
        (letrec-syntax . g$11850$F0M)
        (let-syntax . g$11849$F0M)
        (set! . g$11848$F0M)
        (begin . g$11844$F0M)
        (define-syntax . g$11842$F0M)
        (define . g$11841$F0M))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7099$F0M
      'g$12466$F0M
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((interaction-environment . g$8836$F0M)
        (char-ready? . g$12364$F0M)
        (string-ci>? . g$6928$F0M)
        (string-ci>=? . g$6930$F0M)
        (string-ci=? . g$6926$F0M)
        (string-ci<? . g$6927$F0M)
        (string-ci<=? . g$6929$F0M)
        (char-whitespace? . g$12355$F0M)
        (char-upper-case? . g$12354$F0M)
        (char-numeric? . g$12352$F0M)
        (char-lower-case? . g$12351$F0M)
        (char-upcase . g$12349$F0M)
        (char-downcase . g$12346$F0M)
        (char-ci>? . g$6967$F0M)
        (char-ci>=? . g$6969$F0M)
        (char-ci=? . g$6965$F0M)
        (char-ci<? . g$6966$F0M)
        (char-ci<=? . g$6968$F0M)
        (char-alphabetic? . g$12345$F0M)
        (call-with-output-file . g$7359$F0M)
        (call-with-input-file . g$7358$F0M)
        (write-char . g$12313$F0M)
        (write . g$12312$F0M)
        (with-output-to-file . g$7357$F0M)
        (with-input-from-file . g$7356$F0M)
        (read-char . g$12311$F0M)
        (read . g$12310$F0M)
        (peek-char . g$12309$F0M)
        (open-output-file . g$12308$F0M)
        (open-input-file . g$12307$F0M)
        (newline . g$12306$F0M)
        (display . g$12305$F0M)
        (close-output-port . g$12304$F0M)
        (close-input-port . g$12303$F0M)
        (eof-object? . g$12302$F0M)
        (eof-object . g$12301$F0M)
        (current-error-port . g$12300$F0M)
        (current-output-port . g$12299$F0M)
        (current-input-port . g$12298$F0M)
        (output-port? . g$12297$F0M)
        (input-port? . g$12296$F0M)
        (scheme-report-environment . g$8811$F0M)
        (quotient . g$6846$F0M)
        (null-environment . g$8810$F0M)
        (remainder . g$6847$F0M)
        (modulo . g$6848$F0M)
        (inexact->exact . g$12235$F0M)
        (force . g$6850$F0M)
        (exact->inexact . g$12234$F0M)
        (string-fill! . g$12232$F0M)
        (string-set! . g$12231$F0M)
        (set-cdr! . g$12230$F0M)
        (set-car! . g$12229$F0M)
        (memv . g$5848$F0M)
        (memq . g$5847$F0M)
        (member . g$5849$F0M)
        (assv . g$5844$F0M)
        (assq . g$5843$F0M)
        (assoc . g$5845$F0M)
        (eval . g$8813$F0M)
        (zero? . g$12095$F0M)
        (vector? . g$12094$F0M)
        (vector-set! . g$12093$F0M)
        (vector-ref . g$12092$F0M)
        (vector-length . g$12090$F0M)
        (vector-fill! . g$12088$F0M)
        (vector->list . g$12087$F0M)
        (vector . g$12086$F0M)
        (values . g$12085$F0M)
        (truncate . g$12084$F0M)
        (tan . g$12083$F0M)
        (symbol? . g$12082$F0M)
        (symbol->string . g$12081$F0M)
        (substring . g$12080$F0M)
        (string? . g$12079$F0M)
        (string>? . g$6015$F0M)
        (string>=? . g$6017$F0M)
        (string=? . g$6013$F0M)
        (string<? . g$6014$F0M)
        (string<=? . g$6016$F0M)
        (string-ref . g$12078$F0M)
        (string-length . g$12077$F0M)
        (string-copy . g$12075$F0M)
        (string-append . g$12074$F0M)
        (string->symbol . g$12073$F0M)
        (string->number . g$12072$F0M)
        (string->list . g$12071$F0M)
        (string . g$12070$F0M)
        (sqrt . g$12069$F0M)
        (sin . g$12068$F0M)
        (round . g$12067$F0M)
        (reverse . g$12066$F0M)
        (real? . g$12065$F0M)
        (real-part . g$12063$F0M)
        (rationalize . g$6059$F0M)
        (rational? . g$12062$F0M)
        (procedure? . g$12060$F0M)
        (positive? . g$12059$F0M)
        (pair? . g$12058$F0M)
        (odd? . g$12057$F0M)
        (numerator . g$12056$F0M)
        (number? . g$12055$F0M)
        (number->string . g$12054$F0M)
        (null? . g$12053$F0M)
        (not . g$12052$F0M)
        (negative? . g$12051$F0M)
        (min . g$12049$F0M)
        (max . g$12048$F0M)
        (map . g$12047$F0M)
        (make-vector . g$12046$F0M)
        (make-string . g$12045$F0M)
        (make-rectangular . g$12044$F0M)
        (make-polar . g$12043$F0M)
        (magnitude . g$12042$F0M)
        (log . g$12041$F0M)
        (list? . g$12040$F0M)
        (list-tail . g$12039$F0M)
        (list-ref . g$12038$F0M)
        (list->vector . g$12037$F0M)
        (list->string . g$12036$F0M)
        (list . g$12035$F0M)
        (length . g$12034$F0M)
        (lcm . g$12033$F0M)
        (integer? . g$12032$F0M)
        (integer->char . g$12030$F0M)
        (inexact? . g$12028$F0M)
        (imag-part . g$12026$F0M)
        (gcd . g$12025$F0M)
        (for-each . g$12024$F0M)
        (floor . g$12023$F0M)
        (expt . g$12021$F0M)
        (exp . g$12020$F0M)
        (exact? . g$12019$F0M)
        (even? . g$12016$F0M)
        (eqv? . g$12014$F0M)
        (equal? . g$12013$F0M)
        (eq? . g$12012$F0M)
        (dynamic-wind . g$12011$F0M)
        (denominator . g$12004$F0M)
        (cos . g$12003$F0M)
        (cons . g$12002$F0M)
        (complex? . g$12001$F0M)
        (char? . g$12000$F0M)
        (char>? . g$6056$F0M)
        (char>=? . g$6058$F0M)
        (char=? . g$6054$F0M)
        (char<? . g$6055$F0M)
        (char<=? . g$6057$F0M)
        (char->integer . g$11999$F0M)
        (ceiling . g$11998$F0M)
        (call-with-values . g$11997$F0M)
        (call-with-current-continuation . g$11995$F0M)
        (cddddr . g$5978$F0M)
        (cdddar . g$5977$F0M)
        (cddadr . g$5976$F0M)
        (cddaar . g$5975$F0M)
        (cdaddr . g$5974$F0M)
        (cdadar . g$5973$F0M)
        (cdaadr . g$5972$F0M)
        (cdaaar . g$5971$F0M)
        (cadddr . g$5970$F0M)
        (caddar . g$5969$F0M)
        (cadadr . g$5968$F0M)
        (cadaar . g$5967$F0M)
        (caaddr . g$5966$F0M)
        (caadar . g$5965$F0M)
        (caaadr . g$5964$F0M)
        (caaaar . g$5963$F0M)
        (cdddr . g$5962$F0M)
        (cddar . g$5961$F0M)
        (cdadr . g$5960$F0M)
        (cdaar . g$5959$F0M)
        (caddr . g$5958$F0M)
        (cadar . g$5957$F0M)
        (caadr . g$5956$F0M)
        (caaar . g$5955$F0M)
        (cddr . g$5954$F0M)
        (cdar . g$5953$F0M)
        (cadr . g$5952$F0M)
        (caar . g$5951$F0M)
        (cdr . g$11994$F0M)
        (car . g$11993$F0M)
        (boolean? . g$11992$F0M)
        (atan . g$11991$F0M)
        (asin . g$11989$F0M)
        (apply . g$11988$F0M)
        (append . g$11987$F0M)
        (angle . g$11986$F0M)
        (acos . g$11985$F0M)
        (abs . g$11984$F0M)
        (/ . g$11983$F0M)
        (* . g$11982$F0M)
        (- . g$11981$F0M)
        (+ . g$11980$F0M)
        (>= . g$11979$F0M)
        (> . g$11978$F0M)
        (= . g$11977$F0M)
        (<= . g$11976$F0M)
        (< . g$11975$F0M)
        (unquote-splicing . g$11893$F0M)
        (unquote . g$11892$F0M)
        (else . g$11890$F0M)
        (=> . g$11889$F0M)
        (... . g$11888$F0M)
        (delay . g$11885$F0M)
        (or . g$11883$F0M)
        (and . g$11882$F0M)
        (do . g$11881$F0M)
        (cond . g$11880$F0M)
        (let* . g$11879$F0M)
        (let . g$11878$F0M)
        (quasiquote . g$11874$F0M)
        (syntax-rules . g$11873$F0M)
        (case . g$11864$F0M)
        (if . g$11860$F0M)
        (letrec . g$11858$F0M)
        (lambda . g$11855$F0M)
        (quote . g$11852$F0M)
        (letrec-syntax . g$11850$F0M)
        (let-syntax . g$11849$F0M)
        (set! . g$11848$F0M)
        (begin . g$11844$F0M)
        (define-syntax . g$11842$F0M)
        (define . g$11841$F0M))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7099$F0M
      'g$12467$F0M
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12363$F0M)
        (string-titlecase . g$12362$F0M)
        (string-normalize-nfkd . g$12361$F0M)
        (string-normalize-nfkc . g$12360$F0M)
        (string-normalize-nfd . g$12359$F0M)
        (string-normalize-nfc . g$12358$F0M)
        (string-foldcase . g$12357$F0M)
        (string-downcase . g$12356$F0M)
        (string-ci>? . g$6928$F0M)
        (string-ci>=? . g$6930$F0M)
        (string-ci=? . g$6926$F0M)
        (string-ci<? . g$6927$F0M)
        (string-ci<=? . g$6929$F0M)
        (char-whitespace? . g$12355$F0M)
        (char-upper-case? . g$12354$F0M)
        (char-title-case? . g$12353$F0M)
        (char-numeric? . g$12352$F0M)
        (char-lower-case? . g$12351$F0M)
        (char-general-category . g$12350$F0M)
        (char-upcase . g$12349$F0M)
        (char-titlecase . g$12348$F0M)
        (char-foldcase . g$12347$F0M)
        (char-downcase . g$12346$F0M)
        (char-ci>? . g$6967$F0M)
        (char-ci>=? . g$6969$F0M)
        (char-ci=? . g$6965$F0M)
        (char-ci<? . g$6966$F0M)
        (char-ci<=? . g$6968$F0M)
        (char-alphabetic? . g$12345$F0M)
        (make-variable-transformer . g$8433$F0M)
        (identifier? . g$8831$F0M)
        (generate-temporaries . g$8820$F0M)
        (free-identifier=? . g$8821$F0M)
        (syntax->datum . g$8833$F0M)
        (datum->syntax . g$8832$F0M)
        (bound-identifier=? . g$8822$F0M)
        (record-type-descriptor? . g$12344$F0M)
        (record-predicate . g$12343$F0M)
        (record-mutator . g$12342$F0M)
        (record-constructor . g$12341$F0M)
        (record-accessor . g$12340$F0M)
        (make-record-type-descriptor . g$12339$F0M)
        (make-record-constructor-descriptor . g$12338$F0M)
        (record? . g$12337$F0M)
        (record-type-uid . g$12336$F0M)
        (record-type-sealed? . g$12335$F0M)
        (record-type-parent . g$12334$F0M)
        (record-type-opaque? . g$12333$F0M)
        (record-type-name . g$12332$F0M)
        (record-type-generative? . g$12331$F0M)
        (record-type-field-names . g$12330$F0M)
        (record-rtd . g$12329$F0M)
        (record-field-mutable? . g$12328$F0M)
        (delete-file . g$6503$F0M)
        (file-exists? . g$6502$F0M)
        (vector-sort! . g$12327$F0M)
        (vector-sort . g$12326$F0M)
        (list-sort . g$6866$F0M)
        (symbol-hash . g$12325$F0M)
        (string-ci-hash . g$12324$F0M)
        (string-hash . g$12323$F0M)
        (equal-hash . g$12322$F0M)
        (hashtable-equivalence-function . g$12321$F0M)
        (make-hashtable . g$12320$F0M)
        (hashtable-hash-function . g$12319$F0M)
        (make-eqv-hashtable . g$6470$F0M)
        (make-eq-hashtable . g$6469$F0M)
        (hashtable? . g$12318$F0M)
        (hashtable-update! . g$6476$F0M)
        (hashtable-size . g$6471$F0M)
        (hashtable-set! . g$6473$F0M)
        (hashtable-ref . g$6472$F0M)
        (hashtable-mutable? . g$12317$F0M)
        (hashtable-keys . g$12316$F0M)
        (hashtable-entries . g$12315$F0M)
        (hashtable-delete! . g$6474$F0M)
        (hashtable-copy . g$12314$F0M)
        (hashtable-contains? . g$6475$F0M)
        (hashtable-clear! . g$6477$F0M)
        (call-with-output-file . g$7359$F0M)
        (call-with-input-file . g$7358$F0M)
        (write-char . g$12313$F0M)
        (write . g$12312$F0M)
        (with-output-to-file . g$7357$F0M)
        (with-input-from-file . g$7356$F0M)
        (read-char . g$12311$F0M)
        (read . g$12310$F0M)
        (peek-char . g$12309$F0M)
        (open-output-file . g$12308$F0M)
        (open-input-file . g$12307$F0M)
        (newline . g$12306$F0M)
        (display . g$12305$F0M)
        (close-output-port . g$12304$F0M)
        (close-input-port . g$12303$F0M)
        (eof-object? . g$12302$F0M)
        (eof-object . g$12301$F0M)
        (current-error-port . g$12300$F0M)
        (current-output-port . g$12299$F0M)
        (current-input-port . g$12298$F0M)
        (output-port? . g$12297$F0M)
        (input-port? . g$12296$F0M)
        (utf-8-codec . g$12295$F0M)
        (utf-16-codec . g$12294$F0M)
        (transcoder-error-handling-mode . g$12293$F0M)
        (transcoder-eol-style . g$12292$F0M)
        (transcoder-codec . g$12291$F0M)
        (transcoded-port . g$12290$F0M)
        (textual-port? . g$12289$F0M)
        (string->bytevector . g$12288$F0M)
        (standard-output-port . g$12287$F0M)
        (standard-input-port . g$12286$F0M)
        (standard-error-port . g$12285$F0M)
        (set-port-position! . g$12284$F0M)
        (put-u8 . g$12283$F0M)
        (put-string . g$12282$F0M)
        (put-datum . g$12281$F0M)
        (put-char . g$12280$F0M)
        (put-bytevector . g$12279$F0M)
        (port? . g$7332$F0M)
        (port-transcoder . g$12278$F0M)
        (port-position . g$12277$F0M)
        (port-has-set-port-position!? . g$12276$F0M)
        (port-has-port-position? . g$12275$F0M)
        (port-eof? . g$12274$F0M)
        (output-port-buffer-mode . g$12273$F0M)
        (open-string-output-port . g$7331$F0M)
        (open-string-input-port . g$12272$F0M)
        (open-file-output-port . g$12271$F0M)
        (open-file-input/output-port . g$12270$F0M)
        (open-file-input-port . g$12269$F0M)
        (open-bytevector-output-port . g$12268$F0M)
        (open-bytevector-input-port . g$12267$F0M)
        (native-transcoder . g$12266$F0M)
        (native-eol-style . g$12265$F0M)
        (make-transcoder . g$12264$F0M)
        (latin-1-codec . g$12263$F0M)
        (make-i/o-write-error . g$7188$F0M)
        (make-i/o-read-error . g$7174$F0M)
        (make-i/o-port-error . g$7293$F0M)
        (make-i/o-invalid-position-error . g$7203$F0M)
        (make-i/o-filename-error . g$7220$F0M)
        (make-i/o-file-protection-error . g$7236$F0M)
        (make-i/o-file-is-read-only-error . g$7250$F0M)
        (make-i/o-file-does-not-exist-error . g$7278$F0M)
        (make-i/o-file-already-exists-error . g$7264$F0M)
        (make-i/o-error . g$7160$F0M)
        (make-i/o-encoding-error . g$7324$F0M)
        (make-i/o-decoding-error . g$7309$F0M)
        (make-custom-textual-output-port . g$12262$F0M)
        (make-custom-textual-input/output-port . g$12261$F0M)
        (make-custom-textual-input-port . g$12260$F0M)
        (make-custom-binary-output-port . g$12259$F0M)
        (make-custom-binary-input/output-port . g$12258$F0M)
        (make-custom-binary-input-port . g$12257$F0M)
        (make-bytevector . g$12256$F0M)
        (lookahead-u8 . g$12255$F0M)
        (lookahead-char . g$12254$F0M)
        (i/o-write-error? . g$7189$F0M)
        (i/o-read-error? . g$7175$F0M)
        (i/o-port-error? . g$7295$F0M)
        (i/o-invalid-position-error? . g$7205$F0M)
        (i/o-error-position . g$7206$F0M)
        (i/o-filename-error? . g$7222$F0M)
        (i/o-file-protection-error? . g$7237$F0M)
        (i/o-file-is-read-only-error? . g$7251$F0M)
        (i/o-file-does-not-exist-error? . g$7279$F0M)
        (i/o-file-already-exists-error? . g$7265$F0M)
        (i/o-error? . g$7161$F0M)
        (i/o-error-port . g$7296$F0M)
        (i/o-error-filename . g$7223$F0M)
        (i/o-encoding-error? . g$7326$F0M)
        (i/o-encoding-error-char . g$7327$F0M)
        (i/o-decoding-error? . g$7310$F0M)
        (get-u8 . g$12253$F0M)
        (get-string-n! . g$12252$F0M)
        (get-string-n . g$12251$F0M)
        (get-string-all . g$12250$F0M)
        (get-line . g$12249$F0M)
        (get-datum . g$12248$F0M)
        (get-char . g$12247$F0M)
        (get-bytevector-some . g$12246$F0M)
        (get-bytevector-n! . g$12245$F0M)
        (get-bytevector-n . g$12244$F0M)
        (get-bytevector-all . g$12243$F0M)
        (flush-output-port . g$12242$F0M)
        (close-port . g$12241$F0M)
        (call-with-string-output-port . g$7333$F0M)
        (call-with-port . g$12240$F0M)
        (call-with-bytevector-output-port . g$12239$F0M)
        (bytevector->string . g$12238$F0M)
        (buffer-mode? . g$12237$F0M)
        (binary-port? . g$12236$F0M)
        (exit . g$12233$F0M)
        (command-line . g$11805$F0M)
        (remove . g$5858$F0M)
        (remv . g$5859$F0M)
        (remp . g$5841$F0M)
        (remq . g$5860$F0M)
        (partition . g$5840$F0M)
        (memv . g$5848$F0M)
        (memq . g$5847$F0M)
        (memp . g$5850$F0M)
        (member . g$5849$F0M)
        (exists . g$5854$F0M)
        (for-all . g$5853$F0M)
        (fold-right . g$5857$F0M)
        (fold-left . g$5856$F0M)
        (find . g$5839$F0M)
        (filter . g$5842$F0M)
        (cons* . g$5855$F0M)
        (assv . g$5844$F0M)
        (assq . g$5843$F0M)
        (assp . g$5846$F0M)
        (assoc . g$5845$F0M)
        (with-exception-handler . g$12228$F0M)
        (raise-continuable . g$12227$F0M)
        (raise . g$12226$F0M)
        (make-enumeration . g$7417$F0M)
        (enum-set=? . g$7424$F0M)
        (enum-set-universe . g$7418$F0M)
        (enum-set-union . g$7425$F0M)
        (enum-set-subset? . g$7423$F0M)
        (enum-set-projection . g$7429$F0M)
        (enum-set-member? . g$7422$F0M)
        (enum-set-intersection . g$7426$F0M)
        (enum-set-indexer . g$7419$F0M)
        (enum-set-difference . g$7427$F0M)
        (enum-set-constructor . g$7420$F0M)
        (enum-set-complement . g$7428$F0M)
        (enum-set->list . g$7421$F0M)
        (who-condition? . g$6757$F0M)
        (warning? . g$6668$F0M)
        (violation? . g$6710$F0M)
        (undefined-violation? . g$6834$F0M)
        (syntax-violation? . g$6818$F0M)
        (syntax-violation-subform . g$6820$F0M)
        (syntax-violation-form . g$6819$F0M)
        (syntax-violation . g$8830$F0M)
        (simple-conditions . g$12225$F0M)
        (serious-condition? . g$6682$F0M)
        (non-continuable-violation? . g$6772$F0M)
        (message-condition? . g$6653$F0M)
        (make-who-condition . g$6755$F0M)
        (make-warning . g$6667$F0M)
        (make-violation . g$6709$F0M)
        (make-undefined-violation . g$6833$F0M)
        (make-syntax-violation . g$6815$F0M)
        (make-serious-condition . g$6681$F0M)
        (make-non-continuable-violation . g$6771$F0M)
        (make-message-condition . g$6651$F0M)
        (make-lexical-violation . g$6799$F0M)
        (make-irritants-condition . g$6738$F0M)
        (make-implementation-restriction-violation . g$6785$F0M)
        (make-error . g$6695$F0M)
        (make-assertion-violation . g$6723$F0M)
        (lexical-violation? . g$6800$F0M)
        (irritants-condition? . g$6740$F0M)
        (implementation-restriction-violation? . g$6786$F0M)
        (error? . g$6696$F0M)
        (condition-who . g$6758$F0M)
        (condition-predicate . g$12224$F0M)
        (condition-message . g$6654$F0M)
        (condition-irritants . g$6741$F0M)
        (condition-accessor . g$12223$F0M)
        (condition . g$12222$F0M)
        (assertion-violation? . g$6724$F0M)
        (condition? . g$12221$F0M)
        (utf32->string . g$12220$F0M)
        (utf16->string . g$12219$F0M)
        (utf8->string . g$12218$F0M)
        (uint-list->bytevector . g$12217$F0M)
        (u8-list->bytevector . g$12216$F0M)
        (string->utf8 . g$12215$F0M)
        (string->utf32 . g$12214$F0M)
        (string->utf16 . g$12213$F0M)
        (sint-list->bytevector . g$12212$F0M)
        (native-endianness . g$6509$F0M)
        (bytevector? . g$12211$F0M)
        (bytevector=? . g$12210$F0M)
        (bytevector-uint-set! . g$12209$F0M)
        (bytevector-uint-ref . g$12208$F0M)
        (bytevector-u8-set! . g$12207$F0M)
        (bytevector-u8-ref . g$12206$F0M)
        (bytevector-u64-set! . g$6530$F0M)
        (bytevector-u64-ref . g$6526$F0M)
        (bytevector-u64-native-set! . g$6532$F0M)
        (bytevector-u64-native-ref . g$6528$F0M)
        (bytevector-u32-set! . g$6522$F0M)
        (bytevector-u32-ref . g$6518$F0M)
        (bytevector-u32-native-set! . g$6524$F0M)
        (bytevector-u32-native-ref . g$6520$F0M)
        (bytevector-u16-set! . g$6514$F0M)
        (bytevector-u16-ref . g$6510$F0M)
        (bytevector-u16-native-set! . g$6516$F0M)
        (bytevector-u16-native-ref . g$6512$F0M)
        (bytevector-sint-set! . g$12205$F0M)
        (bytevector-sint-ref . g$12204$F0M)
        (bytevector-s8-set! . g$12203$F0M)
        (bytevector-s8-ref . g$12202$F0M)
        (bytevector-s64-set! . g$6531$F0M)
        (bytevector-s64-ref . g$6527$F0M)
        (bytevector-s64-native-set! . g$6533$F0M)
        (bytevector-s64-native-ref . g$6529$F0M)
        (bytevector-s32-set! . g$6523$F0M)
        (bytevector-s32-ref . g$6519$F0M)
        (bytevector-s32-native-set! . g$6525$F0M)
        (bytevector-s32-native-ref . g$6521$F0M)
        (bytevector-s16-set! . g$6515$F0M)
        (bytevector-s16-ref . g$6511$F0M)
        (bytevector-s16-native-set! . g$6517$F0M)
        (bytevector-s16-native-ref . g$6513$F0M)
        (bytevector-length . g$12201$F0M)
        (bytevector-ieee-single-set! . g$12200$F0M)
        (bytevector-ieee-single-ref . g$12199$F0M)
        (bytevector-ieee-single-native-set! . g$6536$F0M)
        (bytevector-ieee-single-native-ref . g$6534$F0M)
        (bytevector-ieee-double-set! . g$12198$F0M)
        (bytevector-ieee-double-ref . g$12197$F0M)
        (bytevector-ieee-double-native-set! . g$6537$F0M)
        (bytevector-ieee-double-native-ref . g$6535$F0M)
        (bytevector-fill! . g$12196$F0M)
        (bytevector-copy! . g$12195$F0M)
        (bytevector-copy . g$12194$F0M)
        (bytevector->uint-list . g$12193$F0M)
        (bytevector->u8-list . g$12192$F0M)
        (bytevector->sint-list . g$12191$F0M)
        (no-nans-violation? . g$7146$F0M)
        (no-infinities-violation? . g$7132$F0M)
        (make-no-nans-violation . g$7145$F0M)
        (make-no-infinities-violation . g$7131$F0M)
        (real->flonum . g$12190$F0M)
        (flzero? . g$12189$F0M)
        (fltruncate . g$12188$F0M)
        (fltan . g$12187$F0M)
        (flsqrt . g$12186$F0M)
        (flsin . g$12185$F0M)
        (flround . g$12184$F0M)
        (flpositive? . g$12183$F0M)
        (flonum? . g$12182$F0M)
        (flodd? . g$12181$F0M)
        (flnumerator . g$12180$F0M)
        (flnegative? . g$12179$F0M)
        (flnan? . g$12178$F0M)
        (flmod0 . g$12177$F0M)
        (flmod . g$12176$F0M)
        (flmin . g$12175$F0M)
        (flmax . g$12174$F0M)
        (fllog . g$12173$F0M)
        (flinteger? . g$12172$F0M)
        (flinfinite? . g$12171$F0M)
        (flfloor . g$12170$F0M)
        (flfinite? . g$12169$F0M)
        (flexpt . g$12168$F0M)
        (flexp . g$12167$F0M)
        (fleven? . g$12166$F0M)
        (fldiv0-and-mod0 . g$12165$F0M)
        (fldiv0 . g$12164$F0M)
        (fldiv-and-mod . g$12163$F0M)
        (fldiv . g$12162$F0M)
        (fldenominator . g$12161$F0M)
        (flcos . g$12160$F0M)
        (flceiling . g$12159$F0M)
        (flatan . g$12158$F0M)
        (flasin . g$12157$F0M)
        (flacos . g$12156$F0M)
        (flabs . g$12155$F0M)
        (fl>? . g$12154$F0M)
        (fl>=? . g$12153$F0M)
        (fl=? . g$12152$F0M)
        (fl<? . g$12151$F0M)
        (fl<=? . g$12150$F0M)
        (fl/ . g$12149$F0M)
        (fl- . g$12148$F0M)
        (fl+ . g$12147$F0M)
        (fl* . g$12146$F0M)
        (fixnum->flonum . g$12145$F0M)
        (fxzero? . g$12144$F0M)
        (fxxor . g$12143$F0M)
        (fxrotate-bit-field . g$7077$F0M)
        (fxreverse-bit-field . g$12142$F0M)
        (fxpositive? . g$12141$F0M)
        (fxodd? . g$12140$F0M)
        (fxnot . g$12139$F0M)
        (fxnegative? . g$12138$F0M)
        (fxmod0 . g$12137$F0M)
        (fxmod . g$12136$F0M)
        (fxmin . g$12135$F0M)
        (fxmax . g$12134$F0M)
        (fxlength . g$12133$F0M)
        (fxior . g$12132$F0M)
        (fxif . g$7071$F0M)
        (fxfirst-bit-set . g$12131$F0M)
        (fxeven? . g$12130$F0M)
        (fxdiv0-and-mod0 . g$12129$F0M)
        (fxdiv0 . g$12128$F0M)
        (fxdiv-and-mod . g$12127$F0M)
        (fxdiv . g$12126$F0M)
        (fxcopy-bit-field . g$7074$F0M)
        (fxcopy-bit . g$7072$F0M)
        (fxbit-set? . g$12125$F0M)
        (fxbit-field . g$7073$F0M)
        (fxbit-count . g$12124$F0M)
        (fxarithmetic-shift-right . g$7076$F0M)
        (fxarithmetic-shift-left . g$7075$F0M)
        (fxarithmetic-shift . g$12123$F0M)
        (fxand . g$12122$F0M)
        (fx>? . g$12121$F0M)
        (fx>=? . g$12120$F0M)
        (fx=? . g$12119$F0M)
        (fx<? . g$12118$F0M)
        (fx<=? . g$12117$F0M)
        (fx-/carry . g$12116$F0M)
        (fx- . g$12115$F0M)
        (fx+/carry . g$12114$F0M)
        (fx+ . g$12113$F0M)
        (fx*/carry . g$12112$F0M)
        (fx* . g$12111$F0M)
        (greatest-fixnum . g$12110$F0M)
        (least-fixnum . g$12109$F0M)
        (fixnum-width . g$12108$F0M)
        (fixnum? . g$12107$F0M)
        (bitwise-rotate-bit-field . g$7029$F0M)
        (bitwise-reverse-bit-field . g$12106$F0M)
        (bitwise-length . g$12105$F0M)
        (bitwise-if . g$7023$F0M)
        (bitwise-first-bit-set . g$12104$F0M)
        (bitwise-copy-bit-field . g$7026$F0M)
        (bitwise-copy-bit . g$7024$F0M)
        (bitwise-bit-set? . g$12103$F0M)
        (bitwise-bit-field . g$12102$F0M)
        (bitwise-bit-count . g$12101$F0M)
        (bitwise-xor . g$12100$F0M)
        (bitwise-ior . g$12099$F0M)
        (bitwise-and . g$12098$F0M)
        (bitwise-not . g$12097$F0M)
        (bitwise-arithmetic-shift-right . g$7028$F0M)
        (bitwise-arithmetic-shift-left . g$7027$F0M)
        (bitwise-arithmetic-shift . g$12096$F0M)
        (zero? . g$12095$F0M)
        (vector? . g$12094$F0M)
        (vector-set! . g$12093$F0M)
        (vector-ref . g$12092$F0M)
        (vector-map . g$12091$F0M)
        (vector-length . g$12090$F0M)
        (vector-for-each . g$12089$F0M)
        (vector-fill! . g$12088$F0M)
        (vector->list . g$12087$F0M)
        (vector . g$12086$F0M)
        (values . g$12085$F0M)
        (truncate . g$12084$F0M)
        (tan . g$12083$F0M)
        (symbol? . g$12082$F0M)
        (symbol=? . g$6018$F0M)
        (symbol->string . g$12081$F0M)
        (substring . g$12080$F0M)
        (string? . g$12079$F0M)
        (string>? . g$6015$F0M)
        (string>=? . g$6017$F0M)
        (string=? . g$6013$F0M)
        (string<? . g$6014$F0M)
        (string<=? . g$6016$F0M)
        (string-ref . g$12078$F0M)
        (string-length . g$12077$F0M)
        (string-for-each . g$12076$F0M)
        (string-copy . g$12075$F0M)
        (string-append . g$12074$F0M)
        (string->symbol . g$12073$F0M)
        (string->number . g$12072$F0M)
        (string->list . g$12071$F0M)
        (string . g$12070$F0M)
        (sqrt . g$12069$F0M)
        (sin . g$12068$F0M)
        (round . g$12067$F0M)
        (reverse . g$12066$F0M)
        (real? . g$12065$F0M)
        (real-valued? . g$12064$F0M)
        (real-part . g$12063$F0M)
        (rationalize . g$6059$F0M)
        (rational? . g$12062$F0M)
        (rational-valued? . g$12061$F0M)
        (procedure? . g$12060$F0M)
        (positive? . g$12059$F0M)
        (pair? . g$12058$F0M)
        (odd? . g$12057$F0M)
        (numerator . g$12056$F0M)
        (number? . g$12055$F0M)
        (number->string . g$12054$F0M)
        (null? . g$12053$F0M)
        (not . g$12052$F0M)
        (negative? . g$12051$F0M)
        (nan? . g$12050$F0M)
        (min . g$12049$F0M)
        (max . g$12048$F0M)
        (map . g$12047$F0M)
        (make-vector . g$12046$F0M)
        (make-string . g$12045$F0M)
        (make-rectangular . g$12044$F0M)
        (make-polar . g$12043$F0M)
        (magnitude . g$12042$F0M)
        (log . g$12041$F0M)
        (list? . g$12040$F0M)
        (list-tail . g$12039$F0M)
        (list-ref . g$12038$F0M)
        (list->vector . g$12037$F0M)
        (list->string . g$12036$F0M)
        (list . g$12035$F0M)
        (length . g$12034$F0M)
        (lcm . g$12033$F0M)
        (integer? . g$12032$F0M)
        (integer-valued? . g$12031$F0M)
        (integer->char . g$12030$F0M)
        (infinite? . g$12029$F0M)
        (inexact? . g$12028$F0M)
        (inexact . g$12027$F0M)
        (imag-part . g$12026$F0M)
        (gcd . g$12025$F0M)
        (for-each . g$12024$F0M)
        (floor . g$12023$F0M)
        (finite? . g$12022$F0M)
        (expt . g$12021$F0M)
        (exp . g$12020$F0M)
        (exact? . g$12019$F0M)
        (exact-integer-sqrt . g$12018$F0M)
        (exact . g$12017$F0M)
        (even? . g$12016$F0M)
        (error . g$12015$F0M)
        (eqv? . g$12014$F0M)
        (equal? . g$12013$F0M)
        (eq? . g$12012$F0M)
        (dynamic-wind . g$12011$F0M)
        (div0-and-mod0 . g$12010$F0M)
        (mod0 . g$12009$F0M)
        (div0 . g$12008$F0M)
        (div-and-mod . g$12007$F0M)
        (mod . g$12006$F0M)
        (div . g$12005$F0M)
        (denominator . g$12004$F0M)
        (cos . g$12003$F0M)
        (cons . g$12002$F0M)
        (complex? . g$12001$F0M)
        (char? . g$12000$F0M)
        (char>? . g$6056$F0M)
        (char>=? . g$6058$F0M)
        (char=? . g$6054$F0M)
        (char<? . g$6055$F0M)
        (char<=? . g$6057$F0M)
        (char->integer . g$11999$F0M)
        (ceiling . g$11998$F0M)
        (call-with-values . g$11997$F0M)
        (call/cc . g$11996$F0M)
        (call-with-current-continuation . g$11995$F0M)
        (cddddr . g$5978$F0M)
        (cdddar . g$5977$F0M)
        (cddadr . g$5976$F0M)
        (cddaar . g$5975$F0M)
        (cdaddr . g$5974$F0M)
        (cdadar . g$5973$F0M)
        (cdaadr . g$5972$F0M)
        (cdaaar . g$5971$F0M)
        (cadddr . g$5970$F0M)
        (caddar . g$5969$F0M)
        (cadadr . g$5968$F0M)
        (cadaar . g$5967$F0M)
        (caaddr . g$5966$F0M)
        (caadar . g$5965$F0M)
        (caaadr . g$5964$F0M)
        (caaaar . g$5963$F0M)
        (cdddr . g$5962$F0M)
        (cddar . g$5961$F0M)
        (cdadr . g$5960$F0M)
        (cdaar . g$5959$F0M)
        (caddr . g$5958$F0M)
        (cadar . g$5957$F0M)
        (caadr . g$5956$F0M)
        (caaar . g$5955$F0M)
        (cddr . g$5954$F0M)
        (cdar . g$5953$F0M)
        (cadr . g$5952$F0M)
        (caar . g$5951$F0M)
        (cdr . g$11994$F0M)
        (car . g$11993$F0M)
        (boolean? . g$11992$F0M)
        (boolean=? . g$6019$F0M)
        (atan . g$11991$F0M)
        (assertion-violation . g$11990$F0M)
        (asin . g$11989$F0M)
        (apply . g$11988$F0M)
        (append . g$11987$F0M)
        (angle . g$11986$F0M)
        (acos . g$11985$F0M)
        (abs . g$11984$F0M)
        (/ . g$11983$F0M)
        (* . g$11982$F0M)
        (- . g$11981$F0M)
        (+ . g$11980$F0M)
        (>= . g$11979$F0M)
        (> . g$11978$F0M)
        (= . g$11977$F0M)
        (<= . g$11976$F0M)
        (< . g$11975$F0M)
        (&no-nans . g$11945$F0M)
        (&no-infinities . g$11944$F0M)
        (&i/o-encoding . g$11943$F0M)
        (&i/o-decoding . g$11942$F0M)
        (&i/o-port . g$11941$F0M)
        (&i/o-file-does-not-exist . g$11940$F0M)
        (&i/o-file-already-exists . g$11939$F0M)
        (&i/o-file-is-read-only . g$11938$F0M)
        (&i/o-file-protection . g$11937$F0M)
        (&i/o-filename . g$11936$F0M)
        (&i/o-invalid-position . g$11935$F0M)
        (&i/o-write . g$11934$F0M)
        (&i/o-read . g$11933$F0M)
        (&i/o . g$11932$F0M)
        (&non-continuable . g$11931$F0M)
        (&undefined . g$11930$F0M)
        (&syntax . g$11929$F0M)
        (&lexical . g$11928$F0M)
        (&implementation-restriction . g$11927$F0M)
        (&who . g$11926$F0M)
        (&irritants . g$11925$F0M)
        (&assertion . g$11924$F0M)
        (&violation . g$11923$F0M)
        (&error . g$11922$F0M)
        (&serious . g$11921$F0M)
        (&warning . g$11920$F0M)
        (&message . g$11919$F0M)
        (&condition . g$11918$F0M)
        (define-condition-type . g$11917$F0M)
        (define-enumeration . g$11916$F0M)
        (define-record-type . g$11915$F0M)
        (parent-rtd . g$11914$F0M)
        (nongenerative . g$11913$F0M)
        (opaque . g$11912$F0M)
        (sealed . g$11911$F0M)
        (protocol . g$11910$F0M)
        (parent . g$11909$F0M)
        (immutable . g$11908$F0M)
        (mutable . g$11907$F0M)
        (fields . g$11906$F0M)
        (error-handling-mode . g$11905$F0M)
        (file-options . g$11904$F0M)
        (buffer-mode . g$11903$F0M)
        (eol-style . g$11902$F0M)
        (guard . g$11901$F0M)
        (unsyntax-splicing . g$11895$F0M)
        (unsyntax . g$11894$F0M)
        (unquote-splicing . g$11893$F0M)
        (unquote . g$11892$F0M)
        (_ . g$11891$F0M)
        (else . g$11890$F0M)
        (=> . g$11889$F0M)
        (... . g$11888$F0M)
        (assert . g$11887$F0M)
        (endianness . g$11886$F0M)
        (or . g$11883$F0M)
        (and . g$11882$F0M)
        (do . g$11881$F0M)
        (cond . g$11880$F0M)
        (let* . g$11879$F0M)
        (let . g$11878$F0M)
        (identifier-syntax . g$11877$F0M)
        (with-syntax . g$11876$F0M)
        (quasisyntax . g$11875$F0M)
        (quasiquote . g$11874$F0M)
        (syntax-rules . g$11873$F0M)
        (let-values . g$11869$F0M)
        (let*-values . g$11868$F0M)
        (record-constructor-descriptor . g$11867$F0M)
        (record-type-descriptor . g$11866$F0M)
        (case . g$11864$F0M)
        (unless . g$11862$F0M)
        (when . g$11861$F0M)
        (if . g$11860$F0M)
        (letrec* . g$11859$F0M)
        (letrec . g$11858$F0M)
        (case-lambda . g$11856$F0M)
        (lambda . g$11855$F0M)
        (syntax . g$11854$F0M)
        (syntax-case . g$11853$F0M)
        (quote . g$11852$F0M)
        (letrec-syntax . g$11850$F0M)
        (let-syntax . g$11849$F0M)
        (set! . g$11848$F0M)
        (begin . g$11844$F0M)
        (define-syntax . g$11842$F0M)
        (define . g$11841$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12468$F0M
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((interaction-environment . g$8836$F0M)
        (scheme-report-environment . g$8811$F0M)
        (quotient . g$6846$F0M)
        (null-environment . g$8810$F0M)
        (remainder . g$6847$F0M)
        (modulo . g$6848$F0M)
        (inexact->exact . g$12235$F0M)
        (force . g$6850$F0M)
        (exact->inexact . g$12234$F0M)
        (delay . g$11885$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12469$F0M
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$11881$F0M)
        (unless . g$11862$F0M)
        (when . g$11861$F0M)
        (case-lambda . g$11856$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12470$F0M
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$8813$F0M) (environment . g$8809$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12471$F0M
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$12230$F0M) (set-car! . g$12229$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12472$F0M
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$12232$F0M) (string-set! . g$12231$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12473$F0M
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$12233$F0M) (command-line . g$11805$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12474$F0M
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$8433$F0M)
        (identifier? . g$8831$F0M)
        (generate-temporaries . g$8820$F0M)
        (free-identifier=? . g$8821$F0M)
        (syntax->datum . g$8833$F0M)
        (datum->syntax . g$8832$F0M)
        (bound-identifier=? . g$8822$F0M)
        (syntax-violation . g$8830$F0M)
        (unsyntax-splicing . g$11895$F0M)
        (unsyntax . g$11894$F0M)
        (_ . g$11891$F0M)
        (... . g$11888$F0M)
        (with-syntax . g$11876$F0M)
        (quasisyntax . g$11875$F0M)
        (syntax . g$11854$F0M)
        (syntax-case . g$11853$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12475$F0M
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$6503$F0M)
        (file-exists? . g$6502$F0M)
        (make-i/o-write-error . g$7188$F0M)
        (make-i/o-read-error . g$7174$F0M)
        (make-i/o-port-error . g$7293$F0M)
        (make-i/o-invalid-position-error . g$7203$F0M)
        (make-i/o-filename-error . g$7220$F0M)
        (make-i/o-file-protection-error . g$7236$F0M)
        (make-i/o-file-is-read-only-error . g$7250$F0M)
        (make-i/o-file-does-not-exist-error . g$7278$F0M)
        (make-i/o-file-already-exists-error . g$7264$F0M)
        (make-i/o-error . g$7160$F0M)
        (i/o-write-error? . g$7189$F0M)
        (i/o-read-error? . g$7175$F0M)
        (i/o-port-error? . g$7295$F0M)
        (i/o-invalid-position-error? . g$7205$F0M)
        (i/o-error-position . g$7206$F0M)
        (i/o-filename-error? . g$7222$F0M)
        (i/o-file-protection-error? . g$7237$F0M)
        (i/o-file-is-read-only-error? . g$7251$F0M)
        (i/o-file-does-not-exist-error? . g$7279$F0M)
        (i/o-file-already-exists-error? . g$7265$F0M)
        (i/o-error? . g$7161$F0M)
        (i/o-error-port . g$7296$F0M)
        (i/o-error-filename . g$7223$F0M)
        (&i/o-port . g$11941$F0M)
        (&i/o-file-does-not-exist . g$11940$F0M)
        (&i/o-file-already-exists . g$11939$F0M)
        (&i/o-file-is-read-only . g$11938$F0M)
        (&i/o-file-protection . g$11937$F0M)
        (&i/o-filename . g$11936$F0M)
        (&i/o-invalid-position . g$11935$F0M)
        (&i/o-write . g$11934$F0M)
        (&i/o-read . g$11933$F0M)
        (&i/o . g$11932$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12476$F0M
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$12327$F0M)
        (vector-sort . g$12326$F0M)
        (list-sort . g$6866$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12477$F0M
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$12095$F0M)
        (vector? . g$12094$F0M)
        (vector-set! . g$12093$F0M)
        (vector-ref . g$12092$F0M)
        (vector-map . g$12091$F0M)
        (vector-length . g$12090$F0M)
        (vector-for-each . g$12089$F0M)
        (vector-fill! . g$12088$F0M)
        (vector->list . g$12087$F0M)
        (vector . g$12086$F0M)
        (values . g$12085$F0M)
        (truncate . g$12084$F0M)
        (tan . g$12083$F0M)
        (symbol? . g$12082$F0M)
        (symbol=? . g$6018$F0M)
        (symbol->string . g$12081$F0M)
        (substring . g$12080$F0M)
        (string? . g$12079$F0M)
        (string>? . g$6015$F0M)
        (string>=? . g$6017$F0M)
        (string=? . g$6013$F0M)
        (string<? . g$6014$F0M)
        (string<=? . g$6016$F0M)
        (string-ref . g$12078$F0M)
        (string-length . g$12077$F0M)
        (string-for-each . g$12076$F0M)
        (string-copy . g$12075$F0M)
        (string-append . g$12074$F0M)
        (string->symbol . g$12073$F0M)
        (string->number . g$12072$F0M)
        (string->list . g$12071$F0M)
        (string . g$12070$F0M)
        (sqrt . g$12069$F0M)
        (sin . g$12068$F0M)
        (round . g$12067$F0M)
        (reverse . g$12066$F0M)
        (real? . g$12065$F0M)
        (real-valued? . g$12064$F0M)
        (real-part . g$12063$F0M)
        (rationalize . g$6059$F0M)
        (rational? . g$12062$F0M)
        (rational-valued? . g$12061$F0M)
        (procedure? . g$12060$F0M)
        (positive? . g$12059$F0M)
        (pair? . g$12058$F0M)
        (odd? . g$12057$F0M)
        (numerator . g$12056$F0M)
        (number? . g$12055$F0M)
        (number->string . g$12054$F0M)
        (null? . g$12053$F0M)
        (not . g$12052$F0M)
        (negative? . g$12051$F0M)
        (nan? . g$12050$F0M)
        (min . g$12049$F0M)
        (max . g$12048$F0M)
        (map . g$12047$F0M)
        (make-vector . g$12046$F0M)
        (make-string . g$12045$F0M)
        (make-rectangular . g$12044$F0M)
        (make-polar . g$12043$F0M)
        (magnitude . g$12042$F0M)
        (log . g$12041$F0M)
        (list? . g$12040$F0M)
        (list-tail . g$12039$F0M)
        (list-ref . g$12038$F0M)
        (list->vector . g$12037$F0M)
        (list->string . g$12036$F0M)
        (list . g$12035$F0M)
        (length . g$12034$F0M)
        (lcm . g$12033$F0M)
        (integer? . g$12032$F0M)
        (integer-valued? . g$12031$F0M)
        (integer->char . g$12030$F0M)
        (infinite? . g$12029$F0M)
        (inexact? . g$12028$F0M)
        (inexact . g$12027$F0M)
        (imag-part . g$12026$F0M)
        (gcd . g$12025$F0M)
        (for-each . g$12024$F0M)
        (floor . g$12023$F0M)
        (finite? . g$12022$F0M)
        (expt . g$12021$F0M)
        (exp . g$12020$F0M)
        (exact? . g$12019$F0M)
        (exact-integer-sqrt . g$12018$F0M)
        (exact . g$12017$F0M)
        (even? . g$12016$F0M)
        (error . g$12015$F0M)
        (eqv? . g$12014$F0M)
        (equal? . g$12013$F0M)
        (eq? . g$12012$F0M)
        (dynamic-wind . g$12011$F0M)
        (div0-and-mod0 . g$12010$F0M)
        (mod0 . g$12009$F0M)
        (div0 . g$12008$F0M)
        (div-and-mod . g$12007$F0M)
        (mod . g$12006$F0M)
        (div . g$12005$F0M)
        (denominator . g$12004$F0M)
        (cos . g$12003$F0M)
        (cons . g$12002$F0M)
        (complex? . g$12001$F0M)
        (char? . g$12000$F0M)
        (char>? . g$6056$F0M)
        (char>=? . g$6058$F0M)
        (char=? . g$6054$F0M)
        (char<? . g$6055$F0M)
        (char<=? . g$6057$F0M)
        (char->integer . g$11999$F0M)
        (ceiling . g$11998$F0M)
        (call-with-values . g$11997$F0M)
        (call/cc . g$11996$F0M)
        (call-with-current-continuation . g$11995$F0M)
        (cddddr . g$5978$F0M)
        (cdddar . g$5977$F0M)
        (cddadr . g$5976$F0M)
        (cddaar . g$5975$F0M)
        (cdaddr . g$5974$F0M)
        (cdadar . g$5973$F0M)
        (cdaadr . g$5972$F0M)
        (cdaaar . g$5971$F0M)
        (cadddr . g$5970$F0M)
        (caddar . g$5969$F0M)
        (cadadr . g$5968$F0M)
        (cadaar . g$5967$F0M)
        (caaddr . g$5966$F0M)
        (caadar . g$5965$F0M)
        (caaadr . g$5964$F0M)
        (caaaar . g$5963$F0M)
        (cdddr . g$5962$F0M)
        (cddar . g$5961$F0M)
        (cdadr . g$5960$F0M)
        (cdaar . g$5959$F0M)
        (caddr . g$5958$F0M)
        (cadar . g$5957$F0M)
        (caadr . g$5956$F0M)
        (caaar . g$5955$F0M)
        (cddr . g$5954$F0M)
        (cdar . g$5953$F0M)
        (cadr . g$5952$F0M)
        (caar . g$5951$F0M)
        (cdr . g$11994$F0M)
        (car . g$11993$F0M)
        (boolean? . g$11992$F0M)
        (boolean=? . g$6019$F0M)
        (atan . g$11991$F0M)
        (assertion-violation . g$11990$F0M)
        (asin . g$11989$F0M)
        (apply . g$11988$F0M)
        (append . g$11987$F0M)
        (angle . g$11986$F0M)
        (acos . g$11985$F0M)
        (abs . g$11984$F0M)
        (/ . g$11983$F0M)
        (* . g$11982$F0M)
        (- . g$11981$F0M)
        (+ . g$11980$F0M)
        (>= . g$11979$F0M)
        (> . g$11978$F0M)
        (= . g$11977$F0M)
        (<= . g$11976$F0M)
        (< . g$11975$F0M)
        (unquote-splicing . g$11893$F0M)
        (unquote . g$11892$F0M)
        (_ . g$11891$F0M)
        (else . g$11890$F0M)
        (=> . g$11889$F0M)
        (... . g$11888$F0M)
        (assert . g$11887$F0M)
        (or . g$11883$F0M)
        (and . g$11882$F0M)
        (cond . g$11880$F0M)
        (let* . g$11879$F0M)
        (let . g$11878$F0M)
        (identifier-syntax . g$11877$F0M)
        (quasiquote . g$11874$F0M)
        (syntax-rules . g$11873$F0M)
        (let-values . g$11869$F0M)
        (let*-values . g$11868$F0M)
        (case . g$11864$F0M)
        (if . g$11860$F0M)
        (letrec* . g$11859$F0M)
        (letrec . g$11858$F0M)
        (lambda . g$11855$F0M)
        (quote . g$11852$F0M)
        (letrec-syntax . g$11850$F0M)
        (let-syntax . g$11849$F0M)
        (set! . g$11848$F0M)
        (begin . g$11844$F0M)
        (define-syntax . g$11842$F0M)
        (define . g$11841$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12478$F0M
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$5858$F0M)
        (remv . g$5859$F0M)
        (remp . g$5841$F0M)
        (remq . g$5860$F0M)
        (partition . g$5840$F0M)
        (memv . g$5848$F0M)
        (memq . g$5847$F0M)
        (memp . g$5850$F0M)
        (member . g$5849$F0M)
        (exists . g$5854$F0M)
        (for-all . g$5853$F0M)
        (fold-right . g$5857$F0M)
        (fold-left . g$5856$F0M)
        (find . g$5839$F0M)
        (filter . g$5842$F0M)
        (cons* . g$5855$F0M)
        (assv . g$5844$F0M)
        (assq . g$5843$F0M)
        (assp . g$5846$F0M)
        (assoc . g$5845$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12479$F0M
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$7359$F0M)
        (call-with-input-file . g$7358$F0M)
        (write-char . g$12313$F0M)
        (write . g$12312$F0M)
        (with-output-to-file . g$7357$F0M)
        (with-input-from-file . g$7356$F0M)
        (read-char . g$12311$F0M)
        (read . g$12310$F0M)
        (peek-char . g$12309$F0M)
        (open-output-file . g$12308$F0M)
        (open-input-file . g$12307$F0M)
        (newline . g$12306$F0M)
        (display . g$12305$F0M)
        (close-output-port . g$12304$F0M)
        (close-input-port . g$12303$F0M)
        (eof-object? . g$12302$F0M)
        (eof-object . g$12301$F0M)
        (current-error-port . g$12300$F0M)
        (current-output-port . g$12299$F0M)
        (current-input-port . g$12298$F0M)
        (output-port? . g$12297$F0M)
        (input-port? . g$12296$F0M)
        (make-i/o-write-error . g$7188$F0M)
        (make-i/o-read-error . g$7174$F0M)
        (make-i/o-port-error . g$7293$F0M)
        (make-i/o-invalid-position-error . g$7203$F0M)
        (make-i/o-filename-error . g$7220$F0M)
        (make-i/o-file-protection-error . g$7236$F0M)
        (make-i/o-file-is-read-only-error . g$7250$F0M)
        (make-i/o-file-does-not-exist-error . g$7278$F0M)
        (make-i/o-file-already-exists-error . g$7264$F0M)
        (make-i/o-error . g$7160$F0M)
        (i/o-write-error? . g$7189$F0M)
        (i/o-read-error? . g$7175$F0M)
        (i/o-port-error? . g$7295$F0M)
        (i/o-invalid-position-error? . g$7205$F0M)
        (i/o-error-position . g$7206$F0M)
        (i/o-filename-error? . g$7222$F0M)
        (i/o-file-protection-error? . g$7237$F0M)
        (i/o-file-is-read-only-error? . g$7251$F0M)
        (i/o-file-does-not-exist-error? . g$7279$F0M)
        (i/o-file-already-exists-error? . g$7265$F0M)
        (i/o-error? . g$7161$F0M)
        (i/o-error-port . g$7296$F0M)
        (i/o-error-filename . g$7223$F0M)
        (&i/o-port . g$11941$F0M)
        (&i/o-file-does-not-exist . g$11940$F0M)
        (&i/o-file-already-exists . g$11939$F0M)
        (&i/o-file-is-read-only . g$11938$F0M)
        (&i/o-file-protection . g$11937$F0M)
        (&i/o-filename . g$11936$F0M)
        (&i/o-invalid-position . g$11935$F0M)
        (&i/o-write . g$11934$F0M)
        (&i/o-read . g$11933$F0M)
        (&i/o . g$11932$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12480$F0M
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$12256$F0M)
        (utf32->string . g$12220$F0M)
        (utf16->string . g$12219$F0M)
        (utf8->string . g$12218$F0M)
        (uint-list->bytevector . g$12217$F0M)
        (u8-list->bytevector . g$12216$F0M)
        (string->utf8 . g$12215$F0M)
        (string->utf32 . g$12214$F0M)
        (string->utf16 . g$12213$F0M)
        (sint-list->bytevector . g$12212$F0M)
        (native-endianness . g$6509$F0M)
        (bytevector? . g$12211$F0M)
        (bytevector=? . g$12210$F0M)
        (bytevector-uint-set! . g$12209$F0M)
        (bytevector-uint-ref . g$12208$F0M)
        (bytevector-u8-set! . g$12207$F0M)
        (bytevector-u8-ref . g$12206$F0M)
        (bytevector-u64-set! . g$6530$F0M)
        (bytevector-u64-ref . g$6526$F0M)
        (bytevector-u64-native-set! . g$6532$F0M)
        (bytevector-u64-native-ref . g$6528$F0M)
        (bytevector-u32-set! . g$6522$F0M)
        (bytevector-u32-ref . g$6518$F0M)
        (bytevector-u32-native-set! . g$6524$F0M)
        (bytevector-u32-native-ref . g$6520$F0M)
        (bytevector-u16-set! . g$6514$F0M)
        (bytevector-u16-ref . g$6510$F0M)
        (bytevector-u16-native-set! . g$6516$F0M)
        (bytevector-u16-native-ref . g$6512$F0M)
        (bytevector-sint-set! . g$12205$F0M)
        (bytevector-sint-ref . g$12204$F0M)
        (bytevector-s8-set! . g$12203$F0M)
        (bytevector-s8-ref . g$12202$F0M)
        (bytevector-s64-set! . g$6531$F0M)
        (bytevector-s64-ref . g$6527$F0M)
        (bytevector-s64-native-set! . g$6533$F0M)
        (bytevector-s64-native-ref . g$6529$F0M)
        (bytevector-s32-set! . g$6523$F0M)
        (bytevector-s32-ref . g$6519$F0M)
        (bytevector-s32-native-set! . g$6525$F0M)
        (bytevector-s32-native-ref . g$6521$F0M)
        (bytevector-s16-set! . g$6515$F0M)
        (bytevector-s16-ref . g$6511$F0M)
        (bytevector-s16-native-set! . g$6517$F0M)
        (bytevector-s16-native-ref . g$6513$F0M)
        (bytevector-length . g$12201$F0M)
        (bytevector-ieee-single-set! . g$12200$F0M)
        (bytevector-ieee-single-ref . g$12199$F0M)
        (bytevector-ieee-single-native-set! . g$6536$F0M)
        (bytevector-ieee-single-native-ref . g$6534$F0M)
        (bytevector-ieee-double-set! . g$12198$F0M)
        (bytevector-ieee-double-ref . g$12197$F0M)
        (bytevector-ieee-double-native-set! . g$6537$F0M)
        (bytevector-ieee-double-native-ref . g$6535$F0M)
        (bytevector-fill! . g$12196$F0M)
        (bytevector-copy! . g$12195$F0M)
        (bytevector-copy . g$12194$F0M)
        (bytevector->uint-list . g$12193$F0M)
        (bytevector->u8-list . g$12192$F0M)
        (bytevector->sint-list . g$12191$F0M)
        (endianness . g$11886$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12481$F0M
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12363$F0M)
        (string-titlecase . g$12362$F0M)
        (string-normalize-nfkd . g$12361$F0M)
        (string-normalize-nfkc . g$12360$F0M)
        (string-normalize-nfd . g$12359$F0M)
        (string-normalize-nfc . g$12358$F0M)
        (string-foldcase . g$12357$F0M)
        (string-downcase . g$12356$F0M)
        (string-ci>? . g$6928$F0M)
        (string-ci>=? . g$6930$F0M)
        (string-ci=? . g$6926$F0M)
        (string-ci<? . g$6927$F0M)
        (string-ci<=? . g$6929$F0M)
        (char-whitespace? . g$12355$F0M)
        (char-upper-case? . g$12354$F0M)
        (char-title-case? . g$12353$F0M)
        (char-numeric? . g$12352$F0M)
        (char-lower-case? . g$12351$F0M)
        (char-general-category . g$12350$F0M)
        (char-upcase . g$12349$F0M)
        (char-titlecase . g$12348$F0M)
        (char-foldcase . g$12347$F0M)
        (char-downcase . g$12346$F0M)
        (char-ci>? . g$6967$F0M)
        (char-ci>=? . g$6969$F0M)
        (char-ci=? . g$6965$F0M)
        (char-ci<? . g$6966$F0M)
        (char-ci<=? . g$6968$F0M)
        (char-alphabetic? . g$12345$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12482$F0M
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$12228$F0M)
        (raise-continuable . g$12227$F0M)
        (raise . g$12226$F0M)
        (guard . g$11901$F0M)
        (else . g$11890$F0M)
        (=> . g$11889$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12483$F0M
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$7029$F0M)
        (bitwise-reverse-bit-field . g$12106$F0M)
        (bitwise-length . g$12105$F0M)
        (bitwise-if . g$7023$F0M)
        (bitwise-first-bit-set . g$12104$F0M)
        (bitwise-copy-bit-field . g$7026$F0M)
        (bitwise-copy-bit . g$7024$F0M)
        (bitwise-bit-set? . g$12103$F0M)
        (bitwise-bit-field . g$12102$F0M)
        (bitwise-bit-count . g$12101$F0M)
        (bitwise-xor . g$12100$F0M)
        (bitwise-ior . g$12099$F0M)
        (bitwise-and . g$12098$F0M)
        (bitwise-not . g$12097$F0M)
        (bitwise-arithmetic-shift-right . g$7028$F0M)
        (bitwise-arithmetic-shift-left . g$7027$F0M)
        (bitwise-arithmetic-shift . g$12096$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12484$F0M
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$12144$F0M)
        (fxxor . g$12143$F0M)
        (fxrotate-bit-field . g$7077$F0M)
        (fxreverse-bit-field . g$12142$F0M)
        (fxpositive? . g$12141$F0M)
        (fxodd? . g$12140$F0M)
        (fxnot . g$12139$F0M)
        (fxnegative? . g$12138$F0M)
        (fxmod0 . g$12137$F0M)
        (fxmod . g$12136$F0M)
        (fxmin . g$12135$F0M)
        (fxmax . g$12134$F0M)
        (fxlength . g$12133$F0M)
        (fxior . g$12132$F0M)
        (fxif . g$7071$F0M)
        (fxfirst-bit-set . g$12131$F0M)
        (fxeven? . g$12130$F0M)
        (fxdiv0-and-mod0 . g$12129$F0M)
        (fxdiv0 . g$12128$F0M)
        (fxdiv-and-mod . g$12127$F0M)
        (fxdiv . g$12126$F0M)
        (fxcopy-bit-field . g$7074$F0M)
        (fxcopy-bit . g$7072$F0M)
        (fxbit-set? . g$12125$F0M)
        (fxbit-field . g$7073$F0M)
        (fxbit-count . g$12124$F0M)
        (fxarithmetic-shift-right . g$7076$F0M)
        (fxarithmetic-shift-left . g$7075$F0M)
        (fxarithmetic-shift . g$12123$F0M)
        (fxand . g$12122$F0M)
        (fx>? . g$12121$F0M)
        (fx>=? . g$12120$F0M)
        (fx=? . g$12119$F0M)
        (fx<? . g$12118$F0M)
        (fx<=? . g$12117$F0M)
        (fx-/carry . g$12116$F0M)
        (fx- . g$12115$F0M)
        (fx+/carry . g$12114$F0M)
        (fx+ . g$12113$F0M)
        (fx*/carry . g$12112$F0M)
        (fx* . g$12111$F0M)
        (greatest-fixnum . g$12110$F0M)
        (least-fixnum . g$12109$F0M)
        (fixnum-width . g$12108$F0M)
        (fixnum? . g$12107$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12485$F0M
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$7146$F0M)
        (no-infinities-violation? . g$7132$F0M)
        (make-no-nans-violation . g$7145$F0M)
        (make-no-infinities-violation . g$7131$F0M)
        (real->flonum . g$12190$F0M)
        (flzero? . g$12189$F0M)
        (fltruncate . g$12188$F0M)
        (fltan . g$12187$F0M)
        (flsqrt . g$12186$F0M)
        (flsin . g$12185$F0M)
        (flround . g$12184$F0M)
        (flpositive? . g$12183$F0M)
        (flonum? . g$12182$F0M)
        (flodd? . g$12181$F0M)
        (flnumerator . g$12180$F0M)
        (flnegative? . g$12179$F0M)
        (flnan? . g$12178$F0M)
        (flmod0 . g$12177$F0M)
        (flmod . g$12176$F0M)
        (flmin . g$12175$F0M)
        (flmax . g$12174$F0M)
        (fllog . g$12173$F0M)
        (flinteger? . g$12172$F0M)
        (flinfinite? . g$12171$F0M)
        (flfloor . g$12170$F0M)
        (flfinite? . g$12169$F0M)
        (flexpt . g$12168$F0M)
        (flexp . g$12167$F0M)
        (fleven? . g$12166$F0M)
        (fldiv0-and-mod0 . g$12165$F0M)
        (fldiv0 . g$12164$F0M)
        (fldiv-and-mod . g$12163$F0M)
        (fldiv . g$12162$F0M)
        (fldenominator . g$12161$F0M)
        (flcos . g$12160$F0M)
        (flceiling . g$12159$F0M)
        (flatan . g$12158$F0M)
        (flasin . g$12157$F0M)
        (flacos . g$12156$F0M)
        (flabs . g$12155$F0M)
        (fl>? . g$12154$F0M)
        (fl>=? . g$12153$F0M)
        (fl=? . g$12152$F0M)
        (fl<? . g$12151$F0M)
        (fl<=? . g$12150$F0M)
        (fl/ . g$12149$F0M)
        (fl- . g$12148$F0M)
        (fl+ . g$12147$F0M)
        (fl* . g$12146$F0M)
        (fixnum->flonum . g$12145$F0M)
        (&no-nans . g$11945$F0M)
        (&no-infinities . g$11944$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12486$F0M
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$12325$F0M)
        (string-ci-hash . g$12324$F0M)
        (string-hash . g$12323$F0M)
        (equal-hash . g$12322$F0M)
        (hashtable-equivalence-function . g$12321$F0M)
        (make-hashtable . g$12320$F0M)
        (hashtable-hash-function . g$12319$F0M)
        (make-eqv-hashtable . g$6470$F0M)
        (make-eq-hashtable . g$6469$F0M)
        (hashtable? . g$12318$F0M)
        (hashtable-update! . g$6476$F0M)
        (hashtable-size . g$6471$F0M)
        (hashtable-set! . g$6473$F0M)
        (hashtable-ref . g$6472$F0M)
        (hashtable-mutable? . g$12317$F0M)
        (hashtable-keys . g$12316$F0M)
        (hashtable-entries . g$12315$F0M)
        (hashtable-delete! . g$6474$F0M)
        (hashtable-copy . g$12314$F0M)
        (hashtable-contains? . g$6475$F0M)
        (hashtable-clear! . g$6477$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12487$F0M
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$12302$F0M)
        (eof-object . g$12301$F0M)
        (current-error-port . g$12300$F0M)
        (current-output-port . g$12299$F0M)
        (current-input-port . g$12298$F0M)
        (output-port? . g$12297$F0M)
        (input-port? . g$12296$F0M)
        (utf-8-codec . g$12295$F0M)
        (utf-16-codec . g$12294$F0M)
        (transcoder-error-handling-mode . g$12293$F0M)
        (transcoder-eol-style . g$12292$F0M)
        (transcoder-codec . g$12291$F0M)
        (transcoded-port . g$12290$F0M)
        (textual-port? . g$12289$F0M)
        (string->bytevector . g$12288$F0M)
        (standard-output-port . g$12287$F0M)
        (standard-input-port . g$12286$F0M)
        (standard-error-port . g$12285$F0M)
        (set-port-position! . g$12284$F0M)
        (put-u8 . g$12283$F0M)
        (put-string . g$12282$F0M)
        (put-datum . g$12281$F0M)
        (put-char . g$12280$F0M)
        (put-bytevector . g$12279$F0M)
        (port? . g$7332$F0M)
        (port-transcoder . g$12278$F0M)
        (port-position . g$12277$F0M)
        (port-has-set-port-position!? . g$12276$F0M)
        (port-has-port-position? . g$12275$F0M)
        (port-eof? . g$12274$F0M)
        (output-port-buffer-mode . g$12273$F0M)
        (open-string-output-port . g$7331$F0M)
        (open-string-input-port . g$12272$F0M)
        (open-file-output-port . g$12271$F0M)
        (open-file-input/output-port . g$12270$F0M)
        (open-file-input-port . g$12269$F0M)
        (open-bytevector-output-port . g$12268$F0M)
        (open-bytevector-input-port . g$12267$F0M)
        (native-transcoder . g$12266$F0M)
        (native-eol-style . g$12265$F0M)
        (make-transcoder . g$12264$F0M)
        (latin-1-codec . g$12263$F0M)
        (make-i/o-write-error . g$7188$F0M)
        (make-i/o-read-error . g$7174$F0M)
        (make-i/o-port-error . g$7293$F0M)
        (make-i/o-invalid-position-error . g$7203$F0M)
        (make-i/o-filename-error . g$7220$F0M)
        (make-i/o-file-protection-error . g$7236$F0M)
        (make-i/o-file-is-read-only-error . g$7250$F0M)
        (make-i/o-file-does-not-exist-error . g$7278$F0M)
        (make-i/o-file-already-exists-error . g$7264$F0M)
        (make-i/o-error . g$7160$F0M)
        (make-i/o-encoding-error . g$7324$F0M)
        (make-i/o-decoding-error . g$7309$F0M)
        (make-custom-textual-output-port . g$12262$F0M)
        (make-custom-textual-input/output-port . g$12261$F0M)
        (make-custom-textual-input-port . g$12260$F0M)
        (make-custom-binary-output-port . g$12259$F0M)
        (make-custom-binary-input/output-port . g$12258$F0M)
        (make-custom-binary-input-port . g$12257$F0M)
        (lookahead-u8 . g$12255$F0M)
        (lookahead-char . g$12254$F0M)
        (i/o-write-error? . g$7189$F0M)
        (i/o-read-error? . g$7175$F0M)
        (i/o-port-error? . g$7295$F0M)
        (i/o-invalid-position-error? . g$7205$F0M)
        (i/o-error-position . g$7206$F0M)
        (i/o-filename-error? . g$7222$F0M)
        (i/o-file-protection-error? . g$7237$F0M)
        (i/o-file-is-read-only-error? . g$7251$F0M)
        (i/o-file-does-not-exist-error? . g$7279$F0M)
        (i/o-file-already-exists-error? . g$7265$F0M)
        (i/o-error? . g$7161$F0M)
        (i/o-error-port . g$7296$F0M)
        (i/o-error-filename . g$7223$F0M)
        (i/o-encoding-error? . g$7326$F0M)
        (i/o-encoding-error-char . g$7327$F0M)
        (i/o-decoding-error? . g$7310$F0M)
        (get-u8 . g$12253$F0M)
        (get-string-n! . g$12252$F0M)
        (get-string-n . g$12251$F0M)
        (get-string-all . g$12250$F0M)
        (get-line . g$12249$F0M)
        (get-datum . g$12248$F0M)
        (get-char . g$12247$F0M)
        (get-bytevector-some . g$12246$F0M)
        (get-bytevector-n! . g$12245$F0M)
        (get-bytevector-n . g$12244$F0M)
        (get-bytevector-all . g$12243$F0M)
        (flush-output-port . g$12242$F0M)
        (close-port . g$12241$F0M)
        (call-with-string-output-port . g$7333$F0M)
        (call-with-port . g$12240$F0M)
        (call-with-bytevector-output-port . g$12239$F0M)
        (bytevector->string . g$12238$F0M)
        (buffer-mode? . g$12237$F0M)
        (binary-port? . g$12236$F0M)
        (&i/o-encoding . g$11943$F0M)
        (&i/o-decoding . g$11942$F0M)
        (&i/o-port . g$11941$F0M)
        (&i/o-file-does-not-exist . g$11940$F0M)
        (&i/o-file-already-exists . g$11939$F0M)
        (&i/o-file-is-read-only . g$11938$F0M)
        (&i/o-file-protection . g$11937$F0M)
        (&i/o-filename . g$11936$F0M)
        (&i/o-invalid-position . g$11935$F0M)
        (&i/o-write . g$11934$F0M)
        (&i/o-read . g$11933$F0M)
        (&i/o . g$11932$F0M)
        (error-handling-mode . g$11905$F0M)
        (file-options . g$11904$F0M)
        (buffer-mode . g$11903$F0M)
        (eol-style . g$11902$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12488$F0M
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$7417$F0M)
        (enum-set=? . g$7424$F0M)
        (enum-set-universe . g$7418$F0M)
        (enum-set-union . g$7425$F0M)
        (enum-set-subset? . g$7423$F0M)
        (enum-set-projection . g$7429$F0M)
        (enum-set-member? . g$7422$F0M)
        (enum-set-intersection . g$7426$F0M)
        (enum-set-indexer . g$7419$F0M)
        (enum-set-difference . g$7427$F0M)
        (enum-set-constructor . g$7420$F0M)
        (enum-set-complement . g$7428$F0M)
        (enum-set->list . g$7421$F0M)
        (define-enumeration . g$11916$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12489$F0M
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$6757$F0M)
        (warning? . g$6668$F0M)
        (violation? . g$6710$F0M)
        (undefined-violation? . g$6834$F0M)
        (syntax-violation? . g$6818$F0M)
        (syntax-violation-subform . g$6820$F0M)
        (syntax-violation-form . g$6819$F0M)
        (syntax-violation . g$8830$F0M)
        (simple-conditions . g$12225$F0M)
        (serious-condition? . g$6682$F0M)
        (non-continuable-violation? . g$6772$F0M)
        (message-condition? . g$6653$F0M)
        (make-who-condition . g$6755$F0M)
        (make-warning . g$6667$F0M)
        (make-violation . g$6709$F0M)
        (make-undefined-violation . g$6833$F0M)
        (make-syntax-violation . g$6815$F0M)
        (make-serious-condition . g$6681$F0M)
        (make-non-continuable-violation . g$6771$F0M)
        (make-message-condition . g$6651$F0M)
        (make-lexical-violation . g$6799$F0M)
        (make-irritants-condition . g$6738$F0M)
        (make-implementation-restriction-violation . g$6785$F0M)
        (make-error . g$6695$F0M)
        (make-assertion-violation . g$6723$F0M)
        (lexical-violation? . g$6800$F0M)
        (irritants-condition? . g$6740$F0M)
        (implementation-restriction-violation? . g$6786$F0M)
        (error? . g$6696$F0M)
        (condition-who . g$6758$F0M)
        (condition-predicate . g$12224$F0M)
        (condition-message . g$6654$F0M)
        (condition-irritants . g$6741$F0M)
        (condition-accessor . g$12223$F0M)
        (condition . g$12222$F0M)
        (assertion-violation? . g$6724$F0M)
        (condition? . g$12221$F0M)
        (&non-continuable . g$11931$F0M)
        (&undefined . g$11930$F0M)
        (&syntax . g$11929$F0M)
        (&lexical . g$11928$F0M)
        (&implementation-restriction . g$11927$F0M)
        (&who . g$11926$F0M)
        (&irritants . g$11925$F0M)
        (&assertion . g$11924$F0M)
        (&violation . g$11923$F0M)
        (&error . g$11922$F0M)
        (&serious . g$11921$F0M)
        (&warning . g$11920$F0M)
        (&message . g$11919$F0M)
        (&condition . g$11918$F0M)
        (define-condition-type . g$11917$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12490$F0M
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$12337$F0M)
        (record-type-uid . g$12336$F0M)
        (record-type-sealed? . g$12335$F0M)
        (record-type-parent . g$12334$F0M)
        (record-type-opaque? . g$12333$F0M)
        (record-type-name . g$12332$F0M)
        (record-type-generative? . g$12331$F0M)
        (record-type-field-names . g$12330$F0M)
        (record-rtd . g$12329$F0M)
        (record-field-mutable? . g$12328$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12491$F0M
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$12344$F0M)
        (record-predicate . g$12343$F0M)
        (record-mutator . g$12342$F0M)
        (record-constructor . g$12341$F0M)
        (record-accessor . g$12340$F0M)
        (make-record-type-descriptor . g$12339$F0M)
        (make-record-constructor-descriptor . g$12338$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12492$F0M
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$11915$F0M)
        (parent-rtd . g$11914$F0M)
        (nongenerative . g$11913$F0M)
        (opaque . g$11912$F0M)
        (sealed . g$11911$F0M)
        (protocol . g$11910$F0M)
        (parent . g$11909$F0M)
        (immutable . g$11908$F0M)
        (mutable . g$11907$F0M)
        (fields . g$11906$F0M)
        (record-constructor-descriptor . g$11867$F0M)
        (record-type-descriptor . g$11866$F0M))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7099$F0M
      'g$12493$F0M
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$8703$F0M)
        (&no-nans-rcd . g$12457$F0M)
        (&no-nans-rtd . g$12456$F0M)
        (&no-infinities-rcd . g$12455$F0M)
        (&no-infinities-rtd . g$12454$F0M)
        (&i/o-encoding-rcd . g$12453$F0M)
        (&i/o-encoding-rtd . g$12452$F0M)
        (&i/o-decoding-rcd . g$12451$F0M)
        (&i/o-decoding-rtd . g$12450$F0M)
        (&i/o-port-rcd . g$12449$F0M)
        (&i/o-port-rtd . g$12448$F0M)
        (&i/o-file-does-not-exist-rcd . g$12447$F0M)
        (&i/o-file-does-not-exist-rtd . g$12446$F0M)
        (&i/o-file-already-exists-rcd . g$12445$F0M)
        (&i/o-file-already-exists-rtd . g$12444$F0M)
        (&i/o-file-is-read-only-rcd . g$12443$F0M)
        (&i/o-file-is-read-only-rtd . g$12442$F0M)
        (&i/o-file-protection-rcd . g$12441$F0M)
        (&i/o-file-protection-rtd . g$12440$F0M)
        (&i/o-filename-rcd . g$12439$F0M)
        (&i/o-filename-rtd . g$12438$F0M)
        (&i/o-invalid-position-rcd . g$12437$F0M)
        (&i/o-invalid-position-rtd . g$12436$F0M)
        (&i/o-write-rcd . g$12435$F0M)
        (&i/o-write-rtd . g$12434$F0M)
        (&i/o-read-rcd . g$12433$F0M)
        (&i/o-read-rtd . g$12432$F0M)
        (&i/o-rcd . g$12431$F0M)
        (&i/o-rtd . g$12430$F0M)
        (&undefined-rcd . g$12429$F0M)
        (&undefined-rtd . g$12428$F0M)
        (&syntax-rcd . g$12427$F0M)
        (&syntax-rtd . g$12426$F0M)
        (&lexical-rcd . g$12425$F0M)
        (&lexical-rtd . g$12424$F0M)
        (&implementation-restriction-rcd . g$12423$F0M)
        (&implementation-restriction-rtd . g$12422$F0M)
        (&non-continuable-rcd . g$12421$F0M)
        (&non-continuable-rtd . g$12420$F0M)
        (&who-rcd . g$12419$F0M)
        (&who-rtd . g$12418$F0M)
        (&irritants-rcd . g$12417$F0M)
        (&irritants-rtd . g$12416$F0M)
        (&assertion-rcd . g$12415$F0M)
        (&assertion-rtd . g$12414$F0M)
        (&violation-rcd . g$12413$F0M)
        (&violation-rtd . g$12412$F0M)
        (&error-rcd . g$12411$F0M)
        (&error-rtd . g$12410$F0M)
        (&serious-rcd . g$12409$F0M)
        (&serious-rtd . g$12408$F0M)
        (&warning-rcd . g$12407$F0M)
        (&warning-rtd . g$12406$F0M)
        (&message-rcd . g$12405$F0M)
        (&message-rtd . g$12404$F0M)
        (&condition-rcd . g$12403$F0M)
        (&condition-rtd . g$12402$F0M)
        (library-letrec* . g$12401$F0M)
        (annotation-stripped . g$12400$F0M)
        (annotation-source . g$12399$F0M)
        (annotation-expression . g$12398$F0M)
        (annotation? . g$12397$F0M)
        (read-annotated . g$12396$F0M)
        (tanh . g$12395$F0M)
        (cosh . g$12394$F0M)
        (sinh . g$12393$F0M)
        (make-guid . g$12392$F0M)
        (unspecified? . g$12391$F0M)
        (make-trace . g$12390$F0M)
        (make-list . g$12389$F0M)
        (last-pair . g$12388$F0M)
        (load-r5rs . g$12387$F0M)
        (license . g$12386$F0M)
        (stacktrace . g$12385$F0M)
        (ironscheme-build . g$11809$F0M)
        (define-clr-class-internal . g$12384$F0M)
        (clr-field-set!-internal . g$12383$F0M)
        (clr-field-get-internal . g$12382$F0M)
        (clr-cast-internal . g$12381$F0M)
        (clr-call-internal . g$12380$F0M)
        (clr-new-internal . g$12379$F0M)
        (clr-new-array-internal . g$12378$F0M)
        (clr-is-internal . g$12377$F0M)
        (clr-reference-internal . g$12376$F0M)
        (clr-using-internal . g$12375$F0M)
        (clr-clear-usings-internal . g$12374$F0M)
        (syntax-error . g$8827$F0M)
        (syntax-dispatch . g$8698$F0M)
        (compile-core . g$12373$F0M)
        (eval-core . g$12372$F0M)
        (set-symbol-value! . g$12371$F0M)
        (symbol-value . g$12370$F0M)
        (ungensym . g$12369$F0M)
        (gensym . g$12368$F0M)
        (void . g$12367$F0M)
        (load-serialized-library . g$12366$F0M)
        (serialize-library . g$12365$F0M)
        (compile-system-libraries . g$11811$F0M)
        (compile->closure . g$11813$F0M)
        (compile . g$11812$F0M)
        (load . g$11808$F0M)
        (interaction-environment . g$8836$F0M)
        (char-ready? . g$12364$F0M)
        (string-upcase . g$12363$F0M)
        (string-titlecase . g$12362$F0M)
        (string-normalize-nfkd . g$12361$F0M)
        (string-normalize-nfkc . g$12360$F0M)
        (string-normalize-nfd . g$12359$F0M)
        (string-normalize-nfc . g$12358$F0M)
        (string-foldcase . g$12357$F0M)
        (string-downcase . g$12356$F0M)
        (string-ci>? . g$6928$F0M)
        (string-ci>=? . g$6930$F0M)
        (string-ci=? . g$6926$F0M)
        (string-ci<? . g$6927$F0M)
        (string-ci<=? . g$6929$F0M)
        (char-whitespace? . g$12355$F0M)
        (char-upper-case? . g$12354$F0M)
        (char-title-case? . g$12353$F0M)
        (char-numeric? . g$12352$F0M)
        (char-lower-case? . g$12351$F0M)
        (char-general-category . g$12350$F0M)
        (char-upcase . g$12349$F0M)
        (char-titlecase . g$12348$F0M)
        (char-foldcase . g$12347$F0M)
        (char-downcase . g$12346$F0M)
        (char-ci>? . g$6967$F0M)
        (char-ci>=? . g$6969$F0M)
        (char-ci=? . g$6965$F0M)
        (char-ci<? . g$6966$F0M)
        (char-ci<=? . g$6968$F0M)
        (char-alphabetic? . g$12345$F0M)
        (variable-transformer-procedure . g$8435$F0M)
        (variable-transformer? . g$8434$F0M)
        (make-variable-transformer . g$8433$F0M)
        (identifier? . g$8831$F0M)
        (generate-temporaries . g$8820$F0M)
        (free-identifier=? . g$8821$F0M)
        (syntax->datum . g$8833$F0M)
        (datum->syntax . g$8832$F0M)
        (bound-identifier=? . g$8822$F0M)
        (record-type-descriptor? . g$12344$F0M)
        (record-predicate . g$12343$F0M)
        (record-mutator . g$12342$F0M)
        (record-constructor . g$12341$F0M)
        (record-accessor . g$12340$F0M)
        (make-record-type-descriptor . g$12339$F0M)
        (make-record-constructor-descriptor . g$12338$F0M)
        (record? . g$12337$F0M)
        (record-type-uid . g$12336$F0M)
        (record-type-sealed? . g$12335$F0M)
        (record-type-parent . g$12334$F0M)
        (record-type-opaque? . g$12333$F0M)
        (record-type-name . g$12332$F0M)
        (record-type-generative? . g$12331$F0M)
        (record-type-field-names . g$12330$F0M)
        (record-rtd . g$12329$F0M)
        (record-field-mutable? . g$12328$F0M)
        (delete-file . g$6503$F0M)
        (file-exists? . g$6502$F0M)
        (vector-sort! . g$12327$F0M)
        (vector-sort . g$12326$F0M)
        (list-sort . g$6866$F0M)
        (symbol-hash . g$12325$F0M)
        (string-ci-hash . g$12324$F0M)
        (string-hash . g$12323$F0M)
        (equal-hash . g$12322$F0M)
        (hashtable-equivalence-function . g$12321$F0M)
        (make-hashtable . g$12320$F0M)
        (hashtable-hash-function . g$12319$F0M)
        (make-eqv-hashtable . g$6470$F0M)
        (make-eq-hashtable . g$6469$F0M)
        (hashtable? . g$12318$F0M)
        (hashtable-update! . g$6476$F0M)
        (hashtable-size . g$6471$F0M)
        (hashtable-set! . g$6473$F0M)
        (hashtable-ref . g$6472$F0M)
        (hashtable-mutable? . g$12317$F0M)
        (hashtable-keys . g$12316$F0M)
        (hashtable-entries . g$12315$F0M)
        (hashtable-delete! . g$6474$F0M)
        (hashtable-copy . g$12314$F0M)
        (hashtable-contains? . g$6475$F0M)
        (hashtable-clear! . g$6477$F0M)
        (call-with-output-file . g$7359$F0M)
        (call-with-input-file . g$7358$F0M)
        (write-char . g$12313$F0M)
        (write . g$12312$F0M)
        (with-output-to-file . g$7357$F0M)
        (with-input-from-file . g$7356$F0M)
        (read-char . g$12311$F0M)
        (read . g$12310$F0M)
        (peek-char . g$12309$F0M)
        (open-output-file . g$12308$F0M)
        (open-input-file . g$12307$F0M)
        (newline . g$12306$F0M)
        (display . g$12305$F0M)
        (close-output-port . g$12304$F0M)
        (close-input-port . g$12303$F0M)
        (eof-object? . g$12302$F0M)
        (eof-object . g$12301$F0M)
        (current-error-port . g$12300$F0M)
        (current-output-port . g$12299$F0M)
        (current-input-port . g$12298$F0M)
        (output-port? . g$12297$F0M)
        (input-port? . g$12296$F0M)
        (utf-8-codec . g$12295$F0M)
        (utf-16-codec . g$12294$F0M)
        (transcoder-error-handling-mode . g$12293$F0M)
        (transcoder-eol-style . g$12292$F0M)
        (transcoder-codec . g$12291$F0M)
        (transcoded-port . g$12290$F0M)
        (textual-port? . g$12289$F0M)
        (string->bytevector . g$12288$F0M)
        (standard-output-port . g$12287$F0M)
        (standard-input-port . g$12286$F0M)
        (standard-error-port . g$12285$F0M)
        (set-port-position! . g$12284$F0M)
        (put-u8 . g$12283$F0M)
        (put-string . g$12282$F0M)
        (put-datum . g$12281$F0M)
        (put-char . g$12280$F0M)
        (put-bytevector . g$12279$F0M)
        (port? . g$7332$F0M)
        (port-transcoder . g$12278$F0M)
        (port-position . g$12277$F0M)
        (port-has-set-port-position!? . g$12276$F0M)
        (port-has-port-position? . g$12275$F0M)
        (port-eof? . g$12274$F0M)
        (output-port-buffer-mode . g$12273$F0M)
        (open-string-output-port . g$7331$F0M)
        (open-string-input-port . g$12272$F0M)
        (open-file-output-port . g$12271$F0M)
        (open-file-input/output-port . g$12270$F0M)
        (open-file-input-port . g$12269$F0M)
        (open-bytevector-output-port . g$12268$F0M)
        (open-bytevector-input-port . g$12267$F0M)
        (native-transcoder . g$12266$F0M)
        (native-eol-style . g$12265$F0M)
        (make-transcoder . g$12264$F0M)
        (latin-1-codec . g$12263$F0M)
        (make-i/o-write-error . g$7188$F0M)
        (make-i/o-read-error . g$7174$F0M)
        (make-i/o-port-error . g$7293$F0M)
        (make-i/o-invalid-position-error . g$7203$F0M)
        (make-i/o-filename-error . g$7220$F0M)
        (make-i/o-file-protection-error . g$7236$F0M)
        (make-i/o-file-is-read-only-error . g$7250$F0M)
        (make-i/o-file-does-not-exist-error . g$7278$F0M)
        (make-i/o-file-already-exists-error . g$7264$F0M)
        (make-i/o-error . g$7160$F0M)
        (make-i/o-encoding-error . g$7324$F0M)
        (make-i/o-decoding-error . g$7309$F0M)
        (make-custom-textual-output-port . g$12262$F0M)
        (make-custom-textual-input/output-port . g$12261$F0M)
        (make-custom-textual-input-port . g$12260$F0M)
        (make-custom-binary-output-port . g$12259$F0M)
        (make-custom-binary-input/output-port . g$12258$F0M)
        (make-custom-binary-input-port . g$12257$F0M)
        (make-bytevector . g$12256$F0M)
        (lookahead-u8 . g$12255$F0M)
        (lookahead-char . g$12254$F0M)
        (i/o-write-error? . g$7189$F0M)
        (i/o-read-error? . g$7175$F0M)
        (i/o-port-error? . g$7295$F0M)
        (i/o-invalid-position-error? . g$7205$F0M)
        (i/o-error-position . g$7206$F0M)
        (i/o-filename-error? . g$7222$F0M)
        (i/o-file-protection-error? . g$7237$F0M)
        (i/o-file-is-read-only-error? . g$7251$F0M)
        (i/o-file-does-not-exist-error? . g$7279$F0M)
        (i/o-file-already-exists-error? . g$7265$F0M)
        (i/o-error? . g$7161$F0M)
        (i/o-error-port . g$7296$F0M)
        (i/o-error-filename . g$7223$F0M)
        (i/o-encoding-error? . g$7326$F0M)
        (i/o-encoding-error-char . g$7327$F0M)
        (i/o-decoding-error? . g$7310$F0M)
        (get-u8 . g$12253$F0M)
        (get-string-n! . g$12252$F0M)
        (get-string-n . g$12251$F0M)
        (get-string-all . g$12250$F0M)
        (get-line . g$12249$F0M)
        (get-datum . g$12248$F0M)
        (get-char . g$12247$F0M)
        (get-bytevector-some . g$12246$F0M)
        (get-bytevector-n! . g$12245$F0M)
        (get-bytevector-n . g$12244$F0M)
        (get-bytevector-all . g$12243$F0M)
        (flush-output-port . g$12242$F0M)
        (close-port . g$12241$F0M)
        (call-with-string-output-port . g$7333$F0M)
        (call-with-port . g$12240$F0M)
        (call-with-bytevector-output-port . g$12239$F0M)
        (bytevector->string . g$12238$F0M)
        (buffer-mode? . g$12237$F0M)
        (binary-port? . g$12236$F0M)
        (scheme-report-environment . g$8811$F0M)
        (quotient . g$6846$F0M)
        (null-environment . g$8810$F0M)
        (remainder . g$6847$F0M)
        (modulo . g$6848$F0M)
        (inexact->exact . g$12235$F0M)
        (force . g$6850$F0M)
        (exact->inexact . g$12234$F0M)
        (exit . g$12233$F0M)
        (command-line . g$11805$F0M)
        (string-fill! . g$12232$F0M)
        (string-set! . g$12231$F0M)
        (set-cdr! . g$12230$F0M)
        (set-car! . g$12229$F0M)
        (remove . g$5858$F0M)
        (remv . g$5859$F0M)
        (remp . g$5841$F0M)
        (remq . g$5860$F0M)
        (partition . g$5840$F0M)
        (memv . g$5848$F0M)
        (memq . g$5847$F0M)
        (memp . g$5850$F0M)
        (member . g$5849$F0M)
        (exists . g$5854$F0M)
        (for-all . g$5853$F0M)
        (fold-right . g$5857$F0M)
        (fold-left . g$5856$F0M)
        (find . g$5839$F0M)
        (filter . g$5842$F0M)
        (cons* . g$5855$F0M)
        (assv . g$5844$F0M)
        (assq . g$5843$F0M)
        (assp . g$5846$F0M)
        (assoc . g$5845$F0M)
        (with-exception-handler . g$12228$F0M)
        (raise-continuable . g$12227$F0M)
        (raise . g$12226$F0M)
        (eval . g$8813$F0M)
        (environment . g$8809$F0M)
        (make-enumeration . g$7417$F0M)
        (enum-set=? . g$7424$F0M)
        (enum-set-universe . g$7418$F0M)
        (enum-set-union . g$7425$F0M)
        (enum-set-subset? . g$7423$F0M)
        (enum-set-projection . g$7429$F0M)
        (enum-set-member? . g$7422$F0M)
        (enum-set-intersection . g$7426$F0M)
        (enum-set-indexer . g$7419$F0M)
        (enum-set-difference . g$7427$F0M)
        (enum-set-constructor . g$7420$F0M)
        (enum-set-complement . g$7428$F0M)
        (enum-set->list . g$7421$F0M)
        (who-condition? . g$6757$F0M)
        (warning? . g$6668$F0M)
        (violation? . g$6710$F0M)
        (undefined-violation? . g$6834$F0M)
        (syntax-violation? . g$6818$F0M)
        (syntax-violation-subform . g$6820$F0M)
        (syntax-violation-form . g$6819$F0M)
        (syntax-violation . g$8830$F0M)
        (simple-conditions . g$12225$F0M)
        (serious-condition? . g$6682$F0M)
        (non-continuable-violation? . g$6772$F0M)
        (message-condition? . g$6653$F0M)
        (make-who-condition . g$6755$F0M)
        (make-warning . g$6667$F0M)
        (make-violation . g$6709$F0M)
        (make-undefined-violation . g$6833$F0M)
        (make-syntax-violation . g$6815$F0M)
        (make-serious-condition . g$6681$F0M)
        (make-non-continuable-violation . g$6771$F0M)
        (make-message-condition . g$6651$F0M)
        (make-lexical-violation . g$6799$F0M)
        (make-irritants-condition . g$6738$F0M)
        (make-implementation-restriction-violation . g$6785$F0M)
        (make-error . g$6695$F0M)
        (make-assertion-violation . g$6723$F0M)
        (lexical-violation? . g$6800$F0M)
        (irritants-condition? . g$6740$F0M)
        (implementation-restriction-violation? . g$6786$F0M)
        (error? . g$6696$F0M)
        (condition-who . g$6758$F0M)
        (condition-predicate . g$12224$F0M)
        (condition-message . g$6654$F0M)
        (condition-irritants . g$6741$F0M)
        (condition-accessor . g$12223$F0M)
        (condition . g$12222$F0M)
        (assertion-violation? . g$6724$F0M)
        (condition? . g$12221$F0M)
        (utf32->string . g$12220$F0M)
        (utf16->string . g$12219$F0M)
        (utf8->string . g$12218$F0M)
        (uint-list->bytevector . g$12217$F0M)
        (u8-list->bytevector . g$12216$F0M)
        (string->utf8 . g$12215$F0M)
        (string->utf32 . g$12214$F0M)
        (string->utf16 . g$12213$F0M)
        (sint-list->bytevector . g$12212$F0M)
        (native-endianness . g$6509$F0M)
        (bytevector? . g$12211$F0M)
        (bytevector=? . g$12210$F0M)
        (bytevector-uint-set! . g$12209$F0M)
        (bytevector-uint-ref . g$12208$F0M)
        (bytevector-u8-set! . g$12207$F0M)
        (bytevector-u8-ref . g$12206$F0M)
        (bytevector-u64-set! . g$6530$F0M)
        (bytevector-u64-ref . g$6526$F0M)
        (bytevector-u64-native-set! . g$6532$F0M)
        (bytevector-u64-native-ref . g$6528$F0M)
        (bytevector-u32-set! . g$6522$F0M)
        (bytevector-u32-ref . g$6518$F0M)
        (bytevector-u32-native-set! . g$6524$F0M)
        (bytevector-u32-native-ref . g$6520$F0M)
        (bytevector-u16-set! . g$6514$F0M)
        (bytevector-u16-ref . g$6510$F0M)
        (bytevector-u16-native-set! . g$6516$F0M)
        (bytevector-u16-native-ref . g$6512$F0M)
        (bytevector-sint-set! . g$12205$F0M)
        (bytevector-sint-ref . g$12204$F0M)
        (bytevector-s8-set! . g$12203$F0M)
        (bytevector-s8-ref . g$12202$F0M)
        (bytevector-s64-set! . g$6531$F0M)
        (bytevector-s64-ref . g$6527$F0M)
        (bytevector-s64-native-set! . g$6533$F0M)
        (bytevector-s64-native-ref . g$6529$F0M)
        (bytevector-s32-set! . g$6523$F0M)
        (bytevector-s32-ref . g$6519$F0M)
        (bytevector-s32-native-set! . g$6525$F0M)
        (bytevector-s32-native-ref . g$6521$F0M)
        (bytevector-s16-set! . g$6515$F0M)
        (bytevector-s16-ref . g$6511$F0M)
        (bytevector-s16-native-set! . g$6517$F0M)
        (bytevector-s16-native-ref . g$6513$F0M)
        (bytevector-length . g$12201$F0M)
        (bytevector-ieee-single-set! . g$12200$F0M)
        (bytevector-ieee-single-ref . g$12199$F0M)
        (bytevector-ieee-single-native-set! . g$6536$F0M)
        (bytevector-ieee-single-native-ref . g$6534$F0M)
        (bytevector-ieee-double-set! . g$12198$F0M)
        (bytevector-ieee-double-ref . g$12197$F0M)
        (bytevector-ieee-double-native-set! . g$6537$F0M)
        (bytevector-ieee-double-native-ref . g$6535$F0M)
        (bytevector-fill! . g$12196$F0M)
        (bytevector-copy! . g$12195$F0M)
        (bytevector-copy . g$12194$F0M)
        (bytevector->uint-list . g$12193$F0M)
        (bytevector->u8-list . g$12192$F0M)
        (bytevector->sint-list . g$12191$F0M)
        (no-nans-violation? . g$7146$F0M)
        (no-infinities-violation? . g$7132$F0M)
        (make-no-nans-violation . g$7145$F0M)
        (make-no-infinities-violation . g$7131$F0M)
        (real->flonum . g$12190$F0M)
        (flzero? . g$12189$F0M)
        (fltruncate . g$12188$F0M)
        (fltan . g$12187$F0M)
        (flsqrt . g$12186$F0M)
        (flsin . g$12185$F0M)
        (flround . g$12184$F0M)
        (flpositive? . g$12183$F0M)
        (flonum? . g$12182$F0M)
        (flodd? . g$12181$F0M)
        (flnumerator . g$12180$F0M)
        (flnegative? . g$12179$F0M)
        (flnan? . g$12178$F0M)
        (flmod0 . g$12177$F0M)
        (flmod . g$12176$F0M)
        (flmin . g$12175$F0M)
        (flmax . g$12174$F0M)
        (fllog . g$12173$F0M)
        (flinteger? . g$12172$F0M)
        (flinfinite? . g$12171$F0M)
        (flfloor . g$12170$F0M)
        (flfinite? . g$12169$F0M)
        (flexpt . g$12168$F0M)
        (flexp . g$12167$F0M)
        (fleven? . g$12166$F0M)
        (fldiv0-and-mod0 . g$12165$F0M)
        (fldiv0 . g$12164$F0M)
        (fldiv-and-mod . g$12163$F0M)
        (fldiv . g$12162$F0M)
        (fldenominator . g$12161$F0M)
        (flcos . g$12160$F0M)
        (flceiling . g$12159$F0M)
        (flatan . g$12158$F0M)
        (flasin . g$12157$F0M)
        (flacos . g$12156$F0M)
        (flabs . g$12155$F0M)
        (fl>? . g$12154$F0M)
        (fl>=? . g$12153$F0M)
        (fl=? . g$12152$F0M)
        (fl<? . g$12151$F0M)
        (fl<=? . g$12150$F0M)
        (fl/ . g$12149$F0M)
        (fl- . g$12148$F0M)
        (fl+ . g$12147$F0M)
        (fl* . g$12146$F0M)
        (fixnum->flonum . g$12145$F0M)
        (fxzero? . g$12144$F0M)
        (fxxor . g$12143$F0M)
        (fxrotate-bit-field . g$7077$F0M)
        (fxreverse-bit-field . g$12142$F0M)
        (fxpositive? . g$12141$F0M)
        (fxodd? . g$12140$F0M)
        (fxnot . g$12139$F0M)
        (fxnegative? . g$12138$F0M)
        (fxmod0 . g$12137$F0M)
        (fxmod . g$12136$F0M)
        (fxmin . g$12135$F0M)
        (fxmax . g$12134$F0M)
        (fxlength . g$12133$F0M)
        (fxior . g$12132$F0M)
        (fxif . g$7071$F0M)
        (fxfirst-bit-set . g$12131$F0M)
        (fxeven? . g$12130$F0M)
        (fxdiv0-and-mod0 . g$12129$F0M)
        (fxdiv0 . g$12128$F0M)
        (fxdiv-and-mod . g$12127$F0M)
        (fxdiv . g$12126$F0M)
        (fxcopy-bit-field . g$7074$F0M)
        (fxcopy-bit . g$7072$F0M)
        (fxbit-set? . g$12125$F0M)
        (fxbit-field . g$7073$F0M)
        (fxbit-count . g$12124$F0M)
        (fxarithmetic-shift-right . g$7076$F0M)
        (fxarithmetic-shift-left . g$7075$F0M)
        (fxarithmetic-shift . g$12123$F0M)
        (fxand . g$12122$F0M)
        (fx>? . g$12121$F0M)
        (fx>=? . g$12120$F0M)
        (fx=? . g$12119$F0M)
        (fx<? . g$12118$F0M)
        (fx<=? . g$12117$F0M)
        (fx-/carry . g$12116$F0M)
        (fx- . g$12115$F0M)
        (fx+/carry . g$12114$F0M)
        (fx+ . g$12113$F0M)
        (fx*/carry . g$12112$F0M)
        (fx* . g$12111$F0M)
        (greatest-fixnum . g$12110$F0M)
        (least-fixnum . g$12109$F0M)
        (fixnum-width . g$12108$F0M)
        (fixnum? . g$12107$F0M)
        (bitwise-rotate-bit-field . g$7029$F0M)
        (bitwise-reverse-bit-field . g$12106$F0M)
        (bitwise-length . g$12105$F0M)
        (bitwise-if . g$7023$F0M)
        (bitwise-first-bit-set . g$12104$F0M)
        (bitwise-copy-bit-field . g$7026$F0M)
        (bitwise-copy-bit . g$7024$F0M)
        (bitwise-bit-set? . g$12103$F0M)
        (bitwise-bit-field . g$12102$F0M)
        (bitwise-bit-count . g$12101$F0M)
        (bitwise-xor . g$12100$F0M)
        (bitwise-ior . g$12099$F0M)
        (bitwise-and . g$12098$F0M)
        (bitwise-not . g$12097$F0M)
        (bitwise-arithmetic-shift-right . g$7028$F0M)
        (bitwise-arithmetic-shift-left . g$7027$F0M)
        (bitwise-arithmetic-shift . g$12096$F0M)
        (zero? . g$12095$F0M)
        (vector? . g$12094$F0M)
        (vector-set! . g$12093$F0M)
        (vector-ref . g$12092$F0M)
        (vector-map . g$12091$F0M)
        (vector-length . g$12090$F0M)
        (vector-for-each . g$12089$F0M)
        (vector-fill! . g$12088$F0M)
        (vector->list . g$12087$F0M)
        (vector . g$12086$F0M)
        (values . g$12085$F0M)
        (truncate . g$12084$F0M)
        (tan . g$12083$F0M)
        (symbol? . g$12082$F0M)
        (symbol=? . g$6018$F0M)
        (symbol->string . g$12081$F0M)
        (substring . g$12080$F0M)
        (string? . g$12079$F0M)
        (string>? . g$6015$F0M)
        (string>=? . g$6017$F0M)
        (string=? . g$6013$F0M)
        (string<? . g$6014$F0M)
        (string<=? . g$6016$F0M)
        (string-ref . g$12078$F0M)
        (string-length . g$12077$F0M)
        (string-for-each . g$12076$F0M)
        (string-copy . g$12075$F0M)
        (string-append . g$12074$F0M)
        (string->symbol . g$12073$F0M)
        (string->number . g$12072$F0M)
        (string->list . g$12071$F0M)
        (string . g$12070$F0M)
        (sqrt . g$12069$F0M)
        (sin . g$12068$F0M)
        (round . g$12067$F0M)
        (reverse . g$12066$F0M)
        (real? . g$12065$F0M)
        (real-valued? . g$12064$F0M)
        (real-part . g$12063$F0M)
        (rationalize . g$6059$F0M)
        (rational? . g$12062$F0M)
        (rational-valued? . g$12061$F0M)
        (procedure? . g$12060$F0M)
        (positive? . g$12059$F0M)
        (pair? . g$12058$F0M)
        (odd? . g$12057$F0M)
        (numerator . g$12056$F0M)
        (number? . g$12055$F0M)
        (number->string . g$12054$F0M)
        (null? . g$12053$F0M)
        (not . g$12052$F0M)
        (negative? . g$12051$F0M)
        (nan? . g$12050$F0M)
        (min . g$12049$F0M)
        (max . g$12048$F0M)
        (map . g$12047$F0M)
        (make-vector . g$12046$F0M)
        (make-string . g$12045$F0M)
        (make-rectangular . g$12044$F0M)
        (make-polar . g$12043$F0M)
        (magnitude . g$12042$F0M)
        (log . g$12041$F0M)
        (list? . g$12040$F0M)
        (list-tail . g$12039$F0M)
        (list-ref . g$12038$F0M)
        (list->vector . g$12037$F0M)
        (list->string . g$12036$F0M)
        (list . g$12035$F0M)
        (length . g$12034$F0M)
        (lcm . g$12033$F0M)
        (integer? . g$12032$F0M)
        (integer-valued? . g$12031$F0M)
        (integer->char . g$12030$F0M)
        (infinite? . g$12029$F0M)
        (inexact? . g$12028$F0M)
        (inexact . g$12027$F0M)
        (imag-part . g$12026$F0M)
        (gcd . g$12025$F0M)
        (for-each . g$12024$F0M)
        (floor . g$12023$F0M)
        (finite? . g$12022$F0M)
        (expt . g$12021$F0M)
        (exp . g$12020$F0M)
        (exact? . g$12019$F0M)
        (exact-integer-sqrt . g$12018$F0M)
        (exact . g$12017$F0M)
        (even? . g$12016$F0M)
        (error . g$12015$F0M)
        (eqv? . g$12014$F0M)
        (equal? . g$12013$F0M)
        (eq? . g$12012$F0M)
        (dynamic-wind . g$12011$F0M)
        (div0-and-mod0 . g$12010$F0M)
        (mod0 . g$12009$F0M)
        (div0 . g$12008$F0M)
        (div-and-mod . g$12007$F0M)
        (mod . g$12006$F0M)
        (div . g$12005$F0M)
        (denominator . g$12004$F0M)
        (cos . g$12003$F0M)
        (cons . g$12002$F0M)
        (complex? . g$12001$F0M)
        (char? . g$12000$F0M)
        (char>? . g$6056$F0M)
        (char>=? . g$6058$F0M)
        (char=? . g$6054$F0M)
        (char<? . g$6055$F0M)
        (char<=? . g$6057$F0M)
        (char->integer . g$11999$F0M)
        (ceiling . g$11998$F0M)
        (call-with-values . g$11997$F0M)
        (call/cc . g$11996$F0M)
        (call-with-current-continuation . g$11995$F0M)
        (cddddr . g$5978$F0M)
        (cdddar . g$5977$F0M)
        (cddadr . g$5976$F0M)
        (cddaar . g$5975$F0M)
        (cdaddr . g$5974$F0M)
        (cdadar . g$5973$F0M)
        (cdaadr . g$5972$F0M)
        (cdaaar . g$5971$F0M)
        (cadddr . g$5970$F0M)
        (caddar . g$5969$F0M)
        (cadadr . g$5968$F0M)
        (cadaar . g$5967$F0M)
        (caaddr . g$5966$F0M)
        (caadar . g$5965$F0M)
        (caaadr . g$5964$F0M)
        (caaaar . g$5963$F0M)
        (cdddr . g$5962$F0M)
        (cddar . g$5961$F0M)
        (cdadr . g$5960$F0M)
        (cdaar . g$5959$F0M)
        (caddr . g$5958$F0M)
        (cadar . g$5957$F0M)
        (caadr . g$5956$F0M)
        (caaar . g$5955$F0M)
        (cddr . g$5954$F0M)
        (cdar . g$5953$F0M)
        (cadr . g$5952$F0M)
        (caar . g$5951$F0M)
        (cdr . g$11994$F0M)
        (car . g$11993$F0M)
        (boolean? . g$11992$F0M)
        (boolean=? . g$6019$F0M)
        (atan . g$11991$F0M)
        (assertion-violation . g$11990$F0M)
        (asin . g$11989$F0M)
        (apply . g$11988$F0M)
        (append . g$11987$F0M)
        (angle . g$11986$F0M)
        (acos . g$11985$F0M)
        (abs . g$11984$F0M)
        (/ . g$11983$F0M)
        (* . g$11982$F0M)
        (- . g$11981$F0M)
        (+ . g$11980$F0M)
        (>= . g$11979$F0M)
        (> . g$11978$F0M)
        (= . g$11977$F0M)
        (<= . g$11976$F0M)
        (< . g$11975$F0M)
        (make-record-printer . g$11974$F0M)
        (eqv-hash . g$11973$F0M)
        (reverse! . g$11972$F0M)
        (deserialize-port . g$11971$F0M)
        (serialize-port . g$11970$F0M)
        (enum-set? . g$7392$F0M)
        (make-promise . g$6849$F0M)
        (load/args . g$11807$F0M)
        (printf . g$7503$F0M)
        (fprintf . g$7504$F0M)
        (format . g$7505$F0M)
        (procedure-form . g$11969$F0M)
        (procedure-environment . g$11968$F0M)
        (procedure-name . g$11967$F0M)
        (procedure-arity . g$11966$F0M)
        (gc-collect . g$11965$F0M)
        (clr-type? . g$11964$F0M)
        (get-clr-type . g$11963$F0M)
        (get-command-line . g$11962$F0M)
        (vector-append . g$11961$F0M)
        (vector-filter . g$11960$F0M)
        (vector-reverse! . g$11959$F0M)
        (vector-contains? . g$11958$F0M)
        (vector-index-of . g$11957$F0M)
        (vector-copy . g$11956$F0M)
        (vector-binary-search . g$11955$F0M)
        (string-ci-compare . g$11954$F0M)
        (string-compare . g$11953$F0M)
        (string-format . g$11952$F0M)
        (trace-printer . g$11804$F0M)
        (make-traced-procedure . g$11951$F0M)
        (make-traced-macro . g$7525$F0M)
        (assertion-error . g$8826$F0M)
        (pmap . g$11950$F0M)
        (time-it . g$11949$F0M)
        (make-parameter . g$7532$F0M)
        (library-locator . g$11948$F0M)
        (get-library-paths . g$11947$F0M)
        (environment-bindings . g$8805$F0M)
        (environment-symbols . g$8808$F0M)
        (interaction-environment-symbols . g$8804$F0M)
        (optimization-level . g$11946$F0M)
        (library-path . g$7987$F0M)
        (expand . g$8812$F0M)
        (&no-nans . g$11945$F0M)
        (&no-infinities . g$11944$F0M)
        (&i/o-encoding . g$11943$F0M)
        (&i/o-decoding . g$11942$F0M)
        (&i/o-port . g$11941$F0M)
        (&i/o-file-does-not-exist . g$11940$F0M)
        (&i/o-file-already-exists . g$11939$F0M)
        (&i/o-file-is-read-only . g$11938$F0M)
        (&i/o-file-protection . g$11937$F0M)
        (&i/o-filename . g$11936$F0M)
        (&i/o-invalid-position . g$11935$F0M)
        (&i/o-write . g$11934$F0M)
        (&i/o-read . g$11933$F0M)
        (&i/o . g$11932$F0M)
        (&non-continuable . g$11931$F0M)
        (&undefined . g$11930$F0M)
        (&syntax . g$11929$F0M)
        (&lexical . g$11928$F0M)
        (&implementation-restriction . g$11927$F0M)
        (&who . g$11926$F0M)
        (&irritants . g$11925$F0M)
        (&assertion . g$11924$F0M)
        (&violation . g$11923$F0M)
        (&error . g$11922$F0M)
        (&serious . g$11921$F0M)
        (&warning . g$11920$F0M)
        (&message . g$11919$F0M)
        (&condition . g$11918$F0M)
        (define-condition-type . g$11917$F0M)
        (define-enumeration . g$11916$F0M)
        (define-record-type . g$11915$F0M)
        (parent-rtd . g$11914$F0M)
        (nongenerative . g$11913$F0M)
        (opaque . g$11912$F0M)
        (sealed . g$11911$F0M)
        (protocol . g$11910$F0M)
        (parent . g$11909$F0M)
        (immutable . g$11908$F0M)
        (mutable . g$11907$F0M)
        (fields . g$11906$F0M)
        (error-handling-mode . g$11905$F0M)
        (file-options . g$11904$F0M)
        (buffer-mode . g$11903$F0M)
        (eol-style . g$11902$F0M)
        (guard . g$11901$F0M)
        (trace-letrec-syntax . g$11900$F0M)
        (trace-let-syntax . g$11899$F0M)
        (trace-define-syntax . g$11898$F0M)
        (trace-define . g$11897$F0M)
        (trace-lambda . g$11896$F0M)
        (unsyntax-splicing . g$11895$F0M)
        (unsyntax . g$11894$F0M)
        (unquote-splicing . g$11893$F0M)
        (unquote . g$11892$F0M)
        (_ . g$11891$F0M)
        (else . g$11890$F0M)
        (=> . g$11889$F0M)
        (... . g$11888$F0M)
        (assert . g$11887$F0M)
        (endianness . g$11886$F0M)
        (delay . g$11885$F0M)
        (time . g$11884$F0M)
        (or . g$11883$F0M)
        (and . g$11882$F0M)
        (do . g$11881$F0M)
        (cond . g$11880$F0M)
        (let* . g$11879$F0M)
        (let . g$11878$F0M)
        (identifier-syntax . g$11877$F0M)
        (with-syntax . g$11876$F0M)
        (quasisyntax . g$11875$F0M)
        (quasiquote . g$11874$F0M)
        (syntax-rules . g$11873$F0M)
        (include-into . g$11872$F0M)
        (include . g$11871$F0M)
        (define-struct . g$11870$F0M)
        (let-values . g$11869$F0M)
        (let*-values . g$11868$F0M)
        (record-constructor-descriptor . g$11867$F0M)
        (record-type-descriptor . g$11866$F0M)
        (fluid-let-syntax . g$11865$F0M)
        (case . g$11864$F0M)
        (parameterize . g$11863$F0M)
        (unless . g$11862$F0M)
        (when . g$11861$F0M)
        (if . g$11860$F0M)
        (letrec* . g$11859$F0M)
        (letrec . g$11858$F0M)
        (type-descriptor . g$11857$F0M)
        (case-lambda . g$11856$F0M)
        (lambda . g$11855$F0M)
        (syntax . g$11854$F0M)
        (syntax-case . g$11853$F0M)
        (quote . g$11852$F0M)
        (foreign-call . g$11851$F0M)
        (letrec-syntax . g$11850$F0M)
        (let-syntax . g$11849$F0M)
        (set! . g$11848$F0M)
        (export . g$11847$F0M)
        (import . g$11846$F0M)
        (library . g$11845$F0M)
        (begin . g$11844$F0M)
        (module . g$11843$F0M)
        (define-syntax . g$11842$F0M)
        (define . g$11841$F0M))
      '((g$8703$F0M core-prim . ellipsis-map)
        (g$12457$F0M core-prim . &no-nans-rcd)
        (g$12456$F0M core-prim . &no-nans-rtd)
        (g$12455$F0M core-prim . &no-infinities-rcd)
        (g$12454$F0M core-prim . &no-infinities-rtd)
        (g$12453$F0M core-prim . &i/o-encoding-rcd)
        (g$12452$F0M core-prim . &i/o-encoding-rtd)
        (g$12451$F0M core-prim . &i/o-decoding-rcd)
        (g$12450$F0M core-prim . &i/o-decoding-rtd)
        (g$12449$F0M core-prim . &i/o-port-rcd)
        (g$12448$F0M core-prim . &i/o-port-rtd)
        (g$12447$F0M core-prim . &i/o-file-does-not-exist-rcd)
        (g$12446$F0M core-prim . &i/o-file-does-not-exist-rtd)
        (g$12445$F0M core-prim . &i/o-file-already-exists-rcd)
        (g$12444$F0M core-prim . &i/o-file-already-exists-rtd)
        (g$12443$F0M core-prim . &i/o-file-is-read-only-rcd)
        (g$12442$F0M core-prim . &i/o-file-is-read-only-rtd)
        (g$12441$F0M core-prim . &i/o-file-protection-rcd)
        (g$12440$F0M core-prim . &i/o-file-protection-rtd)
        (g$12439$F0M core-prim . &i/o-filename-rcd)
        (g$12438$F0M core-prim . &i/o-filename-rtd)
        (g$12437$F0M core-prim . &i/o-invalid-position-rcd)
        (g$12436$F0M core-prim . &i/o-invalid-position-rtd)
        (g$12435$F0M core-prim . &i/o-write-rcd)
        (g$12434$F0M core-prim . &i/o-write-rtd)
        (g$12433$F0M core-prim . &i/o-read-rcd)
        (g$12432$F0M core-prim . &i/o-read-rtd)
        (g$12431$F0M core-prim . &i/o-rcd)
        (g$12430$F0M core-prim . &i/o-rtd)
        (g$12429$F0M core-prim . &undefined-rcd)
        (g$12428$F0M core-prim . &undefined-rtd)
        (g$12427$F0M core-prim . &syntax-rcd)
        (g$12426$F0M core-prim . &syntax-rtd)
        (g$12425$F0M core-prim . &lexical-rcd)
        (g$12424$F0M core-prim . &lexical-rtd)
        (g$12423$F0M core-prim . &implementation-restriction-rcd)
        (g$12422$F0M core-prim . &implementation-restriction-rtd)
        (g$12421$F0M core-prim . &non-continuable-rcd)
        (g$12420$F0M core-prim . &non-continuable-rtd)
        (g$12419$F0M core-prim . &who-rcd)
        (g$12418$F0M core-prim . &who-rtd)
        (g$12417$F0M core-prim . &irritants-rcd)
        (g$12416$F0M core-prim . &irritants-rtd)
        (g$12415$F0M core-prim . &assertion-rcd)
        (g$12414$F0M core-prim . &assertion-rtd)
        (g$12413$F0M core-prim . &violation-rcd)
        (g$12412$F0M core-prim . &violation-rtd)
        (g$12411$F0M core-prim . &error-rcd)
        (g$12410$F0M core-prim . &error-rtd)
        (g$12409$F0M core-prim . &serious-rcd)
        (g$12408$F0M core-prim . &serious-rtd)
        (g$12407$F0M core-prim . &warning-rcd)
        (g$12406$F0M core-prim . &warning-rtd)
        (g$12405$F0M core-prim . &message-rcd)
        (g$12404$F0M core-prim . &message-rtd)
        (g$12403$F0M core-prim . &condition-rcd)
        (g$12402$F0M core-prim . &condition-rtd)
        (g$12401$F0M core-prim . library-letrec*)
        (g$12400$F0M core-prim . annotation-stripped)
        (g$12399$F0M core-prim . annotation-source)
        (g$12398$F0M core-prim . annotation-expression)
        (g$12397$F0M core-prim . annotation?)
        (g$12396$F0M core-prim . read-annotated)
        (g$12395$F0M core-prim . tanh)
        (g$12394$F0M core-prim . cosh)
        (g$12393$F0M core-prim . sinh)
        (g$12392$F0M core-prim . make-guid)
        (g$12391$F0M core-prim . unspecified?)
        (g$12390$F0M core-prim . make-trace)
        (g$12389$F0M core-prim . make-list)
        (g$12388$F0M core-prim . last-pair)
        (g$12387$F0M core-prim . load-r5rs)
        (g$12386$F0M core-prim . license)
        (g$12385$F0M core-prim . stacktrace)
        (g$11809$F0M core-prim . ironscheme-build)
        (g$12384$F0M core-prim . define-clr-class-internal)
        (g$12383$F0M core-prim . clr-field-set!-internal)
        (g$12382$F0M core-prim . clr-field-get-internal)
        (g$12381$F0M core-prim . clr-cast-internal)
        (g$12380$F0M core-prim . clr-call-internal)
        (g$12379$F0M core-prim . clr-new-internal)
        (g$12378$F0M core-prim . clr-new-array-internal)
        (g$12377$F0M core-prim . clr-is-internal)
        (g$12376$F0M core-prim . clr-reference-internal)
        (g$12375$F0M core-prim . clr-using-internal)
        (g$12374$F0M core-prim . clr-clear-usings-internal)
        (g$8827$F0M core-prim . syntax-error)
        (g$8698$F0M core-prim . syntax-dispatch)
        (g$12373$F0M core-prim . compile-core)
        (g$12372$F0M core-prim . eval-core)
        (g$12371$F0M core-prim . set-symbol-value!)
        (g$12370$F0M core-prim . symbol-value)
        (g$12369$F0M core-prim . ungensym)
        (g$12368$F0M core-prim . gensym)
        (g$12367$F0M core-prim . void)
        (g$12366$F0M core-prim . load-serialized-library)
        (g$12365$F0M core-prim . serialize-library)
        (g$11811$F0M core-prim . compile-system-libraries)
        (g$11813$F0M core-prim . compile->closure)
        (g$11812$F0M core-prim . compile)
        (g$11808$F0M core-prim . load)
        (g$8836$F0M core-prim . interaction-environment)
        (g$12364$F0M core-prim . char-ready?)
        (g$12363$F0M core-prim . string-upcase)
        (g$12362$F0M core-prim . string-titlecase)
        (g$12361$F0M core-prim . string-normalize-nfkd)
        (g$12360$F0M core-prim . string-normalize-nfkc)
        (g$12359$F0M core-prim . string-normalize-nfd)
        (g$12358$F0M core-prim . string-normalize-nfc)
        (g$12357$F0M core-prim . string-foldcase)
        (g$12356$F0M core-prim . string-downcase)
        (g$6928$F0M core-prim . string-ci>?)
        (g$6930$F0M core-prim . string-ci>=?)
        (g$6926$F0M core-prim . string-ci=?)
        (g$6927$F0M core-prim . string-ci<?)
        (g$6929$F0M core-prim . string-ci<=?)
        (g$12355$F0M core-prim . char-whitespace?)
        (g$12354$F0M core-prim . char-upper-case?)
        (g$12353$F0M core-prim . char-title-case?)
        (g$12352$F0M core-prim . char-numeric?)
        (g$12351$F0M core-prim . char-lower-case?)
        (g$12350$F0M core-prim . char-general-category)
        (g$12349$F0M core-prim . char-upcase)
        (g$12348$F0M core-prim . char-titlecase)
        (g$12347$F0M core-prim . char-foldcase)
        (g$12346$F0M core-prim . char-downcase)
        (g$6967$F0M core-prim . char-ci>?)
        (g$6969$F0M core-prim . char-ci>=?)
        (g$6965$F0M core-prim . char-ci=?)
        (g$6966$F0M core-prim . char-ci<?)
        (g$6968$F0M core-prim . char-ci<=?)
        (g$12345$F0M core-prim . char-alphabetic?)
        (g$8435$F0M core-prim . variable-transformer-procedure)
        (g$8434$F0M core-prim . variable-transformer?)
        (g$8433$F0M core-prim . make-variable-transformer)
        (g$8831$F0M core-prim . identifier?)
        (g$8820$F0M core-prim . generate-temporaries)
        (g$8821$F0M core-prim . free-identifier=?)
        (g$8833$F0M core-prim . syntax->datum)
        (g$8832$F0M core-prim . datum->syntax)
        (g$8822$F0M core-prim . bound-identifier=?)
        (g$12344$F0M core-prim . record-type-descriptor?)
        (g$12343$F0M core-prim . record-predicate)
        (g$12342$F0M core-prim . record-mutator)
        (g$12341$F0M core-prim . record-constructor)
        (g$12340$F0M core-prim . record-accessor)
        (g$12339$F0M core-prim . make-record-type-descriptor)
        (g$12338$F0M core-prim . make-record-constructor-descriptor)
        (g$12337$F0M core-prim . record?)
        (g$12336$F0M core-prim . record-type-uid)
        (g$12335$F0M core-prim . record-type-sealed?)
        (g$12334$F0M core-prim . record-type-parent)
        (g$12333$F0M core-prim . record-type-opaque?)
        (g$12332$F0M core-prim . record-type-name)
        (g$12331$F0M core-prim . record-type-generative?)
        (g$12330$F0M core-prim . record-type-field-names)
        (g$12329$F0M core-prim . record-rtd)
        (g$12328$F0M core-prim . record-field-mutable?)
        (g$6503$F0M core-prim . delete-file)
        (g$6502$F0M core-prim . file-exists?)
        (g$12327$F0M core-prim . vector-sort!)
        (g$12326$F0M core-prim . vector-sort)
        (g$6866$F0M core-prim . list-sort)
        (g$12325$F0M core-prim . symbol-hash)
        (g$12324$F0M core-prim . string-ci-hash)
        (g$12323$F0M core-prim . string-hash)
        (g$12322$F0M core-prim . equal-hash)
        (g$12321$F0M core-prim . hashtable-equivalence-function)
        (g$12320$F0M core-prim . make-hashtable)
        (g$12319$F0M core-prim . hashtable-hash-function)
        (g$6470$F0M core-prim . make-eqv-hashtable)
        (g$6469$F0M core-prim . make-eq-hashtable)
        (g$12318$F0M core-prim . hashtable?)
        (g$6476$F0M core-prim . hashtable-update!)
        (g$6471$F0M core-prim . hashtable-size)
        (g$6473$F0M core-prim . hashtable-set!)
        (g$6472$F0M core-prim . hashtable-ref)
        (g$12317$F0M core-prim . hashtable-mutable?)
        (g$12316$F0M core-prim . hashtable-keys)
        (g$12315$F0M core-prim . hashtable-entries)
        (g$6474$F0M core-prim . hashtable-delete!)
        (g$12314$F0M core-prim . hashtable-copy)
        (g$6475$F0M core-prim . hashtable-contains?)
        (g$6477$F0M core-prim . hashtable-clear!)
        (g$7359$F0M core-prim . call-with-output-file)
        (g$7358$F0M core-prim . call-with-input-file)
        (g$12313$F0M core-prim . write-char)
        (g$12312$F0M core-prim . write)
        (g$7357$F0M core-prim . with-output-to-file)
        (g$7356$F0M core-prim . with-input-from-file)
        (g$12311$F0M core-prim . read-char)
        (g$12310$F0M core-prim . read)
        (g$12309$F0M core-prim . peek-char)
        (g$12308$F0M core-prim . open-output-file)
        (g$12307$F0M core-prim . open-input-file)
        (g$12306$F0M core-prim . newline)
        (g$12305$F0M core-prim . display)
        (g$12304$F0M core-prim . close-output-port)
        (g$12303$F0M core-prim . close-input-port)
        (g$12302$F0M core-prim . eof-object?)
        (g$12301$F0M core-prim . eof-object)
        (g$12300$F0M core-prim . current-error-port)
        (g$12299$F0M core-prim . current-output-port)
        (g$12298$F0M core-prim . current-input-port)
        (g$12297$F0M core-prim . output-port?)
        (g$12296$F0M core-prim . input-port?)
        (g$12295$F0M core-prim . utf-8-codec)
        (g$12294$F0M core-prim . utf-16-codec)
        (g$12293$F0M core-prim . transcoder-error-handling-mode)
        (g$12292$F0M core-prim . transcoder-eol-style)
        (g$12291$F0M core-prim . transcoder-codec)
        (g$12290$F0M core-prim . transcoded-port)
        (g$12289$F0M core-prim . textual-port?)
        (g$12288$F0M core-prim . string->bytevector)
        (g$12287$F0M core-prim . standard-output-port)
        (g$12286$F0M core-prim . standard-input-port)
        (g$12285$F0M core-prim . standard-error-port)
        (g$12284$F0M core-prim . set-port-position!)
        (g$12283$F0M core-prim . put-u8)
        (g$12282$F0M core-prim . put-string)
        (g$12281$F0M core-prim . put-datum)
        (g$12280$F0M core-prim . put-char)
        (g$12279$F0M core-prim . put-bytevector)
        (g$7332$F0M core-prim . port?)
        (g$12278$F0M core-prim . port-transcoder)
        (g$12277$F0M core-prim . port-position)
        (g$12276$F0M core-prim . port-has-set-port-position!?)
        (g$12275$F0M core-prim . port-has-port-position?)
        (g$12274$F0M core-prim . port-eof?)
        (g$12273$F0M core-prim . output-port-buffer-mode)
        (g$7331$F0M core-prim . open-string-output-port)
        (g$12272$F0M core-prim . open-string-input-port)
        (g$12271$F0M core-prim . open-file-output-port)
        (g$12270$F0M core-prim . open-file-input/output-port)
        (g$12269$F0M core-prim . open-file-input-port)
        (g$12268$F0M core-prim . open-bytevector-output-port)
        (g$12267$F0M core-prim . open-bytevector-input-port)
        (g$12266$F0M core-prim . native-transcoder)
        (g$12265$F0M core-prim . native-eol-style)
        (g$12264$F0M core-prim . make-transcoder)
        (g$12263$F0M core-prim . latin-1-codec)
        (g$7188$F0M core-prim . make-i/o-write-error)
        (g$7174$F0M core-prim . make-i/o-read-error)
        (g$7293$F0M core-prim . make-i/o-port-error)
        (g$7203$F0M core-prim . make-i/o-invalid-position-error)
        (g$7220$F0M core-prim . make-i/o-filename-error)
        (g$7236$F0M core-prim . make-i/o-file-protection-error)
        (g$7250$F0M core-prim . make-i/o-file-is-read-only-error)
        (g$7278$F0M core-prim . make-i/o-file-does-not-exist-error)
        (g$7264$F0M core-prim . make-i/o-file-already-exists-error)
        (g$7160$F0M core-prim . make-i/o-error)
        (g$7324$F0M core-prim . make-i/o-encoding-error)
        (g$7309$F0M core-prim . make-i/o-decoding-error)
        (g$12262$F0M core-prim . make-custom-textual-output-port)
        (g$12261$F0M core-prim . make-custom-textual-input/output-port)
        (g$12260$F0M core-prim . make-custom-textual-input-port)
        (g$12259$F0M core-prim . make-custom-binary-output-port)
        (g$12258$F0M core-prim . make-custom-binary-input/output-port)
        (g$12257$F0M core-prim . make-custom-binary-input-port)
        (g$12256$F0M core-prim . make-bytevector)
        (g$12255$F0M core-prim . lookahead-u8)
        (g$12254$F0M core-prim . lookahead-char)
        (g$7189$F0M core-prim . i/o-write-error?)
        (g$7175$F0M core-prim . i/o-read-error?)
        (g$7295$F0M core-prim . i/o-port-error?)
        (g$7205$F0M core-prim . i/o-invalid-position-error?)
        (g$7206$F0M core-prim . i/o-error-position)
        (g$7222$F0M core-prim . i/o-filename-error?)
        (g$7237$F0M core-prim . i/o-file-protection-error?)
        (g$7251$F0M core-prim . i/o-file-is-read-only-error?)
        (g$7279$F0M core-prim . i/o-file-does-not-exist-error?)
        (g$7265$F0M core-prim . i/o-file-already-exists-error?)
        (g$7161$F0M core-prim . i/o-error?)
        (g$7296$F0M core-prim . i/o-error-port)
        (g$7223$F0M core-prim . i/o-error-filename)
        (g$7326$F0M core-prim . i/o-encoding-error?)
        (g$7327$F0M core-prim . i/o-encoding-error-char)
        (g$7310$F0M core-prim . i/o-decoding-error?)
        (g$12253$F0M core-prim . get-u8)
        (g$12252$F0M core-prim . get-string-n!)
        (g$12251$F0M core-prim . get-string-n)
        (g$12250$F0M core-prim . get-string-all)
        (g$12249$F0M core-prim . get-line)
        (g$12248$F0M core-prim . get-datum)
        (g$12247$F0M core-prim . get-char)
        (g$12246$F0M core-prim . get-bytevector-some)
        (g$12245$F0M core-prim . get-bytevector-n!)
        (g$12244$F0M core-prim . get-bytevector-n)
        (g$12243$F0M core-prim . get-bytevector-all)
        (g$12242$F0M core-prim . flush-output-port)
        (g$12241$F0M core-prim . close-port)
        (g$7333$F0M core-prim . call-with-string-output-port)
        (g$12240$F0M core-prim . call-with-port)
        (g$12239$F0M core-prim . call-with-bytevector-output-port)
        (g$12238$F0M core-prim . bytevector->string)
        (g$12237$F0M core-prim . buffer-mode?)
        (g$12236$F0M core-prim . binary-port?)
        (g$8811$F0M core-prim . scheme-report-environment)
        (g$6846$F0M core-prim . quotient)
        (g$8810$F0M core-prim . null-environment)
        (g$6847$F0M core-prim . remainder)
        (g$6848$F0M core-prim . modulo)
        (g$12235$F0M core-prim . inexact->exact)
        (g$6850$F0M core-prim . force)
        (g$12234$F0M core-prim . exact->inexact)
        (g$12233$F0M core-prim . exit)
        (g$11805$F0M core-prim . command-line)
        (g$12232$F0M core-prim . string-fill!)
        (g$12231$F0M core-prim . string-set!)
        (g$12230$F0M core-prim . set-cdr!)
        (g$12229$F0M core-prim . set-car!)
        (g$5858$F0M core-prim . remove)
        (g$5859$F0M core-prim . remv)
        (g$5841$F0M core-prim . remp)
        (g$5860$F0M core-prim . remq)
        (g$5840$F0M core-prim . partition)
        (g$5848$F0M core-prim . memv)
        (g$5847$F0M core-prim . memq)
        (g$5850$F0M core-prim . memp)
        (g$5849$F0M core-prim . member)
        (g$5854$F0M core-prim . exists)
        (g$5853$F0M core-prim . for-all)
        (g$5857$F0M core-prim . fold-right)
        (g$5856$F0M core-prim . fold-left)
        (g$5839$F0M core-prim . find)
        (g$5842$F0M core-prim . filter)
        (g$5855$F0M core-prim . cons*)
        (g$5844$F0M core-prim . assv)
        (g$5843$F0M core-prim . assq)
        (g$5846$F0M core-prim . assp)
        (g$5845$F0M core-prim . assoc)
        (g$12228$F0M core-prim . with-exception-handler)
        (g$12227$F0M core-prim . raise-continuable)
        (g$12226$F0M core-prim . raise)
        (g$8813$F0M core-prim . eval)
        (g$8809$F0M core-prim . environment)
        (g$7417$F0M core-prim . make-enumeration)
        (g$7424$F0M core-prim . enum-set=?)
        (g$7418$F0M core-prim . enum-set-universe)
        (g$7425$F0M core-prim . enum-set-union)
        (g$7423$F0M core-prim . enum-set-subset?)
        (g$7429$F0M core-prim . enum-set-projection)
        (g$7422$F0M core-prim . enum-set-member?)
        (g$7426$F0M core-prim . enum-set-intersection)
        (g$7419$F0M core-prim . enum-set-indexer)
        (g$7427$F0M core-prim . enum-set-difference)
        (g$7420$F0M core-prim . enum-set-constructor)
        (g$7428$F0M core-prim . enum-set-complement)
        (g$7421$F0M core-prim . enum-set->list)
        (g$6757$F0M core-prim . who-condition?)
        (g$6668$F0M core-prim . warning?)
        (g$6710$F0M core-prim . violation?)
        (g$6834$F0M core-prim . undefined-violation?)
        (g$6818$F0M core-prim . syntax-violation?)
        (g$6820$F0M core-prim . syntax-violation-subform)
        (g$6819$F0M core-prim . syntax-violation-form)
        (g$8830$F0M core-prim . syntax-violation)
        (g$12225$F0M core-prim . simple-conditions)
        (g$6682$F0M core-prim . serious-condition?)
        (g$6772$F0M core-prim . non-continuable-violation?)
        (g$6653$F0M core-prim . message-condition?)
        (g$6755$F0M core-prim . make-who-condition)
        (g$6667$F0M core-prim . make-warning)
        (g$6709$F0M core-prim . make-violation)
        (g$6833$F0M core-prim . make-undefined-violation)
        (g$6815$F0M core-prim . make-syntax-violation)
        (g$6681$F0M core-prim . make-serious-condition)
        (g$6771$F0M core-prim . make-non-continuable-violation)
        (g$6651$F0M core-prim . make-message-condition)
        (g$6799$F0M core-prim . make-lexical-violation)
        (g$6738$F0M core-prim . make-irritants-condition)
        (g$6785$F0M core-prim . make-implementation-restriction-violation)
        (g$6695$F0M core-prim . make-error)
        (g$6723$F0M core-prim . make-assertion-violation)
        (g$6800$F0M core-prim . lexical-violation?)
        (g$6740$F0M core-prim . irritants-condition?)
        (g$6786$F0M core-prim . implementation-restriction-violation?)
        (g$6696$F0M core-prim . error?)
        (g$6758$F0M core-prim . condition-who)
        (g$12224$F0M core-prim . condition-predicate)
        (g$6654$F0M core-prim . condition-message)
        (g$6741$F0M core-prim . condition-irritants)
        (g$12223$F0M core-prim . condition-accessor)
        (g$12222$F0M core-prim . condition)
        (g$6724$F0M core-prim . assertion-violation?)
        (g$12221$F0M core-prim . condition?)
        (g$12220$F0M core-prim . utf32->string)
        (g$12219$F0M core-prim . utf16->string)
        (g$12218$F0M core-prim . utf8->string)
        (g$12217$F0M core-prim . uint-list->bytevector)
        (g$12216$F0M core-prim . u8-list->bytevector)
        (g$12215$F0M core-prim . string->utf8)
        (g$12214$F0M core-prim . string->utf32)
        (g$12213$F0M core-prim . string->utf16)
        (g$12212$F0M core-prim . sint-list->bytevector)
        (g$6509$F0M core-prim . native-endianness)
        (g$12211$F0M core-prim . bytevector?)
        (g$12210$F0M core-prim . bytevector=?)
        (g$12209$F0M core-prim . bytevector-uint-set!)
        (g$12208$F0M core-prim . bytevector-uint-ref)
        (g$12207$F0M core-prim . bytevector-u8-set!)
        (g$12206$F0M core-prim . bytevector-u8-ref)
        (g$6530$F0M core-prim . bytevector-u64-set!)
        (g$6526$F0M core-prim . bytevector-u64-ref)
        (g$6532$F0M core-prim . bytevector-u64-native-set!)
        (g$6528$F0M core-prim . bytevector-u64-native-ref)
        (g$6522$F0M core-prim . bytevector-u32-set!)
        (g$6518$F0M core-prim . bytevector-u32-ref)
        (g$6524$F0M core-prim . bytevector-u32-native-set!)
        (g$6520$F0M core-prim . bytevector-u32-native-ref)
        (g$6514$F0M core-prim . bytevector-u16-set!)
        (g$6510$F0M core-prim . bytevector-u16-ref)
        (g$6516$F0M core-prim . bytevector-u16-native-set!)
        (g$6512$F0M core-prim . bytevector-u16-native-ref)
        (g$12205$F0M core-prim . bytevector-sint-set!)
        (g$12204$F0M core-prim . bytevector-sint-ref)
        (g$12203$F0M core-prim . bytevector-s8-set!)
        (g$12202$F0M core-prim . bytevector-s8-ref)
        (g$6531$F0M core-prim . bytevector-s64-set!)
        (g$6527$F0M core-prim . bytevector-s64-ref)
        (g$6533$F0M core-prim . bytevector-s64-native-set!)
        (g$6529$F0M core-prim . bytevector-s64-native-ref)
        (g$6523$F0M core-prim . bytevector-s32-set!)
        (g$6519$F0M core-prim . bytevector-s32-ref)
        (g$6525$F0M core-prim . bytevector-s32-native-set!)
        (g$6521$F0M core-prim . bytevector-s32-native-ref)
        (g$6515$F0M core-prim . bytevector-s16-set!)
        (g$6511$F0M core-prim . bytevector-s16-ref)
        (g$6517$F0M core-prim . bytevector-s16-native-set!)
        (g$6513$F0M core-prim . bytevector-s16-native-ref)
        (g$12201$F0M core-prim . bytevector-length)
        (g$12200$F0M core-prim . bytevector-ieee-single-set!)
        (g$12199$F0M core-prim . bytevector-ieee-single-ref)
        (g$6536$F0M core-prim . bytevector-ieee-single-native-set!)
        (g$6534$F0M core-prim . bytevector-ieee-single-native-ref)
        (g$12198$F0M core-prim . bytevector-ieee-double-set!)
        (g$12197$F0M core-prim . bytevector-ieee-double-ref)
        (g$6537$F0M core-prim . bytevector-ieee-double-native-set!)
        (g$6535$F0M core-prim . bytevector-ieee-double-native-ref)
        (g$12196$F0M core-prim . bytevector-fill!)
        (g$12195$F0M core-prim . bytevector-copy!)
        (g$12194$F0M core-prim . bytevector-copy)
        (g$12193$F0M core-prim . bytevector->uint-list)
        (g$12192$F0M core-prim . bytevector->u8-list)
        (g$12191$F0M core-prim . bytevector->sint-list)
        (g$7146$F0M core-prim . no-nans-violation?)
        (g$7132$F0M core-prim . no-infinities-violation?)
        (g$7145$F0M core-prim . make-no-nans-violation)
        (g$7131$F0M core-prim . make-no-infinities-violation)
        (g$12190$F0M core-prim . real->flonum)
        (g$12189$F0M core-prim . flzero?)
        (g$12188$F0M core-prim . fltruncate)
        (g$12187$F0M core-prim . fltan)
        (g$12186$F0M core-prim . flsqrt)
        (g$12185$F0M core-prim . flsin)
        (g$12184$F0M core-prim . flround)
        (g$12183$F0M core-prim . flpositive?)
        (g$12182$F0M core-prim . flonum?)
        (g$12181$F0M core-prim . flodd?)
        (g$12180$F0M core-prim . flnumerator)
        (g$12179$F0M core-prim . flnegative?)
        (g$12178$F0M core-prim . flnan?)
        (g$12177$F0M core-prim . flmod0)
        (g$12176$F0M core-prim . flmod)
        (g$12175$F0M core-prim . flmin)
        (g$12174$F0M core-prim . flmax)
        (g$12173$F0M core-prim . fllog)
        (g$12172$F0M core-prim . flinteger?)
        (g$12171$F0M core-prim . flinfinite?)
        (g$12170$F0M core-prim . flfloor)
        (g$12169$F0M core-prim . flfinite?)
        (g$12168$F0M core-prim . flexpt)
        (g$12167$F0M core-prim . flexp)
        (g$12166$F0M core-prim . fleven?)
        (g$12165$F0M core-prim . fldiv0-and-mod0)
        (g$12164$F0M core-prim . fldiv0)
        (g$12163$F0M core-prim . fldiv-and-mod)
        (g$12162$F0M core-prim . fldiv)
        (g$12161$F0M core-prim . fldenominator)
        (g$12160$F0M core-prim . flcos)
        (g$12159$F0M core-prim . flceiling)
        (g$12158$F0M core-prim . flatan)
        (g$12157$F0M core-prim . flasin)
        (g$12156$F0M core-prim . flacos)
        (g$12155$F0M core-prim . flabs)
        (g$12154$F0M core-prim . fl>?)
        (g$12153$F0M core-prim . fl>=?)
        (g$12152$F0M core-prim . fl=?)
        (g$12151$F0M core-prim . fl<?)
        (g$12150$F0M core-prim . fl<=?)
        (g$12149$F0M core-prim . fl/)
        (g$12148$F0M core-prim . fl-)
        (g$12147$F0M core-prim . fl+)
        (g$12146$F0M core-prim . fl*)
        (g$12145$F0M core-prim . fixnum->flonum)
        (g$12144$F0M core-prim . fxzero?)
        (g$12143$F0M core-prim . fxxor)
        (g$7077$F0M core-prim . fxrotate-bit-field)
        (g$12142$F0M core-prim . fxreverse-bit-field)
        (g$12141$F0M core-prim . fxpositive?)
        (g$12140$F0M core-prim . fxodd?)
        (g$12139$F0M core-prim . fxnot)
        (g$12138$F0M core-prim . fxnegative?)
        (g$12137$F0M core-prim . fxmod0)
        (g$12136$F0M core-prim . fxmod)
        (g$12135$F0M core-prim . fxmin)
        (g$12134$F0M core-prim . fxmax)
        (g$12133$F0M core-prim . fxlength)
        (g$12132$F0M core-prim . fxior)
        (g$7071$F0M core-prim . fxif)
        (g$12131$F0M core-prim . fxfirst-bit-set)
        (g$12130$F0M core-prim . fxeven?)
        (g$12129$F0M core-prim . fxdiv0-and-mod0)
        (g$12128$F0M core-prim . fxdiv0)
        (g$12127$F0M core-prim . fxdiv-and-mod)
        (g$12126$F0M core-prim . fxdiv)
        (g$7074$F0M core-prim . fxcopy-bit-field)
        (g$7072$F0M core-prim . fxcopy-bit)
        (g$12125$F0M core-prim . fxbit-set?)
        (g$7073$F0M core-prim . fxbit-field)
        (g$12124$F0M core-prim . fxbit-count)
        (g$7076$F0M core-prim . fxarithmetic-shift-right)
        (g$7075$F0M core-prim . fxarithmetic-shift-left)
        (g$12123$F0M core-prim . fxarithmetic-shift)
        (g$12122$F0M core-prim . fxand)
        (g$12121$F0M core-prim . fx>?)
        (g$12120$F0M core-prim . fx>=?)
        (g$12119$F0M core-prim . fx=?)
        (g$12118$F0M core-prim . fx<?)
        (g$12117$F0M core-prim . fx<=?)
        (g$12116$F0M core-prim . fx-/carry)
        (g$12115$F0M core-prim . fx-)
        (g$12114$F0M core-prim . fx+/carry)
        (g$12113$F0M core-prim . fx+)
        (g$12112$F0M core-prim . fx*/carry)
        (g$12111$F0M core-prim . fx*)
        (g$12110$F0M core-prim . greatest-fixnum)
        (g$12109$F0M core-prim . least-fixnum)
        (g$12108$F0M core-prim . fixnum-width)
        (g$12107$F0M core-prim . fixnum?)
        (g$7029$F0M core-prim . bitwise-rotate-bit-field)
        (g$12106$F0M core-prim . bitwise-reverse-bit-field)
        (g$12105$F0M core-prim . bitwise-length)
        (g$7023$F0M core-prim . bitwise-if)
        (g$12104$F0M core-prim . bitwise-first-bit-set)
        (g$7026$F0M core-prim . bitwise-copy-bit-field)
        (g$7024$F0M core-prim . bitwise-copy-bit)
        (g$12103$F0M core-prim . bitwise-bit-set?)
        (g$12102$F0M core-prim . bitwise-bit-field)
        (g$12101$F0M core-prim . bitwise-bit-count)
        (g$12100$F0M core-prim . bitwise-xor)
        (g$12099$F0M core-prim . bitwise-ior)
        (g$12098$F0M core-prim . bitwise-and)
        (g$12097$F0M core-prim . bitwise-not)
        (g$7028$F0M core-prim . bitwise-arithmetic-shift-right)
        (g$7027$F0M core-prim . bitwise-arithmetic-shift-left)
        (g$12096$F0M core-prim . bitwise-arithmetic-shift)
        (g$12095$F0M core-prim . zero?)
        (g$12094$F0M core-prim . vector?)
        (g$12093$F0M core-prim . vector-set!)
        (g$12092$F0M core-prim . vector-ref)
        (g$12091$F0M core-prim . vector-map)
        (g$12090$F0M core-prim . vector-length)
        (g$12089$F0M core-prim . vector-for-each)
        (g$12088$F0M core-prim . vector-fill!)
        (g$12087$F0M core-prim . vector->list)
        (g$12086$F0M core-prim . vector)
        (g$12085$F0M core-prim . values)
        (g$12084$F0M core-prim . truncate)
        (g$12083$F0M core-prim . tan)
        (g$12082$F0M core-prim . symbol?)
        (g$6018$F0M core-prim . symbol=?)
        (g$12081$F0M core-prim . symbol->string)
        (g$12080$F0M core-prim . substring)
        (g$12079$F0M core-prim . string?)
        (g$6015$F0M core-prim . string>?)
        (g$6017$F0M core-prim . string>=?)
        (g$6013$F0M core-prim . string=?)
        (g$6014$F0M core-prim . string<?)
        (g$6016$F0M core-prim . string<=?)
        (g$12078$F0M core-prim . string-ref)
        (g$12077$F0M core-prim . string-length)
        (g$12076$F0M core-prim . string-for-each)
        (g$12075$F0M core-prim . string-copy)
        (g$12074$F0M core-prim . string-append)
        (g$12073$F0M core-prim . string->symbol)
        (g$12072$F0M core-prim . string->number)
        (g$12071$F0M core-prim . string->list)
        (g$12070$F0M core-prim . string)
        (g$12069$F0M core-prim . sqrt)
        (g$12068$F0M core-prim . sin)
        (g$12067$F0M core-prim . round)
        (g$12066$F0M core-prim . reverse)
        (g$12065$F0M core-prim . real?)
        (g$12064$F0M core-prim . real-valued?)
        (g$12063$F0M core-prim . real-part)
        (g$6059$F0M core-prim . rationalize)
        (g$12062$F0M core-prim . rational?)
        (g$12061$F0M core-prim . rational-valued?)
        (g$12060$F0M core-prim . procedure?)
        (g$12059$F0M core-prim . positive?)
        (g$12058$F0M core-prim . pair?)
        (g$12057$F0M core-prim . odd?)
        (g$12056$F0M core-prim . numerator)
        (g$12055$F0M core-prim . number?)
        (g$12054$F0M core-prim . number->string)
        (g$12053$F0M core-prim . null?)
        (g$12052$F0M core-prim . not)
        (g$12051$F0M core-prim . negative?)
        (g$12050$F0M core-prim . nan?)
        (g$12049$F0M core-prim . min)
        (g$12048$F0M core-prim . max)
        (g$12047$F0M core-prim . map)
        (g$12046$F0M core-prim . make-vector)
        (g$12045$F0M core-prim . make-string)
        (g$12044$F0M core-prim . make-rectangular)
        (g$12043$F0M core-prim . make-polar)
        (g$12042$F0M core-prim . magnitude)
        (g$12041$F0M core-prim . log)
        (g$12040$F0M core-prim . list?)
        (g$12039$F0M core-prim . list-tail)
        (g$12038$F0M core-prim . list-ref)
        (g$12037$F0M core-prim . list->vector)
        (g$12036$F0M core-prim . list->string)
        (g$12035$F0M core-prim . list)
        (g$12034$F0M core-prim . length)
        (g$12033$F0M core-prim . lcm)
        (g$12032$F0M core-prim . integer?)
        (g$12031$F0M core-prim . integer-valued?)
        (g$12030$F0M core-prim . integer->char)
        (g$12029$F0M core-prim . infinite?)
        (g$12028$F0M core-prim . inexact?)
        (g$12027$F0M core-prim . inexact)
        (g$12026$F0M core-prim . imag-part)
        (g$12025$F0M core-prim . gcd)
        (g$12024$F0M core-prim . for-each)
        (g$12023$F0M core-prim . floor)
        (g$12022$F0M core-prim . finite?)
        (g$12021$F0M core-prim . expt)
        (g$12020$F0M core-prim . exp)
        (g$12019$F0M core-prim . exact?)
        (g$12018$F0M core-prim . exact-integer-sqrt)
        (g$12017$F0M core-prim . exact)
        (g$12016$F0M core-prim . even?)
        (g$12015$F0M core-prim . error)
        (g$12014$F0M core-prim . eqv?)
        (g$12013$F0M core-prim . equal?)
        (g$12012$F0M core-prim . eq?)
        (g$12011$F0M core-prim . dynamic-wind)
        (g$12010$F0M core-prim . div0-and-mod0)
        (g$12009$F0M core-prim . mod0)
        (g$12008$F0M core-prim . div0)
        (g$12007$F0M core-prim . div-and-mod)
        (g$12006$F0M core-prim . mod)
        (g$12005$F0M core-prim . div)
        (g$12004$F0M core-prim . denominator)
        (g$12003$F0M core-prim . cos)
        (g$12002$F0M core-prim . cons)
        (g$12001$F0M core-prim . complex?)
        (g$12000$F0M core-prim . char?)
        (g$6056$F0M core-prim . char>?)
        (g$6058$F0M core-prim . char>=?)
        (g$6054$F0M core-prim . char=?)
        (g$6055$F0M core-prim . char<?)
        (g$6057$F0M core-prim . char<=?)
        (g$11999$F0M core-prim . char->integer)
        (g$11998$F0M core-prim . ceiling)
        (g$11997$F0M core-prim . call-with-values)
        (g$11996$F0M core-prim . call/cc)
        (g$11995$F0M core-prim . call-with-current-continuation)
        (g$5978$F0M core-prim . cddddr)
        (g$5977$F0M core-prim . cdddar)
        (g$5976$F0M core-prim . cddadr)
        (g$5975$F0M core-prim . cddaar)
        (g$5974$F0M core-prim . cdaddr)
        (g$5973$F0M core-prim . cdadar)
        (g$5972$F0M core-prim . cdaadr)
        (g$5971$F0M core-prim . cdaaar)
        (g$5970$F0M core-prim . cadddr)
        (g$5969$F0M core-prim . caddar)
        (g$5968$F0M core-prim . cadadr)
        (g$5967$F0M core-prim . cadaar)
        (g$5966$F0M core-prim . caaddr)
        (g$5965$F0M core-prim . caadar)
        (g$5964$F0M core-prim . caaadr)
        (g$5963$F0M core-prim . caaaar)
        (g$5962$F0M core-prim . cdddr)
        (g$5961$F0M core-prim . cddar)
        (g$5960$F0M core-prim . cdadr)
        (g$5959$F0M core-prim . cdaar)
        (g$5958$F0M core-prim . caddr)
        (g$5957$F0M core-prim . cadar)
        (g$5956$F0M core-prim . caadr)
        (g$5955$F0M core-prim . caaar)
        (g$5954$F0M core-prim . cddr)
        (g$5953$F0M core-prim . cdar)
        (g$5952$F0M core-prim . cadr)
        (g$5951$F0M core-prim . caar)
        (g$11994$F0M core-prim . cdr)
        (g$11993$F0M core-prim . car)
        (g$11992$F0M core-prim . boolean?)
        (g$6019$F0M core-prim . boolean=?)
        (g$11991$F0M core-prim . atan)
        (g$11990$F0M core-prim . assertion-violation)
        (g$11989$F0M core-prim . asin)
        (g$11988$F0M core-prim . apply)
        (g$11987$F0M core-prim . append)
        (g$11986$F0M core-prim . angle)
        (g$11985$F0M core-prim . acos)
        (g$11984$F0M core-prim . abs)
        (g$11983$F0M core-prim . /)
        (g$11982$F0M core-prim . *)
        (g$11981$F0M core-prim . -)
        (g$11980$F0M core-prim . +)
        (g$11979$F0M core-prim . >=)
        (g$11978$F0M core-prim . >)
        (g$11977$F0M core-prim . =)
        (g$11976$F0M core-prim . <=)
        (g$11975$F0M core-prim . <)
        (g$11974$F0M core-prim . make-record-printer)
        (g$11973$F0M core-prim . eqv-hash)
        (g$11972$F0M core-prim . reverse!)
        (g$11971$F0M core-prim . deserialize-port)
        (g$11970$F0M core-prim . serialize-port)
        (g$7392$F0M core-prim . enum-set?)
        (g$6849$F0M core-prim . make-promise)
        (g$11807$F0M core-prim . load/args)
        (g$7503$F0M core-prim . printf)
        (g$7504$F0M core-prim . fprintf)
        (g$7505$F0M core-prim . format)
        (g$11969$F0M core-prim . procedure-form)
        (g$11968$F0M core-prim . procedure-environment)
        (g$11967$F0M core-prim . procedure-name)
        (g$11966$F0M core-prim . procedure-arity)
        (g$11965$F0M core-prim . gc-collect)
        (g$11964$F0M core-prim . clr-type?)
        (g$11963$F0M core-prim . get-clr-type)
        (g$11962$F0M core-prim . get-command-line)
        (g$11961$F0M core-prim . vector-append)
        (g$11960$F0M core-prim . vector-filter)
        (g$11959$F0M core-prim . vector-reverse!)
        (g$11958$F0M core-prim . vector-contains?)
        (g$11957$F0M core-prim . vector-index-of)
        (g$11956$F0M core-prim . vector-copy)
        (g$11955$F0M core-prim . vector-binary-search)
        (g$11954$F0M core-prim . string-ci-compare)
        (g$11953$F0M core-prim . string-compare)
        (g$11952$F0M core-prim . string-format)
        (g$11804$F0M core-prim . trace-printer)
        (g$11951$F0M core-prim . make-traced-procedure)
        (g$7525$F0M core-prim . make-traced-macro)
        (g$8826$F0M core-prim . assertion-error)
        (g$11950$F0M core-prim . pmap)
        (g$11949$F0M core-prim . time-it)
        (g$7532$F0M core-prim . make-parameter)
        (g$11948$F0M core-prim . library-locator)
        (g$11947$F0M core-prim . get-library-paths)
        (g$8805$F0M core-prim . environment-bindings)
        (g$8808$F0M core-prim . environment-symbols)
        (g$8804$F0M core-prim . interaction-environment-symbols)
        (g$11946$F0M core-prim . optimization-level)
        (g$7987$F0M core-prim . library-path)
        (g$8812$F0M core-prim . expand)
        (g$11945$F0M $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$11944$F0M $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$11943$F0M $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$11942$F0M $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$11941$F0M $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$11940$F0M
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$11939$F0M
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$11938$F0M
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$11937$F0M
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$11936$F0M $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$11935$F0M
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$11934$F0M $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$11933$F0M $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$11932$F0M $core-rtd &i/o-rtd &i/o-rcd)
        (g$11931$F0M $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$11930$F0M $core-rtd &undefined-rtd &undefined-rcd)
        (g$11929$F0M $core-rtd &syntax-rtd &syntax-rcd)
        (g$11928$F0M $core-rtd &lexical-rtd &lexical-rcd)
        (g$11927$F0M
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$11926$F0M $core-rtd &who-rtd &who-rcd)
        (g$11925$F0M $core-rtd &irritants-rtd &irritants-rcd)
        (g$11924$F0M $core-rtd &assertion-rtd &assertion-rcd)
        (g$11923$F0M $core-rtd &violation-rtd &violation-rcd)
        (g$11922$F0M $core-rtd &error-rtd &error-rcd)
        (g$11921$F0M $core-rtd &serious-rtd &serious-rcd)
        (g$11920$F0M $core-rtd &warning-rtd &warning-rcd)
        (g$11919$F0M $core-rtd &message-rtd &message-rcd)
        (g$11918$F0M $core-rtd &condition-rtd &condition-rcd)
        (g$11917$F0M macro . define-condition-type)
        (g$11916$F0M macro . define-enumeration)
        (g$11915$F0M macro . define-record-type)
        (g$11914$F0M macro . parent-rtd)
        (g$11913$F0M macro . nongenerative)
        (g$11912$F0M macro . opaque)
        (g$11911$F0M macro . sealed)
        (g$11910$F0M macro . protocol)
        (g$11909$F0M macro . parent)
        (g$11908$F0M macro . immutable)
        (g$11907$F0M macro . mutable)
        (g$11906$F0M macro . fields)
        (g$11905$F0M macro . error-handling-mode)
        (g$11904$F0M macro . file-options)
        (g$11903$F0M macro . buffer-mode)
        (g$11902$F0M macro . eol-style)
        (g$11901$F0M macro . guard)
        (g$11900$F0M macro . trace-letrec-syntax)
        (g$11899$F0M macro . trace-let-syntax)
        (g$11898$F0M macro . trace-define-syntax)
        (g$11897$F0M macro . trace-define)
        (g$11896$F0M macro . trace-lambda)
        (g$11895$F0M macro . unsyntax-splicing)
        (g$11894$F0M macro . unsyntax)
        (g$11893$F0M macro . unquote-splicing)
        (g$11892$F0M macro . unquote)
        (g$11891$F0M macro . _)
        (g$11890$F0M macro . else)
        (g$11889$F0M macro . =>)
        (g$11888$F0M macro . ...)
        (g$11887$F0M macro . assert)
        (g$11886$F0M macro . endianness)
        (g$11885$F0M macro . delay)
        (g$11884$F0M macro . time)
        (g$11883$F0M macro . or)
        (g$11882$F0M macro . and)
        (g$11881$F0M macro . do)
        (g$11880$F0M macro . cond)
        (g$11879$F0M macro . let*)
        (g$11878$F0M macro . let)
        (g$11877$F0M macro . identifier-syntax)
        (g$11876$F0M macro . with-syntax)
        (g$11875$F0M macro . quasisyntax)
        (g$11874$F0M macro . quasiquote)
        (g$11873$F0M macro . syntax-rules)
        (g$11872$F0M macro . include-into)
        (g$11871$F0M macro . include)
        (g$11870$F0M macro . define-struct)
        (g$11869$F0M macro . let-values)
        (g$11868$F0M macro . let*-values)
        (g$11867$F0M core-macro . record-constructor-descriptor)
        (g$11866$F0M core-macro . record-type-descriptor)
        (g$11865$F0M core-macro . fluid-let-syntax)
        (g$11864$F0M macro . case)
        (g$11863$F0M macro . parameterize)
        (g$11862$F0M macro . unless)
        (g$11861$F0M macro . when)
        (g$11860$F0M core-macro . if)
        (g$11859$F0M core-macro . letrec*)
        (g$11858$F0M core-macro . letrec)
        (g$11857$F0M core-macro . type-descriptor)
        (g$11856$F0M core-macro . case-lambda)
        (g$11855$F0M core-macro . lambda)
        (g$11854$F0M core-macro . syntax)
        (g$11853$F0M core-macro . syntax-case)
        (g$11852$F0M core-macro . quote)
        (g$11851$F0M core-macro . foreign-call)
        (g$11850$F0M letrec-syntax)
        (g$11849$F0M let-syntax)
        (g$11848$F0M set!)
        (g$11847$F0M export)
        (g$11846$F0M import)
        (g$11845$F0M library)
        (g$11844$F0M begin)
        (g$11843$F0M module)
        (g$11842$F0M define-syntax)
        (g$11841$F0M define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7099$F0M
      'g$12494$F0M
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$12373$F0M)
        (eval-core . g$12372$F0M)
        (set-symbol-value! . g$12371$F0M)
        (symbol-value . g$12370$F0M)
        (gensym . g$12368$F0M)
        (void . g$12367$F0M))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$11179$F0M
     g$trace-printer$11219$F0M
     (g$make-parameter$6563$F0M write))
   (g$command-line$11180$F0M
     g$command-line$11220$F0M
     (g$make-parameter$6563$F0M (get-command-line)))
   (g$local-library-path$11181$F0M
     g$local-library-path$11221$F0M
     (case-lambda
       ((g$filename$11192$F0M)
        (cons
          (g$get-directory-name$5473$F0M g$filename$11192$F0M)
          (g$library-path$7083$F0M)))))
   (g$load/args$11182$F0M
     g$load/args$11222$F0M
     (case-lambda
       ((g$filename$11193$F0M . g$args$11194$F0M)
        (begin
          (apply
            g$load-r6rs-top-level$11189$F0M
            g$filename$11193$F0M
            'load
            g$args$11194$F0M)
          (void)))))
   (g$load$11183$F0M
     g$load$11223$F0M
     (case-lambda
       ((g$filename$11195$F0M)
        (begin
          (apply
            g$load-r6rs-top-level$11189$F0M
            g$filename$11195$F0M
            'load
            (cdr (g$command-line$11180$F0M)))
          (void)))))
   (g$ironscheme-build$11184$F0M
     g$ironscheme-build$11224$F0M
     (case-lambda (() (g$load$11183$F0M '"ironscheme-buildscript.ss"))))
   (g$eval-top-level$11185$F0M
     g$eval-top-level$11225$F0M
     (case-lambda
       ((g$x$11196$F0M)
        (g$eval$11154$F0M
          g$x$11196$F0M
          (g$interaction-environment$11177$F0M)))))
   (g$compile-system-libraries$11186$F0M
     g$compile-system-libraries$11226$F0M
     (case-lambda
       (()
        (g$eval-top-level$11185$F0M
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$11187$F0M
     g$compile$11227$F0M
     (case-lambda
       ((g$filename$11197$F0M)
        (g$load-r6rs-top-level$11189$F0M g$filename$11197$F0M 'compile))))
   (g$compile->closure$11188$F0M
     g$compile->closure$11228$F0M
     (case-lambda
       ((g$filename$11198$F0M)
        (g$load-r6rs-top-level$11189$F0M g$filename$11198$F0M 'closure))))
   (g$load-r6rs-top-level$11189$F0M
     g$load-r6rs-top-level$11229$F0M
     (case-lambda
       ((g$filename$11199$F0M g$how$11200$F0M . g$args$11201$F0M)
        ((case-lambda
           ((g$library-path$11204$F0M g$library-path$11205$F0M)
            ((case-lambda
               ((g$swap$11206$F0M)
                (dynamic-wind
                  g$swap$11206$F0M
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$11207$F0M)
                         ((case-lambda
                            ((g$t$11208$F0M)
                             (if (g$memv$5009$F0M g$t$11208$F0M '(closure))
                               (g$pre-compile-r6rs-top-level$11176$F0M
                                 g$x*$11207$F0M)
                               (if (g$memv$5009$F0M g$t$11208$F0M '(load))
                                 ((case-lambda
                                    ((g$command-line$11211$F0M
                                       g$command-line$11212$F0M)
                                     ((case-lambda
                                        ((g$swap$11213$F0M)
                                         (dynamic-wind
                                           g$swap$11213$F0M
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$11175$F0M
                                                 g$x*$11207$F0M))))
                                           g$swap$11213$F0M)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$11214$F0M)
                                             (begin
                                               (g$command-line$11211$F0M
                                                 g$command-line$11212$F0M)
                                               (set! g$command-line$11212$F0M
                                                 g$t$11214$F0M))))
                                          (g$command-line$11211$F0M)))))))
                                  g$command-line$11180$F0M
                                  (cons
                                    g$filename$11199$F0M
                                    (map (case-lambda
                                           ((g$x$11215$F0M)
                                            (g$format$6459$F0M
                                              '"~a"
                                              g$x$11215$F0M)))
                                         g$args$11201$F0M)))
                                 (if (g$memv$5009$F0M g$t$11208$F0M '(compile))
                                   (begin
                                     (g$compile-r6rs-top-level$11175$F0M
                                       g$x*$11207$F0M)
                                     (g$serialize-all$7087$F0M
                                       serialize-library
                                       g$compile-core-expr$6810$F0M))
                                   (if '#f '#f (void)))))))
                          g$how$11200$F0M)))
                      (g$with-input-from-file$6286$F0M
                        g$filename$11199$F0M
                        (case-lambda
                          (()
                           ((letrec ((g$f$11216$F0M
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$11217$F0M)
                                              (if (eof-object? g$x$11217$F0M)
                                                '()
                                                (cons
                                                  g$x$11217$F0M
                                                  (g$f$11216$F0M)))))
                                           (read-annotated))))))
                              g$f$11216$F0M))))))))
                  g$swap$11206$F0M)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$11218$F0M)
                    (begin
                      (g$library-path$11204$F0M g$library-path$11205$F0M)
                      (set! g$library-path$11205$F0M g$t$11218$F0M))))
                 (g$library-path$11204$F0M)))))))
         g$library-path$7083$F0M
         (g$local-library-path$11181$F0M g$filename$11199$F0M)))))
   (g$fo$11190$F0M
     g$fo$11230$F0M
     (g$make-enumeration$6421$F0M '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$7088$F0M load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$11191$F0M)
         (if (g$serious-condition?$5735$F0M g$ex$11191$F0M)
           (raise g$ex$11191$F0M)
           (begin (display g$ex$11191$F0M) (newline))))))
    (set-symbol-value! 'load g$load$11183$F0M)
    (set-symbol-value! 'compile g$compile$11187$F0M)
    (set-symbol-value! 'compile->closure g$compile->closure$11188$F0M)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$11185$F0M)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$11145$F0M)
    (set-symbol-value! 'expanded2core g$expanded->core$6809$F0M)
    (set-symbol-value! 'trace-printer g$trace-printer$11179$F0M)
    (g$file-options-constructor$6564$F0M
      (g$enum-set-constructor$6424$F0M g$fo$11190$F0M))
    (g$library-path$7083$F0M (get-library-paths))))

