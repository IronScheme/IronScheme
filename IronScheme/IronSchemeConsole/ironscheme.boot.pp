;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (ironscheme lists)
  ((g$find$4889$1Z2PAY
     g$find$5000$1Z2PAY
     (case-lambda
       ((g$proc$4911$1Z2PAY g$l$4912$1Z2PAY)
        (if (null? g$l$4912$1Z2PAY)
          '#f
          ((case-lambda
             ((g$e$4913$1Z2PAY g$r$4914$1Z2PAY g$proc$4915$1Z2PAY)
              (if (g$proc$4915$1Z2PAY g$e$4913$1Z2PAY)
                g$e$4913$1Z2PAY
                (g$find$4889$1Z2PAY g$proc$4915$1Z2PAY g$r$4914$1Z2PAY))))
           (car g$l$4912$1Z2PAY)
           (cdr g$l$4912$1Z2PAY)
           g$proc$4911$1Z2PAY)))))
   (g$partition$4890$1Z2PAY
     g$partition$5001$1Z2PAY
     (case-lambda
       ((g$proc$4916$1Z2PAY g$l$4917$1Z2PAY)
        ((letrec ((g$f$4918$1Z2PAY
                    (case-lambda
                      ((g$l$4919$1Z2PAY g$a$4920$1Z2PAY g$b$4921$1Z2PAY)
                       (if (null? g$l$4919$1Z2PAY)
                         (values
                           (reverse! g$a$4920$1Z2PAY)
                           (reverse! g$b$4921$1Z2PAY))
                         ((case-lambda
                            ((g$e$4922$1Z2PAY)
                             (if (g$proc$4916$1Z2PAY g$e$4922$1Z2PAY)
                               (g$f$4918$1Z2PAY
                                 (cdr g$l$4919$1Z2PAY)
                                 (cons g$e$4922$1Z2PAY g$a$4920$1Z2PAY)
                                 g$b$4921$1Z2PAY)
                               (g$f$4918$1Z2PAY
                                 (cdr g$l$4919$1Z2PAY)
                                 g$a$4920$1Z2PAY
                                 (cons g$e$4922$1Z2PAY g$b$4921$1Z2PAY)))))
                          (car g$l$4919$1Z2PAY)))))))
           g$f$4918$1Z2PAY)
         g$l$4917$1Z2PAY
         '()
         '()))))
   (g$remp$4891$1Z2PAY
     g$remp$5002$1Z2PAY
     (case-lambda
       ((g$proc$4923$1Z2PAY g$l$4924$1Z2PAY)
        ((letrec ((g$f$4925$1Z2PAY
                    (case-lambda
                      ((g$l$4926$1Z2PAY g$a$4927$1Z2PAY)
                       (if (null? g$l$4926$1Z2PAY)
                         (reverse! g$a$4927$1Z2PAY)
                         ((case-lambda
                            ((g$e$4928$1Z2PAY)
                             (if (g$proc$4923$1Z2PAY g$e$4928$1Z2PAY)
                               (g$f$4925$1Z2PAY
                                 (cdr g$l$4926$1Z2PAY)
                                 g$a$4927$1Z2PAY)
                               (g$f$4925$1Z2PAY
                                 (cdr g$l$4926$1Z2PAY)
                                 (cons g$e$4928$1Z2PAY g$a$4927$1Z2PAY)))))
                          (car g$l$4926$1Z2PAY)))))))
           g$f$4925$1Z2PAY)
         g$l$4924$1Z2PAY
         '()))))
   (g$filter$4892$1Z2PAY
     g$filter$5003$1Z2PAY
     (case-lambda
       ((g$proc$4929$1Z2PAY g$l$4930$1Z2PAY)
        ((letrec ((g$f$4931$1Z2PAY
                    (case-lambda
                      ((g$l$4932$1Z2PAY g$a$4933$1Z2PAY)
                       (if (null? g$l$4932$1Z2PAY)
                         (reverse! g$a$4933$1Z2PAY)
                         ((case-lambda
                            ((g$e$4934$1Z2PAY)
                             (if (g$proc$4929$1Z2PAY g$e$4934$1Z2PAY)
                               (g$f$4931$1Z2PAY
                                 (cdr g$l$4932$1Z2PAY)
                                 (cons g$e$4934$1Z2PAY g$a$4933$1Z2PAY))
                               (g$f$4931$1Z2PAY
                                 (cdr g$l$4932$1Z2PAY)
                                 g$a$4933$1Z2PAY))))
                          (car g$l$4932$1Z2PAY)))))))
           g$f$4931$1Z2PAY)
         g$l$4930$1Z2PAY
         '()))))
   (g$assq$4893$1Z2PAY
     g$assq$5004$1Z2PAY
     (case-lambda
       ((g$obj$4935$1Z2PAY g$lst$4936$1Z2PAY)
        (if (null? g$lst$4936$1Z2PAY)
          '#f
          ((case-lambda
             ((g$obj$4937$1Z2PAY g$t$4938$1Z2PAY g$r$4939$1Z2PAY)
              (if (eq? g$obj$4937$1Z2PAY (car g$t$4938$1Z2PAY))
                g$t$4938$1Z2PAY
                (g$assq$4893$1Z2PAY g$obj$4937$1Z2PAY g$r$4939$1Z2PAY))))
           g$obj$4935$1Z2PAY
           (car g$lst$4936$1Z2PAY)
           (cdr g$lst$4936$1Z2PAY))))))
   (g$assv$4894$1Z2PAY
     g$assv$5005$1Z2PAY
     (case-lambda
       ((g$obj$4940$1Z2PAY g$lst$4941$1Z2PAY)
        (if (null? g$lst$4941$1Z2PAY)
          '#f
          ((case-lambda
             ((g$obj$4942$1Z2PAY g$t$4943$1Z2PAY g$r$4944$1Z2PAY)
              (if (eqv? g$obj$4942$1Z2PAY (car g$t$4943$1Z2PAY))
                g$t$4943$1Z2PAY
                (g$assv$4894$1Z2PAY g$obj$4942$1Z2PAY g$r$4944$1Z2PAY))))
           g$obj$4940$1Z2PAY
           (car g$lst$4941$1Z2PAY)
           (cdr g$lst$4941$1Z2PAY))))))
   (g$assoc$4895$1Z2PAY
     g$assoc$5006$1Z2PAY
     (case-lambda
       ((g$obj$4945$1Z2PAY g$lst$4946$1Z2PAY)
        (if (null? g$lst$4946$1Z2PAY)
          '#f
          ((case-lambda
             ((g$obj$4947$1Z2PAY g$t$4948$1Z2PAY g$r$4949$1Z2PAY)
              (if (equal? g$obj$4947$1Z2PAY (car g$t$4948$1Z2PAY))
                g$t$4948$1Z2PAY
                (g$assoc$4895$1Z2PAY g$obj$4947$1Z2PAY g$r$4949$1Z2PAY))))
           g$obj$4945$1Z2PAY
           (car g$lst$4946$1Z2PAY)
           (cdr g$lst$4946$1Z2PAY))))))
   (g$assp$4896$1Z2PAY
     g$assp$5007$1Z2PAY
     (case-lambda
       ((g$p?$4950$1Z2PAY g$lst$4951$1Z2PAY)
        (if (null? g$lst$4951$1Z2PAY)
          '#f
          ((case-lambda
             ((g$p?$4952$1Z2PAY g$t$4953$1Z2PAY g$r$4954$1Z2PAY)
              (if (g$p?$4952$1Z2PAY (car g$t$4953$1Z2PAY))
                g$t$4953$1Z2PAY
                (g$assp$4896$1Z2PAY g$p?$4952$1Z2PAY g$r$4954$1Z2PAY))))
           g$p?$4950$1Z2PAY
           (car g$lst$4951$1Z2PAY)
           (cdr g$lst$4951$1Z2PAY))))))
   (g$memq$4897$1Z2PAY
     g$memq$5008$1Z2PAY
     (case-lambda
       ((g$obj$4955$1Z2PAY g$lst$4956$1Z2PAY)
        (if (null? g$lst$4956$1Z2PAY)
          '#f
          (if (eq? g$obj$4955$1Z2PAY (car g$lst$4956$1Z2PAY))
            g$lst$4956$1Z2PAY
            (g$memq$4897$1Z2PAY g$obj$4955$1Z2PAY (cdr g$lst$4956$1Z2PAY)))))))
   (g$memv$4898$1Z2PAY
     g$memv$5009$1Z2PAY
     (case-lambda
       ((g$obj$4957$1Z2PAY g$lst$4958$1Z2PAY)
        (if (null? g$lst$4958$1Z2PAY)
          '#f
          (if (eqv? g$obj$4957$1Z2PAY (car g$lst$4958$1Z2PAY))
            g$lst$4958$1Z2PAY
            (g$memv$4898$1Z2PAY g$obj$4957$1Z2PAY (cdr g$lst$4958$1Z2PAY)))))))
   (g$member$4899$1Z2PAY
     g$member$5010$1Z2PAY
     (case-lambda
       ((g$obj$4959$1Z2PAY g$lst$4960$1Z2PAY)
        (if (null? g$lst$4960$1Z2PAY)
          '#f
          (if (equal? g$obj$4959$1Z2PAY (car g$lst$4960$1Z2PAY))
            g$lst$4960$1Z2PAY
            (g$member$4899$1Z2PAY
              g$obj$4959$1Z2PAY
              (cdr g$lst$4960$1Z2PAY)))))))
   (g$memp$4900$1Z2PAY
     g$memp$5011$1Z2PAY
     (case-lambda
       ((g$p?$4961$1Z2PAY g$lst$4962$1Z2PAY)
        (if (null? g$lst$4962$1Z2PAY)
          '#f
          (if (g$p?$4961$1Z2PAY (car g$lst$4962$1Z2PAY))
            g$lst$4962$1Z2PAY
            (g$memp$4900$1Z2PAY g$p?$4961$1Z2PAY (cdr g$lst$4962$1Z2PAY)))))))
   (g$all-empty?$4901$1Z2PAY
     g$all-empty?$5012$1Z2PAY
     (case-lambda
       ((g$ls$4963$1Z2PAY)
        ((case-lambda
           ((g$t$4964$1Z2PAY)
            (if g$t$4964$1Z2PAY
              g$t$4964$1Z2PAY
              (begin
                '#f
                (if (null? (car g$ls$4963$1Z2PAY))
                  (begin '#f (g$all-empty?$4901$1Z2PAY (cdr g$ls$4963$1Z2PAY)))
                  '#f)))))
         (null? g$ls$4963$1Z2PAY)))))
   (g$split$4902$1Z2PAY
     g$split$5013$1Z2PAY
     (case-lambda
       ((g$ls$4965$1Z2PAY)
        (if (null? g$ls$4965$1Z2PAY)
          (values '() '())
          (call-with-values
            (case-lambda (() (g$split$4902$1Z2PAY (cdr g$ls$4965$1Z2PAY))))
            (case-lambda
              ((g$cars$4966$1Z2PAY g$cdrs$4967$1Z2PAY)
               ((case-lambda
                  ((g$a$4968$1Z2PAY)
                   (values
                     (cons (car g$a$4968$1Z2PAY) g$cars$4966$1Z2PAY)
                     (cons (cdr g$a$4968$1Z2PAY) g$cdrs$4967$1Z2PAY))))
                (car g$ls$4965$1Z2PAY)))))))))
   (g$for-all$4903$1Z2PAY
     g$for-all$5014$1Z2PAY
     (case-lambda
       ((g$f$4969$1Z2PAY . g$args$4970$1Z2PAY)
        (if (g$all-empty?$4901$1Z2PAY g$args$4970$1Z2PAY)
          '#t
          (call-with-values
            (case-lambda (() (g$split$4902$1Z2PAY g$args$4970$1Z2PAY)))
            (case-lambda
              ((g$cars$4971$1Z2PAY g$cdrs$4972$1Z2PAY)
               (if (g$all-empty?$4901$1Z2PAY g$cdrs$4972$1Z2PAY)
                 (apply g$f$4969$1Z2PAY g$cars$4971$1Z2PAY)
                 (if (apply g$f$4969$1Z2PAY g$cars$4971$1Z2PAY)
                   (begin
                     '#f
                     (apply
                       g$for-all$4903$1Z2PAY
                       g$f$4969$1Z2PAY
                       g$cdrs$4972$1Z2PAY))
                   '#f)))))))))
   (g$exists$4904$1Z2PAY
     g$exists$5015$1Z2PAY
     (case-lambda
       ((g$f$4973$1Z2PAY . g$args$4974$1Z2PAY)
        (if (g$all-empty?$4901$1Z2PAY g$args$4974$1Z2PAY)
          '#f
          (call-with-values
            (case-lambda (() (g$split$4902$1Z2PAY g$args$4974$1Z2PAY)))
            (case-lambda
              ((g$cars$4975$1Z2PAY g$cdrs$4976$1Z2PAY)
               ((case-lambda
                  ((g$t$4977$1Z2PAY)
                   (if g$t$4977$1Z2PAY
                     g$t$4977$1Z2PAY
                     (begin
                       '#f
                       (apply
                         g$exists$4904$1Z2PAY
                         g$f$4973$1Z2PAY
                         g$cdrs$4976$1Z2PAY)))))
                (apply g$f$4973$1Z2PAY g$cars$4975$1Z2PAY)))))))))
   (g$cons*$4905$1Z2PAY
     g$cons*$5016$1Z2PAY
     (case-lambda
       ((g$a$4978$1Z2PAY . g$rest$4979$1Z2PAY)
        ((letrec ((g$f$4980$1Z2PAY
                    (case-lambda
                      ((g$a$4981$1Z2PAY g$rest$4982$1Z2PAY)
                       (if (null? g$rest$4982$1Z2PAY)
                         g$a$4981$1Z2PAY
                         (cons
                           g$a$4981$1Z2PAY
                           (g$f$4980$1Z2PAY
                             (car g$rest$4982$1Z2PAY)
                             (cdr g$rest$4982$1Z2PAY))))))))
           g$f$4980$1Z2PAY)
         g$a$4978$1Z2PAY
         g$rest$4979$1Z2PAY))))
   (g$fold-left$4906$1Z2PAY
     g$fold-left$5017$1Z2PAY
     (case-lambda
       ((g$combine$4983$1Z2PAY
          g$nil$4984$1Z2PAY
          g$list1$4985$1Z2PAY
          .
          g$lists$4986$1Z2PAY)
        (if (null? g$list1$4985$1Z2PAY)
          g$nil$4984$1Z2PAY
          (apply
            g$fold-left$4906$1Z2PAY
            (g$cons*$4905$1Z2PAY
              g$combine$4983$1Z2PAY
              (apply
                g$combine$4983$1Z2PAY
                (g$cons*$4905$1Z2PAY
                  g$nil$4984$1Z2PAY
                  (car g$list1$4985$1Z2PAY)
                  (map car g$lists$4986$1Z2PAY)))
              (cdr g$list1$4985$1Z2PAY)
              (map cdr g$lists$4986$1Z2PAY)))))))
   (g$fold-right$4907$1Z2PAY
     g$fold-right$5018$1Z2PAY
     (case-lambda
       ((g$combine$4987$1Z2PAY
          g$nil$4988$1Z2PAY
          g$list1$4989$1Z2PAY
          .
          g$lists$4990$1Z2PAY)
        (if (null? g$list1$4989$1Z2PAY)
          g$nil$4988$1Z2PAY
          (apply
            g$combine$4987$1Z2PAY
            (append
              (list (car g$list1$4989$1Z2PAY))
              (map car g$lists$4990$1Z2PAY)
              (list
                (apply
                  g$fold-right$4907$1Z2PAY
                  (g$cons*$4905$1Z2PAY
                    g$combine$4987$1Z2PAY
                    g$nil$4988$1Z2PAY
                    (cdr g$list1$4989$1Z2PAY)
                    (map cdr g$lists$4990$1Z2PAY))))))))))
   (g$remove$4908$1Z2PAY
     g$remove$5019$1Z2PAY
     (case-lambda
       ((g$obj$4991$1Z2PAY g$list$4992$1Z2PAY)
        (g$remp$4891$1Z2PAY
          (case-lambda
            ((g$x$4993$1Z2PAY) (equal? g$obj$4991$1Z2PAY g$x$4993$1Z2PAY)))
          g$list$4992$1Z2PAY))))
   (g$remv$4909$1Z2PAY
     g$remv$5020$1Z2PAY
     (case-lambda
       ((g$obj$4994$1Z2PAY g$list$4995$1Z2PAY)
        (g$remp$4891$1Z2PAY
          (case-lambda
            ((g$x$4996$1Z2PAY) (eqv? g$obj$4994$1Z2PAY g$x$4996$1Z2PAY)))
          g$list$4995$1Z2PAY))))
   (g$remq$4910$1Z2PAY
     g$remq$5021$1Z2PAY
     (case-lambda
       ((g$obj$4997$1Z2PAY g$list$4998$1Z2PAY)
        (g$remp$4891$1Z2PAY
          (case-lambda
            ((g$x$4999$1Z2PAY) (eq? g$obj$4997$1Z2PAY g$x$4999$1Z2PAY)))
          g$list$4998$1Z2PAY)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$caar$5022$1Z2PAY
     g$caar$5177$1Z2PAY
     (case-lambda ((g$x$5077$1Z2PAY) (car (car g$x$5077$1Z2PAY)))))
   (g$cadr$5023$1Z2PAY
     g$cadr$5178$1Z2PAY
     (case-lambda ((g$x$5078$1Z2PAY) (car (cdr g$x$5078$1Z2PAY)))))
   (g$cdar$5024$1Z2PAY
     g$cdar$5179$1Z2PAY
     (case-lambda ((g$x$5079$1Z2PAY) (cdr (car g$x$5079$1Z2PAY)))))
   (g$cddr$5025$1Z2PAY
     g$cddr$5180$1Z2PAY
     (case-lambda ((g$x$5080$1Z2PAY) (cdr (cdr g$x$5080$1Z2PAY)))))
   (g$caaar$5026$1Z2PAY
     g$caaar$5181$1Z2PAY
     (case-lambda
       ((g$x$5081$1Z2PAY) (g$caar$5022$1Z2PAY (car g$x$5081$1Z2PAY)))))
   (g$caadr$5027$1Z2PAY
     g$caadr$5182$1Z2PAY
     (case-lambda
       ((g$x$5082$1Z2PAY) (g$caar$5022$1Z2PAY (cdr g$x$5082$1Z2PAY)))))
   (g$cadar$5028$1Z2PAY
     g$cadar$5183$1Z2PAY
     (case-lambda
       ((g$x$5083$1Z2PAY) (g$cadr$5023$1Z2PAY (car g$x$5083$1Z2PAY)))))
   (g$caddr$5029$1Z2PAY
     g$caddr$5184$1Z2PAY
     (case-lambda
       ((g$x$5084$1Z2PAY) (g$cadr$5023$1Z2PAY (cdr g$x$5084$1Z2PAY)))))
   (g$cdaar$5030$1Z2PAY
     g$cdaar$5185$1Z2PAY
     (case-lambda
       ((g$x$5085$1Z2PAY) (g$cdar$5024$1Z2PAY (car g$x$5085$1Z2PAY)))))
   (g$cdadr$5031$1Z2PAY
     g$cdadr$5186$1Z2PAY
     (case-lambda
       ((g$x$5086$1Z2PAY) (g$cdar$5024$1Z2PAY (cdr g$x$5086$1Z2PAY)))))
   (g$cddar$5032$1Z2PAY
     g$cddar$5187$1Z2PAY
     (case-lambda
       ((g$x$5087$1Z2PAY) (g$cddr$5025$1Z2PAY (car g$x$5087$1Z2PAY)))))
   (g$cdddr$5033$1Z2PAY
     g$cdddr$5188$1Z2PAY
     (case-lambda
       ((g$x$5088$1Z2PAY) (g$cddr$5025$1Z2PAY (cdr g$x$5088$1Z2PAY)))))
   (g$caaaar$5034$1Z2PAY
     g$caaaar$5189$1Z2PAY
     (case-lambda
       ((g$x$5089$1Z2PAY) (g$caaar$5026$1Z2PAY (car g$x$5089$1Z2PAY)))))
   (g$caaadr$5035$1Z2PAY
     g$caaadr$5190$1Z2PAY
     (case-lambda
       ((g$x$5090$1Z2PAY) (g$caaar$5026$1Z2PAY (cdr g$x$5090$1Z2PAY)))))
   (g$caadar$5036$1Z2PAY
     g$caadar$5191$1Z2PAY
     (case-lambda
       ((g$x$5091$1Z2PAY) (g$caadr$5027$1Z2PAY (car g$x$5091$1Z2PAY)))))
   (g$caaddr$5037$1Z2PAY
     g$caaddr$5192$1Z2PAY
     (case-lambda
       ((g$x$5092$1Z2PAY) (g$caadr$5027$1Z2PAY (cdr g$x$5092$1Z2PAY)))))
   (g$cadaar$5038$1Z2PAY
     g$cadaar$5193$1Z2PAY
     (case-lambda
       ((g$x$5093$1Z2PAY) (g$cadar$5028$1Z2PAY (car g$x$5093$1Z2PAY)))))
   (g$cadadr$5039$1Z2PAY
     g$cadadr$5194$1Z2PAY
     (case-lambda
       ((g$x$5094$1Z2PAY) (g$cadar$5028$1Z2PAY (cdr g$x$5094$1Z2PAY)))))
   (g$caddar$5040$1Z2PAY
     g$caddar$5195$1Z2PAY
     (case-lambda
       ((g$x$5095$1Z2PAY) (g$caddr$5029$1Z2PAY (car g$x$5095$1Z2PAY)))))
   (g$cadddr$5041$1Z2PAY
     g$cadddr$5196$1Z2PAY
     (case-lambda
       ((g$x$5096$1Z2PAY) (g$caddr$5029$1Z2PAY (cdr g$x$5096$1Z2PAY)))))
   (g$cdaaar$5042$1Z2PAY
     g$cdaaar$5197$1Z2PAY
     (case-lambda
       ((g$x$5097$1Z2PAY) (g$cdaar$5030$1Z2PAY (car g$x$5097$1Z2PAY)))))
   (g$cdaadr$5043$1Z2PAY
     g$cdaadr$5198$1Z2PAY
     (case-lambda
       ((g$x$5098$1Z2PAY) (g$cdaar$5030$1Z2PAY (cdr g$x$5098$1Z2PAY)))))
   (g$cdadar$5044$1Z2PAY
     g$cdadar$5199$1Z2PAY
     (case-lambda
       ((g$x$5099$1Z2PAY) (g$cdadr$5031$1Z2PAY (car g$x$5099$1Z2PAY)))))
   (g$cdaddr$5045$1Z2PAY
     g$cdaddr$5200$1Z2PAY
     (case-lambda
       ((g$x$5100$1Z2PAY) (g$cdadr$5031$1Z2PAY (cdr g$x$5100$1Z2PAY)))))
   (g$cddaar$5046$1Z2PAY
     g$cddaar$5201$1Z2PAY
     (case-lambda
       ((g$x$5101$1Z2PAY) (g$cddar$5032$1Z2PAY (car g$x$5101$1Z2PAY)))))
   (g$cddadr$5047$1Z2PAY
     g$cddadr$5202$1Z2PAY
     (case-lambda
       ((g$x$5102$1Z2PAY) (g$cddar$5032$1Z2PAY (cdr g$x$5102$1Z2PAY)))))
   (g$cdddar$5048$1Z2PAY
     g$cdddar$5203$1Z2PAY
     (case-lambda
       ((g$x$5103$1Z2PAY) (g$cdddr$5033$1Z2PAY (car g$x$5103$1Z2PAY)))))
   (g$cddddr$5049$1Z2PAY
     g$cddddr$5204$1Z2PAY
     (case-lambda
       ((g$x$5104$1Z2PAY) (g$cdddr$5033$1Z2PAY (cdr g$x$5104$1Z2PAY)))))
   (g$string=?$5056$1Z2PAY
     g$string=?$5205$1Z2PAY
     (case-lambda
       ((g$a$5105$1Z2PAY g$b$5106$1Z2PAY . g$rest$5107$1Z2PAY)
        (begin
          (if (not (string? g$a$5105$1Z2PAY))
            (assertion-violation 'string=? '"not a string" g$a$5105$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5108$1Z2PAY)
               (begin
                 (if (not (string? g$x$5108$1Z2PAY))
                   (assertion-violation
                     'string=?
                     '"not a string"
                     g$x$5108$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5109$1Z2PAY)
                     (begin
                       (set! g$a$5105$1Z2PAY g$x$5108$1Z2PAY)
                       g$r$5109$1Z2PAY)))
                  (= (string-compare g$a$5105$1Z2PAY g$x$5108$1Z2PAY) '0)))))
            (cons g$b$5106$1Z2PAY g$rest$5107$1Z2PAY))))))
   (g$string<?$5057$1Z2PAY
     g$string<?$5206$1Z2PAY
     (case-lambda
       ((g$a$5110$1Z2PAY g$b$5111$1Z2PAY . g$rest$5112$1Z2PAY)
        (begin
          (if (not (string? g$a$5110$1Z2PAY))
            (assertion-violation 'string<? '"not a string" g$a$5110$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5113$1Z2PAY)
               (begin
                 (if (not (string? g$x$5113$1Z2PAY))
                   (assertion-violation
                     'string<?
                     '"not a string"
                     g$x$5113$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5114$1Z2PAY)
                     (begin
                       (set! g$a$5110$1Z2PAY g$x$5113$1Z2PAY)
                       g$r$5114$1Z2PAY)))
                  (< (string-compare g$a$5110$1Z2PAY g$x$5113$1Z2PAY) '0)))))
            (cons g$b$5111$1Z2PAY g$rest$5112$1Z2PAY))))))
   (g$string>?$5058$1Z2PAY
     g$string>?$5207$1Z2PAY
     (case-lambda
       ((g$a$5115$1Z2PAY g$b$5116$1Z2PAY . g$rest$5117$1Z2PAY)
        (begin
          (if (not (string? g$a$5115$1Z2PAY))
            (assertion-violation 'string>? '"not a string" g$a$5115$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5118$1Z2PAY)
               (begin
                 (if (not (string? g$x$5118$1Z2PAY))
                   (assertion-violation
                     'string>?
                     '"not a string"
                     g$x$5118$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5119$1Z2PAY)
                     (begin
                       (set! g$a$5115$1Z2PAY g$x$5118$1Z2PAY)
                       g$r$5119$1Z2PAY)))
                  (> (string-compare g$a$5115$1Z2PAY g$x$5118$1Z2PAY) '0)))))
            (cons g$b$5116$1Z2PAY g$rest$5117$1Z2PAY))))))
   (g$string<=?$5059$1Z2PAY
     g$string<=?$5208$1Z2PAY
     (case-lambda
       ((g$a$5120$1Z2PAY g$b$5121$1Z2PAY . g$rest$5122$1Z2PAY)
        (begin
          (if (not (string? g$a$5120$1Z2PAY))
            (assertion-violation 'string<=? '"not a string" g$a$5120$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5123$1Z2PAY)
               (begin
                 (if (not (string? g$x$5123$1Z2PAY))
                   (assertion-violation
                     'string<=?
                     '"not a string"
                     g$x$5123$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5124$1Z2PAY)
                     (begin
                       (set! g$a$5120$1Z2PAY g$x$5123$1Z2PAY)
                       g$r$5124$1Z2PAY)))
                  (<= (string-compare g$a$5120$1Z2PAY g$x$5123$1Z2PAY) '0)))))
            (cons g$b$5121$1Z2PAY g$rest$5122$1Z2PAY))))))
   (g$string>=?$5060$1Z2PAY
     g$string>=?$5209$1Z2PAY
     (case-lambda
       ((g$a$5125$1Z2PAY g$b$5126$1Z2PAY . g$rest$5127$1Z2PAY)
        (begin
          (if (not (string? g$a$5125$1Z2PAY))
            (assertion-violation 'string>=? '"not a string" g$a$5125$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5128$1Z2PAY)
               (begin
                 (if (not (string? g$x$5128$1Z2PAY))
                   (assertion-violation
                     'string>=?
                     '"not a string"
                     g$x$5128$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5129$1Z2PAY)
                     (begin
                       (set! g$a$5125$1Z2PAY g$x$5128$1Z2PAY)
                       g$r$5129$1Z2PAY)))
                  (>= (string-compare g$a$5125$1Z2PAY g$x$5128$1Z2PAY) '0)))))
            (cons g$b$5126$1Z2PAY g$rest$5127$1Z2PAY))))))
   (g$symbol=?$5061$1Z2PAY
     g$symbol=?$5210$1Z2PAY
     (case-lambda
       ((g$a$5130$1Z2PAY g$b$5131$1Z2PAY . g$rest$5132$1Z2PAY)
        (begin
          (if (not (symbol? g$a$5130$1Z2PAY))
            (assertion-violation 'symbol=? '"not a symbol" g$a$5130$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5133$1Z2PAY)
               (begin
                 (if (not (symbol? g$x$5133$1Z2PAY))
                   (assertion-violation
                     'symbol=?
                     '"not a symbol"
                     g$x$5133$1Z2PAY)
                   (void))
                 (eq? g$a$5130$1Z2PAY g$x$5133$1Z2PAY))))
            (cons g$b$5131$1Z2PAY g$rest$5132$1Z2PAY))))))
   (g$boolean=?$5062$1Z2PAY
     g$boolean=?$5211$1Z2PAY
     (case-lambda
       ((g$a$5134$1Z2PAY g$b$5135$1Z2PAY . g$rest$5136$1Z2PAY)
        (begin
          (if (not (boolean? g$a$5134$1Z2PAY))
            (assertion-violation 'boolean=? '"not a boolean" g$a$5134$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5137$1Z2PAY)
               (begin
                 (if (not (boolean? g$x$5137$1Z2PAY))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$5137$1Z2PAY)
                   (void))
                 (eq? g$a$5134$1Z2PAY g$x$5137$1Z2PAY))))
            (cons g$b$5135$1Z2PAY g$rest$5136$1Z2PAY))))))
   (g$char=?$5069$1Z2PAY
     g$char=?$5212$1Z2PAY
     (case-lambda
       ((g$a$5138$1Z2PAY g$b$5139$1Z2PAY . g$rest$5140$1Z2PAY)
        (begin
          (if (not (char? g$a$5138$1Z2PAY))
            (assertion-violation 'char=? '"not a char" g$a$5138$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5141$1Z2PAY)
               (begin
                 (if (not (char? g$x$5141$1Z2PAY))
                   (assertion-violation 'char=? '"not a char" g$x$5141$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5142$1Z2PAY)
                     (begin
                       (set! g$a$5138$1Z2PAY g$x$5141$1Z2PAY)
                       g$r$5142$1Z2PAY)))
                  (= (char->integer g$a$5138$1Z2PAY)
                     (char->integer g$x$5141$1Z2PAY))))))
            (cons g$b$5139$1Z2PAY g$rest$5140$1Z2PAY))))))
   (g$char<?$5070$1Z2PAY
     g$char<?$5213$1Z2PAY
     (case-lambda
       ((g$a$5143$1Z2PAY g$b$5144$1Z2PAY . g$rest$5145$1Z2PAY)
        (begin
          (if (not (char? g$a$5143$1Z2PAY))
            (assertion-violation 'char<? '"not a char" g$a$5143$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5146$1Z2PAY)
               (begin
                 (if (not (char? g$x$5146$1Z2PAY))
                   (assertion-violation 'char<? '"not a char" g$x$5146$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5147$1Z2PAY)
                     (begin
                       (set! g$a$5143$1Z2PAY g$x$5146$1Z2PAY)
                       g$r$5147$1Z2PAY)))
                  (< (char->integer g$a$5143$1Z2PAY)
                     (char->integer g$x$5146$1Z2PAY))))))
            (cons g$b$5144$1Z2PAY g$rest$5145$1Z2PAY))))))
   (g$char>?$5071$1Z2PAY
     g$char>?$5214$1Z2PAY
     (case-lambda
       ((g$a$5148$1Z2PAY g$b$5149$1Z2PAY . g$rest$5150$1Z2PAY)
        (begin
          (if (not (char? g$a$5148$1Z2PAY))
            (assertion-violation 'char>? '"not a char" g$a$5148$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5151$1Z2PAY)
               (begin
                 (if (not (char? g$x$5151$1Z2PAY))
                   (assertion-violation 'char>? '"not a char" g$x$5151$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5152$1Z2PAY)
                     (begin
                       (set! g$a$5148$1Z2PAY g$x$5151$1Z2PAY)
                       g$r$5152$1Z2PAY)))
                  (> (char->integer g$a$5148$1Z2PAY)
                     (char->integer g$x$5151$1Z2PAY))))))
            (cons g$b$5149$1Z2PAY g$rest$5150$1Z2PAY))))))
   (g$char<=?$5072$1Z2PAY
     g$char<=?$5215$1Z2PAY
     (case-lambda
       ((g$a$5153$1Z2PAY g$b$5154$1Z2PAY . g$rest$5155$1Z2PAY)
        (begin
          (if (not (char? g$a$5153$1Z2PAY))
            (assertion-violation 'char<=? '"not a char" g$a$5153$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5156$1Z2PAY)
               (begin
                 (if (not (char? g$x$5156$1Z2PAY))
                   (assertion-violation 'char<=? '"not a char" g$x$5156$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5157$1Z2PAY)
                     (begin
                       (set! g$a$5153$1Z2PAY g$x$5156$1Z2PAY)
                       g$r$5157$1Z2PAY)))
                  (<= (char->integer g$a$5153$1Z2PAY)
                      (char->integer g$x$5156$1Z2PAY))))))
            (cons g$b$5154$1Z2PAY g$rest$5155$1Z2PAY))))))
   (g$char>=?$5073$1Z2PAY
     g$char>=?$5216$1Z2PAY
     (case-lambda
       ((g$a$5158$1Z2PAY g$b$5159$1Z2PAY . g$rest$5160$1Z2PAY)
        (begin
          (if (not (char? g$a$5158$1Z2PAY))
            (assertion-violation 'char>=? '"not a char" g$a$5158$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5161$1Z2PAY)
               (begin
                 (if (not (char? g$x$5161$1Z2PAY))
                   (assertion-violation 'char>=? '"not a char" g$x$5161$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5162$1Z2PAY)
                     (begin
                       (set! g$a$5158$1Z2PAY g$x$5161$1Z2PAY)
                       g$r$5162$1Z2PAY)))
                  (>= (char->integer g$a$5158$1Z2PAY)
                      (char->integer g$x$5161$1Z2PAY))))))
            (cons g$b$5159$1Z2PAY g$rest$5160$1Z2PAY))))))
   (g$rationalize$5074$1Z2PAY
     g$rationalize$5217$1Z2PAY
     (case-lambda
       ((g$x$5163$1Z2PAY g$e$5164$1Z2PAY)
        (if (if (infinite? g$x$5163$1Z2PAY)
              (begin '#f (infinite? g$e$5164$1Z2PAY))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$5165$1Z2PAY)
              (if (if (exact? g$x$5163$1Z2PAY)
                    (begin '#f (exact? g$e$5164$1Z2PAY))
                    '#f)
                g$r$5165$1Z2PAY
                (inexact g$r$5165$1Z2PAY))))
           (apply
             /
             (g$find-ratio$5075$1Z2PAY g$x$5163$1Z2PAY g$e$5164$1Z2PAY)))))))
   (g$find-ratio$5075$1Z2PAY
     g$find-ratio$5218$1Z2PAY
     (case-lambda
       ((g$x$5166$1Z2PAY g$e$5167$1Z2PAY)
        (g$find-ratio-between$5076$1Z2PAY
          (- g$x$5166$1Z2PAY g$e$5167$1Z2PAY)
          (+ g$x$5166$1Z2PAY g$e$5167$1Z2PAY)))))
   (g$find-ratio-between$5076$1Z2PAY
     g$find-ratio-between$5219$1Z2PAY
     (case-lambda
       ((g$x$5168$1Z2PAY g$y$5169$1Z2PAY)
        (letrec* ((g$sr$5170$1Z2PAY
                    (case-lambda
                      ((g$x$5172$1Z2PAY g$y$5173$1Z2PAY)
                       ((case-lambda
                          ((g$fx$5174$1Z2PAY g$fy$5175$1Z2PAY)
                           (if (>= g$fx$5174$1Z2PAY g$x$5172$1Z2PAY)
                             (list g$fx$5174$1Z2PAY '1)
                             (if (= g$fx$5174$1Z2PAY g$fy$5175$1Z2PAY)
                               ((case-lambda
                                  ((g$rat$5176$1Z2PAY)
                                   (list
                                     (+ (g$cadr$5023$1Z2PAY g$rat$5176$1Z2PAY)
                                        (* g$fx$5174$1Z2PAY
                                           (car g$rat$5176$1Z2PAY)))
                                     (car g$rat$5176$1Z2PAY))))
                                (g$sr$5170$1Z2PAY
                                  (/ (- g$y$5173$1Z2PAY g$fy$5175$1Z2PAY))
                                  (/ (- g$x$5172$1Z2PAY g$fx$5174$1Z2PAY))))
                               (list (+ '1 g$fx$5174$1Z2PAY) '1)))))
                        (exact (floor g$x$5172$1Z2PAY))
                        (exact (floor g$y$5173$1Z2PAY)))))))
          (if (< g$y$5169$1Z2PAY g$x$5168$1Z2PAY)
            (g$find-ratio-between$5076$1Z2PAY g$y$5169$1Z2PAY g$x$5168$1Z2PAY)
            (if (>= g$x$5168$1Z2PAY g$y$5169$1Z2PAY)
              (list g$x$5168$1Z2PAY '1)
              (if (positive? g$x$5168$1Z2PAY)
                (g$sr$5170$1Z2PAY g$x$5168$1Z2PAY g$y$5169$1Z2PAY)
                (if (negative? g$y$5169$1Z2PAY)
                  ((case-lambda
                     ((g$rat$5171$1Z2PAY)
                      (list
                        (- (car g$rat$5171$1Z2PAY))
                        (g$cadr$5023$1Z2PAY g$rat$5171$1Z2PAY))))
                   (g$sr$5170$1Z2PAY (- g$y$5169$1Z2PAY) (- g$x$5168$1Z2PAY)))
                  '(0 1))))))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$5415$1Z2PAY g$using$5450$1Z2PAY (clr-using-internal 'system))
   (g$using$5417$1Z2PAY
     g$using$5451$1Z2PAY
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$5418$1Z2PAY
     g$make-eq-hashtable$5452$1Z2PAY
     (case-lambda
       (() (g$make-eq-hashtable$5418$1Z2PAY '32))
       ((g$k$5429$1Z2PAY)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$5429$1Z2PAY)))))
   (g$make-eqv-hashtable$5419$1Z2PAY
     g$make-eqv-hashtable$5453$1Z2PAY
     (case-lambda
       (() (g$make-eqv-hashtable$5419$1Z2PAY '32))
       ((g$k$5430$1Z2PAY) (make-hashtable eqv-hash eqv? g$k$5430$1Z2PAY))))
   (g$hashtable-size$5420$1Z2PAY
     g$hashtable-size$5454$1Z2PAY
     (case-lambda
       ((g$ht$5431$1Z2PAY)
        (clr-call-internal 'hashtable 'get_count g$ht$5431$1Z2PAY))))
   (g$hashtable-ref$5421$1Z2PAY
     g$hashtable-ref$5455$1Z2PAY
     (case-lambda
       ((g$ht$5432$1Z2PAY g$key$5433$1Z2PAY g$default$5434$1Z2PAY)
        (letrec* ((g$r$5435$1Z2PAY
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$5432$1Z2PAY
                      g$key$5433$1Z2PAY)))
          (if (not (null? g$r$5435$1Z2PAY))
            g$r$5435$1Z2PAY
            g$default$5434$1Z2PAY)))))
   (g$hashtable-set!$5422$1Z2PAY
     g$hashtable-set!$5456$1Z2PAY
     (case-lambda
       ((g$ht$5436$1Z2PAY g$key$5437$1Z2PAY g$obj$5438$1Z2PAY)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$5436$1Z2PAY
          g$key$5437$1Z2PAY
          g$obj$5438$1Z2PAY))))
   (g$hashtable-delete!$5423$1Z2PAY
     g$hashtable-delete!$5457$1Z2PAY
     (case-lambda
       ((g$ht$5439$1Z2PAY g$key$5440$1Z2PAY)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$5439$1Z2PAY
          g$key$5440$1Z2PAY))))
   (g$hashtable-contains?$5424$1Z2PAY
     g$hashtable-contains?$5458$1Z2PAY
     (case-lambda
       ((g$ht$5441$1Z2PAY g$key$5442$1Z2PAY)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$5441$1Z2PAY
          g$key$5442$1Z2PAY))))
   (g$hashtable-update!$5425$1Z2PAY
     g$hashtable-update!$5459$1Z2PAY
     (case-lambda
       ((g$ht$5443$1Z2PAY
          g$key$5444$1Z2PAY
          g$proc$5445$1Z2PAY
          g$default$5446$1Z2PAY)
        (g$hashtable-set!$5422$1Z2PAY
          g$ht$5443$1Z2PAY
          g$key$5444$1Z2PAY
          (g$proc$5445$1Z2PAY
            (g$hashtable-ref$5421$1Z2PAY
              g$ht$5443$1Z2PAY
              g$key$5444$1Z2PAY
              g$default$5446$1Z2PAY))))))
   (g$hashtable-clear!$5426$1Z2PAY
     g$hashtable-clear!$5460$1Z2PAY
     (case-lambda
       ((g$ht$5447$1Z2PAY)
        (g$hashtable-clear!$5426$1Z2PAY g$ht$5447$1Z2PAY '32))
       ((g$ht$5448$1Z2PAY g$k$5449$1Z2PAY)
        (clr-call-internal 'hashtable 'clear g$ht$5448$1Z2PAY))))
   (g$clear-usings$5428$1Z2PAY
     g$clear-usings$5461$1Z2PAY
     (clr-clear-usings-internal)))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$5463$1Z2PAY
     g$using$5470$1Z2PAY
     (clr-using-internal 'system.io))
   (g$file-exists?$5464$1Z2PAY
     g$file-exists?$5471$1Z2PAY
     (case-lambda
       ((g$fn$5467$1Z2PAY)
        (clr-call-internal 'file 'exists '() g$fn$5467$1Z2PAY))))
   (g$delete-file$5465$1Z2PAY
     g$delete-file$5472$1Z2PAY
     (case-lambda
       ((g$fn$5468$1Z2PAY)
        (clr-call-internal 'file 'delete '() g$fn$5468$1Z2PAY))))
   (g$get-directory-name$5466$1Z2PAY
     g$get-directory-name$5473$1Z2PAY
     (case-lambda
       ((g$path$5469$1Z2PAY)
        (clr-call-internal 'path 'getdirectoryname '() g$path$5469$1Z2PAY)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$5474$1Z2PAY
     g$native-endianness$5585$1Z2PAY
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$5475$1Z2PAY
     g$bytevector-u16-ref$5586$1Z2PAY
     (case-lambda
       ((g$bytevector$5503$1Z2PAY g$k$5504$1Z2PAY g$endianness$5505$1Z2PAY)
        (bytevector-uint-ref
          g$bytevector$5503$1Z2PAY
          g$k$5504$1Z2PAY
          g$endianness$5505$1Z2PAY
          '2))))
   (g$bytevector-s16-ref$5476$1Z2PAY
     g$bytevector-s16-ref$5587$1Z2PAY
     (case-lambda
       ((g$bytevector$5506$1Z2PAY g$k$5507$1Z2PAY g$endianness$5508$1Z2PAY)
        (bytevector-sint-ref
          g$bytevector$5506$1Z2PAY
          g$k$5507$1Z2PAY
          g$endianness$5508$1Z2PAY
          '2))))
   (g$bytevector-u16-native-ref$5477$1Z2PAY
     g$bytevector-u16-native-ref$5588$1Z2PAY
     (case-lambda
       ((g$bytevector$5509$1Z2PAY g$k$5510$1Z2PAY)
        (bytevector-uint-ref
          g$bytevector$5509$1Z2PAY
          g$k$5510$1Z2PAY
          (g$native-endianness$5474$1Z2PAY)
          '2))))
   (g$bytevector-s16-native-ref$5478$1Z2PAY
     g$bytevector-s16-native-ref$5589$1Z2PAY
     (case-lambda
       ((g$bytevector$5511$1Z2PAY g$k$5512$1Z2PAY)
        (bytevector-sint-ref
          g$bytevector$5511$1Z2PAY
          g$k$5512$1Z2PAY
          (g$native-endianness$5474$1Z2PAY)
          '2))))
   (g$bytevector-u16-set!$5479$1Z2PAY
     g$bytevector-u16-set!$5590$1Z2PAY
     (case-lambda
       ((g$bytevector$5513$1Z2PAY
          g$k$5514$1Z2PAY
          g$n$5515$1Z2PAY
          g$endianness$5516$1Z2PAY)
        (bytevector-uint-set!
          g$bytevector$5513$1Z2PAY
          g$k$5514$1Z2PAY
          g$n$5515$1Z2PAY
          g$endianness$5516$1Z2PAY
          '2))))
   (g$bytevector-s16-set!$5480$1Z2PAY
     g$bytevector-s16-set!$5591$1Z2PAY
     (case-lambda
       ((g$bytevector$5517$1Z2PAY
          g$k$5518$1Z2PAY
          g$n$5519$1Z2PAY
          g$endianness$5520$1Z2PAY)
        (bytevector-sint-set!
          g$bytevector$5517$1Z2PAY
          g$k$5518$1Z2PAY
          g$n$5519$1Z2PAY
          g$endianness$5520$1Z2PAY
          '2))))
   (g$bytevector-u16-native-set!$5481$1Z2PAY
     g$bytevector-u16-native-set!$5592$1Z2PAY
     (case-lambda
       ((g$bytevector$5521$1Z2PAY g$k$5522$1Z2PAY g$n$5523$1Z2PAY)
        (bytevector-uint-set!
          g$bytevector$5521$1Z2PAY
          g$k$5522$1Z2PAY
          g$n$5523$1Z2PAY
          (g$native-endianness$5474$1Z2PAY)
          '2))))
   (g$bytevector-s16-native-set!$5482$1Z2PAY
     g$bytevector-s16-native-set!$5593$1Z2PAY
     (case-lambda
       ((g$bytevector$5524$1Z2PAY g$k$5525$1Z2PAY g$n$5526$1Z2PAY)
        (bytevector-sint-set!
          g$bytevector$5524$1Z2PAY
          g$k$5525$1Z2PAY
          g$n$5526$1Z2PAY
          (g$native-endianness$5474$1Z2PAY)
          '2))))
   (g$bytevector-u32-ref$5483$1Z2PAY
     g$bytevector-u32-ref$5594$1Z2PAY
     (case-lambda
       ((g$bytevector$5527$1Z2PAY g$k$5528$1Z2PAY g$endianness$5529$1Z2PAY)
        (bytevector-uint-ref
          g$bytevector$5527$1Z2PAY
          g$k$5528$1Z2PAY
          g$endianness$5529$1Z2PAY
          '4))))
   (g$bytevector-s32-ref$5484$1Z2PAY
     g$bytevector-s32-ref$5595$1Z2PAY
     (case-lambda
       ((g$bytevector$5530$1Z2PAY g$k$5531$1Z2PAY g$endianness$5532$1Z2PAY)
        (bytevector-sint-ref
          g$bytevector$5530$1Z2PAY
          g$k$5531$1Z2PAY
          g$endianness$5532$1Z2PAY
          '4))))
   (g$bytevector-u32-native-ref$5485$1Z2PAY
     g$bytevector-u32-native-ref$5596$1Z2PAY
     (case-lambda
       ((g$bytevector$5533$1Z2PAY g$k$5534$1Z2PAY)
        (bytevector-uint-ref
          g$bytevector$5533$1Z2PAY
          g$k$5534$1Z2PAY
          (g$native-endianness$5474$1Z2PAY)
          '4))))
   (g$bytevector-s32-native-ref$5486$1Z2PAY
     g$bytevector-s32-native-ref$5597$1Z2PAY
     (case-lambda
       ((g$bytevector$5535$1Z2PAY g$k$5536$1Z2PAY)
        (bytevector-sint-ref
          g$bytevector$5535$1Z2PAY
          g$k$5536$1Z2PAY
          (g$native-endianness$5474$1Z2PAY)
          '4))))
   (g$bytevector-u32-set!$5487$1Z2PAY
     g$bytevector-u32-set!$5598$1Z2PAY
     (case-lambda
       ((g$bytevector$5537$1Z2PAY
          g$k$5538$1Z2PAY
          g$n$5539$1Z2PAY
          g$endianness$5540$1Z2PAY)
        (bytevector-uint-set!
          g$bytevector$5537$1Z2PAY
          g$k$5538$1Z2PAY
          g$n$5539$1Z2PAY
          g$endianness$5540$1Z2PAY
          '4))))
   (g$bytevector-s32-set!$5488$1Z2PAY
     g$bytevector-s32-set!$5599$1Z2PAY
     (case-lambda
       ((g$bytevector$5541$1Z2PAY
          g$k$5542$1Z2PAY
          g$n$5543$1Z2PAY
          g$endianness$5544$1Z2PAY)
        (bytevector-sint-set!
          g$bytevector$5541$1Z2PAY
          g$k$5542$1Z2PAY
          g$n$5543$1Z2PAY
          g$endianness$5544$1Z2PAY
          '4))))
   (g$bytevector-u32-native-set!$5489$1Z2PAY
     g$bytevector-u32-native-set!$5600$1Z2PAY
     (case-lambda
       ((g$bytevector$5545$1Z2PAY g$k$5546$1Z2PAY g$n$5547$1Z2PAY)
        (bytevector-uint-set!
          g$bytevector$5545$1Z2PAY
          g$k$5546$1Z2PAY
          g$n$5547$1Z2PAY
          (g$native-endianness$5474$1Z2PAY)
          '4))))
   (g$bytevector-s32-native-set!$5490$1Z2PAY
     g$bytevector-s32-native-set!$5601$1Z2PAY
     (case-lambda
       ((g$bytevector$5548$1Z2PAY g$k$5549$1Z2PAY g$n$5550$1Z2PAY)
        (bytevector-sint-set!
          g$bytevector$5548$1Z2PAY
          g$k$5549$1Z2PAY
          g$n$5550$1Z2PAY
          (g$native-endianness$5474$1Z2PAY)
          '4))))
   (g$bytevector-u64-ref$5491$1Z2PAY
     g$bytevector-u64-ref$5602$1Z2PAY
     (case-lambda
       ((g$bytevector$5551$1Z2PAY g$k$5552$1Z2PAY g$endianness$5553$1Z2PAY)
        (bytevector-uint-ref
          g$bytevector$5551$1Z2PAY
          g$k$5552$1Z2PAY
          g$endianness$5553$1Z2PAY
          '8))))
   (g$bytevector-s64-ref$5492$1Z2PAY
     g$bytevector-s64-ref$5603$1Z2PAY
     (case-lambda
       ((g$bytevector$5554$1Z2PAY g$k$5555$1Z2PAY g$endianness$5556$1Z2PAY)
        (bytevector-sint-ref
          g$bytevector$5554$1Z2PAY
          g$k$5555$1Z2PAY
          g$endianness$5556$1Z2PAY
          '8))))
   (g$bytevector-u64-native-ref$5493$1Z2PAY
     g$bytevector-u64-native-ref$5604$1Z2PAY
     (case-lambda
       ((g$bytevector$5557$1Z2PAY g$k$5558$1Z2PAY)
        (bytevector-uint-ref
          g$bytevector$5557$1Z2PAY
          g$k$5558$1Z2PAY
          (g$native-endianness$5474$1Z2PAY)
          '8))))
   (g$bytevector-s64-native-ref$5494$1Z2PAY
     g$bytevector-s64-native-ref$5605$1Z2PAY
     (case-lambda
       ((g$bytevector$5559$1Z2PAY g$k$5560$1Z2PAY)
        (bytevector-sint-ref
          g$bytevector$5559$1Z2PAY
          g$k$5560$1Z2PAY
          (g$native-endianness$5474$1Z2PAY)
          '8))))
   (g$bytevector-u64-set!$5495$1Z2PAY
     g$bytevector-u64-set!$5606$1Z2PAY
     (case-lambda
       ((g$bytevector$5561$1Z2PAY
          g$k$5562$1Z2PAY
          g$n$5563$1Z2PAY
          g$endianness$5564$1Z2PAY)
        (bytevector-uint-set!
          g$bytevector$5561$1Z2PAY
          g$k$5562$1Z2PAY
          g$n$5563$1Z2PAY
          g$endianness$5564$1Z2PAY
          '8))))
   (g$bytevector-s64-set!$5496$1Z2PAY
     g$bytevector-s64-set!$5607$1Z2PAY
     (case-lambda
       ((g$bytevector$5565$1Z2PAY
          g$k$5566$1Z2PAY
          g$n$5567$1Z2PAY
          g$endianness$5568$1Z2PAY)
        (bytevector-sint-set!
          g$bytevector$5565$1Z2PAY
          g$k$5566$1Z2PAY
          g$n$5567$1Z2PAY
          g$endianness$5568$1Z2PAY
          '8))))
   (g$bytevector-u64-native-set!$5497$1Z2PAY
     g$bytevector-u64-native-set!$5608$1Z2PAY
     (case-lambda
       ((g$bytevector$5569$1Z2PAY g$k$5570$1Z2PAY g$n$5571$1Z2PAY)
        (bytevector-uint-set!
          g$bytevector$5569$1Z2PAY
          g$k$5570$1Z2PAY
          g$n$5571$1Z2PAY
          (g$native-endianness$5474$1Z2PAY)
          '8))))
   (g$bytevector-s64-native-set!$5498$1Z2PAY
     g$bytevector-s64-native-set!$5609$1Z2PAY
     (case-lambda
       ((g$bytevector$5572$1Z2PAY g$k$5573$1Z2PAY g$n$5574$1Z2PAY)
        (bytevector-sint-set!
          g$bytevector$5572$1Z2PAY
          g$k$5573$1Z2PAY
          g$n$5574$1Z2PAY
          (g$native-endianness$5474$1Z2PAY)
          '8))))
   (g$bytevector-ieee-single-native-ref$5499$1Z2PAY
     g$bytevector-ieee-single-native-ref$5610$1Z2PAY
     (case-lambda
       ((g$bytevector$5575$1Z2PAY g$k$5576$1Z2PAY)
        (if (not (zero? (mod g$k$5576$1Z2PAY '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$5576$1Z2PAY)
          (bytevector-ieee-single-ref
            g$bytevector$5575$1Z2PAY
            g$k$5576$1Z2PAY
            (g$native-endianness$5474$1Z2PAY))))))
   (g$bytevector-ieee-double-native-ref$5500$1Z2PAY
     g$bytevector-ieee-double-native-ref$5611$1Z2PAY
     (case-lambda
       ((g$bytevector$5577$1Z2PAY g$k$5578$1Z2PAY)
        (if (not (zero? (mod g$k$5578$1Z2PAY '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$5578$1Z2PAY)
          (bytevector-ieee-double-ref
            g$bytevector$5577$1Z2PAY
            g$k$5578$1Z2PAY
            (g$native-endianness$5474$1Z2PAY))))))
   (g$bytevector-ieee-single-native-set!$5501$1Z2PAY
     g$bytevector-ieee-single-native-set!$5612$1Z2PAY
     (case-lambda
       ((g$bytevector$5579$1Z2PAY g$k$5580$1Z2PAY g$x$5581$1Z2PAY)
        (if (not (zero? (mod g$k$5580$1Z2PAY '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$5580$1Z2PAY)
          (bytevector-ieee-single-set!
            g$bytevector$5579$1Z2PAY
            g$k$5580$1Z2PAY
            g$x$5581$1Z2PAY
            (g$native-endianness$5474$1Z2PAY))))))
   (g$bytevector-ieee-double-native-set!$5502$1Z2PAY
     g$bytevector-ieee-double-native-set!$5613$1Z2PAY
     (case-lambda
       ((g$bytevector$5582$1Z2PAY g$k$5583$1Z2PAY g$x$5584$1Z2PAY)
        (if (not (zero? (mod g$k$5583$1Z2PAY '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$5583$1Z2PAY)
          (bytevector-ieee-double-set!
            g$bytevector$5582$1Z2PAY
            g$k$5583$1Z2PAY
            g$x$5584$1Z2PAY
            (g$native-endianness$5474$1Z2PAY)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$6624$5614$1Z2PAY
     g$6624$5709$1Z2PAY
     (make-record-type-descriptor
       '&condition
       '#f
       'g$6627$1Z2PAY
       '#f
       '#f
       '#()))
   (g$6626$5615$1Z2PAY g$6626$5710$1Z2PAY '#f)
   (g$6625$5616$1Z2PAY
     g$6625$5711$1Z2PAY
     (make-record-constructor-descriptor
       g$6624$5614$1Z2PAY
       '#f
       g$6626$5615$1Z2PAY))
   (g$&condition?$5617$1Z2PAY
     g$&condition?$5712$1Z2PAY
     (record-predicate g$6624$5614$1Z2PAY))
   (g$make-&condition$5618$1Z2PAY
     g$make-&condition$5713$1Z2PAY
     (record-constructor g$6625$5616$1Z2PAY))
   (g$&condition-rtd$5619$1Z2PAY
     g$&condition-rtd$5714$1Z2PAY
     g$6624$5614$1Z2PAY)
   (g$&condition-rcd$5620$1Z2PAY
     g$&condition-rcd$5715$1Z2PAY
     g$6625$5616$1Z2PAY)
   (g$6640$5621$1Z2PAY
     g$6640$5716$1Z2PAY
     (make-record-type-descriptor
       '&message
       g$6624$5614$1Z2PAY
       'g$6643$1Z2PAY
       '#f
       '#f
       '#((immutable message))))
   (g$6642$5622$1Z2PAY g$6642$5717$1Z2PAY '#f)
   (g$6641$5623$1Z2PAY
     g$6641$5718$1Z2PAY
     (make-record-constructor-descriptor
       g$6640$5621$1Z2PAY
       g$6625$5616$1Z2PAY
       g$6642$5622$1Z2PAY))
   (g$6639$5624$1Z2PAY
     g$6639$5719$1Z2PAY
     (record-predicate g$6640$5621$1Z2PAY))
   (g$make-message-condition$5625$1Z2PAY
     g$make-message-condition$5720$1Z2PAY
     (record-constructor g$6641$5623$1Z2PAY))
   (g$6638$5626$1Z2PAY
     g$6638$5721$1Z2PAY
     (record-accessor g$6640$5621$1Z2PAY '0))
   (g$message-condition?$5627$1Z2PAY
     g$message-condition?$5722$1Z2PAY
     (condition-predicate g$6640$5621$1Z2PAY))
   (g$condition-message$5628$1Z2PAY
     g$condition-message$5723$1Z2PAY
     (condition-accessor g$6640$5621$1Z2PAY g$6638$5626$1Z2PAY))
   (g$6656$5629$1Z2PAY
     g$6656$5724$1Z2PAY
     (make-record-type-descriptor
       '&warning
       g$6624$5614$1Z2PAY
       'g$6659$1Z2PAY
       '#f
       '#f
       '#()))
   (g$6658$5630$1Z2PAY g$6658$5725$1Z2PAY '#f)
   (g$6657$5631$1Z2PAY
     g$6657$5726$1Z2PAY
     (make-record-constructor-descriptor
       g$6656$5629$1Z2PAY
       g$6625$5616$1Z2PAY
       g$6658$5630$1Z2PAY))
   (g$6655$5632$1Z2PAY
     g$6655$5727$1Z2PAY
     (record-predicate g$6656$5629$1Z2PAY))
   (g$make-warning$5633$1Z2PAY
     g$make-warning$5728$1Z2PAY
     (record-constructor g$6657$5631$1Z2PAY))
   (g$warning?$5634$1Z2PAY
     g$warning?$5729$1Z2PAY
     (condition-predicate g$6656$5629$1Z2PAY))
   (g$6670$5635$1Z2PAY
     g$6670$5730$1Z2PAY
     (make-record-type-descriptor
       '&serious
       g$6624$5614$1Z2PAY
       'g$6673$1Z2PAY
       '#f
       '#f
       '#()))
   (g$6672$5636$1Z2PAY g$6672$5731$1Z2PAY '#f)
   (g$6671$5637$1Z2PAY
     g$6671$5732$1Z2PAY
     (make-record-constructor-descriptor
       g$6670$5635$1Z2PAY
       g$6625$5616$1Z2PAY
       g$6672$5636$1Z2PAY))
   (g$6669$5638$1Z2PAY
     g$6669$5733$1Z2PAY
     (record-predicate g$6670$5635$1Z2PAY))
   (g$make-serious-condition$5639$1Z2PAY
     g$make-serious-condition$5734$1Z2PAY
     (record-constructor g$6671$5637$1Z2PAY))
   (g$serious-condition?$5640$1Z2PAY
     g$serious-condition?$5735$1Z2PAY
     (condition-predicate g$6670$5635$1Z2PAY))
   (g$6684$5641$1Z2PAY
     g$6684$5736$1Z2PAY
     (make-record-type-descriptor
       '&error
       g$6670$5635$1Z2PAY
       'g$6687$1Z2PAY
       '#f
       '#f
       '#()))
   (g$6686$5642$1Z2PAY g$6686$5737$1Z2PAY '#f)
   (g$6685$5643$1Z2PAY
     g$6685$5738$1Z2PAY
     (make-record-constructor-descriptor
       g$6684$5641$1Z2PAY
       g$6671$5637$1Z2PAY
       g$6686$5642$1Z2PAY))
   (g$6683$5644$1Z2PAY
     g$6683$5739$1Z2PAY
     (record-predicate g$6684$5641$1Z2PAY))
   (g$make-error$5645$1Z2PAY
     g$make-error$5740$1Z2PAY
     (record-constructor g$6685$5643$1Z2PAY))
   (g$error?$5646$1Z2PAY
     g$error?$5741$1Z2PAY
     (condition-predicate g$6684$5641$1Z2PAY))
   (g$6698$5647$1Z2PAY
     g$6698$5742$1Z2PAY
     (make-record-type-descriptor
       '&violation
       g$6670$5635$1Z2PAY
       'g$6701$1Z2PAY
       '#f
       '#f
       '#()))
   (g$6700$5648$1Z2PAY g$6700$5743$1Z2PAY '#f)
   (g$6699$5649$1Z2PAY
     g$6699$5744$1Z2PAY
     (make-record-constructor-descriptor
       g$6698$5647$1Z2PAY
       g$6671$5637$1Z2PAY
       g$6700$5648$1Z2PAY))
   (g$6697$5650$1Z2PAY
     g$6697$5745$1Z2PAY
     (record-predicate g$6698$5647$1Z2PAY))
   (g$make-violation$5651$1Z2PAY
     g$make-violation$5746$1Z2PAY
     (record-constructor g$6699$5649$1Z2PAY))
   (g$violation?$5652$1Z2PAY
     g$violation?$5747$1Z2PAY
     (condition-predicate g$6698$5647$1Z2PAY))
   (g$6712$5653$1Z2PAY
     g$6712$5748$1Z2PAY
     (make-record-type-descriptor
       '&assertion
       g$6698$5647$1Z2PAY
       'g$6715$1Z2PAY
       '#f
       '#f
       '#()))
   (g$6714$5654$1Z2PAY g$6714$5749$1Z2PAY '#f)
   (g$6713$5655$1Z2PAY
     g$6713$5750$1Z2PAY
     (make-record-constructor-descriptor
       g$6712$5653$1Z2PAY
       g$6699$5649$1Z2PAY
       g$6714$5654$1Z2PAY))
   (g$6711$5656$1Z2PAY
     g$6711$5751$1Z2PAY
     (record-predicate g$6712$5653$1Z2PAY))
   (g$make-assertion-violation$5657$1Z2PAY
     g$make-assertion-violation$5752$1Z2PAY
     (record-constructor g$6713$5655$1Z2PAY))
   (g$assertion-violation?$5658$1Z2PAY
     g$assertion-violation?$5753$1Z2PAY
     (condition-predicate g$6712$5653$1Z2PAY))
   (g$6727$5659$1Z2PAY
     g$6727$5754$1Z2PAY
     (make-record-type-descriptor
       '&irritants
       g$6624$5614$1Z2PAY
       'g$6730$1Z2PAY
       '#f
       '#f
       '#((immutable irritants))))
   (g$6729$5660$1Z2PAY g$6729$5755$1Z2PAY '#f)
   (g$6728$5661$1Z2PAY
     g$6728$5756$1Z2PAY
     (make-record-constructor-descriptor
       g$6727$5659$1Z2PAY
       g$6625$5616$1Z2PAY
       g$6729$5660$1Z2PAY))
   (g$6726$5662$1Z2PAY
     g$6726$5757$1Z2PAY
     (record-predicate g$6727$5659$1Z2PAY))
   (g$make-irritants-condition$5663$1Z2PAY
     g$make-irritants-condition$5758$1Z2PAY
     (record-constructor g$6728$5661$1Z2PAY))
   (g$6725$5664$1Z2PAY
     g$6725$5759$1Z2PAY
     (record-accessor g$6727$5659$1Z2PAY '0))
   (g$irritants-condition?$5665$1Z2PAY
     g$irritants-condition?$5760$1Z2PAY
     (condition-predicate g$6727$5659$1Z2PAY))
   (g$condition-irritants$5666$1Z2PAY
     g$condition-irritants$5761$1Z2PAY
     (condition-accessor g$6727$5659$1Z2PAY g$6725$5664$1Z2PAY))
   (g$6744$5667$1Z2PAY
     g$6744$5762$1Z2PAY
     (make-record-type-descriptor
       '&who
       g$6624$5614$1Z2PAY
       'g$6747$1Z2PAY
       '#f
       '#f
       '#((immutable who))))
   (g$6746$5668$1Z2PAY g$6746$5763$1Z2PAY '#f)
   (g$6745$5669$1Z2PAY
     g$6745$5764$1Z2PAY
     (make-record-constructor-descriptor
       g$6744$5667$1Z2PAY
       g$6625$5616$1Z2PAY
       g$6746$5668$1Z2PAY))
   (g$6743$5670$1Z2PAY
     g$6743$5765$1Z2PAY
     (record-predicate g$6744$5667$1Z2PAY))
   (g$make-who-condition$5671$1Z2PAY
     g$make-who-condition$5766$1Z2PAY
     (record-constructor g$6745$5669$1Z2PAY))
   (g$6742$5672$1Z2PAY
     g$6742$5767$1Z2PAY
     (record-accessor g$6744$5667$1Z2PAY '0))
   (g$who-condition?$5673$1Z2PAY
     g$who-condition?$5768$1Z2PAY
     (condition-predicate g$6744$5667$1Z2PAY))
   (g$condition-who$5674$1Z2PAY
     g$condition-who$5769$1Z2PAY
     (condition-accessor g$6744$5667$1Z2PAY g$6742$5672$1Z2PAY))
   (g$6760$5675$1Z2PAY
     g$6760$5770$1Z2PAY
     (make-record-type-descriptor
       '&non-continuable
       g$6698$5647$1Z2PAY
       'g$6763$1Z2PAY
       '#f
       '#f
       '#()))
   (g$6762$5676$1Z2PAY g$6762$5771$1Z2PAY '#f)
   (g$6761$5677$1Z2PAY
     g$6761$5772$1Z2PAY
     (make-record-constructor-descriptor
       g$6760$5675$1Z2PAY
       g$6699$5649$1Z2PAY
       g$6762$5676$1Z2PAY))
   (g$6759$5678$1Z2PAY
     g$6759$5773$1Z2PAY
     (record-predicate g$6760$5675$1Z2PAY))
   (g$make-non-continuable-violation$5679$1Z2PAY
     g$make-non-continuable-violation$5774$1Z2PAY
     (record-constructor g$6761$5677$1Z2PAY))
   (g$non-continuable-violation?$5680$1Z2PAY
     g$non-continuable-violation?$5775$1Z2PAY
     (condition-predicate g$6760$5675$1Z2PAY))
   (g$6774$5681$1Z2PAY
     g$6774$5776$1Z2PAY
     (make-record-type-descriptor
       '&implementation-restriction
       g$6698$5647$1Z2PAY
       'g$6777$1Z2PAY
       '#f
       '#f
       '#()))
   (g$6776$5682$1Z2PAY g$6776$5777$1Z2PAY '#f)
   (g$6775$5683$1Z2PAY
     g$6775$5778$1Z2PAY
     (make-record-constructor-descriptor
       g$6774$5681$1Z2PAY
       g$6699$5649$1Z2PAY
       g$6776$5682$1Z2PAY))
   (g$6773$5684$1Z2PAY
     g$6773$5779$1Z2PAY
     (record-predicate g$6774$5681$1Z2PAY))
   (g$make-implementation-restriction-violation$5685$1Z2PAY
     g$make-implementation-restriction-violation$5780$1Z2PAY
     (record-constructor g$6775$5683$1Z2PAY))
   (g$implementation-restriction-violation?$5686$1Z2PAY
     g$implementation-restriction-violation?$5781$1Z2PAY
     (condition-predicate g$6774$5681$1Z2PAY))
   (g$6788$5687$1Z2PAY
     g$6788$5782$1Z2PAY
     (make-record-type-descriptor
       '&lexical
       g$6698$5647$1Z2PAY
       'g$6791$1Z2PAY
       '#f
       '#f
       '#()))
   (g$6790$5688$1Z2PAY g$6790$5783$1Z2PAY '#f)
   (g$6789$5689$1Z2PAY
     g$6789$5784$1Z2PAY
     (make-record-constructor-descriptor
       g$6788$5687$1Z2PAY
       g$6699$5649$1Z2PAY
       g$6790$5688$1Z2PAY))
   (g$6787$5690$1Z2PAY
     g$6787$5785$1Z2PAY
     (record-predicate g$6788$5687$1Z2PAY))
   (g$make-lexical-violation$5691$1Z2PAY
     g$make-lexical-violation$5786$1Z2PAY
     (record-constructor g$6789$5689$1Z2PAY))
   (g$lexical-violation?$5692$1Z2PAY
     g$lexical-violation?$5787$1Z2PAY
     (condition-predicate g$6788$5687$1Z2PAY))
   (g$6804$5693$1Z2PAY
     g$6804$5788$1Z2PAY
     (make-record-type-descriptor
       '&syntax
       g$6698$5647$1Z2PAY
       'g$6807$1Z2PAY
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6806$5694$1Z2PAY g$6806$5789$1Z2PAY '#f)
   (g$6805$5695$1Z2PAY
     g$6805$5790$1Z2PAY
     (make-record-constructor-descriptor
       g$6804$5693$1Z2PAY
       g$6699$5649$1Z2PAY
       g$6806$5694$1Z2PAY))
   (g$6803$5696$1Z2PAY
     g$6803$5791$1Z2PAY
     (record-predicate g$6804$5693$1Z2PAY))
   (g$make-syntax-violation$5697$1Z2PAY
     g$make-syntax-violation$5792$1Z2PAY
     (record-constructor g$6805$5695$1Z2PAY))
   (g$6801$5698$1Z2PAY
     g$6801$5793$1Z2PAY
     (record-accessor g$6804$5693$1Z2PAY '0))
   (g$6802$5699$1Z2PAY
     g$6802$5794$1Z2PAY
     (record-accessor g$6804$5693$1Z2PAY '1))
   (g$syntax-violation?$5700$1Z2PAY
     g$syntax-violation?$5795$1Z2PAY
     (condition-predicate g$6804$5693$1Z2PAY))
   (g$syntax-violation-form$5701$1Z2PAY
     g$syntax-violation-form$5796$1Z2PAY
     (condition-accessor g$6804$5693$1Z2PAY g$6801$5698$1Z2PAY))
   (g$syntax-violation-subform$5702$1Z2PAY
     g$syntax-violation-subform$5797$1Z2PAY
     (condition-accessor g$6804$5693$1Z2PAY g$6802$5699$1Z2PAY))
   (g$6822$5703$1Z2PAY
     g$6822$5798$1Z2PAY
     (make-record-type-descriptor
       '&undefined
       g$6698$5647$1Z2PAY
       'g$6825$1Z2PAY
       '#f
       '#f
       '#()))
   (g$6824$5704$1Z2PAY g$6824$5799$1Z2PAY '#f)
   (g$6823$5705$1Z2PAY
     g$6823$5800$1Z2PAY
     (make-record-constructor-descriptor
       g$6822$5703$1Z2PAY
       g$6699$5649$1Z2PAY
       g$6824$5704$1Z2PAY))
   (g$6821$5706$1Z2PAY
     g$6821$5801$1Z2PAY
     (record-predicate g$6822$5703$1Z2PAY))
   (g$make-undefined-violation$5707$1Z2PAY
     g$make-undefined-violation$5802$1Z2PAY
     (record-constructor g$6823$5705$1Z2PAY))
   (g$undefined-violation?$5708$1Z2PAY
     g$undefined-violation?$5803$1Z2PAY
     (condition-predicate g$6822$5703$1Z2PAY)))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$5804$1Z2PAY
     g$append!$5810$1Z2PAY
     (case-lambda
       ((g$a$5805$1Z2PAY . g$b$5806$1Z2PAY)
        (if (null? g$a$5805$1Z2PAY)
          g$b$5806$1Z2PAY
          (if (null? g$b$5806$1Z2PAY)
            g$a$5805$1Z2PAY
            (begin
              ((letrec ((g$f$5807$1Z2PAY
                          (case-lambda
                            ((g$a$5808$1Z2PAY)
                             ((case-lambda
                                ((g$n$5809$1Z2PAY)
                                 (if (null? g$n$5809$1Z2PAY)
                                   (set-cdr! g$a$5808$1Z2PAY g$b$5806$1Z2PAY)
                                   (g$f$5807$1Z2PAY g$n$5809$1Z2PAY))))
                              (cdr g$a$5808$1Z2PAY))))))
                 g$f$5807$1Z2PAY)
               g$a$5805$1Z2PAY)
              g$a$5805$1Z2PAY)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$sign$5811$1Z2PAY
     g$sign$5829$1Z2PAY
     (case-lambda
       ((g$n$5817$1Z2PAY)
        (if (> g$n$5817$1Z2PAY '0) '1 (if (< g$n$5817$1Z2PAY '0) '-1 '0)))))
   (g$quotient$5812$1Z2PAY
     g$quotient$5830$1Z2PAY
     (case-lambda
       ((g$n1$5818$1Z2PAY g$n2$5819$1Z2PAY)
        (begin
          (if (not (integer-valued? g$n1$5818$1Z2PAY))
            (assertion-violation 'quotient '"not an integer" g$n1$5818$1Z2PAY)
            (void))
          (if (not (integer-valued? g$n2$5819$1Z2PAY))
            (assertion-violation 'quotient '"not an integer" g$n2$5819$1Z2PAY)
            (void))
          (* (g$sign$5811$1Z2PAY g$n1$5818$1Z2PAY)
             (g$sign$5811$1Z2PAY g$n2$5819$1Z2PAY)
             (div (abs g$n1$5818$1Z2PAY) (abs g$n2$5819$1Z2PAY)))))))
   (g$remainder$5813$1Z2PAY
     g$remainder$5831$1Z2PAY
     (case-lambda
       ((g$n1$5820$1Z2PAY g$n2$5821$1Z2PAY)
        (begin
          (if (not (integer-valued? g$n1$5820$1Z2PAY))
            (assertion-violation 'remainder '"not an integer" g$n1$5820$1Z2PAY)
            (void))
          (if (not (integer-valued? g$n2$5821$1Z2PAY))
            (assertion-violation 'remainder '"not an integer" g$n2$5821$1Z2PAY)
            (void))
          (* (g$sign$5811$1Z2PAY g$n1$5820$1Z2PAY)
             (mod (abs g$n1$5820$1Z2PAY) (abs g$n2$5821$1Z2PAY)))))))
   (g$modulo$5814$1Z2PAY
     g$modulo$5832$1Z2PAY
     (case-lambda
       ((g$n1$5822$1Z2PAY g$n2$5823$1Z2PAY)
        (begin
          (if (not (integer-valued? g$n1$5822$1Z2PAY))
            (assertion-violation 'modulo '"not an integer" g$n1$5822$1Z2PAY)
            (void))
          (if (not (integer-valued? g$n2$5823$1Z2PAY))
            (assertion-violation 'modulo '"not an integer" g$n2$5823$1Z2PAY)
            (void))
          (* (g$sign$5811$1Z2PAY g$n2$5823$1Z2PAY)
             (mod (* (g$sign$5811$1Z2PAY g$n2$5823$1Z2PAY) g$n1$5822$1Z2PAY)
                  (abs g$n2$5823$1Z2PAY)))))))
   (g$make-promise$5815$1Z2PAY
     g$make-promise$5833$1Z2PAY
     (case-lambda
       ((g$proc$5824$1Z2PAY)
        ((case-lambda
           ((g$result-ready?$5825$1Z2PAY g$result$5826$1Z2PAY)
            (case-lambda
              (()
               (if g$result-ready?$5825$1Z2PAY
                 g$result$5826$1Z2PAY
                 ((case-lambda
                    ((g$x$5827$1Z2PAY)
                     (if g$result-ready?$5825$1Z2PAY
                       g$result$5826$1Z2PAY
                       (begin
                         (set! g$result-ready?$5825$1Z2PAY '#t)
                         (set! g$result$5826$1Z2PAY g$x$5827$1Z2PAY)
                         g$result$5826$1Z2PAY))))
                  (g$proc$5824$1Z2PAY)))))))
         '#f
         '#f))))
   (g$force$5816$1Z2PAY
     g$force$5834$1Z2PAY
     (case-lambda ((g$object$5828$1Z2PAY) (g$object$5828$1Z2PAY)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$5835$1Z2PAY
     g$split$5861$1Z2PAY
     (case-lambda
       ((g$ls$5838$1Z2PAY)
        ((letrec ((g$loop$5839$1Z2PAY
                    (case-lambda
                      ((g$rest$5840$1Z2PAY
                         g$left$5841$1Z2PAY
                         g$right$5842$1Z2PAY)
                       (if (null? g$rest$5840$1Z2PAY)
                         (cons g$left$5841$1Z2PAY g$right$5842$1Z2PAY)
                         (if (null? (cdr g$rest$5840$1Z2PAY))
                           (cons
                             (cons (car g$rest$5840$1Z2PAY) g$left$5841$1Z2PAY)
                             g$right$5842$1Z2PAY)
                           (g$loop$5839$1Z2PAY
                             (g$cddr$5180$1Z2PAY g$rest$5840$1Z2PAY)
                             (cons (car g$rest$5840$1Z2PAY) g$left$5841$1Z2PAY)
                             (cons
                               (g$cadr$5178$1Z2PAY g$rest$5840$1Z2PAY)
                               g$right$5842$1Z2PAY))))))))
           g$loop$5839$1Z2PAY)
         g$ls$5838$1Z2PAY
         '()
         '()))))
   (g$reverse-it$5836$1Z2PAY
     g$reverse-it$5862$1Z2PAY
     (case-lambda
       ((g$head$5843$1Z2PAY g$tail$5844$1Z2PAY)
        (if (null? g$head$5843$1Z2PAY)
          g$tail$5844$1Z2PAY
          ((case-lambda
             ((g$hd$5845$1Z2PAY g$tl$5846$1Z2PAY)
              (g$reverse-it$5836$1Z2PAY
                g$tl$5846$1Z2PAY
                (cons g$hd$5845$1Z2PAY g$tail$5844$1Z2PAY))))
           (car g$head$5843$1Z2PAY)
           (cdr g$head$5843$1Z2PAY))))))
   (g$list-sort$5837$1Z2PAY
     g$list-sort$5863$1Z2PAY
     (case-lambda
       ((g$precedes?$5847$1Z2PAY g$ls$5848$1Z2PAY)
        ((case-lambda
           ((g$merge$5849$1Z2PAY)
            ((case-lambda
               (()
                (if (null? g$ls$5848$1Z2PAY)
                  '()
                  ((letrec ((g$helper$5850$1Z2PAY
                              (case-lambda
                                ((g$piece$5851$1Z2PAY)
                                 (if (null? (cdr g$piece$5851$1Z2PAY))
                                   g$piece$5851$1Z2PAY
                                   ((case-lambda
                                      ((g$parts$5852$1Z2PAY)
                                       (g$merge$5849$1Z2PAY
                                         (g$helper$5850$1Z2PAY
                                           (car g$parts$5852$1Z2PAY))
                                         (g$helper$5850$1Z2PAY
                                           (cdr g$parts$5852$1Z2PAY)))))
                                    (g$split$5835$1Z2PAY
                                      g$piece$5851$1Z2PAY)))))))
                     g$helper$5850$1Z2PAY)
                   g$ls$5848$1Z2PAY)))))))
         (case-lambda
           ((g$list-1$5853$1Z2PAY g$list-2$5854$1Z2PAY)
            ((letrec ((g$loop$5855$1Z2PAY
                        (case-lambda
                          ((g$source-1$5856$1Z2PAY
                             g$source-2$5857$1Z2PAY
                             g$so-far$5858$1Z2PAY)
                           (if (null? g$source-1$5856$1Z2PAY)
                             (g$reverse-it$5836$1Z2PAY
                               g$so-far$5858$1Z2PAY
                               g$source-2$5857$1Z2PAY)
                             (if (null? g$source-2$5857$1Z2PAY)
                               (g$reverse-it$5836$1Z2PAY
                                 g$so-far$5858$1Z2PAY
                                 g$source-1$5856$1Z2PAY)
                               ((case-lambda
                                  ((g$car-1$5859$1Z2PAY g$car-2$5860$1Z2PAY)
                                   (if (g$precedes?$5847$1Z2PAY
                                         g$car-2$5860$1Z2PAY
                                         g$car-1$5859$1Z2PAY)
                                     (g$loop$5855$1Z2PAY
                                       g$source-1$5856$1Z2PAY
                                       (cdr g$source-2$5857$1Z2PAY)
                                       (cons
                                         g$car-2$5860$1Z2PAY
                                         g$so-far$5858$1Z2PAY))
                                     (g$loop$5855$1Z2PAY
                                       g$source-2$5857$1Z2PAY
                                       (cdr g$source-1$5856$1Z2PAY)
                                       (cons
                                         g$car-1$5859$1Z2PAY
                                         g$so-far$5858$1Z2PAY)))))
                                (car g$source-1$5856$1Z2PAY)
                                (car g$source-2$5857$1Z2PAY))))))))
               g$loop$5855$1Z2PAY)
             g$list-1$5853$1Z2PAY
             g$list-2$5854$1Z2PAY
             '()))))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$5870$1Z2PAY
     g$string-ci=?$5936$1Z2PAY
     (case-lambda
       ((g$a$5886$1Z2PAY g$b$5887$1Z2PAY . g$rest$5888$1Z2PAY)
        (begin
          (if (not (string? g$a$5886$1Z2PAY))
            (assertion-violation 'string-ci=? '"not a string" g$a$5886$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5889$1Z2PAY)
               (begin
                 (if (not (string? g$x$5889$1Z2PAY))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$5889$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5890$1Z2PAY)
                     (begin
                       (set! g$a$5886$1Z2PAY g$x$5889$1Z2PAY)
                       g$r$5890$1Z2PAY)))
                  (= (string-ci-compare g$a$5886$1Z2PAY g$x$5889$1Z2PAY) '0)))))
            (cons g$b$5887$1Z2PAY g$rest$5888$1Z2PAY))))))
   (g$string-ci<?$5871$1Z2PAY
     g$string-ci<?$5937$1Z2PAY
     (case-lambda
       ((g$a$5891$1Z2PAY g$b$5892$1Z2PAY . g$rest$5893$1Z2PAY)
        (begin
          (if (not (string? g$a$5891$1Z2PAY))
            (assertion-violation 'string-ci<? '"not a string" g$a$5891$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5894$1Z2PAY)
               (begin
                 (if (not (string? g$x$5894$1Z2PAY))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$5894$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5895$1Z2PAY)
                     (begin
                       (set! g$a$5891$1Z2PAY g$x$5894$1Z2PAY)
                       g$r$5895$1Z2PAY)))
                  (< (string-ci-compare g$a$5891$1Z2PAY g$x$5894$1Z2PAY) '0)))))
            (cons g$b$5892$1Z2PAY g$rest$5893$1Z2PAY))))))
   (g$string-ci>?$5872$1Z2PAY
     g$string-ci>?$5938$1Z2PAY
     (case-lambda
       ((g$a$5896$1Z2PAY g$b$5897$1Z2PAY . g$rest$5898$1Z2PAY)
        (begin
          (if (not (string? g$a$5896$1Z2PAY))
            (assertion-violation 'string-ci>? '"not a string" g$a$5896$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5899$1Z2PAY)
               (begin
                 (if (not (string? g$x$5899$1Z2PAY))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$5899$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5900$1Z2PAY)
                     (begin
                       (set! g$a$5896$1Z2PAY g$x$5899$1Z2PAY)
                       g$r$5900$1Z2PAY)))
                  (> (string-ci-compare g$a$5896$1Z2PAY g$x$5899$1Z2PAY) '0)))))
            (cons g$b$5897$1Z2PAY g$rest$5898$1Z2PAY))))))
   (g$string-ci<=?$5873$1Z2PAY
     g$string-ci<=?$5939$1Z2PAY
     (case-lambda
       ((g$a$5901$1Z2PAY g$b$5902$1Z2PAY . g$rest$5903$1Z2PAY)
        (begin
          (if (not (string? g$a$5901$1Z2PAY))
            (assertion-violation 'string-ci<=? '"not a string" g$a$5901$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5904$1Z2PAY)
               (begin
                 (if (not (string? g$x$5904$1Z2PAY))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$5904$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5905$1Z2PAY)
                     (begin
                       (set! g$a$5901$1Z2PAY g$x$5904$1Z2PAY)
                       g$r$5905$1Z2PAY)))
                  (<= (string-ci-compare g$a$5901$1Z2PAY g$x$5904$1Z2PAY)
                      '0)))))
            (cons g$b$5902$1Z2PAY g$rest$5903$1Z2PAY))))))
   (g$string-ci>=?$5874$1Z2PAY
     g$string-ci>=?$5940$1Z2PAY
     (case-lambda
       ((g$a$5906$1Z2PAY g$b$5907$1Z2PAY . g$rest$5908$1Z2PAY)
        (begin
          (if (not (string? g$a$5906$1Z2PAY))
            (assertion-violation 'string-ci>=? '"not a string" g$a$5906$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5909$1Z2PAY)
               (begin
                 (if (not (string? g$x$5909$1Z2PAY))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$5909$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5910$1Z2PAY)
                     (begin
                       (set! g$a$5906$1Z2PAY g$x$5909$1Z2PAY)
                       g$r$5910$1Z2PAY)))
                  (>= (string-ci-compare g$a$5906$1Z2PAY g$x$5909$1Z2PAY)
                      '0)))))
            (cons g$b$5907$1Z2PAY g$rest$5908$1Z2PAY))))))
   (g$char-ci=?$5881$1Z2PAY
     g$char-ci=?$5941$1Z2PAY
     (case-lambda
       ((g$a$5911$1Z2PAY g$b$5912$1Z2PAY . g$rest$5913$1Z2PAY)
        (begin
          (if (not (char? g$a$5911$1Z2PAY))
            (assertion-violation 'char-ci=? '"not a char" g$a$5911$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5914$1Z2PAY)
               (begin
                 (if (not (char? g$x$5914$1Z2PAY))
                   (assertion-violation
                     'char-ci=?
                     '"not a char"
                     g$x$5914$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5915$1Z2PAY)
                     (begin
                       (set! g$a$5911$1Z2PAY g$x$5914$1Z2PAY)
                       g$r$5915$1Z2PAY)))
                  (= (char->integer (char-upcase g$a$5911$1Z2PAY))
                     (char->integer (char-upcase g$x$5914$1Z2PAY)))))))
            (cons g$b$5912$1Z2PAY g$rest$5913$1Z2PAY))))))
   (g$char-ci<?$5882$1Z2PAY
     g$char-ci<?$5942$1Z2PAY
     (case-lambda
       ((g$a$5916$1Z2PAY g$b$5917$1Z2PAY . g$rest$5918$1Z2PAY)
        (begin
          (if (not (char? g$a$5916$1Z2PAY))
            (assertion-violation 'char-ci<? '"not a char" g$a$5916$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5919$1Z2PAY)
               (begin
                 (if (not (char? g$x$5919$1Z2PAY))
                   (assertion-violation
                     'char-ci<?
                     '"not a char"
                     g$x$5919$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5920$1Z2PAY)
                     (begin
                       (set! g$a$5916$1Z2PAY g$x$5919$1Z2PAY)
                       g$r$5920$1Z2PAY)))
                  (< (char->integer (char-upcase g$a$5916$1Z2PAY))
                     (char->integer (char-upcase g$x$5919$1Z2PAY)))))))
            (cons g$b$5917$1Z2PAY g$rest$5918$1Z2PAY))))))
   (g$char-ci>?$5883$1Z2PAY
     g$char-ci>?$5943$1Z2PAY
     (case-lambda
       ((g$a$5921$1Z2PAY g$b$5922$1Z2PAY . g$rest$5923$1Z2PAY)
        (begin
          (if (not (char? g$a$5921$1Z2PAY))
            (assertion-violation 'char-ci>? '"not a char" g$a$5921$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5924$1Z2PAY)
               (begin
                 (if (not (char? g$x$5924$1Z2PAY))
                   (assertion-violation
                     'char-ci>?
                     '"not a char"
                     g$x$5924$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5925$1Z2PAY)
                     (begin
                       (set! g$a$5921$1Z2PAY g$x$5924$1Z2PAY)
                       g$r$5925$1Z2PAY)))
                  (> (char->integer (char-upcase g$a$5921$1Z2PAY))
                     (char->integer (char-upcase g$x$5924$1Z2PAY)))))))
            (cons g$b$5922$1Z2PAY g$rest$5923$1Z2PAY))))))
   (g$char-ci<=?$5884$1Z2PAY
     g$char-ci<=?$5944$1Z2PAY
     (case-lambda
       ((g$a$5926$1Z2PAY g$b$5927$1Z2PAY . g$rest$5928$1Z2PAY)
        (begin
          (if (not (char? g$a$5926$1Z2PAY))
            (assertion-violation 'char-ci<=? '"not a char" g$a$5926$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5929$1Z2PAY)
               (begin
                 (if (not (char? g$x$5929$1Z2PAY))
                   (assertion-violation
                     'char-ci<=?
                     '"not a char"
                     g$x$5929$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5930$1Z2PAY)
                     (begin
                       (set! g$a$5926$1Z2PAY g$x$5929$1Z2PAY)
                       g$r$5930$1Z2PAY)))
                  (<= (char->integer (char-upcase g$a$5926$1Z2PAY))
                      (char->integer (char-upcase g$x$5929$1Z2PAY)))))))
            (cons g$b$5927$1Z2PAY g$rest$5928$1Z2PAY))))))
   (g$char-ci>=?$5885$1Z2PAY
     g$char-ci>=?$5945$1Z2PAY
     (case-lambda
       ((g$a$5931$1Z2PAY g$b$5932$1Z2PAY . g$rest$5933$1Z2PAY)
        (begin
          (if (not (char? g$a$5931$1Z2PAY))
            (assertion-violation 'char-ci>=? '"not a char" g$a$5931$1Z2PAY)
            (void))
          (g$for-all$5014$1Z2PAY
            (case-lambda
              ((g$x$5934$1Z2PAY)
               (begin
                 (if (not (char? g$x$5934$1Z2PAY))
                   (assertion-violation
                     'char-ci>=?
                     '"not a char"
                     g$x$5934$1Z2PAY)
                   (void))
                 ((case-lambda
                    ((g$r$5935$1Z2PAY)
                     (begin
                       (set! g$a$5931$1Z2PAY g$x$5934$1Z2PAY)
                       g$r$5935$1Z2PAY)))
                  (>= (char->integer (char-upcase g$a$5931$1Z2PAY))
                      (char->integer (char-upcase g$x$5934$1Z2PAY)))))))
            (cons g$b$5932$1Z2PAY g$rest$5933$1Z2PAY)))))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$5946$1Z2PAY
     g$bitwise-if$5993$1Z2PAY
     (case-lambda
       ((g$ei1$5953$1Z2PAY g$ei2$5954$1Z2PAY g$ei3$5955$1Z2PAY)
        (bitwise-ior
          (bitwise-and g$ei1$5953$1Z2PAY g$ei2$5954$1Z2PAY)
          (bitwise-and (bitwise-not g$ei1$5953$1Z2PAY) g$ei3$5955$1Z2PAY)))))
   (g$bitwise-copy-bit$5947$1Z2PAY
     g$bitwise-copy-bit$5994$1Z2PAY
     (case-lambda
       ((g$ei1$5956$1Z2PAY g$ei2$5957$1Z2PAY g$ei3$5958$1Z2PAY)
        ((case-lambda
           ((g$mask$5959$1Z2PAY)
            ((case-lambda
               (()
                (g$bitwise-if$5946$1Z2PAY
                  g$mask$5959$1Z2PAY
                  (g$bitwise-arithmetic-shift-left$5950$1Z2PAY
                    g$ei3$5958$1Z2PAY
                    g$ei2$5957$1Z2PAY)
                  g$ei1$5956$1Z2PAY))))))
         (g$bitwise-arithmetic-shift-left$5950$1Z2PAY '1 g$ei2$5957$1Z2PAY)))))
   (g$bitwise-bit-field$5948$1Z2PAY
     g$bitwise-bit-field$5995$1Z2PAY
     (case-lambda
       ((g$ei1$5960$1Z2PAY g$ei2$5961$1Z2PAY g$ei3$5962$1Z2PAY)
        ((case-lambda
           ((g$mask$5963$1Z2PAY)
            (g$bitwise-arithmetic-shift-right$5951$1Z2PAY
              (bitwise-and g$ei1$5960$1Z2PAY g$mask$5963$1Z2PAY)
              g$ei2$5961$1Z2PAY)))
         (bitwise-not
           (g$bitwise-arithmetic-shift-left$5950$1Z2PAY
             '-1
             g$ei3$5962$1Z2PAY))))))
   (g$bitwise-copy-bit-field$5949$1Z2PAY
     g$bitwise-copy-bit-field$5996$1Z2PAY
     (case-lambda
       ((g$ei1$5964$1Z2PAY
          g$ei2$5965$1Z2PAY
          g$ei3$5966$1Z2PAY
          g$ei4$5967$1Z2PAY)
        ((case-lambda
           ((g$to$5968$1Z2PAY)
            ((case-lambda
               ((g$start$5969$1Z2PAY)
                ((case-lambda
                   ((g$end$5970$1Z2PAY)
                    ((case-lambda
                       ((g$from$5971$1Z2PAY)
                        ((case-lambda
                           ((g$mask1$5972$1Z2PAY)
                            ((case-lambda
                               ((g$mask2$5973$1Z2PAY)
                                ((case-lambda
                                   ((g$mask$5974$1Z2PAY)
                                    ((case-lambda
                                       (()
                                        (g$bitwise-if$5946$1Z2PAY
                                          g$mask$5974$1Z2PAY
                                          (g$bitwise-arithmetic-shift-left$5950$1Z2PAY
                                            g$from$5971$1Z2PAY
                                            g$start$5969$1Z2PAY)
                                          g$to$5968$1Z2PAY))))))
                                 (bitwise-and
                                   g$mask1$5972$1Z2PAY
                                   g$mask2$5973$1Z2PAY))))
                             (bitwise-not
                               (g$bitwise-arithmetic-shift-left$5950$1Z2PAY
                                 '-1
                                 g$end$5970$1Z2PAY)))))
                         (g$bitwise-arithmetic-shift-left$5950$1Z2PAY
                           '-1
                           g$start$5969$1Z2PAY))))
                     g$ei4$5967$1Z2PAY)))
                 g$ei3$5966$1Z2PAY)))
             g$ei2$5965$1Z2PAY)))
         g$ei1$5964$1Z2PAY))))
   (g$bitwise-arithmetic-shift-left$5950$1Z2PAY
     g$bitwise-arithmetic-shift-left$5997$1Z2PAY
     (case-lambda
       ((g$ei1$5975$1Z2PAY g$ei2$5976$1Z2PAY)
        (bitwise-arithmetic-shift g$ei1$5975$1Z2PAY g$ei2$5976$1Z2PAY))))
   (g$bitwise-arithmetic-shift-right$5951$1Z2PAY
     g$bitwise-arithmetic-shift-right$5998$1Z2PAY
     (case-lambda
       ((g$ei1$5977$1Z2PAY g$ei2$5978$1Z2PAY)
        (bitwise-arithmetic-shift g$ei1$5977$1Z2PAY (- g$ei2$5978$1Z2PAY)))))
   (g$bitwise-rotate-bit-field$5952$1Z2PAY
     g$bitwise-rotate-bit-field$5999$1Z2PAY
     (case-lambda
       ((g$ei1$5979$1Z2PAY
          g$ei2$5980$1Z2PAY
          g$ei3$5981$1Z2PAY
          g$ei4$5982$1Z2PAY)
        ((case-lambda
           ((g$n$5983$1Z2PAY)
            ((case-lambda
               ((g$start$5984$1Z2PAY)
                ((case-lambda
                   ((g$end$5985$1Z2PAY)
                    ((case-lambda
                       ((g$count$5986$1Z2PAY)
                        ((case-lambda
                           ((g$width$5987$1Z2PAY)
                            ((case-lambda
                               (()
                                (if (positive? g$width$5987$1Z2PAY)
                                  ((case-lambda
                                     ((g$count$5988$1Z2PAY)
                                      ((case-lambda
                                         ((g$field0$5989$1Z2PAY)
                                          ((case-lambda
                                             ((g$field1$5990$1Z2PAY)
                                              ((case-lambda
                                                 ((g$field2$5991$1Z2PAY)
                                                  ((case-lambda
                                                     ((g$field$5992$1Z2PAY)
                                                      ((case-lambda
                                                         (()
                                                          (g$bitwise-copy-bit-field$5949$1Z2PAY
                                                            g$n$5983$1Z2PAY
                                                            g$start$5984$1Z2PAY
                                                            g$end$5985$1Z2PAY
                                                            g$field$5992$1Z2PAY))))))
                                                   (bitwise-ior
                                                     g$field1$5990$1Z2PAY
                                                     g$field2$5991$1Z2PAY))))
                                               (g$bitwise-arithmetic-shift-right$5951$1Z2PAY
                                                 g$field0$5989$1Z2PAY
                                                 (- g$width$5987$1Z2PAY
                                                    g$count$5988$1Z2PAY)))))
                                           (g$bitwise-arithmetic-shift-left$5950$1Z2PAY
                                             g$field0$5989$1Z2PAY
                                             g$count$5988$1Z2PAY))))
                                       (g$bitwise-bit-field$5948$1Z2PAY
                                         g$n$5983$1Z2PAY
                                         g$start$5984$1Z2PAY
                                         g$end$5985$1Z2PAY))))
                                   (mod g$count$5986$1Z2PAY
                                        g$width$5987$1Z2PAY))
                                  g$n$5983$1Z2PAY))))))
                         (- g$end$5985$1Z2PAY g$start$5984$1Z2PAY))))
                     g$ei4$5982$1Z2PAY)))
                 g$ei3$5981$1Z2PAY)))
             g$ei2$5980$1Z2PAY)))
         g$ei1$5979$1Z2PAY)))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fxif$6000$1Z2PAY
     g$fxif$6047$1Z2PAY
     (case-lambda
       ((g$fx1$6007$1Z2PAY g$fx2$6008$1Z2PAY g$fx3$6009$1Z2PAY)
        (fxior
          (fxand g$fx1$6007$1Z2PAY g$fx2$6008$1Z2PAY)
          (fxand (fxnot g$fx1$6007$1Z2PAY) g$fx3$6009$1Z2PAY)))))
   (g$fxcopy-bit$6001$1Z2PAY
     g$fxcopy-bit$6048$1Z2PAY
     (case-lambda
       ((g$fx1$6010$1Z2PAY g$fx2$6011$1Z2PAY g$fx3$6012$1Z2PAY)
        ((case-lambda
           ((g$mask$6013$1Z2PAY)
            ((case-lambda
               (()
                (g$fxif$6000$1Z2PAY
                  g$mask$6013$1Z2PAY
                  (g$fxarithmetic-shift-left$6004$1Z2PAY
                    g$fx3$6012$1Z2PAY
                    g$fx2$6011$1Z2PAY)
                  g$fx1$6010$1Z2PAY))))))
         (g$fxarithmetic-shift-left$6004$1Z2PAY '1 g$fx2$6011$1Z2PAY)))))
   (g$fxbit-field$6002$1Z2PAY
     g$fxbit-field$6049$1Z2PAY
     (case-lambda
       ((g$fx1$6014$1Z2PAY g$fx2$6015$1Z2PAY g$fx3$6016$1Z2PAY)
        ((case-lambda
           ((g$mask$6017$1Z2PAY)
            ((case-lambda
               (()
                (g$fxarithmetic-shift-right$6005$1Z2PAY
                  (fxand g$fx1$6014$1Z2PAY g$mask$6017$1Z2PAY)
                  g$fx2$6015$1Z2PAY))))))
         (fxnot
           (g$fxarithmetic-shift-left$6004$1Z2PAY '-1 g$fx3$6016$1Z2PAY))))))
   (g$fxcopy-bit-field$6003$1Z2PAY
     g$fxcopy-bit-field$6050$1Z2PAY
     (case-lambda
       ((g$fx1$6018$1Z2PAY
          g$fx2$6019$1Z2PAY
          g$fx3$6020$1Z2PAY
          g$fx4$6021$1Z2PAY)
        ((case-lambda
           ((g$to$6022$1Z2PAY)
            ((case-lambda
               ((g$start$6023$1Z2PAY)
                ((case-lambda
                   ((g$end$6024$1Z2PAY)
                    ((case-lambda
                       ((g$from$6025$1Z2PAY)
                        ((case-lambda
                           ((g$mask1$6026$1Z2PAY)
                            ((case-lambda
                               ((g$mask2$6027$1Z2PAY)
                                ((case-lambda
                                   ((g$mask$6028$1Z2PAY)
                                    ((case-lambda
                                       (()
                                        (g$fxif$6000$1Z2PAY
                                          g$mask$6028$1Z2PAY
                                          (g$fxarithmetic-shift-left$6004$1Z2PAY
                                            g$from$6025$1Z2PAY
                                            g$start$6023$1Z2PAY)
                                          g$to$6022$1Z2PAY))))))
                                 (fxand
                                   g$mask1$6026$1Z2PAY
                                   g$mask2$6027$1Z2PAY))))
                             (fxnot
                               (g$fxarithmetic-shift-left$6004$1Z2PAY
                                 '-1
                                 g$end$6024$1Z2PAY)))))
                         (g$fxarithmetic-shift-left$6004$1Z2PAY
                           '-1
                           g$start$6023$1Z2PAY))))
                     g$fx4$6021$1Z2PAY)))
                 g$fx3$6020$1Z2PAY)))
             g$fx2$6019$1Z2PAY)))
         g$fx1$6018$1Z2PAY))))
   (g$fxarithmetic-shift-left$6004$1Z2PAY
     g$fxarithmetic-shift-left$6051$1Z2PAY
     (case-lambda
       ((g$fx1$6029$1Z2PAY g$fx2$6030$1Z2PAY)
        (fxarithmetic-shift g$fx1$6029$1Z2PAY g$fx2$6030$1Z2PAY))))
   (g$fxarithmetic-shift-right$6005$1Z2PAY
     g$fxarithmetic-shift-right$6052$1Z2PAY
     (case-lambda
       ((g$fx1$6031$1Z2PAY g$fx2$6032$1Z2PAY)
        (fxarithmetic-shift g$fx1$6031$1Z2PAY (- g$fx2$6032$1Z2PAY)))))
   (g$fxrotate-bit-field$6006$1Z2PAY
     g$fxrotate-bit-field$6053$1Z2PAY
     (case-lambda
       ((g$fx1$6033$1Z2PAY
          g$fx2$6034$1Z2PAY
          g$fx3$6035$1Z2PAY
          g$fx4$6036$1Z2PAY)
        ((case-lambda
           ((g$n$6037$1Z2PAY)
            ((case-lambda
               ((g$start$6038$1Z2PAY)
                ((case-lambda
                   ((g$end$6039$1Z2PAY)
                    ((case-lambda
                       ((g$count$6040$1Z2PAY)
                        ((case-lambda
                           ((g$width$6041$1Z2PAY)
                            ((case-lambda
                               (()
                                (if (positive? g$width$6041$1Z2PAY)
                                  ((case-lambda
                                     ((g$count$6042$1Z2PAY)
                                      ((case-lambda
                                         ((g$field0$6043$1Z2PAY)
                                          ((case-lambda
                                             ((g$field1$6044$1Z2PAY)
                                              ((case-lambda
                                                 ((g$field2$6045$1Z2PAY)
                                                  ((case-lambda
                                                     ((g$field$6046$1Z2PAY)
                                                      ((case-lambda
                                                         (()
                                                          (g$fxcopy-bit-field$6003$1Z2PAY
                                                            g$n$6037$1Z2PAY
                                                            g$start$6038$1Z2PAY
                                                            g$end$6039$1Z2PAY
                                                            g$field$6046$1Z2PAY))))))
                                                   (fxior
                                                     g$field1$6044$1Z2PAY
                                                     g$field2$6045$1Z2PAY))))
                                               (g$fxarithmetic-shift-right$6005$1Z2PAY
                                                 g$field0$6043$1Z2PAY
                                                 (- g$width$6041$1Z2PAY
                                                    g$count$6042$1Z2PAY)))))
                                           (g$fxarithmetic-shift-left$6004$1Z2PAY
                                             g$field0$6043$1Z2PAY
                                             g$count$6042$1Z2PAY))))
                                       (g$fxbit-field$6002$1Z2PAY
                                         g$n$6037$1Z2PAY
                                         g$start$6038$1Z2PAY
                                         g$end$6039$1Z2PAY))))
                                   (mod g$count$6040$1Z2PAY
                                        g$width$6041$1Z2PAY))
                                  g$n$6037$1Z2PAY))))))
                         (- g$end$6039$1Z2PAY g$start$6038$1Z2PAY))))
                     g$fx4$6036$1Z2PAY)))
                 g$fx3$6035$1Z2PAY)))
             g$fx2$6034$1Z2PAY)))
         g$fx1$6033$1Z2PAY)))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$7120$6054$1Z2PAY
     g$7120$6066$1Z2PAY
     (make-record-type-descriptor
       '&no-infinities
       &implementation-restriction-rtd
       'g$7123$1Z2PAY
       '#f
       '#f
       '#()))
   (g$7122$6055$1Z2PAY g$7122$6067$1Z2PAY '#f)
   (g$7121$6056$1Z2PAY
     g$7121$6068$1Z2PAY
     (make-record-constructor-descriptor
       g$7120$6054$1Z2PAY
       &implementation-restriction-rcd
       g$7122$6055$1Z2PAY))
   (g$7119$6057$1Z2PAY
     g$7119$6069$1Z2PAY
     (record-predicate g$7120$6054$1Z2PAY))
   (g$make-no-infinities-violation$6058$1Z2PAY
     g$make-no-infinities-violation$6070$1Z2PAY
     (record-constructor g$7121$6056$1Z2PAY))
   (g$no-infinities-violation?$6059$1Z2PAY
     g$no-infinities-violation?$6071$1Z2PAY
     (condition-predicate g$7120$6054$1Z2PAY))
   (g$7134$6060$1Z2PAY
     g$7134$6072$1Z2PAY
     (make-record-type-descriptor
       '&no-nans
       &implementation-restriction-rtd
       'g$7137$1Z2PAY
       '#f
       '#f
       '#()))
   (g$7136$6061$1Z2PAY g$7136$6073$1Z2PAY '#f)
   (g$7135$6062$1Z2PAY
     g$7135$6074$1Z2PAY
     (make-record-constructor-descriptor
       g$7134$6060$1Z2PAY
       &implementation-restriction-rcd
       g$7136$6061$1Z2PAY))
   (g$7133$6063$1Z2PAY
     g$7133$6075$1Z2PAY
     (record-predicate g$7134$6060$1Z2PAY))
   (g$make-no-nans-violation$6064$1Z2PAY
     g$make-no-nans-violation$6076$1Z2PAY
     (record-constructor g$7135$6062$1Z2PAY))
   (g$no-nans-violation?$6065$1Z2PAY
     g$no-nans-violation?$6077$1Z2PAY
     (condition-predicate g$7134$6060$1Z2PAY)))
  (void))

(library-letrec* (ironscheme io conditions)
  ((g$7149$6078$1Z2PAY
     g$7149$6158$1Z2PAY
     (make-record-type-descriptor
       '&i/o
       &error-rtd
       'g$7152$1Z2PAY
       '#f
       '#f
       '#()))
   (g$7151$6079$1Z2PAY g$7151$6159$1Z2PAY '#f)
   (g$7150$6080$1Z2PAY
     g$7150$6160$1Z2PAY
     (make-record-constructor-descriptor
       g$7149$6078$1Z2PAY
       &error-rcd
       g$7151$6079$1Z2PAY))
   (g$7148$6081$1Z2PAY
     g$7148$6161$1Z2PAY
     (record-predicate g$7149$6078$1Z2PAY))
   (g$make-i/o-error$6082$1Z2PAY
     g$make-i/o-error$6162$1Z2PAY
     (record-constructor g$7150$6080$1Z2PAY))
   (g$i/o-error?$6083$1Z2PAY
     g$i/o-error?$6163$1Z2PAY
     (condition-predicate g$7149$6078$1Z2PAY))
   (g$7163$6084$1Z2PAY
     g$7163$6164$1Z2PAY
     (make-record-type-descriptor
       '&i/o-read
       g$7149$6078$1Z2PAY
       'g$7166$1Z2PAY
       '#f
       '#f
       '#()))
   (g$7165$6085$1Z2PAY g$7165$6165$1Z2PAY '#f)
   (g$7164$6086$1Z2PAY
     g$7164$6166$1Z2PAY
     (make-record-constructor-descriptor
       g$7163$6084$1Z2PAY
       g$7150$6080$1Z2PAY
       g$7165$6085$1Z2PAY))
   (g$7162$6087$1Z2PAY
     g$7162$6167$1Z2PAY
     (record-predicate g$7163$6084$1Z2PAY))
   (g$make-i/o-read-error$6088$1Z2PAY
     g$make-i/o-read-error$6168$1Z2PAY
     (record-constructor g$7164$6086$1Z2PAY))
   (g$i/o-read-error?$6089$1Z2PAY
     g$i/o-read-error?$6169$1Z2PAY
     (condition-predicate g$7163$6084$1Z2PAY))
   (g$7177$6090$1Z2PAY
     g$7177$6170$1Z2PAY
     (make-record-type-descriptor
       '&i/o-write
       g$7149$6078$1Z2PAY
       'g$7180$1Z2PAY
       '#f
       '#f
       '#()))
   (g$7179$6091$1Z2PAY g$7179$6171$1Z2PAY '#f)
   (g$7178$6092$1Z2PAY
     g$7178$6172$1Z2PAY
     (make-record-constructor-descriptor
       g$7177$6090$1Z2PAY
       g$7150$6080$1Z2PAY
       g$7179$6091$1Z2PAY))
   (g$7176$6093$1Z2PAY
     g$7176$6173$1Z2PAY
     (record-predicate g$7177$6090$1Z2PAY))
   (g$make-i/o-write-error$6094$1Z2PAY
     g$make-i/o-write-error$6174$1Z2PAY
     (record-constructor g$7178$6092$1Z2PAY))
   (g$i/o-write-error?$6095$1Z2PAY
     g$i/o-write-error?$6175$1Z2PAY
     (condition-predicate g$7177$6090$1Z2PAY))
   (g$7192$6096$1Z2PAY
     g$7192$6176$1Z2PAY
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$7149$6078$1Z2PAY
       'g$7195$1Z2PAY
       '#f
       '#f
       '#((immutable position))))
   (g$7194$6097$1Z2PAY g$7194$6177$1Z2PAY '#f)
   (g$7193$6098$1Z2PAY
     g$7193$6178$1Z2PAY
     (make-record-constructor-descriptor
       g$7192$6096$1Z2PAY
       g$7150$6080$1Z2PAY
       g$7194$6097$1Z2PAY))
   (g$7191$6099$1Z2PAY
     g$7191$6179$1Z2PAY
     (record-predicate g$7192$6096$1Z2PAY))
   (g$make-i/o-invalid-position-error$6100$1Z2PAY
     g$make-i/o-invalid-position-error$6180$1Z2PAY
     (record-constructor g$7193$6098$1Z2PAY))
   (g$7190$6101$1Z2PAY
     g$7190$6181$1Z2PAY
     (record-accessor g$7192$6096$1Z2PAY '0))
   (g$i/o-invalid-position-error?$6102$1Z2PAY
     g$i/o-invalid-position-error?$6182$1Z2PAY
     (condition-predicate g$7192$6096$1Z2PAY))
   (g$i/o-error-position$6103$1Z2PAY
     g$i/o-error-position$6183$1Z2PAY
     (condition-accessor g$7192$6096$1Z2PAY g$7190$6101$1Z2PAY))
   (g$7209$6104$1Z2PAY
     g$7209$6184$1Z2PAY
     (make-record-type-descriptor
       '&i/o-filename
       g$7149$6078$1Z2PAY
       'g$7212$1Z2PAY
       '#f
       '#f
       '#((immutable filename))))
   (g$7211$6105$1Z2PAY g$7211$6185$1Z2PAY '#f)
   (g$7210$6106$1Z2PAY
     g$7210$6186$1Z2PAY
     (make-record-constructor-descriptor
       g$7209$6104$1Z2PAY
       g$7150$6080$1Z2PAY
       g$7211$6105$1Z2PAY))
   (g$7208$6107$1Z2PAY
     g$7208$6187$1Z2PAY
     (record-predicate g$7209$6104$1Z2PAY))
   (g$make-i/o-filename-error$6108$1Z2PAY
     g$make-i/o-filename-error$6188$1Z2PAY
     (record-constructor g$7210$6106$1Z2PAY))
   (g$7207$6109$1Z2PAY
     g$7207$6189$1Z2PAY
     (record-accessor g$7209$6104$1Z2PAY '0))
   (g$i/o-filename-error?$6110$1Z2PAY
     g$i/o-filename-error?$6190$1Z2PAY
     (condition-predicate g$7209$6104$1Z2PAY))
   (g$i/o-error-filename$6111$1Z2PAY
     g$i/o-error-filename$6191$1Z2PAY
     (condition-accessor g$7209$6104$1Z2PAY g$7207$6109$1Z2PAY))
   (g$7225$6112$1Z2PAY
     g$7225$6192$1Z2PAY
     (make-record-type-descriptor
       '&i/o-file-protection
       g$7209$6104$1Z2PAY
       'g$7228$1Z2PAY
       '#f
       '#f
       '#()))
   (g$7227$6113$1Z2PAY g$7227$6193$1Z2PAY '#f)
   (g$7226$6114$1Z2PAY
     g$7226$6194$1Z2PAY
     (make-record-constructor-descriptor
       g$7225$6112$1Z2PAY
       g$7210$6106$1Z2PAY
       g$7227$6113$1Z2PAY))
   (g$7224$6115$1Z2PAY
     g$7224$6195$1Z2PAY
     (record-predicate g$7225$6112$1Z2PAY))
   (g$make-i/o-file-protection-error$6116$1Z2PAY
     g$make-i/o-file-protection-error$6196$1Z2PAY
     (record-constructor g$7226$6114$1Z2PAY))
   (g$i/o-file-protection-error?$6117$1Z2PAY
     g$i/o-file-protection-error?$6197$1Z2PAY
     (condition-predicate g$7225$6112$1Z2PAY))
   (g$7239$6118$1Z2PAY
     g$7239$6198$1Z2PAY
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$7225$6112$1Z2PAY
       'g$7242$1Z2PAY
       '#f
       '#f
       '#()))
   (g$7241$6119$1Z2PAY g$7241$6199$1Z2PAY '#f)
   (g$7240$6120$1Z2PAY
     g$7240$6200$1Z2PAY
     (make-record-constructor-descriptor
       g$7239$6118$1Z2PAY
       g$7226$6114$1Z2PAY
       g$7241$6119$1Z2PAY))
   (g$7238$6121$1Z2PAY
     g$7238$6201$1Z2PAY
     (record-predicate g$7239$6118$1Z2PAY))
   (g$make-i/o-file-is-read-only-error$6122$1Z2PAY
     g$make-i/o-file-is-read-only-error$6202$1Z2PAY
     (record-constructor g$7240$6120$1Z2PAY))
   (g$i/o-file-is-read-only-error?$6123$1Z2PAY
     g$i/o-file-is-read-only-error?$6203$1Z2PAY
     (condition-predicate g$7239$6118$1Z2PAY))
   (g$7253$6124$1Z2PAY
     g$7253$6204$1Z2PAY
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$7209$6104$1Z2PAY
       'g$7256$1Z2PAY
       '#f
       '#f
       '#()))
   (g$7255$6125$1Z2PAY g$7255$6205$1Z2PAY '#f)
   (g$7254$6126$1Z2PAY
     g$7254$6206$1Z2PAY
     (make-record-constructor-descriptor
       g$7253$6124$1Z2PAY
       g$7210$6106$1Z2PAY
       g$7255$6125$1Z2PAY))
   (g$7252$6127$1Z2PAY
     g$7252$6207$1Z2PAY
     (record-predicate g$7253$6124$1Z2PAY))
   (g$make-i/o-file-already-exists-error$6128$1Z2PAY
     g$make-i/o-file-already-exists-error$6208$1Z2PAY
     (record-constructor g$7254$6126$1Z2PAY))
   (g$i/o-file-already-exists-error?$6129$1Z2PAY
     g$i/o-file-already-exists-error?$6209$1Z2PAY
     (condition-predicate g$7253$6124$1Z2PAY))
   (g$7267$6130$1Z2PAY
     g$7267$6210$1Z2PAY
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$7209$6104$1Z2PAY
       'g$7270$1Z2PAY
       '#f
       '#f
       '#()))
   (g$7269$6131$1Z2PAY g$7269$6211$1Z2PAY '#f)
   (g$7268$6132$1Z2PAY
     g$7268$6212$1Z2PAY
     (make-record-constructor-descriptor
       g$7267$6130$1Z2PAY
       g$7210$6106$1Z2PAY
       g$7269$6131$1Z2PAY))
   (g$7266$6133$1Z2PAY
     g$7266$6213$1Z2PAY
     (record-predicate g$7267$6130$1Z2PAY))
   (g$make-i/o-file-does-not-exist-error$6134$1Z2PAY
     g$make-i/o-file-does-not-exist-error$6214$1Z2PAY
     (record-constructor g$7268$6132$1Z2PAY))
   (g$i/o-file-does-not-exist-error?$6135$1Z2PAY
     g$i/o-file-does-not-exist-error?$6215$1Z2PAY
     (condition-predicate g$7267$6130$1Z2PAY))
   (g$7282$6136$1Z2PAY
     g$7282$6216$1Z2PAY
     (make-record-type-descriptor
       '&i/o-port
       g$7149$6078$1Z2PAY
       'g$7285$1Z2PAY
       '#f
       '#f
       '#((immutable port))))
   (g$7284$6137$1Z2PAY g$7284$6217$1Z2PAY '#f)
   (g$7283$6138$1Z2PAY
     g$7283$6218$1Z2PAY
     (make-record-constructor-descriptor
       g$7282$6136$1Z2PAY
       g$7150$6080$1Z2PAY
       g$7284$6137$1Z2PAY))
   (g$7281$6139$1Z2PAY
     g$7281$6219$1Z2PAY
     (record-predicate g$7282$6136$1Z2PAY))
   (g$make-i/o-port-error$6140$1Z2PAY
     g$make-i/o-port-error$6220$1Z2PAY
     (record-constructor g$7283$6138$1Z2PAY))
   (g$7280$6141$1Z2PAY
     g$7280$6221$1Z2PAY
     (record-accessor g$7282$6136$1Z2PAY '0))
   (g$i/o-port-error?$6142$1Z2PAY
     g$i/o-port-error?$6222$1Z2PAY
     (condition-predicate g$7282$6136$1Z2PAY))
   (g$i/o-error-port$6143$1Z2PAY
     g$i/o-error-port$6223$1Z2PAY
     (condition-accessor g$7282$6136$1Z2PAY g$7280$6141$1Z2PAY))
   (g$7298$6144$1Z2PAY
     g$7298$6224$1Z2PAY
     (make-record-type-descriptor
       '&i/o-decoding
       g$7282$6136$1Z2PAY
       'g$7301$1Z2PAY
       '#f
       '#f
       '#()))
   (g$7300$6145$1Z2PAY g$7300$6225$1Z2PAY '#f)
   (g$7299$6146$1Z2PAY
     g$7299$6226$1Z2PAY
     (make-record-constructor-descriptor
       g$7298$6144$1Z2PAY
       g$7283$6138$1Z2PAY
       g$7300$6145$1Z2PAY))
   (g$7297$6147$1Z2PAY
     g$7297$6227$1Z2PAY
     (record-predicate g$7298$6144$1Z2PAY))
   (g$make-i/o-decoding-error$6148$1Z2PAY
     g$make-i/o-decoding-error$6228$1Z2PAY
     (record-constructor g$7299$6146$1Z2PAY))
   (g$i/o-decoding-error?$6149$1Z2PAY
     g$i/o-decoding-error?$6229$1Z2PAY
     (condition-predicate g$7298$6144$1Z2PAY))
   (g$7313$6150$1Z2PAY
     g$7313$6230$1Z2PAY
     (make-record-type-descriptor
       '&i/o-encoding
       g$7282$6136$1Z2PAY
       'g$7316$1Z2PAY
       '#f
       '#f
       '#((immutable char))))
   (g$7315$6151$1Z2PAY g$7315$6231$1Z2PAY '#f)
   (g$7314$6152$1Z2PAY
     g$7314$6232$1Z2PAY
     (make-record-constructor-descriptor
       g$7313$6150$1Z2PAY
       g$7283$6138$1Z2PAY
       g$7315$6151$1Z2PAY))
   (g$7312$6153$1Z2PAY
     g$7312$6233$1Z2PAY
     (record-predicate g$7313$6150$1Z2PAY))
   (g$make-i/o-encoding-error$6154$1Z2PAY
     g$make-i/o-encoding-error$6234$1Z2PAY
     (record-constructor g$7314$6152$1Z2PAY))
   (g$7311$6155$1Z2PAY
     g$7311$6235$1Z2PAY
     (record-accessor g$7313$6150$1Z2PAY '0))
   (g$i/o-encoding-error?$6156$1Z2PAY
     g$i/o-encoding-error?$6236$1Z2PAY
     (condition-predicate g$7313$6150$1Z2PAY))
   (g$i/o-encoding-error-char$6157$1Z2PAY
     g$i/o-encoding-error-char$6237$1Z2PAY
     (condition-accessor g$7313$6150$1Z2PAY g$7311$6155$1Z2PAY)))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$get-output-string$6238$1Z2PAY
     g$get-output-string$6249$1Z2PAY
     (case-lambda
       ((g$port$6243$1Z2PAY)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$6243$1Z2PAY))))
   (g$open-output-string$6239$1Z2PAY
     g$open-output-string$6250$1Z2PAY
     (case-lambda (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$6240$1Z2PAY
     g$open-string-output-port$6251$1Z2PAY
     (case-lambda
       (()
        ((case-lambda
           ((g$p$6244$1Z2PAY)
            (values
              g$p$6244$1Z2PAY
              (case-lambda
                (() (g$get-output-string$6238$1Z2PAY g$p$6244$1Z2PAY))))))
         (g$open-output-string$6239$1Z2PAY)))))
   (g$port?$6241$1Z2PAY
     g$port?$6252$1Z2PAY
     (case-lambda
       ((g$obj$6245$1Z2PAY)
        ((case-lambda
           ((g$t$6246$1Z2PAY)
            (if g$t$6246$1Z2PAY
              g$t$6246$1Z2PAY
              (begin '#f (binary-port? g$obj$6245$1Z2PAY)))))
         (textual-port? g$obj$6245$1Z2PAY)))))
   (g$call-with-string-output-port$6242$1Z2PAY
     g$call-with-string-output-port$6253$1Z2PAY
     (case-lambda
       ((g$proc$6247$1Z2PAY)
        ((case-lambda
           ((g$p$6248$1Z2PAY)
            (begin
              (call-with-port g$p$6248$1Z2PAY g$proc$6247$1Z2PAY)
              (g$get-output-string$6238$1Z2PAY g$p$6248$1Z2PAY))))
         (g$open-output-string$6239$1Z2PAY))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$with-input-from-file$6260$1Z2PAY
     g$with-input-from-file$6286$1Z2PAY
     (case-lambda
       ((g$filename$6264$1Z2PAY g$thunk$6265$1Z2PAY)
        ((case-lambda
           ((g$current-input-port$6268$1Z2PAY g$t$6269$1Z2PAY)
            ((case-lambda
               ((g$swap$6270$1Z2PAY)
                (dynamic-wind
                  g$swap$6270$1Z2PAY
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6265$1Z2PAY)))
                       (case-lambda
                         (() (close-input-port (current-input-port)))))))
                  g$swap$6270$1Z2PAY)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6271$1Z2PAY)
                    (begin
                      (g$current-input-port$6268$1Z2PAY g$t$6269$1Z2PAY)
                      (set! g$t$6269$1Z2PAY g$t$6271$1Z2PAY))))
                 (g$current-input-port$6268$1Z2PAY)))))))
         current-input-port
         (open-input-file g$filename$6264$1Z2PAY)))))
   (g$with-output-to-file$6261$1Z2PAY
     g$with-output-to-file$6287$1Z2PAY
     (case-lambda
       ((g$filename$6272$1Z2PAY g$thunk$6273$1Z2PAY)
        ((case-lambda
           ((g$current-output-port$6276$1Z2PAY g$t$6277$1Z2PAY)
            ((case-lambda
               ((g$swap$6278$1Z2PAY)
                (dynamic-wind
                  g$swap$6278$1Z2PAY
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6273$1Z2PAY)))
                       (case-lambda
                         (() (close-output-port (current-output-port)))))))
                  g$swap$6278$1Z2PAY)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6279$1Z2PAY)
                    (begin
                      (g$current-output-port$6276$1Z2PAY g$t$6277$1Z2PAY)
                      (set! g$t$6277$1Z2PAY g$t$6279$1Z2PAY))))
                 (g$current-output-port$6276$1Z2PAY)))))))
         current-output-port
         (open-output-file g$filename$6272$1Z2PAY)))))
   (g$call-with-input-file$6262$1Z2PAY
     g$call-with-input-file$6288$1Z2PAY
     (case-lambda
       ((g$filename$6280$1Z2PAY g$proc$6281$1Z2PAY)
        ((case-lambda
           ((g$p$6282$1Z2PAY)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6281$1Z2PAY g$p$6282$1Z2PAY)))
              (case-lambda (() (close-input-port g$p$6282$1Z2PAY))))))
         (open-input-file g$filename$6280$1Z2PAY)))))
   (g$call-with-output-file$6263$1Z2PAY
     g$call-with-output-file$6289$1Z2PAY
     (case-lambda
       ((g$filename$6283$1Z2PAY g$proc$6284$1Z2PAY)
        ((case-lambda
           ((g$p$6285$1Z2PAY)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6284$1Z2PAY g$p$6285$1Z2PAY)))
              (case-lambda (() (close-output-port g$p$6285$1Z2PAY))))))
         (open-output-file g$filename$6283$1Z2PAY))))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$7383$6290$1Z2PAY
     g$7383$6398$1Z2PAY
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$7385$6291$1Z2PAY g$7385$6399$1Z2PAY '#f)
   (g$7384$6292$1Z2PAY
     g$7384$6400$1Z2PAY
     (make-record-constructor-descriptor
       g$7383$6290$1Z2PAY
       '#f
       g$7385$6291$1Z2PAY))
   (g$enum?$6293$1Z2PAY
     g$enum?$6401$1Z2PAY
     (record-predicate g$7383$6290$1Z2PAY))
   (g$make-enum$6294$1Z2PAY
     g$make-enum$6402$1Z2PAY
     (record-constructor g$7384$6292$1Z2PAY))
   (g$enum-value$6295$1Z2PAY
     g$enum-value$6403$1Z2PAY
     (record-accessor g$7383$6290$1Z2PAY '0))
   (g$enum-info$6296$1Z2PAY
     g$enum-info$6404$1Z2PAY
     (record-accessor g$7383$6290$1Z2PAY '1))
   (g$7396$6297$1Z2PAY
     g$7396$6405$1Z2PAY
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$7398$6298$1Z2PAY g$7398$6406$1Z2PAY '#f)
   (g$7397$6299$1Z2PAY
     g$7397$6407$1Z2PAY
     (make-record-constructor-descriptor
       g$7396$6297$1Z2PAY
       '#f
       g$7398$6298$1Z2PAY))
   (g$enum-universe?$6300$1Z2PAY
     g$enum-universe?$6408$1Z2PAY
     (record-predicate g$7396$6297$1Z2PAY))
   (g$make-enum-universe$6301$1Z2PAY
     g$make-enum-universe$6409$1Z2PAY
     (record-constructor g$7397$6299$1Z2PAY))
   (g$enum-universe-id$6302$1Z2PAY
     g$enum-universe-id$6410$1Z2PAY
     (record-accessor g$7396$6297$1Z2PAY '0))
   (g$enum-universe-symbols$6303$1Z2PAY
     g$enum-universe-symbols$6411$1Z2PAY
     (record-accessor g$7396$6297$1Z2PAY '1))
   (g$enum-universe-mapping$6304$1Z2PAY
     g$enum-universe-mapping$6412$1Z2PAY
     (record-accessor g$7396$6297$1Z2PAY '2))
   (g$enum-universe-value$6305$1Z2PAY
     g$enum-universe-value$6413$1Z2PAY
     (record-accessor g$7396$6297$1Z2PAY '3))
   (g$enum-type=?$6306$1Z2PAY
     g$enum-type=?$6414$1Z2PAY
     (case-lambda
       ((g$enumset1$6327$1Z2PAY g$enumset2$6328$1Z2PAY)
        (eq? (g$enum-universe-id$6302$1Z2PAY
               (g$enum-info$6296$1Z2PAY g$enumset1$6327$1Z2PAY))
             (g$enum-universe-id$6302$1Z2PAY
               (g$enum-info$6296$1Z2PAY g$enumset2$6328$1Z2PAY))))))
   (g$get-symbols$6307$1Z2PAY
     g$get-symbols$6415$1Z2PAY
     (case-lambda
       ((g$enumset$6329$1Z2PAY)
        (g$enum-universe-symbols$6303$1Z2PAY
          (g$enum-info$6296$1Z2PAY g$enumset$6329$1Z2PAY)))))
   (g$get-value$6308$1Z2PAY
     g$get-value$6416$1Z2PAY
     (case-lambda
       ((g$enumset$6330$1Z2PAY g$s$6331$1Z2PAY)
        (g$hashtable-ref$5455$1Z2PAY
          (g$enum-universe-mapping$6304$1Z2PAY
            (g$enum-info$6296$1Z2PAY g$enumset$6330$1Z2PAY))
          g$s$6331$1Z2PAY
          '#f))))
   (g$assert-enum$6309$1Z2PAY
     g$assert-enum$6417$1Z2PAY
     (case-lambda
       ((g$who$6332$1Z2PAY g$enumset$6333$1Z2PAY)
        (if (not (g$enum?$6293$1Z2PAY g$enumset$6333$1Z2PAY))
          (assertion-violation
            g$who$6332$1Z2PAY
            '"not an enumeration"
            g$enumset$6333$1Z2PAY)
          (void)))))
   (g$make-info$6310$1Z2PAY
     g$make-info$6418$1Z2PAY
     (case-lambda
       ((g$symbols$6334$1Z2PAY)
        ((case-lambda
           ((g$ht$6335$1Z2PAY)
            ((letrec ((g$f$6336$1Z2PAY
                        (case-lambda
                          ((g$s$6337$1Z2PAY g$a$6338$1Z2PAY g$mask$6339$1Z2PAY)
                           (if (null? g$s$6337$1Z2PAY)
                             (values
                               (reverse! g$a$6338$1Z2PAY)
                               g$ht$6335$1Z2PAY
                               (- g$mask$6339$1Z2PAY '1))
                             ((case-lambda
                                ((g$n$6340$1Z2PAY)
                                 (if (symbol? g$n$6340$1Z2PAY)
                                   (if (g$hashtable-contains?$5458$1Z2PAY
                                         g$ht$6335$1Z2PAY
                                         g$n$6340$1Z2PAY)
                                     (g$f$6336$1Z2PAY
                                       (cdr g$s$6337$1Z2PAY)
                                       g$a$6338$1Z2PAY
                                       g$mask$6339$1Z2PAY)
                                     (begin
                                       (g$hashtable-set!$5456$1Z2PAY
                                         g$ht$6335$1Z2PAY
                                         g$n$6340$1Z2PAY
                                         g$mask$6339$1Z2PAY)
                                       (g$f$6336$1Z2PAY
                                         (cdr g$s$6337$1Z2PAY)
                                         (cons g$n$6340$1Z2PAY g$a$6338$1Z2PAY)
                                         (g$bitwise-arithmetic-shift-left$5997$1Z2PAY
                                           g$mask$6339$1Z2PAY
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$6340$1Z2PAY))))
                              (car g$s$6337$1Z2PAY)))))))
               g$f$6336$1Z2PAY)
             g$symbols$6334$1Z2PAY
             '()
             '1)))
         (g$make-eq-hashtable$5452$1Z2PAY)))))
   (g$make-name$6311$1Z2PAY
     g$make-name$6419$1Z2PAY
     (case-lambda
       ((g$symbols$6341$1Z2PAY)
        (string->symbol (g$format$6458$1Z2PAY '"~a" g$symbols$6341$1Z2PAY)))))
   (g$make-enumeration$6312$1Z2PAY
     g$make-enumeration$6420$1Z2PAY
     (case-lambda
       ((g$symbols$6342$1Z2PAY)
        (call-with-values
          (case-lambda (() (g$make-info$6310$1Z2PAY g$symbols$6342$1Z2PAY)))
          (case-lambda
            ((g$s$6346$1Z2PAY g$mapping$6347$1Z2PAY g$mask$6348$1Z2PAY)
             ((case-lambda
                ((g$mask$6349$1Z2PAY g$mapping$6350$1Z2PAY g$s$6351$1Z2PAY)
                 (g$make-enum$6294$1Z2PAY
                   g$mask$6349$1Z2PAY
                   (g$make-enum-universe$6301$1Z2PAY
                     (g$make-name$6311$1Z2PAY g$s$6351$1Z2PAY)
                     g$s$6351$1Z2PAY
                     g$mapping$6350$1Z2PAY
                     g$mask$6349$1Z2PAY))))
              g$mask$6348$1Z2PAY
              g$mapping$6347$1Z2PAY
              g$s$6346$1Z2PAY)))))))
   (g$enum-set-universe$6313$1Z2PAY
     g$enum-set-universe$6421$1Z2PAY
     (case-lambda
       ((g$enumset$6352$1Z2PAY)
        (begin
          (g$assert-enum$6309$1Z2PAY 'enum-set-universe g$enumset$6352$1Z2PAY)
          ((case-lambda
             ((g$ei$6353$1Z2PAY)
              (g$make-enum$6294$1Z2PAY
                (g$enum-universe-value$6305$1Z2PAY g$ei$6353$1Z2PAY)
                g$ei$6353$1Z2PAY)))
           (g$enum-info$6296$1Z2PAY g$enumset$6352$1Z2PAY))))))
   (g$enum-set-indexer$6314$1Z2PAY
     g$enum-set-indexer$6422$1Z2PAY
     (case-lambda
       ((g$enumset$6354$1Z2PAY)
        (begin
          (g$assert-enum$6309$1Z2PAY 'enum-set-indexer g$enumset$6354$1Z2PAY)
          (case-lambda
            ((g$symbol$6355$1Z2PAY)
             (begin
               (if (not (symbol? g$symbol$6355$1Z2PAY))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$6355$1Z2PAY)
                 (void))
               ((case-lambda
                  ((g$v$6356$1Z2PAY)
                   (if g$v$6356$1Z2PAY
                     (- (bitwise-length g$v$6356$1Z2PAY) '1)
                     '#f)))
                (g$get-value$6308$1Z2PAY
                  g$enumset$6354$1Z2PAY
                  g$symbol$6355$1Z2PAY)))))))))
   (g$enum-set-constructor$6315$1Z2PAY
     g$enum-set-constructor$6423$1Z2PAY
     (case-lambda
       ((g$enumset$6357$1Z2PAY)
        (begin
          (g$assert-enum$6309$1Z2PAY
            'enum-set-constructor
            g$enumset$6357$1Z2PAY)
          (case-lambda
            ((g$symbols$6358$1Z2PAY)
             ((letrec ((g$f$6359$1Z2PAY
                         (case-lambda
                           ((g$v$6360$1Z2PAY g$s$6361$1Z2PAY)
                            (if (null? g$s$6361$1Z2PAY)
                              (g$make-enum$6294$1Z2PAY
                                g$v$6360$1Z2PAY
                                (g$enum-info$6296$1Z2PAY g$enumset$6357$1Z2PAY))
                              ((case-lambda
                                 ((g$n$6362$1Z2PAY)
                                  (if (symbol? g$n$6362$1Z2PAY)
                                    ((case-lambda
                                       ((g$v*$6363$1Z2PAY)
                                        (if g$v*$6363$1Z2PAY
                                          (g$f$6359$1Z2PAY
                                            (bitwise-ior
                                              g$v$6360$1Z2PAY
                                              g$v*$6363$1Z2PAY)
                                            (cdr g$s$6361$1Z2PAY))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$6362$1Z2PAY))))
                                     (g$get-value$6308$1Z2PAY
                                       g$enumset$6357$1Z2PAY
                                       g$n$6362$1Z2PAY))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$6362$1Z2PAY))))
                               (car g$s$6361$1Z2PAY)))))))
                g$f$6359$1Z2PAY)
              '0
              g$symbols$6358$1Z2PAY)))))))
   (g$enum-set->list$6316$1Z2PAY
     g$enum-set->list$6424$1Z2PAY
     (case-lambda
       ((g$enumset$6364$1Z2PAY)
        (begin
          (g$assert-enum$6309$1Z2PAY 'enum-set->list g$enumset$6364$1Z2PAY)
          ((case-lambda
             ((g$value$6365$1Z2PAY)
              ((letrec ((g$f$6366$1Z2PAY
                          (case-lambda
                            ((g$s$6367$1Z2PAY g$l$6368$1Z2PAY)
                             (if (null? g$s$6367$1Z2PAY)
                               (reverse! g$l$6368$1Z2PAY)
                               (if (zero?
                                     (bitwise-and
                                       (g$get-value$6308$1Z2PAY
                                         g$enumset$6364$1Z2PAY
                                         (car g$s$6367$1Z2PAY))
                                       g$value$6365$1Z2PAY))
                                 (g$f$6366$1Z2PAY
                                   (cdr g$s$6367$1Z2PAY)
                                   g$l$6368$1Z2PAY)
                                 (g$f$6366$1Z2PAY
                                   (cdr g$s$6367$1Z2PAY)
                                   (cons
                                     (car g$s$6367$1Z2PAY)
                                     g$l$6368$1Z2PAY))))))))
                 g$f$6366$1Z2PAY)
               (g$get-symbols$6307$1Z2PAY g$enumset$6364$1Z2PAY)
               '())))
           (g$enum-value$6295$1Z2PAY g$enumset$6364$1Z2PAY))))))
   (g$enum-set-member?$6317$1Z2PAY
     g$enum-set-member?$6425$1Z2PAY
     (case-lambda
       ((g$symbol$6369$1Z2PAY g$enumset$6370$1Z2PAY)
        (begin
          (if (not (symbol? g$symbol$6369$1Z2PAY))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$6369$1Z2PAY)
            (void))
          (g$assert-enum$6309$1Z2PAY 'enum-set-member? g$enumset$6370$1Z2PAY)
          ((case-lambda
             ((g$v$6371$1Z2PAY)
              (if g$v$6371$1Z2PAY
                (not (zero?
                       (bitwise-and
                         g$v$6371$1Z2PAY
                         (g$enum-value$6295$1Z2PAY g$enumset$6370$1Z2PAY))))
                '#f)))
           (g$get-value$6308$1Z2PAY
             g$enumset$6370$1Z2PAY
             g$symbol$6369$1Z2PAY))))))
   (g$enum-set-subset?$6318$1Z2PAY
     g$enum-set-subset?$6426$1Z2PAY
     (case-lambda
       ((g$enumset1$6372$1Z2PAY g$enumset2$6373$1Z2PAY)
        (begin
          (g$assert-enum$6309$1Z2PAY 'enum-set-subset? g$enumset1$6372$1Z2PAY)
          (g$assert-enum$6309$1Z2PAY 'enum-set-subset? g$enumset2$6373$1Z2PAY)
          ((case-lambda
             ((g$v1$6374$1Z2PAY g$v2$6375$1Z2PAY)
              (if (g$enum-type=?$6306$1Z2PAY
                    g$enumset1$6372$1Z2PAY
                    g$enumset2$6373$1Z2PAY)
                (= (bitwise-and g$v1$6374$1Z2PAY g$v2$6375$1Z2PAY)
                   g$v1$6374$1Z2PAY)
                ((letrec ((g$f$6376$1Z2PAY
                            (case-lambda
                              ((g$s$6377$1Z2PAY)
                               (if (null? g$s$6377$1Z2PAY)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$6378$1Z2PAY g$v2*$6379$1Z2PAY)
                                     (if g$v2*$6379$1Z2PAY
                                       ((case-lambda
                                          ((g$has1$6380$1Z2PAY
                                             g$has2$6381$1Z2PAY)
                                           (if (if g$has1$6380$1Z2PAY
                                                 (begin
                                                   '#f
                                                   (not g$has2$6381$1Z2PAY))
                                                 '#f)
                                             '#f
                                             (g$f$6376$1Z2PAY
                                               (cdr g$s$6377$1Z2PAY)))))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v1$6374$1Z2PAY
                                                 g$v1*$6378$1Z2PAY)))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v2$6375$1Z2PAY
                                                 g$v2*$6379$1Z2PAY))))
                                       '#f)))
                                  (g$get-value$6308$1Z2PAY
                                    g$enumset1$6372$1Z2PAY
                                    (car g$s$6377$1Z2PAY))
                                  (g$get-value$6308$1Z2PAY
                                    g$enumset2$6373$1Z2PAY
                                    (car g$s$6377$1Z2PAY))))))))
                   g$f$6376$1Z2PAY)
                 (g$get-symbols$6307$1Z2PAY g$enumset1$6372$1Z2PAY)))))
           (g$enum-value$6295$1Z2PAY g$enumset1$6372$1Z2PAY)
           (g$enum-value$6295$1Z2PAY g$enumset2$6373$1Z2PAY))))))
   (g$enum-set=?$6319$1Z2PAY
     g$enum-set=?$6427$1Z2PAY
     (case-lambda
       ((g$enumset1$6382$1Z2PAY g$enumset2$6383$1Z2PAY)
        (begin
          (g$assert-enum$6309$1Z2PAY 'enum-set=? g$enumset1$6382$1Z2PAY)
          (g$assert-enum$6309$1Z2PAY 'enum-set=? g$enumset2$6383$1Z2PAY)
          (if (g$enum-set-subset?$6318$1Z2PAY
                g$enumset1$6382$1Z2PAY
                g$enumset2$6383$1Z2PAY)
            (begin
              '#f
              (g$enum-set-subset?$6318$1Z2PAY
                g$enumset2$6383$1Z2PAY
                g$enumset1$6382$1Z2PAY))
            '#f)))))
   (g$enum-set-union$6320$1Z2PAY
     g$enum-set-union$6428$1Z2PAY
     (case-lambda
       ((g$enumset1$6384$1Z2PAY g$enumset2$6385$1Z2PAY)
        (begin
          (g$assert-enum$6309$1Z2PAY 'enum-set-union g$enumset1$6384$1Z2PAY)
          (g$assert-enum$6309$1Z2PAY 'enum-set-union g$enumset2$6385$1Z2PAY)
          (if (g$enum-type=?$6306$1Z2PAY
                g$enumset1$6384$1Z2PAY
                g$enumset2$6385$1Z2PAY)
            (g$make-enum$6294$1Z2PAY
              (bitwise-ior
                (g$enum-value$6295$1Z2PAY g$enumset1$6384$1Z2PAY)
                (g$enum-value$6295$1Z2PAY g$enumset2$6385$1Z2PAY))
              (g$enum-info$6296$1Z2PAY g$enumset1$6384$1Z2PAY))
            '#f)))))
   (g$enum-set-intersection$6321$1Z2PAY
     g$enum-set-intersection$6429$1Z2PAY
     (case-lambda
       ((g$enumset1$6386$1Z2PAY g$enumset2$6387$1Z2PAY)
        (begin
          (g$assert-enum$6309$1Z2PAY
            'enum-set-intersection
            g$enumset1$6386$1Z2PAY)
          (g$assert-enum$6309$1Z2PAY
            'enum-set-intersection
            g$enumset2$6387$1Z2PAY)
          (if (g$enum-type=?$6306$1Z2PAY
                g$enumset1$6386$1Z2PAY
                g$enumset2$6387$1Z2PAY)
            (g$make-enum$6294$1Z2PAY
              (bitwise-and
                (g$enum-value$6295$1Z2PAY g$enumset1$6386$1Z2PAY)
                (g$enum-value$6295$1Z2PAY g$enumset2$6387$1Z2PAY))
              (g$enum-info$6296$1Z2PAY g$enumset1$6386$1Z2PAY))
            '#f)))))
   (g$enum-set-difference$6322$1Z2PAY
     g$enum-set-difference$6430$1Z2PAY
     (case-lambda
       ((g$enumset1$6388$1Z2PAY g$enumset2$6389$1Z2PAY)
        (begin
          (g$assert-enum$6309$1Z2PAY
            'enum-set-difference
            g$enumset1$6388$1Z2PAY)
          (g$assert-enum$6309$1Z2PAY
            'enum-set-difference
            g$enumset2$6389$1Z2PAY)
          (if (g$enum-type=?$6306$1Z2PAY
                g$enumset1$6388$1Z2PAY
                g$enumset2$6389$1Z2PAY)
            (g$make-enum$6294$1Z2PAY
              (bitwise-and
                (g$enum-value$6295$1Z2PAY g$enumset1$6388$1Z2PAY)
                (bitwise-not (g$enum-value$6295$1Z2PAY g$enumset2$6389$1Z2PAY)))
              (g$enum-info$6296$1Z2PAY g$enumset1$6388$1Z2PAY))
            '#f)))))
   (g$enum-set-complement$6323$1Z2PAY
     g$enum-set-complement$6431$1Z2PAY
     (case-lambda
       ((g$enumset$6390$1Z2PAY)
        (begin
          (g$assert-enum$6309$1Z2PAY 'enum-set-complement g$enumset$6390$1Z2PAY)
          (g$make-enum$6294$1Z2PAY
            (bitwise-not (g$enum-value$6295$1Z2PAY g$enumset$6390$1Z2PAY))
            (g$enum-info$6296$1Z2PAY g$enumset$6390$1Z2PAY))))))
   (g$enum-set-projection$6324$1Z2PAY
     g$enum-set-projection$6432$1Z2PAY
     (case-lambda
       ((g$enumset1$6391$1Z2PAY g$enumset2$6392$1Z2PAY)
        (begin
          (g$assert-enum$6309$1Z2PAY
            'enum-set-projection
            g$enumset1$6391$1Z2PAY)
          (g$assert-enum$6309$1Z2PAY
            'enum-set-projection
            g$enumset2$6392$1Z2PAY)
          ((case-lambda
             ((g$v1$6393$1Z2PAY)
              ((letrec ((g$f$6394$1Z2PAY
                          (case-lambda
                            ((g$s$6395$1Z2PAY g$v$6396$1Z2PAY)
                             (if (null? g$s$6395$1Z2PAY)
                               (g$make-enum$6294$1Z2PAY
                                 g$v$6396$1Z2PAY
                                 (g$enum-info$6296$1Z2PAY
                                   g$enumset2$6392$1Z2PAY))
                               (if (zero?
                                     (bitwise-and
                                       g$v1$6393$1Z2PAY
                                       (g$get-value$6308$1Z2PAY
                                         g$enumset1$6391$1Z2PAY
                                         (car g$s$6395$1Z2PAY))))
                                 (g$f$6394$1Z2PAY
                                   (cdr g$s$6395$1Z2PAY)
                                   g$v$6396$1Z2PAY)
                                 ((case-lambda
                                    ((g$v2$6397$1Z2PAY)
                                     (if g$v2$6397$1Z2PAY
                                       (g$f$6394$1Z2PAY
                                         (cdr g$s$6395$1Z2PAY)
                                         (bitwise-ior
                                           g$v$6396$1Z2PAY
                                           g$v2$6397$1Z2PAY))
                                       (g$f$6394$1Z2PAY
                                         (cdr g$s$6395$1Z2PAY)
                                         g$v$6396$1Z2PAY))))
                                  (g$get-value$6308$1Z2PAY
                                    g$enumset2$6392$1Z2PAY
                                    (car g$s$6395$1Z2PAY)))))))))
                 g$f$6394$1Z2PAY)
               (g$get-symbols$6307$1Z2PAY g$enumset1$6391$1Z2PAY)
               '0)))
           (g$enum-value$6295$1Z2PAY g$enumset1$6391$1Z2PAY)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$6325$1Z2PAY g$p$6326$1Z2PAY)
       (g$fprintf$6457$1Z2PAY
         g$p$6326$1Z2PAY
         '"#[enum-set ~a]"
         (g$enum-set->list$6316$1Z2PAY g$x$6325$1Z2PAY))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$6433$1Z2PAY
     g$dofmt$6455$1Z2PAY
     (case-lambda
       ((g$p$6437$1Z2PAY g$cntl$6438$1Z2PAY g$args$6439$1Z2PAY)
        ((case-lambda
           ((g$nmax$6440$1Z2PAY)
            ((letrec ((g$loop$6441$1Z2PAY
                        (case-lambda
                          ((g$n$6442$1Z2PAY g$a$6443$1Z2PAY)
                           (if (fx<=? g$n$6442$1Z2PAY g$nmax$6440$1Z2PAY)
                             ((case-lambda
                                ((g$c$6444$1Z2PAY)
                                 (if (if (g$char=?$5212$1Z2PAY
                                           g$c$6444$1Z2PAY
                                           '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$6442$1Z2PAY
                                           g$nmax$6440$1Z2PAY))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$6445$1Z2PAY)
                                       (if (g$memv$5009$1Z2PAY
                                             g$t$6445$1Z2PAY
                                             '(#\a))
                                         (begin
                                           (display
                                             (car g$a$6443$1Z2PAY)
                                             g$p$6437$1Z2PAY)
                                           (g$loop$6441$1Z2PAY
                                             (fx+ g$n$6442$1Z2PAY '2)
                                             (cdr g$a$6443$1Z2PAY)))
                                         (if (g$memv$5009$1Z2PAY
                                               g$t$6445$1Z2PAY
                                               '(#\s))
                                           (begin
                                             (write
                                               (car g$a$6443$1Z2PAY)
                                               g$p$6437$1Z2PAY)
                                             (g$loop$6441$1Z2PAY
                                               (fx+ g$n$6442$1Z2PAY '2)
                                               (cdr g$a$6443$1Z2PAY)))
                                           (if (g$memv$5009$1Z2PAY
                                                 g$t$6445$1Z2PAY
                                                 '(#\b))
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$6443$1Z2PAY)
                                                   '2)
                                                 g$p$6437$1Z2PAY)
                                               (g$loop$6441$1Z2PAY
                                                 (fx+ g$n$6442$1Z2PAY '2)
                                                 (cdr g$a$6443$1Z2PAY)))
                                             (if (g$memv$5009$1Z2PAY
                                                   g$t$6445$1Z2PAY
                                                   '(#\o))
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$6443$1Z2PAY)
                                                     '8)
                                                   g$p$6437$1Z2PAY)
                                                 (g$loop$6441$1Z2PAY
                                                   (fx+ g$n$6442$1Z2PAY '2)
                                                   (cdr g$a$6443$1Z2PAY)))
                                               (if (g$memv$5009$1Z2PAY
                                                     g$t$6445$1Z2PAY
                                                     '(#\x))
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$6443$1Z2PAY)
                                                       '16)
                                                     g$p$6437$1Z2PAY)
                                                   (g$loop$6441$1Z2PAY
                                                     (fx+ g$n$6442$1Z2PAY '2)
                                                     (cdr g$a$6443$1Z2PAY)))
                                                 (if (g$memv$5009$1Z2PAY
                                                       g$t$6445$1Z2PAY
                                                       '(#\d))
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$6443$1Z2PAY)
                                                         '10)
                                                       g$p$6437$1Z2PAY)
                                                     (g$loop$6441$1Z2PAY
                                                       (fx+ g$n$6442$1Z2PAY '2)
                                                       (cdr g$a$6443$1Z2PAY)))
                                                   (if (g$memv$5009$1Z2PAY
                                                         g$t$6445$1Z2PAY
                                                         '(#\~))
                                                     (begin
                                                       (write-char
                                                         '#\~
                                                         g$p$6437$1Z2PAY)
                                                       (g$loop$6441$1Z2PAY
                                                         (fx+ g$n$6442$1Z2PAY
                                                              '2)
                                                         g$a$6443$1Z2PAY))
                                                     (begin
                                                       (write-char
                                                         g$c$6444$1Z2PAY
                                                         g$p$6437$1Z2PAY)
                                                       (g$loop$6441$1Z2PAY
                                                         (fx+ g$n$6442$1Z2PAY
                                                              '1)
                                                         g$a$6443$1Z2PAY)))))))))))
                                    (string-ref
                                      g$cntl$6438$1Z2PAY
                                      (fx+ g$n$6442$1Z2PAY '1)))
                                   (begin
                                     (write-char
                                       g$c$6444$1Z2PAY
                                       g$p$6437$1Z2PAY)
                                     (g$loop$6441$1Z2PAY
                                       (fx+ g$n$6442$1Z2PAY '1)
                                       g$a$6443$1Z2PAY)))))
                              (string-ref g$cntl$6438$1Z2PAY g$n$6442$1Z2PAY))
                             (void))))))
               g$loop$6441$1Z2PAY)
             '0
             g$args$6439$1Z2PAY)))
         (fx- (string-length g$cntl$6438$1Z2PAY) '1)))))
   (g$printf$6434$1Z2PAY
     g$printf$6456$1Z2PAY
     (case-lambda
       ((g$control$6446$1Z2PAY . g$args$6447$1Z2PAY)
        (g$dofmt$6433$1Z2PAY
          (current-output-port)
          g$control$6446$1Z2PAY
          g$args$6447$1Z2PAY))))
   (g$fprintf$6435$1Z2PAY
     g$fprintf$6457$1Z2PAY
     (case-lambda
       ((g$p$6448$1Z2PAY g$control$6449$1Z2PAY . g$args$6450$1Z2PAY)
        (g$dofmt$6433$1Z2PAY
          g$p$6448$1Z2PAY
          g$control$6449$1Z2PAY
          g$args$6450$1Z2PAY))))
   (g$format$6436$1Z2PAY
     g$format$6458$1Z2PAY
     (case-lambda
       ((g$control$6451$1Z2PAY . g$args$6452$1Z2PAY)
        (call-with-values
          g$open-string-output-port$6251$1Z2PAY
          (case-lambda
            ((g$p$6453$1Z2PAY g$c$6454$1Z2PAY)
             (begin
               (g$dofmt$6433$1Z2PAY
                 g$p$6453$1Z2PAY
                 g$control$6451$1Z2PAY
                 g$args$6452$1Z2PAY)
               (g$c$6454$1Z2PAY)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$6459$1Z2PAY
     g$make-traced-macro$6462$1Z2PAY
     (case-lambda
       ((g$name$6460$1Z2PAY g$x$6461$1Z2PAY)
        (if (procedure? g$x$6461$1Z2PAY)
          (make-traced-procedure
            g$name$6460$1Z2PAY
            g$x$6461$1Z2PAY
            g$syntax->datum$11173$1Z2PAY)
          (if (g$variable-transformer?$10996$1Z2PAY g$x$6461$1Z2PAY)
            (g$make-variable-transformer$10995$1Z2PAY
              (make-traced-procedure
                g$name$6460$1Z2PAY
                (g$variable-transformer-procedure$10997$1Z2PAY g$x$6461$1Z2PAY)
                g$syntax->datum$11173$1Z2PAY))
            g$x$6461$1Z2PAY))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$library-version-mismatch-warning$6463$1Z2PAY
     g$library-version-mismatch-warning$6559$1Z2PAY
     (case-lambda
       ((g$name$6536$1Z2PAY g$depname$6537$1Z2PAY g$filename$6538$1Z2PAY)
        (g$fprintf$6457$1Z2PAY
          (current-error-port)
          '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
          g$name$6536$1Z2PAY
          g$depname$6537$1Z2PAY
          g$filename$6538$1Z2PAY))))
   (g$file-locator-resolution-error$6464$1Z2PAY
     g$file-locator-resolution-error$6560$1Z2PAY
     (case-lambda
       ((g$libname$6539$1Z2PAY g$failed-list$6540$1Z2PAY)
        (letrec* ((g$7627$6541$1Z2PAY
                    (make-record-type-descriptor
                      '&library-resolution
                      &condition-rtd
                      'g$7630$1Z2PAY
                      '#f
                      '#f
                      '#((immutable library) (immutable files))))
                  (g$7629$6542$1Z2PAY '#f)
                  (g$7628$6543$1Z2PAY
                    (make-record-constructor-descriptor
                      g$7627$6541$1Z2PAY
                      &condition-rcd
                      g$7629$6542$1Z2PAY))
                  (g$7626$6544$1Z2PAY (record-predicate g$7627$6541$1Z2PAY))
                  (g$make-library-resolution-condition$6545$1Z2PAY
                    (record-constructor g$7628$6543$1Z2PAY))
                  (g$7624$6546$1Z2PAY (record-accessor g$7627$6541$1Z2PAY '0))
                  (g$7625$6547$1Z2PAY (record-accessor g$7627$6541$1Z2PAY '1))
                  (g$library-resolution-condition?$6548$1Z2PAY
                    (condition-predicate g$7627$6541$1Z2PAY))
                  (g$condition-library$6549$1Z2PAY
                    (condition-accessor g$7627$6541$1Z2PAY g$7624$6546$1Z2PAY))
                  (g$condition-files$6550$1Z2PAY
                    (condition-accessor g$7627$6541$1Z2PAY g$7625$6547$1Z2PAY)))
          (raise
            (condition
              (g$make-error$5740$1Z2PAY)
              (g$make-who-condition$5766$1Z2PAY 'expander)
              (g$make-message-condition$5720$1Z2PAY
                '"cannot locate library in library-path")
              (g$make-library-resolution-condition$6545$1Z2PAY
                g$libname$6539$1Z2PAY
                g$failed-list$6540$1Z2PAY)))))))
   (g$read-library-source-file$6465$1Z2PAY
     g$read-library-source-file$6561$1Z2PAY
     (case-lambda
       ((g$file-name$6551$1Z2PAY)
        (g$with-input-from-file$6286$1Z2PAY
          g$file-name$6551$1Z2PAY
          read-annotated))))
   (g$make-parameter$6466$1Z2PAY
     g$make-parameter$6562$1Z2PAY
     (case-lambda
       ((g$x$6552$1Z2PAY)
        (g$make-parameter$6466$1Z2PAY
          g$x$6552$1Z2PAY
          (case-lambda ((g$x$6553$1Z2PAY) g$x$6553$1Z2PAY))))
       ((g$x$6554$1Z2PAY g$fender$6555$1Z2PAY)
        (begin
          (if (not (procedure? g$fender$6555$1Z2PAY))
            (g$assertion-error$11166$1Z2PAY
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(89,8) - (89,36)"))
            (void))
          ((case-lambda
             ((g$x$6556$1Z2PAY)
              (case-lambda
                (() g$x$6556$1Z2PAY)
                ((g$v$6557$1Z2PAY)
                 (set! g$x$6556$1Z2PAY
                   (g$fender$6555$1Z2PAY g$v$6557$1Z2PAY))))))
           (g$fender$6555$1Z2PAY g$x$6554$1Z2PAY))))))
   (g$file-options-constructor$6534$1Z2PAY
     g$file-options-constructor$6563$1Z2PAY
     (g$make-parameter$6466$1Z2PAY '#f))
   (g$file-options-spec$6535$1Z2PAY
     g$file-options-spec$6564$1Z2PAY
     (case-lambda
       ((g$x$6558$1Z2PAY)
        ((g$file-options-constructor$6534$1Z2PAY) g$x$6558$1Z2PAY)))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$6760$1Z2PAY
     g$current-primitive-locations$6805$1Z2PAY
     (g$make-parameter$6562$1Z2PAY
       (case-lambda ((g$x$6766$1Z2PAY) '#f))
       (case-lambda
         ((g$p$6767$1Z2PAY)
          (begin
            (if (not (procedure? g$p$6767$1Z2PAY))
              (g$assertion-error$11166$1Z2PAY
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$6767$1Z2PAY)))))
   (g$mutable?$6761$1Z2PAY
     g$mutable?$6806$1Z2PAY
     (case-lambda
       ((g$x$6768$1Z2PAY)
        (letrec* ((g$simple?$6769$1Z2PAY
                    (case-lambda
                      ((g$x$6770$1Z2PAY)
                       ((case-lambda
                          ((g$t$6771$1Z2PAY)
                           (if g$t$6771$1Z2PAY
                             g$t$6771$1Z2PAY
                             ((case-lambda
                                ((g$t$6772$1Z2PAY)
                                 (if g$t$6772$1Z2PAY
                                   g$t$6772$1Z2PAY
                                   ((case-lambda
                                      ((g$t$6773$1Z2PAY)
                                       (if g$t$6773$1Z2PAY
                                         g$t$6773$1Z2PAY
                                         ((case-lambda
                                            ((g$t$6774$1Z2PAY)
                                             (if g$t$6774$1Z2PAY
                                               g$t$6774$1Z2PAY
                                               ((case-lambda
                                                  ((g$t$6775$1Z2PAY)
                                                   (if g$t$6775$1Z2PAY
                                                     g$t$6775$1Z2PAY
                                                     ((case-lambda
                                                        ((g$t$6776$1Z2PAY)
                                                         (if g$t$6776$1Z2PAY
                                                           g$t$6776$1Z2PAY
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$6770$1Z2PAY)))))
                                                      (bytevector?
                                                        g$x$6770$1Z2PAY)))))
                                                (string? g$x$6770$1Z2PAY)))))
                                          (boolean? g$x$6770$1Z2PAY)))))
                                    (symbol? g$x$6770$1Z2PAY)))))
                              (char? g$x$6770$1Z2PAY)))))
                        (null? g$x$6770$1Z2PAY))))))
          (not (g$simple?$6769$1Z2PAY g$x$6768$1Z2PAY))))))
   (g$rewriter$6762$1Z2PAY
     g$rewriter$6807$1Z2PAY
     (case-lambda
       ((g$quote-hack?$6777$1Z2PAY)
        (letrec* ((g$f$6778$1Z2PAY
                    (case-lambda
                      ((g$x$6779$1Z2PAY)
                       (if (pair? g$x$6779$1Z2PAY)
                         ((case-lambda
                            ((g$t$6780$1Z2PAY)
                             (if (g$memv$5009$1Z2PAY g$t$6780$1Z2PAY '(quote))
                               (if (if g$quote-hack?$6777$1Z2PAY
                                     (begin
                                       '#f
                                       (g$mutable?$6761$1Z2PAY
                                         (g$cadr$5178$1Z2PAY g$x$6779$1Z2PAY)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$6781$1Z2PAY)
                                     (begin
                                       (set-symbol-value!
                                         g$g$6781$1Z2PAY
                                         (g$cadr$5178$1Z2PAY g$x$6779$1Z2PAY))
                                       g$g$6781$1Z2PAY)))
                                  (gensym))
                                 g$x$6779$1Z2PAY)
                               (if (g$memv$5009$1Z2PAY
                                     g$t$6780$1Z2PAY
                                     '(case-lambda))
                                 (cons
                                   'case-lambda
                                   (map (case-lambda
                                          ((g$x$6782$1Z2PAY)
                                           (cons
                                             (car g$x$6782$1Z2PAY)
                                             (map g$f$6778$1Z2PAY
                                                  (cdr g$x$6782$1Z2PAY)))))
                                        (cdr g$x$6779$1Z2PAY)))
                                 (if (g$memv$5009$1Z2PAY
                                       g$t$6780$1Z2PAY
                                       '(lambda))
                                   (g$cons*$5016$1Z2PAY
                                     'lambda
                                     (g$cadr$5178$1Z2PAY g$x$6779$1Z2PAY)
                                     (map g$f$6778$1Z2PAY
                                          (g$cddr$5180$1Z2PAY g$x$6779$1Z2PAY)))
                                   (if (g$memv$5009$1Z2PAY
                                         g$t$6780$1Z2PAY
                                         '(letrec))
                                     ((case-lambda
                                        ((g$bindings$6783$1Z2PAY
                                           g$body*$6784$1Z2PAY)
                                         ((case-lambda
                                            ((g$lhs*$6785$1Z2PAY
                                               g$rhs*$6786$1Z2PAY)
                                             (g$cons*$5016$1Z2PAY
                                               'letrec
                                               (map list
                                                    g$lhs*$6785$1Z2PAY
                                                    (map g$f$6778$1Z2PAY
                                                         g$rhs*$6786$1Z2PAY))
                                               (map g$f$6778$1Z2PAY
                                                    g$body*$6784$1Z2PAY))))
                                          (map car g$bindings$6783$1Z2PAY)
                                          (map g$cadr$5178$1Z2PAY
                                               g$bindings$6783$1Z2PAY))))
                                      (g$cadr$5178$1Z2PAY g$x$6779$1Z2PAY)
                                      (g$cddr$5180$1Z2PAY g$x$6779$1Z2PAY))
                                     (if (g$memv$5009$1Z2PAY
                                           g$t$6780$1Z2PAY
                                           '(letrec*))
                                       ((case-lambda
                                          ((g$bindings$6787$1Z2PAY
                                             g$body*$6788$1Z2PAY)
                                           ((case-lambda
                                              ((g$lhs*$6789$1Z2PAY
                                                 g$rhs*$6790$1Z2PAY)
                                               (g$cons*$5016$1Z2PAY
                                                 'letrec*
                                                 (map list
                                                      g$lhs*$6789$1Z2PAY
                                                      (map g$f$6778$1Z2PAY
                                                           g$rhs*$6790$1Z2PAY))
                                                 (map g$f$6778$1Z2PAY
                                                      g$body*$6788$1Z2PAY))))
                                            (map car g$bindings$6787$1Z2PAY)
                                            (map g$cadr$5178$1Z2PAY
                                                 g$bindings$6787$1Z2PAY))))
                                        (g$cadr$5178$1Z2PAY g$x$6779$1Z2PAY)
                                        (g$cddr$5180$1Z2PAY g$x$6779$1Z2PAY))
                                       (if (g$memv$5009$1Z2PAY
                                             g$t$6780$1Z2PAY
                                             '(library-letrec*))
                                         ((case-lambda
                                            ((g$name$6791$1Z2PAY
                                               g$x$6792$1Z2PAY)
                                             ((case-lambda
                                                ((g$bindings$6793$1Z2PAY
                                                   g$body*$6794$1Z2PAY)
                                                 ((case-lambda
                                                    ((g$lhs*$6795$1Z2PAY
                                                       g$lhs**$6796$1Z2PAY
                                                       g$rhs*$6797$1Z2PAY)
                                                     (g$cons*$5016$1Z2PAY
                                                       'library-letrec*
                                                       g$name$6791$1Z2PAY
                                                       (map list
                                                            g$lhs*$6795$1Z2PAY
                                                            g$lhs**$6796$1Z2PAY
                                                            (map g$f$6778$1Z2PAY
                                                                 g$rhs*$6797$1Z2PAY))
                                                       (map g$f$6778$1Z2PAY
                                                            g$body*$6794$1Z2PAY))))
                                                  (map car
                                                       g$bindings$6793$1Z2PAY)
                                                  (map g$cadr$5178$1Z2PAY
                                                       g$bindings$6793$1Z2PAY)
                                                  (map g$caddr$5184$1Z2PAY
                                                       g$bindings$6793$1Z2PAY))))
                                              (g$cadr$5178$1Z2PAY
                                                g$x$6792$1Z2PAY)
                                              (g$cddr$5180$1Z2PAY
                                                g$x$6792$1Z2PAY))))
                                          (g$cadr$5178$1Z2PAY g$x$6779$1Z2PAY)
                                          (cdr g$x$6779$1Z2PAY))
                                         (if (g$memv$5009$1Z2PAY
                                               g$t$6780$1Z2PAY
                                               '(begin))
                                           (cons
                                             'begin
                                             (map g$f$6778$1Z2PAY
                                                  (cdr g$x$6779$1Z2PAY)))
                                           (if (g$memv$5009$1Z2PAY
                                                 g$t$6780$1Z2PAY
                                                 '(set!))
                                             (list
                                               'set!
                                               (g$cadr$5178$1Z2PAY
                                                 g$x$6779$1Z2PAY)
                                               (g$f$6778$1Z2PAY
                                                 (g$caddr$5184$1Z2PAY
                                                   g$x$6779$1Z2PAY)))
                                             (if (g$memv$5009$1Z2PAY
                                                   g$t$6780$1Z2PAY
                                                   '(primitive))
                                               ((case-lambda
                                                  ((g$op$6798$1Z2PAY)
                                                   ((case-lambda
                                                      ((g$t$6799$1Z2PAY)
                                                       (if g$t$6799$1Z2PAY
                                                         ((case-lambda
                                                            ((g$loc$6800$1Z2PAY)
                                                             g$loc$6800$1Z2PAY))
                                                          g$t$6799$1Z2PAY)
                                                         g$op$6798$1Z2PAY)))
                                                    ((g$current-primitive-locations$6760$1Z2PAY)
                                                     g$op$6798$1Z2PAY))))
                                                (g$cadr$5178$1Z2PAY
                                                  g$x$6779$1Z2PAY))
                                               (if (g$memv$5009$1Z2PAY
                                                     g$t$6780$1Z2PAY
                                                     '(define))
                                                 g$x$6779$1Z2PAY
                                                 (if (list? g$x$6779$1Z2PAY)
                                                   (map g$f$6778$1Z2PAY
                                                        g$x$6779$1Z2PAY)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$6779$1Z2PAY
                                                     (list?
                                                       g$x$6779$1Z2PAY)))))))))))))))
                          (car g$x$6779$1Z2PAY))
                         g$x$6779$1Z2PAY)))))
          g$f$6778$1Z2PAY))))
   (g$expanded->core$6763$1Z2PAY
     g$expanded->core$6808$1Z2PAY
     (case-lambda
       ((g$x$6801$1Z2PAY) ((g$rewriter$6762$1Z2PAY '#t) g$x$6801$1Z2PAY))))
   (g$compile-core-expr$6764$1Z2PAY
     g$compile-core-expr$6809$1Z2PAY
     (case-lambda
       ((g$x$6802$1Z2PAY) ((g$rewriter$6762$1Z2PAY '#f) g$x$6802$1Z2PAY))))
   (g$compile-core-expr-to-port$6765$1Z2PAY
     g$compile-core-expr-to-port$6810$1Z2PAY
     (case-lambda
       ((g$x$6803$1Z2PAY g$p$6804$1Z2PAY)
        (g$pretty-print$6759$1Z2PAY
          ((g$rewriter$6762$1Z2PAY '#f) g$x$6803$1Z2PAY)
          g$p$6804$1Z2PAY)))))
  (void))

(library-letrec* (psyntax config) () (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$6849$1Z2PAY
     g$make-collection$7044$1Z2PAY
     (case-lambda
       (()
        ((case-lambda
           ((g$set$6910$1Z2PAY)
            (letrec* ((g$set-cons$6911$1Z2PAY
                        (case-lambda
                          ((g$x$6913$1Z2PAY g$ls$6914$1Z2PAY)
                           (if (g$memq$5008$1Z2PAY
                                 g$x$6913$1Z2PAY
                                 g$ls$6914$1Z2PAY)
                             g$ls$6914$1Z2PAY
                             (cons g$x$6913$1Z2PAY g$ls$6914$1Z2PAY))))))
              (case-lambda
                (() g$set$6910$1Z2PAY)
                ((g$x$6912$1Z2PAY)
                 (set! g$set$6910$1Z2PAY
                   (g$set-cons$6911$1Z2PAY
                     g$x$6912$1Z2PAY
                     g$set$6910$1Z2PAY)))))))
         '()))))
   (g$current-library-collection$6850$1Z2PAY
     g$current-library-collection$7045$1Z2PAY
     (g$make-parameter$6562$1Z2PAY
       (g$make-collection$6849$1Z2PAY)
       (case-lambda
         ((g$x$6915$1Z2PAY)
          (begin
            (if (not (procedure? g$x$6915$1Z2PAY))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$6915$1Z2PAY)
              (void))
            g$x$6915$1Z2PAY)))))
   (g$7943$6851$1Z2PAY
     g$7943$7046$1Z2PAY
     (make-record-type-descriptor
       'library
       '#f
       'g$7946$1Z2PAY
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$7945$6852$1Z2PAY g$7945$7047$1Z2PAY '#f)
   (g$7944$6853$1Z2PAY
     g$7944$7048$1Z2PAY
     (make-record-constructor-descriptor
       g$7943$6851$1Z2PAY
       '#f
       g$7945$6852$1Z2PAY))
   (g$library?$6854$1Z2PAY
     g$library?$7049$1Z2PAY
     (record-predicate g$7943$6851$1Z2PAY))
   (g$make-library$6855$1Z2PAY
     g$make-library$7050$1Z2PAY
     (record-constructor g$7944$6853$1Z2PAY))
   (g$library-id$6856$1Z2PAY
     g$library-id$7051$1Z2PAY
     (record-accessor g$7943$6851$1Z2PAY '0))
   (g$library-name$6857$1Z2PAY
     g$library-name$7052$1Z2PAY
     (record-accessor g$7943$6851$1Z2PAY '1))
   (g$library-version$6858$1Z2PAY
     g$library-version$7053$1Z2PAY
     (record-accessor g$7943$6851$1Z2PAY '2))
   (g$library-imp*$6859$1Z2PAY
     g$library-imp*$7054$1Z2PAY
     (record-accessor g$7943$6851$1Z2PAY '3))
   (g$library-vis*$6860$1Z2PAY
     g$library-vis*$7055$1Z2PAY
     (record-accessor g$7943$6851$1Z2PAY '4))
   (g$library-inv*$6861$1Z2PAY
     g$library-inv*$7056$1Z2PAY
     (record-accessor g$7943$6851$1Z2PAY '5))
   (g$library-subst$6862$1Z2PAY
     g$library-subst$7057$1Z2PAY
     (record-accessor g$7943$6851$1Z2PAY '6))
   (g$library-env$6863$1Z2PAY
     g$library-env$7058$1Z2PAY
     (record-accessor g$7943$6851$1Z2PAY '7))
   (g$library-visit-state$6864$1Z2PAY
     g$library-visit-state$7059$1Z2PAY
     (record-accessor g$7943$6851$1Z2PAY '8))
   (g$library-invoke-state$6865$1Z2PAY
     g$library-invoke-state$7060$1Z2PAY
     (record-accessor g$7943$6851$1Z2PAY '9))
   (g$library-visit-code$6866$1Z2PAY
     g$library-visit-code$7061$1Z2PAY
     (record-accessor g$7943$6851$1Z2PAY '10))
   (g$library-invoke-code$6867$1Z2PAY
     g$library-invoke-code$7062$1Z2PAY
     (record-accessor g$7943$6851$1Z2PAY '11))
   (g$library-visible?$6868$1Z2PAY
     g$library-visible?$7063$1Z2PAY
     (record-accessor g$7943$6851$1Z2PAY '12))
   (g$library-source-file-name$6869$1Z2PAY
     g$library-source-file-name$7064$1Z2PAY
     (record-accessor g$7943$6851$1Z2PAY '13))
   (g$set-library-id!$6870$1Z2PAY
     g$set-library-id!$7065$1Z2PAY
     (record-mutator g$7943$6851$1Z2PAY '0))
   (g$set-library-name!$6871$1Z2PAY
     g$set-library-name!$7066$1Z2PAY
     (record-mutator g$7943$6851$1Z2PAY '1))
   (g$set-library-version!$6872$1Z2PAY
     g$set-library-version!$7067$1Z2PAY
     (record-mutator g$7943$6851$1Z2PAY '2))
   (g$set-library-imp*!$6873$1Z2PAY
     g$set-library-imp*!$7068$1Z2PAY
     (record-mutator g$7943$6851$1Z2PAY '3))
   (g$set-library-vis*!$6874$1Z2PAY
     g$set-library-vis*!$7069$1Z2PAY
     (record-mutator g$7943$6851$1Z2PAY '4))
   (g$set-library-inv*!$6875$1Z2PAY
     g$set-library-inv*!$7070$1Z2PAY
     (record-mutator g$7943$6851$1Z2PAY '5))
   (g$set-library-subst!$6876$1Z2PAY
     g$set-library-subst!$7071$1Z2PAY
     (record-mutator g$7943$6851$1Z2PAY '6))
   (g$set-library-env!$6877$1Z2PAY
     g$set-library-env!$7072$1Z2PAY
     (record-mutator g$7943$6851$1Z2PAY '7))
   (g$set-library-visit-state!$6878$1Z2PAY
     g$set-library-visit-state!$7073$1Z2PAY
     (record-mutator g$7943$6851$1Z2PAY '8))
   (g$set-library-invoke-state!$6879$1Z2PAY
     g$set-library-invoke-state!$7074$1Z2PAY
     (record-mutator g$7943$6851$1Z2PAY '9))
   (g$set-library-visit-code!$6880$1Z2PAY
     g$set-library-visit-code!$7075$1Z2PAY
     (record-mutator g$7943$6851$1Z2PAY '10))
   (g$set-library-invoke-code!$6881$1Z2PAY
     g$set-library-invoke-code!$7076$1Z2PAY
     (record-mutator g$7943$6851$1Z2PAY '11))
   (g$set-library-visible?!$6882$1Z2PAY
     g$set-library-visible?!$7077$1Z2PAY
     (record-mutator g$7943$6851$1Z2PAY '12))
   (g$set-library-source-file-name!$6883$1Z2PAY
     g$set-library-source-file-name!$7078$1Z2PAY
     (record-mutator g$7943$6851$1Z2PAY '13))
   (g$rp$6884$1Z2PAY
     g$rp$7079$1Z2PAY
     (make-record-printer
       'library
       (case-lambda
         ((g$x$6916$1Z2PAY g$p$6917$1Z2PAY g$wr$6918$1Z2PAY)
          (begin
            (if (not (g$library?$6854$1Z2PAY g$x$6916$1Z2PAY))
              (assertion-violation 'record-type-printer '"not a library")
              (void))
            (display
              (g$format$6458$1Z2PAY
                '"#<library ~s>"
                (if (null? (g$library-version$6858$1Z2PAY g$x$6916$1Z2PAY))
                  (g$library-name$6857$1Z2PAY g$x$6916$1Z2PAY)
                  (append
                    (g$library-name$6857$1Z2PAY g$x$6916$1Z2PAY)
                    (list (g$library-version$6858$1Z2PAY g$x$6916$1Z2PAY)))))
              g$p$6917$1Z2PAY))))))
   (g$find-dependencies$6885$1Z2PAY
     g$find-dependencies$7080$1Z2PAY
     (case-lambda
       ((g$ls$6919$1Z2PAY)
        (if (null? g$ls$6919$1Z2PAY)
          '()
          (assertion-violation 'find-dependencies '"cannot handle deps yet")))))
   (g$find-library-by$6886$1Z2PAY
     g$find-library-by$7081$1Z2PAY
     (case-lambda
       ((g$pred$6920$1Z2PAY)
        ((letrec ((g$f$6921$1Z2PAY
                    (case-lambda
                      ((g$ls$6922$1Z2PAY)
                       (if (null? g$ls$6922$1Z2PAY)
                         '#f
                         (if (g$pred$6920$1Z2PAY (car g$ls$6922$1Z2PAY))
                           (car g$ls$6922$1Z2PAY)
                           (g$f$6921$1Z2PAY (cdr g$ls$6922$1Z2PAY))))))))
           g$f$6921$1Z2PAY)
         ((g$current-library-collection$6850$1Z2PAY))))))
   (g$library-path$6887$1Z2PAY
     g$library-path$7082$1Z2PAY
     (g$make-parameter$6562$1Z2PAY
       '(".")
       (case-lambda
         ((g$x$6923$1Z2PAY)
          (if (if (list? g$x$6923$1Z2PAY)
                (begin '#f (g$for-all$5014$1Z2PAY string? g$x$6923$1Z2PAY))
                '#f)
            (map (case-lambda ((g$x$6924$1Z2PAY) g$x$6924$1Z2PAY))
                 g$x$6923$1Z2PAY)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$6923$1Z2PAY))))))
   (g$library-extensions$6888$1Z2PAY
     g$library-extensions$7083$1Z2PAY
     (g$make-parameter$6562$1Z2PAY
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$6925$1Z2PAY)
          (if (if (list? g$x$6925$1Z2PAY)
                (begin '#f (g$for-all$5014$1Z2PAY string? g$x$6925$1Z2PAY))
                '#f)
            (map (case-lambda ((g$x$6926$1Z2PAY) g$x$6926$1Z2PAY))
                 g$x$6925$1Z2PAY)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$6925$1Z2PAY))))))
   (g$library-name->file-name$6889$1Z2PAY
     g$library-name->file-name$7084$1Z2PAY
     (case-lambda
       ((g$x$6927$1Z2PAY)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$6251$1Z2PAY)))
          (case-lambda
            ((g$p$6930$1Z2PAY g$extract$6931$1Z2PAY)
             ((case-lambda
                ((g$extract$6932$1Z2PAY g$p$6933$1Z2PAY)
                 (letrec* ((g$display-hex$6934$1Z2PAY
                             (case-lambda
                               ((g$n$6942$1Z2PAY)
                                (if (<= '0 g$n$6942$1Z2PAY '9)
                                  (display g$n$6942$1Z2PAY g$p$6933$1Z2PAY)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$6942$1Z2PAY '10)))
                                    g$p$6933$1Z2PAY))))))
                   (begin
                     ((letrec ((g$f$6935$1Z2PAY
                                 (case-lambda
                                   ((g$ls$6936$1Z2PAY)
                                    (if (not (null? g$ls$6936$1Z2PAY))
                                      (begin
                                        (display '"/" g$p$6933$1Z2PAY)
                                        (for-each
                                          (case-lambda
                                            ((g$c$6937$1Z2PAY)
                                             (if ((case-lambda
                                                    ((g$t$6938$1Z2PAY)
                                                     (if g$t$6938$1Z2PAY
                                                       g$t$6938$1Z2PAY
                                                       ((case-lambda
                                                          ((g$t$6939$1Z2PAY)
                                                           (if g$t$6939$1Z2PAY
                                                             g$t$6939$1Z2PAY
                                                             ((case-lambda
                                                                ((g$t$6940$1Z2PAY)
                                                                 (if g$t$6940$1Z2PAY
                                                                   g$t$6940$1Z2PAY
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$5009$1Z2PAY
                                                                       g$c$6937$1Z2PAY
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$5215$1Z2PAY
                                                                '#\0
                                                                g$c$6937$1Z2PAY
                                                                '#\9)))))
                                                        (g$char<=?$5215$1Z2PAY
                                                          '#\A
                                                          g$c$6937$1Z2PAY
                                                          '#\Z)))))
                                                  (g$char<=?$5215$1Z2PAY
                                                    '#\a
                                                    g$c$6937$1Z2PAY
                                                    '#\z))
                                               (display
                                                 g$c$6937$1Z2PAY
                                                 g$p$6933$1Z2PAY)
                                               (begin
                                                 (display '"%" g$p$6933$1Z2PAY)
                                                 ((case-lambda
                                                    ((g$n$6941$1Z2PAY)
                                                     (begin
                                                       (g$display-hex$6934$1Z2PAY
                                                         (g$quotient$5830$1Z2PAY
                                                           g$n$6941$1Z2PAY
                                                           '16))
                                                       (g$display-hex$6934$1Z2PAY
                                                         (g$remainder$5831$1Z2PAY
                                                           g$n$6941$1Z2PAY
                                                           '16)))))
                                                  (char->integer
                                                    g$c$6937$1Z2PAY))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$6936$1Z2PAY))))
                                        (g$f$6935$1Z2PAY
                                          (cdr g$ls$6936$1Z2PAY)))
                                      (void))))))
                        g$f$6935$1Z2PAY)
                      g$x$6927$1Z2PAY)
                     (g$extract$6932$1Z2PAY)))))
              g$extract$6931$1Z2PAY
              g$p$6930$1Z2PAY)))))))
   (g$file-locator$6890$1Z2PAY
     g$file-locator$7085$1Z2PAY
     (g$make-parameter$6562$1Z2PAY
       (case-lambda
         ((g$x$6943$1Z2PAY)
          ((case-lambda
             ((g$str$6944$1Z2PAY)
              ((letrec ((g$f$6945$1Z2PAY
                          (case-lambda
                            ((g$ls$6946$1Z2PAY
                               g$exts$6947$1Z2PAY
                               g$failed-list$6948$1Z2PAY)
                             (if (null? g$ls$6946$1Z2PAY)
                               (g$file-locator-resolution-error$6560$1Z2PAY
                                 g$x$6943$1Z2PAY
                                 (reverse g$failed-list$6948$1Z2PAY))
                               (if (null? g$exts$6947$1Z2PAY)
                                 (g$f$6945$1Z2PAY
                                   (cdr g$ls$6946$1Z2PAY)
                                   (g$library-extensions$6888$1Z2PAY)
                                   g$failed-list$6948$1Z2PAY)
                                 ((case-lambda
                                    ((g$name$6949$1Z2PAY)
                                     (if (g$file-exists?$5471$1Z2PAY
                                           g$name$6949$1Z2PAY)
                                       g$name$6949$1Z2PAY
                                       (g$f$6945$1Z2PAY
                                         g$ls$6946$1Z2PAY
                                         (cdr g$exts$6947$1Z2PAY)
                                         (cons
                                           g$name$6949$1Z2PAY
                                           g$failed-list$6948$1Z2PAY)))))
                                  (string-append
                                    (car g$ls$6946$1Z2PAY)
                                    g$str$6944$1Z2PAY
                                    (car g$exts$6947$1Z2PAY)))))))))
                 g$f$6945$1Z2PAY)
               (g$library-path$6887$1Z2PAY)
               (g$library-extensions$6888$1Z2PAY)
               '())))
           (g$library-name->file-name$6889$1Z2PAY g$x$6943$1Z2PAY))))
       (case-lambda
         ((g$f$6950$1Z2PAY)
          (if (procedure? g$f$6950$1Z2PAY)
            g$f$6950$1Z2PAY
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$6950$1Z2PAY))))))
   (g$serialize-all$6891$1Z2PAY
     g$serialize-all$7086$1Z2PAY
     (case-lambda
       ((g$serialize$6951$1Z2PAY g$compile$6952$1Z2PAY)
        (letrec* ((g$library-desc$6953$1Z2PAY
                    (case-lambda
                      ((g$x$6955$1Z2PAY)
                       (list
                         (g$library-id$6856$1Z2PAY g$x$6955$1Z2PAY)
                         (g$library-name$6857$1Z2PAY g$x$6955$1Z2PAY))))))
          (for-each
            (case-lambda
              ((g$x$6954$1Z2PAY)
               (if (g$library-source-file-name$6869$1Z2PAY g$x$6954$1Z2PAY)
                 (g$serialize$6951$1Z2PAY
                   (g$library-source-file-name$6869$1Z2PAY g$x$6954$1Z2PAY)
                   (list
                     (g$library-id$6856$1Z2PAY g$x$6954$1Z2PAY)
                     (g$library-name$6857$1Z2PAY g$x$6954$1Z2PAY)
                     (g$library-version$6858$1Z2PAY g$x$6954$1Z2PAY)
                     (map g$library-desc$6953$1Z2PAY
                          (g$library-imp*$6859$1Z2PAY g$x$6954$1Z2PAY))
                     (map g$library-desc$6953$1Z2PAY
                          (g$library-vis*$6860$1Z2PAY g$x$6954$1Z2PAY))
                     (map g$library-desc$6953$1Z2PAY
                          (g$library-inv*$6861$1Z2PAY g$x$6954$1Z2PAY))
                     (g$library-subst$6862$1Z2PAY g$x$6954$1Z2PAY)
                     (g$library-env$6863$1Z2PAY g$x$6954$1Z2PAY)
                     (g$compile$6952$1Z2PAY
                       (g$library-visit-code$6866$1Z2PAY g$x$6954$1Z2PAY))
                     (g$compile$6952$1Z2PAY
                       (g$library-invoke-code$6867$1Z2PAY g$x$6954$1Z2PAY))
                     (g$library-visible?$6868$1Z2PAY g$x$6954$1Z2PAY)))
                 (void))))
            ((g$current-library-collection$6850$1Z2PAY)))))))
   (g$current-precompiled-library-loader$6892$1Z2PAY
     g$current-precompiled-library-loader$7087$1Z2PAY
     (g$make-parameter$6562$1Z2PAY
       (case-lambda ((g$filename$6956$1Z2PAY g$sk$6957$1Z2PAY) '#f))))
   (g$try-load-from-file$6893$1Z2PAY
     g$try-load-from-file$7088$1Z2PAY
     (case-lambda
       ((g$filename$6958$1Z2PAY)
        ((g$current-precompiled-library-loader$6892$1Z2PAY)
         g$filename$6958$1Z2PAY
         (case-lambda
           ((g$id$6959$1Z2PAY
              g$name$6960$1Z2PAY
              g$ver$6961$1Z2PAY
              g$imp*$6962$1Z2PAY
              g$vis*$6963$1Z2PAY
              g$inv*$6964$1Z2PAY
              g$exp-subst$6965$1Z2PAY
              g$exp-env$6966$1Z2PAY
              g$visit-proc$6967$1Z2PAY
              g$invoke-proc$6968$1Z2PAY
              g$visible?$6969$1Z2PAY)
            ((letrec ((g$f$6970$1Z2PAY
                        (case-lambda
                          ((g$deps$6971$1Z2PAY)
                           (if (null? g$deps$6971$1Z2PAY)
                             (begin
                               (g$install-library$6903$1Z2PAY
                                 g$id$6959$1Z2PAY
                                 g$name$6960$1Z2PAY
                                 g$ver$6961$1Z2PAY
                                 g$imp*$6962$1Z2PAY
                                 g$vis*$6963$1Z2PAY
                                 g$inv*$6964$1Z2PAY
                                 g$exp-subst$6965$1Z2PAY
                                 g$exp-env$6966$1Z2PAY
                                 g$visit-proc$6967$1Z2PAY
                                 g$invoke-proc$6968$1Z2PAY
                                 '#f
                                 '#f
                                 g$visible?$6969$1Z2PAY
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$6972$1Z2PAY)
                                 ((case-lambda
                                    ((g$label$6973$1Z2PAY g$dname$6974$1Z2PAY)
                                     ((case-lambda
                                        ((g$l$6975$1Z2PAY)
                                         (if (if (g$library?$6854$1Z2PAY
                                                   g$l$6975$1Z2PAY)
                                               (begin
                                                 '#f
                                                 (eq? g$label$6973$1Z2PAY
                                                      (g$library-id$6856$1Z2PAY
                                                        g$l$6975$1Z2PAY)))
                                               '#f)
                                           (g$f$6970$1Z2PAY
                                             (cdr g$deps$6971$1Z2PAY))
                                           (begin
                                             (g$library-version-mismatch-warning$6559$1Z2PAY
                                               g$name$6960$1Z2PAY
                                               g$dname$6974$1Z2PAY
                                               g$filename$6958$1Z2PAY)
                                             '#f))))
                                      (g$find-library-by-name$6898$1Z2PAY
                                        g$dname$6974$1Z2PAY))))
                                  (car g$d$6972$1Z2PAY)
                                  (g$cadr$5178$1Z2PAY g$d$6972$1Z2PAY))))
                              (car g$deps$6971$1Z2PAY)))))))
               g$f$6970$1Z2PAY)
             (append g$imp*$6962$1Z2PAY g$vis*$6963$1Z2PAY g$inv*$6964$1Z2PAY)))
           (g$others$6976$1Z2PAY '#f))))))
   (g$library-loader$6894$1Z2PAY
     g$library-loader$7089$1Z2PAY
     (g$make-parameter$6562$1Z2PAY
       (case-lambda
         ((g$x$6977$1Z2PAY)
          ((case-lambda
             ((g$file-name$6978$1Z2PAY)
              (if (not g$file-name$6978$1Z2PAY)
                (assertion-violation '#f '"cannot file library" g$x$6977$1Z2PAY)
                ((case-lambda
                   ((g$t$6979$1Z2PAY)
                    (if g$t$6979$1Z2PAY
                      g$t$6979$1Z2PAY
                      (begin
                        '#f
                        ((g$current-library-expander$6895$1Z2PAY)
                         (g$read-library-source-file$6561$1Z2PAY
                           g$file-name$6978$1Z2PAY)
                         g$file-name$6978$1Z2PAY
                         (case-lambda
                           ((g$name$6980$1Z2PAY)
                            (if (not (equal?
                                       g$name$6980$1Z2PAY
                                       g$x$6977$1Z2PAY))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (g$open-string-output-port$6251$1Z2PAY)))
                                  (case-lambda
                                    ((g$p$6983$1Z2PAY g$e$6984$1Z2PAY)
                                     ((case-lambda
                                        ((g$e$6985$1Z2PAY g$p$6986$1Z2PAY)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$6986$1Z2PAY)
                                           (write
                                             g$x$6977$1Z2PAY
                                             g$p$6986$1Z2PAY)
                                           (display
                                             '" in file "
                                             g$p$6986$1Z2PAY)
                                           (display
                                             g$file-name$6978$1Z2PAY
                                             g$p$6986$1Z2PAY)
                                           (display '", found " g$p$6986$1Z2PAY)
                                           (write
                                             g$name$6980$1Z2PAY
                                             g$p$6986$1Z2PAY)
                                           (display '" instead" g$p$6986$1Z2PAY)
                                           (g$e$6985$1Z2PAY))))
                                      g$e$6984$1Z2PAY
                                      g$p$6983$1Z2PAY)))))
                              (void)))))))))
                 (g$try-load-from-file$6893$1Z2PAY g$file-name$6978$1Z2PAY)))))
           ((g$file-locator$6890$1Z2PAY) g$x$6977$1Z2PAY))))
       (case-lambda
         ((g$f$6987$1Z2PAY)
          (if (procedure? g$f$6987$1Z2PAY)
            g$f$6987$1Z2PAY
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$6987$1Z2PAY))))))
   (g$current-library-expander$6895$1Z2PAY
     g$current-library-expander$7090$1Z2PAY
     (g$make-parameter$6562$1Z2PAY
       (case-lambda
         ((g$x$6988$1Z2PAY)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$6989$1Z2PAY)
          (if (procedure? g$f$6989$1Z2PAY)
            g$f$6989$1Z2PAY
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$6989$1Z2PAY))))))
   (g$external-pending-libraries$6896$1Z2PAY
     g$external-pending-libraries$7091$1Z2PAY
     (g$make-parameter$6562$1Z2PAY '()))
   (g$find-external-library$6897$1Z2PAY
     g$find-external-library$7092$1Z2PAY
     (case-lambda
       ((g$name$6990$1Z2PAY)
        (begin
          (if (g$member$5010$1Z2PAY
                g$name$6990$1Z2PAY
                (g$external-pending-libraries$6896$1Z2PAY))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$6990$1Z2PAY)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$6993$1Z2PAY
                g$external-pending-libraries$6994$1Z2PAY)
              ((case-lambda
                 ((g$swap$6995$1Z2PAY)
                  (dynamic-wind
                    g$swap$6995$1Z2PAY
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$6894$1Z2PAY) g$name$6990$1Z2PAY)
                         ((case-lambda
                            ((g$t$6996$1Z2PAY)
                             (if g$t$6996$1Z2PAY
                               g$t$6996$1Z2PAY
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$6990$1Z2PAY)))))
                          (g$find-library-by$6886$1Z2PAY
                            (case-lambda
                              ((g$x$6997$1Z2PAY)
                               (equal?
                                 (g$library-name$6857$1Z2PAY g$x$6997$1Z2PAY)
                                 g$name$6990$1Z2PAY))))))))
                    g$swap$6995$1Z2PAY)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$6998$1Z2PAY)
                      (begin
                        (g$external-pending-libraries$6993$1Z2PAY
                          g$external-pending-libraries$6994$1Z2PAY)
                        (set! g$external-pending-libraries$6994$1Z2PAY
                          g$t$6998$1Z2PAY))))
                   (g$external-pending-libraries$6993$1Z2PAY)))))))
           g$external-pending-libraries$6896$1Z2PAY
           (cons
             g$name$6990$1Z2PAY
             (g$external-pending-libraries$6896$1Z2PAY)))))))
   (g$find-library-by-name$6898$1Z2PAY
     g$find-library-by-name$7093$1Z2PAY
     (case-lambda
       ((g$name$6999$1Z2PAY)
        ((case-lambda
           ((g$t$7000$1Z2PAY)
            (if g$t$7000$1Z2PAY
              g$t$7000$1Z2PAY
              (begin
                '#f
                (g$find-external-library$6897$1Z2PAY g$name$6999$1Z2PAY)))))
         (g$find-library-by$6886$1Z2PAY
           (case-lambda
             ((g$x$7001$1Z2PAY)
              (equal?
                (g$library-name$6857$1Z2PAY g$x$7001$1Z2PAY)
                g$name$6999$1Z2PAY))))))))
   (g$library-exists?$6899$1Z2PAY
     g$library-exists?$7094$1Z2PAY
     (case-lambda
       ((g$name$7002$1Z2PAY)
        (if (g$find-library-by$6886$1Z2PAY
              (case-lambda
                ((g$x$7003$1Z2PAY)
                 (equal?
                   (g$library-name$6857$1Z2PAY g$x$7003$1Z2PAY)
                   g$name$7002$1Z2PAY))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$6900$1Z2PAY
     g$find-library-by-spec/die$7095$1Z2PAY
     (case-lambda
       ((g$spec$7004$1Z2PAY)
        ((case-lambda
           ((g$id$7005$1Z2PAY)
            ((case-lambda
               ((g$t$7006$1Z2PAY)
                (if g$t$7006$1Z2PAY
                  g$t$7006$1Z2PAY
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$7004$1Z2PAY)))))
             (g$find-library-by$6886$1Z2PAY
               (case-lambda
                 ((g$x$7007$1Z2PAY)
                  (eq? g$id$7005$1Z2PAY
                       (g$library-id$6856$1Z2PAY g$x$7007$1Z2PAY))))))))
         (car g$spec$7004$1Z2PAY)))))
   (g$label->binding-table$6901$1Z2PAY
     g$label->binding-table$7096$1Z2PAY
     (g$make-eq-hashtable$5452$1Z2PAY))
   (g$install-library-record$6902$1Z2PAY
     g$install-library-record$7097$1Z2PAY
     (case-lambda
       ((g$lib$7008$1Z2PAY)
        (begin
          ((case-lambda
             ((g$exp-env$7009$1Z2PAY)
              (for-each
                (case-lambda
                  ((g$x$7010$1Z2PAY)
                   ((case-lambda
                      ((g$label$7011$1Z2PAY g$binding$7012$1Z2PAY)
                       ((case-lambda
                          ((g$binding$7013$1Z2PAY)
                           (g$hashtable-set!$5456$1Z2PAY
                             g$label->binding-table$6901$1Z2PAY
                             g$label$7011$1Z2PAY
                             g$binding$7013$1Z2PAY)))
                        ((case-lambda
                           ((g$t$7014$1Z2PAY)
                            (if (g$memv$5009$1Z2PAY g$t$7014$1Z2PAY '(global))
                              (cons
                                'global
                                (cons
                                  g$lib$7008$1Z2PAY
                                  (cdr g$binding$7012$1Z2PAY)))
                              (if (g$memv$5009$1Z2PAY
                                    g$t$7014$1Z2PAY
                                    '(global-macro))
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$7008$1Z2PAY
                                    (cdr g$binding$7012$1Z2PAY)))
                                (if (g$memv$5009$1Z2PAY
                                      g$t$7014$1Z2PAY
                                      '(global-macro!))
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$7008$1Z2PAY
                                      (cdr g$binding$7012$1Z2PAY)))
                                  g$binding$7012$1Z2PAY)))))
                         (car g$binding$7012$1Z2PAY)))))
                    (car g$x$7010$1Z2PAY)
                    (cdr g$x$7010$1Z2PAY))))
                g$exp-env$7009$1Z2PAY)))
           (g$library-env$6863$1Z2PAY g$lib$7008$1Z2PAY))
          ((g$current-library-collection$6850$1Z2PAY) g$lib$7008$1Z2PAY)))))
   (g$install-library$6903$1Z2PAY
     g$install-library$7098$1Z2PAY
     (case-lambda
       ((g$id$7015$1Z2PAY
          g$name$7016$1Z2PAY
          g$ver$7017$1Z2PAY
          g$imp*$7018$1Z2PAY
          g$vis*$7019$1Z2PAY
          g$inv*$7020$1Z2PAY
          g$exp-subst$7021$1Z2PAY
          g$exp-env$7022$1Z2PAY
          g$visit-proc$7023$1Z2PAY
          g$invoke-proc$7024$1Z2PAY
          g$visit-code$7025$1Z2PAY
          g$invoke-code$7026$1Z2PAY
          g$visible?$7027$1Z2PAY
          g$source-file-name$7028$1Z2PAY)
        ((case-lambda
           ((g$imp-lib*$7029$1Z2PAY
              g$vis-lib*$7030$1Z2PAY
              g$inv-lib*$7031$1Z2PAY)
            (begin
              (if (not (if (symbol? g$id$7015$1Z2PAY)
                         (if (list? g$name$7016$1Z2PAY)
                           (begin '#f (list? g$ver$7017$1Z2PAY))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$7015$1Z2PAY
                  g$name$7016$1Z2PAY
                  g$ver$7017$1Z2PAY)
                (void))
              (if (g$library-exists?$6899$1Z2PAY g$name$7016$1Z2PAY)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$7016$1Z2PAY)
                (void))
              ((case-lambda
                 ((g$lib$7032$1Z2PAY)
                  (g$install-library-record$6902$1Z2PAY g$lib$7032$1Z2PAY)))
               (g$make-library$6855$1Z2PAY
                 g$id$7015$1Z2PAY
                 g$name$7016$1Z2PAY
                 g$ver$7017$1Z2PAY
                 g$imp-lib*$7029$1Z2PAY
                 g$vis-lib*$7030$1Z2PAY
                 g$inv-lib*$7031$1Z2PAY
                 g$exp-subst$7021$1Z2PAY
                 g$exp-env$7022$1Z2PAY
                 g$visit-proc$7023$1Z2PAY
                 g$invoke-proc$7024$1Z2PAY
                 g$visit-code$7025$1Z2PAY
                 g$invoke-code$7026$1Z2PAY
                 g$visible?$7027$1Z2PAY
                 g$source-file-name$7028$1Z2PAY)))))
         (map g$find-library-by-spec/die$6900$1Z2PAY g$imp*$7018$1Z2PAY)
         (map g$find-library-by-spec/die$6900$1Z2PAY g$vis*$7019$1Z2PAY)
         (map g$find-library-by-spec/die$6900$1Z2PAY g$inv*$7020$1Z2PAY)))))
   (g$imported-label->binding$6904$1Z2PAY
     g$imported-label->binding$7099$1Z2PAY
     (case-lambda
       ((g$lab$7033$1Z2PAY)
        (g$hashtable-ref$5455$1Z2PAY
          g$label->binding-table$6901$1Z2PAY
          g$lab$7033$1Z2PAY
          '#f))))
   (g$invoke-library$6905$1Z2PAY
     g$invoke-library$7100$1Z2PAY
     (case-lambda
       ((g$lib$7034$1Z2PAY)
        ((case-lambda
           ((g$invoke$7035$1Z2PAY)
            (if (procedure? g$invoke$7035$1Z2PAY)
              (begin
                (g$set-library-invoke-state!$6879$1Z2PAY
                  g$lib$7034$1Z2PAY
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$7034$1Z2PAY))))
                (for-each
                  g$invoke-library$6905$1Z2PAY
                  (g$library-inv*$6861$1Z2PAY g$lib$7034$1Z2PAY))
                (g$set-library-invoke-state!$6879$1Z2PAY
                  g$lib$7034$1Z2PAY
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$7034$1Z2PAY))))
                (g$invoke$7035$1Z2PAY)
                (g$set-library-invoke-state!$6879$1Z2PAY g$lib$7034$1Z2PAY '#t))
              (void))))
         (g$library-invoke-state$6865$1Z2PAY g$lib$7034$1Z2PAY)))))
   (g$visit-library$6906$1Z2PAY
     g$visit-library$7101$1Z2PAY
     (case-lambda
       ((g$lib$7036$1Z2PAY)
        ((case-lambda
           ((g$visit$7037$1Z2PAY)
            (if (procedure? g$visit$7037$1Z2PAY)
              (begin
                (g$set-library-visit-state!$6878$1Z2PAY
                  g$lib$7036$1Z2PAY
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$7036$1Z2PAY))))
                (for-each
                  g$invoke-library$6905$1Z2PAY
                  (g$library-vis*$6860$1Z2PAY g$lib$7036$1Z2PAY))
                (g$set-library-visit-state!$6878$1Z2PAY
                  g$lib$7036$1Z2PAY
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$7036$1Z2PAY))))
                (g$visit$7037$1Z2PAY)
                (g$set-library-visit-state!$6878$1Z2PAY g$lib$7036$1Z2PAY '#t))
              (void))))
         (g$library-visit-state$6864$1Z2PAY g$lib$7036$1Z2PAY)))))
   (g$invoke-library-by-spec$6907$1Z2PAY
     g$invoke-library-by-spec$7102$1Z2PAY
     (case-lambda
       ((g$spec$7038$1Z2PAY)
        (g$invoke-library$6905$1Z2PAY
          (g$find-library-by-spec/die$6900$1Z2PAY g$spec$7038$1Z2PAY)))))
   (g$installed-libraries$6908$1Z2PAY
     g$installed-libraries$7103$1Z2PAY
     (case-lambda
       ((g$all?$7039$1Z2PAY)
        ((letrec ((g$f$7040$1Z2PAY
                    (case-lambda
                      ((g$ls$7041$1Z2PAY)
                       (if (null? g$ls$7041$1Z2PAY)
                         '()
                         (if ((case-lambda
                                ((g$t$7042$1Z2PAY)
                                 (if g$t$7042$1Z2PAY
                                   g$t$7042$1Z2PAY
                                   (begin
                                     '#f
                                     (g$library-visible?$6868$1Z2PAY
                                       (car g$ls$7041$1Z2PAY))))))
                              g$all?$7039$1Z2PAY)
                           (cons
                             (car g$ls$7041$1Z2PAY)
                             (g$f$7040$1Z2PAY (cdr g$ls$7041$1Z2PAY)))
                           (g$f$7040$1Z2PAY (cdr g$ls$7041$1Z2PAY))))))))
           g$f$7040$1Z2PAY)
         ((g$current-library-collection$6850$1Z2PAY))))
       (() (g$installed-libraries$6908$1Z2PAY '#f))))
   (g$library-spec$6909$1Z2PAY
     g$library-spec$7104$1Z2PAY
     (case-lambda
       ((g$x$7043$1Z2PAY)
        (begin
          (if (not (g$library?$6854$1Z2PAY g$x$7043$1Z2PAY))
            (assertion-violation 'library-spec '"not a library" g$x$7043$1Z2PAY)
            (void))
          (list
            (g$library-id$6856$1Z2PAY g$x$7043$1Z2PAY)
            (g$library-name$6857$1Z2PAY g$x$7043$1Z2PAY)
            (g$library-version$6858$1Z2PAY g$x$7043$1Z2PAY)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$7105$1Z2PAY
     g$build-global-define$7215$1Z2PAY
     (case-lambda ((g$x$7186$1Z2PAY) (g$build-void$7182$1Z2PAY))))
   (g$build-lambda$7154$1Z2PAY
     g$build-lambda$7216$1Z2PAY
     (case-lambda
       ((g$ae$7187$1Z2PAY g$vars$7188$1Z2PAY g$exp$7189$1Z2PAY)
        (list 'case-lambda (list g$vars$7188$1Z2PAY g$exp$7189$1Z2PAY)))))
   (g$build-case-lambda$7155$1Z2PAY
     g$build-case-lambda$7217$1Z2PAY
     (case-lambda
       ((g$ae$7190$1Z2PAY g$vars*$7191$1Z2PAY g$exp*$7192$1Z2PAY)
        (cons 'case-lambda (map list g$vars*$7191$1Z2PAY g$exp*$7192$1Z2PAY)))))
   (g$build-let$7156$1Z2PAY
     g$build-let$7218$1Z2PAY
     (case-lambda
       ((g$ae$7193$1Z2PAY
          g$lhs*$7194$1Z2PAY
          g$rhs*$7195$1Z2PAY
          g$body$7196$1Z2PAY)
        (cons
          (g$build-lambda$7154$1Z2PAY
            g$ae$7193$1Z2PAY
            g$lhs*$7194$1Z2PAY
            g$body$7196$1Z2PAY)
          g$rhs*$7195$1Z2PAY))))
   (g$build-sequence$7181$1Z2PAY
     g$build-sequence$7219$1Z2PAY
     (case-lambda
       ((g$ae$7197$1Z2PAY g$exps$7198$1Z2PAY)
        ((letrec ((g$loop$7199$1Z2PAY
                    (case-lambda
                      ((g$exps$7200$1Z2PAY)
                       (if (null? (cdr g$exps$7200$1Z2PAY))
                         (car g$exps$7200$1Z2PAY)
                         (if (equal?
                               (car g$exps$7200$1Z2PAY)
                               (g$build-void$7182$1Z2PAY))
                           (g$loop$7199$1Z2PAY (cdr g$exps$7200$1Z2PAY))
                           (cons 'begin g$exps$7200$1Z2PAY)))))))
           g$loop$7199$1Z2PAY)
         g$exps$7198$1Z2PAY))))
   (g$build-void$7182$1Z2PAY
     g$build-void$7220$1Z2PAY
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$7183$1Z2PAY
     g$build-letrec$7221$1Z2PAY
     (case-lambda
       ((g$ae$7201$1Z2PAY
          g$vars$7202$1Z2PAY
          g$val-exps$7203$1Z2PAY
          g$body-exp$7204$1Z2PAY)
        (if (null? g$vars$7202$1Z2PAY)
          g$body-exp$7204$1Z2PAY
          (list
            'letrec
            (map list g$vars$7202$1Z2PAY g$val-exps$7203$1Z2PAY)
            g$body-exp$7204$1Z2PAY)))))
   (g$build-letrec*$7184$1Z2PAY
     g$build-letrec*$7222$1Z2PAY
     (case-lambda
       ((g$ae$7205$1Z2PAY
          g$vars$7206$1Z2PAY
          g$val-exps$7207$1Z2PAY
          g$body-exp$7208$1Z2PAY)
        (if (null? g$vars$7206$1Z2PAY)
          g$body-exp$7208$1Z2PAY
          (list
            'letrec*
            (map list g$vars$7206$1Z2PAY g$val-exps$7207$1Z2PAY)
            g$body-exp$7208$1Z2PAY)))))
   (g$build-library-letrec*$7185$1Z2PAY
     g$build-library-letrec*$7223$1Z2PAY
     (case-lambda
       ((g$ae$7209$1Z2PAY
          g$name$7210$1Z2PAY
          g$vars$7211$1Z2PAY
          g$locs$7212$1Z2PAY
          g$val-exps$7213$1Z2PAY
          g$body-exp$7214$1Z2PAY)
        (list
          'library-letrec*
          g$name$7210$1Z2PAY
          (map list
               g$vars$7211$1Z2PAY
               g$locs$7212$1Z2PAY
               g$val-exps$7213$1Z2PAY)
          g$body-exp$7214$1Z2PAY)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$7224$1Z2PAY
     g$set-cons$10908$1Z2PAY
     (case-lambda
       ((g$x$7687$1Z2PAY g$ls$7688$1Z2PAY)
        (if (g$memq$5008$1Z2PAY g$x$7687$1Z2PAY g$ls$7688$1Z2PAY)
          g$ls$7688$1Z2PAY
          (cons g$x$7687$1Z2PAY g$ls$7688$1Z2PAY)))))
   (g$set-union$7225$1Z2PAY
     g$set-union$10909$1Z2PAY
     (case-lambda
       ((g$ls1$7689$1Z2PAY g$ls2$7690$1Z2PAY)
        (if (null? g$ls1$7689$1Z2PAY)
          g$ls2$7690$1Z2PAY
          (if (g$memq$5008$1Z2PAY (car g$ls1$7689$1Z2PAY) g$ls2$7690$1Z2PAY)
            (g$set-union$7225$1Z2PAY (cdr g$ls1$7689$1Z2PAY) g$ls2$7690$1Z2PAY)
            (cons
              (car g$ls1$7689$1Z2PAY)
              (g$set-union$7225$1Z2PAY
                (cdr g$ls1$7689$1Z2PAY)
                g$ls2$7690$1Z2PAY)))))))
   (g$top-mark*$7227$1Z2PAY g$top-mark*$10910$1Z2PAY '(top))
   (g$top-marked?$7228$1Z2PAY
     g$top-marked?$10911$1Z2PAY
     (case-lambda
       ((g$m*$7691$1Z2PAY) (g$memq$5008$1Z2PAY 'top g$m*$7691$1Z2PAY))))
   (g$gen-lexical$7229$1Z2PAY
     g$gen-lexical$10912$1Z2PAY
     (case-lambda
       ((g$sym$7692$1Z2PAY)
        (if (symbol? g$sym$7692$1Z2PAY)
          (gensym g$sym$7692$1Z2PAY)
          (if (g$stx?$7262$1Z2PAY g$sym$7692$1Z2PAY)
            (g$gen-lexical$7229$1Z2PAY
              (g$id->sym$7291$1Z2PAY g$sym$7692$1Z2PAY))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$7692$1Z2PAY))))))
   (g$gen-global$7230$1Z2PAY
     g$gen-global$10913$1Z2PAY
     (case-lambda
       ((g$x$7693$1Z2PAY) (g$gen-lexical$7229$1Z2PAY g$x$7693$1Z2PAY))))
   (g$gen-label$7231$1Z2PAY
     g$gen-label$10914$1Z2PAY
     (case-lambda ((g$_$7694$1Z2PAY) (gensym))))
   (g$gen-top-level-label$7232$1Z2PAY
     g$gen-top-level-label$10915$1Z2PAY
     (case-lambda
       ((g$id$7695$1Z2PAY g$rib$7696$1Z2PAY)
        (letrec* ((g$find$7697$1Z2PAY
                    (case-lambda
                      ((g$sym$7703$1Z2PAY
                         g$mark*$7704$1Z2PAY
                         g$sym*$7705$1Z2PAY
                         g$mark**$7706$1Z2PAY
                         g$label*$7707$1Z2PAY)
                       (if (pair? g$sym*$7705$1Z2PAY)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7703$1Z2PAY
                                        (car g$sym*$7705$1Z2PAY))
                                 (begin
                                   '#f
                                   (g$same-marks?$7292$1Z2PAY
                                     g$mark*$7704$1Z2PAY
                                     (car g$mark**$7706$1Z2PAY)))
                                 '#f)
                             (car g$label*$7707$1Z2PAY)
                             (g$find$7697$1Z2PAY
                               g$sym$7703$1Z2PAY
                               g$mark*$7704$1Z2PAY
                               (cdr g$sym*$7705$1Z2PAY)
                               (cdr g$mark**$7706$1Z2PAY)
                               (cdr g$label*$7707$1Z2PAY))))
                         '#f)))))
          ((case-lambda
             ((g$sym$7698$1Z2PAY g$mark*$7699$1Z2PAY)
              ((case-lambda
                 ((g$sym*$7700$1Z2PAY)
                  ((case-lambda
                     ((g$t$7701$1Z2PAY)
                      (if g$t$7701$1Z2PAY
                        ((case-lambda
                           ((g$label$7702$1Z2PAY)
                            (if (g$imported-label->binding$7099$1Z2PAY
                                  g$label$7702$1Z2PAY)
                              (gensym)
                              g$label$7702$1Z2PAY)))
                         g$t$7701$1Z2PAY)
                        (gensym))))
                   (if (g$memq$5008$1Z2PAY
                         g$sym$7698$1Z2PAY
                         (g$rib-sym*$7240$1Z2PAY g$rib$7696$1Z2PAY))
                     (begin
                       '#f
                       (g$find$7697$1Z2PAY
                         g$sym$7698$1Z2PAY
                         g$mark*$7699$1Z2PAY
                         g$sym*$7700$1Z2PAY
                         (g$rib-mark**$7241$1Z2PAY g$rib$7696$1Z2PAY)
                         (g$rib-label*$7242$1Z2PAY g$rib$7696$1Z2PAY)))
                     '#f))))
               (g$rib-sym*$7240$1Z2PAY g$rib$7696$1Z2PAY))))
           (g$id->sym$7291$1Z2PAY g$id$7695$1Z2PAY)
           (g$stx-mark*$7265$1Z2PAY g$id$7695$1Z2PAY))))))
   (g$gen-define-label+loc$7233$1Z2PAY
     g$gen-define-label+loc$10916$1Z2PAY
     (case-lambda
       ((g$id$7708$1Z2PAY g$rib$7709$1Z2PAY)
        ((case-lambda
           ((g$t$7710$1Z2PAY)
            (if g$t$7710$1Z2PAY
              ((case-lambda
                 ((g$env$7711$1Z2PAY)
                  ((case-lambda
                     ((g$label$7712$1Z2PAY g$locs$7713$1Z2PAY)
                      (values
                        g$label$7712$1Z2PAY
                        ((case-lambda
                           ((g$t$7714$1Z2PAY)
                            (if g$t$7714$1Z2PAY
                              (cdr g$t$7714$1Z2PAY)
                              ((case-lambda
                                 ((g$loc$7715$1Z2PAY)
                                  (begin
                                    (g$set-interaction-env-locs!$7651$1Z2PAY
                                      g$env$7711$1Z2PAY
                                      (cons
                                        (cons
                                          g$label$7712$1Z2PAY
                                          g$loc$7715$1Z2PAY)
                                        g$locs$7713$1Z2PAY))
                                    g$loc$7715$1Z2PAY)))
                               (g$gen-lexical$7229$1Z2PAY g$id$7708$1Z2PAY)))))
                         (g$assq$5004$1Z2PAY
                           g$label$7712$1Z2PAY
                           g$locs$7713$1Z2PAY)))))
                   (g$gen-top-level-label$7232$1Z2PAY
                     g$id$7708$1Z2PAY
                     g$rib$7709$1Z2PAY)
                   (g$interaction-env-locs$7648$1Z2PAY g$env$7711$1Z2PAY))))
               g$t$7710$1Z2PAY)
              (values (gensym) (g$gen-lexical$7229$1Z2PAY g$id$7708$1Z2PAY)))))
         (g$top-level-context$7686$1Z2PAY)))))
   (g$gen-define-label$7234$1Z2PAY
     g$gen-define-label$10917$1Z2PAY
     (case-lambda
       ((g$id$7716$1Z2PAY g$rib$7717$1Z2PAY)
        (if (g$top-level-context$7686$1Z2PAY)
          (g$gen-top-level-label$7232$1Z2PAY g$id$7716$1Z2PAY g$rib$7717$1Z2PAY)
          (gensym)))))
   (g$8327$7235$1Z2PAY
     g$8327$10918$1Z2PAY
     (make-record-type-descriptor
       'rib
       '#f
       'g$8330$1Z2PAY
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq)
          (mutable cache))))
   (g$8329$7236$1Z2PAY g$8329$10919$1Z2PAY '#f)
   (g$8328$7237$1Z2PAY
     g$8328$10920$1Z2PAY
     (make-record-constructor-descriptor
       g$8327$7235$1Z2PAY
       '#f
       g$8329$7236$1Z2PAY))
   (g$rib?$7238$1Z2PAY
     g$rib?$10921$1Z2PAY
     (record-predicate g$8327$7235$1Z2PAY))
   (g$make-rib$7239$1Z2PAY
     g$make-rib$10922$1Z2PAY
     (record-constructor g$8328$7237$1Z2PAY))
   (g$rib-sym*$7240$1Z2PAY
     g$rib-sym*$10923$1Z2PAY
     (record-accessor g$8327$7235$1Z2PAY '0))
   (g$rib-mark**$7241$1Z2PAY
     g$rib-mark**$10924$1Z2PAY
     (record-accessor g$8327$7235$1Z2PAY '1))
   (g$rib-label*$7242$1Z2PAY
     g$rib-label*$10925$1Z2PAY
     (record-accessor g$8327$7235$1Z2PAY '2))
   (g$rib-sealed/freq$7243$1Z2PAY
     g$rib-sealed/freq$10926$1Z2PAY
     (record-accessor g$8327$7235$1Z2PAY '3))
   (g$rib-cache$7244$1Z2PAY
     g$rib-cache$10927$1Z2PAY
     (record-accessor g$8327$7235$1Z2PAY '4))
   (g$set-rib-sym*!$7245$1Z2PAY
     g$set-rib-sym*!$10928$1Z2PAY
     (record-mutator g$8327$7235$1Z2PAY '0))
   (g$set-rib-mark**!$7246$1Z2PAY
     g$set-rib-mark**!$10929$1Z2PAY
     (record-mutator g$8327$7235$1Z2PAY '1))
   (g$set-rib-label*!$7247$1Z2PAY
     g$set-rib-label*!$10930$1Z2PAY
     (record-mutator g$8327$7235$1Z2PAY '2))
   (g$set-rib-sealed/freq!$7248$1Z2PAY
     g$set-rib-sealed/freq!$10931$1Z2PAY
     (record-mutator g$8327$7235$1Z2PAY '3))
   (g$set-rib-cache!$7249$1Z2PAY
     g$set-rib-cache!$10932$1Z2PAY
     (record-mutator g$8327$7235$1Z2PAY '4))
   (g$make-empty-rib$7250$1Z2PAY
     g$make-empty-rib$10933$1Z2PAY
     (case-lambda (() (g$make-rib$7239$1Z2PAY '() '() '() '#f '#f))))
   (g$make-cache-rib$7251$1Z2PAY
     g$make-cache-rib$10934$1Z2PAY
     (case-lambda
       (()
        (g$make-rib$7239$1Z2PAY
          '()
          '()
          '()
          '#f
          (g$make-eq-hashtable$5452$1Z2PAY)))))
   (g$find-label$7252$1Z2PAY
     g$find-label$10935$1Z2PAY
     (case-lambda
       ((g$rib$7718$1Z2PAY g$sym$7719$1Z2PAY g$mark*$7720$1Z2PAY)
        ((case-lambda
           ((g$ht$7721$1Z2PAY)
            (if g$ht$7721$1Z2PAY
              (begin
                '#f
                ((case-lambda
                   ((g$cv$7722$1Z2PAY)
                    ((case-lambda
                       ((g$t$7723$1Z2PAY)
                        (if g$t$7723$1Z2PAY (cdr g$t$7723$1Z2PAY) '#f)))
                     (if g$cv$7722$1Z2PAY
                       (begin
                         '#f
                         (g$assp$5007$1Z2PAY
                           (case-lambda
                             ((g$m$7724$1Z2PAY)
                              (g$same-marks?$7292$1Z2PAY
                                g$mark*$7720$1Z2PAY
                                g$m$7724$1Z2PAY)))
                           g$cv$7722$1Z2PAY))
                       '#f))))
                 (g$hashtable-ref$5455$1Z2PAY
                   g$ht$7721$1Z2PAY
                   g$sym$7719$1Z2PAY
                   '#f)))
              '#f)))
         (g$rib-cache$7244$1Z2PAY g$rib$7718$1Z2PAY)))))
   (g$extend-rib!$7253$1Z2PAY
     g$extend-rib!$10936$1Z2PAY
     (case-lambda
       ((g$rib$7725$1Z2PAY g$id$7726$1Z2PAY g$label$7727$1Z2PAY)
        (letrec* ((g$find$7728$1Z2PAY
                    (case-lambda
                      ((g$sym$7737$1Z2PAY
                         g$mark*$7738$1Z2PAY
                         g$sym*$7739$1Z2PAY
                         g$mark**$7740$1Z2PAY
                         g$label*$7741$1Z2PAY)
                       (if (pair? g$sym*$7739$1Z2PAY)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7737$1Z2PAY
                                        (car g$sym*$7739$1Z2PAY))
                                 (begin
                                   '#f
                                   (g$same-marks?$7292$1Z2PAY
                                     g$mark*$7738$1Z2PAY
                                     (car g$mark**$7740$1Z2PAY)))
                                 '#f)
                             g$label*$7741$1Z2PAY
                             (g$find$7728$1Z2PAY
                               g$sym$7737$1Z2PAY
                               g$mark*$7738$1Z2PAY
                               (cdr g$sym*$7739$1Z2PAY)
                               (cdr g$mark**$7740$1Z2PAY)
                               (cdr g$label*$7741$1Z2PAY))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$7243$1Z2PAY g$rib$7725$1Z2PAY)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$7725$1Z2PAY)
              (void))
            ((case-lambda
               ((g$sym$7729$1Z2PAY g$mark*$7730$1Z2PAY)
                ((case-lambda
                   ((g$sym*$7731$1Z2PAY)
                    ((case-lambda
                       ((g$t$7732$1Z2PAY)
                        (if g$t$7732$1Z2PAY
                          ((case-lambda
                             ((g$p$7733$1Z2PAY)
                              (if (not (eq? g$label$7727$1Z2PAY
                                            g$p$7733$1Z2PAY))
                                (g$syntax-violation$7679$1Z2PAY
                                  '#f
                                  '"multiple definitions of identifier"
                                  g$id$7726$1Z2PAY)
                                (void))))
                           g$t$7732$1Z2PAY)
                          ((case-lambda
                             ((g$t$7734$1Z2PAY)
                              (if g$t$7734$1Z2PAY
                                ((case-lambda
                                   ((g$p$7735$1Z2PAY)
                                    (if (not (eq? g$label$7727$1Z2PAY
                                                  (car g$p$7735$1Z2PAY)))
                                      (if (g$top-level-context$7686$1Z2PAY)
                                        (set-car!
                                          g$p$7735$1Z2PAY
                                          g$label$7727$1Z2PAY)
                                        (g$syntax-violation$7679$1Z2PAY
                                          '#f
                                          '"multiple definitions of identifier"
                                          g$id$7726$1Z2PAY))
                                      (void))))
                                 g$t$7734$1Z2PAY)
                                (begin
                                  (if (g$rib-cache$7244$1Z2PAY
                                        g$rib$7725$1Z2PAY)
                                    (g$hashtable-update!$5459$1Z2PAY
                                      (g$rib-cache$7244$1Z2PAY
                                        g$rib$7725$1Z2PAY)
                                      g$sym$7729$1Z2PAY
                                      (case-lambda
                                        ((g$e$7736$1Z2PAY)
                                         (cons
                                           (cons
                                             g$mark*$7730$1Z2PAY
                                             g$label$7727$1Z2PAY)
                                           g$e$7736$1Z2PAY)))
                                      '())
                                    (void))
                                  (g$set-rib-sym*!$7245$1Z2PAY
                                    g$rib$7725$1Z2PAY
                                    (cons g$sym$7729$1Z2PAY g$sym*$7731$1Z2PAY))
                                  (g$set-rib-mark**!$7246$1Z2PAY
                                    g$rib$7725$1Z2PAY
                                    (cons
                                      g$mark*$7730$1Z2PAY
                                      (g$rib-mark**$7241$1Z2PAY
                                        g$rib$7725$1Z2PAY)))
                                  (g$set-rib-label*!$7247$1Z2PAY
                                    g$rib$7725$1Z2PAY
                                    (cons
                                      g$label$7727$1Z2PAY
                                      (g$rib-label*$7242$1Z2PAY
                                        g$rib$7725$1Z2PAY)))))))
                           (if (g$memq$5008$1Z2PAY
                                 g$sym$7729$1Z2PAY
                                 (g$rib-sym*$7240$1Z2PAY g$rib$7725$1Z2PAY))
                             (begin
                               '#f
                               (g$find$7728$1Z2PAY
                                 g$sym$7729$1Z2PAY
                                 g$mark*$7730$1Z2PAY
                                 g$sym*$7731$1Z2PAY
                                 (g$rib-mark**$7241$1Z2PAY g$rib$7725$1Z2PAY)
                                 (g$rib-label*$7242$1Z2PAY g$rib$7725$1Z2PAY)))
                             '#f)))))
                     (g$find-label$7252$1Z2PAY
                       g$rib$7725$1Z2PAY
                       g$sym$7729$1Z2PAY
                       g$mark*$7730$1Z2PAY))))
                 (g$rib-sym*$7240$1Z2PAY g$rib$7725$1Z2PAY))))
             (g$id->sym$7291$1Z2PAY g$id$7726$1Z2PAY)
             (g$stx-mark*$7265$1Z2PAY g$id$7726$1Z2PAY)))))))
   (g$extend-rib/nc!$7254$1Z2PAY
     g$extend-rib/nc!$10937$1Z2PAY
     (case-lambda
       ((g$rib$7742$1Z2PAY g$id$7743$1Z2PAY g$label$7744$1Z2PAY)
        ((case-lambda
           ((g$sym$7745$1Z2PAY g$mark*$7746$1Z2PAY)
            ((case-lambda
               ((g$sym*$7747$1Z2PAY)
                (begin
                  (if (g$rib-cache$7244$1Z2PAY g$rib$7742$1Z2PAY)
                    (g$hashtable-update!$5459$1Z2PAY
                      (g$rib-cache$7244$1Z2PAY g$rib$7742$1Z2PAY)
                      g$sym$7745$1Z2PAY
                      (case-lambda
                        ((g$e$7748$1Z2PAY)
                         (cons
                           (cons g$mark*$7746$1Z2PAY g$label$7744$1Z2PAY)
                           g$e$7748$1Z2PAY)))
                      '())
                    (void))
                  (g$set-rib-sym*!$7245$1Z2PAY
                    g$rib$7742$1Z2PAY
                    (cons g$sym$7745$1Z2PAY g$sym*$7747$1Z2PAY))
                  (g$set-rib-mark**!$7246$1Z2PAY
                    g$rib$7742$1Z2PAY
                    (cons
                      g$mark*$7746$1Z2PAY
                      (g$rib-mark**$7241$1Z2PAY g$rib$7742$1Z2PAY)))
                  (g$set-rib-label*!$7247$1Z2PAY
                    g$rib$7742$1Z2PAY
                    (cons
                      g$label$7744$1Z2PAY
                      (g$rib-label*$7242$1Z2PAY g$rib$7742$1Z2PAY))))))
             (g$rib-sym*$7240$1Z2PAY g$rib$7742$1Z2PAY))))
         (g$id->sym$7291$1Z2PAY g$id$7743$1Z2PAY)
         (g$stx-mark*$7265$1Z2PAY g$id$7743$1Z2PAY)))))
   (g$make-rib-map$7255$1Z2PAY
     g$make-rib-map$10938$1Z2PAY
     (case-lambda
       ((g$sym*$7749$1Z2PAY)
        ((case-lambda
           ((g$ht$7750$1Z2PAY)
            ((letrec ((g$f$7751$1Z2PAY
                        (case-lambda
                          ((g$i$7752$1Z2PAY g$sym*$7753$1Z2PAY)
                           (if (null? g$sym*$7753$1Z2PAY)
                             g$ht$7750$1Z2PAY
                             (begin
                               (g$hashtable-update!$5459$1Z2PAY
                                 g$ht$7750$1Z2PAY
                                 (car g$sym*$7753$1Z2PAY)
                                 (case-lambda
                                   ((g$x$7754$1Z2PAY)
                                    (cons g$i$7752$1Z2PAY g$x$7754$1Z2PAY)))
                                 '())
                               (g$f$7751$1Z2PAY
                                 (+ g$i$7752$1Z2PAY '1)
                                 (cdr g$sym*$7753$1Z2PAY))))))))
               g$f$7751$1Z2PAY)
             '0
             g$sym*$7749$1Z2PAY)))
         (g$make-eq-hashtable$5452$1Z2PAY)))))
   (g$seal-rib!$7256$1Z2PAY
     g$seal-rib!$10939$1Z2PAY
     (case-lambda
       ((g$rib$7755$1Z2PAY)
        ((case-lambda
           ((g$sym*$7756$1Z2PAY)
            (if (not (null? g$sym*$7756$1Z2PAY))
              (begin
                (g$set-rib-sym*!$7245$1Z2PAY
                  g$rib$7755$1Z2PAY
                  (list->vector g$sym*$7756$1Z2PAY))
                (g$set-rib-mark**!$7246$1Z2PAY
                  g$rib$7755$1Z2PAY
                  (list->vector (g$rib-mark**$7241$1Z2PAY g$rib$7755$1Z2PAY)))
                (g$set-rib-label*!$7247$1Z2PAY
                  g$rib$7755$1Z2PAY
                  (list->vector (g$rib-label*$7242$1Z2PAY g$rib$7755$1Z2PAY)))
                (g$set-rib-sealed/freq!$7248$1Z2PAY
                  g$rib$7755$1Z2PAY
                  (g$make-rib-map$7255$1Z2PAY g$sym*$7756$1Z2PAY)))
              (void))))
         (g$rib-sym*$7240$1Z2PAY g$rib$7755$1Z2PAY)))))
   (g$unseal-rib!$7257$1Z2PAY
     g$unseal-rib!$10940$1Z2PAY
     (case-lambda
       ((g$rib$7757$1Z2PAY)
        (if (g$rib-sealed/freq$7243$1Z2PAY g$rib$7757$1Z2PAY)
          (begin
            (g$set-rib-sealed/freq!$7248$1Z2PAY g$rib$7757$1Z2PAY '#f)
            (g$set-rib-sym*!$7245$1Z2PAY
              g$rib$7757$1Z2PAY
              (vector->list (g$rib-sym*$7240$1Z2PAY g$rib$7757$1Z2PAY)))
            (g$set-rib-mark**!$7246$1Z2PAY
              g$rib$7757$1Z2PAY
              (vector->list (g$rib-mark**$7241$1Z2PAY g$rib$7757$1Z2PAY)))
            (g$set-rib-label*!$7247$1Z2PAY
              g$rib$7757$1Z2PAY
              (vector->list (g$rib-label*$7242$1Z2PAY g$rib$7757$1Z2PAY))))
          (void)))))
   (g$make-full-rib$7258$1Z2PAY
     g$make-full-rib$10941$1Z2PAY
     (case-lambda
       ((g$id*$7758$1Z2PAY g$label*$7759$1Z2PAY)
        ((case-lambda
           ((g$r$7760$1Z2PAY)
            (begin (g$seal-rib!$7256$1Z2PAY g$r$7760$1Z2PAY) g$r$7760$1Z2PAY)))
         (g$make-rib$7239$1Z2PAY
           (map g$id->sym$7291$1Z2PAY g$id*$7758$1Z2PAY)
           (map g$stx-mark*$7265$1Z2PAY g$id*$7758$1Z2PAY)
           g$label*$7759$1Z2PAY
           '#f
           '#f)))))
   (g$8358$7259$1Z2PAY
     g$8358$10942$1Z2PAY
     (make-record-type-descriptor
       'stx
       '#f
       'g$8361$1Z2PAY
       '#t
       '#t
       '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*))))
   (g$8360$7260$1Z2PAY g$8360$10943$1Z2PAY '#f)
   (g$8359$7261$1Z2PAY
     g$8359$10944$1Z2PAY
     (make-record-constructor-descriptor
       g$8358$7259$1Z2PAY
       '#f
       g$8360$7260$1Z2PAY))
   (g$stx?$7262$1Z2PAY
     g$stx?$10945$1Z2PAY
     (record-predicate g$8358$7259$1Z2PAY))
   (g$make-stx$7263$1Z2PAY
     g$make-stx$10946$1Z2PAY
     (record-constructor g$8359$7261$1Z2PAY))
   (g$stx-expr$7264$1Z2PAY
     g$stx-expr$10947$1Z2PAY
     (record-accessor g$8358$7259$1Z2PAY '0))
   (g$stx-mark*$7265$1Z2PAY
     g$stx-mark*$10948$1Z2PAY
     (record-accessor g$8358$7259$1Z2PAY '1))
   (g$stx-subst*$7266$1Z2PAY
     g$stx-subst*$10949$1Z2PAY
     (record-accessor g$8358$7259$1Z2PAY '2))
   (g$stx-ae*$7267$1Z2PAY
     g$stx-ae*$10950$1Z2PAY
     (record-accessor g$8358$7259$1Z2PAY '3))
   (g$set-stx-expr!$7268$1Z2PAY
     g$set-stx-expr!$10951$1Z2PAY
     (record-mutator g$8358$7259$1Z2PAY '0))
   (g$set-stx-mark*!$7269$1Z2PAY
     g$set-stx-mark*!$10952$1Z2PAY
     (record-mutator g$8358$7259$1Z2PAY '1))
   (g$set-stx-subst*!$7270$1Z2PAY
     g$set-stx-subst*!$10953$1Z2PAY
     (record-mutator g$8358$7259$1Z2PAY '2))
   (g$set-stx-ae*!$7271$1Z2PAY
     g$set-stx-ae*!$10954$1Z2PAY
     (record-mutator g$8358$7259$1Z2PAY '3))
   (g$rp$7272$1Z2PAY
     g$rp$10955$1Z2PAY
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$7761$1Z2PAY g$p$7762$1Z2PAY g$wr$7763$1Z2PAY)
          (begin
            (display '"#<syntax " g$p$7762$1Z2PAY)
            (write (g$stx->datum$7301$1Z2PAY g$x$7761$1Z2PAY) g$p$7762$1Z2PAY)
            ((case-lambda
               ((g$expr$7764$1Z2PAY)
                (if (annotation? g$expr$7764$1Z2PAY)
                  ((case-lambda
                     ((g$src$7765$1Z2PAY)
                      (if (pair? g$src$7765$1Z2PAY)
                        (begin
                          (display '" (" g$p$7762$1Z2PAY)
                          (display (cdr g$src$7765$1Z2PAY) g$p$7762$1Z2PAY)
                          (display '" of " g$p$7762$1Z2PAY)
                          (display (car g$src$7765$1Z2PAY) g$p$7762$1Z2PAY)
                          (display '")" g$p$7762$1Z2PAY))
                        (void))))
                   (annotation-source g$expr$7764$1Z2PAY))
                  (void))))
             (g$stx-expr$7264$1Z2PAY g$x$7761$1Z2PAY))
            (display '">" g$p$7762$1Z2PAY))))))
   (g$datum->stx$7273$1Z2PAY
     g$datum->stx$10956$1Z2PAY
     (case-lambda
       ((g$id$7766$1Z2PAY g$datum$7767$1Z2PAY)
        (g$make-stx$7263$1Z2PAY
          g$datum$7767$1Z2PAY
          (g$stx-mark*$7265$1Z2PAY g$id$7766$1Z2PAY)
          (g$stx-subst*$7266$1Z2PAY g$id$7766$1Z2PAY)
          (g$stx-ae*$7267$1Z2PAY g$id$7766$1Z2PAY)))))
   (g$gen-mark$7274$1Z2PAY
     g$gen-mark$10957$1Z2PAY
     (case-lambda (() (string '#\m))))
   (g$anti-mark$7275$1Z2PAY g$anti-mark$10958$1Z2PAY '#f)
   (g$anti-mark?$7276$1Z2PAY g$anti-mark?$10959$1Z2PAY not)
   (g$join-wraps$7277$1Z2PAY
     g$join-wraps$10960$1Z2PAY
     (case-lambda
       ((g$m1*$7768$1Z2PAY
          g$s1*$7769$1Z2PAY
          g$ae1*$7770$1Z2PAY
          g$e$7771$1Z2PAY)
        (letrec* ((g$cancel$7772$1Z2PAY
                    (case-lambda
                      ((g$ls1$7776$1Z2PAY g$ls2$7777$1Z2PAY)
                       ((letrec ((g$f$7778$1Z2PAY
                                   (case-lambda
                                     ((g$x$7779$1Z2PAY g$ls1$7780$1Z2PAY)
                                      (if (null? g$ls1$7780$1Z2PAY)
                                        (cdr g$ls2$7777$1Z2PAY)
                                        (cons
                                          g$x$7779$1Z2PAY
                                          (g$f$7778$1Z2PAY
                                            (car g$ls1$7780$1Z2PAY)
                                            (cdr g$ls1$7780$1Z2PAY))))))))
                          g$f$7778$1Z2PAY)
                        (car g$ls1$7776$1Z2PAY)
                        (cdr g$ls1$7776$1Z2PAY))))))
          ((case-lambda
             ((g$m2*$7773$1Z2PAY g$s2*$7774$1Z2PAY g$ae2*$7775$1Z2PAY)
              (if (if (not (null? g$m1*$7768$1Z2PAY))
                    (if (not (null? g$m2*$7773$1Z2PAY))
                      (begin
                        '#f
                        (g$anti-mark?$7276$1Z2PAY (car g$m2*$7773$1Z2PAY)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$7772$1Z2PAY g$m1*$7768$1Z2PAY g$m2*$7773$1Z2PAY)
                  (g$cancel$7772$1Z2PAY g$s1*$7769$1Z2PAY g$s2*$7774$1Z2PAY)
                  (g$cancel$7772$1Z2PAY g$ae1*$7770$1Z2PAY g$ae2*$7775$1Z2PAY))
                (values
                  (append g$m1*$7768$1Z2PAY g$m2*$7773$1Z2PAY)
                  (append g$s1*$7769$1Z2PAY g$s2*$7774$1Z2PAY)
                  (append g$ae1*$7770$1Z2PAY g$ae2*$7775$1Z2PAY)))))
           (g$stx-mark*$7265$1Z2PAY g$e$7771$1Z2PAY)
           (g$stx-subst*$7266$1Z2PAY g$e$7771$1Z2PAY)
           (g$stx-ae*$7267$1Z2PAY g$e$7771$1Z2PAY))))))
   (g$mkstx$7278$1Z2PAY
     g$mkstx$10961$1Z2PAY
     (case-lambda
       ((g$e$7781$1Z2PAY g$m*$7782$1Z2PAY g$s*$7783$1Z2PAY g$ae*$7784$1Z2PAY)
        (if (if (g$stx?$7262$1Z2PAY g$e$7781$1Z2PAY)
              (begin '#f (not (g$top-marked?$7228$1Z2PAY g$m*$7782$1Z2PAY)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$7277$1Z2PAY
                 g$m*$7782$1Z2PAY
                 g$s*$7783$1Z2PAY
                 g$ae*$7784$1Z2PAY
                 g$e$7781$1Z2PAY)))
            (case-lambda
              ((g$m*$7788$1Z2PAY g$s*$7789$1Z2PAY g$ae*$7790$1Z2PAY)
               ((case-lambda
                  ((g$ae*$7791$1Z2PAY g$s*$7792$1Z2PAY g$m*$7793$1Z2PAY)
                   (g$make-stx$7263$1Z2PAY
                     (g$stx-expr$7264$1Z2PAY g$e$7781$1Z2PAY)
                     g$m*$7793$1Z2PAY
                     g$s*$7792$1Z2PAY
                     g$ae*$7791$1Z2PAY)))
                g$ae*$7790$1Z2PAY
                g$s*$7789$1Z2PAY
                g$m*$7788$1Z2PAY))))
          (g$make-stx$7263$1Z2PAY
            g$e$7781$1Z2PAY
            g$m*$7782$1Z2PAY
            g$s*$7783$1Z2PAY
            g$ae*$7784$1Z2PAY)))))
   (g$add-mark$7279$1Z2PAY
     g$add-mark$10962$1Z2PAY
     (case-lambda
       ((g$m$7794$1Z2PAY g$e$7795$1Z2PAY g$ae$7796$1Z2PAY)
        (g$mkstx$7278$1Z2PAY
          g$e$7795$1Z2PAY
          (list g$m$7794$1Z2PAY)
          '(shift)
          (list g$ae$7796$1Z2PAY)))))
   (g$add-subst$7280$1Z2PAY
     g$add-subst$10963$1Z2PAY
     (case-lambda
       ((g$subst$7797$1Z2PAY g$e$7798$1Z2PAY)
        (g$mkstx$7278$1Z2PAY
          g$e$7798$1Z2PAY
          '()
          (list g$subst$7797$1Z2PAY)
          '()))))
   (g$syntax-kind?$7281$1Z2PAY
     g$syntax-kind?$10964$1Z2PAY
     (case-lambda
       ((g$x$7799$1Z2PAY g$p?$7800$1Z2PAY)
        (if (g$stx?$7262$1Z2PAY g$x$7799$1Z2PAY)
          (g$syntax-kind?$7281$1Z2PAY
            (g$stx-expr$7264$1Z2PAY g$x$7799$1Z2PAY)
            g$p?$7800$1Z2PAY)
          (if (annotation? g$x$7799$1Z2PAY)
            (g$syntax-kind?$7281$1Z2PAY
              (annotation-expression g$x$7799$1Z2PAY)
              g$p?$7800$1Z2PAY)
            (g$p?$7800$1Z2PAY g$x$7799$1Z2PAY))))))
   (g$syntax-vector->list$7282$1Z2PAY
     g$syntax-vector->list$10965$1Z2PAY
     (case-lambda
       ((g$x$7801$1Z2PAY)
        (if (g$stx?$7262$1Z2PAY g$x$7801$1Z2PAY)
          ((case-lambda
             ((g$ls$7802$1Z2PAY
                g$m*$7803$1Z2PAY
                g$s*$7804$1Z2PAY
                g$ae*$7805$1Z2PAY)
              (map (case-lambda
                     ((g$x$7806$1Z2PAY)
                      (g$mkstx$7278$1Z2PAY
                        g$x$7806$1Z2PAY
                        g$m*$7803$1Z2PAY
                        g$s*$7804$1Z2PAY
                        g$ae*$7805$1Z2PAY)))
                   g$ls$7802$1Z2PAY)))
           (g$syntax-vector->list$7282$1Z2PAY
             (g$stx-expr$7264$1Z2PAY g$x$7801$1Z2PAY))
           (g$stx-mark*$7265$1Z2PAY g$x$7801$1Z2PAY)
           (g$stx-subst*$7266$1Z2PAY g$x$7801$1Z2PAY)
           (g$stx-ae*$7267$1Z2PAY g$x$7801$1Z2PAY))
          (if (annotation? g$x$7801$1Z2PAY)
            (g$syntax-vector->list$7282$1Z2PAY
              (annotation-expression g$x$7801$1Z2PAY))
            (if (vector? g$x$7801$1Z2PAY)
              (vector->list g$x$7801$1Z2PAY)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$7801$1Z2PAY)))))))
   (g$syntax-pair?$7283$1Z2PAY
     g$syntax-pair?$10966$1Z2PAY
     (case-lambda
       ((g$x$7807$1Z2PAY) (g$syntax-kind?$7281$1Z2PAY g$x$7807$1Z2PAY pair?))))
   (g$syntax-vector?$7284$1Z2PAY
     g$syntax-vector?$10967$1Z2PAY
     (case-lambda
       ((g$x$7808$1Z2PAY)
        (g$syntax-kind?$7281$1Z2PAY g$x$7808$1Z2PAY vector?))))
   (g$syntax-null?$7285$1Z2PAY
     g$syntax-null?$10968$1Z2PAY
     (case-lambda
       ((g$x$7809$1Z2PAY) (g$syntax-kind?$7281$1Z2PAY g$x$7809$1Z2PAY null?))))
   (g$syntax-list?$7286$1Z2PAY
     g$syntax-list?$10969$1Z2PAY
     (case-lambda
       ((g$x$7810$1Z2PAY)
        ((case-lambda
           ((g$t$7811$1Z2PAY)
            (if g$t$7811$1Z2PAY
              g$t$7811$1Z2PAY
              (begin
                '#f
                (if (g$syntax-pair?$7283$1Z2PAY g$x$7810$1Z2PAY)
                  (begin
                    '#f
                    (g$syntax-list?$7286$1Z2PAY
                      (g$syntax-cdr$7288$1Z2PAY g$x$7810$1Z2PAY)))
                  '#f)))))
         (g$syntax-null?$7285$1Z2PAY g$x$7810$1Z2PAY)))))
   (g$syntax-car$7287$1Z2PAY
     g$syntax-car$10970$1Z2PAY
     (case-lambda
       ((g$x$7812$1Z2PAY)
        (if (g$stx?$7262$1Z2PAY g$x$7812$1Z2PAY)
          (g$mkstx$7278$1Z2PAY
            (g$syntax-car$7287$1Z2PAY (g$stx-expr$7264$1Z2PAY g$x$7812$1Z2PAY))
            (g$stx-mark*$7265$1Z2PAY g$x$7812$1Z2PAY)
            (g$stx-subst*$7266$1Z2PAY g$x$7812$1Z2PAY)
            (g$stx-ae*$7267$1Z2PAY g$x$7812$1Z2PAY))
          (if (annotation? g$x$7812$1Z2PAY)
            (g$syntax-car$7287$1Z2PAY (annotation-expression g$x$7812$1Z2PAY))
            (if (pair? g$x$7812$1Z2PAY)
              (car g$x$7812$1Z2PAY)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$7812$1Z2PAY)))))))
   (g$syntax-cdr$7288$1Z2PAY
     g$syntax-cdr$10971$1Z2PAY
     (case-lambda
       ((g$x$7813$1Z2PAY)
        (if (g$stx?$7262$1Z2PAY g$x$7813$1Z2PAY)
          (g$mkstx$7278$1Z2PAY
            (g$syntax-cdr$7288$1Z2PAY (g$stx-expr$7264$1Z2PAY g$x$7813$1Z2PAY))
            (g$stx-mark*$7265$1Z2PAY g$x$7813$1Z2PAY)
            (g$stx-subst*$7266$1Z2PAY g$x$7813$1Z2PAY)
            (g$stx-ae*$7267$1Z2PAY g$x$7813$1Z2PAY))
          (if (annotation? g$x$7813$1Z2PAY)
            (g$syntax-cdr$7288$1Z2PAY (annotation-expression g$x$7813$1Z2PAY))
            (if (pair? g$x$7813$1Z2PAY)
              (cdr g$x$7813$1Z2PAY)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$7813$1Z2PAY)))))))
   (g$syntax->list$7289$1Z2PAY
     g$syntax->list$10972$1Z2PAY
     (case-lambda
       ((g$x$7814$1Z2PAY)
        (if (g$syntax-pair?$7283$1Z2PAY g$x$7814$1Z2PAY)
          (cons
            (g$syntax-car$7287$1Z2PAY g$x$7814$1Z2PAY)
            (g$syntax->list$7289$1Z2PAY
              (g$syntax-cdr$7288$1Z2PAY g$x$7814$1Z2PAY)))
          (if (g$syntax-null?$7285$1Z2PAY g$x$7814$1Z2PAY)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$7814$1Z2PAY))))))
   (g$id?$7290$1Z2PAY
     g$id?$10973$1Z2PAY
     (case-lambda
       ((g$x$7815$1Z2PAY)
        (if (g$stx?$7262$1Z2PAY g$x$7815$1Z2PAY)
          (begin
            '#f
            ((case-lambda
               ((g$expr$7816$1Z2PAY)
                (symbol?
                  (if (annotation? g$expr$7816$1Z2PAY)
                    (annotation-stripped g$expr$7816$1Z2PAY)
                    g$expr$7816$1Z2PAY))))
             (g$stx-expr$7264$1Z2PAY g$x$7815$1Z2PAY)))
          '#f))))
   (g$id->sym$7291$1Z2PAY
     g$id->sym$10974$1Z2PAY
     (case-lambda
       ((g$x$7817$1Z2PAY)
        (begin
          (if (not (g$stx?$7262$1Z2PAY g$x$7817$1Z2PAY))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$7817$1Z2PAY)
            (void))
          ((case-lambda
             ((g$expr$7818$1Z2PAY)
              ((case-lambda
                 ((g$sym$7819$1Z2PAY)
                  (if (symbol? g$sym$7819$1Z2PAY)
                    g$sym$7819$1Z2PAY
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$7817$1Z2PAY))))
               (if (annotation? g$expr$7818$1Z2PAY)
                 (annotation-stripped g$expr$7818$1Z2PAY)
                 g$expr$7818$1Z2PAY))))
           (g$stx-expr$7264$1Z2PAY g$x$7817$1Z2PAY))))))
   (g$same-marks?$7292$1Z2PAY
     g$same-marks?$10975$1Z2PAY
     (case-lambda
       ((g$x$7820$1Z2PAY g$y$7821$1Z2PAY)
        ((case-lambda
           ((g$t$7822$1Z2PAY)
            (if g$t$7822$1Z2PAY
              g$t$7822$1Z2PAY
              (begin
                '#f
                (if (pair? g$x$7820$1Z2PAY)
                  (if (pair? g$y$7821$1Z2PAY)
                    (if (eq? (car g$x$7820$1Z2PAY) (car g$y$7821$1Z2PAY))
                      (begin
                        '#f
                        (g$same-marks?$7292$1Z2PAY
                          (cdr g$x$7820$1Z2PAY)
                          (cdr g$y$7821$1Z2PAY)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$7820$1Z2PAY)
           (begin '#f (null? g$y$7821$1Z2PAY))
           '#f)))))
   (g$bound-id=?$7293$1Z2PAY
     g$bound-id=?$10976$1Z2PAY
     (case-lambda
       ((g$x$7823$1Z2PAY g$y$7824$1Z2PAY)
        (if (eq? (g$id->sym$7291$1Z2PAY g$x$7823$1Z2PAY)
                 (g$id->sym$7291$1Z2PAY g$y$7824$1Z2PAY))
          (begin
            '#f
            (g$same-marks?$7292$1Z2PAY
              (g$stx-mark*$7265$1Z2PAY g$x$7823$1Z2PAY)
              (g$stx-mark*$7265$1Z2PAY g$y$7824$1Z2PAY)))
          '#f))))
   (g$free-id=?$7294$1Z2PAY
     g$free-id=?$10977$1Z2PAY
     (case-lambda
       ((g$i$7825$1Z2PAY g$j$7826$1Z2PAY)
        ((case-lambda
           ((g$t0$7827$1Z2PAY g$t1$7828$1Z2PAY)
            (if ((case-lambda
                   ((g$t$7829$1Z2PAY)
                    (if g$t$7829$1Z2PAY
                      g$t$7829$1Z2PAY
                      (begin '#f g$t1$7828$1Z2PAY))))
                 g$t0$7827$1Z2PAY)
              (eq? g$t0$7827$1Z2PAY g$t1$7828$1Z2PAY)
              (eq? (g$id->sym$7291$1Z2PAY g$i$7825$1Z2PAY)
                   (g$id->sym$7291$1Z2PAY g$j$7826$1Z2PAY)))))
         (g$id->real-label$7304$1Z2PAY g$i$7825$1Z2PAY)
         (g$id->real-label$7304$1Z2PAY g$j$7826$1Z2PAY)))))
   (g$valid-bound-ids?$7295$1Z2PAY
     g$valid-bound-ids?$10978$1Z2PAY
     (case-lambda
       ((g$id*$7830$1Z2PAY)
        (if (g$for-all$5014$1Z2PAY g$id?$7290$1Z2PAY g$id*$7830$1Z2PAY)
          (begin '#f (g$distinct-bound-ids?$7296$1Z2PAY g$id*$7830$1Z2PAY))
          '#f))))
   (g$distinct-bound-ids?$7296$1Z2PAY
     g$distinct-bound-ids?$10979$1Z2PAY
     (case-lambda
       ((g$id*$7831$1Z2PAY)
        ((case-lambda
           ((g$t$7832$1Z2PAY)
            (if g$t$7832$1Z2PAY
              g$t$7832$1Z2PAY
              (begin
                '#f
                (if (not (g$bound-id-member?$7297$1Z2PAY
                           (car g$id*$7831$1Z2PAY)
                           (cdr g$id*$7831$1Z2PAY)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$7296$1Z2PAY (cdr g$id*$7831$1Z2PAY)))
                  '#f)))))
         (null? g$id*$7831$1Z2PAY)))))
   (g$bound-id-member?$7297$1Z2PAY
     g$bound-id-member?$10980$1Z2PAY
     (case-lambda
       ((g$id$7833$1Z2PAY g$id*$7834$1Z2PAY)
        (if (pair? g$id*$7834$1Z2PAY)
          (begin
            '#f
            ((case-lambda
               ((g$t$7835$1Z2PAY)
                (if g$t$7835$1Z2PAY
                  g$t$7835$1Z2PAY
                  (begin
                    '#f
                    (g$bound-id-member?$7297$1Z2PAY
                      g$id$7833$1Z2PAY
                      (cdr g$id*$7834$1Z2PAY))))))
             (g$bound-id=?$7293$1Z2PAY
               g$id$7833$1Z2PAY
               (car g$id*$7834$1Z2PAY))))
          '#f))))
   (g$self-evaluating?$7298$1Z2PAY
     g$self-evaluating?$10981$1Z2PAY
     (case-lambda
       ((g$x$7836$1Z2PAY)
        ((case-lambda
           ((g$t$7837$1Z2PAY)
            (if g$t$7837$1Z2PAY
              g$t$7837$1Z2PAY
              ((case-lambda
                 ((g$t$7838$1Z2PAY)
                  (if g$t$7838$1Z2PAY
                    g$t$7838$1Z2PAY
                    ((case-lambda
                       ((g$t$7839$1Z2PAY)
                        (if g$t$7839$1Z2PAY
                          g$t$7839$1Z2PAY
                          ((case-lambda
                             ((g$t$7840$1Z2PAY)
                              (if g$t$7840$1Z2PAY
                                g$t$7840$1Z2PAY
                                (begin '#f (bytevector? g$x$7836$1Z2PAY)))))
                           (boolean? g$x$7836$1Z2PAY)))))
                     (char? g$x$7836$1Z2PAY)))))
               (string? g$x$7836$1Z2PAY)))))
         (number? g$x$7836$1Z2PAY)))))
   (g$strip-annotations$7299$1Z2PAY
     g$strip-annotations$10982$1Z2PAY
     (case-lambda
       ((g$x$7841$1Z2PAY)
        (if (pair? g$x$7841$1Z2PAY)
          (cons
            (g$strip-annotations$7299$1Z2PAY (car g$x$7841$1Z2PAY))
            (g$strip-annotations$7299$1Z2PAY (cdr g$x$7841$1Z2PAY)))
          (if (vector? g$x$7841$1Z2PAY)
            (vector-map g$strip-annotations$7299$1Z2PAY g$x$7841$1Z2PAY)
            (if (annotation? g$x$7841$1Z2PAY)
              (annotation-stripped g$x$7841$1Z2PAY)
              g$x$7841$1Z2PAY))))))
   (g$strip$7300$1Z2PAY
     g$strip$10983$1Z2PAY
     (case-lambda
       ((g$x$7842$1Z2PAY g$m*$7843$1Z2PAY)
        (if (g$top-marked?$7228$1Z2PAY g$m*$7843$1Z2PAY)
          (if ((case-lambda
                 ((g$t$7844$1Z2PAY)
                  (if g$t$7844$1Z2PAY
                    g$t$7844$1Z2PAY
                    ((case-lambda
                       ((g$t$7845$1Z2PAY)
                        (if g$t$7845$1Z2PAY
                          g$t$7845$1Z2PAY
                          (begin
                            '#f
                            (if (vector? g$x$7842$1Z2PAY)
                              (if (> (vector-length g$x$7842$1Z2PAY) '0)
                                (begin
                                  '#f
                                  (annotation? (vector-ref g$x$7842$1Z2PAY '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$7842$1Z2PAY)
                       (begin '#f (annotation? (car g$x$7842$1Z2PAY)))
                       '#f)))))
               (annotation? g$x$7842$1Z2PAY))
            (g$strip-annotations$7299$1Z2PAY g$x$7842$1Z2PAY)
            g$x$7842$1Z2PAY)
          ((letrec ((g$f$7846$1Z2PAY
                      (case-lambda
                        ((g$x$7847$1Z2PAY)
                         (if (g$stx?$7262$1Z2PAY g$x$7847$1Z2PAY)
                           (g$strip$7300$1Z2PAY
                             (g$stx-expr$7264$1Z2PAY g$x$7847$1Z2PAY)
                             (g$stx-mark*$7265$1Z2PAY g$x$7847$1Z2PAY))
                           (if (annotation? g$x$7847$1Z2PAY)
                             (annotation-stripped g$x$7847$1Z2PAY)
                             (if (pair? g$x$7847$1Z2PAY)
                               ((case-lambda
                                  ((g$a$7848$1Z2PAY g$d$7849$1Z2PAY)
                                   (if (if (eq? g$a$7848$1Z2PAY
                                                (car g$x$7847$1Z2PAY))
                                         (begin
                                           '#f
                                           (eq? g$d$7849$1Z2PAY
                                                (cdr g$x$7847$1Z2PAY)))
                                         '#f)
                                     g$x$7847$1Z2PAY
                                     (cons g$a$7848$1Z2PAY g$d$7849$1Z2PAY))))
                                (g$f$7846$1Z2PAY (car g$x$7847$1Z2PAY))
                                (g$f$7846$1Z2PAY (cdr g$x$7847$1Z2PAY)))
                               (if (vector? g$x$7847$1Z2PAY)
                                 ((case-lambda
                                    ((g$old$7850$1Z2PAY)
                                     ((case-lambda
                                        ((g$new$7851$1Z2PAY)
                                         (if (g$for-all$5014$1Z2PAY
                                               eq?
                                               g$old$7850$1Z2PAY
                                               g$new$7851$1Z2PAY)
                                           g$x$7847$1Z2PAY
                                           (list->vector g$new$7851$1Z2PAY))))
                                      (map g$f$7846$1Z2PAY g$old$7850$1Z2PAY))))
                                  (vector->list g$x$7847$1Z2PAY))
                                 g$x$7847$1Z2PAY))))))))
             g$f$7846$1Z2PAY)
           g$x$7842$1Z2PAY)))))
   (g$stx->datum$7301$1Z2PAY
     g$stx->datum$10984$1Z2PAY
     (case-lambda
       ((g$x$7852$1Z2PAY) (g$strip$7300$1Z2PAY g$x$7852$1Z2PAY '()))))
   (g$same-marks*?$7302$1Z2PAY
     g$same-marks*?$10985$1Z2PAY
     (case-lambda
       ((g$mark*$7853$1Z2PAY g$mark**$7854$1Z2PAY g$si$7855$1Z2PAY)
        (if (null? g$si$7855$1Z2PAY)
          '#f
          (if (g$same-marks?$7292$1Z2PAY
                g$mark*$7853$1Z2PAY
                (vector-ref g$mark**$7854$1Z2PAY (car g$si$7855$1Z2PAY)))
            (car g$si$7855$1Z2PAY)
            (g$same-marks*?$7302$1Z2PAY
              g$mark*$7853$1Z2PAY
              g$mark**$7854$1Z2PAY
              (cdr g$si$7855$1Z2PAY)))))))
   (g$id->label$7303$1Z2PAY
     g$id->label$10986$1Z2PAY
     (case-lambda
       ((g$id$7856$1Z2PAY)
        ((case-lambda
           ((g$t$7857$1Z2PAY)
            (if g$t$7857$1Z2PAY
              g$t$7857$1Z2PAY
              (begin
                '#f
                ((case-lambda
                   ((g$t$7858$1Z2PAY)
                    (if g$t$7858$1Z2PAY
                      ((case-lambda
                         ((g$env$7859$1Z2PAY)
                          ((case-lambda
                             ((g$rib$7860$1Z2PAY)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$7233$1Z2PAY
                                     g$id$7856$1Z2PAY
                                     g$rib$7860$1Z2PAY)))
                                (case-lambda
                                  ((g$lab$7863$1Z2PAY g$loc_$7864$1Z2PAY)
                                   ((case-lambda
                                      ((g$loc_$7865$1Z2PAY g$lab$7866$1Z2PAY)
                                       (begin
                                         (g$extend-rib!$7253$1Z2PAY
                                           g$rib$7860$1Z2PAY
                                           g$id$7856$1Z2PAY
                                           g$lab$7866$1Z2PAY)
                                         g$lab$7866$1Z2PAY)))
                                    g$loc_$7864$1Z2PAY
                                    g$lab$7863$1Z2PAY))))))
                           (g$interaction-env-rib$7646$1Z2PAY
                             g$env$7859$1Z2PAY))))
                       g$t$7858$1Z2PAY)
                      '#f)))
                 (g$top-level-context$7686$1Z2PAY))))))
         (g$id->real-label$7304$1Z2PAY g$id$7856$1Z2PAY)))))
   (g$id->real-label$7304$1Z2PAY
     g$id->real-label$10987$1Z2PAY
     (case-lambda
       ((g$id$7867$1Z2PAY)
        ((case-lambda
           ((g$sym$7868$1Z2PAY)
            ((letrec ((g$search$7869$1Z2PAY
                        (case-lambda
                          ((g$subst*$7870$1Z2PAY g$mark*$7871$1Z2PAY)
                           (if (null? g$subst*$7870$1Z2PAY)
                             '#f
                             (if (eq? (car g$subst*$7870$1Z2PAY) 'shift)
                               (g$search$7869$1Z2PAY
                                 (cdr g$subst*$7870$1Z2PAY)
                                 (cdr g$mark*$7871$1Z2PAY))
                               ((case-lambda
                                  ((g$rib$7872$1Z2PAY)
                                   ((case-lambda
                                      ((g$t$7873$1Z2PAY)
                                       (if g$t$7873$1Z2PAY
                                         ((case-lambda
                                            ((g$ht$7874$1Z2PAY)
                                             ((case-lambda
                                                ((g$si$7875$1Z2PAY)
                                                 ((case-lambda
                                                    ((g$i$7876$1Z2PAY)
                                                     (if g$i$7876$1Z2PAY
                                                       (vector-ref
                                                         (g$rib-label*$7242$1Z2PAY
                                                           g$rib$7872$1Z2PAY)
                                                         g$i$7876$1Z2PAY)
                                                       (g$search$7869$1Z2PAY
                                                         (cdr g$subst*$7870$1Z2PAY)
                                                         g$mark*$7871$1Z2PAY))))
                                                  (if g$si$7875$1Z2PAY
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$7302$1Z2PAY
                                                        g$mark*$7871$1Z2PAY
                                                        (g$rib-mark**$7241$1Z2PAY
                                                          g$rib$7872$1Z2PAY)
                                                        (reverse
                                                          g$si$7875$1Z2PAY)))
                                                    '#f))))
                                              (g$hashtable-ref$5455$1Z2PAY
                                                g$ht$7874$1Z2PAY
                                                g$sym$7868$1Z2PAY
                                                '#f))))
                                          g$t$7873$1Z2PAY)
                                         ((case-lambda
                                            ((g$t$7877$1Z2PAY)
                                             (if g$t$7877$1Z2PAY
                                               g$t$7877$1Z2PAY
                                               (begin
                                                 '#f
                                                 ((letrec ((g$f$7878$1Z2PAY
                                                             (case-lambda
                                                               ((g$sym*$7879$1Z2PAY
                                                                  g$mark**$7880$1Z2PAY
                                                                  g$label*$7881$1Z2PAY)
                                                                (if (null?
                                                                      g$sym*$7879$1Z2PAY)
                                                                  (g$search$7869$1Z2PAY
                                                                    (cdr g$subst*$7870$1Z2PAY)
                                                                    g$mark*$7871$1Z2PAY)
                                                                  (if (if (eq? (car g$sym*$7879$1Z2PAY)
                                                                               g$sym$7868$1Z2PAY)
                                                                        (begin
                                                                          '#f
                                                                          (g$same-marks?$7292$1Z2PAY
                                                                            (car g$mark**$7880$1Z2PAY)
                                                                            g$mark*$7871$1Z2PAY))
                                                                        '#f)
                                                                    (car g$label*$7881$1Z2PAY)
                                                                    (g$f$7878$1Z2PAY
                                                                      (cdr g$sym*$7879$1Z2PAY)
                                                                      (cdr g$mark**$7880$1Z2PAY)
                                                                      (cdr g$label*$7881$1Z2PAY))))))))
                                                    g$f$7878$1Z2PAY)
                                                  (g$rib-sym*$7240$1Z2PAY
                                                    g$rib$7872$1Z2PAY)
                                                  (g$rib-mark**$7241$1Z2PAY
                                                    g$rib$7872$1Z2PAY)
                                                  (g$rib-label*$7242$1Z2PAY
                                                    g$rib$7872$1Z2PAY))))))
                                          (g$find-label$7252$1Z2PAY
                                            g$rib$7872$1Z2PAY
                                            g$sym$7868$1Z2PAY
                                            g$mark*$7871$1Z2PAY)))))
                                    (g$rib-sealed/freq$7243$1Z2PAY
                                      g$rib$7872$1Z2PAY))))
                                (car g$subst*$7870$1Z2PAY))))))))
               g$search$7869$1Z2PAY)
             (g$stx-subst*$7266$1Z2PAY g$id$7867$1Z2PAY)
             (g$stx-mark*$7265$1Z2PAY g$id$7867$1Z2PAY))))
         (g$id->sym$7291$1Z2PAY g$id$7867$1Z2PAY)))))
   (g$label->binding$7305$1Z2PAY
     g$label->binding$10988$1Z2PAY
     (case-lambda
       ((g$x$7882$1Z2PAY g$r$7883$1Z2PAY)
        ((case-lambda
           ((g$t$7884$1Z2PAY)
            (if g$t$7884$1Z2PAY
              ((case-lambda
                 ((g$b$7885$1Z2PAY)
                  (if (if (pair? g$b$7885$1Z2PAY)
                        (begin '#f (eq? (car g$b$7885$1Z2PAY) '$core-rtd))
                        '#f)
                    (cons '$rtd (map g$bless$7531$1Z2PAY (cdr g$b$7885$1Z2PAY)))
                    (if (if (pair? g$b$7885$1Z2PAY)
                          (begin '#f (eq? (car g$b$7885$1Z2PAY) 'global-rtd))
                          '#f)
                      ((case-lambda
                         ((g$lib$7886$1Z2PAY g$loc$7887$1Z2PAY)
                          (cons '$rtd (symbol-value g$loc$7887$1Z2PAY))))
                       (g$cadr$5178$1Z2PAY g$b$7885$1Z2PAY)
                       (g$cddr$5180$1Z2PAY g$b$7885$1Z2PAY))
                      g$b$7885$1Z2PAY))))
               g$t$7884$1Z2PAY)
              ((case-lambda
                 ((g$t$7888$1Z2PAY)
                  (if g$t$7888$1Z2PAY
                    (cdr g$t$7888$1Z2PAY)
                    ((case-lambda
                       ((g$t$7889$1Z2PAY)
                        (if g$t$7889$1Z2PAY
                          ((case-lambda
                             ((g$env$7890$1Z2PAY)
                              ((case-lambda
                                 ((g$t$7891$1Z2PAY)
                                  (if g$t$7891$1Z2PAY
                                    ((case-lambda
                                       ((g$p$7892$1Z2PAY)
                                        (g$cons*$5016$1Z2PAY
                                          'lexical
                                          (cdr g$p$7892$1Z2PAY)
                                          '#f)))
                                     g$t$7891$1Z2PAY)
                                    '(displaced-lexical . #f))))
                               (g$assq$5004$1Z2PAY
                                 g$x$7882$1Z2PAY
                                 (g$interaction-env-locs$7648$1Z2PAY
                                   g$env$7890$1Z2PAY)))))
                           g$t$7889$1Z2PAY)
                          '(displaced-lexical . #f))))
                     (g$top-level-context$7686$1Z2PAY)))))
               (g$assq$5004$1Z2PAY g$x$7882$1Z2PAY g$r$7883$1Z2PAY)))))
         (g$imported-label->binding$7099$1Z2PAY g$x$7882$1Z2PAY)))))
   (g$make-binding$7306$1Z2PAY g$make-binding$10989$1Z2PAY cons)
   (g$binding-type$7307$1Z2PAY g$binding-type$10990$1Z2PAY car)
   (g$binding-value$7308$1Z2PAY g$binding-value$10991$1Z2PAY cdr)
   (g$raise-unbound-error$7309$1Z2PAY
     g$raise-unbound-error$10992$1Z2PAY
     (case-lambda
       ((g$id$7893$1Z2PAY)
        (g$syntax-violation*$7678$1Z2PAY
          '#f
          '"unbound identifier"
          g$id$7893$1Z2PAY
          (g$make-undefined-violation$5802$1Z2PAY)))))
   (g$syntax-type$7310$1Z2PAY
     g$syntax-type$10993$1Z2PAY
     (case-lambda
       ((g$e$7894$1Z2PAY g$r$7895$1Z2PAY)
        (if (g$id?$7290$1Z2PAY g$e$7894$1Z2PAY)
          ((case-lambda
             ((g$id$7896$1Z2PAY)
              ((case-lambda
                 ((g$label$7897$1Z2PAY)
                  ((case-lambda
                     ((g$b$7898$1Z2PAY)
                      ((case-lambda
                         ((g$type$7899$1Z2PAY)
                          ((case-lambda
                             (()
                              (begin
                                (if (not g$label$7897$1Z2PAY)
                                  (g$raise-unbound-error$7309$1Z2PAY
                                    g$id$7896$1Z2PAY)
                                  (void))
                                ((case-lambda
                                   ((g$t$7900$1Z2PAY)
                                    (if (g$memv$5009$1Z2PAY
                                          g$t$7900$1Z2PAY
                                          '(lexical
                                             core-prim
                                             macro
                                             macro!
                                             global
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             displaced-lexical
                                             syntax
                                             import
                                             export
                                             $module
                                             $core-rtd
                                             library
                                             mutable))
                                      (values
                                        g$type$7899$1Z2PAY
                                        (g$binding-value$7308$1Z2PAY
                                          g$b$7898$1Z2PAY)
                                        g$id$7896$1Z2PAY)
                                      (values 'other '#f '#f))))
                                 g$type$7899$1Z2PAY)))))))
                       (g$binding-type$7307$1Z2PAY g$b$7898$1Z2PAY))))
                   (g$label->binding$7305$1Z2PAY
                     g$label$7897$1Z2PAY
                     g$r$7895$1Z2PAY))))
               (g$id->label$7303$1Z2PAY g$id$7896$1Z2PAY))))
           g$e$7894$1Z2PAY)
          (if (g$syntax-pair?$7283$1Z2PAY g$e$7894$1Z2PAY)
            ((case-lambda
               ((g$id$7901$1Z2PAY)
                (if (g$id?$7290$1Z2PAY g$id$7901$1Z2PAY)
                  ((case-lambda
                     ((g$label$7902$1Z2PAY)
                      ((case-lambda
                         ((g$b$7903$1Z2PAY)
                          ((case-lambda
                             ((g$type$7904$1Z2PAY)
                              ((case-lambda
                                 (()
                                  (begin
                                    (if (not g$label$7902$1Z2PAY)
                                      (g$raise-unbound-error$7309$1Z2PAY
                                        g$id$7901$1Z2PAY)
                                      (void))
                                    ((case-lambda
                                       ((g$t$7905$1Z2PAY)
                                        (if (g$memv$5009$1Z2PAY
                                              g$t$7905$1Z2PAY
                                              '(define define-syntax
                                                 core-macro
                                                 begin
                                                 macro
                                                 macro!
                                                 local-macro
                                                 local-macro!
                                                 global-macro
                                                 global-macro!
                                                 module
                                                 library
                                                 set!
                                                 let-syntax
                                                 letrec-syntax
                                                 import
                                                 export
                                                 $core-rtd))
                                          (values
                                            g$type$7904$1Z2PAY
                                            (g$binding-value$7308$1Z2PAY
                                              g$b$7903$1Z2PAY)
                                            g$id$7901$1Z2PAY)
                                          (values 'call '#f '#f))))
                                     g$type$7904$1Z2PAY)))))))
                           (g$binding-type$7307$1Z2PAY g$b$7903$1Z2PAY))))
                       (g$label->binding$7305$1Z2PAY
                         g$label$7902$1Z2PAY
                         g$r$7895$1Z2PAY))))
                   (g$id->label$7303$1Z2PAY g$id$7901$1Z2PAY))
                  (values 'call '#f '#f))))
             (g$syntax-car$7287$1Z2PAY g$e$7894$1Z2PAY))
            ((case-lambda
               ((g$d$7906$1Z2PAY)
                (if (g$self-evaluating?$7298$1Z2PAY g$d$7906$1Z2PAY)
                  (values 'constant g$d$7906$1Z2PAY '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$7301$1Z2PAY g$e$7894$1Z2PAY)))))))
   (g$sanitize-binding$7318$1Z2PAY
     g$sanitize-binding$10994$1Z2PAY
     (case-lambda
       ((g$x$7907$1Z2PAY g$src$7908$1Z2PAY)
        (if (procedure? g$x$7907$1Z2PAY)
          (g$cons*$5016$1Z2PAY 'local-macro g$x$7907$1Z2PAY g$src$7908$1Z2PAY)
          (if (if (pair? g$x$7907$1Z2PAY)
                (if (eq? (car g$x$7907$1Z2PAY) 'macro!)
                  (begin '#f (procedure? (cdr g$x$7907$1Z2PAY)))
                  '#f)
                '#f)
            (g$cons*$5016$1Z2PAY
              'local-macro!
              (cdr g$x$7907$1Z2PAY)
              g$src$7908$1Z2PAY)
            (if (if (pair? g$x$7907$1Z2PAY)
                  (begin '#f (eq? (car g$x$7907$1Z2PAY) '$rtd))
                  '#f)
              g$x$7907$1Z2PAY
              (assertion-violation
                'expand
                '"invalid transformer"
                g$x$7907$1Z2PAY)))))))
   (g$make-variable-transformer$7319$1Z2PAY
     g$make-variable-transformer$10995$1Z2PAY
     (case-lambda
       ((g$x$7909$1Z2PAY)
        (if (procedure? g$x$7909$1Z2PAY)
          (cons 'macro! g$x$7909$1Z2PAY)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$7909$1Z2PAY)))))
   (g$variable-transformer?$7320$1Z2PAY
     g$variable-transformer?$10996$1Z2PAY
     (case-lambda
       ((g$x$7910$1Z2PAY)
        (if (pair? g$x$7910$1Z2PAY)
          (if (eq? (car g$x$7910$1Z2PAY) 'macro!)
            (begin '#f (procedure? (cdr g$x$7910$1Z2PAY)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$7321$1Z2PAY
     g$variable-transformer-procedure$10997$1Z2PAY
     (case-lambda
       ((g$x$7911$1Z2PAY)
        (if (g$variable-transformer?$7320$1Z2PAY g$x$7911$1Z2PAY)
          (cdr g$x$7911$1Z2PAY)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$7911$1Z2PAY)))))
   (g$make-eval-transformer$7322$1Z2PAY
     g$make-eval-transformer$10998$1Z2PAY
     (case-lambda
       ((g$x$7912$1Z2PAY)
        (g$sanitize-binding$7318$1Z2PAY
          (eval-core (g$expanded->core$6808$1Z2PAY g$x$7912$1Z2PAY))
          g$x$7912$1Z2PAY))))
   (g$parse-define$7508$1Z2PAY
     g$parse-define$10999$1Z2PAY
     (case-lambda
       ((g$x$7913$1Z2PAY)
        ((case-lambda
           ((g$t$7914$1Z2PAY)
            ((case-lambda
               ((g$ls/false$7915$1Z2PAY)
                (if (if g$ls/false$7915$1Z2PAY
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7916$1Z2PAY
                               g$fmls$7917$1Z2PAY
                               g$b$7918$1Z2PAY
                               g$b*$7919$1Z2PAY)
                             (g$id?$7290$1Z2PAY g$id$7916$1Z2PAY)))
                          g$ls/false$7915$1Z2PAY))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7920$1Z2PAY
                         g$fmls$7921$1Z2PAY
                         g$b$7922$1Z2PAY
                         g$b*$7923$1Z2PAY)
                       (begin
                         (g$verify-formals$7588$1Z2PAY
                           g$fmls$7921$1Z2PAY
                           g$x$7913$1Z2PAY)
                         (values
                           g$id$7920$1Z2PAY
                           (cons
                             'defun
                             (cons
                               g$fmls$7921$1Z2PAY
                               (cons g$b$7922$1Z2PAY g$b*$7923$1Z2PAY)))))))
                    g$ls/false$7915$1Z2PAY)
                  ((case-lambda
                     ((g$t$7924$1Z2PAY)
                      ((case-lambda
                         ((g$ls/false$7925$1Z2PAY)
                          (if (if g$ls/false$7925$1Z2PAY
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$7926$1Z2PAY g$val$7927$1Z2PAY)
                                       (g$id?$7290$1Z2PAY g$id$7926$1Z2PAY)))
                                    g$ls/false$7925$1Z2PAY))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$7928$1Z2PAY g$val$7929$1Z2PAY)
                                 (values
                                   g$id$7928$1Z2PAY
                                   (cons 'expr g$val$7929$1Z2PAY))))
                              g$ls/false$7925$1Z2PAY)
                            ((case-lambda
                               ((g$t$7930$1Z2PAY)
                                ((case-lambda
                                   ((g$ls/false$7931$1Z2PAY)
                                    (if (if g$ls/false$7931$1Z2PAY
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$7932$1Z2PAY)
                                                 (g$id?$7290$1Z2PAY
                                                   g$id$7932$1Z2PAY)))
                                              g$ls/false$7931$1Z2PAY))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$7933$1Z2PAY)
                                           (values
                                             g$id$7933$1Z2PAY
                                             (cons
                                               'expr
                                               (g$bless$7531$1Z2PAY '(void))))))
                                        g$ls/false$7931$1Z2PAY)
                                      (g$syntax-violation$7679$1Z2PAY
                                        '#f
                                        '"invalid syntax"
                                        g$t$7930$1Z2PAY))))
                                 (g$syntax-dispatch$7568$1Z2PAY
                                   g$t$7930$1Z2PAY
                                   '(_ any)))))
                             g$t$7924$1Z2PAY))))
                       (g$syntax-dispatch$7568$1Z2PAY
                         g$t$7924$1Z2PAY
                         '(_ any any)))))
                   g$t$7914$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$7914$1Z2PAY
               '(_ (any . any) any . each-any)))))
         g$x$7913$1Z2PAY))))
   (g$parse-define-syntax$7509$1Z2PAY
     g$parse-define-syntax$11000$1Z2PAY
     (case-lambda
       ((g$x$7934$1Z2PAY)
        ((case-lambda
           ((g$t$7935$1Z2PAY)
            ((case-lambda
               ((g$ls/false$7936$1Z2PAY)
                (if (if g$ls/false$7936$1Z2PAY
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7937$1Z2PAY g$val$7938$1Z2PAY)
                             (g$id?$7290$1Z2PAY g$id$7937$1Z2PAY)))
                          g$ls/false$7936$1Z2PAY))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7939$1Z2PAY g$val$7940$1Z2PAY)
                       (values g$id$7939$1Z2PAY g$val$7940$1Z2PAY)))
                    g$ls/false$7936$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$7935$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$7935$1Z2PAY '(_ any any)))))
         g$x$7934$1Z2PAY))))
   (g$scheme-stx-hashtable$7510$1Z2PAY
     g$scheme-stx-hashtable$11001$1Z2PAY
     (g$make-eq-hashtable$5452$1Z2PAY))
   (g$scheme-stx$7511$1Z2PAY
     g$scheme-stx$11002$1Z2PAY
     (case-lambda
       ((g$sym$7941$1Z2PAY)
        ((case-lambda
           ((g$t$7942$1Z2PAY)
            (if g$t$7942$1Z2PAY
              g$t$7942$1Z2PAY
              (begin
                '#f
                ((case-lambda
                   ((g$subst$7943$1Z2PAY)
                    ((case-lambda
                       ((g$stx$7944$1Z2PAY)
                        ((case-lambda
                           ((g$stx$7945$1Z2PAY)
                            ((case-lambda
                               (()
                                (begin
                                  (g$hashtable-set!$5456$1Z2PAY
                                    g$scheme-stx-hashtable$7510$1Z2PAY
                                    g$sym$7941$1Z2PAY
                                    g$stx$7945$1Z2PAY)
                                  g$stx$7945$1Z2PAY))))))
                         ((case-lambda
                            ((g$t$7946$1Z2PAY)
                             (if g$t$7946$1Z2PAY
                               ((case-lambda
                                  ((g$x$7947$1Z2PAY)
                                   ((case-lambda
                                      ((g$name$7948$1Z2PAY g$label$7949$1Z2PAY)
                                       (g$add-subst$7280$1Z2PAY
                                         (g$make-rib$7239$1Z2PAY
                                           (list g$name$7948$1Z2PAY)
                                           (list g$top-mark*$7227$1Z2PAY)
                                           (list g$label$7949$1Z2PAY)
                                           '#f
                                           '#f)
                                         g$stx$7944$1Z2PAY)))
                                    (car g$x$7947$1Z2PAY)
                                    (cdr g$x$7947$1Z2PAY))))
                                g$t$7946$1Z2PAY)
                               g$stx$7944$1Z2PAY)))
                          (g$assq$5004$1Z2PAY
                            g$sym$7941$1Z2PAY
                            g$subst$7943$1Z2PAY)))))
                     (g$make-stx$7263$1Z2PAY
                       g$sym$7941$1Z2PAY
                       g$top-mark*$7227$1Z2PAY
                       '()
                       '()))))
                 (g$library-subst$7057$1Z2PAY
                   (g$find-library-by-name$7093$1Z2PAY
                     '(psyntax system $all))))))))
         (g$hashtable-ref$5455$1Z2PAY
           g$scheme-stx-hashtable$7510$1Z2PAY
           g$sym$7941$1Z2PAY
           '#f)))))
   (g$lexical-var$7512$1Z2PAY g$lexical-var$11003$1Z2PAY car)
   (g$lexical-mutable?$7513$1Z2PAY g$lexical-mutable?$11004$1Z2PAY cdr)
   (g$set-lexical-mutable!$7514$1Z2PAY
     g$set-lexical-mutable!$11005$1Z2PAY
     set-cdr!)
   (g$add-lexical$7515$1Z2PAY
     g$add-lexical$11006$1Z2PAY
     (case-lambda
       ((g$lab$7950$1Z2PAY g$lex$7951$1Z2PAY g$r$7952$1Z2PAY)
        (cons
          (g$cons*$5016$1Z2PAY g$lab$7950$1Z2PAY 'lexical g$lex$7951$1Z2PAY '#f)
          g$r$7952$1Z2PAY))))
   (g$add-lexicals$7516$1Z2PAY
     g$add-lexicals$11007$1Z2PAY
     (case-lambda
       ((g$lab*$7953$1Z2PAY g$lex*$7954$1Z2PAY g$r$7955$1Z2PAY)
        (if (null? g$lab*$7953$1Z2PAY)
          g$r$7955$1Z2PAY
          (g$add-lexicals$7516$1Z2PAY
            (cdr g$lab*$7953$1Z2PAY)
            (cdr g$lex*$7954$1Z2PAY)
            (g$add-lexical$7515$1Z2PAY
              (car g$lab*$7953$1Z2PAY)
              (car g$lex*$7954$1Z2PAY)
              g$r$7955$1Z2PAY))))))
   (g$letrec-helper$7517$1Z2PAY
     g$letrec-helper$11008$1Z2PAY
     (case-lambda
       ((g$e$7956$1Z2PAY g$r$7957$1Z2PAY g$mr$7958$1Z2PAY g$build$7959$1Z2PAY)
        ((case-lambda
           ((g$t$7960$1Z2PAY)
            ((case-lambda
               ((g$ls/false$7961$1Z2PAY)
                (if g$ls/false$7961$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$lhs*$7962$1Z2PAY
                         g$rhs*$7963$1Z2PAY
                         g$b$7964$1Z2PAY
                         g$b*$7965$1Z2PAY)
                       (if (not (g$valid-bound-ids?$7295$1Z2PAY
                                  g$lhs*$7962$1Z2PAY))
                         (g$invalid-fmls-error$7533$1Z2PAY
                           g$e$7956$1Z2PAY
                           g$lhs*$7962$1Z2PAY)
                         ((case-lambda
                            ((g$lex*$7966$1Z2PAY g$lab*$7967$1Z2PAY)
                             ((case-lambda
                                ((g$rib$7968$1Z2PAY g$r$7969$1Z2PAY)
                                 ((case-lambda
                                    ((g$body$7970$1Z2PAY g$rhs*$7971$1Z2PAY)
                                     (g$build$7959$1Z2PAY
                                       '#f
                                       g$lex*$7966$1Z2PAY
                                       g$rhs*$7971$1Z2PAY
                                       g$body$7970$1Z2PAY)))
                                  (g$chi-internal$7597$1Z2PAY
                                    (g$add-subst$7280$1Z2PAY
                                      g$rib$7968$1Z2PAY
                                      (cons g$b$7964$1Z2PAY g$b*$7965$1Z2PAY))
                                    g$r$7969$1Z2PAY
                                    g$mr$7958$1Z2PAY)
                                  (g$chi-expr*$7584$1Z2PAY
                                    (map (case-lambda
                                           ((g$x$7972$1Z2PAY)
                                            (g$add-subst$7280$1Z2PAY
                                              g$rib$7968$1Z2PAY
                                              g$x$7972$1Z2PAY)))
                                         g$rhs*$7963$1Z2PAY)
                                    g$r$7969$1Z2PAY
                                    g$mr$7958$1Z2PAY))))
                              (g$make-full-rib$7258$1Z2PAY
                                g$lhs*$7962$1Z2PAY
                                g$lab*$7967$1Z2PAY)
                              (g$add-lexicals$7516$1Z2PAY
                                g$lab*$7967$1Z2PAY
                                g$lex*$7966$1Z2PAY
                                g$r$7957$1Z2PAY))))
                          (map g$gen-lexical$7229$1Z2PAY g$lhs*$7962$1Z2PAY)
                          (map g$gen-label$7231$1Z2PAY g$lhs*$7962$1Z2PAY)))))
                    g$ls/false$7961$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$7960$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$7960$1Z2PAY
               '(_ #(each (any any)) any . each-any)))))
         g$e$7956$1Z2PAY))))
   (g$letrec-transformer$7518$1Z2PAY
     g$letrec-transformer$11009$1Z2PAY
     (case-lambda
       ((g$e$7973$1Z2PAY g$r$7974$1Z2PAY g$mr$7975$1Z2PAY)
        (g$letrec-helper$7517$1Z2PAY
          g$e$7973$1Z2PAY
          g$r$7974$1Z2PAY
          g$mr$7975$1Z2PAY
          g$build-letrec$7221$1Z2PAY))))
   (g$letrec*-transformer$7519$1Z2PAY
     g$letrec*-transformer$11010$1Z2PAY
     (case-lambda
       ((g$e$7976$1Z2PAY g$r$7977$1Z2PAY g$mr$7978$1Z2PAY)
        (g$letrec-helper$7517$1Z2PAY
          g$e$7976$1Z2PAY
          g$r$7977$1Z2PAY
          g$mr$7978$1Z2PAY
          g$build-letrec*$7222$1Z2PAY))))
   (g$fluid-let-syntax-transformer$7520$1Z2PAY
     g$fluid-let-syntax-transformer$11011$1Z2PAY
     (case-lambda
       ((g$e$7979$1Z2PAY g$r$7980$1Z2PAY g$mr$7981$1Z2PAY)
        (letrec* ((g$lookup$7982$1Z2PAY
                    (case-lambda
                      ((g$x$7992$1Z2PAY)
                       ((case-lambda
                          ((g$t$7993$1Z2PAY)
                           (if g$t$7993$1Z2PAY
                             g$t$7993$1Z2PAY
                             (begin
                               '#f
                               (g$syntax-violation$7679$1Z2PAY
                                 '#f
                                 '"unbound identifier"
                                 g$e$7979$1Z2PAY
                                 g$x$7992$1Z2PAY)))))
                        (g$id->label$7303$1Z2PAY g$x$7992$1Z2PAY))))))
          ((case-lambda
             ((g$t$7983$1Z2PAY)
              ((case-lambda
                 ((g$ls/false$7984$1Z2PAY)
                  (if g$ls/false$7984$1Z2PAY
                    (apply
                      (case-lambda
                        ((g$lhs*$7985$1Z2PAY
                           g$rhs*$7986$1Z2PAY
                           g$b$7987$1Z2PAY
                           g$b*$7988$1Z2PAY)
                         (if (not (g$valid-bound-ids?$7295$1Z2PAY
                                    g$lhs*$7985$1Z2PAY))
                           (g$invalid-fmls-error$7533$1Z2PAY
                             g$e$7979$1Z2PAY
                             g$lhs*$7985$1Z2PAY)
                           ((case-lambda
                              ((g$lab*$7989$1Z2PAY g$rhs*$7990$1Z2PAY)
                               (g$chi-internal$7597$1Z2PAY
                                 (cons g$b$7987$1Z2PAY g$b*$7988$1Z2PAY)
                                 (append
                                   (map cons
                                        g$lab*$7989$1Z2PAY
                                        g$rhs*$7990$1Z2PAY)
                                   g$r$7980$1Z2PAY)
                                 (append
                                   (map cons
                                        g$lab*$7989$1Z2PAY
                                        g$rhs*$7990$1Z2PAY)
                                   g$mr$7981$1Z2PAY))))
                            (map g$lookup$7982$1Z2PAY g$lhs*$7985$1Z2PAY)
                            (map (case-lambda
                                   ((g$x$7991$1Z2PAY)
                                    (g$make-eval-transformer$7322$1Z2PAY
                                      (g$expand-transformer$7613$1Z2PAY
                                        g$x$7991$1Z2PAY
                                        g$mr$7981$1Z2PAY))))
                                 g$rhs*$7986$1Z2PAY)))))
                      g$ls/false$7984$1Z2PAY)
                    (g$syntax-violation$7679$1Z2PAY
                      '#f
                      '"invalid syntax"
                      g$t$7983$1Z2PAY))))
               (g$syntax-dispatch$7568$1Z2PAY
                 g$t$7983$1Z2PAY
                 '(_ #(each (any any)) any . each-any)))))
           g$e$7979$1Z2PAY)))))
   (g$type-descriptor-transformer$7521$1Z2PAY
     g$type-descriptor-transformer$11012$1Z2PAY
     (case-lambda
       ((g$e$7994$1Z2PAY g$r$7995$1Z2PAY g$mr$7996$1Z2PAY)
        ((case-lambda
           ((g$t$7997$1Z2PAY)
            ((case-lambda
               ((g$ls/false$7998$1Z2PAY)
                (if (if g$ls/false$7998$1Z2PAY
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7999$1Z2PAY)
                             (g$id?$7290$1Z2PAY g$id$7999$1Z2PAY)))
                          g$ls/false$7998$1Z2PAY))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8000$1Z2PAY)
                       ((case-lambda
                          ((g$lab$8001$1Z2PAY)
                           ((case-lambda
                              ((g$b$8002$1Z2PAY)
                               ((case-lambda
                                  ((g$type$8003$1Z2PAY)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$8001$1Z2PAY)
                                           (g$raise-unbound-error$7309$1Z2PAY
                                             g$id$8000$1Z2PAY)
                                           (void))
                                         (if (not (if (eq? g$type$8003$1Z2PAY
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (not (list?
                                                             (g$binding-value$7308$1Z2PAY
                                                               g$b$8002$1Z2PAY))))
                                                    '#f))
                                           (g$syntax-violation$7679$1Z2PAY
                                             '#f
                                             '"not a record type"
                                             g$e$7994$1Z2PAY)
                                           (void))
                                         (list
                                           'quote
                                           (g$binding-value$7308$1Z2PAY
                                             g$b$8002$1Z2PAY))))))))
                                (g$binding-type$7307$1Z2PAY g$b$8002$1Z2PAY))))
                            (g$label->binding$7305$1Z2PAY
                              g$lab$8001$1Z2PAY
                              g$r$7995$1Z2PAY))))
                        (g$id->label$7303$1Z2PAY g$id$8000$1Z2PAY))))
                    g$ls/false$7998$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$7997$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$7997$1Z2PAY '(_ any)))))
         g$e$7994$1Z2PAY))))
   (g$record-type-descriptor-transformer$7522$1Z2PAY
     g$record-type-descriptor-transformer$11013$1Z2PAY
     (case-lambda
       ((g$e$8004$1Z2PAY g$r$8005$1Z2PAY g$mr$8006$1Z2PAY)
        ((case-lambda
           ((g$t$8007$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8008$1Z2PAY)
                (if (if g$ls/false$8008$1Z2PAY
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8009$1Z2PAY)
                             (g$id?$7290$1Z2PAY g$id$8009$1Z2PAY)))
                          g$ls/false$8008$1Z2PAY))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8010$1Z2PAY)
                       ((case-lambda
                          ((g$lab$8011$1Z2PAY)
                           ((case-lambda
                              ((g$b$8012$1Z2PAY)
                               ((case-lambda
                                  ((g$type$8013$1Z2PAY)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$8011$1Z2PAY)
                                           (g$raise-unbound-error$7309$1Z2PAY
                                             g$id$8010$1Z2PAY)
                                           (void))
                                         (if (not (if (eq? g$type$8013$1Z2PAY
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (list?
                                                        (g$binding-value$7308$1Z2PAY
                                                          g$b$8012$1Z2PAY)))
                                                    '#f))
                                           (g$syntax-violation$7679$1Z2PAY
                                             '#f
                                             '"not a record type"
                                             g$e$8004$1Z2PAY)
                                           (void))
                                         (g$chi-expr$7586$1Z2PAY
                                           (car (g$binding-value$7308$1Z2PAY
                                                  g$b$8012$1Z2PAY))
                                           g$r$8005$1Z2PAY
                                           g$mr$8006$1Z2PAY)))))))
                                (g$binding-type$7307$1Z2PAY g$b$8012$1Z2PAY))))
                            (g$label->binding$7305$1Z2PAY
                              g$lab$8011$1Z2PAY
                              g$r$8005$1Z2PAY))))
                        (g$id->label$7303$1Z2PAY g$id$8010$1Z2PAY))))
                    g$ls/false$8008$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8007$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$8007$1Z2PAY '(_ any)))))
         g$e$8004$1Z2PAY))))
   (g$record-constructor-descriptor-transformer$7523$1Z2PAY
     g$record-constructor-descriptor-transformer$11014$1Z2PAY
     (case-lambda
       ((g$e$8014$1Z2PAY g$r$8015$1Z2PAY g$mr$8016$1Z2PAY)
        ((case-lambda
           ((g$t$8017$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8018$1Z2PAY)
                (if (if g$ls/false$8018$1Z2PAY
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8019$1Z2PAY)
                             (g$id?$7290$1Z2PAY g$id$8019$1Z2PAY)))
                          g$ls/false$8018$1Z2PAY))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8020$1Z2PAY)
                       ((case-lambda
                          ((g$lab$8021$1Z2PAY)
                           ((case-lambda
                              ((g$b$8022$1Z2PAY)
                               ((case-lambda
                                  ((g$type$8023$1Z2PAY)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$8021$1Z2PAY)
                                           (g$raise-unbound-error$7309$1Z2PAY
                                             g$id$8020$1Z2PAY)
                                           (void))
                                         (if (not (if (eq? g$type$8023$1Z2PAY
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (list?
                                                        (g$binding-value$7308$1Z2PAY
                                                          g$b$8022$1Z2PAY)))
                                                    '#f))
                                           (g$syntax-violation$7679$1Z2PAY
                                             '#f
                                             '"invalid type"
                                             g$e$8014$1Z2PAY)
                                           (void))
                                         (g$chi-expr$7586$1Z2PAY
                                           (g$cadr$5178$1Z2PAY
                                             (g$binding-value$7308$1Z2PAY
                                               g$b$8022$1Z2PAY))
                                           g$r$8015$1Z2PAY
                                           g$mr$8016$1Z2PAY)))))))
                                (g$binding-type$7307$1Z2PAY g$b$8022$1Z2PAY))))
                            (g$label->binding$7305$1Z2PAY
                              g$lab$8021$1Z2PAY
                              g$r$8015$1Z2PAY))))
                        (g$id->label$7303$1Z2PAY g$id$8020$1Z2PAY))))
                    g$ls/false$8018$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8017$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$8017$1Z2PAY '(_ any)))))
         g$e$8014$1Z2PAY))))
   (g$when-macro$7524$1Z2PAY
     g$when-macro$11015$1Z2PAY
     (case-lambda
       ((g$e$8024$1Z2PAY)
        ((case-lambda
           ((g$t$8025$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8026$1Z2PAY)
                (if g$ls/false$8026$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$test$8027$1Z2PAY g$e$8028$1Z2PAY g$e*$8029$1Z2PAY)
                       (g$bless$7531$1Z2PAY
                         (list
                           'if
                           g$test$8027$1Z2PAY
                           (cons
                             'begin
                             (cons g$e$8028$1Z2PAY g$e*$8029$1Z2PAY))))))
                    g$ls/false$8026$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8025$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$8025$1Z2PAY
               '(_ any any . each-any)))))
         g$e$8024$1Z2PAY))))
   (g$unless-macro$7525$1Z2PAY
     g$unless-macro$11016$1Z2PAY
     (case-lambda
       ((g$e$8030$1Z2PAY)
        ((case-lambda
           ((g$t$8031$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8032$1Z2PAY)
                (if g$ls/false$8032$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$test$8033$1Z2PAY g$e$8034$1Z2PAY g$e*$8035$1Z2PAY)
                       (g$bless$7531$1Z2PAY
                         (list
                           'if
                           (list 'not g$test$8033$1Z2PAY)
                           (cons
                             'begin
                             (cons g$e$8034$1Z2PAY g$e*$8035$1Z2PAY))))))
                    g$ls/false$8032$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8031$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$8031$1Z2PAY
               '(_ any any . each-any)))))
         g$e$8030$1Z2PAY))))
   (g$if-transformer$7526$1Z2PAY
     g$if-transformer$11017$1Z2PAY
     (case-lambda
       ((g$e$8036$1Z2PAY g$r$8037$1Z2PAY g$mr$8038$1Z2PAY)
        ((case-lambda
           ((g$t$8039$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8040$1Z2PAY)
                (if g$ls/false$8040$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$e0$8041$1Z2PAY g$e1$8042$1Z2PAY g$e2$8043$1Z2PAY)
                       (list
                         'if
                         (g$chi-expr$7586$1Z2PAY
                           g$e0$8041$1Z2PAY
                           g$r$8037$1Z2PAY
                           g$mr$8038$1Z2PAY)
                         (g$chi-expr$7586$1Z2PAY
                           g$e1$8042$1Z2PAY
                           g$r$8037$1Z2PAY
                           g$mr$8038$1Z2PAY)
                         (g$chi-expr$7586$1Z2PAY
                           g$e2$8043$1Z2PAY
                           g$r$8037$1Z2PAY
                           g$mr$8038$1Z2PAY))))
                    g$ls/false$8040$1Z2PAY)
                  ((case-lambda
                     ((g$t$8044$1Z2PAY)
                      ((case-lambda
                         ((g$ls/false$8045$1Z2PAY)
                          (if g$ls/false$8045$1Z2PAY
                            (apply
                              (case-lambda
                                ((g$e0$8046$1Z2PAY g$e1$8047$1Z2PAY)
                                 (list
                                   'if
                                   (g$chi-expr$7586$1Z2PAY
                                     g$e0$8046$1Z2PAY
                                     g$r$8037$1Z2PAY
                                     g$mr$8038$1Z2PAY)
                                   (g$chi-expr$7586$1Z2PAY
                                     g$e1$8047$1Z2PAY
                                     g$r$8037$1Z2PAY
                                     g$mr$8038$1Z2PAY)
                                   (g$build-void$7220$1Z2PAY))))
                              g$ls/false$8045$1Z2PAY)
                            (g$syntax-violation$7679$1Z2PAY
                              '#f
                              '"invalid syntax"
                              g$t$8044$1Z2PAY))))
                       (g$syntax-dispatch$7568$1Z2PAY
                         g$t$8044$1Z2PAY
                         '(_ any any)))))
                   g$t$8039$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$8039$1Z2PAY '(_ any any any)))))
         g$e$8036$1Z2PAY))))
   (g$case-macro$7527$1Z2PAY
     g$case-macro$11018$1Z2PAY
     (case-lambda
       ((g$e$8048$1Z2PAY)
        (letrec* ((g$build-last$8049$1Z2PAY
                    (case-lambda
                      ((g$cls$8069$1Z2PAY)
                       ((case-lambda
                          ((g$t$8070$1Z2PAY)
                           ((case-lambda
                              ((g$ls/false$8071$1Z2PAY)
                               (if g$ls/false$8071$1Z2PAY
                                 (apply
                                   (case-lambda
                                     ((g$e$8072$1Z2PAY g$e*$8073$1Z2PAY)
                                      (cons
                                        'begin
                                        (cons
                                          g$e$8072$1Z2PAY
                                          g$e*$8073$1Z2PAY))))
                                   g$ls/false$8071$1Z2PAY)
                                 ((case-lambda
                                    ((g$t$8074$1Z2PAY)
                                     ((case-lambda
                                        ((g$ls/false$8075$1Z2PAY)
                                         (if g$ls/false$8075$1Z2PAY
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$8050$1Z2PAY
                                                  g$cls$8069$1Z2PAY
                                                  '(if #f #f))))
                                             g$ls/false$8075$1Z2PAY)
                                           (g$syntax-violation$7679$1Z2PAY
                                             '#f
                                             '"invalid syntax"
                                             g$t$8074$1Z2PAY))))
                                      (g$syntax-dispatch$7568$1Z2PAY
                                        g$t$8074$1Z2PAY
                                        '_))))
                                  g$t$8070$1Z2PAY))))
                            (g$syntax-dispatch$7568$1Z2PAY
                              g$t$8070$1Z2PAY
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$8069$1Z2PAY))))
                  (g$build-one$8050$1Z2PAY
                    (case-lambda
                      ((g$cls$8062$1Z2PAY g$k$8063$1Z2PAY)
                       ((case-lambda
                          ((g$t$8064$1Z2PAY)
                           ((case-lambda
                              ((g$ls/false$8065$1Z2PAY)
                               (if g$ls/false$8065$1Z2PAY
                                 (apply
                                   (case-lambda
                                     ((g$d*$8066$1Z2PAY
                                        g$e$8067$1Z2PAY
                                        g$e*$8068$1Z2PAY)
                                      (list
                                        'if
                                        (list
                                          'memv
                                          't
                                          (list 'quote g$d*$8066$1Z2PAY))
                                        (cons
                                          'begin
                                          (cons
                                            g$e$8067$1Z2PAY
                                            g$e*$8068$1Z2PAY))
                                        g$k$8063$1Z2PAY)))
                                   g$ls/false$8065$1Z2PAY)
                                 (g$syntax-violation$7679$1Z2PAY
                                   '#f
                                   '"invalid syntax"
                                   g$t$8064$1Z2PAY))))
                            (g$syntax-dispatch$7568$1Z2PAY
                              g$t$8064$1Z2PAY
                              '(each-any any . each-any)))))
                        g$cls$8062$1Z2PAY)))))
          ((case-lambda
             ((g$t$8051$1Z2PAY)
              ((case-lambda
                 ((g$ls/false$8052$1Z2PAY)
                  (if g$ls/false$8052$1Z2PAY
                    (apply
                      (case-lambda
                        ((g$expr$8053$1Z2PAY)
                         (g$bless$7531$1Z2PAY
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$8053$1Z2PAY))
                               '((if #f #f)))))))
                      g$ls/false$8052$1Z2PAY)
                    ((case-lambda
                       ((g$t$8054$1Z2PAY)
                        ((case-lambda
                           ((g$ls/false$8055$1Z2PAY)
                            (if g$ls/false$8055$1Z2PAY
                              (apply
                                (case-lambda
                                  ((g$expr$8056$1Z2PAY
                                     g$cls$8057$1Z2PAY
                                     g$cls*$8058$1Z2PAY)
                                   (g$bless$7531$1Z2PAY
                                     (list
                                       'let
                                       (list (list 't g$expr$8056$1Z2PAY))
                                       ((letrec ((g$f$8059$1Z2PAY
                                                   (case-lambda
                                                     ((g$cls$8060$1Z2PAY
                                                        g$cls*$8061$1Z2PAY)
                                                      (if (null?
                                                            g$cls*$8061$1Z2PAY)
                                                        (g$build-last$8049$1Z2PAY
                                                          g$cls$8060$1Z2PAY)
                                                        (g$build-one$8050$1Z2PAY
                                                          g$cls$8060$1Z2PAY
                                                          (g$f$8059$1Z2PAY
                                                            (car g$cls*$8061$1Z2PAY)
                                                            (cdr g$cls*$8061$1Z2PAY))))))))
                                          g$f$8059$1Z2PAY)
                                        g$cls$8057$1Z2PAY
                                        g$cls*$8058$1Z2PAY)))))
                                g$ls/false$8055$1Z2PAY)
                              (g$syntax-violation$7679$1Z2PAY
                                '#f
                                '"invalid syntax"
                                g$t$8054$1Z2PAY))))
                         (g$syntax-dispatch$7568$1Z2PAY
                           g$t$8054$1Z2PAY
                           '(_ any any . each-any)))))
                     g$t$8051$1Z2PAY))))
               (g$syntax-dispatch$7568$1Z2PAY g$t$8051$1Z2PAY '(_ any)))))
           g$e$8048$1Z2PAY)))))
   (g$quote-transformer$7528$1Z2PAY
     g$quote-transformer$11019$1Z2PAY
     (case-lambda
       ((g$e$8076$1Z2PAY g$r$8077$1Z2PAY g$mr$8078$1Z2PAY)
        ((case-lambda
           ((g$t$8079$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8080$1Z2PAY)
                (if g$ls/false$8080$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$datum$8081$1Z2PAY)
                       (list
                         'quote
                         (g$stx->datum$7301$1Z2PAY g$datum$8081$1Z2PAY))))
                    g$ls/false$8080$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8079$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$8079$1Z2PAY '(_ any)))))
         g$e$8076$1Z2PAY))))
   (g$case-lambda-transformer$7529$1Z2PAY
     g$case-lambda-transformer$11020$1Z2PAY
     (case-lambda
       ((g$e$8082$1Z2PAY g$r$8083$1Z2PAY g$mr$8084$1Z2PAY)
        ((case-lambda
           ((g$t$8085$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8086$1Z2PAY)
                (if g$ls/false$8086$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$fmls*$8087$1Z2PAY g$b*$8088$1Z2PAY g$b**$8089$1Z2PAY)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$7590$1Z2PAY
                              g$e$8082$1Z2PAY
                              g$fmls*$8087$1Z2PAY
                              (map cons g$b*$8088$1Z2PAY g$b**$8089$1Z2PAY)
                              g$r$8083$1Z2PAY
                              g$mr$8084$1Z2PAY)))
                         (case-lambda
                           ((g$fmls*$8092$1Z2PAY g$body*$8093$1Z2PAY)
                            ((case-lambda
                               ((g$body*$8094$1Z2PAY g$fmls*$8095$1Z2PAY)
                                (g$build-case-lambda$7217$1Z2PAY
                                  '#f
                                  g$fmls*$8095$1Z2PAY
                                  g$body*$8094$1Z2PAY)))
                             g$body*$8093$1Z2PAY
                             g$fmls*$8092$1Z2PAY))))))
                    g$ls/false$8086$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8085$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$8085$1Z2PAY
               '(_ . #(each (any any . each-any)))))))
         g$e$8082$1Z2PAY))))
   (g$lambda-transformer$7530$1Z2PAY
     g$lambda-transformer$11021$1Z2PAY
     (case-lambda
       ((g$e$8096$1Z2PAY g$r$8097$1Z2PAY g$mr$8098$1Z2PAY)
        ((case-lambda
           ((g$t$8099$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8100$1Z2PAY)
                (if g$ls/false$8100$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$fmls$8101$1Z2PAY g$b$8102$1Z2PAY g$b*$8103$1Z2PAY)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$7589$1Z2PAY
                              g$e$8096$1Z2PAY
                              g$fmls$8101$1Z2PAY
                              (cons g$b$8102$1Z2PAY g$b*$8103$1Z2PAY)
                              g$r$8097$1Z2PAY
                              g$mr$8098$1Z2PAY)))
                         (case-lambda
                           ((g$fmls$8106$1Z2PAY g$body$8107$1Z2PAY)
                            ((case-lambda
                               ((g$body$8108$1Z2PAY g$fmls$8109$1Z2PAY)
                                (g$build-lambda$7216$1Z2PAY
                                  '#f
                                  g$fmls$8109$1Z2PAY
                                  g$body$8108$1Z2PAY)))
                             g$body$8107$1Z2PAY
                             g$fmls$8106$1Z2PAY))))))
                    g$ls/false$8100$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8099$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$8099$1Z2PAY
               '(_ any any . each-any)))))
         g$e$8096$1Z2PAY))))
   (g$bless$7531$1Z2PAY
     g$bless$11022$1Z2PAY
     (case-lambda
       ((g$x$8110$1Z2PAY)
        (g$mkstx$7278$1Z2PAY
          ((letrec ((g$f$8111$1Z2PAY
                      (case-lambda
                        ((g$x$8112$1Z2PAY)
                         (if (g$stx?$7262$1Z2PAY g$x$8112$1Z2PAY)
                           g$x$8112$1Z2PAY
                           (if (pair? g$x$8112$1Z2PAY)
                             (cons
                               (g$f$8111$1Z2PAY (car g$x$8112$1Z2PAY))
                               (g$f$8111$1Z2PAY (cdr g$x$8112$1Z2PAY)))
                             (if (symbol? g$x$8112$1Z2PAY)
                               (g$scheme-stx$7511$1Z2PAY g$x$8112$1Z2PAY)
                               (if (vector? g$x$8112$1Z2PAY)
                                 (vector-map g$f$8111$1Z2PAY g$x$8112$1Z2PAY)
                                 g$x$8112$1Z2PAY))))))))
             g$f$8111$1Z2PAY)
           g$x$8110$1Z2PAY)
          '()
          '()
          '()))))
   (g$with-syntax-macro$7532$1Z2PAY
     g$with-syntax-macro$11023$1Z2PAY
     (case-lambda
       ((g$e$8113$1Z2PAY)
        ((case-lambda
           ((g$t$8114$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8115$1Z2PAY)
                (if g$ls/false$8115$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$pat*$8116$1Z2PAY
                         g$expr*$8117$1Z2PAY
                         g$b$8118$1Z2PAY
                         g$b*$8119$1Z2PAY)
                       ((case-lambda
                          ((g$idn*$8120$1Z2PAY)
                           (begin
                             (g$verify-formals$7588$1Z2PAY
                               (map car g$idn*$8120$1Z2PAY)
                               g$e$8113$1Z2PAY)
                             ((case-lambda
                                ((g$t*$8121$1Z2PAY)
                                 (g$bless$7531$1Z2PAY
                                   (list
                                     'let
                                     (map list
                                          g$t*$8121$1Z2PAY
                                          g$expr*$8117$1Z2PAY)
                                     ((letrec ((g$f$8122$1Z2PAY
                                                 (case-lambda
                                                   ((g$pat*$8123$1Z2PAY
                                                      g$t*$8124$1Z2PAY)
                                                    (if (null?
                                                          g$pat*$8123$1Z2PAY)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$8118$1Z2PAY
                                                            g$b*$8119$1Z2PAY)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$8124$1Z2PAY)
                                                        '()
                                                        (list
                                                          (car g$pat*$8123$1Z2PAY)
                                                          (g$f$8122$1Z2PAY
                                                            (cdr g$pat*$8123$1Z2PAY)
                                                            (cdr g$t*$8124$1Z2PAY)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$8123$1Z2PAY))
                                                            (car g$t*$8124$1Z2PAY)))))))))
                                        g$f$8122$1Z2PAY)
                                      g$pat*$8116$1Z2PAY
                                      g$t*$8121$1Z2PAY)))))
                              (g$generate-temporaries$7669$1Z2PAY
                                g$expr*$8117$1Z2PAY)))))
                        ((letrec ((g$f$8125$1Z2PAY
                                    (case-lambda
                                      ((g$pat*$8126$1Z2PAY)
                                       (if (null? g$pat*$8126$1Z2PAY)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$7567$1Z2PAY
                                                (car g$pat*$8126$1Z2PAY)
                                                '())))
                                           (case-lambda
                                             ((g$pat$8129$1Z2PAY
                                                g$idn*$8130$1Z2PAY)
                                              ((case-lambda
                                                 ((g$idn*$8131$1Z2PAY
                                                    g$pat$8132$1Z2PAY)
                                                  (append
                                                    g$idn*$8131$1Z2PAY
                                                    (g$f$8125$1Z2PAY
                                                      (cdr g$pat*$8126$1Z2PAY)))))
                                               g$idn*$8130$1Z2PAY
                                               g$pat$8129$1Z2PAY)))))))))
                           g$f$8125$1Z2PAY)
                         g$pat*$8116$1Z2PAY))))
                    g$ls/false$8115$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8114$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$8114$1Z2PAY
               '(_ #(each (any any)) any . each-any)))))
         g$e$8113$1Z2PAY))))
   (g$invalid-fmls-error$7533$1Z2PAY
     g$invalid-fmls-error$11024$1Z2PAY
     (case-lambda
       ((g$stx$8133$1Z2PAY g$fmls$8134$1Z2PAY)
        ((case-lambda
           ((g$t$8135$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8136$1Z2PAY)
                (if g$ls/false$8136$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$id*$8137$1Z2PAY g$last$8138$1Z2PAY)
                       ((letrec ((g$f$8139$1Z2PAY
                                   (case-lambda
                                     ((g$id*$8140$1Z2PAY)
                                      (if (null? g$id*$8140$1Z2PAY)
                                        (values)
                                        (if (not (g$id?$7290$1Z2PAY
                                                   (car g$id*$8140$1Z2PAY)))
                                          (g$syntax-violation$7679$1Z2PAY
                                            '#f
                                            '"not an identifier"
                                            g$stx$8133$1Z2PAY
                                            (car g$id*$8140$1Z2PAY))
                                          (begin
                                            (g$f$8139$1Z2PAY
                                              (cdr g$id*$8140$1Z2PAY))
                                            (if (g$bound-id-member?$7297$1Z2PAY
                                                  (car g$id*$8140$1Z2PAY)
                                                  (cdr g$id*$8140$1Z2PAY))
                                              (g$syntax-violation$7679$1Z2PAY
                                                '#f
                                                '"duplicate binding"
                                                g$stx$8133$1Z2PAY
                                                (car g$id*$8140$1Z2PAY))
                                              (void)))))))))
                          g$f$8139$1Z2PAY)
                        (if (g$id?$7290$1Z2PAY g$last$8138$1Z2PAY)
                          (cons g$last$8138$1Z2PAY g$id*$8137$1Z2PAY)
                          (if (g$syntax-null?$7285$1Z2PAY g$last$8138$1Z2PAY)
                            g$id*$8137$1Z2PAY
                            (g$syntax-violation$7679$1Z2PAY
                              '#f
                              '"not an identifier"
                              g$stx$8133$1Z2PAY
                              g$last$8138$1Z2PAY))))))
                    g$ls/false$8136$1Z2PAY)
                  ((case-lambda
                     ((g$t$8141$1Z2PAY)
                      ((case-lambda
                         ((g$ls/false$8142$1Z2PAY)
                          (if g$ls/false$8142$1Z2PAY
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7679$1Z2PAY
                                   '#f
                                   '"malformed binding form"
                                   g$stx$8133$1Z2PAY
                                   g$fmls$8134$1Z2PAY)))
                              g$ls/false$8142$1Z2PAY)
                            (g$syntax-violation$7679$1Z2PAY
                              '#f
                              '"invalid syntax"
                              g$t$8141$1Z2PAY))))
                       (g$syntax-dispatch$7568$1Z2PAY g$t$8141$1Z2PAY '_))))
                   g$t$8135$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$8135$1Z2PAY
               '#(each+ any () any)))))
         g$fmls$8134$1Z2PAY))))
   (g$let-macro$7534$1Z2PAY
     g$let-macro$11025$1Z2PAY
     (case-lambda
       ((g$stx$8143$1Z2PAY)
        ((case-lambda
           ((g$t$8144$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8145$1Z2PAY)
                (if g$ls/false$8145$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$lhs*$8146$1Z2PAY
                         g$rhs*$8147$1Z2PAY
                         g$b$8148$1Z2PAY
                         g$b*$8149$1Z2PAY)
                       (if (g$valid-bound-ids?$7295$1Z2PAY g$lhs*$8146$1Z2PAY)
                         (g$bless$7531$1Z2PAY
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$8146$1Z2PAY
                                 (cons g$b$8148$1Z2PAY g$b*$8149$1Z2PAY)))
                             g$rhs*$8147$1Z2PAY))
                         (g$invalid-fmls-error$7533$1Z2PAY
                           g$stx$8143$1Z2PAY
                           g$lhs*$8146$1Z2PAY))))
                    g$ls/false$8145$1Z2PAY)
                  ((case-lambda
                     ((g$t$8150$1Z2PAY)
                      ((case-lambda
                         ((g$ls/false$8151$1Z2PAY)
                          (if (if g$ls/false$8151$1Z2PAY
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$8152$1Z2PAY
                                         g$lhs*$8153$1Z2PAY
                                         g$rhs*$8154$1Z2PAY
                                         g$b$8155$1Z2PAY
                                         g$b*$8156$1Z2PAY)
                                       (g$id?$7290$1Z2PAY g$f$8152$1Z2PAY)))
                                    g$ls/false$8151$1Z2PAY))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$8157$1Z2PAY
                                   g$lhs*$8158$1Z2PAY
                                   g$rhs*$8159$1Z2PAY
                                   g$b$8160$1Z2PAY
                                   g$b*$8161$1Z2PAY)
                                 (if (g$valid-bound-ids?$7295$1Z2PAY
                                       g$lhs*$8158$1Z2PAY)
                                   (g$bless$7531$1Z2PAY
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$8157$1Z2PAY
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$8158$1Z2PAY
                                                 (cons
                                                   g$b$8160$1Z2PAY
                                                   g$b*$8161$1Z2PAY)))))
                                         g$f$8157$1Z2PAY)
                                       g$rhs*$8159$1Z2PAY))
                                   (g$invalid-fmls-error$7533$1Z2PAY
                                     g$stx$8143$1Z2PAY
                                     g$lhs*$8158$1Z2PAY))))
                              g$ls/false$8151$1Z2PAY)
                            (g$syntax-violation$7679$1Z2PAY
                              '#f
                              '"invalid syntax"
                              g$t$8150$1Z2PAY))))
                       (g$syntax-dispatch$7568$1Z2PAY
                         g$t$8150$1Z2PAY
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$8144$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$8144$1Z2PAY
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8143$1Z2PAY))))
   (g$let-values-macro$7535$1Z2PAY
     g$let-values-macro$11026$1Z2PAY
     (case-lambda
       ((g$stx$8162$1Z2PAY)
        (letrec* ((g$rename$8163$1Z2PAY
                    (case-lambda
                      ((g$x$8214$1Z2PAY g$old*$8215$1Z2PAY g$new*$8216$1Z2PAY)
                       (begin
                         (if (not (g$id?$7290$1Z2PAY g$x$8214$1Z2PAY))
                           (g$syntax-violation$7679$1Z2PAY
                             '#f
                             '"not an indentifier"
                             g$stx$8162$1Z2PAY
                             g$x$8214$1Z2PAY)
                           (void))
                         (if (g$bound-id-member?$7297$1Z2PAY
                               g$x$8214$1Z2PAY
                               g$old*$8215$1Z2PAY)
                           (g$syntax-violation$7679$1Z2PAY
                             '#f
                             '"duplicate binding"
                             g$stx$8162$1Z2PAY
                             g$x$8214$1Z2PAY)
                           (void))
                         ((case-lambda
                            ((g$y$8217$1Z2PAY)
                             (values
                               g$y$8217$1Z2PAY
                               (cons g$x$8214$1Z2PAY g$old*$8215$1Z2PAY)
                               (cons g$y$8217$1Z2PAY g$new*$8216$1Z2PAY))))
                          (gensym
                            (g$syntax->datum$7682$1Z2PAY g$x$8214$1Z2PAY)))))))
                  (g$rename*$8164$1Z2PAY
                    (case-lambda
                      ((g$x*$8205$1Z2PAY g$old*$8206$1Z2PAY g$new*$8207$1Z2PAY)
                       (if (null? g$x*$8205$1Z2PAY)
                         (values '() g$old*$8206$1Z2PAY g$new*$8207$1Z2PAY)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$8163$1Z2PAY
                                (car g$x*$8205$1Z2PAY)
                                g$old*$8206$1Z2PAY
                                g$new*$8207$1Z2PAY)))
                           (case-lambda
                             ((g$x$8208$1Z2PAY
                                g$old*$8209$1Z2PAY
                                g$new*$8210$1Z2PAY)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$8164$1Z2PAY
                                     (cdr g$x*$8205$1Z2PAY)
                                     g$old*$8209$1Z2PAY
                                     g$new*$8210$1Z2PAY)))
                                (case-lambda
                                  ((g$x*$8211$1Z2PAY
                                     g$old*$8212$1Z2PAY
                                     g$new*$8213$1Z2PAY)
                                   (values
                                     (cons g$x$8208$1Z2PAY g$x*$8211$1Z2PAY)
                                     g$old*$8212$1Z2PAY
                                     g$new*$8213$1Z2PAY))))))))))))
          ((case-lambda
             ((g$t$8165$1Z2PAY)
              ((case-lambda
                 ((g$ls/false$8166$1Z2PAY)
                  (if g$ls/false$8166$1Z2PAY
                    (apply
                      (case-lambda
                        ((g$b$8167$1Z2PAY g$b*$8168$1Z2PAY)
                         (g$cons*$5016$1Z2PAY
                           (g$bless$7531$1Z2PAY 'let)
                           '()
                           g$b$8167$1Z2PAY
                           g$b*$8168$1Z2PAY)))
                      g$ls/false$8166$1Z2PAY)
                    ((case-lambda
                       ((g$t$8169$1Z2PAY)
                        ((case-lambda
                           ((g$ls/false$8170$1Z2PAY)
                            (if g$ls/false$8170$1Z2PAY
                              (apply
                                (case-lambda
                                  ((g$lhs*$8171$1Z2PAY
                                     g$rhs*$8172$1Z2PAY
                                     g$b$8173$1Z2PAY
                                     g$b*$8174$1Z2PAY)
                                   (g$bless$7531$1Z2PAY
                                     ((letrec ((g$f$8175$1Z2PAY
                                                 (case-lambda
                                                   ((g$lhs*$8176$1Z2PAY
                                                      g$rhs*$8177$1Z2PAY
                                                      g$old*$8178$1Z2PAY
                                                      g$new*$8179$1Z2PAY)
                                                    (if (null?
                                                          g$lhs*$8176$1Z2PAY)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (map list
                                                               g$old*$8178$1Z2PAY
                                                               g$new*$8179$1Z2PAY)
                                                          (cons
                                                            g$b$8173$1Z2PAY
                                                            g$b*$8174$1Z2PAY)))
                                                      ((case-lambda
                                                         ((g$t$8180$1Z2PAY)
                                                          ((case-lambda
                                                             ((g$ls/false$8181$1Z2PAY)
                                                              (if g$ls/false$8181$1Z2PAY
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8182$1Z2PAY)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$8164$1Z2PAY
                                                                            g$x*$8182$1Z2PAY
                                                                            g$old*$8178$1Z2PAY
                                                                            g$new*$8179$1Z2PAY)))
                                                                       (case-lambda
                                                                         ((g$y*$8186$1Z2PAY
                                                                            g$old*$8187$1Z2PAY
                                                                            g$new*$8188$1Z2PAY)
                                                                          ((case-lambda
                                                                             ((g$new*$8189$1Z2PAY
                                                                                g$old*$8190$1Z2PAY
                                                                                g$y*$8191$1Z2PAY)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$8177$1Z2PAY))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$8191$1Z2PAY
                                                                                  (g$f$8175$1Z2PAY
                                                                                    (cdr g$lhs*$8176$1Z2PAY)
                                                                                    (cdr g$rhs*$8177$1Z2PAY)
                                                                                    g$old*$8190$1Z2PAY
                                                                                    g$new*$8189$1Z2PAY)))))
                                                                           g$new*$8188$1Z2PAY
                                                                           g$old*$8187$1Z2PAY
                                                                           g$y*$8186$1Z2PAY))))))
                                                                  g$ls/false$8181$1Z2PAY)
                                                                ((case-lambda
                                                                   ((g$t$8192$1Z2PAY)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8193$1Z2PAY)
                                                                        (if g$ls/false$8193$1Z2PAY
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8194$1Z2PAY
                                                                                 g$x$8195$1Z2PAY)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$8163$1Z2PAY
                                                                                      g$x$8195$1Z2PAY
                                                                                      g$old*$8178$1Z2PAY
                                                                                      g$new*$8179$1Z2PAY)))
                                                                                 (case-lambda
                                                                                   ((g$y$8196$1Z2PAY
                                                                                      g$old*$8197$1Z2PAY
                                                                                      g$new*$8198$1Z2PAY)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$8164$1Z2PAY
                                                                                           g$x*$8194$1Z2PAY
                                                                                           g$old*$8197$1Z2PAY
                                                                                           g$new*$8198$1Z2PAY)))
                                                                                      (case-lambda
                                                                                        ((g$y*$8199$1Z2PAY
                                                                                           g$old*$8200$1Z2PAY
                                                                                           g$new*$8201$1Z2PAY)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$8177$1Z2PAY))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$8199$1Z2PAY
                                                                                               g$y$8196$1Z2PAY)
                                                                                             (g$f$8175$1Z2PAY
                                                                                               (cdr g$lhs*$8176$1Z2PAY)
                                                                                               (cdr g$rhs*$8177$1Z2PAY)
                                                                                               g$old*$8200$1Z2PAY
                                                                                               g$new*$8201$1Z2PAY)))))))))))
                                                                            g$ls/false$8193$1Z2PAY)
                                                                          ((case-lambda
                                                                             ((g$t$8202$1Z2PAY)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8203$1Z2PAY)
                                                                                  (if g$ls/false$8203$1Z2PAY
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8204$1Z2PAY)
                                                                                         (g$syntax-violation$7679$1Z2PAY
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8162$1Z2PAY
                                                                                           g$others$8204$1Z2PAY)))
                                                                                      g$ls/false$8203$1Z2PAY)
                                                                                    (g$syntax-violation$7679$1Z2PAY
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8202$1Z2PAY))))
                                                                               (g$syntax-dispatch$7568$1Z2PAY
                                                                                 g$t$8202$1Z2PAY
                                                                                 'any))))
                                                                           g$t$8192$1Z2PAY))))
                                                                     (g$syntax-dispatch$7568$1Z2PAY
                                                                       g$t$8192$1Z2PAY
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8180$1Z2PAY))))
                                                           (g$syntax-dispatch$7568$1Z2PAY
                                                             g$t$8180$1Z2PAY
                                                             'each-any))))
                                                       (car g$lhs*$8176$1Z2PAY)))))))
                                        g$f$8175$1Z2PAY)
                                      g$lhs*$8171$1Z2PAY
                                      g$rhs*$8172$1Z2PAY
                                      '()
                                      '()))))
                                g$ls/false$8170$1Z2PAY)
                              (g$syntax-violation$7679$1Z2PAY
                                '#f
                                '"invalid syntax"
                                g$t$8169$1Z2PAY))))
                         (g$syntax-dispatch$7568$1Z2PAY
                           g$t$8169$1Z2PAY
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8165$1Z2PAY))))
               (g$syntax-dispatch$7568$1Z2PAY
                 g$t$8165$1Z2PAY
                 '(_ () any . each-any)))))
           g$stx$8162$1Z2PAY)))))
   (g$let*-values-macro$7536$1Z2PAY
     g$let*-values-macro$11027$1Z2PAY
     (case-lambda
       ((g$stx$8218$1Z2PAY)
        (letrec* ((g$check$8219$1Z2PAY
                    (case-lambda
                      ((g$x*$8243$1Z2PAY)
                       (if (not (null? g$x*$8243$1Z2PAY))
                         ((case-lambda
                            ((g$x$8244$1Z2PAY)
                             (begin
                               (if (not (g$id?$7290$1Z2PAY g$x$8244$1Z2PAY))
                                 (g$syntax-violation$7679$1Z2PAY
                                   '#f
                                   '"not an identifier"
                                   g$stx$8218$1Z2PAY
                                   g$x$8244$1Z2PAY)
                                 (void))
                               (g$check$8219$1Z2PAY (cdr g$x*$8243$1Z2PAY))
                               (if (g$bound-id-member?$7297$1Z2PAY
                                     g$x$8244$1Z2PAY
                                     (cdr g$x*$8243$1Z2PAY))
                                 (g$syntax-violation$7679$1Z2PAY
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$8218$1Z2PAY
                                   g$x$8244$1Z2PAY)
                                 (void)))))
                          (car g$x*$8243$1Z2PAY))
                         (void))))))
          ((case-lambda
             ((g$t$8220$1Z2PAY)
              ((case-lambda
                 ((g$ls/false$8221$1Z2PAY)
                  (if g$ls/false$8221$1Z2PAY
                    (apply
                      (case-lambda
                        ((g$b$8222$1Z2PAY g$b*$8223$1Z2PAY)
                         (g$cons*$5016$1Z2PAY
                           (g$bless$7531$1Z2PAY 'let)
                           '()
                           g$b$8222$1Z2PAY
                           g$b*$8223$1Z2PAY)))
                      g$ls/false$8221$1Z2PAY)
                    ((case-lambda
                       ((g$t$8224$1Z2PAY)
                        ((case-lambda
                           ((g$ls/false$8225$1Z2PAY)
                            (if g$ls/false$8225$1Z2PAY
                              (apply
                                (case-lambda
                                  ((g$lhs*$8226$1Z2PAY
                                     g$rhs*$8227$1Z2PAY
                                     g$b$8228$1Z2PAY
                                     g$b*$8229$1Z2PAY)
                                   (g$bless$7531$1Z2PAY
                                     ((letrec ((g$f$8230$1Z2PAY
                                                 (case-lambda
                                                   ((g$lhs*$8231$1Z2PAY
                                                      g$rhs*$8232$1Z2PAY)
                                                    (if (null?
                                                          g$lhs*$8231$1Z2PAY)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$8228$1Z2PAY
                                                          g$b*$8229$1Z2PAY))
                                                      ((case-lambda
                                                         ((g$t$8233$1Z2PAY)
                                                          ((case-lambda
                                                             ((g$ls/false$8234$1Z2PAY)
                                                              (if g$ls/false$8234$1Z2PAY
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8235$1Z2PAY)
                                                                     (begin
                                                                       (g$check$8219$1Z2PAY
                                                                         g$x*$8235$1Z2PAY)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$8232$1Z2PAY))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$8235$1Z2PAY
                                                                           (g$f$8230$1Z2PAY
                                                                             (cdr g$lhs*$8231$1Z2PAY)
                                                                             (cdr g$rhs*$8232$1Z2PAY)))))))
                                                                  g$ls/false$8234$1Z2PAY)
                                                                ((case-lambda
                                                                   ((g$t$8236$1Z2PAY)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8237$1Z2PAY)
                                                                        (if g$ls/false$8237$1Z2PAY
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8238$1Z2PAY
                                                                                 g$x$8239$1Z2PAY)
                                                                               (begin
                                                                                 (g$check$8219$1Z2PAY
                                                                                   (cons
                                                                                     g$x$8239$1Z2PAY
                                                                                     g$x*$8238$1Z2PAY))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$8232$1Z2PAY))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$8238$1Z2PAY
                                                                                       g$x$8239$1Z2PAY)
                                                                                     (g$f$8230$1Z2PAY
                                                                                       (cdr g$lhs*$8231$1Z2PAY)
                                                                                       (cdr g$rhs*$8232$1Z2PAY)))))))
                                                                            g$ls/false$8237$1Z2PAY)
                                                                          ((case-lambda
                                                                             ((g$t$8240$1Z2PAY)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8241$1Z2PAY)
                                                                                  (if g$ls/false$8241$1Z2PAY
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8242$1Z2PAY)
                                                                                         (g$syntax-violation$7679$1Z2PAY
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8218$1Z2PAY
                                                                                           g$others$8242$1Z2PAY)))
                                                                                      g$ls/false$8241$1Z2PAY)
                                                                                    (g$syntax-violation$7679$1Z2PAY
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8240$1Z2PAY))))
                                                                               (g$syntax-dispatch$7568$1Z2PAY
                                                                                 g$t$8240$1Z2PAY
                                                                                 'any))))
                                                                           g$t$8236$1Z2PAY))))
                                                                     (g$syntax-dispatch$7568$1Z2PAY
                                                                       g$t$8236$1Z2PAY
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8233$1Z2PAY))))
                                                           (g$syntax-dispatch$7568$1Z2PAY
                                                             g$t$8233$1Z2PAY
                                                             'each-any))))
                                                       (car g$lhs*$8231$1Z2PAY)))))))
                                        g$f$8230$1Z2PAY)
                                      g$lhs*$8226$1Z2PAY
                                      g$rhs*$8227$1Z2PAY))))
                                g$ls/false$8225$1Z2PAY)
                              (g$syntax-violation$7679$1Z2PAY
                                '#f
                                '"invalid syntax"
                                g$t$8224$1Z2PAY))))
                         (g$syntax-dispatch$7568$1Z2PAY
                           g$t$8224$1Z2PAY
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8220$1Z2PAY))))
               (g$syntax-dispatch$7568$1Z2PAY
                 g$t$8220$1Z2PAY
                 '(_ () any . each-any)))))
           g$stx$8218$1Z2PAY)))))
   (g$trace-lambda-macro$7537$1Z2PAY
     g$trace-lambda-macro$11028$1Z2PAY
     (case-lambda
       ((g$stx$8245$1Z2PAY)
        ((case-lambda
           ((g$t$8246$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8247$1Z2PAY)
                (if g$ls/false$8247$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$who$8248$1Z2PAY
                         g$fmls$8249$1Z2PAY
                         g$b$8250$1Z2PAY
                         g$b*$8251$1Z2PAY)
                       (if (g$valid-bound-ids?$7295$1Z2PAY g$fmls$8249$1Z2PAY)
                         (g$bless$7531$1Z2PAY
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$8248$1Z2PAY)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$8249$1Z2PAY
                                 (cons g$b$8250$1Z2PAY g$b*$8251$1Z2PAY)))))
                         (g$invalid-fmls-error$7533$1Z2PAY
                           g$stx$8245$1Z2PAY
                           g$fmls$8249$1Z2PAY))))
                    g$ls/false$8247$1Z2PAY)
                  ((case-lambda
                     ((g$t$8252$1Z2PAY)
                      ((case-lambda
                         ((g$ls/false$8253$1Z2PAY)
                          (if g$ls/false$8253$1Z2PAY
                            (apply
                              (case-lambda
                                ((g$who$8254$1Z2PAY
                                   g$fmls$8255$1Z2PAY
                                   g$last$8256$1Z2PAY
                                   g$b$8257$1Z2PAY
                                   g$b*$8258$1Z2PAY)
                                 (if (g$valid-bound-ids?$7295$1Z2PAY
                                       (cons
                                         g$last$8256$1Z2PAY
                                         g$fmls$8255$1Z2PAY))
                                   (g$bless$7531$1Z2PAY
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$8254$1Z2PAY)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$8255$1Z2PAY
                                             g$last$8256$1Z2PAY)
                                           (cons
                                             g$b$8257$1Z2PAY
                                             g$b*$8258$1Z2PAY)))))
                                   (g$invalid-fmls-error$7533$1Z2PAY
                                     g$stx$8245$1Z2PAY
                                     (append
                                       g$fmls$8255$1Z2PAY
                                       g$last$8256$1Z2PAY)))))
                              g$ls/false$8253$1Z2PAY)
                            (g$syntax-violation$7679$1Z2PAY
                              '#f
                              '"invalid syntax"
                              g$t$8252$1Z2PAY))))
                       (g$syntax-dispatch$7568$1Z2PAY
                         g$t$8252$1Z2PAY
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$8246$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$8246$1Z2PAY
               '(_ any each-any any . each-any)))))
         g$stx$8245$1Z2PAY))))
   (g$trace-define-macro$7538$1Z2PAY
     g$trace-define-macro$11029$1Z2PAY
     (case-lambda
       ((g$stx$8259$1Z2PAY)
        ((case-lambda
           ((g$t$8260$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8261$1Z2PAY)
                (if g$ls/false$8261$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$who$8262$1Z2PAY
                         g$fmls$8263$1Z2PAY
                         g$b$8264$1Z2PAY
                         g$b*$8265$1Z2PAY)
                       (if (g$valid-bound-ids?$7295$1Z2PAY g$fmls$8263$1Z2PAY)
                         (g$bless$7531$1Z2PAY
                           (list
                             'define
                             g$who$8262$1Z2PAY
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$8262$1Z2PAY)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$8263$1Z2PAY
                                   (cons g$b$8264$1Z2PAY g$b*$8265$1Z2PAY))))))
                         (g$invalid-fmls-error$7533$1Z2PAY
                           g$stx$8259$1Z2PAY
                           g$fmls$8263$1Z2PAY))))
                    g$ls/false$8261$1Z2PAY)
                  ((case-lambda
                     ((g$t$8266$1Z2PAY)
                      ((case-lambda
                         ((g$ls/false$8267$1Z2PAY)
                          (if g$ls/false$8267$1Z2PAY
                            (apply
                              (case-lambda
                                ((g$who$8268$1Z2PAY
                                   g$fmls$8269$1Z2PAY
                                   g$last$8270$1Z2PAY
                                   g$b$8271$1Z2PAY
                                   g$b*$8272$1Z2PAY)
                                 (if (g$valid-bound-ids?$7295$1Z2PAY
                                       (cons
                                         g$last$8270$1Z2PAY
                                         g$fmls$8269$1Z2PAY))
                                   (g$bless$7531$1Z2PAY
                                     (list
                                       'define
                                       g$who$8268$1Z2PAY
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$8268$1Z2PAY)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$8269$1Z2PAY
                                               g$last$8270$1Z2PAY)
                                             (cons
                                               g$b$8271$1Z2PAY
                                               g$b*$8272$1Z2PAY))))))
                                   (g$invalid-fmls-error$7533$1Z2PAY
                                     g$stx$8259$1Z2PAY
                                     (append
                                       g$fmls$8269$1Z2PAY
                                       g$last$8270$1Z2PAY)))))
                              g$ls/false$8267$1Z2PAY)
                            ((case-lambda
                               ((g$t$8273$1Z2PAY)
                                ((case-lambda
                                   ((g$ls/false$8274$1Z2PAY)
                                    (if g$ls/false$8274$1Z2PAY
                                      (apply
                                        (case-lambda
                                          ((g$who$8275$1Z2PAY
                                             g$expr$8276$1Z2PAY)
                                           (if (g$id?$7290$1Z2PAY
                                                 g$who$8275$1Z2PAY)
                                             (g$bless$7531$1Z2PAY
                                               (list
                                                 'define
                                                 g$who$8275$1Z2PAY
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$8276$1Z2PAY))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$8275$1Z2PAY)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$7679$1Z2PAY
                                               '#f
                                               '"invalid name"
                                               g$stx$8259$1Z2PAY))))
                                        g$ls/false$8274$1Z2PAY)
                                      (g$syntax-violation$7679$1Z2PAY
                                        '#f
                                        '"invalid syntax"
                                        g$t$8273$1Z2PAY))))
                                 (g$syntax-dispatch$7568$1Z2PAY
                                   g$t$8273$1Z2PAY
                                   '(_ any any)))))
                             g$t$8266$1Z2PAY))))
                       (g$syntax-dispatch$7568$1Z2PAY
                         g$t$8266$1Z2PAY
                         '(_ (any . #(each+ any () any)) any . each-any)))))
                   g$t$8260$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$8260$1Z2PAY
               '(_ (any . each-any) any . each-any)))))
         g$stx$8259$1Z2PAY))))
   (g$trace-define-syntax-macro$7539$1Z2PAY
     g$trace-define-syntax-macro$11030$1Z2PAY
     (case-lambda
       ((g$stx$8277$1Z2PAY)
        ((case-lambda
           ((g$t$8278$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8279$1Z2PAY)
                (if g$ls/false$8279$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$who$8280$1Z2PAY g$expr$8281$1Z2PAY)
                       (if (g$id?$7290$1Z2PAY g$who$8280$1Z2PAY)
                         (g$bless$7531$1Z2PAY
                           (list
                             'define-syntax
                             g$who$8280$1Z2PAY
                             (list
                               'make-traced-macro
                               (list 'quote g$who$8280$1Z2PAY)
                               g$expr$8281$1Z2PAY)))
                         (g$syntax-violation$7679$1Z2PAY
                           '#f
                           '"invalid name"
                           g$stx$8277$1Z2PAY))))
                    g$ls/false$8279$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8278$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$8278$1Z2PAY '(_ any any)))))
         g$stx$8277$1Z2PAY))))
   (g$trace-let/rec-syntax$7540$1Z2PAY
     g$trace-let/rec-syntax$11031$1Z2PAY
     (case-lambda
       ((g$who$8282$1Z2PAY)
        (case-lambda
          ((g$stx$8283$1Z2PAY)
           ((case-lambda
              ((g$t$8284$1Z2PAY)
               ((case-lambda
                  ((g$ls/false$8285$1Z2PAY)
                   (if g$ls/false$8285$1Z2PAY
                     (apply
                       (case-lambda
                         ((g$lhs*$8286$1Z2PAY
                            g$rhs*$8287$1Z2PAY
                            g$b$8288$1Z2PAY
                            g$b*$8289$1Z2PAY)
                          (if (g$valid-bound-ids?$7295$1Z2PAY
                                g$lhs*$8286$1Z2PAY)
                            ((case-lambda
                               ((g$rhs*$8290$1Z2PAY)
                                (g$bless$7531$1Z2PAY
                                  (cons
                                    g$who$8282$1Z2PAY
                                    (cons
                                      (map list
                                           g$lhs*$8286$1Z2PAY
                                           g$rhs*$8290$1Z2PAY)
                                      (cons
                                        g$b$8288$1Z2PAY
                                        g$b*$8289$1Z2PAY))))))
                             (map (case-lambda
                                    ((g$lhs$8291$1Z2PAY g$rhs$8292$1Z2PAY)
                                     (list
                                       'make-traced-macro
                                       (list 'quote g$lhs$8291$1Z2PAY)
                                       g$rhs$8292$1Z2PAY)))
                                  g$lhs*$8286$1Z2PAY
                                  g$rhs*$8287$1Z2PAY))
                            (g$invalid-fmls-error$7533$1Z2PAY
                              g$stx$8283$1Z2PAY
                              g$lhs*$8286$1Z2PAY))))
                       g$ls/false$8285$1Z2PAY)
                     (g$syntax-violation$7679$1Z2PAY
                       '#f
                       '"invalid syntax"
                       g$t$8284$1Z2PAY))))
                (g$syntax-dispatch$7568$1Z2PAY
                  g$t$8284$1Z2PAY
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$8283$1Z2PAY))))))
   (g$trace-let-syntax-macro$7541$1Z2PAY
     g$trace-let-syntax-macro$11032$1Z2PAY
     (g$trace-let/rec-syntax$7540$1Z2PAY 'let-syntax))
   (g$trace-letrec-syntax-macro$7542$1Z2PAY
     g$trace-letrec-syntax-macro$11033$1Z2PAY
     (g$trace-let/rec-syntax$7540$1Z2PAY 'letrec-syntax))
   (g$guard-macro$7543$1Z2PAY
     g$guard-macro$11034$1Z2PAY
     (case-lambda
       ((g$x$8293$1Z2PAY)
        (letrec* ((g$gen-clauses$8294$1Z2PAY
                    (case-lambda
                      ((g$con$8306$1Z2PAY
                         g$outerk$8307$1Z2PAY
                         g$clause*$8308$1Z2PAY)
                       (letrec* ((g$f$8309$1Z2PAY
                                   (case-lambda
                                     ((g$x$8337$1Z2PAY g$k$8338$1Z2PAY)
                                      ((case-lambda
                                         ((g$t$8339$1Z2PAY)
                                          ((case-lambda
                                             ((g$ls/false$8340$1Z2PAY)
                                              (if g$ls/false$8340$1Z2PAY
                                                (apply
                                                  (case-lambda
                                                    ((g$e$8341$1Z2PAY
                                                       g$p$8342$1Z2PAY)
                                                     ((case-lambda
                                                        ((g$t$8343$1Z2PAY)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$8343$1Z2PAY
                                                               g$e$8341$1Z2PAY))
                                                           (list
                                                             'if
                                                             g$t$8343$1Z2PAY
                                                             (list
                                                               g$p$8342$1Z2PAY
                                                               g$t$8343$1Z2PAY)
                                                             g$k$8338$1Z2PAY))))
                                                      (gensym))))
                                                  g$ls/false$8340$1Z2PAY)
                                                ((case-lambda
                                                   ((g$t$8344$1Z2PAY)
                                                    ((case-lambda
                                                       ((g$ls/false$8345$1Z2PAY)
                                                        (if g$ls/false$8345$1Z2PAY
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8346$1Z2PAY)
                                                               ((case-lambda
                                                                  ((g$t$8347$1Z2PAY)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$8347$1Z2PAY
                                                                         g$e$8346$1Z2PAY))
                                                                     (list
                                                                       'if
                                                                       g$t$8347$1Z2PAY
                                                                       g$t$8347$1Z2PAY
                                                                       g$k$8338$1Z2PAY))))
                                                                (gensym))))
                                                            g$ls/false$8345$1Z2PAY)
                                                          ((case-lambda
                                                             ((g$t$8348$1Z2PAY)
                                                              ((case-lambda
                                                                 ((g$ls/false$8349$1Z2PAY)
                                                                  (if g$ls/false$8349$1Z2PAY
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$8350$1Z2PAY
                                                                           g$v$8351$1Z2PAY
                                                                           g$v*$8352$1Z2PAY)
                                                                         (list
                                                                           'if
                                                                           g$e$8350$1Z2PAY
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$8351$1Z2PAY
                                                                               g$v*$8352$1Z2PAY))
                                                                           g$k$8338$1Z2PAY)))
                                                                      g$ls/false$8349$1Z2PAY)
                                                                    ((case-lambda
                                                                       ((g$t$8353$1Z2PAY)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8354$1Z2PAY)
                                                                            (if g$ls/false$8354$1Z2PAY
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$7679$1Z2PAY
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$8337$1Z2PAY)))
                                                                                g$ls/false$8354$1Z2PAY)
                                                                              (g$syntax-violation$7679$1Z2PAY
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8353$1Z2PAY))))
                                                                         (g$syntax-dispatch$7568$1Z2PAY
                                                                           g$t$8353$1Z2PAY
                                                                           '_))))
                                                                     g$t$8348$1Z2PAY))))
                                                               (g$syntax-dispatch$7568$1Z2PAY
                                                                 g$t$8348$1Z2PAY
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$8344$1Z2PAY))))
                                                     (g$syntax-dispatch$7568$1Z2PAY
                                                       g$t$8344$1Z2PAY
                                                       '(any)))))
                                                 g$t$8339$1Z2PAY))))
                                           (g$syntax-dispatch$7568$1Z2PAY
                                             g$t$8339$1Z2PAY
                                             '(any #(scheme-id =>) any)))))
                                       g$x$8337$1Z2PAY))))
                                 (g$f*$8310$1Z2PAY
                                   (case-lambda
                                     ((g$x*$8317$1Z2PAY)
                                      ((case-lambda
                                         ((g$t$8318$1Z2PAY)
                                          ((case-lambda
                                             ((g$ls/false$8319$1Z2PAY)
                                              (if g$ls/false$8319$1Z2PAY
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$8306$1Z2PAY)
                                                       '#t)))
                                                  g$ls/false$8319$1Z2PAY)
                                                ((case-lambda
                                                   ((g$t$8320$1Z2PAY)
                                                    ((case-lambda
                                                       ((g$ls/false$8321$1Z2PAY)
                                                        (if g$ls/false$8321$1Z2PAY
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8322$1Z2PAY
                                                                 g$e*$8323$1Z2PAY)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$8322$1Z2PAY
                                                                     g$e*$8323$1Z2PAY))
                                                                 '#f)))
                                                            g$ls/false$8321$1Z2PAY)
                                                          ((case-lambda
                                                             ((g$t$8324$1Z2PAY)
                                                              ((case-lambda
                                                                 ((g$ls/false$8325$1Z2PAY)
                                                                  (if g$ls/false$8325$1Z2PAY
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$8326$1Z2PAY
                                                                           g$cls*$8327$1Z2PAY)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$8310$1Z2PAY
                                                                                g$cls*$8327$1Z2PAY)))
                                                                           (case-lambda
                                                                             ((g$e$8330$1Z2PAY
                                                                                g$g$8331$1Z2PAY)
                                                                              ((case-lambda
                                                                                 ((g$g$8332$1Z2PAY
                                                                                    g$e$8333$1Z2PAY)
                                                                                  (values
                                                                                    (g$f$8309$1Z2PAY
                                                                                      g$cls$8326$1Z2PAY
                                                                                      g$e$8333$1Z2PAY)
                                                                                    g$g$8332$1Z2PAY)))
                                                                               g$g$8331$1Z2PAY
                                                                               g$e$8330$1Z2PAY))))))
                                                                      g$ls/false$8325$1Z2PAY)
                                                                    ((case-lambda
                                                                       ((g$t$8334$1Z2PAY)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8335$1Z2PAY)
                                                                            (if g$ls/false$8335$1Z2PAY
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$8336$1Z2PAY)
                                                                                   (g$syntax-violation$7679$1Z2PAY
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$8336$1Z2PAY)))
                                                                                g$ls/false$8335$1Z2PAY)
                                                                              (g$syntax-violation$7679$1Z2PAY
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8334$1Z2PAY))))
                                                                         (g$syntax-dispatch$7568$1Z2PAY
                                                                           g$t$8334$1Z2PAY
                                                                           'any))))
                                                                     g$t$8324$1Z2PAY))))
                                                               (g$syntax-dispatch$7568$1Z2PAY
                                                                 g$t$8324$1Z2PAY
                                                                 '(any .
                                                                       any)))))
                                                           g$t$8320$1Z2PAY))))
                                                     (g$syntax-dispatch$7568$1Z2PAY
                                                       g$t$8320$1Z2PAY
                                                       '((#(scheme-id else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$8318$1Z2PAY))))
                                           (g$syntax-dispatch$7568$1Z2PAY
                                             g$t$8318$1Z2PAY
                                             '()))))
                                       g$x*$8317$1Z2PAY)))))
                         (call-with-values
                           (case-lambda
                             (() (g$f*$8310$1Z2PAY g$clause*$8308$1Z2PAY)))
                           (case-lambda
                             ((g$code$8313$1Z2PAY g$raisek$8314$1Z2PAY)
                              ((case-lambda
                                 ((g$raisek$8315$1Z2PAY g$code$8316$1Z2PAY)
                                  (if g$raisek$8315$1Z2PAY
                                    (list
                                      g$outerk$8307$1Z2PAY
                                      g$code$8316$1Z2PAY)
                                    g$code$8316$1Z2PAY)))
                               g$raisek$8314$1Z2PAY
                               g$code$8313$1Z2PAY)))))))))
          ((case-lambda
             ((g$t$8295$1Z2PAY)
              ((case-lambda
                 ((g$ls/false$8296$1Z2PAY)
                  (if (if g$ls/false$8296$1Z2PAY
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$8297$1Z2PAY
                                 g$clause*$8298$1Z2PAY
                                 g$b$8299$1Z2PAY
                                 g$b*$8300$1Z2PAY)
                               (g$id?$7290$1Z2PAY g$con$8297$1Z2PAY)))
                            g$ls/false$8296$1Z2PAY))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$8301$1Z2PAY
                           g$clause*$8302$1Z2PAY
                           g$b$8303$1Z2PAY
                           g$b*$8304$1Z2PAY)
                         ((case-lambda
                            ((g$outerk$8305$1Z2PAY)
                             (g$bless$7531$1Z2PAY
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$8305$1Z2PAY)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$8301$1Z2PAY)
                                           (g$gen-clauses$8294$1Z2PAY
                                             g$con$8301$1Z2PAY
                                             g$outerk$8305$1Z2PAY
                                             g$clause*$8302$1Z2PAY))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$8303$1Z2PAY
                                                 g$b*$8304$1Z2PAY))))))))))))
                          (gensym))))
                      g$ls/false$8296$1Z2PAY)
                    (g$syntax-violation$7679$1Z2PAY
                      '#f
                      '"invalid syntax"
                      g$t$8295$1Z2PAY))))
               (g$syntax-dispatch$7568$1Z2PAY
                 g$t$8295$1Z2PAY
                 '(_ (any . each-any) any . each-any)))))
           g$x$8293$1Z2PAY)))))
   (g$define-enumeration-macro$7544$1Z2PAY
     g$define-enumeration-macro$11035$1Z2PAY
     (case-lambda
       ((g$stx$8355$1Z2PAY)
        (letrec* ((g$set?$8356$1Z2PAY
                    (case-lambda
                      ((g$x$8369$1Z2PAY)
                       ((case-lambda
                          ((g$t$8370$1Z2PAY)
                           (if g$t$8370$1Z2PAY
                             g$t$8370$1Z2PAY
                             (begin
                               '#f
                               (if (not (g$memq$5008$1Z2PAY
                                          (car g$x$8369$1Z2PAY)
                                          (cdr g$x$8369$1Z2PAY)))
                                 (begin
                                   '#f
                                   (g$set?$8356$1Z2PAY (cdr g$x$8369$1Z2PAY)))
                                 '#f)))))
                        (null? g$x$8369$1Z2PAY)))))
                  (g$remove-dups$8357$1Z2PAY
                    (case-lambda
                      ((g$ls$8368$1Z2PAY)
                       (if (null? g$ls$8368$1Z2PAY)
                         '()
                         (cons
                           (car g$ls$8368$1Z2PAY)
                           (g$remove-dups$8357$1Z2PAY
                             (g$remq$5021$1Z2PAY
                               (car g$ls$8368$1Z2PAY)
                               (cdr g$ls$8368$1Z2PAY)))))))))
          ((case-lambda
             ((g$t$8358$1Z2PAY)
              ((case-lambda
                 ((g$ls/false$8359$1Z2PAY)
                  (if (if g$ls/false$8359$1Z2PAY
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$8360$1Z2PAY
                                 g$id*$8361$1Z2PAY
                                 g$maker$8362$1Z2PAY)
                               (if (g$id?$7290$1Z2PAY g$name$8360$1Z2PAY)
                                 (if (g$id?$7290$1Z2PAY g$maker$8362$1Z2PAY)
                                   (begin
                                     '#f
                                     (g$for-all$5014$1Z2PAY
                                       g$id?$7290$1Z2PAY
                                       g$id*$8361$1Z2PAY))
                                   '#f)
                                 '#f)))
                            g$ls/false$8359$1Z2PAY))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$8363$1Z2PAY
                           g$id*$8364$1Z2PAY
                           g$maker$8365$1Z2PAY)
                         ((case-lambda
                            ((g$name*$8366$1Z2PAY g$mk$8367$1Z2PAY)
                             (g$bless$7531$1Z2PAY
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$8367$1Z2PAY
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list 'quote g$name*$8366$1Z2PAY))))
                                 (list
                                   'define-syntax
                                   g$name$8363$1Z2PAY
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list 'quote g$name*$8366$1Z2PAY))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list 'quote g$name$8363$1Z2PAY)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$8365$1Z2PAY
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8365$1Z2PAY)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$8366$1Z2PAY))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8365$1Z2PAY)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$8367$1Z2PAY
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$8357$1Z2PAY
                            (g$syntax->datum$7682$1Z2PAY g$id*$8364$1Z2PAY))
                          (gensym))))
                      g$ls/false$8359$1Z2PAY)
                    (g$syntax-violation$7679$1Z2PAY
                      '#f
                      '"invalid syntax"
                      g$t$8358$1Z2PAY))))
               (g$syntax-dispatch$7568$1Z2PAY
                 g$t$8358$1Z2PAY
                 '(_ any each-any any)))))
           g$stx$8355$1Z2PAY)))))
   (g$time-macro$7545$1Z2PAY
     g$time-macro$11036$1Z2PAY
     (case-lambda
       ((g$stx$8371$1Z2PAY)
        ((case-lambda
           ((g$t$8372$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8373$1Z2PAY)
                (if g$ls/false$8373$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$expr$8374$1Z2PAY)
                       ((case-lambda
                          ((g$str$8375$1Z2PAY)
                           (g$bless$7531$1Z2PAY
                             (list
                               'time-it
                               g$str$8375$1Z2PAY
                               (list 'lambda '() g$expr$8374$1Z2PAY)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$6251$1Z2PAY)))
                          (case-lambda
                            ((g$p$8378$1Z2PAY g$e$8379$1Z2PAY)
                             ((case-lambda
                                ((g$e$8380$1Z2PAY g$p$8381$1Z2PAY)
                                 (begin
                                   (write
                                     (g$syntax->datum$7682$1Z2PAY
                                       g$expr$8374$1Z2PAY)
                                     g$p$8381$1Z2PAY)
                                   (g$e$8380$1Z2PAY))))
                              g$e$8379$1Z2PAY
                              g$p$8378$1Z2PAY)))))))
                    g$ls/false$8373$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8372$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$8372$1Z2PAY '(_ any)))))
         g$stx$8371$1Z2PAY))))
   (g$delay-macro$7546$1Z2PAY
     g$delay-macro$11037$1Z2PAY
     (case-lambda
       ((g$stx$8382$1Z2PAY)
        ((case-lambda
           ((g$t$8383$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8384$1Z2PAY)
                (if g$ls/false$8384$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$expr$8385$1Z2PAY)
                       (g$bless$7531$1Z2PAY
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$8385$1Z2PAY)))))
                    g$ls/false$8384$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8383$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$8383$1Z2PAY '(_ any)))))
         g$stx$8382$1Z2PAY))))
   (g$assert-macro$7547$1Z2PAY
     g$assert-macro$11038$1Z2PAY
     (case-lambda
       ((g$stx$8386$1Z2PAY)
        ((case-lambda
           ((g$t$8387$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8388$1Z2PAY)
                (if g$ls/false$8388$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$expr$8389$1Z2PAY)
                       ((case-lambda
                          ((g$pos$8390$1Z2PAY)
                           (g$bless$7531$1Z2PAY
                             (list
                               'unless
                               g$expr$8389$1Z2PAY
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$8389$1Z2PAY)
                                 (list 'quote g$pos$8390$1Z2PAY))))))
                        ((case-lambda
                           ((g$t$8391$1Z2PAY)
                            (if g$t$8391$1Z2PAY
                              g$t$8391$1Z2PAY
                              (begin
                                '#f
                                (g$expression-position$7674$1Z2PAY
                                  g$expr$8389$1Z2PAY)))))
                         (g$expression-position$7674$1Z2PAY
                           g$stx$8386$1Z2PAY)))))
                    g$ls/false$8388$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8387$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$8387$1Z2PAY '(_ any)))))
         g$stx$8386$1Z2PAY))))
   (g$endianness-macro$7548$1Z2PAY
     g$endianness-macro$11039$1Z2PAY
     (case-lambda
       ((g$stx$8392$1Z2PAY)
        ((case-lambda
           ((g$t$8393$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8394$1Z2PAY)
                (if g$ls/false$8394$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$e$8395$1Z2PAY)
                       ((case-lambda
                          ((g$t$8396$1Z2PAY)
                           (if (g$memv$5009$1Z2PAY g$t$8396$1Z2PAY '(little))
                             (g$bless$7531$1Z2PAY ''little)
                             (if (g$memv$5009$1Z2PAY g$t$8396$1Z2PAY '(big))
                               (g$bless$7531$1Z2PAY ''big)
                               (g$syntax-violation$7679$1Z2PAY
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$8392$1Z2PAY)))))
                        (g$syntax->datum$7682$1Z2PAY g$e$8395$1Z2PAY))))
                    g$ls/false$8394$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8393$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$8393$1Z2PAY '(_ any)))))
         g$stx$8392$1Z2PAY))))
   (g$identifier-syntax-macro$7549$1Z2PAY
     g$identifier-syntax-macro$11040$1Z2PAY
     (case-lambda
       ((g$stx$8397$1Z2PAY)
        ((case-lambda
           ((g$t$8398$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8399$1Z2PAY)
                (if g$ls/false$8399$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$expr$8400$1Z2PAY)
                       (g$bless$7531$1Z2PAY
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$8400$1Z2PAY))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$8400$1Z2PAY)
                                   '(#'(e* ...))))))))))
                    g$ls/false$8399$1Z2PAY)
                  ((case-lambda
                     ((g$t$8401$1Z2PAY)
                      ((case-lambda
                         ((g$ls/false$8402$1Z2PAY)
                          (if (if g$ls/false$8402$1Z2PAY
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$8403$1Z2PAY
                                         g$expr1$8404$1Z2PAY
                                         g$id2$8405$1Z2PAY
                                         g$expr2$8406$1Z2PAY
                                         g$expr3$8407$1Z2PAY)
                                       (if (g$id?$7290$1Z2PAY g$id1$8403$1Z2PAY)
                                         (if (g$id?$7290$1Z2PAY
                                               g$id2$8405$1Z2PAY)
                                           (begin
                                             '#f
                                             (g$id?$7290$1Z2PAY
                                               g$expr2$8406$1Z2PAY))
                                           '#f)
                                         '#f)))
                                    g$ls/false$8402$1Z2PAY))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$8408$1Z2PAY
                                   g$expr1$8409$1Z2PAY
                                   g$id2$8410$1Z2PAY
                                   g$expr2$8411$1Z2PAY
                                   g$expr3$8412$1Z2PAY)
                                 (g$bless$7531$1Z2PAY
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list 'syntax g$expr1$8409$1Z2PAY))
                                         (list
                                           (list 'set! 'id g$expr2$8411$1Z2PAY)
                                           (list 'syntax g$expr3$8412$1Z2PAY))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$8409$1Z2PAY
                                               '(e* ...))))))))))
                              g$ls/false$8402$1Z2PAY)
                            (g$syntax-violation$7679$1Z2PAY
                              '#f
                              '"invalid syntax"
                              g$t$8401$1Z2PAY))))
                       (g$syntax-dispatch$7568$1Z2PAY
                         g$t$8401$1Z2PAY
                         '(_ (any any) ((#(scheme-id set!) any any) any))))))
                   g$t$8398$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$8398$1Z2PAY '(_ any)))))
         g$stx$8397$1Z2PAY))))
   (g$do-macro$7550$1Z2PAY
     g$do-macro$11041$1Z2PAY
     (case-lambda
       ((g$stx$8413$1Z2PAY)
        (letrec* ((g$bind$8414$1Z2PAY
                    (case-lambda
                      ((g$x$8426$1Z2PAY)
                       ((case-lambda
                          ((g$t$8427$1Z2PAY)
                           ((case-lambda
                              ((g$ls/false$8428$1Z2PAY)
                               (if g$ls/false$8428$1Z2PAY
                                 (apply
                                   (case-lambda
                                     ((g$x$8429$1Z2PAY g$init$8430$1Z2PAY)
                                      (list
                                        g$x$8429$1Z2PAY
                                        g$init$8430$1Z2PAY
                                        g$x$8429$1Z2PAY)))
                                   g$ls/false$8428$1Z2PAY)
                                 ((case-lambda
                                    ((g$t$8431$1Z2PAY)
                                     ((case-lambda
                                        ((g$ls/false$8432$1Z2PAY)
                                         (if g$ls/false$8432$1Z2PAY
                                           (apply
                                             (case-lambda
                                               ((g$x$8433$1Z2PAY
                                                  g$init$8434$1Z2PAY
                                                  g$step$8435$1Z2PAY)
                                                (list
                                                  g$x$8433$1Z2PAY
                                                  g$init$8434$1Z2PAY
                                                  g$step$8435$1Z2PAY)))
                                             g$ls/false$8432$1Z2PAY)
                                           ((case-lambda
                                              ((g$t$8436$1Z2PAY)
                                               ((case-lambda
                                                  ((g$ls/false$8437$1Z2PAY)
                                                   (if g$ls/false$8437$1Z2PAY
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$7679$1Z2PAY
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$8413$1Z2PAY)))
                                                       g$ls/false$8437$1Z2PAY)
                                                     (g$syntax-violation$7679$1Z2PAY
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8436$1Z2PAY))))
                                                (g$syntax-dispatch$7568$1Z2PAY
                                                  g$t$8436$1Z2PAY
                                                  '_))))
                                            g$t$8431$1Z2PAY))))
                                      (g$syntax-dispatch$7568$1Z2PAY
                                        g$t$8431$1Z2PAY
                                        '(any any any)))))
                                  g$t$8427$1Z2PAY))))
                            (g$syntax-dispatch$7568$1Z2PAY
                              g$t$8427$1Z2PAY
                              '(any any)))))
                        g$x$8426$1Z2PAY)))))
          ((case-lambda
             ((g$t$8415$1Z2PAY)
              ((case-lambda
                 ((g$ls/false$8416$1Z2PAY)
                  (if g$ls/false$8416$1Z2PAY
                    (apply
                      (case-lambda
                        ((g$binding*$8417$1Z2PAY
                           g$test$8418$1Z2PAY
                           g$expr*$8419$1Z2PAY
                           g$command*$8420$1Z2PAY)
                         ((case-lambda
                            ((g$t$8421$1Z2PAY)
                             ((case-lambda
                                ((g$ls/false$8422$1Z2PAY)
                                 (if g$ls/false$8422$1Z2PAY
                                   (apply
                                     (case-lambda
                                       ((g$x*$8423$1Z2PAY
                                          g$init*$8424$1Z2PAY
                                          g$step*$8425$1Z2PAY)
                                        (if (g$valid-bound-ids?$7295$1Z2PAY
                                              g$x*$8423$1Z2PAY)
                                          (g$bless$7531$1Z2PAY
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$8423$1Z2PAY
                                                    (list
                                                      'if
                                                      g$test$8418$1Z2PAY
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$8419$1Z2PAY))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$8420$1Z2PAY
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$8425$1Z2PAY))))))))
                                              (cons 'loop g$init*$8424$1Z2PAY)))
                                          (g$syntax-violation$7679$1Z2PAY
                                            '#f
                                            '"invalid bindings"
                                            g$stx$8413$1Z2PAY))))
                                     g$ls/false$8422$1Z2PAY)
                                   (g$syntax-violation$7679$1Z2PAY
                                     '#f
                                     '"invalid syntax"
                                     g$t$8421$1Z2PAY))))
                              (g$syntax-dispatch$7568$1Z2PAY
                                g$t$8421$1Z2PAY
                                '#(each (any any any))))))
                          (map g$bind$8414$1Z2PAY g$binding*$8417$1Z2PAY))))
                      g$ls/false$8416$1Z2PAY)
                    (g$syntax-violation$7679$1Z2PAY
                      '#f
                      '"invalid syntax"
                      g$t$8415$1Z2PAY))))
               (g$syntax-dispatch$7568$1Z2PAY
                 g$t$8415$1Z2PAY
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$8413$1Z2PAY)))))
   (g$let*-macro$7551$1Z2PAY
     g$let*-macro$11042$1Z2PAY
     (case-lambda
       ((g$stx$8438$1Z2PAY)
        ((case-lambda
           ((g$t$8439$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8440$1Z2PAY)
                (if (if g$ls/false$8440$1Z2PAY
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$8441$1Z2PAY
                               g$rhs*$8442$1Z2PAY
                               g$b$8443$1Z2PAY
                               g$b*$8444$1Z2PAY)
                             (g$for-all$5014$1Z2PAY
                               g$id?$7290$1Z2PAY
                               g$lhs*$8441$1Z2PAY)))
                          g$ls/false$8440$1Z2PAY))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$8445$1Z2PAY
                         g$rhs*$8446$1Z2PAY
                         g$b$8447$1Z2PAY
                         g$b*$8448$1Z2PAY)
                       (g$bless$7531$1Z2PAY
                         ((letrec ((g$f$8449$1Z2PAY
                                     (case-lambda
                                       ((g$x*$8450$1Z2PAY)
                                        (if (null? g$x*$8450$1Z2PAY)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$8447$1Z2PAY
                                                g$b*$8448$1Z2PAY)))
                                          (list
                                            'let
                                            (list (car g$x*$8450$1Z2PAY))
                                            (g$f$8449$1Z2PAY
                                              (cdr g$x*$8450$1Z2PAY))))))))
                            g$f$8449$1Z2PAY)
                          (map list g$lhs*$8445$1Z2PAY g$rhs*$8446$1Z2PAY)))))
                    g$ls/false$8440$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8439$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$8439$1Z2PAY
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8438$1Z2PAY))))
   (g$or-macro$7552$1Z2PAY
     g$or-macro$11043$1Z2PAY
     (case-lambda
       ((g$stx$8451$1Z2PAY)
        ((case-lambda
           ((g$t$8452$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8453$1Z2PAY)
                (if g$ls/false$8453$1Z2PAY
                  (apply (case-lambda (() '#f)) g$ls/false$8453$1Z2PAY)
                  ((case-lambda
                     ((g$t$8454$1Z2PAY)
                      ((case-lambda
                         ((g$ls/false$8455$1Z2PAY)
                          (if g$ls/false$8455$1Z2PAY
                            (apply
                              (case-lambda
                                ((g$e$8456$1Z2PAY g$e*$8457$1Z2PAY)
                                 (g$bless$7531$1Z2PAY
                                   ((letrec ((g$f$8458$1Z2PAY
                                               (case-lambda
                                                 ((g$e$8459$1Z2PAY
                                                    g$e*$8460$1Z2PAY)
                                                  (if (null? g$e*$8460$1Z2PAY)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8459$1Z2PAY)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$8459$1Z2PAY))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$8458$1Z2PAY
                                                          (car g$e*$8460$1Z2PAY)
                                                          (cdr g$e*$8460$1Z2PAY)))))))))
                                      g$f$8458$1Z2PAY)
                                    g$e$8456$1Z2PAY
                                    g$e*$8457$1Z2PAY))))
                              g$ls/false$8455$1Z2PAY)
                            (g$syntax-violation$7679$1Z2PAY
                              '#f
                              '"invalid syntax"
                              g$t$8454$1Z2PAY))))
                       (g$syntax-dispatch$7568$1Z2PAY
                         g$t$8454$1Z2PAY
                         '(_ any . each-any)))))
                   g$t$8452$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$8452$1Z2PAY '(_)))))
         g$stx$8451$1Z2PAY))))
   (g$and-macro$7553$1Z2PAY
     g$and-macro$11044$1Z2PAY
     (case-lambda
       ((g$stx$8461$1Z2PAY)
        ((case-lambda
           ((g$t$8462$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8463$1Z2PAY)
                (if g$ls/false$8463$1Z2PAY
                  (apply (case-lambda (() '#t)) g$ls/false$8463$1Z2PAY)
                  ((case-lambda
                     ((g$t$8464$1Z2PAY)
                      ((case-lambda
                         ((g$ls/false$8465$1Z2PAY)
                          (if g$ls/false$8465$1Z2PAY
                            (apply
                              (case-lambda
                                ((g$e$8466$1Z2PAY g$e*$8467$1Z2PAY)
                                 (g$bless$7531$1Z2PAY
                                   ((letrec ((g$f$8468$1Z2PAY
                                               (case-lambda
                                                 ((g$e$8469$1Z2PAY
                                                    g$e*$8470$1Z2PAY)
                                                  (if (null? g$e*$8470$1Z2PAY)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8469$1Z2PAY)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$8469$1Z2PAY
                                                        (cons
                                                          (g$f$8468$1Z2PAY
                                                            (car g$e*$8470$1Z2PAY)
                                                            (cdr g$e*$8470$1Z2PAY))
                                                          '(#f)))))))))
                                      g$f$8468$1Z2PAY)
                                    g$e$8466$1Z2PAY
                                    g$e*$8467$1Z2PAY))))
                              g$ls/false$8465$1Z2PAY)
                            (g$syntax-violation$7679$1Z2PAY
                              '#f
                              '"invalid syntax"
                              g$t$8464$1Z2PAY))))
                       (g$syntax-dispatch$7568$1Z2PAY
                         g$t$8464$1Z2PAY
                         '(_ any . each-any)))))
                   g$t$8462$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$8462$1Z2PAY '(_)))))
         g$stx$8461$1Z2PAY))))
   (g$cond-macro$7554$1Z2PAY
     g$cond-macro$11045$1Z2PAY
     (case-lambda
       ((g$stx$8471$1Z2PAY)
        ((case-lambda
           ((g$t$8472$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8473$1Z2PAY)
                (if g$ls/false$8473$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$cls$8474$1Z2PAY g$cls*$8475$1Z2PAY)
                       (g$bless$7531$1Z2PAY
                         ((letrec ((g$f$8476$1Z2PAY
                                     (case-lambda
                                       ((g$cls$8477$1Z2PAY g$cls*$8478$1Z2PAY)
                                        (if (null? g$cls*$8478$1Z2PAY)
                                          ((case-lambda
                                             ((g$t$8479$1Z2PAY)
                                              ((case-lambda
                                                 ((g$ls/false$8480$1Z2PAY)
                                                  (if g$ls/false$8480$1Z2PAY
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8481$1Z2PAY
                                                           g$e*$8482$1Z2PAY)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$8481$1Z2PAY
                                                             g$e*$8482$1Z2PAY))))
                                                      g$ls/false$8480$1Z2PAY)
                                                    ((case-lambda
                                                       ((g$t$8483$1Z2PAY)
                                                        ((case-lambda
                                                           ((g$ls/false$8484$1Z2PAY)
                                                            (if g$ls/false$8484$1Z2PAY
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8485$1Z2PAY
                                                                     g$p$8486$1Z2PAY)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8485$1Z2PAY))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8486$1Z2PAY
                                                                         '(t))))))
                                                                g$ls/false$8484$1Z2PAY)
                                                              ((case-lambda
                                                                 ((g$t$8487$1Z2PAY)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8488$1Z2PAY)
                                                                      (if g$ls/false$8488$1Z2PAY
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8489$1Z2PAY)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$8489$1Z2PAY
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$8488$1Z2PAY)
                                                                        ((case-lambda
                                                                           ((g$t$8490$1Z2PAY)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8491$1Z2PAY)
                                                                                (if g$ls/false$8491$1Z2PAY
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8492$1Z2PAY
                                                                                         g$e*$8493$1Z2PAY)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8492$1Z2PAY
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8493$1Z2PAY))))
                                                                                    g$ls/false$8491$1Z2PAY)
                                                                                  ((case-lambda
                                                                                     ((g$t$8494$1Z2PAY)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8495$1Z2PAY)
                                                                                          (if g$ls/false$8495$1Z2PAY
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7679$1Z2PAY
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8471$1Z2PAY)))
                                                                                              g$ls/false$8495$1Z2PAY)
                                                                                            (g$syntax-violation$7679$1Z2PAY
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8494$1Z2PAY))))
                                                                                       (g$syntax-dispatch$7568$1Z2PAY
                                                                                         g$t$8494$1Z2PAY
                                                                                         '_))))
                                                                                   g$t$8490$1Z2PAY))))
                                                                             (g$syntax-dispatch$7568$1Z2PAY
                                                                               g$t$8490$1Z2PAY
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8487$1Z2PAY))))
                                                                   (g$syntax-dispatch$7568$1Z2PAY
                                                                     g$t$8487$1Z2PAY
                                                                     '(any)))))
                                                               g$t$8483$1Z2PAY))))
                                                         (g$syntax-dispatch$7568$1Z2PAY
                                                           g$t$8483$1Z2PAY
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8479$1Z2PAY))))
                                               (g$syntax-dispatch$7568$1Z2PAY
                                                 g$t$8479$1Z2PAY
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8477$1Z2PAY)
                                          ((case-lambda
                                             ((g$t$8496$1Z2PAY)
                                              ((case-lambda
                                                 ((g$ls/false$8497$1Z2PAY)
                                                  (if g$ls/false$8497$1Z2PAY
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8498$1Z2PAY
                                                           g$e*$8499$1Z2PAY)
                                                         (g$syntax-violation$7679$1Z2PAY
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$8471$1Z2PAY)))
                                                      g$ls/false$8497$1Z2PAY)
                                                    ((case-lambda
                                                       ((g$t$8500$1Z2PAY)
                                                        ((case-lambda
                                                           ((g$ls/false$8501$1Z2PAY)
                                                            (if g$ls/false$8501$1Z2PAY
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8502$1Z2PAY
                                                                     g$p$8503$1Z2PAY)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8502$1Z2PAY))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8503$1Z2PAY
                                                                         '(t))
                                                                       (g$f$8476$1Z2PAY
                                                                         (car g$cls*$8478$1Z2PAY)
                                                                         (cdr g$cls*$8478$1Z2PAY))))))
                                                                g$ls/false$8501$1Z2PAY)
                                                              ((case-lambda
                                                                 ((g$t$8504$1Z2PAY)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8505$1Z2PAY)
                                                                      (if g$ls/false$8505$1Z2PAY
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8506$1Z2PAY)
                                                                             (list
                                                                               'or
                                                                               g$e$8506$1Z2PAY
                                                                               (g$f$8476$1Z2PAY
                                                                                 (car g$cls*$8478$1Z2PAY)
                                                                                 (cdr g$cls*$8478$1Z2PAY)))))
                                                                          g$ls/false$8505$1Z2PAY)
                                                                        ((case-lambda
                                                                           ((g$t$8507$1Z2PAY)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8508$1Z2PAY)
                                                                                (if g$ls/false$8508$1Z2PAY
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8509$1Z2PAY
                                                                                         g$e*$8510$1Z2PAY)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8509$1Z2PAY
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8510$1Z2PAY)
                                                                                         (g$f$8476$1Z2PAY
                                                                                           (car g$cls*$8478$1Z2PAY)
                                                                                           (cdr g$cls*$8478$1Z2PAY)))))
                                                                                    g$ls/false$8508$1Z2PAY)
                                                                                  ((case-lambda
                                                                                     ((g$t$8511$1Z2PAY)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8512$1Z2PAY)
                                                                                          (if g$ls/false$8512$1Z2PAY
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7679$1Z2PAY
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8471$1Z2PAY)))
                                                                                              g$ls/false$8512$1Z2PAY)
                                                                                            (g$syntax-violation$7679$1Z2PAY
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8511$1Z2PAY))))
                                                                                       (g$syntax-dispatch$7568$1Z2PAY
                                                                                         g$t$8511$1Z2PAY
                                                                                         '_))))
                                                                                   g$t$8507$1Z2PAY))))
                                                                             (g$syntax-dispatch$7568$1Z2PAY
                                                                               g$t$8507$1Z2PAY
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8504$1Z2PAY))))
                                                                   (g$syntax-dispatch$7568$1Z2PAY
                                                                     g$t$8504$1Z2PAY
                                                                     '(any)))))
                                                               g$t$8500$1Z2PAY))))
                                                         (g$syntax-dispatch$7568$1Z2PAY
                                                           g$t$8500$1Z2PAY
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8496$1Z2PAY))))
                                               (g$syntax-dispatch$7568$1Z2PAY
                                                 g$t$8496$1Z2PAY
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8477$1Z2PAY))))))
                            g$f$8476$1Z2PAY)
                          g$cls$8474$1Z2PAY
                          g$cls*$8475$1Z2PAY))))
                    g$ls/false$8473$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8472$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$8472$1Z2PAY
               '(_ any . each-any)))))
         g$stx$8471$1Z2PAY))))
   (g$do-include$7555$1Z2PAY
     g$do-include$11046$1Z2PAY
     (case-lambda
       ((g$stx$8513$1Z2PAY g$id$8514$1Z2PAY g$filename$8515$1Z2PAY)
        ((case-lambda
           ((g$filename$8516$1Z2PAY)
            (begin
              (if (not (if (string? g$filename$8516$1Z2PAY)
                         (begin '#f (g$id?$7290$1Z2PAY g$id$8514$1Z2PAY))
                         '#f))
                (g$syntax-violation$7679$1Z2PAY
                  '#f
                  '"invalid syntax"
                  g$stx$8513$1Z2PAY)
                (void))
              (cons
                (g$bless$7531$1Z2PAY 'begin)
                (g$with-input-from-file$6286$1Z2PAY
                  g$filename$8516$1Z2PAY
                  (case-lambda
                    (()
                     ((letrec ((g$f$8517$1Z2PAY
                                 (case-lambda
                                   ((g$ls$8518$1Z2PAY)
                                    ((case-lambda
                                       ((g$x$8519$1Z2PAY)
                                        (if (eof-object? g$x$8519$1Z2PAY)
                                          (reverse g$ls$8518$1Z2PAY)
                                          (g$f$8517$1Z2PAY
                                            (cons
                                              (g$datum->stx$7273$1Z2PAY
                                                g$id$8514$1Z2PAY
                                                g$x$8519$1Z2PAY)
                                              g$ls$8518$1Z2PAY)))))
                                     (read-annotated))))))
                        g$f$8517$1Z2PAY)
                      '()))))))))
         (g$stx->datum$7301$1Z2PAY g$filename$8515$1Z2PAY)))))
   (g$include-macro$7556$1Z2PAY
     g$include-macro$11047$1Z2PAY
     (case-lambda
       ((g$e$8520$1Z2PAY)
        ((case-lambda
           ((g$t$8521$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8522$1Z2PAY)
                (if g$ls/false$8522$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$id$8523$1Z2PAY g$filename$8524$1Z2PAY)
                       (g$do-include$7555$1Z2PAY
                         g$e$8520$1Z2PAY
                         g$id$8523$1Z2PAY
                         g$filename$8524$1Z2PAY)))
                    g$ls/false$8522$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8521$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$8521$1Z2PAY '(any any)))))
         g$e$8520$1Z2PAY))))
   (g$include-into-macro$7557$1Z2PAY
     g$include-into-macro$11048$1Z2PAY
     (case-lambda
       ((g$e$8525$1Z2PAY)
        ((case-lambda
           ((g$t$8526$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8527$1Z2PAY)
                (if g$ls/false$8527$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$id$8528$1Z2PAY g$filename$8529$1Z2PAY)
                       (g$do-include$7555$1Z2PAY
                         g$e$8525$1Z2PAY
                         g$id$8528$1Z2PAY
                         g$filename$8529$1Z2PAY)))
                    g$ls/false$8527$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8526$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$8526$1Z2PAY '(_ any any)))))
         g$e$8525$1Z2PAY))))
   (g$syntax-rules-macro$7558$1Z2PAY
     g$syntax-rules-macro$11049$1Z2PAY
     (case-lambda
       ((g$e$8530$1Z2PAY)
        ((case-lambda
           ((g$t$8531$1Z2PAY)
            ((case-lambda
               ((g$ls/false$8532$1Z2PAY)
                (if g$ls/false$8532$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$lits$8533$1Z2PAY
                         g$pat*$8534$1Z2PAY
                         g$tmp*$8535$1Z2PAY)
                       (begin
                         (g$verify-literals$7571$1Z2PAY
                           g$lits$8533$1Z2PAY
                           g$e$8530$1Z2PAY)
                         (g$bless$7531$1Z2PAY
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$8533$1Z2PAY
                                   (map (case-lambda
                                          ((g$pat$8536$1Z2PAY g$tmp$8537$1Z2PAY)
                                           ((case-lambda
                                              ((g$t$8538$1Z2PAY)
                                               ((case-lambda
                                                  ((g$ls/false$8539$1Z2PAY)
                                                   (if g$ls/false$8539$1Z2PAY
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$8540$1Z2PAY)
                                                          (list
                                                            (cons
                                                              'g
                                                              g$rest$8540$1Z2PAY)
                                                            (list
                                                              'syntax
                                                              g$tmp$8537$1Z2PAY))))
                                                       g$ls/false$8539$1Z2PAY)
                                                     ((case-lambda
                                                        ((g$t$8541$1Z2PAY)
                                                         ((case-lambda
                                                            ((g$ls/false$8542$1Z2PAY)
                                                             (if g$ls/false$8542$1Z2PAY
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$7679$1Z2PAY
                                                                      '#f
                                                                      '"invalid syntax-rules pattern"
                                                                      g$e$8530$1Z2PAY
                                                                      g$pat$8536$1Z2PAY)))
                                                                 g$ls/false$8542$1Z2PAY)
                                                               (g$syntax-violation$7679$1Z2PAY
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$8541$1Z2PAY))))
                                                          (g$syntax-dispatch$7568$1Z2PAY
                                                            g$t$8541$1Z2PAY
                                                            '_))))
                                                      g$t$8538$1Z2PAY))))
                                                (g$syntax-dispatch$7568$1Z2PAY
                                                  g$t$8538$1Z2PAY
                                                  '(_ . any)))))
                                            g$pat$8536$1Z2PAY)))
                                        g$pat*$8534$1Z2PAY
                                        g$tmp*$8535$1Z2PAY)))))))))
                    g$ls/false$8532$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$8531$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$8531$1Z2PAY
               '(_ each-any . #(each (any any)))))))
         g$e$8530$1Z2PAY))))
   (g$quasiquote-macro$7559$1Z2PAY
     g$quasiquote-macro$11050$1Z2PAY
     ((case-lambda
        (()
         (letrec* ((g$datum$8543$1Z2PAY
                     (case-lambda
                       ((g$x$8674$1Z2PAY)
                        (list
                          (g$scheme-stx$7511$1Z2PAY 'quote)
                          (g$mkstx$7278$1Z2PAY g$x$8674$1Z2PAY '() '() '())))))
                   (g$quasicons*$8559$1Z2PAY
                     (case-lambda
                       ((g$x$8670$1Z2PAY g$y$8671$1Z2PAY)
                        ((letrec ((g$f$8672$1Z2PAY
                                    (case-lambda
                                      ((g$x$8673$1Z2PAY)
                                       (if (null? g$x$8673$1Z2PAY)
                                         g$y$8671$1Z2PAY
                                         (g$quasicons$8560$1Z2PAY
                                           (car g$x$8673$1Z2PAY)
                                           (g$f$8672$1Z2PAY
                                             (cdr g$x$8673$1Z2PAY))))))))
                           g$f$8672$1Z2PAY)
                         g$x$8670$1Z2PAY))))
                   (g$quasicons$8560$1Z2PAY
                     (case-lambda
                       ((g$x$8651$1Z2PAY g$y$8652$1Z2PAY)
                        ((case-lambda
                           ((g$t$8653$1Z2PAY)
                            ((case-lambda
                               ((g$ls/false$8654$1Z2PAY)
                                (if g$ls/false$8654$1Z2PAY
                                  (apply
                                    (case-lambda
                                      ((g$dy$8655$1Z2PAY)
                                       ((case-lambda
                                          ((g$t$8656$1Z2PAY)
                                           ((case-lambda
                                              ((g$ls/false$8657$1Z2PAY)
                                               (if g$ls/false$8657$1Z2PAY
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$8658$1Z2PAY)
                                                      (list
                                                        (g$scheme-stx$7511$1Z2PAY
                                                          'quote)
                                                        (cons
                                                          g$dx$8658$1Z2PAY
                                                          g$dy$8655$1Z2PAY))))
                                                   g$ls/false$8657$1Z2PAY)
                                                 ((case-lambda
                                                    ((g$t$8659$1Z2PAY)
                                                     ((case-lambda
                                                        ((g$ls/false$8660$1Z2PAY)
                                                         (if g$ls/false$8660$1Z2PAY
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$8661$1Z2PAY)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8662$1Z2PAY)
                                                                        (if g$ls/false$8662$1Z2PAY
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$7511$1Z2PAY
                                                                                   'list)
                                                                                 g$x$8651$1Z2PAY)))
                                                                            g$ls/false$8662$1Z2PAY)
                                                                          ((case-lambda
                                                                             ((g$t$8663$1Z2PAY)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8664$1Z2PAY)
                                                                                  (if g$ls/false$8664$1Z2PAY
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$7511$1Z2PAY
                                                                                             'cons)
                                                                                           g$x$8651$1Z2PAY
                                                                                           g$y$8652$1Z2PAY)))
                                                                                      g$ls/false$8664$1Z2PAY)
                                                                                    (g$syntax-violation$7679$1Z2PAY
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8663$1Z2PAY))))
                                                                               (g$syntax-dispatch$7568$1Z2PAY
                                                                                 g$t$8663$1Z2PAY
                                                                                 '_))))
                                                                           g$t$8661$1Z2PAY))))
                                                                     (g$syntax-dispatch$7568$1Z2PAY
                                                                       g$t$8661$1Z2PAY
                                                                       '()))))
                                                                 g$dy$8655$1Z2PAY)))
                                                             g$ls/false$8660$1Z2PAY)
                                                           (g$syntax-violation$7679$1Z2PAY
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$8659$1Z2PAY))))
                                                      (g$syntax-dispatch$7568$1Z2PAY
                                                        g$t$8659$1Z2PAY
                                                        '_))))
                                                  g$t$8656$1Z2PAY))))
                                            (g$syntax-dispatch$7568$1Z2PAY
                                              g$t$8656$1Z2PAY
                                              '(#(scheme-id quote) any)))))
                                        g$x$8651$1Z2PAY)))
                                    g$ls/false$8654$1Z2PAY)
                                  ((case-lambda
                                     ((g$t$8665$1Z2PAY)
                                      ((case-lambda
                                         ((g$ls/false$8666$1Z2PAY)
                                          (if g$ls/false$8666$1Z2PAY
                                            (apply
                                              (case-lambda
                                                ((g$stuff$8667$1Z2PAY)
                                                 (g$cons*$5016$1Z2PAY
                                                   (g$scheme-stx$7511$1Z2PAY
                                                     'list)
                                                   g$x$8651$1Z2PAY
                                                   g$stuff$8667$1Z2PAY)))
                                              g$ls/false$8666$1Z2PAY)
                                            ((case-lambda
                                               ((g$t$8668$1Z2PAY)
                                                ((case-lambda
                                                   ((g$ls/false$8669$1Z2PAY)
                                                    (if g$ls/false$8669$1Z2PAY
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$7511$1Z2PAY
                                                               'cons)
                                                             g$x$8651$1Z2PAY
                                                             g$y$8652$1Z2PAY)))
                                                        g$ls/false$8669$1Z2PAY)
                                                      (g$syntax-violation$7679$1Z2PAY
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$8668$1Z2PAY))))
                                                 (g$syntax-dispatch$7568$1Z2PAY
                                                   g$t$8668$1Z2PAY
                                                   '_))))
                                             g$t$8665$1Z2PAY))))
                                       (g$syntax-dispatch$7568$1Z2PAY
                                         g$t$8665$1Z2PAY
                                         '(#(scheme-id list) . each-any)))))
                                   g$t$8653$1Z2PAY))))
                             (g$syntax-dispatch$7568$1Z2PAY
                               g$t$8653$1Z2PAY
                               '(#(scheme-id quote) any)))))
                         g$y$8652$1Z2PAY))))
                   (g$quasiappend$8561$1Z2PAY
                     (case-lambda
                       ((g$x$8638$1Z2PAY g$y$8639$1Z2PAY)
                        ((case-lambda
                           ((g$ls$8640$1Z2PAY)
                            (if (null? g$ls$8640$1Z2PAY)
                              (list (g$scheme-stx$7511$1Z2PAY 'quote) '())
                              (if (null? (cdr g$ls$8640$1Z2PAY))
                                (car g$ls$8640$1Z2PAY)
                                (g$cons*$5016$1Z2PAY
                                  (g$scheme-stx$7511$1Z2PAY 'append)
                                  g$ls$8640$1Z2PAY)))))
                         ((letrec ((g$f$8641$1Z2PAY
                                     (case-lambda
                                       ((g$x$8642$1Z2PAY)
                                        (if (null? g$x$8642$1Z2PAY)
                                          ((case-lambda
                                             ((g$t$8643$1Z2PAY)
                                              ((case-lambda
                                                 ((g$ls/false$8644$1Z2PAY)
                                                  (if g$ls/false$8644$1Z2PAY
                                                    (apply
                                                      (case-lambda (() '()))
                                                      g$ls/false$8644$1Z2PAY)
                                                    ((case-lambda
                                                       ((g$t$8645$1Z2PAY)
                                                        ((case-lambda
                                                           ((g$ls/false$8646$1Z2PAY)
                                                            (if g$ls/false$8646$1Z2PAY
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$8639$1Z2PAY)))
                                                                g$ls/false$8646$1Z2PAY)
                                                              (g$syntax-violation$7679$1Z2PAY
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8645$1Z2PAY))))
                                                         (g$syntax-dispatch$7568$1Z2PAY
                                                           g$t$8645$1Z2PAY
                                                           '_))))
                                                     g$t$8643$1Z2PAY))))
                                               (g$syntax-dispatch$7568$1Z2PAY
                                                 g$t$8643$1Z2PAY
                                                 '(#(scheme-id quote) ())))))
                                           g$y$8639$1Z2PAY)
                                          ((case-lambda
                                             ((g$t$8647$1Z2PAY)
                                              ((case-lambda
                                                 ((g$ls/false$8648$1Z2PAY)
                                                  (if g$ls/false$8648$1Z2PAY
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$8641$1Z2PAY
                                                           (cdr g$x$8642$1Z2PAY))))
                                                      g$ls/false$8648$1Z2PAY)
                                                    ((case-lambda
                                                       ((g$t$8649$1Z2PAY)
                                                        ((case-lambda
                                                           ((g$ls/false$8650$1Z2PAY)
                                                            (if g$ls/false$8650$1Z2PAY
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$8642$1Z2PAY)
                                                                     (g$f$8641$1Z2PAY
                                                                       (cdr g$x$8642$1Z2PAY)))))
                                                                g$ls/false$8650$1Z2PAY)
                                                              (g$syntax-violation$7679$1Z2PAY
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8649$1Z2PAY))))
                                                         (g$syntax-dispatch$7568$1Z2PAY
                                                           g$t$8649$1Z2PAY
                                                           '_))))
                                                     g$t$8647$1Z2PAY))))
                                               (g$syntax-dispatch$7568$1Z2PAY
                                                 g$t$8647$1Z2PAY
                                                 '(#(scheme-id quote) ())))))
                                           (car g$x$8642$1Z2PAY)))))))
                            g$f$8641$1Z2PAY)
                          g$x$8638$1Z2PAY)))))
                   (g$quasivector$8562$1Z2PAY
                     (case-lambda
                       ((g$x$8613$1Z2PAY)
                        ((case-lambda
                           ((g$pat-x$8614$1Z2PAY)
                            ((case-lambda
                               ((g$t$8615$1Z2PAY)
                                ((case-lambda
                                   ((g$ls/false$8616$1Z2PAY)
                                    (if g$ls/false$8616$1Z2PAY
                                      (apply
                                        (case-lambda
                                          ((g$x*$8617$1Z2PAY)
                                           (list
                                             (g$scheme-stx$7511$1Z2PAY 'quote)
                                             (list->vector g$x*$8617$1Z2PAY))))
                                        g$ls/false$8616$1Z2PAY)
                                      ((case-lambda
                                         ((g$t$8618$1Z2PAY)
                                          ((case-lambda
                                             ((g$ls/false$8619$1Z2PAY)
                                              (if g$ls/false$8619$1Z2PAY
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$8620$1Z2PAY
                                                                 (case-lambda
                                                                   ((g$x$8621$1Z2PAY
                                                                      g$k$8622$1Z2PAY)
                                                                    ((case-lambda
                                                                       ((g$t$8623$1Z2PAY)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8624$1Z2PAY)
                                                                            (if g$ls/false$8624$1Z2PAY
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$8625$1Z2PAY)
                                                                                   (g$k$8622$1Z2PAY
                                                                                     (map (case-lambda
                                                                                            ((g$x$8626$1Z2PAY)
                                                                                             (list
                                                                                               (g$scheme-stx$7511$1Z2PAY
                                                                                                 'quote)
                                                                                               g$x$8626$1Z2PAY)))
                                                                                          g$x*$8625$1Z2PAY))))
                                                                                g$ls/false$8624$1Z2PAY)
                                                                              ((case-lambda
                                                                                 ((g$t$8627$1Z2PAY)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$8628$1Z2PAY)
                                                                                      (if g$ls/false$8628$1Z2PAY
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$8629$1Z2PAY)
                                                                                             (g$k$8622$1Z2PAY
                                                                                               g$x*$8629$1Z2PAY)))
                                                                                          g$ls/false$8628$1Z2PAY)
                                                                                        ((case-lambda
                                                                                           ((g$t$8630$1Z2PAY)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$8631$1Z2PAY)
                                                                                                (if g$ls/false$8631$1Z2PAY
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$8632$1Z2PAY
                                                                                                         g$y$8633$1Z2PAY)
                                                                                                       (g$f$8620$1Z2PAY
                                                                                                         g$y$8633$1Z2PAY
                                                                                                         (case-lambda
                                                                                                           ((g$ls$8634$1Z2PAY)
                                                                                                            (g$k$8622$1Z2PAY
                                                                                                              (cons
                                                                                                                g$x$8632$1Z2PAY
                                                                                                                g$ls$8634$1Z2PAY)))))))
                                                                                                    g$ls/false$8631$1Z2PAY)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$8635$1Z2PAY)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$8636$1Z2PAY)
                                                                                                          (if g$ls/false$8636$1Z2PAY
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$7511$1Z2PAY
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$8614$1Z2PAY)))
                                                                                                              g$ls/false$8636$1Z2PAY)
                                                                                                            (g$syntax-violation$7679$1Z2PAY
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$8635$1Z2PAY))))
                                                                                                       (g$syntax-dispatch$7568$1Z2PAY
                                                                                                         g$t$8635$1Z2PAY
                                                                                                         '_))))
                                                                                                   g$t$8630$1Z2PAY))))
                                                                                             (g$syntax-dispatch$7568$1Z2PAY
                                                                                               g$t$8630$1Z2PAY
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$8627$1Z2PAY))))
                                                                                   (g$syntax-dispatch$7568$1Z2PAY
                                                                                     g$t$8627$1Z2PAY
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$8623$1Z2PAY))))
                                                                         (g$syntax-dispatch$7568$1Z2PAY
                                                                           g$t$8623$1Z2PAY
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$8621$1Z2PAY)))))
                                                        g$f$8620$1Z2PAY)
                                                      g$x$8613$1Z2PAY
                                                      (case-lambda
                                                        ((g$ls$8637$1Z2PAY)
                                                         (g$cons*$5016$1Z2PAY
                                                           (g$scheme-stx$7511$1Z2PAY
                                                             'vector)
                                                           g$ls$8637$1Z2PAY))))))
                                                  g$ls/false$8619$1Z2PAY)
                                                (g$syntax-violation$7679$1Z2PAY
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$8618$1Z2PAY))))
                                           (g$syntax-dispatch$7568$1Z2PAY
                                             g$t$8618$1Z2PAY
                                             '_))))
                                       g$t$8615$1Z2PAY))))
                                 (g$syntax-dispatch$7568$1Z2PAY
                                   g$t$8615$1Z2PAY
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$8614$1Z2PAY)))
                         g$x$8613$1Z2PAY))))
                   (g$vquasi$8563$1Z2PAY
                     (case-lambda
                       ((g$p$8596$1Z2PAY g$lev$8597$1Z2PAY)
                        ((case-lambda
                           ((g$t$8598$1Z2PAY)
                            ((case-lambda
                               ((g$ls/false$8599$1Z2PAY)
                                (if g$ls/false$8599$1Z2PAY
                                  (apply
                                    (case-lambda
                                      ((g$p$8600$1Z2PAY g$q$8601$1Z2PAY)
                                       ((case-lambda
                                          ((g$t$8602$1Z2PAY)
                                           ((case-lambda
                                              ((g$ls/false$8603$1Z2PAY)
                                               (if g$ls/false$8603$1Z2PAY
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$8604$1Z2PAY)
                                                      (if (= g$lev$8597$1Z2PAY
                                                             '0)
                                                        (g$quasicons*$8559$1Z2PAY
                                                          g$p$8604$1Z2PAY
                                                          (g$vquasi$8563$1Z2PAY
                                                            g$q$8601$1Z2PAY
                                                            g$lev$8597$1Z2PAY))
                                                        (g$quasicons$8560$1Z2PAY
                                                          (g$quasicons$8560$1Z2PAY
                                                            (g$datum$8543$1Z2PAY
                                                              'unquote)
                                                            (g$quasi$8564$1Z2PAY
                                                              g$p$8604$1Z2PAY
                                                              (- g$lev$8597$1Z2PAY
                                                                 '1)))
                                                          (g$vquasi$8563$1Z2PAY
                                                            g$q$8601$1Z2PAY
                                                            g$lev$8597$1Z2PAY)))))
                                                   g$ls/false$8603$1Z2PAY)
                                                 ((case-lambda
                                                    ((g$t$8605$1Z2PAY)
                                                     ((case-lambda
                                                        ((g$ls/false$8606$1Z2PAY)
                                                         (if g$ls/false$8606$1Z2PAY
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$8607$1Z2PAY)
                                                                (if (= g$lev$8597$1Z2PAY
                                                                       '0)
                                                                  (g$quasiappend$8561$1Z2PAY
                                                                    g$p$8607$1Z2PAY
                                                                    (g$vquasi$8563$1Z2PAY
                                                                      g$q$8601$1Z2PAY
                                                                      g$lev$8597$1Z2PAY))
                                                                  (g$quasicons$8560$1Z2PAY
                                                                    (g$quasicons$8560$1Z2PAY
                                                                      (g$datum$8543$1Z2PAY
                                                                        'unquote-splicing)
                                                                      (g$quasi$8564$1Z2PAY
                                                                        g$p$8607$1Z2PAY
                                                                        (- g$lev$8597$1Z2PAY
                                                                           '1)))
                                                                    (g$vquasi$8563$1Z2PAY
                                                                      g$q$8601$1Z2PAY
                                                                      g$lev$8597$1Z2PAY)))))
                                                             g$ls/false$8606$1Z2PAY)
                                                           ((case-lambda
                                                              ((g$t$8608$1Z2PAY)
                                                               ((case-lambda
                                                                  ((g$ls/false$8609$1Z2PAY)
                                                                   (if g$ls/false$8609$1Z2PAY
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$8610$1Z2PAY)
                                                                          (g$quasicons$8560$1Z2PAY
                                                                            (g$quasi$8564$1Z2PAY
                                                                              g$p$8610$1Z2PAY
                                                                              g$lev$8597$1Z2PAY)
                                                                            (g$vquasi$8563$1Z2PAY
                                                                              g$q$8601$1Z2PAY
                                                                              g$lev$8597$1Z2PAY))))
                                                                       g$ls/false$8609$1Z2PAY)
                                                                     (g$syntax-violation$7679$1Z2PAY
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$8608$1Z2PAY))))
                                                                (g$syntax-dispatch$7568$1Z2PAY
                                                                  g$t$8608$1Z2PAY
                                                                  'any))))
                                                            g$t$8605$1Z2PAY))))
                                                      (g$syntax-dispatch$7568$1Z2PAY
                                                        g$t$8605$1Z2PAY
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$8602$1Z2PAY))))
                                            (g$syntax-dispatch$7568$1Z2PAY
                                              g$t$8602$1Z2PAY
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$8600$1Z2PAY)))
                                    g$ls/false$8599$1Z2PAY)
                                  ((case-lambda
                                     ((g$t$8611$1Z2PAY)
                                      ((case-lambda
                                         ((g$ls/false$8612$1Z2PAY)
                                          (if g$ls/false$8612$1Z2PAY
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$7511$1Z2PAY
                                                     'quote)
                                                   '())))
                                              g$ls/false$8612$1Z2PAY)
                                            (g$syntax-violation$7679$1Z2PAY
                                              '#f
                                              '"invalid syntax"
                                              g$t$8611$1Z2PAY))))
                                       (g$syntax-dispatch$7568$1Z2PAY
                                         g$t$8611$1Z2PAY
                                         '()))))
                                   g$t$8598$1Z2PAY))))
                             (g$syntax-dispatch$7568$1Z2PAY
                               g$t$8598$1Z2PAY
                               '(any . any)))))
                         g$p$8596$1Z2PAY))))
                   (g$quasi$8564$1Z2PAY
                     (case-lambda
                       ((g$p$8569$1Z2PAY g$lev$8570$1Z2PAY)
                        ((case-lambda
                           ((g$t$8571$1Z2PAY)
                            ((case-lambda
                               ((g$ls/false$8572$1Z2PAY)
                                (if g$ls/false$8572$1Z2PAY
                                  (apply
                                    (case-lambda
                                      ((g$p$8573$1Z2PAY)
                                       (if (= g$lev$8570$1Z2PAY '0)
                                         g$p$8573$1Z2PAY
                                         (g$quasicons$8560$1Z2PAY
                                           (g$datum$8543$1Z2PAY 'unquote)
                                           (g$quasi$8564$1Z2PAY
                                             (list g$p$8573$1Z2PAY)
                                             (- g$lev$8570$1Z2PAY '1))))))
                                    g$ls/false$8572$1Z2PAY)
                                  ((case-lambda
                                     ((g$t$8574$1Z2PAY)
                                      ((case-lambda
                                         ((g$ls/false$8575$1Z2PAY)
                                          (if g$ls/false$8575$1Z2PAY
                                            (apply
                                              (case-lambda
                                                ((g$p$8576$1Z2PAY
                                                   g$q$8577$1Z2PAY)
                                                 (if (= g$lev$8570$1Z2PAY '0)
                                                   (g$quasicons*$8559$1Z2PAY
                                                     g$p$8576$1Z2PAY
                                                     (g$quasi$8564$1Z2PAY
                                                       g$q$8577$1Z2PAY
                                                       g$lev$8570$1Z2PAY))
                                                   (g$quasicons$8560$1Z2PAY
                                                     (g$quasicons$8560$1Z2PAY
                                                       (g$datum$8543$1Z2PAY
                                                         'unquote)
                                                       (g$quasi$8564$1Z2PAY
                                                         g$p$8576$1Z2PAY
                                                         (- g$lev$8570$1Z2PAY
                                                            '1)))
                                                     (g$quasi$8564$1Z2PAY
                                                       g$q$8577$1Z2PAY
                                                       g$lev$8570$1Z2PAY)))))
                                              g$ls/false$8575$1Z2PAY)
                                            ((case-lambda
                                               ((g$t$8578$1Z2PAY)
                                                ((case-lambda
                                                   ((g$ls/false$8579$1Z2PAY)
                                                    (if g$ls/false$8579$1Z2PAY
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$8580$1Z2PAY
                                                             g$q$8581$1Z2PAY)
                                                           (if (= g$lev$8570$1Z2PAY
                                                                  '0)
                                                             (g$quasiappend$8561$1Z2PAY
                                                               g$p$8580$1Z2PAY
                                                               (g$quasi$8564$1Z2PAY
                                                                 g$q$8581$1Z2PAY
                                                                 g$lev$8570$1Z2PAY))
                                                             (g$quasicons$8560$1Z2PAY
                                                               (g$quasicons$8560$1Z2PAY
                                                                 (g$datum$8543$1Z2PAY
                                                                   'unquote-splicing)
                                                                 (g$quasi$8564$1Z2PAY
                                                                   g$p$8580$1Z2PAY
                                                                   (- g$lev$8570$1Z2PAY
                                                                      '1)))
                                                               (g$quasi$8564$1Z2PAY
                                                                 g$q$8581$1Z2PAY
                                                                 g$lev$8570$1Z2PAY)))))
                                                        g$ls/false$8579$1Z2PAY)
                                                      ((case-lambda
                                                         ((g$t$8582$1Z2PAY)
                                                          ((case-lambda
                                                             ((g$ls/false$8583$1Z2PAY)
                                                              (if g$ls/false$8583$1Z2PAY
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$8584$1Z2PAY)
                                                                     (g$quasicons$8560$1Z2PAY
                                                                       (g$datum$8543$1Z2PAY
                                                                         'quasiquote)
                                                                       (g$quasi$8564$1Z2PAY
                                                                         (list
                                                                           g$p$8584$1Z2PAY)
                                                                         (+ g$lev$8570$1Z2PAY
                                                                            '1)))))
                                                                  g$ls/false$8583$1Z2PAY)
                                                                ((case-lambda
                                                                   ((g$t$8585$1Z2PAY)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8586$1Z2PAY)
                                                                        (if g$ls/false$8586$1Z2PAY
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$8587$1Z2PAY
                                                                                 g$q$8588$1Z2PAY)
                                                                               (g$quasicons$8560$1Z2PAY
                                                                                 (g$quasi$8564$1Z2PAY
                                                                                   g$p$8587$1Z2PAY
                                                                                   g$lev$8570$1Z2PAY)
                                                                                 (g$quasi$8564$1Z2PAY
                                                                                   g$q$8588$1Z2PAY
                                                                                   g$lev$8570$1Z2PAY))))
                                                                            g$ls/false$8586$1Z2PAY)
                                                                          ((case-lambda
                                                                             ((g$t$8589$1Z2PAY)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8590$1Z2PAY)
                                                                                  (if (if g$ls/false$8590$1Z2PAY
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$8591$1Z2PAY)
                                                                                               (not (g$stx?$7262$1Z2PAY
                                                                                                      g$x$8591$1Z2PAY))))
                                                                                            g$ls/false$8590$1Z2PAY))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$8592$1Z2PAY)
                                                                                         (g$quasivector$8562$1Z2PAY
                                                                                           (g$vquasi$8563$1Z2PAY
                                                                                             g$x$8592$1Z2PAY
                                                                                             g$lev$8570$1Z2PAY))))
                                                                                      g$ls/false$8590$1Z2PAY)
                                                                                    ((case-lambda
                                                                                       ((g$t$8593$1Z2PAY)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8594$1Z2PAY)
                                                                                            (if g$ls/false$8594$1Z2PAY
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$8595$1Z2PAY)
                                                                                                   (list
                                                                                                     (g$scheme-stx$7511$1Z2PAY
                                                                                                       'quote)
                                                                                                     g$p$8595$1Z2PAY)))
                                                                                                g$ls/false$8594$1Z2PAY)
                                                                                              (g$syntax-violation$7679$1Z2PAY
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$8593$1Z2PAY))))
                                                                                         (g$syntax-dispatch$7568$1Z2PAY
                                                                                           g$t$8593$1Z2PAY
                                                                                           'any))))
                                                                                     g$t$8589$1Z2PAY))))
                                                                               (g$syntax-dispatch$7568$1Z2PAY
                                                                                 g$t$8589$1Z2PAY
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$8585$1Z2PAY))))
                                                                     (g$syntax-dispatch$7568$1Z2PAY
                                                                       g$t$8585$1Z2PAY
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$8582$1Z2PAY))))
                                                           (g$syntax-dispatch$7568$1Z2PAY
                                                             g$t$8582$1Z2PAY
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$8578$1Z2PAY))))
                                                 (g$syntax-dispatch$7568$1Z2PAY
                                                   g$t$8578$1Z2PAY
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8574$1Z2PAY))))
                                       (g$syntax-dispatch$7568$1Z2PAY
                                         g$t$8574$1Z2PAY
                                         '((#(scheme-id unquote) . each-any)
                                           .
                                           any)))))
                                   g$t$8571$1Z2PAY))))
                             (g$syntax-dispatch$7568$1Z2PAY
                               g$t$8571$1Z2PAY
                               '(#(scheme-id unquote) any)))))
                         g$p$8569$1Z2PAY)))))
           (case-lambda
             ((g$x$8565$1Z2PAY)
              ((case-lambda
                 ((g$t$8566$1Z2PAY)
                  ((case-lambda
                     ((g$ls/false$8567$1Z2PAY)
                      (if g$ls/false$8567$1Z2PAY
                        (apply
                          (case-lambda
                            ((g$e$8568$1Z2PAY)
                             (g$quasi$8564$1Z2PAY g$e$8568$1Z2PAY '0)))
                          g$ls/false$8567$1Z2PAY)
                        (g$syntax-violation$7679$1Z2PAY
                          '#f
                          '"invalid syntax"
                          g$t$8566$1Z2PAY))))
                   (g$syntax-dispatch$7568$1Z2PAY g$t$8566$1Z2PAY '(_ any)))))
               g$x$8565$1Z2PAY))))))))
   (g$quasisyntax-macro$7560$1Z2PAY
     g$quasisyntax-macro$11051$1Z2PAY
     ((case-lambda
        (()
         (letrec* ((g$quasi$8675$1Z2PAY
                     (case-lambda
                       ((g$p$8689$1Z2PAY g$lev$8690$1Z2PAY)
                        ((case-lambda
                           ((g$t$8691$1Z2PAY)
                            ((case-lambda
                               ((g$ls/false$8692$1Z2PAY)
                                (if g$ls/false$8692$1Z2PAY
                                  (apply
                                    (case-lambda
                                      ((g$p$8693$1Z2PAY)
                                       (if (= g$lev$8690$1Z2PAY '0)
                                         ((case-lambda
                                            ((g$g$8694$1Z2PAY)
                                             (values
                                               (list g$g$8694$1Z2PAY)
                                               (list g$p$8693$1Z2PAY)
                                               g$g$8694$1Z2PAY)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$8675$1Z2PAY
                                                g$p$8693$1Z2PAY
                                                (- g$lev$8690$1Z2PAY '1))))
                                           (case-lambda
                                             ((g$lhs*$8698$1Z2PAY
                                                g$rhs*$8699$1Z2PAY
                                                g$p$8700$1Z2PAY)
                                              ((case-lambda
                                                 ((g$p$8701$1Z2PAY
                                                    g$rhs*$8702$1Z2PAY
                                                    g$lhs*$8703$1Z2PAY)
                                                  (values
                                                    g$lhs*$8703$1Z2PAY
                                                    g$rhs*$8702$1Z2PAY
                                                    (list
                                                      'unsyntax
                                                      g$p$8701$1Z2PAY))))
                                               g$p$8700$1Z2PAY
                                               g$rhs*$8699$1Z2PAY
                                               g$lhs*$8698$1Z2PAY)))))))
                                    g$ls/false$8692$1Z2PAY)
                                  ((case-lambda
                                     ((g$t$8704$1Z2PAY)
                                      ((case-lambda
                                         ((g$ls/false$8705$1Z2PAY)
                                          (if (if g$ls/false$8705$1Z2PAY
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$8690$1Z2PAY
                                                          '0)))
                                                    g$ls/false$8705$1Z2PAY))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$7679$1Z2PAY
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$8689$1Z2PAY)))
                                              g$ls/false$8705$1Z2PAY)
                                            ((case-lambda
                                               ((g$t$8706$1Z2PAY)
                                                ((case-lambda
                                                   ((g$ls/false$8707$1Z2PAY)
                                                    (if g$ls/false$8707$1Z2PAY
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$8708$1Z2PAY
                                                             g$q$8709$1Z2PAY)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$8675$1Z2PAY
                                                                  g$q$8709$1Z2PAY
                                                                  g$lev$8690$1Z2PAY)))
                                                             (case-lambda
                                                               ((g$lhs*$8713$1Z2PAY
                                                                  g$rhs*$8714$1Z2PAY
                                                                  g$q$8715$1Z2PAY)
                                                                ((case-lambda
                                                                   ((g$q$8716$1Z2PAY
                                                                      g$rhs*$8717$1Z2PAY
                                                                      g$lhs*$8718$1Z2PAY)
                                                                    (if (= g$lev$8690$1Z2PAY
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$8719$1Z2PAY)
                                                                          (values
                                                                            (append
                                                                              g$g*$8719$1Z2PAY
                                                                              g$lhs*$8718$1Z2PAY)
                                                                            (append
                                                                              g$p*$8708$1Z2PAY
                                                                              g$rhs*$8717$1Z2PAY)
                                                                            (append
                                                                              g$g*$8719$1Z2PAY
                                                                              g$q$8716$1Z2PAY))))
                                                                       (map (case-lambda
                                                                              ((g$x$8720$1Z2PAY)
                                                                               (gensym)))
                                                                            g$p*$8708$1Z2PAY))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$8675$1Z2PAY
                                                                             g$p*$8708$1Z2PAY
                                                                             (- g$lev$8690$1Z2PAY
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$8724$1Z2PAY
                                                                             g$rhs2*$8725$1Z2PAY
                                                                             g$p*$8726$1Z2PAY)
                                                                           ((case-lambda
                                                                              ((g$p*$8727$1Z2PAY
                                                                                 g$rhs2*$8728$1Z2PAY
                                                                                 g$lhs2*$8729$1Z2PAY)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$8729$1Z2PAY
                                                                                   g$lhs*$8718$1Z2PAY)
                                                                                 (append
                                                                                   g$rhs2*$8728$1Z2PAY
                                                                                   g$rhs*$8717$1Z2PAY)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$8727$1Z2PAY)
                                                                                   g$q$8716$1Z2PAY))))
                                                                            g$p*$8726$1Z2PAY
                                                                            g$rhs2*$8725$1Z2PAY
                                                                            g$lhs2*$8724$1Z2PAY)))))))
                                                                 g$q$8715$1Z2PAY
                                                                 g$rhs*$8714$1Z2PAY
                                                                 g$lhs*$8713$1Z2PAY))))))
                                                        g$ls/false$8707$1Z2PAY)
                                                      ((case-lambda
                                                         ((g$t$8730$1Z2PAY)
                                                          ((case-lambda
                                                             ((g$ls/false$8731$1Z2PAY)
                                                              (if g$ls/false$8731$1Z2PAY
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$8732$1Z2PAY
                                                                       g$q$8733$1Z2PAY)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$8675$1Z2PAY
                                                                            g$q$8733$1Z2PAY
                                                                            g$lev$8690$1Z2PAY)))
                                                                       (case-lambda
                                                                         ((g$lhs*$8737$1Z2PAY
                                                                            g$rhs*$8738$1Z2PAY
                                                                            g$q$8739$1Z2PAY)
                                                                          ((case-lambda
                                                                             ((g$q$8740$1Z2PAY
                                                                                g$rhs*$8741$1Z2PAY
                                                                                g$lhs*$8742$1Z2PAY)
                                                                              (if (= g$lev$8690$1Z2PAY
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$8743$1Z2PAY)
                                                                                    (values
                                                                                      (append
                                                                                        (map (case-lambda
                                                                                               ((g$g$8744$1Z2PAY)
                                                                                                (cons
                                                                                                  g$g$8744$1Z2PAY
                                                                                                  '(...))))
                                                                                             g$g*$8743$1Z2PAY)
                                                                                        g$lhs*$8742$1Z2PAY)
                                                                                      (append
                                                                                        g$p*$8732$1Z2PAY
                                                                                        g$rhs*$8741$1Z2PAY)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (map (case-lambda
                                                                                                 ((g$g$8745$1Z2PAY)
                                                                                                  (cons
                                                                                                    g$g$8745$1Z2PAY
                                                                                                    '(...))))
                                                                                               g$g*$8743$1Z2PAY))
                                                                                        g$q$8740$1Z2PAY))))
                                                                                 (map (case-lambda
                                                                                        ((g$x$8746$1Z2PAY)
                                                                                         (gensym)))
                                                                                      g$p*$8732$1Z2PAY))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$8675$1Z2PAY
                                                                                       g$p*$8732$1Z2PAY
                                                                                       (- g$lev$8690$1Z2PAY
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$8750$1Z2PAY
                                                                                       g$rhs2*$8751$1Z2PAY
                                                                                       g$p*$8752$1Z2PAY)
                                                                                     ((case-lambda
                                                                                        ((g$p*$8753$1Z2PAY
                                                                                           g$rhs2*$8754$1Z2PAY
                                                                                           g$lhs2*$8755$1Z2PAY)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$8755$1Z2PAY
                                                                                             g$lhs*$8742$1Z2PAY)
                                                                                           (append
                                                                                             g$rhs2*$8754$1Z2PAY
                                                                                             g$rhs*$8741$1Z2PAY)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$8753$1Z2PAY)
                                                                                             g$q$8740$1Z2PAY))))
                                                                                      g$p*$8752$1Z2PAY
                                                                                      g$rhs2*$8751$1Z2PAY
                                                                                      g$lhs2*$8750$1Z2PAY)))))))
                                                                           g$q$8739$1Z2PAY
                                                                           g$rhs*$8738$1Z2PAY
                                                                           g$lhs*$8737$1Z2PAY))))))
                                                                  g$ls/false$8731$1Z2PAY)
                                                                ((case-lambda
                                                                   ((g$t$8756$1Z2PAY)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8757$1Z2PAY)
                                                                        (if (if g$ls/false$8757$1Z2PAY
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$8690$1Z2PAY
                                                                                        '0)))
                                                                                  g$ls/false$8757$1Z2PAY))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$7679$1Z2PAY
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$8689$1Z2PAY)))
                                                                            g$ls/false$8757$1Z2PAY)
                                                                          ((case-lambda
                                                                             ((g$t$8758$1Z2PAY)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8759$1Z2PAY)
                                                                                  (if g$ls/false$8759$1Z2PAY
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$8760$1Z2PAY)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$8675$1Z2PAY
                                                                                                g$p$8760$1Z2PAY
                                                                                                (+ g$lev$8690$1Z2PAY
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$8764$1Z2PAY
                                                                                                g$rhs*$8765$1Z2PAY
                                                                                                g$p$8766$1Z2PAY)
                                                                                              ((case-lambda
                                                                                                 ((g$p$8767$1Z2PAY
                                                                                                    g$rhs*$8768$1Z2PAY
                                                                                                    g$lhs*$8769$1Z2PAY)
                                                                                                  (values
                                                                                                    g$lhs*$8769$1Z2PAY
                                                                                                    g$rhs*$8768$1Z2PAY
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$8767$1Z2PAY))))
                                                                                               g$p$8766$1Z2PAY
                                                                                               g$rhs*$8765$1Z2PAY
                                                                                               g$lhs*$8764$1Z2PAY))))))
                                                                                      g$ls/false$8759$1Z2PAY)
                                                                                    ((case-lambda
                                                                                       ((g$t$8770$1Z2PAY)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8771$1Z2PAY)
                                                                                            (if g$ls/false$8771$1Z2PAY
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$8772$1Z2PAY
                                                                                                     g$q$8773$1Z2PAY)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$8675$1Z2PAY
                                                                                                          g$p$8772$1Z2PAY
                                                                                                          g$lev$8690$1Z2PAY)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$8780$1Z2PAY
                                                                                                          g$rhs*$8781$1Z2PAY
                                                                                                          g$p$8782$1Z2PAY)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$8675$1Z2PAY
                                                                                                               g$q$8773$1Z2PAY
                                                                                                               g$lev$8690$1Z2PAY)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$8783$1Z2PAY
                                                                                                               g$rhs2*$8784$1Z2PAY
                                                                                                               g$q$8785$1Z2PAY)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$8786$1Z2PAY
                                                                                                                   g$rhs2*$8787$1Z2PAY
                                                                                                                   g$lhs2*$8788$1Z2PAY
                                                                                                                   g$p$8789$1Z2PAY
                                                                                                                   g$rhs*$8790$1Z2PAY
                                                                                                                   g$lhs*$8791$1Z2PAY)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$8788$1Z2PAY
                                                                                                                     g$lhs*$8791$1Z2PAY)
                                                                                                                   (append
                                                                                                                     g$rhs2*$8787$1Z2PAY
                                                                                                                     g$rhs*$8790$1Z2PAY)
                                                                                                                   (cons
                                                                                                                     g$p$8789$1Z2PAY
                                                                                                                     g$q$8786$1Z2PAY))))
                                                                                                              g$q$8785$1Z2PAY
                                                                                                              g$rhs2*$8784$1Z2PAY
                                                                                                              g$lhs2*$8783$1Z2PAY
                                                                                                              g$p$8782$1Z2PAY
                                                                                                              g$rhs*$8781$1Z2PAY
                                                                                                              g$lhs*$8780$1Z2PAY)))))))))
                                                                                                g$ls/false$8771$1Z2PAY)
                                                                                              ((case-lambda
                                                                                                 ((g$t$8792$1Z2PAY)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$8793$1Z2PAY)
                                                                                                      (if g$ls/false$8793$1Z2PAY
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$8794$1Z2PAY)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$8675$1Z2PAY
                                                                                                                    g$x*$8794$1Z2PAY
                                                                                                                    g$lev$8690$1Z2PAY)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$8798$1Z2PAY
                                                                                                                    g$rhs*$8799$1Z2PAY
                                                                                                                    g$x*$8800$1Z2PAY)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$8801$1Z2PAY
                                                                                                                        g$rhs*$8802$1Z2PAY
                                                                                                                        g$lhs*$8803$1Z2PAY)
                                                                                                                      (values
                                                                                                                        g$lhs*$8803$1Z2PAY
                                                                                                                        g$rhs*$8802$1Z2PAY
                                                                                                                        (list->vector
                                                                                                                          g$x*$8801$1Z2PAY))))
                                                                                                                   g$x*$8800$1Z2PAY
                                                                                                                   g$rhs*$8799$1Z2PAY
                                                                                                                   g$lhs*$8798$1Z2PAY))))))
                                                                                                          g$ls/false$8793$1Z2PAY)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$8804$1Z2PAY)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$8805$1Z2PAY)
                                                                                                                (if g$ls/false$8805$1Z2PAY
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$8689$1Z2PAY)))
                                                                                                                    g$ls/false$8805$1Z2PAY)
                                                                                                                  (g$syntax-violation$7679$1Z2PAY
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$8804$1Z2PAY))))
                                                                                                             (g$syntax-dispatch$7568$1Z2PAY
                                                                                                               g$t$8804$1Z2PAY
                                                                                                               '_))))
                                                                                                         g$t$8792$1Z2PAY))))
                                                                                                   (g$syntax-dispatch$7568$1Z2PAY
                                                                                                     g$t$8792$1Z2PAY
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$8770$1Z2PAY))))
                                                                                         (g$syntax-dispatch$7568$1Z2PAY
                                                                                           g$t$8770$1Z2PAY
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$8758$1Z2PAY))))
                                                                               (g$syntax-dispatch$7568$1Z2PAY
                                                                                 g$t$8758$1Z2PAY
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$8756$1Z2PAY))))
                                                                     (g$syntax-dispatch$7568$1Z2PAY
                                                                       g$t$8756$1Z2PAY
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$8730$1Z2PAY))))
                                                           (g$syntax-dispatch$7568$1Z2PAY
                                                             g$t$8730$1Z2PAY
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$8706$1Z2PAY))))
                                                 (g$syntax-dispatch$7568$1Z2PAY
                                                   g$t$8706$1Z2PAY
                                                   '((#(scheme-id unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8704$1Z2PAY))))
                                       (g$syntax-dispatch$7568$1Z2PAY
                                         g$t$8704$1Z2PAY
                                         '#(scheme-id unsyntax)))))
                                   g$t$8691$1Z2PAY))))
                             (g$syntax-dispatch$7568$1Z2PAY
                               g$t$8691$1Z2PAY
                               '(#(scheme-id unsyntax) any)))))
                         g$p$8689$1Z2PAY)))))
           (case-lambda
             ((g$x$8676$1Z2PAY)
              ((case-lambda
                 ((g$t$8677$1Z2PAY)
                  ((case-lambda
                     ((g$ls/false$8678$1Z2PAY)
                      (if g$ls/false$8678$1Z2PAY
                        (apply
                          (case-lambda
                            ((g$e$8679$1Z2PAY)
                             (call-with-values
                               (case-lambda
                                 (() (g$quasi$8675$1Z2PAY g$e$8679$1Z2PAY '0)))
                               (case-lambda
                                 ((g$lhs*$8683$1Z2PAY
                                    g$rhs*$8684$1Z2PAY
                                    g$v$8685$1Z2PAY)
                                  ((case-lambda
                                     ((g$v$8686$1Z2PAY
                                        g$rhs*$8687$1Z2PAY
                                        g$lhs*$8688$1Z2PAY)
                                      (g$bless$7531$1Z2PAY
                                        (list
                                          'syntax-case
                                          (cons 'list g$rhs*$8687$1Z2PAY)
                                          '()
                                          (list
                                            g$lhs*$8688$1Z2PAY
                                            (list 'syntax g$v$8686$1Z2PAY))))))
                                   g$v$8685$1Z2PAY
                                   g$rhs*$8684$1Z2PAY
                                   g$lhs*$8683$1Z2PAY))))))
                          g$ls/false$8678$1Z2PAY)
                        (g$syntax-violation$7679$1Z2PAY
                          '#f
                          '"invalid syntax"
                          g$t$8677$1Z2PAY))))
                   (g$syntax-dispatch$7568$1Z2PAY g$t$8677$1Z2PAY '(_ any)))))
               g$x$8676$1Z2PAY))))))))
   (g$define-struct-macro$7561$1Z2PAY
     g$define-struct-macro$11052$1Z2PAY
     (case-lambda
       ((g$stx$8806$1Z2PAY)
        (g$syntax-violation$7679$1Z2PAY
          '#f
          '"define-struct not supported"
          g$stx$8806$1Z2PAY))))
   (g$define-record-type-macro$7562$1Z2PAY
     g$define-record-type-macro$11053$1Z2PAY
     (case-lambda
       ((g$x$8807$1Z2PAY)
        (letrec* ((g$id$8808$1Z2PAY
                    (case-lambda
                      ((g$ctxt$9060$1Z2PAY . g$str*$9061$1Z2PAY)
                       (g$datum->syntax$7681$1Z2PAY
                         g$ctxt$9060$1Z2PAY
                         (string->symbol
                           (apply
                             string-append
                             (map (case-lambda
                                    ((g$x$9062$1Z2PAY)
                                     (if (symbol? g$x$9062$1Z2PAY)
                                       (symbol->string g$x$9062$1Z2PAY)
                                       (if (string? g$x$9062$1Z2PAY)
                                         g$x$9062$1Z2PAY
                                         (assertion-violation
                                           'define-record-type
                                           '"BUG")))))
                                  g$str*$9061$1Z2PAY)))))))
                  (g$get-record-name$8809$1Z2PAY
                    (case-lambda
                      ((g$spec$9051$1Z2PAY)
                       ((case-lambda
                          ((g$t$9052$1Z2PAY)
                           ((case-lambda
                              ((g$ls/false$9053$1Z2PAY)
                               (if g$ls/false$9053$1Z2PAY
                                 (apply
                                   (case-lambda
                                     ((g$foo$9054$1Z2PAY
                                        g$make-foo$9055$1Z2PAY
                                        g$foo?$9056$1Z2PAY)
                                      g$foo$9054$1Z2PAY))
                                   g$ls/false$9053$1Z2PAY)
                                 ((case-lambda
                                    ((g$t$9057$1Z2PAY)
                                     ((case-lambda
                                        ((g$ls/false$9058$1Z2PAY)
                                         (if g$ls/false$9058$1Z2PAY
                                           (apply
                                             (case-lambda
                                               ((g$foo$9059$1Z2PAY)
                                                g$foo$9059$1Z2PAY))
                                             g$ls/false$9058$1Z2PAY)
                                           (g$syntax-violation$7679$1Z2PAY
                                             '#f
                                             '"invalid syntax"
                                             g$t$9057$1Z2PAY))))
                                      (g$syntax-dispatch$7568$1Z2PAY
                                        g$t$9057$1Z2PAY
                                        'any))))
                                  g$t$9052$1Z2PAY))))
                            (g$syntax-dispatch$7568$1Z2PAY
                              g$t$9052$1Z2PAY
                              '(any any any)))))
                        g$spec$9051$1Z2PAY))))
                  (g$get-record-constructor-name$8810$1Z2PAY
                    (case-lambda
                      ((g$spec$9041$1Z2PAY)
                       ((case-lambda
                          ((g$t$9042$1Z2PAY)
                           ((case-lambda
                              ((g$ls/false$9043$1Z2PAY)
                               (if g$ls/false$9043$1Z2PAY
                                 (apply
                                   (case-lambda
                                     ((g$foo$9044$1Z2PAY
                                        g$make-foo$9045$1Z2PAY
                                        g$foo?$9046$1Z2PAY)
                                      g$make-foo$9045$1Z2PAY))
                                   g$ls/false$9043$1Z2PAY)
                                 ((case-lambda
                                    ((g$t$9047$1Z2PAY)
                                     ((case-lambda
                                        ((g$ls/false$9048$1Z2PAY)
                                         (if (if g$ls/false$9048$1Z2PAY
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9049$1Z2PAY)
                                                      (g$id?$7290$1Z2PAY
                                                        g$foo$9049$1Z2PAY)))
                                                   g$ls/false$9048$1Z2PAY))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9050$1Z2PAY)
                                                (g$id$8808$1Z2PAY
                                                  g$foo$9050$1Z2PAY
                                                  '"make-"
                                                  (g$stx->datum$7301$1Z2PAY
                                                    g$foo$9050$1Z2PAY))))
                                             g$ls/false$9048$1Z2PAY)
                                           (g$syntax-violation$7679$1Z2PAY
                                             '#f
                                             '"invalid syntax"
                                             g$t$9047$1Z2PAY))))
                                      (g$syntax-dispatch$7568$1Z2PAY
                                        g$t$9047$1Z2PAY
                                        'any))))
                                  g$t$9042$1Z2PAY))))
                            (g$syntax-dispatch$7568$1Z2PAY
                              g$t$9042$1Z2PAY
                              '(any any any)))))
                        g$spec$9041$1Z2PAY))))
                  (g$get-record-predicate-name$8811$1Z2PAY
                    (case-lambda
                      ((g$spec$9031$1Z2PAY)
                       ((case-lambda
                          ((g$t$9032$1Z2PAY)
                           ((case-lambda
                              ((g$ls/false$9033$1Z2PAY)
                               (if g$ls/false$9033$1Z2PAY
                                 (apply
                                   (case-lambda
                                     ((g$foo$9034$1Z2PAY
                                        g$make-foo$9035$1Z2PAY
                                        g$foo?$9036$1Z2PAY)
                                      g$foo?$9036$1Z2PAY))
                                   g$ls/false$9033$1Z2PAY)
                                 ((case-lambda
                                    ((g$t$9037$1Z2PAY)
                                     ((case-lambda
                                        ((g$ls/false$9038$1Z2PAY)
                                         (if (if g$ls/false$9038$1Z2PAY
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9039$1Z2PAY)
                                                      (g$id?$7290$1Z2PAY
                                                        g$foo$9039$1Z2PAY)))
                                                   g$ls/false$9038$1Z2PAY))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9040$1Z2PAY)
                                                (g$id$8808$1Z2PAY
                                                  g$foo$9040$1Z2PAY
                                                  (g$stx->datum$7301$1Z2PAY
                                                    g$foo$9040$1Z2PAY)
                                                  '"?")))
                                             g$ls/false$9038$1Z2PAY)
                                           (g$syntax-violation$7679$1Z2PAY
                                             '#f
                                             '"invalid syntax"
                                             g$t$9037$1Z2PAY))))
                                      (g$syntax-dispatch$7568$1Z2PAY
                                        g$t$9037$1Z2PAY
                                        'any))))
                                  g$t$9032$1Z2PAY))))
                            (g$syntax-dispatch$7568$1Z2PAY
                              g$t$9032$1Z2PAY
                              '(any any any)))))
                        g$spec$9031$1Z2PAY))))
                  (g$get-clause$8812$1Z2PAY
                    (case-lambda
                      ((g$id$9022$1Z2PAY g$ls$9023$1Z2PAY)
                       ((case-lambda
                          ((g$t$9024$1Z2PAY)
                           ((case-lambda
                              ((g$ls/false$9025$1Z2PAY)
                               (if g$ls/false$9025$1Z2PAY
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$9025$1Z2PAY)
                                 ((case-lambda
                                    ((g$t$9026$1Z2PAY)
                                     ((case-lambda
                                        ((g$ls/false$9027$1Z2PAY)
                                         (if g$ls/false$9027$1Z2PAY
                                           (apply
                                             (case-lambda
                                               ((g$x$9028$1Z2PAY
                                                  g$rest$9029$1Z2PAY
                                                  g$ls$9030$1Z2PAY)
                                                (if (g$free-id=?$7294$1Z2PAY
                                                      (g$bless$7531$1Z2PAY
                                                        g$id$9022$1Z2PAY)
                                                      g$x$9028$1Z2PAY)
                                                  (cons
                                                    g$x$9028$1Z2PAY
                                                    g$rest$9029$1Z2PAY)
                                                  (g$get-clause$8812$1Z2PAY
                                                    g$id$9022$1Z2PAY
                                                    g$ls$9030$1Z2PAY))))
                                             g$ls/false$9027$1Z2PAY)
                                           (g$syntax-violation$7679$1Z2PAY
                                             '#f
                                             '"invalid syntax"
                                             g$t$9026$1Z2PAY))))
                                      (g$syntax-dispatch$7568$1Z2PAY
                                        g$t$9026$1Z2PAY
                                        '((any . any) . any)))))
                                  g$t$9024$1Z2PAY))))
                            (g$syntax-dispatch$7568$1Z2PAY
                              g$t$9024$1Z2PAY
                              '()))))
                        g$ls$9023$1Z2PAY))))
                  (g$foo-rtd-code$8813$1Z2PAY
                    (case-lambda
                      ((g$name$8981$1Z2PAY
                         g$clause*$8982$1Z2PAY
                         g$parent-rtd-code$8983$1Z2PAY)
                       (letrec* ((g$convert-field-spec*$8984$1Z2PAY
                                   (case-lambda
                                     ((g$ls$9009$1Z2PAY)
                                      (list->vector
                                        (map (case-lambda
                                               ((g$x$9010$1Z2PAY)
                                                ((case-lambda
                                                   ((g$t$9011$1Z2PAY)
                                                    ((case-lambda
                                                       ((g$ls/false$9012$1Z2PAY)
                                                        (if g$ls/false$9012$1Z2PAY
                                                          (apply
                                                            (case-lambda
                                                              ((g$name$9013$1Z2PAY
                                                                 g$rest$9014$1Z2PAY)
                                                               (list
                                                                 'mutable
                                                                 g$name$9013$1Z2PAY)))
                                                            g$ls/false$9012$1Z2PAY)
                                                          ((case-lambda
                                                             ((g$t$9015$1Z2PAY)
                                                              ((case-lambda
                                                                 ((g$ls/false$9016$1Z2PAY)
                                                                  (if g$ls/false$9016$1Z2PAY
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$name$9017$1Z2PAY
                                                                           g$rest$9018$1Z2PAY)
                                                                         (list
                                                                           'immutable
                                                                           g$name$9017$1Z2PAY)))
                                                                      g$ls/false$9016$1Z2PAY)
                                                                    ((case-lambda
                                                                       ((g$t$9019$1Z2PAY)
                                                                        ((case-lambda
                                                                           ((g$ls/false$9020$1Z2PAY)
                                                                            (if g$ls/false$9020$1Z2PAY
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$name$9021$1Z2PAY)
                                                                                   (list
                                                                                     'immutable
                                                                                     g$name$9021$1Z2PAY)))
                                                                                g$ls/false$9020$1Z2PAY)
                                                                              (g$syntax-violation$7679$1Z2PAY
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$9019$1Z2PAY))))
                                                                         (g$syntax-dispatch$7568$1Z2PAY
                                                                           g$t$9019$1Z2PAY
                                                                           'any))))
                                                                     g$t$9015$1Z2PAY))))
                                                               (g$syntax-dispatch$7568$1Z2PAY
                                                                 g$t$9015$1Z2PAY
                                                                 '(#(scheme-id
                                                                     immutable)
                                                                   any
                                                                   .
                                                                   any)))))
                                                           g$t$9011$1Z2PAY))))
                                                     (g$syntax-dispatch$7568$1Z2PAY
                                                       g$t$9011$1Z2PAY
                                                       '(#(scheme-id mutable)
                                                         any
                                                         .
                                                         any)))))
                                                 g$x$9010$1Z2PAY)))
                                             g$ls$9009$1Z2PAY))))))
                         ((case-lambda
                            ((g$uid-code$8985$1Z2PAY
                               g$sealed?$8986$1Z2PAY
                               g$opaque?$8987$1Z2PAY
                               g$fields$8988$1Z2PAY)
                             (g$bless$7531$1Z2PAY
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$8981$1Z2PAY)
                                 g$parent-rtd-code$8983$1Z2PAY
                                 g$uid-code$8985$1Z2PAY
                                 g$sealed?$8986$1Z2PAY
                                 g$opaque?$8987$1Z2PAY
                                 g$fields$8988$1Z2PAY))))
                          ((case-lambda
                             ((g$t$8989$1Z2PAY)
                              ((case-lambda
                                 ((g$ls/false$8990$1Z2PAY)
                                  (if g$ls/false$8990$1Z2PAY
                                    (apply
                                      (case-lambda (() (list 'quote (gensym))))
                                      g$ls/false$8990$1Z2PAY)
                                    ((case-lambda
                                       ((g$t$8991$1Z2PAY)
                                        ((case-lambda
                                           ((g$ls/false$8992$1Z2PAY)
                                            (if g$ls/false$8992$1Z2PAY
                                              (apply
                                                (case-lambda
                                                  ((g$uid$8993$1Z2PAY)
                                                   (list
                                                     'quote
                                                     g$uid$8993$1Z2PAY)))
                                                g$ls/false$8992$1Z2PAY)
                                              ((case-lambda
                                                 ((g$t$8994$1Z2PAY)
                                                  ((case-lambda
                                                     ((g$ls/false$8995$1Z2PAY)
                                                      (if g$ls/false$8995$1Z2PAY
                                                        (apply
                                                          (case-lambda (() '#f))
                                                          g$ls/false$8995$1Z2PAY)
                                                        (g$syntax-violation$7679$1Z2PAY
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$8994$1Z2PAY))))
                                                   (g$syntax-dispatch$7568$1Z2PAY
                                                     g$t$8994$1Z2PAY
                                                     '_))))
                                               g$t$8991$1Z2PAY))))
                                         (g$syntax-dispatch$7568$1Z2PAY
                                           g$t$8991$1Z2PAY
                                           '(_ any)))))
                                     g$t$8989$1Z2PAY))))
                               (g$syntax-dispatch$7568$1Z2PAY
                                 g$t$8989$1Z2PAY
                                 '(_)))))
                           (g$get-clause$8812$1Z2PAY
                             'nongenerative
                             g$clause*$8982$1Z2PAY))
                          ((case-lambda
                             ((g$t$8996$1Z2PAY)
                              ((case-lambda
                                 ((g$ls/false$8997$1Z2PAY)
                                  (if g$ls/false$8997$1Z2PAY
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$8997$1Z2PAY)
                                    ((case-lambda
                                       ((g$t$8998$1Z2PAY)
                                        ((case-lambda
                                           ((g$ls/false$8999$1Z2PAY)
                                            (if g$ls/false$8999$1Z2PAY
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$8999$1Z2PAY)
                                              (g$syntax-violation$7679$1Z2PAY
                                                '#f
                                                '"invalid syntax"
                                                g$t$8998$1Z2PAY))))
                                         (g$syntax-dispatch$7568$1Z2PAY
                                           g$t$8998$1Z2PAY
                                           '_))))
                                     g$t$8996$1Z2PAY))))
                               (g$syntax-dispatch$7568$1Z2PAY
                                 g$t$8996$1Z2PAY
                                 '(_ #(atom #t))))))
                           (g$get-clause$8812$1Z2PAY
                             'sealed
                             g$clause*$8982$1Z2PAY))
                          ((case-lambda
                             ((g$t$9000$1Z2PAY)
                              ((case-lambda
                                 ((g$ls/false$9001$1Z2PAY)
                                  (if g$ls/false$9001$1Z2PAY
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9001$1Z2PAY)
                                    ((case-lambda
                                       ((g$t$9002$1Z2PAY)
                                        ((case-lambda
                                           ((g$ls/false$9003$1Z2PAY)
                                            (if g$ls/false$9003$1Z2PAY
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9003$1Z2PAY)
                                              (g$syntax-violation$7679$1Z2PAY
                                                '#f
                                                '"invalid syntax"
                                                g$t$9002$1Z2PAY))))
                                         (g$syntax-dispatch$7568$1Z2PAY
                                           g$t$9002$1Z2PAY
                                           '_))))
                                     g$t$9000$1Z2PAY))))
                               (g$syntax-dispatch$7568$1Z2PAY
                                 g$t$9000$1Z2PAY
                                 '(_ #(atom #t))))))
                           (g$get-clause$8812$1Z2PAY
                             'opaque
                             g$clause*$8982$1Z2PAY))
                          ((case-lambda
                             ((g$t$9004$1Z2PAY)
                              ((case-lambda
                                 ((g$ls/false$9005$1Z2PAY)
                                  (if g$ls/false$9005$1Z2PAY
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$9006$1Z2PAY)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$8984$1Z2PAY
                                             g$field-spec*$9006$1Z2PAY))))
                                      g$ls/false$9005$1Z2PAY)
                                    ((case-lambda
                                       ((g$t$9007$1Z2PAY)
                                        ((case-lambda
                                           ((g$ls/false$9008$1Z2PAY)
                                            (if g$ls/false$9008$1Z2PAY
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$9008$1Z2PAY)
                                              (g$syntax-violation$7679$1Z2PAY
                                                '#f
                                                '"invalid syntax"
                                                g$t$9007$1Z2PAY))))
                                         (g$syntax-dispatch$7568$1Z2PAY
                                           g$t$9007$1Z2PAY
                                           '_))))
                                     g$t$9004$1Z2PAY))))
                               (g$syntax-dispatch$7568$1Z2PAY
                                 g$t$9004$1Z2PAY
                                 '(_ . each-any)))))
                           (g$get-clause$8812$1Z2PAY
                             'fields
                             g$clause*$8982$1Z2PAY)))))))
                  (g$parent-rtd-code$8814$1Z2PAY
                    (case-lambda
                      ((g$clause*$8969$1Z2PAY)
                       ((case-lambda
                          ((g$t$8970$1Z2PAY)
                           ((case-lambda
                              ((g$ls/false$8971$1Z2PAY)
                               (if g$ls/false$8971$1Z2PAY
                                 (apply
                                   (case-lambda
                                     ((g$name$8972$1Z2PAY)
                                      (list
                                        'record-type-descriptor
                                        g$name$8972$1Z2PAY)))
                                   g$ls/false$8971$1Z2PAY)
                                 ((case-lambda
                                    ((g$t$8973$1Z2PAY)
                                     ((case-lambda
                                        ((g$ls/false$8974$1Z2PAY)
                                         (if g$ls/false$8974$1Z2PAY
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$8975$1Z2PAY)
                                                    ((case-lambda
                                                       ((g$ls/false$8976$1Z2PAY)
                                                        (if g$ls/false$8976$1Z2PAY
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$8977$1Z2PAY
                                                                 g$rcd$8978$1Z2PAY)
                                                               g$rtd$8977$1Z2PAY))
                                                            g$ls/false$8976$1Z2PAY)
                                                          ((case-lambda
                                                             ((g$t$8979$1Z2PAY)
                                                              ((case-lambda
                                                                 ((g$ls/false$8980$1Z2PAY)
                                                                  (if g$ls/false$8980$1Z2PAY
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$8980$1Z2PAY)
                                                                    (g$syntax-violation$7679$1Z2PAY
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8979$1Z2PAY))))
                                                               (g$syntax-dispatch$7568$1Z2PAY
                                                                 g$t$8979$1Z2PAY
                                                                 '#(atom #f)))))
                                                           g$t$8975$1Z2PAY))))
                                                     (g$syntax-dispatch$7568$1Z2PAY
                                                       g$t$8975$1Z2PAY
                                                       '(_ any any)))))
                                                 (g$get-clause$8812$1Z2PAY
                                                   'parent-rtd
                                                   g$clause*$8969$1Z2PAY))))
                                             g$ls/false$8974$1Z2PAY)
                                           (g$syntax-violation$7679$1Z2PAY
                                             '#f
                                             '"invalid syntax"
                                             g$t$8973$1Z2PAY))))
                                      (g$syntax-dispatch$7568$1Z2PAY
                                        g$t$8973$1Z2PAY
                                        '#(atom #f)))))
                                  g$t$8970$1Z2PAY))))
                            (g$syntax-dispatch$7568$1Z2PAY
                              g$t$8970$1Z2PAY
                              '(_ any)))))
                        (g$get-clause$8812$1Z2PAY
                          'parent
                          g$clause*$8969$1Z2PAY)))))
                  (g$parent-rcd-code$8815$1Z2PAY
                    (case-lambda
                      ((g$clause*$8957$1Z2PAY)
                       ((case-lambda
                          ((g$t$8958$1Z2PAY)
                           ((case-lambda
                              ((g$ls/false$8959$1Z2PAY)
                               (if g$ls/false$8959$1Z2PAY
                                 (apply
                                   (case-lambda
                                     ((g$name$8960$1Z2PAY)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$8960$1Z2PAY)))
                                   g$ls/false$8959$1Z2PAY)
                                 ((case-lambda
                                    ((g$t$8961$1Z2PAY)
                                     ((case-lambda
                                        ((g$ls/false$8962$1Z2PAY)
                                         (if g$ls/false$8962$1Z2PAY
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$8963$1Z2PAY)
                                                    ((case-lambda
                                                       ((g$ls/false$8964$1Z2PAY)
                                                        (if g$ls/false$8964$1Z2PAY
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$8965$1Z2PAY
                                                                 g$rcd$8966$1Z2PAY)
                                                               g$rcd$8966$1Z2PAY))
                                                            g$ls/false$8964$1Z2PAY)
                                                          ((case-lambda
                                                             ((g$t$8967$1Z2PAY)
                                                              ((case-lambda
                                                                 ((g$ls/false$8968$1Z2PAY)
                                                                  (if g$ls/false$8968$1Z2PAY
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$8968$1Z2PAY)
                                                                    (g$syntax-violation$7679$1Z2PAY
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8967$1Z2PAY))))
                                                               (g$syntax-dispatch$7568$1Z2PAY
                                                                 g$t$8967$1Z2PAY
                                                                 '#(atom #f)))))
                                                           g$t$8963$1Z2PAY))))
                                                     (g$syntax-dispatch$7568$1Z2PAY
                                                       g$t$8963$1Z2PAY
                                                       '(_ any any)))))
                                                 (g$get-clause$8812$1Z2PAY
                                                   'parent-rtd
                                                   g$clause*$8957$1Z2PAY))))
                                             g$ls/false$8962$1Z2PAY)
                                           (g$syntax-violation$7679$1Z2PAY
                                             '#f
                                             '"invalid syntax"
                                             g$t$8961$1Z2PAY))))
                                      (g$syntax-dispatch$7568$1Z2PAY
                                        g$t$8961$1Z2PAY
                                        '#(atom #f)))))
                                  g$t$8958$1Z2PAY))))
                            (g$syntax-dispatch$7568$1Z2PAY
                              g$t$8958$1Z2PAY
                              '(_ any)))))
                        (g$get-clause$8812$1Z2PAY
                          'parent
                          g$clause*$8957$1Z2PAY)))))
                  (g$foo-rcd-code$8816$1Z2PAY
                    (case-lambda
                      ((g$clause*$8953$1Z2PAY
                         g$foo-rtd$8954$1Z2PAY
                         g$protocol$8955$1Z2PAY
                         g$parent-rcd-code$8956$1Z2PAY)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$8954$1Z2PAY
                         g$parent-rcd-code$8956$1Z2PAY
                         g$protocol$8955$1Z2PAY))))
                  (g$get-protocol-code$8817$1Z2PAY
                    (case-lambda
                      ((g$clause*$8947$1Z2PAY)
                       ((case-lambda
                          ((g$t$8948$1Z2PAY)
                           ((case-lambda
                              ((g$ls/false$8949$1Z2PAY)
                               (if g$ls/false$8949$1Z2PAY
                                 (apply
                                   (case-lambda
                                     ((g$expr$8950$1Z2PAY) g$expr$8950$1Z2PAY))
                                   g$ls/false$8949$1Z2PAY)
                                 ((case-lambda
                                    ((g$t$8951$1Z2PAY)
                                     ((case-lambda
                                        ((g$ls/false$8952$1Z2PAY)
                                         (if g$ls/false$8952$1Z2PAY
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$8952$1Z2PAY)
                                           (g$syntax-violation$7679$1Z2PAY
                                             '#f
                                             '"invalid syntax"
                                             g$t$8951$1Z2PAY))))
                                      (g$syntax-dispatch$7568$1Z2PAY
                                        g$t$8951$1Z2PAY
                                        '_))))
                                  g$t$8948$1Z2PAY))))
                            (g$syntax-dispatch$7568$1Z2PAY
                              g$t$8948$1Z2PAY
                              '(_ any)))))
                        (g$get-clause$8812$1Z2PAY
                          'protocol
                          g$clause*$8947$1Z2PAY)))))
                  (g$get-fields$8818$1Z2PAY
                    (case-lambda
                      ((g$clause*$8938$1Z2PAY)
                       ((case-lambda
                          ((g$t$8939$1Z2PAY)
                           ((case-lambda
                              ((g$ls/false$8940$1Z2PAY)
                               (if g$ls/false$8940$1Z2PAY
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$8940$1Z2PAY)
                                 ((case-lambda
                                    ((g$t$8941$1Z2PAY)
                                     ((case-lambda
                                        ((g$ls/false$8942$1Z2PAY)
                                         (if g$ls/false$8942$1Z2PAY
                                           (apply
                                             (case-lambda
                                               ((g$f*$8943$1Z2PAY)
                                                g$f*$8943$1Z2PAY))
                                             g$ls/false$8942$1Z2PAY)
                                           ((case-lambda
                                              ((g$t$8944$1Z2PAY)
                                               ((case-lambda
                                                  ((g$ls/false$8945$1Z2PAY)
                                                   (if g$ls/false$8945$1Z2PAY
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$8946$1Z2PAY)
                                                          (g$get-fields$8818$1Z2PAY
                                                            g$rest$8946$1Z2PAY)))
                                                       g$ls/false$8945$1Z2PAY)
                                                     (g$syntax-violation$7679$1Z2PAY
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8944$1Z2PAY))))
                                                (g$syntax-dispatch$7568$1Z2PAY
                                                  g$t$8944$1Z2PAY
                                                  '(_ . any)))))
                                            g$t$8941$1Z2PAY))))
                                      (g$syntax-dispatch$7568$1Z2PAY
                                        g$t$8941$1Z2PAY
                                        '((#(scheme-id fields) . each-any)
                                          .
                                          _)))))
                                  g$t$8939$1Z2PAY))))
                            (g$syntax-dispatch$7568$1Z2PAY
                              g$t$8939$1Z2PAY
                              '()))))
                        g$clause*$8938$1Z2PAY))))
                  (g$get-mutator-indices$8819$1Z2PAY
                    (case-lambda
                      ((g$fields$8926$1Z2PAY)
                       ((letrec ((g$f$8927$1Z2PAY
                                   (case-lambda
                                     ((g$fields$8928$1Z2PAY g$i$8929$1Z2PAY)
                                      ((case-lambda
                                         ((g$t$8930$1Z2PAY)
                                          ((case-lambda
                                             ((g$ls/false$8931$1Z2PAY)
                                              (if g$ls/false$8931$1Z2PAY
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$8931$1Z2PAY)
                                                ((case-lambda
                                                   ((g$t$8932$1Z2PAY)
                                                    ((case-lambda
                                                       ((g$ls/false$8933$1Z2PAY)
                                                        (if g$ls/false$8933$1Z2PAY
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$8934$1Z2PAY)
                                                               (cons
                                                                 g$i$8929$1Z2PAY
                                                                 (g$f$8927$1Z2PAY
                                                                   g$rest$8934$1Z2PAY
                                                                   (+ g$i$8929$1Z2PAY
                                                                      '1)))))
                                                            g$ls/false$8933$1Z2PAY)
                                                          ((case-lambda
                                                             ((g$t$8935$1Z2PAY)
                                                              ((case-lambda
                                                                 ((g$ls/false$8936$1Z2PAY)
                                                                  (if g$ls/false$8936$1Z2PAY
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$8937$1Z2PAY)
                                                                         (g$f$8927$1Z2PAY
                                                                           g$rest$8937$1Z2PAY
                                                                           (+ g$i$8929$1Z2PAY
                                                                              '1))))
                                                                      g$ls/false$8936$1Z2PAY)
                                                                    (g$syntax-violation$7679$1Z2PAY
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8935$1Z2PAY))))
                                                               (g$syntax-dispatch$7568$1Z2PAY
                                                                 g$t$8935$1Z2PAY
                                                                 '(_ . any)))))
                                                           g$t$8932$1Z2PAY))))
                                                     (g$syntax-dispatch$7568$1Z2PAY
                                                       g$t$8932$1Z2PAY
                                                       '((#(scheme-id mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$8930$1Z2PAY))))
                                           (g$syntax-dispatch$7568$1Z2PAY
                                             g$t$8930$1Z2PAY
                                             '()))))
                                       g$fields$8928$1Z2PAY)))))
                          g$f$8927$1Z2PAY)
                        g$fields$8926$1Z2PAY
                        '0))))
                  (g$get-mutators$8820$1Z2PAY
                    (case-lambda
                      ((g$foo$8905$1Z2PAY g$fields$8906$1Z2PAY)
                       (letrec* ((g$gen-name$8907$1Z2PAY
                                   (case-lambda
                                     ((g$x$8925$1Z2PAY)
                                      (g$datum->syntax$7681$1Z2PAY
                                        g$foo$8905$1Z2PAY
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7682$1Z2PAY
                                                g$foo$8905$1Z2PAY))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7682$1Z2PAY
                                                g$x$8925$1Z2PAY))
                                            '"-set!")))))))
                         ((letrec ((g$f$8908$1Z2PAY
                                     (case-lambda
                                       ((g$fields$8909$1Z2PAY)
                                        ((case-lambda
                                           ((g$t$8910$1Z2PAY)
                                            ((case-lambda
                                               ((g$ls/false$8911$1Z2PAY)
                                                (if g$ls/false$8911$1Z2PAY
                                                  (apply
                                                    (case-lambda (() '()))
                                                    g$ls/false$8911$1Z2PAY)
                                                  ((case-lambda
                                                     ((g$t$8912$1Z2PAY)
                                                      ((case-lambda
                                                         ((g$ls/false$8913$1Z2PAY)
                                                          (if g$ls/false$8913$1Z2PAY
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$8914$1Z2PAY
                                                                   g$accessor$8915$1Z2PAY
                                                                   g$mutator$8916$1Z2PAY
                                                                   g$rest$8917$1Z2PAY)
                                                                 (cons
                                                                   g$mutator$8916$1Z2PAY
                                                                   (g$f$8908$1Z2PAY
                                                                     g$rest$8917$1Z2PAY))))
                                                              g$ls/false$8913$1Z2PAY)
                                                            ((case-lambda
                                                               ((g$t$8918$1Z2PAY)
                                                                ((case-lambda
                                                                   ((g$ls/false$8919$1Z2PAY)
                                                                    (if g$ls/false$8919$1Z2PAY
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$8920$1Z2PAY
                                                                             g$rest$8921$1Z2PAY)
                                                                           (cons
                                                                             (g$gen-name$8907$1Z2PAY
                                                                               g$name$8920$1Z2PAY)
                                                                             (g$f$8908$1Z2PAY
                                                                               g$rest$8921$1Z2PAY))))
                                                                        g$ls/false$8919$1Z2PAY)
                                                                      ((case-lambda
                                                                         ((g$t$8922$1Z2PAY)
                                                                          ((case-lambda
                                                                             ((g$ls/false$8923$1Z2PAY)
                                                                              (if g$ls/false$8923$1Z2PAY
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$8924$1Z2PAY)
                                                                                     (g$f$8908$1Z2PAY
                                                                                       g$rest$8924$1Z2PAY)))
                                                                                  g$ls/false$8923$1Z2PAY)
                                                                                (g$syntax-violation$7679$1Z2PAY
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$8922$1Z2PAY))))
                                                                           (g$syntax-dispatch$7568$1Z2PAY
                                                                             g$t$8922$1Z2PAY
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$8918$1Z2PAY))))
                                                                 (g$syntax-dispatch$7568$1Z2PAY
                                                                   g$t$8918$1Z2PAY
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$8912$1Z2PAY))))
                                                       (g$syntax-dispatch$7568$1Z2PAY
                                                         g$t$8912$1Z2PAY
                                                         '((#(scheme-id mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$8910$1Z2PAY))))
                                             (g$syntax-dispatch$7568$1Z2PAY
                                               g$t$8910$1Z2PAY
                                               '()))))
                                         g$fields$8909$1Z2PAY)))))
                            g$f$8908$1Z2PAY)
                          g$fields$8906$1Z2PAY)))))
                  (g$get-accessors$8821$1Z2PAY
                    (case-lambda
                      ((g$foo$8871$1Z2PAY g$fields$8872$1Z2PAY)
                       (letrec* ((g$gen-name$8873$1Z2PAY
                                   (case-lambda
                                     ((g$x$8904$1Z2PAY)
                                      (g$datum->syntax$7681$1Z2PAY
                                        g$foo$8871$1Z2PAY
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7682$1Z2PAY
                                                g$foo$8871$1Z2PAY))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7682$1Z2PAY
                                                g$x$8904$1Z2PAY)))))))))
                         (map (case-lambda
                                ((g$field$8874$1Z2PAY)
                                 ((case-lambda
                                    ((g$t$8875$1Z2PAY)
                                     ((case-lambda
                                        ((g$ls/false$8876$1Z2PAY)
                                         (if (if g$ls/false$8876$1Z2PAY
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$name$8877$1Z2PAY
                                                        g$accessor$8878$1Z2PAY
                                                        g$mutator$8879$1Z2PAY)
                                                      (g$id?$7290$1Z2PAY
                                                        g$accessor$8878$1Z2PAY)))
                                                   g$ls/false$8876$1Z2PAY))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$name$8880$1Z2PAY
                                                  g$accessor$8881$1Z2PAY
                                                  g$mutator$8882$1Z2PAY)
                                                g$accessor$8881$1Z2PAY))
                                             g$ls/false$8876$1Z2PAY)
                                           ((case-lambda
                                              ((g$t$8883$1Z2PAY)
                                               ((case-lambda
                                                  ((g$ls/false$8884$1Z2PAY)
                                                   (if (if g$ls/false$8884$1Z2PAY
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$name$8885$1Z2PAY
                                                                  g$accessor$8886$1Z2PAY)
                                                                (g$id?$7290$1Z2PAY
                                                                  g$accessor$8886$1Z2PAY)))
                                                             g$ls/false$8884$1Z2PAY))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$name$8887$1Z2PAY
                                                            g$accessor$8888$1Z2PAY)
                                                          g$accessor$8888$1Z2PAY))
                                                       g$ls/false$8884$1Z2PAY)
                                                     ((case-lambda
                                                        ((g$t$8889$1Z2PAY)
                                                         ((case-lambda
                                                            ((g$ls/false$8890$1Z2PAY)
                                                             (if (if g$ls/false$8890$1Z2PAY
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$name$8891$1Z2PAY)
                                                                          (g$id?$7290$1Z2PAY
                                                                            g$name$8891$1Z2PAY)))
                                                                       g$ls/false$8890$1Z2PAY))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$name$8892$1Z2PAY)
                                                                    (g$gen-name$8873$1Z2PAY
                                                                      g$name$8892$1Z2PAY)))
                                                                 g$ls/false$8890$1Z2PAY)
                                                               ((case-lambda
                                                                  ((g$t$8893$1Z2PAY)
                                                                   ((case-lambda
                                                                      ((g$ls/false$8894$1Z2PAY)
                                                                       (if (if g$ls/false$8894$1Z2PAY
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$name$8895$1Z2PAY)
                                                                                    (g$id?$7290$1Z2PAY
                                                                                      g$name$8895$1Z2PAY)))
                                                                                 g$ls/false$8894$1Z2PAY))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$name$8896$1Z2PAY)
                                                                              (g$gen-name$8873$1Z2PAY
                                                                                g$name$8896$1Z2PAY)))
                                                                           g$ls/false$8894$1Z2PAY)
                                                                         ((case-lambda
                                                                            ((g$t$8897$1Z2PAY)
                                                                             ((case-lambda
                                                                                ((g$ls/false$8898$1Z2PAY)
                                                                                 (if (if g$ls/false$8898$1Z2PAY
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$name$8899$1Z2PAY)
                                                                                              (g$id?$7290$1Z2PAY
                                                                                                g$name$8899$1Z2PAY)))
                                                                                           g$ls/false$8898$1Z2PAY))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$name$8900$1Z2PAY)
                                                                                        (g$gen-name$8873$1Z2PAY
                                                                                          g$name$8900$1Z2PAY)))
                                                                                     g$ls/false$8898$1Z2PAY)
                                                                                   ((case-lambda
                                                                                      ((g$t$8901$1Z2PAY)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$8902$1Z2PAY)
                                                                                           (if g$ls/false$8902$1Z2PAY
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$others$8903$1Z2PAY)
                                                                                                  (g$syntax-violation$7679$1Z2PAY
                                                                                                    '#f
                                                                                                    '"invalid field spec"
                                                                                                    g$field$8874$1Z2PAY)))
                                                                                               g$ls/false$8902$1Z2PAY)
                                                                                             (g$syntax-violation$7679$1Z2PAY
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$8901$1Z2PAY))))
                                                                                        (g$syntax-dispatch$7568$1Z2PAY
                                                                                          g$t$8901$1Z2PAY
                                                                                          'any))))
                                                                                    g$t$8897$1Z2PAY))))
                                                                              (g$syntax-dispatch$7568$1Z2PAY
                                                                                g$t$8897$1Z2PAY
                                                                                'any))))
                                                                          g$t$8893$1Z2PAY))))
                                                                    (g$syntax-dispatch$7568$1Z2PAY
                                                                      g$t$8893$1Z2PAY
                                                                      '(#(scheme-id
                                                                          immutable)
                                                                        any)))))
                                                                g$t$8889$1Z2PAY))))
                                                          (g$syntax-dispatch$7568$1Z2PAY
                                                            g$t$8889$1Z2PAY
                                                            '(#(scheme-id
                                                                mutable)
                                                              any)))))
                                                      g$t$8883$1Z2PAY))))
                                                (g$syntax-dispatch$7568$1Z2PAY
                                                  g$t$8883$1Z2PAY
                                                  '(#(scheme-id immutable)
                                                    any
                                                    any)))))
                                            g$t$8875$1Z2PAY))))
                                      (g$syntax-dispatch$7568$1Z2PAY
                                        g$t$8875$1Z2PAY
                                        '(#(scheme-id mutable) any any any)))))
                                  g$field$8874$1Z2PAY)))
                              g$fields$8872$1Z2PAY)))))
                  (g$enumerate$8822$1Z2PAY
                    (case-lambda
                      ((g$ls$8867$1Z2PAY)
                       ((letrec ((g$f$8868$1Z2PAY
                                   (case-lambda
                                     ((g$ls$8869$1Z2PAY g$i$8870$1Z2PAY)
                                      (if (null? g$ls$8869$1Z2PAY)
                                        '()
                                        (cons
                                          g$i$8870$1Z2PAY
                                          (g$f$8868$1Z2PAY
                                            (cdr g$ls$8869$1Z2PAY)
                                            (+ g$i$8870$1Z2PAY '1))))))))
                          g$f$8868$1Z2PAY)
                        g$ls$8867$1Z2PAY
                        '0))))
                  (g$do-define-record$8823$1Z2PAY
                    (case-lambda
                      ((g$namespec$8847$1Z2PAY g$clause*$8848$1Z2PAY)
                       ((case-lambda
                          ((g$foo$8849$1Z2PAY)
                           ((case-lambda
                              ((g$foo-rtd$8850$1Z2PAY)
                               ((case-lambda
                                  ((g$foo-rcd$8851$1Z2PAY)
                                   ((case-lambda
                                      ((g$protocol$8852$1Z2PAY)
                                       ((case-lambda
                                          ((g$make-foo$8853$1Z2PAY)
                                           ((case-lambda
                                              ((g$fields$8854$1Z2PAY)
                                               ((case-lambda
                                                  ((g$idx*$8855$1Z2PAY)
                                                   ((case-lambda
                                                      ((g$foo-x*$8856$1Z2PAY)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$8857$1Z2PAY)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$8858$1Z2PAY)
                                                               ((case-lambda
                                                                  ((g$foo?$8859$1Z2PAY)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$8860$1Z2PAY)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$8861$1Z2PAY)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$8862$1Z2PAY)
                                                                               ((case-lambda
                                                                                  (()
                                                                                   (g$bless$7531$1Z2PAY
                                                                                     (cons
                                                                                       'begin
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rtd$8850$1Z2PAY
                                                                                           g$foo-rtd-code$8860$1Z2PAY)
                                                                                         (cons
                                                                                           (list
                                                                                             'define
                                                                                             g$protocol$8852$1Z2PAY
                                                                                             g$protocol-code$8862$1Z2PAY)
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo-rcd$8851$1Z2PAY
                                                                                               g$foo-rcd-code$8861$1Z2PAY)
                                                                                             (cons
                                                                                               (list
                                                                                                 'define-syntax
                                                                                                 g$foo$8849$1Z2PAY
                                                                                                 (list
                                                                                                   'list
                                                                                                   ''$rtd
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rtd$8850$1Z2PAY)
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rcd$8851$1Z2PAY)))
                                                                                               (cons
                                                                                                 (list
                                                                                                   'define
                                                                                                   g$foo?$8859$1Z2PAY
                                                                                                   (list
                                                                                                     'record-predicate
                                                                                                     g$foo-rtd$8850$1Z2PAY))
                                                                                                 (cons
                                                                                                   (list
                                                                                                     'define
                                                                                                     g$make-foo$8853$1Z2PAY
                                                                                                     (list
                                                                                                       'record-constructor
                                                                                                       g$foo-rcd$8851$1Z2PAY))
                                                                                                   (append
                                                                                                     (map (case-lambda
                                                                                                            ((g$foo-x$8863$1Z2PAY
                                                                                                               g$idx$8864$1Z2PAY)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$foo-x$8863$1Z2PAY
                                                                                                               (list
                                                                                                                 'record-accessor
                                                                                                                 g$foo-rtd$8850$1Z2PAY
                                                                                                                 g$idx$8864$1Z2PAY))))
                                                                                                          g$foo-x*$8856$1Z2PAY
                                                                                                          g$idx*$8855$1Z2PAY)
                                                                                                     (map (case-lambda
                                                                                                            ((g$set-foo-x!$8865$1Z2PAY
                                                                                                               g$idx$8866$1Z2PAY)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$set-foo-x!$8865$1Z2PAY
                                                                                                               (list
                                                                                                                 'record-mutator
                                                                                                                 g$foo-rtd$8850$1Z2PAY
                                                                                                                 g$idx$8866$1Z2PAY))))
                                                                                                          g$set-foo-x!*$8857$1Z2PAY
                                                                                                          g$set-foo-idx*$8858$1Z2PAY)))))))))))))))
                                                                            (g$get-protocol-code$8817$1Z2PAY
                                                                              g$clause*$8848$1Z2PAY))))
                                                                        (g$foo-rcd-code$8816$1Z2PAY
                                                                          g$clause*$8848$1Z2PAY
                                                                          g$foo-rtd$8850$1Z2PAY
                                                                          g$protocol$8852$1Z2PAY
                                                                          (g$parent-rcd-code$8815$1Z2PAY
                                                                            g$clause*$8848$1Z2PAY)))))
                                                                    (g$foo-rtd-code$8813$1Z2PAY
                                                                      g$foo$8849$1Z2PAY
                                                                      g$clause*$8848$1Z2PAY
                                                                      (g$parent-rtd-code$8814$1Z2PAY
                                                                        g$clause*$8848$1Z2PAY)))))
                                                                (g$get-record-predicate-name$8811$1Z2PAY
                                                                  g$namespec$8847$1Z2PAY))))
                                                            (g$get-mutator-indices$8819$1Z2PAY
                                                              g$fields$8854$1Z2PAY))))
                                                        (g$get-mutators$8820$1Z2PAY
                                                          g$foo$8849$1Z2PAY
                                                          g$fields$8854$1Z2PAY))))
                                                    (g$get-accessors$8821$1Z2PAY
                                                      g$foo$8849$1Z2PAY
                                                      g$fields$8854$1Z2PAY))))
                                                (g$enumerate$8822$1Z2PAY
                                                  g$fields$8854$1Z2PAY))))
                                            (g$get-fields$8818$1Z2PAY
                                              g$clause*$8848$1Z2PAY))))
                                        (g$get-record-constructor-name$8810$1Z2PAY
                                          g$namespec$8847$1Z2PAY))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$8809$1Z2PAY
                          g$namespec$8847$1Z2PAY)))))
                  (g$verify-clauses$8824$1Z2PAY
                    (case-lambda
                      ((g$x$8829$1Z2PAY g$cls*$8830$1Z2PAY)
                       (letrec* ((g$valid-kwds$8831$1Z2PAY
                                   (map g$bless$7531$1Z2PAY
                                        '(fields
                                           parent
                                           parent-rtd
                                           protocol
                                           sealed
                                           opaque
                                           nongenerative)))
                                 (g$free-id-member?$8832$1Z2PAY
                                   (case-lambda
                                     ((g$x$8844$1Z2PAY g$ls$8845$1Z2PAY)
                                      (if (pair? g$ls$8845$1Z2PAY)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$8846$1Z2PAY)
                                              (if g$t$8846$1Z2PAY
                                                g$t$8846$1Z2PAY
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$8832$1Z2PAY
                                                    g$x$8844$1Z2PAY
                                                    (cdr g$ls$8845$1Z2PAY))))))
                                           (g$free-id=?$7294$1Z2PAY
                                             g$x$8844$1Z2PAY
                                             (car g$ls$8845$1Z2PAY))))
                                        '#f)))))
                         ((letrec ((g$f$8833$1Z2PAY
                                     (case-lambda
                                       ((g$cls*$8834$1Z2PAY g$seen*$8835$1Z2PAY)
                                        (if (not (null? g$cls*$8834$1Z2PAY))
                                          ((case-lambda
                                             ((g$t$8836$1Z2PAY)
                                              ((case-lambda
                                                 ((g$ls/false$8837$1Z2PAY)
                                                  (if g$ls/false$8837$1Z2PAY
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$8838$1Z2PAY
                                                           g$rest$8839$1Z2PAY)
                                                         (if ((case-lambda
                                                                ((g$t$8840$1Z2PAY)
                                                                 (if g$t$8840$1Z2PAY
                                                                   g$t$8840$1Z2PAY
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$8832$1Z2PAY
                                                                            g$kwd$8838$1Z2PAY
                                                                            g$valid-kwds$8831$1Z2PAY))))))
                                                              (not (g$id?$7290$1Z2PAY
                                                                     g$kwd$8838$1Z2PAY)))
                                                           (g$syntax-violation$7679$1Z2PAY
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$8838$1Z2PAY)
                                                           (if (g$bound-id-member?$7297$1Z2PAY
                                                                 g$kwd$8838$1Z2PAY
                                                                 g$seen*$8835$1Z2PAY)
                                                             (g$syntax-violation$7679$1Z2PAY
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$8829$1Z2PAY
                                                               g$kwd$8838$1Z2PAY)
                                                             (g$f$8833$1Z2PAY
                                                               (cdr g$cls*$8834$1Z2PAY)
                                                               (cons
                                                                 g$kwd$8838$1Z2PAY
                                                                 g$seen*$8835$1Z2PAY))))))
                                                      g$ls/false$8837$1Z2PAY)
                                                    ((case-lambda
                                                       ((g$t$8841$1Z2PAY)
                                                        ((case-lambda
                                                           ((g$ls/false$8842$1Z2PAY)
                                                            (if g$ls/false$8842$1Z2PAY
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$8843$1Z2PAY)
                                                                   (g$syntax-violation$7679$1Z2PAY
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$8843$1Z2PAY)))
                                                                g$ls/false$8842$1Z2PAY)
                                                              (g$syntax-violation$7679$1Z2PAY
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8841$1Z2PAY))))
                                                         (g$syntax-dispatch$7568$1Z2PAY
                                                           g$t$8841$1Z2PAY
                                                           'any))))
                                                     g$t$8836$1Z2PAY))))
                                               (g$syntax-dispatch$7568$1Z2PAY
                                                 g$t$8836$1Z2PAY
                                                 '(any . any)))))
                                           (car g$cls*$8834$1Z2PAY))
                                          (void))))))
                            g$f$8833$1Z2PAY)
                          g$cls*$8830$1Z2PAY
                          '()))))))
          ((case-lambda
             ((g$t$8825$1Z2PAY)
              ((case-lambda
                 ((g$ls/false$8826$1Z2PAY)
                  (if g$ls/false$8826$1Z2PAY
                    (apply
                      (case-lambda
                        ((g$namespec$8827$1Z2PAY g$clause*$8828$1Z2PAY)
                         (begin
                           (g$verify-clauses$8824$1Z2PAY
                             g$x$8807$1Z2PAY
                             g$clause*$8828$1Z2PAY)
                           (g$do-define-record$8823$1Z2PAY
                             g$namespec$8827$1Z2PAY
                             g$clause*$8828$1Z2PAY))))
                      g$ls/false$8826$1Z2PAY)
                    (g$syntax-violation$7679$1Z2PAY
                      '#f
                      '"invalid syntax"
                      g$t$8825$1Z2PAY))))
               (g$syntax-dispatch$7568$1Z2PAY
                 g$t$8825$1Z2PAY
                 '(_ any . each-any)))))
           g$x$8807$1Z2PAY)))))
   (g$define-condition-type-macro$7563$1Z2PAY
     g$define-condition-type-macro$11054$1Z2PAY
     (case-lambda
       ((g$x$9063$1Z2PAY)
        (letrec* ((g$mkname$9064$1Z2PAY
                    (case-lambda
                      ((g$name$9087$1Z2PAY g$suffix$9088$1Z2PAY)
                       (g$datum->syntax$7681$1Z2PAY
                         g$name$9087$1Z2PAY
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$7682$1Z2PAY g$name$9087$1Z2PAY))
                             g$suffix$9088$1Z2PAY)))))))
          ((case-lambda
             ((g$t$9065$1Z2PAY)
              ((case-lambda
                 ((g$ls/false$9066$1Z2PAY)
                  (if (if g$ls/false$9066$1Z2PAY
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$9067$1Z2PAY
                                 g$name$9068$1Z2PAY
                                 g$super$9069$1Z2PAY
                                 g$constructor$9070$1Z2PAY
                                 g$predicate$9071$1Z2PAY
                                 g$field*$9072$1Z2PAY
                                 g$accessor*$9073$1Z2PAY)
                               (if (g$id?$7290$1Z2PAY g$name$9068$1Z2PAY)
                                 (if (g$id?$7290$1Z2PAY g$super$9069$1Z2PAY)
                                   (if (g$id?$7290$1Z2PAY
                                         g$constructor$9070$1Z2PAY)
                                     (if (g$id?$7290$1Z2PAY
                                           g$predicate$9071$1Z2PAY)
                                       (if (g$for-all$5014$1Z2PAY
                                             g$id?$7290$1Z2PAY
                                             g$field*$9072$1Z2PAY)
                                         (begin
                                           '#f
                                           (g$for-all$5014$1Z2PAY
                                             g$id?$7290$1Z2PAY
                                             g$accessor*$9073$1Z2PAY))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$9066$1Z2PAY))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$9074$1Z2PAY
                           g$name$9075$1Z2PAY
                           g$super$9076$1Z2PAY
                           g$constructor$9077$1Z2PAY
                           g$predicate$9078$1Z2PAY
                           g$field*$9079$1Z2PAY
                           g$accessor*$9080$1Z2PAY)
                         ((case-lambda
                            ((g$aux-accessor*$9081$1Z2PAY)
                             (g$bless$7531$1Z2PAY
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$9075$1Z2PAY
                                         g$constructor$9077$1Z2PAY
                                         (gensym))
                                       (cons
                                         (list 'parent g$super$9076$1Z2PAY)
                                         (cons
                                           (cons
                                             'fields
                                             (map (case-lambda
                                                    ((g$field$9082$1Z2PAY
                                                       g$aux$9083$1Z2PAY)
                                                     (list
                                                       'immutable
                                                       g$field$9082$1Z2PAY
                                                       g$aux$9083$1Z2PAY)))
                                                  g$field*$9079$1Z2PAY
                                                  g$aux-accessor*$9081$1Z2PAY))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$9078$1Z2PAY
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$9075$1Z2PAY)))
                                     (map (case-lambda
                                            ((g$accessor$9084$1Z2PAY
                                               g$aux$9085$1Z2PAY)
                                             (list
                                               'define
                                               g$accessor$9084$1Z2PAY
                                               (list
                                                 'condition-accessor
                                                 (list
                                                   'record-type-descriptor
                                                   g$name$9075$1Z2PAY)
                                                 g$aux$9085$1Z2PAY))))
                                          g$accessor*$9080$1Z2PAY
                                          g$aux-accessor*$9081$1Z2PAY)))))))
                          (map (case-lambda ((g$x$9086$1Z2PAY) (gensym)))
                               g$accessor*$9080$1Z2PAY))))
                      g$ls/false$9066$1Z2PAY)
                    (g$syntax-violation$7679$1Z2PAY
                      '#f
                      '"invalid syntax"
                      g$t$9065$1Z2PAY))))
               (g$syntax-dispatch$7568$1Z2PAY
                 g$t$9065$1Z2PAY
                 '(any any any any any . #(each (any any)))))))
           g$x$9063$1Z2PAY)))))
   (g$incorrect-usage-macro$7564$1Z2PAY
     g$incorrect-usage-macro$11055$1Z2PAY
     (case-lambda
       ((g$e$9089$1Z2PAY)
        (g$syntax-violation$7679$1Z2PAY
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$9089$1Z2PAY))))
   (g$parameterize-macro$7565$1Z2PAY
     g$parameterize-macro$11056$1Z2PAY
     (case-lambda
       ((g$e$9090$1Z2PAY)
        ((case-lambda
           ((g$t$9091$1Z2PAY)
            ((case-lambda
               ((g$ls/false$9092$1Z2PAY)
                (if g$ls/false$9092$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$b$9093$1Z2PAY g$b*$9094$1Z2PAY)
                       (g$bless$7531$1Z2PAY
                         (cons
                           'let
                           (cons
                             '()
                             (cons g$b$9093$1Z2PAY g$b*$9094$1Z2PAY))))))
                    g$ls/false$9092$1Z2PAY)
                  ((case-lambda
                     ((g$t$9095$1Z2PAY)
                      ((case-lambda
                         ((g$ls/false$9096$1Z2PAY)
                          (if g$ls/false$9096$1Z2PAY
                            (apply
                              (case-lambda
                                ((g$olhs*$9097$1Z2PAY
                                   g$orhs*$9098$1Z2PAY
                                   g$b$9099$1Z2PAY
                                   g$b*$9100$1Z2PAY)
                                 ((case-lambda
                                    ((g$lhs*$9101$1Z2PAY g$rhs*$9102$1Z2PAY)
                                     (g$bless$7531$1Z2PAY
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$9101$1Z2PAY
                                             g$rhs*$9102$1Z2PAY)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (map (case-lambda
                                                            ((g$lhs$9103$1Z2PAY
                                                               g$rhs$9104$1Z2PAY)
                                                             (list
                                                               'let
                                                               (list
                                                                 (list
                                                                   't
                                                                   (list
                                                                     g$lhs$9103$1Z2PAY)))
                                                               (list
                                                                 g$lhs$9103$1Z2PAY
                                                                 g$rhs$9104$1Z2PAY)
                                                               (cons
                                                                 'set!
                                                                 (cons
                                                                   g$rhs$9104$1Z2PAY
                                                                   '(t))))))
                                                          g$lhs*$9101$1Z2PAY
                                                          g$rhs*$9102$1Z2PAY)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$9099$1Z2PAY
                                                         g$b*$9100$1Z2PAY)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$9097$1Z2PAY
                                           g$orhs*$9098$1Z2PAY)))))
                                  (g$generate-temporaries$7669$1Z2PAY
                                    g$olhs*$9097$1Z2PAY)
                                  (g$generate-temporaries$7669$1Z2PAY
                                    g$orhs*$9098$1Z2PAY))))
                              g$ls/false$9096$1Z2PAY)
                            (g$syntax-violation$7679$1Z2PAY
                              '#f
                              '"invalid syntax"
                              g$t$9095$1Z2PAY))))
                       (g$syntax-dispatch$7568$1Z2PAY
                         g$t$9095$1Z2PAY
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$9091$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$9091$1Z2PAY
               '(_ () any . each-any)))))
         g$e$9090$1Z2PAY))))
   (g$foreign-call-transformer$7566$1Z2PAY
     g$foreign-call-transformer$11057$1Z2PAY
     (case-lambda
       ((g$e$9105$1Z2PAY g$r$9106$1Z2PAY g$mr$9107$1Z2PAY)
        ((case-lambda
           ((g$t$9108$1Z2PAY)
            ((case-lambda
               ((g$ls/false$9109$1Z2PAY)
                (if g$ls/false$9109$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$name$9110$1Z2PAY g$arg*$9111$1Z2PAY)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$7586$1Z2PAY
                             g$name$9110$1Z2PAY
                             g$r$9106$1Z2PAY
                             g$mr$9107$1Z2PAY)
                           (g$chi-expr*$7584$1Z2PAY
                             g$arg*$9111$1Z2PAY
                             g$r$9106$1Z2PAY
                             g$mr$9107$1Z2PAY)))))
                    g$ls/false$9109$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$9108$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$9108$1Z2PAY
               '(_ any . each-any)))))
         g$e$9105$1Z2PAY))))
   (g$convert-pattern$7567$1Z2PAY
     g$convert-pattern$11058$1Z2PAY
     (case-lambda
       ((g$pattern$9112$1Z2PAY g$keys$9113$1Z2PAY)
        (letrec* ((g$cvt*$9114$1Z2PAY
                    (case-lambda
                      ((g$p*$9194$1Z2PAY g$n$9195$1Z2PAY g$ids$9196$1Z2PAY)
                       (if (null? g$p*$9194$1Z2PAY)
                         (values '() g$ids$9196$1Z2PAY)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$9114$1Z2PAY
                                (cdr g$p*$9194$1Z2PAY)
                                g$n$9195$1Z2PAY
                                g$ids$9196$1Z2PAY)))
                           (case-lambda
                             ((g$y$9199$1Z2PAY g$ids$9200$1Z2PAY)
                              ((case-lambda
                                 ((g$ids$9201$1Z2PAY g$y$9202$1Z2PAY)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$9115$1Z2PAY
                                         (car g$p*$9194$1Z2PAY)
                                         g$n$9195$1Z2PAY
                                         g$ids$9201$1Z2PAY)))
                                    (case-lambda
                                      ((g$x$9205$1Z2PAY g$ids$9206$1Z2PAY)
                                       ((case-lambda
                                          ((g$ids$9207$1Z2PAY g$x$9208$1Z2PAY)
                                           (values
                                             (cons
                                               g$x$9208$1Z2PAY
                                               g$y$9202$1Z2PAY)
                                             g$ids$9207$1Z2PAY)))
                                        g$ids$9206$1Z2PAY
                                        g$x$9205$1Z2PAY))))))
                               g$ids$9200$1Z2PAY
                               g$y$9199$1Z2PAY))))))))
                  (g$cvt$9115$1Z2PAY
                    (case-lambda
                      ((g$p$9116$1Z2PAY g$n$9117$1Z2PAY g$ids$9118$1Z2PAY)
                       ((case-lambda
                          ((g$t$9119$1Z2PAY)
                           ((case-lambda
                              ((g$ls/false$9120$1Z2PAY)
                               (if (if g$ls/false$9120$1Z2PAY
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$9121$1Z2PAY)
                                            (g$id?$7290$1Z2PAY
                                              g$id$9121$1Z2PAY)))
                                         g$ls/false$9120$1Z2PAY))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$9122$1Z2PAY)
                                      (if (g$bound-id-member?$7297$1Z2PAY
                                            g$p$9116$1Z2PAY
                                            g$keys$9113$1Z2PAY)
                                        (values
                                          (vector 'free-id g$p$9116$1Z2PAY)
                                          g$ids$9118$1Z2PAY)
                                        (if (g$free-id=?$7294$1Z2PAY
                                              g$p$9116$1Z2PAY
                                              (g$scheme-stx$7511$1Z2PAY '_))
                                          (values '_ g$ids$9118$1Z2PAY)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$9116$1Z2PAY
                                                g$n$9117$1Z2PAY)
                                              g$ids$9118$1Z2PAY))))))
                                   g$ls/false$9120$1Z2PAY)
                                 ((case-lambda
                                    ((g$t$9123$1Z2PAY)
                                     ((case-lambda
                                        ((g$ls/false$9124$1Z2PAY)
                                         (if (if g$ls/false$9124$1Z2PAY
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9125$1Z2PAY
                                                        g$dots$9126$1Z2PAY)
                                                      (g$ellipsis?$7569$1Z2PAY
                                                        g$dots$9126$1Z2PAY)))
                                                   g$ls/false$9124$1Z2PAY))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$9127$1Z2PAY
                                                  g$dots$9128$1Z2PAY)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$9115$1Z2PAY
                                                       g$p$9127$1Z2PAY
                                                       (+ g$n$9117$1Z2PAY '1)
                                                       g$ids$9118$1Z2PAY)))
                                                  (case-lambda
                                                    ((g$p$9131$1Z2PAY
                                                       g$ids$9132$1Z2PAY)
                                                     ((case-lambda
                                                        ((g$ids$9133$1Z2PAY
                                                           g$p$9134$1Z2PAY)
                                                         (values
                                                           (if (eq? g$p$9134$1Z2PAY
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$9134$1Z2PAY))
                                                           g$ids$9133$1Z2PAY)))
                                                      g$ids$9132$1Z2PAY
                                                      g$p$9131$1Z2PAY))))))
                                             g$ls/false$9124$1Z2PAY)
                                           ((case-lambda
                                              ((g$t$9135$1Z2PAY)
                                               ((case-lambda
                                                  ((g$ls/false$9136$1Z2PAY)
                                                   (if (if g$ls/false$9136$1Z2PAY
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$9137$1Z2PAY
                                                                  g$dots$9138$1Z2PAY
                                                                  g$ys$9139$1Z2PAY
                                                                  g$z$9140$1Z2PAY)
                                                                (g$ellipsis?$7569$1Z2PAY
                                                                  g$dots$9138$1Z2PAY)))
                                                             g$ls/false$9136$1Z2PAY))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9141$1Z2PAY
                                                            g$dots$9142$1Z2PAY
                                                            g$ys$9143$1Z2PAY
                                                            g$z$9144$1Z2PAY)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$9115$1Z2PAY
                                                                 g$z$9144$1Z2PAY
                                                                 g$n$9117$1Z2PAY
                                                                 g$ids$9118$1Z2PAY)))
                                                            (case-lambda
                                                              ((g$z$9147$1Z2PAY
                                                                 g$ids$9148$1Z2PAY)
                                                               ((case-lambda
                                                                  ((g$ids$9149$1Z2PAY
                                                                     g$z$9150$1Z2PAY)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$9114$1Z2PAY
                                                                          g$ys$9143$1Z2PAY
                                                                          g$n$9117$1Z2PAY
                                                                          g$ids$9149$1Z2PAY)))
                                                                     (case-lambda
                                                                       ((g$ys$9153$1Z2PAY
                                                                          g$ids$9154$1Z2PAY)
                                                                        ((case-lambda
                                                                           ((g$ids$9155$1Z2PAY
                                                                              g$ys$9156$1Z2PAY)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$9115$1Z2PAY
                                                                                   g$x$9141$1Z2PAY
                                                                                   (+ g$n$9117$1Z2PAY
                                                                                      '1)
                                                                                   g$ids$9155$1Z2PAY)))
                                                                              (case-lambda
                                                                                ((g$x$9159$1Z2PAY
                                                                                   g$ids$9160$1Z2PAY)
                                                                                 ((case-lambda
                                                                                    ((g$ids$9161$1Z2PAY
                                                                                       g$x$9162$1Z2PAY)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$9162$1Z2PAY
                                                                                         (reverse
                                                                                           g$ys$9156$1Z2PAY)
                                                                                         g$z$9150$1Z2PAY)
                                                                                       g$ids$9161$1Z2PAY)))
                                                                                  g$ids$9160$1Z2PAY
                                                                                  g$x$9159$1Z2PAY))))))
                                                                         g$ids$9154$1Z2PAY
                                                                         g$ys$9153$1Z2PAY))))))
                                                                g$ids$9148$1Z2PAY
                                                                g$z$9147$1Z2PAY))))))
                                                       g$ls/false$9136$1Z2PAY)
                                                     ((case-lambda
                                                        ((g$t$9163$1Z2PAY)
                                                         ((case-lambda
                                                            ((g$ls/false$9164$1Z2PAY)
                                                             (if g$ls/false$9164$1Z2PAY
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$9165$1Z2PAY
                                                                      g$y$9166$1Z2PAY)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$9115$1Z2PAY
                                                                           g$y$9166$1Z2PAY
                                                                           g$n$9117$1Z2PAY
                                                                           g$ids$9118$1Z2PAY)))
                                                                      (case-lambda
                                                                        ((g$y$9169$1Z2PAY
                                                                           g$ids$9170$1Z2PAY)
                                                                         ((case-lambda
                                                                            ((g$ids$9171$1Z2PAY
                                                                               g$y$9172$1Z2PAY)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$9115$1Z2PAY
                                                                                    g$x$9165$1Z2PAY
                                                                                    g$n$9117$1Z2PAY
                                                                                    g$ids$9171$1Z2PAY)))
                                                                               (case-lambda
                                                                                 ((g$x$9175$1Z2PAY
                                                                                    g$ids$9176$1Z2PAY)
                                                                                  ((case-lambda
                                                                                     ((g$ids$9177$1Z2PAY
                                                                                        g$x$9178$1Z2PAY)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$9178$1Z2PAY
                                                                                          g$y$9172$1Z2PAY)
                                                                                        g$ids$9177$1Z2PAY)))
                                                                                   g$ids$9176$1Z2PAY
                                                                                   g$x$9175$1Z2PAY))))))
                                                                          g$ids$9170$1Z2PAY
                                                                          g$y$9169$1Z2PAY))))))
                                                                 g$ls/false$9164$1Z2PAY)
                                                               ((case-lambda
                                                                  ((g$t$9179$1Z2PAY)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9180$1Z2PAY)
                                                                       (if g$ls/false$9180$1Z2PAY
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$9118$1Z2PAY)))
                                                                           g$ls/false$9180$1Z2PAY)
                                                                         ((case-lambda
                                                                            ((g$t$9181$1Z2PAY)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9182$1Z2PAY)
                                                                                 (if (if g$ls/false$9182$1Z2PAY
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$9183$1Z2PAY)
                                                                                              (not (g$stx?$7262$1Z2PAY
                                                                                                     g$p$9183$1Z2PAY))))
                                                                                           g$ls/false$9182$1Z2PAY))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$9184$1Z2PAY)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$9115$1Z2PAY
                                                                                               g$p$9184$1Z2PAY
                                                                                               g$n$9117$1Z2PAY
                                                                                               g$ids$9118$1Z2PAY)))
                                                                                          (case-lambda
                                                                                            ((g$p$9187$1Z2PAY
                                                                                               g$ids$9188$1Z2PAY)
                                                                                             ((case-lambda
                                                                                                ((g$ids$9189$1Z2PAY
                                                                                                   g$p$9190$1Z2PAY)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$9190$1Z2PAY)
                                                                                                   g$ids$9189$1Z2PAY)))
                                                                                              g$ids$9188$1Z2PAY
                                                                                              g$p$9187$1Z2PAY))))))
                                                                                     g$ls/false$9182$1Z2PAY)
                                                                                   ((case-lambda
                                                                                      ((g$t$9191$1Z2PAY)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9192$1Z2PAY)
                                                                                           (if g$ls/false$9192$1Z2PAY
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$9193$1Z2PAY)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$7301$1Z2PAY
                                                                                                        g$datum$9193$1Z2PAY))
                                                                                                    g$ids$9118$1Z2PAY)))
                                                                                               g$ls/false$9192$1Z2PAY)
                                                                                             (g$syntax-violation$7679$1Z2PAY
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$9191$1Z2PAY))))
                                                                                        (g$syntax-dispatch$7568$1Z2PAY
                                                                                          g$t$9191$1Z2PAY
                                                                                          'any))))
                                                                                    g$t$9181$1Z2PAY))))
                                                                              (g$syntax-dispatch$7568$1Z2PAY
                                                                                g$t$9181$1Z2PAY
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$9179$1Z2PAY))))
                                                                    (g$syntax-dispatch$7568$1Z2PAY
                                                                      g$t$9179$1Z2PAY
                                                                      '()))))
                                                                g$t$9163$1Z2PAY))))
                                                          (g$syntax-dispatch$7568$1Z2PAY
                                                            g$t$9163$1Z2PAY
                                                            '(any . any)))))
                                                      g$t$9135$1Z2PAY))))
                                                (g$syntax-dispatch$7568$1Z2PAY
                                                  g$t$9135$1Z2PAY
                                                  '(any any
                                                        .
                                                        #(each+ any () any))))))
                                            g$t$9123$1Z2PAY))))
                                      (g$syntax-dispatch$7568$1Z2PAY
                                        g$t$9123$1Z2PAY
                                        '(any any)))))
                                  g$t$9119$1Z2PAY))))
                            (g$syntax-dispatch$7568$1Z2PAY
                              g$t$9119$1Z2PAY
                              'any))))
                        g$p$9116$1Z2PAY)))))
          (g$cvt$9115$1Z2PAY g$pattern$9112$1Z2PAY '0 '())))))
   (g$syntax-dispatch$7568$1Z2PAY
     g$syntax-dispatch$11059$1Z2PAY
     ((case-lambda
        (()
         (letrec* ((g$stx^$9209$1Z2PAY
                     (case-lambda
                       ((g$e$9319$1Z2PAY
                          g$m*$9320$1Z2PAY
                          g$s*$9321$1Z2PAY
                          g$ae*$9322$1Z2PAY)
                        (if (if (null? g$m*$9320$1Z2PAY)
                              (if (null? g$s*$9321$1Z2PAY)
                                (begin '#f (null? g$ae*$9322$1Z2PAY))
                                '#f)
                              '#f)
                          g$e$9319$1Z2PAY
                          (g$mkstx$7278$1Z2PAY
                            g$e$9319$1Z2PAY
                            g$m*$9320$1Z2PAY
                            g$s*$9321$1Z2PAY
                            g$ae*$9322$1Z2PAY)))))
                   (g$match-each$9210$1Z2PAY
                     (case-lambda
                       ((g$e$9303$1Z2PAY
                          g$p$9304$1Z2PAY
                          g$m*$9305$1Z2PAY
                          g$s*$9306$1Z2PAY
                          g$ae*$9307$1Z2PAY)
                        (if (pair? g$e$9303$1Z2PAY)
                          ((case-lambda
                             ((g$first$9308$1Z2PAY)
                              (if g$first$9308$1Z2PAY
                                (begin
                                  '#f
                                  ((case-lambda
                                     ((g$rest$9309$1Z2PAY)
                                      (if g$rest$9309$1Z2PAY
                                        (begin
                                          '#f
                                          (cons
                                            g$first$9308$1Z2PAY
                                            g$rest$9309$1Z2PAY))
                                        '#f)))
                                   (g$match-each$9210$1Z2PAY
                                     (cdr g$e$9303$1Z2PAY)
                                     g$p$9304$1Z2PAY
                                     g$m*$9305$1Z2PAY
                                     g$s*$9306$1Z2PAY
                                     g$ae*$9307$1Z2PAY)))
                                '#f)))
                           (g$match$9216$1Z2PAY
                             (car g$e$9303$1Z2PAY)
                             g$p$9304$1Z2PAY
                             g$m*$9305$1Z2PAY
                             g$s*$9306$1Z2PAY
                             g$ae*$9307$1Z2PAY
                             '()))
                          (if (null? g$e$9303$1Z2PAY)
                            '()
                            (if (g$stx?$7262$1Z2PAY g$e$9303$1Z2PAY)
                              (if (not (g$top-marked?$7228$1Z2PAY
                                         g$m*$9305$1Z2PAY))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7277$1Z2PAY
                                         g$m*$9305$1Z2PAY
                                         g$s*$9306$1Z2PAY
                                         g$ae*$9307$1Z2PAY
                                         g$e$9303$1Z2PAY)))
                                    (case-lambda
                                      ((g$m*$9313$1Z2PAY
                                         g$s*$9314$1Z2PAY
                                         g$ae*$9315$1Z2PAY)
                                       ((case-lambda
                                          ((g$ae*$9316$1Z2PAY
                                             g$s*$9317$1Z2PAY
                                             g$m*$9318$1Z2PAY)
                                           (g$match-each$9210$1Z2PAY
                                             (g$stx-expr$7264$1Z2PAY
                                               g$e$9303$1Z2PAY)
                                             g$p$9304$1Z2PAY
                                             g$m*$9318$1Z2PAY
                                             g$s*$9317$1Z2PAY
                                             g$ae*$9316$1Z2PAY)))
                                        g$ae*$9315$1Z2PAY
                                        g$s*$9314$1Z2PAY
                                        g$m*$9313$1Z2PAY)))))
                                '#f)
                              (if (annotation? g$e$9303$1Z2PAY)
                                (g$match-each$9210$1Z2PAY
                                  (annotation-expression g$e$9303$1Z2PAY)
                                  g$p$9304$1Z2PAY
                                  g$m*$9305$1Z2PAY
                                  g$s*$9306$1Z2PAY
                                  g$ae*$9307$1Z2PAY)
                                '#f)))))))
                   (g$match-each+$9211$1Z2PAY
                     (case-lambda
                       ((g$e$9271$1Z2PAY
                          g$x-pat$9272$1Z2PAY
                          g$y-pat$9273$1Z2PAY
                          g$z-pat$9274$1Z2PAY
                          g$m*$9275$1Z2PAY
                          g$s*$9276$1Z2PAY
                          g$ae*$9277$1Z2PAY
                          g$r$9278$1Z2PAY)
                        ((letrec ((g$f$9279$1Z2PAY
                                    (case-lambda
                                      ((g$e$9280$1Z2PAY
                                         g$m*$9281$1Z2PAY
                                         g$s*$9282$1Z2PAY
                                         g$ae*$9283$1Z2PAY)
                                       (if (pair? g$e$9280$1Z2PAY)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$f$9279$1Z2PAY
                                                (cdr g$e$9280$1Z2PAY)
                                                g$m*$9281$1Z2PAY
                                                g$s*$9282$1Z2PAY
                                                g$ae*$9283$1Z2PAY)))
                                           (case-lambda
                                             ((g$xr*$9287$1Z2PAY
                                                g$y-pat$9288$1Z2PAY
                                                g$r$9289$1Z2PAY)
                                              ((case-lambda
                                                 ((g$r$9290$1Z2PAY
                                                    g$y-pat$9291$1Z2PAY
                                                    g$xr*$9292$1Z2PAY)
                                                  (if g$r$9290$1Z2PAY
                                                    (if (null?
                                                          g$y-pat$9291$1Z2PAY)
                                                      ((case-lambda
                                                         ((g$xr$9293$1Z2PAY)
                                                          (if g$xr$9293$1Z2PAY
                                                            (values
                                                              (cons
                                                                g$xr$9293$1Z2PAY
                                                                g$xr*$9292$1Z2PAY)
                                                              g$y-pat$9291$1Z2PAY
                                                              g$r$9290$1Z2PAY)
                                                            (values
                                                              '#f
                                                              '#f
                                                              '#f))))
                                                       (g$match$9216$1Z2PAY
                                                         (car g$e$9280$1Z2PAY)
                                                         g$x-pat$9272$1Z2PAY
                                                         g$m*$9281$1Z2PAY
                                                         g$s*$9282$1Z2PAY
                                                         g$ae*$9283$1Z2PAY
                                                         '()))
                                                      (values
                                                        '()
                                                        (cdr g$y-pat$9291$1Z2PAY)
                                                        (g$match$9216$1Z2PAY
                                                          (car g$e$9280$1Z2PAY)
                                                          (car g$y-pat$9291$1Z2PAY)
                                                          g$m*$9281$1Z2PAY
                                                          g$s*$9282$1Z2PAY
                                                          g$ae*$9283$1Z2PAY
                                                          g$r$9290$1Z2PAY)))
                                                    (values '#f '#f '#f))))
                                               g$r$9289$1Z2PAY
                                               g$y-pat$9288$1Z2PAY
                                               g$xr*$9287$1Z2PAY))))
                                         (if (g$stx?$7262$1Z2PAY
                                               g$e$9280$1Z2PAY)
                                           (if (g$top-marked?$7228$1Z2PAY
                                                 g$m*$9281$1Z2PAY)
                                             (values
                                               '()
                                               g$y-pat$9273$1Z2PAY
                                               (g$match$9216$1Z2PAY
                                                 g$e$9280$1Z2PAY
                                                 g$z-pat$9274$1Z2PAY
                                                 g$m*$9281$1Z2PAY
                                                 g$s*$9282$1Z2PAY
                                                 g$ae*$9283$1Z2PAY
                                                 g$r$9278$1Z2PAY))
                                             (call-with-values
                                               (case-lambda
                                                 (()
                                                  (g$join-wraps$7277$1Z2PAY
                                                    g$m*$9281$1Z2PAY
                                                    g$s*$9282$1Z2PAY
                                                    g$ae*$9283$1Z2PAY
                                                    g$e$9280$1Z2PAY)))
                                               (case-lambda
                                                 ((g$m*$9297$1Z2PAY
                                                    g$s*$9298$1Z2PAY
                                                    g$ae*$9299$1Z2PAY)
                                                  ((case-lambda
                                                     ((g$ae*$9300$1Z2PAY
                                                        g$s*$9301$1Z2PAY
                                                        g$m*$9302$1Z2PAY)
                                                      (g$f$9279$1Z2PAY
                                                        (g$stx-expr$7264$1Z2PAY
                                                          g$e$9280$1Z2PAY)
                                                        g$m*$9302$1Z2PAY
                                                        g$s*$9301$1Z2PAY
                                                        g$ae*$9300$1Z2PAY)))
                                                   g$ae*$9299$1Z2PAY
                                                   g$s*$9298$1Z2PAY
                                                   g$m*$9297$1Z2PAY)))))
                                           (if (annotation? g$e$9280$1Z2PAY)
                                             (g$f$9279$1Z2PAY
                                               (annotation-expression
                                                 g$e$9280$1Z2PAY)
                                               g$m*$9281$1Z2PAY
                                               g$s*$9282$1Z2PAY
                                               g$ae*$9283$1Z2PAY)
                                             (values
                                               '()
                                               g$y-pat$9273$1Z2PAY
                                               (g$match$9216$1Z2PAY
                                                 g$e$9280$1Z2PAY
                                                 g$z-pat$9274$1Z2PAY
                                                 g$m*$9281$1Z2PAY
                                                 g$s*$9282$1Z2PAY
                                                 g$ae*$9283$1Z2PAY
                                                 g$r$9278$1Z2PAY)))))))))
                           g$f$9279$1Z2PAY)
                         g$e$9271$1Z2PAY
                         g$m*$9275$1Z2PAY
                         g$s*$9276$1Z2PAY
                         g$ae*$9277$1Z2PAY))))
                   (g$match-each-any$9212$1Z2PAY
                     (case-lambda
                       ((g$e$9257$1Z2PAY
                          g$m*$9258$1Z2PAY
                          g$s*$9259$1Z2PAY
                          g$ae*$9260$1Z2PAY)
                        (if (pair? g$e$9257$1Z2PAY)
                          ((case-lambda
                             ((g$l$9261$1Z2PAY)
                              (if g$l$9261$1Z2PAY
                                (begin
                                  '#f
                                  (cons
                                    (g$stx^$9209$1Z2PAY
                                      (car g$e$9257$1Z2PAY)
                                      g$m*$9258$1Z2PAY
                                      g$s*$9259$1Z2PAY
                                      g$ae*$9260$1Z2PAY)
                                    g$l$9261$1Z2PAY))
                                '#f)))
                           (g$match-each-any$9212$1Z2PAY
                             (cdr g$e$9257$1Z2PAY)
                             g$m*$9258$1Z2PAY
                             g$s*$9259$1Z2PAY
                             g$ae*$9260$1Z2PAY))
                          (if (null? g$e$9257$1Z2PAY)
                            '()
                            (if (g$stx?$7262$1Z2PAY g$e$9257$1Z2PAY)
                              (if (not (g$top-marked?$7228$1Z2PAY
                                         g$m*$9258$1Z2PAY))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7277$1Z2PAY
                                         g$m*$9258$1Z2PAY
                                         g$s*$9259$1Z2PAY
                                         g$ae*$9260$1Z2PAY
                                         g$e$9257$1Z2PAY)))
                                    (case-lambda
                                      ((g$m*$9265$1Z2PAY
                                         g$s*$9266$1Z2PAY
                                         g$ae*$9267$1Z2PAY)
                                       ((case-lambda
                                          ((g$ae*$9268$1Z2PAY
                                             g$s*$9269$1Z2PAY
                                             g$m*$9270$1Z2PAY)
                                           (g$match-each-any$9212$1Z2PAY
                                             (g$stx-expr$7264$1Z2PAY
                                               g$e$9257$1Z2PAY)
                                             g$m*$9270$1Z2PAY
                                             g$s*$9269$1Z2PAY
                                             g$ae*$9268$1Z2PAY)))
                                        g$ae*$9267$1Z2PAY
                                        g$s*$9266$1Z2PAY
                                        g$m*$9265$1Z2PAY)))))
                                '#f)
                              (if (annotation? g$e$9257$1Z2PAY)
                                (g$match-each-any$9212$1Z2PAY
                                  (annotation-expression g$e$9257$1Z2PAY)
                                  g$m*$9258$1Z2PAY
                                  g$s*$9259$1Z2PAY
                                  g$ae*$9260$1Z2PAY)
                                '#f)))))))
                   (g$match-empty$9213$1Z2PAY
                     (case-lambda
                       ((g$p$9254$1Z2PAY g$r$9255$1Z2PAY)
                        (if (null? g$p$9254$1Z2PAY)
                          g$r$9255$1Z2PAY
                          (if (eq? g$p$9254$1Z2PAY '_)
                            g$r$9255$1Z2PAY
                            (if (eq? g$p$9254$1Z2PAY 'any)
                              (cons '() g$r$9255$1Z2PAY)
                              (if (pair? g$p$9254$1Z2PAY)
                                (g$match-empty$9213$1Z2PAY
                                  (car g$p$9254$1Z2PAY)
                                  (g$match-empty$9213$1Z2PAY
                                    (cdr g$p$9254$1Z2PAY)
                                    g$r$9255$1Z2PAY))
                                (if (eq? g$p$9254$1Z2PAY 'each-any)
                                  (cons '() g$r$9255$1Z2PAY)
                                  ((case-lambda
                                     ((g$t$9256$1Z2PAY)
                                      (if (g$memv$5009$1Z2PAY
                                            g$t$9256$1Z2PAY
                                            '(each))
                                        (g$match-empty$9213$1Z2PAY
                                          (vector-ref g$p$9254$1Z2PAY '1)
                                          g$r$9255$1Z2PAY)
                                        (if (g$memv$5009$1Z2PAY
                                              g$t$9256$1Z2PAY
                                              '(each+))
                                          (g$match-empty$9213$1Z2PAY
                                            (vector-ref g$p$9254$1Z2PAY '1)
                                            (g$match-empty$9213$1Z2PAY
                                              (reverse
                                                (vector-ref g$p$9254$1Z2PAY '2))
                                              (g$match-empty$9213$1Z2PAY
                                                (vector-ref g$p$9254$1Z2PAY '3)
                                                g$r$9255$1Z2PAY)))
                                          (if (g$memv$5009$1Z2PAY
                                                g$t$9256$1Z2PAY
                                                '(free-id atom))
                                            g$r$9255$1Z2PAY
                                            (if (g$memv$5009$1Z2PAY
                                                  g$t$9256$1Z2PAY
                                                  '(scheme-id atom))
                                              g$r$9255$1Z2PAY
                                              (if (g$memv$5009$1Z2PAY
                                                    g$t$9256$1Z2PAY
                                                    '(vector))
                                                (g$match-empty$9213$1Z2PAY
                                                  (vector-ref
                                                    g$p$9254$1Z2PAY
                                                    '1)
                                                  g$r$9255$1Z2PAY)
                                                (assertion-violation
                                                  'syntax-dispatch
                                                  '"invalid pattern"
                                                  g$p$9254$1Z2PAY))))))))
                                   (vector-ref g$p$9254$1Z2PAY '0))))))))))
                   (g$combine$9214$1Z2PAY
                     (case-lambda
                       ((g$r*$9252$1Z2PAY g$r$9253$1Z2PAY)
                        (if (null? (car g$r*$9252$1Z2PAY))
                          g$r$9253$1Z2PAY
                          (cons
                            (map car g$r*$9252$1Z2PAY)
                            (g$combine$9214$1Z2PAY
                              (map cdr g$r*$9252$1Z2PAY)
                              g$r$9253$1Z2PAY))))))
                   (g$match*$9215$1Z2PAY
                     (case-lambda
                       ((g$e$9234$1Z2PAY
                          g$p$9235$1Z2PAY
                          g$m*$9236$1Z2PAY
                          g$s*$9237$1Z2PAY
                          g$ae*$9238$1Z2PAY
                          g$r$9239$1Z2PAY)
                        (if (null? g$p$9235$1Z2PAY)
                          (if (null? g$e$9234$1Z2PAY)
                            (begin '#f g$r$9239$1Z2PAY)
                            '#f)
                          (if (pair? g$p$9235$1Z2PAY)
                            (if (pair? g$e$9234$1Z2PAY)
                              (begin
                                '#f
                                (g$match$9216$1Z2PAY
                                  (car g$e$9234$1Z2PAY)
                                  (car g$p$9235$1Z2PAY)
                                  g$m*$9236$1Z2PAY
                                  g$s*$9237$1Z2PAY
                                  g$ae*$9238$1Z2PAY
                                  (g$match$9216$1Z2PAY
                                    (cdr g$e$9234$1Z2PAY)
                                    (cdr g$p$9235$1Z2PAY)
                                    g$m*$9236$1Z2PAY
                                    g$s*$9237$1Z2PAY
                                    g$ae*$9238$1Z2PAY
                                    g$r$9239$1Z2PAY)))
                              '#f)
                            (if (eq? g$p$9235$1Z2PAY 'each-any)
                              ((case-lambda
                                 ((g$l$9240$1Z2PAY)
                                  (if g$l$9240$1Z2PAY
                                    (begin
                                      '#f
                                      (cons g$l$9240$1Z2PAY g$r$9239$1Z2PAY))
                                    '#f)))
                               (g$match-each-any$9212$1Z2PAY
                                 g$e$9234$1Z2PAY
                                 g$m*$9236$1Z2PAY
                                 g$s*$9237$1Z2PAY
                                 g$ae*$9238$1Z2PAY))
                              ((case-lambda
                                 ((g$t$9241$1Z2PAY)
                                  (if (g$memv$5009$1Z2PAY
                                        g$t$9241$1Z2PAY
                                        '(each))
                                    (if (null? g$e$9234$1Z2PAY)
                                      (g$match-empty$9213$1Z2PAY
                                        (vector-ref g$p$9235$1Z2PAY '1)
                                        g$r$9239$1Z2PAY)
                                      ((case-lambda
                                         ((g$r*$9242$1Z2PAY)
                                          (if g$r*$9242$1Z2PAY
                                            (begin
                                              '#f
                                              (g$combine$9214$1Z2PAY
                                                g$r*$9242$1Z2PAY
                                                g$r$9239$1Z2PAY))
                                            '#f)))
                                       (g$match-each$9210$1Z2PAY
                                         g$e$9234$1Z2PAY
                                         (vector-ref g$p$9235$1Z2PAY '1)
                                         g$m*$9236$1Z2PAY
                                         g$s*$9237$1Z2PAY
                                         g$ae*$9238$1Z2PAY)))
                                    (if (g$memv$5009$1Z2PAY
                                          g$t$9241$1Z2PAY
                                          '(free-id))
                                      (if (symbol? g$e$9234$1Z2PAY)
                                        (if (g$top-marked?$7228$1Z2PAY
                                              g$m*$9236$1Z2PAY)
                                          (if (g$free-id=?$7294$1Z2PAY
                                                (g$stx^$9209$1Z2PAY
                                                  g$e$9234$1Z2PAY
                                                  g$m*$9236$1Z2PAY
                                                  g$s*$9237$1Z2PAY
                                                  g$ae*$9238$1Z2PAY)
                                                (vector-ref g$p$9235$1Z2PAY '1))
                                            (begin '#f g$r$9239$1Z2PAY)
                                            '#f)
                                          '#f)
                                        '#f)
                                      (if (g$memv$5009$1Z2PAY
                                            g$t$9241$1Z2PAY
                                            '(scheme-id))
                                        (if (symbol? g$e$9234$1Z2PAY)
                                          (if (g$top-marked?$7228$1Z2PAY
                                                g$m*$9236$1Z2PAY)
                                            (if (g$free-id=?$7294$1Z2PAY
                                                  (g$stx^$9209$1Z2PAY
                                                    g$e$9234$1Z2PAY
                                                    g$m*$9236$1Z2PAY
                                                    g$s*$9237$1Z2PAY
                                                    g$ae*$9238$1Z2PAY)
                                                  (g$scheme-stx$7511$1Z2PAY
                                                    (vector-ref
                                                      g$p$9235$1Z2PAY
                                                      '1)))
                                              (begin '#f g$r$9239$1Z2PAY)
                                              '#f)
                                            '#f)
                                          '#f)
                                        (if (g$memv$5009$1Z2PAY
                                              g$t$9241$1Z2PAY
                                              '(each+))
                                          (call-with-values
                                            (case-lambda
                                              (()
                                               (g$match-each+$9211$1Z2PAY
                                                 g$e$9234$1Z2PAY
                                                 (vector-ref g$p$9235$1Z2PAY '1)
                                                 (vector-ref g$p$9235$1Z2PAY '2)
                                                 (vector-ref g$p$9235$1Z2PAY '3)
                                                 g$m*$9236$1Z2PAY
                                                 g$s*$9237$1Z2PAY
                                                 g$ae*$9238$1Z2PAY
                                                 g$r$9239$1Z2PAY)))
                                            (case-lambda
                                              ((g$xr*$9246$1Z2PAY
                                                 g$y-pat$9247$1Z2PAY
                                                 g$r$9248$1Z2PAY)
                                               ((case-lambda
                                                  ((g$r$9249$1Z2PAY
                                                     g$y-pat$9250$1Z2PAY
                                                     g$xr*$9251$1Z2PAY)
                                                   (if g$r$9249$1Z2PAY
                                                     (if (null?
                                                           g$y-pat$9250$1Z2PAY)
                                                       (begin
                                                         '#f
                                                         (if (null?
                                                               g$xr*$9251$1Z2PAY)
                                                           (g$match-empty$9213$1Z2PAY
                                                             (vector-ref
                                                               g$p$9235$1Z2PAY
                                                               '1)
                                                             g$r$9249$1Z2PAY)
                                                           (g$combine$9214$1Z2PAY
                                                             g$xr*$9251$1Z2PAY
                                                             g$r$9249$1Z2PAY)))
                                                       '#f)
                                                     '#f)))
                                                g$r$9248$1Z2PAY
                                                g$y-pat$9247$1Z2PAY
                                                g$xr*$9246$1Z2PAY))))
                                          (if (g$memv$5009$1Z2PAY
                                                g$t$9241$1Z2PAY
                                                '(atom))
                                            (if (equal?
                                                  (vector-ref
                                                    g$p$9235$1Z2PAY
                                                    '1)
                                                  (g$strip$7300$1Z2PAY
                                                    g$e$9234$1Z2PAY
                                                    g$m*$9236$1Z2PAY))
                                              (begin '#f g$r$9239$1Z2PAY)
                                              '#f)
                                            (if (g$memv$5009$1Z2PAY
                                                  g$t$9241$1Z2PAY
                                                  '(vector))
                                              (if (vector? g$e$9234$1Z2PAY)
                                                (begin
                                                  '#f
                                                  (g$match$9216$1Z2PAY
                                                    (vector->list
                                                      g$e$9234$1Z2PAY)
                                                    (vector-ref
                                                      g$p$9235$1Z2PAY
                                                      '1)
                                                    g$m*$9236$1Z2PAY
                                                    g$s*$9237$1Z2PAY
                                                    g$ae*$9238$1Z2PAY
                                                    g$r$9239$1Z2PAY))
                                                '#f)
                                              (assertion-violation
                                                'syntax-dispatch
                                                '"invalid pattern"
                                                g$p$9235$1Z2PAY)))))))))
                               (vector-ref g$p$9235$1Z2PAY '0))))))))
                   (g$match$9216$1Z2PAY
                     (case-lambda
                       ((g$e$9219$1Z2PAY
                          g$p$9220$1Z2PAY
                          g$m*$9221$1Z2PAY
                          g$s*$9222$1Z2PAY
                          g$ae*$9223$1Z2PAY
                          g$r$9224$1Z2PAY)
                        (if (not g$r$9224$1Z2PAY)
                          '#f
                          (if (eq? g$p$9220$1Z2PAY '_)
                            g$r$9224$1Z2PAY
                            (if (eq? g$p$9220$1Z2PAY 'any)
                              (cons
                                (g$stx^$9209$1Z2PAY
                                  g$e$9219$1Z2PAY
                                  g$m*$9221$1Z2PAY
                                  g$s*$9222$1Z2PAY
                                  g$ae*$9223$1Z2PAY)
                                g$r$9224$1Z2PAY)
                              (if (g$stx?$7262$1Z2PAY g$e$9219$1Z2PAY)
                                (if (not (g$top-marked?$7228$1Z2PAY
                                           g$m*$9221$1Z2PAY))
                                  (begin
                                    '#f
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$join-wraps$7277$1Z2PAY
                                           g$m*$9221$1Z2PAY
                                           g$s*$9222$1Z2PAY
                                           g$ae*$9223$1Z2PAY
                                           g$e$9219$1Z2PAY)))
                                      (case-lambda
                                        ((g$m*$9228$1Z2PAY
                                           g$s*$9229$1Z2PAY
                                           g$ae*$9230$1Z2PAY)
                                         ((case-lambda
                                            ((g$ae*$9231$1Z2PAY
                                               g$s*$9232$1Z2PAY
                                               g$m*$9233$1Z2PAY)
                                             (g$match$9216$1Z2PAY
                                               (g$stx-expr$7264$1Z2PAY
                                                 g$e$9219$1Z2PAY)
                                               g$p$9220$1Z2PAY
                                               g$m*$9233$1Z2PAY
                                               g$s*$9232$1Z2PAY
                                               g$ae*$9231$1Z2PAY
                                               g$r$9224$1Z2PAY)))
                                          g$ae*$9230$1Z2PAY
                                          g$s*$9229$1Z2PAY
                                          g$m*$9228$1Z2PAY)))))
                                  '#f)
                                (if (annotation? g$e$9219$1Z2PAY)
                                  (g$match$9216$1Z2PAY
                                    (annotation-expression g$e$9219$1Z2PAY)
                                    g$p$9220$1Z2PAY
                                    g$m*$9221$1Z2PAY
                                    g$s*$9222$1Z2PAY
                                    g$ae*$9223$1Z2PAY
                                    g$r$9224$1Z2PAY)
                                  (g$match*$9215$1Z2PAY
                                    g$e$9219$1Z2PAY
                                    g$p$9220$1Z2PAY
                                    g$m*$9221$1Z2PAY
                                    g$s*$9222$1Z2PAY
                                    g$ae*$9223$1Z2PAY
                                    g$r$9224$1Z2PAY))))))))))
           (case-lambda
             ((g$e$9217$1Z2PAY g$p$9218$1Z2PAY)
              (g$match$9216$1Z2PAY
                g$e$9217$1Z2PAY
                g$p$9218$1Z2PAY
                '()
                '()
                '()
                '()))))))))
   (g$ellipsis?$7569$1Z2PAY
     g$ellipsis?$11060$1Z2PAY
     (case-lambda
       ((g$x$9323$1Z2PAY)
        (if (g$id?$7290$1Z2PAY g$x$9323$1Z2PAY)
          (begin
            '#f
            (g$free-id=?$7294$1Z2PAY
              g$x$9323$1Z2PAY
              (g$scheme-stx$7511$1Z2PAY '...)))
          '#f))))
   (g$underscore?$7570$1Z2PAY
     g$underscore?$11061$1Z2PAY
     (case-lambda
       ((g$x$9324$1Z2PAY)
        (if (g$id?$7290$1Z2PAY g$x$9324$1Z2PAY)
          (begin
            '#f
            (g$free-id=?$7294$1Z2PAY
              g$x$9324$1Z2PAY
              (g$scheme-stx$7511$1Z2PAY '_)))
          '#f))))
   (g$verify-literals$7571$1Z2PAY
     g$verify-literals$11062$1Z2PAY
     (case-lambda
       ((g$lits$9325$1Z2PAY g$expr$9326$1Z2PAY)
        (for-each
          (case-lambda
            ((g$x$9327$1Z2PAY)
             (if ((case-lambda
                    ((g$t$9328$1Z2PAY)
                     (if g$t$9328$1Z2PAY
                       g$t$9328$1Z2PAY
                       ((case-lambda
                          ((g$t$9329$1Z2PAY)
                           (if g$t$9329$1Z2PAY
                             g$t$9329$1Z2PAY
                             (begin
                               '#f
                               (g$underscore?$7570$1Z2PAY g$x$9327$1Z2PAY)))))
                        (g$ellipsis?$7569$1Z2PAY g$x$9327$1Z2PAY)))))
                  (not (g$id?$7290$1Z2PAY g$x$9327$1Z2PAY)))
               (g$syntax-violation$7679$1Z2PAY
                 '#f
                 '"invalid literal"
                 g$expr$9326$1Z2PAY
                 g$x$9327$1Z2PAY)
               (void))))
          g$lits$9325$1Z2PAY))))
   (g$syntax-case-transformer$7572$1Z2PAY
     g$syntax-case-transformer$11063$1Z2PAY
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$9330$1Z2PAY
                     (case-lambda
                       ((g$pvars$9387$1Z2PAY
                          g$expr$9388$1Z2PAY
                          g$y$9389$1Z2PAY
                          g$r$9390$1Z2PAY
                          g$mr$9391$1Z2PAY)
                        ((case-lambda
                           ((g$ids$9392$1Z2PAY g$levels$9393$1Z2PAY)
                            ((case-lambda
                               ((g$labels$9394$1Z2PAY g$new-vars$9395$1Z2PAY)
                                ((case-lambda
                                   ((g$body$9396$1Z2PAY)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$7216$1Z2PAY
                                        '#f
                                        g$new-vars$9395$1Z2PAY
                                        g$body$9396$1Z2PAY)
                                      g$y$9389$1Z2PAY)))
                                 (g$chi-expr$7586$1Z2PAY
                                   (g$add-subst$7280$1Z2PAY
                                     (g$make-full-rib$7258$1Z2PAY
                                       g$ids$9392$1Z2PAY
                                       g$labels$9394$1Z2PAY)
                                     g$expr$9388$1Z2PAY)
                                   (append
                                     (map (case-lambda
                                            ((g$label$9397$1Z2PAY
                                               g$var$9398$1Z2PAY
                                               g$level$9399$1Z2PAY)
                                             (cons
                                               g$label$9397$1Z2PAY
                                               (g$make-binding$7306$1Z2PAY
                                                 'syntax
                                                 (cons
                                                   g$var$9398$1Z2PAY
                                                   g$level$9399$1Z2PAY)))))
                                          g$labels$9394$1Z2PAY
                                          g$new-vars$9395$1Z2PAY
                                          (map cdr g$pvars$9387$1Z2PAY))
                                     g$r$9390$1Z2PAY)
                                   g$mr$9391$1Z2PAY))))
                             (map g$gen-label$7231$1Z2PAY g$ids$9392$1Z2PAY)
                             (map g$gen-lexical$7229$1Z2PAY
                                  g$ids$9392$1Z2PAY))))
                         (map car g$pvars$9387$1Z2PAY)
                         (map cdr g$pvars$9387$1Z2PAY)))))
                   (g$invalid-ids-error$9331$1Z2PAY
                     (case-lambda
                       ((g$id*$9381$1Z2PAY g$e$9382$1Z2PAY g$class$9383$1Z2PAY)
                        ((letrec ((g$find$9384$1Z2PAY
                                    (case-lambda
                                      ((g$id*$9385$1Z2PAY g$ok*$9386$1Z2PAY)
                                       (if (null? g$id*$9385$1Z2PAY)
                                         (g$syntax-violation$7679$1Z2PAY
                                           '#f
                                           '"invalid syntax"
                                           g$e$9382$1Z2PAY)
                                         (if (g$id?$7290$1Z2PAY
                                               (car g$id*$9385$1Z2PAY))
                                           (if (g$bound-id-member?$7297$1Z2PAY
                                                 (car g$id*$9385$1Z2PAY)
                                                 g$ok*$9386$1Z2PAY)
                                             (g$syntax-error$7676$1Z2PAY
                                               (car g$id*$9385$1Z2PAY)
                                               '"duplicate "
                                               g$class$9383$1Z2PAY)
                                             (g$find$9384$1Z2PAY
                                               (cdr g$id*$9385$1Z2PAY)
                                               (cons
                                                 (car g$id*$9385$1Z2PAY)
                                                 g$ok*$9386$1Z2PAY)))
                                           (g$syntax-error$7676$1Z2PAY
                                             (car g$id*$9385$1Z2PAY)
                                             '"invalid "
                                             g$class$9383$1Z2PAY)))))))
                           g$find$9384$1Z2PAY)
                         g$id*$9381$1Z2PAY
                         '()))))
                   (g$gen-clause$9332$1Z2PAY
                     (case-lambda
                       ((g$x$9361$1Z2PAY
                          g$keys$9362$1Z2PAY
                          g$clauses$9363$1Z2PAY
                          g$r$9364$1Z2PAY
                          g$mr$9365$1Z2PAY
                          g$pat$9366$1Z2PAY
                          g$fender$9367$1Z2PAY
                          g$expr$9368$1Z2PAY)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$7567$1Z2PAY
                               g$pat$9366$1Z2PAY
                               g$keys$9362$1Z2PAY)))
                          (case-lambda
                            ((g$p$9371$1Z2PAY g$pvars$9372$1Z2PAY)
                             ((case-lambda
                                ((g$pvars$9373$1Z2PAY g$p$9374$1Z2PAY)
                                 (if (not (g$distinct-bound-ids?$7296$1Z2PAY
                                            (map car g$pvars$9373$1Z2PAY)))
                                   (g$invalid-ids-error$9331$1Z2PAY
                                     (map car g$pvars$9373$1Z2PAY)
                                     g$pat$9366$1Z2PAY
                                     '"pattern variable")
                                   (if (not (g$for-all$5014$1Z2PAY
                                              (case-lambda
                                                ((g$x$9375$1Z2PAY)
                                                 (not (g$ellipsis?$7569$1Z2PAY
                                                        (car g$x$9375$1Z2PAY)))))
                                              g$pvars$9373$1Z2PAY))
                                     (g$syntax-violation$7679$1Z2PAY
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$9366$1Z2PAY)
                                     ((case-lambda
                                        ((g$y$9376$1Z2PAY)
                                         ((case-lambda
                                            ((g$test$9377$1Z2PAY)
                                             ((case-lambda
                                                ((g$conseq$9378$1Z2PAY)
                                                 ((case-lambda
                                                    ((g$altern$9379$1Z2PAY)
                                                     (list
                                                       (g$build-lambda$7216$1Z2PAY
                                                         '#f
                                                         (list g$y$9376$1Z2PAY)
                                                         (list
                                                           'if
                                                           g$test$9377$1Z2PAY
                                                           g$conseq$9378$1Z2PAY
                                                           g$altern$9379$1Z2PAY))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$9361$1Z2PAY
                                                         (list
                                                           'quote
                                                           g$p$9374$1Z2PAY)))))
                                                  (g$gen-syntax-case$9333$1Z2PAY
                                                    g$x$9361$1Z2PAY
                                                    g$keys$9362$1Z2PAY
                                                    g$clauses$9363$1Z2PAY
                                                    g$r$9364$1Z2PAY
                                                    g$mr$9365$1Z2PAY))))
                                              (g$build-dispatch-call$9330$1Z2PAY
                                                g$pvars$9373$1Z2PAY
                                                g$expr$9368$1Z2PAY
                                                g$y$9376$1Z2PAY
                                                g$r$9364$1Z2PAY
                                                g$mr$9365$1Z2PAY))))
                                          (if (eq? g$fender$9367$1Z2PAY '#t)
                                            g$y$9376$1Z2PAY
                                            ((case-lambda
                                               ((g$call$9380$1Z2PAY)
                                                (list
                                                  'if
                                                  g$y$9376$1Z2PAY
                                                  g$call$9380$1Z2PAY
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$9330$1Z2PAY
                                               g$pvars$9373$1Z2PAY
                                               g$fender$9367$1Z2PAY
                                               g$y$9376$1Z2PAY
                                               g$r$9364$1Z2PAY
                                               g$mr$9365$1Z2PAY))))))
                                      (g$gen-lexical$7229$1Z2PAY 'tmp))))))
                              g$pvars$9372$1Z2PAY
                              g$p$9371$1Z2PAY)))))))
                   (g$gen-syntax-case$9333$1Z2PAY
                     (case-lambda
                       ((g$x$9344$1Z2PAY
                          g$keys$9345$1Z2PAY
                          g$clauses$9346$1Z2PAY
                          g$r$9347$1Z2PAY
                          g$mr$9348$1Z2PAY)
                        (if (null? g$clauses$9346$1Z2PAY)
                          (list '(primitive syntax-error) g$x$9344$1Z2PAY)
                          ((case-lambda
                             ((g$t$9349$1Z2PAY)
                              ((case-lambda
                                 ((g$ls/false$9350$1Z2PAY)
                                  (if g$ls/false$9350$1Z2PAY
                                    (apply
                                      (case-lambda
                                        ((g$pat$9351$1Z2PAY g$expr$9352$1Z2PAY)
                                         (if (if (g$id?$7290$1Z2PAY
                                                   g$pat$9351$1Z2PAY)
                                               (if (not (g$bound-id-member?$7297$1Z2PAY
                                                          g$pat$9351$1Z2PAY
                                                          g$keys$9345$1Z2PAY))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$7569$1Z2PAY
                                                          g$pat$9351$1Z2PAY)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$7294$1Z2PAY
                                                 g$pat$9351$1Z2PAY
                                                 (g$scheme-stx$7511$1Z2PAY '_))
                                             (g$chi-expr$7586$1Z2PAY
                                               g$expr$9352$1Z2PAY
                                               g$r$9347$1Z2PAY
                                               g$mr$9348$1Z2PAY)
                                             ((case-lambda
                                                ((g$lab$9353$1Z2PAY
                                                   g$lex$9354$1Z2PAY)
                                                 ((case-lambda
                                                    ((g$body$9355$1Z2PAY)
                                                     (list
                                                       (g$build-lambda$7216$1Z2PAY
                                                         '#f
                                                         (list
                                                           g$lex$9354$1Z2PAY)
                                                         g$body$9355$1Z2PAY)
                                                       g$x$9344$1Z2PAY)))
                                                  (g$chi-expr$7586$1Z2PAY
                                                    (g$add-subst$7280$1Z2PAY
                                                      (g$make-full-rib$7258$1Z2PAY
                                                        (list g$pat$9351$1Z2PAY)
                                                        (list
                                                          g$lab$9353$1Z2PAY))
                                                      g$expr$9352$1Z2PAY)
                                                    (cons
                                                      (cons
                                                        g$lab$9353$1Z2PAY
                                                        (g$make-binding$7306$1Z2PAY
                                                          'syntax
                                                          (cons
                                                            g$lex$9354$1Z2PAY
                                                            '0)))
                                                      g$r$9347$1Z2PAY)
                                                    g$mr$9348$1Z2PAY))))
                                              (g$gen-label$7231$1Z2PAY
                                                g$pat$9351$1Z2PAY)
                                              (g$gen-lexical$7229$1Z2PAY
                                                g$pat$9351$1Z2PAY)))
                                           (g$gen-clause$9332$1Z2PAY
                                             g$x$9344$1Z2PAY
                                             g$keys$9345$1Z2PAY
                                             (cdr g$clauses$9346$1Z2PAY)
                                             g$r$9347$1Z2PAY
                                             g$mr$9348$1Z2PAY
                                             g$pat$9351$1Z2PAY
                                             '#t
                                             g$expr$9352$1Z2PAY))))
                                      g$ls/false$9350$1Z2PAY)
                                    ((case-lambda
                                       ((g$t$9356$1Z2PAY)
                                        ((case-lambda
                                           ((g$ls/false$9357$1Z2PAY)
                                            (if g$ls/false$9357$1Z2PAY
                                              (apply
                                                (case-lambda
                                                  ((g$pat$9358$1Z2PAY
                                                     g$fender$9359$1Z2PAY
                                                     g$expr$9360$1Z2PAY)
                                                   (g$gen-clause$9332$1Z2PAY
                                                     g$x$9344$1Z2PAY
                                                     g$keys$9345$1Z2PAY
                                                     (cdr g$clauses$9346$1Z2PAY)
                                                     g$r$9347$1Z2PAY
                                                     g$mr$9348$1Z2PAY
                                                     g$pat$9358$1Z2PAY
                                                     g$fender$9359$1Z2PAY
                                                     g$expr$9360$1Z2PAY)))
                                                g$ls/false$9357$1Z2PAY)
                                              (g$syntax-violation$7679$1Z2PAY
                                                '#f
                                                '"invalid syntax"
                                                g$t$9356$1Z2PAY))))
                                         (g$syntax-dispatch$7568$1Z2PAY
                                           g$t$9356$1Z2PAY
                                           '(any any any)))))
                                     g$t$9349$1Z2PAY))))
                               (g$syntax-dispatch$7568$1Z2PAY
                                 g$t$9349$1Z2PAY
                                 '(any any)))))
                           (car g$clauses$9346$1Z2PAY)))))))
           (case-lambda
             ((g$e$9334$1Z2PAY g$r$9335$1Z2PAY g$mr$9336$1Z2PAY)
              ((case-lambda
                 ((g$t$9337$1Z2PAY)
                  ((case-lambda
                     ((g$ls/false$9338$1Z2PAY)
                      (if g$ls/false$9338$1Z2PAY
                        (apply
                          (case-lambda
                            ((g$expr$9339$1Z2PAY
                               g$keys$9340$1Z2PAY
                               g$clauses$9341$1Z2PAY)
                             (begin
                               (g$verify-literals$7571$1Z2PAY
                                 g$keys$9340$1Z2PAY
                                 g$e$9334$1Z2PAY)
                               ((case-lambda
                                  ((g$x$9342$1Z2PAY)
                                   ((case-lambda
                                      ((g$body$9343$1Z2PAY)
                                       (list
                                         (g$build-lambda$7216$1Z2PAY
                                           '#f
                                           (list g$x$9342$1Z2PAY)
                                           g$body$9343$1Z2PAY)
                                         (g$chi-expr$7586$1Z2PAY
                                           g$expr$9339$1Z2PAY
                                           g$r$9335$1Z2PAY
                                           g$mr$9336$1Z2PAY))))
                                    (g$gen-syntax-case$9333$1Z2PAY
                                      g$x$9342$1Z2PAY
                                      g$keys$9340$1Z2PAY
                                      g$clauses$9341$1Z2PAY
                                      g$r$9335$1Z2PAY
                                      g$mr$9336$1Z2PAY))))
                                (g$gen-lexical$7229$1Z2PAY 'tmp)))))
                          g$ls/false$9338$1Z2PAY)
                        (g$syntax-violation$7679$1Z2PAY
                          '#f
                          '"invalid syntax"
                          g$t$9337$1Z2PAY))))
                   (g$syntax-dispatch$7568$1Z2PAY
                     g$t$9337$1Z2PAY
                     '(_ any each-any . each-any)))))
               g$e$9334$1Z2PAY))))))))
   (g$ellipsis-map$7573$1Z2PAY
     g$ellipsis-map$11064$1Z2PAY
     (case-lambda
       ((g$proc$9400$1Z2PAY g$ls$9401$1Z2PAY . g$ls*$9402$1Z2PAY)
        (letrec* ((g$who$9403$1Z2PAY '...))
          (begin
            (if (not (list? g$ls$9401$1Z2PAY))
              (assertion-violation
                g$who$9403$1Z2PAY
                '"not a list"
                g$ls$9401$1Z2PAY)
              (void))
            (if (not (null? g$ls*$9402$1Z2PAY))
              ((case-lambda
                 ((g$n$9404$1Z2PAY)
                  (for-each
                    (case-lambda
                      ((g$x$9405$1Z2PAY)
                       (begin
                         (if (not (list? g$x$9405$1Z2PAY))
                           (assertion-violation
                             g$who$9403$1Z2PAY
                             '"not a list"
                             g$x$9405$1Z2PAY)
                           (void))
                         (if (not (= (length g$x$9405$1Z2PAY) g$n$9404$1Z2PAY))
                           (assertion-violation
                             g$who$9403$1Z2PAY
                             '"length mismatch"
                             g$ls$9401$1Z2PAY
                             g$x$9405$1Z2PAY)
                           (void)))))
                    g$ls*$9402$1Z2PAY)))
               (length g$ls$9401$1Z2PAY))
              (void))
            (apply
              map
              g$proc$9400$1Z2PAY
              g$ls$9401$1Z2PAY
              g$ls*$9402$1Z2PAY))))))
   (g$syntax-transformer$7574$1Z2PAY
     g$syntax-transformer$11065$1Z2PAY
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$9406$1Z2PAY
                     (case-lambda
                       ((g$src$9466$1Z2PAY
                          g$e$9467$1Z2PAY
                          g$r$9468$1Z2PAY
                          g$maps$9469$1Z2PAY
                          g$ellipsis?$9470$1Z2PAY
                          g$vec?$9471$1Z2PAY)
                        ((case-lambda
                           ((g$t$9472$1Z2PAY)
                            ((case-lambda
                               ((g$ls/false$9473$1Z2PAY)
                                (if (if g$ls/false$9473$1Z2PAY
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$9474$1Z2PAY)
                                             (g$ellipsis?$9470$1Z2PAY
                                               g$dots$9474$1Z2PAY)))
                                          g$ls/false$9473$1Z2PAY))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$9475$1Z2PAY)
                                       (g$syntax-violation$7679$1Z2PAY
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$9466$1Z2PAY)))
                                    g$ls/false$9473$1Z2PAY)
                                  ((case-lambda
                                     ((g$t$9476$1Z2PAY)
                                      ((case-lambda
                                         ((g$ls/false$9477$1Z2PAY)
                                          (if (if g$ls/false$9477$1Z2PAY
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$9478$1Z2PAY)
                                                       (g$id?$7290$1Z2PAY
                                                         g$id$9478$1Z2PAY)))
                                                    g$ls/false$9477$1Z2PAY))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$9479$1Z2PAY)
                                                 ((case-lambda
                                                    ((g$label$9480$1Z2PAY)
                                                     ((case-lambda
                                                        ((g$b$9481$1Z2PAY)
                                                         ((case-lambda
                                                            (()
                                                             (if (eq? (g$binding-type$7307$1Z2PAY
                                                                        g$b$9481$1Z2PAY)
                                                                      'syntax)
                                                               (call-with-values
                                                                 (case-lambda
                                                                   (()
                                                                    ((case-lambda
                                                                       ((g$var.lev$9484$1Z2PAY)
                                                                        (g$gen-ref$9407$1Z2PAY
                                                                          g$src$9466$1Z2PAY
                                                                          (car g$var.lev$9484$1Z2PAY)
                                                                          (cdr g$var.lev$9484$1Z2PAY)
                                                                          g$maps$9469$1Z2PAY)))
                                                                     (g$binding-value$7308$1Z2PAY
                                                                       g$b$9481$1Z2PAY))))
                                                                 (case-lambda
                                                                   ((g$var$9485$1Z2PAY
                                                                      g$maps$9486$1Z2PAY)
                                                                    ((case-lambda
                                                                       ((g$maps$9487$1Z2PAY
                                                                          g$var$9488$1Z2PAY)
                                                                        (values
                                                                          (list
                                                                            'ref
                                                                            g$var$9488$1Z2PAY)
                                                                          g$maps$9487$1Z2PAY)))
                                                                     g$maps$9486$1Z2PAY
                                                                     g$var$9485$1Z2PAY))))
                                                               (values
                                                                 (list
                                                                   'quote
                                                                   g$e$9467$1Z2PAY)
                                                                 g$maps$9469$1Z2PAY)))))))
                                                      (g$label->binding$7305$1Z2PAY
                                                        g$label$9480$1Z2PAY
                                                        g$r$9468$1Z2PAY))))
                                                  (g$id->label$7303$1Z2PAY
                                                    g$e$9467$1Z2PAY))))
                                              g$ls/false$9477$1Z2PAY)
                                            ((case-lambda
                                               ((g$t$9489$1Z2PAY)
                                                ((case-lambda
                                                   ((g$ls/false$9490$1Z2PAY)
                                                    (if (if g$ls/false$9490$1Z2PAY
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$9491$1Z2PAY
                                                                   g$e$9492$1Z2PAY)
                                                                 (g$ellipsis?$9470$1Z2PAY
                                                                   g$dots$9491$1Z2PAY)))
                                                              g$ls/false$9490$1Z2PAY))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$9493$1Z2PAY
                                                             g$e$9494$1Z2PAY)
                                                           (if g$vec?$9471$1Z2PAY
                                                             (g$syntax-violation$7679$1Z2PAY
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$9466$1Z2PAY)
                                                             (g$gen-syntax$9406$1Z2PAY
                                                               g$src$9466$1Z2PAY
                                                               g$e$9494$1Z2PAY
                                                               g$r$9468$1Z2PAY
                                                               g$maps$9469$1Z2PAY
                                                               (case-lambda
                                                                 ((g$x$9495$1Z2PAY)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$9490$1Z2PAY)
                                                      ((case-lambda
                                                         ((g$t$9496$1Z2PAY)
                                                          ((case-lambda
                                                             ((g$ls/false$9497$1Z2PAY)
                                                              (if (if g$ls/false$9497$1Z2PAY
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$9498$1Z2PAY
                                                                             g$dots$9499$1Z2PAY
                                                                             g$y$9500$1Z2PAY)
                                                                           (g$ellipsis?$9470$1Z2PAY
                                                                             g$dots$9499$1Z2PAY)))
                                                                        g$ls/false$9497$1Z2PAY))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$9501$1Z2PAY
                                                                       g$dots$9502$1Z2PAY
                                                                       g$y$9503$1Z2PAY)
                                                                     ((letrec ((g$f$9504$1Z2PAY
                                                                                 (case-lambda
                                                                                   ((g$y$9505$1Z2PAY
                                                                                      g$k$9506$1Z2PAY)
                                                                                    ((case-lambda
                                                                                       ((g$t$9507$1Z2PAY)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9508$1Z2PAY)
                                                                                            (if g$ls/false$9508$1Z2PAY
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$9506$1Z2PAY
                                                                                                     g$maps$9469$1Z2PAY)))
                                                                                                g$ls/false$9508$1Z2PAY)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9509$1Z2PAY)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9510$1Z2PAY)
                                                                                                      (if (if g$ls/false$9510$1Z2PAY
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$9511$1Z2PAY
                                                                                                                     g$y$9512$1Z2PAY)
                                                                                                                   (g$ellipsis?$9470$1Z2PAY
                                                                                                                     g$dots$9511$1Z2PAY)))
                                                                                                                g$ls/false$9510$1Z2PAY))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$9513$1Z2PAY
                                                                                                               g$y$9514$1Z2PAY)
                                                                                                             (g$f$9504$1Z2PAY
                                                                                                               g$y$9514$1Z2PAY
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$9515$1Z2PAY)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$9506$1Z2PAY
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$9515$1Z2PAY))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$9518$1Z2PAY
                                                                                                                         g$maps$9519$1Z2PAY)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$9520$1Z2PAY
                                                                                                                             g$x$9521$1Z2PAY)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$9520$1Z2PAY))
                                                                                                                             (g$syntax-violation$7679$1Z2PAY
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$9466$1Z2PAY)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$9409$1Z2PAY
                                                                                                                                 g$x$9521$1Z2PAY
                                                                                                                                 (car g$maps$9520$1Z2PAY))
                                                                                                                               (cdr g$maps$9520$1Z2PAY)))))
                                                                                                                        g$maps$9519$1Z2PAY
                                                                                                                        g$x$9518$1Z2PAY)))))))))
                                                                                                          g$ls/false$9510$1Z2PAY)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9522$1Z2PAY)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9523$1Z2PAY)
                                                                                                                (if g$ls/false$9523$1Z2PAY
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$9406$1Z2PAY
                                                                                                                              g$src$9466$1Z2PAY
                                                                                                                              g$y$9505$1Z2PAY
                                                                                                                              g$r$9468$1Z2PAY
                                                                                                                              g$maps$9469$1Z2PAY
                                                                                                                              g$ellipsis?$9470$1Z2PAY
                                                                                                                              g$vec?$9471$1Z2PAY)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$9526$1Z2PAY
                                                                                                                              g$maps$9527$1Z2PAY)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$9528$1Z2PAY
                                                                                                                                  g$y$9529$1Z2PAY)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$9506$1Z2PAY
                                                                                                                                       g$maps$9528$1Z2PAY)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$9532$1Z2PAY
                                                                                                                                       g$maps$9533$1Z2PAY)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$9534$1Z2PAY
                                                                                                                                           g$x$9535$1Z2PAY)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$9408$1Z2PAY
                                                                                                                                             g$x$9535$1Z2PAY
                                                                                                                                             g$y$9529$1Z2PAY)
                                                                                                                                           g$maps$9534$1Z2PAY)))
                                                                                                                                      g$maps$9533$1Z2PAY
                                                                                                                                      g$x$9532$1Z2PAY))))))
                                                                                                                             g$maps$9527$1Z2PAY
                                                                                                                             g$y$9526$1Z2PAY))))))
                                                                                                                    g$ls/false$9523$1Z2PAY)
                                                                                                                  (g$syntax-violation$7679$1Z2PAY
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9522$1Z2PAY))))
                                                                                                             (g$syntax-dispatch$7568$1Z2PAY
                                                                                                               g$t$9522$1Z2PAY
                                                                                                               '_))))
                                                                                                         g$t$9509$1Z2PAY))))
                                                                                                   (g$syntax-dispatch$7568$1Z2PAY
                                                                                                     g$t$9509$1Z2PAY
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$9507$1Z2PAY))))
                                                                                         (g$syntax-dispatch$7568$1Z2PAY
                                                                                           g$t$9507$1Z2PAY
                                                                                           '()))))
                                                                                     g$y$9505$1Z2PAY)))))
                                                                        g$f$9504$1Z2PAY)
                                                                      g$y$9503$1Z2PAY
                                                                      (case-lambda
                                                                        ((g$maps$9536$1Z2PAY)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$9406$1Z2PAY
                                                                                g$src$9466$1Z2PAY
                                                                                g$x$9501$1Z2PAY
                                                                                g$r$9468$1Z2PAY
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$9536$1Z2PAY)
                                                                                g$ellipsis?$9470$1Z2PAY
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$9539$1Z2PAY
                                                                                g$maps$9540$1Z2PAY)
                                                                              ((case-lambda
                                                                                 ((g$maps$9541$1Z2PAY
                                                                                    g$x$9542$1Z2PAY)
                                                                                  (if (null?
                                                                                        (car g$maps$9541$1Z2PAY))
                                                                                    (g$syntax-violation$7679$1Z2PAY
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$9466$1Z2PAY)
                                                                                    (values
                                                                                      (g$gen-map$9410$1Z2PAY
                                                                                        g$x$9542$1Z2PAY
                                                                                        (car g$maps$9541$1Z2PAY))
                                                                                      (cdr g$maps$9541$1Z2PAY)))))
                                                                               g$maps$9540$1Z2PAY
                                                                               g$x$9539$1Z2PAY)))))))))
                                                                  g$ls/false$9497$1Z2PAY)
                                                                ((case-lambda
                                                                   ((g$t$9543$1Z2PAY)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9544$1Z2PAY)
                                                                        (if g$ls/false$9544$1Z2PAY
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$9545$1Z2PAY
                                                                                 g$y$9546$1Z2PAY)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$9406$1Z2PAY
                                                                                      g$src$9466$1Z2PAY
                                                                                      g$x$9545$1Z2PAY
                                                                                      g$r$9468$1Z2PAY
                                                                                      g$maps$9469$1Z2PAY
                                                                                      g$ellipsis?$9470$1Z2PAY
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$9549$1Z2PAY
                                                                                      g$maps$9550$1Z2PAY)
                                                                                    ((case-lambda
                                                                                       ((g$maps$9551$1Z2PAY
                                                                                          g$xnew$9552$1Z2PAY)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$9406$1Z2PAY
                                                                                               g$src$9466$1Z2PAY
                                                                                               g$y$9546$1Z2PAY
                                                                                               g$r$9468$1Z2PAY
                                                                                               g$maps$9551$1Z2PAY
                                                                                               g$ellipsis?$9470$1Z2PAY
                                                                                               g$vec?$9471$1Z2PAY)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$9555$1Z2PAY
                                                                                               g$maps$9556$1Z2PAY)
                                                                                             ((case-lambda
                                                                                                ((g$maps$9557$1Z2PAY
                                                                                                   g$ynew$9558$1Z2PAY)
                                                                                                 (values
                                                                                                   (g$gen-cons$9411$1Z2PAY
                                                                                                     g$e$9467$1Z2PAY
                                                                                                     g$x$9545$1Z2PAY
                                                                                                     g$y$9546$1Z2PAY
                                                                                                     g$xnew$9552$1Z2PAY
                                                                                                     g$ynew$9558$1Z2PAY)
                                                                                                   g$maps$9557$1Z2PAY)))
                                                                                              g$maps$9556$1Z2PAY
                                                                                              g$ynew$9555$1Z2PAY))))))
                                                                                     g$maps$9550$1Z2PAY
                                                                                     g$xnew$9549$1Z2PAY))))))
                                                                            g$ls/false$9544$1Z2PAY)
                                                                          ((case-lambda
                                                                             ((g$t$9559$1Z2PAY)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9560$1Z2PAY)
                                                                                  (if g$ls/false$9560$1Z2PAY
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$9561$1Z2PAY)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$9406$1Z2PAY
                                                                                                g$src$9466$1Z2PAY
                                                                                                g$ls$9561$1Z2PAY
                                                                                                g$r$9468$1Z2PAY
                                                                                                g$maps$9469$1Z2PAY
                                                                                                g$ellipsis?$9470$1Z2PAY
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$9564$1Z2PAY
                                                                                                g$maps$9565$1Z2PAY)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$9566$1Z2PAY
                                                                                                    g$lsnew$9567$1Z2PAY)
                                                                                                  (values
                                                                                                    (g$gen-vector$9412$1Z2PAY
                                                                                                      g$e$9467$1Z2PAY
                                                                                                      g$ls$9561$1Z2PAY
                                                                                                      g$lsnew$9567$1Z2PAY)
                                                                                                    g$maps$9566$1Z2PAY)))
                                                                                               g$maps$9565$1Z2PAY
                                                                                               g$lsnew$9564$1Z2PAY))))))
                                                                                      g$ls/false$9560$1Z2PAY)
                                                                                    ((case-lambda
                                                                                       ((g$t$9568$1Z2PAY)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9569$1Z2PAY)
                                                                                            (if g$ls/false$9569$1Z2PAY
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$9467$1Z2PAY)
                                                                                                     g$maps$9469$1Z2PAY)))
                                                                                                g$ls/false$9569$1Z2PAY)
                                                                                              (g$syntax-violation$7679$1Z2PAY
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9568$1Z2PAY))))
                                                                                         (g$syntax-dispatch$7568$1Z2PAY
                                                                                           g$t$9568$1Z2PAY
                                                                                           '_))))
                                                                                     g$t$9559$1Z2PAY))))
                                                                               (g$syntax-dispatch$7568$1Z2PAY
                                                                                 g$t$9559$1Z2PAY
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9543$1Z2PAY))))
                                                                     (g$syntax-dispatch$7568$1Z2PAY
                                                                       g$t$9543$1Z2PAY
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9496$1Z2PAY))))
                                                           (g$syntax-dispatch$7568$1Z2PAY
                                                             g$t$9496$1Z2PAY
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$9489$1Z2PAY))))
                                                 (g$syntax-dispatch$7568$1Z2PAY
                                                   g$t$9489$1Z2PAY
                                                   '(any any)))))
                                             g$t$9476$1Z2PAY))))
                                       (g$syntax-dispatch$7568$1Z2PAY
                                         g$t$9476$1Z2PAY
                                         'any))))
                                   g$t$9472$1Z2PAY))))
                             (g$syntax-dispatch$7568$1Z2PAY
                               g$t$9472$1Z2PAY
                               'any))))
                         g$e$9467$1Z2PAY))))
                   (g$gen-ref$9407$1Z2PAY
                     (case-lambda
                       ((g$src$9453$1Z2PAY
                          g$var$9454$1Z2PAY
                          g$level$9455$1Z2PAY
                          g$maps$9456$1Z2PAY)
                        (if (= g$level$9455$1Z2PAY '0)
                          (values g$var$9454$1Z2PAY g$maps$9456$1Z2PAY)
                          (if (null? g$maps$9456$1Z2PAY)
                            (g$syntax-violation$7679$1Z2PAY
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$9453$1Z2PAY)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$9407$1Z2PAY
                                   g$src$9453$1Z2PAY
                                   g$var$9454$1Z2PAY
                                   (- g$level$9455$1Z2PAY '1)
                                   (cdr g$maps$9456$1Z2PAY))))
                              (case-lambda
                                ((g$outer-var$9459$1Z2PAY
                                   g$outer-maps$9460$1Z2PAY)
                                 ((case-lambda
                                    ((g$outer-maps$9461$1Z2PAY
                                       g$outer-var$9462$1Z2PAY)
                                     ((case-lambda
                                        ((g$t$9463$1Z2PAY)
                                         (if g$t$9463$1Z2PAY
                                           ((case-lambda
                                              ((g$b$9464$1Z2PAY)
                                               (values
                                                 (cdr g$b$9464$1Z2PAY)
                                                 g$maps$9456$1Z2PAY)))
                                            g$t$9463$1Z2PAY)
                                           ((case-lambda
                                              ((g$inner-var$9465$1Z2PAY)
                                               (values
                                                 g$inner-var$9465$1Z2PAY
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$9462$1Z2PAY
                                                       g$inner-var$9465$1Z2PAY)
                                                     (car g$maps$9456$1Z2PAY))
                                                   g$outer-maps$9461$1Z2PAY))))
                                            (g$gen-lexical$7229$1Z2PAY 'tmp)))))
                                      (g$assq$5004$1Z2PAY
                                        g$outer-var$9462$1Z2PAY
                                        (car g$maps$9456$1Z2PAY)))))
                                  g$outer-maps$9460$1Z2PAY
                                  g$outer-var$9459$1Z2PAY)))))))))
                   (g$gen-append$9408$1Z2PAY
                     (case-lambda
                       ((g$x$9451$1Z2PAY g$y$9452$1Z2PAY)
                        (if (equal? g$y$9452$1Z2PAY ''())
                          g$x$9451$1Z2PAY
                          (list 'append g$x$9451$1Z2PAY g$y$9452$1Z2PAY)))))
                   (g$gen-mappend$9409$1Z2PAY
                     (case-lambda
                       ((g$e$9449$1Z2PAY g$map-env$9450$1Z2PAY)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$9410$1Z2PAY
                            g$e$9449$1Z2PAY
                            g$map-env$9450$1Z2PAY)))))
                   (g$gen-map$9410$1Z2PAY
                     (case-lambda
                       ((g$e$9440$1Z2PAY g$map-env$9441$1Z2PAY)
                        ((case-lambda
                           ((g$formals$9442$1Z2PAY g$actuals$9443$1Z2PAY)
                            (if (eq? (car g$e$9440$1Z2PAY) 'ref)
                              (car g$actuals$9443$1Z2PAY)
                              (if (g$for-all$5014$1Z2PAY
                                    (case-lambda
                                      ((g$x$9444$1Z2PAY)
                                       (if (eq? (car g$x$9444$1Z2PAY) 'ref)
                                         (begin
                                           '#f
                                           (g$memq$5008$1Z2PAY
                                             (g$cadr$5178$1Z2PAY
                                               g$x$9444$1Z2PAY)
                                             g$formals$9442$1Z2PAY))
                                         '#f)))
                                    (cdr g$e$9440$1Z2PAY))
                                ((case-lambda
                                   ((g$args$9445$1Z2PAY)
                                    (cons
                                      'map
                                      (cons
                                        (list 'primitive (car g$e$9440$1Z2PAY))
                                        g$args$9445$1Z2PAY))))
                                 (map ((case-lambda
                                         ((g$r$9446$1Z2PAY)
                                          (case-lambda
                                            ((g$x$9447$1Z2PAY)
                                             (cdr (g$assq$5004$1Z2PAY
                                                    (g$cadr$5178$1Z2PAY
                                                      g$x$9447$1Z2PAY)
                                                    g$r$9446$1Z2PAY))))))
                                       (map cons
                                            g$formals$9442$1Z2PAY
                                            g$actuals$9443$1Z2PAY))
                                      (cdr g$e$9440$1Z2PAY)))
                                (g$cons*$5016$1Z2PAY
                                  'map
                                  (list
                                    'lambda
                                    g$formals$9442$1Z2PAY
                                    g$e$9440$1Z2PAY)
                                  g$actuals$9443$1Z2PAY)))))
                         (map cdr g$map-env$9441$1Z2PAY)
                         (map (case-lambda
                                ((g$x$9448$1Z2PAY)
                                 (list 'ref (car g$x$9448$1Z2PAY))))
                              g$map-env$9441$1Z2PAY)))))
                   (g$gen-cons$9411$1Z2PAY
                     (case-lambda
                       ((g$e$9432$1Z2PAY
                          g$x$9433$1Z2PAY
                          g$y$9434$1Z2PAY
                          g$xnew$9435$1Z2PAY
                          g$ynew$9436$1Z2PAY)
                        ((case-lambda
                           ((g$t$9437$1Z2PAY)
                            (if (g$memv$5009$1Z2PAY g$t$9437$1Z2PAY '(quote))
                              (if (eq? (car g$xnew$9435$1Z2PAY) 'quote)
                                ((case-lambda
                                   ((g$xnew$9438$1Z2PAY g$ynew$9439$1Z2PAY)
                                    (if (if (eq? g$xnew$9438$1Z2PAY
                                                 g$x$9433$1Z2PAY)
                                          (begin
                                            '#f
                                            (eq? g$ynew$9439$1Z2PAY
                                                 g$y$9434$1Z2PAY))
                                          '#f)
                                      (list 'quote g$e$9432$1Z2PAY)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$9438$1Z2PAY
                                          g$ynew$9439$1Z2PAY)))))
                                 (g$cadr$5178$1Z2PAY g$xnew$9435$1Z2PAY)
                                 (g$cadr$5178$1Z2PAY g$ynew$9436$1Z2PAY))
                                (if (null?
                                      (g$cadr$5178$1Z2PAY g$ynew$9436$1Z2PAY))
                                  (list 'list g$xnew$9435$1Z2PAY)
                                  (list
                                    'cons
                                    g$xnew$9435$1Z2PAY
                                    g$ynew$9436$1Z2PAY)))
                              (if (g$memv$5009$1Z2PAY g$t$9437$1Z2PAY '(list))
                                (cons
                                  'list
                                  (cons
                                    g$xnew$9435$1Z2PAY
                                    (cdr g$ynew$9436$1Z2PAY)))
                                (list
                                  'cons
                                  g$xnew$9435$1Z2PAY
                                  g$ynew$9436$1Z2PAY)))))
                         (car g$ynew$9436$1Z2PAY)))))
                   (g$gen-vector$9412$1Z2PAY
                     (case-lambda
                       ((g$e$9429$1Z2PAY g$ls$9430$1Z2PAY g$lsnew$9431$1Z2PAY)
                        (if (eq? (car g$lsnew$9431$1Z2PAY) 'quote)
                          (if (eq? (g$cadr$5178$1Z2PAY g$lsnew$9431$1Z2PAY)
                                   g$ls$9430$1Z2PAY)
                            (list 'quote g$e$9429$1Z2PAY)
                            (list
                              'quote
                              (list->vector
                                (g$cadr$5178$1Z2PAY g$lsnew$9431$1Z2PAY))))
                          (if (eq? (car g$lsnew$9431$1Z2PAY) 'list)
                            (cons 'vector (cdr g$lsnew$9431$1Z2PAY))
                            (list 'list->vector g$lsnew$9431$1Z2PAY))))))
                   (g$regen$9413$1Z2PAY
                     (case-lambda
                       ((g$x$9426$1Z2PAY)
                        ((case-lambda
                           ((g$t$9427$1Z2PAY)
                            (if (g$memv$5009$1Z2PAY g$t$9427$1Z2PAY '(ref))
                              (g$cadr$5178$1Z2PAY g$x$9426$1Z2PAY)
                              (if (g$memv$5009$1Z2PAY
                                    g$t$9427$1Z2PAY
                                    '(primitive))
                                (list
                                  'primitive
                                  (g$cadr$5178$1Z2PAY g$x$9426$1Z2PAY))
                                (if (g$memv$5009$1Z2PAY
                                      g$t$9427$1Z2PAY
                                      '(quote))
                                  (list
                                    'quote
                                    (g$cadr$5178$1Z2PAY g$x$9426$1Z2PAY))
                                  (if (g$memv$5009$1Z2PAY
                                        g$t$9427$1Z2PAY
                                        '(lambda))
                                    (g$build-lambda$7216$1Z2PAY
                                      '#f
                                      (g$cadr$5178$1Z2PAY g$x$9426$1Z2PAY)
                                      (g$regen$9413$1Z2PAY
                                        (g$caddr$5184$1Z2PAY g$x$9426$1Z2PAY)))
                                    (if (g$memv$5009$1Z2PAY
                                          g$t$9427$1Z2PAY
                                          '(map))
                                      ((case-lambda
                                         ((g$ls$9428$1Z2PAY)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$9428$1Z2PAY)))
                                       (map g$regen$9413$1Z2PAY
                                            (cdr g$x$9426$1Z2PAY)))
                                      (cons
                                        (list 'primitive (car g$x$9426$1Z2PAY))
                                        (map g$regen$9413$1Z2PAY
                                             (cdr g$x$9426$1Z2PAY))))))))))
                         (car g$x$9426$1Z2PAY))))))
           (case-lambda
             ((g$e$9414$1Z2PAY g$r$9415$1Z2PAY g$mr$9416$1Z2PAY)
              ((case-lambda
                 ((g$t$9417$1Z2PAY)
                  ((case-lambda
                     ((g$ls/false$9418$1Z2PAY)
                      (if g$ls/false$9418$1Z2PAY
                        (apply
                          (case-lambda
                            ((g$x$9419$1Z2PAY)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$9406$1Z2PAY
                                    g$e$9414$1Z2PAY
                                    g$x$9419$1Z2PAY
                                    g$r$9415$1Z2PAY
                                    '()
                                    g$ellipsis?$7569$1Z2PAY
                                    '#f)))
                               (case-lambda
                                 ((g$e$9422$1Z2PAY g$maps$9423$1Z2PAY)
                                  ((case-lambda
                                     ((g$maps$9424$1Z2PAY g$e$9425$1Z2PAY)
                                      (g$regen$9413$1Z2PAY g$e$9425$1Z2PAY)))
                                   g$maps$9423$1Z2PAY
                                   g$e$9422$1Z2PAY))))))
                          g$ls/false$9418$1Z2PAY)
                        (g$syntax-violation$7679$1Z2PAY
                          '#f
                          '"invalid syntax"
                          g$t$9417$1Z2PAY))))
                   (g$syntax-dispatch$7568$1Z2PAY g$t$9417$1Z2PAY '(_ any)))))
               g$e$9414$1Z2PAY))))))))
   (g$core-macro-transformer$7575$1Z2PAY
     g$core-macro-transformer$11066$1Z2PAY
     (case-lambda
       ((g$name$9570$1Z2PAY)
        ((case-lambda
           ((g$t$9571$1Z2PAY)
            (if (g$memv$5009$1Z2PAY g$t$9571$1Z2PAY '(quote))
              g$quote-transformer$7528$1Z2PAY
              (if (g$memv$5009$1Z2PAY g$t$9571$1Z2PAY '(lambda))
                g$lambda-transformer$7530$1Z2PAY
                (if (g$memv$5009$1Z2PAY g$t$9571$1Z2PAY '(case-lambda))
                  g$case-lambda-transformer$7529$1Z2PAY
                  (if (g$memv$5009$1Z2PAY g$t$9571$1Z2PAY '(letrec))
                    g$letrec-transformer$7518$1Z2PAY
                    (if (g$memv$5009$1Z2PAY g$t$9571$1Z2PAY '(letrec*))
                      g$letrec*-transformer$7519$1Z2PAY
                      (if (g$memv$5009$1Z2PAY g$t$9571$1Z2PAY '(if))
                        g$if-transformer$7526$1Z2PAY
                        (if (g$memv$5009$1Z2PAY g$t$9571$1Z2PAY '(foreign-call))
                          g$foreign-call-transformer$7566$1Z2PAY
                          (if (g$memv$5009$1Z2PAY
                                g$t$9571$1Z2PAY
                                '(syntax-case))
                            g$syntax-case-transformer$7572$1Z2PAY
                            (if (g$memv$5009$1Z2PAY g$t$9571$1Z2PAY '(syntax))
                              g$syntax-transformer$7574$1Z2PAY
                              (if (g$memv$5009$1Z2PAY
                                    g$t$9571$1Z2PAY
                                    '(type-descriptor))
                                g$type-descriptor-transformer$7521$1Z2PAY
                                (if (g$memv$5009$1Z2PAY
                                      g$t$9571$1Z2PAY
                                      '(record-type-descriptor))
                                  g$record-type-descriptor-transformer$7522$1Z2PAY
                                  (if (g$memv$5009$1Z2PAY
                                        g$t$9571$1Z2PAY
                                        '(record-constructor-descriptor))
                                    g$record-constructor-descriptor-transformer$7523$1Z2PAY
                                    (if (g$memv$5009$1Z2PAY
                                          g$t$9571$1Z2PAY
                                          '(fluid-let-syntax))
                                      g$fluid-let-syntax-transformer$7520$1Z2PAY
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$9570$1Z2PAY))))))))))))))))
         g$name$9570$1Z2PAY))))
   (g$file-options-macro$7576$1Z2PAY
     g$file-options-macro$11067$1Z2PAY
     (case-lambda
       ((g$x$9572$1Z2PAY)
        (letrec* ((g$valid-option?$9573$1Z2PAY
                    (case-lambda
                      ((g$x$9578$1Z2PAY)
                       (if (g$id?$7290$1Z2PAY g$x$9578$1Z2PAY)
                         (begin
                           '#f
                           (g$memq$5008$1Z2PAY
                             (g$id->sym$7291$1Z2PAY g$x$9578$1Z2PAY)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$9574$1Z2PAY)
              ((case-lambda
                 ((g$ls/false$9575$1Z2PAY)
                  (if (if g$ls/false$9575$1Z2PAY
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$9576$1Z2PAY)
                               (if (g$for-all$5014$1Z2PAY
                                     g$valid-option?$9573$1Z2PAY
                                     g$opt*$9576$1Z2PAY)
                                 (begin
                                   '#f
                                   (g$file-options-spec$6564$1Z2PAY
                                     (map g$id->sym$7291$1Z2PAY
                                          g$opt*$9576$1Z2PAY)))
                                 '#f)))
                            g$ls/false$9575$1Z2PAY))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$9577$1Z2PAY)
                         (g$bless$7531$1Z2PAY
                           (list
                             'quote
                             (g$file-options-spec$6564$1Z2PAY
                               (map g$id->sym$7291$1Z2PAY
                                    g$opt*$9577$1Z2PAY))))))
                      g$ls/false$9575$1Z2PAY)
                    (g$syntax-violation$7679$1Z2PAY
                      '#f
                      '"invalid syntax"
                      g$t$9574$1Z2PAY))))
               (g$syntax-dispatch$7568$1Z2PAY
                 g$t$9574$1Z2PAY
                 '(_ . each-any)))))
           g$x$9572$1Z2PAY)))))
   (g$symbol-macro$7577$1Z2PAY
     g$symbol-macro$11068$1Z2PAY
     (case-lambda
       ((g$x$9579$1Z2PAY g$set$9580$1Z2PAY)
        ((case-lambda
           ((g$t$9581$1Z2PAY)
            ((case-lambda
               ((g$ls/false$9582$1Z2PAY)
                (if (if g$ls/false$9582$1Z2PAY
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$9583$1Z2PAY)
                             (if (g$id?$7290$1Z2PAY g$name$9583$1Z2PAY)
                               (begin
                                 '#f
                                 (g$memq$5008$1Z2PAY
                                   (g$id->sym$7291$1Z2PAY g$name$9583$1Z2PAY)
                                   g$set$9580$1Z2PAY))
                               '#f)))
                          g$ls/false$9582$1Z2PAY))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$9584$1Z2PAY)
                       (g$bless$7531$1Z2PAY (list 'quote g$name$9584$1Z2PAY))))
                    g$ls/false$9582$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$9581$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$9581$1Z2PAY '(_ any)))))
         g$x$9579$1Z2PAY))))
   (g$macro-transformer$7578$1Z2PAY
     g$macro-transformer$11069$1Z2PAY
     (case-lambda
       ((g$x$9585$1Z2PAY)
        (if (procedure? g$x$9585$1Z2PAY)
          g$x$9585$1Z2PAY
          (if (symbol? g$x$9585$1Z2PAY)
            ((case-lambda
               ((g$t$9586$1Z2PAY)
                (if (g$memv$5009$1Z2PAY g$t$9586$1Z2PAY '(define-record-type))
                  g$define-record-type-macro$7562$1Z2PAY
                  (if (g$memv$5009$1Z2PAY g$t$9586$1Z2PAY '(define-struct))
                    g$define-struct-macro$7561$1Z2PAY
                    (if (g$memv$5009$1Z2PAY g$t$9586$1Z2PAY '(include))
                      g$include-macro$7556$1Z2PAY
                      (if (g$memv$5009$1Z2PAY g$t$9586$1Z2PAY '(cond))
                        g$cond-macro$7554$1Z2PAY
                        (if (g$memv$5009$1Z2PAY g$t$9586$1Z2PAY '(let))
                          g$let-macro$7534$1Z2PAY
                          (if (g$memv$5009$1Z2PAY g$t$9586$1Z2PAY '(do))
                            g$do-macro$7550$1Z2PAY
                            (if (g$memv$5009$1Z2PAY g$t$9586$1Z2PAY '(or))
                              g$or-macro$7552$1Z2PAY
                              (if (g$memv$5009$1Z2PAY g$t$9586$1Z2PAY '(and))
                                g$and-macro$7553$1Z2PAY
                                (if (g$memv$5009$1Z2PAY g$t$9586$1Z2PAY '(let*))
                                  g$let*-macro$7551$1Z2PAY
                                  (if (g$memv$5009$1Z2PAY
                                        g$t$9586$1Z2PAY
                                        '(let-values))
                                    g$let-values-macro$7535$1Z2PAY
                                    (if (g$memv$5009$1Z2PAY
                                          g$t$9586$1Z2PAY
                                          '(let*-values))
                                      g$let*-values-macro$7536$1Z2PAY
                                      (if (g$memv$5009$1Z2PAY
                                            g$t$9586$1Z2PAY
                                            '(syntax-rules))
                                        g$syntax-rules-macro$7558$1Z2PAY
                                        (if (g$memv$5009$1Z2PAY
                                              g$t$9586$1Z2PAY
                                              '(quasiquote))
                                          g$quasiquote-macro$7559$1Z2PAY
                                          (if (g$memv$5009$1Z2PAY
                                                g$t$9586$1Z2PAY
                                                '(quasisyntax))
                                            g$quasisyntax-macro$7560$1Z2PAY
                                            (if (g$memv$5009$1Z2PAY
                                                  g$t$9586$1Z2PAY
                                                  '(with-syntax))
                                              g$with-syntax-macro$7532$1Z2PAY
                                              (if (g$memv$5009$1Z2PAY
                                                    g$t$9586$1Z2PAY
                                                    '(when))
                                                g$when-macro$7524$1Z2PAY
                                                (if (g$memv$5009$1Z2PAY
                                                      g$t$9586$1Z2PAY
                                                      '(unless))
                                                  g$unless-macro$7525$1Z2PAY
                                                  (if (g$memv$5009$1Z2PAY
                                                        g$t$9586$1Z2PAY
                                                        '(case))
                                                    g$case-macro$7527$1Z2PAY
                                                    (if (g$memv$5009$1Z2PAY
                                                          g$t$9586$1Z2PAY
                                                          '(identifier-syntax))
                                                      g$identifier-syntax-macro$7549$1Z2PAY
                                                      (if (g$memv$5009$1Z2PAY
                                                            g$t$9586$1Z2PAY
                                                            '(time))
                                                        g$time-macro$7545$1Z2PAY
                                                        (if (g$memv$5009$1Z2PAY
                                                              g$t$9586$1Z2PAY
                                                              '(delay))
                                                          g$delay-macro$7546$1Z2PAY
                                                          (if (g$memv$5009$1Z2PAY
                                                                g$t$9586$1Z2PAY
                                                                '(assert))
                                                            g$assert-macro$7547$1Z2PAY
                                                            (if (g$memv$5009$1Z2PAY
                                                                  g$t$9586$1Z2PAY
                                                                  '(endianness))
                                                              g$endianness-macro$7548$1Z2PAY
                                                              (if (g$memv$5009$1Z2PAY
                                                                    g$t$9586$1Z2PAY
                                                                    '(guard))
                                                                g$guard-macro$7543$1Z2PAY
                                                                (if (g$memv$5009$1Z2PAY
                                                                      g$t$9586$1Z2PAY
                                                                      '(define-enumeration))
                                                                  g$define-enumeration-macro$7544$1Z2PAY
                                                                  (if (g$memv$5009$1Z2PAY
                                                                        g$t$9586$1Z2PAY
                                                                        '(trace-lambda))
                                                                    g$trace-lambda-macro$7537$1Z2PAY
                                                                    (if (g$memv$5009$1Z2PAY
                                                                          g$t$9586$1Z2PAY
                                                                          '(trace-define))
                                                                      g$trace-define-macro$7538$1Z2PAY
                                                                      (if (g$memv$5009$1Z2PAY
                                                                            g$t$9586$1Z2PAY
                                                                            '(trace-define-syntax))
                                                                        g$trace-define-syntax-macro$7539$1Z2PAY
                                                                        (if (g$memv$5009$1Z2PAY
                                                                              g$t$9586$1Z2PAY
                                                                              '(trace-let-syntax))
                                                                          g$trace-let-syntax-macro$7541$1Z2PAY
                                                                          (if (g$memv$5009$1Z2PAY
                                                                                g$t$9586$1Z2PAY
                                                                                '(trace-letrec-syntax))
                                                                            g$trace-letrec-syntax-macro$7542$1Z2PAY
                                                                            (if (g$memv$5009$1Z2PAY
                                                                                  g$t$9586$1Z2PAY
                                                                                  '(define-condition-type))
                                                                              g$define-condition-type-macro$7563$1Z2PAY
                                                                              (if (g$memv$5009$1Z2PAY
                                                                                    g$t$9586$1Z2PAY
                                                                                    '(parameterize))
                                                                                g$parameterize-macro$7565$1Z2PAY
                                                                                (if (g$memv$5009$1Z2PAY
                                                                                      g$t$9586$1Z2PAY
                                                                                      '(include-into))
                                                                                  g$include-into-macro$7557$1Z2PAY
                                                                                  (if (g$memv$5009$1Z2PAY
                                                                                        g$t$9586$1Z2PAY
                                                                                        '(eol-style))
                                                                                    (case-lambda
                                                                                      ((g$x$9587$1Z2PAY)
                                                                                       (g$symbol-macro$7577$1Z2PAY
                                                                                         g$x$9587$1Z2PAY
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (g$memv$5009$1Z2PAY
                                                                                          g$t$9586$1Z2PAY
                                                                                          '(error-handling-mode))
                                                                                      (case-lambda
                                                                                        ((g$x$9588$1Z2PAY)
                                                                                         (g$symbol-macro$7577$1Z2PAY
                                                                                           g$x$9588$1Z2PAY
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (g$memv$5009$1Z2PAY
                                                                                            g$t$9586$1Z2PAY
                                                                                            '(buffer-mode))
                                                                                        (case-lambda
                                                                                          ((g$x$9589$1Z2PAY)
                                                                                           (g$symbol-macro$7577$1Z2PAY
                                                                                             g$x$9589$1Z2PAY
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (g$memv$5009$1Z2PAY
                                                                                              g$t$9586$1Z2PAY
                                                                                              '(file-options))
                                                                                          g$file-options-macro$7576$1Z2PAY
                                                                                          (if (g$memv$5009$1Z2PAY
                                                                                                g$t$9586$1Z2PAY
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$7564$1Z2PAY
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$9585$1Z2PAY)))))))))))))))))))))))))))))))))))))))))
             g$x$9585$1Z2PAY)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$9585$1Z2PAY))))))
   (g$local-macro-transformer$7579$1Z2PAY
     g$local-macro-transformer$11070$1Z2PAY
     (case-lambda ((g$x$9590$1Z2PAY) (car g$x$9590$1Z2PAY))))
   (g$do-macro-call$7580$1Z2PAY
     g$do-macro-call$11071$1Z2PAY
     (case-lambda
       ((g$transformer$9591$1Z2PAY g$expr$9592$1Z2PAY)
        ((case-lambda
           ((g$out$9593$1Z2PAY)
            (begin
              ((letrec ((g$f$9594$1Z2PAY
                          (case-lambda
                            ((g$x$9595$1Z2PAY)
                             (if (not (g$stx?$7262$1Z2PAY g$x$9595$1Z2PAY))
                               (if (pair? g$x$9595$1Z2PAY)
                                 (begin
                                   (g$f$9594$1Z2PAY (car g$x$9595$1Z2PAY))
                                   (g$f$9594$1Z2PAY (cdr g$x$9595$1Z2PAY)))
                                 (if (vector? g$x$9595$1Z2PAY)
                                   (vector-for-each
                                     g$f$9594$1Z2PAY
                                     g$x$9595$1Z2PAY)
                                   (if (symbol? g$x$9595$1Z2PAY)
                                     (g$syntax-violation$7679$1Z2PAY
                                       '#f
                                       '"raw symbol encountered in output of macro"
                                       g$expr$9592$1Z2PAY
                                       g$x$9595$1Z2PAY)
                                     (void))))
                               (void))))))
                 g$f$9594$1Z2PAY)
               g$out$9593$1Z2PAY)
              (g$add-mark$7279$1Z2PAY
                (g$gen-mark$7274$1Z2PAY)
                g$out$9593$1Z2PAY
                g$expr$9592$1Z2PAY))))
         (g$transformer$9591$1Z2PAY
           (g$add-mark$7279$1Z2PAY
             g$anti-mark$7275$1Z2PAY
             g$expr$9592$1Z2PAY
             '#f))))))
   (g$chi-macro$7581$1Z2PAY
     g$chi-macro$11072$1Z2PAY
     (case-lambda
       ((g$p$9596$1Z2PAY g$e$9597$1Z2PAY)
        (g$do-macro-call$7580$1Z2PAY
          (g$macro-transformer$7578$1Z2PAY g$p$9596$1Z2PAY)
          g$e$9597$1Z2PAY))))
   (g$chi-local-macro$7582$1Z2PAY
     g$chi-local-macro$11073$1Z2PAY
     (case-lambda
       ((g$p$9598$1Z2PAY g$e$9599$1Z2PAY)
        (g$do-macro-call$7580$1Z2PAY
          (g$local-macro-transformer$7579$1Z2PAY g$p$9598$1Z2PAY)
          g$e$9599$1Z2PAY))))
   (g$chi-global-macro$7583$1Z2PAY
     g$chi-global-macro$11074$1Z2PAY
     (case-lambda
       ((g$p$9600$1Z2PAY g$e$9601$1Z2PAY)
        ((case-lambda
           ((g$lib$9602$1Z2PAY g$loc$9603$1Z2PAY)
            (begin
              (g$visit-library$7101$1Z2PAY g$lib$9602$1Z2PAY)
              ((case-lambda
                 ((g$x$9604$1Z2PAY)
                  ((case-lambda
                     ((g$transformer$9605$1Z2PAY)
                      (g$do-macro-call$7580$1Z2PAY
                        g$transformer$9605$1Z2PAY
                        g$e$9601$1Z2PAY)))
                   (if (procedure? g$x$9604$1Z2PAY)
                     g$x$9604$1Z2PAY
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$9604$1Z2PAY)))))
               (symbol-value g$loc$9603$1Z2PAY)))))
         (car g$p$9600$1Z2PAY)
         (cdr g$p$9600$1Z2PAY)))))
   (g$chi-expr*$7584$1Z2PAY
     g$chi-expr*$11075$1Z2PAY
     (case-lambda
       ((g$e*$9606$1Z2PAY g$r$9607$1Z2PAY g$mr$9608$1Z2PAY)
        (if (null? g$e*$9606$1Z2PAY)
          '()
          ((case-lambda
             ((g$e$9609$1Z2PAY)
              (cons
                g$e$9609$1Z2PAY
                (g$chi-expr*$7584$1Z2PAY
                  (cdr g$e*$9606$1Z2PAY)
                  g$r$9607$1Z2PAY
                  g$mr$9608$1Z2PAY))))
           (g$chi-expr$7586$1Z2PAY
             (car g$e*$9606$1Z2PAY)
             g$r$9607$1Z2PAY
             g$mr$9608$1Z2PAY))))))
   (g$chi-application$7585$1Z2PAY
     g$chi-application$11076$1Z2PAY
     (case-lambda
       ((g$e$9610$1Z2PAY g$r$9611$1Z2PAY g$mr$9612$1Z2PAY)
        ((case-lambda
           ((g$t$9613$1Z2PAY)
            ((case-lambda
               ((g$ls/false$9614$1Z2PAY)
                (if g$ls/false$9614$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$rator$9615$1Z2PAY g$rands$9616$1Z2PAY)
                       ((case-lambda
                          ((g$rator$9617$1Z2PAY)
                           (cons
                             g$rator$9617$1Z2PAY
                             (g$chi-expr*$7584$1Z2PAY
                               g$rands$9616$1Z2PAY
                               g$r$9611$1Z2PAY
                               g$mr$9612$1Z2PAY))))
                        (g$chi-expr$7586$1Z2PAY
                          g$rator$9615$1Z2PAY
                          g$r$9611$1Z2PAY
                          g$mr$9612$1Z2PAY))))
                    g$ls/false$9614$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$9613$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$9613$1Z2PAY
               '(any . each-any)))))
         g$e$9610$1Z2PAY))))
   (g$chi-expr$7586$1Z2PAY
     g$chi-expr$11077$1Z2PAY
     (case-lambda
       ((g$e$9618$1Z2PAY g$r$9619$1Z2PAY g$mr$9620$1Z2PAY)
        (call-with-values
          (case-lambda
            (() (g$syntax-type$7310$1Z2PAY g$e$9618$1Z2PAY g$r$9619$1Z2PAY)))
          (case-lambda
            ((g$type$9624$1Z2PAY g$value$9625$1Z2PAY g$kwd$9626$1Z2PAY)
             ((case-lambda
                ((g$kwd$9627$1Z2PAY g$value$9628$1Z2PAY g$type$9629$1Z2PAY)
                 ((case-lambda
                    ((g$t$9630$1Z2PAY)
                     (if (g$memv$5009$1Z2PAY g$t$9630$1Z2PAY '(core-macro))
                       ((case-lambda
                          ((g$transformer$9631$1Z2PAY)
                           (g$transformer$9631$1Z2PAY
                             g$e$9618$1Z2PAY
                             g$r$9619$1Z2PAY
                             g$mr$9620$1Z2PAY)))
                        (g$core-macro-transformer$7575$1Z2PAY
                          g$value$9628$1Z2PAY))
                       (if (g$memv$5009$1Z2PAY g$t$9630$1Z2PAY '(global))
                         ((case-lambda
                            ((g$lib$9632$1Z2PAY)
                             ((case-lambda
                                ((g$loc$9633$1Z2PAY)
                                 ((case-lambda
                                    (()
                                     (begin
                                       ((g$inv-collector$7620$1Z2PAY)
                                        g$lib$9632$1Z2PAY)
                                       g$loc$9633$1Z2PAY))))))
                              (cdr g$value$9628$1Z2PAY))))
                          (car g$value$9628$1Z2PAY))
                         (if (g$memv$5009$1Z2PAY g$t$9630$1Z2PAY '(core-prim))
                           ((case-lambda
                              ((g$name$9634$1Z2PAY)
                               (list 'primitive g$name$9634$1Z2PAY)))
                            g$value$9628$1Z2PAY)
                           (if (g$memv$5009$1Z2PAY g$t$9630$1Z2PAY '(call))
                             (g$chi-application$7585$1Z2PAY
                               g$e$9618$1Z2PAY
                               g$r$9619$1Z2PAY
                               g$mr$9620$1Z2PAY)
                             (if (g$memv$5009$1Z2PAY g$t$9630$1Z2PAY '(lexical))
                               ((case-lambda
                                  ((g$lex$9635$1Z2PAY) g$lex$9635$1Z2PAY))
                                (g$lexical-var$7512$1Z2PAY g$value$9628$1Z2PAY))
                               (if (g$memv$5009$1Z2PAY
                                     g$t$9630$1Z2PAY
                                     '(global-macro global-macro!))
                                 (g$chi-expr$7586$1Z2PAY
                                   (g$chi-global-macro$7583$1Z2PAY
                                     g$value$9628$1Z2PAY
                                     g$e$9618$1Z2PAY)
                                   g$r$9619$1Z2PAY
                                   g$mr$9620$1Z2PAY)
                                 (if (g$memv$5009$1Z2PAY
                                       g$t$9630$1Z2PAY
                                       '(local-macro local-macro!))
                                   (g$chi-expr$7586$1Z2PAY
                                     (g$chi-local-macro$7582$1Z2PAY
                                       g$value$9628$1Z2PAY
                                       g$e$9618$1Z2PAY)
                                     g$r$9619$1Z2PAY
                                     g$mr$9620$1Z2PAY)
                                   (if (g$memv$5009$1Z2PAY
                                         g$t$9630$1Z2PAY
                                         '(macro macro!))
                                     (g$chi-expr$7586$1Z2PAY
                                       (g$chi-macro$7581$1Z2PAY
                                         g$value$9628$1Z2PAY
                                         g$e$9618$1Z2PAY)
                                       g$r$9619$1Z2PAY
                                       g$mr$9620$1Z2PAY)
                                     (if (g$memv$5009$1Z2PAY
                                           g$t$9630$1Z2PAY
                                           '(constant))
                                       ((case-lambda
                                          ((g$datum$9636$1Z2PAY)
                                           (list 'quote g$datum$9636$1Z2PAY)))
                                        g$value$9628$1Z2PAY)
                                       (if (g$memv$5009$1Z2PAY
                                             g$t$9630$1Z2PAY
                                             '(set!))
                                         (g$chi-set!$7587$1Z2PAY
                                           g$e$9618$1Z2PAY
                                           g$r$9619$1Z2PAY
                                           g$mr$9620$1Z2PAY)
                                         (if (g$memv$5009$1Z2PAY
                                               g$t$9630$1Z2PAY
                                               '(begin))
                                           ((case-lambda
                                              ((g$t$9637$1Z2PAY)
                                               ((case-lambda
                                                  ((g$ls/false$9638$1Z2PAY)
                                                   (if g$ls/false$9638$1Z2PAY
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9639$1Z2PAY
                                                            g$x*$9640$1Z2PAY)
                                                          (g$build-sequence$7219$1Z2PAY
                                                            '#f
                                                            (g$chi-expr*$7584$1Z2PAY
                                                              (cons
                                                                g$x$9639$1Z2PAY
                                                                g$x*$9640$1Z2PAY)
                                                              g$r$9619$1Z2PAY
                                                              g$mr$9620$1Z2PAY))))
                                                       g$ls/false$9638$1Z2PAY)
                                                     (g$syntax-violation$7679$1Z2PAY
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9637$1Z2PAY))))
                                                (g$syntax-dispatch$7568$1Z2PAY
                                                  g$t$9637$1Z2PAY
                                                  '(_ any . each-any)))))
                                            g$e$9618$1Z2PAY)
                                           (if (g$memv$5009$1Z2PAY
                                                 g$t$9630$1Z2PAY
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$9641$1Z2PAY)
                                                 ((case-lambda
                                                    ((g$ls/false$9642$1Z2PAY)
                                                     (if (if g$ls/false$9642$1Z2PAY
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$9643$1Z2PAY
                                                                    g$xrhs*$9644$1Z2PAY
                                                                    g$xbody$9645$1Z2PAY
                                                                    g$xbody*$9646$1Z2PAY)
                                                                  (if (not (g$valid-bound-ids?$7295$1Z2PAY
                                                                             g$xlhs*$9643$1Z2PAY))
                                                                    (g$syntax-violation$7679$1Z2PAY
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$9618$1Z2PAY)
                                                                    (void))))
                                                               g$ls/false$9642$1Z2PAY))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$9647$1Z2PAY
                                                              g$xrhs*$9648$1Z2PAY
                                                              g$xbody$9649$1Z2PAY
                                                              g$xbody*$9650$1Z2PAY)
                                                            ((case-lambda
                                                               ((g$xlab*$9651$1Z2PAY)
                                                                ((case-lambda
                                                                   ((g$xrib$9652$1Z2PAY)
                                                                    ((case-lambda
                                                                       ((g$xb*$9653$1Z2PAY)
                                                                        ((case-lambda
                                                                           (()
                                                                            (g$build-sequence$7219$1Z2PAY
                                                                              '#f
                                                                              (g$chi-expr*$7584$1Z2PAY
                                                                                (map (case-lambda
                                                                                       ((g$x$9654$1Z2PAY)
                                                                                        (g$add-subst$7280$1Z2PAY
                                                                                          g$xrib$9652$1Z2PAY
                                                                                          g$x$9654$1Z2PAY)))
                                                                                     (cons
                                                                                       g$xbody$9649$1Z2PAY
                                                                                       g$xbody*$9650$1Z2PAY))
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$9651$1Z2PAY
                                                                                       g$xb*$9653$1Z2PAY)
                                                                                  g$r$9619$1Z2PAY)
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$9651$1Z2PAY
                                                                                       g$xb*$9653$1Z2PAY)
                                                                                  g$mr$9620$1Z2PAY))))))))
                                                                     (map (case-lambda
                                                                            ((g$x$9655$1Z2PAY)
                                                                             (g$make-eval-transformer$7322$1Z2PAY
                                                                               (g$expand-transformer$7613$1Z2PAY
                                                                                 (if (eq? g$type$9629$1Z2PAY
                                                                                          'let-syntax)
                                                                                   g$x$9655$1Z2PAY
                                                                                   (g$add-subst$7280$1Z2PAY
                                                                                     g$xrib$9652$1Z2PAY
                                                                                     g$x$9655$1Z2PAY))
                                                                                 g$mr$9620$1Z2PAY))))
                                                                          g$xrhs*$9648$1Z2PAY))))
                                                                 (g$make-full-rib$7258$1Z2PAY
                                                                   g$xlhs*$9647$1Z2PAY
                                                                   g$xlab*$9651$1Z2PAY))))
                                                             (map g$gen-label$7231$1Z2PAY
                                                                  g$xlhs*$9647$1Z2PAY))))
                                                         g$ls/false$9642$1Z2PAY)
                                                       (g$syntax-violation$7679$1Z2PAY
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$9641$1Z2PAY))))
                                                  (g$syntax-dispatch$7568$1Z2PAY
                                                    g$t$9641$1Z2PAY
                                                    '(_ #(each (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$9618$1Z2PAY)
                                             (if (g$memv$5009$1Z2PAY
                                                   g$t$9630$1Z2PAY
                                                   '(displaced-lexical))
                                               (g$syntax-violation$7679$1Z2PAY
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$9618$1Z2PAY)
                                               (if (g$memv$5009$1Z2PAY
                                                     g$t$9630$1Z2PAY
                                                     '(syntax))
                                                 (g$syntax-violation$7679$1Z2PAY
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$9618$1Z2PAY)
                                                 (if (g$memv$5009$1Z2PAY
                                                       g$t$9630$1Z2PAY
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$7679$1Z2PAY
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$9656$1Z2PAY)
                                                           (if (g$memv$5009$1Z2PAY
                                                                 g$t$9656$1Z2PAY
                                                                 '(define))
                                                             '"a definition"
                                                             (if (g$memv$5009$1Z2PAY
                                                                   g$t$9656$1Z2PAY
                                                                   '(define-syntax))
                                                               '"a define-syntax"
                                                               (if (g$memv$5009$1Z2PAY
                                                                     g$t$9656$1Z2PAY
                                                                     '(module))
                                                                 '"a module definition"
                                                                 (if (g$memv$5009$1Z2PAY
                                                                       g$t$9656$1Z2PAY
                                                                       '(library))
                                                                   '"a library definition"
                                                                   (if (g$memv$5009$1Z2PAY
                                                                         g$t$9656$1Z2PAY
                                                                         '(import))
                                                                     '"an import declaration"
                                                                     (if (g$memv$5009$1Z2PAY
                                                                           g$t$9656$1Z2PAY
                                                                           '(export))
                                                                       '"an export declaration"
                                                                       '"a non-expression"))))))))
                                                        g$type$9629$1Z2PAY)
                                                       '" was found where an expression was expected")
                                                     g$e$9618$1Z2PAY)
                                                   (if (g$memv$5009$1Z2PAY
                                                         g$t$9630$1Z2PAY
                                                         '(mutable))
                                                     (g$syntax-violation$7679$1Z2PAY
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$9618$1Z2PAY)
                                                     (g$syntax-violation$7679$1Z2PAY
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$9618$1Z2PAY)))))))))))))))))))
                  g$type$9629$1Z2PAY)))
              g$kwd$9626$1Z2PAY
              g$value$9625$1Z2PAY
              g$type$9624$1Z2PAY)))))))
   (g$chi-set!$7587$1Z2PAY
     g$chi-set!$11078$1Z2PAY
     (case-lambda
       ((g$e$9657$1Z2PAY g$r$9658$1Z2PAY g$mr$9659$1Z2PAY)
        ((case-lambda
           ((g$t$9660$1Z2PAY)
            ((case-lambda
               ((g$ls/false$9661$1Z2PAY)
                (if (if g$ls/false$9661$1Z2PAY
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$9662$1Z2PAY g$v$9663$1Z2PAY)
                             (g$id?$7290$1Z2PAY g$x$9662$1Z2PAY)))
                          g$ls/false$9661$1Z2PAY))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$9664$1Z2PAY g$v$9665$1Z2PAY)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$7310$1Z2PAY
                              g$x$9664$1Z2PAY
                              g$r$9658$1Z2PAY)))
                         (case-lambda
                           ((g$type$9669$1Z2PAY
                              g$value$9670$1Z2PAY
                              g$kwd$9671$1Z2PAY)
                            ((case-lambda
                               ((g$kwd$9672$1Z2PAY
                                  g$value$9673$1Z2PAY
                                  g$type$9674$1Z2PAY)
                                ((case-lambda
                                   ((g$t$9675$1Z2PAY)
                                    (if (g$memv$5009$1Z2PAY
                                          g$t$9675$1Z2PAY
                                          '(lexical))
                                      (begin
                                        (g$set-lexical-mutable!$7514$1Z2PAY
                                          g$value$9673$1Z2PAY
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$7512$1Z2PAY
                                            g$value$9673$1Z2PAY)
                                          (g$chi-expr$7586$1Z2PAY
                                            g$v$9665$1Z2PAY
                                            g$r$9658$1Z2PAY
                                            g$mr$9659$1Z2PAY)))
                                      (if (g$memv$5009$1Z2PAY
                                            g$t$9675$1Z2PAY
                                            '(core-prim))
                                        (g$syntax-violation$7679$1Z2PAY
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$9657$1Z2PAY)
                                        (if (g$memv$5009$1Z2PAY
                                              g$t$9675$1Z2PAY
                                              '(global))
                                          (g$syntax-violation$7679$1Z2PAY
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$9657$1Z2PAY)
                                          (if (g$memv$5009$1Z2PAY
                                                g$t$9675$1Z2PAY
                                                '(global-macro!))
                                            (g$chi-expr$7586$1Z2PAY
                                              (g$chi-global-macro$7583$1Z2PAY
                                                g$value$9673$1Z2PAY
                                                g$e$9657$1Z2PAY)
                                              g$r$9658$1Z2PAY
                                              g$mr$9659$1Z2PAY)
                                            (if (g$memv$5009$1Z2PAY
                                                  g$t$9675$1Z2PAY
                                                  '(local-macro!))
                                              (g$chi-expr$7586$1Z2PAY
                                                (g$chi-local-macro$7582$1Z2PAY
                                                  g$value$9673$1Z2PAY
                                                  g$e$9657$1Z2PAY)
                                                g$r$9658$1Z2PAY
                                                g$mr$9659$1Z2PAY)
                                              (if (g$memv$5009$1Z2PAY
                                                    g$t$9675$1Z2PAY
                                                    '(mutable))
                                                (g$syntax-violation$7679$1Z2PAY
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$9657$1Z2PAY)
                                                (g$syntax-violation$7679$1Z2PAY
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$9657$1Z2PAY)))))))))
                                 g$type$9674$1Z2PAY)))
                             g$kwd$9671$1Z2PAY
                             g$value$9670$1Z2PAY
                             g$type$9669$1Z2PAY))))))
                    g$ls/false$9661$1Z2PAY)
                  (g$syntax-violation$7679$1Z2PAY
                    '#f
                    '"invalid syntax"
                    g$t$9660$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$9660$1Z2PAY '(_ any any)))))
         g$e$9657$1Z2PAY))))
   (g$verify-formals$7588$1Z2PAY
     g$verify-formals$11079$1Z2PAY
     (case-lambda
       ((g$fmls$9676$1Z2PAY g$stx$9677$1Z2PAY)
        ((case-lambda
           ((g$t$9678$1Z2PAY)
            ((case-lambda
               ((g$ls/false$9679$1Z2PAY)
                (if g$ls/false$9679$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$x*$9680$1Z2PAY)
                       (if (not (g$valid-bound-ids?$7295$1Z2PAY
                                  g$x*$9680$1Z2PAY))
                         (g$invalid-fmls-error$7533$1Z2PAY
                           g$stx$9677$1Z2PAY
                           g$fmls$9676$1Z2PAY)
                         (void))))
                    g$ls/false$9679$1Z2PAY)
                  ((case-lambda
                     ((g$t$9681$1Z2PAY)
                      ((case-lambda
                         ((g$ls/false$9682$1Z2PAY)
                          (if g$ls/false$9682$1Z2PAY
                            (apply
                              (case-lambda
                                ((g$x*$9683$1Z2PAY g$x$9684$1Z2PAY)
                                 (if (not (g$valid-bound-ids?$7295$1Z2PAY
                                            (cons
                                              g$x$9684$1Z2PAY
                                              g$x*$9683$1Z2PAY)))
                                   (g$invalid-fmls-error$7533$1Z2PAY
                                     g$stx$9677$1Z2PAY
                                     g$fmls$9676$1Z2PAY)
                                   (void))))
                              g$ls/false$9682$1Z2PAY)
                            ((case-lambda
                               ((g$t$9685$1Z2PAY)
                                ((case-lambda
                                   ((g$ls/false$9686$1Z2PAY)
                                    (if g$ls/false$9686$1Z2PAY
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7679$1Z2PAY
                                             '#f
                                             '"invalid syntax"
                                             g$stx$9677$1Z2PAY)))
                                        g$ls/false$9686$1Z2PAY)
                                      (g$syntax-violation$7679$1Z2PAY
                                        '#f
                                        '"invalid syntax"
                                        g$t$9685$1Z2PAY))))
                                 (g$syntax-dispatch$7568$1Z2PAY
                                   g$t$9685$1Z2PAY
                                   '_))))
                             g$t$9681$1Z2PAY))))
                       (g$syntax-dispatch$7568$1Z2PAY
                         g$t$9681$1Z2PAY
                         '#(each+ any () any)))))
                   g$t$9678$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$9678$1Z2PAY 'each-any))))
         g$fmls$9676$1Z2PAY))))
   (g$chi-lambda-clause$7589$1Z2PAY
     g$chi-lambda-clause$11080$1Z2PAY
     (case-lambda
       ((g$stx$9687$1Z2PAY
          g$fmls$9688$1Z2PAY
          g$body*$9689$1Z2PAY
          g$r$9690$1Z2PAY
          g$mr$9691$1Z2PAY)
        ((case-lambda
           ((g$t$9692$1Z2PAY)
            ((case-lambda
               ((g$ls/false$9693$1Z2PAY)
                (if g$ls/false$9693$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$x*$9694$1Z2PAY)
                       (begin
                         (g$verify-formals$7588$1Z2PAY
                           g$fmls$9688$1Z2PAY
                           g$stx$9687$1Z2PAY)
                         ((case-lambda
                            ((g$lex*$9695$1Z2PAY g$lab*$9696$1Z2PAY)
                             (values
                               g$lex*$9695$1Z2PAY
                               (g$chi-internal$7597$1Z2PAY
                                 (g$add-subst$7280$1Z2PAY
                                   (g$make-full-rib$7258$1Z2PAY
                                     g$x*$9694$1Z2PAY
                                     g$lab*$9696$1Z2PAY)
                                   g$body*$9689$1Z2PAY)
                                 (g$add-lexicals$7516$1Z2PAY
                                   g$lab*$9696$1Z2PAY
                                   g$lex*$9695$1Z2PAY
                                   g$r$9690$1Z2PAY)
                                 g$mr$9691$1Z2PAY))))
                          (map g$gen-lexical$7229$1Z2PAY g$x*$9694$1Z2PAY)
                          (map g$gen-label$7231$1Z2PAY g$x*$9694$1Z2PAY)))))
                    g$ls/false$9693$1Z2PAY)
                  ((case-lambda
                     ((g$t$9697$1Z2PAY)
                      ((case-lambda
                         ((g$ls/false$9698$1Z2PAY)
                          (if g$ls/false$9698$1Z2PAY
                            (apply
                              (case-lambda
                                ((g$x*$9699$1Z2PAY g$x$9700$1Z2PAY)
                                 (begin
                                   (g$verify-formals$7588$1Z2PAY
                                     g$fmls$9688$1Z2PAY
                                     g$stx$9687$1Z2PAY)
                                   ((case-lambda
                                      ((g$lex*$9701$1Z2PAY
                                         g$lab*$9702$1Z2PAY
                                         g$lex$9703$1Z2PAY
                                         g$lab$9704$1Z2PAY)
                                       (values
                                         (append
                                           g$lex*$9701$1Z2PAY
                                           g$lex$9703$1Z2PAY)
                                         (g$chi-internal$7597$1Z2PAY
                                           (g$add-subst$7280$1Z2PAY
                                             (g$make-full-rib$7258$1Z2PAY
                                               (cons
                                                 g$x$9700$1Z2PAY
                                                 g$x*$9699$1Z2PAY)
                                               (cons
                                                 g$lab$9704$1Z2PAY
                                                 g$lab*$9702$1Z2PAY))
                                             g$body*$9689$1Z2PAY)
                                           (g$add-lexicals$7516$1Z2PAY
                                             (cons
                                               g$lab$9704$1Z2PAY
                                               g$lab*$9702$1Z2PAY)
                                             (cons
                                               g$lex$9703$1Z2PAY
                                               g$lex*$9701$1Z2PAY)
                                             g$r$9690$1Z2PAY)
                                           g$mr$9691$1Z2PAY))))
                                    (map g$gen-lexical$7229$1Z2PAY
                                         g$x*$9699$1Z2PAY)
                                    (map g$gen-label$7231$1Z2PAY
                                         g$x*$9699$1Z2PAY)
                                    (g$gen-lexical$7229$1Z2PAY g$x$9700$1Z2PAY)
                                    (g$gen-label$7231$1Z2PAY
                                      g$x$9700$1Z2PAY)))))
                              g$ls/false$9698$1Z2PAY)
                            ((case-lambda
                               ((g$t$9705$1Z2PAY)
                                ((case-lambda
                                   ((g$ls/false$9706$1Z2PAY)
                                    (if g$ls/false$9706$1Z2PAY
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7679$1Z2PAY
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$9688$1Z2PAY)))
                                        g$ls/false$9706$1Z2PAY)
                                      (g$syntax-violation$7679$1Z2PAY
                                        '#f
                                        '"invalid syntax"
                                        g$t$9705$1Z2PAY))))
                                 (g$syntax-dispatch$7568$1Z2PAY
                                   g$t$9705$1Z2PAY
                                   '_))))
                             g$t$9697$1Z2PAY))))
                       (g$syntax-dispatch$7568$1Z2PAY
                         g$t$9697$1Z2PAY
                         '#(each+ any () any)))))
                   g$t$9692$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$9692$1Z2PAY 'each-any))))
         g$fmls$9688$1Z2PAY))))
   (g$chi-lambda-clause*$7590$1Z2PAY
     g$chi-lambda-clause*$11081$1Z2PAY
     (case-lambda
       ((g$stx$9707$1Z2PAY
          g$fmls*$9708$1Z2PAY
          g$body**$9709$1Z2PAY
          g$r$9710$1Z2PAY
          g$mr$9711$1Z2PAY)
        (if (null? g$fmls*$9708$1Z2PAY)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$7589$1Z2PAY
                 g$stx$9707$1Z2PAY
                 (car g$fmls*$9708$1Z2PAY)
                 (car g$body**$9709$1Z2PAY)
                 g$r$9710$1Z2PAY
                 g$mr$9711$1Z2PAY)))
            (case-lambda
              ((g$a$9714$1Z2PAY g$b$9715$1Z2PAY)
               ((case-lambda
                  ((g$b$9716$1Z2PAY g$a$9717$1Z2PAY)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$7590$1Z2PAY
                          g$stx$9707$1Z2PAY
                          (cdr g$fmls*$9708$1Z2PAY)
                          (cdr g$body**$9709$1Z2PAY)
                          g$r$9710$1Z2PAY
                          g$mr$9711$1Z2PAY)))
                     (case-lambda
                       ((g$a*$9720$1Z2PAY g$b*$9721$1Z2PAY)
                        ((case-lambda
                           ((g$b*$9722$1Z2PAY g$a*$9723$1Z2PAY)
                            (values
                              (cons g$a$9717$1Z2PAY g$a*$9723$1Z2PAY)
                              (cons g$b$9716$1Z2PAY g$b*$9722$1Z2PAY))))
                         g$b*$9721$1Z2PAY
                         g$a*$9720$1Z2PAY))))))
                g$b$9715$1Z2PAY
                g$a$9714$1Z2PAY))))))))
   (g$chi-defun$7591$1Z2PAY
     g$chi-defun$11082$1Z2PAY
     (case-lambda
       ((g$x$9724$1Z2PAY g$r$9725$1Z2PAY g$mr$9726$1Z2PAY)
        ((case-lambda
           ((g$fmls$9727$1Z2PAY g$body*$9728$1Z2PAY)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$7589$1Z2PAY
                   g$fmls$9727$1Z2PAY
                   g$fmls$9727$1Z2PAY
                   g$body*$9728$1Z2PAY
                   g$r$9725$1Z2PAY
                   g$mr$9726$1Z2PAY)))
              (case-lambda
                ((g$fmls$9731$1Z2PAY g$body$9732$1Z2PAY)
                 ((case-lambda
                    ((g$body$9733$1Z2PAY g$fmls$9734$1Z2PAY)
                     (g$build-lambda$7216$1Z2PAY
                       '#f
                       g$fmls$9734$1Z2PAY
                       g$body$9733$1Z2PAY)))
                  g$body$9732$1Z2PAY
                  g$fmls$9731$1Z2PAY))))))
         (car g$x$9724$1Z2PAY)
         (cdr g$x$9724$1Z2PAY)))))
   (g$chi-rhs$7592$1Z2PAY
     g$chi-rhs$11083$1Z2PAY
     (case-lambda
       ((g$rhs$9735$1Z2PAY g$r$9736$1Z2PAY g$mr$9737$1Z2PAY)
        ((case-lambda
           ((g$t$9738$1Z2PAY)
            (if (g$memv$5009$1Z2PAY g$t$9738$1Z2PAY '(defun))
              (g$chi-defun$7591$1Z2PAY
                (cdr g$rhs$9735$1Z2PAY)
                g$r$9736$1Z2PAY
                g$mr$9737$1Z2PAY)
              (if (g$memv$5009$1Z2PAY g$t$9738$1Z2PAY '(expr))
                ((case-lambda
                   ((g$expr$9739$1Z2PAY)
                    (g$chi-expr$7586$1Z2PAY
                      g$expr$9739$1Z2PAY
                      g$r$9736$1Z2PAY
                      g$mr$9737$1Z2PAY)))
                 (cdr g$rhs$9735$1Z2PAY))
                (if (g$memv$5009$1Z2PAY g$t$9738$1Z2PAY '(top-expr))
                  ((case-lambda
                     ((g$expr$9740$1Z2PAY)
                      (g$build-sequence$7219$1Z2PAY
                        '#f
                        (list
                          (g$chi-expr$7586$1Z2PAY
                            g$expr$9740$1Z2PAY
                            g$r$9736$1Z2PAY
                            g$mr$9737$1Z2PAY)
                          (g$build-void$7220$1Z2PAY)))))
                   (cdr g$rhs$9735$1Z2PAY))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$9735$1Z2PAY))))))
         (car g$rhs$9735$1Z2PAY)))))
   (g$expand-interaction-rhs*/init*$7593$1Z2PAY
     g$expand-interaction-rhs*/init*$11084$1Z2PAY
     (case-lambda
       ((g$lhs*$9741$1Z2PAY
          g$rhs*$9742$1Z2PAY
          g$init*$9743$1Z2PAY
          g$r$9744$1Z2PAY
          g$mr$9745$1Z2PAY)
        ((letrec ((g$f$9746$1Z2PAY
                    (case-lambda
                      ((g$lhs*$9747$1Z2PAY g$rhs*$9748$1Z2PAY)
                       (if (null? g$lhs*$9747$1Z2PAY)
                         (map (case-lambda
                                ((g$x$9749$1Z2PAY)
                                 (g$chi-expr$7586$1Z2PAY
                                   g$x$9749$1Z2PAY
                                   g$r$9744$1Z2PAY
                                   g$mr$9745$1Z2PAY)))
                              g$init*$9743$1Z2PAY)
                         ((case-lambda
                            ((g$lhs$9750$1Z2PAY g$rhs$9751$1Z2PAY)
                             ((case-lambda
                                ((g$t$9752$1Z2PAY)
                                 (if (g$memv$5009$1Z2PAY
                                       g$t$9752$1Z2PAY
                                       '(defun))
                                   ((case-lambda
                                      ((g$rhs$9753$1Z2PAY)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$9750$1Z2PAY
                                           g$rhs$9753$1Z2PAY)
                                         (g$f$9746$1Z2PAY
                                           (cdr g$lhs*$9747$1Z2PAY)
                                           (cdr g$rhs*$9748$1Z2PAY)))))
                                    (g$chi-defun$7591$1Z2PAY
                                      (cdr g$rhs$9751$1Z2PAY)
                                      g$r$9744$1Z2PAY
                                      g$mr$9745$1Z2PAY))
                                   (if (g$memv$5009$1Z2PAY
                                         g$t$9752$1Z2PAY
                                         '(expr))
                                     ((case-lambda
                                        ((g$rhs$9754$1Z2PAY)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$9750$1Z2PAY
                                             g$rhs$9754$1Z2PAY)
                                           (g$f$9746$1Z2PAY
                                             (cdr g$lhs*$9747$1Z2PAY)
                                             (cdr g$rhs*$9748$1Z2PAY)))))
                                      (g$chi-expr$7586$1Z2PAY
                                        (cdr g$rhs$9751$1Z2PAY)
                                        g$r$9744$1Z2PAY
                                        g$mr$9745$1Z2PAY))
                                     (if (g$memv$5009$1Z2PAY
                                           g$t$9752$1Z2PAY
                                           '(top-expr))
                                       ((case-lambda
                                          ((g$e$9755$1Z2PAY)
                                           (cons
                                             g$e$9755$1Z2PAY
                                             (g$f$9746$1Z2PAY
                                               (cdr g$lhs*$9747$1Z2PAY)
                                               (cdr g$rhs*$9748$1Z2PAY)))))
                                        (g$chi-expr$7586$1Z2PAY
                                          (cdr g$rhs$9751$1Z2PAY)
                                          g$r$9744$1Z2PAY
                                          g$mr$9745$1Z2PAY))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$9751$1Z2PAY))))))
                              (car g$rhs$9751$1Z2PAY))))
                          (car g$lhs*$9747$1Z2PAY)
                          (car g$rhs*$9748$1Z2PAY)))))))
           g$f$9746$1Z2PAY)
         g$lhs*$9741$1Z2PAY
         g$rhs*$9742$1Z2PAY))))
   (g$chi-rhs*$7594$1Z2PAY
     g$chi-rhs*$11085$1Z2PAY
     (case-lambda
       ((g$rhs*$9756$1Z2PAY g$r$9757$1Z2PAY g$mr$9758$1Z2PAY)
        ((letrec ((g$f$9759$1Z2PAY
                    (case-lambda
                      ((g$ls$9760$1Z2PAY)
                       (if (null? g$ls$9760$1Z2PAY)
                         '()
                         ((case-lambda
                            ((g$a$9761$1Z2PAY)
                             (cons
                               g$a$9761$1Z2PAY
                               (g$f$9759$1Z2PAY (cdr g$ls$9760$1Z2PAY)))))
                          (g$chi-rhs$7592$1Z2PAY
                            (car g$ls$9760$1Z2PAY)
                            g$r$9757$1Z2PAY
                            g$mr$9758$1Z2PAY)))))))
           g$f$9759$1Z2PAY)
         g$rhs*$9756$1Z2PAY))))
   (g$find-bound=?$7595$1Z2PAY
     g$find-bound=?$11086$1Z2PAY
     (case-lambda
       ((g$x$9762$1Z2PAY g$lhs*$9763$1Z2PAY g$rhs*$9764$1Z2PAY)
        (if (null? g$lhs*$9763$1Z2PAY)
          '#f
          (if (g$bound-id=?$7293$1Z2PAY
                g$x$9762$1Z2PAY
                (car g$lhs*$9763$1Z2PAY))
            (car g$rhs*$9764$1Z2PAY)
            (g$find-bound=?$7595$1Z2PAY
              g$x$9762$1Z2PAY
              (cdr g$lhs*$9763$1Z2PAY)
              (cdr g$rhs*$9764$1Z2PAY)))))))
   (g$find-dups$7596$1Z2PAY
     g$find-dups$11087$1Z2PAY
     (case-lambda
       ((g$ls$9765$1Z2PAY)
        ((letrec ((g$f$9766$1Z2PAY
                    (case-lambda
                      ((g$ls$9767$1Z2PAY g$dups$9768$1Z2PAY)
                       (if (null? g$ls$9767$1Z2PAY)
                         g$dups$9768$1Z2PAY
                         ((case-lambda
                            ((g$t$9769$1Z2PAY)
                             (if g$t$9769$1Z2PAY
                               ((case-lambda
                                  ((g$x$9770$1Z2PAY)
                                   (g$f$9766$1Z2PAY
                                     (cdr g$ls$9767$1Z2PAY)
                                     (cons
                                       (list
                                         (car g$ls$9767$1Z2PAY)
                                         g$x$9770$1Z2PAY)
                                       g$dups$9768$1Z2PAY))))
                                g$t$9769$1Z2PAY)
                               (g$f$9766$1Z2PAY
                                 (cdr g$ls$9767$1Z2PAY)
                                 g$dups$9768$1Z2PAY))))
                          (g$find-bound=?$7595$1Z2PAY
                            (car g$ls$9767$1Z2PAY)
                            (cdr g$ls$9767$1Z2PAY)
                            (cdr g$ls$9767$1Z2PAY))))))))
           g$f$9766$1Z2PAY)
         g$ls$9765$1Z2PAY
         '()))))
   (g$chi-internal$7597$1Z2PAY
     g$chi-internal$11088$1Z2PAY
     (case-lambda
       ((g$e*$9771$1Z2PAY g$r$9772$1Z2PAY g$mr$9773$1Z2PAY)
        ((case-lambda
           ((g$rib$9774$1Z2PAY)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$7612$1Z2PAY
                   (map (case-lambda
                          ((g$x$9783$1Z2PAY)
                           (g$add-subst$7280$1Z2PAY
                             g$rib$9774$1Z2PAY
                             g$x$9783$1Z2PAY)))
                        (g$syntax->list$7289$1Z2PAY g$e*$9771$1Z2PAY))
                   g$r$9772$1Z2PAY
                   g$mr$9773$1Z2PAY
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$9774$1Z2PAY
                   '#f)))
              (case-lambda
                ((g$e*$9784$1Z2PAY
                   g$r$9785$1Z2PAY
                   g$mr$9786$1Z2PAY
                   g$lex*$9787$1Z2PAY
                   g$rhs*$9788$1Z2PAY
                   g$mod**$9789$1Z2PAY
                   g$kwd*$9790$1Z2PAY
                   g$_exp*$9791$1Z2PAY)
                 ((case-lambda
                    ((g$_exp*$9792$1Z2PAY
                       g$kwd*$9793$1Z2PAY
                       g$mod**$9794$1Z2PAY
                       g$rhs*$9795$1Z2PAY
                       g$lex*$9796$1Z2PAY
                       g$mr$9797$1Z2PAY
                       g$r$9798$1Z2PAY
                       g$e*$9799$1Z2PAY)
                     (begin
                       (if (null? g$e*$9799$1Z2PAY)
                         (g$syntax-violation$7679$1Z2PAY
                           '#f
                           '"no expression in body"
                           g$e*$9799$1Z2PAY)
                         (void))
                       ((case-lambda
                          ((g$init*$9800$1Z2PAY)
                           ((case-lambda
                              ((g$rhs*$9801$1Z2PAY)
                               ((case-lambda
                                  (()
                                   (g$build-letrec*$7222$1Z2PAY
                                     '#f
                                     (reverse g$lex*$9796$1Z2PAY)
                                     (reverse g$rhs*$9801$1Z2PAY)
                                     (g$build-sequence$7219$1Z2PAY
                                       '#f
                                       g$init*$9800$1Z2PAY)))))))
                            (g$chi-rhs*$7594$1Z2PAY
                              g$rhs*$9795$1Z2PAY
                              g$r$9798$1Z2PAY
                              g$mr$9797$1Z2PAY))))
                        (g$chi-expr*$7584$1Z2PAY
                          (append
                            (apply append (reverse g$mod**$9794$1Z2PAY))
                            g$e*$9799$1Z2PAY)
                          g$r$9798$1Z2PAY
                          g$mr$9797$1Z2PAY)))))
                  g$_exp*$9791$1Z2PAY
                  g$kwd*$9790$1Z2PAY
                  g$mod**$9789$1Z2PAY
                  g$rhs*$9788$1Z2PAY
                  g$lex*$9787$1Z2PAY
                  g$mr$9786$1Z2PAY
                  g$r$9785$1Z2PAY
                  g$e*$9784$1Z2PAY))))))
         (g$make-empty-rib$7250$1Z2PAY)))))
   (g$parse-module$7598$1Z2PAY
     g$parse-module$11089$1Z2PAY
     (case-lambda
       ((g$e$9802$1Z2PAY)
        ((case-lambda
           ((g$t$9803$1Z2PAY)
            ((case-lambda
               ((g$ls/false$9804$1Z2PAY)
                (if g$ls/false$9804$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$export*$9805$1Z2PAY g$b*$9806$1Z2PAY)
                       (begin
                         (if (not (g$for-all$5014$1Z2PAY
                                    g$id?$7290$1Z2PAY
                                    g$export*$9805$1Z2PAY))
                           (g$syntax-violation$7679$1Z2PAY
                             '#f
                             '"module exports must be identifiers"
                             g$e$9802$1Z2PAY)
                           (void))
                         (values
                           '#f
                           (list->vector g$export*$9805$1Z2PAY)
                           g$b*$9806$1Z2PAY))))
                    g$ls/false$9804$1Z2PAY)
                  ((case-lambda
                     ((g$t$9807$1Z2PAY)
                      ((case-lambda
                         ((g$ls/false$9808$1Z2PAY)
                          (if g$ls/false$9808$1Z2PAY
                            (apply
                              (case-lambda
                                ((g$name$9809$1Z2PAY
                                   g$export*$9810$1Z2PAY
                                   g$b*$9811$1Z2PAY)
                                 (begin
                                   (if (not (g$id?$7290$1Z2PAY
                                              g$name$9809$1Z2PAY))
                                     (g$syntax-violation$7679$1Z2PAY
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$9802$1Z2PAY)
                                     (void))
                                   (if (not (g$for-all$5014$1Z2PAY
                                              g$id?$7290$1Z2PAY
                                              g$export*$9810$1Z2PAY))
                                     (g$syntax-violation$7679$1Z2PAY
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$9802$1Z2PAY)
                                     (void))
                                   (values
                                     g$name$9809$1Z2PAY
                                     (list->vector g$export*$9810$1Z2PAY)
                                     g$b*$9811$1Z2PAY))))
                              g$ls/false$9808$1Z2PAY)
                            (g$syntax-violation$7679$1Z2PAY
                              '#f
                              '"invalid syntax"
                              g$t$9807$1Z2PAY))))
                       (g$syntax-dispatch$7568$1Z2PAY
                         g$t$9807$1Z2PAY
                         '(_ any each-any . each-any)))))
                   g$t$9803$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$9803$1Z2PAY
               '(_ each-any . each-any)))))
         g$e$9802$1Z2PAY))))
   (g$8728$7599$1Z2PAY
     g$8728$11090$1Z2PAY
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$8731$1Z2PAY
       '#t
       '#t
       '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec))))
   (g$8730$7600$1Z2PAY g$8730$11091$1Z2PAY '#f)
   (g$8729$7601$1Z2PAY
     g$8729$11092$1Z2PAY
     (make-record-constructor-descriptor
       g$8728$7599$1Z2PAY
       '#f
       g$8730$7600$1Z2PAY))
   (g$module-interface?$7602$1Z2PAY
     g$module-interface?$11093$1Z2PAY
     (record-predicate g$8728$7599$1Z2PAY))
   (g$make-module-interface$7603$1Z2PAY
     g$make-module-interface$11094$1Z2PAY
     (record-constructor g$8729$7601$1Z2PAY))
   (g$module-interface-first-mark$7604$1Z2PAY
     g$module-interface-first-mark$11095$1Z2PAY
     (record-accessor g$8728$7599$1Z2PAY '0))
   (g$module-interface-exp-id-vec$7605$1Z2PAY
     g$module-interface-exp-id-vec$11096$1Z2PAY
     (record-accessor g$8728$7599$1Z2PAY '1))
   (g$module-interface-exp-lab-vec$7606$1Z2PAY
     g$module-interface-exp-lab-vec$11097$1Z2PAY
     (record-accessor g$8728$7599$1Z2PAY '2))
   (g$set-module-interface-first-mark!$7607$1Z2PAY
     g$set-module-interface-first-mark!$11098$1Z2PAY
     (record-mutator g$8728$7599$1Z2PAY '0))
   (g$set-module-interface-exp-id-vec!$7608$1Z2PAY
     g$set-module-interface-exp-id-vec!$11099$1Z2PAY
     (record-mutator g$8728$7599$1Z2PAY '1))
   (g$set-module-interface-exp-lab-vec!$7609$1Z2PAY
     g$set-module-interface-exp-lab-vec!$11100$1Z2PAY
     (record-mutator g$8728$7599$1Z2PAY '2))
   (g$module-interface-exp-id*$7610$1Z2PAY
     g$module-interface-exp-id*$11101$1Z2PAY
     (case-lambda
       ((g$iface$9812$1Z2PAY g$id$9813$1Z2PAY)
        (letrec* ((g$diff-marks$9814$1Z2PAY
                    (case-lambda
                      ((g$ls$9818$1Z2PAY g$x$9819$1Z2PAY)
                       (begin
                         (if (null? g$ls$9818$1Z2PAY)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$9820$1Z2PAY)
                             (if (eq? g$a$9820$1Z2PAY g$x$9819$1Z2PAY)
                               '()
                               (cons
                                 g$a$9820$1Z2PAY
                                 (g$diff-marks$9814$1Z2PAY
                                   (cdr g$ls$9818$1Z2PAY)
                                   g$x$9819$1Z2PAY)))))
                          (car g$ls$9818$1Z2PAY)))))))
          ((case-lambda
             ((g$diff$9815$1Z2PAY g$id-vec$9816$1Z2PAY)
              (if (null? g$diff$9815$1Z2PAY)
                g$id-vec$9816$1Z2PAY
                (vector-map
                  (case-lambda
                    ((g$x$9817$1Z2PAY)
                     (g$make-stx$7263$1Z2PAY
                       (g$stx-expr$7264$1Z2PAY g$x$9817$1Z2PAY)
                       (append
                         g$diff$9815$1Z2PAY
                         (g$stx-mark*$7265$1Z2PAY g$x$9817$1Z2PAY))
                       '()
                       '())))
                  g$id-vec$9816$1Z2PAY))))
           (g$diff-marks$9814$1Z2PAY
             (g$stx-mark*$7265$1Z2PAY g$id$9813$1Z2PAY)
             (g$module-interface-first-mark$7604$1Z2PAY g$iface$9812$1Z2PAY))
           (g$module-interface-exp-id-vec$7605$1Z2PAY g$iface$9812$1Z2PAY))))))
   (g$chi-internal-module$7611$1Z2PAY
     g$chi-internal-module$11102$1Z2PAY
     (case-lambda
       ((g$e$9821$1Z2PAY
          g$r$9822$1Z2PAY
          g$mr$9823$1Z2PAY
          g$lex*$9824$1Z2PAY
          g$rhs*$9825$1Z2PAY
          g$mod**$9826$1Z2PAY
          g$kwd*$9827$1Z2PAY)
        (call-with-values
          (case-lambda (() (g$parse-module$7598$1Z2PAY g$e$9821$1Z2PAY)))
          (case-lambda
            ((g$name$9831$1Z2PAY g$exp-id*$9832$1Z2PAY g$e*$9833$1Z2PAY)
             ((case-lambda
                ((g$e*$9834$1Z2PAY g$exp-id*$9835$1Z2PAY g$name$9836$1Z2PAY)
                 ((case-lambda
                    ((g$rib$9837$1Z2PAY)
                     ((case-lambda
                        ((g$e*$9838$1Z2PAY)
                         ((case-lambda
                            (()
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$chi-body*$7612$1Z2PAY
                                    g$e*$9838$1Z2PAY
                                    g$r$9822$1Z2PAY
                                    g$mr$9823$1Z2PAY
                                    g$lex*$9824$1Z2PAY
                                    g$rhs*$9825$1Z2PAY
                                    g$mod**$9826$1Z2PAY
                                    g$kwd*$9827$1Z2PAY
                                    '()
                                    g$rib$9837$1Z2PAY
                                    '#f)))
                               (case-lambda
                                 ((g$e*$9847$1Z2PAY
                                    g$r$9848$1Z2PAY
                                    g$mr$9849$1Z2PAY
                                    g$lex*$9850$1Z2PAY
                                    g$rhs*$9851$1Z2PAY
                                    g$mod**$9852$1Z2PAY
                                    g$kwd*$9853$1Z2PAY
                                    g$_exp*$9854$1Z2PAY)
                                  ((case-lambda
                                     ((g$_exp*$9855$1Z2PAY
                                        g$kwd*$9856$1Z2PAY
                                        g$mod**$9857$1Z2PAY
                                        g$rhs*$9858$1Z2PAY
                                        g$lex*$9859$1Z2PAY
                                        g$mr$9860$1Z2PAY
                                        g$r$9861$1Z2PAY
                                        g$e*$9862$1Z2PAY)
                                      ((case-lambda
                                         ((g$exp-lab*$9863$1Z2PAY
                                            g$mod**$9864$1Z2PAY)
                                          (if (not g$name$9836$1Z2PAY)
                                            (values
                                              g$lex*$9859$1Z2PAY
                                              g$rhs*$9858$1Z2PAY
                                              g$exp-id*$9835$1Z2PAY
                                              g$exp-lab*$9863$1Z2PAY
                                              g$r$9861$1Z2PAY
                                              g$mr$9860$1Z2PAY
                                              g$mod**$9864$1Z2PAY
                                              g$kwd*$9856$1Z2PAY)
                                            ((case-lambda
                                               ((g$lab$9865$1Z2PAY
                                                  g$iface$9866$1Z2PAY)
                                                (values
                                                  g$lex*$9859$1Z2PAY
                                                  g$rhs*$9858$1Z2PAY
                                                  (vector g$name$9836$1Z2PAY)
                                                  (vector g$lab$9865$1Z2PAY)
                                                  (cons
                                                    (cons
                                                      g$lab$9865$1Z2PAY
                                                      (cons
                                                        '$module
                                                        g$iface$9866$1Z2PAY))
                                                    g$r$9861$1Z2PAY)
                                                  (cons
                                                    (cons
                                                      g$lab$9865$1Z2PAY
                                                      (cons
                                                        '$module
                                                        g$iface$9866$1Z2PAY))
                                                    g$mr$9860$1Z2PAY)
                                                  g$mod**$9864$1Z2PAY
                                                  g$kwd*$9856$1Z2PAY)))
                                             (g$gen-label$7231$1Z2PAY 'module)
                                             (g$make-module-interface$7603$1Z2PAY
                                               (car (g$stx-mark*$7265$1Z2PAY
                                                      g$name$9836$1Z2PAY))
                                               (vector-map
                                                 (case-lambda
                                                   ((g$x$9867$1Z2PAY)
                                                    (g$make-stx$7263$1Z2PAY
                                                      (g$stx-expr$7264$1Z2PAY
                                                        g$x$9867$1Z2PAY)
                                                      (g$stx-mark*$7265$1Z2PAY
                                                        g$x$9867$1Z2PAY)
                                                      '()
                                                      '())))
                                                 g$exp-id*$9835$1Z2PAY)
                                               g$exp-lab*$9863$1Z2PAY)))))
                                       (vector-map
                                         (case-lambda
                                           ((g$x$9868$1Z2PAY)
                                            ((case-lambda
                                               ((g$t$9869$1Z2PAY)
                                                (if g$t$9869$1Z2PAY
                                                  g$t$9869$1Z2PAY
                                                  (begin
                                                    '#f
                                                    (g$syntax-violation$7679$1Z2PAY
                                                      '#f
                                                      '"cannot find module export"
                                                      g$x$9868$1Z2PAY)))))
                                             (g$id->label$7303$1Z2PAY
                                               (g$make-stx$7263$1Z2PAY
                                                 (g$id->sym$7291$1Z2PAY
                                                   g$x$9868$1Z2PAY)
                                                 (g$stx-mark*$7265$1Z2PAY
                                                   g$x$9868$1Z2PAY)
                                                 (list g$rib$9837$1Z2PAY)
                                                 '())))))
                                         g$exp-id*$9835$1Z2PAY)
                                       (cons
                                         g$e*$9862$1Z2PAY
                                         g$mod**$9857$1Z2PAY))))
                                   g$_exp*$9854$1Z2PAY
                                   g$kwd*$9853$1Z2PAY
                                   g$mod**$9852$1Z2PAY
                                   g$rhs*$9851$1Z2PAY
                                   g$lex*$9850$1Z2PAY
                                   g$mr$9849$1Z2PAY
                                   g$r$9848$1Z2PAY
                                   g$e*$9847$1Z2PAY)))))))))
                      (map (case-lambda
                             ((g$x$9870$1Z2PAY)
                              (g$add-subst$7280$1Z2PAY
                                g$rib$9837$1Z2PAY
                                g$x$9870$1Z2PAY)))
                           (g$syntax->list$7289$1Z2PAY g$e*$9834$1Z2PAY)))))
                  (g$make-empty-rib$7250$1Z2PAY))))
              g$e*$9833$1Z2PAY
              g$exp-id*$9832$1Z2PAY
              g$name$9831$1Z2PAY)))))))
   (g$chi-body*$7612$1Z2PAY
     g$chi-body*$11103$1Z2PAY
     (case-lambda
       ((g$e*$9871$1Z2PAY
          g$r$9872$1Z2PAY
          g$mr$9873$1Z2PAY
          g$lex*$9874$1Z2PAY
          g$rhs*$9875$1Z2PAY
          g$mod**$9876$1Z2PAY
          g$kwd*$9877$1Z2PAY
          g$exp*$9878$1Z2PAY
          g$rib$9879$1Z2PAY
          g$top?$9880$1Z2PAY)
        (if (null? g$e*$9871$1Z2PAY)
          (values
            g$e*$9871$1Z2PAY
            g$r$9872$1Z2PAY
            g$mr$9873$1Z2PAY
            g$lex*$9874$1Z2PAY
            g$rhs*$9875$1Z2PAY
            g$mod**$9876$1Z2PAY
            g$kwd*$9877$1Z2PAY
            g$exp*$9878$1Z2PAY)
          ((case-lambda
             ((g$e$9881$1Z2PAY)
              (call-with-values
                (case-lambda
                  (()
                   (g$syntax-type$7310$1Z2PAY g$e$9881$1Z2PAY g$r$9872$1Z2PAY)))
                (case-lambda
                  ((g$type$9885$1Z2PAY g$value$9886$1Z2PAY g$kwd$9887$1Z2PAY)
                   ((case-lambda
                      ((g$kwd$9888$1Z2PAY
                         g$value$9889$1Z2PAY
                         g$type$9890$1Z2PAY)
                       ((case-lambda
                          ((g$kwd*$9891$1Z2PAY)
                           ((case-lambda
                              ((g$t$9892$1Z2PAY)
                               (if (g$memv$5009$1Z2PAY
                                     g$t$9892$1Z2PAY
                                     '(define))
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$7508$1Z2PAY
                                        g$e$9881$1Z2PAY)))
                                   (case-lambda
                                     ((g$id$9895$1Z2PAY g$rhs$9896$1Z2PAY)
                                      ((case-lambda
                                         ((g$rhs$9897$1Z2PAY g$id$9898$1Z2PAY)
                                          (begin
                                            (if (g$bound-id-member?$7297$1Z2PAY
                                                  g$id$9898$1Z2PAY
                                                  g$kwd*$9891$1Z2PAY)
                                              (g$syntax-violation$7679$1Z2PAY
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$9881$1Z2PAY)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$7233$1Z2PAY
                                                   g$id$9898$1Z2PAY
                                                   g$rib$9879$1Z2PAY)))
                                              (case-lambda
                                                ((g$lab$9901$1Z2PAY
                                                   g$lex$9902$1Z2PAY)
                                                 ((case-lambda
                                                    ((g$lex$9903$1Z2PAY
                                                       g$lab$9904$1Z2PAY)
                                                     (begin
                                                       (g$extend-rib!$7253$1Z2PAY
                                                         g$rib$9879$1Z2PAY
                                                         g$id$9898$1Z2PAY
                                                         g$lab$9904$1Z2PAY)
                                                       (g$chi-body*$7612$1Z2PAY
                                                         (cdr g$e*$9871$1Z2PAY)
                                                         (g$add-lexical$7515$1Z2PAY
                                                           g$lab$9904$1Z2PAY
                                                           g$lex$9903$1Z2PAY
                                                           g$r$9872$1Z2PAY)
                                                         g$mr$9873$1Z2PAY
                                                         (cons
                                                           g$lex$9903$1Z2PAY
                                                           g$lex*$9874$1Z2PAY)
                                                         (cons
                                                           g$rhs$9897$1Z2PAY
                                                           g$rhs*$9875$1Z2PAY)
                                                         g$mod**$9876$1Z2PAY
                                                         g$kwd*$9891$1Z2PAY
                                                         g$exp*$9878$1Z2PAY
                                                         g$rib$9879$1Z2PAY
                                                         g$top?$9880$1Z2PAY))))
                                                  g$lex$9902$1Z2PAY
                                                  g$lab$9901$1Z2PAY)))))))
                                       g$rhs$9896$1Z2PAY
                                       g$id$9895$1Z2PAY))))
                                 (if (g$memv$5009$1Z2PAY
                                       g$t$9892$1Z2PAY
                                       '(define-syntax))
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$7509$1Z2PAY
                                          g$e$9881$1Z2PAY)))
                                     (case-lambda
                                       ((g$id$9907$1Z2PAY g$rhs$9908$1Z2PAY)
                                        ((case-lambda
                                           ((g$rhs$9909$1Z2PAY g$id$9910$1Z2PAY)
                                            (begin
                                              (if (g$bound-id-member?$7297$1Z2PAY
                                                    g$id$9910$1Z2PAY
                                                    g$kwd*$9891$1Z2PAY)
                                                (g$syntax-violation$7679$1Z2PAY
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$9881$1Z2PAY)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$9911$1Z2PAY
                                                    g$expanded-rhs$9912$1Z2PAY)
                                                  (begin
                                                    (g$extend-rib!$7253$1Z2PAY
                                                      g$rib$9879$1Z2PAY
                                                      g$id$9910$1Z2PAY
                                                      g$lab$9911$1Z2PAY)
                                                    ((case-lambda
                                                       ((g$b$9913$1Z2PAY)
                                                        (g$chi-body*$7612$1Z2PAY
                                                          (cdr g$e*$9871$1Z2PAY)
                                                          (cons
                                                            (cons
                                                              g$lab$9911$1Z2PAY
                                                              g$b$9913$1Z2PAY)
                                                            g$r$9872$1Z2PAY)
                                                          (cons
                                                            (cons
                                                              g$lab$9911$1Z2PAY
                                                              g$b$9913$1Z2PAY)
                                                            g$mr$9873$1Z2PAY)
                                                          g$lex*$9874$1Z2PAY
                                                          g$rhs*$9875$1Z2PAY
                                                          g$mod**$9876$1Z2PAY
                                                          g$kwd*$9891$1Z2PAY
                                                          g$exp*$9878$1Z2PAY
                                                          g$rib$9879$1Z2PAY
                                                          g$top?$9880$1Z2PAY)))
                                                     (g$make-eval-transformer$7322$1Z2PAY
                                                       g$expanded-rhs$9912$1Z2PAY)))))
                                               (g$gen-define-label$7234$1Z2PAY
                                                 g$id$9910$1Z2PAY
                                                 g$rib$9879$1Z2PAY)
                                               (g$expand-transformer$7613$1Z2PAY
                                                 g$rhs$9909$1Z2PAY
                                                 g$mr$9873$1Z2PAY)))))
                                         g$rhs$9908$1Z2PAY
                                         g$id$9907$1Z2PAY))))
                                   (if (g$memv$5009$1Z2PAY
                                         g$t$9892$1Z2PAY
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$9914$1Z2PAY)
                                         ((case-lambda
                                            ((g$ls/false$9915$1Z2PAY)
                                             (if (if g$ls/false$9915$1Z2PAY
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$9916$1Z2PAY
                                                            g$xrhs*$9917$1Z2PAY
                                                            g$xbody*$9918$1Z2PAY)
                                                          (if (not (g$valid-bound-ids?$7295$1Z2PAY
                                                                     g$xlhs*$9916$1Z2PAY))
                                                            (g$syntax-violation$7679$1Z2PAY
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$9881$1Z2PAY)
                                                            (void))))
                                                       g$ls/false$9915$1Z2PAY))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$9919$1Z2PAY
                                                      g$xrhs*$9920$1Z2PAY
                                                      g$xbody*$9921$1Z2PAY)
                                                    ((case-lambda
                                                       ((g$xlab*$9922$1Z2PAY)
                                                        ((case-lambda
                                                           ((g$xrib$9923$1Z2PAY)
                                                            ((case-lambda
                                                               ((g$xb*$9924$1Z2PAY)
                                                                ((case-lambda
                                                                   (()
                                                                    (g$chi-body*$7612$1Z2PAY
                                                                      (append
                                                                        (map (case-lambda
                                                                               ((g$x$9925$1Z2PAY)
                                                                                (g$add-subst$7280$1Z2PAY
                                                                                  g$xrib$9923$1Z2PAY
                                                                                  g$x$9925$1Z2PAY)))
                                                                             g$xbody*$9921$1Z2PAY)
                                                                        (cdr g$e*$9871$1Z2PAY))
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$9922$1Z2PAY
                                                                             g$xb*$9924$1Z2PAY)
                                                                        g$r$9872$1Z2PAY)
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$9922$1Z2PAY
                                                                             g$xb*$9924$1Z2PAY)
                                                                        g$mr$9873$1Z2PAY)
                                                                      g$lex*$9874$1Z2PAY
                                                                      g$rhs*$9875$1Z2PAY
                                                                      g$mod**$9876$1Z2PAY
                                                                      g$kwd*$9891$1Z2PAY
                                                                      g$exp*$9878$1Z2PAY
                                                                      g$rib$9879$1Z2PAY
                                                                      g$top?$9880$1Z2PAY))))))
                                                             (map (case-lambda
                                                                    ((g$x$9926$1Z2PAY)
                                                                     (g$make-eval-transformer$7322$1Z2PAY
                                                                       (g$expand-transformer$7613$1Z2PAY
                                                                         (if (eq? g$type$9890$1Z2PAY
                                                                                  'let-syntax)
                                                                           g$x$9926$1Z2PAY
                                                                           (g$add-subst$7280$1Z2PAY
                                                                             g$xrib$9923$1Z2PAY
                                                                             g$x$9926$1Z2PAY))
                                                                         g$mr$9873$1Z2PAY))))
                                                                  g$xrhs*$9920$1Z2PAY))))
                                                         (g$make-full-rib$7258$1Z2PAY
                                                           g$xlhs*$9919$1Z2PAY
                                                           g$xlab*$9922$1Z2PAY))))
                                                     (map g$gen-label$7231$1Z2PAY
                                                          g$xlhs*$9919$1Z2PAY))))
                                                 g$ls/false$9915$1Z2PAY)
                                               (g$syntax-violation$7679$1Z2PAY
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$9914$1Z2PAY))))
                                          (g$syntax-dispatch$7568$1Z2PAY
                                            g$t$9914$1Z2PAY
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$9881$1Z2PAY)
                                     (if (g$memv$5009$1Z2PAY
                                           g$t$9892$1Z2PAY
                                           '(begin))
                                       ((case-lambda
                                          ((g$t$9927$1Z2PAY)
                                           ((case-lambda
                                              ((g$ls/false$9928$1Z2PAY)
                                               (if g$ls/false$9928$1Z2PAY
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$9929$1Z2PAY)
                                                      (g$chi-body*$7612$1Z2PAY
                                                        (append
                                                          g$x*$9929$1Z2PAY
                                                          (cdr g$e*$9871$1Z2PAY))
                                                        g$r$9872$1Z2PAY
                                                        g$mr$9873$1Z2PAY
                                                        g$lex*$9874$1Z2PAY
                                                        g$rhs*$9875$1Z2PAY
                                                        g$mod**$9876$1Z2PAY
                                                        g$kwd*$9891$1Z2PAY
                                                        g$exp*$9878$1Z2PAY
                                                        g$rib$9879$1Z2PAY
                                                        g$top?$9880$1Z2PAY)))
                                                   g$ls/false$9928$1Z2PAY)
                                                 (g$syntax-violation$7679$1Z2PAY
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$9927$1Z2PAY))))
                                            (g$syntax-dispatch$7568$1Z2PAY
                                              g$t$9927$1Z2PAY
                                              '(_ . each-any)))))
                                        g$e$9881$1Z2PAY)
                                       (if (g$memv$5009$1Z2PAY
                                             g$t$9892$1Z2PAY
                                             '(global-macro global-macro!))
                                         (g$chi-body*$7612$1Z2PAY
                                           (cons
                                             (g$add-subst$7280$1Z2PAY
                                               g$rib$9879$1Z2PAY
                                               (g$chi-global-macro$7583$1Z2PAY
                                                 g$value$9889$1Z2PAY
                                                 g$e$9881$1Z2PAY))
                                             (cdr g$e*$9871$1Z2PAY))
                                           g$r$9872$1Z2PAY
                                           g$mr$9873$1Z2PAY
                                           g$lex*$9874$1Z2PAY
                                           g$rhs*$9875$1Z2PAY
                                           g$mod**$9876$1Z2PAY
                                           g$kwd*$9891$1Z2PAY
                                           g$exp*$9878$1Z2PAY
                                           g$rib$9879$1Z2PAY
                                           g$top?$9880$1Z2PAY)
                                         (if (g$memv$5009$1Z2PAY
                                               g$t$9892$1Z2PAY
                                               '(local-macro local-macro!))
                                           (g$chi-body*$7612$1Z2PAY
                                             (cons
                                               (g$add-subst$7280$1Z2PAY
                                                 g$rib$9879$1Z2PAY
                                                 (g$chi-local-macro$7582$1Z2PAY
                                                   g$value$9889$1Z2PAY
                                                   g$e$9881$1Z2PAY))
                                               (cdr g$e*$9871$1Z2PAY))
                                             g$r$9872$1Z2PAY
                                             g$mr$9873$1Z2PAY
                                             g$lex*$9874$1Z2PAY
                                             g$rhs*$9875$1Z2PAY
                                             g$mod**$9876$1Z2PAY
                                             g$kwd*$9891$1Z2PAY
                                             g$exp*$9878$1Z2PAY
                                             g$rib$9879$1Z2PAY
                                             g$top?$9880$1Z2PAY)
                                           (if (g$memv$5009$1Z2PAY
                                                 g$t$9892$1Z2PAY
                                                 '(macro macro!))
                                             (g$chi-body*$7612$1Z2PAY
                                               (cons
                                                 (g$add-subst$7280$1Z2PAY
                                                   g$rib$9879$1Z2PAY
                                                   (g$chi-macro$7581$1Z2PAY
                                                     g$value$9889$1Z2PAY
                                                     g$e$9881$1Z2PAY))
                                                 (cdr g$e*$9871$1Z2PAY))
                                               g$r$9872$1Z2PAY
                                               g$mr$9873$1Z2PAY
                                               g$lex*$9874$1Z2PAY
                                               g$rhs*$9875$1Z2PAY
                                               g$mod**$9876$1Z2PAY
                                               g$kwd*$9891$1Z2PAY
                                               g$exp*$9878$1Z2PAY
                                               g$rib$9879$1Z2PAY
                                               g$top?$9880$1Z2PAY)
                                             (if (g$memv$5009$1Z2PAY
                                                   g$t$9892$1Z2PAY
                                                   '(module))
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$7611$1Z2PAY
                                                      g$e$9881$1Z2PAY
                                                      g$r$9872$1Z2PAY
                                                      g$mr$9873$1Z2PAY
                                                      g$lex*$9874$1Z2PAY
                                                      g$rhs*$9875$1Z2PAY
                                                      g$mod**$9876$1Z2PAY
                                                      g$kwd*$9891$1Z2PAY)))
                                                 (case-lambda
                                                   ((g$lex*$9938$1Z2PAY
                                                      g$rhs*$9939$1Z2PAY
                                                      g$m-exp-id*$9940$1Z2PAY
                                                      g$m-exp-lab*$9941$1Z2PAY
                                                      g$r$9942$1Z2PAY
                                                      g$mr$9943$1Z2PAY
                                                      g$mod**$9944$1Z2PAY
                                                      g$kwd*$9945$1Z2PAY)
                                                    ((case-lambda
                                                       ((g$kwd*$9946$1Z2PAY
                                                          g$mod**$9947$1Z2PAY
                                                          g$mr$9948$1Z2PAY
                                                          g$r$9949$1Z2PAY
                                                          g$m-exp-lab*$9950$1Z2PAY
                                                          g$m-exp-id*$9951$1Z2PAY
                                                          g$rhs*$9952$1Z2PAY
                                                          g$lex*$9953$1Z2PAY)
                                                        (begin
                                                          (vector-for-each
                                                            (case-lambda
                                                              ((g$id$9954$1Z2PAY
                                                                 g$lab$9955$1Z2PAY)
                                                               (g$extend-rib!$7253$1Z2PAY
                                                                 g$rib$9879$1Z2PAY
                                                                 g$id$9954$1Z2PAY
                                                                 g$lab$9955$1Z2PAY)))
                                                            g$m-exp-id*$9951$1Z2PAY
                                                            g$m-exp-lab*$9950$1Z2PAY)
                                                          (g$chi-body*$7612$1Z2PAY
                                                            (cdr g$e*$9871$1Z2PAY)
                                                            g$r$9949$1Z2PAY
                                                            g$mr$9948$1Z2PAY
                                                            g$lex*$9953$1Z2PAY
                                                            g$rhs*$9952$1Z2PAY
                                                            g$mod**$9947$1Z2PAY
                                                            g$kwd*$9946$1Z2PAY
                                                            g$exp*$9878$1Z2PAY
                                                            g$rib$9879$1Z2PAY
                                                            g$top?$9880$1Z2PAY))))
                                                     g$kwd*$9945$1Z2PAY
                                                     g$mod**$9944$1Z2PAY
                                                     g$mr$9943$1Z2PAY
                                                     g$r$9942$1Z2PAY
                                                     g$m-exp-lab*$9941$1Z2PAY
                                                     g$m-exp-id*$9940$1Z2PAY
                                                     g$rhs*$9939$1Z2PAY
                                                     g$lex*$9938$1Z2PAY))))
                                               (if (g$memv$5009$1Z2PAY
                                                     g$t$9892$1Z2PAY
                                                     '(library))
                                                 (begin
                                                   (g$library-expander$7663$1Z2PAY
                                                     (g$stx->datum$7301$1Z2PAY
                                                       g$e$9881$1Z2PAY))
                                                   (g$chi-body*$7612$1Z2PAY
                                                     (cdr g$e*$9871$1Z2PAY)
                                                     g$r$9872$1Z2PAY
                                                     g$mr$9873$1Z2PAY
                                                     g$lex*$9874$1Z2PAY
                                                     g$rhs*$9875$1Z2PAY
                                                     g$mod**$9876$1Z2PAY
                                                     g$kwd*$9891$1Z2PAY
                                                     g$exp*$9878$1Z2PAY
                                                     g$rib$9879$1Z2PAY
                                                     g$top?$9880$1Z2PAY))
                                                 (if (g$memv$5009$1Z2PAY
                                                       g$t$9892$1Z2PAY
                                                       '(export))
                                                   ((case-lambda
                                                      ((g$t$9956$1Z2PAY)
                                                       ((case-lambda
                                                          ((g$ls/false$9957$1Z2PAY)
                                                           (if g$ls/false$9957$1Z2PAY
                                                             (apply
                                                               (case-lambda
                                                                 ((g$exp-decl*$9958$1Z2PAY)
                                                                  (g$chi-body*$7612$1Z2PAY
                                                                    (cdr g$e*$9871$1Z2PAY)
                                                                    g$r$9872$1Z2PAY
                                                                    g$mr$9873$1Z2PAY
                                                                    g$lex*$9874$1Z2PAY
                                                                    g$rhs*$9875$1Z2PAY
                                                                    g$mod**$9876$1Z2PAY
                                                                    g$kwd*$9891$1Z2PAY
                                                                    (append
                                                                      g$exp-decl*$9958$1Z2PAY
                                                                      g$exp*$9878$1Z2PAY)
                                                                    g$rib$9879$1Z2PAY
                                                                    g$top?$9880$1Z2PAY)))
                                                               g$ls/false$9957$1Z2PAY)
                                                             (g$syntax-violation$7679$1Z2PAY
                                                               '#f
                                                               '"invalid syntax"
                                                               g$t$9956$1Z2PAY))))
                                                        (g$syntax-dispatch$7568$1Z2PAY
                                                          g$t$9956$1Z2PAY
                                                          '(_ . each-any)))))
                                                    g$e$9881$1Z2PAY)
                                                   (if (g$memv$5009$1Z2PAY
                                                         g$t$9892$1Z2PAY
                                                         '(import))
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$9959$1Z2PAY
                                                                     (case-lambda
                                                                       ((g$e$10001$1Z2PAY)
                                                                        ((case-lambda
                                                                           ((g$t$10002$1Z2PAY)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10003$1Z2PAY)
                                                                                (if (if g$ls/false$10003$1Z2PAY
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10004$1Z2PAY)
                                                                                             (g$id?$7290$1Z2PAY
                                                                                               g$id$10004$1Z2PAY)))
                                                                                          g$ls/false$10003$1Z2PAY))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10005$1Z2PAY)
                                                                                       '#t))
                                                                                    g$ls/false$10003$1Z2PAY)
                                                                                  ((case-lambda
                                                                                     ((g$t$10006$1Z2PAY)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10007$1Z2PAY)
                                                                                          (if g$ls/false$10007$1Z2PAY
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$10008$1Z2PAY)
                                                                                                 '#f))
                                                                                              g$ls/false$10007$1Z2PAY)
                                                                                            ((case-lambda
                                                                                               ((g$t$10009$1Z2PAY)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$10010$1Z2PAY)
                                                                                                    (if g$ls/false$10010$1Z2PAY
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$7679$1Z2PAY
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$10001$1Z2PAY)))
                                                                                                        g$ls/false$10010$1Z2PAY)
                                                                                                      (g$syntax-violation$7679$1Z2PAY
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$10009$1Z2PAY))))
                                                                                                 (g$syntax-dispatch$7568$1Z2PAY
                                                                                                   g$t$10009$1Z2PAY
                                                                                                   '_))))
                                                                                             g$t$10006$1Z2PAY))))
                                                                                       (g$syntax-dispatch$7568$1Z2PAY
                                                                                         g$t$10006$1Z2PAY
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$10002$1Z2PAY))))
                                                                             (g$syntax-dispatch$7568$1Z2PAY
                                                                               g$t$10002$1Z2PAY
                                                                               '(_ any)))))
                                                                         g$e$10001$1Z2PAY))))
                                                                   (g$module-import$9960$1Z2PAY
                                                                     (case-lambda
                                                                       ((g$e$9984$1Z2PAY
                                                                          g$r$9985$1Z2PAY)
                                                                        ((case-lambda
                                                                           ((g$t$9986$1Z2PAY)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9987$1Z2PAY)
                                                                                (if (if g$ls/false$9987$1Z2PAY
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$9988$1Z2PAY)
                                                                                             (g$id?$7290$1Z2PAY
                                                                                               g$id$9988$1Z2PAY)))
                                                                                          g$ls/false$9987$1Z2PAY))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$9989$1Z2PAY)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$7310$1Z2PAY
                                                                                              g$id$9989$1Z2PAY
                                                                                              g$r$9985$1Z2PAY)))
                                                                                         (case-lambda
                                                                                           ((g$type$9993$1Z2PAY
                                                                                              g$value$9994$1Z2PAY
                                                                                              g$kwd$9995$1Z2PAY)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$9996$1Z2PAY
                                                                                                  g$value$9997$1Z2PAY
                                                                                                  g$type$9998$1Z2PAY)
                                                                                                ((case-lambda
                                                                                                   ((g$t$9999$1Z2PAY)
                                                                                                    (if (g$memv$5009$1Z2PAY
                                                                                                          g$t$9999$1Z2PAY
                                                                                                          '($module))
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$10000$1Z2PAY)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$7610$1Z2PAY
                                                                                                              g$iface$10000$1Z2PAY
                                                                                                              g$id$9989$1Z2PAY)
                                                                                                            (g$module-interface-exp-lab-vec$7606$1Z2PAY
                                                                                                              g$iface$10000$1Z2PAY))))
                                                                                                       g$value$9997$1Z2PAY)
                                                                                                      (g$syntax-violation$7679$1Z2PAY
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$9984$1Z2PAY))))
                                                                                                 g$type$9998$1Z2PAY)))
                                                                                             g$kwd$9995$1Z2PAY
                                                                                             g$value$9994$1Z2PAY
                                                                                             g$type$9993$1Z2PAY))))))
                                                                                    g$ls/false$9987$1Z2PAY)
                                                                                  (g$syntax-violation$7679$1Z2PAY
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$9986$1Z2PAY))))
                                                                             (g$syntax-dispatch$7568$1Z2PAY
                                                                               g$t$9986$1Z2PAY
                                                                               '(_ any)))))
                                                                         g$e$9984$1Z2PAY))))
                                                                   (g$library-import$9961$1Z2PAY
                                                                     (case-lambda
                                                                       ((g$e$9970$1Z2PAY)
                                                                        ((case-lambda
                                                                           ((g$t$9971$1Z2PAY)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9972$1Z2PAY)
                                                                                (if g$ls/false$9972$1Z2PAY
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$9973$1Z2PAY
                                                                                         g$imp*$9974$1Z2PAY)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$7617$1Z2PAY
                                                                                              (g$syntax->datum$7682$1Z2PAY
                                                                                                g$imp*$9974$1Z2PAY))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$9977$1Z2PAY
                                                                                              g$subst-labels$9978$1Z2PAY)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$9979$1Z2PAY
                                                                                                  g$subst-names$9980$1Z2PAY)
                                                                                                (values
                                                                                                  (vector-map
                                                                                                    (case-lambda
                                                                                                      ((g$name$9981$1Z2PAY)
                                                                                                       (g$datum->stx$7273$1Z2PAY
                                                                                                         g$ctxt$9973$1Z2PAY
                                                                                                         g$name$9981$1Z2PAY)))
                                                                                                    g$subst-names$9980$1Z2PAY)
                                                                                                  g$subst-labels$9979$1Z2PAY)))
                                                                                             g$subst-labels$9978$1Z2PAY
                                                                                             g$subst-names$9977$1Z2PAY))))))
                                                                                    g$ls/false$9972$1Z2PAY)
                                                                                  ((case-lambda
                                                                                     ((g$t$9982$1Z2PAY)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$9983$1Z2PAY)
                                                                                          (if g$ls/false$9983$1Z2PAY
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7679$1Z2PAY
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$9970$1Z2PAY)))
                                                                                              g$ls/false$9983$1Z2PAY)
                                                                                            (g$syntax-violation$7679$1Z2PAY
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$9982$1Z2PAY))))
                                                                                       (g$syntax-dispatch$7568$1Z2PAY
                                                                                         g$t$9982$1Z2PAY
                                                                                         '_))))
                                                                                   g$t$9971$1Z2PAY))))
                                                                             (g$syntax-dispatch$7568$1Z2PAY
                                                                               g$t$9971$1Z2PAY
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$9970$1Z2PAY)))))
                                                           (begin
                                                             (call-with-values
                                                               (case-lambda
                                                                 (()
                                                                  (if (g$module-import?$9959$1Z2PAY
                                                                        g$e$9881$1Z2PAY)
                                                                    (g$module-import$9960$1Z2PAY
                                                                      g$e$9881$1Z2PAY
                                                                      g$r$9872$1Z2PAY)
                                                                    (g$library-import$9961$1Z2PAY
                                                                      g$e$9881$1Z2PAY))))
                                                               (case-lambda
                                                                 ((g$id*$9964$1Z2PAY
                                                                    g$lab*$9965$1Z2PAY)
                                                                  ((case-lambda
                                                                     ((g$lab*$9966$1Z2PAY
                                                                        g$id*$9967$1Z2PAY)
                                                                      (vector-for-each
                                                                        (case-lambda
                                                                          ((g$id$9968$1Z2PAY
                                                                             g$lab$9969$1Z2PAY)
                                                                           (g$extend-rib!$7253$1Z2PAY
                                                                             g$rib$9879$1Z2PAY
                                                                             g$id$9968$1Z2PAY
                                                                             g$lab$9969$1Z2PAY)))
                                                                        g$id*$9967$1Z2PAY
                                                                        g$lab*$9966$1Z2PAY)))
                                                                   g$lab*$9965$1Z2PAY
                                                                   g$id*$9964$1Z2PAY))))
                                                             (g$chi-body*$7612$1Z2PAY
                                                               (cdr g$e*$9871$1Z2PAY)
                                                               g$r$9872$1Z2PAY
                                                               g$mr$9873$1Z2PAY
                                                               g$lex*$9874$1Z2PAY
                                                               g$rhs*$9875$1Z2PAY
                                                               g$mod**$9876$1Z2PAY
                                                               g$kwd*$9891$1Z2PAY
                                                               g$exp*$9878$1Z2PAY
                                                               g$rib$9879$1Z2PAY
                                                               g$top?$9880$1Z2PAY))))))
                                                     (if g$top?$9880$1Z2PAY
                                                       (g$chi-body*$7612$1Z2PAY
                                                         (cdr g$e*$9871$1Z2PAY)
                                                         g$r$9872$1Z2PAY
                                                         g$mr$9873$1Z2PAY
                                                         (cons
                                                           (g$gen-lexical$7229$1Z2PAY
                                                             'dummy)
                                                           g$lex*$9874$1Z2PAY)
                                                         (cons
                                                           (cons
                                                             'top-expr
                                                             g$e$9881$1Z2PAY)
                                                           g$rhs*$9875$1Z2PAY)
                                                         g$mod**$9876$1Z2PAY
                                                         g$kwd*$9891$1Z2PAY
                                                         g$exp*$9878$1Z2PAY
                                                         g$rib$9879$1Z2PAY
                                                         g$top?$9880$1Z2PAY)
                                                       (values
                                                         g$e*$9871$1Z2PAY
                                                         g$r$9872$1Z2PAY
                                                         g$mr$9873$1Z2PAY
                                                         g$lex*$9874$1Z2PAY
                                                         g$rhs*$9875$1Z2PAY
                                                         g$mod**$9876$1Z2PAY
                                                         g$kwd*$9891$1Z2PAY
                                                         g$exp*$9878$1Z2PAY)))))))))))))))
                            g$type$9890$1Z2PAY)))
                        (if (g$id?$7290$1Z2PAY g$kwd$9888$1Z2PAY)
                          (cons g$kwd$9888$1Z2PAY g$kwd*$9877$1Z2PAY)
                          g$kwd*$9877$1Z2PAY))))
                    g$kwd$9887$1Z2PAY
                    g$value$9886$1Z2PAY
                    g$type$9885$1Z2PAY))))))
           (car g$e*$9871$1Z2PAY))))))
   (g$expand-transformer$7613$1Z2PAY
     g$expand-transformer$11104$1Z2PAY
     (case-lambda
       ((g$expr$10011$1Z2PAY g$r$10012$1Z2PAY)
        ((case-lambda
           ((g$rtc$10013$1Z2PAY)
            ((case-lambda
               ((g$expanded-rhs$10014$1Z2PAY)
                (begin
                  (for-each
                    ((case-lambda
                       ((g$mark-visit$10015$1Z2PAY)
                        (case-lambda
                          ((g$x$10016$1Z2PAY)
                           (begin
                             (g$invoke-library$7100$1Z2PAY g$x$10016$1Z2PAY)
                             (g$mark-visit$10015$1Z2PAY g$x$10016$1Z2PAY))))))
                     (g$vis-collector$7621$1Z2PAY))
                    (g$rtc$10013$1Z2PAY))
                  g$expanded-rhs$10014$1Z2PAY)))
             ((case-lambda
                ((g$inv-collector$10021$1Z2PAY
                   g$vis-collector$10022$1Z2PAY
                   g$inv-collector$10023$1Z2PAY
                   g$vis-collector$10024$1Z2PAY)
                 ((case-lambda
                    ((g$swap$10025$1Z2PAY)
                     (dynamic-wind
                       g$swap$10025$1Z2PAY
                       (case-lambda
                         (()
                          (g$chi-expr$7586$1Z2PAY
                            g$expr$10011$1Z2PAY
                            g$r$10012$1Z2PAY
                            g$r$10012$1Z2PAY)))
                       g$swap$10025$1Z2PAY)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$10026$1Z2PAY)
                           (begin
                             (g$inv-collector$10021$1Z2PAY
                               g$inv-collector$10023$1Z2PAY)
                             (set! g$inv-collector$10023$1Z2PAY
                               g$t$10026$1Z2PAY))))
                        (g$inv-collector$10021$1Z2PAY))
                       ((case-lambda
                          ((g$t$10027$1Z2PAY)
                           (begin
                             (g$vis-collector$10022$1Z2PAY
                               g$vis-collector$10024$1Z2PAY)
                             (set! g$vis-collector$10024$1Z2PAY
                               g$t$10027$1Z2PAY))))
                        (g$vis-collector$10022$1Z2PAY))))))))
              g$inv-collector$7620$1Z2PAY
              g$vis-collector$7621$1Z2PAY
              g$rtc$10013$1Z2PAY
              (case-lambda ((g$x$10028$1Z2PAY) (values)))))))
         (g$make-collector$7619$1Z2PAY)))))
   (g$parse-exports$7614$1Z2PAY
     g$parse-exports$11105$1Z2PAY
     (case-lambda
       ((g$exp*$10029$1Z2PAY)
        ((letrec ((g$f$10030$1Z2PAY
                    (case-lambda
                      ((g$exp*$10031$1Z2PAY
                         g$int*$10032$1Z2PAY
                         g$ext*$10033$1Z2PAY)
                       (if (null? g$exp*$10031$1Z2PAY)
                         (begin
                           (if (not (g$valid-bound-ids?$7295$1Z2PAY
                                      g$ext*$10033$1Z2PAY))
                             (g$syntax-violation$7679$1Z2PAY
                               'export
                               '"invalid exports"
                               (g$find-dups$7596$1Z2PAY g$ext*$10033$1Z2PAY))
                             (void))
                           (values
                             (map g$syntax->datum$7682$1Z2PAY
                                  g$ext*$10033$1Z2PAY)
                             g$int*$10032$1Z2PAY))
                         ((case-lambda
                            ((g$t$10034$1Z2PAY)
                             ((case-lambda
                                ((g$ls/false$10035$1Z2PAY)
                                 (if g$ls/false$10035$1Z2PAY
                                   (apply
                                     (case-lambda
                                       ((g$rename$10036$1Z2PAY
                                          g$i*$10037$1Z2PAY
                                          g$e*$10038$1Z2PAY)
                                        (begin
                                          (if (not (if (eq? (g$syntax->datum$7682$1Z2PAY
                                                              g$rename$10036$1Z2PAY)
                                                            'rename)
                                                     (if (g$for-all$5014$1Z2PAY
                                                           g$id?$7290$1Z2PAY
                                                           g$i*$10037$1Z2PAY)
                                                       (begin
                                                         '#f
                                                         (g$for-all$5014$1Z2PAY
                                                           g$id?$7290$1Z2PAY
                                                           g$e*$10038$1Z2PAY))
                                                       '#f)
                                                     '#f))
                                            (g$syntax-violation$7679$1Z2PAY
                                              'export
                                              '"invalid export specifier"
                                              (car g$exp*$10031$1Z2PAY))
                                            (void))
                                          (g$f$10030$1Z2PAY
                                            (cdr g$exp*$10031$1Z2PAY)
                                            (append
                                              g$i*$10037$1Z2PAY
                                              g$int*$10032$1Z2PAY)
                                            (append
                                              g$e*$10038$1Z2PAY
                                              g$ext*$10033$1Z2PAY)))))
                                     g$ls/false$10035$1Z2PAY)
                                   ((case-lambda
                                      ((g$t$10039$1Z2PAY)
                                       ((case-lambda
                                          ((g$ls/false$10040$1Z2PAY)
                                           (if g$ls/false$10040$1Z2PAY
                                             (apply
                                               (case-lambda
                                                 ((g$ie$10041$1Z2PAY)
                                                  (begin
                                                    (if (not (g$id?$7290$1Z2PAY
                                                               g$ie$10041$1Z2PAY))
                                                      (g$syntax-violation$7679$1Z2PAY
                                                        'export
                                                        '"invalid export"
                                                        g$ie$10041$1Z2PAY)
                                                      (void))
                                                    (g$f$10030$1Z2PAY
                                                      (cdr g$exp*$10031$1Z2PAY)
                                                      (cons
                                                        g$ie$10041$1Z2PAY
                                                        g$int*$10032$1Z2PAY)
                                                      (cons
                                                        g$ie$10041$1Z2PAY
                                                        g$ext*$10033$1Z2PAY)))))
                                               g$ls/false$10040$1Z2PAY)
                                             (g$syntax-violation$7679$1Z2PAY
                                               '#f
                                               '"invalid syntax"
                                               g$t$10039$1Z2PAY))))
                                        (g$syntax-dispatch$7568$1Z2PAY
                                          g$t$10039$1Z2PAY
                                          'any))))
                                    g$t$10034$1Z2PAY))))
                              (g$syntax-dispatch$7568$1Z2PAY
                                g$t$10034$1Z2PAY
                                '(any . #(each (any any)))))))
                          (car g$exp*$10031$1Z2PAY)))))))
           g$f$10030$1Z2PAY)
         g$exp*$10029$1Z2PAY
         '()
         '()))))
   (g$parse-library-name$7615$1Z2PAY
     g$parse-library-name$11106$1Z2PAY
     (case-lambda
       ((g$spec$10042$1Z2PAY)
        (letrec* ((g$parse$10043$1Z2PAY
                    (case-lambda
                      ((g$x$10050$1Z2PAY)
                       ((case-lambda
                          ((g$t$10051$1Z2PAY)
                           ((case-lambda
                              ((g$ls/false$10052$1Z2PAY)
                               (if (if g$ls/false$10052$1Z2PAY
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$10053$1Z2PAY)
                                            (g$for-all$5014$1Z2PAY
                                              (case-lambda
                                                ((g$x$10054$1Z2PAY)
                                                 ((case-lambda
                                                    ((g$x$10055$1Z2PAY)
                                                     (if (integer?
                                                           g$x$10055$1Z2PAY)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$10055$1Z2PAY))
                                                       '#f)))
                                                  (g$syntax->datum$7682$1Z2PAY
                                                    g$x$10054$1Z2PAY))))
                                              g$v*$10053$1Z2PAY)))
                                         g$ls/false$10052$1Z2PAY))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$10056$1Z2PAY)
                                      (values
                                        '()
                                        (map g$syntax->datum$7682$1Z2PAY
                                             g$v*$10056$1Z2PAY))))
                                   g$ls/false$10052$1Z2PAY)
                                 ((case-lambda
                                    ((g$t$10057$1Z2PAY)
                                     ((case-lambda
                                        ((g$ls/false$10058$1Z2PAY)
                                         (if (if g$ls/false$10058$1Z2PAY
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$10059$1Z2PAY
                                                        g$rest$10060$1Z2PAY)
                                                      (symbol?
                                                        (g$syntax->datum$7682$1Z2PAY
                                                          g$x$10059$1Z2PAY))))
                                                   g$ls/false$10058$1Z2PAY))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$10061$1Z2PAY
                                                  g$rest$10062$1Z2PAY)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$10043$1Z2PAY
                                                       g$rest$10062$1Z2PAY)))
                                                  (case-lambda
                                                    ((g$x*$10065$1Z2PAY
                                                       g$v*$10066$1Z2PAY)
                                                     ((case-lambda
                                                        ((g$v*$10067$1Z2PAY
                                                           g$x*$10068$1Z2PAY)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$7682$1Z2PAY
                                                               g$x$10061$1Z2PAY)
                                                             g$x*$10068$1Z2PAY)
                                                           g$v*$10067$1Z2PAY)))
                                                      g$v*$10066$1Z2PAY
                                                      g$x*$10065$1Z2PAY))))))
                                             g$ls/false$10058$1Z2PAY)
                                           ((case-lambda
                                              ((g$t$10069$1Z2PAY)
                                               ((case-lambda
                                                  ((g$ls/false$10070$1Z2PAY)
                                                   (if g$ls/false$10070$1Z2PAY
                                                     (apply
                                                       (case-lambda
                                                         (() (values '() '())))
                                                       g$ls/false$10070$1Z2PAY)
                                                     ((case-lambda
                                                        ((g$t$10071$1Z2PAY)
                                                         ((case-lambda
                                                            ((g$ls/false$10072$1Z2PAY)
                                                             (if g$ls/false$10072$1Z2PAY
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$7679$1Z2PAY
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$10042$1Z2PAY)))
                                                                 g$ls/false$10072$1Z2PAY)
                                                               (g$syntax-violation$7679$1Z2PAY
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$10071$1Z2PAY))))
                                                          (g$syntax-dispatch$7568$1Z2PAY
                                                            g$t$10071$1Z2PAY
                                                            '_))))
                                                      g$t$10069$1Z2PAY))))
                                                (g$syntax-dispatch$7568$1Z2PAY
                                                  g$t$10069$1Z2PAY
                                                  '()))))
                                            g$t$10057$1Z2PAY))))
                                      (g$syntax-dispatch$7568$1Z2PAY
                                        g$t$10057$1Z2PAY
                                        '(any . any)))))
                                  g$t$10051$1Z2PAY))))
                            (g$syntax-dispatch$7568$1Z2PAY
                              g$t$10051$1Z2PAY
                              '(each-any)))))
                        g$x$10050$1Z2PAY)))))
          (call-with-values
            (case-lambda (() (g$parse$10043$1Z2PAY g$spec$10042$1Z2PAY)))
            (case-lambda
              ((g$name*$10046$1Z2PAY g$ver*$10047$1Z2PAY)
               ((case-lambda
                  ((g$ver*$10048$1Z2PAY g$name*$10049$1Z2PAY)
                   (begin
                     (if (null? g$name*$10049$1Z2PAY)
                       (g$syntax-violation$7679$1Z2PAY
                         '#f
                         '"empty library name"
                         g$spec$10042$1Z2PAY)
                       (void))
                     (values g$name*$10049$1Z2PAY g$ver*$10048$1Z2PAY))))
                g$ver*$10047$1Z2PAY
                g$name*$10046$1Z2PAY))))))))
   (g$parse-library$7616$1Z2PAY
     g$parse-library$11107$1Z2PAY
     (case-lambda
       ((g$e$10073$1Z2PAY)
        ((case-lambda
           ((g$t$10074$1Z2PAY)
            ((case-lambda
               ((g$ls/false$10075$1Z2PAY)
                (if (if g$ls/false$10075$1Z2PAY
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$10076$1Z2PAY
                               g$name*$10077$1Z2PAY
                               g$export$10078$1Z2PAY
                               g$exp*$10079$1Z2PAY
                               g$import$10080$1Z2PAY
                               g$imp*$10081$1Z2PAY
                               g$b*$10082$1Z2PAY)
                             (if (eq? (g$syntax->datum$7682$1Z2PAY
                                        g$export$10078$1Z2PAY)
                                      'export)
                               (if (eq? (g$syntax->datum$7682$1Z2PAY
                                          g$import$10080$1Z2PAY)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$7682$1Z2PAY
                                          g$library$10076$1Z2PAY)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$10075$1Z2PAY))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$10083$1Z2PAY
                         g$name*$10084$1Z2PAY
                         g$export$10085$1Z2PAY
                         g$exp*$10086$1Z2PAY
                         g$import$10087$1Z2PAY
                         g$imp*$10088$1Z2PAY
                         g$b*$10089$1Z2PAY)
                       (values
                         g$name*$10084$1Z2PAY
                         g$exp*$10086$1Z2PAY
                         g$imp*$10088$1Z2PAY
                         g$b*$10089$1Z2PAY)))
                    g$ls/false$10075$1Z2PAY)
                  ((case-lambda
                     ((g$t$10090$1Z2PAY)
                      ((case-lambda
                         ((g$ls/false$10091$1Z2PAY)
                          (if g$ls/false$10091$1Z2PAY
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7679$1Z2PAY
                                   '#f
                                   '"malformed library"
                                   g$e$10073$1Z2PAY)))
                              g$ls/false$10091$1Z2PAY)
                            (g$syntax-violation$7679$1Z2PAY
                              '#f
                              '"invalid syntax"
                              g$t$10090$1Z2PAY))))
                       (g$syntax-dispatch$7568$1Z2PAY g$t$10090$1Z2PAY '_))))
                   g$t$10074$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$10074$1Z2PAY
               '(any each-any (any . each-any) (any . each-any) . each-any)))))
         g$e$10073$1Z2PAY))))
   (g$parse-import-spec*$7617$1Z2PAY
     g$parse-import-spec*$11108$1Z2PAY
     ((case-lambda
        (()
         (letrec* ((g$idsyn?$10092$1Z2PAY
                     (case-lambda
                       ((g$x$10353$1Z2PAY)
                        (symbol?
                          (g$syntax->datum$7682$1Z2PAY g$x$10353$1Z2PAY)))))
                   (g$dup-error$10093$1Z2PAY
                     (case-lambda
                       ((g$name$10352$1Z2PAY)
                        (g$syntax-violation$7679$1Z2PAY
                          'import
                          '"two imports with different bindings"
                          g$name$10352$1Z2PAY))))
                   (g$merge-substs$10094$1Z2PAY
                     (case-lambda
                       ((g$s$10343$1Z2PAY g$subst$10344$1Z2PAY)
                        (letrec* ((g$insert-to-subst$10345$1Z2PAY
                                    (case-lambda
                                      ((g$a$10346$1Z2PAY g$subst$10347$1Z2PAY)
                                       ((case-lambda
                                          ((g$name$10348$1Z2PAY
                                             g$label$10349$1Z2PAY)
                                           ((case-lambda
                                              ((g$t$10350$1Z2PAY)
                                               (if g$t$10350$1Z2PAY
                                                 ((case-lambda
                                                    ((g$x$10351$1Z2PAY)
                                                     (if (eq? (cdr g$x$10351$1Z2PAY)
                                                              g$label$10349$1Z2PAY)
                                                       g$subst$10347$1Z2PAY
                                                       (g$dup-error$10093$1Z2PAY
                                                         g$name$10348$1Z2PAY))))
                                                  g$t$10350$1Z2PAY)
                                                 (cons
                                                   g$a$10346$1Z2PAY
                                                   g$subst$10347$1Z2PAY))))
                                            (g$assq$5004$1Z2PAY
                                              g$name$10348$1Z2PAY
                                              g$subst$10347$1Z2PAY))))
                                        (car g$a$10346$1Z2PAY)
                                        (cdr g$a$10346$1Z2PAY))))))
                          (if (null? g$s$10343$1Z2PAY)
                            g$subst$10344$1Z2PAY
                            (g$insert-to-subst$10345$1Z2PAY
                              (car g$s$10343$1Z2PAY)
                              (g$merge-substs$10094$1Z2PAY
                                (cdr g$s$10343$1Z2PAY)
                                g$subst$10344$1Z2PAY)))))))
                   (g$exclude*$10095$1Z2PAY
                     (case-lambda
                       ((g$sym*$10319$1Z2PAY g$subst$10320$1Z2PAY)
                        (letrec* ((g$exclude$10321$1Z2PAY
                                    (case-lambda
                                      ((g$sym$10334$1Z2PAY g$subst$10335$1Z2PAY)
                                       (if (null? g$subst$10335$1Z2PAY)
                                         (g$syntax-violation$7679$1Z2PAY
                                           'import
                                           '"cannot rename unbound identifier"
                                           g$sym$10334$1Z2PAY)
                                         (if (eq? g$sym$10334$1Z2PAY
                                                  (g$caar$5177$1Z2PAY
                                                    g$subst$10335$1Z2PAY))
                                           (values
                                             (g$cdar$5179$1Z2PAY
                                               g$subst$10335$1Z2PAY)
                                             (cdr g$subst$10335$1Z2PAY))
                                           ((case-lambda
                                              ((g$a$10336$1Z2PAY)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$exclude$10321$1Z2PAY
                                                      g$sym$10334$1Z2PAY
                                                      (cdr g$subst$10335$1Z2PAY))))
                                                 (case-lambda
                                                   ((g$old$10339$1Z2PAY
                                                      g$subst$10340$1Z2PAY)
                                                    ((case-lambda
                                                       ((g$subst$10341$1Z2PAY
                                                          g$old$10342$1Z2PAY)
                                                        (values
                                                          g$old$10342$1Z2PAY
                                                          (cons
                                                            g$a$10336$1Z2PAY
                                                            g$subst$10341$1Z2PAY))))
                                                     g$subst$10340$1Z2PAY
                                                     g$old$10339$1Z2PAY))))))
                                            (car g$subst$10335$1Z2PAY))))))))
                          (if (null? g$sym*$10319$1Z2PAY)
                            (values '() g$subst$10320$1Z2PAY)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$exclude$10321$1Z2PAY
                                   (car g$sym*$10319$1Z2PAY)
                                   g$subst$10320$1Z2PAY)))
                              (case-lambda
                                ((g$old$10324$1Z2PAY g$subst$10325$1Z2PAY)
                                 ((case-lambda
                                    ((g$subst$10326$1Z2PAY g$old$10327$1Z2PAY)
                                     (call-with-values
                                       (case-lambda
                                         (()
                                          (g$exclude*$10095$1Z2PAY
                                            (cdr g$sym*$10319$1Z2PAY)
                                            g$subst$10326$1Z2PAY)))
                                       (case-lambda
                                         ((g$old*$10330$1Z2PAY
                                            g$subst$10331$1Z2PAY)
                                          ((case-lambda
                                             ((g$subst$10332$1Z2PAY
                                                g$old*$10333$1Z2PAY)
                                              (values
                                                (cons
                                                  g$old$10327$1Z2PAY
                                                  g$old*$10333$1Z2PAY)
                                                g$subst$10332$1Z2PAY)))
                                           g$subst$10331$1Z2PAY
                                           g$old*$10330$1Z2PAY))))))
                                  g$subst$10325$1Z2PAY
                                  g$old$10324$1Z2PAY)))))))))
                   (g$find*$10096$1Z2PAY
                     (case-lambda
                       ((g$sym*$10315$1Z2PAY g$subst$10316$1Z2PAY)
                        (map (case-lambda
                               ((g$x$10317$1Z2PAY)
                                ((case-lambda
                                   ((g$t$10318$1Z2PAY)
                                    (if g$t$10318$1Z2PAY
                                      (cdr g$t$10318$1Z2PAY)
                                      (g$syntax-violation$7679$1Z2PAY
                                        'import
                                        '"cannot find identifier"
                                        g$x$10317$1Z2PAY))))
                                 (g$assq$5004$1Z2PAY
                                   g$x$10317$1Z2PAY
                                   g$subst$10316$1Z2PAY))))
                             g$sym*$10315$1Z2PAY))))
                   (g$rem*$10097$1Z2PAY
                     (case-lambda
                       ((g$sym*$10311$1Z2PAY g$subst$10312$1Z2PAY)
                        ((letrec ((g$f$10313$1Z2PAY
                                    (case-lambda
                                      ((g$subst$10314$1Z2PAY)
                                       (if (null? g$subst$10314$1Z2PAY)
                                         '()
                                         (if (g$memq$5008$1Z2PAY
                                               (g$caar$5177$1Z2PAY
                                                 g$subst$10314$1Z2PAY)
                                               g$sym*$10311$1Z2PAY)
                                           (g$f$10313$1Z2PAY
                                             (cdr g$subst$10314$1Z2PAY))
                                           (cons
                                             (car g$subst$10314$1Z2PAY)
                                             (g$f$10313$1Z2PAY
                                               (cdr g$subst$10314$1Z2PAY)))))))))
                           g$f$10313$1Z2PAY)
                         g$subst$10312$1Z2PAY))))
                   (g$remove-dups$10098$1Z2PAY
                     (case-lambda
                       ((g$ls$10310$1Z2PAY)
                        (if (null? g$ls$10310$1Z2PAY)
                          '()
                          (if (g$memq$5008$1Z2PAY
                                (car g$ls$10310$1Z2PAY)
                                (cdr g$ls$10310$1Z2PAY))
                            (g$remove-dups$10098$1Z2PAY (cdr g$ls$10310$1Z2PAY))
                            (cons
                              (car g$ls$10310$1Z2PAY)
                              (g$remove-dups$10098$1Z2PAY
                                (cdr g$ls$10310$1Z2PAY))))))))
                   (g$parse-library-name$10099$1Z2PAY
                     (case-lambda
                       ((g$spec$10194$1Z2PAY)
                        (letrec* ((g$subversion?$10195$1Z2PAY
                                    (case-lambda
                                      ((g$x$10308$1Z2PAY)
                                       ((case-lambda
                                          ((g$x$10309$1Z2PAY)
                                           (if (integer? g$x$10309$1Z2PAY)
                                             (if (exact? g$x$10309$1Z2PAY)
                                               (begin
                                                 '#f
                                                 (>= g$x$10309$1Z2PAY '0))
                                               '#f)
                                             '#f)))
                                        (g$syntax->datum$7682$1Z2PAY
                                          g$x$10308$1Z2PAY)))))
                                  (g$subversion-pred$10196$1Z2PAY
                                    (case-lambda
                                      ((g$x*$10260$1Z2PAY)
                                       ((case-lambda
                                          ((g$t$10261$1Z2PAY)
                                           ((case-lambda
                                              ((g$ls/false$10262$1Z2PAY)
                                               (if (if g$ls/false$10262$1Z2PAY
                                                     (begin
                                                       '#f
                                                       (apply
                                                         (case-lambda
                                                           ((g$n$10263$1Z2PAY)
                                                            (g$subversion?$10195$1Z2PAY
                                                              g$n$10263$1Z2PAY)))
                                                         g$ls/false$10262$1Z2PAY))
                                                     '#f)
                                                 (apply
                                                   (case-lambda
                                                     ((g$n$10264$1Z2PAY)
                                                      (case-lambda
                                                        ((g$x$10265$1Z2PAY)
                                                         (= g$x$10265$1Z2PAY
                                                            (g$syntax->datum$7682$1Z2PAY
                                                              g$n$10264$1Z2PAY))))))
                                                   g$ls/false$10262$1Z2PAY)
                                                 ((case-lambda
                                                    ((g$t$10266$1Z2PAY)
                                                     ((case-lambda
                                                        ((g$ls/false$10267$1Z2PAY)
                                                         (if (if g$ls/false$10267$1Z2PAY
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$p?$10268$1Z2PAY
                                                                        g$sub*$10269$1Z2PAY)
                                                                      (eq? (g$syntax->datum$7682$1Z2PAY
                                                                             g$p?$10268$1Z2PAY)
                                                                           'and)))
                                                                   g$ls/false$10267$1Z2PAY))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$p?$10270$1Z2PAY
                                                                  g$sub*$10271$1Z2PAY)
                                                                ((case-lambda
                                                                   ((g$p*$10272$1Z2PAY)
                                                                    (case-lambda
                                                                      ((g$x$10273$1Z2PAY)
                                                                       (g$for-all$5014$1Z2PAY
                                                                         (case-lambda
                                                                           ((g$p$10274$1Z2PAY)
                                                                            (g$p$10274$1Z2PAY
                                                                              g$x$10273$1Z2PAY)))
                                                                         g$p*$10272$1Z2PAY)))))
                                                                 (map g$subversion-pred$10196$1Z2PAY
                                                                      g$sub*$10271$1Z2PAY))))
                                                             g$ls/false$10267$1Z2PAY)
                                                           ((case-lambda
                                                              ((g$t$10275$1Z2PAY)
                                                               ((case-lambda
                                                                  ((g$ls/false$10276$1Z2PAY)
                                                                   (if (if g$ls/false$10276$1Z2PAY
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$p?$10277$1Z2PAY
                                                                                  g$sub*$10278$1Z2PAY)
                                                                                (eq? (g$syntax->datum$7682$1Z2PAY
                                                                                       g$p?$10277$1Z2PAY)
                                                                                     'or)))
                                                                             g$ls/false$10276$1Z2PAY))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p?$10279$1Z2PAY
                                                                            g$sub*$10280$1Z2PAY)
                                                                          ((case-lambda
                                                                             ((g$p*$10281$1Z2PAY)
                                                                              (case-lambda
                                                                                ((g$x$10282$1Z2PAY)
                                                                                 (g$exists$5015$1Z2PAY
                                                                                   (case-lambda
                                                                                     ((g$p$10283$1Z2PAY)
                                                                                      (g$p$10283$1Z2PAY
                                                                                        g$x$10282$1Z2PAY)))
                                                                                   g$p*$10281$1Z2PAY)))))
                                                                           (map g$subversion-pred$10196$1Z2PAY
                                                                                g$sub*$10280$1Z2PAY))))
                                                                       g$ls/false$10276$1Z2PAY)
                                                                     ((case-lambda
                                                                        ((g$t$10284$1Z2PAY)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10285$1Z2PAY)
                                                                             (if (if g$ls/false$10285$1Z2PAY
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$p?$10286$1Z2PAY
                                                                                            g$sub$10287$1Z2PAY)
                                                                                          (eq? (g$syntax->datum$7682$1Z2PAY
                                                                                                 g$p?$10286$1Z2PAY)
                                                                                               'not)))
                                                                                       g$ls/false$10285$1Z2PAY))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$p?$10288$1Z2PAY
                                                                                      g$sub$10289$1Z2PAY)
                                                                                    ((case-lambda
                                                                                       ((g$p$10290$1Z2PAY)
                                                                                        (case-lambda
                                                                                          ((g$x$10291$1Z2PAY)
                                                                                           (not (g$p$10290$1Z2PAY
                                                                                                  g$x$10291$1Z2PAY))))))
                                                                                     (g$subversion-pred$10196$1Z2PAY
                                                                                       g$sub$10289$1Z2PAY))))
                                                                                 g$ls/false$10285$1Z2PAY)
                                                                               ((case-lambda
                                                                                  ((g$t$10292$1Z2PAY)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10293$1Z2PAY)
                                                                                       (if (if g$ls/false$10293$1Z2PAY
                                                                                             (begin
                                                                                               '#f
                                                                                               (apply
                                                                                                 (case-lambda
                                                                                                   ((g$p?$10294$1Z2PAY
                                                                                                      g$n$10295$1Z2PAY)
                                                                                                    (if (eq? (g$syntax->datum$7682$1Z2PAY
                                                                                                               g$p?$10294$1Z2PAY)
                                                                                                             '<=)
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (g$subversion?$10195$1Z2PAY
                                                                                                          g$n$10295$1Z2PAY))
                                                                                                      '#f)))
                                                                                                 g$ls/false$10293$1Z2PAY))
                                                                                             '#f)
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p?$10296$1Z2PAY
                                                                                                g$n$10297$1Z2PAY)
                                                                                              (case-lambda
                                                                                                ((g$x$10298$1Z2PAY)
                                                                                                 (<= g$x$10298$1Z2PAY
                                                                                                     (g$syntax->datum$7682$1Z2PAY
                                                                                                       g$n$10297$1Z2PAY))))))
                                                                                           g$ls/false$10293$1Z2PAY)
                                                                                         ((case-lambda
                                                                                            ((g$t$10299$1Z2PAY)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10300$1Z2PAY)
                                                                                                 (if (if g$ls/false$10300$1Z2PAY
                                                                                                       (begin
                                                                                                         '#f
                                                                                                         (apply
                                                                                                           (case-lambda
                                                                                                             ((g$p?$10301$1Z2PAY
                                                                                                                g$n$10302$1Z2PAY)
                                                                                                              (if (eq? (g$syntax->datum$7682$1Z2PAY
                                                                                                                         g$p?$10301$1Z2PAY)
                                                                                                                       '>=)
                                                                                                                (begin
                                                                                                                  '#f
                                                                                                                  (g$subversion?$10195$1Z2PAY
                                                                                                                    g$n$10302$1Z2PAY))
                                                                                                                '#f)))
                                                                                                           g$ls/false$10300$1Z2PAY))
                                                                                                       '#f)
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$p?$10303$1Z2PAY
                                                                                                          g$n$10304$1Z2PAY)
                                                                                                        (case-lambda
                                                                                                          ((g$x$10305$1Z2PAY)
                                                                                                           (>= g$x$10305$1Z2PAY
                                                                                                               (g$syntax->datum$7682$1Z2PAY
                                                                                                                 g$n$10304$1Z2PAY))))))
                                                                                                     g$ls/false$10300$1Z2PAY)
                                                                                                   ((case-lambda
                                                                                                      ((g$t$10306$1Z2PAY)
                                                                                                       ((case-lambda
                                                                                                          ((g$ls/false$10307$1Z2PAY)
                                                                                                           (if g$ls/false$10307$1Z2PAY
                                                                                                             (apply
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$syntax-violation$7679$1Z2PAY
                                                                                                                    'import
                                                                                                                    '"invalid sub-version spec"
                                                                                                                    g$spec$10194$1Z2PAY
                                                                                                                    g$x*$10260$1Z2PAY)))
                                                                                                               g$ls/false$10307$1Z2PAY)
                                                                                                             (g$syntax-violation$7679$1Z2PAY
                                                                                                               '#f
                                                                                                               '"invalid syntax"
                                                                                                               g$t$10306$1Z2PAY))))
                                                                                                        (g$syntax-dispatch$7568$1Z2PAY
                                                                                                          g$t$10306$1Z2PAY
                                                                                                          '_))))
                                                                                                    g$t$10299$1Z2PAY))))
                                                                                              (g$syntax-dispatch$7568$1Z2PAY
                                                                                                g$t$10299$1Z2PAY
                                                                                                '(any any)))))
                                                                                          g$t$10292$1Z2PAY))))
                                                                                    (g$syntax-dispatch$7568$1Z2PAY
                                                                                      g$t$10292$1Z2PAY
                                                                                      '(any any)))))
                                                                                g$t$10284$1Z2PAY))))
                                                                          (g$syntax-dispatch$7568$1Z2PAY
                                                                            g$t$10284$1Z2PAY
                                                                            '(any any)))))
                                                                      g$t$10275$1Z2PAY))))
                                                                (g$syntax-dispatch$7568$1Z2PAY
                                                                  g$t$10275$1Z2PAY
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10266$1Z2PAY))))
                                                      (g$syntax-dispatch$7568$1Z2PAY
                                                        g$t$10266$1Z2PAY
                                                        '(any . each-any)))))
                                                  g$t$10261$1Z2PAY))))
                                            (g$syntax-dispatch$7568$1Z2PAY
                                              g$t$10261$1Z2PAY
                                              'any))))
                                        g$x*$10260$1Z2PAY))))
                                  (g$version-pred$10197$1Z2PAY
                                    (case-lambda
                                      ((g$x*$10220$1Z2PAY)
                                       ((case-lambda
                                          ((g$t$10221$1Z2PAY)
                                           ((case-lambda
                                              ((g$ls/false$10222$1Z2PAY)
                                               (if g$ls/false$10222$1Z2PAY
                                                 (apply
                                                   (case-lambda
                                                     (()
                                                      (case-lambda
                                                        ((g$x$10223$1Z2PAY)
                                                         '#t))))
                                                   g$ls/false$10222$1Z2PAY)
                                                 ((case-lambda
                                                    ((g$t$10224$1Z2PAY)
                                                     ((case-lambda
                                                        ((g$ls/false$10225$1Z2PAY)
                                                         (if (if g$ls/false$10225$1Z2PAY
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$c$10226$1Z2PAY
                                                                        g$ver*$10227$1Z2PAY)
                                                                      (eq? (g$syntax->datum$7682$1Z2PAY
                                                                             g$c$10226$1Z2PAY)
                                                                           'and)))
                                                                   g$ls/false$10225$1Z2PAY))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$c$10228$1Z2PAY
                                                                  g$ver*$10229$1Z2PAY)
                                                                ((case-lambda
                                                                   ((g$p*$10230$1Z2PAY)
                                                                    (case-lambda
                                                                      ((g$x$10231$1Z2PAY)
                                                                       (g$for-all$5014$1Z2PAY
                                                                         (case-lambda
                                                                           ((g$p$10232$1Z2PAY)
                                                                            (g$p$10232$1Z2PAY
                                                                              g$x$10231$1Z2PAY)))
                                                                         g$p*$10230$1Z2PAY)))))
                                                                 (map g$version-pred$10197$1Z2PAY
                                                                      g$ver*$10229$1Z2PAY))))
                                                             g$ls/false$10225$1Z2PAY)
                                                           ((case-lambda
                                                              ((g$t$10233$1Z2PAY)
                                                               ((case-lambda
                                                                  ((g$ls/false$10234$1Z2PAY)
                                                                   (if (if g$ls/false$10234$1Z2PAY
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$c$10235$1Z2PAY
                                                                                  g$ver*$10236$1Z2PAY)
                                                                                (eq? (g$syntax->datum$7682$1Z2PAY
                                                                                       g$c$10235$1Z2PAY)
                                                                                     'or)))
                                                                             g$ls/false$10234$1Z2PAY))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$c$10237$1Z2PAY
                                                                            g$ver*$10238$1Z2PAY)
                                                                          ((case-lambda
                                                                             ((g$p*$10239$1Z2PAY)
                                                                              (case-lambda
                                                                                ((g$x$10240$1Z2PAY)
                                                                                 (g$exists$5015$1Z2PAY
                                                                                   (case-lambda
                                                                                     ((g$p$10241$1Z2PAY)
                                                                                      (g$p$10241$1Z2PAY
                                                                                        g$x$10240$1Z2PAY)))
                                                                                   g$p*$10239$1Z2PAY)))))
                                                                           (map g$version-pred$10197$1Z2PAY
                                                                                g$ver*$10238$1Z2PAY))))
                                                                       g$ls/false$10234$1Z2PAY)
                                                                     ((case-lambda
                                                                        ((g$t$10242$1Z2PAY)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10243$1Z2PAY)
                                                                             (if (if g$ls/false$10243$1Z2PAY
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$c$10244$1Z2PAY
                                                                                            g$ver$10245$1Z2PAY)
                                                                                          (eq? (g$syntax->datum$7682$1Z2PAY
                                                                                                 g$c$10244$1Z2PAY)
                                                                                               'not)))
                                                                                       g$ls/false$10243$1Z2PAY))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$c$10246$1Z2PAY
                                                                                      g$ver$10247$1Z2PAY)
                                                                                    ((case-lambda
                                                                                       ((g$p$10248$1Z2PAY)
                                                                                        (case-lambda
                                                                                          ((g$x$10249$1Z2PAY)
                                                                                           (not (g$p$10248$1Z2PAY
                                                                                                  g$x$10249$1Z2PAY))))))
                                                                                     (g$version-pred$10197$1Z2PAY
                                                                                       g$ver$10247$1Z2PAY))))
                                                                                 g$ls/false$10243$1Z2PAY)
                                                                               ((case-lambda
                                                                                  ((g$t$10250$1Z2PAY)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10251$1Z2PAY)
                                                                                       (if g$ls/false$10251$1Z2PAY
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$sub*$10252$1Z2PAY)
                                                                                              ((case-lambda
                                                                                                 ((g$p*$10253$1Z2PAY)
                                                                                                  (case-lambda
                                                                                                    ((g$x$10254$1Z2PAY)
                                                                                                     ((letrec ((g$f$10255$1Z2PAY
                                                                                                                 (case-lambda
                                                                                                                   ((g$p*$10256$1Z2PAY
                                                                                                                      g$x$10257$1Z2PAY)
                                                                                                                    (if (null?
                                                                                                                          g$p*$10256$1Z2PAY)
                                                                                                                      '#t
                                                                                                                      (if (null?
                                                                                                                            g$x$10257$1Z2PAY)
                                                                                                                        '#f
                                                                                                                        (if ((car g$p*$10256$1Z2PAY)
                                                                                                                             (car g$x$10257$1Z2PAY))
                                                                                                                          (begin
                                                                                                                            '#f
                                                                                                                            (g$f$10255$1Z2PAY
                                                                                                                              (cdr g$p*$10256$1Z2PAY)
                                                                                                                              (cdr g$x$10257$1Z2PAY)))
                                                                                                                          '#f)))))))
                                                                                                        g$f$10255$1Z2PAY)
                                                                                                      g$p*$10253$1Z2PAY
                                                                                                      g$x$10254$1Z2PAY)))))
                                                                                               (map g$subversion-pred$10196$1Z2PAY
                                                                                                    g$sub*$10252$1Z2PAY))))
                                                                                           g$ls/false$10251$1Z2PAY)
                                                                                         ((case-lambda
                                                                                            ((g$t$10258$1Z2PAY)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10259$1Z2PAY)
                                                                                                 (if g$ls/false$10259$1Z2PAY
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$syntax-violation$7679$1Z2PAY
                                                                                                          'import
                                                                                                          '"invalid version spec"
                                                                                                          g$spec$10194$1Z2PAY
                                                                                                          g$x*$10220$1Z2PAY)))
                                                                                                     g$ls/false$10259$1Z2PAY)
                                                                                                   (g$syntax-violation$7679$1Z2PAY
                                                                                                     '#f
                                                                                                     '"invalid syntax"
                                                                                                     g$t$10258$1Z2PAY))))
                                                                                              (g$syntax-dispatch$7568$1Z2PAY
                                                                                                g$t$10258$1Z2PAY
                                                                                                '_))))
                                                                                          g$t$10250$1Z2PAY))))
                                                                                    (g$syntax-dispatch$7568$1Z2PAY
                                                                                      g$t$10250$1Z2PAY
                                                                                      'each-any))))
                                                                                g$t$10242$1Z2PAY))))
                                                                          (g$syntax-dispatch$7568$1Z2PAY
                                                                            g$t$10242$1Z2PAY
                                                                            '(any any)))))
                                                                      g$t$10233$1Z2PAY))))
                                                                (g$syntax-dispatch$7568$1Z2PAY
                                                                  g$t$10233$1Z2PAY
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10224$1Z2PAY))))
                                                      (g$syntax-dispatch$7568$1Z2PAY
                                                        g$t$10224$1Z2PAY
                                                        '(any . each-any)))))
                                                  g$t$10221$1Z2PAY))))
                                            (g$syntax-dispatch$7568$1Z2PAY
                                              g$t$10221$1Z2PAY
                                              '()))))
                                        g$x*$10220$1Z2PAY)))))
                          ((letrec ((g$f$10198$1Z2PAY
                                      (case-lambda
                                        ((g$x$10199$1Z2PAY)
                                         ((case-lambda
                                            ((g$t$10200$1Z2PAY)
                                             ((case-lambda
                                                ((g$ls/false$10201$1Z2PAY)
                                                 (if g$ls/false$10201$1Z2PAY
                                                   (apply
                                                     (case-lambda
                                                       ((g$version-spec*$10202$1Z2PAY)
                                                        (values
                                                          '()
                                                          (g$version-pred$10197$1Z2PAY
                                                            g$version-spec*$10202$1Z2PAY))))
                                                     g$ls/false$10201$1Z2PAY)
                                                   ((case-lambda
                                                      ((g$t$10203$1Z2PAY)
                                                       ((case-lambda
                                                          ((g$ls/false$10204$1Z2PAY)
                                                           (if (if g$ls/false$10204$1Z2PAY
                                                                 (begin
                                                                   '#f
                                                                   (apply
                                                                     (case-lambda
                                                                       ((g$x$10205$1Z2PAY
                                                                          g$x*$10206$1Z2PAY)
                                                                        (g$idsyn?$10092$1Z2PAY
                                                                          g$x$10205$1Z2PAY)))
                                                                     g$ls/false$10204$1Z2PAY))
                                                                 '#f)
                                                             (apply
                                                               (case-lambda
                                                                 ((g$x$10207$1Z2PAY
                                                                    g$x*$10208$1Z2PAY)
                                                                  (call-with-values
                                                                    (case-lambda
                                                                      (()
                                                                       (g$f$10198$1Z2PAY
                                                                         g$x*$10208$1Z2PAY)))
                                                                    (case-lambda
                                                                      ((g$name$10211$1Z2PAY
                                                                         g$pred$10212$1Z2PAY)
                                                                       ((case-lambda
                                                                          ((g$pred$10213$1Z2PAY
                                                                             g$name$10214$1Z2PAY)
                                                                           (values
                                                                             (cons
                                                                               (g$syntax->datum$7682$1Z2PAY
                                                                                 g$x$10207$1Z2PAY)
                                                                               g$name$10214$1Z2PAY)
                                                                             g$pred$10213$1Z2PAY)))
                                                                        g$pred$10212$1Z2PAY
                                                                        g$name$10211$1Z2PAY))))))
                                                               g$ls/false$10204$1Z2PAY)
                                                             ((case-lambda
                                                                ((g$t$10215$1Z2PAY)
                                                                 ((case-lambda
                                                                    ((g$ls/false$10216$1Z2PAY)
                                                                     (if g$ls/false$10216$1Z2PAY
                                                                       (apply
                                                                         (case-lambda
                                                                           (()
                                                                            (values
                                                                              '()
                                                                              (case-lambda
                                                                                ((g$x$10217$1Z2PAY)
                                                                                 '#t)))))
                                                                         g$ls/false$10216$1Z2PAY)
                                                                       ((case-lambda
                                                                          ((g$t$10218$1Z2PAY)
                                                                           ((case-lambda
                                                                              ((g$ls/false$10219$1Z2PAY)
                                                                               (if g$ls/false$10219$1Z2PAY
                                                                                 (apply
                                                                                   (case-lambda
                                                                                     (()
                                                                                      (g$syntax-violation$7679$1Z2PAY
                                                                                        '#f
                                                                                        '"invalid import spec"
                                                                                        g$spec$10194$1Z2PAY)))
                                                                                   g$ls/false$10219$1Z2PAY)
                                                                                 (g$syntax-violation$7679$1Z2PAY
                                                                                   '#f
                                                                                   '"invalid syntax"
                                                                                   g$t$10218$1Z2PAY))))
                                                                            (g$syntax-dispatch$7568$1Z2PAY
                                                                              g$t$10218$1Z2PAY
                                                                              '_))))
                                                                        g$t$10215$1Z2PAY))))
                                                                  (g$syntax-dispatch$7568$1Z2PAY
                                                                    g$t$10215$1Z2PAY
                                                                    '()))))
                                                              g$t$10203$1Z2PAY))))
                                                        (g$syntax-dispatch$7568$1Z2PAY
                                                          g$t$10203$1Z2PAY
                                                          '(any . any)))))
                                                    g$t$10200$1Z2PAY))))
                                              (g$syntax-dispatch$7568$1Z2PAY
                                                g$t$10200$1Z2PAY
                                                '(each-any)))))
                                          g$x$10199$1Z2PAY)))))
                             g$f$10198$1Z2PAY)
                           g$spec$10194$1Z2PAY)))))
                   (g$import-library$10100$1Z2PAY
                     (case-lambda
                       ((g$spec*$10186$1Z2PAY)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$parse-library-name$10099$1Z2PAY
                               g$spec*$10186$1Z2PAY)))
                          (case-lambda
                            ((g$name$10189$1Z2PAY g$pred$10190$1Z2PAY)
                             ((case-lambda
                                ((g$pred$10191$1Z2PAY g$name$10192$1Z2PAY)
                                 (begin
                                   (if (null? g$name$10192$1Z2PAY)
                                     (g$syntax-violation$7679$1Z2PAY
                                       'import
                                       '"empty library name"
                                       g$spec*$10186$1Z2PAY)
                                     (void))
                                   ((case-lambda
                                      ((g$lib$10193$1Z2PAY)
                                       (begin
                                         (if (not g$lib$10193$1Z2PAY)
                                           (g$syntax-violation$7679$1Z2PAY
                                             'import
                                             '"cannot find library with required name"
                                             g$name$10192$1Z2PAY)
                                           (void))
                                         (if (not (g$pred$10191$1Z2PAY
                                                    (g$library-version$7053$1Z2PAY
                                                      g$lib$10193$1Z2PAY)))
                                           (g$syntax-violation$7679$1Z2PAY
                                             'import
                                             '"library does not satisfy version specification"
                                             g$spec*$10186$1Z2PAY
                                             g$lib$10193$1Z2PAY)
                                           (void))
                                         ((g$imp-collector$7622$1Z2PAY)
                                          g$lib$10193$1Z2PAY)
                                         (g$library-subst$7057$1Z2PAY
                                           g$lib$10193$1Z2PAY))))
                                    (g$find-library-by-name$7093$1Z2PAY
                                      g$name$10192$1Z2PAY)))))
                              g$pred$10190$1Z2PAY
                              g$name$10189$1Z2PAY)))))))
                   (g$get-import$10101$1Z2PAY
                     (case-lambda
                       ((g$spec$10115$1Z2PAY)
                        ((case-lambda
                           ((g$t$10116$1Z2PAY)
                            ((case-lambda
                               ((g$ls/false$10117$1Z2PAY)
                                (if (if g$ls/false$10117$1Z2PAY
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$x$10118$1Z2PAY
                                               g$x*$10119$1Z2PAY)
                                             (not (g$memq$5008$1Z2PAY
                                                    (g$syntax->datum$7682$1Z2PAY
                                                      g$x$10118$1Z2PAY)
                                                    '(for rename
                                                          except
                                                          only
                                                          prefix
                                                          library)))))
                                          g$ls/false$10117$1Z2PAY))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$x$10120$1Z2PAY g$x*$10121$1Z2PAY)
                                       (g$import-library$10100$1Z2PAY
                                         (cons
                                           g$x$10120$1Z2PAY
                                           g$x*$10121$1Z2PAY))))
                                    g$ls/false$10117$1Z2PAY)
                                  ((case-lambda
                                     ((g$t$10122$1Z2PAY)
                                      ((case-lambda
                                         ((g$ls/false$10123$1Z2PAY)
                                          (if (if g$ls/false$10123$1Z2PAY
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$rename$10124$1Z2PAY
                                                         g$isp$10125$1Z2PAY
                                                         g$old*$10126$1Z2PAY
                                                         g$new*$10127$1Z2PAY)
                                                       (if (eq? (g$syntax->datum$7682$1Z2PAY
                                                                  g$rename$10124$1Z2PAY)
                                                                'rename)
                                                         (if (g$for-all$5014$1Z2PAY
                                                               g$idsyn?$10092$1Z2PAY
                                                               g$old*$10126$1Z2PAY)
                                                           (begin
                                                             '#f
                                                             (g$for-all$5014$1Z2PAY
                                                               g$idsyn?$10092$1Z2PAY
                                                               g$new*$10127$1Z2PAY))
                                                           '#f)
                                                         '#f)))
                                                    g$ls/false$10123$1Z2PAY))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$rename$10128$1Z2PAY
                                                   g$isp$10129$1Z2PAY
                                                   g$old*$10130$1Z2PAY
                                                   g$new*$10131$1Z2PAY)
                                                 ((case-lambda
                                                    ((g$subst$10132$1Z2PAY
                                                       g$old*$10133$1Z2PAY
                                                       g$new*$10134$1Z2PAY)
                                                     ((case-lambda
                                                        ((g$old-label*$10135$1Z2PAY)
                                                         ((case-lambda
                                                            ((g$subst$10136$1Z2PAY)
                                                             (g$merge-substs$10094$1Z2PAY
                                                               (map cons
                                                                    g$new*$10134$1Z2PAY
                                                                    g$old-label*$10135$1Z2PAY)
                                                               g$subst$10136$1Z2PAY)))
                                                          (g$rem*$10097$1Z2PAY
                                                            g$old*$10133$1Z2PAY
                                                            g$subst$10132$1Z2PAY))))
                                                      (g$find*$10096$1Z2PAY
                                                        g$old*$10133$1Z2PAY
                                                        g$subst$10132$1Z2PAY))))
                                                  (g$get-import$10101$1Z2PAY
                                                    g$isp$10129$1Z2PAY)
                                                  (map g$syntax->datum$7682$1Z2PAY
                                                       g$old*$10130$1Z2PAY)
                                                  (map g$syntax->datum$7682$1Z2PAY
                                                       g$new*$10131$1Z2PAY))))
                                              g$ls/false$10123$1Z2PAY)
                                            ((case-lambda
                                               ((g$t$10137$1Z2PAY)
                                                ((case-lambda
                                                   ((g$ls/false$10138$1Z2PAY)
                                                    (if (if g$ls/false$10138$1Z2PAY
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$except$10139$1Z2PAY
                                                                   g$isp$10140$1Z2PAY
                                                                   g$sym*$10141$1Z2PAY)
                                                                 (if (eq? (g$syntax->datum$7682$1Z2PAY
                                                                            g$except$10139$1Z2PAY)
                                                                          'except)
                                                                   (begin
                                                                     '#f
                                                                     (g$for-all$5014$1Z2PAY
                                                                       g$idsyn?$10092$1Z2PAY
                                                                       g$sym*$10141$1Z2PAY))
                                                                   '#f)))
                                                              g$ls/false$10138$1Z2PAY))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$except$10142$1Z2PAY
                                                             g$isp$10143$1Z2PAY
                                                             g$sym*$10144$1Z2PAY)
                                                           ((case-lambda
                                                              ((g$subst$10145$1Z2PAY)
                                                               (g$rem*$10097$1Z2PAY
                                                                 (map g$syntax->datum$7682$1Z2PAY
                                                                      g$sym*$10144$1Z2PAY)
                                                                 g$subst$10145$1Z2PAY)))
                                                            (g$get-import$10101$1Z2PAY
                                                              g$isp$10143$1Z2PAY))))
                                                        g$ls/false$10138$1Z2PAY)
                                                      ((case-lambda
                                                         ((g$t$10146$1Z2PAY)
                                                          ((case-lambda
                                                             ((g$ls/false$10147$1Z2PAY)
                                                              (if (if g$ls/false$10147$1Z2PAY
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$only$10148$1Z2PAY
                                                                             g$isp$10149$1Z2PAY
                                                                             g$sym*$10150$1Z2PAY)
                                                                           (if (eq? (g$syntax->datum$7682$1Z2PAY
                                                                                      g$only$10148$1Z2PAY)
                                                                                    'only)
                                                                             (begin
                                                                               '#f
                                                                               (g$for-all$5014$1Z2PAY
                                                                                 g$idsyn?$10092$1Z2PAY
                                                                                 g$sym*$10150$1Z2PAY))
                                                                             '#f)))
                                                                        g$ls/false$10147$1Z2PAY))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$only$10151$1Z2PAY
                                                                       g$isp$10152$1Z2PAY
                                                                       g$sym*$10153$1Z2PAY)
                                                                     ((case-lambda
                                                                        ((g$subst$10154$1Z2PAY
                                                                           g$sym*$10155$1Z2PAY)
                                                                         ((case-lambda
                                                                            ((g$sym*$10156$1Z2PAY)
                                                                             ((case-lambda
                                                                                ((g$lab*$10157$1Z2PAY)
                                                                                 (map cons
                                                                                      g$sym*$10156$1Z2PAY
                                                                                      g$lab*$10157$1Z2PAY)))
                                                                              (g$find*$10096$1Z2PAY
                                                                                g$sym*$10156$1Z2PAY
                                                                                g$subst$10154$1Z2PAY))))
                                                                          (g$remove-dups$10098$1Z2PAY
                                                                            g$sym*$10155$1Z2PAY))))
                                                                      (g$get-import$10101$1Z2PAY
                                                                        g$isp$10152$1Z2PAY)
                                                                      (map g$syntax->datum$7682$1Z2PAY
                                                                           g$sym*$10153$1Z2PAY))))
                                                                  g$ls/false$10147$1Z2PAY)
                                                                ((case-lambda
                                                                   ((g$t$10158$1Z2PAY)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10159$1Z2PAY)
                                                                        (if (if g$ls/false$10159$1Z2PAY
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$prefix$10160$1Z2PAY
                                                                                       g$isp$10161$1Z2PAY
                                                                                       g$p$10162$1Z2PAY)
                                                                                     (if (eq? (g$syntax->datum$7682$1Z2PAY
                                                                                                g$prefix$10160$1Z2PAY)
                                                                                              'prefix)
                                                                                       (begin
                                                                                         '#f
                                                                                         (g$idsyn?$10092$1Z2PAY
                                                                                           g$p$10162$1Z2PAY))
                                                                                       '#f)))
                                                                                  g$ls/false$10159$1Z2PAY))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$prefix$10163$1Z2PAY
                                                                                 g$isp$10164$1Z2PAY
                                                                                 g$p$10165$1Z2PAY)
                                                                               ((case-lambda
                                                                                  ((g$subst$10166$1Z2PAY
                                                                                     g$prefix$10167$1Z2PAY)
                                                                                   (map (case-lambda
                                                                                          ((g$x$10168$1Z2PAY)
                                                                                           (cons
                                                                                             (string->symbol
                                                                                               (string-append
                                                                                                 g$prefix$10167$1Z2PAY
                                                                                                 (symbol->string
                                                                                                   (car g$x$10168$1Z2PAY))))
                                                                                             (cdr g$x$10168$1Z2PAY))))
                                                                                        g$subst$10166$1Z2PAY)))
                                                                                (g$get-import$10101$1Z2PAY
                                                                                  g$isp$10164$1Z2PAY)
                                                                                (symbol->string
                                                                                  (g$syntax->datum$7682$1Z2PAY
                                                                                    g$p$10165$1Z2PAY)))))
                                                                            g$ls/false$10159$1Z2PAY)
                                                                          ((case-lambda
                                                                             ((g$t$10169$1Z2PAY)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10170$1Z2PAY)
                                                                                  (if (if g$ls/false$10170$1Z2PAY
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$library$10171$1Z2PAY
                                                                                                 g$spec*$10172$1Z2PAY)
                                                                                               (eq? (g$syntax->datum$7682$1Z2PAY
                                                                                                      g$library$10171$1Z2PAY)
                                                                                                    'library)))
                                                                                            g$ls/false$10170$1Z2PAY))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$library$10173$1Z2PAY
                                                                                           g$spec*$10174$1Z2PAY)
                                                                                         (g$import-library$10100$1Z2PAY
                                                                                           g$spec*$10174$1Z2PAY)))
                                                                                      g$ls/false$10170$1Z2PAY)
                                                                                    ((case-lambda
                                                                                       ((g$t$10175$1Z2PAY)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10176$1Z2PAY)
                                                                                            (if (if g$ls/false$10176$1Z2PAY
                                                                                                  (begin
                                                                                                    '#f
                                                                                                    (apply
                                                                                                      (case-lambda
                                                                                                        ((g$for$10177$1Z2PAY
                                                                                                           g$isp$10178$1Z2PAY
                                                                                                           g$rest$10179$1Z2PAY)
                                                                                                         (eq? (g$syntax->datum$7682$1Z2PAY
                                                                                                                g$for$10177$1Z2PAY)
                                                                                                              'for)))
                                                                                                      g$ls/false$10176$1Z2PAY))
                                                                                                  '#f)
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$for$10180$1Z2PAY
                                                                                                     g$isp$10181$1Z2PAY
                                                                                                     g$rest$10182$1Z2PAY)
                                                                                                   (g$get-import$10101$1Z2PAY
                                                                                                     g$isp$10181$1Z2PAY)))
                                                                                                g$ls/false$10176$1Z2PAY)
                                                                                              ((case-lambda
                                                                                                 ((g$t$10183$1Z2PAY)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$10184$1Z2PAY)
                                                                                                      (if g$ls/false$10184$1Z2PAY
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$spec$10185$1Z2PAY)
                                                                                                             (g$syntax-violation$7679$1Z2PAY
                                                                                                               'import
                                                                                                               '"invalid import spec"
                                                                                                               g$spec$10185$1Z2PAY)))
                                                                                                          g$ls/false$10184$1Z2PAY)
                                                                                                        (g$syntax-violation$7679$1Z2PAY
                                                                                                          '#f
                                                                                                          '"invalid syntax"
                                                                                                          g$t$10183$1Z2PAY))))
                                                                                                   (g$syntax-dispatch$7568$1Z2PAY
                                                                                                     g$t$10183$1Z2PAY
                                                                                                     'any))))
                                                                                               g$t$10175$1Z2PAY))))
                                                                                         (g$syntax-dispatch$7568$1Z2PAY
                                                                                           g$t$10175$1Z2PAY
                                                                                           '(any any
                                                                                                 .
                                                                                                 any)))))
                                                                                     g$t$10169$1Z2PAY))))
                                                                               (g$syntax-dispatch$7568$1Z2PAY
                                                                                 g$t$10169$1Z2PAY
                                                                                 '(any each-any)))))
                                                                           g$t$10158$1Z2PAY))))
                                                                     (g$syntax-dispatch$7568$1Z2PAY
                                                                       g$t$10158$1Z2PAY
                                                                       '(any any
                                                                             any)))))
                                                                 g$t$10146$1Z2PAY))))
                                                           (g$syntax-dispatch$7568$1Z2PAY
                                                             g$t$10146$1Z2PAY
                                                             '(any any
                                                                   .
                                                                   each-any)))))
                                                       g$t$10137$1Z2PAY))))
                                                 (g$syntax-dispatch$7568$1Z2PAY
                                                   g$t$10137$1Z2PAY
                                                   '(any any . each-any)))))
                                             g$t$10122$1Z2PAY))))
                                       (g$syntax-dispatch$7568$1Z2PAY
                                         g$t$10122$1Z2PAY
                                         '(any any . #(each (any any)))))))
                                   g$t$10116$1Z2PAY))))
                             (g$syntax-dispatch$7568$1Z2PAY
                               g$t$10116$1Z2PAY
                               '(any . each-any)))))
                         g$spec$10115$1Z2PAY))))
                   (g$add-imports!$10102$1Z2PAY
                     (case-lambda
                       ((g$imp$10107$1Z2PAY g$h$10108$1Z2PAY)
                        ((case-lambda
                           ((g$subst$10109$1Z2PAY)
                            (for-each
                              (case-lambda
                                ((g$x$10110$1Z2PAY)
                                 ((case-lambda
                                    ((g$name$10111$1Z2PAY g$label$10112$1Z2PAY)
                                     ((case-lambda
                                        ((g$t$10113$1Z2PAY)
                                         (if g$t$10113$1Z2PAY
                                           ((case-lambda
                                              ((g$l$10114$1Z2PAY)
                                               (if (not (eq? g$l$10114$1Z2PAY
                                                             g$label$10112$1Z2PAY))
                                                 (g$dup-error$10093$1Z2PAY
                                                   g$name$10111$1Z2PAY)
                                                 (void))))
                                            g$t$10113$1Z2PAY)
                                           (g$hashtable-set!$5456$1Z2PAY
                                             g$h$10108$1Z2PAY
                                             g$name$10111$1Z2PAY
                                             g$label$10112$1Z2PAY))))
                                      (g$hashtable-ref$5455$1Z2PAY
                                        g$h$10108$1Z2PAY
                                        g$name$10111$1Z2PAY
                                        '#f))))
                                  (car g$x$10110$1Z2PAY)
                                  (cdr g$x$10110$1Z2PAY))))
                              g$subst$10109$1Z2PAY)))
                         (g$get-import$10101$1Z2PAY g$imp$10107$1Z2PAY))))))
           (case-lambda
             ((g$imp*$10103$1Z2PAY)
              ((letrec ((g$f$10104$1Z2PAY
                          (case-lambda
                            ((g$imp*$10105$1Z2PAY g$h$10106$1Z2PAY)
                             (if (null? g$imp*$10105$1Z2PAY)
                               (hashtable-entries g$h$10106$1Z2PAY)
                               (begin
                                 (g$add-imports!$10102$1Z2PAY
                                   (car g$imp*$10105$1Z2PAY)
                                   g$h$10106$1Z2PAY)
                                 (g$f$10104$1Z2PAY
                                   (cdr g$imp*$10105$1Z2PAY)
                                   g$h$10106$1Z2PAY)))))))
                 g$f$10104$1Z2PAY)
               g$imp*$10103$1Z2PAY
               (g$make-eq-hashtable$5452$1Z2PAY)))))))))
   (g$make-top-rib$7618$1Z2PAY
     g$make-top-rib$11109$1Z2PAY
     (case-lambda
       ((g$names$10354$1Z2PAY g$labels$10355$1Z2PAY)
        ((case-lambda
           ((g$rib$10356$1Z2PAY)
            (begin
              (vector-for-each
                (case-lambda
                  ((g$name$10357$1Z2PAY g$label$10358$1Z2PAY)
                   (begin
                     (if (not (symbol? g$name$10357$1Z2PAY))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$10357$1Z2PAY)
                       (void))
                     (g$extend-rib/nc!$7254$1Z2PAY
                       g$rib$10356$1Z2PAY
                       (g$make-stx$7263$1Z2PAY
                         g$name$10357$1Z2PAY
                         g$top-mark*$7227$1Z2PAY
                         '()
                         '())
                       g$label$10358$1Z2PAY))))
                g$names$10354$1Z2PAY
                g$labels$10355$1Z2PAY)
              g$rib$10356$1Z2PAY)))
         (g$make-cache-rib$7251$1Z2PAY)))))
   (g$make-collector$7619$1Z2PAY
     g$make-collector$11110$1Z2PAY
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$10359$1Z2PAY)
            (case-lambda
              (() g$ls$10359$1Z2PAY)
              ((g$x$10360$1Z2PAY)
               (set! g$ls$10359$1Z2PAY
                 (g$set-cons$7224$1Z2PAY
                   g$x$10360$1Z2PAY
                   g$ls$10359$1Z2PAY))))))
         '()))))
   (g$inv-collector$7620$1Z2PAY
     g$inv-collector$11111$1Z2PAY
     (g$make-parameter$6562$1Z2PAY
       (case-lambda
         (g$args$10361$1Z2PAY
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10362$1Z2PAY)
          (begin
            (if (not (procedure? g$x$10362$1Z2PAY))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$10362$1Z2PAY)
              (void))
            g$x$10362$1Z2PAY)))))
   (g$vis-collector$7621$1Z2PAY
     g$vis-collector$11112$1Z2PAY
     (g$make-parameter$6562$1Z2PAY
       (case-lambda
         (g$args$10363$1Z2PAY
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10364$1Z2PAY)
          (begin
            (if (not (procedure? g$x$10364$1Z2PAY))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$10364$1Z2PAY)
              (void))
            g$x$10364$1Z2PAY)))))
   (g$imp-collector$7622$1Z2PAY
     g$imp-collector$11113$1Z2PAY
     (g$make-parameter$6562$1Z2PAY
       (case-lambda
         (g$args$10365$1Z2PAY
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10366$1Z2PAY)
          (begin
            (if (not (procedure? g$x$10366$1Z2PAY))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$10366$1Z2PAY)
              (void))
            g$x$10366$1Z2PAY)))))
   (g$chi-library-internal$7623$1Z2PAY
     g$chi-library-internal$11114$1Z2PAY
     (case-lambda
       ((g$e*$10367$1Z2PAY g$rib$10368$1Z2PAY g$top?$10369$1Z2PAY)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7612$1Z2PAY
               g$e*$10367$1Z2PAY
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$10368$1Z2PAY
               g$top?$10369$1Z2PAY)))
          (case-lambda
            ((g$e*$10378$1Z2PAY
               g$r$10379$1Z2PAY
               g$mr$10380$1Z2PAY
               g$lex*$10381$1Z2PAY
               g$rhs*$10382$1Z2PAY
               g$mod**$10383$1Z2PAY
               g$_kwd*$10384$1Z2PAY
               g$exp*$10385$1Z2PAY)
             ((case-lambda
                ((g$exp*$10386$1Z2PAY
                   g$_kwd*$10387$1Z2PAY
                   g$mod**$10388$1Z2PAY
                   g$rhs*$10389$1Z2PAY
                   g$lex*$10390$1Z2PAY
                   g$mr$10391$1Z2PAY
                   g$r$10392$1Z2PAY
                   g$e*$10393$1Z2PAY)
                 (values
                   (append
                     (apply append (reverse g$mod**$10388$1Z2PAY))
                     g$e*$10393$1Z2PAY)
                   g$r$10392$1Z2PAY
                   g$mr$10391$1Z2PAY
                   (reverse g$lex*$10390$1Z2PAY)
                   (reverse g$rhs*$10389$1Z2PAY)
                   g$exp*$10386$1Z2PAY)))
              g$exp*$10385$1Z2PAY
              g$_kwd*$10384$1Z2PAY
              g$mod**$10383$1Z2PAY
              g$rhs*$10382$1Z2PAY
              g$lex*$10381$1Z2PAY
              g$mr$10380$1Z2PAY
              g$r$10379$1Z2PAY
              g$e*$10378$1Z2PAY)))))))
   (g$chi-interaction-expr$7624$1Z2PAY
     g$chi-interaction-expr$11115$1Z2PAY
     (case-lambda
       ((g$e$10394$1Z2PAY g$rib$10395$1Z2PAY g$r$10396$1Z2PAY)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7612$1Z2PAY
               (list g$e$10394$1Z2PAY)
               g$r$10396$1Z2PAY
               g$r$10396$1Z2PAY
               '()
               '()
               '()
               '()
               '()
               g$rib$10395$1Z2PAY
               '#t)))
          (case-lambda
            ((g$e*$10405$1Z2PAY
               g$r$10406$1Z2PAY
               g$mr$10407$1Z2PAY
               g$lex*$10408$1Z2PAY
               g$rhs*$10409$1Z2PAY
               g$mod**$10410$1Z2PAY
               g$_kwd*$10411$1Z2PAY
               g$_exp*$10412$1Z2PAY)
             ((case-lambda
                ((g$_exp*$10413$1Z2PAY
                   g$_kwd*$10414$1Z2PAY
                   g$mod**$10415$1Z2PAY
                   g$rhs*$10416$1Z2PAY
                   g$lex*$10417$1Z2PAY
                   g$mr$10418$1Z2PAY
                   g$r$10419$1Z2PAY
                   g$e*$10420$1Z2PAY)
                 ((case-lambda
                    ((g$e*$10421$1Z2PAY)
                     ((case-lambda
                        ((g$e$10422$1Z2PAY)
                         (values g$e$10422$1Z2PAY g$r$10419$1Z2PAY)))
                      (if (null? g$e*$10421$1Z2PAY)
                        (g$build-void$7220$1Z2PAY)
                        (if (null? (cdr g$e*$10421$1Z2PAY))
                          (car g$e*$10421$1Z2PAY)
                          (g$build-sequence$7219$1Z2PAY
                            '#f
                            g$e*$10421$1Z2PAY))))))
                  (g$expand-interaction-rhs*/init*$7593$1Z2PAY
                    (reverse g$lex*$10417$1Z2PAY)
                    (reverse g$rhs*$10416$1Z2PAY)
                    (append
                      (apply append (reverse g$mod**$10415$1Z2PAY))
                      g$e*$10420$1Z2PAY)
                    g$r$10419$1Z2PAY
                    g$mr$10418$1Z2PAY))))
              g$_exp*$10412$1Z2PAY
              g$_kwd*$10411$1Z2PAY
              g$mod**$10410$1Z2PAY
              g$rhs*$10409$1Z2PAY
              g$lex*$10408$1Z2PAY
              g$mr$10407$1Z2PAY
              g$r$10406$1Z2PAY
              g$e*$10405$1Z2PAY)))))))
   (g$library-body-expander$7625$1Z2PAY
     g$library-body-expander$11116$1Z2PAY
     (case-lambda
       ((g$name$10423$1Z2PAY
          g$main-exp*$10424$1Z2PAY
          g$imp*$10425$1Z2PAY
          g$b*$10426$1Z2PAY
          g$top?$10427$1Z2PAY)
        (letrec* ((g$itc$10428$1Z2PAY (g$make-collector$7619$1Z2PAY)))
          ((case-lambda
             ((g$imp-collector$10433$1Z2PAY
                g$top-level-context$10434$1Z2PAY
                g$imp-collector$10435$1Z2PAY
                g$top-level-context$10436$1Z2PAY)
              ((case-lambda
                 ((g$swap$10437$1Z2PAY)
                  (dynamic-wind
                    g$swap$10437$1Z2PAY
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$7617$1Z2PAY
                              g$imp*$10425$1Z2PAY)))
                         (case-lambda
                           ((g$subst-names$10440$1Z2PAY
                              g$subst-labels$10441$1Z2PAY)
                            ((case-lambda
                               ((g$subst-labels$10442$1Z2PAY
                                  g$subst-names$10443$1Z2PAY)
                                ((case-lambda
                                   ((g$rib$10444$1Z2PAY)
                                    (letrec* ((g$wrap$10445$1Z2PAY
                                                (case-lambda
                                                  ((g$x$10507$1Z2PAY)
                                                   (g$make-stx$7263$1Z2PAY
                                                     g$x$10507$1Z2PAY
                                                     g$top-mark*$7227$1Z2PAY
                                                     (list g$rib$10444$1Z2PAY)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$10446$1Z2PAY
                                            g$main-exp*$10447$1Z2PAY
                                            g$rtc$10448$1Z2PAY
                                            g$vtc$10449$1Z2PAY)
                                          ((case-lambda
                                             ((g$inv-collector$10454$1Z2PAY
                                                g$vis-collector$10455$1Z2PAY
                                                g$inv-collector$10456$1Z2PAY
                                                g$vis-collector$10457$1Z2PAY)
                                              ((case-lambda
                                                 ((g$swap$10458$1Z2PAY)
                                                  (dynamic-wind
                                                    g$swap$10458$1Z2PAY
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$7623$1Z2PAY
                                                              g$b*$10446$1Z2PAY
                                                              g$rib$10444$1Z2PAY
                                                              g$top?$10427$1Z2PAY)))
                                                         (case-lambda
                                                           ((g$init*$10465$1Z2PAY
                                                              g$r$10466$1Z2PAY
                                                              g$mr$10467$1Z2PAY
                                                              g$lex*$10468$1Z2PAY
                                                              g$rhs*$10469$1Z2PAY
                                                              g$internal-exp*$10470$1Z2PAY)
                                                            ((case-lambda
                                                               ((g$internal-exp*$10471$1Z2PAY
                                                                  g$rhs*$10472$1Z2PAY
                                                                  g$lex*$10473$1Z2PAY
                                                                  g$mr$10474$1Z2PAY
                                                                  g$r$10475$1Z2PAY
                                                                  g$init*$10476$1Z2PAY)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$7614$1Z2PAY
                                                                       (append
                                                                         g$main-exp*$10447$1Z2PAY
                                                                         g$internal-exp*$10471$1Z2PAY))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$10479$1Z2PAY
                                                                       g$exp-id*$10480$1Z2PAY)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$10481$1Z2PAY
                                                                           g$exp-name*$10482$1Z2PAY)
                                                                         (begin
                                                                           (g$seal-rib!$7256$1Z2PAY
                                                                             g$rib$10444$1Z2PAY)
                                                                           ((case-lambda
                                                                              ((g$init*$10483$1Z2PAY)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$10484$1Z2PAY)
                                                                                   ((case-lambda
                                                                                      (()
                                                                                       (begin
                                                                                         (g$unseal-rib!$7257$1Z2PAY
                                                                                           g$rib$10444$1Z2PAY)
                                                                                         ((case-lambda
                                                                                            ((g$loc*$10485$1Z2PAY
                                                                                               g$export-subst$10486$1Z2PAY)
                                                                                             (letrec* ((g$errstr$10487$1Z2PAY
                                                                                                         '"attempt to export mutated variable"))
                                                                                               (call-with-values
                                                                                                 (case-lambda
                                                                                                   (()
                                                                                                    (g$make-export-env/macros$7668$1Z2PAY
                                                                                                      g$lex*$10473$1Z2PAY
                                                                                                      g$loc*$10485$1Z2PAY
                                                                                                      g$r$10475$1Z2PAY)))
                                                                                                 (case-lambda
                                                                                                   ((g$export-env$10491$1Z2PAY
                                                                                                      g$global*$10492$1Z2PAY
                                                                                                      g$macro*$10493$1Z2PAY)
                                                                                                    ((case-lambda
                                                                                                       ((g$macro*$10494$1Z2PAY
                                                                                                          g$global*$10495$1Z2PAY
                                                                                                          g$export-env$10496$1Z2PAY)
                                                                                                        (begin
                                                                                                          (for-each
                                                                                                            (case-lambda
                                                                                                              ((g$s$10497$1Z2PAY)
                                                                                                               ((case-lambda
                                                                                                                  ((g$name$10498$1Z2PAY
                                                                                                                     g$label$10499$1Z2PAY)
                                                                                                                   ((case-lambda
                                                                                                                      ((g$p$10500$1Z2PAY)
                                                                                                                       (if g$p$10500$1Z2PAY
                                                                                                                         ((case-lambda
                                                                                                                            ((g$b$10501$1Z2PAY)
                                                                                                                             ((case-lambda
                                                                                                                                ((g$type$10502$1Z2PAY)
                                                                                                                                 (if (eq? g$type$10502$1Z2PAY
                                                                                                                                          'mutable)
                                                                                                                                   (g$syntax-violation$7679$1Z2PAY
                                                                                                                                     'export
                                                                                                                                     g$errstr$10487$1Z2PAY
                                                                                                                                     g$name$10498$1Z2PAY)
                                                                                                                                   (void))))
                                                                                                                              (car g$b$10501$1Z2PAY))))
                                                                                                                          (cdr g$p$10500$1Z2PAY))
                                                                                                                         (void))))
                                                                                                                    (g$assq$5004$1Z2PAY
                                                                                                                      g$label$10499$1Z2PAY
                                                                                                                      g$export-env$10496$1Z2PAY))))
                                                                                                                (car g$s$10497$1Z2PAY)
                                                                                                                (cdr g$s$10497$1Z2PAY))))
                                                                                                            g$export-subst$10486$1Z2PAY)
                                                                                                          ((case-lambda
                                                                                                             ((g$invoke-body$10503$1Z2PAY
                                                                                                                g$invoke-definitions$10504$1Z2PAY)
                                                                                                              (values
                                                                                                                (g$itc$10428$1Z2PAY)
                                                                                                                (g$rtc$10448$1Z2PAY)
                                                                                                                (g$vtc$10449$1Z2PAY)
                                                                                                                (g$build-sequence$7219$1Z2PAY
                                                                                                                  '#f
                                                                                                                  (append
                                                                                                                    g$invoke-definitions$10504$1Z2PAY
                                                                                                                    (list
                                                                                                                      g$invoke-body$10503$1Z2PAY)))
                                                                                                                g$macro*$10494$1Z2PAY
                                                                                                                g$export-subst$10486$1Z2PAY
                                                                                                                g$export-env$10496$1Z2PAY)))
                                                                                                           (g$build-library-letrec*$7223$1Z2PAY
                                                                                                             '#f
                                                                                                             g$name$10423$1Z2PAY
                                                                                                             g$lex*$10473$1Z2PAY
                                                                                                             g$loc*$10485$1Z2PAY
                                                                                                             g$rhs*$10484$1Z2PAY
                                                                                                             (if (null?
                                                                                                                   g$init*$10483$1Z2PAY)
                                                                                                               (g$build-void$7220$1Z2PAY)
                                                                                                               (g$build-sequence$7219$1Z2PAY
                                                                                                                 '#f
                                                                                                                 g$init*$10483$1Z2PAY)))
                                                                                                           (map g$build-global-define$7215$1Z2PAY
                                                                                                                (map cdr
                                                                                                                     g$global*$10495$1Z2PAY))))))
                                                                                                     g$macro*$10493$1Z2PAY
                                                                                                     g$global*$10492$1Z2PAY
                                                                                                     g$export-env$10491$1Z2PAY)))))))
                                                                                          (map g$gen-global$7230$1Z2PAY
                                                                                               g$lex*$10473$1Z2PAY)
                                                                                          (g$make-export-subst$7667$1Z2PAY
                                                                                            g$exp-name*$10482$1Z2PAY
                                                                                            g$exp-id*$10481$1Z2PAY))))))))
                                                                                (g$chi-rhs*$7594$1Z2PAY
                                                                                  g$rhs*$10472$1Z2PAY
                                                                                  g$r$10475$1Z2PAY
                                                                                  g$mr$10474$1Z2PAY))))
                                                                            (g$chi-expr*$7584$1Z2PAY
                                                                              g$init*$10476$1Z2PAY
                                                                              g$r$10475$1Z2PAY
                                                                              g$mr$10474$1Z2PAY)))))
                                                                      g$exp-id*$10480$1Z2PAY
                                                                      g$exp-name*$10479$1Z2PAY))))))
                                                             g$internal-exp*$10470$1Z2PAY
                                                             g$rhs*$10469$1Z2PAY
                                                             g$lex*$10468$1Z2PAY
                                                             g$mr$10467$1Z2PAY
                                                             g$r$10466$1Z2PAY
                                                             g$init*$10465$1Z2PAY))))))
                                                    g$swap$10458$1Z2PAY)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$10505$1Z2PAY)
                                                        (begin
                                                          (g$inv-collector$10454$1Z2PAY
                                                            g$inv-collector$10456$1Z2PAY)
                                                          (set! g$inv-collector$10456$1Z2PAY
                                                            g$t$10505$1Z2PAY))))
                                                     (g$inv-collector$10454$1Z2PAY))
                                                    ((case-lambda
                                                       ((g$t$10506$1Z2PAY)
                                                        (begin
                                                          (g$vis-collector$10455$1Z2PAY
                                                            g$vis-collector$10457$1Z2PAY)
                                                          (set! g$vis-collector$10457$1Z2PAY
                                                            g$t$10506$1Z2PAY))))
                                                     (g$vis-collector$10455$1Z2PAY))))))))
                                           g$inv-collector$7620$1Z2PAY
                                           g$vis-collector$7621$1Z2PAY
                                           g$rtc$10448$1Z2PAY
                                           g$vtc$10449$1Z2PAY)))
                                       (map g$wrap$10445$1Z2PAY
                                            g$b*$10426$1Z2PAY)
                                       (map g$wrap$10445$1Z2PAY
                                            g$main-exp*$10424$1Z2PAY)
                                       (g$make-collector$7619$1Z2PAY)
                                       (g$make-collector$7619$1Z2PAY)))))
                                 (g$make-top-rib$7618$1Z2PAY
                                   g$subst-names$10443$1Z2PAY
                                   g$subst-labels$10442$1Z2PAY))))
                             g$subst-labels$10441$1Z2PAY
                             g$subst-names$10440$1Z2PAY))))))
                    g$swap$10437$1Z2PAY)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$10508$1Z2PAY)
                        (begin
                          (g$imp-collector$10433$1Z2PAY
                            g$imp-collector$10435$1Z2PAY)
                          (set! g$imp-collector$10435$1Z2PAY
                            g$t$10508$1Z2PAY))))
                     (g$imp-collector$10433$1Z2PAY))
                    ((case-lambda
                       ((g$t$10509$1Z2PAY)
                        (begin
                          (g$top-level-context$10434$1Z2PAY
                            g$top-level-context$10436$1Z2PAY)
                          (set! g$top-level-context$10436$1Z2PAY
                            g$t$10509$1Z2PAY))))
                     (g$top-level-context$10434$1Z2PAY))))))))
           g$imp-collector$7622$1Z2PAY
           g$top-level-context$7686$1Z2PAY
           g$itc$10428$1Z2PAY
           '#f)))))
   (g$core-library-expander$7626$1Z2PAY
     g$core-library-expander$11117$1Z2PAY
     (case-lambda
       ((g$e$10510$1Z2PAY g$verify-name$10511$1Z2PAY)
        (call-with-values
          (case-lambda (() (g$parse-library$7616$1Z2PAY g$e$10510$1Z2PAY)))
          (case-lambda
            ((g$name*$10516$1Z2PAY
               g$exp*$10517$1Z2PAY
               g$imp*$10518$1Z2PAY
               g$b*$10519$1Z2PAY)
             ((case-lambda
                ((g$b*$10520$1Z2PAY
                   g$imp*$10521$1Z2PAY
                   g$exp*$10522$1Z2PAY
                   g$name*$10523$1Z2PAY)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$parse-library-name$7615$1Z2PAY g$name*$10523$1Z2PAY)))
                   (case-lambda
                     ((g$name$10526$1Z2PAY g$ver$10527$1Z2PAY)
                      ((case-lambda
                         ((g$ver$10528$1Z2PAY g$name$10529$1Z2PAY)
                          (begin
                            (g$verify-name$10511$1Z2PAY g$name$10529$1Z2PAY)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$7625$1Z2PAY
                                   g$name$10529$1Z2PAY
                                   g$exp*$10522$1Z2PAY
                                   g$imp*$10521$1Z2PAY
                                   g$b*$10520$1Z2PAY
                                   '#f)))
                              (case-lambda
                                ((g$imp*$10537$1Z2PAY
                                   g$invoke-req*$10538$1Z2PAY
                                   g$visit-req*$10539$1Z2PAY
                                   g$invoke-code$10540$1Z2PAY
                                   g$visit-code$10541$1Z2PAY
                                   g$export-subst$10542$1Z2PAY
                                   g$export-env$10543$1Z2PAY)
                                 ((case-lambda
                                    ((g$export-env$10544$1Z2PAY
                                       g$export-subst$10545$1Z2PAY
                                       g$visit-code$10546$1Z2PAY
                                       g$invoke-code$10547$1Z2PAY
                                       g$visit-req*$10548$1Z2PAY
                                       g$invoke-req*$10549$1Z2PAY
                                       g$imp*$10550$1Z2PAY)
                                     (values
                                       g$name$10529$1Z2PAY
                                       g$ver$10528$1Z2PAY
                                       g$imp*$10550$1Z2PAY
                                       g$invoke-req*$10549$1Z2PAY
                                       g$visit-req*$10548$1Z2PAY
                                       g$invoke-code$10547$1Z2PAY
                                       g$visit-code$10546$1Z2PAY
                                       g$export-subst$10545$1Z2PAY
                                       g$export-env$10544$1Z2PAY)))
                                  g$export-env$10543$1Z2PAY
                                  g$export-subst$10542$1Z2PAY
                                  g$visit-code$10541$1Z2PAY
                                  g$invoke-code$10540$1Z2PAY
                                  g$visit-req*$10539$1Z2PAY
                                  g$invoke-req*$10538$1Z2PAY
                                  g$imp*$10537$1Z2PAY)))))))
                       g$ver$10527$1Z2PAY
                       g$name$10526$1Z2PAY))))))
              g$b*$10519$1Z2PAY
              g$imp*$10518$1Z2PAY
              g$exp*$10517$1Z2PAY
              g$name*$10516$1Z2PAY)))))))
   (g$parse-top-level-program$7627$1Z2PAY
     g$parse-top-level-program$11118$1Z2PAY
     (case-lambda
       ((g$e*$10551$1Z2PAY)
        ((case-lambda
           ((g$t$10552$1Z2PAY)
            ((case-lambda
               ((g$ls/false$10553$1Z2PAY)
                (if (if g$ls/false$10553$1Z2PAY
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$10554$1Z2PAY
                               g$imp*$10555$1Z2PAY
                               g$b*$10556$1Z2PAY)
                             (eq? (g$syntax->datum$7682$1Z2PAY
                                    g$import$10554$1Z2PAY)
                                  'import)))
                          g$ls/false$10553$1Z2PAY))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$10557$1Z2PAY
                         g$imp*$10558$1Z2PAY
                         g$b*$10559$1Z2PAY)
                       (values g$imp*$10558$1Z2PAY g$b*$10559$1Z2PAY)))
                    g$ls/false$10553$1Z2PAY)
                  ((case-lambda
                     ((g$t$10560$1Z2PAY)
                      ((case-lambda
                         ((g$ls/false$10561$1Z2PAY)
                          (if (if g$ls/false$10561$1Z2PAY
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$10562$1Z2PAY
                                         g$x$10563$1Z2PAY
                                         g$y$10564$1Z2PAY)
                                       (eq? (g$syntax->datum$7682$1Z2PAY
                                              g$import$10562$1Z2PAY)
                                            'import)))
                                    g$ls/false$10561$1Z2PAY))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$10565$1Z2PAY
                                   g$x$10566$1Z2PAY
                                   g$y$10567$1Z2PAY)
                                 (g$syntax-violation$7679$1Z2PAY
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$7287$1Z2PAY
                                     g$e*$10551$1Z2PAY))))
                              g$ls/false$10561$1Z2PAY)
                            ((case-lambda
                               ((g$t$10568$1Z2PAY)
                                ((case-lambda
                                   ((g$ls/false$10569$1Z2PAY)
                                    (if g$ls/false$10569$1Z2PAY
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$10569$1Z2PAY)
                                      (g$syntax-violation$7679$1Z2PAY
                                        '#f
                                        '"invalid syntax"
                                        g$t$10568$1Z2PAY))))
                                 (g$syntax-dispatch$7568$1Z2PAY
                                   g$t$10568$1Z2PAY
                                   '_))))
                             g$t$10560$1Z2PAY))))
                       (g$syntax-dispatch$7568$1Z2PAY
                         g$t$10560$1Z2PAY
                         '((any . any) . any)))))
                   g$t$10552$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY
               g$t$10552$1Z2PAY
               '((any . each-any) . each-any)))))
         g$e*$10551$1Z2PAY))))
   (g$top-level-expander$7628$1Z2PAY
     g$top-level-expander$11119$1Z2PAY
     (case-lambda
       ((g$e*$10570$1Z2PAY)
        (call-with-values
          (case-lambda
            (() (g$parse-top-level-program$7627$1Z2PAY g$e*$10570$1Z2PAY)))
          (case-lambda
            ((g$imp*$10573$1Z2PAY g$b*$10574$1Z2PAY)
             ((case-lambda
                ((g$b*$10575$1Z2PAY g$imp*$10576$1Z2PAY)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$7625$1Z2PAY
                        '()
                        '()
                        g$imp*$10576$1Z2PAY
                        g$b*$10575$1Z2PAY
                        '#t)))
                   (case-lambda
                     ((g$imp*$10584$1Z2PAY
                        g$invoke-req*$10585$1Z2PAY
                        g$visit-req*$10586$1Z2PAY
                        g$invoke-code$10587$1Z2PAY
                        g$visit-code$10588$1Z2PAY
                        g$export-subst$10589$1Z2PAY
                        g$export-env$10590$1Z2PAY)
                      ((case-lambda
                         ((g$export-env$10591$1Z2PAY
                            g$export-subst$10592$1Z2PAY
                            g$visit-code$10593$1Z2PAY
                            g$invoke-code$10594$1Z2PAY
                            g$visit-req*$10595$1Z2PAY
                            g$invoke-req*$10596$1Z2PAY
                            g$imp*$10597$1Z2PAY)
                          (values
                            g$invoke-req*$10596$1Z2PAY
                            g$invoke-code$10594$1Z2PAY)))
                       g$export-env$10590$1Z2PAY
                       g$export-subst$10589$1Z2PAY
                       g$visit-code$10588$1Z2PAY
                       g$invoke-code$10587$1Z2PAY
                       g$visit-req*$10586$1Z2PAY
                       g$invoke-req*$10585$1Z2PAY
                       g$imp*$10584$1Z2PAY))))))
              g$b*$10574$1Z2PAY
              g$imp*$10573$1Z2PAY)))))))
   (g$8765$7629$1Z2PAY
     g$8765$11120$1Z2PAY
     (make-record-type-descriptor
       'env
       '#f
       'g$8768$1Z2PAY
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$8767$7630$1Z2PAY g$8767$11121$1Z2PAY '#f)
   (g$8766$7631$1Z2PAY
     g$8766$11122$1Z2PAY
     (make-record-constructor-descriptor
       g$8765$7629$1Z2PAY
       '#f
       g$8767$7630$1Z2PAY))
   (g$env?$7632$1Z2PAY
     g$env?$11123$1Z2PAY
     (record-predicate g$8765$7629$1Z2PAY))
   (g$make-env$7633$1Z2PAY
     g$make-env$11124$1Z2PAY
     (record-constructor g$8766$7631$1Z2PAY))
   (g$env-names$7634$1Z2PAY
     g$env-names$11125$1Z2PAY
     (record-accessor g$8765$7629$1Z2PAY '0))
   (g$env-labels$7635$1Z2PAY
     g$env-labels$11126$1Z2PAY
     (record-accessor g$8765$7629$1Z2PAY '1))
   (g$env-itc$7636$1Z2PAY
     g$env-itc$11127$1Z2PAY
     (record-accessor g$8765$7629$1Z2PAY '2))
   (g$set-env-names!$7637$1Z2PAY
     g$set-env-names!$11128$1Z2PAY
     (record-mutator g$8765$7629$1Z2PAY '0))
   (g$set-env-labels!$7638$1Z2PAY
     g$set-env-labels!$11129$1Z2PAY
     (record-mutator g$8765$7629$1Z2PAY '1))
   (g$set-env-itc!$7639$1Z2PAY
     g$set-env-itc!$11130$1Z2PAY
     (record-mutator g$8765$7629$1Z2PAY '2))
   (g$rp$7640$1Z2PAY
     g$rp$11131$1Z2PAY
     (make-record-printer
       'env
       (case-lambda
         ((g$x$10598$1Z2PAY g$p$10599$1Z2PAY g$wr$10600$1Z2PAY)
          (display '"#<environment>" g$p$10599$1Z2PAY)))))
   (g$8784$7641$1Z2PAY
     g$8784$11132$1Z2PAY
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$8787$1Z2PAY
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$8786$7642$1Z2PAY g$8786$11133$1Z2PAY '#f)
   (g$8785$7643$1Z2PAY
     g$8785$11134$1Z2PAY
     (make-record-constructor-descriptor
       g$8784$7641$1Z2PAY
       '#f
       g$8786$7642$1Z2PAY))
   (g$interaction-env?$7644$1Z2PAY
     g$interaction-env?$11135$1Z2PAY
     (record-predicate g$8784$7641$1Z2PAY))
   (g$make-interaction-env$7645$1Z2PAY
     g$make-interaction-env$11136$1Z2PAY
     (record-constructor g$8785$7643$1Z2PAY))
   (g$interaction-env-rib$7646$1Z2PAY
     g$interaction-env-rib$11137$1Z2PAY
     (record-accessor g$8784$7641$1Z2PAY '0))
   (g$interaction-env-r$7647$1Z2PAY
     g$interaction-env-r$11138$1Z2PAY
     (record-accessor g$8784$7641$1Z2PAY '1))
   (g$interaction-env-locs$7648$1Z2PAY
     g$interaction-env-locs$11139$1Z2PAY
     (record-accessor g$8784$7641$1Z2PAY '2))
   (g$set-interaction-env-rib!$7649$1Z2PAY
     g$set-interaction-env-rib!$11140$1Z2PAY
     (record-mutator g$8784$7641$1Z2PAY '0))
   (g$set-interaction-env-r!$7650$1Z2PAY
     g$set-interaction-env-r!$11141$1Z2PAY
     (record-mutator g$8784$7641$1Z2PAY '1))
   (g$set-interaction-env-locs!$7651$1Z2PAY
     g$set-interaction-env-locs!$11142$1Z2PAY
     (record-mutator g$8784$7641$1Z2PAY '2))
   (g$rp$7652$1Z2PAY
     g$rp$11143$1Z2PAY
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$10601$1Z2PAY g$p$10602$1Z2PAY g$wr$10603$1Z2PAY)
          (display '"#<environment>" g$p$10602$1Z2PAY)))))
   (g$interaction-environment-symbols$7653$1Z2PAY
     g$interaction-environment-symbols$11144$1Z2PAY
     (case-lambda
       (()
        (g$environment-symbols$7657$1Z2PAY
          (g$interaction-environment$7685$1Z2PAY)))))
   (g$environment-bindings$7654$1Z2PAY
     g$environment-bindings$11145$1Z2PAY
     (case-lambda
       ((g$e$10604$1Z2PAY)
        (vector->list
          (vector-map
            (case-lambda
              ((g$name$10605$1Z2PAY g$label$10606$1Z2PAY)
               (g$parse-binding$7655$1Z2PAY
                 (cons
                   g$name$10605$1Z2PAY
                   (g$imported-label->binding$7099$1Z2PAY
                     g$label$10606$1Z2PAY)))))
            (g$env-names$7634$1Z2PAY g$e$10604$1Z2PAY)
            (g$env-labels$7635$1Z2PAY g$e$10604$1Z2PAY))))))
   (g$parse-binding$7655$1Z2PAY
     g$parse-binding$11146$1Z2PAY
     (case-lambda
       ((g$b$10607$1Z2PAY)
        (cons
          (car g$b$10607$1Z2PAY)
          ((case-lambda
             ((g$t$10608$1Z2PAY)
              (if (g$memv$5009$1Z2PAY g$t$10608$1Z2PAY '(core-prim global))
                'procedure
                (if (g$memv$5009$1Z2PAY
                      g$t$10608$1Z2PAY
                      '(core-macro macro global-macro))
                  'syntax
                  (if (g$memv$5009$1Z2PAY g$t$10608$1Z2PAY '($core-rtd))
                    'record
                    (if (eq? (car g$b$10607$1Z2PAY)
                             (g$cadr$5178$1Z2PAY g$b$10607$1Z2PAY))
                      'syntax
                      'unknown))))))
           (g$cadr$5178$1Z2PAY g$b$10607$1Z2PAY))))))
   (g$environment?$7656$1Z2PAY
     g$environment?$11147$1Z2PAY
     (case-lambda
       ((g$x$10609$1Z2PAY)
        ((case-lambda
           ((g$t$10610$1Z2PAY)
            (if g$t$10610$1Z2PAY
              g$t$10610$1Z2PAY
              (begin '#f (g$interaction-env?$7644$1Z2PAY g$x$10609$1Z2PAY)))))
         (g$env?$7632$1Z2PAY g$x$10609$1Z2PAY)))))
   (g$environment-symbols$7657$1Z2PAY
     g$environment-symbols$11148$1Z2PAY
     (case-lambda
       ((g$x$10611$1Z2PAY)
        (if (g$env?$7632$1Z2PAY g$x$10611$1Z2PAY)
          (vector->list (g$env-names$7634$1Z2PAY g$x$10611$1Z2PAY))
          (if (g$interaction-env?$7644$1Z2PAY g$x$10611$1Z2PAY)
            (map values
                 (g$rib-sym*$7240$1Z2PAY
                   (g$interaction-env-rib$7646$1Z2PAY g$x$10611$1Z2PAY)))
            (assertion-violation
              'environment-symbols
              '"not an environment"
              g$x$10611$1Z2PAY))))))
   (g$environment$7658$1Z2PAY
     g$environment$11149$1Z2PAY
     (case-lambda
       (g$imp*$10612$1Z2PAY
        ((case-lambda
           ((g$itc$10613$1Z2PAY)
            ((case-lambda
               ((g$imp-collector$10616$1Z2PAY g$imp-collector$10617$1Z2PAY)
                ((case-lambda
                   ((g$swap$10618$1Z2PAY)
                    (dynamic-wind
                      g$swap$10618$1Z2PAY
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$7617$1Z2PAY
                                g$imp*$10612$1Z2PAY)))
                           (case-lambda
                             ((g$subst-names$10621$1Z2PAY
                                g$subst-labels$10622$1Z2PAY)
                              ((case-lambda
                                 ((g$subst-labels$10623$1Z2PAY
                                    g$subst-names$10624$1Z2PAY)
                                  (g$make-env$7633$1Z2PAY
                                    g$subst-names$10624$1Z2PAY
                                    g$subst-labels$10623$1Z2PAY
                                    g$itc$10613$1Z2PAY)))
                               g$subst-labels$10622$1Z2PAY
                               g$subst-names$10621$1Z2PAY))))))
                      g$swap$10618$1Z2PAY)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$10625$1Z2PAY)
                        (begin
                          (g$imp-collector$10616$1Z2PAY
                            g$imp-collector$10617$1Z2PAY)
                          (set! g$imp-collector$10617$1Z2PAY
                            g$t$10625$1Z2PAY))))
                     (g$imp-collector$10616$1Z2PAY)))))))
             g$imp-collector$7622$1Z2PAY
             g$itc$10613$1Z2PAY)))
         (g$make-collector$7619$1Z2PAY)))))
   (g$null-environment$7659$1Z2PAY
     g$null-environment$11150$1Z2PAY
     (case-lambda
       ((g$n$10626$1Z2PAY)
        (begin
          (if (not (eqv? g$n$10626$1Z2PAY '5))
            (assertion-violation 'null-environment '"not 5" g$n$10626$1Z2PAY)
            (void))
          (g$environment$7658$1Z2PAY '(psyntax null-environment-5))))))
   (g$scheme-report-environment$7660$1Z2PAY
     g$scheme-report-environment$11151$1Z2PAY
     (case-lambda
       ((g$n$10627$1Z2PAY)
        (begin
          (if (not (eqv? g$n$10627$1Z2PAY '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$10627$1Z2PAY)
            (void))
          (g$environment$7658$1Z2PAY '(psyntax scheme-report-environment-5))))))
   (g$expand$7661$1Z2PAY
     g$expand$11152$1Z2PAY
     (case-lambda
       ((g$x$10628$1Z2PAY g$env$10629$1Z2PAY)
        (if (g$env?$7632$1Z2PAY g$env$10629$1Z2PAY)
          ((case-lambda
             ((g$rib$10630$1Z2PAY)
              ((case-lambda
                 ((g$x$10631$1Z2PAY
                    g$itc$10632$1Z2PAY
                    g$rtc$10633$1Z2PAY
                    g$vtc$10634$1Z2PAY)
                  ((case-lambda
                     ((g$x$10635$1Z2PAY)
                      (begin
                        (g$seal-rib!$7256$1Z2PAY g$rib$10630$1Z2PAY)
                        (values g$x$10635$1Z2PAY (g$rtc$10633$1Z2PAY)))))
                   ((case-lambda
                      ((g$top-level-context$10644$1Z2PAY
                         g$inv-collector$10645$1Z2PAY
                         g$vis-collector$10646$1Z2PAY
                         g$imp-collector$10647$1Z2PAY
                         g$top-level-context$10648$1Z2PAY
                         g$inv-collector$10649$1Z2PAY
                         g$vis-collector$10650$1Z2PAY
                         g$imp-collector$10651$1Z2PAY)
                       ((case-lambda
                          ((g$swap$10652$1Z2PAY)
                           (dynamic-wind
                             g$swap$10652$1Z2PAY
                             (case-lambda
                               (()
                                (g$chi-expr$7586$1Z2PAY
                                  g$x$10631$1Z2PAY
                                  '()
                                  '())))
                             g$swap$10652$1Z2PAY)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$10653$1Z2PAY)
                                 (begin
                                   (g$top-level-context$10644$1Z2PAY
                                     g$top-level-context$10648$1Z2PAY)
                                   (set! g$top-level-context$10648$1Z2PAY
                                     g$t$10653$1Z2PAY))))
                              (g$top-level-context$10644$1Z2PAY))
                             ((case-lambda
                                ((g$t$10654$1Z2PAY)
                                 (begin
                                   (g$inv-collector$10645$1Z2PAY
                                     g$inv-collector$10649$1Z2PAY)
                                   (set! g$inv-collector$10649$1Z2PAY
                                     g$t$10654$1Z2PAY))))
                              (g$inv-collector$10645$1Z2PAY))
                             ((case-lambda
                                ((g$t$10655$1Z2PAY)
                                 (begin
                                   (g$vis-collector$10646$1Z2PAY
                                     g$vis-collector$10650$1Z2PAY)
                                   (set! g$vis-collector$10650$1Z2PAY
                                     g$t$10655$1Z2PAY))))
                              (g$vis-collector$10646$1Z2PAY))
                             ((case-lambda
                                ((g$t$10656$1Z2PAY)
                                 (begin
                                   (g$imp-collector$10647$1Z2PAY
                                     g$imp-collector$10651$1Z2PAY)
                                   (set! g$imp-collector$10651$1Z2PAY
                                     g$t$10656$1Z2PAY))))
                              (g$imp-collector$10647$1Z2PAY))))))))
                    g$top-level-context$7686$1Z2PAY
                    g$inv-collector$7620$1Z2PAY
                    g$vis-collector$7621$1Z2PAY
                    g$imp-collector$7622$1Z2PAY
                    '#f
                    g$rtc$10633$1Z2PAY
                    g$vtc$10634$1Z2PAY
                    g$itc$10632$1Z2PAY))))
               (g$make-stx$7263$1Z2PAY
                 g$x$10628$1Z2PAY
                 g$top-mark*$7227$1Z2PAY
                 (list g$rib$10630$1Z2PAY)
                 '())
               (g$env-itc$7636$1Z2PAY g$env$10629$1Z2PAY)
               (g$make-collector$7619$1Z2PAY)
               (g$make-collector$7619$1Z2PAY))))
           (g$make-top-rib$7618$1Z2PAY
             (g$env-names$7634$1Z2PAY g$env$10629$1Z2PAY)
             (g$env-labels$7635$1Z2PAY g$env$10629$1Z2PAY)))
          (if (g$interaction-env?$7644$1Z2PAY g$env$10629$1Z2PAY)
            ((case-lambda
               ((g$rib$10657$1Z2PAY g$r$10658$1Z2PAY g$rtc$10659$1Z2PAY)
                ((case-lambda
                   ((g$x$10660$1Z2PAY)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$10671$1Z2PAY
                               g$inv-collector$10672$1Z2PAY
                               g$vis-collector$10673$1Z2PAY
                               g$imp-collector$10674$1Z2PAY
                               g$top-level-context$10675$1Z2PAY
                               g$inv-collector$10676$1Z2PAY
                               g$vis-collector$10677$1Z2PAY
                               g$imp-collector$10678$1Z2PAY)
                             ((case-lambda
                                ((g$swap$10679$1Z2PAY)
                                 (dynamic-wind
                                   g$swap$10679$1Z2PAY
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$7624$1Z2PAY
                                        g$x$10660$1Z2PAY
                                        g$rib$10657$1Z2PAY
                                        g$r$10658$1Z2PAY)))
                                   g$swap$10679$1Z2PAY)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$10680$1Z2PAY)
                                       (begin
                                         (g$top-level-context$10671$1Z2PAY
                                           g$top-level-context$10675$1Z2PAY)
                                         (set! g$top-level-context$10675$1Z2PAY
                                           g$t$10680$1Z2PAY))))
                                    (g$top-level-context$10671$1Z2PAY))
                                   ((case-lambda
                                      ((g$t$10681$1Z2PAY)
                                       (begin
                                         (g$inv-collector$10672$1Z2PAY
                                           g$inv-collector$10676$1Z2PAY)
                                         (set! g$inv-collector$10676$1Z2PAY
                                           g$t$10681$1Z2PAY))))
                                    (g$inv-collector$10672$1Z2PAY))
                                   ((case-lambda
                                      ((g$t$10682$1Z2PAY)
                                       (begin
                                         (g$vis-collector$10673$1Z2PAY
                                           g$vis-collector$10677$1Z2PAY)
                                         (set! g$vis-collector$10677$1Z2PAY
                                           g$t$10682$1Z2PAY))))
                                    (g$vis-collector$10673$1Z2PAY))
                                   ((case-lambda
                                      ((g$t$10683$1Z2PAY)
                                       (begin
                                         (g$imp-collector$10674$1Z2PAY
                                           g$imp-collector$10678$1Z2PAY)
                                         (set! g$imp-collector$10678$1Z2PAY
                                           g$t$10683$1Z2PAY))))
                                    (g$imp-collector$10674$1Z2PAY))))))))
                          g$top-level-context$7686$1Z2PAY
                          g$inv-collector$7620$1Z2PAY
                          g$vis-collector$7621$1Z2PAY
                          g$imp-collector$7622$1Z2PAY
                          g$env$10629$1Z2PAY
                          g$rtc$10659$1Z2PAY
                          (g$make-collector$7619$1Z2PAY)
                          (g$make-collector$7619$1Z2PAY))))
                      (case-lambda
                        ((g$e$10684$1Z2PAY g$r^$10685$1Z2PAY)
                         ((case-lambda
                            ((g$r^$10686$1Z2PAY g$e$10687$1Z2PAY)
                             (begin
                               (g$set-interaction-env-r!$7650$1Z2PAY
                                 g$env$10629$1Z2PAY
                                 g$r^$10686$1Z2PAY)
                               (values g$e$10687$1Z2PAY (g$rtc$10659$1Z2PAY)))))
                          g$r^$10685$1Z2PAY
                          g$e$10684$1Z2PAY))))))
                 (g$make-stx$7263$1Z2PAY
                   g$x$10628$1Z2PAY
                   g$top-mark*$7227$1Z2PAY
                   (list g$rib$10657$1Z2PAY)
                   '()))))
             (g$interaction-env-rib$7646$1Z2PAY g$env$10629$1Z2PAY)
             (g$interaction-env-r$7647$1Z2PAY g$env$10629$1Z2PAY)
             (g$make-collector$7619$1Z2PAY))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$10629$1Z2PAY))))))
   (g$eval$7662$1Z2PAY
     g$eval$11153$1Z2PAY
     (case-lambda
       ((g$x$10688$1Z2PAY g$env$10689$1Z2PAY)
        (begin
          (if (not (g$environment?$7656$1Z2PAY g$env$10689$1Z2PAY))
            (error 'eval '"not an environment" g$env$10689$1Z2PAY)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$7661$1Z2PAY g$x$10688$1Z2PAY g$env$10689$1Z2PAY)))
            (case-lambda
              ((g$x$10692$1Z2PAY g$invoke-req*$10693$1Z2PAY)
               ((case-lambda
                  ((g$invoke-req*$10694$1Z2PAY g$x$10695$1Z2PAY)
                   (begin
                     (for-each
                       g$invoke-library$7100$1Z2PAY
                       g$invoke-req*$10694$1Z2PAY)
                     (eval-core
                       (g$expanded->core$6808$1Z2PAY g$x$10695$1Z2PAY)))))
                g$invoke-req*$10693$1Z2PAY
                g$x$10692$1Z2PAY))))))))
   (g$library-expander$7663$1Z2PAY
     g$library-expander$11154$1Z2PAY
     (case-lambda
       ((g$x$10696$1Z2PAY g$filename$10697$1Z2PAY g$verify-name$10698$1Z2PAY)
        (letrec* ((g$build-visit-code$10699$1Z2PAY
                    (case-lambda
                      ((g$macro*$10742$1Z2PAY)
                       (if (null? g$macro*$10742$1Z2PAY)
                         (g$build-void$7220$1Z2PAY)
                         (g$build-sequence$7219$1Z2PAY
                           '#f
                           (map (case-lambda
                                  ((g$x$10743$1Z2PAY)
                                   ((case-lambda
                                      ((g$loc$10744$1Z2PAY g$src$10745$1Z2PAY)
                                       (list
                                         'set!
                                         g$loc$10744$1Z2PAY
                                         g$src$10745$1Z2PAY)))
                                    (car g$x$10743$1Z2PAY)
                                    (g$cddr$5180$1Z2PAY g$x$10743$1Z2PAY))))
                                g$macro*$10742$1Z2PAY))))))
                  (g$visit!$10700$1Z2PAY
                    (case-lambda
                      ((g$macro*$10738$1Z2PAY)
                       (for-each
                         (case-lambda
                           ((g$x$10739$1Z2PAY)
                            ((case-lambda
                               ((g$loc$10740$1Z2PAY g$proc$10741$1Z2PAY)
                                (set-symbol-value!
                                  g$loc$10740$1Z2PAY
                                  g$proc$10741$1Z2PAY)))
                             (car g$x$10739$1Z2PAY)
                             (g$cadr$5178$1Z2PAY g$x$10739$1Z2PAY))))
                         g$macro*$10738$1Z2PAY)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$7626$1Z2PAY
                 g$x$10696$1Z2PAY
                 g$verify-name$10698$1Z2PAY)))
            (case-lambda
              ((g$name$10710$1Z2PAY
                 g$ver$10711$1Z2PAY
                 g$imp*$10712$1Z2PAY
                 g$inv*$10713$1Z2PAY
                 g$vis*$10714$1Z2PAY
                 g$invoke-code$10715$1Z2PAY
                 g$macro*$10716$1Z2PAY
                 g$export-subst$10717$1Z2PAY
                 g$export-env$10718$1Z2PAY)
               ((case-lambda
                  ((g$export-env$10719$1Z2PAY
                     g$export-subst$10720$1Z2PAY
                     g$macro*$10721$1Z2PAY
                     g$invoke-code$10722$1Z2PAY
                     g$vis*$10723$1Z2PAY
                     g$inv*$10724$1Z2PAY
                     g$imp*$10725$1Z2PAY
                     g$ver$10726$1Z2PAY
                     g$name$10727$1Z2PAY)
                   ((case-lambda
                      ((g$id$10728$1Z2PAY
                         g$name$10729$1Z2PAY
                         g$ver$10730$1Z2PAY
                         g$imp*$10731$1Z2PAY
                         g$vis*$10732$1Z2PAY
                         g$inv*$10733$1Z2PAY
                         g$visit-proc$10734$1Z2PAY
                         g$invoke-proc$10735$1Z2PAY
                         g$visit-code$10736$1Z2PAY
                         g$invoke-code$10737$1Z2PAY)
                       (begin
                         (g$install-library$7098$1Z2PAY
                           g$id$10728$1Z2PAY
                           g$name$10729$1Z2PAY
                           g$ver$10730$1Z2PAY
                           g$imp*$10731$1Z2PAY
                           g$vis*$10732$1Z2PAY
                           g$inv*$10733$1Z2PAY
                           g$export-subst$10720$1Z2PAY
                           g$export-env$10719$1Z2PAY
                           g$visit-proc$10734$1Z2PAY
                           g$invoke-proc$10735$1Z2PAY
                           g$visit-code$10736$1Z2PAY
                           g$invoke-code$10737$1Z2PAY
                           '#t
                           g$filename$10697$1Z2PAY)
                         (values
                           g$id$10728$1Z2PAY
                           g$name$10729$1Z2PAY
                           g$ver$10730$1Z2PAY
                           g$imp*$10731$1Z2PAY
                           g$vis*$10732$1Z2PAY
                           g$inv*$10733$1Z2PAY
                           g$invoke-code$10737$1Z2PAY
                           g$visit-code$10736$1Z2PAY
                           g$export-subst$10720$1Z2PAY
                           g$export-env$10719$1Z2PAY))))
                    (gensym)
                    g$name$10727$1Z2PAY
                    g$ver$10726$1Z2PAY
                    (map g$library-spec$7104$1Z2PAY g$imp*$10725$1Z2PAY)
                    (map g$library-spec$7104$1Z2PAY g$vis*$10723$1Z2PAY)
                    (map g$library-spec$7104$1Z2PAY g$inv*$10724$1Z2PAY)
                    (case-lambda
                      (() (g$visit!$10700$1Z2PAY g$macro*$10721$1Z2PAY)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$6808$1Z2PAY
                           g$invoke-code$10722$1Z2PAY))))
                    (g$build-visit-code$10699$1Z2PAY g$macro*$10721$1Z2PAY)
                    g$invoke-code$10722$1Z2PAY)))
                g$export-env$10718$1Z2PAY
                g$export-subst$10717$1Z2PAY
                g$macro*$10716$1Z2PAY
                g$invoke-code$10715$1Z2PAY
                g$vis*$10714$1Z2PAY
                g$inv*$10713$1Z2PAY
                g$imp*$10712$1Z2PAY
                g$ver$10711$1Z2PAY
                g$name$10710$1Z2PAY))))))
       ((g$x$10746$1Z2PAY g$filename$10747$1Z2PAY)
        (g$library-expander$7663$1Z2PAY
          g$x$10746$1Z2PAY
          g$filename$10747$1Z2PAY
          (case-lambda ((g$x$10748$1Z2PAY) (values)))))
       ((g$x$10749$1Z2PAY)
        (g$library-expander$7663$1Z2PAY
          g$x$10749$1Z2PAY
          '#f
          (case-lambda ((g$x$10750$1Z2PAY) (values)))))))
   (g$boot-library-expand$7664$1Z2PAY
     g$boot-library-expand$11155$1Z2PAY
     (case-lambda
       ((g$x$10751$1Z2PAY)
        (call-with-values
          (case-lambda (() (g$library-expander$7663$1Z2PAY g$x$10751$1Z2PAY)))
          (case-lambda
            ((g$id$10762$1Z2PAY
               g$name$10763$1Z2PAY
               g$ver$10764$1Z2PAY
               g$imp*$10765$1Z2PAY
               g$vis*$10766$1Z2PAY
               g$inv*$10767$1Z2PAY
               g$invoke-code$10768$1Z2PAY
               g$visit-code$10769$1Z2PAY
               g$export-subst$10770$1Z2PAY
               g$export-env$10771$1Z2PAY)
             ((case-lambda
                ((g$export-env$10772$1Z2PAY
                   g$export-subst$10773$1Z2PAY
                   g$visit-code$10774$1Z2PAY
                   g$invoke-code$10775$1Z2PAY
                   g$inv*$10776$1Z2PAY
                   g$vis*$10777$1Z2PAY
                   g$imp*$10778$1Z2PAY
                   g$ver$10779$1Z2PAY
                   g$name$10780$1Z2PAY
                   g$id$10781$1Z2PAY)
                 (values
                   g$name$10780$1Z2PAY
                   g$invoke-code$10775$1Z2PAY
                   g$export-subst$10773$1Z2PAY
                   g$export-env$10772$1Z2PAY)))
              g$export-env$10771$1Z2PAY
              g$export-subst$10770$1Z2PAY
              g$visit-code$10769$1Z2PAY
              g$invoke-code$10768$1Z2PAY
              g$inv*$10767$1Z2PAY
              g$vis*$10766$1Z2PAY
              g$imp*$10765$1Z2PAY
              g$ver$10764$1Z2PAY
              g$name$10763$1Z2PAY
              g$id$10762$1Z2PAY)))))))
   (g$rev-map-append$7665$1Z2PAY
     g$rev-map-append$11156$1Z2PAY
     (case-lambda
       ((g$f$10782$1Z2PAY g$ls$10783$1Z2PAY g$ac$10784$1Z2PAY)
        (if (null? g$ls$10783$1Z2PAY)
          g$ac$10784$1Z2PAY
          (g$rev-map-append$7665$1Z2PAY
            g$f$10782$1Z2PAY
            (cdr g$ls$10783$1Z2PAY)
            (cons
              (g$f$10782$1Z2PAY (car g$ls$10783$1Z2PAY))
              g$ac$10784$1Z2PAY))))))
   (g$build-exports$7666$1Z2PAY
     g$build-exports$11157$1Z2PAY
     (case-lambda
       ((g$lex*+loc*$10785$1Z2PAY g$init*$10786$1Z2PAY)
        (g$build-sequence$7219$1Z2PAY
          '#f
          (cons
            (g$build-void$7220$1Z2PAY)
            (g$rev-map-append$7665$1Z2PAY
              (case-lambda
                ((g$x$10787$1Z2PAY)
                 (list 'set! (cdr g$x$10787$1Z2PAY) (car g$x$10787$1Z2PAY))))
              g$lex*+loc*$10785$1Z2PAY
              g$init*$10786$1Z2PAY))))))
   (g$make-export-subst$7667$1Z2PAY
     g$make-export-subst$11158$1Z2PAY
     (case-lambda
       ((g$name*$10788$1Z2PAY g$id*$10789$1Z2PAY)
        (map (case-lambda
               ((g$name$10790$1Z2PAY g$id$10791$1Z2PAY)
                ((case-lambda
                   ((g$label$10792$1Z2PAY)
                    (begin
                      (if (not g$label$10792$1Z2PAY)
                        (g$syntax-violation$7679$1Z2PAY
                          '#f
                          '"cannot export unbound identifier"
                          g$id$10791$1Z2PAY)
                        (void))
                      (cons g$name$10790$1Z2PAY g$label$10792$1Z2PAY))))
                 (g$id->label$7303$1Z2PAY g$id$10791$1Z2PAY))))
             g$name*$10788$1Z2PAY
             g$id*$10789$1Z2PAY))))
   (g$make-export-env/macros$7668$1Z2PAY
     g$make-export-env/macros$11159$1Z2PAY
     (case-lambda
       ((g$lex*$10793$1Z2PAY g$loc*$10794$1Z2PAY g$r$10795$1Z2PAY)
        (letrec* ((g$lookup$10796$1Z2PAY
                    (case-lambda
                      ((g$x$10811$1Z2PAY)
                       ((letrec ((g$f$10812$1Z2PAY
                                   (case-lambda
                                     ((g$x$10813$1Z2PAY
                                        g$lex*$10814$1Z2PAY
                                        g$loc*$10815$1Z2PAY)
                                      (if (pair? g$lex*$10814$1Z2PAY)
                                        (if (eq? g$x$10813$1Z2PAY
                                                 (car g$lex*$10814$1Z2PAY))
                                          (car g$loc*$10815$1Z2PAY)
                                          (g$f$10812$1Z2PAY
                                            g$x$10813$1Z2PAY
                                            (cdr g$lex*$10814$1Z2PAY)
                                            (cdr g$loc*$10815$1Z2PAY)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$10812$1Z2PAY)
                        g$x$10811$1Z2PAY
                        g$lex*$10793$1Z2PAY
                        g$loc*$10794$1Z2PAY)))))
          ((letrec ((g$f$10797$1Z2PAY
                      (case-lambda
                        ((g$r$10798$1Z2PAY
                           g$env$10799$1Z2PAY
                           g$global*$10800$1Z2PAY
                           g$macro*$10801$1Z2PAY)
                         (if (null? g$r$10798$1Z2PAY)
                           (values
                             g$env$10799$1Z2PAY
                             g$global*$10800$1Z2PAY
                             g$macro*$10801$1Z2PAY)
                           ((case-lambda
                              ((g$x$10802$1Z2PAY)
                               ((case-lambda
                                  ((g$label$10803$1Z2PAY g$b$10804$1Z2PAY)
                                   ((case-lambda
                                      ((g$t$10805$1Z2PAY)
                                       (if (g$memv$5009$1Z2PAY
                                             g$t$10805$1Z2PAY
                                             '(lexical))
                                         ((case-lambda
                                            ((g$v$10806$1Z2PAY)
                                             ((case-lambda
                                                ((g$loc$10807$1Z2PAY
                                                   g$type$10808$1Z2PAY)
                                                 (g$f$10797$1Z2PAY
                                                   (cdr g$r$10798$1Z2PAY)
                                                   (cons
                                                     (g$cons*$5016$1Z2PAY
                                                       g$label$10803$1Z2PAY
                                                       g$type$10808$1Z2PAY
                                                       g$loc$10807$1Z2PAY)
                                                     g$env$10799$1Z2PAY)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$7512$1Z2PAY
                                                         g$v$10806$1Z2PAY)
                                                       g$loc$10807$1Z2PAY)
                                                     g$global*$10800$1Z2PAY)
                                                   g$macro*$10801$1Z2PAY)))
                                              (g$lookup$10796$1Z2PAY
                                                (g$lexical-var$7512$1Z2PAY
                                                  g$v$10806$1Z2PAY))
                                              (if (g$lexical-mutable?$7513$1Z2PAY
                                                    g$v$10806$1Z2PAY)
                                                'mutable
                                                'global))))
                                          (g$binding-value$7308$1Z2PAY
                                            g$b$10804$1Z2PAY))
                                         (if (g$memv$5009$1Z2PAY
                                               g$t$10805$1Z2PAY
                                               '(local-macro))
                                           ((case-lambda
                                              ((g$loc$10809$1Z2PAY)
                                               (g$f$10797$1Z2PAY
                                                 (cdr g$r$10798$1Z2PAY)
                                                 (cons
                                                   (g$cons*$5016$1Z2PAY
                                                     g$label$10803$1Z2PAY
                                                     'global-macro
                                                     g$loc$10809$1Z2PAY)
                                                   g$env$10799$1Z2PAY)
                                                 g$global*$10800$1Z2PAY
                                                 (cons
                                                   (cons
                                                     g$loc$10809$1Z2PAY
                                                     (g$binding-value$7308$1Z2PAY
                                                       g$b$10804$1Z2PAY))
                                                   g$macro*$10801$1Z2PAY))))
                                            (gensym))
                                           (if (g$memv$5009$1Z2PAY
                                                 g$t$10805$1Z2PAY
                                                 '(local-macro!))
                                             ((case-lambda
                                                ((g$loc$10810$1Z2PAY)
                                                 (g$f$10797$1Z2PAY
                                                   (cdr g$r$10798$1Z2PAY)
                                                   (cons
                                                     (g$cons*$5016$1Z2PAY
                                                       g$label$10803$1Z2PAY
                                                       'global-macro!
                                                       g$loc$10810$1Z2PAY)
                                                     g$env$10799$1Z2PAY)
                                                   g$global*$10800$1Z2PAY
                                                   (cons
                                                     (cons
                                                       g$loc$10810$1Z2PAY
                                                       (g$binding-value$7308$1Z2PAY
                                                         g$b$10804$1Z2PAY))
                                                     g$macro*$10801$1Z2PAY))))
                                              (gensym))
                                             (if (g$memv$5009$1Z2PAY
                                                   g$t$10805$1Z2PAY
                                                   '($rtd $module))
                                               (g$f$10797$1Z2PAY
                                                 (cdr g$r$10798$1Z2PAY)
                                                 (cons
                                                   g$x$10802$1Z2PAY
                                                   g$env$10799$1Z2PAY)
                                                 g$global*$10800$1Z2PAY
                                                 g$macro*$10801$1Z2PAY)
                                               (assertion-violation
                                                 'expander
                                                 '"BUG: do not know how to export"
                                                 (g$binding-type$7307$1Z2PAY
                                                   g$b$10804$1Z2PAY)
                                                 (g$binding-value$7308$1Z2PAY
                                                   g$b$10804$1Z2PAY))))))))
                                    (g$binding-type$7307$1Z2PAY
                                      g$b$10804$1Z2PAY))))
                                (car g$x$10802$1Z2PAY)
                                (cdr g$x$10802$1Z2PAY))))
                            (car g$r$10798$1Z2PAY)))))))
             g$f$10797$1Z2PAY)
           g$r$10795$1Z2PAY
           '()
           '()
           '())))))
   (g$generate-temporaries$7669$1Z2PAY
     g$generate-temporaries$11160$1Z2PAY
     (case-lambda
       ((g$ls$10816$1Z2PAY)
        ((case-lambda
           ((g$t$10817$1Z2PAY)
            ((case-lambda
               ((g$ls/false$10818$1Z2PAY)
                (if g$ls/false$10818$1Z2PAY
                  (apply
                    (case-lambda
                      ((g$ls$10819$1Z2PAY)
                       (map (case-lambda
                              ((g$x$10820$1Z2PAY)
                               (g$make-stx$7263$1Z2PAY
                                 ((case-lambda
                                    ((g$x$10821$1Z2PAY)
                                     (if ((case-lambda
                                            ((g$t$10822$1Z2PAY)
                                             (if g$t$10822$1Z2PAY
                                               g$t$10822$1Z2PAY
                                               (begin
                                                 '#f
                                                 (string? g$x$10821$1Z2PAY)))))
                                          (symbol? g$x$10821$1Z2PAY))
                                       (gensym g$x$10821$1Z2PAY)
                                       (gensym 't))))
                                  (g$syntax->datum$7682$1Z2PAY
                                    g$x$10820$1Z2PAY))
                                 g$top-mark*$7227$1Z2PAY
                                 '()
                                 '())))
                            g$ls$10819$1Z2PAY)))
                    g$ls/false$10818$1Z2PAY)
                  ((case-lambda
                     ((g$t$10823$1Z2PAY)
                      ((case-lambda
                         ((g$ls/false$10824$1Z2PAY)
                          (if g$ls/false$10824$1Z2PAY
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$10824$1Z2PAY)
                            (g$syntax-violation$7679$1Z2PAY
                              '#f
                              '"invalid syntax"
                              g$t$10823$1Z2PAY))))
                       (g$syntax-dispatch$7568$1Z2PAY g$t$10823$1Z2PAY '_))))
                   g$t$10817$1Z2PAY))))
             (g$syntax-dispatch$7568$1Z2PAY g$t$10817$1Z2PAY 'each-any))))
         g$ls$10816$1Z2PAY))))
   (g$free-identifier=?$7670$1Z2PAY
     g$free-identifier=?$11161$1Z2PAY
     (case-lambda
       ((g$x$10825$1Z2PAY g$y$10826$1Z2PAY)
        (if (g$id?$7290$1Z2PAY g$x$10825$1Z2PAY)
          (if (g$id?$7290$1Z2PAY g$y$10826$1Z2PAY)
            (g$free-id=?$7294$1Z2PAY g$x$10825$1Z2PAY g$y$10826$1Z2PAY)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$10826$1Z2PAY))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$10825$1Z2PAY)))))
   (g$bound-identifier=?$7671$1Z2PAY
     g$bound-identifier=?$11162$1Z2PAY
     (case-lambda
       ((g$x$10827$1Z2PAY g$y$10828$1Z2PAY)
        (if (g$id?$7290$1Z2PAY g$x$10827$1Z2PAY)
          (if (g$id?$7290$1Z2PAY g$y$10828$1Z2PAY)
            (g$bound-id=?$7293$1Z2PAY g$x$10827$1Z2PAY g$y$10828$1Z2PAY)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$10828$1Z2PAY))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$10827$1Z2PAY)))))
   (g$make-source-condition$7672$1Z2PAY
     g$make-source-condition$11163$1Z2PAY
     (case-lambda
       ((g$x$10829$1Z2PAY)
        (letrec* ((g$11709$10830$1Z2PAY
                    (make-record-type-descriptor
                      '&source-information
                      &condition-rtd
                      'g$11712$1Z2PAY
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$11711$10831$1Z2PAY '#f)
                  (g$11710$10832$1Z2PAY
                    (make-record-constructor-descriptor
                      g$11709$10830$1Z2PAY
                      &condition-rcd
                      g$11711$10831$1Z2PAY))
                  (g$11708$10833$1Z2PAY (record-predicate g$11709$10830$1Z2PAY))
                  (g$make-source-condition$10834$1Z2PAY
                    (record-constructor g$11710$10832$1Z2PAY))
                  (g$11706$10835$1Z2PAY
                    (record-accessor g$11709$10830$1Z2PAY '0))
                  (g$11707$10836$1Z2PAY
                    (record-accessor g$11709$10830$1Z2PAY '1))
                  (g$source-condition?$10837$1Z2PAY
                    (condition-predicate g$11709$10830$1Z2PAY))
                  (g$source-filename$10838$1Z2PAY
                    (condition-accessor
                      g$11709$10830$1Z2PAY
                      g$11706$10835$1Z2PAY))
                  (g$source-character$10839$1Z2PAY
                    (condition-accessor
                      g$11709$10830$1Z2PAY
                      g$11707$10836$1Z2PAY)))
          (if (pair? g$x$10829$1Z2PAY)
            (g$make-source-condition$10834$1Z2PAY
              (car g$x$10829$1Z2PAY)
              (cdr g$x$10829$1Z2PAY))
            (condition))))))
   (g$extract-position-condition$7673$1Z2PAY
     g$extract-position-condition$11164$1Z2PAY
     (case-lambda
       ((g$x$10840$1Z2PAY)
        (g$make-source-condition$7672$1Z2PAY
          (g$expression-position$7674$1Z2PAY g$x$10840$1Z2PAY)))))
   (g$expression-position$7674$1Z2PAY
     g$expression-position$11165$1Z2PAY
     (case-lambda
       ((g$x$10841$1Z2PAY)
        (if (g$stx?$7262$1Z2PAY g$x$10841$1Z2PAY)
          (begin
            '#f
            ((case-lambda
               ((g$x$10842$1Z2PAY)
                (if (annotation? g$x$10842$1Z2PAY)
                  (begin '#f (annotation-source g$x$10842$1Z2PAY))
                  '#f)))
             (g$stx-expr$7264$1Z2PAY g$x$10841$1Z2PAY)))
          '#f))))
   (g$assertion-error$7675$1Z2PAY
     g$assertion-error$11166$1Z2PAY
     (case-lambda
       ((g$expr$10843$1Z2PAY g$pos$10844$1Z2PAY)
        (raise
          (condition
            (g$make-assertion-violation$5752$1Z2PAY)
            (g$make-who-condition$5766$1Z2PAY 'assert)
            (g$make-message-condition$5720$1Z2PAY '"assertion failed")
            (g$make-irritants-condition$5758$1Z2PAY (list g$expr$10843$1Z2PAY))
            (g$make-source-condition$7672$1Z2PAY g$pos$10844$1Z2PAY))))))
   (g$syntax-error$7676$1Z2PAY
     g$syntax-error$11167$1Z2PAY
     (case-lambda
       ((g$x$10845$1Z2PAY . g$args$10846$1Z2PAY)
        (begin
          (if (not (g$for-all$5014$1Z2PAY string? g$args$10846$1Z2PAY))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$10846$1Z2PAY)
            (void))
          (raise
            (condition
              (g$make-message-condition$5720$1Z2PAY
                (if (null? g$args$10846$1Z2PAY)
                  '"invalid syntax"
                  (apply string-append g$args$10846$1Z2PAY)))
              (g$make-syntax-violation$5792$1Z2PAY
                (g$syntax->datum$7682$1Z2PAY g$x$10845$1Z2PAY)
                '#f)
              (g$extract-position-condition$7673$1Z2PAY g$x$10845$1Z2PAY)
              (g$extract-trace$7677$1Z2PAY g$x$10845$1Z2PAY)))))))
   (g$extract-trace$7677$1Z2PAY
     g$extract-trace$11168$1Z2PAY
     (case-lambda
       ((g$x$10847$1Z2PAY)
        (letrec* ((g$11736$10848$1Z2PAY
                    (make-record-type-descriptor
                      '&trace
                      &condition-rtd
                      'g$11739$1Z2PAY
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$11738$10849$1Z2PAY '#f)
                  (g$11737$10850$1Z2PAY
                    (make-record-constructor-descriptor
                      g$11736$10848$1Z2PAY
                      &condition-rcd
                      g$11738$10849$1Z2PAY))
                  (g$11735$10851$1Z2PAY (record-predicate g$11736$10848$1Z2PAY))
                  (g$make-trace$10852$1Z2PAY
                    (record-constructor g$11737$10850$1Z2PAY))
                  (g$11734$10853$1Z2PAY
                    (record-accessor g$11736$10848$1Z2PAY '0))
                  (g$trace?$10854$1Z2PAY
                    (condition-predicate g$11736$10848$1Z2PAY))
                  (g$trace-form$10855$1Z2PAY
                    (condition-accessor
                      g$11736$10848$1Z2PAY
                      g$11734$10853$1Z2PAY)))
          ((letrec ((g$f$10856$1Z2PAY
                      (case-lambda
                        ((g$x$10857$1Z2PAY)
                         (if (g$stx?$7262$1Z2PAY g$x$10857$1Z2PAY)
                           (apply
                             condition
                             (g$make-trace$10852$1Z2PAY g$x$10857$1Z2PAY)
                             (map g$f$10856$1Z2PAY
                                  (g$stx-ae*$7267$1Z2PAY g$x$10857$1Z2PAY)))
                           (if (annotation? g$x$10857$1Z2PAY)
                             (g$make-trace$10852$1Z2PAY
                               (g$make-stx$7263$1Z2PAY
                                 g$x$10857$1Z2PAY
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$10856$1Z2PAY)
           g$x$10847$1Z2PAY)))))
   (g$syntax-violation*$7678$1Z2PAY
     g$syntax-violation*$11169$1Z2PAY
     (case-lambda
       ((g$who$10858$1Z2PAY
          g$msg$10859$1Z2PAY
          g$form$10860$1Z2PAY
          g$condition-object$10861$1Z2PAY)
        (begin
          (if (not (string? g$msg$10859$1Z2PAY))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$10859$1Z2PAY)
            (void))
          ((case-lambda
             ((g$who$10862$1Z2PAY)
              (raise
                (condition
                  (if g$who$10862$1Z2PAY
                    (g$make-who-condition$5766$1Z2PAY g$who$10862$1Z2PAY)
                    (condition))
                  (g$make-message-condition$5720$1Z2PAY g$msg$10859$1Z2PAY)
                  g$condition-object$10861$1Z2PAY
                  (g$extract-position-condition$7673$1Z2PAY g$form$10860$1Z2PAY)
                  (g$extract-trace$7677$1Z2PAY g$form$10860$1Z2PAY)))))
           (if ((case-lambda
                  ((g$t$10863$1Z2PAY)
                   (if g$t$10863$1Z2PAY
                     g$t$10863$1Z2PAY
                     (begin '#f (symbol? g$who$10858$1Z2PAY)))))
                (string? g$who$10858$1Z2PAY))
             g$who$10858$1Z2PAY
             (if (not g$who$10858$1Z2PAY)
               ((case-lambda
                  ((g$t$10864$1Z2PAY)
                   ((case-lambda
                      ((g$ls/false$10865$1Z2PAY)
                       (if (if g$ls/false$10865$1Z2PAY
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$10866$1Z2PAY)
                                    (g$id?$7290$1Z2PAY g$id$10866$1Z2PAY)))
                                 g$ls/false$10865$1Z2PAY))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$10867$1Z2PAY)
                              (g$syntax->datum$7682$1Z2PAY g$id$10867$1Z2PAY)))
                           g$ls/false$10865$1Z2PAY)
                         ((case-lambda
                            ((g$t$10868$1Z2PAY)
                             ((case-lambda
                                ((g$ls/false$10869$1Z2PAY)
                                 (if (if g$ls/false$10869$1Z2PAY
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$10870$1Z2PAY
                                                g$rest$10871$1Z2PAY)
                                              (g$id?$7290$1Z2PAY
                                                g$id$10870$1Z2PAY)))
                                           g$ls/false$10869$1Z2PAY))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$10872$1Z2PAY g$rest$10873$1Z2PAY)
                                        (g$syntax->datum$7682$1Z2PAY
                                          g$id$10872$1Z2PAY)))
                                     g$ls/false$10869$1Z2PAY)
                                   ((case-lambda
                                      ((g$t$10874$1Z2PAY)
                                       ((case-lambda
                                          ((g$ls/false$10875$1Z2PAY)
                                           (if g$ls/false$10875$1Z2PAY
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$10875$1Z2PAY)
                                             (g$syntax-violation$7679$1Z2PAY
                                               '#f
                                               '"invalid syntax"
                                               g$t$10874$1Z2PAY))))
                                        (g$syntax-dispatch$7568$1Z2PAY
                                          g$t$10874$1Z2PAY
                                          '_))))
                                    g$t$10868$1Z2PAY))))
                              (g$syntax-dispatch$7568$1Z2PAY
                                g$t$10868$1Z2PAY
                                '(any . any)))))
                          g$t$10864$1Z2PAY))))
                    (g$syntax-dispatch$7568$1Z2PAY g$t$10864$1Z2PAY 'any))))
                g$form$10860$1Z2PAY)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$10858$1Z2PAY))))))))
   (g$syntax-violation$7679$1Z2PAY
     g$syntax-violation$11170$1Z2PAY
     (case-lambda
       ((g$who$10876$1Z2PAY g$msg$10877$1Z2PAY g$form$10878$1Z2PAY)
        (g$syntax-violation$7679$1Z2PAY
          g$who$10876$1Z2PAY
          g$msg$10877$1Z2PAY
          g$form$10878$1Z2PAY
          '#f))
       ((g$who$10879$1Z2PAY
          g$msg$10880$1Z2PAY
          g$form$10881$1Z2PAY
          g$subform$10882$1Z2PAY)
        (g$syntax-violation*$7678$1Z2PAY
          g$who$10879$1Z2PAY
          g$msg$10880$1Z2PAY
          g$form$10881$1Z2PAY
          (g$make-syntax-violation$5792$1Z2PAY
            (g$syntax->datum$7682$1Z2PAY g$form$10881$1Z2PAY)
            (g$syntax->datum$7682$1Z2PAY g$subform$10882$1Z2PAY))))))
   (g$identifier?$7680$1Z2PAY
     g$identifier?$11171$1Z2PAY
     (case-lambda ((g$x$10883$1Z2PAY) (g$id?$7290$1Z2PAY g$x$10883$1Z2PAY))))
   (g$datum->syntax$7681$1Z2PAY
     g$datum->syntax$11172$1Z2PAY
     (case-lambda
       ((g$id$10884$1Z2PAY g$datum$10885$1Z2PAY)
        (if (g$id?$7290$1Z2PAY g$id$10884$1Z2PAY)
          (g$datum->stx$7273$1Z2PAY g$id$10884$1Z2PAY g$datum$10885$1Z2PAY)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$10884$1Z2PAY)))))
   (g$syntax->datum$7682$1Z2PAY
     g$syntax->datum$11173$1Z2PAY
     (case-lambda
       ((g$x$10886$1Z2PAY) (g$stx->datum$7301$1Z2PAY g$x$10886$1Z2PAY))))
   (g$compile-r6rs-top-level$7683$1Z2PAY
     g$compile-r6rs-top-level$11174$1Z2PAY
     (case-lambda
       ((g$x*$10887$1Z2PAY)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$7628$1Z2PAY g$x*$10887$1Z2PAY)))
          (case-lambda
            ((g$lib*$10890$1Z2PAY g$invoke-code$10891$1Z2PAY)
             ((case-lambda
                ((g$invoke-code$10892$1Z2PAY g$lib*$10893$1Z2PAY)
                 (case-lambda
                   (()
                    (begin
                      (for-each
                        g$invoke-library$7100$1Z2PAY
                        g$lib*$10893$1Z2PAY)
                      (eval-core
                        (g$expanded->core$6808$1Z2PAY
                          g$invoke-code$10892$1Z2PAY)))))))
              g$invoke-code$10891$1Z2PAY
              g$lib*$10890$1Z2PAY)))))))
   (g$pre-compile-r6rs-top-level$7684$1Z2PAY
     g$pre-compile-r6rs-top-level$11175$1Z2PAY
     (case-lambda
       ((g$x*$10894$1Z2PAY)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$7628$1Z2PAY g$x*$10894$1Z2PAY)))
          (case-lambda
            ((g$lib*$10897$1Z2PAY g$invoke-code$10898$1Z2PAY)
             ((case-lambda
                ((g$invoke-code$10899$1Z2PAY g$lib*$10900$1Z2PAY)
                 (begin
                   (for-each g$invoke-library$7100$1Z2PAY g$lib*$10900$1Z2PAY)
                   (compile-core
                     (g$expanded->core$6808$1Z2PAY
                       g$invoke-code$10899$1Z2PAY)))))
              g$invoke-code$10898$1Z2PAY
              g$lib*$10897$1Z2PAY)))))))
   (g$interaction-environment$7685$1Z2PAY
     g$interaction-environment$11176$1Z2PAY
     ((case-lambda
        ((g$the-env$10901$1Z2PAY)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$10902$1Z2PAY)
                (if g$t$10902$1Z2PAY
                  g$t$10902$1Z2PAY
                  (begin
                    '#f
                    ((case-lambda
                       ((g$lib$10903$1Z2PAY g$rib$10904$1Z2PAY)
                        (begin
                          ((case-lambda
                             ((g$subst$10905$1Z2PAY)
                              (begin
                                (g$set-rib-sym*!$7245$1Z2PAY
                                  g$rib$10904$1Z2PAY
                                  (map car g$subst$10905$1Z2PAY))
                                (g$set-rib-mark**!$7246$1Z2PAY
                                  g$rib$10904$1Z2PAY
                                  (map (case-lambda
                                         ((g$x$10906$1Z2PAY)
                                          g$top-mark*$7227$1Z2PAY))
                                       g$subst$10905$1Z2PAY))
                                (g$set-rib-label*!$7247$1Z2PAY
                                  g$rib$10904$1Z2PAY
                                  (map cdr g$subst$10905$1Z2PAY)))))
                           (g$library-subst$7057$1Z2PAY g$lib$10903$1Z2PAY))
                          ((case-lambda
                             ((g$env$10907$1Z2PAY)
                              (begin
                                (set! g$the-env$10901$1Z2PAY g$env$10907$1Z2PAY)
                                g$env$10907$1Z2PAY)))
                           (g$make-interaction-env$7645$1Z2PAY
                             g$rib$10904$1Z2PAY
                             '()
                             '())))))
                     (g$find-library-by-name$7093$1Z2PAY '(ironscheme))
                     (g$make-cache-rib$7251$1Z2PAY))))))
             g$the-env$10901$1Z2PAY)))))
      '#f))
   (g$top-level-context$7686$1Z2PAY
     g$top-level-context$11177$1Z2PAY
     (g$make-parameter$6562$1Z2PAY '#f)))
  (g$current-library-expander$7090$1Z2PAY g$library-expander$7663$1Z2PAY))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$6805$1Z2PAY
      (case-lambda
        ((g$x$11230$1Z2PAY)
         ((case-lambda
            ((g$t$11231$1Z2PAY)
             (if g$t$11231$1Z2PAY (cdr g$t$11231$1Z2PAY) '#f)))
          (g$assq$5004$1Z2PAY
            g$x$11230$1Z2PAY
            '((ellipsis-map . g$ellipsis-map$11064$1Z2PAY)
              (ironscheme-build . g$ironscheme-build$11223$1Z2PAY)
              (syntax-error . g$syntax-error$11167$1Z2PAY)
              (syntax-dispatch . g$syntax-dispatch$11059$1Z2PAY)
              (compile-system-libraries
                .
                g$compile-system-libraries$11225$1Z2PAY)
              (compile->closure . g$compile->closure$11227$1Z2PAY)
              (compile . g$compile$11226$1Z2PAY)
              (load . g$load$11222$1Z2PAY)
              (interaction-environment . g$interaction-environment$11176$1Z2PAY)
              (string-ci>? . g$string-ci>?$5938$1Z2PAY)
              (string-ci>=? . g$string-ci>=?$5940$1Z2PAY)
              (string-ci=? . g$string-ci=?$5936$1Z2PAY)
              (string-ci<? . g$string-ci<?$5937$1Z2PAY)
              (string-ci<=? . g$string-ci<=?$5939$1Z2PAY)
              (char-ci>? . g$char-ci>?$5943$1Z2PAY)
              (char-ci>=? . g$char-ci>=?$5945$1Z2PAY)
              (char-ci=? . g$char-ci=?$5941$1Z2PAY)
              (char-ci<? . g$char-ci<?$5942$1Z2PAY)
              (char-ci<=? . g$char-ci<=?$5944$1Z2PAY)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$10997$1Z2PAY)
              (variable-transformer? . g$variable-transformer?$10996$1Z2PAY)
              (make-variable-transformer
                .
                g$make-variable-transformer$10995$1Z2PAY)
              (identifier? . g$identifier?$11171$1Z2PAY)
              (generate-temporaries . g$generate-temporaries$11160$1Z2PAY)
              (free-identifier=? . g$free-identifier=?$11161$1Z2PAY)
              (syntax->datum . g$syntax->datum$11173$1Z2PAY)
              (datum->syntax . g$datum->syntax$11172$1Z2PAY)
              (bound-identifier=? . g$bound-identifier=?$11162$1Z2PAY)
              (delete-file . g$delete-file$5472$1Z2PAY)
              (file-exists? . g$file-exists?$5471$1Z2PAY)
              (list-sort . g$list-sort$5863$1Z2PAY)
              (make-eqv-hashtable . g$make-eqv-hashtable$5453$1Z2PAY)
              (make-eq-hashtable . g$make-eq-hashtable$5452$1Z2PAY)
              (hashtable-update! . g$hashtable-update!$5459$1Z2PAY)
              (hashtable-size . g$hashtable-size$5454$1Z2PAY)
              (hashtable-set! . g$hashtable-set!$5456$1Z2PAY)
              (hashtable-ref . g$hashtable-ref$5455$1Z2PAY)
              (hashtable-delete! . g$hashtable-delete!$5457$1Z2PAY)
              (hashtable-contains? . g$hashtable-contains?$5458$1Z2PAY)
              (hashtable-clear! . g$hashtable-clear!$5460$1Z2PAY)
              (call-with-output-file . g$call-with-output-file$6289$1Z2PAY)
              (call-with-input-file . g$call-with-input-file$6288$1Z2PAY)
              (with-output-to-file . g$with-output-to-file$6287$1Z2PAY)
              (with-input-from-file . g$with-input-from-file$6286$1Z2PAY)
              (port? . g$port?$6252$1Z2PAY)
              (open-string-output-port . g$open-string-output-port$6251$1Z2PAY)
              (make-i/o-write-error . g$make-i/o-write-error$6174$1Z2PAY)
              (make-i/o-read-error . g$make-i/o-read-error$6168$1Z2PAY)
              (make-i/o-port-error . g$make-i/o-port-error$6220$1Z2PAY)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$6180$1Z2PAY)
              (make-i/o-filename-error . g$make-i/o-filename-error$6188$1Z2PAY)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$6196$1Z2PAY)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$6202$1Z2PAY)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$6214$1Z2PAY)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$6208$1Z2PAY)
              (make-i/o-error . g$make-i/o-error$6162$1Z2PAY)
              (make-i/o-encoding-error . g$make-i/o-encoding-error$6234$1Z2PAY)
              (make-i/o-decoding-error . g$make-i/o-decoding-error$6228$1Z2PAY)
              (i/o-write-error? . g$i/o-write-error?$6175$1Z2PAY)
              (i/o-read-error? . g$i/o-read-error?$6169$1Z2PAY)
              (i/o-port-error? . g$i/o-port-error?$6222$1Z2PAY)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$6182$1Z2PAY)
              (i/o-error-position . g$i/o-error-position$6183$1Z2PAY)
              (i/o-filename-error? . g$i/o-filename-error?$6190$1Z2PAY)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$6197$1Z2PAY)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$6203$1Z2PAY)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$6215$1Z2PAY)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$6209$1Z2PAY)
              (i/o-error? . g$i/o-error?$6163$1Z2PAY)
              (i/o-error-port . g$i/o-error-port$6223$1Z2PAY)
              (i/o-error-filename . g$i/o-error-filename$6191$1Z2PAY)
              (i/o-encoding-error? . g$i/o-encoding-error?$6236$1Z2PAY)
              (i/o-encoding-error-char . g$i/o-encoding-error-char$6237$1Z2PAY)
              (i/o-decoding-error? . g$i/o-decoding-error?$6229$1Z2PAY)
              (call-with-string-output-port
                .
                g$call-with-string-output-port$6253$1Z2PAY)
              (scheme-report-environment
                .
                g$scheme-report-environment$11151$1Z2PAY)
              (quotient . g$quotient$5830$1Z2PAY)
              (null-environment . g$null-environment$11150$1Z2PAY)
              (remainder . g$remainder$5831$1Z2PAY)
              (modulo . g$modulo$5832$1Z2PAY)
              (force . g$force$5834$1Z2PAY)
              (command-line . g$command-line$11219$1Z2PAY)
              (remove . g$remove$5019$1Z2PAY)
              (remv . g$remv$5020$1Z2PAY)
              (remp . g$remp$5002$1Z2PAY)
              (remq . g$remq$5021$1Z2PAY)
              (partition . g$partition$5001$1Z2PAY)
              (memv . g$memv$5009$1Z2PAY)
              (memq . g$memq$5008$1Z2PAY)
              (memp . g$memp$5011$1Z2PAY)
              (member . g$member$5010$1Z2PAY)
              (exists . g$exists$5015$1Z2PAY)
              (for-all . g$for-all$5014$1Z2PAY)
              (fold-right . g$fold-right$5018$1Z2PAY)
              (fold-left . g$fold-left$5017$1Z2PAY)
              (find . g$find$5000$1Z2PAY)
              (filter . g$filter$5003$1Z2PAY)
              (cons* . g$cons*$5016$1Z2PAY)
              (assv . g$assv$5005$1Z2PAY)
              (assq . g$assq$5004$1Z2PAY)
              (assp . g$assp$5007$1Z2PAY)
              (assoc . g$assoc$5006$1Z2PAY)
              (eval . g$eval$11153$1Z2PAY)
              (environment . g$environment$11149$1Z2PAY)
              (make-enumeration . g$make-enumeration$6420$1Z2PAY)
              (enum-set=? . g$enum-set=?$6427$1Z2PAY)
              (enum-set-universe . g$enum-set-universe$6421$1Z2PAY)
              (enum-set-union . g$enum-set-union$6428$1Z2PAY)
              (enum-set-subset? . g$enum-set-subset?$6426$1Z2PAY)
              (enum-set-projection . g$enum-set-projection$6432$1Z2PAY)
              (enum-set-member? . g$enum-set-member?$6425$1Z2PAY)
              (enum-set-intersection . g$enum-set-intersection$6429$1Z2PAY)
              (enum-set-indexer . g$enum-set-indexer$6422$1Z2PAY)
              (enum-set-difference . g$enum-set-difference$6430$1Z2PAY)
              (enum-set-constructor . g$enum-set-constructor$6423$1Z2PAY)
              (enum-set-complement . g$enum-set-complement$6431$1Z2PAY)
              (enum-set->list . g$enum-set->list$6424$1Z2PAY)
              (who-condition? . g$who-condition?$5768$1Z2PAY)
              (warning? . g$warning?$5729$1Z2PAY)
              (violation? . g$violation?$5747$1Z2PAY)
              (undefined-violation? . g$undefined-violation?$5803$1Z2PAY)
              (syntax-violation? . g$syntax-violation?$5795$1Z2PAY)
              (syntax-violation-subform
                .
                g$syntax-violation-subform$5797$1Z2PAY)
              (syntax-violation-form . g$syntax-violation-form$5796$1Z2PAY)
              (syntax-violation . g$syntax-violation$11170$1Z2PAY)
              (serious-condition? . g$serious-condition?$5735$1Z2PAY)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$5775$1Z2PAY)
              (message-condition? . g$message-condition?$5722$1Z2PAY)
              (make-who-condition . g$make-who-condition$5766$1Z2PAY)
              (make-warning . g$make-warning$5728$1Z2PAY)
              (make-violation . g$make-violation$5746$1Z2PAY)
              (make-undefined-violation
                .
                g$make-undefined-violation$5802$1Z2PAY)
              (make-syntax-violation . g$make-syntax-violation$5792$1Z2PAY)
              (make-serious-condition . g$make-serious-condition$5734$1Z2PAY)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$5774$1Z2PAY)
              (make-message-condition . g$make-message-condition$5720$1Z2PAY)
              (make-lexical-violation . g$make-lexical-violation$5786$1Z2PAY)
              (make-irritants-condition
                .
                g$make-irritants-condition$5758$1Z2PAY)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$5780$1Z2PAY)
              (make-error . g$make-error$5740$1Z2PAY)
              (make-assertion-violation
                .
                g$make-assertion-violation$5752$1Z2PAY)
              (lexical-violation? . g$lexical-violation?$5787$1Z2PAY)
              (irritants-condition? . g$irritants-condition?$5760$1Z2PAY)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$5781$1Z2PAY)
              (error? . g$error?$5741$1Z2PAY)
              (condition-who . g$condition-who$5769$1Z2PAY)
              (condition-message . g$condition-message$5723$1Z2PAY)
              (condition-irritants . g$condition-irritants$5761$1Z2PAY)
              (assertion-violation? . g$assertion-violation?$5753$1Z2PAY)
              (native-endianness . g$native-endianness$5585$1Z2PAY)
              (bytevector-u64-set! . g$bytevector-u64-set!$5606$1Z2PAY)
              (bytevector-u64-ref . g$bytevector-u64-ref$5602$1Z2PAY)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$5608$1Z2PAY)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$5604$1Z2PAY)
              (bytevector-u32-set! . g$bytevector-u32-set!$5598$1Z2PAY)
              (bytevector-u32-ref . g$bytevector-u32-ref$5594$1Z2PAY)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$5600$1Z2PAY)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$5596$1Z2PAY)
              (bytevector-u16-set! . g$bytevector-u16-set!$5590$1Z2PAY)
              (bytevector-u16-ref . g$bytevector-u16-ref$5586$1Z2PAY)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$5592$1Z2PAY)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$5588$1Z2PAY)
              (bytevector-s64-set! . g$bytevector-s64-set!$5607$1Z2PAY)
              (bytevector-s64-ref . g$bytevector-s64-ref$5603$1Z2PAY)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$5609$1Z2PAY)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$5605$1Z2PAY)
              (bytevector-s32-set! . g$bytevector-s32-set!$5599$1Z2PAY)
              (bytevector-s32-ref . g$bytevector-s32-ref$5595$1Z2PAY)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$5601$1Z2PAY)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$5597$1Z2PAY)
              (bytevector-s16-set! . g$bytevector-s16-set!$5591$1Z2PAY)
              (bytevector-s16-ref . g$bytevector-s16-ref$5587$1Z2PAY)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$5593$1Z2PAY)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$5589$1Z2PAY)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$5612$1Z2PAY)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$5610$1Z2PAY)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$5613$1Z2PAY)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$5611$1Z2PAY)
              (no-nans-violation? . g$no-nans-violation?$6077$1Z2PAY)
              (no-infinities-violation?
                .
                g$no-infinities-violation?$6071$1Z2PAY)
              (make-no-nans-violation . g$make-no-nans-violation$6076$1Z2PAY)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$6070$1Z2PAY)
              (fxrotate-bit-field . g$fxrotate-bit-field$6053$1Z2PAY)
              (fxif . g$fxif$6047$1Z2PAY)
              (fxcopy-bit-field . g$fxcopy-bit-field$6050$1Z2PAY)
              (fxcopy-bit . g$fxcopy-bit$6048$1Z2PAY)
              (fxbit-field . g$fxbit-field$6049$1Z2PAY)
              (fxarithmetic-shift-right
                .
                g$fxarithmetic-shift-right$6052$1Z2PAY)
              (fxarithmetic-shift-left . g$fxarithmetic-shift-left$6051$1Z2PAY)
              (bitwise-rotate-bit-field
                .
                g$bitwise-rotate-bit-field$5999$1Z2PAY)
              (bitwise-if . g$bitwise-if$5993$1Z2PAY)
              (bitwise-copy-bit-field . g$bitwise-copy-bit-field$5996$1Z2PAY)
              (bitwise-copy-bit . g$bitwise-copy-bit$5994$1Z2PAY)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$5998$1Z2PAY)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$5997$1Z2PAY)
              (symbol=? . g$symbol=?$5210$1Z2PAY)
              (string>? . g$string>?$5207$1Z2PAY)
              (string>=? . g$string>=?$5209$1Z2PAY)
              (string=? . g$string=?$5205$1Z2PAY)
              (string<? . g$string<?$5206$1Z2PAY)
              (string<=? . g$string<=?$5208$1Z2PAY)
              (rationalize . g$rationalize$5217$1Z2PAY)
              (char>? . g$char>?$5214$1Z2PAY)
              (char>=? . g$char>=?$5216$1Z2PAY)
              (char=? . g$char=?$5212$1Z2PAY)
              (char<? . g$char<?$5213$1Z2PAY)
              (char<=? . g$char<=?$5215$1Z2PAY)
              (cddddr . g$cddddr$5204$1Z2PAY)
              (cdddar . g$cdddar$5203$1Z2PAY)
              (cddadr . g$cddadr$5202$1Z2PAY)
              (cddaar . g$cddaar$5201$1Z2PAY)
              (cdaddr . g$cdaddr$5200$1Z2PAY)
              (cdadar . g$cdadar$5199$1Z2PAY)
              (cdaadr . g$cdaadr$5198$1Z2PAY)
              (cdaaar . g$cdaaar$5197$1Z2PAY)
              (cadddr . g$cadddr$5196$1Z2PAY)
              (caddar . g$caddar$5195$1Z2PAY)
              (cadadr . g$cadadr$5194$1Z2PAY)
              (cadaar . g$cadaar$5193$1Z2PAY)
              (caaddr . g$caaddr$5192$1Z2PAY)
              (caadar . g$caadar$5191$1Z2PAY)
              (caaadr . g$caaadr$5190$1Z2PAY)
              (caaaar . g$caaaar$5189$1Z2PAY)
              (cdddr . g$cdddr$5188$1Z2PAY)
              (cddar . g$cddar$5187$1Z2PAY)
              (cdadr . g$cdadr$5186$1Z2PAY)
              (cdaar . g$cdaar$5185$1Z2PAY)
              (caddr . g$caddr$5184$1Z2PAY)
              (cadar . g$cadar$5183$1Z2PAY)
              (caadr . g$caadr$5182$1Z2PAY)
              (caaar . g$caaar$5181$1Z2PAY)
              (cddr . g$cddr$5180$1Z2PAY)
              (cdar . g$cdar$5179$1Z2PAY)
              (cadr . g$cadr$5178$1Z2PAY)
              (caar . g$caar$5177$1Z2PAY)
              (boolean=? . g$boolean=?$5211$1Z2PAY)
              (enum-set? . g$enum?$6401$1Z2PAY)
              (make-promise . g$make-promise$5833$1Z2PAY)
              (load/args . g$load/args$11221$1Z2PAY)
              (printf . g$printf$6456$1Z2PAY)
              (fprintf . g$fprintf$6457$1Z2PAY)
              (format . g$format$6458$1Z2PAY)
              (trace-printer . g$trace-printer$11218$1Z2PAY)
              (make-traced-macro . g$make-traced-macro$6462$1Z2PAY)
              (assertion-error . g$assertion-error$11166$1Z2PAY)
              (make-parameter . g$make-parameter$6562$1Z2PAY)
              (environment-bindings . g$environment-bindings$11145$1Z2PAY)
              (environment-symbols . g$environment-symbols$11148$1Z2PAY)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$11144$1Z2PAY)
              (library-path . g$library-path$7082$1Z2PAY)
              (expand . g$expand$11152$1Z2PAY)))))))
    (g$install-library$7098$1Z2PAY
      'g$12457$1Z2PAY
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$12394$1Z2PAY)
        (cosh . g$12393$1Z2PAY)
        (sinh . g$12392$1Z2PAY)
        (make-guid . g$12391$1Z2PAY)
        (unspecified? . g$12390$1Z2PAY)
        (make-trace . g$12389$1Z2PAY)
        (make-list . g$12388$1Z2PAY)
        (last-pair . g$12387$1Z2PAY)
        (load-r5rs . g$12386$1Z2PAY)
        (license . g$12385$1Z2PAY)
        (stacktrace . g$12384$1Z2PAY)
        (ironscheme-build . g$11808$1Z2PAY)
        (set-symbol-value! . g$12370$1Z2PAY)
        (symbol-value . g$12369$1Z2PAY)
        (ungensym . g$12368$1Z2PAY)
        (gensym . g$12367$1Z2PAY)
        (void . g$12366$1Z2PAY)
        (compile-system-libraries . g$11810$1Z2PAY)
        (compile->closure . g$11812$1Z2PAY)
        (compile . g$11811$1Z2PAY)
        (load . g$11807$1Z2PAY)
        (interaction-environment . g$8835$1Z2PAY)
        (string-upcase . g$12362$1Z2PAY)
        (string-titlecase . g$12361$1Z2PAY)
        (string-normalize-nfkd . g$12360$1Z2PAY)
        (string-normalize-nfkc . g$12359$1Z2PAY)
        (string-normalize-nfd . g$12358$1Z2PAY)
        (string-normalize-nfc . g$12357$1Z2PAY)
        (string-foldcase . g$12356$1Z2PAY)
        (string-downcase . g$12355$1Z2PAY)
        (string-ci>? . g$6928$1Z2PAY)
        (string-ci>=? . g$6930$1Z2PAY)
        (string-ci=? . g$6926$1Z2PAY)
        (string-ci<? . g$6927$1Z2PAY)
        (string-ci<=? . g$6929$1Z2PAY)
        (char-whitespace? . g$12354$1Z2PAY)
        (char-upper-case? . g$12353$1Z2PAY)
        (char-title-case? . g$12352$1Z2PAY)
        (char-numeric? . g$12351$1Z2PAY)
        (char-lower-case? . g$12350$1Z2PAY)
        (char-general-category . g$12349$1Z2PAY)
        (char-upcase . g$12348$1Z2PAY)
        (char-titlecase . g$12347$1Z2PAY)
        (char-foldcase . g$12346$1Z2PAY)
        (char-downcase . g$12345$1Z2PAY)
        (char-ci>? . g$6967$1Z2PAY)
        (char-ci>=? . g$6969$1Z2PAY)
        (char-ci=? . g$6965$1Z2PAY)
        (char-ci<? . g$6966$1Z2PAY)
        (char-ci<=? . g$6968$1Z2PAY)
        (char-alphabetic? . g$12344$1Z2PAY)
        (make-variable-transformer . g$8432$1Z2PAY)
        (identifier? . g$8830$1Z2PAY)
        (generate-temporaries . g$8819$1Z2PAY)
        (free-identifier=? . g$8820$1Z2PAY)
        (syntax->datum . g$8832$1Z2PAY)
        (datum->syntax . g$8831$1Z2PAY)
        (bound-identifier=? . g$8821$1Z2PAY)
        (record-type-descriptor? . g$12343$1Z2PAY)
        (record-predicate . g$12342$1Z2PAY)
        (record-mutator . g$12341$1Z2PAY)
        (record-constructor . g$12340$1Z2PAY)
        (record-accessor . g$12339$1Z2PAY)
        (make-record-type-descriptor . g$12338$1Z2PAY)
        (make-record-constructor-descriptor . g$12337$1Z2PAY)
        (record? . g$12336$1Z2PAY)
        (record-type-uid . g$12335$1Z2PAY)
        (record-type-sealed? . g$12334$1Z2PAY)
        (record-type-parent . g$12333$1Z2PAY)
        (record-type-opaque? . g$12332$1Z2PAY)
        (record-type-name . g$12331$1Z2PAY)
        (record-type-generative? . g$12330$1Z2PAY)
        (record-type-field-names . g$12329$1Z2PAY)
        (record-rtd . g$12328$1Z2PAY)
        (record-field-mutable? . g$12327$1Z2PAY)
        (delete-file . g$6503$1Z2PAY)
        (file-exists? . g$6502$1Z2PAY)
        (vector-sort! . g$12326$1Z2PAY)
        (vector-sort . g$12325$1Z2PAY)
        (list-sort . g$6866$1Z2PAY)
        (symbol-hash . g$12324$1Z2PAY)
        (string-ci-hash . g$12323$1Z2PAY)
        (string-hash . g$12322$1Z2PAY)
        (equal-hash . g$12321$1Z2PAY)
        (hashtable-equivalence-function . g$12320$1Z2PAY)
        (make-hashtable . g$12319$1Z2PAY)
        (hashtable-hash-function . g$12318$1Z2PAY)
        (make-eqv-hashtable . g$6470$1Z2PAY)
        (make-eq-hashtable . g$6469$1Z2PAY)
        (hashtable? . g$12317$1Z2PAY)
        (hashtable-update! . g$6476$1Z2PAY)
        (hashtable-size . g$6471$1Z2PAY)
        (hashtable-set! . g$6473$1Z2PAY)
        (hashtable-ref . g$6472$1Z2PAY)
        (hashtable-mutable? . g$12316$1Z2PAY)
        (hashtable-keys . g$12315$1Z2PAY)
        (hashtable-entries . g$12314$1Z2PAY)
        (hashtable-delete! . g$6474$1Z2PAY)
        (hashtable-copy . g$12313$1Z2PAY)
        (hashtable-contains? . g$6475$1Z2PAY)
        (hashtable-clear! . g$6477$1Z2PAY)
        (call-with-output-file . g$7359$1Z2PAY)
        (call-with-input-file . g$7358$1Z2PAY)
        (write-char . g$12312$1Z2PAY)
        (write . g$12311$1Z2PAY)
        (with-output-to-file . g$7357$1Z2PAY)
        (with-input-from-file . g$7356$1Z2PAY)
        (read-char . g$12310$1Z2PAY)
        (read . g$12309$1Z2PAY)
        (peek-char . g$12308$1Z2PAY)
        (open-output-file . g$12307$1Z2PAY)
        (open-input-file . g$12306$1Z2PAY)
        (newline . g$12305$1Z2PAY)
        (display . g$12304$1Z2PAY)
        (close-output-port . g$12303$1Z2PAY)
        (close-input-port . g$12302$1Z2PAY)
        (eof-object? . g$12301$1Z2PAY)
        (eof-object . g$12300$1Z2PAY)
        (current-error-port . g$12299$1Z2PAY)
        (current-output-port . g$12298$1Z2PAY)
        (current-input-port . g$12297$1Z2PAY)
        (output-port? . g$12296$1Z2PAY)
        (input-port? . g$12295$1Z2PAY)
        (utf-8-codec . g$12294$1Z2PAY)
        (utf-16-codec . g$12293$1Z2PAY)
        (transcoder-error-handling-mode . g$12292$1Z2PAY)
        (transcoder-eol-style . g$12291$1Z2PAY)
        (transcoder-codec . g$12290$1Z2PAY)
        (transcoded-port . g$12289$1Z2PAY)
        (textual-port? . g$12288$1Z2PAY)
        (string->bytevector . g$12287$1Z2PAY)
        (standard-output-port . g$12286$1Z2PAY)
        (standard-input-port . g$12285$1Z2PAY)
        (standard-error-port . g$12284$1Z2PAY)
        (set-port-position! . g$12283$1Z2PAY)
        (put-u8 . g$12282$1Z2PAY)
        (put-string . g$12281$1Z2PAY)
        (put-datum . g$12280$1Z2PAY)
        (put-char . g$12279$1Z2PAY)
        (put-bytevector . g$12278$1Z2PAY)
        (port? . g$7332$1Z2PAY)
        (port-transcoder . g$12277$1Z2PAY)
        (port-position . g$12276$1Z2PAY)
        (port-has-set-port-position!? . g$12275$1Z2PAY)
        (port-has-port-position? . g$12274$1Z2PAY)
        (port-eof? . g$12273$1Z2PAY)
        (output-port-buffer-mode . g$12272$1Z2PAY)
        (open-string-output-port . g$7331$1Z2PAY)
        (open-string-input-port . g$12271$1Z2PAY)
        (open-file-output-port . g$12270$1Z2PAY)
        (open-file-input/output-port . g$12269$1Z2PAY)
        (open-file-input-port . g$12268$1Z2PAY)
        (open-bytevector-output-port . g$12267$1Z2PAY)
        (open-bytevector-input-port . g$12266$1Z2PAY)
        (native-transcoder . g$12265$1Z2PAY)
        (native-eol-style . g$12264$1Z2PAY)
        (make-transcoder . g$12263$1Z2PAY)
        (latin-1-codec . g$12262$1Z2PAY)
        (make-i/o-write-error . g$7188$1Z2PAY)
        (make-i/o-read-error . g$7174$1Z2PAY)
        (make-i/o-port-error . g$7293$1Z2PAY)
        (make-i/o-invalid-position-error . g$7203$1Z2PAY)
        (make-i/o-filename-error . g$7220$1Z2PAY)
        (make-i/o-file-protection-error . g$7236$1Z2PAY)
        (make-i/o-file-is-read-only-error . g$7250$1Z2PAY)
        (make-i/o-file-does-not-exist-error . g$7278$1Z2PAY)
        (make-i/o-file-already-exists-error . g$7264$1Z2PAY)
        (make-i/o-error . g$7160$1Z2PAY)
        (make-i/o-encoding-error . g$7324$1Z2PAY)
        (make-i/o-decoding-error . g$7309$1Z2PAY)
        (make-custom-textual-output-port . g$12261$1Z2PAY)
        (make-custom-textual-input/output-port . g$12260$1Z2PAY)
        (make-custom-textual-input-port . g$12259$1Z2PAY)
        (make-custom-binary-output-port . g$12258$1Z2PAY)
        (make-custom-binary-input/output-port . g$12257$1Z2PAY)
        (make-custom-binary-input-port . g$12256$1Z2PAY)
        (make-bytevector . g$12255$1Z2PAY)
        (lookahead-u8 . g$12254$1Z2PAY)
        (lookahead-char . g$12253$1Z2PAY)
        (i/o-write-error? . g$7189$1Z2PAY)
        (i/o-read-error? . g$7175$1Z2PAY)
        (i/o-port-error? . g$7295$1Z2PAY)
        (i/o-invalid-position-error? . g$7205$1Z2PAY)
        (i/o-error-position . g$7206$1Z2PAY)
        (i/o-filename-error? . g$7222$1Z2PAY)
        (i/o-file-protection-error? . g$7237$1Z2PAY)
        (i/o-file-is-read-only-error? . g$7251$1Z2PAY)
        (i/o-file-does-not-exist-error? . g$7279$1Z2PAY)
        (i/o-file-already-exists-error? . g$7265$1Z2PAY)
        (i/o-error? . g$7161$1Z2PAY)
        (i/o-error-port . g$7296$1Z2PAY)
        (i/o-error-filename . g$7223$1Z2PAY)
        (i/o-encoding-error? . g$7326$1Z2PAY)
        (i/o-encoding-error-char . g$7327$1Z2PAY)
        (i/o-decoding-error? . g$7310$1Z2PAY)
        (get-u8 . g$12252$1Z2PAY)
        (get-string-n! . g$12251$1Z2PAY)
        (get-string-n . g$12250$1Z2PAY)
        (get-string-all . g$12249$1Z2PAY)
        (get-line . g$12248$1Z2PAY)
        (get-datum . g$12247$1Z2PAY)
        (get-char . g$12246$1Z2PAY)
        (get-bytevector-some . g$12245$1Z2PAY)
        (get-bytevector-n! . g$12244$1Z2PAY)
        (get-bytevector-n . g$12243$1Z2PAY)
        (get-bytevector-all . g$12242$1Z2PAY)
        (flush-output-port . g$12241$1Z2PAY)
        (close-port . g$12240$1Z2PAY)
        (call-with-string-output-port . g$7333$1Z2PAY)
        (call-with-port . g$12239$1Z2PAY)
        (call-with-bytevector-output-port . g$12238$1Z2PAY)
        (bytevector->string . g$12237$1Z2PAY)
        (buffer-mode? . g$12236$1Z2PAY)
        (binary-port? . g$12235$1Z2PAY)
        (scheme-report-environment . g$8810$1Z2PAY)
        (quotient . g$6846$1Z2PAY)
        (null-environment . g$8809$1Z2PAY)
        (remainder . g$6847$1Z2PAY)
        (modulo . g$6848$1Z2PAY)
        (inexact->exact . g$12234$1Z2PAY)
        (force . g$6850$1Z2PAY)
        (exact->inexact . g$12233$1Z2PAY)
        (exit . g$12232$1Z2PAY)
        (command-line . g$11804$1Z2PAY)
        (string-fill! . g$12231$1Z2PAY)
        (string-set! . g$12230$1Z2PAY)
        (set-cdr! . g$12229$1Z2PAY)
        (set-car! . g$12228$1Z2PAY)
        (remove . g$5858$1Z2PAY)
        (remv . g$5859$1Z2PAY)
        (remp . g$5841$1Z2PAY)
        (remq . g$5860$1Z2PAY)
        (partition . g$5840$1Z2PAY)
        (memv . g$5848$1Z2PAY)
        (memq . g$5847$1Z2PAY)
        (memp . g$5850$1Z2PAY)
        (member . g$5849$1Z2PAY)
        (exists . g$5854$1Z2PAY)
        (for-all . g$5853$1Z2PAY)
        (fold-right . g$5857$1Z2PAY)
        (fold-left . g$5856$1Z2PAY)
        (find . g$5839$1Z2PAY)
        (filter . g$5842$1Z2PAY)
        (cons* . g$5855$1Z2PAY)
        (assv . g$5844$1Z2PAY)
        (assq . g$5843$1Z2PAY)
        (assp . g$5846$1Z2PAY)
        (assoc . g$5845$1Z2PAY)
        (with-exception-handler . g$12227$1Z2PAY)
        (raise-continuable . g$12226$1Z2PAY)
        (raise . g$12225$1Z2PAY)
        (eval . g$8812$1Z2PAY)
        (environment . g$8808$1Z2PAY)
        (make-enumeration . g$7417$1Z2PAY)
        (enum-set=? . g$7424$1Z2PAY)
        (enum-set-universe . g$7418$1Z2PAY)
        (enum-set-union . g$7425$1Z2PAY)
        (enum-set-subset? . g$7423$1Z2PAY)
        (enum-set-projection . g$7429$1Z2PAY)
        (enum-set-member? . g$7422$1Z2PAY)
        (enum-set-intersection . g$7426$1Z2PAY)
        (enum-set-indexer . g$7419$1Z2PAY)
        (enum-set-difference . g$7427$1Z2PAY)
        (enum-set-constructor . g$7420$1Z2PAY)
        (enum-set-complement . g$7428$1Z2PAY)
        (enum-set->list . g$7421$1Z2PAY)
        (who-condition? . g$6757$1Z2PAY)
        (warning? . g$6668$1Z2PAY)
        (violation? . g$6710$1Z2PAY)
        (undefined-violation? . g$6834$1Z2PAY)
        (syntax-violation? . g$6818$1Z2PAY)
        (syntax-violation-subform . g$6820$1Z2PAY)
        (syntax-violation-form . g$6819$1Z2PAY)
        (syntax-violation . g$8829$1Z2PAY)
        (simple-conditions . g$12224$1Z2PAY)
        (serious-condition? . g$6682$1Z2PAY)
        (non-continuable-violation? . g$6772$1Z2PAY)
        (message-condition? . g$6653$1Z2PAY)
        (make-who-condition . g$6755$1Z2PAY)
        (make-warning . g$6667$1Z2PAY)
        (make-violation . g$6709$1Z2PAY)
        (make-undefined-violation . g$6833$1Z2PAY)
        (make-syntax-violation . g$6815$1Z2PAY)
        (make-serious-condition . g$6681$1Z2PAY)
        (make-non-continuable-violation . g$6771$1Z2PAY)
        (make-message-condition . g$6651$1Z2PAY)
        (make-lexical-violation . g$6799$1Z2PAY)
        (make-irritants-condition . g$6738$1Z2PAY)
        (make-implementation-restriction-violation . g$6785$1Z2PAY)
        (make-error . g$6695$1Z2PAY)
        (make-assertion-violation . g$6723$1Z2PAY)
        (lexical-violation? . g$6800$1Z2PAY)
        (irritants-condition? . g$6740$1Z2PAY)
        (implementation-restriction-violation? . g$6786$1Z2PAY)
        (error? . g$6696$1Z2PAY)
        (condition-who . g$6758$1Z2PAY)
        (condition-predicate . g$12223$1Z2PAY)
        (condition-message . g$6654$1Z2PAY)
        (condition-irritants . g$6741$1Z2PAY)
        (condition-accessor . g$12222$1Z2PAY)
        (condition . g$12221$1Z2PAY)
        (assertion-violation? . g$6724$1Z2PAY)
        (condition? . g$12220$1Z2PAY)
        (utf32->string . g$12219$1Z2PAY)
        (utf16->string . g$12218$1Z2PAY)
        (utf8->string . g$12217$1Z2PAY)
        (uint-list->bytevector . g$12216$1Z2PAY)
        (u8-list->bytevector . g$12215$1Z2PAY)
        (string->utf8 . g$12214$1Z2PAY)
        (string->utf32 . g$12213$1Z2PAY)
        (string->utf16 . g$12212$1Z2PAY)
        (sint-list->bytevector . g$12211$1Z2PAY)
        (native-endianness . g$6509$1Z2PAY)
        (bytevector? . g$12210$1Z2PAY)
        (bytevector=? . g$12209$1Z2PAY)
        (bytevector-uint-set! . g$12208$1Z2PAY)
        (bytevector-uint-ref . g$12207$1Z2PAY)
        (bytevector-u8-set! . g$12206$1Z2PAY)
        (bytevector-u8-ref . g$12205$1Z2PAY)
        (bytevector-u64-set! . g$6530$1Z2PAY)
        (bytevector-u64-ref . g$6526$1Z2PAY)
        (bytevector-u64-native-set! . g$6532$1Z2PAY)
        (bytevector-u64-native-ref . g$6528$1Z2PAY)
        (bytevector-u32-set! . g$6522$1Z2PAY)
        (bytevector-u32-ref . g$6518$1Z2PAY)
        (bytevector-u32-native-set! . g$6524$1Z2PAY)
        (bytevector-u32-native-ref . g$6520$1Z2PAY)
        (bytevector-u16-set! . g$6514$1Z2PAY)
        (bytevector-u16-ref . g$6510$1Z2PAY)
        (bytevector-u16-native-set! . g$6516$1Z2PAY)
        (bytevector-u16-native-ref . g$6512$1Z2PAY)
        (bytevector-sint-set! . g$12204$1Z2PAY)
        (bytevector-sint-ref . g$12203$1Z2PAY)
        (bytevector-s8-set! . g$12202$1Z2PAY)
        (bytevector-s8-ref . g$12201$1Z2PAY)
        (bytevector-s64-set! . g$6531$1Z2PAY)
        (bytevector-s64-ref . g$6527$1Z2PAY)
        (bytevector-s64-native-set! . g$6533$1Z2PAY)
        (bytevector-s64-native-ref . g$6529$1Z2PAY)
        (bytevector-s32-set! . g$6523$1Z2PAY)
        (bytevector-s32-ref . g$6519$1Z2PAY)
        (bytevector-s32-native-set! . g$6525$1Z2PAY)
        (bytevector-s32-native-ref . g$6521$1Z2PAY)
        (bytevector-s16-set! . g$6515$1Z2PAY)
        (bytevector-s16-ref . g$6511$1Z2PAY)
        (bytevector-s16-native-set! . g$6517$1Z2PAY)
        (bytevector-s16-native-ref . g$6513$1Z2PAY)
        (bytevector-length . g$12200$1Z2PAY)
        (bytevector-ieee-single-set! . g$12199$1Z2PAY)
        (bytevector-ieee-single-ref . g$12198$1Z2PAY)
        (bytevector-ieee-single-native-set! . g$6536$1Z2PAY)
        (bytevector-ieee-single-native-ref . g$6534$1Z2PAY)
        (bytevector-ieee-double-set! . g$12197$1Z2PAY)
        (bytevector-ieee-double-ref . g$12196$1Z2PAY)
        (bytevector-ieee-double-native-set! . g$6537$1Z2PAY)
        (bytevector-ieee-double-native-ref . g$6535$1Z2PAY)
        (bytevector-fill! . g$12195$1Z2PAY)
        (bytevector-copy! . g$12194$1Z2PAY)
        (bytevector-copy . g$12193$1Z2PAY)
        (bytevector->uint-list . g$12192$1Z2PAY)
        (bytevector->u8-list . g$12191$1Z2PAY)
        (bytevector->sint-list . g$12190$1Z2PAY)
        (no-nans-violation? . g$7146$1Z2PAY)
        (no-infinities-violation? . g$7132$1Z2PAY)
        (make-no-nans-violation . g$7145$1Z2PAY)
        (make-no-infinities-violation . g$7131$1Z2PAY)
        (real->flonum . g$12189$1Z2PAY)
        (flzero? . g$12188$1Z2PAY)
        (fltruncate . g$12187$1Z2PAY)
        (fltan . g$12186$1Z2PAY)
        (flsqrt . g$12185$1Z2PAY)
        (flsin . g$12184$1Z2PAY)
        (flround . g$12183$1Z2PAY)
        (flpositive? . g$12182$1Z2PAY)
        (flonum? . g$12181$1Z2PAY)
        (flodd? . g$12180$1Z2PAY)
        (flnumerator . g$12179$1Z2PAY)
        (flnegative? . g$12178$1Z2PAY)
        (flnan? . g$12177$1Z2PAY)
        (flmod0 . g$12176$1Z2PAY)
        (flmod . g$12175$1Z2PAY)
        (flmin . g$12174$1Z2PAY)
        (flmax . g$12173$1Z2PAY)
        (fllog . g$12172$1Z2PAY)
        (flinteger? . g$12171$1Z2PAY)
        (flinfinite? . g$12170$1Z2PAY)
        (flfloor . g$12169$1Z2PAY)
        (flfinite? . g$12168$1Z2PAY)
        (flexpt . g$12167$1Z2PAY)
        (flexp . g$12166$1Z2PAY)
        (fleven? . g$12165$1Z2PAY)
        (fldiv0-and-mod0 . g$12164$1Z2PAY)
        (fldiv0 . g$12163$1Z2PAY)
        (fldiv-and-mod . g$12162$1Z2PAY)
        (fldiv . g$12161$1Z2PAY)
        (fldenominator . g$12160$1Z2PAY)
        (flcos . g$12159$1Z2PAY)
        (flceiling . g$12158$1Z2PAY)
        (flatan . g$12157$1Z2PAY)
        (flasin . g$12156$1Z2PAY)
        (flacos . g$12155$1Z2PAY)
        (flabs . g$12154$1Z2PAY)
        (fl>? . g$12153$1Z2PAY)
        (fl>=? . g$12152$1Z2PAY)
        (fl=? . g$12151$1Z2PAY)
        (fl<? . g$12150$1Z2PAY)
        (fl<=? . g$12149$1Z2PAY)
        (fl/ . g$12148$1Z2PAY)
        (fl- . g$12147$1Z2PAY)
        (fl+ . g$12146$1Z2PAY)
        (fl* . g$12145$1Z2PAY)
        (fixnum->flonum . g$12144$1Z2PAY)
        (fxzero? . g$12143$1Z2PAY)
        (fxxor . g$12142$1Z2PAY)
        (fxrotate-bit-field . g$7077$1Z2PAY)
        (fxreverse-bit-field . g$12141$1Z2PAY)
        (fxpositive? . g$12140$1Z2PAY)
        (fxodd? . g$12139$1Z2PAY)
        (fxnot . g$12138$1Z2PAY)
        (fxnegative? . g$12137$1Z2PAY)
        (fxmod0 . g$12136$1Z2PAY)
        (fxmod . g$12135$1Z2PAY)
        (fxmin . g$12134$1Z2PAY)
        (fxmax . g$12133$1Z2PAY)
        (fxlength . g$12132$1Z2PAY)
        (fxior . g$12131$1Z2PAY)
        (fxif . g$7071$1Z2PAY)
        (fxfirst-bit-set . g$12130$1Z2PAY)
        (fxeven? . g$12129$1Z2PAY)
        (fxdiv0-and-mod0 . g$12128$1Z2PAY)
        (fxdiv0 . g$12127$1Z2PAY)
        (fxdiv-and-mod . g$12126$1Z2PAY)
        (fxdiv . g$12125$1Z2PAY)
        (fxcopy-bit-field . g$7074$1Z2PAY)
        (fxcopy-bit . g$7072$1Z2PAY)
        (fxbit-set? . g$12124$1Z2PAY)
        (fxbit-field . g$7073$1Z2PAY)
        (fxbit-count . g$12123$1Z2PAY)
        (fxarithmetic-shift-right . g$7076$1Z2PAY)
        (fxarithmetic-shift-left . g$7075$1Z2PAY)
        (fxarithmetic-shift . g$12122$1Z2PAY)
        (fxand . g$12121$1Z2PAY)
        (fx>? . g$12120$1Z2PAY)
        (fx>=? . g$12119$1Z2PAY)
        (fx=? . g$12118$1Z2PAY)
        (fx<? . g$12117$1Z2PAY)
        (fx<=? . g$12116$1Z2PAY)
        (fx-/carry . g$12115$1Z2PAY)
        (fx- . g$12114$1Z2PAY)
        (fx+/carry . g$12113$1Z2PAY)
        (fx+ . g$12112$1Z2PAY)
        (fx*/carry . g$12111$1Z2PAY)
        (fx* . g$12110$1Z2PAY)
        (greatest-fixnum . g$12109$1Z2PAY)
        (least-fixnum . g$12108$1Z2PAY)
        (fixnum-width . g$12107$1Z2PAY)
        (fixnum? . g$12106$1Z2PAY)
        (bitwise-rotate-bit-field . g$7029$1Z2PAY)
        (bitwise-reverse-bit-field . g$12105$1Z2PAY)
        (bitwise-length . g$12104$1Z2PAY)
        (bitwise-if . g$7023$1Z2PAY)
        (bitwise-first-bit-set . g$12103$1Z2PAY)
        (bitwise-copy-bit-field . g$7026$1Z2PAY)
        (bitwise-copy-bit . g$7024$1Z2PAY)
        (bitwise-bit-set? . g$12102$1Z2PAY)
        (bitwise-bit-field . g$12101$1Z2PAY)
        (bitwise-bit-count . g$12100$1Z2PAY)
        (bitwise-xor . g$12099$1Z2PAY)
        (bitwise-ior . g$12098$1Z2PAY)
        (bitwise-and . g$12097$1Z2PAY)
        (bitwise-not . g$12096$1Z2PAY)
        (bitwise-arithmetic-shift-right . g$7028$1Z2PAY)
        (bitwise-arithmetic-shift-left . g$7027$1Z2PAY)
        (bitwise-arithmetic-shift . g$12095$1Z2PAY)
        (zero? . g$12094$1Z2PAY)
        (vector? . g$12093$1Z2PAY)
        (vector-set! . g$12092$1Z2PAY)
        (vector-ref . g$12091$1Z2PAY)
        (vector-map . g$12090$1Z2PAY)
        (vector-length . g$12089$1Z2PAY)
        (vector-for-each . g$12088$1Z2PAY)
        (vector-fill! . g$12087$1Z2PAY)
        (vector->list . g$12086$1Z2PAY)
        (vector . g$12085$1Z2PAY)
        (values . g$12084$1Z2PAY)
        (truncate . g$12083$1Z2PAY)
        (tan . g$12082$1Z2PAY)
        (symbol? . g$12081$1Z2PAY)
        (symbol=? . g$6018$1Z2PAY)
        (symbol->string . g$12080$1Z2PAY)
        (substring . g$12079$1Z2PAY)
        (string? . g$12078$1Z2PAY)
        (string>? . g$6015$1Z2PAY)
        (string>=? . g$6017$1Z2PAY)
        (string=? . g$6013$1Z2PAY)
        (string<? . g$6014$1Z2PAY)
        (string<=? . g$6016$1Z2PAY)
        (string-ref . g$12077$1Z2PAY)
        (string-length . g$12076$1Z2PAY)
        (string-for-each . g$12075$1Z2PAY)
        (string-copy . g$12074$1Z2PAY)
        (string-append . g$12073$1Z2PAY)
        (string->symbol . g$12072$1Z2PAY)
        (string->number . g$12071$1Z2PAY)
        (string->list . g$12070$1Z2PAY)
        (string . g$12069$1Z2PAY)
        (sqrt . g$12068$1Z2PAY)
        (sin . g$12067$1Z2PAY)
        (round . g$12066$1Z2PAY)
        (reverse . g$12065$1Z2PAY)
        (real? . g$12064$1Z2PAY)
        (real-valued? . g$12063$1Z2PAY)
        (real-part . g$12062$1Z2PAY)
        (rationalize . g$6059$1Z2PAY)
        (rational? . g$12061$1Z2PAY)
        (rational-valued? . g$12060$1Z2PAY)
        (procedure? . g$12059$1Z2PAY)
        (positive? . g$12058$1Z2PAY)
        (pair? . g$12057$1Z2PAY)
        (odd? . g$12056$1Z2PAY)
        (numerator . g$12055$1Z2PAY)
        (number? . g$12054$1Z2PAY)
        (number->string . g$12053$1Z2PAY)
        (null? . g$12052$1Z2PAY)
        (not . g$12051$1Z2PAY)
        (negative? . g$12050$1Z2PAY)
        (nan? . g$12049$1Z2PAY)
        (min . g$12048$1Z2PAY)
        (max . g$12047$1Z2PAY)
        (map . g$12046$1Z2PAY)
        (make-vector . g$12045$1Z2PAY)
        (make-string . g$12044$1Z2PAY)
        (make-rectangular . g$12043$1Z2PAY)
        (make-polar . g$12042$1Z2PAY)
        (magnitude . g$12041$1Z2PAY)
        (log . g$12040$1Z2PAY)
        (list? . g$12039$1Z2PAY)
        (list-tail . g$12038$1Z2PAY)
        (list-ref . g$12037$1Z2PAY)
        (list->vector . g$12036$1Z2PAY)
        (list->string . g$12035$1Z2PAY)
        (list . g$12034$1Z2PAY)
        (length . g$12033$1Z2PAY)
        (lcm . g$12032$1Z2PAY)
        (integer? . g$12031$1Z2PAY)
        (integer-valued? . g$12030$1Z2PAY)
        (integer->char . g$12029$1Z2PAY)
        (infinite? . g$12028$1Z2PAY)
        (inexact? . g$12027$1Z2PAY)
        (inexact . g$12026$1Z2PAY)
        (imag-part . g$12025$1Z2PAY)
        (gcd . g$12024$1Z2PAY)
        (for-each . g$12023$1Z2PAY)
        (floor . g$12022$1Z2PAY)
        (finite? . g$12021$1Z2PAY)
        (expt . g$12020$1Z2PAY)
        (exp . g$12019$1Z2PAY)
        (exact? . g$12018$1Z2PAY)
        (exact-integer-sqrt . g$12017$1Z2PAY)
        (exact . g$12016$1Z2PAY)
        (even? . g$12015$1Z2PAY)
        (error . g$12014$1Z2PAY)
        (eqv? . g$12013$1Z2PAY)
        (equal? . g$12012$1Z2PAY)
        (eq? . g$12011$1Z2PAY)
        (dynamic-wind . g$12010$1Z2PAY)
        (div0-and-mod0 . g$12009$1Z2PAY)
        (mod0 . g$12008$1Z2PAY)
        (div0 . g$12007$1Z2PAY)
        (div-and-mod . g$12006$1Z2PAY)
        (mod . g$12005$1Z2PAY)
        (div . g$12004$1Z2PAY)
        (denominator . g$12003$1Z2PAY)
        (cos . g$12002$1Z2PAY)
        (cons . g$12001$1Z2PAY)
        (complex? . g$12000$1Z2PAY)
        (char? . g$11999$1Z2PAY)
        (char>? . g$6056$1Z2PAY)
        (char>=? . g$6058$1Z2PAY)
        (char=? . g$6054$1Z2PAY)
        (char<? . g$6055$1Z2PAY)
        (char<=? . g$6057$1Z2PAY)
        (char->integer . g$11998$1Z2PAY)
        (ceiling . g$11997$1Z2PAY)
        (call-with-values . g$11996$1Z2PAY)
        (call/cc . g$11995$1Z2PAY)
        (call-with-current-continuation . g$11994$1Z2PAY)
        (cddddr . g$5978$1Z2PAY)
        (cdddar . g$5977$1Z2PAY)
        (cddadr . g$5976$1Z2PAY)
        (cddaar . g$5975$1Z2PAY)
        (cdaddr . g$5974$1Z2PAY)
        (cdadar . g$5973$1Z2PAY)
        (cdaadr . g$5972$1Z2PAY)
        (cdaaar . g$5971$1Z2PAY)
        (cadddr . g$5970$1Z2PAY)
        (caddar . g$5969$1Z2PAY)
        (cadadr . g$5968$1Z2PAY)
        (cadaar . g$5967$1Z2PAY)
        (caaddr . g$5966$1Z2PAY)
        (caadar . g$5965$1Z2PAY)
        (caaadr . g$5964$1Z2PAY)
        (caaaar . g$5963$1Z2PAY)
        (cdddr . g$5962$1Z2PAY)
        (cddar . g$5961$1Z2PAY)
        (cdadr . g$5960$1Z2PAY)
        (cdaar . g$5959$1Z2PAY)
        (caddr . g$5958$1Z2PAY)
        (cadar . g$5957$1Z2PAY)
        (caadr . g$5956$1Z2PAY)
        (caaar . g$5955$1Z2PAY)
        (cddr . g$5954$1Z2PAY)
        (cdar . g$5953$1Z2PAY)
        (cadr . g$5952$1Z2PAY)
        (caar . g$5951$1Z2PAY)
        (cdr . g$11993$1Z2PAY)
        (car . g$11992$1Z2PAY)
        (boolean? . g$11991$1Z2PAY)
        (boolean=? . g$6019$1Z2PAY)
        (atan . g$11990$1Z2PAY)
        (assertion-violation . g$11989$1Z2PAY)
        (asin . g$11988$1Z2PAY)
        (apply . g$11987$1Z2PAY)
        (append . g$11986$1Z2PAY)
        (angle . g$11985$1Z2PAY)
        (acos . g$11984$1Z2PAY)
        (abs . g$11983$1Z2PAY)
        (/ . g$11982$1Z2PAY)
        (* . g$11981$1Z2PAY)
        (- . g$11980$1Z2PAY)
        (+ . g$11979$1Z2PAY)
        (>= . g$11978$1Z2PAY)
        (> . g$11977$1Z2PAY)
        (= . g$11976$1Z2PAY)
        (<= . g$11975$1Z2PAY)
        (< . g$11974$1Z2PAY)
        (deserialize-port . g$11970$1Z2PAY)
        (serialize-port . g$11969$1Z2PAY)
        (enum-set? . g$7392$1Z2PAY)
        (load/args . g$11806$1Z2PAY)
        (printf . g$7502$1Z2PAY)
        (fprintf . g$7503$1Z2PAY)
        (format . g$7504$1Z2PAY)
        (procedure-form . g$11968$1Z2PAY)
        (procedure-environment . g$11967$1Z2PAY)
        (procedure-name . g$11966$1Z2PAY)
        (procedure-arity . g$11965$1Z2PAY)
        (gc-collect . g$11964$1Z2PAY)
        (clr-type? . g$11963$1Z2PAY)
        (get-clr-type . g$11962$1Z2PAY)
        (vector-append . g$11960$1Z2PAY)
        (vector-filter . g$11959$1Z2PAY)
        (vector-reverse! . g$11958$1Z2PAY)
        (vector-contains? . g$11957$1Z2PAY)
        (vector-index-of . g$11956$1Z2PAY)
        (vector-copy . g$11955$1Z2PAY)
        (vector-binary-search . g$11954$1Z2PAY)
        (string-ci-compare . g$11953$1Z2PAY)
        (string-compare . g$11952$1Z2PAY)
        (string-format . g$11951$1Z2PAY)
        (trace-printer . g$11803$1Z2PAY)
        (pmap . g$11949$1Z2PAY)
        (time-it . g$11948$1Z2PAY)
        (make-parameter . g$7531$1Z2PAY)
        (environment-bindings . g$8804$1Z2PAY)
        (environment-symbols . g$8807$1Z2PAY)
        (interaction-environment-symbols . g$8803$1Z2PAY)
        (optimization-level . g$11945$1Z2PAY)
        (library-path . g$7986$1Z2PAY)
        (expand . g$8811$1Z2PAY)
        (&no-nans . g$11944$1Z2PAY)
        (&no-infinities . g$11943$1Z2PAY)
        (&i/o-encoding . g$11942$1Z2PAY)
        (&i/o-decoding . g$11941$1Z2PAY)
        (&i/o-port . g$11940$1Z2PAY)
        (&i/o-file-does-not-exist . g$11939$1Z2PAY)
        (&i/o-file-already-exists . g$11938$1Z2PAY)
        (&i/o-file-is-read-only . g$11937$1Z2PAY)
        (&i/o-file-protection . g$11936$1Z2PAY)
        (&i/o-filename . g$11935$1Z2PAY)
        (&i/o-invalid-position . g$11934$1Z2PAY)
        (&i/o-write . g$11933$1Z2PAY)
        (&i/o-read . g$11932$1Z2PAY)
        (&i/o . g$11931$1Z2PAY)
        (&non-continuable . g$11930$1Z2PAY)
        (&undefined . g$11929$1Z2PAY)
        (&syntax . g$11928$1Z2PAY)
        (&lexical . g$11927$1Z2PAY)
        (&implementation-restriction . g$11926$1Z2PAY)
        (&who . g$11925$1Z2PAY)
        (&irritants . g$11924$1Z2PAY)
        (&assertion . g$11923$1Z2PAY)
        (&violation . g$11922$1Z2PAY)
        (&error . g$11921$1Z2PAY)
        (&serious . g$11920$1Z2PAY)
        (&warning . g$11919$1Z2PAY)
        (&message . g$11918$1Z2PAY)
        (&condition . g$11917$1Z2PAY)
        (define-condition-type . g$11916$1Z2PAY)
        (define-enumeration . g$11915$1Z2PAY)
        (define-record-type . g$11914$1Z2PAY)
        (parent-rtd . g$11913$1Z2PAY)
        (nongenerative . g$11912$1Z2PAY)
        (opaque . g$11911$1Z2PAY)
        (sealed . g$11910$1Z2PAY)
        (protocol . g$11909$1Z2PAY)
        (parent . g$11908$1Z2PAY)
        (immutable . g$11907$1Z2PAY)
        (mutable . g$11906$1Z2PAY)
        (fields . g$11905$1Z2PAY)
        (error-handling-mode . g$11904$1Z2PAY)
        (file-options . g$11903$1Z2PAY)
        (buffer-mode . g$11902$1Z2PAY)
        (eol-style . g$11901$1Z2PAY)
        (guard . g$11900$1Z2PAY)
        (trace-letrec-syntax . g$11899$1Z2PAY)
        (trace-let-syntax . g$11898$1Z2PAY)
        (trace-define-syntax . g$11897$1Z2PAY)
        (trace-define . g$11896$1Z2PAY)
        (trace-lambda . g$11895$1Z2PAY)
        (unsyntax-splicing . g$11894$1Z2PAY)
        (unsyntax . g$11893$1Z2PAY)
        (unquote-splicing . g$11892$1Z2PAY)
        (unquote . g$11891$1Z2PAY)
        (_ . g$11890$1Z2PAY)
        (else . g$11889$1Z2PAY)
        (=> . g$11888$1Z2PAY)
        (... . g$11887$1Z2PAY)
        (assert . g$11886$1Z2PAY)
        (endianness . g$11885$1Z2PAY)
        (delay . g$11884$1Z2PAY)
        (time . g$11883$1Z2PAY)
        (or . g$11882$1Z2PAY)
        (and . g$11881$1Z2PAY)
        (do . g$11880$1Z2PAY)
        (cond . g$11879$1Z2PAY)
        (let* . g$11878$1Z2PAY)
        (let . g$11877$1Z2PAY)
        (identifier-syntax . g$11876$1Z2PAY)
        (with-syntax . g$11875$1Z2PAY)
        (quasisyntax . g$11874$1Z2PAY)
        (quasiquote . g$11873$1Z2PAY)
        (syntax-rules . g$11872$1Z2PAY)
        (include-into . g$11871$1Z2PAY)
        (include . g$11870$1Z2PAY)
        (let-values . g$11868$1Z2PAY)
        (let*-values . g$11867$1Z2PAY)
        (record-constructor-descriptor . g$11866$1Z2PAY)
        (record-type-descriptor . g$11865$1Z2PAY)
        (fluid-let-syntax . g$11864$1Z2PAY)
        (case . g$11863$1Z2PAY)
        (parameterize . g$11862$1Z2PAY)
        (unless . g$11861$1Z2PAY)
        (when . g$11860$1Z2PAY)
        (if . g$11859$1Z2PAY)
        (letrec* . g$11858$1Z2PAY)
        (letrec . g$11857$1Z2PAY)
        (case-lambda . g$11855$1Z2PAY)
        (lambda . g$11854$1Z2PAY)
        (syntax . g$11853$1Z2PAY)
        (syntax-case . g$11852$1Z2PAY)
        (quote . g$11851$1Z2PAY)
        (letrec-syntax . g$11849$1Z2PAY)
        (let-syntax . g$11848$1Z2PAY)
        (set! . g$11847$1Z2PAY)
        (export . g$11846$1Z2PAY)
        (import . g$11845$1Z2PAY)
        (library . g$11844$1Z2PAY)
        (begin . g$11843$1Z2PAY)
        (module . g$11842$1Z2PAY)
        (define-syntax . g$11841$1Z2PAY)
        (define . g$11840$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12458$1Z2PAY
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$11946$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12459$1Z2PAY
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$12399$1Z2PAY)
        (annotation-source . g$12398$1Z2PAY)
        (annotation-expression . g$12397$1Z2PAY)
        (annotation? . g$12396$1Z2PAY)
        (read-annotated . g$12395$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12460$1Z2PAY
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$12365$1Z2PAY)
        (serialize-library . g$12364$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12461$1Z2PAY
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((variable-transformer-procedure . g$8434$1Z2PAY)
        (variable-transformer? . g$8433$1Z2PAY)
        (eqv-hash . g$11972$1Z2PAY)
        (reverse! . g$11971$1Z2PAY)
        (make-promise . g$6849$1Z2PAY)
        (format . g$7504$1Z2PAY)
        (get-command-line . g$11961$1Z2PAY)
        (make-traced-procedure . g$11950$1Z2PAY)
        (make-traced-macro . g$7524$1Z2PAY)
        (assertion-error . g$8825$1Z2PAY)
        (library-locator . g$11947$1Z2PAY)
        (get-library-paths . g$11946$1Z2PAY)
        (library-path . g$7986$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12462$1Z2PAY
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$11973$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12463$1Z2PAY
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$12383$1Z2PAY)
        (clr-field-set!-internal . g$12382$1Z2PAY)
        (clr-field-get-internal . g$12381$1Z2PAY)
        (clr-cast-internal . g$12380$1Z2PAY)
        (clr-call-internal . g$12379$1Z2PAY)
        (clr-new-internal . g$12378$1Z2PAY)
        (clr-new-array-internal . g$12377$1Z2PAY)
        (clr-is-internal . g$12376$1Z2PAY)
        (clr-reference-internal . g$12375$1Z2PAY)
        (clr-using-internal . g$12374$1Z2PAY)
        (clr-clear-usings-internal . g$12373$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12464$1Z2PAY
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$11892$1Z2PAY)
        (unquote . g$11891$1Z2PAY)
        (else . g$11889$1Z2PAY)
        (=> . g$11888$1Z2PAY)
        (delay . g$11884$1Z2PAY)
        (or . g$11882$1Z2PAY)
        (and . g$11881$1Z2PAY)
        (do . g$11880$1Z2PAY)
        (cond . g$11879$1Z2PAY)
        (let* . g$11878$1Z2PAY)
        (let . g$11877$1Z2PAY)
        (quasiquote . g$11873$1Z2PAY)
        (syntax-rules . g$11872$1Z2PAY)
        (case . g$11863$1Z2PAY)
        (if . g$11859$1Z2PAY)
        (letrec . g$11857$1Z2PAY)
        (lambda . g$11854$1Z2PAY)
        (quote . g$11851$1Z2PAY)
        (letrec-syntax . g$11849$1Z2PAY)
        (let-syntax . g$11848$1Z2PAY)
        (set! . g$11847$1Z2PAY)
        (begin . g$11843$1Z2PAY)
        (define-syntax . g$11841$1Z2PAY)
        (define . g$11840$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12465$1Z2PAY
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((interaction-environment . g$8835$1Z2PAY)
        (char-ready? . g$12363$1Z2PAY)
        (string-ci>? . g$6928$1Z2PAY)
        (string-ci>=? . g$6930$1Z2PAY)
        (string-ci=? . g$6926$1Z2PAY)
        (string-ci<? . g$6927$1Z2PAY)
        (string-ci<=? . g$6929$1Z2PAY)
        (char-whitespace? . g$12354$1Z2PAY)
        (char-upper-case? . g$12353$1Z2PAY)
        (char-numeric? . g$12351$1Z2PAY)
        (char-lower-case? . g$12350$1Z2PAY)
        (char-upcase . g$12348$1Z2PAY)
        (char-downcase . g$12345$1Z2PAY)
        (char-ci>? . g$6967$1Z2PAY)
        (char-ci>=? . g$6969$1Z2PAY)
        (char-ci=? . g$6965$1Z2PAY)
        (char-ci<? . g$6966$1Z2PAY)
        (char-ci<=? . g$6968$1Z2PAY)
        (char-alphabetic? . g$12344$1Z2PAY)
        (call-with-output-file . g$7359$1Z2PAY)
        (call-with-input-file . g$7358$1Z2PAY)
        (write-char . g$12312$1Z2PAY)
        (write . g$12311$1Z2PAY)
        (with-output-to-file . g$7357$1Z2PAY)
        (with-input-from-file . g$7356$1Z2PAY)
        (read-char . g$12310$1Z2PAY)
        (read . g$12309$1Z2PAY)
        (peek-char . g$12308$1Z2PAY)
        (open-output-file . g$12307$1Z2PAY)
        (open-input-file . g$12306$1Z2PAY)
        (newline . g$12305$1Z2PAY)
        (display . g$12304$1Z2PAY)
        (close-output-port . g$12303$1Z2PAY)
        (close-input-port . g$12302$1Z2PAY)
        (eof-object? . g$12301$1Z2PAY)
        (eof-object . g$12300$1Z2PAY)
        (current-error-port . g$12299$1Z2PAY)
        (current-output-port . g$12298$1Z2PAY)
        (current-input-port . g$12297$1Z2PAY)
        (output-port? . g$12296$1Z2PAY)
        (input-port? . g$12295$1Z2PAY)
        (scheme-report-environment . g$8810$1Z2PAY)
        (quotient . g$6846$1Z2PAY)
        (null-environment . g$8809$1Z2PAY)
        (remainder . g$6847$1Z2PAY)
        (modulo . g$6848$1Z2PAY)
        (inexact->exact . g$12234$1Z2PAY)
        (force . g$6850$1Z2PAY)
        (exact->inexact . g$12233$1Z2PAY)
        (string-fill! . g$12231$1Z2PAY)
        (string-set! . g$12230$1Z2PAY)
        (set-cdr! . g$12229$1Z2PAY)
        (set-car! . g$12228$1Z2PAY)
        (memv . g$5848$1Z2PAY)
        (memq . g$5847$1Z2PAY)
        (member . g$5849$1Z2PAY)
        (assv . g$5844$1Z2PAY)
        (assq . g$5843$1Z2PAY)
        (assoc . g$5845$1Z2PAY)
        (eval . g$8812$1Z2PAY)
        (zero? . g$12094$1Z2PAY)
        (vector? . g$12093$1Z2PAY)
        (vector-set! . g$12092$1Z2PAY)
        (vector-ref . g$12091$1Z2PAY)
        (vector-length . g$12089$1Z2PAY)
        (vector-fill! . g$12087$1Z2PAY)
        (vector->list . g$12086$1Z2PAY)
        (vector . g$12085$1Z2PAY)
        (values . g$12084$1Z2PAY)
        (truncate . g$12083$1Z2PAY)
        (tan . g$12082$1Z2PAY)
        (symbol? . g$12081$1Z2PAY)
        (symbol->string . g$12080$1Z2PAY)
        (substring . g$12079$1Z2PAY)
        (string? . g$12078$1Z2PAY)
        (string>? . g$6015$1Z2PAY)
        (string>=? . g$6017$1Z2PAY)
        (string=? . g$6013$1Z2PAY)
        (string<? . g$6014$1Z2PAY)
        (string<=? . g$6016$1Z2PAY)
        (string-ref . g$12077$1Z2PAY)
        (string-length . g$12076$1Z2PAY)
        (string-copy . g$12074$1Z2PAY)
        (string-append . g$12073$1Z2PAY)
        (string->symbol . g$12072$1Z2PAY)
        (string->number . g$12071$1Z2PAY)
        (string->list . g$12070$1Z2PAY)
        (string . g$12069$1Z2PAY)
        (sqrt . g$12068$1Z2PAY)
        (sin . g$12067$1Z2PAY)
        (round . g$12066$1Z2PAY)
        (reverse . g$12065$1Z2PAY)
        (real? . g$12064$1Z2PAY)
        (real-part . g$12062$1Z2PAY)
        (rationalize . g$6059$1Z2PAY)
        (rational? . g$12061$1Z2PAY)
        (procedure? . g$12059$1Z2PAY)
        (positive? . g$12058$1Z2PAY)
        (pair? . g$12057$1Z2PAY)
        (odd? . g$12056$1Z2PAY)
        (numerator . g$12055$1Z2PAY)
        (number? . g$12054$1Z2PAY)
        (number->string . g$12053$1Z2PAY)
        (null? . g$12052$1Z2PAY)
        (not . g$12051$1Z2PAY)
        (negative? . g$12050$1Z2PAY)
        (min . g$12048$1Z2PAY)
        (max . g$12047$1Z2PAY)
        (map . g$12046$1Z2PAY)
        (make-vector . g$12045$1Z2PAY)
        (make-string . g$12044$1Z2PAY)
        (make-rectangular . g$12043$1Z2PAY)
        (make-polar . g$12042$1Z2PAY)
        (magnitude . g$12041$1Z2PAY)
        (log . g$12040$1Z2PAY)
        (list? . g$12039$1Z2PAY)
        (list-tail . g$12038$1Z2PAY)
        (list-ref . g$12037$1Z2PAY)
        (list->vector . g$12036$1Z2PAY)
        (list->string . g$12035$1Z2PAY)
        (list . g$12034$1Z2PAY)
        (length . g$12033$1Z2PAY)
        (lcm . g$12032$1Z2PAY)
        (integer? . g$12031$1Z2PAY)
        (integer->char . g$12029$1Z2PAY)
        (inexact? . g$12027$1Z2PAY)
        (imag-part . g$12025$1Z2PAY)
        (gcd . g$12024$1Z2PAY)
        (for-each . g$12023$1Z2PAY)
        (floor . g$12022$1Z2PAY)
        (expt . g$12020$1Z2PAY)
        (exp . g$12019$1Z2PAY)
        (exact? . g$12018$1Z2PAY)
        (even? . g$12015$1Z2PAY)
        (eqv? . g$12013$1Z2PAY)
        (equal? . g$12012$1Z2PAY)
        (eq? . g$12011$1Z2PAY)
        (dynamic-wind . g$12010$1Z2PAY)
        (denominator . g$12003$1Z2PAY)
        (cos . g$12002$1Z2PAY)
        (cons . g$12001$1Z2PAY)
        (complex? . g$12000$1Z2PAY)
        (char? . g$11999$1Z2PAY)
        (char>? . g$6056$1Z2PAY)
        (char>=? . g$6058$1Z2PAY)
        (char=? . g$6054$1Z2PAY)
        (char<? . g$6055$1Z2PAY)
        (char<=? . g$6057$1Z2PAY)
        (char->integer . g$11998$1Z2PAY)
        (ceiling . g$11997$1Z2PAY)
        (call-with-values . g$11996$1Z2PAY)
        (call-with-current-continuation . g$11994$1Z2PAY)
        (cddddr . g$5978$1Z2PAY)
        (cdddar . g$5977$1Z2PAY)
        (cddadr . g$5976$1Z2PAY)
        (cddaar . g$5975$1Z2PAY)
        (cdaddr . g$5974$1Z2PAY)
        (cdadar . g$5973$1Z2PAY)
        (cdaadr . g$5972$1Z2PAY)
        (cdaaar . g$5971$1Z2PAY)
        (cadddr . g$5970$1Z2PAY)
        (caddar . g$5969$1Z2PAY)
        (cadadr . g$5968$1Z2PAY)
        (cadaar . g$5967$1Z2PAY)
        (caaddr . g$5966$1Z2PAY)
        (caadar . g$5965$1Z2PAY)
        (caaadr . g$5964$1Z2PAY)
        (caaaar . g$5963$1Z2PAY)
        (cdddr . g$5962$1Z2PAY)
        (cddar . g$5961$1Z2PAY)
        (cdadr . g$5960$1Z2PAY)
        (cdaar . g$5959$1Z2PAY)
        (caddr . g$5958$1Z2PAY)
        (cadar . g$5957$1Z2PAY)
        (caadr . g$5956$1Z2PAY)
        (caaar . g$5955$1Z2PAY)
        (cddr . g$5954$1Z2PAY)
        (cdar . g$5953$1Z2PAY)
        (cadr . g$5952$1Z2PAY)
        (caar . g$5951$1Z2PAY)
        (cdr . g$11993$1Z2PAY)
        (car . g$11992$1Z2PAY)
        (boolean? . g$11991$1Z2PAY)
        (atan . g$11990$1Z2PAY)
        (asin . g$11988$1Z2PAY)
        (apply . g$11987$1Z2PAY)
        (append . g$11986$1Z2PAY)
        (angle . g$11985$1Z2PAY)
        (acos . g$11984$1Z2PAY)
        (abs . g$11983$1Z2PAY)
        (/ . g$11982$1Z2PAY)
        (* . g$11981$1Z2PAY)
        (- . g$11980$1Z2PAY)
        (+ . g$11979$1Z2PAY)
        (>= . g$11978$1Z2PAY)
        (> . g$11977$1Z2PAY)
        (= . g$11976$1Z2PAY)
        (<= . g$11975$1Z2PAY)
        (< . g$11974$1Z2PAY)
        (unquote-splicing . g$11892$1Z2PAY)
        (unquote . g$11891$1Z2PAY)
        (else . g$11889$1Z2PAY)
        (=> . g$11888$1Z2PAY)
        (... . g$11887$1Z2PAY)
        (delay . g$11884$1Z2PAY)
        (or . g$11882$1Z2PAY)
        (and . g$11881$1Z2PAY)
        (do . g$11880$1Z2PAY)
        (cond . g$11879$1Z2PAY)
        (let* . g$11878$1Z2PAY)
        (let . g$11877$1Z2PAY)
        (quasiquote . g$11873$1Z2PAY)
        (syntax-rules . g$11872$1Z2PAY)
        (case . g$11863$1Z2PAY)
        (if . g$11859$1Z2PAY)
        (letrec . g$11857$1Z2PAY)
        (lambda . g$11854$1Z2PAY)
        (quote . g$11851$1Z2PAY)
        (letrec-syntax . g$11849$1Z2PAY)
        (let-syntax . g$11848$1Z2PAY)
        (set! . g$11847$1Z2PAY)
        (begin . g$11843$1Z2PAY)
        (define-syntax . g$11841$1Z2PAY)
        (define . g$11840$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12466$1Z2PAY
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12362$1Z2PAY)
        (string-titlecase . g$12361$1Z2PAY)
        (string-normalize-nfkd . g$12360$1Z2PAY)
        (string-normalize-nfkc . g$12359$1Z2PAY)
        (string-normalize-nfd . g$12358$1Z2PAY)
        (string-normalize-nfc . g$12357$1Z2PAY)
        (string-foldcase . g$12356$1Z2PAY)
        (string-downcase . g$12355$1Z2PAY)
        (string-ci>? . g$6928$1Z2PAY)
        (string-ci>=? . g$6930$1Z2PAY)
        (string-ci=? . g$6926$1Z2PAY)
        (string-ci<? . g$6927$1Z2PAY)
        (string-ci<=? . g$6929$1Z2PAY)
        (char-whitespace? . g$12354$1Z2PAY)
        (char-upper-case? . g$12353$1Z2PAY)
        (char-title-case? . g$12352$1Z2PAY)
        (char-numeric? . g$12351$1Z2PAY)
        (char-lower-case? . g$12350$1Z2PAY)
        (char-general-category . g$12349$1Z2PAY)
        (char-upcase . g$12348$1Z2PAY)
        (char-titlecase . g$12347$1Z2PAY)
        (char-foldcase . g$12346$1Z2PAY)
        (char-downcase . g$12345$1Z2PAY)
        (char-ci>? . g$6967$1Z2PAY)
        (char-ci>=? . g$6969$1Z2PAY)
        (char-ci=? . g$6965$1Z2PAY)
        (char-ci<? . g$6966$1Z2PAY)
        (char-ci<=? . g$6968$1Z2PAY)
        (char-alphabetic? . g$12344$1Z2PAY)
        (make-variable-transformer . g$8432$1Z2PAY)
        (identifier? . g$8830$1Z2PAY)
        (generate-temporaries . g$8819$1Z2PAY)
        (free-identifier=? . g$8820$1Z2PAY)
        (syntax->datum . g$8832$1Z2PAY)
        (datum->syntax . g$8831$1Z2PAY)
        (bound-identifier=? . g$8821$1Z2PAY)
        (record-type-descriptor? . g$12343$1Z2PAY)
        (record-predicate . g$12342$1Z2PAY)
        (record-mutator . g$12341$1Z2PAY)
        (record-constructor . g$12340$1Z2PAY)
        (record-accessor . g$12339$1Z2PAY)
        (make-record-type-descriptor . g$12338$1Z2PAY)
        (make-record-constructor-descriptor . g$12337$1Z2PAY)
        (record? . g$12336$1Z2PAY)
        (record-type-uid . g$12335$1Z2PAY)
        (record-type-sealed? . g$12334$1Z2PAY)
        (record-type-parent . g$12333$1Z2PAY)
        (record-type-opaque? . g$12332$1Z2PAY)
        (record-type-name . g$12331$1Z2PAY)
        (record-type-generative? . g$12330$1Z2PAY)
        (record-type-field-names . g$12329$1Z2PAY)
        (record-rtd . g$12328$1Z2PAY)
        (record-field-mutable? . g$12327$1Z2PAY)
        (delete-file . g$6503$1Z2PAY)
        (file-exists? . g$6502$1Z2PAY)
        (vector-sort! . g$12326$1Z2PAY)
        (vector-sort . g$12325$1Z2PAY)
        (list-sort . g$6866$1Z2PAY)
        (symbol-hash . g$12324$1Z2PAY)
        (string-ci-hash . g$12323$1Z2PAY)
        (string-hash . g$12322$1Z2PAY)
        (equal-hash . g$12321$1Z2PAY)
        (hashtable-equivalence-function . g$12320$1Z2PAY)
        (make-hashtable . g$12319$1Z2PAY)
        (hashtable-hash-function . g$12318$1Z2PAY)
        (make-eqv-hashtable . g$6470$1Z2PAY)
        (make-eq-hashtable . g$6469$1Z2PAY)
        (hashtable? . g$12317$1Z2PAY)
        (hashtable-update! . g$6476$1Z2PAY)
        (hashtable-size . g$6471$1Z2PAY)
        (hashtable-set! . g$6473$1Z2PAY)
        (hashtable-ref . g$6472$1Z2PAY)
        (hashtable-mutable? . g$12316$1Z2PAY)
        (hashtable-keys . g$12315$1Z2PAY)
        (hashtable-entries . g$12314$1Z2PAY)
        (hashtable-delete! . g$6474$1Z2PAY)
        (hashtable-copy . g$12313$1Z2PAY)
        (hashtable-contains? . g$6475$1Z2PAY)
        (hashtable-clear! . g$6477$1Z2PAY)
        (call-with-output-file . g$7359$1Z2PAY)
        (call-with-input-file . g$7358$1Z2PAY)
        (write-char . g$12312$1Z2PAY)
        (write . g$12311$1Z2PAY)
        (with-output-to-file . g$7357$1Z2PAY)
        (with-input-from-file . g$7356$1Z2PAY)
        (read-char . g$12310$1Z2PAY)
        (read . g$12309$1Z2PAY)
        (peek-char . g$12308$1Z2PAY)
        (open-output-file . g$12307$1Z2PAY)
        (open-input-file . g$12306$1Z2PAY)
        (newline . g$12305$1Z2PAY)
        (display . g$12304$1Z2PAY)
        (close-output-port . g$12303$1Z2PAY)
        (close-input-port . g$12302$1Z2PAY)
        (eof-object? . g$12301$1Z2PAY)
        (eof-object . g$12300$1Z2PAY)
        (current-error-port . g$12299$1Z2PAY)
        (current-output-port . g$12298$1Z2PAY)
        (current-input-port . g$12297$1Z2PAY)
        (output-port? . g$12296$1Z2PAY)
        (input-port? . g$12295$1Z2PAY)
        (utf-8-codec . g$12294$1Z2PAY)
        (utf-16-codec . g$12293$1Z2PAY)
        (transcoder-error-handling-mode . g$12292$1Z2PAY)
        (transcoder-eol-style . g$12291$1Z2PAY)
        (transcoder-codec . g$12290$1Z2PAY)
        (transcoded-port . g$12289$1Z2PAY)
        (textual-port? . g$12288$1Z2PAY)
        (string->bytevector . g$12287$1Z2PAY)
        (standard-output-port . g$12286$1Z2PAY)
        (standard-input-port . g$12285$1Z2PAY)
        (standard-error-port . g$12284$1Z2PAY)
        (set-port-position! . g$12283$1Z2PAY)
        (put-u8 . g$12282$1Z2PAY)
        (put-string . g$12281$1Z2PAY)
        (put-datum . g$12280$1Z2PAY)
        (put-char . g$12279$1Z2PAY)
        (put-bytevector . g$12278$1Z2PAY)
        (port? . g$7332$1Z2PAY)
        (port-transcoder . g$12277$1Z2PAY)
        (port-position . g$12276$1Z2PAY)
        (port-has-set-port-position!? . g$12275$1Z2PAY)
        (port-has-port-position? . g$12274$1Z2PAY)
        (port-eof? . g$12273$1Z2PAY)
        (output-port-buffer-mode . g$12272$1Z2PAY)
        (open-string-output-port . g$7331$1Z2PAY)
        (open-string-input-port . g$12271$1Z2PAY)
        (open-file-output-port . g$12270$1Z2PAY)
        (open-file-input/output-port . g$12269$1Z2PAY)
        (open-file-input-port . g$12268$1Z2PAY)
        (open-bytevector-output-port . g$12267$1Z2PAY)
        (open-bytevector-input-port . g$12266$1Z2PAY)
        (native-transcoder . g$12265$1Z2PAY)
        (native-eol-style . g$12264$1Z2PAY)
        (make-transcoder . g$12263$1Z2PAY)
        (latin-1-codec . g$12262$1Z2PAY)
        (make-i/o-write-error . g$7188$1Z2PAY)
        (make-i/o-read-error . g$7174$1Z2PAY)
        (make-i/o-port-error . g$7293$1Z2PAY)
        (make-i/o-invalid-position-error . g$7203$1Z2PAY)
        (make-i/o-filename-error . g$7220$1Z2PAY)
        (make-i/o-file-protection-error . g$7236$1Z2PAY)
        (make-i/o-file-is-read-only-error . g$7250$1Z2PAY)
        (make-i/o-file-does-not-exist-error . g$7278$1Z2PAY)
        (make-i/o-file-already-exists-error . g$7264$1Z2PAY)
        (make-i/o-error . g$7160$1Z2PAY)
        (make-i/o-encoding-error . g$7324$1Z2PAY)
        (make-i/o-decoding-error . g$7309$1Z2PAY)
        (make-custom-textual-output-port . g$12261$1Z2PAY)
        (make-custom-textual-input/output-port . g$12260$1Z2PAY)
        (make-custom-textual-input-port . g$12259$1Z2PAY)
        (make-custom-binary-output-port . g$12258$1Z2PAY)
        (make-custom-binary-input/output-port . g$12257$1Z2PAY)
        (make-custom-binary-input-port . g$12256$1Z2PAY)
        (make-bytevector . g$12255$1Z2PAY)
        (lookahead-u8 . g$12254$1Z2PAY)
        (lookahead-char . g$12253$1Z2PAY)
        (i/o-write-error? . g$7189$1Z2PAY)
        (i/o-read-error? . g$7175$1Z2PAY)
        (i/o-port-error? . g$7295$1Z2PAY)
        (i/o-invalid-position-error? . g$7205$1Z2PAY)
        (i/o-error-position . g$7206$1Z2PAY)
        (i/o-filename-error? . g$7222$1Z2PAY)
        (i/o-file-protection-error? . g$7237$1Z2PAY)
        (i/o-file-is-read-only-error? . g$7251$1Z2PAY)
        (i/o-file-does-not-exist-error? . g$7279$1Z2PAY)
        (i/o-file-already-exists-error? . g$7265$1Z2PAY)
        (i/o-error? . g$7161$1Z2PAY)
        (i/o-error-port . g$7296$1Z2PAY)
        (i/o-error-filename . g$7223$1Z2PAY)
        (i/o-encoding-error? . g$7326$1Z2PAY)
        (i/o-encoding-error-char . g$7327$1Z2PAY)
        (i/o-decoding-error? . g$7310$1Z2PAY)
        (get-u8 . g$12252$1Z2PAY)
        (get-string-n! . g$12251$1Z2PAY)
        (get-string-n . g$12250$1Z2PAY)
        (get-string-all . g$12249$1Z2PAY)
        (get-line . g$12248$1Z2PAY)
        (get-datum . g$12247$1Z2PAY)
        (get-char . g$12246$1Z2PAY)
        (get-bytevector-some . g$12245$1Z2PAY)
        (get-bytevector-n! . g$12244$1Z2PAY)
        (get-bytevector-n . g$12243$1Z2PAY)
        (get-bytevector-all . g$12242$1Z2PAY)
        (flush-output-port . g$12241$1Z2PAY)
        (close-port . g$12240$1Z2PAY)
        (call-with-string-output-port . g$7333$1Z2PAY)
        (call-with-port . g$12239$1Z2PAY)
        (call-with-bytevector-output-port . g$12238$1Z2PAY)
        (bytevector->string . g$12237$1Z2PAY)
        (buffer-mode? . g$12236$1Z2PAY)
        (binary-port? . g$12235$1Z2PAY)
        (exit . g$12232$1Z2PAY)
        (command-line . g$11804$1Z2PAY)
        (remove . g$5858$1Z2PAY)
        (remv . g$5859$1Z2PAY)
        (remp . g$5841$1Z2PAY)
        (remq . g$5860$1Z2PAY)
        (partition . g$5840$1Z2PAY)
        (memv . g$5848$1Z2PAY)
        (memq . g$5847$1Z2PAY)
        (memp . g$5850$1Z2PAY)
        (member . g$5849$1Z2PAY)
        (exists . g$5854$1Z2PAY)
        (for-all . g$5853$1Z2PAY)
        (fold-right . g$5857$1Z2PAY)
        (fold-left . g$5856$1Z2PAY)
        (find . g$5839$1Z2PAY)
        (filter . g$5842$1Z2PAY)
        (cons* . g$5855$1Z2PAY)
        (assv . g$5844$1Z2PAY)
        (assq . g$5843$1Z2PAY)
        (assp . g$5846$1Z2PAY)
        (assoc . g$5845$1Z2PAY)
        (with-exception-handler . g$12227$1Z2PAY)
        (raise-continuable . g$12226$1Z2PAY)
        (raise . g$12225$1Z2PAY)
        (make-enumeration . g$7417$1Z2PAY)
        (enum-set=? . g$7424$1Z2PAY)
        (enum-set-universe . g$7418$1Z2PAY)
        (enum-set-union . g$7425$1Z2PAY)
        (enum-set-subset? . g$7423$1Z2PAY)
        (enum-set-projection . g$7429$1Z2PAY)
        (enum-set-member? . g$7422$1Z2PAY)
        (enum-set-intersection . g$7426$1Z2PAY)
        (enum-set-indexer . g$7419$1Z2PAY)
        (enum-set-difference . g$7427$1Z2PAY)
        (enum-set-constructor . g$7420$1Z2PAY)
        (enum-set-complement . g$7428$1Z2PAY)
        (enum-set->list . g$7421$1Z2PAY)
        (who-condition? . g$6757$1Z2PAY)
        (warning? . g$6668$1Z2PAY)
        (violation? . g$6710$1Z2PAY)
        (undefined-violation? . g$6834$1Z2PAY)
        (syntax-violation? . g$6818$1Z2PAY)
        (syntax-violation-subform . g$6820$1Z2PAY)
        (syntax-violation-form . g$6819$1Z2PAY)
        (syntax-violation . g$8829$1Z2PAY)
        (simple-conditions . g$12224$1Z2PAY)
        (serious-condition? . g$6682$1Z2PAY)
        (non-continuable-violation? . g$6772$1Z2PAY)
        (message-condition? . g$6653$1Z2PAY)
        (make-who-condition . g$6755$1Z2PAY)
        (make-warning . g$6667$1Z2PAY)
        (make-violation . g$6709$1Z2PAY)
        (make-undefined-violation . g$6833$1Z2PAY)
        (make-syntax-violation . g$6815$1Z2PAY)
        (make-serious-condition . g$6681$1Z2PAY)
        (make-non-continuable-violation . g$6771$1Z2PAY)
        (make-message-condition . g$6651$1Z2PAY)
        (make-lexical-violation . g$6799$1Z2PAY)
        (make-irritants-condition . g$6738$1Z2PAY)
        (make-implementation-restriction-violation . g$6785$1Z2PAY)
        (make-error . g$6695$1Z2PAY)
        (make-assertion-violation . g$6723$1Z2PAY)
        (lexical-violation? . g$6800$1Z2PAY)
        (irritants-condition? . g$6740$1Z2PAY)
        (implementation-restriction-violation? . g$6786$1Z2PAY)
        (error? . g$6696$1Z2PAY)
        (condition-who . g$6758$1Z2PAY)
        (condition-predicate . g$12223$1Z2PAY)
        (condition-message . g$6654$1Z2PAY)
        (condition-irritants . g$6741$1Z2PAY)
        (condition-accessor . g$12222$1Z2PAY)
        (condition . g$12221$1Z2PAY)
        (assertion-violation? . g$6724$1Z2PAY)
        (condition? . g$12220$1Z2PAY)
        (utf32->string . g$12219$1Z2PAY)
        (utf16->string . g$12218$1Z2PAY)
        (utf8->string . g$12217$1Z2PAY)
        (uint-list->bytevector . g$12216$1Z2PAY)
        (u8-list->bytevector . g$12215$1Z2PAY)
        (string->utf8 . g$12214$1Z2PAY)
        (string->utf32 . g$12213$1Z2PAY)
        (string->utf16 . g$12212$1Z2PAY)
        (sint-list->bytevector . g$12211$1Z2PAY)
        (native-endianness . g$6509$1Z2PAY)
        (bytevector? . g$12210$1Z2PAY)
        (bytevector=? . g$12209$1Z2PAY)
        (bytevector-uint-set! . g$12208$1Z2PAY)
        (bytevector-uint-ref . g$12207$1Z2PAY)
        (bytevector-u8-set! . g$12206$1Z2PAY)
        (bytevector-u8-ref . g$12205$1Z2PAY)
        (bytevector-u64-set! . g$6530$1Z2PAY)
        (bytevector-u64-ref . g$6526$1Z2PAY)
        (bytevector-u64-native-set! . g$6532$1Z2PAY)
        (bytevector-u64-native-ref . g$6528$1Z2PAY)
        (bytevector-u32-set! . g$6522$1Z2PAY)
        (bytevector-u32-ref . g$6518$1Z2PAY)
        (bytevector-u32-native-set! . g$6524$1Z2PAY)
        (bytevector-u32-native-ref . g$6520$1Z2PAY)
        (bytevector-u16-set! . g$6514$1Z2PAY)
        (bytevector-u16-ref . g$6510$1Z2PAY)
        (bytevector-u16-native-set! . g$6516$1Z2PAY)
        (bytevector-u16-native-ref . g$6512$1Z2PAY)
        (bytevector-sint-set! . g$12204$1Z2PAY)
        (bytevector-sint-ref . g$12203$1Z2PAY)
        (bytevector-s8-set! . g$12202$1Z2PAY)
        (bytevector-s8-ref . g$12201$1Z2PAY)
        (bytevector-s64-set! . g$6531$1Z2PAY)
        (bytevector-s64-ref . g$6527$1Z2PAY)
        (bytevector-s64-native-set! . g$6533$1Z2PAY)
        (bytevector-s64-native-ref . g$6529$1Z2PAY)
        (bytevector-s32-set! . g$6523$1Z2PAY)
        (bytevector-s32-ref . g$6519$1Z2PAY)
        (bytevector-s32-native-set! . g$6525$1Z2PAY)
        (bytevector-s32-native-ref . g$6521$1Z2PAY)
        (bytevector-s16-set! . g$6515$1Z2PAY)
        (bytevector-s16-ref . g$6511$1Z2PAY)
        (bytevector-s16-native-set! . g$6517$1Z2PAY)
        (bytevector-s16-native-ref . g$6513$1Z2PAY)
        (bytevector-length . g$12200$1Z2PAY)
        (bytevector-ieee-single-set! . g$12199$1Z2PAY)
        (bytevector-ieee-single-ref . g$12198$1Z2PAY)
        (bytevector-ieee-single-native-set! . g$6536$1Z2PAY)
        (bytevector-ieee-single-native-ref . g$6534$1Z2PAY)
        (bytevector-ieee-double-set! . g$12197$1Z2PAY)
        (bytevector-ieee-double-ref . g$12196$1Z2PAY)
        (bytevector-ieee-double-native-set! . g$6537$1Z2PAY)
        (bytevector-ieee-double-native-ref . g$6535$1Z2PAY)
        (bytevector-fill! . g$12195$1Z2PAY)
        (bytevector-copy! . g$12194$1Z2PAY)
        (bytevector-copy . g$12193$1Z2PAY)
        (bytevector->uint-list . g$12192$1Z2PAY)
        (bytevector->u8-list . g$12191$1Z2PAY)
        (bytevector->sint-list . g$12190$1Z2PAY)
        (no-nans-violation? . g$7146$1Z2PAY)
        (no-infinities-violation? . g$7132$1Z2PAY)
        (make-no-nans-violation . g$7145$1Z2PAY)
        (make-no-infinities-violation . g$7131$1Z2PAY)
        (real->flonum . g$12189$1Z2PAY)
        (flzero? . g$12188$1Z2PAY)
        (fltruncate . g$12187$1Z2PAY)
        (fltan . g$12186$1Z2PAY)
        (flsqrt . g$12185$1Z2PAY)
        (flsin . g$12184$1Z2PAY)
        (flround . g$12183$1Z2PAY)
        (flpositive? . g$12182$1Z2PAY)
        (flonum? . g$12181$1Z2PAY)
        (flodd? . g$12180$1Z2PAY)
        (flnumerator . g$12179$1Z2PAY)
        (flnegative? . g$12178$1Z2PAY)
        (flnan? . g$12177$1Z2PAY)
        (flmod0 . g$12176$1Z2PAY)
        (flmod . g$12175$1Z2PAY)
        (flmin . g$12174$1Z2PAY)
        (flmax . g$12173$1Z2PAY)
        (fllog . g$12172$1Z2PAY)
        (flinteger? . g$12171$1Z2PAY)
        (flinfinite? . g$12170$1Z2PAY)
        (flfloor . g$12169$1Z2PAY)
        (flfinite? . g$12168$1Z2PAY)
        (flexpt . g$12167$1Z2PAY)
        (flexp . g$12166$1Z2PAY)
        (fleven? . g$12165$1Z2PAY)
        (fldiv0-and-mod0 . g$12164$1Z2PAY)
        (fldiv0 . g$12163$1Z2PAY)
        (fldiv-and-mod . g$12162$1Z2PAY)
        (fldiv . g$12161$1Z2PAY)
        (fldenominator . g$12160$1Z2PAY)
        (flcos . g$12159$1Z2PAY)
        (flceiling . g$12158$1Z2PAY)
        (flatan . g$12157$1Z2PAY)
        (flasin . g$12156$1Z2PAY)
        (flacos . g$12155$1Z2PAY)
        (flabs . g$12154$1Z2PAY)
        (fl>? . g$12153$1Z2PAY)
        (fl>=? . g$12152$1Z2PAY)
        (fl=? . g$12151$1Z2PAY)
        (fl<? . g$12150$1Z2PAY)
        (fl<=? . g$12149$1Z2PAY)
        (fl/ . g$12148$1Z2PAY)
        (fl- . g$12147$1Z2PAY)
        (fl+ . g$12146$1Z2PAY)
        (fl* . g$12145$1Z2PAY)
        (fixnum->flonum . g$12144$1Z2PAY)
        (fxzero? . g$12143$1Z2PAY)
        (fxxor . g$12142$1Z2PAY)
        (fxrotate-bit-field . g$7077$1Z2PAY)
        (fxreverse-bit-field . g$12141$1Z2PAY)
        (fxpositive? . g$12140$1Z2PAY)
        (fxodd? . g$12139$1Z2PAY)
        (fxnot . g$12138$1Z2PAY)
        (fxnegative? . g$12137$1Z2PAY)
        (fxmod0 . g$12136$1Z2PAY)
        (fxmod . g$12135$1Z2PAY)
        (fxmin . g$12134$1Z2PAY)
        (fxmax . g$12133$1Z2PAY)
        (fxlength . g$12132$1Z2PAY)
        (fxior . g$12131$1Z2PAY)
        (fxif . g$7071$1Z2PAY)
        (fxfirst-bit-set . g$12130$1Z2PAY)
        (fxeven? . g$12129$1Z2PAY)
        (fxdiv0-and-mod0 . g$12128$1Z2PAY)
        (fxdiv0 . g$12127$1Z2PAY)
        (fxdiv-and-mod . g$12126$1Z2PAY)
        (fxdiv . g$12125$1Z2PAY)
        (fxcopy-bit-field . g$7074$1Z2PAY)
        (fxcopy-bit . g$7072$1Z2PAY)
        (fxbit-set? . g$12124$1Z2PAY)
        (fxbit-field . g$7073$1Z2PAY)
        (fxbit-count . g$12123$1Z2PAY)
        (fxarithmetic-shift-right . g$7076$1Z2PAY)
        (fxarithmetic-shift-left . g$7075$1Z2PAY)
        (fxarithmetic-shift . g$12122$1Z2PAY)
        (fxand . g$12121$1Z2PAY)
        (fx>? . g$12120$1Z2PAY)
        (fx>=? . g$12119$1Z2PAY)
        (fx=? . g$12118$1Z2PAY)
        (fx<? . g$12117$1Z2PAY)
        (fx<=? . g$12116$1Z2PAY)
        (fx-/carry . g$12115$1Z2PAY)
        (fx- . g$12114$1Z2PAY)
        (fx+/carry . g$12113$1Z2PAY)
        (fx+ . g$12112$1Z2PAY)
        (fx*/carry . g$12111$1Z2PAY)
        (fx* . g$12110$1Z2PAY)
        (greatest-fixnum . g$12109$1Z2PAY)
        (least-fixnum . g$12108$1Z2PAY)
        (fixnum-width . g$12107$1Z2PAY)
        (fixnum? . g$12106$1Z2PAY)
        (bitwise-rotate-bit-field . g$7029$1Z2PAY)
        (bitwise-reverse-bit-field . g$12105$1Z2PAY)
        (bitwise-length . g$12104$1Z2PAY)
        (bitwise-if . g$7023$1Z2PAY)
        (bitwise-first-bit-set . g$12103$1Z2PAY)
        (bitwise-copy-bit-field . g$7026$1Z2PAY)
        (bitwise-copy-bit . g$7024$1Z2PAY)
        (bitwise-bit-set? . g$12102$1Z2PAY)
        (bitwise-bit-field . g$12101$1Z2PAY)
        (bitwise-bit-count . g$12100$1Z2PAY)
        (bitwise-xor . g$12099$1Z2PAY)
        (bitwise-ior . g$12098$1Z2PAY)
        (bitwise-and . g$12097$1Z2PAY)
        (bitwise-not . g$12096$1Z2PAY)
        (bitwise-arithmetic-shift-right . g$7028$1Z2PAY)
        (bitwise-arithmetic-shift-left . g$7027$1Z2PAY)
        (bitwise-arithmetic-shift . g$12095$1Z2PAY)
        (zero? . g$12094$1Z2PAY)
        (vector? . g$12093$1Z2PAY)
        (vector-set! . g$12092$1Z2PAY)
        (vector-ref . g$12091$1Z2PAY)
        (vector-map . g$12090$1Z2PAY)
        (vector-length . g$12089$1Z2PAY)
        (vector-for-each . g$12088$1Z2PAY)
        (vector-fill! . g$12087$1Z2PAY)
        (vector->list . g$12086$1Z2PAY)
        (vector . g$12085$1Z2PAY)
        (values . g$12084$1Z2PAY)
        (truncate . g$12083$1Z2PAY)
        (tan . g$12082$1Z2PAY)
        (symbol? . g$12081$1Z2PAY)
        (symbol=? . g$6018$1Z2PAY)
        (symbol->string . g$12080$1Z2PAY)
        (substring . g$12079$1Z2PAY)
        (string? . g$12078$1Z2PAY)
        (string>? . g$6015$1Z2PAY)
        (string>=? . g$6017$1Z2PAY)
        (string=? . g$6013$1Z2PAY)
        (string<? . g$6014$1Z2PAY)
        (string<=? . g$6016$1Z2PAY)
        (string-ref . g$12077$1Z2PAY)
        (string-length . g$12076$1Z2PAY)
        (string-for-each . g$12075$1Z2PAY)
        (string-copy . g$12074$1Z2PAY)
        (string-append . g$12073$1Z2PAY)
        (string->symbol . g$12072$1Z2PAY)
        (string->number . g$12071$1Z2PAY)
        (string->list . g$12070$1Z2PAY)
        (string . g$12069$1Z2PAY)
        (sqrt . g$12068$1Z2PAY)
        (sin . g$12067$1Z2PAY)
        (round . g$12066$1Z2PAY)
        (reverse . g$12065$1Z2PAY)
        (real? . g$12064$1Z2PAY)
        (real-valued? . g$12063$1Z2PAY)
        (real-part . g$12062$1Z2PAY)
        (rationalize . g$6059$1Z2PAY)
        (rational? . g$12061$1Z2PAY)
        (rational-valued? . g$12060$1Z2PAY)
        (procedure? . g$12059$1Z2PAY)
        (positive? . g$12058$1Z2PAY)
        (pair? . g$12057$1Z2PAY)
        (odd? . g$12056$1Z2PAY)
        (numerator . g$12055$1Z2PAY)
        (number? . g$12054$1Z2PAY)
        (number->string . g$12053$1Z2PAY)
        (null? . g$12052$1Z2PAY)
        (not . g$12051$1Z2PAY)
        (negative? . g$12050$1Z2PAY)
        (nan? . g$12049$1Z2PAY)
        (min . g$12048$1Z2PAY)
        (max . g$12047$1Z2PAY)
        (map . g$12046$1Z2PAY)
        (make-vector . g$12045$1Z2PAY)
        (make-string . g$12044$1Z2PAY)
        (make-rectangular . g$12043$1Z2PAY)
        (make-polar . g$12042$1Z2PAY)
        (magnitude . g$12041$1Z2PAY)
        (log . g$12040$1Z2PAY)
        (list? . g$12039$1Z2PAY)
        (list-tail . g$12038$1Z2PAY)
        (list-ref . g$12037$1Z2PAY)
        (list->vector . g$12036$1Z2PAY)
        (list->string . g$12035$1Z2PAY)
        (list . g$12034$1Z2PAY)
        (length . g$12033$1Z2PAY)
        (lcm . g$12032$1Z2PAY)
        (integer? . g$12031$1Z2PAY)
        (integer-valued? . g$12030$1Z2PAY)
        (integer->char . g$12029$1Z2PAY)
        (infinite? . g$12028$1Z2PAY)
        (inexact? . g$12027$1Z2PAY)
        (inexact . g$12026$1Z2PAY)
        (imag-part . g$12025$1Z2PAY)
        (gcd . g$12024$1Z2PAY)
        (for-each . g$12023$1Z2PAY)
        (floor . g$12022$1Z2PAY)
        (finite? . g$12021$1Z2PAY)
        (expt . g$12020$1Z2PAY)
        (exp . g$12019$1Z2PAY)
        (exact? . g$12018$1Z2PAY)
        (exact-integer-sqrt . g$12017$1Z2PAY)
        (exact . g$12016$1Z2PAY)
        (even? . g$12015$1Z2PAY)
        (error . g$12014$1Z2PAY)
        (eqv? . g$12013$1Z2PAY)
        (equal? . g$12012$1Z2PAY)
        (eq? . g$12011$1Z2PAY)
        (dynamic-wind . g$12010$1Z2PAY)
        (div0-and-mod0 . g$12009$1Z2PAY)
        (mod0 . g$12008$1Z2PAY)
        (div0 . g$12007$1Z2PAY)
        (div-and-mod . g$12006$1Z2PAY)
        (mod . g$12005$1Z2PAY)
        (div . g$12004$1Z2PAY)
        (denominator . g$12003$1Z2PAY)
        (cos . g$12002$1Z2PAY)
        (cons . g$12001$1Z2PAY)
        (complex? . g$12000$1Z2PAY)
        (char? . g$11999$1Z2PAY)
        (char>? . g$6056$1Z2PAY)
        (char>=? . g$6058$1Z2PAY)
        (char=? . g$6054$1Z2PAY)
        (char<? . g$6055$1Z2PAY)
        (char<=? . g$6057$1Z2PAY)
        (char->integer . g$11998$1Z2PAY)
        (ceiling . g$11997$1Z2PAY)
        (call-with-values . g$11996$1Z2PAY)
        (call/cc . g$11995$1Z2PAY)
        (call-with-current-continuation . g$11994$1Z2PAY)
        (cddddr . g$5978$1Z2PAY)
        (cdddar . g$5977$1Z2PAY)
        (cddadr . g$5976$1Z2PAY)
        (cddaar . g$5975$1Z2PAY)
        (cdaddr . g$5974$1Z2PAY)
        (cdadar . g$5973$1Z2PAY)
        (cdaadr . g$5972$1Z2PAY)
        (cdaaar . g$5971$1Z2PAY)
        (cadddr . g$5970$1Z2PAY)
        (caddar . g$5969$1Z2PAY)
        (cadadr . g$5968$1Z2PAY)
        (cadaar . g$5967$1Z2PAY)
        (caaddr . g$5966$1Z2PAY)
        (caadar . g$5965$1Z2PAY)
        (caaadr . g$5964$1Z2PAY)
        (caaaar . g$5963$1Z2PAY)
        (cdddr . g$5962$1Z2PAY)
        (cddar . g$5961$1Z2PAY)
        (cdadr . g$5960$1Z2PAY)
        (cdaar . g$5959$1Z2PAY)
        (caddr . g$5958$1Z2PAY)
        (cadar . g$5957$1Z2PAY)
        (caadr . g$5956$1Z2PAY)
        (caaar . g$5955$1Z2PAY)
        (cddr . g$5954$1Z2PAY)
        (cdar . g$5953$1Z2PAY)
        (cadr . g$5952$1Z2PAY)
        (caar . g$5951$1Z2PAY)
        (cdr . g$11993$1Z2PAY)
        (car . g$11992$1Z2PAY)
        (boolean? . g$11991$1Z2PAY)
        (boolean=? . g$6019$1Z2PAY)
        (atan . g$11990$1Z2PAY)
        (assertion-violation . g$11989$1Z2PAY)
        (asin . g$11988$1Z2PAY)
        (apply . g$11987$1Z2PAY)
        (append . g$11986$1Z2PAY)
        (angle . g$11985$1Z2PAY)
        (acos . g$11984$1Z2PAY)
        (abs . g$11983$1Z2PAY)
        (/ . g$11982$1Z2PAY)
        (* . g$11981$1Z2PAY)
        (- . g$11980$1Z2PAY)
        (+ . g$11979$1Z2PAY)
        (>= . g$11978$1Z2PAY)
        (> . g$11977$1Z2PAY)
        (= . g$11976$1Z2PAY)
        (<= . g$11975$1Z2PAY)
        (< . g$11974$1Z2PAY)
        (&no-nans . g$11944$1Z2PAY)
        (&no-infinities . g$11943$1Z2PAY)
        (&i/o-encoding . g$11942$1Z2PAY)
        (&i/o-decoding . g$11941$1Z2PAY)
        (&i/o-port . g$11940$1Z2PAY)
        (&i/o-file-does-not-exist . g$11939$1Z2PAY)
        (&i/o-file-already-exists . g$11938$1Z2PAY)
        (&i/o-file-is-read-only . g$11937$1Z2PAY)
        (&i/o-file-protection . g$11936$1Z2PAY)
        (&i/o-filename . g$11935$1Z2PAY)
        (&i/o-invalid-position . g$11934$1Z2PAY)
        (&i/o-write . g$11933$1Z2PAY)
        (&i/o-read . g$11932$1Z2PAY)
        (&i/o . g$11931$1Z2PAY)
        (&non-continuable . g$11930$1Z2PAY)
        (&undefined . g$11929$1Z2PAY)
        (&syntax . g$11928$1Z2PAY)
        (&lexical . g$11927$1Z2PAY)
        (&implementation-restriction . g$11926$1Z2PAY)
        (&who . g$11925$1Z2PAY)
        (&irritants . g$11924$1Z2PAY)
        (&assertion . g$11923$1Z2PAY)
        (&violation . g$11922$1Z2PAY)
        (&error . g$11921$1Z2PAY)
        (&serious . g$11920$1Z2PAY)
        (&warning . g$11919$1Z2PAY)
        (&message . g$11918$1Z2PAY)
        (&condition . g$11917$1Z2PAY)
        (define-condition-type . g$11916$1Z2PAY)
        (define-enumeration . g$11915$1Z2PAY)
        (define-record-type . g$11914$1Z2PAY)
        (parent-rtd . g$11913$1Z2PAY)
        (nongenerative . g$11912$1Z2PAY)
        (opaque . g$11911$1Z2PAY)
        (sealed . g$11910$1Z2PAY)
        (protocol . g$11909$1Z2PAY)
        (parent . g$11908$1Z2PAY)
        (immutable . g$11907$1Z2PAY)
        (mutable . g$11906$1Z2PAY)
        (fields . g$11905$1Z2PAY)
        (error-handling-mode . g$11904$1Z2PAY)
        (file-options . g$11903$1Z2PAY)
        (buffer-mode . g$11902$1Z2PAY)
        (eol-style . g$11901$1Z2PAY)
        (guard . g$11900$1Z2PAY)
        (unsyntax-splicing . g$11894$1Z2PAY)
        (unsyntax . g$11893$1Z2PAY)
        (unquote-splicing . g$11892$1Z2PAY)
        (unquote . g$11891$1Z2PAY)
        (_ . g$11890$1Z2PAY)
        (else . g$11889$1Z2PAY)
        (=> . g$11888$1Z2PAY)
        (... . g$11887$1Z2PAY)
        (assert . g$11886$1Z2PAY)
        (endianness . g$11885$1Z2PAY)
        (or . g$11882$1Z2PAY)
        (and . g$11881$1Z2PAY)
        (do . g$11880$1Z2PAY)
        (cond . g$11879$1Z2PAY)
        (let* . g$11878$1Z2PAY)
        (let . g$11877$1Z2PAY)
        (identifier-syntax . g$11876$1Z2PAY)
        (with-syntax . g$11875$1Z2PAY)
        (quasisyntax . g$11874$1Z2PAY)
        (quasiquote . g$11873$1Z2PAY)
        (syntax-rules . g$11872$1Z2PAY)
        (let-values . g$11868$1Z2PAY)
        (let*-values . g$11867$1Z2PAY)
        (record-constructor-descriptor . g$11866$1Z2PAY)
        (record-type-descriptor . g$11865$1Z2PAY)
        (case . g$11863$1Z2PAY)
        (unless . g$11861$1Z2PAY)
        (when . g$11860$1Z2PAY)
        (if . g$11859$1Z2PAY)
        (letrec* . g$11858$1Z2PAY)
        (letrec . g$11857$1Z2PAY)
        (case-lambda . g$11855$1Z2PAY)
        (lambda . g$11854$1Z2PAY)
        (syntax . g$11853$1Z2PAY)
        (syntax-case . g$11852$1Z2PAY)
        (quote . g$11851$1Z2PAY)
        (letrec-syntax . g$11849$1Z2PAY)
        (let-syntax . g$11848$1Z2PAY)
        (set! . g$11847$1Z2PAY)
        (begin . g$11843$1Z2PAY)
        (define-syntax . g$11841$1Z2PAY)
        (define . g$11840$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12467$1Z2PAY
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((interaction-environment . g$8835$1Z2PAY)
        (scheme-report-environment . g$8810$1Z2PAY)
        (quotient . g$6846$1Z2PAY)
        (null-environment . g$8809$1Z2PAY)
        (remainder . g$6847$1Z2PAY)
        (modulo . g$6848$1Z2PAY)
        (inexact->exact . g$12234$1Z2PAY)
        (force . g$6850$1Z2PAY)
        (exact->inexact . g$12233$1Z2PAY)
        (delay . g$11884$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12468$1Z2PAY
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$11880$1Z2PAY)
        (unless . g$11861$1Z2PAY)
        (when . g$11860$1Z2PAY)
        (case-lambda . g$11855$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12469$1Z2PAY
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$8812$1Z2PAY) (environment . g$8808$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12470$1Z2PAY
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$12229$1Z2PAY) (set-car! . g$12228$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12471$1Z2PAY
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$12231$1Z2PAY) (string-set! . g$12230$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12472$1Z2PAY
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$12232$1Z2PAY) (command-line . g$11804$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12473$1Z2PAY
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$8432$1Z2PAY)
        (identifier? . g$8830$1Z2PAY)
        (generate-temporaries . g$8819$1Z2PAY)
        (free-identifier=? . g$8820$1Z2PAY)
        (syntax->datum . g$8832$1Z2PAY)
        (datum->syntax . g$8831$1Z2PAY)
        (bound-identifier=? . g$8821$1Z2PAY)
        (syntax-violation . g$8829$1Z2PAY)
        (unsyntax-splicing . g$11894$1Z2PAY)
        (unsyntax . g$11893$1Z2PAY)
        (_ . g$11890$1Z2PAY)
        (... . g$11887$1Z2PAY)
        (with-syntax . g$11875$1Z2PAY)
        (quasisyntax . g$11874$1Z2PAY)
        (syntax . g$11853$1Z2PAY)
        (syntax-case . g$11852$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12474$1Z2PAY
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$6503$1Z2PAY)
        (file-exists? . g$6502$1Z2PAY)
        (make-i/o-write-error . g$7188$1Z2PAY)
        (make-i/o-read-error . g$7174$1Z2PAY)
        (make-i/o-port-error . g$7293$1Z2PAY)
        (make-i/o-invalid-position-error . g$7203$1Z2PAY)
        (make-i/o-filename-error . g$7220$1Z2PAY)
        (make-i/o-file-protection-error . g$7236$1Z2PAY)
        (make-i/o-file-is-read-only-error . g$7250$1Z2PAY)
        (make-i/o-file-does-not-exist-error . g$7278$1Z2PAY)
        (make-i/o-file-already-exists-error . g$7264$1Z2PAY)
        (make-i/o-error . g$7160$1Z2PAY)
        (i/o-write-error? . g$7189$1Z2PAY)
        (i/o-read-error? . g$7175$1Z2PAY)
        (i/o-port-error? . g$7295$1Z2PAY)
        (i/o-invalid-position-error? . g$7205$1Z2PAY)
        (i/o-error-position . g$7206$1Z2PAY)
        (i/o-filename-error? . g$7222$1Z2PAY)
        (i/o-file-protection-error? . g$7237$1Z2PAY)
        (i/o-file-is-read-only-error? . g$7251$1Z2PAY)
        (i/o-file-does-not-exist-error? . g$7279$1Z2PAY)
        (i/o-file-already-exists-error? . g$7265$1Z2PAY)
        (i/o-error? . g$7161$1Z2PAY)
        (i/o-error-port . g$7296$1Z2PAY)
        (i/o-error-filename . g$7223$1Z2PAY)
        (&i/o-port . g$11940$1Z2PAY)
        (&i/o-file-does-not-exist . g$11939$1Z2PAY)
        (&i/o-file-already-exists . g$11938$1Z2PAY)
        (&i/o-file-is-read-only . g$11937$1Z2PAY)
        (&i/o-file-protection . g$11936$1Z2PAY)
        (&i/o-filename . g$11935$1Z2PAY)
        (&i/o-invalid-position . g$11934$1Z2PAY)
        (&i/o-write . g$11933$1Z2PAY)
        (&i/o-read . g$11932$1Z2PAY)
        (&i/o . g$11931$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12475$1Z2PAY
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$12326$1Z2PAY)
        (vector-sort . g$12325$1Z2PAY)
        (list-sort . g$6866$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12476$1Z2PAY
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$12094$1Z2PAY)
        (vector? . g$12093$1Z2PAY)
        (vector-set! . g$12092$1Z2PAY)
        (vector-ref . g$12091$1Z2PAY)
        (vector-map . g$12090$1Z2PAY)
        (vector-length . g$12089$1Z2PAY)
        (vector-for-each . g$12088$1Z2PAY)
        (vector-fill! . g$12087$1Z2PAY)
        (vector->list . g$12086$1Z2PAY)
        (vector . g$12085$1Z2PAY)
        (values . g$12084$1Z2PAY)
        (truncate . g$12083$1Z2PAY)
        (tan . g$12082$1Z2PAY)
        (symbol? . g$12081$1Z2PAY)
        (symbol=? . g$6018$1Z2PAY)
        (symbol->string . g$12080$1Z2PAY)
        (substring . g$12079$1Z2PAY)
        (string? . g$12078$1Z2PAY)
        (string>? . g$6015$1Z2PAY)
        (string>=? . g$6017$1Z2PAY)
        (string=? . g$6013$1Z2PAY)
        (string<? . g$6014$1Z2PAY)
        (string<=? . g$6016$1Z2PAY)
        (string-ref . g$12077$1Z2PAY)
        (string-length . g$12076$1Z2PAY)
        (string-for-each . g$12075$1Z2PAY)
        (string-copy . g$12074$1Z2PAY)
        (string-append . g$12073$1Z2PAY)
        (string->symbol . g$12072$1Z2PAY)
        (string->number . g$12071$1Z2PAY)
        (string->list . g$12070$1Z2PAY)
        (string . g$12069$1Z2PAY)
        (sqrt . g$12068$1Z2PAY)
        (sin . g$12067$1Z2PAY)
        (round . g$12066$1Z2PAY)
        (reverse . g$12065$1Z2PAY)
        (real? . g$12064$1Z2PAY)
        (real-valued? . g$12063$1Z2PAY)
        (real-part . g$12062$1Z2PAY)
        (rationalize . g$6059$1Z2PAY)
        (rational? . g$12061$1Z2PAY)
        (rational-valued? . g$12060$1Z2PAY)
        (procedure? . g$12059$1Z2PAY)
        (positive? . g$12058$1Z2PAY)
        (pair? . g$12057$1Z2PAY)
        (odd? . g$12056$1Z2PAY)
        (numerator . g$12055$1Z2PAY)
        (number? . g$12054$1Z2PAY)
        (number->string . g$12053$1Z2PAY)
        (null? . g$12052$1Z2PAY)
        (not . g$12051$1Z2PAY)
        (negative? . g$12050$1Z2PAY)
        (nan? . g$12049$1Z2PAY)
        (min . g$12048$1Z2PAY)
        (max . g$12047$1Z2PAY)
        (map . g$12046$1Z2PAY)
        (make-vector . g$12045$1Z2PAY)
        (make-string . g$12044$1Z2PAY)
        (make-rectangular . g$12043$1Z2PAY)
        (make-polar . g$12042$1Z2PAY)
        (magnitude . g$12041$1Z2PAY)
        (log . g$12040$1Z2PAY)
        (list? . g$12039$1Z2PAY)
        (list-tail . g$12038$1Z2PAY)
        (list-ref . g$12037$1Z2PAY)
        (list->vector . g$12036$1Z2PAY)
        (list->string . g$12035$1Z2PAY)
        (list . g$12034$1Z2PAY)
        (length . g$12033$1Z2PAY)
        (lcm . g$12032$1Z2PAY)
        (integer? . g$12031$1Z2PAY)
        (integer-valued? . g$12030$1Z2PAY)
        (integer->char . g$12029$1Z2PAY)
        (infinite? . g$12028$1Z2PAY)
        (inexact? . g$12027$1Z2PAY)
        (inexact . g$12026$1Z2PAY)
        (imag-part . g$12025$1Z2PAY)
        (gcd . g$12024$1Z2PAY)
        (for-each . g$12023$1Z2PAY)
        (floor . g$12022$1Z2PAY)
        (finite? . g$12021$1Z2PAY)
        (expt . g$12020$1Z2PAY)
        (exp . g$12019$1Z2PAY)
        (exact? . g$12018$1Z2PAY)
        (exact-integer-sqrt . g$12017$1Z2PAY)
        (exact . g$12016$1Z2PAY)
        (even? . g$12015$1Z2PAY)
        (error . g$12014$1Z2PAY)
        (eqv? . g$12013$1Z2PAY)
        (equal? . g$12012$1Z2PAY)
        (eq? . g$12011$1Z2PAY)
        (dynamic-wind . g$12010$1Z2PAY)
        (div0-and-mod0 . g$12009$1Z2PAY)
        (mod0 . g$12008$1Z2PAY)
        (div0 . g$12007$1Z2PAY)
        (div-and-mod . g$12006$1Z2PAY)
        (mod . g$12005$1Z2PAY)
        (div . g$12004$1Z2PAY)
        (denominator . g$12003$1Z2PAY)
        (cos . g$12002$1Z2PAY)
        (cons . g$12001$1Z2PAY)
        (complex? . g$12000$1Z2PAY)
        (char? . g$11999$1Z2PAY)
        (char>? . g$6056$1Z2PAY)
        (char>=? . g$6058$1Z2PAY)
        (char=? . g$6054$1Z2PAY)
        (char<? . g$6055$1Z2PAY)
        (char<=? . g$6057$1Z2PAY)
        (char->integer . g$11998$1Z2PAY)
        (ceiling . g$11997$1Z2PAY)
        (call-with-values . g$11996$1Z2PAY)
        (call/cc . g$11995$1Z2PAY)
        (call-with-current-continuation . g$11994$1Z2PAY)
        (cddddr . g$5978$1Z2PAY)
        (cdddar . g$5977$1Z2PAY)
        (cddadr . g$5976$1Z2PAY)
        (cddaar . g$5975$1Z2PAY)
        (cdaddr . g$5974$1Z2PAY)
        (cdadar . g$5973$1Z2PAY)
        (cdaadr . g$5972$1Z2PAY)
        (cdaaar . g$5971$1Z2PAY)
        (cadddr . g$5970$1Z2PAY)
        (caddar . g$5969$1Z2PAY)
        (cadadr . g$5968$1Z2PAY)
        (cadaar . g$5967$1Z2PAY)
        (caaddr . g$5966$1Z2PAY)
        (caadar . g$5965$1Z2PAY)
        (caaadr . g$5964$1Z2PAY)
        (caaaar . g$5963$1Z2PAY)
        (cdddr . g$5962$1Z2PAY)
        (cddar . g$5961$1Z2PAY)
        (cdadr . g$5960$1Z2PAY)
        (cdaar . g$5959$1Z2PAY)
        (caddr . g$5958$1Z2PAY)
        (cadar . g$5957$1Z2PAY)
        (caadr . g$5956$1Z2PAY)
        (caaar . g$5955$1Z2PAY)
        (cddr . g$5954$1Z2PAY)
        (cdar . g$5953$1Z2PAY)
        (cadr . g$5952$1Z2PAY)
        (caar . g$5951$1Z2PAY)
        (cdr . g$11993$1Z2PAY)
        (car . g$11992$1Z2PAY)
        (boolean? . g$11991$1Z2PAY)
        (boolean=? . g$6019$1Z2PAY)
        (atan . g$11990$1Z2PAY)
        (assertion-violation . g$11989$1Z2PAY)
        (asin . g$11988$1Z2PAY)
        (apply . g$11987$1Z2PAY)
        (append . g$11986$1Z2PAY)
        (angle . g$11985$1Z2PAY)
        (acos . g$11984$1Z2PAY)
        (abs . g$11983$1Z2PAY)
        (/ . g$11982$1Z2PAY)
        (* . g$11981$1Z2PAY)
        (- . g$11980$1Z2PAY)
        (+ . g$11979$1Z2PAY)
        (>= . g$11978$1Z2PAY)
        (> . g$11977$1Z2PAY)
        (= . g$11976$1Z2PAY)
        (<= . g$11975$1Z2PAY)
        (< . g$11974$1Z2PAY)
        (unquote-splicing . g$11892$1Z2PAY)
        (unquote . g$11891$1Z2PAY)
        (_ . g$11890$1Z2PAY)
        (else . g$11889$1Z2PAY)
        (=> . g$11888$1Z2PAY)
        (... . g$11887$1Z2PAY)
        (assert . g$11886$1Z2PAY)
        (or . g$11882$1Z2PAY)
        (and . g$11881$1Z2PAY)
        (cond . g$11879$1Z2PAY)
        (let* . g$11878$1Z2PAY)
        (let . g$11877$1Z2PAY)
        (identifier-syntax . g$11876$1Z2PAY)
        (quasiquote . g$11873$1Z2PAY)
        (syntax-rules . g$11872$1Z2PAY)
        (let-values . g$11868$1Z2PAY)
        (let*-values . g$11867$1Z2PAY)
        (case . g$11863$1Z2PAY)
        (if . g$11859$1Z2PAY)
        (letrec* . g$11858$1Z2PAY)
        (letrec . g$11857$1Z2PAY)
        (lambda . g$11854$1Z2PAY)
        (quote . g$11851$1Z2PAY)
        (letrec-syntax . g$11849$1Z2PAY)
        (let-syntax . g$11848$1Z2PAY)
        (set! . g$11847$1Z2PAY)
        (begin . g$11843$1Z2PAY)
        (define-syntax . g$11841$1Z2PAY)
        (define . g$11840$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12477$1Z2PAY
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$5858$1Z2PAY)
        (remv . g$5859$1Z2PAY)
        (remp . g$5841$1Z2PAY)
        (remq . g$5860$1Z2PAY)
        (partition . g$5840$1Z2PAY)
        (memv . g$5848$1Z2PAY)
        (memq . g$5847$1Z2PAY)
        (memp . g$5850$1Z2PAY)
        (member . g$5849$1Z2PAY)
        (exists . g$5854$1Z2PAY)
        (for-all . g$5853$1Z2PAY)
        (fold-right . g$5857$1Z2PAY)
        (fold-left . g$5856$1Z2PAY)
        (find . g$5839$1Z2PAY)
        (filter . g$5842$1Z2PAY)
        (cons* . g$5855$1Z2PAY)
        (assv . g$5844$1Z2PAY)
        (assq . g$5843$1Z2PAY)
        (assp . g$5846$1Z2PAY)
        (assoc . g$5845$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12478$1Z2PAY
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$7359$1Z2PAY)
        (call-with-input-file . g$7358$1Z2PAY)
        (write-char . g$12312$1Z2PAY)
        (write . g$12311$1Z2PAY)
        (with-output-to-file . g$7357$1Z2PAY)
        (with-input-from-file . g$7356$1Z2PAY)
        (read-char . g$12310$1Z2PAY)
        (read . g$12309$1Z2PAY)
        (peek-char . g$12308$1Z2PAY)
        (open-output-file . g$12307$1Z2PAY)
        (open-input-file . g$12306$1Z2PAY)
        (newline . g$12305$1Z2PAY)
        (display . g$12304$1Z2PAY)
        (close-output-port . g$12303$1Z2PAY)
        (close-input-port . g$12302$1Z2PAY)
        (eof-object? . g$12301$1Z2PAY)
        (eof-object . g$12300$1Z2PAY)
        (current-error-port . g$12299$1Z2PAY)
        (current-output-port . g$12298$1Z2PAY)
        (current-input-port . g$12297$1Z2PAY)
        (output-port? . g$12296$1Z2PAY)
        (input-port? . g$12295$1Z2PAY)
        (make-i/o-write-error . g$7188$1Z2PAY)
        (make-i/o-read-error . g$7174$1Z2PAY)
        (make-i/o-port-error . g$7293$1Z2PAY)
        (make-i/o-invalid-position-error . g$7203$1Z2PAY)
        (make-i/o-filename-error . g$7220$1Z2PAY)
        (make-i/o-file-protection-error . g$7236$1Z2PAY)
        (make-i/o-file-is-read-only-error . g$7250$1Z2PAY)
        (make-i/o-file-does-not-exist-error . g$7278$1Z2PAY)
        (make-i/o-file-already-exists-error . g$7264$1Z2PAY)
        (make-i/o-error . g$7160$1Z2PAY)
        (i/o-write-error? . g$7189$1Z2PAY)
        (i/o-read-error? . g$7175$1Z2PAY)
        (i/o-port-error? . g$7295$1Z2PAY)
        (i/o-invalid-position-error? . g$7205$1Z2PAY)
        (i/o-error-position . g$7206$1Z2PAY)
        (i/o-filename-error? . g$7222$1Z2PAY)
        (i/o-file-protection-error? . g$7237$1Z2PAY)
        (i/o-file-is-read-only-error? . g$7251$1Z2PAY)
        (i/o-file-does-not-exist-error? . g$7279$1Z2PAY)
        (i/o-file-already-exists-error? . g$7265$1Z2PAY)
        (i/o-error? . g$7161$1Z2PAY)
        (i/o-error-port . g$7296$1Z2PAY)
        (i/o-error-filename . g$7223$1Z2PAY)
        (&i/o-port . g$11940$1Z2PAY)
        (&i/o-file-does-not-exist . g$11939$1Z2PAY)
        (&i/o-file-already-exists . g$11938$1Z2PAY)
        (&i/o-file-is-read-only . g$11937$1Z2PAY)
        (&i/o-file-protection . g$11936$1Z2PAY)
        (&i/o-filename . g$11935$1Z2PAY)
        (&i/o-invalid-position . g$11934$1Z2PAY)
        (&i/o-write . g$11933$1Z2PAY)
        (&i/o-read . g$11932$1Z2PAY)
        (&i/o . g$11931$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12479$1Z2PAY
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$12255$1Z2PAY)
        (utf32->string . g$12219$1Z2PAY)
        (utf16->string . g$12218$1Z2PAY)
        (utf8->string . g$12217$1Z2PAY)
        (uint-list->bytevector . g$12216$1Z2PAY)
        (u8-list->bytevector . g$12215$1Z2PAY)
        (string->utf8 . g$12214$1Z2PAY)
        (string->utf32 . g$12213$1Z2PAY)
        (string->utf16 . g$12212$1Z2PAY)
        (sint-list->bytevector . g$12211$1Z2PAY)
        (native-endianness . g$6509$1Z2PAY)
        (bytevector? . g$12210$1Z2PAY)
        (bytevector=? . g$12209$1Z2PAY)
        (bytevector-uint-set! . g$12208$1Z2PAY)
        (bytevector-uint-ref . g$12207$1Z2PAY)
        (bytevector-u8-set! . g$12206$1Z2PAY)
        (bytevector-u8-ref . g$12205$1Z2PAY)
        (bytevector-u64-set! . g$6530$1Z2PAY)
        (bytevector-u64-ref . g$6526$1Z2PAY)
        (bytevector-u64-native-set! . g$6532$1Z2PAY)
        (bytevector-u64-native-ref . g$6528$1Z2PAY)
        (bytevector-u32-set! . g$6522$1Z2PAY)
        (bytevector-u32-ref . g$6518$1Z2PAY)
        (bytevector-u32-native-set! . g$6524$1Z2PAY)
        (bytevector-u32-native-ref . g$6520$1Z2PAY)
        (bytevector-u16-set! . g$6514$1Z2PAY)
        (bytevector-u16-ref . g$6510$1Z2PAY)
        (bytevector-u16-native-set! . g$6516$1Z2PAY)
        (bytevector-u16-native-ref . g$6512$1Z2PAY)
        (bytevector-sint-set! . g$12204$1Z2PAY)
        (bytevector-sint-ref . g$12203$1Z2PAY)
        (bytevector-s8-set! . g$12202$1Z2PAY)
        (bytevector-s8-ref . g$12201$1Z2PAY)
        (bytevector-s64-set! . g$6531$1Z2PAY)
        (bytevector-s64-ref . g$6527$1Z2PAY)
        (bytevector-s64-native-set! . g$6533$1Z2PAY)
        (bytevector-s64-native-ref . g$6529$1Z2PAY)
        (bytevector-s32-set! . g$6523$1Z2PAY)
        (bytevector-s32-ref . g$6519$1Z2PAY)
        (bytevector-s32-native-set! . g$6525$1Z2PAY)
        (bytevector-s32-native-ref . g$6521$1Z2PAY)
        (bytevector-s16-set! . g$6515$1Z2PAY)
        (bytevector-s16-ref . g$6511$1Z2PAY)
        (bytevector-s16-native-set! . g$6517$1Z2PAY)
        (bytevector-s16-native-ref . g$6513$1Z2PAY)
        (bytevector-length . g$12200$1Z2PAY)
        (bytevector-ieee-single-set! . g$12199$1Z2PAY)
        (bytevector-ieee-single-ref . g$12198$1Z2PAY)
        (bytevector-ieee-single-native-set! . g$6536$1Z2PAY)
        (bytevector-ieee-single-native-ref . g$6534$1Z2PAY)
        (bytevector-ieee-double-set! . g$12197$1Z2PAY)
        (bytevector-ieee-double-ref . g$12196$1Z2PAY)
        (bytevector-ieee-double-native-set! . g$6537$1Z2PAY)
        (bytevector-ieee-double-native-ref . g$6535$1Z2PAY)
        (bytevector-fill! . g$12195$1Z2PAY)
        (bytevector-copy! . g$12194$1Z2PAY)
        (bytevector-copy . g$12193$1Z2PAY)
        (bytevector->uint-list . g$12192$1Z2PAY)
        (bytevector->u8-list . g$12191$1Z2PAY)
        (bytevector->sint-list . g$12190$1Z2PAY)
        (endianness . g$11885$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12480$1Z2PAY
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12362$1Z2PAY)
        (string-titlecase . g$12361$1Z2PAY)
        (string-normalize-nfkd . g$12360$1Z2PAY)
        (string-normalize-nfkc . g$12359$1Z2PAY)
        (string-normalize-nfd . g$12358$1Z2PAY)
        (string-normalize-nfc . g$12357$1Z2PAY)
        (string-foldcase . g$12356$1Z2PAY)
        (string-downcase . g$12355$1Z2PAY)
        (string-ci>? . g$6928$1Z2PAY)
        (string-ci>=? . g$6930$1Z2PAY)
        (string-ci=? . g$6926$1Z2PAY)
        (string-ci<? . g$6927$1Z2PAY)
        (string-ci<=? . g$6929$1Z2PAY)
        (char-whitespace? . g$12354$1Z2PAY)
        (char-upper-case? . g$12353$1Z2PAY)
        (char-title-case? . g$12352$1Z2PAY)
        (char-numeric? . g$12351$1Z2PAY)
        (char-lower-case? . g$12350$1Z2PAY)
        (char-general-category . g$12349$1Z2PAY)
        (char-upcase . g$12348$1Z2PAY)
        (char-titlecase . g$12347$1Z2PAY)
        (char-foldcase . g$12346$1Z2PAY)
        (char-downcase . g$12345$1Z2PAY)
        (char-ci>? . g$6967$1Z2PAY)
        (char-ci>=? . g$6969$1Z2PAY)
        (char-ci=? . g$6965$1Z2PAY)
        (char-ci<? . g$6966$1Z2PAY)
        (char-ci<=? . g$6968$1Z2PAY)
        (char-alphabetic? . g$12344$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12481$1Z2PAY
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$12227$1Z2PAY)
        (raise-continuable . g$12226$1Z2PAY)
        (raise . g$12225$1Z2PAY)
        (guard . g$11900$1Z2PAY)
        (else . g$11889$1Z2PAY)
        (=> . g$11888$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12482$1Z2PAY
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$7029$1Z2PAY)
        (bitwise-reverse-bit-field . g$12105$1Z2PAY)
        (bitwise-length . g$12104$1Z2PAY)
        (bitwise-if . g$7023$1Z2PAY)
        (bitwise-first-bit-set . g$12103$1Z2PAY)
        (bitwise-copy-bit-field . g$7026$1Z2PAY)
        (bitwise-copy-bit . g$7024$1Z2PAY)
        (bitwise-bit-set? . g$12102$1Z2PAY)
        (bitwise-bit-field . g$12101$1Z2PAY)
        (bitwise-bit-count . g$12100$1Z2PAY)
        (bitwise-xor . g$12099$1Z2PAY)
        (bitwise-ior . g$12098$1Z2PAY)
        (bitwise-and . g$12097$1Z2PAY)
        (bitwise-not . g$12096$1Z2PAY)
        (bitwise-arithmetic-shift-right . g$7028$1Z2PAY)
        (bitwise-arithmetic-shift-left . g$7027$1Z2PAY)
        (bitwise-arithmetic-shift . g$12095$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12483$1Z2PAY
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$12143$1Z2PAY)
        (fxxor . g$12142$1Z2PAY)
        (fxrotate-bit-field . g$7077$1Z2PAY)
        (fxreverse-bit-field . g$12141$1Z2PAY)
        (fxpositive? . g$12140$1Z2PAY)
        (fxodd? . g$12139$1Z2PAY)
        (fxnot . g$12138$1Z2PAY)
        (fxnegative? . g$12137$1Z2PAY)
        (fxmod0 . g$12136$1Z2PAY)
        (fxmod . g$12135$1Z2PAY)
        (fxmin . g$12134$1Z2PAY)
        (fxmax . g$12133$1Z2PAY)
        (fxlength . g$12132$1Z2PAY)
        (fxior . g$12131$1Z2PAY)
        (fxif . g$7071$1Z2PAY)
        (fxfirst-bit-set . g$12130$1Z2PAY)
        (fxeven? . g$12129$1Z2PAY)
        (fxdiv0-and-mod0 . g$12128$1Z2PAY)
        (fxdiv0 . g$12127$1Z2PAY)
        (fxdiv-and-mod . g$12126$1Z2PAY)
        (fxdiv . g$12125$1Z2PAY)
        (fxcopy-bit-field . g$7074$1Z2PAY)
        (fxcopy-bit . g$7072$1Z2PAY)
        (fxbit-set? . g$12124$1Z2PAY)
        (fxbit-field . g$7073$1Z2PAY)
        (fxbit-count . g$12123$1Z2PAY)
        (fxarithmetic-shift-right . g$7076$1Z2PAY)
        (fxarithmetic-shift-left . g$7075$1Z2PAY)
        (fxarithmetic-shift . g$12122$1Z2PAY)
        (fxand . g$12121$1Z2PAY)
        (fx>? . g$12120$1Z2PAY)
        (fx>=? . g$12119$1Z2PAY)
        (fx=? . g$12118$1Z2PAY)
        (fx<? . g$12117$1Z2PAY)
        (fx<=? . g$12116$1Z2PAY)
        (fx-/carry . g$12115$1Z2PAY)
        (fx- . g$12114$1Z2PAY)
        (fx+/carry . g$12113$1Z2PAY)
        (fx+ . g$12112$1Z2PAY)
        (fx*/carry . g$12111$1Z2PAY)
        (fx* . g$12110$1Z2PAY)
        (greatest-fixnum . g$12109$1Z2PAY)
        (least-fixnum . g$12108$1Z2PAY)
        (fixnum-width . g$12107$1Z2PAY)
        (fixnum? . g$12106$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12484$1Z2PAY
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$7146$1Z2PAY)
        (no-infinities-violation? . g$7132$1Z2PAY)
        (make-no-nans-violation . g$7145$1Z2PAY)
        (make-no-infinities-violation . g$7131$1Z2PAY)
        (real->flonum . g$12189$1Z2PAY)
        (flzero? . g$12188$1Z2PAY)
        (fltruncate . g$12187$1Z2PAY)
        (fltan . g$12186$1Z2PAY)
        (flsqrt . g$12185$1Z2PAY)
        (flsin . g$12184$1Z2PAY)
        (flround . g$12183$1Z2PAY)
        (flpositive? . g$12182$1Z2PAY)
        (flonum? . g$12181$1Z2PAY)
        (flodd? . g$12180$1Z2PAY)
        (flnumerator . g$12179$1Z2PAY)
        (flnegative? . g$12178$1Z2PAY)
        (flnan? . g$12177$1Z2PAY)
        (flmod0 . g$12176$1Z2PAY)
        (flmod . g$12175$1Z2PAY)
        (flmin . g$12174$1Z2PAY)
        (flmax . g$12173$1Z2PAY)
        (fllog . g$12172$1Z2PAY)
        (flinteger? . g$12171$1Z2PAY)
        (flinfinite? . g$12170$1Z2PAY)
        (flfloor . g$12169$1Z2PAY)
        (flfinite? . g$12168$1Z2PAY)
        (flexpt . g$12167$1Z2PAY)
        (flexp . g$12166$1Z2PAY)
        (fleven? . g$12165$1Z2PAY)
        (fldiv0-and-mod0 . g$12164$1Z2PAY)
        (fldiv0 . g$12163$1Z2PAY)
        (fldiv-and-mod . g$12162$1Z2PAY)
        (fldiv . g$12161$1Z2PAY)
        (fldenominator . g$12160$1Z2PAY)
        (flcos . g$12159$1Z2PAY)
        (flceiling . g$12158$1Z2PAY)
        (flatan . g$12157$1Z2PAY)
        (flasin . g$12156$1Z2PAY)
        (flacos . g$12155$1Z2PAY)
        (flabs . g$12154$1Z2PAY)
        (fl>? . g$12153$1Z2PAY)
        (fl>=? . g$12152$1Z2PAY)
        (fl=? . g$12151$1Z2PAY)
        (fl<? . g$12150$1Z2PAY)
        (fl<=? . g$12149$1Z2PAY)
        (fl/ . g$12148$1Z2PAY)
        (fl- . g$12147$1Z2PAY)
        (fl+ . g$12146$1Z2PAY)
        (fl* . g$12145$1Z2PAY)
        (fixnum->flonum . g$12144$1Z2PAY)
        (&no-nans . g$11944$1Z2PAY)
        (&no-infinities . g$11943$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12485$1Z2PAY
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$12324$1Z2PAY)
        (string-ci-hash . g$12323$1Z2PAY)
        (string-hash . g$12322$1Z2PAY)
        (equal-hash . g$12321$1Z2PAY)
        (hashtable-equivalence-function . g$12320$1Z2PAY)
        (make-hashtable . g$12319$1Z2PAY)
        (hashtable-hash-function . g$12318$1Z2PAY)
        (make-eqv-hashtable . g$6470$1Z2PAY)
        (make-eq-hashtable . g$6469$1Z2PAY)
        (hashtable? . g$12317$1Z2PAY)
        (hashtable-update! . g$6476$1Z2PAY)
        (hashtable-size . g$6471$1Z2PAY)
        (hashtable-set! . g$6473$1Z2PAY)
        (hashtable-ref . g$6472$1Z2PAY)
        (hashtable-mutable? . g$12316$1Z2PAY)
        (hashtable-keys . g$12315$1Z2PAY)
        (hashtable-entries . g$12314$1Z2PAY)
        (hashtable-delete! . g$6474$1Z2PAY)
        (hashtable-copy . g$12313$1Z2PAY)
        (hashtable-contains? . g$6475$1Z2PAY)
        (hashtable-clear! . g$6477$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12486$1Z2PAY
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$12301$1Z2PAY)
        (eof-object . g$12300$1Z2PAY)
        (current-error-port . g$12299$1Z2PAY)
        (current-output-port . g$12298$1Z2PAY)
        (current-input-port . g$12297$1Z2PAY)
        (output-port? . g$12296$1Z2PAY)
        (input-port? . g$12295$1Z2PAY)
        (utf-8-codec . g$12294$1Z2PAY)
        (utf-16-codec . g$12293$1Z2PAY)
        (transcoder-error-handling-mode . g$12292$1Z2PAY)
        (transcoder-eol-style . g$12291$1Z2PAY)
        (transcoder-codec . g$12290$1Z2PAY)
        (transcoded-port . g$12289$1Z2PAY)
        (textual-port? . g$12288$1Z2PAY)
        (string->bytevector . g$12287$1Z2PAY)
        (standard-output-port . g$12286$1Z2PAY)
        (standard-input-port . g$12285$1Z2PAY)
        (standard-error-port . g$12284$1Z2PAY)
        (set-port-position! . g$12283$1Z2PAY)
        (put-u8 . g$12282$1Z2PAY)
        (put-string . g$12281$1Z2PAY)
        (put-datum . g$12280$1Z2PAY)
        (put-char . g$12279$1Z2PAY)
        (put-bytevector . g$12278$1Z2PAY)
        (port? . g$7332$1Z2PAY)
        (port-transcoder . g$12277$1Z2PAY)
        (port-position . g$12276$1Z2PAY)
        (port-has-set-port-position!? . g$12275$1Z2PAY)
        (port-has-port-position? . g$12274$1Z2PAY)
        (port-eof? . g$12273$1Z2PAY)
        (output-port-buffer-mode . g$12272$1Z2PAY)
        (open-string-output-port . g$7331$1Z2PAY)
        (open-string-input-port . g$12271$1Z2PAY)
        (open-file-output-port . g$12270$1Z2PAY)
        (open-file-input/output-port . g$12269$1Z2PAY)
        (open-file-input-port . g$12268$1Z2PAY)
        (open-bytevector-output-port . g$12267$1Z2PAY)
        (open-bytevector-input-port . g$12266$1Z2PAY)
        (native-transcoder . g$12265$1Z2PAY)
        (native-eol-style . g$12264$1Z2PAY)
        (make-transcoder . g$12263$1Z2PAY)
        (latin-1-codec . g$12262$1Z2PAY)
        (make-i/o-write-error . g$7188$1Z2PAY)
        (make-i/o-read-error . g$7174$1Z2PAY)
        (make-i/o-port-error . g$7293$1Z2PAY)
        (make-i/o-invalid-position-error . g$7203$1Z2PAY)
        (make-i/o-filename-error . g$7220$1Z2PAY)
        (make-i/o-file-protection-error . g$7236$1Z2PAY)
        (make-i/o-file-is-read-only-error . g$7250$1Z2PAY)
        (make-i/o-file-does-not-exist-error . g$7278$1Z2PAY)
        (make-i/o-file-already-exists-error . g$7264$1Z2PAY)
        (make-i/o-error . g$7160$1Z2PAY)
        (make-i/o-encoding-error . g$7324$1Z2PAY)
        (make-i/o-decoding-error . g$7309$1Z2PAY)
        (make-custom-textual-output-port . g$12261$1Z2PAY)
        (make-custom-textual-input/output-port . g$12260$1Z2PAY)
        (make-custom-textual-input-port . g$12259$1Z2PAY)
        (make-custom-binary-output-port . g$12258$1Z2PAY)
        (make-custom-binary-input/output-port . g$12257$1Z2PAY)
        (make-custom-binary-input-port . g$12256$1Z2PAY)
        (lookahead-u8 . g$12254$1Z2PAY)
        (lookahead-char . g$12253$1Z2PAY)
        (i/o-write-error? . g$7189$1Z2PAY)
        (i/o-read-error? . g$7175$1Z2PAY)
        (i/o-port-error? . g$7295$1Z2PAY)
        (i/o-invalid-position-error? . g$7205$1Z2PAY)
        (i/o-error-position . g$7206$1Z2PAY)
        (i/o-filename-error? . g$7222$1Z2PAY)
        (i/o-file-protection-error? . g$7237$1Z2PAY)
        (i/o-file-is-read-only-error? . g$7251$1Z2PAY)
        (i/o-file-does-not-exist-error? . g$7279$1Z2PAY)
        (i/o-file-already-exists-error? . g$7265$1Z2PAY)
        (i/o-error? . g$7161$1Z2PAY)
        (i/o-error-port . g$7296$1Z2PAY)
        (i/o-error-filename . g$7223$1Z2PAY)
        (i/o-encoding-error? . g$7326$1Z2PAY)
        (i/o-encoding-error-char . g$7327$1Z2PAY)
        (i/o-decoding-error? . g$7310$1Z2PAY)
        (get-u8 . g$12252$1Z2PAY)
        (get-string-n! . g$12251$1Z2PAY)
        (get-string-n . g$12250$1Z2PAY)
        (get-string-all . g$12249$1Z2PAY)
        (get-line . g$12248$1Z2PAY)
        (get-datum . g$12247$1Z2PAY)
        (get-char . g$12246$1Z2PAY)
        (get-bytevector-some . g$12245$1Z2PAY)
        (get-bytevector-n! . g$12244$1Z2PAY)
        (get-bytevector-n . g$12243$1Z2PAY)
        (get-bytevector-all . g$12242$1Z2PAY)
        (flush-output-port . g$12241$1Z2PAY)
        (close-port . g$12240$1Z2PAY)
        (call-with-string-output-port . g$7333$1Z2PAY)
        (call-with-port . g$12239$1Z2PAY)
        (call-with-bytevector-output-port . g$12238$1Z2PAY)
        (bytevector->string . g$12237$1Z2PAY)
        (buffer-mode? . g$12236$1Z2PAY)
        (binary-port? . g$12235$1Z2PAY)
        (&i/o-encoding . g$11942$1Z2PAY)
        (&i/o-decoding . g$11941$1Z2PAY)
        (&i/o-port . g$11940$1Z2PAY)
        (&i/o-file-does-not-exist . g$11939$1Z2PAY)
        (&i/o-file-already-exists . g$11938$1Z2PAY)
        (&i/o-file-is-read-only . g$11937$1Z2PAY)
        (&i/o-file-protection . g$11936$1Z2PAY)
        (&i/o-filename . g$11935$1Z2PAY)
        (&i/o-invalid-position . g$11934$1Z2PAY)
        (&i/o-write . g$11933$1Z2PAY)
        (&i/o-read . g$11932$1Z2PAY)
        (&i/o . g$11931$1Z2PAY)
        (error-handling-mode . g$11904$1Z2PAY)
        (file-options . g$11903$1Z2PAY)
        (buffer-mode . g$11902$1Z2PAY)
        (eol-style . g$11901$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12487$1Z2PAY
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$7417$1Z2PAY)
        (enum-set=? . g$7424$1Z2PAY)
        (enum-set-universe . g$7418$1Z2PAY)
        (enum-set-union . g$7425$1Z2PAY)
        (enum-set-subset? . g$7423$1Z2PAY)
        (enum-set-projection . g$7429$1Z2PAY)
        (enum-set-member? . g$7422$1Z2PAY)
        (enum-set-intersection . g$7426$1Z2PAY)
        (enum-set-indexer . g$7419$1Z2PAY)
        (enum-set-difference . g$7427$1Z2PAY)
        (enum-set-constructor . g$7420$1Z2PAY)
        (enum-set-complement . g$7428$1Z2PAY)
        (enum-set->list . g$7421$1Z2PAY)
        (define-enumeration . g$11915$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12488$1Z2PAY
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$6757$1Z2PAY)
        (warning? . g$6668$1Z2PAY)
        (violation? . g$6710$1Z2PAY)
        (undefined-violation? . g$6834$1Z2PAY)
        (syntax-violation? . g$6818$1Z2PAY)
        (syntax-violation-subform . g$6820$1Z2PAY)
        (syntax-violation-form . g$6819$1Z2PAY)
        (syntax-violation . g$8829$1Z2PAY)
        (simple-conditions . g$12224$1Z2PAY)
        (serious-condition? . g$6682$1Z2PAY)
        (non-continuable-violation? . g$6772$1Z2PAY)
        (message-condition? . g$6653$1Z2PAY)
        (make-who-condition . g$6755$1Z2PAY)
        (make-warning . g$6667$1Z2PAY)
        (make-violation . g$6709$1Z2PAY)
        (make-undefined-violation . g$6833$1Z2PAY)
        (make-syntax-violation . g$6815$1Z2PAY)
        (make-serious-condition . g$6681$1Z2PAY)
        (make-non-continuable-violation . g$6771$1Z2PAY)
        (make-message-condition . g$6651$1Z2PAY)
        (make-lexical-violation . g$6799$1Z2PAY)
        (make-irritants-condition . g$6738$1Z2PAY)
        (make-implementation-restriction-violation . g$6785$1Z2PAY)
        (make-error . g$6695$1Z2PAY)
        (make-assertion-violation . g$6723$1Z2PAY)
        (lexical-violation? . g$6800$1Z2PAY)
        (irritants-condition? . g$6740$1Z2PAY)
        (implementation-restriction-violation? . g$6786$1Z2PAY)
        (error? . g$6696$1Z2PAY)
        (condition-who . g$6758$1Z2PAY)
        (condition-predicate . g$12223$1Z2PAY)
        (condition-message . g$6654$1Z2PAY)
        (condition-irritants . g$6741$1Z2PAY)
        (condition-accessor . g$12222$1Z2PAY)
        (condition . g$12221$1Z2PAY)
        (assertion-violation? . g$6724$1Z2PAY)
        (condition? . g$12220$1Z2PAY)
        (&non-continuable . g$11930$1Z2PAY)
        (&undefined . g$11929$1Z2PAY)
        (&syntax . g$11928$1Z2PAY)
        (&lexical . g$11927$1Z2PAY)
        (&implementation-restriction . g$11926$1Z2PAY)
        (&who . g$11925$1Z2PAY)
        (&irritants . g$11924$1Z2PAY)
        (&assertion . g$11923$1Z2PAY)
        (&violation . g$11922$1Z2PAY)
        (&error . g$11921$1Z2PAY)
        (&serious . g$11920$1Z2PAY)
        (&warning . g$11919$1Z2PAY)
        (&message . g$11918$1Z2PAY)
        (&condition . g$11917$1Z2PAY)
        (define-condition-type . g$11916$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12489$1Z2PAY
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$12336$1Z2PAY)
        (record-type-uid . g$12335$1Z2PAY)
        (record-type-sealed? . g$12334$1Z2PAY)
        (record-type-parent . g$12333$1Z2PAY)
        (record-type-opaque? . g$12332$1Z2PAY)
        (record-type-name . g$12331$1Z2PAY)
        (record-type-generative? . g$12330$1Z2PAY)
        (record-type-field-names . g$12329$1Z2PAY)
        (record-rtd . g$12328$1Z2PAY)
        (record-field-mutable? . g$12327$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12490$1Z2PAY
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$12343$1Z2PAY)
        (record-predicate . g$12342$1Z2PAY)
        (record-mutator . g$12341$1Z2PAY)
        (record-constructor . g$12340$1Z2PAY)
        (record-accessor . g$12339$1Z2PAY)
        (make-record-type-descriptor . g$12338$1Z2PAY)
        (make-record-constructor-descriptor . g$12337$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12491$1Z2PAY
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$11914$1Z2PAY)
        (parent-rtd . g$11913$1Z2PAY)
        (nongenerative . g$11912$1Z2PAY)
        (opaque . g$11911$1Z2PAY)
        (sealed . g$11910$1Z2PAY)
        (protocol . g$11909$1Z2PAY)
        (parent . g$11908$1Z2PAY)
        (immutable . g$11907$1Z2PAY)
        (mutable . g$11906$1Z2PAY)
        (fields . g$11905$1Z2PAY)
        (record-constructor-descriptor . g$11866$1Z2PAY)
        (record-type-descriptor . g$11865$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12492$1Z2PAY
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$8702$1Z2PAY)
        (&no-nans-rcd . g$12456$1Z2PAY)
        (&no-nans-rtd . g$12455$1Z2PAY)
        (&no-infinities-rcd . g$12454$1Z2PAY)
        (&no-infinities-rtd . g$12453$1Z2PAY)
        (&i/o-encoding-rcd . g$12452$1Z2PAY)
        (&i/o-encoding-rtd . g$12451$1Z2PAY)
        (&i/o-decoding-rcd . g$12450$1Z2PAY)
        (&i/o-decoding-rtd . g$12449$1Z2PAY)
        (&i/o-port-rcd . g$12448$1Z2PAY)
        (&i/o-port-rtd . g$12447$1Z2PAY)
        (&i/o-file-does-not-exist-rcd . g$12446$1Z2PAY)
        (&i/o-file-does-not-exist-rtd . g$12445$1Z2PAY)
        (&i/o-file-already-exists-rcd . g$12444$1Z2PAY)
        (&i/o-file-already-exists-rtd . g$12443$1Z2PAY)
        (&i/o-file-is-read-only-rcd . g$12442$1Z2PAY)
        (&i/o-file-is-read-only-rtd . g$12441$1Z2PAY)
        (&i/o-file-protection-rcd . g$12440$1Z2PAY)
        (&i/o-file-protection-rtd . g$12439$1Z2PAY)
        (&i/o-filename-rcd . g$12438$1Z2PAY)
        (&i/o-filename-rtd . g$12437$1Z2PAY)
        (&i/o-invalid-position-rcd . g$12436$1Z2PAY)
        (&i/o-invalid-position-rtd . g$12435$1Z2PAY)
        (&i/o-write-rcd . g$12434$1Z2PAY)
        (&i/o-write-rtd . g$12433$1Z2PAY)
        (&i/o-read-rcd . g$12432$1Z2PAY)
        (&i/o-read-rtd . g$12431$1Z2PAY)
        (&i/o-rcd . g$12430$1Z2PAY)
        (&i/o-rtd . g$12429$1Z2PAY)
        (&undefined-rcd . g$12428$1Z2PAY)
        (&undefined-rtd . g$12427$1Z2PAY)
        (&syntax-rcd . g$12426$1Z2PAY)
        (&syntax-rtd . g$12425$1Z2PAY)
        (&lexical-rcd . g$12424$1Z2PAY)
        (&lexical-rtd . g$12423$1Z2PAY)
        (&implementation-restriction-rcd . g$12422$1Z2PAY)
        (&implementation-restriction-rtd . g$12421$1Z2PAY)
        (&non-continuable-rcd . g$12420$1Z2PAY)
        (&non-continuable-rtd . g$12419$1Z2PAY)
        (&who-rcd . g$12418$1Z2PAY)
        (&who-rtd . g$12417$1Z2PAY)
        (&irritants-rcd . g$12416$1Z2PAY)
        (&irritants-rtd . g$12415$1Z2PAY)
        (&assertion-rcd . g$12414$1Z2PAY)
        (&assertion-rtd . g$12413$1Z2PAY)
        (&violation-rcd . g$12412$1Z2PAY)
        (&violation-rtd . g$12411$1Z2PAY)
        (&error-rcd . g$12410$1Z2PAY)
        (&error-rtd . g$12409$1Z2PAY)
        (&serious-rcd . g$12408$1Z2PAY)
        (&serious-rtd . g$12407$1Z2PAY)
        (&warning-rcd . g$12406$1Z2PAY)
        (&warning-rtd . g$12405$1Z2PAY)
        (&message-rcd . g$12404$1Z2PAY)
        (&message-rtd . g$12403$1Z2PAY)
        (&condition-rcd . g$12402$1Z2PAY)
        (&condition-rtd . g$12401$1Z2PAY)
        (library-letrec* . g$12400$1Z2PAY)
        (annotation-stripped . g$12399$1Z2PAY)
        (annotation-source . g$12398$1Z2PAY)
        (annotation-expression . g$12397$1Z2PAY)
        (annotation? . g$12396$1Z2PAY)
        (read-annotated . g$12395$1Z2PAY)
        (tanh . g$12394$1Z2PAY)
        (cosh . g$12393$1Z2PAY)
        (sinh . g$12392$1Z2PAY)
        (make-guid . g$12391$1Z2PAY)
        (unspecified? . g$12390$1Z2PAY)
        (make-trace . g$12389$1Z2PAY)
        (make-list . g$12388$1Z2PAY)
        (last-pair . g$12387$1Z2PAY)
        (load-r5rs . g$12386$1Z2PAY)
        (license . g$12385$1Z2PAY)
        (stacktrace . g$12384$1Z2PAY)
        (ironscheme-build . g$11808$1Z2PAY)
        (define-clr-class-internal . g$12383$1Z2PAY)
        (clr-field-set!-internal . g$12382$1Z2PAY)
        (clr-field-get-internal . g$12381$1Z2PAY)
        (clr-cast-internal . g$12380$1Z2PAY)
        (clr-call-internal . g$12379$1Z2PAY)
        (clr-new-internal . g$12378$1Z2PAY)
        (clr-new-array-internal . g$12377$1Z2PAY)
        (clr-is-internal . g$12376$1Z2PAY)
        (clr-reference-internal . g$12375$1Z2PAY)
        (clr-using-internal . g$12374$1Z2PAY)
        (clr-clear-usings-internal . g$12373$1Z2PAY)
        (syntax-error . g$8826$1Z2PAY)
        (syntax-dispatch . g$8697$1Z2PAY)
        (compile-core . g$12372$1Z2PAY)
        (eval-core . g$12371$1Z2PAY)
        (set-symbol-value! . g$12370$1Z2PAY)
        (symbol-value . g$12369$1Z2PAY)
        (ungensym . g$12368$1Z2PAY)
        (gensym . g$12367$1Z2PAY)
        (void . g$12366$1Z2PAY)
        (load-serialized-library . g$12365$1Z2PAY)
        (serialize-library . g$12364$1Z2PAY)
        (compile-system-libraries . g$11810$1Z2PAY)
        (compile->closure . g$11812$1Z2PAY)
        (compile . g$11811$1Z2PAY)
        (load . g$11807$1Z2PAY)
        (interaction-environment . g$8835$1Z2PAY)
        (char-ready? . g$12363$1Z2PAY)
        (string-upcase . g$12362$1Z2PAY)
        (string-titlecase . g$12361$1Z2PAY)
        (string-normalize-nfkd . g$12360$1Z2PAY)
        (string-normalize-nfkc . g$12359$1Z2PAY)
        (string-normalize-nfd . g$12358$1Z2PAY)
        (string-normalize-nfc . g$12357$1Z2PAY)
        (string-foldcase . g$12356$1Z2PAY)
        (string-downcase . g$12355$1Z2PAY)
        (string-ci>? . g$6928$1Z2PAY)
        (string-ci>=? . g$6930$1Z2PAY)
        (string-ci=? . g$6926$1Z2PAY)
        (string-ci<? . g$6927$1Z2PAY)
        (string-ci<=? . g$6929$1Z2PAY)
        (char-whitespace? . g$12354$1Z2PAY)
        (char-upper-case? . g$12353$1Z2PAY)
        (char-title-case? . g$12352$1Z2PAY)
        (char-numeric? . g$12351$1Z2PAY)
        (char-lower-case? . g$12350$1Z2PAY)
        (char-general-category . g$12349$1Z2PAY)
        (char-upcase . g$12348$1Z2PAY)
        (char-titlecase . g$12347$1Z2PAY)
        (char-foldcase . g$12346$1Z2PAY)
        (char-downcase . g$12345$1Z2PAY)
        (char-ci>? . g$6967$1Z2PAY)
        (char-ci>=? . g$6969$1Z2PAY)
        (char-ci=? . g$6965$1Z2PAY)
        (char-ci<? . g$6966$1Z2PAY)
        (char-ci<=? . g$6968$1Z2PAY)
        (char-alphabetic? . g$12344$1Z2PAY)
        (variable-transformer-procedure . g$8434$1Z2PAY)
        (variable-transformer? . g$8433$1Z2PAY)
        (make-variable-transformer . g$8432$1Z2PAY)
        (identifier? . g$8830$1Z2PAY)
        (generate-temporaries . g$8819$1Z2PAY)
        (free-identifier=? . g$8820$1Z2PAY)
        (syntax->datum . g$8832$1Z2PAY)
        (datum->syntax . g$8831$1Z2PAY)
        (bound-identifier=? . g$8821$1Z2PAY)
        (record-type-descriptor? . g$12343$1Z2PAY)
        (record-predicate . g$12342$1Z2PAY)
        (record-mutator . g$12341$1Z2PAY)
        (record-constructor . g$12340$1Z2PAY)
        (record-accessor . g$12339$1Z2PAY)
        (make-record-type-descriptor . g$12338$1Z2PAY)
        (make-record-constructor-descriptor . g$12337$1Z2PAY)
        (record? . g$12336$1Z2PAY)
        (record-type-uid . g$12335$1Z2PAY)
        (record-type-sealed? . g$12334$1Z2PAY)
        (record-type-parent . g$12333$1Z2PAY)
        (record-type-opaque? . g$12332$1Z2PAY)
        (record-type-name . g$12331$1Z2PAY)
        (record-type-generative? . g$12330$1Z2PAY)
        (record-type-field-names . g$12329$1Z2PAY)
        (record-rtd . g$12328$1Z2PAY)
        (record-field-mutable? . g$12327$1Z2PAY)
        (delete-file . g$6503$1Z2PAY)
        (file-exists? . g$6502$1Z2PAY)
        (vector-sort! . g$12326$1Z2PAY)
        (vector-sort . g$12325$1Z2PAY)
        (list-sort . g$6866$1Z2PAY)
        (symbol-hash . g$12324$1Z2PAY)
        (string-ci-hash . g$12323$1Z2PAY)
        (string-hash . g$12322$1Z2PAY)
        (equal-hash . g$12321$1Z2PAY)
        (hashtable-equivalence-function . g$12320$1Z2PAY)
        (make-hashtable . g$12319$1Z2PAY)
        (hashtable-hash-function . g$12318$1Z2PAY)
        (make-eqv-hashtable . g$6470$1Z2PAY)
        (make-eq-hashtable . g$6469$1Z2PAY)
        (hashtable? . g$12317$1Z2PAY)
        (hashtable-update! . g$6476$1Z2PAY)
        (hashtable-size . g$6471$1Z2PAY)
        (hashtable-set! . g$6473$1Z2PAY)
        (hashtable-ref . g$6472$1Z2PAY)
        (hashtable-mutable? . g$12316$1Z2PAY)
        (hashtable-keys . g$12315$1Z2PAY)
        (hashtable-entries . g$12314$1Z2PAY)
        (hashtable-delete! . g$6474$1Z2PAY)
        (hashtable-copy . g$12313$1Z2PAY)
        (hashtable-contains? . g$6475$1Z2PAY)
        (hashtable-clear! . g$6477$1Z2PAY)
        (call-with-output-file . g$7359$1Z2PAY)
        (call-with-input-file . g$7358$1Z2PAY)
        (write-char . g$12312$1Z2PAY)
        (write . g$12311$1Z2PAY)
        (with-output-to-file . g$7357$1Z2PAY)
        (with-input-from-file . g$7356$1Z2PAY)
        (read-char . g$12310$1Z2PAY)
        (read . g$12309$1Z2PAY)
        (peek-char . g$12308$1Z2PAY)
        (open-output-file . g$12307$1Z2PAY)
        (open-input-file . g$12306$1Z2PAY)
        (newline . g$12305$1Z2PAY)
        (display . g$12304$1Z2PAY)
        (close-output-port . g$12303$1Z2PAY)
        (close-input-port . g$12302$1Z2PAY)
        (eof-object? . g$12301$1Z2PAY)
        (eof-object . g$12300$1Z2PAY)
        (current-error-port . g$12299$1Z2PAY)
        (current-output-port . g$12298$1Z2PAY)
        (current-input-port . g$12297$1Z2PAY)
        (output-port? . g$12296$1Z2PAY)
        (input-port? . g$12295$1Z2PAY)
        (utf-8-codec . g$12294$1Z2PAY)
        (utf-16-codec . g$12293$1Z2PAY)
        (transcoder-error-handling-mode . g$12292$1Z2PAY)
        (transcoder-eol-style . g$12291$1Z2PAY)
        (transcoder-codec . g$12290$1Z2PAY)
        (transcoded-port . g$12289$1Z2PAY)
        (textual-port? . g$12288$1Z2PAY)
        (string->bytevector . g$12287$1Z2PAY)
        (standard-output-port . g$12286$1Z2PAY)
        (standard-input-port . g$12285$1Z2PAY)
        (standard-error-port . g$12284$1Z2PAY)
        (set-port-position! . g$12283$1Z2PAY)
        (put-u8 . g$12282$1Z2PAY)
        (put-string . g$12281$1Z2PAY)
        (put-datum . g$12280$1Z2PAY)
        (put-char . g$12279$1Z2PAY)
        (put-bytevector . g$12278$1Z2PAY)
        (port? . g$7332$1Z2PAY)
        (port-transcoder . g$12277$1Z2PAY)
        (port-position . g$12276$1Z2PAY)
        (port-has-set-port-position!? . g$12275$1Z2PAY)
        (port-has-port-position? . g$12274$1Z2PAY)
        (port-eof? . g$12273$1Z2PAY)
        (output-port-buffer-mode . g$12272$1Z2PAY)
        (open-string-output-port . g$7331$1Z2PAY)
        (open-string-input-port . g$12271$1Z2PAY)
        (open-file-output-port . g$12270$1Z2PAY)
        (open-file-input/output-port . g$12269$1Z2PAY)
        (open-file-input-port . g$12268$1Z2PAY)
        (open-bytevector-output-port . g$12267$1Z2PAY)
        (open-bytevector-input-port . g$12266$1Z2PAY)
        (native-transcoder . g$12265$1Z2PAY)
        (native-eol-style . g$12264$1Z2PAY)
        (make-transcoder . g$12263$1Z2PAY)
        (latin-1-codec . g$12262$1Z2PAY)
        (make-i/o-write-error . g$7188$1Z2PAY)
        (make-i/o-read-error . g$7174$1Z2PAY)
        (make-i/o-port-error . g$7293$1Z2PAY)
        (make-i/o-invalid-position-error . g$7203$1Z2PAY)
        (make-i/o-filename-error . g$7220$1Z2PAY)
        (make-i/o-file-protection-error . g$7236$1Z2PAY)
        (make-i/o-file-is-read-only-error . g$7250$1Z2PAY)
        (make-i/o-file-does-not-exist-error . g$7278$1Z2PAY)
        (make-i/o-file-already-exists-error . g$7264$1Z2PAY)
        (make-i/o-error . g$7160$1Z2PAY)
        (make-i/o-encoding-error . g$7324$1Z2PAY)
        (make-i/o-decoding-error . g$7309$1Z2PAY)
        (make-custom-textual-output-port . g$12261$1Z2PAY)
        (make-custom-textual-input/output-port . g$12260$1Z2PAY)
        (make-custom-textual-input-port . g$12259$1Z2PAY)
        (make-custom-binary-output-port . g$12258$1Z2PAY)
        (make-custom-binary-input/output-port . g$12257$1Z2PAY)
        (make-custom-binary-input-port . g$12256$1Z2PAY)
        (make-bytevector . g$12255$1Z2PAY)
        (lookahead-u8 . g$12254$1Z2PAY)
        (lookahead-char . g$12253$1Z2PAY)
        (i/o-write-error? . g$7189$1Z2PAY)
        (i/o-read-error? . g$7175$1Z2PAY)
        (i/o-port-error? . g$7295$1Z2PAY)
        (i/o-invalid-position-error? . g$7205$1Z2PAY)
        (i/o-error-position . g$7206$1Z2PAY)
        (i/o-filename-error? . g$7222$1Z2PAY)
        (i/o-file-protection-error? . g$7237$1Z2PAY)
        (i/o-file-is-read-only-error? . g$7251$1Z2PAY)
        (i/o-file-does-not-exist-error? . g$7279$1Z2PAY)
        (i/o-file-already-exists-error? . g$7265$1Z2PAY)
        (i/o-error? . g$7161$1Z2PAY)
        (i/o-error-port . g$7296$1Z2PAY)
        (i/o-error-filename . g$7223$1Z2PAY)
        (i/o-encoding-error? . g$7326$1Z2PAY)
        (i/o-encoding-error-char . g$7327$1Z2PAY)
        (i/o-decoding-error? . g$7310$1Z2PAY)
        (get-u8 . g$12252$1Z2PAY)
        (get-string-n! . g$12251$1Z2PAY)
        (get-string-n . g$12250$1Z2PAY)
        (get-string-all . g$12249$1Z2PAY)
        (get-line . g$12248$1Z2PAY)
        (get-datum . g$12247$1Z2PAY)
        (get-char . g$12246$1Z2PAY)
        (get-bytevector-some . g$12245$1Z2PAY)
        (get-bytevector-n! . g$12244$1Z2PAY)
        (get-bytevector-n . g$12243$1Z2PAY)
        (get-bytevector-all . g$12242$1Z2PAY)
        (flush-output-port . g$12241$1Z2PAY)
        (close-port . g$12240$1Z2PAY)
        (call-with-string-output-port . g$7333$1Z2PAY)
        (call-with-port . g$12239$1Z2PAY)
        (call-with-bytevector-output-port . g$12238$1Z2PAY)
        (bytevector->string . g$12237$1Z2PAY)
        (buffer-mode? . g$12236$1Z2PAY)
        (binary-port? . g$12235$1Z2PAY)
        (scheme-report-environment . g$8810$1Z2PAY)
        (quotient . g$6846$1Z2PAY)
        (null-environment . g$8809$1Z2PAY)
        (remainder . g$6847$1Z2PAY)
        (modulo . g$6848$1Z2PAY)
        (inexact->exact . g$12234$1Z2PAY)
        (force . g$6850$1Z2PAY)
        (exact->inexact . g$12233$1Z2PAY)
        (exit . g$12232$1Z2PAY)
        (command-line . g$11804$1Z2PAY)
        (string-fill! . g$12231$1Z2PAY)
        (string-set! . g$12230$1Z2PAY)
        (set-cdr! . g$12229$1Z2PAY)
        (set-car! . g$12228$1Z2PAY)
        (remove . g$5858$1Z2PAY)
        (remv . g$5859$1Z2PAY)
        (remp . g$5841$1Z2PAY)
        (remq . g$5860$1Z2PAY)
        (partition . g$5840$1Z2PAY)
        (memv . g$5848$1Z2PAY)
        (memq . g$5847$1Z2PAY)
        (memp . g$5850$1Z2PAY)
        (member . g$5849$1Z2PAY)
        (exists . g$5854$1Z2PAY)
        (for-all . g$5853$1Z2PAY)
        (fold-right . g$5857$1Z2PAY)
        (fold-left . g$5856$1Z2PAY)
        (find . g$5839$1Z2PAY)
        (filter . g$5842$1Z2PAY)
        (cons* . g$5855$1Z2PAY)
        (assv . g$5844$1Z2PAY)
        (assq . g$5843$1Z2PAY)
        (assp . g$5846$1Z2PAY)
        (assoc . g$5845$1Z2PAY)
        (with-exception-handler . g$12227$1Z2PAY)
        (raise-continuable . g$12226$1Z2PAY)
        (raise . g$12225$1Z2PAY)
        (eval . g$8812$1Z2PAY)
        (environment . g$8808$1Z2PAY)
        (make-enumeration . g$7417$1Z2PAY)
        (enum-set=? . g$7424$1Z2PAY)
        (enum-set-universe . g$7418$1Z2PAY)
        (enum-set-union . g$7425$1Z2PAY)
        (enum-set-subset? . g$7423$1Z2PAY)
        (enum-set-projection . g$7429$1Z2PAY)
        (enum-set-member? . g$7422$1Z2PAY)
        (enum-set-intersection . g$7426$1Z2PAY)
        (enum-set-indexer . g$7419$1Z2PAY)
        (enum-set-difference . g$7427$1Z2PAY)
        (enum-set-constructor . g$7420$1Z2PAY)
        (enum-set-complement . g$7428$1Z2PAY)
        (enum-set->list . g$7421$1Z2PAY)
        (who-condition? . g$6757$1Z2PAY)
        (warning? . g$6668$1Z2PAY)
        (violation? . g$6710$1Z2PAY)
        (undefined-violation? . g$6834$1Z2PAY)
        (syntax-violation? . g$6818$1Z2PAY)
        (syntax-violation-subform . g$6820$1Z2PAY)
        (syntax-violation-form . g$6819$1Z2PAY)
        (syntax-violation . g$8829$1Z2PAY)
        (simple-conditions . g$12224$1Z2PAY)
        (serious-condition? . g$6682$1Z2PAY)
        (non-continuable-violation? . g$6772$1Z2PAY)
        (message-condition? . g$6653$1Z2PAY)
        (make-who-condition . g$6755$1Z2PAY)
        (make-warning . g$6667$1Z2PAY)
        (make-violation . g$6709$1Z2PAY)
        (make-undefined-violation . g$6833$1Z2PAY)
        (make-syntax-violation . g$6815$1Z2PAY)
        (make-serious-condition . g$6681$1Z2PAY)
        (make-non-continuable-violation . g$6771$1Z2PAY)
        (make-message-condition . g$6651$1Z2PAY)
        (make-lexical-violation . g$6799$1Z2PAY)
        (make-irritants-condition . g$6738$1Z2PAY)
        (make-implementation-restriction-violation . g$6785$1Z2PAY)
        (make-error . g$6695$1Z2PAY)
        (make-assertion-violation . g$6723$1Z2PAY)
        (lexical-violation? . g$6800$1Z2PAY)
        (irritants-condition? . g$6740$1Z2PAY)
        (implementation-restriction-violation? . g$6786$1Z2PAY)
        (error? . g$6696$1Z2PAY)
        (condition-who . g$6758$1Z2PAY)
        (condition-predicate . g$12223$1Z2PAY)
        (condition-message . g$6654$1Z2PAY)
        (condition-irritants . g$6741$1Z2PAY)
        (condition-accessor . g$12222$1Z2PAY)
        (condition . g$12221$1Z2PAY)
        (assertion-violation? . g$6724$1Z2PAY)
        (condition? . g$12220$1Z2PAY)
        (utf32->string . g$12219$1Z2PAY)
        (utf16->string . g$12218$1Z2PAY)
        (utf8->string . g$12217$1Z2PAY)
        (uint-list->bytevector . g$12216$1Z2PAY)
        (u8-list->bytevector . g$12215$1Z2PAY)
        (string->utf8 . g$12214$1Z2PAY)
        (string->utf32 . g$12213$1Z2PAY)
        (string->utf16 . g$12212$1Z2PAY)
        (sint-list->bytevector . g$12211$1Z2PAY)
        (native-endianness . g$6509$1Z2PAY)
        (bytevector? . g$12210$1Z2PAY)
        (bytevector=? . g$12209$1Z2PAY)
        (bytevector-uint-set! . g$12208$1Z2PAY)
        (bytevector-uint-ref . g$12207$1Z2PAY)
        (bytevector-u8-set! . g$12206$1Z2PAY)
        (bytevector-u8-ref . g$12205$1Z2PAY)
        (bytevector-u64-set! . g$6530$1Z2PAY)
        (bytevector-u64-ref . g$6526$1Z2PAY)
        (bytevector-u64-native-set! . g$6532$1Z2PAY)
        (bytevector-u64-native-ref . g$6528$1Z2PAY)
        (bytevector-u32-set! . g$6522$1Z2PAY)
        (bytevector-u32-ref . g$6518$1Z2PAY)
        (bytevector-u32-native-set! . g$6524$1Z2PAY)
        (bytevector-u32-native-ref . g$6520$1Z2PAY)
        (bytevector-u16-set! . g$6514$1Z2PAY)
        (bytevector-u16-ref . g$6510$1Z2PAY)
        (bytevector-u16-native-set! . g$6516$1Z2PAY)
        (bytevector-u16-native-ref . g$6512$1Z2PAY)
        (bytevector-sint-set! . g$12204$1Z2PAY)
        (bytevector-sint-ref . g$12203$1Z2PAY)
        (bytevector-s8-set! . g$12202$1Z2PAY)
        (bytevector-s8-ref . g$12201$1Z2PAY)
        (bytevector-s64-set! . g$6531$1Z2PAY)
        (bytevector-s64-ref . g$6527$1Z2PAY)
        (bytevector-s64-native-set! . g$6533$1Z2PAY)
        (bytevector-s64-native-ref . g$6529$1Z2PAY)
        (bytevector-s32-set! . g$6523$1Z2PAY)
        (bytevector-s32-ref . g$6519$1Z2PAY)
        (bytevector-s32-native-set! . g$6525$1Z2PAY)
        (bytevector-s32-native-ref . g$6521$1Z2PAY)
        (bytevector-s16-set! . g$6515$1Z2PAY)
        (bytevector-s16-ref . g$6511$1Z2PAY)
        (bytevector-s16-native-set! . g$6517$1Z2PAY)
        (bytevector-s16-native-ref . g$6513$1Z2PAY)
        (bytevector-length . g$12200$1Z2PAY)
        (bytevector-ieee-single-set! . g$12199$1Z2PAY)
        (bytevector-ieee-single-ref . g$12198$1Z2PAY)
        (bytevector-ieee-single-native-set! . g$6536$1Z2PAY)
        (bytevector-ieee-single-native-ref . g$6534$1Z2PAY)
        (bytevector-ieee-double-set! . g$12197$1Z2PAY)
        (bytevector-ieee-double-ref . g$12196$1Z2PAY)
        (bytevector-ieee-double-native-set! . g$6537$1Z2PAY)
        (bytevector-ieee-double-native-ref . g$6535$1Z2PAY)
        (bytevector-fill! . g$12195$1Z2PAY)
        (bytevector-copy! . g$12194$1Z2PAY)
        (bytevector-copy . g$12193$1Z2PAY)
        (bytevector->uint-list . g$12192$1Z2PAY)
        (bytevector->u8-list . g$12191$1Z2PAY)
        (bytevector->sint-list . g$12190$1Z2PAY)
        (no-nans-violation? . g$7146$1Z2PAY)
        (no-infinities-violation? . g$7132$1Z2PAY)
        (make-no-nans-violation . g$7145$1Z2PAY)
        (make-no-infinities-violation . g$7131$1Z2PAY)
        (real->flonum . g$12189$1Z2PAY)
        (flzero? . g$12188$1Z2PAY)
        (fltruncate . g$12187$1Z2PAY)
        (fltan . g$12186$1Z2PAY)
        (flsqrt . g$12185$1Z2PAY)
        (flsin . g$12184$1Z2PAY)
        (flround . g$12183$1Z2PAY)
        (flpositive? . g$12182$1Z2PAY)
        (flonum? . g$12181$1Z2PAY)
        (flodd? . g$12180$1Z2PAY)
        (flnumerator . g$12179$1Z2PAY)
        (flnegative? . g$12178$1Z2PAY)
        (flnan? . g$12177$1Z2PAY)
        (flmod0 . g$12176$1Z2PAY)
        (flmod . g$12175$1Z2PAY)
        (flmin . g$12174$1Z2PAY)
        (flmax . g$12173$1Z2PAY)
        (fllog . g$12172$1Z2PAY)
        (flinteger? . g$12171$1Z2PAY)
        (flinfinite? . g$12170$1Z2PAY)
        (flfloor . g$12169$1Z2PAY)
        (flfinite? . g$12168$1Z2PAY)
        (flexpt . g$12167$1Z2PAY)
        (flexp . g$12166$1Z2PAY)
        (fleven? . g$12165$1Z2PAY)
        (fldiv0-and-mod0 . g$12164$1Z2PAY)
        (fldiv0 . g$12163$1Z2PAY)
        (fldiv-and-mod . g$12162$1Z2PAY)
        (fldiv . g$12161$1Z2PAY)
        (fldenominator . g$12160$1Z2PAY)
        (flcos . g$12159$1Z2PAY)
        (flceiling . g$12158$1Z2PAY)
        (flatan . g$12157$1Z2PAY)
        (flasin . g$12156$1Z2PAY)
        (flacos . g$12155$1Z2PAY)
        (flabs . g$12154$1Z2PAY)
        (fl>? . g$12153$1Z2PAY)
        (fl>=? . g$12152$1Z2PAY)
        (fl=? . g$12151$1Z2PAY)
        (fl<? . g$12150$1Z2PAY)
        (fl<=? . g$12149$1Z2PAY)
        (fl/ . g$12148$1Z2PAY)
        (fl- . g$12147$1Z2PAY)
        (fl+ . g$12146$1Z2PAY)
        (fl* . g$12145$1Z2PAY)
        (fixnum->flonum . g$12144$1Z2PAY)
        (fxzero? . g$12143$1Z2PAY)
        (fxxor . g$12142$1Z2PAY)
        (fxrotate-bit-field . g$7077$1Z2PAY)
        (fxreverse-bit-field . g$12141$1Z2PAY)
        (fxpositive? . g$12140$1Z2PAY)
        (fxodd? . g$12139$1Z2PAY)
        (fxnot . g$12138$1Z2PAY)
        (fxnegative? . g$12137$1Z2PAY)
        (fxmod0 . g$12136$1Z2PAY)
        (fxmod . g$12135$1Z2PAY)
        (fxmin . g$12134$1Z2PAY)
        (fxmax . g$12133$1Z2PAY)
        (fxlength . g$12132$1Z2PAY)
        (fxior . g$12131$1Z2PAY)
        (fxif . g$7071$1Z2PAY)
        (fxfirst-bit-set . g$12130$1Z2PAY)
        (fxeven? . g$12129$1Z2PAY)
        (fxdiv0-and-mod0 . g$12128$1Z2PAY)
        (fxdiv0 . g$12127$1Z2PAY)
        (fxdiv-and-mod . g$12126$1Z2PAY)
        (fxdiv . g$12125$1Z2PAY)
        (fxcopy-bit-field . g$7074$1Z2PAY)
        (fxcopy-bit . g$7072$1Z2PAY)
        (fxbit-set? . g$12124$1Z2PAY)
        (fxbit-field . g$7073$1Z2PAY)
        (fxbit-count . g$12123$1Z2PAY)
        (fxarithmetic-shift-right . g$7076$1Z2PAY)
        (fxarithmetic-shift-left . g$7075$1Z2PAY)
        (fxarithmetic-shift . g$12122$1Z2PAY)
        (fxand . g$12121$1Z2PAY)
        (fx>? . g$12120$1Z2PAY)
        (fx>=? . g$12119$1Z2PAY)
        (fx=? . g$12118$1Z2PAY)
        (fx<? . g$12117$1Z2PAY)
        (fx<=? . g$12116$1Z2PAY)
        (fx-/carry . g$12115$1Z2PAY)
        (fx- . g$12114$1Z2PAY)
        (fx+/carry . g$12113$1Z2PAY)
        (fx+ . g$12112$1Z2PAY)
        (fx*/carry . g$12111$1Z2PAY)
        (fx* . g$12110$1Z2PAY)
        (greatest-fixnum . g$12109$1Z2PAY)
        (least-fixnum . g$12108$1Z2PAY)
        (fixnum-width . g$12107$1Z2PAY)
        (fixnum? . g$12106$1Z2PAY)
        (bitwise-rotate-bit-field . g$7029$1Z2PAY)
        (bitwise-reverse-bit-field . g$12105$1Z2PAY)
        (bitwise-length . g$12104$1Z2PAY)
        (bitwise-if . g$7023$1Z2PAY)
        (bitwise-first-bit-set . g$12103$1Z2PAY)
        (bitwise-copy-bit-field . g$7026$1Z2PAY)
        (bitwise-copy-bit . g$7024$1Z2PAY)
        (bitwise-bit-set? . g$12102$1Z2PAY)
        (bitwise-bit-field . g$12101$1Z2PAY)
        (bitwise-bit-count . g$12100$1Z2PAY)
        (bitwise-xor . g$12099$1Z2PAY)
        (bitwise-ior . g$12098$1Z2PAY)
        (bitwise-and . g$12097$1Z2PAY)
        (bitwise-not . g$12096$1Z2PAY)
        (bitwise-arithmetic-shift-right . g$7028$1Z2PAY)
        (bitwise-arithmetic-shift-left . g$7027$1Z2PAY)
        (bitwise-arithmetic-shift . g$12095$1Z2PAY)
        (zero? . g$12094$1Z2PAY)
        (vector? . g$12093$1Z2PAY)
        (vector-set! . g$12092$1Z2PAY)
        (vector-ref . g$12091$1Z2PAY)
        (vector-map . g$12090$1Z2PAY)
        (vector-length . g$12089$1Z2PAY)
        (vector-for-each . g$12088$1Z2PAY)
        (vector-fill! . g$12087$1Z2PAY)
        (vector->list . g$12086$1Z2PAY)
        (vector . g$12085$1Z2PAY)
        (values . g$12084$1Z2PAY)
        (truncate . g$12083$1Z2PAY)
        (tan . g$12082$1Z2PAY)
        (symbol? . g$12081$1Z2PAY)
        (symbol=? . g$6018$1Z2PAY)
        (symbol->string . g$12080$1Z2PAY)
        (substring . g$12079$1Z2PAY)
        (string? . g$12078$1Z2PAY)
        (string>? . g$6015$1Z2PAY)
        (string>=? . g$6017$1Z2PAY)
        (string=? . g$6013$1Z2PAY)
        (string<? . g$6014$1Z2PAY)
        (string<=? . g$6016$1Z2PAY)
        (string-ref . g$12077$1Z2PAY)
        (string-length . g$12076$1Z2PAY)
        (string-for-each . g$12075$1Z2PAY)
        (string-copy . g$12074$1Z2PAY)
        (string-append . g$12073$1Z2PAY)
        (string->symbol . g$12072$1Z2PAY)
        (string->number . g$12071$1Z2PAY)
        (string->list . g$12070$1Z2PAY)
        (string . g$12069$1Z2PAY)
        (sqrt . g$12068$1Z2PAY)
        (sin . g$12067$1Z2PAY)
        (round . g$12066$1Z2PAY)
        (reverse . g$12065$1Z2PAY)
        (real? . g$12064$1Z2PAY)
        (real-valued? . g$12063$1Z2PAY)
        (real-part . g$12062$1Z2PAY)
        (rationalize . g$6059$1Z2PAY)
        (rational? . g$12061$1Z2PAY)
        (rational-valued? . g$12060$1Z2PAY)
        (procedure? . g$12059$1Z2PAY)
        (positive? . g$12058$1Z2PAY)
        (pair? . g$12057$1Z2PAY)
        (odd? . g$12056$1Z2PAY)
        (numerator . g$12055$1Z2PAY)
        (number? . g$12054$1Z2PAY)
        (number->string . g$12053$1Z2PAY)
        (null? . g$12052$1Z2PAY)
        (not . g$12051$1Z2PAY)
        (negative? . g$12050$1Z2PAY)
        (nan? . g$12049$1Z2PAY)
        (min . g$12048$1Z2PAY)
        (max . g$12047$1Z2PAY)
        (map . g$12046$1Z2PAY)
        (make-vector . g$12045$1Z2PAY)
        (make-string . g$12044$1Z2PAY)
        (make-rectangular . g$12043$1Z2PAY)
        (make-polar . g$12042$1Z2PAY)
        (magnitude . g$12041$1Z2PAY)
        (log . g$12040$1Z2PAY)
        (list? . g$12039$1Z2PAY)
        (list-tail . g$12038$1Z2PAY)
        (list-ref . g$12037$1Z2PAY)
        (list->vector . g$12036$1Z2PAY)
        (list->string . g$12035$1Z2PAY)
        (list . g$12034$1Z2PAY)
        (length . g$12033$1Z2PAY)
        (lcm . g$12032$1Z2PAY)
        (integer? . g$12031$1Z2PAY)
        (integer-valued? . g$12030$1Z2PAY)
        (integer->char . g$12029$1Z2PAY)
        (infinite? . g$12028$1Z2PAY)
        (inexact? . g$12027$1Z2PAY)
        (inexact . g$12026$1Z2PAY)
        (imag-part . g$12025$1Z2PAY)
        (gcd . g$12024$1Z2PAY)
        (for-each . g$12023$1Z2PAY)
        (floor . g$12022$1Z2PAY)
        (finite? . g$12021$1Z2PAY)
        (expt . g$12020$1Z2PAY)
        (exp . g$12019$1Z2PAY)
        (exact? . g$12018$1Z2PAY)
        (exact-integer-sqrt . g$12017$1Z2PAY)
        (exact . g$12016$1Z2PAY)
        (even? . g$12015$1Z2PAY)
        (error . g$12014$1Z2PAY)
        (eqv? . g$12013$1Z2PAY)
        (equal? . g$12012$1Z2PAY)
        (eq? . g$12011$1Z2PAY)
        (dynamic-wind . g$12010$1Z2PAY)
        (div0-and-mod0 . g$12009$1Z2PAY)
        (mod0 . g$12008$1Z2PAY)
        (div0 . g$12007$1Z2PAY)
        (div-and-mod . g$12006$1Z2PAY)
        (mod . g$12005$1Z2PAY)
        (div . g$12004$1Z2PAY)
        (denominator . g$12003$1Z2PAY)
        (cos . g$12002$1Z2PAY)
        (cons . g$12001$1Z2PAY)
        (complex? . g$12000$1Z2PAY)
        (char? . g$11999$1Z2PAY)
        (char>? . g$6056$1Z2PAY)
        (char>=? . g$6058$1Z2PAY)
        (char=? . g$6054$1Z2PAY)
        (char<? . g$6055$1Z2PAY)
        (char<=? . g$6057$1Z2PAY)
        (char->integer . g$11998$1Z2PAY)
        (ceiling . g$11997$1Z2PAY)
        (call-with-values . g$11996$1Z2PAY)
        (call/cc . g$11995$1Z2PAY)
        (call-with-current-continuation . g$11994$1Z2PAY)
        (cddddr . g$5978$1Z2PAY)
        (cdddar . g$5977$1Z2PAY)
        (cddadr . g$5976$1Z2PAY)
        (cddaar . g$5975$1Z2PAY)
        (cdaddr . g$5974$1Z2PAY)
        (cdadar . g$5973$1Z2PAY)
        (cdaadr . g$5972$1Z2PAY)
        (cdaaar . g$5971$1Z2PAY)
        (cadddr . g$5970$1Z2PAY)
        (caddar . g$5969$1Z2PAY)
        (cadadr . g$5968$1Z2PAY)
        (cadaar . g$5967$1Z2PAY)
        (caaddr . g$5966$1Z2PAY)
        (caadar . g$5965$1Z2PAY)
        (caaadr . g$5964$1Z2PAY)
        (caaaar . g$5963$1Z2PAY)
        (cdddr . g$5962$1Z2PAY)
        (cddar . g$5961$1Z2PAY)
        (cdadr . g$5960$1Z2PAY)
        (cdaar . g$5959$1Z2PAY)
        (caddr . g$5958$1Z2PAY)
        (cadar . g$5957$1Z2PAY)
        (caadr . g$5956$1Z2PAY)
        (caaar . g$5955$1Z2PAY)
        (cddr . g$5954$1Z2PAY)
        (cdar . g$5953$1Z2PAY)
        (cadr . g$5952$1Z2PAY)
        (caar . g$5951$1Z2PAY)
        (cdr . g$11993$1Z2PAY)
        (car . g$11992$1Z2PAY)
        (boolean? . g$11991$1Z2PAY)
        (boolean=? . g$6019$1Z2PAY)
        (atan . g$11990$1Z2PAY)
        (assertion-violation . g$11989$1Z2PAY)
        (asin . g$11988$1Z2PAY)
        (apply . g$11987$1Z2PAY)
        (append . g$11986$1Z2PAY)
        (angle . g$11985$1Z2PAY)
        (acos . g$11984$1Z2PAY)
        (abs . g$11983$1Z2PAY)
        (/ . g$11982$1Z2PAY)
        (* . g$11981$1Z2PAY)
        (- . g$11980$1Z2PAY)
        (+ . g$11979$1Z2PAY)
        (>= . g$11978$1Z2PAY)
        (> . g$11977$1Z2PAY)
        (= . g$11976$1Z2PAY)
        (<= . g$11975$1Z2PAY)
        (< . g$11974$1Z2PAY)
        (make-record-printer . g$11973$1Z2PAY)
        (eqv-hash . g$11972$1Z2PAY)
        (reverse! . g$11971$1Z2PAY)
        (deserialize-port . g$11970$1Z2PAY)
        (serialize-port . g$11969$1Z2PAY)
        (enum-set? . g$7392$1Z2PAY)
        (make-promise . g$6849$1Z2PAY)
        (load/args . g$11806$1Z2PAY)
        (printf . g$7502$1Z2PAY)
        (fprintf . g$7503$1Z2PAY)
        (format . g$7504$1Z2PAY)
        (procedure-form . g$11968$1Z2PAY)
        (procedure-environment . g$11967$1Z2PAY)
        (procedure-name . g$11966$1Z2PAY)
        (procedure-arity . g$11965$1Z2PAY)
        (gc-collect . g$11964$1Z2PAY)
        (clr-type? . g$11963$1Z2PAY)
        (get-clr-type . g$11962$1Z2PAY)
        (get-command-line . g$11961$1Z2PAY)
        (vector-append . g$11960$1Z2PAY)
        (vector-filter . g$11959$1Z2PAY)
        (vector-reverse! . g$11958$1Z2PAY)
        (vector-contains? . g$11957$1Z2PAY)
        (vector-index-of . g$11956$1Z2PAY)
        (vector-copy . g$11955$1Z2PAY)
        (vector-binary-search . g$11954$1Z2PAY)
        (string-ci-compare . g$11953$1Z2PAY)
        (string-compare . g$11952$1Z2PAY)
        (string-format . g$11951$1Z2PAY)
        (trace-printer . g$11803$1Z2PAY)
        (make-traced-procedure . g$11950$1Z2PAY)
        (make-traced-macro . g$7524$1Z2PAY)
        (assertion-error . g$8825$1Z2PAY)
        (pmap . g$11949$1Z2PAY)
        (time-it . g$11948$1Z2PAY)
        (make-parameter . g$7531$1Z2PAY)
        (library-locator . g$11947$1Z2PAY)
        (get-library-paths . g$11946$1Z2PAY)
        (environment-bindings . g$8804$1Z2PAY)
        (environment-symbols . g$8807$1Z2PAY)
        (interaction-environment-symbols . g$8803$1Z2PAY)
        (optimization-level . g$11945$1Z2PAY)
        (library-path . g$7986$1Z2PAY)
        (expand . g$8811$1Z2PAY)
        (&no-nans . g$11944$1Z2PAY)
        (&no-infinities . g$11943$1Z2PAY)
        (&i/o-encoding . g$11942$1Z2PAY)
        (&i/o-decoding . g$11941$1Z2PAY)
        (&i/o-port . g$11940$1Z2PAY)
        (&i/o-file-does-not-exist . g$11939$1Z2PAY)
        (&i/o-file-already-exists . g$11938$1Z2PAY)
        (&i/o-file-is-read-only . g$11937$1Z2PAY)
        (&i/o-file-protection . g$11936$1Z2PAY)
        (&i/o-filename . g$11935$1Z2PAY)
        (&i/o-invalid-position . g$11934$1Z2PAY)
        (&i/o-write . g$11933$1Z2PAY)
        (&i/o-read . g$11932$1Z2PAY)
        (&i/o . g$11931$1Z2PAY)
        (&non-continuable . g$11930$1Z2PAY)
        (&undefined . g$11929$1Z2PAY)
        (&syntax . g$11928$1Z2PAY)
        (&lexical . g$11927$1Z2PAY)
        (&implementation-restriction . g$11926$1Z2PAY)
        (&who . g$11925$1Z2PAY)
        (&irritants . g$11924$1Z2PAY)
        (&assertion . g$11923$1Z2PAY)
        (&violation . g$11922$1Z2PAY)
        (&error . g$11921$1Z2PAY)
        (&serious . g$11920$1Z2PAY)
        (&warning . g$11919$1Z2PAY)
        (&message . g$11918$1Z2PAY)
        (&condition . g$11917$1Z2PAY)
        (define-condition-type . g$11916$1Z2PAY)
        (define-enumeration . g$11915$1Z2PAY)
        (define-record-type . g$11914$1Z2PAY)
        (parent-rtd . g$11913$1Z2PAY)
        (nongenerative . g$11912$1Z2PAY)
        (opaque . g$11911$1Z2PAY)
        (sealed . g$11910$1Z2PAY)
        (protocol . g$11909$1Z2PAY)
        (parent . g$11908$1Z2PAY)
        (immutable . g$11907$1Z2PAY)
        (mutable . g$11906$1Z2PAY)
        (fields . g$11905$1Z2PAY)
        (error-handling-mode . g$11904$1Z2PAY)
        (file-options . g$11903$1Z2PAY)
        (buffer-mode . g$11902$1Z2PAY)
        (eol-style . g$11901$1Z2PAY)
        (guard . g$11900$1Z2PAY)
        (trace-letrec-syntax . g$11899$1Z2PAY)
        (trace-let-syntax . g$11898$1Z2PAY)
        (trace-define-syntax . g$11897$1Z2PAY)
        (trace-define . g$11896$1Z2PAY)
        (trace-lambda . g$11895$1Z2PAY)
        (unsyntax-splicing . g$11894$1Z2PAY)
        (unsyntax . g$11893$1Z2PAY)
        (unquote-splicing . g$11892$1Z2PAY)
        (unquote . g$11891$1Z2PAY)
        (_ . g$11890$1Z2PAY)
        (else . g$11889$1Z2PAY)
        (=> . g$11888$1Z2PAY)
        (... . g$11887$1Z2PAY)
        (assert . g$11886$1Z2PAY)
        (endianness . g$11885$1Z2PAY)
        (delay . g$11884$1Z2PAY)
        (time . g$11883$1Z2PAY)
        (or . g$11882$1Z2PAY)
        (and . g$11881$1Z2PAY)
        (do . g$11880$1Z2PAY)
        (cond . g$11879$1Z2PAY)
        (let* . g$11878$1Z2PAY)
        (let . g$11877$1Z2PAY)
        (identifier-syntax . g$11876$1Z2PAY)
        (with-syntax . g$11875$1Z2PAY)
        (quasisyntax . g$11874$1Z2PAY)
        (quasiquote . g$11873$1Z2PAY)
        (syntax-rules . g$11872$1Z2PAY)
        (include-into . g$11871$1Z2PAY)
        (include . g$11870$1Z2PAY)
        (define-struct . g$11869$1Z2PAY)
        (let-values . g$11868$1Z2PAY)
        (let*-values . g$11867$1Z2PAY)
        (record-constructor-descriptor . g$11866$1Z2PAY)
        (record-type-descriptor . g$11865$1Z2PAY)
        (fluid-let-syntax . g$11864$1Z2PAY)
        (case . g$11863$1Z2PAY)
        (parameterize . g$11862$1Z2PAY)
        (unless . g$11861$1Z2PAY)
        (when . g$11860$1Z2PAY)
        (if . g$11859$1Z2PAY)
        (letrec* . g$11858$1Z2PAY)
        (letrec . g$11857$1Z2PAY)
        (type-descriptor . g$11856$1Z2PAY)
        (case-lambda . g$11855$1Z2PAY)
        (lambda . g$11854$1Z2PAY)
        (syntax . g$11853$1Z2PAY)
        (syntax-case . g$11852$1Z2PAY)
        (quote . g$11851$1Z2PAY)
        (foreign-call . g$11850$1Z2PAY)
        (letrec-syntax . g$11849$1Z2PAY)
        (let-syntax . g$11848$1Z2PAY)
        (set! . g$11847$1Z2PAY)
        (export . g$11846$1Z2PAY)
        (import . g$11845$1Z2PAY)
        (library . g$11844$1Z2PAY)
        (begin . g$11843$1Z2PAY)
        (module . g$11842$1Z2PAY)
        (define-syntax . g$11841$1Z2PAY)
        (define . g$11840$1Z2PAY))
      '((g$8702$1Z2PAY core-prim . ellipsis-map)
        (g$12456$1Z2PAY core-prim . &no-nans-rcd)
        (g$12455$1Z2PAY core-prim . &no-nans-rtd)
        (g$12454$1Z2PAY core-prim . &no-infinities-rcd)
        (g$12453$1Z2PAY core-prim . &no-infinities-rtd)
        (g$12452$1Z2PAY core-prim . &i/o-encoding-rcd)
        (g$12451$1Z2PAY core-prim . &i/o-encoding-rtd)
        (g$12450$1Z2PAY core-prim . &i/o-decoding-rcd)
        (g$12449$1Z2PAY core-prim . &i/o-decoding-rtd)
        (g$12448$1Z2PAY core-prim . &i/o-port-rcd)
        (g$12447$1Z2PAY core-prim . &i/o-port-rtd)
        (g$12446$1Z2PAY core-prim . &i/o-file-does-not-exist-rcd)
        (g$12445$1Z2PAY core-prim . &i/o-file-does-not-exist-rtd)
        (g$12444$1Z2PAY core-prim . &i/o-file-already-exists-rcd)
        (g$12443$1Z2PAY core-prim . &i/o-file-already-exists-rtd)
        (g$12442$1Z2PAY core-prim . &i/o-file-is-read-only-rcd)
        (g$12441$1Z2PAY core-prim . &i/o-file-is-read-only-rtd)
        (g$12440$1Z2PAY core-prim . &i/o-file-protection-rcd)
        (g$12439$1Z2PAY core-prim . &i/o-file-protection-rtd)
        (g$12438$1Z2PAY core-prim . &i/o-filename-rcd)
        (g$12437$1Z2PAY core-prim . &i/o-filename-rtd)
        (g$12436$1Z2PAY core-prim . &i/o-invalid-position-rcd)
        (g$12435$1Z2PAY core-prim . &i/o-invalid-position-rtd)
        (g$12434$1Z2PAY core-prim . &i/o-write-rcd)
        (g$12433$1Z2PAY core-prim . &i/o-write-rtd)
        (g$12432$1Z2PAY core-prim . &i/o-read-rcd)
        (g$12431$1Z2PAY core-prim . &i/o-read-rtd)
        (g$12430$1Z2PAY core-prim . &i/o-rcd)
        (g$12429$1Z2PAY core-prim . &i/o-rtd)
        (g$12428$1Z2PAY core-prim . &undefined-rcd)
        (g$12427$1Z2PAY core-prim . &undefined-rtd)
        (g$12426$1Z2PAY core-prim . &syntax-rcd)
        (g$12425$1Z2PAY core-prim . &syntax-rtd)
        (g$12424$1Z2PAY core-prim . &lexical-rcd)
        (g$12423$1Z2PAY core-prim . &lexical-rtd)
        (g$12422$1Z2PAY core-prim . &implementation-restriction-rcd)
        (g$12421$1Z2PAY core-prim . &implementation-restriction-rtd)
        (g$12420$1Z2PAY core-prim . &non-continuable-rcd)
        (g$12419$1Z2PAY core-prim . &non-continuable-rtd)
        (g$12418$1Z2PAY core-prim . &who-rcd)
        (g$12417$1Z2PAY core-prim . &who-rtd)
        (g$12416$1Z2PAY core-prim . &irritants-rcd)
        (g$12415$1Z2PAY core-prim . &irritants-rtd)
        (g$12414$1Z2PAY core-prim . &assertion-rcd)
        (g$12413$1Z2PAY core-prim . &assertion-rtd)
        (g$12412$1Z2PAY core-prim . &violation-rcd)
        (g$12411$1Z2PAY core-prim . &violation-rtd)
        (g$12410$1Z2PAY core-prim . &error-rcd)
        (g$12409$1Z2PAY core-prim . &error-rtd)
        (g$12408$1Z2PAY core-prim . &serious-rcd)
        (g$12407$1Z2PAY core-prim . &serious-rtd)
        (g$12406$1Z2PAY core-prim . &warning-rcd)
        (g$12405$1Z2PAY core-prim . &warning-rtd)
        (g$12404$1Z2PAY core-prim . &message-rcd)
        (g$12403$1Z2PAY core-prim . &message-rtd)
        (g$12402$1Z2PAY core-prim . &condition-rcd)
        (g$12401$1Z2PAY core-prim . &condition-rtd)
        (g$12400$1Z2PAY core-prim . library-letrec*)
        (g$12399$1Z2PAY core-prim . annotation-stripped)
        (g$12398$1Z2PAY core-prim . annotation-source)
        (g$12397$1Z2PAY core-prim . annotation-expression)
        (g$12396$1Z2PAY core-prim . annotation?)
        (g$12395$1Z2PAY core-prim . read-annotated)
        (g$12394$1Z2PAY core-prim . tanh)
        (g$12393$1Z2PAY core-prim . cosh)
        (g$12392$1Z2PAY core-prim . sinh)
        (g$12391$1Z2PAY core-prim . make-guid)
        (g$12390$1Z2PAY core-prim . unspecified?)
        (g$12389$1Z2PAY core-prim . make-trace)
        (g$12388$1Z2PAY core-prim . make-list)
        (g$12387$1Z2PAY core-prim . last-pair)
        (g$12386$1Z2PAY core-prim . load-r5rs)
        (g$12385$1Z2PAY core-prim . license)
        (g$12384$1Z2PAY core-prim . stacktrace)
        (g$11808$1Z2PAY core-prim . ironscheme-build)
        (g$12383$1Z2PAY core-prim . define-clr-class-internal)
        (g$12382$1Z2PAY core-prim . clr-field-set!-internal)
        (g$12381$1Z2PAY core-prim . clr-field-get-internal)
        (g$12380$1Z2PAY core-prim . clr-cast-internal)
        (g$12379$1Z2PAY core-prim . clr-call-internal)
        (g$12378$1Z2PAY core-prim . clr-new-internal)
        (g$12377$1Z2PAY core-prim . clr-new-array-internal)
        (g$12376$1Z2PAY core-prim . clr-is-internal)
        (g$12375$1Z2PAY core-prim . clr-reference-internal)
        (g$12374$1Z2PAY core-prim . clr-using-internal)
        (g$12373$1Z2PAY core-prim . clr-clear-usings-internal)
        (g$8826$1Z2PAY core-prim . syntax-error)
        (g$8697$1Z2PAY core-prim . syntax-dispatch)
        (g$12372$1Z2PAY core-prim . compile-core)
        (g$12371$1Z2PAY core-prim . eval-core)
        (g$12370$1Z2PAY core-prim . set-symbol-value!)
        (g$12369$1Z2PAY core-prim . symbol-value)
        (g$12368$1Z2PAY core-prim . ungensym)
        (g$12367$1Z2PAY core-prim . gensym)
        (g$12366$1Z2PAY core-prim . void)
        (g$12365$1Z2PAY core-prim . load-serialized-library)
        (g$12364$1Z2PAY core-prim . serialize-library)
        (g$11810$1Z2PAY core-prim . compile-system-libraries)
        (g$11812$1Z2PAY core-prim . compile->closure)
        (g$11811$1Z2PAY core-prim . compile)
        (g$11807$1Z2PAY core-prim . load)
        (g$8835$1Z2PAY core-prim . interaction-environment)
        (g$12363$1Z2PAY core-prim . char-ready?)
        (g$12362$1Z2PAY core-prim . string-upcase)
        (g$12361$1Z2PAY core-prim . string-titlecase)
        (g$12360$1Z2PAY core-prim . string-normalize-nfkd)
        (g$12359$1Z2PAY core-prim . string-normalize-nfkc)
        (g$12358$1Z2PAY core-prim . string-normalize-nfd)
        (g$12357$1Z2PAY core-prim . string-normalize-nfc)
        (g$12356$1Z2PAY core-prim . string-foldcase)
        (g$12355$1Z2PAY core-prim . string-downcase)
        (g$6928$1Z2PAY core-prim . string-ci>?)
        (g$6930$1Z2PAY core-prim . string-ci>=?)
        (g$6926$1Z2PAY core-prim . string-ci=?)
        (g$6927$1Z2PAY core-prim . string-ci<?)
        (g$6929$1Z2PAY core-prim . string-ci<=?)
        (g$12354$1Z2PAY core-prim . char-whitespace?)
        (g$12353$1Z2PAY core-prim . char-upper-case?)
        (g$12352$1Z2PAY core-prim . char-title-case?)
        (g$12351$1Z2PAY core-prim . char-numeric?)
        (g$12350$1Z2PAY core-prim . char-lower-case?)
        (g$12349$1Z2PAY core-prim . char-general-category)
        (g$12348$1Z2PAY core-prim . char-upcase)
        (g$12347$1Z2PAY core-prim . char-titlecase)
        (g$12346$1Z2PAY core-prim . char-foldcase)
        (g$12345$1Z2PAY core-prim . char-downcase)
        (g$6967$1Z2PAY core-prim . char-ci>?)
        (g$6969$1Z2PAY core-prim . char-ci>=?)
        (g$6965$1Z2PAY core-prim . char-ci=?)
        (g$6966$1Z2PAY core-prim . char-ci<?)
        (g$6968$1Z2PAY core-prim . char-ci<=?)
        (g$12344$1Z2PAY core-prim . char-alphabetic?)
        (g$8434$1Z2PAY core-prim . variable-transformer-procedure)
        (g$8433$1Z2PAY core-prim . variable-transformer?)
        (g$8432$1Z2PAY core-prim . make-variable-transformer)
        (g$8830$1Z2PAY core-prim . identifier?)
        (g$8819$1Z2PAY core-prim . generate-temporaries)
        (g$8820$1Z2PAY core-prim . free-identifier=?)
        (g$8832$1Z2PAY core-prim . syntax->datum)
        (g$8831$1Z2PAY core-prim . datum->syntax)
        (g$8821$1Z2PAY core-prim . bound-identifier=?)
        (g$12343$1Z2PAY core-prim . record-type-descriptor?)
        (g$12342$1Z2PAY core-prim . record-predicate)
        (g$12341$1Z2PAY core-prim . record-mutator)
        (g$12340$1Z2PAY core-prim . record-constructor)
        (g$12339$1Z2PAY core-prim . record-accessor)
        (g$12338$1Z2PAY core-prim . make-record-type-descriptor)
        (g$12337$1Z2PAY core-prim . make-record-constructor-descriptor)
        (g$12336$1Z2PAY core-prim . record?)
        (g$12335$1Z2PAY core-prim . record-type-uid)
        (g$12334$1Z2PAY core-prim . record-type-sealed?)
        (g$12333$1Z2PAY core-prim . record-type-parent)
        (g$12332$1Z2PAY core-prim . record-type-opaque?)
        (g$12331$1Z2PAY core-prim . record-type-name)
        (g$12330$1Z2PAY core-prim . record-type-generative?)
        (g$12329$1Z2PAY core-prim . record-type-field-names)
        (g$12328$1Z2PAY core-prim . record-rtd)
        (g$12327$1Z2PAY core-prim . record-field-mutable?)
        (g$6503$1Z2PAY core-prim . delete-file)
        (g$6502$1Z2PAY core-prim . file-exists?)
        (g$12326$1Z2PAY core-prim . vector-sort!)
        (g$12325$1Z2PAY core-prim . vector-sort)
        (g$6866$1Z2PAY core-prim . list-sort)
        (g$12324$1Z2PAY core-prim . symbol-hash)
        (g$12323$1Z2PAY core-prim . string-ci-hash)
        (g$12322$1Z2PAY core-prim . string-hash)
        (g$12321$1Z2PAY core-prim . equal-hash)
        (g$12320$1Z2PAY core-prim . hashtable-equivalence-function)
        (g$12319$1Z2PAY core-prim . make-hashtable)
        (g$12318$1Z2PAY core-prim . hashtable-hash-function)
        (g$6470$1Z2PAY core-prim . make-eqv-hashtable)
        (g$6469$1Z2PAY core-prim . make-eq-hashtable)
        (g$12317$1Z2PAY core-prim . hashtable?)
        (g$6476$1Z2PAY core-prim . hashtable-update!)
        (g$6471$1Z2PAY core-prim . hashtable-size)
        (g$6473$1Z2PAY core-prim . hashtable-set!)
        (g$6472$1Z2PAY core-prim . hashtable-ref)
        (g$12316$1Z2PAY core-prim . hashtable-mutable?)
        (g$12315$1Z2PAY core-prim . hashtable-keys)
        (g$12314$1Z2PAY core-prim . hashtable-entries)
        (g$6474$1Z2PAY core-prim . hashtable-delete!)
        (g$12313$1Z2PAY core-prim . hashtable-copy)
        (g$6475$1Z2PAY core-prim . hashtable-contains?)
        (g$6477$1Z2PAY core-prim . hashtable-clear!)
        (g$7359$1Z2PAY core-prim . call-with-output-file)
        (g$7358$1Z2PAY core-prim . call-with-input-file)
        (g$12312$1Z2PAY core-prim . write-char)
        (g$12311$1Z2PAY core-prim . write)
        (g$7357$1Z2PAY core-prim . with-output-to-file)
        (g$7356$1Z2PAY core-prim . with-input-from-file)
        (g$12310$1Z2PAY core-prim . read-char)
        (g$12309$1Z2PAY core-prim . read)
        (g$12308$1Z2PAY core-prim . peek-char)
        (g$12307$1Z2PAY core-prim . open-output-file)
        (g$12306$1Z2PAY core-prim . open-input-file)
        (g$12305$1Z2PAY core-prim . newline)
        (g$12304$1Z2PAY core-prim . display)
        (g$12303$1Z2PAY core-prim . close-output-port)
        (g$12302$1Z2PAY core-prim . close-input-port)
        (g$12301$1Z2PAY core-prim . eof-object?)
        (g$12300$1Z2PAY core-prim . eof-object)
        (g$12299$1Z2PAY core-prim . current-error-port)
        (g$12298$1Z2PAY core-prim . current-output-port)
        (g$12297$1Z2PAY core-prim . current-input-port)
        (g$12296$1Z2PAY core-prim . output-port?)
        (g$12295$1Z2PAY core-prim . input-port?)
        (g$12294$1Z2PAY core-prim . utf-8-codec)
        (g$12293$1Z2PAY core-prim . utf-16-codec)
        (g$12292$1Z2PAY core-prim . transcoder-error-handling-mode)
        (g$12291$1Z2PAY core-prim . transcoder-eol-style)
        (g$12290$1Z2PAY core-prim . transcoder-codec)
        (g$12289$1Z2PAY core-prim . transcoded-port)
        (g$12288$1Z2PAY core-prim . textual-port?)
        (g$12287$1Z2PAY core-prim . string->bytevector)
        (g$12286$1Z2PAY core-prim . standard-output-port)
        (g$12285$1Z2PAY core-prim . standard-input-port)
        (g$12284$1Z2PAY core-prim . standard-error-port)
        (g$12283$1Z2PAY core-prim . set-port-position!)
        (g$12282$1Z2PAY core-prim . put-u8)
        (g$12281$1Z2PAY core-prim . put-string)
        (g$12280$1Z2PAY core-prim . put-datum)
        (g$12279$1Z2PAY core-prim . put-char)
        (g$12278$1Z2PAY core-prim . put-bytevector)
        (g$7332$1Z2PAY core-prim . port?)
        (g$12277$1Z2PAY core-prim . port-transcoder)
        (g$12276$1Z2PAY core-prim . port-position)
        (g$12275$1Z2PAY core-prim . port-has-set-port-position!?)
        (g$12274$1Z2PAY core-prim . port-has-port-position?)
        (g$12273$1Z2PAY core-prim . port-eof?)
        (g$12272$1Z2PAY core-prim . output-port-buffer-mode)
        (g$7331$1Z2PAY core-prim . open-string-output-port)
        (g$12271$1Z2PAY core-prim . open-string-input-port)
        (g$12270$1Z2PAY core-prim . open-file-output-port)
        (g$12269$1Z2PAY core-prim . open-file-input/output-port)
        (g$12268$1Z2PAY core-prim . open-file-input-port)
        (g$12267$1Z2PAY core-prim . open-bytevector-output-port)
        (g$12266$1Z2PAY core-prim . open-bytevector-input-port)
        (g$12265$1Z2PAY core-prim . native-transcoder)
        (g$12264$1Z2PAY core-prim . native-eol-style)
        (g$12263$1Z2PAY core-prim . make-transcoder)
        (g$12262$1Z2PAY core-prim . latin-1-codec)
        (g$7188$1Z2PAY core-prim . make-i/o-write-error)
        (g$7174$1Z2PAY core-prim . make-i/o-read-error)
        (g$7293$1Z2PAY core-prim . make-i/o-port-error)
        (g$7203$1Z2PAY core-prim . make-i/o-invalid-position-error)
        (g$7220$1Z2PAY core-prim . make-i/o-filename-error)
        (g$7236$1Z2PAY core-prim . make-i/o-file-protection-error)
        (g$7250$1Z2PAY core-prim . make-i/o-file-is-read-only-error)
        (g$7278$1Z2PAY core-prim . make-i/o-file-does-not-exist-error)
        (g$7264$1Z2PAY core-prim . make-i/o-file-already-exists-error)
        (g$7160$1Z2PAY core-prim . make-i/o-error)
        (g$7324$1Z2PAY core-prim . make-i/o-encoding-error)
        (g$7309$1Z2PAY core-prim . make-i/o-decoding-error)
        (g$12261$1Z2PAY core-prim . make-custom-textual-output-port)
        (g$12260$1Z2PAY core-prim . make-custom-textual-input/output-port)
        (g$12259$1Z2PAY core-prim . make-custom-textual-input-port)
        (g$12258$1Z2PAY core-prim . make-custom-binary-output-port)
        (g$12257$1Z2PAY core-prim . make-custom-binary-input/output-port)
        (g$12256$1Z2PAY core-prim . make-custom-binary-input-port)
        (g$12255$1Z2PAY core-prim . make-bytevector)
        (g$12254$1Z2PAY core-prim . lookahead-u8)
        (g$12253$1Z2PAY core-prim . lookahead-char)
        (g$7189$1Z2PAY core-prim . i/o-write-error?)
        (g$7175$1Z2PAY core-prim . i/o-read-error?)
        (g$7295$1Z2PAY core-prim . i/o-port-error?)
        (g$7205$1Z2PAY core-prim . i/o-invalid-position-error?)
        (g$7206$1Z2PAY core-prim . i/o-error-position)
        (g$7222$1Z2PAY core-prim . i/o-filename-error?)
        (g$7237$1Z2PAY core-prim . i/o-file-protection-error?)
        (g$7251$1Z2PAY core-prim . i/o-file-is-read-only-error?)
        (g$7279$1Z2PAY core-prim . i/o-file-does-not-exist-error?)
        (g$7265$1Z2PAY core-prim . i/o-file-already-exists-error?)
        (g$7161$1Z2PAY core-prim . i/o-error?)
        (g$7296$1Z2PAY core-prim . i/o-error-port)
        (g$7223$1Z2PAY core-prim . i/o-error-filename)
        (g$7326$1Z2PAY core-prim . i/o-encoding-error?)
        (g$7327$1Z2PAY core-prim . i/o-encoding-error-char)
        (g$7310$1Z2PAY core-prim . i/o-decoding-error?)
        (g$12252$1Z2PAY core-prim . get-u8)
        (g$12251$1Z2PAY core-prim . get-string-n!)
        (g$12250$1Z2PAY core-prim . get-string-n)
        (g$12249$1Z2PAY core-prim . get-string-all)
        (g$12248$1Z2PAY core-prim . get-line)
        (g$12247$1Z2PAY core-prim . get-datum)
        (g$12246$1Z2PAY core-prim . get-char)
        (g$12245$1Z2PAY core-prim . get-bytevector-some)
        (g$12244$1Z2PAY core-prim . get-bytevector-n!)
        (g$12243$1Z2PAY core-prim . get-bytevector-n)
        (g$12242$1Z2PAY core-prim . get-bytevector-all)
        (g$12241$1Z2PAY core-prim . flush-output-port)
        (g$12240$1Z2PAY core-prim . close-port)
        (g$7333$1Z2PAY core-prim . call-with-string-output-port)
        (g$12239$1Z2PAY core-prim . call-with-port)
        (g$12238$1Z2PAY core-prim . call-with-bytevector-output-port)
        (g$12237$1Z2PAY core-prim . bytevector->string)
        (g$12236$1Z2PAY core-prim . buffer-mode?)
        (g$12235$1Z2PAY core-prim . binary-port?)
        (g$8810$1Z2PAY core-prim . scheme-report-environment)
        (g$6846$1Z2PAY core-prim . quotient)
        (g$8809$1Z2PAY core-prim . null-environment)
        (g$6847$1Z2PAY core-prim . remainder)
        (g$6848$1Z2PAY core-prim . modulo)
        (g$12234$1Z2PAY core-prim . inexact->exact)
        (g$6850$1Z2PAY core-prim . force)
        (g$12233$1Z2PAY core-prim . exact->inexact)
        (g$12232$1Z2PAY core-prim . exit)
        (g$11804$1Z2PAY core-prim . command-line)
        (g$12231$1Z2PAY core-prim . string-fill!)
        (g$12230$1Z2PAY core-prim . string-set!)
        (g$12229$1Z2PAY core-prim . set-cdr!)
        (g$12228$1Z2PAY core-prim . set-car!)
        (g$5858$1Z2PAY core-prim . remove)
        (g$5859$1Z2PAY core-prim . remv)
        (g$5841$1Z2PAY core-prim . remp)
        (g$5860$1Z2PAY core-prim . remq)
        (g$5840$1Z2PAY core-prim . partition)
        (g$5848$1Z2PAY core-prim . memv)
        (g$5847$1Z2PAY core-prim . memq)
        (g$5850$1Z2PAY core-prim . memp)
        (g$5849$1Z2PAY core-prim . member)
        (g$5854$1Z2PAY core-prim . exists)
        (g$5853$1Z2PAY core-prim . for-all)
        (g$5857$1Z2PAY core-prim . fold-right)
        (g$5856$1Z2PAY core-prim . fold-left)
        (g$5839$1Z2PAY core-prim . find)
        (g$5842$1Z2PAY core-prim . filter)
        (g$5855$1Z2PAY core-prim . cons*)
        (g$5844$1Z2PAY core-prim . assv)
        (g$5843$1Z2PAY core-prim . assq)
        (g$5846$1Z2PAY core-prim . assp)
        (g$5845$1Z2PAY core-prim . assoc)
        (g$12227$1Z2PAY core-prim . with-exception-handler)
        (g$12226$1Z2PAY core-prim . raise-continuable)
        (g$12225$1Z2PAY core-prim . raise)
        (g$8812$1Z2PAY core-prim . eval)
        (g$8808$1Z2PAY core-prim . environment)
        (g$7417$1Z2PAY core-prim . make-enumeration)
        (g$7424$1Z2PAY core-prim . enum-set=?)
        (g$7418$1Z2PAY core-prim . enum-set-universe)
        (g$7425$1Z2PAY core-prim . enum-set-union)
        (g$7423$1Z2PAY core-prim . enum-set-subset?)
        (g$7429$1Z2PAY core-prim . enum-set-projection)
        (g$7422$1Z2PAY core-prim . enum-set-member?)
        (g$7426$1Z2PAY core-prim . enum-set-intersection)
        (g$7419$1Z2PAY core-prim . enum-set-indexer)
        (g$7427$1Z2PAY core-prim . enum-set-difference)
        (g$7420$1Z2PAY core-prim . enum-set-constructor)
        (g$7428$1Z2PAY core-prim . enum-set-complement)
        (g$7421$1Z2PAY core-prim . enum-set->list)
        (g$6757$1Z2PAY core-prim . who-condition?)
        (g$6668$1Z2PAY core-prim . warning?)
        (g$6710$1Z2PAY core-prim . violation?)
        (g$6834$1Z2PAY core-prim . undefined-violation?)
        (g$6818$1Z2PAY core-prim . syntax-violation?)
        (g$6820$1Z2PAY core-prim . syntax-violation-subform)
        (g$6819$1Z2PAY core-prim . syntax-violation-form)
        (g$8829$1Z2PAY core-prim . syntax-violation)
        (g$12224$1Z2PAY core-prim . simple-conditions)
        (g$6682$1Z2PAY core-prim . serious-condition?)
        (g$6772$1Z2PAY core-prim . non-continuable-violation?)
        (g$6653$1Z2PAY core-prim . message-condition?)
        (g$6755$1Z2PAY core-prim . make-who-condition)
        (g$6667$1Z2PAY core-prim . make-warning)
        (g$6709$1Z2PAY core-prim . make-violation)
        (g$6833$1Z2PAY core-prim . make-undefined-violation)
        (g$6815$1Z2PAY core-prim . make-syntax-violation)
        (g$6681$1Z2PAY core-prim . make-serious-condition)
        (g$6771$1Z2PAY core-prim . make-non-continuable-violation)
        (g$6651$1Z2PAY core-prim . make-message-condition)
        (g$6799$1Z2PAY core-prim . make-lexical-violation)
        (g$6738$1Z2PAY core-prim . make-irritants-condition)
        (g$6785$1Z2PAY core-prim . make-implementation-restriction-violation)
        (g$6695$1Z2PAY core-prim . make-error)
        (g$6723$1Z2PAY core-prim . make-assertion-violation)
        (g$6800$1Z2PAY core-prim . lexical-violation?)
        (g$6740$1Z2PAY core-prim . irritants-condition?)
        (g$6786$1Z2PAY core-prim . implementation-restriction-violation?)
        (g$6696$1Z2PAY core-prim . error?)
        (g$6758$1Z2PAY core-prim . condition-who)
        (g$12223$1Z2PAY core-prim . condition-predicate)
        (g$6654$1Z2PAY core-prim . condition-message)
        (g$6741$1Z2PAY core-prim . condition-irritants)
        (g$12222$1Z2PAY core-prim . condition-accessor)
        (g$12221$1Z2PAY core-prim . condition)
        (g$6724$1Z2PAY core-prim . assertion-violation?)
        (g$12220$1Z2PAY core-prim . condition?)
        (g$12219$1Z2PAY core-prim . utf32->string)
        (g$12218$1Z2PAY core-prim . utf16->string)
        (g$12217$1Z2PAY core-prim . utf8->string)
        (g$12216$1Z2PAY core-prim . uint-list->bytevector)
        (g$12215$1Z2PAY core-prim . u8-list->bytevector)
        (g$12214$1Z2PAY core-prim . string->utf8)
        (g$12213$1Z2PAY core-prim . string->utf32)
        (g$12212$1Z2PAY core-prim . string->utf16)
        (g$12211$1Z2PAY core-prim . sint-list->bytevector)
        (g$6509$1Z2PAY core-prim . native-endianness)
        (g$12210$1Z2PAY core-prim . bytevector?)
        (g$12209$1Z2PAY core-prim . bytevector=?)
        (g$12208$1Z2PAY core-prim . bytevector-uint-set!)
        (g$12207$1Z2PAY core-prim . bytevector-uint-ref)
        (g$12206$1Z2PAY core-prim . bytevector-u8-set!)
        (g$12205$1Z2PAY core-prim . bytevector-u8-ref)
        (g$6530$1Z2PAY core-prim . bytevector-u64-set!)
        (g$6526$1Z2PAY core-prim . bytevector-u64-ref)
        (g$6532$1Z2PAY core-prim . bytevector-u64-native-set!)
        (g$6528$1Z2PAY core-prim . bytevector-u64-native-ref)
        (g$6522$1Z2PAY core-prim . bytevector-u32-set!)
        (g$6518$1Z2PAY core-prim . bytevector-u32-ref)
        (g$6524$1Z2PAY core-prim . bytevector-u32-native-set!)
        (g$6520$1Z2PAY core-prim . bytevector-u32-native-ref)
        (g$6514$1Z2PAY core-prim . bytevector-u16-set!)
        (g$6510$1Z2PAY core-prim . bytevector-u16-ref)
        (g$6516$1Z2PAY core-prim . bytevector-u16-native-set!)
        (g$6512$1Z2PAY core-prim . bytevector-u16-native-ref)
        (g$12204$1Z2PAY core-prim . bytevector-sint-set!)
        (g$12203$1Z2PAY core-prim . bytevector-sint-ref)
        (g$12202$1Z2PAY core-prim . bytevector-s8-set!)
        (g$12201$1Z2PAY core-prim . bytevector-s8-ref)
        (g$6531$1Z2PAY core-prim . bytevector-s64-set!)
        (g$6527$1Z2PAY core-prim . bytevector-s64-ref)
        (g$6533$1Z2PAY core-prim . bytevector-s64-native-set!)
        (g$6529$1Z2PAY core-prim . bytevector-s64-native-ref)
        (g$6523$1Z2PAY core-prim . bytevector-s32-set!)
        (g$6519$1Z2PAY core-prim . bytevector-s32-ref)
        (g$6525$1Z2PAY core-prim . bytevector-s32-native-set!)
        (g$6521$1Z2PAY core-prim . bytevector-s32-native-ref)
        (g$6515$1Z2PAY core-prim . bytevector-s16-set!)
        (g$6511$1Z2PAY core-prim . bytevector-s16-ref)
        (g$6517$1Z2PAY core-prim . bytevector-s16-native-set!)
        (g$6513$1Z2PAY core-prim . bytevector-s16-native-ref)
        (g$12200$1Z2PAY core-prim . bytevector-length)
        (g$12199$1Z2PAY core-prim . bytevector-ieee-single-set!)
        (g$12198$1Z2PAY core-prim . bytevector-ieee-single-ref)
        (g$6536$1Z2PAY core-prim . bytevector-ieee-single-native-set!)
        (g$6534$1Z2PAY core-prim . bytevector-ieee-single-native-ref)
        (g$12197$1Z2PAY core-prim . bytevector-ieee-double-set!)
        (g$12196$1Z2PAY core-prim . bytevector-ieee-double-ref)
        (g$6537$1Z2PAY core-prim . bytevector-ieee-double-native-set!)
        (g$6535$1Z2PAY core-prim . bytevector-ieee-double-native-ref)
        (g$12195$1Z2PAY core-prim . bytevector-fill!)
        (g$12194$1Z2PAY core-prim . bytevector-copy!)
        (g$12193$1Z2PAY core-prim . bytevector-copy)
        (g$12192$1Z2PAY core-prim . bytevector->uint-list)
        (g$12191$1Z2PAY core-prim . bytevector->u8-list)
        (g$12190$1Z2PAY core-prim . bytevector->sint-list)
        (g$7146$1Z2PAY core-prim . no-nans-violation?)
        (g$7132$1Z2PAY core-prim . no-infinities-violation?)
        (g$7145$1Z2PAY core-prim . make-no-nans-violation)
        (g$7131$1Z2PAY core-prim . make-no-infinities-violation)
        (g$12189$1Z2PAY core-prim . real->flonum)
        (g$12188$1Z2PAY core-prim . flzero?)
        (g$12187$1Z2PAY core-prim . fltruncate)
        (g$12186$1Z2PAY core-prim . fltan)
        (g$12185$1Z2PAY core-prim . flsqrt)
        (g$12184$1Z2PAY core-prim . flsin)
        (g$12183$1Z2PAY core-prim . flround)
        (g$12182$1Z2PAY core-prim . flpositive?)
        (g$12181$1Z2PAY core-prim . flonum?)
        (g$12180$1Z2PAY core-prim . flodd?)
        (g$12179$1Z2PAY core-prim . flnumerator)
        (g$12178$1Z2PAY core-prim . flnegative?)
        (g$12177$1Z2PAY core-prim . flnan?)
        (g$12176$1Z2PAY core-prim . flmod0)
        (g$12175$1Z2PAY core-prim . flmod)
        (g$12174$1Z2PAY core-prim . flmin)
        (g$12173$1Z2PAY core-prim . flmax)
        (g$12172$1Z2PAY core-prim . fllog)
        (g$12171$1Z2PAY core-prim . flinteger?)
        (g$12170$1Z2PAY core-prim . flinfinite?)
        (g$12169$1Z2PAY core-prim . flfloor)
        (g$12168$1Z2PAY core-prim . flfinite?)
        (g$12167$1Z2PAY core-prim . flexpt)
        (g$12166$1Z2PAY core-prim . flexp)
        (g$12165$1Z2PAY core-prim . fleven?)
        (g$12164$1Z2PAY core-prim . fldiv0-and-mod0)
        (g$12163$1Z2PAY core-prim . fldiv0)
        (g$12162$1Z2PAY core-prim . fldiv-and-mod)
        (g$12161$1Z2PAY core-prim . fldiv)
        (g$12160$1Z2PAY core-prim . fldenominator)
        (g$12159$1Z2PAY core-prim . flcos)
        (g$12158$1Z2PAY core-prim . flceiling)
        (g$12157$1Z2PAY core-prim . flatan)
        (g$12156$1Z2PAY core-prim . flasin)
        (g$12155$1Z2PAY core-prim . flacos)
        (g$12154$1Z2PAY core-prim . flabs)
        (g$12153$1Z2PAY core-prim . fl>?)
        (g$12152$1Z2PAY core-prim . fl>=?)
        (g$12151$1Z2PAY core-prim . fl=?)
        (g$12150$1Z2PAY core-prim . fl<?)
        (g$12149$1Z2PAY core-prim . fl<=?)
        (g$12148$1Z2PAY core-prim . fl/)
        (g$12147$1Z2PAY core-prim . fl-)
        (g$12146$1Z2PAY core-prim . fl+)
        (g$12145$1Z2PAY core-prim . fl*)
        (g$12144$1Z2PAY core-prim . fixnum->flonum)
        (g$12143$1Z2PAY core-prim . fxzero?)
        (g$12142$1Z2PAY core-prim . fxxor)
        (g$7077$1Z2PAY core-prim . fxrotate-bit-field)
        (g$12141$1Z2PAY core-prim . fxreverse-bit-field)
        (g$12140$1Z2PAY core-prim . fxpositive?)
        (g$12139$1Z2PAY core-prim . fxodd?)
        (g$12138$1Z2PAY core-prim . fxnot)
        (g$12137$1Z2PAY core-prim . fxnegative?)
        (g$12136$1Z2PAY core-prim . fxmod0)
        (g$12135$1Z2PAY core-prim . fxmod)
        (g$12134$1Z2PAY core-prim . fxmin)
        (g$12133$1Z2PAY core-prim . fxmax)
        (g$12132$1Z2PAY core-prim . fxlength)
        (g$12131$1Z2PAY core-prim . fxior)
        (g$7071$1Z2PAY core-prim . fxif)
        (g$12130$1Z2PAY core-prim . fxfirst-bit-set)
        (g$12129$1Z2PAY core-prim . fxeven?)
        (g$12128$1Z2PAY core-prim . fxdiv0-and-mod0)
        (g$12127$1Z2PAY core-prim . fxdiv0)
        (g$12126$1Z2PAY core-prim . fxdiv-and-mod)
        (g$12125$1Z2PAY core-prim . fxdiv)
        (g$7074$1Z2PAY core-prim . fxcopy-bit-field)
        (g$7072$1Z2PAY core-prim . fxcopy-bit)
        (g$12124$1Z2PAY core-prim . fxbit-set?)
        (g$7073$1Z2PAY core-prim . fxbit-field)
        (g$12123$1Z2PAY core-prim . fxbit-count)
        (g$7076$1Z2PAY core-prim . fxarithmetic-shift-right)
        (g$7075$1Z2PAY core-prim . fxarithmetic-shift-left)
        (g$12122$1Z2PAY core-prim . fxarithmetic-shift)
        (g$12121$1Z2PAY core-prim . fxand)
        (g$12120$1Z2PAY core-prim . fx>?)
        (g$12119$1Z2PAY core-prim . fx>=?)
        (g$12118$1Z2PAY core-prim . fx=?)
        (g$12117$1Z2PAY core-prim . fx<?)
        (g$12116$1Z2PAY core-prim . fx<=?)
        (g$12115$1Z2PAY core-prim . fx-/carry)
        (g$12114$1Z2PAY core-prim . fx-)
        (g$12113$1Z2PAY core-prim . fx+/carry)
        (g$12112$1Z2PAY core-prim . fx+)
        (g$12111$1Z2PAY core-prim . fx*/carry)
        (g$12110$1Z2PAY core-prim . fx*)
        (g$12109$1Z2PAY core-prim . greatest-fixnum)
        (g$12108$1Z2PAY core-prim . least-fixnum)
        (g$12107$1Z2PAY core-prim . fixnum-width)
        (g$12106$1Z2PAY core-prim . fixnum?)
        (g$7029$1Z2PAY core-prim . bitwise-rotate-bit-field)
        (g$12105$1Z2PAY core-prim . bitwise-reverse-bit-field)
        (g$12104$1Z2PAY core-prim . bitwise-length)
        (g$7023$1Z2PAY core-prim . bitwise-if)
        (g$12103$1Z2PAY core-prim . bitwise-first-bit-set)
        (g$7026$1Z2PAY core-prim . bitwise-copy-bit-field)
        (g$7024$1Z2PAY core-prim . bitwise-copy-bit)
        (g$12102$1Z2PAY core-prim . bitwise-bit-set?)
        (g$12101$1Z2PAY core-prim . bitwise-bit-field)
        (g$12100$1Z2PAY core-prim . bitwise-bit-count)
        (g$12099$1Z2PAY core-prim . bitwise-xor)
        (g$12098$1Z2PAY core-prim . bitwise-ior)
        (g$12097$1Z2PAY core-prim . bitwise-and)
        (g$12096$1Z2PAY core-prim . bitwise-not)
        (g$7028$1Z2PAY core-prim . bitwise-arithmetic-shift-right)
        (g$7027$1Z2PAY core-prim . bitwise-arithmetic-shift-left)
        (g$12095$1Z2PAY core-prim . bitwise-arithmetic-shift)
        (g$12094$1Z2PAY core-prim . zero?)
        (g$12093$1Z2PAY core-prim . vector?)
        (g$12092$1Z2PAY core-prim . vector-set!)
        (g$12091$1Z2PAY core-prim . vector-ref)
        (g$12090$1Z2PAY core-prim . vector-map)
        (g$12089$1Z2PAY core-prim . vector-length)
        (g$12088$1Z2PAY core-prim . vector-for-each)
        (g$12087$1Z2PAY core-prim . vector-fill!)
        (g$12086$1Z2PAY core-prim . vector->list)
        (g$12085$1Z2PAY core-prim . vector)
        (g$12084$1Z2PAY core-prim . values)
        (g$12083$1Z2PAY core-prim . truncate)
        (g$12082$1Z2PAY core-prim . tan)
        (g$12081$1Z2PAY core-prim . symbol?)
        (g$6018$1Z2PAY core-prim . symbol=?)
        (g$12080$1Z2PAY core-prim . symbol->string)
        (g$12079$1Z2PAY core-prim . substring)
        (g$12078$1Z2PAY core-prim . string?)
        (g$6015$1Z2PAY core-prim . string>?)
        (g$6017$1Z2PAY core-prim . string>=?)
        (g$6013$1Z2PAY core-prim . string=?)
        (g$6014$1Z2PAY core-prim . string<?)
        (g$6016$1Z2PAY core-prim . string<=?)
        (g$12077$1Z2PAY core-prim . string-ref)
        (g$12076$1Z2PAY core-prim . string-length)
        (g$12075$1Z2PAY core-prim . string-for-each)
        (g$12074$1Z2PAY core-prim . string-copy)
        (g$12073$1Z2PAY core-prim . string-append)
        (g$12072$1Z2PAY core-prim . string->symbol)
        (g$12071$1Z2PAY core-prim . string->number)
        (g$12070$1Z2PAY core-prim . string->list)
        (g$12069$1Z2PAY core-prim . string)
        (g$12068$1Z2PAY core-prim . sqrt)
        (g$12067$1Z2PAY core-prim . sin)
        (g$12066$1Z2PAY core-prim . round)
        (g$12065$1Z2PAY core-prim . reverse)
        (g$12064$1Z2PAY core-prim . real?)
        (g$12063$1Z2PAY core-prim . real-valued?)
        (g$12062$1Z2PAY core-prim . real-part)
        (g$6059$1Z2PAY core-prim . rationalize)
        (g$12061$1Z2PAY core-prim . rational?)
        (g$12060$1Z2PAY core-prim . rational-valued?)
        (g$12059$1Z2PAY core-prim . procedure?)
        (g$12058$1Z2PAY core-prim . positive?)
        (g$12057$1Z2PAY core-prim . pair?)
        (g$12056$1Z2PAY core-prim . odd?)
        (g$12055$1Z2PAY core-prim . numerator)
        (g$12054$1Z2PAY core-prim . number?)
        (g$12053$1Z2PAY core-prim . number->string)
        (g$12052$1Z2PAY core-prim . null?)
        (g$12051$1Z2PAY core-prim . not)
        (g$12050$1Z2PAY core-prim . negative?)
        (g$12049$1Z2PAY core-prim . nan?)
        (g$12048$1Z2PAY core-prim . min)
        (g$12047$1Z2PAY core-prim . max)
        (g$12046$1Z2PAY core-prim . map)
        (g$12045$1Z2PAY core-prim . make-vector)
        (g$12044$1Z2PAY core-prim . make-string)
        (g$12043$1Z2PAY core-prim . make-rectangular)
        (g$12042$1Z2PAY core-prim . make-polar)
        (g$12041$1Z2PAY core-prim . magnitude)
        (g$12040$1Z2PAY core-prim . log)
        (g$12039$1Z2PAY core-prim . list?)
        (g$12038$1Z2PAY core-prim . list-tail)
        (g$12037$1Z2PAY core-prim . list-ref)
        (g$12036$1Z2PAY core-prim . list->vector)
        (g$12035$1Z2PAY core-prim . list->string)
        (g$12034$1Z2PAY core-prim . list)
        (g$12033$1Z2PAY core-prim . length)
        (g$12032$1Z2PAY core-prim . lcm)
        (g$12031$1Z2PAY core-prim . integer?)
        (g$12030$1Z2PAY core-prim . integer-valued?)
        (g$12029$1Z2PAY core-prim . integer->char)
        (g$12028$1Z2PAY core-prim . infinite?)
        (g$12027$1Z2PAY core-prim . inexact?)
        (g$12026$1Z2PAY core-prim . inexact)
        (g$12025$1Z2PAY core-prim . imag-part)
        (g$12024$1Z2PAY core-prim . gcd)
        (g$12023$1Z2PAY core-prim . for-each)
        (g$12022$1Z2PAY core-prim . floor)
        (g$12021$1Z2PAY core-prim . finite?)
        (g$12020$1Z2PAY core-prim . expt)
        (g$12019$1Z2PAY core-prim . exp)
        (g$12018$1Z2PAY core-prim . exact?)
        (g$12017$1Z2PAY core-prim . exact-integer-sqrt)
        (g$12016$1Z2PAY core-prim . exact)
        (g$12015$1Z2PAY core-prim . even?)
        (g$12014$1Z2PAY core-prim . error)
        (g$12013$1Z2PAY core-prim . eqv?)
        (g$12012$1Z2PAY core-prim . equal?)
        (g$12011$1Z2PAY core-prim . eq?)
        (g$12010$1Z2PAY core-prim . dynamic-wind)
        (g$12009$1Z2PAY core-prim . div0-and-mod0)
        (g$12008$1Z2PAY core-prim . mod0)
        (g$12007$1Z2PAY core-prim . div0)
        (g$12006$1Z2PAY core-prim . div-and-mod)
        (g$12005$1Z2PAY core-prim . mod)
        (g$12004$1Z2PAY core-prim . div)
        (g$12003$1Z2PAY core-prim . denominator)
        (g$12002$1Z2PAY core-prim . cos)
        (g$12001$1Z2PAY core-prim . cons)
        (g$12000$1Z2PAY core-prim . complex?)
        (g$11999$1Z2PAY core-prim . char?)
        (g$6056$1Z2PAY core-prim . char>?)
        (g$6058$1Z2PAY core-prim . char>=?)
        (g$6054$1Z2PAY core-prim . char=?)
        (g$6055$1Z2PAY core-prim . char<?)
        (g$6057$1Z2PAY core-prim . char<=?)
        (g$11998$1Z2PAY core-prim . char->integer)
        (g$11997$1Z2PAY core-prim . ceiling)
        (g$11996$1Z2PAY core-prim . call-with-values)
        (g$11995$1Z2PAY core-prim . call/cc)
        (g$11994$1Z2PAY core-prim . call-with-current-continuation)
        (g$5978$1Z2PAY core-prim . cddddr)
        (g$5977$1Z2PAY core-prim . cdddar)
        (g$5976$1Z2PAY core-prim . cddadr)
        (g$5975$1Z2PAY core-prim . cddaar)
        (g$5974$1Z2PAY core-prim . cdaddr)
        (g$5973$1Z2PAY core-prim . cdadar)
        (g$5972$1Z2PAY core-prim . cdaadr)
        (g$5971$1Z2PAY core-prim . cdaaar)
        (g$5970$1Z2PAY core-prim . cadddr)
        (g$5969$1Z2PAY core-prim . caddar)
        (g$5968$1Z2PAY core-prim . cadadr)
        (g$5967$1Z2PAY core-prim . cadaar)
        (g$5966$1Z2PAY core-prim . caaddr)
        (g$5965$1Z2PAY core-prim . caadar)
        (g$5964$1Z2PAY core-prim . caaadr)
        (g$5963$1Z2PAY core-prim . caaaar)
        (g$5962$1Z2PAY core-prim . cdddr)
        (g$5961$1Z2PAY core-prim . cddar)
        (g$5960$1Z2PAY core-prim . cdadr)
        (g$5959$1Z2PAY core-prim . cdaar)
        (g$5958$1Z2PAY core-prim . caddr)
        (g$5957$1Z2PAY core-prim . cadar)
        (g$5956$1Z2PAY core-prim . caadr)
        (g$5955$1Z2PAY core-prim . caaar)
        (g$5954$1Z2PAY core-prim . cddr)
        (g$5953$1Z2PAY core-prim . cdar)
        (g$5952$1Z2PAY core-prim . cadr)
        (g$5951$1Z2PAY core-prim . caar)
        (g$11993$1Z2PAY core-prim . cdr)
        (g$11992$1Z2PAY core-prim . car)
        (g$11991$1Z2PAY core-prim . boolean?)
        (g$6019$1Z2PAY core-prim . boolean=?)
        (g$11990$1Z2PAY core-prim . atan)
        (g$11989$1Z2PAY core-prim . assertion-violation)
        (g$11988$1Z2PAY core-prim . asin)
        (g$11987$1Z2PAY core-prim . apply)
        (g$11986$1Z2PAY core-prim . append)
        (g$11985$1Z2PAY core-prim . angle)
        (g$11984$1Z2PAY core-prim . acos)
        (g$11983$1Z2PAY core-prim . abs)
        (g$11982$1Z2PAY core-prim . /)
        (g$11981$1Z2PAY core-prim . *)
        (g$11980$1Z2PAY core-prim . -)
        (g$11979$1Z2PAY core-prim . +)
        (g$11978$1Z2PAY core-prim . >=)
        (g$11977$1Z2PAY core-prim . >)
        (g$11976$1Z2PAY core-prim . =)
        (g$11975$1Z2PAY core-prim . <=)
        (g$11974$1Z2PAY core-prim . <)
        (g$11973$1Z2PAY core-prim . make-record-printer)
        (g$11972$1Z2PAY core-prim . eqv-hash)
        (g$11971$1Z2PAY core-prim . reverse!)
        (g$11970$1Z2PAY core-prim . deserialize-port)
        (g$11969$1Z2PAY core-prim . serialize-port)
        (g$7392$1Z2PAY core-prim . enum-set?)
        (g$6849$1Z2PAY core-prim . make-promise)
        (g$11806$1Z2PAY core-prim . load/args)
        (g$7502$1Z2PAY core-prim . printf)
        (g$7503$1Z2PAY core-prim . fprintf)
        (g$7504$1Z2PAY core-prim . format)
        (g$11968$1Z2PAY core-prim . procedure-form)
        (g$11967$1Z2PAY core-prim . procedure-environment)
        (g$11966$1Z2PAY core-prim . procedure-name)
        (g$11965$1Z2PAY core-prim . procedure-arity)
        (g$11964$1Z2PAY core-prim . gc-collect)
        (g$11963$1Z2PAY core-prim . clr-type?)
        (g$11962$1Z2PAY core-prim . get-clr-type)
        (g$11961$1Z2PAY core-prim . get-command-line)
        (g$11960$1Z2PAY core-prim . vector-append)
        (g$11959$1Z2PAY core-prim . vector-filter)
        (g$11958$1Z2PAY core-prim . vector-reverse!)
        (g$11957$1Z2PAY core-prim . vector-contains?)
        (g$11956$1Z2PAY core-prim . vector-index-of)
        (g$11955$1Z2PAY core-prim . vector-copy)
        (g$11954$1Z2PAY core-prim . vector-binary-search)
        (g$11953$1Z2PAY core-prim . string-ci-compare)
        (g$11952$1Z2PAY core-prim . string-compare)
        (g$11951$1Z2PAY core-prim . string-format)
        (g$11803$1Z2PAY core-prim . trace-printer)
        (g$11950$1Z2PAY core-prim . make-traced-procedure)
        (g$7524$1Z2PAY core-prim . make-traced-macro)
        (g$8825$1Z2PAY core-prim . assertion-error)
        (g$11949$1Z2PAY core-prim . pmap)
        (g$11948$1Z2PAY core-prim . time-it)
        (g$7531$1Z2PAY core-prim . make-parameter)
        (g$11947$1Z2PAY core-prim . library-locator)
        (g$11946$1Z2PAY core-prim . get-library-paths)
        (g$8804$1Z2PAY core-prim . environment-bindings)
        (g$8807$1Z2PAY core-prim . environment-symbols)
        (g$8803$1Z2PAY core-prim . interaction-environment-symbols)
        (g$11945$1Z2PAY core-prim . optimization-level)
        (g$7986$1Z2PAY core-prim . library-path)
        (g$8811$1Z2PAY core-prim . expand)
        (g$11944$1Z2PAY $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$11943$1Z2PAY $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$11942$1Z2PAY $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$11941$1Z2PAY $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$11940$1Z2PAY $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$11939$1Z2PAY
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$11938$1Z2PAY
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$11937$1Z2PAY
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$11936$1Z2PAY
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$11935$1Z2PAY $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$11934$1Z2PAY
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$11933$1Z2PAY $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$11932$1Z2PAY $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$11931$1Z2PAY $core-rtd &i/o-rtd &i/o-rcd)
        (g$11930$1Z2PAY $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$11929$1Z2PAY $core-rtd &undefined-rtd &undefined-rcd)
        (g$11928$1Z2PAY $core-rtd &syntax-rtd &syntax-rcd)
        (g$11927$1Z2PAY $core-rtd &lexical-rtd &lexical-rcd)
        (g$11926$1Z2PAY
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$11925$1Z2PAY $core-rtd &who-rtd &who-rcd)
        (g$11924$1Z2PAY $core-rtd &irritants-rtd &irritants-rcd)
        (g$11923$1Z2PAY $core-rtd &assertion-rtd &assertion-rcd)
        (g$11922$1Z2PAY $core-rtd &violation-rtd &violation-rcd)
        (g$11921$1Z2PAY $core-rtd &error-rtd &error-rcd)
        (g$11920$1Z2PAY $core-rtd &serious-rtd &serious-rcd)
        (g$11919$1Z2PAY $core-rtd &warning-rtd &warning-rcd)
        (g$11918$1Z2PAY $core-rtd &message-rtd &message-rcd)
        (g$11917$1Z2PAY $core-rtd &condition-rtd &condition-rcd)
        (g$11916$1Z2PAY macro . define-condition-type)
        (g$11915$1Z2PAY macro . define-enumeration)
        (g$11914$1Z2PAY macro . define-record-type)
        (g$11913$1Z2PAY macro . parent-rtd)
        (g$11912$1Z2PAY macro . nongenerative)
        (g$11911$1Z2PAY macro . opaque)
        (g$11910$1Z2PAY macro . sealed)
        (g$11909$1Z2PAY macro . protocol)
        (g$11908$1Z2PAY macro . parent)
        (g$11907$1Z2PAY macro . immutable)
        (g$11906$1Z2PAY macro . mutable)
        (g$11905$1Z2PAY macro . fields)
        (g$11904$1Z2PAY macro . error-handling-mode)
        (g$11903$1Z2PAY macro . file-options)
        (g$11902$1Z2PAY macro . buffer-mode)
        (g$11901$1Z2PAY macro . eol-style)
        (g$11900$1Z2PAY macro . guard)
        (g$11899$1Z2PAY macro . trace-letrec-syntax)
        (g$11898$1Z2PAY macro . trace-let-syntax)
        (g$11897$1Z2PAY macro . trace-define-syntax)
        (g$11896$1Z2PAY macro . trace-define)
        (g$11895$1Z2PAY macro . trace-lambda)
        (g$11894$1Z2PAY macro . unsyntax-splicing)
        (g$11893$1Z2PAY macro . unsyntax)
        (g$11892$1Z2PAY macro . unquote-splicing)
        (g$11891$1Z2PAY macro . unquote)
        (g$11890$1Z2PAY macro . _)
        (g$11889$1Z2PAY macro . else)
        (g$11888$1Z2PAY macro . =>)
        (g$11887$1Z2PAY macro . ...)
        (g$11886$1Z2PAY macro . assert)
        (g$11885$1Z2PAY macro . endianness)
        (g$11884$1Z2PAY macro . delay)
        (g$11883$1Z2PAY macro . time)
        (g$11882$1Z2PAY macro . or)
        (g$11881$1Z2PAY macro . and)
        (g$11880$1Z2PAY macro . do)
        (g$11879$1Z2PAY macro . cond)
        (g$11878$1Z2PAY macro . let*)
        (g$11877$1Z2PAY macro . let)
        (g$11876$1Z2PAY macro . identifier-syntax)
        (g$11875$1Z2PAY macro . with-syntax)
        (g$11874$1Z2PAY macro . quasisyntax)
        (g$11873$1Z2PAY macro . quasiquote)
        (g$11872$1Z2PAY macro . syntax-rules)
        (g$11871$1Z2PAY macro . include-into)
        (g$11870$1Z2PAY macro . include)
        (g$11869$1Z2PAY macro . define-struct)
        (g$11868$1Z2PAY macro . let-values)
        (g$11867$1Z2PAY macro . let*-values)
        (g$11866$1Z2PAY core-macro . record-constructor-descriptor)
        (g$11865$1Z2PAY core-macro . record-type-descriptor)
        (g$11864$1Z2PAY core-macro . fluid-let-syntax)
        (g$11863$1Z2PAY macro . case)
        (g$11862$1Z2PAY macro . parameterize)
        (g$11861$1Z2PAY macro . unless)
        (g$11860$1Z2PAY macro . when)
        (g$11859$1Z2PAY core-macro . if)
        (g$11858$1Z2PAY core-macro . letrec*)
        (g$11857$1Z2PAY core-macro . letrec)
        (g$11856$1Z2PAY core-macro . type-descriptor)
        (g$11855$1Z2PAY core-macro . case-lambda)
        (g$11854$1Z2PAY core-macro . lambda)
        (g$11853$1Z2PAY core-macro . syntax)
        (g$11852$1Z2PAY core-macro . syntax-case)
        (g$11851$1Z2PAY core-macro . quote)
        (g$11850$1Z2PAY core-macro . foreign-call)
        (g$11849$1Z2PAY letrec-syntax)
        (g$11848$1Z2PAY let-syntax)
        (g$11847$1Z2PAY set!)
        (g$11846$1Z2PAY export)
        (g$11845$1Z2PAY import)
        (g$11844$1Z2PAY library)
        (g$11843$1Z2PAY begin)
        (g$11842$1Z2PAY module)
        (g$11841$1Z2PAY define-syntax)
        (g$11840$1Z2PAY define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7098$1Z2PAY
      'g$12493$1Z2PAY
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$12372$1Z2PAY)
        (eval-core . g$12371$1Z2PAY)
        (set-symbol-value! . g$12370$1Z2PAY)
        (symbol-value . g$12369$1Z2PAY)
        (gensym . g$12367$1Z2PAY)
        (void . g$12366$1Z2PAY))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$11178$1Z2PAY
     g$trace-printer$11218$1Z2PAY
     (g$make-parameter$6562$1Z2PAY write))
   (g$command-line$11179$1Z2PAY
     g$command-line$11219$1Z2PAY
     (g$make-parameter$6562$1Z2PAY (get-command-line)))
   (g$local-library-path$11180$1Z2PAY
     g$local-library-path$11220$1Z2PAY
     (case-lambda
       ((g$filename$11191$1Z2PAY)
        (cons
          (g$get-directory-name$5473$1Z2PAY g$filename$11191$1Z2PAY)
          (g$library-path$7082$1Z2PAY)))))
   (g$load/args$11181$1Z2PAY
     g$load/args$11221$1Z2PAY
     (case-lambda
       ((g$filename$11192$1Z2PAY . g$args$11193$1Z2PAY)
        (begin
          (apply
            g$load-r6rs-top-level$11188$1Z2PAY
            g$filename$11192$1Z2PAY
            'load
            g$args$11193$1Z2PAY)
          (void)))))
   (g$load$11182$1Z2PAY
     g$load$11222$1Z2PAY
     (case-lambda
       ((g$filename$11194$1Z2PAY)
        (begin
          (apply
            g$load-r6rs-top-level$11188$1Z2PAY
            g$filename$11194$1Z2PAY
            'load
            (cdr (g$command-line$11179$1Z2PAY)))
          (void)))))
   (g$ironscheme-build$11183$1Z2PAY
     g$ironscheme-build$11223$1Z2PAY
     (case-lambda (() (g$load$11182$1Z2PAY '"ironscheme-buildscript.ss"))))
   (g$eval-top-level$11184$1Z2PAY
     g$eval-top-level$11224$1Z2PAY
     (case-lambda
       ((g$x$11195$1Z2PAY)
        (g$eval$11153$1Z2PAY
          g$x$11195$1Z2PAY
          (g$interaction-environment$11176$1Z2PAY)))))
   (g$compile-system-libraries$11185$1Z2PAY
     g$compile-system-libraries$11225$1Z2PAY
     (case-lambda
       (()
        (g$eval-top-level$11184$1Z2PAY
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$11186$1Z2PAY
     g$compile$11226$1Z2PAY
     (case-lambda
       ((g$filename$11196$1Z2PAY)
        (g$load-r6rs-top-level$11188$1Z2PAY g$filename$11196$1Z2PAY 'compile))))
   (g$compile->closure$11187$1Z2PAY
     g$compile->closure$11227$1Z2PAY
     (case-lambda
       ((g$filename$11197$1Z2PAY)
        (g$load-r6rs-top-level$11188$1Z2PAY g$filename$11197$1Z2PAY 'closure))))
   (g$load-r6rs-top-level$11188$1Z2PAY
     g$load-r6rs-top-level$11228$1Z2PAY
     (case-lambda
       ((g$filename$11198$1Z2PAY g$how$11199$1Z2PAY . g$args$11200$1Z2PAY)
        ((case-lambda
           ((g$library-path$11203$1Z2PAY g$library-path$11204$1Z2PAY)
            ((case-lambda
               ((g$swap$11205$1Z2PAY)
                (dynamic-wind
                  g$swap$11205$1Z2PAY
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$11206$1Z2PAY)
                         ((case-lambda
                            ((g$t$11207$1Z2PAY)
                             (if (g$memv$5009$1Z2PAY
                                   g$t$11207$1Z2PAY
                                   '(closure))
                               (g$pre-compile-r6rs-top-level$11175$1Z2PAY
                                 g$x*$11206$1Z2PAY)
                               (if (g$memv$5009$1Z2PAY g$t$11207$1Z2PAY '(load))
                                 ((case-lambda
                                    ((g$command-line$11210$1Z2PAY
                                       g$command-line$11211$1Z2PAY)
                                     ((case-lambda
                                        ((g$swap$11212$1Z2PAY)
                                         (dynamic-wind
                                           g$swap$11212$1Z2PAY
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$11174$1Z2PAY
                                                 g$x*$11206$1Z2PAY))))
                                           g$swap$11212$1Z2PAY)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$11213$1Z2PAY)
                                             (begin
                                               (g$command-line$11210$1Z2PAY
                                                 g$command-line$11211$1Z2PAY)
                                               (set! g$command-line$11211$1Z2PAY
                                                 g$t$11213$1Z2PAY))))
                                          (g$command-line$11210$1Z2PAY)))))))
                                  g$command-line$11179$1Z2PAY
                                  (cons
                                    g$filename$11198$1Z2PAY
                                    (map (case-lambda
                                           ((g$x$11214$1Z2PAY)
                                            (g$format$6458$1Z2PAY
                                              '"~a"
                                              g$x$11214$1Z2PAY)))
                                         g$args$11200$1Z2PAY)))
                                 (if (g$memv$5009$1Z2PAY
                                       g$t$11207$1Z2PAY
                                       '(compile))
                                   (begin
                                     (g$compile-r6rs-top-level$11174$1Z2PAY
                                       g$x*$11206$1Z2PAY)
                                     (g$serialize-all$7086$1Z2PAY
                                       serialize-library
                                       g$compile-core-expr$6809$1Z2PAY))
                                   (if '#f '#f (void)))))))
                          g$how$11199$1Z2PAY)))
                      (g$with-input-from-file$6286$1Z2PAY
                        g$filename$11198$1Z2PAY
                        (case-lambda
                          (()
                           ((letrec ((g$f$11215$1Z2PAY
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$11216$1Z2PAY)
                                              (if (eof-object? g$x$11216$1Z2PAY)
                                                '()
                                                (cons
                                                  g$x$11216$1Z2PAY
                                                  (g$f$11215$1Z2PAY)))))
                                           (read-annotated))))))
                              g$f$11215$1Z2PAY))))))))
                  g$swap$11205$1Z2PAY)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$11217$1Z2PAY)
                    (begin
                      (g$library-path$11203$1Z2PAY g$library-path$11204$1Z2PAY)
                      (set! g$library-path$11204$1Z2PAY g$t$11217$1Z2PAY))))
                 (g$library-path$11203$1Z2PAY)))))))
         g$library-path$7082$1Z2PAY
         (g$local-library-path$11180$1Z2PAY g$filename$11198$1Z2PAY)))))
   (g$fo$11189$1Z2PAY
     g$fo$11229$1Z2PAY
     (g$make-enumeration$6420$1Z2PAY '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$7087$1Z2PAY
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$11190$1Z2PAY)
         (if (g$serious-condition?$5735$1Z2PAY g$ex$11190$1Z2PAY)
           (raise g$ex$11190$1Z2PAY)
           (begin (display g$ex$11190$1Z2PAY) (newline))))))
    (set-symbol-value! 'load g$load$11182$1Z2PAY)
    (set-symbol-value! 'compile g$compile$11186$1Z2PAY)
    (set-symbol-value! 'compile->closure g$compile->closure$11187$1Z2PAY)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$11184$1Z2PAY)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$11144$1Z2PAY)
    (set-symbol-value! 'expanded2core g$expanded->core$6808$1Z2PAY)
    (set-symbol-value! 'trace-printer g$trace-printer$11178$1Z2PAY)
    (g$file-options-constructor$6563$1Z2PAY
      (g$enum-set-constructor$6423$1Z2PAY g$fo$11189$1Z2PAY))
    (g$library-path$7082$1Z2PAY (get-library-paths))))

