;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (ironscheme base)
  ((g$caar$4823$Up9ra
     g$caar$4895$Up9ra
     (case-lambda ((g$x$4854$Up9ra) (car (car g$x$4854$Up9ra)))))
   (g$cadr$4824$Up9ra
     g$cadr$4896$Up9ra
     (case-lambda ((g$x$4855$Up9ra) (car (cdr g$x$4855$Up9ra)))))
   (g$cdar$4825$Up9ra
     g$cdar$4897$Up9ra
     (case-lambda ((g$x$4856$Up9ra) (cdr (car g$x$4856$Up9ra)))))
   (g$cddr$4826$Up9ra
     g$cddr$4898$Up9ra
     (case-lambda ((g$x$4857$Up9ra) (cdr (cdr g$x$4857$Up9ra)))))
   (g$caaar$4827$Up9ra
     g$caaar$4899$Up9ra
     (case-lambda
       ((g$x$4858$Up9ra) (g$caar$4823$Up9ra (car g$x$4858$Up9ra)))))
   (g$caadr$4828$Up9ra
     g$caadr$4900$Up9ra
     (case-lambda
       ((g$x$4859$Up9ra) (g$caar$4823$Up9ra (cdr g$x$4859$Up9ra)))))
   (g$cadar$4829$Up9ra
     g$cadar$4901$Up9ra
     (case-lambda
       ((g$x$4860$Up9ra) (g$cadr$4824$Up9ra (car g$x$4860$Up9ra)))))
   (g$caddr$4830$Up9ra
     g$caddr$4902$Up9ra
     (case-lambda
       ((g$x$4861$Up9ra) (g$cadr$4824$Up9ra (cdr g$x$4861$Up9ra)))))
   (g$cdaar$4831$Up9ra
     g$cdaar$4903$Up9ra
     (case-lambda
       ((g$x$4862$Up9ra) (g$cdar$4825$Up9ra (car g$x$4862$Up9ra)))))
   (g$cdadr$4832$Up9ra
     g$cdadr$4904$Up9ra
     (case-lambda
       ((g$x$4863$Up9ra) (g$cdar$4825$Up9ra (cdr g$x$4863$Up9ra)))))
   (g$cddar$4833$Up9ra
     g$cddar$4905$Up9ra
     (case-lambda
       ((g$x$4864$Up9ra) (g$cddr$4826$Up9ra (car g$x$4864$Up9ra)))))
   (g$cdddr$4834$Up9ra
     g$cdddr$4906$Up9ra
     (case-lambda
       ((g$x$4865$Up9ra) (g$cddr$4826$Up9ra (cdr g$x$4865$Up9ra)))))
   (g$caaaar$4835$Up9ra
     g$caaaar$4907$Up9ra
     (case-lambda
       ((g$x$4866$Up9ra) (g$caaar$4827$Up9ra (car g$x$4866$Up9ra)))))
   (g$caaadr$4836$Up9ra
     g$caaadr$4908$Up9ra
     (case-lambda
       ((g$x$4867$Up9ra) (g$caaar$4827$Up9ra (cdr g$x$4867$Up9ra)))))
   (g$caadar$4837$Up9ra
     g$caadar$4909$Up9ra
     (case-lambda
       ((g$x$4868$Up9ra) (g$caadr$4828$Up9ra (car g$x$4868$Up9ra)))))
   (g$caaddr$4838$Up9ra
     g$caaddr$4910$Up9ra
     (case-lambda
       ((g$x$4869$Up9ra) (g$caadr$4828$Up9ra (cdr g$x$4869$Up9ra)))))
   (g$cadaar$4839$Up9ra
     g$cadaar$4911$Up9ra
     (case-lambda
       ((g$x$4870$Up9ra) (g$cadar$4829$Up9ra (car g$x$4870$Up9ra)))))
   (g$cadadr$4840$Up9ra
     g$cadadr$4912$Up9ra
     (case-lambda
       ((g$x$4871$Up9ra) (g$cadar$4829$Up9ra (cdr g$x$4871$Up9ra)))))
   (g$caddar$4841$Up9ra
     g$caddar$4913$Up9ra
     (case-lambda
       ((g$x$4872$Up9ra) (g$caddr$4830$Up9ra (car g$x$4872$Up9ra)))))
   (g$cadddr$4842$Up9ra
     g$cadddr$4914$Up9ra
     (case-lambda
       ((g$x$4873$Up9ra) (g$caddr$4830$Up9ra (cdr g$x$4873$Up9ra)))))
   (g$cdaaar$4843$Up9ra
     g$cdaaar$4915$Up9ra
     (case-lambda
       ((g$x$4874$Up9ra) (g$cdaar$4831$Up9ra (car g$x$4874$Up9ra)))))
   (g$cdaadr$4844$Up9ra
     g$cdaadr$4916$Up9ra
     (case-lambda
       ((g$x$4875$Up9ra) (g$cdaar$4831$Up9ra (cdr g$x$4875$Up9ra)))))
   (g$cdadar$4845$Up9ra
     g$cdadar$4917$Up9ra
     (case-lambda
       ((g$x$4876$Up9ra) (g$cdadr$4832$Up9ra (car g$x$4876$Up9ra)))))
   (g$cdaddr$4846$Up9ra
     g$cdaddr$4918$Up9ra
     (case-lambda
       ((g$x$4877$Up9ra) (g$cdadr$4832$Up9ra (cdr g$x$4877$Up9ra)))))
   (g$cddaar$4847$Up9ra
     g$cddaar$4919$Up9ra
     (case-lambda
       ((g$x$4878$Up9ra) (g$cddar$4833$Up9ra (car g$x$4878$Up9ra)))))
   (g$cddadr$4848$Up9ra
     g$cddadr$4920$Up9ra
     (case-lambda
       ((g$x$4879$Up9ra) (g$cddar$4833$Up9ra (cdr g$x$4879$Up9ra)))))
   (g$cdddar$4849$Up9ra
     g$cdddar$4921$Up9ra
     (case-lambda
       ((g$x$4880$Up9ra) (g$cdddr$4834$Up9ra (car g$x$4880$Up9ra)))))
   (g$cddddr$4850$Up9ra
     g$cddddr$4922$Up9ra
     (case-lambda
       ((g$x$4881$Up9ra) (g$cdddr$4834$Up9ra (cdr g$x$4881$Up9ra)))))
   (g$rationalize$4851$Up9ra
     g$rationalize$4923$Up9ra
     (case-lambda
       ((g$x$4882$Up9ra g$e$4883$Up9ra)
        (apply / (g$find-ratio$4852$Up9ra g$x$4882$Up9ra g$e$4883$Up9ra)))))
   (g$find-ratio$4852$Up9ra
     g$find-ratio$4924$Up9ra
     (case-lambda
       ((g$x$4884$Up9ra g$e$4885$Up9ra)
        (g$find-ratio-between$4853$Up9ra
          (- g$x$4884$Up9ra g$e$4885$Up9ra)
          (+ g$x$4884$Up9ra g$e$4885$Up9ra)))))
   (g$find-ratio-between$4853$Up9ra
     g$find-ratio-between$4925$Up9ra
     (case-lambda
       ((g$x$4886$Up9ra g$y$4887$Up9ra)
        (letrec* ((g$sr$4888$Up9ra
                    (case-lambda
                      ((g$x$4890$Up9ra g$y$4891$Up9ra)
                       ((case-lambda
                          ((g$fx$4892$Up9ra g$fy$4893$Up9ra)
                           (if (>= g$fx$4892$Up9ra g$x$4890$Up9ra)
                             (list g$fx$4892$Up9ra '1)
                             (if (= g$fx$4892$Up9ra g$fy$4893$Up9ra)
                               ((case-lambda
                                  ((g$rat$4894$Up9ra)
                                   (list
                                     (+ (g$cadr$4824$Up9ra g$rat$4894$Up9ra)
                                        (* g$fx$4892$Up9ra
                                           (car g$rat$4894$Up9ra)))
                                     (car g$rat$4894$Up9ra))))
                                (g$sr$4888$Up9ra
                                  (/ (- g$y$4891$Up9ra g$fy$4893$Up9ra))
                                  (/ (- g$x$4890$Up9ra g$fx$4892$Up9ra))))
                               (list (+ '1 g$fx$4892$Up9ra) '1)))))
                        (exact (floor g$x$4890$Up9ra))
                        (exact (floor g$y$4891$Up9ra)))))))
          (if (< g$y$4887$Up9ra g$x$4886$Up9ra)
            (g$find-ratio-between$4853$Up9ra g$y$4887$Up9ra g$x$4886$Up9ra)
            (if (>= g$x$4886$Up9ra g$y$4887$Up9ra)
              (list g$x$4886$Up9ra '1)
              (if (positive? g$x$4886$Up9ra)
                (g$sr$4888$Up9ra g$x$4886$Up9ra g$y$4887$Up9ra)
                (if (negative? g$y$4887$Up9ra)
                  ((case-lambda
                     ((g$rat$4889$Up9ra)
                      (list
                        (- (car g$rat$4889$Up9ra))
                        (g$cadr$4824$Up9ra g$rat$4889$Up9ra))))
                   (g$sr$4888$Up9ra (- g$y$4887$Up9ra) (- g$x$4886$Up9ra)))
                  '(0 1))))))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$5121$Up9ra g$using$5156$Up9ra (clr-using-internal 'system))
   (g$using$5123$Up9ra
     g$using$5157$Up9ra
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$5124$Up9ra
     g$make-eq-hashtable$5158$Up9ra
     (case-lambda
       (() (clr-new-internal 'hashtable))
       ((g$k$5135$Up9ra)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$5135$Up9ra)))))
   (g$make-eqv-hashtable$5125$Up9ra
     g$make-eqv-hashtable$5159$Up9ra
     (case-lambda
       (() (make-hashtable eqv-hash eqv?))
       ((g$k$5136$Up9ra) (make-hashtable eqv-hash eqv? g$k$5136$Up9ra))))
   (g$hashtable-size$5126$Up9ra
     g$hashtable-size$5160$Up9ra
     (case-lambda
       ((g$ht$5137$Up9ra)
        (clr-call-internal 'hashtable 'get_count g$ht$5137$Up9ra))))
   (g$hashtable-ref$5127$Up9ra
     g$hashtable-ref$5161$Up9ra
     (case-lambda
       ((g$ht$5138$Up9ra g$key$5139$Up9ra g$default$5140$Up9ra)
        (letrec* ((g$r$5141$Up9ra
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$5138$Up9ra
                      g$key$5139$Up9ra)))
          (if (not (null? g$r$5141$Up9ra))
            g$r$5141$Up9ra
            g$default$5140$Up9ra)))))
   (g$hashtable-set!$5128$Up9ra
     g$hashtable-set!$5162$Up9ra
     (case-lambda
       ((g$ht$5142$Up9ra g$key$5143$Up9ra g$obj$5144$Up9ra)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$5142$Up9ra
          g$key$5143$Up9ra
          g$obj$5144$Up9ra))))
   (g$hashtable-delete!$5129$Up9ra
     g$hashtable-delete!$5163$Up9ra
     (case-lambda
       ((g$ht$5145$Up9ra g$key$5146$Up9ra)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$5145$Up9ra
          g$key$5146$Up9ra))))
   (g$hashtable-contains?$5130$Up9ra
     g$hashtable-contains?$5164$Up9ra
     (case-lambda
       ((g$ht$5147$Up9ra g$key$5148$Up9ra)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$5147$Up9ra
          g$key$5148$Up9ra))))
   (g$hashtable-update!$5131$Up9ra
     g$hashtable-update!$5165$Up9ra
     (case-lambda
       ((g$ht$5149$Up9ra
          g$key$5150$Up9ra
          g$proc$5151$Up9ra
          g$default$5152$Up9ra)
        (g$hashtable-set!$5128$Up9ra
          g$ht$5149$Up9ra
          g$key$5150$Up9ra
          (g$proc$5151$Up9ra
            (g$hashtable-ref$5127$Up9ra
              g$ht$5149$Up9ra
              g$key$5150$Up9ra
              g$default$5152$Up9ra))))))
   (g$hashtable-clear!$5132$Up9ra
     g$hashtable-clear!$5166$Up9ra
     (case-lambda
       ((g$ht$5153$Up9ra)
        (clr-call-internal 'hashtable 'clear g$ht$5153$Up9ra))
       ((g$ht$5154$Up9ra g$k$5155$Up9ra)
        (clr-call-internal 'hashtable 'clear g$ht$5154$Up9ra))))
   (g$clear-usings$5134$Up9ra
     g$clear-usings$5167$Up9ra
     (clr-clear-usings-internal)))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$5169$Up9ra g$using$5235$Up9ra (clr-using-internal 'system.io))
   (g$file-exists?$5170$Up9ra
     g$file-exists?$5236$Up9ra
     (case-lambda
       ((g$fn$5198$Up9ra)
        (clr-call-internal 'file 'exists '() g$fn$5198$Up9ra))))
   (g$delete-file$5171$Up9ra
     g$delete-file$5237$Up9ra
     (case-lambda
       ((g$fn$5199$Up9ra)
        (clr-call-internal 'file 'delete '() g$fn$5199$Up9ra))))
   (g$file-copy$5172$Up9ra
     g$file-copy$5238$Up9ra
     (case-lambda
       ((g$from$5200$Up9ra g$to$5201$Up9ra)
        (g$file-copy$5172$Up9ra g$from$5200$Up9ra g$to$5201$Up9ra '#f))
       ((g$from$5202$Up9ra g$to$5203$Up9ra g$overwrite?$5204$Up9ra)
        (clr-call-internal
          'file
          'copy
          '()
          g$from$5202$Up9ra
          g$to$5203$Up9ra
          g$overwrite?$5204$Up9ra))))
   (g$file-move$5173$Up9ra
     g$file-move$5239$Up9ra
     (case-lambda
       ((g$from$5205$Up9ra g$to$5206$Up9ra)
        (clr-call-internal 'file 'move '() g$from$5205$Up9ra g$to$5206$Up9ra))))
   (g$file-create-time$5174$Up9ra
     g$file-create-time$5240$Up9ra
     (case-lambda
       ((g$fn$5207$Up9ra)
        (clr-call-internal 'file 'getcreationtime '() g$fn$5207$Up9ra))))
   (g$file-access-time$5175$Up9ra
     g$file-access-time$5241$Up9ra
     (case-lambda
       ((g$fn$5208$Up9ra)
        (clr-call-internal 'file 'getlastaccesstime '() g$fn$5208$Up9ra))))
   (g$file-modified-time$5176$Up9ra
     g$file-modified-time$5242$Up9ra
     (case-lambda
       ((g$fn$5209$Up9ra)
        (clr-call-internal 'file 'getlastwritetime '() g$fn$5209$Up9ra))))
   (g$directory-exists?$5177$Up9ra
     g$directory-exists?$5243$Up9ra
     (case-lambda
       ((g$fn$5210$Up9ra)
        (clr-call-internal 'directory 'exists '() g$fn$5210$Up9ra))))
   (g$delete-directory$5178$Up9ra
     g$delete-directory$5244$Up9ra
     (case-lambda
       ((g$dir$5211$Up9ra)
        (g$delete-directory$5178$Up9ra g$dir$5211$Up9ra '#f))
       ((g$dir$5212$Up9ra g$recursive?$5213$Up9ra)
        (clr-call-internal
          'directory
          'delete
          '()
          g$dir$5212$Up9ra
          g$recursive?$5213$Up9ra))))
   (g$directory-move$5179$Up9ra
     g$directory-move$5245$Up9ra
     (case-lambda
       ((g$from$5214$Up9ra g$to$5215$Up9ra)
        (clr-call-internal
          'directory
          'move
          '()
          g$from$5214$Up9ra
          g$to$5215$Up9ra))))
   (g$create-directory$5180$Up9ra
     g$create-directory$5246$Up9ra
     (case-lambda
       ((g$name$5216$Up9ra)
        (clr-call-internal 'directory 'createdirectory '() g$name$5216$Up9ra))))
   (g$get-files$5181$Up9ra
     g$get-files$5247$Up9ra
     (case-lambda
       ((g$dir$5217$Up9ra) (g$get-files$5181$Up9ra g$dir$5217$Up9ra '"*"))
       ((g$dir$5218$Up9ra g$pattern$5219$Up9ra)
        (clr-call-internal
          'directory
          'getfiles
          '()
          g$dir$5218$Up9ra
          g$pattern$5219$Up9ra))))
   (g$get-directories$5182$Up9ra
     g$get-directories$5248$Up9ra
     (case-lambda
       ((g$dir$5220$Up9ra)
        (g$get-directories$5182$Up9ra g$dir$5220$Up9ra '"*"))
       ((g$dir$5221$Up9ra g$pattern$5222$Up9ra)
        (clr-call-internal
          'directory
          'getdirectories
          '()
          g$dir$5221$Up9ra
          g$pattern$5222$Up9ra))))
   (g$change-extension$5183$Up9ra
     g$change-extension$5249$Up9ra
     (case-lambda
       ((g$path$5223$Up9ra g$extension$5224$Up9ra)
        (clr-call-internal
          'path
          'changeextension
          '()
          g$path$5223$Up9ra
          g$extension$5224$Up9ra))))
   (g$path-combine$5184$Up9ra
     g$path-combine$5250$Up9ra
     (case-lambda
       ((g$path1$5225$Up9ra g$path2$5226$Up9ra)
        (clr-call-internal
          'path
          'combine
          '()
          g$path1$5225$Up9ra
          g$path2$5226$Up9ra))))
   (g$get-directory-name$5185$Up9ra
     g$get-directory-name$5251$Up9ra
     (case-lambda
       ((g$path$5227$Up9ra)
        (clr-call-internal 'path 'getdirectoryname '() g$path$5227$Up9ra))))
   (g$get-extension$5186$Up9ra
     g$get-extension$5252$Up9ra
     (case-lambda
       ((g$path$5228$Up9ra)
        (clr-call-internal 'path 'getextension '() g$path$5228$Up9ra))))
   (g$get-filename$5187$Up9ra
     g$get-filename$5253$Up9ra
     (case-lambda
       ((g$path$5229$Up9ra)
        (clr-call-internal 'path 'getfilename '() g$path$5229$Up9ra))))
   (g$get-filename-without-extension$5188$Up9ra
     g$get-filename-without-extension$5254$Up9ra
     (case-lambda
       ((g$path$5230$Up9ra)
        (clr-call-internal
          'path
          'getfilenamewithoutextension
          '()
          g$path$5230$Up9ra))))
   (g$get-full-path$5189$Up9ra
     g$get-full-path$5255$Up9ra
     (case-lambda
       ((g$path$5231$Up9ra)
        (clr-call-internal 'path 'getfullpath '() g$path$5231$Up9ra))))
   (g$get-path-root$5190$Up9ra
     g$get-path-root$5256$Up9ra
     (case-lambda
       ((g$path$5232$Up9ra)
        (clr-call-internal 'path 'getpathroot '() g$path$5232$Up9ra))))
   (g$get-random-filename$5191$Up9ra
     g$get-random-filename$5257$Up9ra
     (case-lambda (() (clr-call-internal 'path 'getrandomfilename '()))))
   (g$get-temp-filename$5192$Up9ra
     g$get-temp-filename$5258$Up9ra
     (case-lambda (() (clr-call-internal 'path 'gettempfilename '()))))
   (g$get-temp-path$5193$Up9ra
     g$get-temp-path$5259$Up9ra
     (case-lambda (() (clr-call-internal 'path 'gettemppath '()))))
   (g$path-rooted?$5194$Up9ra
     g$path-rooted?$5260$Up9ra
     (case-lambda
       ((g$path$5233$Up9ra)
        (clr-call-internal 'path 'ispathrooted '() g$path$5233$Up9ra))))
   (g$path-has-extension?$5195$Up9ra
     g$path-has-extension?$5261$Up9ra
     (case-lambda
       ((g$path$5234$Up9ra)
        (clr-call-internal 'path 'hasextension '() g$path$5234$Up9ra))))
   (g$clear-usings$5197$Up9ra
     g$clear-usings$5262$Up9ra
     (clr-clear-usings-internal)))
  (void))

(library-letrec* (ironscheme lists)
  ((g$find$5263$Up9ra
     g$find$5354$Up9ra
     (case-lambda
       ((g$proc$5282$Up9ra g$l$5283$Up9ra)
        (if (null? g$l$5283$Up9ra)
          '#f
          ((case-lambda
             ((g$e$5284$Up9ra)
              (if (g$proc$5282$Up9ra g$e$5284$Up9ra)
                g$e$5284$Up9ra
                (g$find$5263$Up9ra g$proc$5282$Up9ra (cdr g$l$5283$Up9ra)))))
           (car g$l$5283$Up9ra))))))
   (g$partition$5264$Up9ra
     g$partition$5355$Up9ra
     (case-lambda
       ((g$proc$5285$Up9ra g$l$5286$Up9ra)
        ((letrec ((g$f$5287$Up9ra
                    (case-lambda
                      ((g$l$5288$Up9ra g$a$5289$Up9ra g$b$5290$Up9ra)
                       (if (null? g$l$5288$Up9ra)
                         (values
                           (reverse! g$a$5289$Up9ra)
                           (reverse! g$b$5290$Up9ra))
                         ((case-lambda
                            ((g$e$5291$Up9ra)
                             (if (g$proc$5285$Up9ra g$e$5291$Up9ra)
                               (g$f$5287$Up9ra
                                 (cdr g$l$5288$Up9ra)
                                 (cons g$e$5291$Up9ra g$a$5289$Up9ra)
                                 g$b$5290$Up9ra)
                               (g$f$5287$Up9ra
                                 (cdr g$l$5288$Up9ra)
                                 g$a$5289$Up9ra
                                 (cons g$e$5291$Up9ra g$b$5290$Up9ra)))))
                          (car g$l$5288$Up9ra)))))))
           g$f$5287$Up9ra)
         g$l$5286$Up9ra
         '()
         '()))))
   (g$remp$5265$Up9ra
     g$remp$5356$Up9ra
     (case-lambda
       ((g$proc$5292$Up9ra g$l$5293$Up9ra)
        ((letrec ((g$f$5294$Up9ra
                    (case-lambda
                      ((g$l$5295$Up9ra g$a$5296$Up9ra)
                       (if (null? g$l$5295$Up9ra)
                         (reverse! g$a$5296$Up9ra)
                         ((case-lambda
                            ((g$e$5297$Up9ra)
                             (if (g$proc$5292$Up9ra g$e$5297$Up9ra)
                               (g$f$5294$Up9ra
                                 (cdr g$l$5295$Up9ra)
                                 g$a$5296$Up9ra)
                               (g$f$5294$Up9ra
                                 (cdr g$l$5295$Up9ra)
                                 (cons g$e$5297$Up9ra g$a$5296$Up9ra)))))
                          (car g$l$5295$Up9ra)))))))
           g$f$5294$Up9ra)
         g$l$5293$Up9ra
         '()))))
   (g$filter$5266$Up9ra
     g$filter$5357$Up9ra
     (case-lambda
       ((g$proc$5298$Up9ra g$l$5299$Up9ra)
        ((letrec ((g$f$5300$Up9ra
                    (case-lambda
                      ((g$l$5301$Up9ra g$a$5302$Up9ra)
                       (if (null? g$l$5301$Up9ra)
                         (reverse! g$a$5302$Up9ra)
                         ((case-lambda
                            ((g$e$5303$Up9ra)
                             (if (g$proc$5298$Up9ra g$e$5303$Up9ra)
                               (g$f$5300$Up9ra
                                 (cdr g$l$5301$Up9ra)
                                 (cons g$e$5303$Up9ra g$a$5302$Up9ra))
                               (g$f$5300$Up9ra
                                 (cdr g$l$5301$Up9ra)
                                 g$a$5302$Up9ra))))
                          (car g$l$5301$Up9ra)))))))
           g$f$5300$Up9ra)
         g$l$5299$Up9ra
         '()))))
   (g$assv$5267$Up9ra
     g$assv$5358$Up9ra
     (case-lambda
       ((g$obj$5304$Up9ra g$lst$5305$Up9ra)
        (if (null? g$lst$5305$Up9ra)
          '#f
          ((case-lambda
             ((g$c$5306$Up9ra)
              (if (eqv? g$obj$5304$Up9ra (car g$c$5306$Up9ra))
                g$c$5306$Up9ra
                (g$assv$5267$Up9ra g$obj$5304$Up9ra (cdr g$lst$5305$Up9ra)))))
           (car g$lst$5305$Up9ra))))))
   (g$assoc$5268$Up9ra
     g$assoc$5359$Up9ra
     (case-lambda
       ((g$obj$5307$Up9ra g$lst$5308$Up9ra)
        (if (null? g$lst$5308$Up9ra)
          '#f
          ((case-lambda
             ((g$c$5309$Up9ra)
              (if (equal? g$obj$5307$Up9ra (car g$c$5309$Up9ra))
                g$c$5309$Up9ra
                (g$assoc$5268$Up9ra g$obj$5307$Up9ra (cdr g$lst$5308$Up9ra)))))
           (car g$lst$5308$Up9ra))))))
   (g$assp$5269$Up9ra
     g$assp$5360$Up9ra
     (case-lambda
       ((g$p?$5310$Up9ra g$lst$5311$Up9ra)
        (if (null? g$lst$5311$Up9ra)
          '#f
          ((case-lambda
             ((g$c$5312$Up9ra)
              (if (g$p?$5310$Up9ra (car g$c$5312$Up9ra))
                g$c$5312$Up9ra
                (g$assp$5269$Up9ra g$p?$5310$Up9ra (cdr g$lst$5311$Up9ra)))))
           (car g$lst$5311$Up9ra))))))
   (g$member$5270$Up9ra
     g$member$5361$Up9ra
     (case-lambda
       ((g$obj$5313$Up9ra g$lst$5314$Up9ra)
        (if (null? g$lst$5314$Up9ra)
          '#f
          (if (equal? g$obj$5313$Up9ra (car g$lst$5314$Up9ra))
            g$lst$5314$Up9ra
            (g$member$5270$Up9ra g$obj$5313$Up9ra (cdr g$lst$5314$Up9ra)))))))
   (g$memp$5271$Up9ra
     g$memp$5362$Up9ra
     (case-lambda
       ((g$p?$5315$Up9ra g$lst$5316$Up9ra)
        (if (null? g$lst$5316$Up9ra)
          '#f
          (if (g$p?$5315$Up9ra (car g$lst$5316$Up9ra))
            g$lst$5316$Up9ra
            (g$memp$5271$Up9ra g$p?$5315$Up9ra (cdr g$lst$5316$Up9ra)))))))
   (g$all-empty?$5272$Up9ra
     g$all-empty?$5363$Up9ra
     (case-lambda
       ((g$ls$5317$Up9ra)
        ((case-lambda
           ((g$t$5318$Up9ra)
            (if g$t$5318$Up9ra
              g$t$5318$Up9ra
              (begin
                '#f
                (if (null? (car g$ls$5317$Up9ra))
                  (begin '#f (g$all-empty?$5272$Up9ra (cdr g$ls$5317$Up9ra)))
                  '#f)))))
         (null? g$ls$5317$Up9ra)))))
   (g$split$5273$Up9ra
     g$split$5364$Up9ra
     (case-lambda
       ((g$ls$5319$Up9ra)
        (if (null? g$ls$5319$Up9ra)
          (values '() '())
          (call-with-values
            (case-lambda (() (g$split$5273$Up9ra (cdr g$ls$5319$Up9ra))))
            (case-lambda
              ((g$cars$5320$Up9ra g$cdrs$5321$Up9ra)
               ((case-lambda
                  ((g$a$5322$Up9ra)
                   (values
                     (cons (car g$a$5322$Up9ra) g$cars$5320$Up9ra)
                     (cons (cdr g$a$5322$Up9ra) g$cdrs$5321$Up9ra))))
                (car g$ls$5319$Up9ra)))))))))
   (g$for-all$5274$Up9ra
     g$for-all$5365$Up9ra
     (case-lambda
       ((g$f$5323$Up9ra . g$args$5324$Up9ra)
        (if (g$all-empty?$5272$Up9ra g$args$5324$Up9ra)
          '#t
          (call-with-values
            (case-lambda (() (g$split$5273$Up9ra g$args$5324$Up9ra)))
            (case-lambda
              ((g$cars$5325$Up9ra g$cdrs$5326$Up9ra)
               (if (apply g$f$5323$Up9ra g$cars$5325$Up9ra)
                 (begin
                   '#f
                   (apply
                     g$for-all$5274$Up9ra
                     g$f$5323$Up9ra
                     g$cdrs$5326$Up9ra))
                 '#f))))))))
   (g$exists$5275$Up9ra
     g$exists$5366$Up9ra
     (case-lambda
       ((g$f$5327$Up9ra . g$args$5328$Up9ra)
        (if (g$all-empty?$5272$Up9ra g$args$5328$Up9ra)
          '#f
          (call-with-values
            (case-lambda (() (g$split$5273$Up9ra g$args$5328$Up9ra)))
            (case-lambda
              ((g$cars$5329$Up9ra g$cdrs$5330$Up9ra)
               ((case-lambda
                  ((g$t$5331$Up9ra)
                   (if g$t$5331$Up9ra
                     g$t$5331$Up9ra
                     (begin
                       '#f
                       (apply
                         g$exists$5275$Up9ra
                         g$f$5327$Up9ra
                         g$cdrs$5330$Up9ra)))))
                (apply g$f$5327$Up9ra g$cars$5329$Up9ra)))))))))
   (g$cons*$5276$Up9ra
     g$cons*$5367$Up9ra
     (case-lambda
       ((g$a$5332$Up9ra . g$rest$5333$Up9ra)
        ((letrec ((g$f$5334$Up9ra
                    (case-lambda
                      ((g$a$5335$Up9ra g$rest$5336$Up9ra)
                       (if (null? g$rest$5336$Up9ra)
                         g$a$5335$Up9ra
                         (cons
                           g$a$5335$Up9ra
                           (g$f$5334$Up9ra
                             (car g$rest$5336$Up9ra)
                             (cdr g$rest$5336$Up9ra))))))))
           g$f$5334$Up9ra)
         g$a$5332$Up9ra
         g$rest$5333$Up9ra))))
   (g$fold-left$5277$Up9ra
     g$fold-left$5368$Up9ra
     (case-lambda
       ((g$combine$5337$Up9ra
          g$nil$5338$Up9ra
          g$list1$5339$Up9ra
          .
          g$lists$5340$Up9ra)
        (if (null? g$list1$5339$Up9ra)
          g$nil$5338$Up9ra
          (apply
            g$fold-left$5277$Up9ra
            (g$cons*$5276$Up9ra
              g$combine$5337$Up9ra
              (apply
                g$combine$5337$Up9ra
                (g$cons*$5276$Up9ra
                  g$nil$5338$Up9ra
                  (car g$list1$5339$Up9ra)
                  (map car g$lists$5340$Up9ra)))
              (cdr g$list1$5339$Up9ra)
              (map cdr g$lists$5340$Up9ra)))))))
   (g$fold-right$5278$Up9ra
     g$fold-right$5369$Up9ra
     (case-lambda
       ((g$combine$5341$Up9ra
          g$nil$5342$Up9ra
          g$list1$5343$Up9ra
          .
          g$lists$5344$Up9ra)
        (if (null? g$list1$5343$Up9ra)
          g$nil$5342$Up9ra
          (apply
            g$combine$5341$Up9ra
            (append
              (list (car g$list1$5343$Up9ra))
              (map car g$lists$5344$Up9ra)
              (list
                (apply
                  g$fold-right$5278$Up9ra
                  (g$cons*$5276$Up9ra
                    g$combine$5341$Up9ra
                    g$nil$5342$Up9ra
                    (cdr g$list1$5343$Up9ra)
                    (map cdr g$lists$5344$Up9ra))))))))))
   (g$remove$5279$Up9ra
     g$remove$5370$Up9ra
     (case-lambda
       ((g$obj$5345$Up9ra g$list$5346$Up9ra)
        (g$remp$5265$Up9ra
          (case-lambda
            ((g$x$5347$Up9ra) (equal? g$obj$5345$Up9ra g$x$5347$Up9ra)))
          g$list$5346$Up9ra))))
   (g$remv$5280$Up9ra
     g$remv$5371$Up9ra
     (case-lambda
       ((g$obj$5348$Up9ra g$list$5349$Up9ra)
        (g$remp$5265$Up9ra
          (case-lambda
            ((g$x$5350$Up9ra) (eqv? g$obj$5348$Up9ra g$x$5350$Up9ra)))
          g$list$5349$Up9ra))))
   (g$remq$5281$Up9ra
     g$remq$5372$Up9ra
     (case-lambda
       ((g$obj$5351$Up9ra g$list$5352$Up9ra)
        (g$remp$5265$Up9ra
          (case-lambda ((g$x$5353$Up9ra) (eq? g$obj$5351$Up9ra g$x$5353$Up9ra)))
          g$list$5352$Up9ra)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$5373$Up9ra
     g$native-endianness$5484$Up9ra
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$5374$Up9ra
     g$bytevector-u16-ref$5485$Up9ra
     (case-lambda
       ((g$bytevector$5402$Up9ra g$k$5403$Up9ra g$endianness$5404$Up9ra)
        (bytevector-uint-ref
          g$bytevector$5402$Up9ra
          g$k$5403$Up9ra
          g$endianness$5404$Up9ra
          '2))))
   (g$bytevector-s16-ref$5375$Up9ra
     g$bytevector-s16-ref$5486$Up9ra
     (case-lambda
       ((g$bytevector$5405$Up9ra g$k$5406$Up9ra g$endianness$5407$Up9ra)
        (bytevector-sint-ref
          g$bytevector$5405$Up9ra
          g$k$5406$Up9ra
          g$endianness$5407$Up9ra
          '2))))
   (g$bytevector-u16-native-ref$5376$Up9ra
     g$bytevector-u16-native-ref$5487$Up9ra
     (case-lambda
       ((g$bytevector$5408$Up9ra g$k$5409$Up9ra)
        (bytevector-uint-ref
          g$bytevector$5408$Up9ra
          g$k$5409$Up9ra
          (g$native-endianness$5373$Up9ra)
          '2))))
   (g$bytevector-s16-native-ref$5377$Up9ra
     g$bytevector-s16-native-ref$5488$Up9ra
     (case-lambda
       ((g$bytevector$5410$Up9ra g$k$5411$Up9ra)
        (bytevector-sint-ref
          g$bytevector$5410$Up9ra
          g$k$5411$Up9ra
          (g$native-endianness$5373$Up9ra)
          '2))))
   (g$bytevector-u16-set!$5378$Up9ra
     g$bytevector-u16-set!$5489$Up9ra
     (case-lambda
       ((g$bytevector$5412$Up9ra
          g$k$5413$Up9ra
          g$n$5414$Up9ra
          g$endianness$5415$Up9ra)
        (bytevector-uint-ref
          g$bytevector$5412$Up9ra
          g$k$5413$Up9ra
          g$endianness$5415$Up9ra
          '2))))
   (g$bytevector-s16-set!$5379$Up9ra
     g$bytevector-s16-set!$5490$Up9ra
     (case-lambda
       ((g$bytevector$5416$Up9ra
          g$k$5417$Up9ra
          g$n$5418$Up9ra
          g$endianness$5419$Up9ra)
        (bytevector-sint-ref
          g$bytevector$5416$Up9ra
          g$k$5417$Up9ra
          g$endianness$5419$Up9ra
          '2))))
   (g$bytevector-u16-native-set!$5380$Up9ra
     g$bytevector-u16-native-set!$5491$Up9ra
     (case-lambda
       ((g$bytevector$5420$Up9ra g$k$5421$Up9ra g$n$5422$Up9ra)
        (bytevector-uint-ref
          g$bytevector$5420$Up9ra
          g$k$5421$Up9ra
          (g$native-endianness$5373$Up9ra)
          '2))))
   (g$bytevector-s16-native-set!$5381$Up9ra
     g$bytevector-s16-native-set!$5492$Up9ra
     (case-lambda
       ((g$bytevector$5423$Up9ra g$k$5424$Up9ra g$n$5425$Up9ra)
        (bytevector-sint-ref
          g$bytevector$5423$Up9ra
          g$k$5424$Up9ra
          (g$native-endianness$5373$Up9ra)
          '2))))
   (g$bytevector-u32-ref$5382$Up9ra
     g$bytevector-u32-ref$5493$Up9ra
     (case-lambda
       ((g$bytevector$5426$Up9ra g$k$5427$Up9ra g$endianness$5428$Up9ra)
        (bytevector-uint-ref
          g$bytevector$5426$Up9ra
          g$k$5427$Up9ra
          g$endianness$5428$Up9ra
          '4))))
   (g$bytevector-s32-ref$5383$Up9ra
     g$bytevector-s32-ref$5494$Up9ra
     (case-lambda
       ((g$bytevector$5429$Up9ra g$k$5430$Up9ra g$endianness$5431$Up9ra)
        (bytevector-sint-ref
          g$bytevector$5429$Up9ra
          g$k$5430$Up9ra
          g$endianness$5431$Up9ra
          '4))))
   (g$bytevector-u32-native-ref$5384$Up9ra
     g$bytevector-u32-native-ref$5495$Up9ra
     (case-lambda
       ((g$bytevector$5432$Up9ra g$k$5433$Up9ra)
        (bytevector-uint-ref
          g$bytevector$5432$Up9ra
          g$k$5433$Up9ra
          (g$native-endianness$5373$Up9ra)
          '4))))
   (g$bytevector-s32-native-ref$5385$Up9ra
     g$bytevector-s32-native-ref$5496$Up9ra
     (case-lambda
       ((g$bytevector$5434$Up9ra g$k$5435$Up9ra)
        (bytevector-sint-ref
          g$bytevector$5434$Up9ra
          g$k$5435$Up9ra
          (g$native-endianness$5373$Up9ra)
          '4))))
   (g$bytevector-u32-set!$5386$Up9ra
     g$bytevector-u32-set!$5497$Up9ra
     (case-lambda
       ((g$bytevector$5436$Up9ra
          g$k$5437$Up9ra
          g$n$5438$Up9ra
          g$endianness$5439$Up9ra)
        (bytevector-uint-ref
          g$bytevector$5436$Up9ra
          g$k$5437$Up9ra
          g$endianness$5439$Up9ra
          '4))))
   (g$bytevector-s32-set!$5387$Up9ra
     g$bytevector-s32-set!$5498$Up9ra
     (case-lambda
       ((g$bytevector$5440$Up9ra
          g$k$5441$Up9ra
          g$n$5442$Up9ra
          g$endianness$5443$Up9ra)
        (bytevector-sint-ref
          g$bytevector$5440$Up9ra
          g$k$5441$Up9ra
          g$endianness$5443$Up9ra
          '4))))
   (g$bytevector-u32-native-set!$5388$Up9ra
     g$bytevector-u32-native-set!$5499$Up9ra
     (case-lambda
       ((g$bytevector$5444$Up9ra g$k$5445$Up9ra g$n$5446$Up9ra)
        (bytevector-uint-ref
          g$bytevector$5444$Up9ra
          g$k$5445$Up9ra
          (g$native-endianness$5373$Up9ra)
          '4))))
   (g$bytevector-s32-native-set!$5389$Up9ra
     g$bytevector-s32-native-set!$5500$Up9ra
     (case-lambda
       ((g$bytevector$5447$Up9ra g$k$5448$Up9ra g$n$5449$Up9ra)
        (bytevector-sint-ref
          g$bytevector$5447$Up9ra
          g$k$5448$Up9ra
          (g$native-endianness$5373$Up9ra)
          '4))))
   (g$bytevector-u64-ref$5390$Up9ra
     g$bytevector-u64-ref$5501$Up9ra
     (case-lambda
       ((g$bytevector$5450$Up9ra g$k$5451$Up9ra g$endianness$5452$Up9ra)
        (bytevector-uint-ref
          g$bytevector$5450$Up9ra
          g$k$5451$Up9ra
          g$endianness$5452$Up9ra
          '8))))
   (g$bytevector-s64-ref$5391$Up9ra
     g$bytevector-s64-ref$5502$Up9ra
     (case-lambda
       ((g$bytevector$5453$Up9ra g$k$5454$Up9ra g$endianness$5455$Up9ra)
        (bytevector-sint-ref
          g$bytevector$5453$Up9ra
          g$k$5454$Up9ra
          g$endianness$5455$Up9ra
          '8))))
   (g$bytevector-u64-native-ref$5392$Up9ra
     g$bytevector-u64-native-ref$5503$Up9ra
     (case-lambda
       ((g$bytevector$5456$Up9ra g$k$5457$Up9ra)
        (bytevector-uint-ref
          g$bytevector$5456$Up9ra
          g$k$5457$Up9ra
          (g$native-endianness$5373$Up9ra)
          '8))))
   (g$bytevector-s64-native-ref$5393$Up9ra
     g$bytevector-s64-native-ref$5504$Up9ra
     (case-lambda
       ((g$bytevector$5458$Up9ra g$k$5459$Up9ra)
        (bytevector-sint-ref
          g$bytevector$5458$Up9ra
          g$k$5459$Up9ra
          (g$native-endianness$5373$Up9ra)
          '8))))
   (g$bytevector-u64-set!$5394$Up9ra
     g$bytevector-u64-set!$5505$Up9ra
     (case-lambda
       ((g$bytevector$5460$Up9ra
          g$k$5461$Up9ra
          g$n$5462$Up9ra
          g$endianness$5463$Up9ra)
        (bytevector-uint-ref
          g$bytevector$5460$Up9ra
          g$k$5461$Up9ra
          g$endianness$5463$Up9ra
          '8))))
   (g$bytevector-s64-set!$5395$Up9ra
     g$bytevector-s64-set!$5506$Up9ra
     (case-lambda
       ((g$bytevector$5464$Up9ra
          g$k$5465$Up9ra
          g$n$5466$Up9ra
          g$endianness$5467$Up9ra)
        (bytevector-sint-ref
          g$bytevector$5464$Up9ra
          g$k$5465$Up9ra
          g$endianness$5467$Up9ra
          '8))))
   (g$bytevector-u64-native-set!$5396$Up9ra
     g$bytevector-u64-native-set!$5507$Up9ra
     (case-lambda
       ((g$bytevector$5468$Up9ra g$k$5469$Up9ra g$n$5470$Up9ra)
        (bytevector-uint-ref
          g$bytevector$5468$Up9ra
          g$k$5469$Up9ra
          (g$native-endianness$5373$Up9ra)
          '8))))
   (g$bytevector-s64-native-set!$5397$Up9ra
     g$bytevector-s64-native-set!$5508$Up9ra
     (case-lambda
       ((g$bytevector$5471$Up9ra g$k$5472$Up9ra g$n$5473$Up9ra)
        (bytevector-sint-ref
          g$bytevector$5471$Up9ra
          g$k$5472$Up9ra
          (g$native-endianness$5373$Up9ra)
          '8))))
   (g$bytevector-ieee-single-native-ref$5398$Up9ra
     g$bytevector-ieee-single-native-ref$5509$Up9ra
     (case-lambda
       ((g$bytevector$5474$Up9ra g$k$5475$Up9ra)
        (bytevector-ieee-single-ref
          g$bytevector$5474$Up9ra
          g$k$5475$Up9ra
          (g$native-endianness$5373$Up9ra)))))
   (g$bytevector-ieee-double-native-ref$5399$Up9ra
     g$bytevector-ieee-double-native-ref$5510$Up9ra
     (case-lambda
       ((g$bytevector$5476$Up9ra g$k$5477$Up9ra)
        (bytevector-ieee-double-ref
          g$bytevector$5476$Up9ra
          g$k$5477$Up9ra
          (g$native-endianness$5373$Up9ra)))))
   (g$bytevector-ieee-single-native-set!$5400$Up9ra
     g$bytevector-ieee-single-native-set!$5511$Up9ra
     (case-lambda
       ((g$bytevector$5478$Up9ra g$k$5479$Up9ra g$x$5480$Up9ra)
        (bytevector-ieee-single-set!
          g$bytevector$5478$Up9ra
          g$k$5479$Up9ra
          g$x$5480$Up9ra
          (g$native-endianness$5373$Up9ra)))))
   (g$bytevector-ieee-double-native-set!$5401$Up9ra
     g$bytevector-ieee-double-native-set!$5512$Up9ra
     (case-lambda
       ((g$bytevector$5481$Up9ra g$k$5482$Up9ra g$x$5483$Up9ra)
        (bytevector-ieee-double-set!
          g$bytevector$5481$Up9ra
          g$k$5482$Up9ra
          g$x$5483$Up9ra
          (g$native-endianness$5373$Up9ra))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$6289$5513$Up9ra
     g$6289$5608$Up9ra
     (make-record-type-descriptor
       '&condition
       '#f
       'g$6292$Up9ra
       '#f
       '#f
       '#()))
   (g$6291$5514$Up9ra g$6291$5609$Up9ra '#f)
   (g$6290$5515$Up9ra
     g$6290$5610$Up9ra
     (make-record-constructor-descriptor
       g$6289$5513$Up9ra
       '#f
       g$6291$5514$Up9ra))
   (g$&condition?$5516$Up9ra
     g$&condition?$5611$Up9ra
     (record-predicate g$6289$5513$Up9ra))
   (g$make-&condition$5517$Up9ra
     g$make-&condition$5612$Up9ra
     (record-constructor g$6290$5515$Up9ra))
   (g$&condition-rtd$5518$Up9ra
     g$&condition-rtd$5613$Up9ra
     g$6289$5513$Up9ra)
   (g$&condition-rcd$5519$Up9ra
     g$&condition-rcd$5614$Up9ra
     g$6290$5515$Up9ra)
   (g$6305$5520$Up9ra
     g$6305$5615$Up9ra
     (make-record-type-descriptor
       '&message
       g$6289$5513$Up9ra
       'g$6308$Up9ra
       '#f
       '#f
       '#((immutable message))))
   (g$6307$5521$Up9ra g$6307$5616$Up9ra '#f)
   (g$6306$5522$Up9ra
     g$6306$5617$Up9ra
     (make-record-constructor-descriptor
       g$6305$5520$Up9ra
       g$6290$5515$Up9ra
       g$6307$5521$Up9ra))
   (g$6304$5523$Up9ra
     g$6304$5618$Up9ra
     (record-predicate g$6305$5520$Up9ra))
   (g$make-message-condition$5524$Up9ra
     g$make-message-condition$5619$Up9ra
     (record-constructor g$6306$5522$Up9ra))
   (g$6303$5525$Up9ra
     g$6303$5620$Up9ra
     (record-accessor g$6305$5520$Up9ra '0))
   (g$message-condition?$5526$Up9ra
     g$message-condition?$5621$Up9ra
     (condition-predicate g$6305$5520$Up9ra))
   (g$condition-message$5527$Up9ra
     g$condition-message$5622$Up9ra
     (condition-accessor g$6305$5520$Up9ra g$6303$5525$Up9ra))
   (g$6321$5528$Up9ra
     g$6321$5623$Up9ra
     (make-record-type-descriptor
       '&warning
       g$6289$5513$Up9ra
       'g$6324$Up9ra
       '#f
       '#f
       '#()))
   (g$6323$5529$Up9ra g$6323$5624$Up9ra '#f)
   (g$6322$5530$Up9ra
     g$6322$5625$Up9ra
     (make-record-constructor-descriptor
       g$6321$5528$Up9ra
       g$6290$5515$Up9ra
       g$6323$5529$Up9ra))
   (g$6320$5531$Up9ra
     g$6320$5626$Up9ra
     (record-predicate g$6321$5528$Up9ra))
   (g$make-warning$5532$Up9ra
     g$make-warning$5627$Up9ra
     (record-constructor g$6322$5530$Up9ra))
   (g$warning?$5533$Up9ra
     g$warning?$5628$Up9ra
     (condition-predicate g$6321$5528$Up9ra))
   (g$6335$5534$Up9ra
     g$6335$5629$Up9ra
     (make-record-type-descriptor
       '&serious
       g$6289$5513$Up9ra
       'g$6338$Up9ra
       '#f
       '#f
       '#()))
   (g$6337$5535$Up9ra g$6337$5630$Up9ra '#f)
   (g$6336$5536$Up9ra
     g$6336$5631$Up9ra
     (make-record-constructor-descriptor
       g$6335$5534$Up9ra
       g$6290$5515$Up9ra
       g$6337$5535$Up9ra))
   (g$6334$5537$Up9ra
     g$6334$5632$Up9ra
     (record-predicate g$6335$5534$Up9ra))
   (g$make-serious-condition$5538$Up9ra
     g$make-serious-condition$5633$Up9ra
     (record-constructor g$6336$5536$Up9ra))
   (g$serious-condition?$5539$Up9ra
     g$serious-condition?$5634$Up9ra
     (condition-predicate g$6335$5534$Up9ra))
   (g$6349$5540$Up9ra
     g$6349$5635$Up9ra
     (make-record-type-descriptor
       '&error
       g$6335$5534$Up9ra
       'g$6352$Up9ra
       '#f
       '#f
       '#()))
   (g$6351$5541$Up9ra g$6351$5636$Up9ra '#f)
   (g$6350$5542$Up9ra
     g$6350$5637$Up9ra
     (make-record-constructor-descriptor
       g$6349$5540$Up9ra
       g$6336$5536$Up9ra
       g$6351$5541$Up9ra))
   (g$6348$5543$Up9ra
     g$6348$5638$Up9ra
     (record-predicate g$6349$5540$Up9ra))
   (g$make-error$5544$Up9ra
     g$make-error$5639$Up9ra
     (record-constructor g$6350$5542$Up9ra))
   (g$error?$5545$Up9ra
     g$error?$5640$Up9ra
     (condition-predicate g$6349$5540$Up9ra))
   (g$6363$5546$Up9ra
     g$6363$5641$Up9ra
     (make-record-type-descriptor
       '&violation
       g$6335$5534$Up9ra
       'g$6366$Up9ra
       '#f
       '#f
       '#()))
   (g$6365$5547$Up9ra g$6365$5642$Up9ra '#f)
   (g$6364$5548$Up9ra
     g$6364$5643$Up9ra
     (make-record-constructor-descriptor
       g$6363$5546$Up9ra
       g$6336$5536$Up9ra
       g$6365$5547$Up9ra))
   (g$6362$5549$Up9ra
     g$6362$5644$Up9ra
     (record-predicate g$6363$5546$Up9ra))
   (g$make-violation$5550$Up9ra
     g$make-violation$5645$Up9ra
     (record-constructor g$6364$5548$Up9ra))
   (g$violation?$5551$Up9ra
     g$violation?$5646$Up9ra
     (condition-predicate g$6363$5546$Up9ra))
   (g$6377$5552$Up9ra
     g$6377$5647$Up9ra
     (make-record-type-descriptor
       '&assertion
       g$6363$5546$Up9ra
       'g$6380$Up9ra
       '#f
       '#f
       '#()))
   (g$6379$5553$Up9ra g$6379$5648$Up9ra '#f)
   (g$6378$5554$Up9ra
     g$6378$5649$Up9ra
     (make-record-constructor-descriptor
       g$6377$5552$Up9ra
       g$6364$5548$Up9ra
       g$6379$5553$Up9ra))
   (g$6376$5555$Up9ra
     g$6376$5650$Up9ra
     (record-predicate g$6377$5552$Up9ra))
   (g$make-assertion-violation$5556$Up9ra
     g$make-assertion-violation$5651$Up9ra
     (record-constructor g$6378$5554$Up9ra))
   (g$assertion-violation?$5557$Up9ra
     g$assertion-violation?$5652$Up9ra
     (condition-predicate g$6377$5552$Up9ra))
   (g$6392$5558$Up9ra
     g$6392$5653$Up9ra
     (make-record-type-descriptor
       '&irritants
       g$6289$5513$Up9ra
       'g$6395$Up9ra
       '#f
       '#f
       '#((immutable irritants))))
   (g$6394$5559$Up9ra g$6394$5654$Up9ra '#f)
   (g$6393$5560$Up9ra
     g$6393$5655$Up9ra
     (make-record-constructor-descriptor
       g$6392$5558$Up9ra
       g$6290$5515$Up9ra
       g$6394$5559$Up9ra))
   (g$6391$5561$Up9ra
     g$6391$5656$Up9ra
     (record-predicate g$6392$5558$Up9ra))
   (g$make-irritants-condition$5562$Up9ra
     g$make-irritants-condition$5657$Up9ra
     (record-constructor g$6393$5560$Up9ra))
   (g$6390$5563$Up9ra
     g$6390$5658$Up9ra
     (record-accessor g$6392$5558$Up9ra '0))
   (g$irritants-condition?$5564$Up9ra
     g$irritants-condition?$5659$Up9ra
     (condition-predicate g$6392$5558$Up9ra))
   (g$condition-irritants$5565$Up9ra
     g$condition-irritants$5660$Up9ra
     (condition-accessor g$6392$5558$Up9ra g$6390$5563$Up9ra))
   (g$6409$5566$Up9ra
     g$6409$5661$Up9ra
     (make-record-type-descriptor
       '&who
       g$6289$5513$Up9ra
       'g$6412$Up9ra
       '#f
       '#f
       '#((immutable who))))
   (g$6411$5567$Up9ra g$6411$5662$Up9ra '#f)
   (g$6410$5568$Up9ra
     g$6410$5663$Up9ra
     (make-record-constructor-descriptor
       g$6409$5566$Up9ra
       g$6290$5515$Up9ra
       g$6411$5567$Up9ra))
   (g$6408$5569$Up9ra
     g$6408$5664$Up9ra
     (record-predicate g$6409$5566$Up9ra))
   (g$make-who-condition$5570$Up9ra
     g$make-who-condition$5665$Up9ra
     (record-constructor g$6410$5568$Up9ra))
   (g$6407$5571$Up9ra
     g$6407$5666$Up9ra
     (record-accessor g$6409$5566$Up9ra '0))
   (g$who-condition?$5572$Up9ra
     g$who-condition?$5667$Up9ra
     (condition-predicate g$6409$5566$Up9ra))
   (g$condition-who$5573$Up9ra
     g$condition-who$5668$Up9ra
     (condition-accessor g$6409$5566$Up9ra g$6407$5571$Up9ra))
   (g$6425$5574$Up9ra
     g$6425$5669$Up9ra
     (make-record-type-descriptor
       '&non-continuable
       g$6363$5546$Up9ra
       'g$6428$Up9ra
       '#f
       '#f
       '#()))
   (g$6427$5575$Up9ra g$6427$5670$Up9ra '#f)
   (g$6426$5576$Up9ra
     g$6426$5671$Up9ra
     (make-record-constructor-descriptor
       g$6425$5574$Up9ra
       g$6364$5548$Up9ra
       g$6427$5575$Up9ra))
   (g$6424$5577$Up9ra
     g$6424$5672$Up9ra
     (record-predicate g$6425$5574$Up9ra))
   (g$make-non-continuable-violation$5578$Up9ra
     g$make-non-continuable-violation$5673$Up9ra
     (record-constructor g$6426$5576$Up9ra))
   (g$non-continuable-violation?$5579$Up9ra
     g$non-continuable-violation?$5674$Up9ra
     (condition-predicate g$6425$5574$Up9ra))
   (g$6439$5580$Up9ra
     g$6439$5675$Up9ra
     (make-record-type-descriptor
       '&implementation-restriction
       g$6363$5546$Up9ra
       'g$6442$Up9ra
       '#f
       '#f
       '#()))
   (g$6441$5581$Up9ra g$6441$5676$Up9ra '#f)
   (g$6440$5582$Up9ra
     g$6440$5677$Up9ra
     (make-record-constructor-descriptor
       g$6439$5580$Up9ra
       g$6364$5548$Up9ra
       g$6441$5581$Up9ra))
   (g$6438$5583$Up9ra
     g$6438$5678$Up9ra
     (record-predicate g$6439$5580$Up9ra))
   (g$make-implementation-restriction-violation$5584$Up9ra
     g$make-implementation-restriction-violation$5679$Up9ra
     (record-constructor g$6440$5582$Up9ra))
   (g$implementation-restriction-violation?$5585$Up9ra
     g$implementation-restriction-violation?$5680$Up9ra
     (condition-predicate g$6439$5580$Up9ra))
   (g$6453$5586$Up9ra
     g$6453$5681$Up9ra
     (make-record-type-descriptor
       '&lexical
       g$6363$5546$Up9ra
       'g$6456$Up9ra
       '#f
       '#f
       '#()))
   (g$6455$5587$Up9ra g$6455$5682$Up9ra '#f)
   (g$6454$5588$Up9ra
     g$6454$5683$Up9ra
     (make-record-constructor-descriptor
       g$6453$5586$Up9ra
       g$6364$5548$Up9ra
       g$6455$5587$Up9ra))
   (g$6452$5589$Up9ra
     g$6452$5684$Up9ra
     (record-predicate g$6453$5586$Up9ra))
   (g$make-lexical-violation$5590$Up9ra
     g$make-lexical-violation$5685$Up9ra
     (record-constructor g$6454$5588$Up9ra))
   (g$lexical-violation?$5591$Up9ra
     g$lexical-violation?$5686$Up9ra
     (condition-predicate g$6453$5586$Up9ra))
   (g$6469$5592$Up9ra
     g$6469$5687$Up9ra
     (make-record-type-descriptor
       '&syntax
       g$6363$5546$Up9ra
       'g$6472$Up9ra
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6471$5593$Up9ra g$6471$5688$Up9ra '#f)
   (g$6470$5594$Up9ra
     g$6470$5689$Up9ra
     (make-record-constructor-descriptor
       g$6469$5592$Up9ra
       g$6364$5548$Up9ra
       g$6471$5593$Up9ra))
   (g$6468$5595$Up9ra
     g$6468$5690$Up9ra
     (record-predicate g$6469$5592$Up9ra))
   (g$make-syntax-violation$5596$Up9ra
     g$make-syntax-violation$5691$Up9ra
     (record-constructor g$6470$5594$Up9ra))
   (g$6466$5597$Up9ra
     g$6466$5692$Up9ra
     (record-accessor g$6469$5592$Up9ra '0))
   (g$6467$5598$Up9ra
     g$6467$5693$Up9ra
     (record-accessor g$6469$5592$Up9ra '1))
   (g$syntax-violation?$5599$Up9ra
     g$syntax-violation?$5694$Up9ra
     (condition-predicate g$6469$5592$Up9ra))
   (g$syntax-violation-form$5600$Up9ra
     g$syntax-violation-form$5695$Up9ra
     (condition-accessor g$6469$5592$Up9ra g$6466$5597$Up9ra))
   (g$syntax-violation-subform$5601$Up9ra
     g$syntax-violation-subform$5696$Up9ra
     (condition-accessor g$6469$5592$Up9ra g$6467$5598$Up9ra))
   (g$6487$5602$Up9ra
     g$6487$5697$Up9ra
     (make-record-type-descriptor
       '&undefined
       g$6363$5546$Up9ra
       'g$6490$Up9ra
       '#f
       '#f
       '#()))
   (g$6489$5603$Up9ra g$6489$5698$Up9ra '#f)
   (g$6488$5604$Up9ra
     g$6488$5699$Up9ra
     (make-record-constructor-descriptor
       g$6487$5602$Up9ra
       g$6364$5548$Up9ra
       g$6489$5603$Up9ra))
   (g$6486$5605$Up9ra
     g$6486$5700$Up9ra
     (record-predicate g$6487$5602$Up9ra))
   (g$make-undefined-violation$5606$Up9ra
     g$make-undefined-violation$5701$Up9ra
     (record-constructor g$6488$5604$Up9ra))
   (g$undefined-violation?$5607$Up9ra
     g$undefined-violation?$5702$Up9ra
     (condition-predicate g$6487$5602$Up9ra)))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$5703$Up9ra
     g$append!$5709$Up9ra
     (case-lambda
       ((g$a$5704$Up9ra . g$b$5705$Up9ra)
        (if (null? g$a$5704$Up9ra)
          g$b$5705$Up9ra
          (if (null? g$b$5705$Up9ra)
            g$a$5704$Up9ra
            (begin
              ((letrec ((g$f$5706$Up9ra
                          (case-lambda
                            ((g$a$5707$Up9ra)
                             ((case-lambda
                                ((g$n$5708$Up9ra)
                                 (if (null? g$n$5708$Up9ra)
                                   (set-cdr! g$a$5707$Up9ra g$b$5705$Up9ra)
                                   (g$f$5706$Up9ra g$n$5708$Up9ra))))
                              (cdr g$a$5707$Up9ra))))))
                 g$f$5706$Up9ra)
               g$a$5704$Up9ra)
              g$a$5704$Up9ra)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$sign$5710$Up9ra
     g$sign$5721$Up9ra
     (case-lambda
       ((g$n$5714$Up9ra)
        (if (> g$n$5714$Up9ra '0) '1 (if (< g$n$5714$Up9ra '0) '-1 '0)))))
   (g$quotient$5711$Up9ra
     g$quotient$5722$Up9ra
     (case-lambda
       ((g$n1$5715$Up9ra g$n2$5716$Up9ra)
        (* (g$sign$5710$Up9ra g$n1$5715$Up9ra)
           (g$sign$5710$Up9ra g$n2$5716$Up9ra)
           (div (abs g$n1$5715$Up9ra) (abs g$n2$5716$Up9ra))))))
   (g$remainder$5712$Up9ra
     g$remainder$5723$Up9ra
     (case-lambda
       ((g$n1$5717$Up9ra g$n2$5718$Up9ra)
        (* (g$sign$5710$Up9ra g$n1$5717$Up9ra)
           (mod (abs g$n1$5717$Up9ra) (abs g$n2$5718$Up9ra))))))
   (g$modulo$5713$Up9ra
     g$modulo$5724$Up9ra
     (case-lambda
       ((g$n1$5719$Up9ra g$n2$5720$Up9ra)
        (* (g$sign$5710$Up9ra g$n2$5720$Up9ra)
           (mod (* (g$sign$5710$Up9ra g$n2$5720$Up9ra) g$n1$5719$Up9ra)
                (abs g$n2$5720$Up9ra)))))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$5725$Up9ra
     g$split$5751$Up9ra
     (case-lambda
       ((g$ls$5728$Up9ra)
        ((letrec ((g$loop$5729$Up9ra
                    (case-lambda
                      ((g$rest$5730$Up9ra g$left$5731$Up9ra g$right$5732$Up9ra)
                       (if (null? g$rest$5730$Up9ra)
                         (cons g$left$5731$Up9ra g$right$5732$Up9ra)
                         (if (null? (cdr g$rest$5730$Up9ra))
                           (cons
                             (cons (car g$rest$5730$Up9ra) g$left$5731$Up9ra)
                             g$right$5732$Up9ra)
                           (g$loop$5729$Up9ra
                             (g$cddr$4898$Up9ra g$rest$5730$Up9ra)
                             (cons (car g$rest$5730$Up9ra) g$left$5731$Up9ra)
                             (cons
                               (g$cadr$4896$Up9ra g$rest$5730$Up9ra)
                               g$right$5732$Up9ra))))))))
           g$loop$5729$Up9ra)
         g$ls$5728$Up9ra
         '()
         '()))))
   (g$reverse-it$5726$Up9ra
     g$reverse-it$5752$Up9ra
     (case-lambda
       ((g$head$5733$Up9ra g$tail$5734$Up9ra)
        (if (null? g$head$5733$Up9ra)
          g$tail$5734$Up9ra
          ((case-lambda
             ((g$hd$5735$Up9ra g$tl$5736$Up9ra)
              (g$reverse-it$5726$Up9ra
                g$tl$5736$Up9ra
                (cons g$hd$5735$Up9ra g$tail$5734$Up9ra))))
           (car g$head$5733$Up9ra)
           (cdr g$head$5733$Up9ra))))))
   (g$list-sort$5727$Up9ra
     g$list-sort$5753$Up9ra
     (case-lambda
       ((g$precedes?$5737$Up9ra g$ls$5738$Up9ra)
        ((case-lambda
           ((g$merge$5739$Up9ra)
            ((case-lambda
               (()
                (if (null? g$ls$5738$Up9ra)
                  '()
                  ((letrec ((g$helper$5740$Up9ra
                              (case-lambda
                                ((g$piece$5741$Up9ra)
                                 (if (null? (cdr g$piece$5741$Up9ra))
                                   g$piece$5741$Up9ra
                                   ((case-lambda
                                      ((g$parts$5742$Up9ra)
                                       (g$merge$5739$Up9ra
                                         (g$helper$5740$Up9ra
                                           (car g$parts$5742$Up9ra))
                                         (g$helper$5740$Up9ra
                                           (cdr g$parts$5742$Up9ra)))))
                                    (g$split$5725$Up9ra
                                      g$piece$5741$Up9ra)))))))
                     g$helper$5740$Up9ra)
                   g$ls$5738$Up9ra)))))))
         (case-lambda
           ((g$list-1$5743$Up9ra g$list-2$5744$Up9ra)
            ((letrec ((g$loop$5745$Up9ra
                        (case-lambda
                          ((g$source-1$5746$Up9ra
                             g$source-2$5747$Up9ra
                             g$so-far$5748$Up9ra)
                           (if (null? g$source-1$5746$Up9ra)
                             (g$reverse-it$5726$Up9ra
                               g$so-far$5748$Up9ra
                               g$source-2$5747$Up9ra)
                             (if (null? g$source-2$5747$Up9ra)
                               (g$reverse-it$5726$Up9ra
                                 g$so-far$5748$Up9ra
                                 g$source-1$5746$Up9ra)
                               ((case-lambda
                                  ((g$car-1$5749$Up9ra g$car-2$5750$Up9ra)
                                   (if (g$precedes?$5737$Up9ra
                                         g$car-2$5750$Up9ra
                                         g$car-1$5749$Up9ra)
                                     (g$loop$5745$Up9ra
                                       g$source-1$5746$Up9ra
                                       (cdr g$source-2$5747$Up9ra)
                                       (cons
                                         g$car-2$5750$Up9ra
                                         g$so-far$5748$Up9ra))
                                     (g$loop$5745$Up9ra
                                       g$source-2$5747$Up9ra
                                       (cdr g$source-1$5746$Up9ra)
                                       (cons
                                         g$car-1$5749$Up9ra
                                         g$so-far$5748$Up9ra)))))
                                (car g$source-1$5746$Up9ra)
                                (car g$source-2$5747$Up9ra))))))))
               g$loop$5745$Up9ra)
             g$list-1$5743$Up9ra
             g$list-2$5744$Up9ra
             '()))))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode) () (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$5791$Up9ra
     g$bitwise-if$5842$Up9ra
     (case-lambda
       ((g$ei1$5799$Up9ra g$ei2$5800$Up9ra g$ei3$5801$Up9ra)
        (bitwise-ior
          (bitwise-and g$ei1$5799$Up9ra g$ei2$5800$Up9ra)
          (bitwise-and (bitwise-not g$ei1$5799$Up9ra) g$ei3$5801$Up9ra)))))
   (g$bitwise-copy-bit$5792$Up9ra
     g$bitwise-copy-bit$5843$Up9ra
     (case-lambda
       ((g$ei1$5802$Up9ra g$ei2$5803$Up9ra g$ei3$5804$Up9ra)
        ((case-lambda
           ((g$mask$5805$Up9ra)
            ((case-lambda
               (()
                (g$bitwise-if$5791$Up9ra
                  g$mask$5805$Up9ra
                  (g$bitwise-arithmetic-shift-left$5795$Up9ra
                    g$ei3$5804$Up9ra
                    g$ei2$5803$Up9ra)
                  g$ei1$5802$Up9ra))))))
         (g$bitwise-arithmetic-shift-left$5795$Up9ra '1 g$ei2$5803$Up9ra)))))
   (g$bitwise-bit-field$5793$Up9ra
     g$bitwise-bit-field$5844$Up9ra
     (case-lambda
       ((g$ei1$5806$Up9ra g$ei2$5807$Up9ra g$ei3$5808$Up9ra)
        ((case-lambda
           ((g$mask$5809$Up9ra)
            (g$bitwise-arithmetic-shift-right$5796$Up9ra
              (bitwise-and g$ei1$5806$Up9ra g$mask$5809$Up9ra)
              g$ei2$5807$Up9ra)))
         (bitwise-not
           (g$bitwise-arithmetic-shift-left$5795$Up9ra
             '-1
             g$ei3$5808$Up9ra))))))
   (g$bitwise-copy-bit-field$5794$Up9ra
     g$bitwise-copy-bit-field$5845$Up9ra
     (case-lambda
       ((g$ei1$5810$Up9ra g$ei2$5811$Up9ra g$ei3$5812$Up9ra g$ei4$5813$Up9ra)
        ((case-lambda
           ((g$to$5814$Up9ra)
            ((case-lambda
               ((g$start$5815$Up9ra)
                ((case-lambda
                   ((g$end$5816$Up9ra)
                    ((case-lambda
                       ((g$from$5817$Up9ra)
                        ((case-lambda
                           ((g$mask1$5818$Up9ra)
                            ((case-lambda
                               ((g$mask2$5819$Up9ra)
                                ((case-lambda
                                   ((g$mask$5820$Up9ra)
                                    ((case-lambda
                                       (()
                                        (g$bitwise-if$5791$Up9ra
                                          g$mask$5820$Up9ra
                                          (g$bitwise-arithmetic-shift-left$5795$Up9ra
                                            g$from$5817$Up9ra
                                            g$start$5815$Up9ra)
                                          g$to$5814$Up9ra))))))
                                 (bitwise-and
                                   g$mask1$5818$Up9ra
                                   g$mask2$5819$Up9ra))))
                             (bitwise-not
                               (g$bitwise-arithmetic-shift-left$5795$Up9ra
                                 '-1
                                 g$end$5816$Up9ra)))))
                         (g$bitwise-arithmetic-shift-left$5795$Up9ra
                           '-1
                           g$start$5815$Up9ra))))
                     g$ei4$5813$Up9ra)))
                 g$ei3$5812$Up9ra)))
             g$ei2$5811$Up9ra)))
         g$ei1$5810$Up9ra))))
   (g$bitwise-arithmetic-shift-left$5795$Up9ra
     g$bitwise-arithmetic-shift-left$5846$Up9ra
     (case-lambda
       ((g$ei1$5821$Up9ra g$ei2$5822$Up9ra)
        (bitwise-arithmetic-shift g$ei1$5821$Up9ra g$ei2$5822$Up9ra))))
   (g$bitwise-arithmetic-shift-right$5796$Up9ra
     g$bitwise-arithmetic-shift-right$5847$Up9ra
     (case-lambda
       ((g$ei1$5823$Up9ra g$ei2$5824$Up9ra)
        (bitwise-arithmetic-shift g$ei1$5823$Up9ra (- g$ei2$5824$Up9ra)))))
   (g$bitwise-rotate-bit-field$5797$Up9ra
     g$bitwise-rotate-bit-field$5848$Up9ra
     (case-lambda
       ((g$ei1$5825$Up9ra g$ei2$5826$Up9ra g$ei3$5827$Up9ra g$ei4$5828$Up9ra)
        ((case-lambda
           ((g$n$5829$Up9ra)
            ((case-lambda
               ((g$start$5830$Up9ra)
                ((case-lambda
                   ((g$end$5831$Up9ra)
                    ((case-lambda
                       ((g$count$5832$Up9ra)
                        ((case-lambda
                           ((g$width$5833$Up9ra)
                            ((case-lambda
                               (()
                                (if (positive? g$width$5833$Up9ra)
                                  ((case-lambda
                                     ((g$count$5834$Up9ra)
                                      ((case-lambda
                                         ((g$field0$5835$Up9ra)
                                          ((case-lambda
                                             ((g$field1$5836$Up9ra)
                                              ((case-lambda
                                                 ((g$field2$5837$Up9ra)
                                                  ((case-lambda
                                                     ((g$field$5838$Up9ra)
                                                      ((case-lambda
                                                         (()
                                                          (g$bitwise-copy-bit-field$5794$Up9ra
                                                            g$n$5829$Up9ra
                                                            g$start$5830$Up9ra
                                                            g$end$5831$Up9ra
                                                            g$field$5838$Up9ra))))))
                                                   (bitwise-ior
                                                     g$field1$5836$Up9ra
                                                     g$field2$5837$Up9ra))))
                                               (g$bitwise-arithmetic-shift-right$5796$Up9ra
                                                 g$field0$5835$Up9ra
                                                 (- g$width$5833$Up9ra
                                                    g$count$5834$Up9ra)))))
                                           (g$bitwise-arithmetic-shift-left$5795$Up9ra
                                             g$field0$5835$Up9ra
                                             g$count$5834$Up9ra))))
                                       (g$bitwise-bit-field$5793$Up9ra
                                         g$n$5829$Up9ra
                                         g$start$5830$Up9ra
                                         g$end$5831$Up9ra))))
                                   (mod g$count$5832$Up9ra g$width$5833$Up9ra))
                                  g$n$5829$Up9ra))))))
                         (- g$end$5831$Up9ra g$start$5830$Up9ra))))
                     g$ei4$5828$Up9ra)))
                 g$ei3$5827$Up9ra)))
             g$ei2$5826$Up9ra)))
         g$ei1$5825$Up9ra))))
   (g$bitwise-reverse-bit-field$5798$Up9ra
     g$bitwise-reverse-bit-field$5849$Up9ra
     (case-lambda
       ((g$ei1$5839$Up9ra g$ei2$5840$Up9ra g$ei3$5841$Up9ra) 'TODO))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fxif$5850$Up9ra
     g$fxif$5897$Up9ra
     (case-lambda
       ((g$fx1$5857$Up9ra g$fx2$5858$Up9ra g$fx3$5859$Up9ra)
        (fxior
          (fxand g$fx1$5857$Up9ra g$fx2$5858$Up9ra)
          (fxand (fxnot g$fx1$5857$Up9ra) g$fx3$5859$Up9ra)))))
   (g$fxcopy-bit$5851$Up9ra
     g$fxcopy-bit$5898$Up9ra
     (case-lambda
       ((g$fx1$5860$Up9ra g$fx2$5861$Up9ra g$fx3$5862$Up9ra)
        ((case-lambda
           ((g$mask$5863$Up9ra)
            ((case-lambda
               (()
                (g$fxif$5850$Up9ra
                  g$mask$5863$Up9ra
                  (g$fxarithmetic-shift-left$5854$Up9ra
                    g$fx3$5862$Up9ra
                    g$fx2$5861$Up9ra)
                  g$fx1$5860$Up9ra))))))
         (g$fxarithmetic-shift-left$5854$Up9ra '1 g$fx2$5861$Up9ra)))))
   (g$fxbit-field$5852$Up9ra
     g$fxbit-field$5899$Up9ra
     (case-lambda
       ((g$fx1$5864$Up9ra g$fx2$5865$Up9ra g$fx3$5866$Up9ra)
        ((case-lambda
           ((g$mask$5867$Up9ra)
            ((case-lambda
               (()
                (g$fxarithmetic-shift-right$5855$Up9ra
                  (fxand g$fx1$5864$Up9ra g$mask$5867$Up9ra)
                  g$fx2$5865$Up9ra))))))
         (fxnot (g$fxarithmetic-shift-left$5854$Up9ra '-1 g$fx3$5866$Up9ra))))))
   (g$fxcopy-bit-field$5853$Up9ra
     g$fxcopy-bit-field$5900$Up9ra
     (case-lambda
       ((g$fx1$5868$Up9ra g$fx2$5869$Up9ra g$fx3$5870$Up9ra g$fx4$5871$Up9ra)
        ((case-lambda
           ((g$to$5872$Up9ra)
            ((case-lambda
               ((g$start$5873$Up9ra)
                ((case-lambda
                   ((g$end$5874$Up9ra)
                    ((case-lambda
                       ((g$from$5875$Up9ra)
                        ((case-lambda
                           ((g$mask1$5876$Up9ra)
                            ((case-lambda
                               ((g$mask2$5877$Up9ra)
                                ((case-lambda
                                   ((g$mask$5878$Up9ra)
                                    ((case-lambda
                                       (()
                                        (g$fxif$5850$Up9ra
                                          g$mask$5878$Up9ra
                                          (g$fxarithmetic-shift-left$5854$Up9ra
                                            g$from$5875$Up9ra
                                            g$start$5873$Up9ra)
                                          g$to$5872$Up9ra))))))
                                 (fxand
                                   g$mask1$5876$Up9ra
                                   g$mask2$5877$Up9ra))))
                             (fxnot
                               (g$fxarithmetic-shift-left$5854$Up9ra
                                 '-1
                                 g$end$5874$Up9ra)))))
                         (g$fxarithmetic-shift-left$5854$Up9ra
                           '-1
                           g$start$5873$Up9ra))))
                     g$fx4$5871$Up9ra)))
                 g$fx3$5870$Up9ra)))
             g$fx2$5869$Up9ra)))
         g$fx1$5868$Up9ra))))
   (g$fxarithmetic-shift-left$5854$Up9ra
     g$fxarithmetic-shift-left$5901$Up9ra
     (case-lambda
       ((g$fx1$5879$Up9ra g$fx2$5880$Up9ra)
        (fxarithmetic-shift g$fx1$5879$Up9ra g$fx2$5880$Up9ra))))
   (g$fxarithmetic-shift-right$5855$Up9ra
     g$fxarithmetic-shift-right$5902$Up9ra
     (case-lambda
       ((g$fx1$5881$Up9ra g$fx2$5882$Up9ra)
        (fxarithmetic-shift g$fx1$5881$Up9ra (- g$fx2$5882$Up9ra)))))
   (g$fxrotate-bit-field$5856$Up9ra
     g$fxrotate-bit-field$5903$Up9ra
     (case-lambda
       ((g$fx1$5883$Up9ra g$fx2$5884$Up9ra g$fx3$5885$Up9ra g$fx4$5886$Up9ra)
        ((case-lambda
           ((g$n$5887$Up9ra)
            ((case-lambda
               ((g$start$5888$Up9ra)
                ((case-lambda
                   ((g$end$5889$Up9ra)
                    ((case-lambda
                       ((g$count$5890$Up9ra)
                        ((case-lambda
                           ((g$width$5891$Up9ra)
                            ((case-lambda
                               (()
                                (if (positive? g$width$5891$Up9ra)
                                  ((case-lambda
                                     ((g$count$5892$Up9ra)
                                      ((case-lambda
                                         ((g$field0$5893$Up9ra)
                                          ((case-lambda
                                             ((g$field1$5894$Up9ra)
                                              ((case-lambda
                                                 ((g$field2$5895$Up9ra)
                                                  ((case-lambda
                                                     ((g$field$5896$Up9ra)
                                                      ((case-lambda
                                                         (()
                                                          (g$fxcopy-bit-field$5853$Up9ra
                                                            g$n$5887$Up9ra
                                                            g$start$5888$Up9ra
                                                            g$end$5889$Up9ra
                                                            g$field$5896$Up9ra))))))
                                                   (fxior
                                                     g$field1$5894$Up9ra
                                                     g$field2$5895$Up9ra))))
                                               (g$fxarithmetic-shift-right$5855$Up9ra
                                                 g$field0$5893$Up9ra
                                                 (- g$width$5891$Up9ra
                                                    g$count$5892$Up9ra)))))
                                           (g$fxarithmetic-shift-left$5854$Up9ra
                                             g$field0$5893$Up9ra
                                             g$count$5892$Up9ra))))
                                       (g$fxbit-field$5852$Up9ra
                                         g$n$5887$Up9ra
                                         g$start$5888$Up9ra
                                         g$end$5889$Up9ra))))
                                   (mod g$count$5890$Up9ra g$width$5891$Up9ra))
                                  g$n$5887$Up9ra))))))
                         (- g$end$5889$Up9ra g$start$5888$Up9ra))))
                     g$fx4$5886$Up9ra)))
                 g$fx3$5885$Up9ra)))
             g$fx2$5884$Up9ra)))
         g$fx1$5883$Up9ra)))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$6704$5904$Up9ra
     g$6704$5916$Up9ra
     (make-record-type-descriptor
       '&no-infinities
       &implementation-restriction-rtd
       'g$6707$Up9ra
       '#f
       '#f
       '#()))
   (g$6706$5905$Up9ra g$6706$5917$Up9ra '#f)
   (g$6705$5906$Up9ra
     g$6705$5918$Up9ra
     (make-record-constructor-descriptor
       g$6704$5904$Up9ra
       &implementation-restriction-rcd
       g$6706$5905$Up9ra))
   (g$6703$5907$Up9ra
     g$6703$5919$Up9ra
     (record-predicate g$6704$5904$Up9ra))
   (g$make-no-infinities-violation$5908$Up9ra
     g$make-no-infinities-violation$5920$Up9ra
     (record-constructor g$6705$5906$Up9ra))
   (g$no-infinities-violation?$5909$Up9ra
     g$no-infinities-violation?$5921$Up9ra
     (condition-predicate g$6704$5904$Up9ra))
   (g$6718$5910$Up9ra
     g$6718$5922$Up9ra
     (make-record-type-descriptor
       '&no-nans
       &implementation-restriction-rtd
       'g$6721$Up9ra
       '#f
       '#f
       '#()))
   (g$6720$5911$Up9ra g$6720$5923$Up9ra '#f)
   (g$6719$5912$Up9ra
     g$6719$5924$Up9ra
     (make-record-constructor-descriptor
       g$6718$5910$Up9ra
       &implementation-restriction-rcd
       g$6720$5911$Up9ra))
   (g$6717$5913$Up9ra
     g$6717$5925$Up9ra
     (record-predicate g$6718$5910$Up9ra))
   (g$make-no-nans-violation$5914$Up9ra
     g$make-no-nans-violation$5926$Up9ra
     (record-constructor g$6719$5912$Up9ra))
   (g$no-nans-violation?$5915$Up9ra
     g$no-nans-violation?$5927$Up9ra
     (condition-predicate g$6718$5910$Up9ra)))
  (void))

(library-letrec* (ironscheme io conditions)
  ((g$6733$5928$Up9ra
     g$6733$6008$Up9ra
     (make-record-type-descriptor
       '&i/o
       &error-rtd
       'g$6736$Up9ra
       '#f
       '#f
       '#()))
   (g$6735$5929$Up9ra g$6735$6009$Up9ra '#f)
   (g$6734$5930$Up9ra
     g$6734$6010$Up9ra
     (make-record-constructor-descriptor
       g$6733$5928$Up9ra
       &error-rcd
       g$6735$5929$Up9ra))
   (g$6732$5931$Up9ra
     g$6732$6011$Up9ra
     (record-predicate g$6733$5928$Up9ra))
   (g$make-i/o-error$5932$Up9ra
     g$make-i/o-error$6012$Up9ra
     (record-constructor g$6734$5930$Up9ra))
   (g$i/o-error?$5933$Up9ra
     g$i/o-error?$6013$Up9ra
     (condition-predicate g$6733$5928$Up9ra))
   (g$6747$5934$Up9ra
     g$6747$6014$Up9ra
     (make-record-type-descriptor
       '&i/o-read
       g$6733$5928$Up9ra
       'g$6750$Up9ra
       '#f
       '#f
       '#()))
   (g$6749$5935$Up9ra g$6749$6015$Up9ra '#f)
   (g$6748$5936$Up9ra
     g$6748$6016$Up9ra
     (make-record-constructor-descriptor
       g$6747$5934$Up9ra
       g$6734$5930$Up9ra
       g$6749$5935$Up9ra))
   (g$6746$5937$Up9ra
     g$6746$6017$Up9ra
     (record-predicate g$6747$5934$Up9ra))
   (g$make-i/o-read-error$5938$Up9ra
     g$make-i/o-read-error$6018$Up9ra
     (record-constructor g$6748$5936$Up9ra))
   (g$i/o-read-error?$5939$Up9ra
     g$i/o-read-error?$6019$Up9ra
     (condition-predicate g$6747$5934$Up9ra))
   (g$6761$5940$Up9ra
     g$6761$6020$Up9ra
     (make-record-type-descriptor
       '&i/o-write
       g$6733$5928$Up9ra
       'g$6764$Up9ra
       '#f
       '#f
       '#()))
   (g$6763$5941$Up9ra g$6763$6021$Up9ra '#f)
   (g$6762$5942$Up9ra
     g$6762$6022$Up9ra
     (make-record-constructor-descriptor
       g$6761$5940$Up9ra
       g$6734$5930$Up9ra
       g$6763$5941$Up9ra))
   (g$6760$5943$Up9ra
     g$6760$6023$Up9ra
     (record-predicate g$6761$5940$Up9ra))
   (g$make-i/o-write-error$5944$Up9ra
     g$make-i/o-write-error$6024$Up9ra
     (record-constructor g$6762$5942$Up9ra))
   (g$i/o-write-error?$5945$Up9ra
     g$i/o-write-error?$6025$Up9ra
     (condition-predicate g$6761$5940$Up9ra))
   (g$6776$5946$Up9ra
     g$6776$6026$Up9ra
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$6733$5928$Up9ra
       'g$6779$Up9ra
       '#f
       '#f
       '#((immutable position))))
   (g$6778$5947$Up9ra g$6778$6027$Up9ra '#f)
   (g$6777$5948$Up9ra
     g$6777$6028$Up9ra
     (make-record-constructor-descriptor
       g$6776$5946$Up9ra
       g$6734$5930$Up9ra
       g$6778$5947$Up9ra))
   (g$6775$5949$Up9ra
     g$6775$6029$Up9ra
     (record-predicate g$6776$5946$Up9ra))
   (g$make-i/o-invalid-position-error$5950$Up9ra
     g$make-i/o-invalid-position-error$6030$Up9ra
     (record-constructor g$6777$5948$Up9ra))
   (g$6774$5951$Up9ra
     g$6774$6031$Up9ra
     (record-accessor g$6776$5946$Up9ra '0))
   (g$i/o-invalid-position-error?$5952$Up9ra
     g$i/o-invalid-position-error?$6032$Up9ra
     (condition-predicate g$6776$5946$Up9ra))
   (g$i/o-error-position$5953$Up9ra
     g$i/o-error-position$6033$Up9ra
     (condition-accessor g$6776$5946$Up9ra g$6774$5951$Up9ra))
   (g$6793$5954$Up9ra
     g$6793$6034$Up9ra
     (make-record-type-descriptor
       '&i/o-filename
       g$6733$5928$Up9ra
       'g$6796$Up9ra
       '#f
       '#f
       '#((immutable filename))))
   (g$6795$5955$Up9ra g$6795$6035$Up9ra '#f)
   (g$6794$5956$Up9ra
     g$6794$6036$Up9ra
     (make-record-constructor-descriptor
       g$6793$5954$Up9ra
       g$6734$5930$Up9ra
       g$6795$5955$Up9ra))
   (g$6792$5957$Up9ra
     g$6792$6037$Up9ra
     (record-predicate g$6793$5954$Up9ra))
   (g$make-i/o-filename-error$5958$Up9ra
     g$make-i/o-filename-error$6038$Up9ra
     (record-constructor g$6794$5956$Up9ra))
   (g$6791$5959$Up9ra
     g$6791$6039$Up9ra
     (record-accessor g$6793$5954$Up9ra '0))
   (g$i/o-filename-error?$5960$Up9ra
     g$i/o-filename-error?$6040$Up9ra
     (condition-predicate g$6793$5954$Up9ra))
   (g$i/o-error-filename$5961$Up9ra
     g$i/o-error-filename$6041$Up9ra
     (condition-accessor g$6793$5954$Up9ra g$6791$5959$Up9ra))
   (g$6809$5962$Up9ra
     g$6809$6042$Up9ra
     (make-record-type-descriptor
       '&i/o-file-protection
       g$6733$5928$Up9ra
       'g$6812$Up9ra
       '#f
       '#f
       '#()))
   (g$6811$5963$Up9ra g$6811$6043$Up9ra '#f)
   (g$6810$5964$Up9ra
     g$6810$6044$Up9ra
     (make-record-constructor-descriptor
       g$6809$5962$Up9ra
       g$6734$5930$Up9ra
       g$6811$5963$Up9ra))
   (g$6808$5965$Up9ra
     g$6808$6045$Up9ra
     (record-predicate g$6809$5962$Up9ra))
   (g$make-i/o-file-protection-error$5966$Up9ra
     g$make-i/o-file-protection-error$6046$Up9ra
     (record-constructor g$6810$5964$Up9ra))
   (g$i/o-file-protection-error?$5967$Up9ra
     g$i/o-file-protection-error?$6047$Up9ra
     (condition-predicate g$6809$5962$Up9ra))
   (g$6823$5968$Up9ra
     g$6823$6048$Up9ra
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$6809$5962$Up9ra
       'g$6826$Up9ra
       '#f
       '#f
       '#()))
   (g$6825$5969$Up9ra g$6825$6049$Up9ra '#f)
   (g$6824$5970$Up9ra
     g$6824$6050$Up9ra
     (make-record-constructor-descriptor
       g$6823$5968$Up9ra
       g$6810$5964$Up9ra
       g$6825$5969$Up9ra))
   (g$6822$5971$Up9ra
     g$6822$6051$Up9ra
     (record-predicate g$6823$5968$Up9ra))
   (g$make-i/o-file-is-read-only-error$5972$Up9ra
     g$make-i/o-file-is-read-only-error$6052$Up9ra
     (record-constructor g$6824$5970$Up9ra))
   (g$i/o-file-is-read-only-error?$5973$Up9ra
     g$i/o-file-is-read-only-error?$6053$Up9ra
     (condition-predicate g$6823$5968$Up9ra))
   (g$6837$5974$Up9ra
     g$6837$6054$Up9ra
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$6793$5954$Up9ra
       'g$6840$Up9ra
       '#f
       '#f
       '#()))
   (g$6839$5975$Up9ra g$6839$6055$Up9ra '#f)
   (g$6838$5976$Up9ra
     g$6838$6056$Up9ra
     (make-record-constructor-descriptor
       g$6837$5974$Up9ra
       g$6794$5956$Up9ra
       g$6839$5975$Up9ra))
   (g$6836$5977$Up9ra
     g$6836$6057$Up9ra
     (record-predicate g$6837$5974$Up9ra))
   (g$make-i/o-file-already-exists-error$5978$Up9ra
     g$make-i/o-file-already-exists-error$6058$Up9ra
     (record-constructor g$6838$5976$Up9ra))
   (g$i/o-file-already-exists-error?$5979$Up9ra
     g$i/o-file-already-exists-error?$6059$Up9ra
     (condition-predicate g$6837$5974$Up9ra))
   (g$6851$5980$Up9ra
     g$6851$6060$Up9ra
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$6793$5954$Up9ra
       'g$6854$Up9ra
       '#f
       '#f
       '#()))
   (g$6853$5981$Up9ra g$6853$6061$Up9ra '#f)
   (g$6852$5982$Up9ra
     g$6852$6062$Up9ra
     (make-record-constructor-descriptor
       g$6851$5980$Up9ra
       g$6794$5956$Up9ra
       g$6853$5981$Up9ra))
   (g$6850$5983$Up9ra
     g$6850$6063$Up9ra
     (record-predicate g$6851$5980$Up9ra))
   (g$make-i/o-file-does-not-exist-error$5984$Up9ra
     g$make-i/o-file-does-not-exist-error$6064$Up9ra
     (record-constructor g$6852$5982$Up9ra))
   (g$i/o-file-does-not-exist-error?$5985$Up9ra
     g$i/o-file-does-not-exist-error?$6065$Up9ra
     (condition-predicate g$6851$5980$Up9ra))
   (g$6866$5986$Up9ra
     g$6866$6066$Up9ra
     (make-record-type-descriptor
       '&i/o-port
       g$6733$5928$Up9ra
       'g$6869$Up9ra
       '#f
       '#f
       '#((immutable port))))
   (g$6868$5987$Up9ra g$6868$6067$Up9ra '#f)
   (g$6867$5988$Up9ra
     g$6867$6068$Up9ra
     (make-record-constructor-descriptor
       g$6866$5986$Up9ra
       g$6734$5930$Up9ra
       g$6868$5987$Up9ra))
   (g$6865$5989$Up9ra
     g$6865$6069$Up9ra
     (record-predicate g$6866$5986$Up9ra))
   (g$make-i/o-port-error$5990$Up9ra
     g$make-i/o-port-error$6070$Up9ra
     (record-constructor g$6867$5988$Up9ra))
   (g$6864$5991$Up9ra
     g$6864$6071$Up9ra
     (record-accessor g$6866$5986$Up9ra '0))
   (g$i/o-port-error?$5992$Up9ra
     g$i/o-port-error?$6072$Up9ra
     (condition-predicate g$6866$5986$Up9ra))
   (g$i/o-error-port$5993$Up9ra
     g$i/o-error-port$6073$Up9ra
     (condition-accessor g$6866$5986$Up9ra g$6864$5991$Up9ra))
   (g$6882$5994$Up9ra
     g$6882$6074$Up9ra
     (make-record-type-descriptor
       '&i/o-decoding
       g$6866$5986$Up9ra
       'g$6885$Up9ra
       '#f
       '#f
       '#()))
   (g$6884$5995$Up9ra g$6884$6075$Up9ra '#f)
   (g$6883$5996$Up9ra
     g$6883$6076$Up9ra
     (make-record-constructor-descriptor
       g$6882$5994$Up9ra
       g$6867$5988$Up9ra
       g$6884$5995$Up9ra))
   (g$6881$5997$Up9ra
     g$6881$6077$Up9ra
     (record-predicate g$6882$5994$Up9ra))
   (g$make-i/o-decoding-error$5998$Up9ra
     g$make-i/o-decoding-error$6078$Up9ra
     (record-constructor g$6883$5996$Up9ra))
   (g$i/o-decoding-error?$5999$Up9ra
     g$i/o-decoding-error?$6079$Up9ra
     (condition-predicate g$6882$5994$Up9ra))
   (g$6897$6000$Up9ra
     g$6897$6080$Up9ra
     (make-record-type-descriptor
       '&i/o-encoding
       g$6866$5986$Up9ra
       'g$6900$Up9ra
       '#f
       '#f
       '#((immutable char))))
   (g$6899$6001$Up9ra g$6899$6081$Up9ra '#f)
   (g$6898$6002$Up9ra
     g$6898$6082$Up9ra
     (make-record-constructor-descriptor
       g$6897$6000$Up9ra
       g$6867$5988$Up9ra
       g$6899$6001$Up9ra))
   (g$6896$6003$Up9ra
     g$6896$6083$Up9ra
     (record-predicate g$6897$6000$Up9ra))
   (g$make-i/o-encoding-error$6004$Up9ra
     g$make-i/o-encoding-error$6084$Up9ra
     (record-constructor g$6898$6002$Up9ra))
   (g$6895$6005$Up9ra
     g$6895$6085$Up9ra
     (record-accessor g$6897$6000$Up9ra '0))
   (g$i/o-encoding-error?$6006$Up9ra
     g$i/o-encoding-error?$6086$Up9ra
     (condition-predicate g$6897$6000$Up9ra))
   (g$i/o-encoding-error-char$6007$Up9ra
     g$i/o-encoding-error-char$6087$Up9ra
     (condition-accessor g$6897$6000$Up9ra g$6895$6005$Up9ra)))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$get-output-string$6088$Up9ra
     g$get-output-string$6093$Up9ra
     (case-lambda
       ((g$port$6091$Up9ra)
        (clr-call-internal
          'system.io.stringwriter
          'tostring
          g$port$6091$Up9ra))))
   (g$open-output-string$6089$Up9ra
     g$open-output-string$6094$Up9ra
     (case-lambda (() (clr-new-internal 'system.io.stringwriter))))
   (g$open-string-output-port$6090$Up9ra
     g$open-string-output-port$6095$Up9ra
     (case-lambda
       (()
        ((case-lambda
           ((g$p$6092$Up9ra)
            (values
              g$p$6092$Up9ra
              (case-lambda
                (() (g$get-output-string$6088$Up9ra g$p$6092$Up9ra))))))
         (g$open-output-string$6089$Up9ra))))))
  (void))

(library-letrec* (ironscheme io simple) () (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$enummap$6096$Up9ra
     g$enummap$6212$Up9ra
     (g$make-eq-hashtable$5158$Up9ra))
   (g$enumordermap$6097$Up9ra
     g$enumordermap$6213$Up9ra
     (g$make-eq-hashtable$5158$Up9ra))
   (g$rcdmap$6098$Up9ra
     g$rcdmap$6214$Up9ra
     (g$make-eq-hashtable$5158$Up9ra))
   (g$6926$6099$Up9ra
     g$6926$6215$Up9ra
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value))))
   (g$6928$6100$Up9ra g$6928$6216$Up9ra '#f)
   (g$6927$6101$Up9ra
     g$6927$6217$Up9ra
     (make-record-constructor-descriptor
       g$6926$6099$Up9ra
       '#f
       g$6928$6100$Up9ra))
   (g$enum?$6102$Up9ra
     g$enum?$6218$Up9ra
     (record-predicate g$6926$6099$Up9ra))
   (g$make-enum$6103$Up9ra
     g$make-enum$6219$Up9ra
     (record-constructor g$6927$6101$Up9ra))
   (g$enum-value$6104$Up9ra
     g$enum-value$6220$Up9ra
     (record-accessor g$6926$6099$Up9ra '0))
   (g$get-symbols$6113$Up9ra
     g$get-symbols$6221$Up9ra
     (case-lambda
       ((g$rtd$6129$Up9ra)
        (g$hashtable-ref$5161$Up9ra
          g$enumordermap$6097$Up9ra
          g$rtd$6129$Up9ra
          '#f))))
   (g$get-value$6114$Up9ra
     g$get-value$6222$Up9ra
     (case-lambda
       ((g$rtd$6130$Up9ra g$s$6131$Up9ra)
        (g$hashtable-ref$5161$Up9ra
          (g$hashtable-ref$5161$Up9ra g$enummap$6096$Up9ra g$rtd$6130$Up9ra '#f)
          g$s$6131$Up9ra
          '#f))))
   (g$construct$6115$Up9ra
     g$construct$6223$Up9ra
     (case-lambda
       ((g$rtd$6132$Up9ra g$value$6133$Up9ra)
        ((record-constructor
           (g$hashtable-ref$5161$Up9ra
             g$rcdmap$6098$Up9ra
             g$rtd$6132$Up9ra
             '#f))
         g$value$6133$Up9ra))))
   (g$make-enumeration$6116$Up9ra
     g$make-enumeration$6224$Up9ra
     (case-lambda
       ((g$symbols$6134$Up9ra)
        (call-with-values
          (case-lambda
            (()
             (letrec* ((g$6982$6135$Up9ra
                         (make-record-type-descriptor
                           'g$6981$Up9ra
                           g$6926$6099$Up9ra
                           '#f
                           '#t
                           '#f
                           '#()))
                       (g$6984$6136$Up9ra '#f)
                       (g$6983$6137$Up9ra
                         (make-record-constructor-descriptor
                           g$6982$6135$Up9ra
                           g$6927$6101$Up9ra
                           g$6984$6136$Up9ra))
                       (g$6981$6138$Up9ra (record-predicate g$6982$6135$Up9ra))
                       (g$6981$6139$Up9ra
                         (record-constructor g$6983$6137$Up9ra)))
               (begin
                 (make-record-printer
                   'g$6981$Up9ra
                   (case-lambda
                     ((g$x$6140$Up9ra g$p$6141$Up9ra)
                      (g$fprintf$6261$Up9ra
                        g$p$6141$Up9ra
                        '"#[enum-set ~a]"
                        (g$enum-set->list$6120$Up9ra g$x$6140$Up9ra)))))
                 (values g$6982$6135$Up9ra g$6983$6137$Up9ra)))))
          (case-lambda
            ((g$rtd$6142$Up9ra g$rcd$6143$Up9ra)
             ((case-lambda
                ((g$s$6144$Up9ra g$mask$6145$Up9ra g$intmap$6146$Up9ra)
                 (begin
                   (g$hashtable-set!$5162$Up9ra
                     g$rcdmap$6098$Up9ra
                     g$rtd$6142$Up9ra
                     g$rcd$6143$Up9ra)
                   (g$hashtable-set!$5162$Up9ra
                     g$enumordermap$6097$Up9ra
                     g$rtd$6142$Up9ra
                     g$s$6144$Up9ra)
                   (for-each
                     (case-lambda
                       ((g$e$6147$Up9ra)
                        (begin
                          (g$hashtable-set!$5162$Up9ra
                            g$intmap$6146$Up9ra
                            g$e$6147$Up9ra
                            g$mask$6145$Up9ra)
                          (set! g$mask$6145$Up9ra
                            (g$bitwise-arithmetic-shift-left$5846$Up9ra
                              g$mask$6145$Up9ra
                              '1)))))
                     g$s$6144$Up9ra)
                   (g$hashtable-set!$5162$Up9ra
                     g$enummap$6096$Up9ra
                     g$rtd$6142$Up9ra
                     g$intmap$6146$Up9ra)
                   ((record-constructor g$rcd$6143$Up9ra)
                    (- (g$bitwise-arithmetic-shift-left$5846$Up9ra
                         '1
                         (length g$s$6144$Up9ra))
                       '1)))))
              g$symbols$6134$Up9ra
              '1
              (g$make-eq-hashtable$5158$Up9ra))))))))
   (g$enum-set-universe$6117$Up9ra
     g$enum-set-universe$6225$Up9ra
     (case-lambda
       ((g$enumset$6148$Up9ra)
        (letrec* ((g$rtd$6149$Up9ra (record-rtd g$enumset$6148$Up9ra))
                  (g$count$6150$Up9ra
                    (length (g$get-symbols$6113$Up9ra g$rtd$6149$Up9ra))))
          (g$construct$6115$Up9ra
            g$rtd$6149$Up9ra
            (- (g$bitwise-arithmetic-shift-left$5846$Up9ra
                 '1
                 g$count$6150$Up9ra)
               '1))))))
   (g$enum-set-indexer$6118$Up9ra
     g$enum-set-indexer$6226$Up9ra
     (case-lambda
       ((g$enumset$6151$Up9ra)
        (case-lambda
          ((g$symbol$6152$Up9ra)
           ((letrec ((g$f$6153$Up9ra
                       (case-lambda
                         ((g$s$6154$Up9ra g$i$6155$Up9ra)
                          (if (null? g$s$6154$Up9ra)
                            '#f
                            (if (eq? (car g$s$6154$Up9ra) g$symbol$6152$Up9ra)
                              g$i$6155$Up9ra
                              (g$f$6153$Up9ra
                                (cdr g$s$6154$Up9ra)
                                (+ g$i$6155$Up9ra '1))))))))
              g$f$6153$Up9ra)
            (g$get-symbols$6113$Up9ra (record-rtd g$enumset$6151$Up9ra))
            '0))))))
   (g$enum-set-constructor$6119$Up9ra
     g$enum-set-constructor$6227$Up9ra
     (case-lambda
       ((g$enumset$6156$Up9ra)
        ((case-lambda
           ((g$rtd$6157$Up9ra)
            ((case-lambda
               (()
                (case-lambda
                  ((g$symbols$6158$Up9ra)
                   ((letrec ((g$f$6159$Up9ra
                               (case-lambda
                                 ((g$v$6160$Up9ra g$s$6161$Up9ra)
                                  (if (null? g$s$6161$Up9ra)
                                    (g$construct$6115$Up9ra
                                      g$rtd$6157$Up9ra
                                      g$v$6160$Up9ra)
                                    (g$f$6159$Up9ra
                                      (bitwise-ior
                                        g$v$6160$Up9ra
                                        (g$get-value$6114$Up9ra
                                          g$rtd$6157$Up9ra
                                          (car g$s$6161$Up9ra)))
                                      (cdr g$s$6161$Up9ra)))))))
                      g$f$6159$Up9ra)
                    '0
                    g$symbols$6158$Up9ra))))))))
         (record-rtd g$enumset$6156$Up9ra)))))
   (g$enum-set->list$6120$Up9ra
     g$enum-set->list$6228$Up9ra
     (case-lambda
       ((g$enumset$6162$Up9ra)
        ((case-lambda
           ((g$rtd$6163$Up9ra g$value$6164$Up9ra)
            ((letrec ((g$f$6165$Up9ra
                        (case-lambda
                          ((g$s$6166$Up9ra g$l$6167$Up9ra)
                           (if (null? g$s$6166$Up9ra)
                             (reverse g$l$6167$Up9ra)
                             (if (zero?
                                   (bitwise-and
                                     (g$get-value$6114$Up9ra
                                       g$rtd$6163$Up9ra
                                       (car g$s$6166$Up9ra))
                                     g$value$6164$Up9ra))
                               (g$f$6165$Up9ra
                                 (cdr g$s$6166$Up9ra)
                                 g$l$6167$Up9ra)
                               (g$f$6165$Up9ra
                                 (cdr g$s$6166$Up9ra)
                                 (cons
                                   (car g$s$6166$Up9ra)
                                   g$l$6167$Up9ra))))))))
               g$f$6165$Up9ra)
             (g$get-symbols$6113$Up9ra g$rtd$6163$Up9ra)
             '())))
         (record-rtd g$enumset$6162$Up9ra)
         (g$enum-value$6104$Up9ra g$enumset$6162$Up9ra)))))
   (g$enum-set-member?$6121$Up9ra
     g$enum-set-member?$6229$Up9ra
     (case-lambda
       ((g$symbol$6168$Up9ra g$enumset$6169$Up9ra)
        (not (zero?
               (bitwise-and
                 (g$get-value$6114$Up9ra
                   (record-rtd g$enumset$6169$Up9ra)
                   g$symbol$6168$Up9ra)
                 (g$enum-value$6104$Up9ra g$enumset$6169$Up9ra)))))))
   (g$enum-set-subset?$6122$Up9ra
     g$enum-set-subset?$6230$Up9ra
     (case-lambda
       ((g$enumset1$6170$Up9ra g$enumset2$6171$Up9ra)
        ((case-lambda
           ((g$v1$6172$Up9ra
              g$v2$6173$Up9ra
              g$rtd1$6174$Up9ra
              g$rtd2$6175$Up9ra)
            (if (eq? g$rtd1$6174$Up9ra g$rtd2$6175$Up9ra)
              (= (bitwise-and g$v1$6172$Up9ra g$v2$6173$Up9ra) g$v1$6172$Up9ra)
              ((letrec ((g$f$6176$Up9ra
                          (case-lambda
                            ((g$s$6177$Up9ra)
                             (if (null? g$s$6177$Up9ra)
                               '#t
                               ((case-lambda
                                  ((g$v1*$6178$Up9ra g$v2*$6179$Up9ra)
                                   (if g$v2*$6179$Up9ra
                                     ((case-lambda
                                        ((g$has1$6180$Up9ra g$has2$6181$Up9ra)
                                         (if (if g$has1$6180$Up9ra
                                               (begin
                                                 '#f
                                                 (not g$has2$6181$Up9ra))
                                               '#f)
                                           '#f
                                           (g$f$6176$Up9ra
                                             (cdr g$s$6177$Up9ra)))))
                                      (not (zero?
                                             (bitwise-and
                                               g$v1$6172$Up9ra
                                               g$v1*$6178$Up9ra)))
                                      (not (zero?
                                             (bitwise-and
                                               g$v2$6173$Up9ra
                                               g$v2*$6179$Up9ra))))
                                     '#f)))
                                (g$get-value$6114$Up9ra
                                  g$rtd1$6174$Up9ra
                                  (car g$s$6177$Up9ra))
                                (g$get-value$6114$Up9ra
                                  g$rtd2$6175$Up9ra
                                  (car g$s$6177$Up9ra))))))))
                 g$f$6176$Up9ra)
               (g$get-symbols$6113$Up9ra g$rtd1$6174$Up9ra)))))
         (g$enum-value$6104$Up9ra g$enumset1$6170$Up9ra)
         (g$enum-value$6104$Up9ra g$enumset2$6171$Up9ra)
         (record-rtd g$enumset1$6170$Up9ra)
         (record-rtd g$enumset2$6171$Up9ra)))))
   (g$enum-set=?$6123$Up9ra
     g$enum-set=?$6231$Up9ra
     (case-lambda
       ((g$enumset1$6182$Up9ra g$enumset2$6183$Up9ra)
        (if (g$enum-set-subset?$6122$Up9ra
              g$enumset1$6182$Up9ra
              g$enumset2$6183$Up9ra)
          (begin
            '#f
            (g$enum-set-subset?$6122$Up9ra
              g$enumset2$6183$Up9ra
              g$enumset1$6182$Up9ra))
          '#f))))
   (g$enum-set-union$6124$Up9ra
     g$enum-set-union$6232$Up9ra
     (case-lambda
       ((g$enumset1$6184$Up9ra g$enumset2$6185$Up9ra)
        ((case-lambda
           ((g$v1$6186$Up9ra
              g$v2$6187$Up9ra
              g$rtd1$6188$Up9ra
              g$rtd2$6189$Up9ra)
            (if (eq? g$rtd1$6188$Up9ra g$rtd2$6189$Up9ra)
              (g$construct$6115$Up9ra
                g$rtd1$6188$Up9ra
                (bitwise-ior g$v1$6186$Up9ra g$v2$6187$Up9ra))
              '#f)))
         (g$enum-value$6104$Up9ra g$enumset1$6184$Up9ra)
         (g$enum-value$6104$Up9ra g$enumset2$6185$Up9ra)
         (record-rtd g$enumset1$6184$Up9ra)
         (record-rtd g$enumset2$6185$Up9ra)))))
   (g$enum-set-intersection$6125$Up9ra
     g$enum-set-intersection$6233$Up9ra
     (case-lambda
       ((g$enumset1$6190$Up9ra g$enumset2$6191$Up9ra)
        ((case-lambda
           ((g$v1$6192$Up9ra
              g$v2$6193$Up9ra
              g$rtd1$6194$Up9ra
              g$rtd2$6195$Up9ra)
            (if (eq? g$rtd1$6194$Up9ra g$rtd2$6195$Up9ra)
              (g$construct$6115$Up9ra
                g$rtd1$6194$Up9ra
                (bitwise-and g$v1$6192$Up9ra g$v2$6193$Up9ra))
              '#f)))
         (g$enum-value$6104$Up9ra g$enumset1$6190$Up9ra)
         (g$enum-value$6104$Up9ra g$enumset2$6191$Up9ra)
         (record-rtd g$enumset1$6190$Up9ra)
         (record-rtd g$enumset2$6191$Up9ra)))))
   (g$enum-set-difference$6126$Up9ra
     g$enum-set-difference$6234$Up9ra
     (case-lambda
       ((g$enumset1$6196$Up9ra g$enumset2$6197$Up9ra)
        ((case-lambda
           ((g$v1$6198$Up9ra
              g$v2$6199$Up9ra
              g$rtd1$6200$Up9ra
              g$rtd2$6201$Up9ra)
            (if (eq? g$rtd1$6200$Up9ra g$rtd2$6201$Up9ra)
              (g$construct$6115$Up9ra
                g$rtd1$6200$Up9ra
                (bitwise-xor g$v1$6198$Up9ra g$v2$6199$Up9ra))
              '#f)))
         (g$enum-value$6104$Up9ra g$enumset1$6196$Up9ra)
         (g$enum-value$6104$Up9ra g$enumset2$6197$Up9ra)
         (record-rtd g$enumset1$6196$Up9ra)
         (record-rtd g$enumset2$6197$Up9ra)))))
   (g$enum-set-complement$6127$Up9ra
     g$enum-set-complement$6235$Up9ra
     (case-lambda
       ((g$enumset$6202$Up9ra)
        (g$enum-set-difference$6126$Up9ra
          g$enumset$6202$Up9ra
          (g$enum-set-universe$6117$Up9ra g$enumset$6202$Up9ra)))))
   (g$enum-set-projection$6128$Up9ra
     g$enum-set-projection$6236$Up9ra
     (case-lambda
       ((g$enumset1$6203$Up9ra g$enumset2$6204$Up9ra)
        ((case-lambda
           ((g$v1$6205$Up9ra g$rtd1$6206$Up9ra g$rtd2$6207$Up9ra)
            ((letrec ((g$f$6208$Up9ra
                        (case-lambda
                          ((g$s$6209$Up9ra g$v$6210$Up9ra)
                           (if (null? g$s$6209$Up9ra)
                             (g$construct$6115$Up9ra
                               g$rtd2$6207$Up9ra
                               g$v$6210$Up9ra)
                             (if (zero?
                                   (bitwise-and
                                     g$v1$6205$Up9ra
                                     (g$get-value$6114$Up9ra
                                       g$rtd1$6206$Up9ra
                                       (car g$s$6209$Up9ra))))
                               (g$f$6208$Up9ra
                                 (cdr g$s$6209$Up9ra)
                                 g$v$6210$Up9ra)
                               ((case-lambda
                                  ((g$v2$6211$Up9ra)
                                   (if (g$v2$6211$Up9ra)
                                     (g$f$6208$Up9ra
                                       (cdr g$s$6209$Up9ra)
                                       (bitwise-ior
                                         g$v$6210$Up9ra
                                         g$v2$6211$Up9ra))
                                     (g$f$6208$Up9ra
                                       (cdr g$s$6209$Up9ra)
                                       g$v$6210$Up9ra))))
                                (g$get-value$6114$Up9ra
                                  g$rtd2$6207$Up9ra
                                  (car g$s$6209$Up9ra)))))))))
               g$f$6208$Up9ra)
             (g$get-symbols$6113$Up9ra g$rtd1$6206$Up9ra)
             '0)))
         (g$enum-value$6104$Up9ra g$enumset1$6203$Up9ra)
         (record-rtd g$enumset1$6203$Up9ra)
         (record-rtd g$enumset2$6204$Up9ra))))))
  (void))

(library-letrec* (ironscheme format)
  ((g$dofmt$6237$Up9ra
     g$dofmt$6259$Up9ra
     (case-lambda
       ((g$p$6241$Up9ra g$cntl$6242$Up9ra g$args$6243$Up9ra)
        ((case-lambda
           ((g$nmax$6244$Up9ra)
            ((letrec ((g$loop$6245$Up9ra
                        (case-lambda
                          ((g$n$6246$Up9ra g$a$6247$Up9ra)
                           (if (fx<=? g$n$6246$Up9ra g$nmax$6244$Up9ra)
                             ((case-lambda
                                ((g$c$6248$Up9ra)
                                 (if (if (char=? g$c$6248$Up9ra '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$6246$Up9ra
                                           g$nmax$6244$Up9ra))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$6249$Up9ra)
                                       (if (eqv? g$t$6249$Up9ra '#\a)
                                         (begin
                                           (display
                                             (car g$a$6247$Up9ra)
                                             g$p$6241$Up9ra)
                                           (g$loop$6245$Up9ra
                                             (fx+ g$n$6246$Up9ra '2)
                                             (cdr g$a$6247$Up9ra)))
                                         (if (eqv? g$t$6249$Up9ra '#\s)
                                           (begin
                                             (write
                                               (car g$a$6247$Up9ra)
                                               g$p$6241$Up9ra)
                                             (g$loop$6245$Up9ra
                                               (fx+ g$n$6246$Up9ra '2)
                                               (cdr g$a$6247$Up9ra)))
                                           (if (eqv? g$t$6249$Up9ra '#\b)
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$6247$Up9ra)
                                                   '2)
                                                 g$p$6241$Up9ra)
                                               (g$loop$6245$Up9ra
                                                 (fx+ g$n$6246$Up9ra '2)
                                                 (cdr g$a$6247$Up9ra)))
                                             (if (eqv? g$t$6249$Up9ra '#\o)
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$6247$Up9ra)
                                                     '8)
                                                   g$p$6241$Up9ra)
                                                 (g$loop$6245$Up9ra
                                                   (fx+ g$n$6246$Up9ra '2)
                                                   (cdr g$a$6247$Up9ra)))
                                               (if (eqv? g$t$6249$Up9ra '#\x)
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$6247$Up9ra)
                                                       '16)
                                                     g$p$6241$Up9ra)
                                                   (g$loop$6245$Up9ra
                                                     (fx+ g$n$6246$Up9ra '2)
                                                     (cdr g$a$6247$Up9ra)))
                                                 (if (eqv? g$t$6249$Up9ra '#\d)
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$6247$Up9ra)
                                                         '10)
                                                       g$p$6241$Up9ra)
                                                     (g$loop$6245$Up9ra
                                                       (fx+ g$n$6246$Up9ra '2)
                                                       (cdr g$a$6247$Up9ra)))
                                                   (if (eqv?
                                                         g$t$6249$Up9ra
                                                         '#\~)
                                                     (begin
                                                       (write-char
                                                         '#\~
                                                         g$p$6241$Up9ra)
                                                       (g$loop$6245$Up9ra
                                                         (fx+ g$n$6246$Up9ra '2)
                                                         g$a$6247$Up9ra))
                                                     (begin
                                                       (write-char
                                                         g$c$6248$Up9ra
                                                         g$p$6241$Up9ra)
                                                       (g$loop$6245$Up9ra
                                                         (fx+ g$n$6246$Up9ra '1)
                                                         g$a$6247$Up9ra)))))))))))
                                    (string-ref
                                      g$cntl$6242$Up9ra
                                      (fx+ g$n$6246$Up9ra '1)))
                                   (begin
                                     (write-char g$c$6248$Up9ra g$p$6241$Up9ra)
                                     (g$loop$6245$Up9ra
                                       (fx+ g$n$6246$Up9ra '1)
                                       g$a$6247$Up9ra)))))
                              (string-ref g$cntl$6242$Up9ra g$n$6246$Up9ra))
                             (void))))))
               g$loop$6245$Up9ra)
             '0
             g$args$6243$Up9ra)))
         (fx- (string-length g$cntl$6242$Up9ra) '1)))))
   (g$printf$6238$Up9ra
     g$printf$6260$Up9ra
     (case-lambda
       ((g$control$6250$Up9ra . g$args$6251$Up9ra)
        (g$dofmt$6237$Up9ra
          (current-output-port)
          g$control$6250$Up9ra
          g$args$6251$Up9ra))))
   (g$fprintf$6239$Up9ra
     g$fprintf$6261$Up9ra
     (case-lambda
       ((g$p$6252$Up9ra g$control$6253$Up9ra . g$args$6254$Up9ra)
        (g$dofmt$6237$Up9ra
          g$p$6252$Up9ra
          g$control$6253$Up9ra
          g$args$6254$Up9ra))))
   (g$format$6240$Up9ra
     g$format$6262$Up9ra
     (case-lambda
       ((g$control$6255$Up9ra . g$args$6256$Up9ra)
        (call-with-values
          g$open-string-output-port$6095$Up9ra
          (case-lambda
            ((g$p$6257$Up9ra g$c$6258$Up9ra)
             (begin
               (g$dofmt$6237$Up9ra
                 g$p$6257$Up9ra
                 g$control$6255$Up9ra
                 g$args$6256$Up9ra)
               (g$c$6258$Up9ra)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$6263$Up9ra
     g$make-traced-macro$6266$Up9ra
     (case-lambda
       ((g$name$6264$Up9ra g$x$6265$Up9ra)
        (if (procedure? g$x$6265$Up9ra)
          (make-traced-procedure
            g$name$6264$Up9ra
            g$x$6265$Up9ra
            g$syntax->datum$10915$Up9ra)
          (if (g$variable-transformer?$10743$Up9ra g$x$6265$Up9ra)
            (g$make-variable-transformer$10742$Up9ra
              (make-traced-procedure
                g$name$6264$Up9ra
                (g$variable-transformer-procedure$10744$Up9ra g$x$6265$Up9ra)
                g$syntax->datum$10915$Up9ra))
            g$x$6265$Up9ra))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$read-library-source-file$6267$Up9ra
     g$read-library-source-file$6345$Up9ra
     (case-lambda
       ((g$file-name$6337$Up9ra)
        (with-input-from-file g$file-name$6337$Up9ra read-annotated))))
   (g$make-parameter$6268$Up9ra
     g$make-parameter$6346$Up9ra
     (case-lambda
       ((g$x$6338$Up9ra)
        (g$make-parameter$6268$Up9ra
          g$x$6338$Up9ra
          (case-lambda ((g$x$6339$Up9ra) g$x$6339$Up9ra))))
       ((g$x$6340$Up9ra g$fender$6341$Up9ra)
        (begin
          (if (procedure? g$fender$6341$Up9ra)
            (void)
            (assertion-violation
              'assert
              '"assertion failed"
              '(procedure? fender)))
          ((case-lambda
             ((g$x$6342$Up9ra)
              (case-lambda
                (() g$x$6342$Up9ra)
                ((g$v$6343$Up9ra)
                 (set! g$x$6342$Up9ra (g$fender$6341$Up9ra g$v$6343$Up9ra))))))
           (g$fender$6341$Up9ra g$x$6340$Up9ra))))))
   (g$file-options-spec$6336$Up9ra
     g$file-options-spec$6347$Up9ra
     (case-lambda ((g$x$6344$Up9ra) g$x$6344$Up9ra))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$6544$Up9ra
     g$current-primitive-locations$6589$Up9ra
     (g$make-parameter$6346$Up9ra
       (case-lambda ((g$x$6550$Up9ra) '#f))
       (case-lambda
         ((g$p$6551$Up9ra)
          (begin
            (if (procedure? g$p$6551$Up9ra)
              (void)
              (assertion-violation 'assert '"assertion failed" '(procedure? p)))
            g$p$6551$Up9ra)))))
   (g$mutable?$6545$Up9ra
     g$mutable?$6590$Up9ra
     (case-lambda
       ((g$x$6552$Up9ra)
        (letrec* ((g$simple?$6553$Up9ra
                    (case-lambda
                      ((g$x$6554$Up9ra)
                       ((case-lambda
                          ((g$t$6555$Up9ra)
                           (if g$t$6555$Up9ra
                             g$t$6555$Up9ra
                             ((case-lambda
                                ((g$t$6556$Up9ra)
                                 (if g$t$6556$Up9ra
                                   g$t$6556$Up9ra
                                   ((case-lambda
                                      ((g$t$6557$Up9ra)
                                       (if g$t$6557$Up9ra
                                         g$t$6557$Up9ra
                                         ((case-lambda
                                            ((g$t$6558$Up9ra)
                                             (if g$t$6558$Up9ra
                                               g$t$6558$Up9ra
                                               ((case-lambda
                                                  ((g$t$6559$Up9ra)
                                                   (if g$t$6559$Up9ra
                                                     g$t$6559$Up9ra
                                                     ((case-lambda
                                                        ((g$t$6560$Up9ra)
                                                         (if g$t$6560$Up9ra
                                                           g$t$6560$Up9ra
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$6554$Up9ra)))))
                                                      (bytevector?
                                                        g$x$6554$Up9ra)))))
                                                (string? g$x$6554$Up9ra)))))
                                          (boolean? g$x$6554$Up9ra)))))
                                    (symbol? g$x$6554$Up9ra)))))
                              (char? g$x$6554$Up9ra)))))
                        (null? g$x$6554$Up9ra))))))
          (not (g$simple?$6553$Up9ra g$x$6552$Up9ra))))))
   (g$rewriter$6546$Up9ra
     g$rewriter$6591$Up9ra
     (case-lambda
       ((g$quote-hack?$6561$Up9ra)
        (letrec* ((g$f$6562$Up9ra
                    (case-lambda
                      ((g$x$6563$Up9ra)
                       (if (pair? g$x$6563$Up9ra)
                         ((case-lambda
                            ((g$t$6564$Up9ra)
                             (if (eqv? g$t$6564$Up9ra 'quote)
                               (if (if g$quote-hack?$6561$Up9ra
                                     (begin
                                       '#f
                                       (g$mutable?$6545$Up9ra
                                         (g$cadr$4896$Up9ra g$x$6563$Up9ra)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$6584$Up9ra)
                                     (begin
                                       (set-symbol-value!
                                         g$g$6584$Up9ra
                                         (g$cadr$4896$Up9ra g$x$6563$Up9ra))
                                       g$g$6584$Up9ra)))
                                  (gensym))
                                 g$x$6563$Up9ra)
                               (if (eqv? g$t$6564$Up9ra 'case-lambda)
                                 (cons
                                   'case-lambda
                                   (map (case-lambda
                                          ((g$x$6583$Up9ra)
                                           (cons
                                             (car g$x$6583$Up9ra)
                                             (map g$f$6562$Up9ra
                                                  (cdr g$x$6583$Up9ra)))))
                                        (cdr g$x$6563$Up9ra)))
                                 (if (eqv? g$t$6564$Up9ra 'lambda)
                                   (g$cons*$5367$Up9ra
                                     'lambda
                                     (g$cadr$4896$Up9ra g$x$6563$Up9ra)
                                     (map g$f$6562$Up9ra
                                          (g$cddr$4898$Up9ra g$x$6563$Up9ra)))
                                   (if (eqv? g$t$6564$Up9ra 'letrec)
                                     ((case-lambda
                                        ((g$bindings$6579$Up9ra
                                           g$body*$6580$Up9ra)
                                         ((case-lambda
                                            ((g$lhs*$6581$Up9ra
                                               g$rhs*$6582$Up9ra)
                                             (g$cons*$5367$Up9ra
                                               'letrec
                                               (map list
                                                    g$lhs*$6581$Up9ra
                                                    (map g$f$6562$Up9ra
                                                         g$rhs*$6582$Up9ra))
                                               (map g$f$6562$Up9ra
                                                    g$body*$6580$Up9ra))))
                                          (map car g$bindings$6579$Up9ra)
                                          (map g$cadr$4896$Up9ra
                                               g$bindings$6579$Up9ra))))
                                      (g$cadr$4896$Up9ra g$x$6563$Up9ra)
                                      (g$cddr$4898$Up9ra g$x$6563$Up9ra))
                                     (if (eqv? g$t$6564$Up9ra 'letrec*)
                                       ((case-lambda
                                          ((g$bindings$6575$Up9ra
                                             g$body*$6576$Up9ra)
                                           ((case-lambda
                                              ((g$lhs*$6577$Up9ra
                                                 g$rhs*$6578$Up9ra)
                                               (g$cons*$5367$Up9ra
                                                 'letrec*
                                                 (map list
                                                      g$lhs*$6577$Up9ra
                                                      (map g$f$6562$Up9ra
                                                           g$rhs*$6578$Up9ra))
                                                 (map g$f$6562$Up9ra
                                                      g$body*$6576$Up9ra))))
                                            (map car g$bindings$6575$Up9ra)
                                            (map g$cadr$4896$Up9ra
                                                 g$bindings$6575$Up9ra))))
                                        (g$cadr$4896$Up9ra g$x$6563$Up9ra)
                                        (g$cddr$4898$Up9ra g$x$6563$Up9ra))
                                       (if (eqv?
                                             g$t$6564$Up9ra
                                             'library-letrec*)
                                         ((case-lambda
                                            ((g$name$6568$Up9ra g$x$6569$Up9ra)
                                             ((case-lambda
                                                ((g$bindings$6570$Up9ra
                                                   g$body*$6571$Up9ra)
                                                 ((case-lambda
                                                    ((g$lhs*$6572$Up9ra
                                                       g$lhs**$6573$Up9ra
                                                       g$rhs*$6574$Up9ra)
                                                     (g$cons*$5367$Up9ra
                                                       'library-letrec*
                                                       g$name$6568$Up9ra
                                                       (map list
                                                            g$lhs*$6572$Up9ra
                                                            g$lhs**$6573$Up9ra
                                                            (map g$f$6562$Up9ra
                                                                 g$rhs*$6574$Up9ra))
                                                       (map g$f$6562$Up9ra
                                                            g$body*$6571$Up9ra))))
                                                  (map car
                                                       g$bindings$6570$Up9ra)
                                                  (map g$cadr$4896$Up9ra
                                                       g$bindings$6570$Up9ra)
                                                  (map g$caddr$4902$Up9ra
                                                       g$bindings$6570$Up9ra))))
                                              (g$cadr$4896$Up9ra g$x$6569$Up9ra)
                                              (g$cddr$4898$Up9ra
                                                g$x$6569$Up9ra))))
                                          (g$cadr$4896$Up9ra g$x$6563$Up9ra)
                                          (cdr g$x$6563$Up9ra))
                                         (if (eqv? g$t$6564$Up9ra 'begin)
                                           (cons
                                             'begin
                                             (map g$f$6562$Up9ra
                                                  (cdr g$x$6563$Up9ra)))
                                           (if (eqv? g$t$6564$Up9ra 'set!)
                                             (list
                                               'set!
                                               (g$cadr$4896$Up9ra
                                                 g$x$6563$Up9ra)
                                               (g$f$6562$Up9ra
                                                 (g$caddr$4902$Up9ra
                                                   g$x$6563$Up9ra)))
                                             (if (eqv?
                                                   g$t$6564$Up9ra
                                                   'primitive)
                                               ((case-lambda
                                                  ((g$op$6565$Up9ra)
                                                   ((case-lambda
                                                      ((g$t$6566$Up9ra)
                                                       (if g$t$6566$Up9ra
                                                         ((case-lambda
                                                            ((g$loc$6567$Up9ra)
                                                             g$loc$6567$Up9ra))
                                                          g$t$6566$Up9ra)
                                                         g$op$6565$Up9ra)))
                                                    ((g$current-primitive-locations$6544$Up9ra)
                                                     g$op$6565$Up9ra))))
                                                (g$cadr$4896$Up9ra
                                                  g$x$6563$Up9ra))
                                               (if (eqv? g$t$6564$Up9ra 'define)
                                                 g$x$6563$Up9ra
                                                 (if (list? g$x$6563$Up9ra)
                                                   (map g$f$6562$Up9ra
                                                        g$x$6563$Up9ra)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$6563$Up9ra
                                                     (list?
                                                       g$x$6563$Up9ra)))))))))))))))
                          (car g$x$6563$Up9ra))
                         g$x$6563$Up9ra)))))
          g$f$6562$Up9ra))))
   (g$expanded->core$6547$Up9ra
     g$expanded->core$6592$Up9ra
     (case-lambda
       ((g$x$6585$Up9ra) ((g$rewriter$6546$Up9ra '#t) g$x$6585$Up9ra))))
   (g$compile-core-expr$6548$Up9ra
     g$compile-core-expr$6593$Up9ra
     (case-lambda
       ((g$x$6586$Up9ra) ((g$rewriter$6546$Up9ra '#f) g$x$6586$Up9ra))))
   (g$compile-core-expr-to-port$6549$Up9ra
     g$compile-core-expr-to-port$6594$Up9ra
     (case-lambda
       ((g$x$6587$Up9ra g$p$6588$Up9ra)
        (g$pretty-print$6543$Up9ra
          ((g$rewriter$6546$Up9ra '#f) g$x$6587$Up9ra)
          g$p$6588$Up9ra)))))
  (void))

(library-letrec* (psyntax config) () (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$6633$Up9ra
     g$make-collection$6837$Up9ra
     (case-lambda
       (()
        ((case-lambda
           ((g$set$6694$Up9ra)
            (letrec* ((g$set-cons$6695$Up9ra
                        (case-lambda
                          ((g$x$6697$Up9ra g$ls$6698$Up9ra)
                           (if (memq g$x$6697$Up9ra g$ls$6698$Up9ra)
                             g$ls$6698$Up9ra
                             (cons g$x$6697$Up9ra g$ls$6698$Up9ra))))))
              (case-lambda
                (() g$set$6694$Up9ra)
                ((g$x$6696$Up9ra)
                 (set! g$set$6694$Up9ra
                   (g$set-cons$6695$Up9ra g$x$6696$Up9ra g$set$6694$Up9ra)))))))
         '()))))
   (g$current-library-collection$6634$Up9ra
     g$current-library-collection$6838$Up9ra
     (g$make-parameter$6346$Up9ra
       (g$make-collection$6633$Up9ra)
       (case-lambda
         ((g$x$6699$Up9ra)
          (begin
            (if (procedure? g$x$6699$Up9ra)
              (void)
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$6699$Up9ra))
            g$x$6699$Up9ra)))))
   (g$7476$6635$Up9ra
     g$7476$6839$Up9ra
     (make-record-type-descriptor
       'library
       '#f
       'g$7479$Up9ra
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$7478$6636$Up9ra g$7478$6840$Up9ra '#f)
   (g$7477$6637$Up9ra
     g$7477$6841$Up9ra
     (make-record-constructor-descriptor
       g$7476$6635$Up9ra
       '#f
       g$7478$6636$Up9ra))
   (g$library?$6638$Up9ra
     g$library?$6842$Up9ra
     (record-predicate g$7476$6635$Up9ra))
   (g$make-library$6639$Up9ra
     g$make-library$6843$Up9ra
     (record-constructor g$7477$6637$Up9ra))
   (g$library-id$6640$Up9ra
     g$library-id$6844$Up9ra
     (record-accessor g$7476$6635$Up9ra '0))
   (g$library-name$6641$Up9ra
     g$library-name$6845$Up9ra
     (record-accessor g$7476$6635$Up9ra '1))
   (g$library-version$6642$Up9ra
     g$library-version$6846$Up9ra
     (record-accessor g$7476$6635$Up9ra '2))
   (g$library-imp*$6643$Up9ra
     g$library-imp*$6847$Up9ra
     (record-accessor g$7476$6635$Up9ra '3))
   (g$library-vis*$6644$Up9ra
     g$library-vis*$6848$Up9ra
     (record-accessor g$7476$6635$Up9ra '4))
   (g$library-inv*$6645$Up9ra
     g$library-inv*$6849$Up9ra
     (record-accessor g$7476$6635$Up9ra '5))
   (g$library-subst$6646$Up9ra
     g$library-subst$6850$Up9ra
     (record-accessor g$7476$6635$Up9ra '6))
   (g$library-env$6647$Up9ra
     g$library-env$6851$Up9ra
     (record-accessor g$7476$6635$Up9ra '7))
   (g$library-visit-state$6648$Up9ra
     g$library-visit-state$6852$Up9ra
     (record-accessor g$7476$6635$Up9ra '8))
   (g$library-invoke-state$6649$Up9ra
     g$library-invoke-state$6853$Up9ra
     (record-accessor g$7476$6635$Up9ra '9))
   (g$library-visit-code$6650$Up9ra
     g$library-visit-code$6854$Up9ra
     (record-accessor g$7476$6635$Up9ra '10))
   (g$library-invoke-code$6651$Up9ra
     g$library-invoke-code$6855$Up9ra
     (record-accessor g$7476$6635$Up9ra '11))
   (g$library-visible?$6652$Up9ra
     g$library-visible?$6856$Up9ra
     (record-accessor g$7476$6635$Up9ra '12))
   (g$library-source-file-name$6653$Up9ra
     g$library-source-file-name$6857$Up9ra
     (record-accessor g$7476$6635$Up9ra '13))
   (g$set-library-id!$6654$Up9ra
     g$set-library-id!$6858$Up9ra
     (record-mutator g$7476$6635$Up9ra '0))
   (g$set-library-name!$6655$Up9ra
     g$set-library-name!$6859$Up9ra
     (record-mutator g$7476$6635$Up9ra '1))
   (g$set-library-version!$6656$Up9ra
     g$set-library-version!$6860$Up9ra
     (record-mutator g$7476$6635$Up9ra '2))
   (g$set-library-imp*!$6657$Up9ra
     g$set-library-imp*!$6861$Up9ra
     (record-mutator g$7476$6635$Up9ra '3))
   (g$set-library-vis*!$6658$Up9ra
     g$set-library-vis*!$6862$Up9ra
     (record-mutator g$7476$6635$Up9ra '4))
   (g$set-library-inv*!$6659$Up9ra
     g$set-library-inv*!$6863$Up9ra
     (record-mutator g$7476$6635$Up9ra '5))
   (g$set-library-subst!$6660$Up9ra
     g$set-library-subst!$6864$Up9ra
     (record-mutator g$7476$6635$Up9ra '6))
   (g$set-library-env!$6661$Up9ra
     g$set-library-env!$6865$Up9ra
     (record-mutator g$7476$6635$Up9ra '7))
   (g$set-library-visit-state!$6662$Up9ra
     g$set-library-visit-state!$6866$Up9ra
     (record-mutator g$7476$6635$Up9ra '8))
   (g$set-library-invoke-state!$6663$Up9ra
     g$set-library-invoke-state!$6867$Up9ra
     (record-mutator g$7476$6635$Up9ra '9))
   (g$set-library-visit-code!$6664$Up9ra
     g$set-library-visit-code!$6868$Up9ra
     (record-mutator g$7476$6635$Up9ra '10))
   (g$set-library-invoke-code!$6665$Up9ra
     g$set-library-invoke-code!$6869$Up9ra
     (record-mutator g$7476$6635$Up9ra '11))
   (g$set-library-visible?!$6666$Up9ra
     g$set-library-visible?!$6870$Up9ra
     (record-mutator g$7476$6635$Up9ra '12))
   (g$set-library-source-file-name!$6667$Up9ra
     g$set-library-source-file-name!$6871$Up9ra
     (record-mutator g$7476$6635$Up9ra '13))
   (g$rp$6668$Up9ra
     g$rp$6872$Up9ra
     (make-record-printer
       'library
       (case-lambda
         ((g$x$6700$Up9ra g$p$6701$Up9ra)
          (begin
            (if (g$library?$6638$Up9ra g$x$6700$Up9ra)
              (void)
              (assertion-violation 'record-type-printer '"not a library"))
            (display
              (g$format$6262$Up9ra
                '"#<library ~s>"
                (if (null? (g$library-version$6642$Up9ra g$x$6700$Up9ra))
                  (g$library-name$6641$Up9ra g$x$6700$Up9ra)
                  (append
                    (g$library-name$6641$Up9ra g$x$6700$Up9ra)
                    (list (g$library-version$6642$Up9ra g$x$6700$Up9ra)))))
              g$p$6701$Up9ra))))))
   (g$find-dependencies$6669$Up9ra
     g$find-dependencies$6873$Up9ra
     (case-lambda
       ((g$ls$6702$Up9ra)
        (if (null? g$ls$6702$Up9ra)
          '()
          (assertion-violation 'find-dependencies '"cannot handle deps yet")))))
   (g$find-library-by$6670$Up9ra
     g$find-library-by$6874$Up9ra
     (case-lambda
       ((g$pred$6703$Up9ra)
        ((letrec ((g$f$6704$Up9ra
                    (case-lambda
                      ((g$ls$6705$Up9ra)
                       (if (null? g$ls$6705$Up9ra)
                         '#f
                         (if (g$pred$6703$Up9ra (car g$ls$6705$Up9ra))
                           (car g$ls$6705$Up9ra)
                           (g$f$6704$Up9ra (cdr g$ls$6705$Up9ra))))))))
           g$f$6704$Up9ra)
         ((g$current-library-collection$6634$Up9ra))))))
   (g$library-path$6671$Up9ra
     g$library-path$6875$Up9ra
     (g$make-parameter$6346$Up9ra
       '(".")
       (case-lambda
         ((g$x$6706$Up9ra)
          (if (if (list? g$x$6706$Up9ra)
                (begin '#f (g$for-all$5365$Up9ra string? g$x$6706$Up9ra))
                '#f)
            (map (case-lambda ((g$x$6707$Up9ra) g$x$6707$Up9ra)) g$x$6706$Up9ra)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$6706$Up9ra))))))
   (g$library-extensions$6672$Up9ra
     g$library-extensions$6876$Up9ra
     (g$make-parameter$6346$Up9ra
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$6708$Up9ra)
          (if (if (list? g$x$6708$Up9ra)
                (begin '#f (g$for-all$5365$Up9ra string? g$x$6708$Up9ra))
                '#f)
            (map (case-lambda ((g$x$6709$Up9ra) g$x$6709$Up9ra)) g$x$6708$Up9ra)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$6708$Up9ra))))))
   (g$library-name->file-name$6673$Up9ra
     g$library-name->file-name$6877$Up9ra
     (case-lambda
       ((g$x$6710$Up9ra)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$6095$Up9ra)))
          (case-lambda
            ((g$p$6713$Up9ra g$extract$6714$Up9ra)
             ((case-lambda
                ((g$extract$6715$Up9ra g$p$6716$Up9ra)
                 (letrec* ((g$display-hex$6717$Up9ra
                             (case-lambda
                               ((g$n$6725$Up9ra)
                                (if (<= '0 g$n$6725$Up9ra '9)
                                  (display g$n$6725$Up9ra g$p$6716$Up9ra)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$6725$Up9ra '10)))
                                    g$p$6716$Up9ra))))))
                   (begin
                     ((letrec ((g$f$6718$Up9ra
                                 (case-lambda
                                   ((g$ls$6719$Up9ra)
                                    (if (null? g$ls$6719$Up9ra)
                                      (void)
                                      (begin
                                        (display '"/" g$p$6716$Up9ra)
                                        (for-each
                                          (case-lambda
                                            ((g$c$6720$Up9ra)
                                             (if ((case-lambda
                                                    ((g$t$6721$Up9ra)
                                                     (if g$t$6721$Up9ra
                                                       g$t$6721$Up9ra
                                                       ((case-lambda
                                                          ((g$t$6722$Up9ra)
                                                           (if g$t$6722$Up9ra
                                                             g$t$6722$Up9ra
                                                             ((case-lambda
                                                                ((g$t$6723$Up9ra)
                                                                 (if g$t$6723$Up9ra
                                                                   g$t$6723$Up9ra
                                                                   (begin
                                                                     '#f
                                                                     (memv
                                                                       g$c$6720$Up9ra
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (char<=?
                                                                '#\0
                                                                g$c$6720$Up9ra
                                                                '#\9)))))
                                                        (char<=?
                                                          '#\A
                                                          g$c$6720$Up9ra
                                                          '#\Z)))))
                                                  (char<=?
                                                    '#\a
                                                    g$c$6720$Up9ra
                                                    '#\z))
                                               (display
                                                 g$c$6720$Up9ra
                                                 g$p$6716$Up9ra)
                                               (begin
                                                 (display '"%" g$p$6716$Up9ra)
                                                 ((case-lambda
                                                    ((g$n$6724$Up9ra)
                                                     (begin
                                                       (g$display-hex$6717$Up9ra
                                                         (g$quotient$5722$Up9ra
                                                           g$n$6724$Up9ra
                                                           '16))
                                                       (g$display-hex$6717$Up9ra
                                                         (g$remainder$5723$Up9ra
                                                           g$n$6724$Up9ra
                                                           '16)))))
                                                  (char->integer
                                                    g$c$6720$Up9ra))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$6719$Up9ra))))
                                        (g$f$6718$Up9ra
                                          (cdr g$ls$6719$Up9ra))))))))
                        g$f$6718$Up9ra)
                      g$x$6710$Up9ra)
                     (g$extract$6715$Up9ra)))))
              g$extract$6714$Up9ra
              g$p$6713$Up9ra)))))))
   (g$file-locator$6674$Up9ra
     g$file-locator$6878$Up9ra
     (g$make-parameter$6346$Up9ra
       (case-lambda
         ((g$x$6726$Up9ra)
          ((case-lambda
             ((g$str$6727$Up9ra)
              ((letrec ((g$f$6728$Up9ra
                          (case-lambda
                            ((g$ls$6729$Up9ra
                               g$exts$6730$Up9ra
                               g$failed-list$6731$Up9ra)
                             (if (null? g$ls$6729$Up9ra)
                               ((case-lambda
                                  (()
                                   (letrec* ((g$7581$6732$Up9ra
                                               (make-record-type-descriptor
                                                 '&library-resolution
                                                 &condition-rtd
                                                 'g$7584$Up9ra
                                                 '#f
                                                 '#f
                                                 '#((immutable library)
                                                    (immutable files))))
                                             (g$7583$6733$Up9ra '#f)
                                             (g$7582$6734$Up9ra
                                               (make-record-constructor-descriptor
                                                 g$7581$6732$Up9ra
                                                 &condition-rcd
                                                 g$7583$6733$Up9ra))
                                             (g$7580$6735$Up9ra
                                               (record-predicate
                                                 g$7581$6732$Up9ra))
                                             (g$make-library-resolution-condition$6736$Up9ra
                                               (record-constructor
                                                 g$7582$6734$Up9ra))
                                             (g$7578$6737$Up9ra
                                               (record-accessor
                                                 g$7581$6732$Up9ra
                                                 '0))
                                             (g$7579$6738$Up9ra
                                               (record-accessor
                                                 g$7581$6732$Up9ra
                                                 '1))
                                             (g$library-resolution-condition?$6739$Up9ra
                                               (condition-predicate
                                                 g$7581$6732$Up9ra))
                                             (g$condition-library$6740$Up9ra
                                               (condition-accessor
                                                 g$7581$6732$Up9ra
                                                 g$7578$6737$Up9ra))
                                             (g$condition-files$6741$Up9ra
                                               (condition-accessor
                                                 g$7581$6732$Up9ra
                                                 g$7579$6738$Up9ra)))
                                     (raise
                                       (condition
                                         (g$make-error$5639$Up9ra)
                                         (g$make-who-condition$5665$Up9ra
                                           'expander)
                                         (g$make-message-condition$5619$Up9ra
                                           '"cannot locate library in library-path")
                                         (g$make-library-resolution-condition$6736$Up9ra
                                           g$x$6726$Up9ra
                                           (reverse
                                             g$failed-list$6731$Up9ra))))))))
                               (if (null? g$exts$6730$Up9ra)
                                 (g$f$6728$Up9ra
                                   (cdr g$ls$6729$Up9ra)
                                   (g$library-extensions$6672$Up9ra)
                                   g$failed-list$6731$Up9ra)
                                 ((case-lambda
                                    ((g$name$6742$Up9ra)
                                     (if (g$file-exists?$5236$Up9ra
                                           g$name$6742$Up9ra)
                                       g$name$6742$Up9ra
                                       (g$f$6728$Up9ra
                                         g$ls$6729$Up9ra
                                         (cdr g$exts$6730$Up9ra)
                                         (cons
                                           g$name$6742$Up9ra
                                           g$failed-list$6731$Up9ra)))))
                                  (string-append
                                    (car g$ls$6729$Up9ra)
                                    g$str$6727$Up9ra
                                    (car g$exts$6730$Up9ra)))))))))
                 g$f$6728$Up9ra)
               (g$library-path$6671$Up9ra)
               (g$library-extensions$6672$Up9ra)
               '())))
           (g$library-name->file-name$6673$Up9ra g$x$6726$Up9ra))))
       (case-lambda
         ((g$f$6743$Up9ra)
          (if (procedure? g$f$6743$Up9ra)
            g$f$6743$Up9ra
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$6743$Up9ra))))))
   (g$serialize-all$6675$Up9ra
     g$serialize-all$6879$Up9ra
     (case-lambda
       ((g$serialize$6744$Up9ra g$compile$6745$Up9ra)
        (letrec* ((g$library-desc$6746$Up9ra
                    (case-lambda
                      ((g$x$6748$Up9ra)
                       (list
                         (g$library-id$6640$Up9ra g$x$6748$Up9ra)
                         (g$library-name$6641$Up9ra g$x$6748$Up9ra))))))
          (for-each
            (case-lambda
              ((g$x$6747$Up9ra)
               (if (g$library-source-file-name$6653$Up9ra g$x$6747$Up9ra)
                 (g$serialize$6744$Up9ra
                   (g$library-source-file-name$6653$Up9ra g$x$6747$Up9ra)
                   (list
                     (g$library-id$6640$Up9ra g$x$6747$Up9ra)
                     (g$library-name$6641$Up9ra g$x$6747$Up9ra)
                     (g$library-version$6642$Up9ra g$x$6747$Up9ra)
                     (map g$library-desc$6746$Up9ra
                          (g$library-imp*$6643$Up9ra g$x$6747$Up9ra))
                     (map g$library-desc$6746$Up9ra
                          (g$library-vis*$6644$Up9ra g$x$6747$Up9ra))
                     (map g$library-desc$6746$Up9ra
                          (g$library-inv*$6645$Up9ra g$x$6747$Up9ra))
                     (g$library-subst$6646$Up9ra g$x$6747$Up9ra)
                     (g$library-env$6647$Up9ra g$x$6747$Up9ra)
                     (g$compile$6745$Up9ra
                       (g$library-visit-code$6650$Up9ra g$x$6747$Up9ra))
                     (g$compile$6745$Up9ra
                       (g$library-invoke-code$6651$Up9ra g$x$6747$Up9ra))
                     (g$library-visible?$6652$Up9ra g$x$6747$Up9ra)))
                 (void))))
            ((g$current-library-collection$6634$Up9ra)))))))
   (g$current-precompiled-library-loader$6676$Up9ra
     g$current-precompiled-library-loader$6880$Up9ra
     (g$make-parameter$6346$Up9ra
       (case-lambda ((g$filename$6749$Up9ra g$sk$6750$Up9ra) '#f))))
   (g$try-load-from-file$6677$Up9ra
     g$try-load-from-file$6881$Up9ra
     (case-lambda
       ((g$filename$6751$Up9ra)
        ((g$current-precompiled-library-loader$6676$Up9ra)
         g$filename$6751$Up9ra
         (case-lambda
           ((g$id$6752$Up9ra
              g$name$6753$Up9ra
              g$ver$6754$Up9ra
              g$imp*$6755$Up9ra
              g$vis*$6756$Up9ra
              g$inv*$6757$Up9ra
              g$exp-subst$6758$Up9ra
              g$exp-env$6759$Up9ra
              g$visit-proc$6760$Up9ra
              g$invoke-proc$6761$Up9ra
              g$visible?$6762$Up9ra)
            ((letrec ((g$f$6763$Up9ra
                        (case-lambda
                          ((g$deps$6764$Up9ra)
                           (if (null? g$deps$6764$Up9ra)
                             (begin
                               (g$install-library$6687$Up9ra
                                 g$id$6752$Up9ra
                                 g$name$6753$Up9ra
                                 g$ver$6754$Up9ra
                                 g$imp*$6755$Up9ra
                                 g$vis*$6756$Up9ra
                                 g$inv*$6757$Up9ra
                                 g$exp-subst$6758$Up9ra
                                 g$exp-env$6759$Up9ra
                                 g$visit-proc$6760$Up9ra
                                 g$invoke-proc$6761$Up9ra
                                 '#f
                                 '#f
                                 g$visible?$6762$Up9ra
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$6765$Up9ra)
                                 ((case-lambda
                                    ((g$label$6766$Up9ra g$dname$6767$Up9ra)
                                     ((case-lambda
                                        ((g$l$6768$Up9ra)
                                         (if (if (g$library?$6638$Up9ra
                                                   g$l$6768$Up9ra)
                                               (begin
                                                 '#f
                                                 (eq? g$label$6766$Up9ra
                                                      (g$library-id$6640$Up9ra
                                                        g$l$6768$Up9ra)))
                                               '#f)
                                           (g$f$6763$Up9ra
                                             (cdr g$deps$6764$Up9ra))
                                           (begin
                                             (g$fprintf$6261$Up9ra
                                               (current-error-port)
                                               '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from \\
                           source.
"
                                               g$name$6753$Up9ra
                                               g$dname$6767$Up9ra
                                               g$filename$6751$Up9ra)
                                             '#f))))
                                      (g$find-library-by-name$6682$Up9ra
                                        g$dname$6767$Up9ra))))
                                  (car g$d$6765$Up9ra)
                                  (g$cadr$4896$Up9ra g$d$6765$Up9ra))))
                              (car g$deps$6764$Up9ra)))))))
               g$f$6763$Up9ra)
             (append g$imp*$6755$Up9ra g$vis*$6756$Up9ra g$inv*$6757$Up9ra)))
           (g$others$6769$Up9ra '#f))))))
   (g$library-loader$6678$Up9ra
     g$library-loader$6882$Up9ra
     (g$make-parameter$6346$Up9ra
       (case-lambda
         ((g$x$6770$Up9ra)
          ((case-lambda
             ((g$file-name$6771$Up9ra)
              (if (not g$file-name$6771$Up9ra)
                (assertion-violation '#f '"cannot file library" g$x$6770$Up9ra)
                ((case-lambda
                   ((g$t$6772$Up9ra)
                    (if g$t$6772$Up9ra
                      g$t$6772$Up9ra
                      (begin
                        '#f
                        ((g$current-library-expander$6679$Up9ra)
                         (g$read-library-source-file$6345$Up9ra
                           g$file-name$6771$Up9ra)
                         g$file-name$6771$Up9ra
                         (case-lambda
                           ((g$name$6773$Up9ra)
                            (if (equal? g$name$6773$Up9ra g$x$6770$Up9ra)
                              (void)
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (() (g$open-string-output-port$6095$Up9ra)))
                                  (case-lambda
                                    ((g$p$6776$Up9ra g$e$6777$Up9ra)
                                     ((case-lambda
                                        ((g$e$6778$Up9ra g$p$6779$Up9ra)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$6779$Up9ra)
                                           (write g$x$6770$Up9ra g$p$6779$Up9ra)
                                           (display '" in file " g$p$6779$Up9ra)
                                           (display
                                             g$file-name$6771$Up9ra
                                             g$p$6779$Up9ra)
                                           (display '", found " g$p$6779$Up9ra)
                                           (write
                                             g$name$6773$Up9ra
                                             g$p$6779$Up9ra)
                                           (display '" instead" g$p$6779$Up9ra)
                                           (g$e$6778$Up9ra))))
                                      g$e$6777$Up9ra
                                      g$p$6776$Up9ra)))))))))))))
                 (g$try-load-from-file$6677$Up9ra g$file-name$6771$Up9ra)))))
           ((g$file-locator$6674$Up9ra) g$x$6770$Up9ra))))
       (case-lambda
         ((g$f$6780$Up9ra)
          (if (procedure? g$f$6780$Up9ra)
            g$f$6780$Up9ra
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$6780$Up9ra))))))
   (g$current-library-expander$6679$Up9ra
     g$current-library-expander$6883$Up9ra
     (g$make-parameter$6346$Up9ra
       (case-lambda
         ((g$x$6781$Up9ra)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$6782$Up9ra)
          (if (procedure? g$f$6782$Up9ra)
            g$f$6782$Up9ra
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$6782$Up9ra))))))
   (g$external-pending-libraries$6680$Up9ra
     g$external-pending-libraries$6884$Up9ra
     (g$make-parameter$6346$Up9ra '()))
   (g$find-external-library$6681$Up9ra
     g$find-external-library$6885$Up9ra
     (case-lambda
       ((g$name$6783$Up9ra)
        (begin
          (if (g$member$5361$Up9ra
                g$name$6783$Up9ra
                (g$external-pending-libraries$6680$Up9ra))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$6783$Up9ra)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$6786$Up9ra
                g$external-pending-libraries$6787$Up9ra)
              ((case-lambda
                 ((g$swap$6788$Up9ra)
                  (dynamic-wind
                    g$swap$6788$Up9ra
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$6678$Up9ra) g$name$6783$Up9ra)
                         ((case-lambda
                            ((g$t$6789$Up9ra)
                             (if g$t$6789$Up9ra
                               g$t$6789$Up9ra
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$6783$Up9ra)))))
                          (g$find-library-by$6670$Up9ra
                            (case-lambda
                              ((g$x$6790$Up9ra)
                               (equal?
                                 (g$library-name$6641$Up9ra g$x$6790$Up9ra)
                                 g$name$6783$Up9ra))))))))
                    g$swap$6788$Up9ra)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$6791$Up9ra)
                      (begin
                        (g$external-pending-libraries$6786$Up9ra
                          g$external-pending-libraries$6787$Up9ra)
                        (set! g$external-pending-libraries$6787$Up9ra
                          g$t$6791$Up9ra))))
                   (g$external-pending-libraries$6786$Up9ra)))))))
           g$external-pending-libraries$6680$Up9ra
           (cons
             g$name$6783$Up9ra
             (g$external-pending-libraries$6680$Up9ra)))))))
   (g$find-library-by-name$6682$Up9ra
     g$find-library-by-name$6886$Up9ra
     (case-lambda
       ((g$name$6792$Up9ra)
        ((case-lambda
           ((g$t$6793$Up9ra)
            (if g$t$6793$Up9ra
              g$t$6793$Up9ra
              (begin
                '#f
                (g$find-external-library$6681$Up9ra g$name$6792$Up9ra)))))
         (g$find-library-by$6670$Up9ra
           (case-lambda
             ((g$x$6794$Up9ra)
              (equal?
                (g$library-name$6641$Up9ra g$x$6794$Up9ra)
                g$name$6792$Up9ra))))))))
   (g$library-exists?$6683$Up9ra
     g$library-exists?$6887$Up9ra
     (case-lambda
       ((g$name$6795$Up9ra)
        (if (g$find-library-by$6670$Up9ra
              (case-lambda
                ((g$x$6796$Up9ra)
                 (equal?
                   (g$library-name$6641$Up9ra g$x$6796$Up9ra)
                   g$name$6795$Up9ra))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$6684$Up9ra
     g$find-library-by-spec/die$6888$Up9ra
     (case-lambda
       ((g$spec$6797$Up9ra)
        ((case-lambda
           ((g$id$6798$Up9ra)
            ((case-lambda
               ((g$t$6799$Up9ra)
                (if g$t$6799$Up9ra
                  g$t$6799$Up9ra
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$6797$Up9ra)))))
             (g$find-library-by$6670$Up9ra
               (case-lambda
                 ((g$x$6800$Up9ra)
                  (eq? g$id$6798$Up9ra
                       (g$library-id$6640$Up9ra g$x$6800$Up9ra))))))))
         (car g$spec$6797$Up9ra)))))
   (g$label->binding-table$6685$Up9ra
     g$label->binding-table$6889$Up9ra
     (g$make-eq-hashtable$5158$Up9ra))
   (g$install-library-record$6686$Up9ra
     g$install-library-record$6890$Up9ra
     (case-lambda
       ((g$lib$6801$Up9ra)
        (begin
          ((case-lambda
             ((g$exp-env$6802$Up9ra)
              (for-each
                (case-lambda
                  ((g$x$6803$Up9ra)
                   ((case-lambda
                      ((g$label$6804$Up9ra g$binding$6805$Up9ra)
                       ((case-lambda
                          ((g$binding$6806$Up9ra)
                           (g$hashtable-set!$5162$Up9ra
                             g$label->binding-table$6685$Up9ra
                             g$label$6804$Up9ra
                             g$binding$6806$Up9ra)))
                        ((case-lambda
                           ((g$t$6807$Up9ra)
                            (if (eqv? g$t$6807$Up9ra 'global)
                              (cons
                                'global
                                (cons
                                  g$lib$6801$Up9ra
                                  (cdr g$binding$6805$Up9ra)))
                              (if (eqv? g$t$6807$Up9ra 'global-macro)
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$6801$Up9ra
                                    (cdr g$binding$6805$Up9ra)))
                                (if (eqv? g$t$6807$Up9ra 'global-macro!)
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$6801$Up9ra
                                      (cdr g$binding$6805$Up9ra)))
                                  g$binding$6805$Up9ra)))))
                         (car g$binding$6805$Up9ra)))))
                    (car g$x$6803$Up9ra)
                    (cdr g$x$6803$Up9ra))))
                g$exp-env$6802$Up9ra)))
           (g$library-env$6647$Up9ra g$lib$6801$Up9ra))
          ((g$current-library-collection$6634$Up9ra) g$lib$6801$Up9ra)))))
   (g$install-library$6687$Up9ra
     g$install-library$6891$Up9ra
     (case-lambda
       ((g$id$6808$Up9ra
          g$name$6809$Up9ra
          g$ver$6810$Up9ra
          g$imp*$6811$Up9ra
          g$vis*$6812$Up9ra
          g$inv*$6813$Up9ra
          g$exp-subst$6814$Up9ra
          g$exp-env$6815$Up9ra
          g$visit-proc$6816$Up9ra
          g$invoke-proc$6817$Up9ra
          g$visit-code$6818$Up9ra
          g$invoke-code$6819$Up9ra
          g$visible?$6820$Up9ra
          g$source-file-name$6821$Up9ra)
        ((case-lambda
           ((g$imp-lib*$6822$Up9ra g$vis-lib*$6823$Up9ra g$inv-lib*$6824$Up9ra)
            (begin
              (if (if (symbol? g$id$6808$Up9ra)
                    (if (list? g$name$6809$Up9ra)
                      (begin '#f (list? g$ver$6810$Up9ra))
                      '#f)
                    '#f)
                (void)
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$6808$Up9ra
                  g$name$6809$Up9ra
                  g$ver$6810$Up9ra))
              (if (g$library-exists?$6683$Up9ra g$name$6809$Up9ra)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$6809$Up9ra)
                (void))
              ((case-lambda
                 ((g$lib$6825$Up9ra)
                  (g$install-library-record$6686$Up9ra g$lib$6825$Up9ra)))
               (g$make-library$6639$Up9ra
                 g$id$6808$Up9ra
                 g$name$6809$Up9ra
                 g$ver$6810$Up9ra
                 g$imp-lib*$6822$Up9ra
                 g$vis-lib*$6823$Up9ra
                 g$inv-lib*$6824$Up9ra
                 g$exp-subst$6814$Up9ra
                 g$exp-env$6815$Up9ra
                 g$visit-proc$6816$Up9ra
                 g$invoke-proc$6817$Up9ra
                 g$visit-code$6818$Up9ra
                 g$invoke-code$6819$Up9ra
                 g$visible?$6820$Up9ra
                 g$source-file-name$6821$Up9ra)))))
         (map g$find-library-by-spec/die$6684$Up9ra g$imp*$6811$Up9ra)
         (map g$find-library-by-spec/die$6684$Up9ra g$vis*$6812$Up9ra)
         (map g$find-library-by-spec/die$6684$Up9ra g$inv*$6813$Up9ra)))))
   (g$imported-label->binding$6688$Up9ra
     g$imported-label->binding$6892$Up9ra
     (case-lambda
       ((g$lab$6826$Up9ra)
        (g$hashtable-ref$5161$Up9ra
          g$label->binding-table$6685$Up9ra
          g$lab$6826$Up9ra
          '#f))))
   (g$invoke-library$6689$Up9ra
     g$invoke-library$6893$Up9ra
     (case-lambda
       ((g$lib$6827$Up9ra)
        ((case-lambda
           ((g$invoke$6828$Up9ra)
            (if (procedure? g$invoke$6828$Up9ra)
              (begin
                (g$set-library-invoke-state!$6663$Up9ra
                  g$lib$6827$Up9ra
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$6827$Up9ra))))
                (for-each
                  g$invoke-library$6689$Up9ra
                  (g$library-inv*$6645$Up9ra g$lib$6827$Up9ra))
                (g$set-library-invoke-state!$6663$Up9ra
                  g$lib$6827$Up9ra
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$6827$Up9ra))))
                (g$invoke$6828$Up9ra)
                (g$set-library-invoke-state!$6663$Up9ra g$lib$6827$Up9ra '#t))
              (void))))
         (g$library-invoke-state$6649$Up9ra g$lib$6827$Up9ra)))))
   (g$visit-library$6690$Up9ra
     g$visit-library$6894$Up9ra
     (case-lambda
       ((g$lib$6829$Up9ra)
        ((case-lambda
           ((g$visit$6830$Up9ra)
            (if (procedure? g$visit$6830$Up9ra)
              (begin
                (g$set-library-visit-state!$6662$Up9ra
                  g$lib$6829$Up9ra
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$6829$Up9ra))))
                (for-each
                  g$invoke-library$6689$Up9ra
                  (g$library-vis*$6644$Up9ra g$lib$6829$Up9ra))
                (g$set-library-visit-state!$6662$Up9ra
                  g$lib$6829$Up9ra
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$6829$Up9ra))))
                (g$visit$6830$Up9ra)
                (g$set-library-visit-state!$6662$Up9ra g$lib$6829$Up9ra '#t))
              (void))))
         (g$library-visit-state$6648$Up9ra g$lib$6829$Up9ra)))))
   (g$invoke-library-by-spec$6691$Up9ra
     g$invoke-library-by-spec$6895$Up9ra
     (case-lambda
       ((g$spec$6831$Up9ra)
        (g$invoke-library$6689$Up9ra
          (g$find-library-by-spec/die$6684$Up9ra g$spec$6831$Up9ra)))))
   (g$installed-libraries$6692$Up9ra
     g$installed-libraries$6896$Up9ra
     (case-lambda
       ((g$all?$6832$Up9ra)
        ((letrec ((g$f$6833$Up9ra
                    (case-lambda
                      ((g$ls$6834$Up9ra)
                       (if (null? g$ls$6834$Up9ra)
                         '()
                         (if ((case-lambda
                                ((g$t$6835$Up9ra)
                                 (if g$t$6835$Up9ra
                                   g$t$6835$Up9ra
                                   (begin
                                     '#f
                                     (g$library-visible?$6652$Up9ra
                                       (car g$ls$6834$Up9ra))))))
                              g$all?$6832$Up9ra)
                           (cons
                             (car g$ls$6834$Up9ra)
                             (g$f$6833$Up9ra (cdr g$ls$6834$Up9ra)))
                           (g$f$6833$Up9ra (cdr g$ls$6834$Up9ra))))))))
           g$f$6833$Up9ra)
         ((g$current-library-collection$6634$Up9ra))))
       (() (g$installed-libraries$6692$Up9ra '#f))))
   (g$library-spec$6693$Up9ra
     g$library-spec$6897$Up9ra
     (case-lambda
       ((g$x$6836$Up9ra)
        (begin
          (if (g$library?$6638$Up9ra g$x$6836$Up9ra)
            (void)
            (assertion-violation 'library-spec '"not a library" g$x$6836$Up9ra))
          (list
            (g$library-id$6640$Up9ra g$x$6836$Up9ra)
            (g$library-name$6641$Up9ra g$x$6836$Up9ra)
            (g$library-version$6642$Up9ra g$x$6836$Up9ra)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$6898$Up9ra
     g$build-global-define$7008$Up9ra
     (case-lambda ((g$x$6979$Up9ra) (g$build-void$6975$Up9ra))))
   (g$build-lambda$6947$Up9ra
     g$build-lambda$7009$Up9ra
     (case-lambda
       ((g$ae$6980$Up9ra g$vars$6981$Up9ra g$exp$6982$Up9ra)
        (list 'case-lambda (list g$vars$6981$Up9ra g$exp$6982$Up9ra)))))
   (g$build-case-lambda$6948$Up9ra
     g$build-case-lambda$7010$Up9ra
     (case-lambda
       ((g$ae$6983$Up9ra g$vars*$6984$Up9ra g$exp*$6985$Up9ra)
        (cons 'case-lambda (map list g$vars*$6984$Up9ra g$exp*$6985$Up9ra)))))
   (g$build-let$6949$Up9ra
     g$build-let$7011$Up9ra
     (case-lambda
       ((g$ae$6986$Up9ra g$lhs*$6987$Up9ra g$rhs*$6988$Up9ra g$body$6989$Up9ra)
        (cons
          (g$build-lambda$6947$Up9ra
            g$ae$6986$Up9ra
            g$lhs*$6987$Up9ra
            g$body$6989$Up9ra)
          g$rhs*$6988$Up9ra))))
   (g$build-sequence$6974$Up9ra
     g$build-sequence$7012$Up9ra
     (case-lambda
       ((g$ae$6990$Up9ra g$exps$6991$Up9ra)
        ((letrec ((g$loop$6992$Up9ra
                    (case-lambda
                      ((g$exps$6993$Up9ra)
                       (if (null? (cdr g$exps$6993$Up9ra))
                         (car g$exps$6993$Up9ra)
                         (if (equal?
                               (car g$exps$6993$Up9ra)
                               (g$build-void$6975$Up9ra))
                           (g$loop$6992$Up9ra (cdr g$exps$6993$Up9ra))
                           (cons 'begin g$exps$6993$Up9ra)))))))
           g$loop$6992$Up9ra)
         g$exps$6991$Up9ra))))
   (g$build-void$6975$Up9ra
     g$build-void$7013$Up9ra
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$6976$Up9ra
     g$build-letrec$7014$Up9ra
     (case-lambda
       ((g$ae$6994$Up9ra
          g$vars$6995$Up9ra
          g$val-exps$6996$Up9ra
          g$body-exp$6997$Up9ra)
        (if (null? g$vars$6995$Up9ra)
          g$body-exp$6997$Up9ra
          (list
            'letrec
            (map list g$vars$6995$Up9ra g$val-exps$6996$Up9ra)
            g$body-exp$6997$Up9ra)))))
   (g$build-letrec*$6977$Up9ra
     g$build-letrec*$7015$Up9ra
     (case-lambda
       ((g$ae$6998$Up9ra
          g$vars$6999$Up9ra
          g$val-exps$7000$Up9ra
          g$body-exp$7001$Up9ra)
        (if (null? g$vars$6999$Up9ra)
          g$body-exp$7001$Up9ra
          (list
            'letrec*
            (map list g$vars$6999$Up9ra g$val-exps$7000$Up9ra)
            g$body-exp$7001$Up9ra)))))
   (g$build-library-letrec*$6978$Up9ra
     g$build-library-letrec*$7016$Up9ra
     (case-lambda
       ((g$ae$7002$Up9ra
          g$name$7003$Up9ra
          g$vars$7004$Up9ra
          g$locs$7005$Up9ra
          g$val-exps$7006$Up9ra
          g$body-exp$7007$Up9ra)
        (list
          'library-letrec*
          g$name$7003$Up9ra
          (map list g$vars$7004$Up9ra g$locs$7005$Up9ra g$val-exps$7006$Up9ra)
          g$body-exp$7007$Up9ra)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$7017$Up9ra
     g$set-cons$10660$Up9ra
     (case-lambda
       ((g$x$7470$Up9ra g$ls$7471$Up9ra)
        (if (memq g$x$7470$Up9ra g$ls$7471$Up9ra)
          g$ls$7471$Up9ra
          (cons g$x$7470$Up9ra g$ls$7471$Up9ra)))))
   (g$set-union$7018$Up9ra
     g$set-union$10661$Up9ra
     (case-lambda
       ((g$ls1$7472$Up9ra g$ls2$7473$Up9ra)
        (if (null? g$ls1$7472$Up9ra)
          g$ls2$7473$Up9ra
          (if (memq (car g$ls1$7472$Up9ra) g$ls2$7473$Up9ra)
            (g$set-union$7018$Up9ra (cdr g$ls1$7472$Up9ra) g$ls2$7473$Up9ra)
            (cons
              (car g$ls1$7472$Up9ra)
              (g$set-union$7018$Up9ra
                (cdr g$ls1$7472$Up9ra)
                g$ls2$7473$Up9ra)))))))
   (g$top-mark*$7020$Up9ra g$top-mark*$10662$Up9ra '(top))
   (g$top-marked?$7021$Up9ra
     g$top-marked?$10663$Up9ra
     (case-lambda ((g$m*$7474$Up9ra) (memq 'top g$m*$7474$Up9ra))))
   (g$gen-lexical$7022$Up9ra
     g$gen-lexical$10664$Up9ra
     (case-lambda
       ((g$sym$7475$Up9ra)
        (if (symbol? g$sym$7475$Up9ra)
          (gensym g$sym$7475$Up9ra)
          (if (g$stx?$7050$Up9ra g$sym$7475$Up9ra)
            (g$gen-lexical$7022$Up9ra (g$id->sym$7079$Up9ra g$sym$7475$Up9ra))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$7475$Up9ra))))))
   (g$gen-global$7023$Up9ra
     g$gen-global$10665$Up9ra
     (case-lambda
       ((g$x$7476$Up9ra) (g$gen-lexical$7022$Up9ra g$x$7476$Up9ra))))
   (g$gen-label$7024$Up9ra
     g$gen-label$10666$Up9ra
     (case-lambda ((g$_$7477$Up9ra) (gensym))))
   (g$gen-top-level-label$7025$Up9ra
     g$gen-top-level-label$10667$Up9ra
     (case-lambda
       ((g$id$7478$Up9ra g$rib$7479$Up9ra)
        (letrec* ((g$find$7480$Up9ra
                    (case-lambda
                      ((g$sym$7486$Up9ra
                         g$mark*$7487$Up9ra
                         g$sym*$7488$Up9ra
                         g$mark**$7489$Up9ra
                         g$label*$7490$Up9ra)
                       (if (pair? g$sym*$7488$Up9ra)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7486$Up9ra
                                        (car g$sym*$7488$Up9ra))
                                 (begin
                                   '#f
                                   (g$same-marks?$7080$Up9ra
                                     g$mark*$7487$Up9ra
                                     (car g$mark**$7489$Up9ra)))
                                 '#f)
                             (car g$label*$7490$Up9ra)
                             (g$find$7480$Up9ra
                               g$sym$7486$Up9ra
                               g$mark*$7487$Up9ra
                               (cdr g$sym*$7488$Up9ra)
                               (cdr g$mark**$7489$Up9ra)
                               (cdr g$label*$7490$Up9ra))))
                         '#f)))))
          ((case-lambda
             ((g$sym$7481$Up9ra g$mark*$7482$Up9ra)
              ((case-lambda
                 ((g$sym*$7483$Up9ra)
                  ((case-lambda
                     ((g$t$7484$Up9ra)
                      (if g$t$7484$Up9ra
                        ((case-lambda
                           ((g$label$7485$Up9ra)
                            (if (g$imported-label->binding$6892$Up9ra
                                  g$label$7485$Up9ra)
                              (gensym)
                              g$label$7485$Up9ra)))
                         g$t$7484$Up9ra)
                        (gensym))))
                   (if (memq
                         g$sym$7481$Up9ra
                         (g$rib-sym*$7033$Up9ra g$rib$7479$Up9ra))
                     (begin
                       '#f
                       (g$find$7480$Up9ra
                         g$sym$7481$Up9ra
                         g$mark*$7482$Up9ra
                         g$sym*$7483$Up9ra
                         (g$rib-mark**$7034$Up9ra g$rib$7479$Up9ra)
                         (g$rib-label*$7035$Up9ra g$rib$7479$Up9ra)))
                     '#f))))
               (g$rib-sym*$7033$Up9ra g$rib$7479$Up9ra))))
           (g$id->sym$7079$Up9ra g$id$7478$Up9ra)
           (g$stx-mark*$7053$Up9ra g$id$7478$Up9ra))))))
   (g$gen-define-label+loc$7026$Up9ra
     g$gen-define-label+loc$10668$Up9ra
     (case-lambda
       ((g$id$7491$Up9ra g$rib$7492$Up9ra)
        ((case-lambda
           ((g$t$7493$Up9ra)
            (if g$t$7493$Up9ra
              ((case-lambda
                 ((g$env$7494$Up9ra)
                  ((case-lambda
                     ((g$label$7495$Up9ra g$locs$7496$Up9ra)
                      (values
                        g$label$7495$Up9ra
                        ((case-lambda
                           ((g$t$7497$Up9ra)
                            (if g$t$7497$Up9ra
                              (cdr g$t$7497$Up9ra)
                              ((case-lambda
                                 ((g$loc$7498$Up9ra)
                                  (begin
                                    (g$set-interaction-env-locs!$7439$Up9ra
                                      g$env$7494$Up9ra
                                      (cons
                                        (cons
                                          g$label$7495$Up9ra
                                          g$loc$7498$Up9ra)
                                        g$locs$7496$Up9ra))
                                    g$loc$7498$Up9ra)))
                               (g$gen-lexical$7022$Up9ra g$id$7491$Up9ra)))))
                         (assq g$label$7495$Up9ra g$locs$7496$Up9ra)))))
                   (g$gen-top-level-label$7025$Up9ra
                     g$id$7491$Up9ra
                     g$rib$7492$Up9ra)
                   (g$interaction-env-locs$7436$Up9ra g$env$7494$Up9ra))))
               g$t$7493$Up9ra)
              (values (gensym) (g$gen-lexical$7022$Up9ra g$id$7491$Up9ra)))))
         (g$top-level-context$7469$Up9ra)))))
   (g$gen-define-label$7027$Up9ra
     g$gen-define-label$10669$Up9ra
     (case-lambda
       ((g$id$7499$Up9ra g$rib$7500$Up9ra)
        (if (g$top-level-context$7469$Up9ra)
          (g$gen-top-level-label$7025$Up9ra g$id$7499$Up9ra g$rib$7500$Up9ra)
          (gensym)))))
   (g$7878$7028$Up9ra
     g$7878$10670$Up9ra
     (make-record-type-descriptor
       'rib
       '#f
       'g$7881$Up9ra
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq))))
   (g$7880$7029$Up9ra g$7880$10671$Up9ra '#f)
   (g$7879$7030$Up9ra
     g$7879$10672$Up9ra
     (make-record-constructor-descriptor
       g$7878$7028$Up9ra
       '#f
       g$7880$7029$Up9ra))
   (g$rib?$7031$Up9ra
     g$rib?$10673$Up9ra
     (record-predicate g$7878$7028$Up9ra))
   (g$make-rib$7032$Up9ra
     g$make-rib$10674$Up9ra
     (record-constructor g$7879$7030$Up9ra))
   (g$rib-sym*$7033$Up9ra
     g$rib-sym*$10675$Up9ra
     (record-accessor g$7878$7028$Up9ra '0))
   (g$rib-mark**$7034$Up9ra
     g$rib-mark**$10676$Up9ra
     (record-accessor g$7878$7028$Up9ra '1))
   (g$rib-label*$7035$Up9ra
     g$rib-label*$10677$Up9ra
     (record-accessor g$7878$7028$Up9ra '2))
   (g$rib-sealed/freq$7036$Up9ra
     g$rib-sealed/freq$10678$Up9ra
     (record-accessor g$7878$7028$Up9ra '3))
   (g$set-rib-sym*!$7037$Up9ra
     g$set-rib-sym*!$10679$Up9ra
     (record-mutator g$7878$7028$Up9ra '0))
   (g$set-rib-mark**!$7038$Up9ra
     g$set-rib-mark**!$10680$Up9ra
     (record-mutator g$7878$7028$Up9ra '1))
   (g$set-rib-label*!$7039$Up9ra
     g$set-rib-label*!$10681$Up9ra
     (record-mutator g$7878$7028$Up9ra '2))
   (g$set-rib-sealed/freq!$7040$Up9ra
     g$set-rib-sealed/freq!$10682$Up9ra
     (record-mutator g$7878$7028$Up9ra '3))
   (g$make-empty-rib$7041$Up9ra
     g$make-empty-rib$10683$Up9ra
     (case-lambda (() (g$make-rib$7032$Up9ra '() '() '() '#f))))
   (g$extend-rib!$7042$Up9ra
     g$extend-rib!$10684$Up9ra
     (case-lambda
       ((g$rib$7501$Up9ra g$id$7502$Up9ra g$label$7503$Up9ra)
        (letrec* ((g$find$7504$Up9ra
                    (case-lambda
                      ((g$sym$7510$Up9ra
                         g$mark*$7511$Up9ra
                         g$sym*$7512$Up9ra
                         g$mark**$7513$Up9ra
                         g$label*$7514$Up9ra)
                       (if (pair? g$sym*$7512$Up9ra)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7510$Up9ra
                                        (car g$sym*$7512$Up9ra))
                                 (begin
                                   '#f
                                   (g$same-marks?$7080$Up9ra
                                     g$mark*$7511$Up9ra
                                     (car g$mark**$7513$Up9ra)))
                                 '#f)
                             g$label*$7514$Up9ra
                             (g$find$7504$Up9ra
                               g$sym$7510$Up9ra
                               g$mark*$7511$Up9ra
                               (cdr g$sym*$7512$Up9ra)
                               (cdr g$mark**$7513$Up9ra)
                               (cdr g$label*$7514$Up9ra))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$7036$Up9ra g$rib$7501$Up9ra)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$7501$Up9ra)
              (void))
            ((case-lambda
               ((g$sym$7505$Up9ra g$mark*$7506$Up9ra)
                ((case-lambda
                   ((g$sym*$7507$Up9ra)
                    ((case-lambda
                       ((g$t$7508$Up9ra)
                        (if g$t$7508$Up9ra
                          ((case-lambda
                             ((g$p$7509$Up9ra)
                              (if (eq? g$label$7503$Up9ra (car g$p$7509$Up9ra))
                                (void)
                                (if (g$top-level-context$7469$Up9ra)
                                  (set-car! g$p$7509$Up9ra g$label$7503$Up9ra)
                                  (g$syntax-violation$7462$Up9ra
                                    '#f
                                    '"cannot redefine"
                                    g$id$7502$Up9ra)))))
                           g$t$7508$Up9ra)
                          (begin
                            (g$set-rib-sym*!$7037$Up9ra
                              g$rib$7501$Up9ra
                              (cons g$sym$7505$Up9ra g$sym*$7507$Up9ra))
                            (g$set-rib-mark**!$7038$Up9ra
                              g$rib$7501$Up9ra
                              (cons
                                g$mark*$7506$Up9ra
                                (g$rib-mark**$7034$Up9ra g$rib$7501$Up9ra)))
                            (g$set-rib-label*!$7039$Up9ra
                              g$rib$7501$Up9ra
                              (cons
                                g$label$7503$Up9ra
                                (g$rib-label*$7035$Up9ra g$rib$7501$Up9ra)))))))
                     (if (memq
                           g$sym$7505$Up9ra
                           (g$rib-sym*$7033$Up9ra g$rib$7501$Up9ra))
                       (begin
                         '#f
                         (g$find$7504$Up9ra
                           g$sym$7505$Up9ra
                           g$mark*$7506$Up9ra
                           g$sym*$7507$Up9ra
                           (g$rib-mark**$7034$Up9ra g$rib$7501$Up9ra)
                           (g$rib-label*$7035$Up9ra g$rib$7501$Up9ra)))
                       '#f))))
                 (g$rib-sym*$7033$Up9ra g$rib$7501$Up9ra))))
             (g$id->sym$7079$Up9ra g$id$7502$Up9ra)
             (g$stx-mark*$7053$Up9ra g$id$7502$Up9ra)))))))
   (g$make-rib-map$7043$Up9ra
     g$make-rib-map$10685$Up9ra
     (case-lambda
       ((g$sym*$7515$Up9ra)
        ((case-lambda
           ((g$ht$7516$Up9ra)
            ((letrec ((g$f$7517$Up9ra
                        (case-lambda
                          ((g$i$7518$Up9ra g$sym*$7519$Up9ra)
                           (if (null? g$sym*$7519$Up9ra)
                             g$ht$7516$Up9ra
                             (begin
                               (g$hashtable-update!$5165$Up9ra
                                 g$ht$7516$Up9ra
                                 (car g$sym*$7519$Up9ra)
                                 (case-lambda
                                   ((g$x$7520$Up9ra)
                                    (cons g$i$7518$Up9ra g$x$7520$Up9ra)))
                                 '())
                               (g$f$7517$Up9ra
                                 (+ g$i$7518$Up9ra '1)
                                 (cdr g$sym*$7519$Up9ra))))))))
               g$f$7517$Up9ra)
             '0
             g$sym*$7515$Up9ra)))
         (g$make-eq-hashtable$5158$Up9ra)))))
   (g$seal-rib!$7044$Up9ra
     g$seal-rib!$10686$Up9ra
     (case-lambda
       ((g$rib$7521$Up9ra)
        ((case-lambda
           ((g$sym*$7522$Up9ra)
            (if (null? g$sym*$7522$Up9ra)
              (void)
              (begin
                (g$set-rib-sym*!$7037$Up9ra
                  g$rib$7521$Up9ra
                  (list->vector g$sym*$7522$Up9ra))
                (g$set-rib-mark**!$7038$Up9ra
                  g$rib$7521$Up9ra
                  (list->vector (g$rib-mark**$7034$Up9ra g$rib$7521$Up9ra)))
                (g$set-rib-label*!$7039$Up9ra
                  g$rib$7521$Up9ra
                  (list->vector (g$rib-label*$7035$Up9ra g$rib$7521$Up9ra)))
                (g$set-rib-sealed/freq!$7040$Up9ra
                  g$rib$7521$Up9ra
                  (g$make-rib-map$7043$Up9ra g$sym*$7522$Up9ra))))))
         (g$rib-sym*$7033$Up9ra g$rib$7521$Up9ra)))))
   (g$unseal-rib!$7045$Up9ra
     g$unseal-rib!$10687$Up9ra
     (case-lambda
       ((g$rib$7523$Up9ra)
        (if (g$rib-sealed/freq$7036$Up9ra g$rib$7523$Up9ra)
          (begin
            (g$set-rib-sealed/freq!$7040$Up9ra g$rib$7523$Up9ra '#f)
            (g$set-rib-sym*!$7037$Up9ra
              g$rib$7523$Up9ra
              (vector->list (g$rib-sym*$7033$Up9ra g$rib$7523$Up9ra)))
            (g$set-rib-mark**!$7038$Up9ra
              g$rib$7523$Up9ra
              (vector->list (g$rib-mark**$7034$Up9ra g$rib$7523$Up9ra)))
            (g$set-rib-label*!$7039$Up9ra
              g$rib$7523$Up9ra
              (vector->list (g$rib-label*$7035$Up9ra g$rib$7523$Up9ra))))
          (void)))))
   (g$make-full-rib$7046$Up9ra
     g$make-full-rib$10688$Up9ra
     (case-lambda
       ((g$id*$7524$Up9ra g$label*$7525$Up9ra)
        ((case-lambda
           ((g$r$7526$Up9ra)
            (begin (g$seal-rib!$7044$Up9ra g$r$7526$Up9ra) g$r$7526$Up9ra)))
         (g$make-rib$7032$Up9ra
           (map g$id->sym$7079$Up9ra g$id*$7524$Up9ra)
           (map g$stx-mark*$7053$Up9ra g$id*$7524$Up9ra)
           g$label*$7525$Up9ra
           '#f)))))
   (g$7904$7047$Up9ra
     g$7904$10689$Up9ra
     (make-record-type-descriptor
       'stx
       '#f
       'g$7907$Up9ra
       '#t
       '#t
       '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*))))
   (g$7906$7048$Up9ra g$7906$10690$Up9ra '#f)
   (g$7905$7049$Up9ra
     g$7905$10691$Up9ra
     (make-record-constructor-descriptor
       g$7904$7047$Up9ra
       '#f
       g$7906$7048$Up9ra))
   (g$stx?$7050$Up9ra
     g$stx?$10692$Up9ra
     (record-predicate g$7904$7047$Up9ra))
   (g$make-stx$7051$Up9ra
     g$make-stx$10693$Up9ra
     (record-constructor g$7905$7049$Up9ra))
   (g$stx-expr$7052$Up9ra
     g$stx-expr$10694$Up9ra
     (record-accessor g$7904$7047$Up9ra '0))
   (g$stx-mark*$7053$Up9ra
     g$stx-mark*$10695$Up9ra
     (record-accessor g$7904$7047$Up9ra '1))
   (g$stx-subst*$7054$Up9ra
     g$stx-subst*$10696$Up9ra
     (record-accessor g$7904$7047$Up9ra '2))
   (g$stx-ae*$7055$Up9ra
     g$stx-ae*$10697$Up9ra
     (record-accessor g$7904$7047$Up9ra '3))
   (g$set-stx-expr!$7056$Up9ra
     g$set-stx-expr!$10698$Up9ra
     (record-mutator g$7904$7047$Up9ra '0))
   (g$set-stx-mark*!$7057$Up9ra
     g$set-stx-mark*!$10699$Up9ra
     (record-mutator g$7904$7047$Up9ra '1))
   (g$set-stx-subst*!$7058$Up9ra
     g$set-stx-subst*!$10700$Up9ra
     (record-mutator g$7904$7047$Up9ra '2))
   (g$set-stx-ae*!$7059$Up9ra
     g$set-stx-ae*!$10701$Up9ra
     (record-mutator g$7904$7047$Up9ra '3))
   (g$rp$7060$Up9ra
     g$rp$10702$Up9ra
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$7527$Up9ra g$p$7528$Up9ra)
          (begin
            (display '"#<syntax " g$p$7528$Up9ra)
            (write (g$stx->datum$7089$Up9ra g$x$7527$Up9ra) g$p$7528$Up9ra)
            ((case-lambda
               ((g$expr$7529$Up9ra)
                (if (annotation? g$expr$7529$Up9ra)
                  ((case-lambda
                     ((g$src$7530$Up9ra)
                      (if (pair? g$src$7530$Up9ra)
                        (begin
                          (display '" [" g$p$7528$Up9ra)
                          (display (cdr g$src$7530$Up9ra) g$p$7528$Up9ra)
                          (display '" of " g$p$7528$Up9ra)
                          (display (car g$src$7530$Up9ra) g$p$7528$Up9ra)
                          (display '"]" g$p$7528$Up9ra))
                        (void))))
                   (annotation-source g$expr$7529$Up9ra))
                  (void))))
             (g$stx-expr$7052$Up9ra g$x$7527$Up9ra))
            (display '">" g$p$7528$Up9ra))))))
   (g$datum->stx$7061$Up9ra
     g$datum->stx$10703$Up9ra
     (case-lambda
       ((g$id$7531$Up9ra g$datum$7532$Up9ra)
        (g$make-stx$7051$Up9ra
          g$datum$7532$Up9ra
          (g$stx-mark*$7053$Up9ra g$id$7531$Up9ra)
          (g$stx-subst*$7054$Up9ra g$id$7531$Up9ra)
          (g$stx-ae*$7055$Up9ra g$id$7531$Up9ra)))))
   (g$gen-mark$7062$Up9ra
     g$gen-mark$10704$Up9ra
     (case-lambda (() (string '#\m))))
   (g$anti-mark$7063$Up9ra g$anti-mark$10705$Up9ra '#f)
   (g$anti-mark?$7064$Up9ra g$anti-mark?$10706$Up9ra not)
   (g$join-wraps$7065$Up9ra
     g$join-wraps$10707$Up9ra
     (case-lambda
       ((g$m1*$7533$Up9ra g$s1*$7534$Up9ra g$ae1*$7535$Up9ra g$e$7536$Up9ra)
        (letrec* ((g$cancel$7537$Up9ra
                    (case-lambda
                      ((g$ls1$7541$Up9ra g$ls2$7542$Up9ra)
                       ((letrec ((g$f$7543$Up9ra
                                   (case-lambda
                                     ((g$x$7544$Up9ra g$ls1$7545$Up9ra)
                                      (if (null? g$ls1$7545$Up9ra)
                                        (cdr g$ls2$7542$Up9ra)
                                        (cons
                                          g$x$7544$Up9ra
                                          (g$f$7543$Up9ra
                                            (car g$ls1$7545$Up9ra)
                                            (cdr g$ls1$7545$Up9ra))))))))
                          g$f$7543$Up9ra)
                        (car g$ls1$7541$Up9ra)
                        (cdr g$ls1$7541$Up9ra))))))
          ((case-lambda
             ((g$m2*$7538$Up9ra g$s2*$7539$Up9ra g$ae2*$7540$Up9ra)
              (if (if (not (null? g$m1*$7533$Up9ra))
                    (if (not (null? g$m2*$7538$Up9ra))
                      (begin
                        '#f
                        (g$anti-mark?$7064$Up9ra (car g$m2*$7538$Up9ra)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$7537$Up9ra g$m1*$7533$Up9ra g$m2*$7538$Up9ra)
                  (g$cancel$7537$Up9ra g$s1*$7534$Up9ra g$s2*$7539$Up9ra)
                  (g$cancel$7537$Up9ra g$ae1*$7535$Up9ra g$ae2*$7540$Up9ra))
                (values
                  (append g$m1*$7533$Up9ra g$m2*$7538$Up9ra)
                  (append g$s1*$7534$Up9ra g$s2*$7539$Up9ra)
                  (append g$ae1*$7535$Up9ra g$ae2*$7540$Up9ra)))))
           (g$stx-mark*$7053$Up9ra g$e$7536$Up9ra)
           (g$stx-subst*$7054$Up9ra g$e$7536$Up9ra)
           (g$stx-ae*$7055$Up9ra g$e$7536$Up9ra))))))
   (g$mkstx$7066$Up9ra
     g$mkstx$10708$Up9ra
     (case-lambda
       ((g$e$7546$Up9ra g$m*$7547$Up9ra g$s*$7548$Up9ra g$ae*$7549$Up9ra)
        (if (g$stx?$7050$Up9ra g$e$7546$Up9ra)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$7065$Up9ra
                 g$m*$7547$Up9ra
                 g$s*$7548$Up9ra
                 g$ae*$7549$Up9ra
                 g$e$7546$Up9ra)))
            (case-lambda
              ((g$m*$7553$Up9ra g$s*$7554$Up9ra g$ae*$7555$Up9ra)
               ((case-lambda
                  ((g$ae*$7556$Up9ra g$s*$7557$Up9ra g$m*$7558$Up9ra)
                   (g$make-stx$7051$Up9ra
                     (g$stx-expr$7052$Up9ra g$e$7546$Up9ra)
                     g$m*$7558$Up9ra
                     g$s*$7557$Up9ra
                     g$ae*$7556$Up9ra)))
                g$ae*$7555$Up9ra
                g$s*$7554$Up9ra
                g$m*$7553$Up9ra))))
          (g$make-stx$7051$Up9ra
            g$e$7546$Up9ra
            g$m*$7547$Up9ra
            g$s*$7548$Up9ra
            g$ae*$7549$Up9ra)))))
   (g$add-mark$7067$Up9ra
     g$add-mark$10709$Up9ra
     (case-lambda
       ((g$m$7559$Up9ra g$e$7560$Up9ra g$ae$7561$Up9ra)
        (g$mkstx$7066$Up9ra
          g$e$7560$Up9ra
          (list g$m$7559$Up9ra)
          '(shift)
          (list g$ae$7561$Up9ra)))))
   (g$add-subst$7068$Up9ra
     g$add-subst$10710$Up9ra
     (case-lambda
       ((g$subst$7562$Up9ra g$e$7563$Up9ra)
        (g$mkstx$7066$Up9ra g$e$7563$Up9ra '() (list g$subst$7562$Up9ra) '()))))
   (g$syntax-kind?$7069$Up9ra
     g$syntax-kind?$10711$Up9ra
     (case-lambda
       ((g$x$7564$Up9ra g$p?$7565$Up9ra)
        (if (g$stx?$7050$Up9ra g$x$7564$Up9ra)
          (g$syntax-kind?$7069$Up9ra
            (g$stx-expr$7052$Up9ra g$x$7564$Up9ra)
            g$p?$7565$Up9ra)
          (if (annotation? g$x$7564$Up9ra)
            (g$syntax-kind?$7069$Up9ra
              (annotation-expression g$x$7564$Up9ra)
              g$p?$7565$Up9ra)
            (g$p?$7565$Up9ra g$x$7564$Up9ra))))))
   (g$syntax-vector->list$7070$Up9ra
     g$syntax-vector->list$10712$Up9ra
     (case-lambda
       ((g$x$7566$Up9ra)
        (if (g$stx?$7050$Up9ra g$x$7566$Up9ra)
          ((case-lambda
             ((g$ls$7567$Up9ra g$m*$7568$Up9ra g$s*$7569$Up9ra g$ae*$7570$Up9ra)
              (map (case-lambda
                     ((g$x$7571$Up9ra)
                      (g$mkstx$7066$Up9ra
                        g$x$7571$Up9ra
                        g$m*$7568$Up9ra
                        g$s*$7569$Up9ra
                        g$ae*$7570$Up9ra)))
                   g$ls$7567$Up9ra)))
           (g$syntax-vector->list$7070$Up9ra
             (g$stx-expr$7052$Up9ra g$x$7566$Up9ra))
           (g$stx-mark*$7053$Up9ra g$x$7566$Up9ra)
           (g$stx-subst*$7054$Up9ra g$x$7566$Up9ra)
           (g$stx-ae*$7055$Up9ra g$x$7566$Up9ra))
          (if (annotation? g$x$7566$Up9ra)
            (g$syntax-vector->list$7070$Up9ra
              (annotation-expression g$x$7566$Up9ra))
            (if (vector? g$x$7566$Up9ra)
              (vector->list g$x$7566$Up9ra)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$7566$Up9ra)))))))
   (g$syntax-pair?$7071$Up9ra
     g$syntax-pair?$10713$Up9ra
     (case-lambda
       ((g$x$7572$Up9ra) (g$syntax-kind?$7069$Up9ra g$x$7572$Up9ra pair?))))
   (g$syntax-vector?$7072$Up9ra
     g$syntax-vector?$10714$Up9ra
     (case-lambda
       ((g$x$7573$Up9ra) (g$syntax-kind?$7069$Up9ra g$x$7573$Up9ra vector?))))
   (g$syntax-null?$7073$Up9ra
     g$syntax-null?$10715$Up9ra
     (case-lambda
       ((g$x$7574$Up9ra) (g$syntax-kind?$7069$Up9ra g$x$7574$Up9ra null?))))
   (g$syntax-list?$7074$Up9ra
     g$syntax-list?$10716$Up9ra
     (case-lambda
       ((g$x$7575$Up9ra)
        ((case-lambda
           ((g$t$7576$Up9ra)
            (if g$t$7576$Up9ra
              g$t$7576$Up9ra
              (begin
                '#f
                (if (g$syntax-pair?$7071$Up9ra g$x$7575$Up9ra)
                  (begin
                    '#f
                    (g$syntax-list?$7074$Up9ra
                      (g$syntax-cdr$7076$Up9ra g$x$7575$Up9ra)))
                  '#f)))))
         (g$syntax-null?$7073$Up9ra g$x$7575$Up9ra)))))
   (g$syntax-car$7075$Up9ra
     g$syntax-car$10717$Up9ra
     (case-lambda
       ((g$x$7577$Up9ra)
        (if (g$stx?$7050$Up9ra g$x$7577$Up9ra)
          (g$mkstx$7066$Up9ra
            (g$syntax-car$7075$Up9ra (g$stx-expr$7052$Up9ra g$x$7577$Up9ra))
            (g$stx-mark*$7053$Up9ra g$x$7577$Up9ra)
            (g$stx-subst*$7054$Up9ra g$x$7577$Up9ra)
            (g$stx-ae*$7055$Up9ra g$x$7577$Up9ra))
          (if (annotation? g$x$7577$Up9ra)
            (g$syntax-car$7075$Up9ra (annotation-expression g$x$7577$Up9ra))
            (if (pair? g$x$7577$Up9ra)
              (car g$x$7577$Up9ra)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$7577$Up9ra)))))))
   (g$syntax-cdr$7076$Up9ra
     g$syntax-cdr$10718$Up9ra
     (case-lambda
       ((g$x$7578$Up9ra)
        (if (g$stx?$7050$Up9ra g$x$7578$Up9ra)
          (g$mkstx$7066$Up9ra
            (g$syntax-cdr$7076$Up9ra (g$stx-expr$7052$Up9ra g$x$7578$Up9ra))
            (g$stx-mark*$7053$Up9ra g$x$7578$Up9ra)
            (g$stx-subst*$7054$Up9ra g$x$7578$Up9ra)
            (g$stx-ae*$7055$Up9ra g$x$7578$Up9ra))
          (if (annotation? g$x$7578$Up9ra)
            (g$syntax-cdr$7076$Up9ra (annotation-expression g$x$7578$Up9ra))
            (if (pair? g$x$7578$Up9ra)
              (cdr g$x$7578$Up9ra)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$7578$Up9ra)))))))
   (g$syntax->list$7077$Up9ra
     g$syntax->list$10719$Up9ra
     (case-lambda
       ((g$x$7579$Up9ra)
        (if (g$syntax-pair?$7071$Up9ra g$x$7579$Up9ra)
          (cons
            (g$syntax-car$7075$Up9ra g$x$7579$Up9ra)
            (g$syntax->list$7077$Up9ra
              (g$syntax-cdr$7076$Up9ra g$x$7579$Up9ra)))
          (if (g$syntax-null?$7073$Up9ra g$x$7579$Up9ra)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$7579$Up9ra))))))
   (g$id?$7078$Up9ra
     g$id?$10720$Up9ra
     (case-lambda
       ((g$x$7580$Up9ra)
        (if (g$stx?$7050$Up9ra g$x$7580$Up9ra)
          (begin
            '#f
            ((case-lambda
               ((g$expr$7581$Up9ra)
                (symbol?
                  (if (annotation? g$expr$7581$Up9ra)
                    (annotation-stripped g$expr$7581$Up9ra)
                    g$expr$7581$Up9ra))))
             (g$stx-expr$7052$Up9ra g$x$7580$Up9ra)))
          '#f))))
   (g$id->sym$7079$Up9ra
     g$id->sym$10721$Up9ra
     (case-lambda
       ((g$x$7582$Up9ra)
        (begin
          (if (g$stx?$7050$Up9ra g$x$7582$Up9ra)
            (void)
            (error 'id->sym '"BUG in ikarus: not an id" g$x$7582$Up9ra))
          ((case-lambda
             ((g$expr$7583$Up9ra)
              ((case-lambda
                 ((g$sym$7584$Up9ra)
                  (if (symbol? g$sym$7584$Up9ra)
                    g$sym$7584$Up9ra
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$7582$Up9ra))))
               (if (annotation? g$expr$7583$Up9ra)
                 (annotation-stripped g$expr$7583$Up9ra)
                 g$expr$7583$Up9ra))))
           (g$stx-expr$7052$Up9ra g$x$7582$Up9ra))))))
   (g$same-marks?$7080$Up9ra
     g$same-marks?$10722$Up9ra
     (case-lambda
       ((g$x$7585$Up9ra g$y$7586$Up9ra)
        ((case-lambda
           ((g$t$7587$Up9ra)
            (if g$t$7587$Up9ra
              g$t$7587$Up9ra
              (begin
                '#f
                (if (pair? g$x$7585$Up9ra)
                  (if (pair? g$y$7586$Up9ra)
                    (if (eq? (car g$x$7585$Up9ra) (car g$y$7586$Up9ra))
                      (begin
                        '#f
                        (g$same-marks?$7080$Up9ra
                          (cdr g$x$7585$Up9ra)
                          (cdr g$y$7586$Up9ra)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$7585$Up9ra) (begin '#f (null? g$y$7586$Up9ra)) '#f)))))
   (g$bound-id=?$7081$Up9ra
     g$bound-id=?$10723$Up9ra
     (case-lambda
       ((g$x$7588$Up9ra g$y$7589$Up9ra)
        (if (eq? (g$id->sym$7079$Up9ra g$x$7588$Up9ra)
                 (g$id->sym$7079$Up9ra g$y$7589$Up9ra))
          (begin
            '#f
            (g$same-marks?$7080$Up9ra
              (g$stx-mark*$7053$Up9ra g$x$7588$Up9ra)
              (g$stx-mark*$7053$Up9ra g$y$7589$Up9ra)))
          '#f))))
   (g$free-id=?$7082$Up9ra
     g$free-id=?$10724$Up9ra
     (case-lambda
       ((g$i$7590$Up9ra g$j$7591$Up9ra)
        ((case-lambda
           ((g$t0$7592$Up9ra g$t1$7593$Up9ra)
            (if ((case-lambda
                   ((g$t$7594$Up9ra)
                    (if g$t$7594$Up9ra
                      g$t$7594$Up9ra
                      (begin '#f g$t1$7593$Up9ra))))
                 g$t0$7592$Up9ra)
              (eq? g$t0$7592$Up9ra g$t1$7593$Up9ra)
              (eq? (g$id->sym$7079$Up9ra g$i$7590$Up9ra)
                   (g$id->sym$7079$Up9ra g$j$7591$Up9ra)))))
         (g$id->real-label$7092$Up9ra g$i$7590$Up9ra)
         (g$id->real-label$7092$Up9ra g$j$7591$Up9ra)))))
   (g$valid-bound-ids?$7083$Up9ra
     g$valid-bound-ids?$10725$Up9ra
     (case-lambda
       ((g$id*$7595$Up9ra)
        (if (g$for-all$5365$Up9ra g$id?$7078$Up9ra g$id*$7595$Up9ra)
          (begin '#f (g$distinct-bound-ids?$7084$Up9ra g$id*$7595$Up9ra))
          '#f))))
   (g$distinct-bound-ids?$7084$Up9ra
     g$distinct-bound-ids?$10726$Up9ra
     (case-lambda
       ((g$id*$7596$Up9ra)
        ((case-lambda
           ((g$t$7597$Up9ra)
            (if g$t$7597$Up9ra
              g$t$7597$Up9ra
              (begin
                '#f
                (if (not (g$bound-id-member?$7085$Up9ra
                           (car g$id*$7596$Up9ra)
                           (cdr g$id*$7596$Up9ra)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$7084$Up9ra (cdr g$id*$7596$Up9ra)))
                  '#f)))))
         (null? g$id*$7596$Up9ra)))))
   (g$bound-id-member?$7085$Up9ra
     g$bound-id-member?$10727$Up9ra
     (case-lambda
       ((g$id$7598$Up9ra g$id*$7599$Up9ra)
        (if (pair? g$id*$7599$Up9ra)
          (begin
            '#f
            ((case-lambda
               ((g$t$7600$Up9ra)
                (if g$t$7600$Up9ra
                  g$t$7600$Up9ra
                  (begin
                    '#f
                    (g$bound-id-member?$7085$Up9ra
                      g$id$7598$Up9ra
                      (cdr g$id*$7599$Up9ra))))))
             (g$bound-id=?$7081$Up9ra g$id$7598$Up9ra (car g$id*$7599$Up9ra))))
          '#f))))
   (g$self-evaluating?$7086$Up9ra
     g$self-evaluating?$10728$Up9ra
     (case-lambda
       ((g$x$7601$Up9ra)
        ((case-lambda
           ((g$t$7602$Up9ra)
            (if g$t$7602$Up9ra
              g$t$7602$Up9ra
              ((case-lambda
                 ((g$t$7603$Up9ra)
                  (if g$t$7603$Up9ra
                    g$t$7603$Up9ra
                    ((case-lambda
                       ((g$t$7604$Up9ra)
                        (if g$t$7604$Up9ra
                          g$t$7604$Up9ra
                          ((case-lambda
                             ((g$t$7605$Up9ra)
                              (if g$t$7605$Up9ra
                                g$t$7605$Up9ra
                                (begin '#f (bytevector? g$x$7601$Up9ra)))))
                           (boolean? g$x$7601$Up9ra)))))
                     (char? g$x$7601$Up9ra)))))
               (string? g$x$7601$Up9ra)))))
         (number? g$x$7601$Up9ra)))))
   (g$strip-annotations$7087$Up9ra
     g$strip-annotations$10729$Up9ra
     (case-lambda
       ((g$x$7606$Up9ra)
        (if (pair? g$x$7606$Up9ra)
          (cons
            (g$strip-annotations$7087$Up9ra (car g$x$7606$Up9ra))
            (g$strip-annotations$7087$Up9ra (cdr g$x$7606$Up9ra)))
          (if (vector? g$x$7606$Up9ra)
            (vector-map g$strip-annotations$7087$Up9ra g$x$7606$Up9ra)
            (if (annotation? g$x$7606$Up9ra)
              (annotation-stripped g$x$7606$Up9ra)
              g$x$7606$Up9ra))))))
   (g$strip$7088$Up9ra
     g$strip$10730$Up9ra
     (case-lambda
       ((g$x$7607$Up9ra g$m*$7608$Up9ra)
        (if (g$top-marked?$7021$Up9ra g$m*$7608$Up9ra)
          (if ((case-lambda
                 ((g$t$7609$Up9ra)
                  (if g$t$7609$Up9ra
                    g$t$7609$Up9ra
                    ((case-lambda
                       ((g$t$7610$Up9ra)
                        (if g$t$7610$Up9ra
                          g$t$7610$Up9ra
                          (begin
                            '#f
                            (if (vector? g$x$7607$Up9ra)
                              (if (> (vector-length g$x$7607$Up9ra) '0)
                                (begin
                                  '#f
                                  (annotation? (vector-ref g$x$7607$Up9ra '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$7607$Up9ra)
                       (begin '#f (annotation? (car g$x$7607$Up9ra)))
                       '#f)))))
               (annotation? g$x$7607$Up9ra))
            (g$strip-annotations$7087$Up9ra g$x$7607$Up9ra)
            g$x$7607$Up9ra)
          ((letrec ((g$f$7611$Up9ra
                      (case-lambda
                        ((g$x$7612$Up9ra)
                         (if (g$stx?$7050$Up9ra g$x$7612$Up9ra)
                           (g$strip$7088$Up9ra
                             (g$stx-expr$7052$Up9ra g$x$7612$Up9ra)
                             (g$stx-mark*$7053$Up9ra g$x$7612$Up9ra))
                           (if (annotation? g$x$7612$Up9ra)
                             (annotation-stripped g$x$7612$Up9ra)
                             (if (pair? g$x$7612$Up9ra)
                               ((case-lambda
                                  ((g$a$7613$Up9ra g$d$7614$Up9ra)
                                   (if (if (eq? g$a$7613$Up9ra
                                                (car g$x$7612$Up9ra))
                                         (begin
                                           '#f
                                           (eq? g$d$7614$Up9ra
                                                (cdr g$x$7612$Up9ra)))
                                         '#f)
                                     g$x$7612$Up9ra
                                     (cons g$a$7613$Up9ra g$d$7614$Up9ra))))
                                (g$f$7611$Up9ra (car g$x$7612$Up9ra))
                                (g$f$7611$Up9ra (cdr g$x$7612$Up9ra)))
                               (if (vector? g$x$7612$Up9ra)
                                 ((case-lambda
                                    ((g$old$7615$Up9ra)
                                     ((case-lambda
                                        ((g$new$7616$Up9ra)
                                         (if (g$for-all$5365$Up9ra
                                               eq?
                                               g$old$7615$Up9ra
                                               g$new$7616$Up9ra)
                                           g$x$7612$Up9ra
                                           (list->vector g$new$7616$Up9ra))))
                                      (map g$f$7611$Up9ra g$old$7615$Up9ra))))
                                  (vector->list g$x$7612$Up9ra))
                                 g$x$7612$Up9ra))))))))
             g$f$7611$Up9ra)
           g$x$7607$Up9ra)))))
   (g$stx->datum$7089$Up9ra
     g$stx->datum$10731$Up9ra
     (case-lambda
       ((g$x$7617$Up9ra) (g$strip$7088$Up9ra g$x$7617$Up9ra '()))))
   (g$same-marks*?$7090$Up9ra
     g$same-marks*?$10732$Up9ra
     (case-lambda
       ((g$mark*$7618$Up9ra g$mark**$7619$Up9ra g$si$7620$Up9ra)
        (if (null? g$si$7620$Up9ra)
          '#f
          (if (g$same-marks?$7080$Up9ra
                g$mark*$7618$Up9ra
                (vector-ref g$mark**$7619$Up9ra (car g$si$7620$Up9ra)))
            (car g$si$7620$Up9ra)
            (g$same-marks*?$7090$Up9ra
              g$mark*$7618$Up9ra
              g$mark**$7619$Up9ra
              (cdr g$si$7620$Up9ra)))))))
   (g$id->label$7091$Up9ra
     g$id->label$10733$Up9ra
     (case-lambda
       ((g$id$7621$Up9ra)
        ((case-lambda
           ((g$t$7622$Up9ra)
            (if g$t$7622$Up9ra
              g$t$7622$Up9ra
              (begin
                '#f
                ((case-lambda
                   ((g$t$7623$Up9ra)
                    (if g$t$7623$Up9ra
                      ((case-lambda
                         ((g$env$7624$Up9ra)
                          ((case-lambda
                             ((g$rib$7625$Up9ra)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$7026$Up9ra
                                     g$id$7621$Up9ra
                                     g$rib$7625$Up9ra)))
                                (case-lambda
                                  ((g$lab$7628$Up9ra g$loc_$7629$Up9ra)
                                   ((case-lambda
                                      ((g$loc_$7630$Up9ra g$lab$7631$Up9ra)
                                       (begin
                                         (g$extend-rib!$7042$Up9ra
                                           g$rib$7625$Up9ra
                                           g$id$7621$Up9ra
                                           g$lab$7631$Up9ra)
                                         g$lab$7631$Up9ra)))
                                    g$loc_$7629$Up9ra
                                    g$lab$7628$Up9ra))))))
                           (g$interaction-env-rib$7434$Up9ra
                             g$env$7624$Up9ra))))
                       g$t$7623$Up9ra)
                      '#f)))
                 (g$top-level-context$7469$Up9ra))))))
         (g$id->real-label$7092$Up9ra g$id$7621$Up9ra)))))
   (g$id->real-label$7092$Up9ra
     g$id->real-label$10734$Up9ra
     (case-lambda
       ((g$id$7632$Up9ra)
        ((case-lambda
           ((g$sym$7633$Up9ra)
            ((letrec ((g$search$7634$Up9ra
                        (case-lambda
                          ((g$subst*$7635$Up9ra g$mark*$7636$Up9ra)
                           (if (null? g$subst*$7635$Up9ra)
                             '#f
                             (if (eq? (car g$subst*$7635$Up9ra) 'shift)
                               (g$search$7634$Up9ra
                                 (cdr g$subst*$7635$Up9ra)
                                 (cdr g$mark*$7636$Up9ra))
                               ((case-lambda
                                  ((g$rib$7637$Up9ra)
                                   ((case-lambda
                                      ((g$t$7638$Up9ra)
                                       (if g$t$7638$Up9ra
                                         ((case-lambda
                                            ((g$ht$7639$Up9ra)
                                             ((case-lambda
                                                ((g$si$7640$Up9ra)
                                                 ((case-lambda
                                                    ((g$i$7641$Up9ra)
                                                     (if g$i$7641$Up9ra
                                                       (vector-ref
                                                         (g$rib-label*$7035$Up9ra
                                                           g$rib$7637$Up9ra)
                                                         g$i$7641$Up9ra)
                                                       (g$search$7634$Up9ra
                                                         (cdr g$subst*$7635$Up9ra)
                                                         g$mark*$7636$Up9ra))))
                                                  (if g$si$7640$Up9ra
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$7090$Up9ra
                                                        g$mark*$7636$Up9ra
                                                        (g$rib-mark**$7034$Up9ra
                                                          g$rib$7637$Up9ra)
                                                        (reverse
                                                          g$si$7640$Up9ra)))
                                                    '#f))))
                                              (g$hashtable-ref$5161$Up9ra
                                                g$ht$7639$Up9ra
                                                g$sym$7633$Up9ra
                                                '#f))))
                                          g$t$7638$Up9ra)
                                         ((letrec ((g$f$7642$Up9ra
                                                     (case-lambda
                                                       ((g$sym*$7643$Up9ra
                                                          g$mark**$7644$Up9ra
                                                          g$label*$7645$Up9ra)
                                                        (if (null?
                                                              g$sym*$7643$Up9ra)
                                                          (g$search$7634$Up9ra
                                                            (cdr g$subst*$7635$Up9ra)
                                                            g$mark*$7636$Up9ra)
                                                          (if (if (eq? (car g$sym*$7643$Up9ra)
                                                                       g$sym$7633$Up9ra)
                                                                (begin
                                                                  '#f
                                                                  (g$same-marks?$7080$Up9ra
                                                                    (car g$mark**$7644$Up9ra)
                                                                    g$mark*$7636$Up9ra))
                                                                '#f)
                                                            (car g$label*$7645$Up9ra)
                                                            (g$f$7642$Up9ra
                                                              (cdr g$sym*$7643$Up9ra)
                                                              (cdr g$mark**$7644$Up9ra)
                                                              (cdr g$label*$7645$Up9ra))))))))
                                            g$f$7642$Up9ra)
                                          (g$rib-sym*$7033$Up9ra
                                            g$rib$7637$Up9ra)
                                          (g$rib-mark**$7034$Up9ra
                                            g$rib$7637$Up9ra)
                                          (g$rib-label*$7035$Up9ra
                                            g$rib$7637$Up9ra)))))
                                    (g$rib-sealed/freq$7036$Up9ra
                                      g$rib$7637$Up9ra))))
                                (car g$subst*$7635$Up9ra))))))))
               g$search$7634$Up9ra)
             (g$stx-subst*$7054$Up9ra g$id$7632$Up9ra)
             (g$stx-mark*$7053$Up9ra g$id$7632$Up9ra))))
         (g$id->sym$7079$Up9ra g$id$7632$Up9ra)))))
   (g$label->binding$7093$Up9ra
     g$label->binding$10735$Up9ra
     (case-lambda
       ((g$x$7646$Up9ra g$r$7647$Up9ra)
        ((case-lambda
           ((g$t$7648$Up9ra)
            (if g$t$7648$Up9ra
              ((case-lambda
                 ((g$b$7649$Up9ra)
                  (if (if (pair? g$b$7649$Up9ra)
                        (begin '#f (eq? (car g$b$7649$Up9ra) '$core-rtd))
                        '#f)
                    (cons '$rtd (map g$bless$7319$Up9ra (cdr g$b$7649$Up9ra)))
                    (if (if (pair? g$b$7649$Up9ra)
                          (begin '#f (eq? (car g$b$7649$Up9ra) 'global-rtd))
                          '#f)
                      ((case-lambda
                         ((g$lib$7650$Up9ra g$loc$7651$Up9ra)
                          (cons '$rtd (symbol-value g$loc$7651$Up9ra))))
                       (g$cadr$4896$Up9ra g$b$7649$Up9ra)
                       (g$cddr$4898$Up9ra g$b$7649$Up9ra))
                      g$b$7649$Up9ra))))
               g$t$7648$Up9ra)
              ((case-lambda
                 ((g$t$7652$Up9ra)
                  (if g$t$7652$Up9ra
                    (cdr g$t$7652$Up9ra)
                    ((case-lambda
                       ((g$t$7653$Up9ra)
                        (if g$t$7653$Up9ra
                          ((case-lambda
                             ((g$env$7654$Up9ra)
                              ((case-lambda
                                 ((g$t$7655$Up9ra)
                                  (if g$t$7655$Up9ra
                                    ((case-lambda
                                       ((g$p$7656$Up9ra)
                                        (g$cons*$5367$Up9ra
                                          'lexical
                                          (cdr g$p$7656$Up9ra)
                                          '#f)))
                                     g$t$7655$Up9ra)
                                    '(displaced-lexical . #f))))
                               (assq
                                 g$x$7646$Up9ra
                                 (g$interaction-env-locs$7436$Up9ra
                                   g$env$7654$Up9ra)))))
                           g$t$7653$Up9ra)
                          '(displaced-lexical . #f))))
                     (g$top-level-context$7469$Up9ra)))))
               (assq g$x$7646$Up9ra g$r$7647$Up9ra)))))
         (g$imported-label->binding$6892$Up9ra g$x$7646$Up9ra)))))
   (g$make-binding$7094$Up9ra g$make-binding$10736$Up9ra cons)
   (g$binding-type$7095$Up9ra g$binding-type$10737$Up9ra car)
   (g$binding-value$7096$Up9ra g$binding-value$10738$Up9ra cdr)
   (g$raise-unbound-error$7097$Up9ra
     g$raise-unbound-error$10739$Up9ra
     (case-lambda
       ((g$id$7657$Up9ra)
        (g$syntax-violation*$7461$Up9ra
          '#f
          '"unbound identifier"
          g$id$7657$Up9ra
          (g$make-undefined-violation$5701$Up9ra)))))
   (g$syntax-type$7098$Up9ra
     g$syntax-type$10740$Up9ra
     (case-lambda
       ((g$e$7658$Up9ra g$r$7659$Up9ra)
        (if (g$id?$7078$Up9ra g$e$7658$Up9ra)
          ((case-lambda
             ((g$id$7660$Up9ra)
              ((case-lambda
                 ((g$label$7661$Up9ra)
                  ((case-lambda
                     ((g$b$7662$Up9ra)
                      ((case-lambda
                         ((g$type$7663$Up9ra)
                          ((case-lambda
                             (()
                              (begin
                                (if g$label$7661$Up9ra
                                  (void)
                                  (g$raise-unbound-error$7097$Up9ra
                                    g$id$7660$Up9ra))
                                ((case-lambda
                                   ((g$t$7664$Up9ra)
                                    (if (memv
                                          g$t$7664$Up9ra
                                          '(lexical
                                             core-prim
                                             macro
                                             macro!
                                             global
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             displaced-lexical
                                             syntax
                                             import
                                             $module
                                             $core-rtd
                                             library
                                             mutable))
                                      (values
                                        g$type$7663$Up9ra
                                        (g$binding-value$7096$Up9ra
                                          g$b$7662$Up9ra)
                                        g$id$7660$Up9ra)
                                      (values 'other '#f '#f))))
                                 g$type$7663$Up9ra)))))))
                       (g$binding-type$7095$Up9ra g$b$7662$Up9ra))))
                   (g$label->binding$7093$Up9ra
                     g$label$7661$Up9ra
                     g$r$7659$Up9ra))))
               (g$id->label$7091$Up9ra g$id$7660$Up9ra))))
           g$e$7658$Up9ra)
          (if (g$syntax-pair?$7071$Up9ra g$e$7658$Up9ra)
            ((case-lambda
               ((g$id$7665$Up9ra)
                (if (g$id?$7078$Up9ra g$id$7665$Up9ra)
                  ((case-lambda
                     ((g$label$7666$Up9ra)
                      ((case-lambda
                         ((g$b$7667$Up9ra)
                          ((case-lambda
                             ((g$type$7668$Up9ra)
                              ((case-lambda
                                 (()
                                  (begin
                                    (if g$label$7666$Up9ra
                                      (void)
                                      (g$raise-unbound-error$7097$Up9ra
                                        g$id$7665$Up9ra))
                                    ((case-lambda
                                       ((g$t$7669$Up9ra)
                                        (if (memv
                                              g$t$7669$Up9ra
                                              '(define define-syntax
                                                 core-macro
                                                 begin
                                                 macro
                                                 macro!
                                                 local-macro
                                                 local-macro!
                                                 global-macro
                                                 global-macro!
                                                 module
                                                 library
                                                 set!
                                                 let-syntax
                                                 letrec-syntax
                                                 import
                                                 $core-rtd))
                                          (values
                                            g$type$7668$Up9ra
                                            (g$binding-value$7096$Up9ra
                                              g$b$7667$Up9ra)
                                            g$id$7665$Up9ra)
                                          (values 'call '#f '#f))))
                                     g$type$7668$Up9ra)))))))
                           (g$binding-type$7095$Up9ra g$b$7667$Up9ra))))
                       (g$label->binding$7093$Up9ra
                         g$label$7666$Up9ra
                         g$r$7659$Up9ra))))
                   (g$id->label$7091$Up9ra g$id$7665$Up9ra))
                  (values 'call '#f '#f))))
             (g$syntax-car$7075$Up9ra g$e$7658$Up9ra))
            ((case-lambda
               ((g$d$7670$Up9ra)
                (if (g$self-evaluating?$7086$Up9ra g$d$7670$Up9ra)
                  (values 'constant g$d$7670$Up9ra '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$7089$Up9ra g$e$7658$Up9ra)))))))
   (g$sanitize-binding$7106$Up9ra
     g$sanitize-binding$10741$Up9ra
     (case-lambda
       ((g$x$7671$Up9ra g$src$7672$Up9ra)
        (if (procedure? g$x$7671$Up9ra)
          (g$cons*$5367$Up9ra 'local-macro g$x$7671$Up9ra g$src$7672$Up9ra)
          (if (if (pair? g$x$7671$Up9ra)
                (if (eq? (car g$x$7671$Up9ra) 'macro!)
                  (begin '#f (procedure? (cdr g$x$7671$Up9ra)))
                  '#f)
                '#f)
            (g$cons*$5367$Up9ra
              'local-macro!
              (cdr g$x$7671$Up9ra)
              g$src$7672$Up9ra)
            (if (if (pair? g$x$7671$Up9ra)
                  (begin '#f (eq? (car g$x$7671$Up9ra) '$rtd))
                  '#f)
              g$x$7671$Up9ra
              (assertion-violation
                'expand
                '"invalid transformer"
                g$x$7671$Up9ra)))))))
   (g$make-variable-transformer$7107$Up9ra
     g$make-variable-transformer$10742$Up9ra
     (case-lambda
       ((g$x$7673$Up9ra)
        (if (procedure? g$x$7673$Up9ra)
          (cons 'macro! g$x$7673$Up9ra)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$7673$Up9ra)))))
   (g$variable-transformer?$7108$Up9ra
     g$variable-transformer?$10743$Up9ra
     (case-lambda
       ((g$x$7674$Up9ra)
        (if (pair? g$x$7674$Up9ra)
          (if (eq? (car g$x$7674$Up9ra) 'macro!)
            (begin '#f (procedure? (cdr g$x$7674$Up9ra)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$7109$Up9ra
     g$variable-transformer-procedure$10744$Up9ra
     (case-lambda
       ((g$x$7675$Up9ra)
        (if (g$variable-transformer?$7108$Up9ra g$x$7675$Up9ra)
          (cdr g$x$7675$Up9ra)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$7675$Up9ra)))))
   (g$make-eval-transformer$7110$Up9ra
     g$make-eval-transformer$10745$Up9ra
     (case-lambda
       ((g$x$7676$Up9ra)
        (g$sanitize-binding$7106$Up9ra
          (eval-core (g$expanded->core$6592$Up9ra g$x$7676$Up9ra))
          g$x$7676$Up9ra))))
   (g$parse-define$7296$Up9ra
     g$parse-define$10746$Up9ra
     (case-lambda
       ((g$x$7677$Up9ra)
        ((case-lambda
           ((g$t$7678$Up9ra)
            ((case-lambda
               ((g$ls/false$7679$Up9ra)
                (if (if g$ls/false$7679$Up9ra
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7680$Up9ra
                               g$fmls$7681$Up9ra
                               g$b$7682$Up9ra
                               g$b*$7683$Up9ra)
                             (g$id?$7078$Up9ra g$id$7680$Up9ra)))
                          g$ls/false$7679$Up9ra))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7684$Up9ra
                         g$fmls$7685$Up9ra
                         g$b$7686$Up9ra
                         g$b*$7687$Up9ra)
                       (begin
                         (g$verify-formals$7376$Up9ra
                           g$fmls$7685$Up9ra
                           g$x$7677$Up9ra)
                         (values
                           g$id$7684$Up9ra
                           (cons
                             'defun
                             (cons
                               g$fmls$7685$Up9ra
                               (cons g$b$7686$Up9ra g$b*$7687$Up9ra)))))))
                    g$ls/false$7679$Up9ra)
                  ((case-lambda
                     ((g$t$7688$Up9ra)
                      ((case-lambda
                         ((g$ls/false$7689$Up9ra)
                          (if (if g$ls/false$7689$Up9ra
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$7690$Up9ra g$val$7691$Up9ra)
                                       (g$id?$7078$Up9ra g$id$7690$Up9ra)))
                                    g$ls/false$7689$Up9ra))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$7692$Up9ra g$val$7693$Up9ra)
                                 (values
                                   g$id$7692$Up9ra
                                   (cons 'expr g$val$7693$Up9ra))))
                              g$ls/false$7689$Up9ra)
                            ((case-lambda
                               ((g$t$7694$Up9ra)
                                ((case-lambda
                                   ((g$ls/false$7695$Up9ra)
                                    (if (if g$ls/false$7695$Up9ra
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$7696$Up9ra)
                                                 (g$id?$7078$Up9ra
                                                   g$id$7696$Up9ra)))
                                              g$ls/false$7695$Up9ra))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$7697$Up9ra)
                                           (values
                                             g$id$7697$Up9ra
                                             (cons
                                               'expr
                                               (g$bless$7319$Up9ra '(void))))))
                                        g$ls/false$7695$Up9ra)
                                      (g$syntax-violation$7462$Up9ra
                                        '#f
                                        '"invalid syntax"
                                        g$t$7694$Up9ra))))
                                 (g$syntax-dispatch$7356$Up9ra
                                   g$t$7694$Up9ra
                                   '(_ any)))))
                             g$t$7688$Up9ra))))
                       (g$syntax-dispatch$7356$Up9ra
                         g$t$7688$Up9ra
                         '(_ any any)))))
                   g$t$7678$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$7678$Up9ra
               '(_ (any . any) any . each-any)))))
         g$x$7677$Up9ra))))
   (g$parse-define-syntax$7297$Up9ra
     g$parse-define-syntax$10747$Up9ra
     (case-lambda
       ((g$x$7698$Up9ra)
        ((case-lambda
           ((g$t$7699$Up9ra)
            ((case-lambda
               ((g$ls/false$7700$Up9ra)
                (if (if g$ls/false$7700$Up9ra
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7701$Up9ra g$val$7702$Up9ra)
                             (g$id?$7078$Up9ra g$id$7701$Up9ra)))
                          g$ls/false$7700$Up9ra))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7703$Up9ra g$val$7704$Up9ra)
                       (values g$id$7703$Up9ra g$val$7704$Up9ra)))
                    g$ls/false$7700$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$7699$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$7699$Up9ra '(_ any any)))))
         g$x$7698$Up9ra))))
   (g$scheme-stx-hashtable$7298$Up9ra
     g$scheme-stx-hashtable$10748$Up9ra
     (g$make-eq-hashtable$5158$Up9ra))
   (g$scheme-stx$7299$Up9ra
     g$scheme-stx$10749$Up9ra
     (case-lambda
       ((g$sym$7705$Up9ra)
        ((case-lambda
           ((g$t$7706$Up9ra)
            (if g$t$7706$Up9ra
              g$t$7706$Up9ra
              (begin
                '#f
                ((case-lambda
                   ((g$subst$7707$Up9ra)
                    ((case-lambda
                       ((g$stx$7708$Up9ra)
                        ((case-lambda
                           ((g$stx$7709$Up9ra)
                            ((case-lambda
                               (()
                                (begin
                                  (g$hashtable-set!$5162$Up9ra
                                    g$scheme-stx-hashtable$7298$Up9ra
                                    g$sym$7705$Up9ra
                                    g$stx$7709$Up9ra)
                                  g$stx$7709$Up9ra))))))
                         ((case-lambda
                            ((g$t$7710$Up9ra)
                             (if g$t$7710$Up9ra
                               ((case-lambda
                                  ((g$x$7711$Up9ra)
                                   ((case-lambda
                                      ((g$name$7712$Up9ra g$label$7713$Up9ra)
                                       (g$add-subst$7068$Up9ra
                                         (g$make-rib$7032$Up9ra
                                           (list g$name$7712$Up9ra)
                                           (list g$top-mark*$7020$Up9ra)
                                           (list g$label$7713$Up9ra)
                                           '#f)
                                         g$stx$7708$Up9ra)))
                                    (car g$x$7711$Up9ra)
                                    (cdr g$x$7711$Up9ra))))
                                g$t$7710$Up9ra)
                               g$stx$7708$Up9ra)))
                          (assq g$sym$7705$Up9ra g$subst$7707$Up9ra)))))
                     (g$make-stx$7051$Up9ra
                       g$sym$7705$Up9ra
                       g$top-mark*$7020$Up9ra
                       '()
                       '()))))
                 (g$library-subst$6850$Up9ra
                   (g$find-library-by-name$6886$Up9ra
                     '(psyntax system $all))))))))
         (g$hashtable-ref$5161$Up9ra
           g$scheme-stx-hashtable$7298$Up9ra
           g$sym$7705$Up9ra
           '#f)))))
   (g$lexical-var$7300$Up9ra g$lexical-var$10750$Up9ra car)
   (g$lexical-mutable?$7301$Up9ra g$lexical-mutable?$10751$Up9ra cdr)
   (g$set-lexical-mutable!$7302$Up9ra
     g$set-lexical-mutable!$10752$Up9ra
     set-cdr!)
   (g$add-lexical$7303$Up9ra
     g$add-lexical$10753$Up9ra
     (case-lambda
       ((g$lab$7714$Up9ra g$lex$7715$Up9ra g$r$7716$Up9ra)
        (cons
          (g$cons*$5367$Up9ra g$lab$7714$Up9ra 'lexical g$lex$7715$Up9ra '#f)
          g$r$7716$Up9ra))))
   (g$add-lexicals$7304$Up9ra
     g$add-lexicals$10754$Up9ra
     (case-lambda
       ((g$lab*$7717$Up9ra g$lex*$7718$Up9ra g$r$7719$Up9ra)
        (if (null? g$lab*$7717$Up9ra)
          g$r$7719$Up9ra
          (g$add-lexicals$7304$Up9ra
            (cdr g$lab*$7717$Up9ra)
            (cdr g$lex*$7718$Up9ra)
            (g$add-lexical$7303$Up9ra
              (car g$lab*$7717$Up9ra)
              (car g$lex*$7718$Up9ra)
              g$r$7719$Up9ra))))))
   (g$letrec-helper$7305$Up9ra
     g$letrec-helper$10755$Up9ra
     (case-lambda
       ((g$e$7720$Up9ra g$r$7721$Up9ra g$mr$7722$Up9ra g$build$7723$Up9ra)
        ((case-lambda
           ((g$t$7724$Up9ra)
            ((case-lambda
               ((g$ls/false$7725$Up9ra)
                (if g$ls/false$7725$Up9ra
                  (apply
                    (case-lambda
                      ((g$lhs*$7726$Up9ra
                         g$rhs*$7727$Up9ra
                         g$b$7728$Up9ra
                         g$b*$7729$Up9ra)
                       (if (not (g$valid-bound-ids?$7083$Up9ra
                                  g$lhs*$7726$Up9ra))
                         (g$invalid-fmls-error$7321$Up9ra
                           g$e$7720$Up9ra
                           g$lhs*$7726$Up9ra)
                         ((case-lambda
                            ((g$lex*$7730$Up9ra g$lab*$7731$Up9ra)
                             ((case-lambda
                                ((g$rib$7732$Up9ra g$r$7733$Up9ra)
                                 ((case-lambda
                                    ((g$body$7734$Up9ra g$rhs*$7735$Up9ra)
                                     (g$build$7723$Up9ra
                                       '#f
                                       g$lex*$7730$Up9ra
                                       g$rhs*$7735$Up9ra
                                       g$body$7734$Up9ra)))
                                  (g$chi-internal$7385$Up9ra
                                    (g$add-subst$7068$Up9ra
                                      g$rib$7732$Up9ra
                                      (cons g$b$7728$Up9ra g$b*$7729$Up9ra))
                                    g$r$7733$Up9ra
                                    g$mr$7722$Up9ra)
                                  (g$chi-expr*$7372$Up9ra
                                    (map (case-lambda
                                           ((g$x$7736$Up9ra)
                                            (g$add-subst$7068$Up9ra
                                              g$rib$7732$Up9ra
                                              g$x$7736$Up9ra)))
                                         g$rhs*$7727$Up9ra)
                                    g$r$7733$Up9ra
                                    g$mr$7722$Up9ra))))
                              (g$make-full-rib$7046$Up9ra
                                g$lhs*$7726$Up9ra
                                g$lab*$7731$Up9ra)
                              (g$add-lexicals$7304$Up9ra
                                g$lab*$7731$Up9ra
                                g$lex*$7730$Up9ra
                                g$r$7721$Up9ra))))
                          (map g$gen-lexical$7022$Up9ra g$lhs*$7726$Up9ra)
                          (map g$gen-label$7024$Up9ra g$lhs*$7726$Up9ra)))))
                    g$ls/false$7725$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$7724$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$7724$Up9ra
               '(_ #(each (any any)) any . each-any)))))
         g$e$7720$Up9ra))))
   (g$letrec-transformer$7306$Up9ra
     g$letrec-transformer$10756$Up9ra
     (case-lambda
       ((g$e$7737$Up9ra g$r$7738$Up9ra g$mr$7739$Up9ra)
        (g$letrec-helper$7305$Up9ra
          g$e$7737$Up9ra
          g$r$7738$Up9ra
          g$mr$7739$Up9ra
          g$build-letrec$7014$Up9ra))))
   (g$letrec*-transformer$7307$Up9ra
     g$letrec*-transformer$10757$Up9ra
     (case-lambda
       ((g$e$7740$Up9ra g$r$7741$Up9ra g$mr$7742$Up9ra)
        (g$letrec-helper$7305$Up9ra
          g$e$7740$Up9ra
          g$r$7741$Up9ra
          g$mr$7742$Up9ra
          g$build-letrec*$7015$Up9ra))))
   (g$fluid-let-syntax-transformer$7308$Up9ra
     g$fluid-let-syntax-transformer$10758$Up9ra
     (case-lambda
       ((g$e$7743$Up9ra g$r$7744$Up9ra g$mr$7745$Up9ra)
        (letrec* ((g$lookup$7746$Up9ra
                    (case-lambda
                      ((g$x$7756$Up9ra)
                       ((case-lambda
                          ((g$t$7757$Up9ra)
                           (if g$t$7757$Up9ra
                             g$t$7757$Up9ra
                             (begin
                               '#f
                               (g$syntax-violation$7462$Up9ra
                                 '#f
                                 '"unbound identifier"
                                 g$e$7743$Up9ra
                                 g$x$7756$Up9ra)))))
                        (g$id->label$7091$Up9ra g$x$7756$Up9ra))))))
          ((case-lambda
             ((g$t$7747$Up9ra)
              ((case-lambda
                 ((g$ls/false$7748$Up9ra)
                  (if g$ls/false$7748$Up9ra
                    (apply
                      (case-lambda
                        ((g$lhs*$7749$Up9ra
                           g$rhs*$7750$Up9ra
                           g$b$7751$Up9ra
                           g$b*$7752$Up9ra)
                         (if (not (g$valid-bound-ids?$7083$Up9ra
                                    g$lhs*$7749$Up9ra))
                           (g$invalid-fmls-error$7321$Up9ra
                             g$e$7743$Up9ra
                             g$lhs*$7749$Up9ra)
                           ((case-lambda
                              ((g$lab*$7753$Up9ra g$rhs*$7754$Up9ra)
                               (g$chi-internal$7385$Up9ra
                                 (cons g$b$7751$Up9ra g$b*$7752$Up9ra)
                                 (append
                                   (map cons
                                        g$lab*$7753$Up9ra
                                        g$rhs*$7754$Up9ra)
                                   g$r$7744$Up9ra)
                                 (append
                                   (map cons
                                        g$lab*$7753$Up9ra
                                        g$rhs*$7754$Up9ra)
                                   g$mr$7745$Up9ra))))
                            (map g$lookup$7746$Up9ra g$lhs*$7749$Up9ra)
                            (map (case-lambda
                                   ((g$x$7755$Up9ra)
                                    (g$make-eval-transformer$7110$Up9ra
                                      (g$expand-transformer$7401$Up9ra
                                        g$x$7755$Up9ra
                                        g$mr$7745$Up9ra))))
                                 g$rhs*$7750$Up9ra)))))
                      g$ls/false$7748$Up9ra)
                    (g$syntax-violation$7462$Up9ra
                      '#f
                      '"invalid syntax"
                      g$t$7747$Up9ra))))
               (g$syntax-dispatch$7356$Up9ra
                 g$t$7747$Up9ra
                 '(_ #(each (any any)) any . each-any)))))
           g$e$7743$Up9ra)))))
   (g$type-descriptor-transformer$7309$Up9ra
     g$type-descriptor-transformer$10759$Up9ra
     (case-lambda
       ((g$e$7758$Up9ra g$r$7759$Up9ra g$mr$7760$Up9ra)
        ((case-lambda
           ((g$t$7761$Up9ra)
            ((case-lambda
               ((g$ls/false$7762$Up9ra)
                (if (if g$ls/false$7762$Up9ra
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7763$Up9ra)
                             (g$id?$7078$Up9ra g$id$7763$Up9ra)))
                          g$ls/false$7762$Up9ra))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7764$Up9ra)
                       ((case-lambda
                          ((g$lab$7765$Up9ra)
                           ((case-lambda
                              ((g$b$7766$Up9ra)
                               ((case-lambda
                                  ((g$type$7767$Up9ra)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if g$lab$7765$Up9ra
                                           (void)
                                           (g$raise-unbound-error$7097$Up9ra
                                             g$id$7764$Up9ra))
                                         (if (if (eq? g$type$7767$Up9ra '$rtd)
                                               (begin
                                                 '#f
                                                 (not (list?
                                                        (g$binding-value$7096$Up9ra
                                                          g$b$7766$Up9ra))))
                                               '#f)
                                           (void)
                                           (g$syntax-violation$7462$Up9ra
                                             '#f
                                             '"not a record type"
                                             g$e$7758$Up9ra))
                                         (list
                                           'quote
                                           (g$binding-value$7096$Up9ra
                                             g$b$7766$Up9ra))))))))
                                (g$binding-type$7095$Up9ra g$b$7766$Up9ra))))
                            (g$label->binding$7093$Up9ra
                              g$lab$7765$Up9ra
                              g$r$7759$Up9ra))))
                        (g$id->label$7091$Up9ra g$id$7764$Up9ra))))
                    g$ls/false$7762$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$7761$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$7761$Up9ra '(_ any)))))
         g$e$7758$Up9ra))))
   (g$record-type-descriptor-transformer$7310$Up9ra
     g$record-type-descriptor-transformer$10760$Up9ra
     (case-lambda
       ((g$e$7768$Up9ra g$r$7769$Up9ra g$mr$7770$Up9ra)
        ((case-lambda
           ((g$t$7771$Up9ra)
            ((case-lambda
               ((g$ls/false$7772$Up9ra)
                (if (if g$ls/false$7772$Up9ra
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7773$Up9ra)
                             (g$id?$7078$Up9ra g$id$7773$Up9ra)))
                          g$ls/false$7772$Up9ra))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7774$Up9ra)
                       ((case-lambda
                          ((g$lab$7775$Up9ra)
                           ((case-lambda
                              ((g$b$7776$Up9ra)
                               ((case-lambda
                                  ((g$type$7777$Up9ra)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if g$lab$7775$Up9ra
                                           (void)
                                           (g$raise-unbound-error$7097$Up9ra
                                             g$id$7774$Up9ra))
                                         (if (if (eq? g$type$7777$Up9ra '$rtd)
                                               (begin
                                                 '#f
                                                 (list?
                                                   (g$binding-value$7096$Up9ra
                                                     g$b$7776$Up9ra)))
                                               '#f)
                                           (void)
                                           (g$syntax-violation$7462$Up9ra
                                             '#f
                                             '"not a record type"
                                             g$e$7768$Up9ra))
                                         (g$chi-expr$7374$Up9ra
                                           (car (g$binding-value$7096$Up9ra
                                                  g$b$7776$Up9ra))
                                           g$r$7769$Up9ra
                                           g$mr$7770$Up9ra)))))))
                                (g$binding-type$7095$Up9ra g$b$7776$Up9ra))))
                            (g$label->binding$7093$Up9ra
                              g$lab$7775$Up9ra
                              g$r$7769$Up9ra))))
                        (g$id->label$7091$Up9ra g$id$7774$Up9ra))))
                    g$ls/false$7772$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$7771$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$7771$Up9ra '(_ any)))))
         g$e$7768$Up9ra))))
   (g$record-constructor-descriptor-transformer$7311$Up9ra
     g$record-constructor-descriptor-transformer$10761$Up9ra
     (case-lambda
       ((g$e$7778$Up9ra g$r$7779$Up9ra g$mr$7780$Up9ra)
        ((case-lambda
           ((g$t$7781$Up9ra)
            ((case-lambda
               ((g$ls/false$7782$Up9ra)
                (if (if g$ls/false$7782$Up9ra
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7783$Up9ra)
                             (g$id?$7078$Up9ra g$id$7783$Up9ra)))
                          g$ls/false$7782$Up9ra))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7784$Up9ra)
                       ((case-lambda
                          ((g$lab$7785$Up9ra)
                           ((case-lambda
                              ((g$b$7786$Up9ra)
                               ((case-lambda
                                  ((g$type$7787$Up9ra)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if g$lab$7785$Up9ra
                                           (void)
                                           (g$raise-unbound-error$7097$Up9ra
                                             g$id$7784$Up9ra))
                                         (if (if (eq? g$type$7787$Up9ra '$rtd)
                                               (begin
                                                 '#f
                                                 (list?
                                                   (g$binding-value$7096$Up9ra
                                                     g$b$7786$Up9ra)))
                                               '#f)
                                           (void)
                                           (g$syntax-violation$7462$Up9ra
                                             '#f
                                             '"invalid type"
                                             g$e$7778$Up9ra))
                                         (g$chi-expr$7374$Up9ra
                                           (g$cadr$4896$Up9ra
                                             (g$binding-value$7096$Up9ra
                                               g$b$7786$Up9ra))
                                           g$r$7779$Up9ra
                                           g$mr$7780$Up9ra)))))))
                                (g$binding-type$7095$Up9ra g$b$7786$Up9ra))))
                            (g$label->binding$7093$Up9ra
                              g$lab$7785$Up9ra
                              g$r$7779$Up9ra))))
                        (g$id->label$7091$Up9ra g$id$7784$Up9ra))))
                    g$ls/false$7782$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$7781$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$7781$Up9ra '(_ any)))))
         g$e$7778$Up9ra))))
   (g$when-transformer$7312$Up9ra
     g$when-transformer$10762$Up9ra
     (case-lambda
       ((g$e$7788$Up9ra g$r$7789$Up9ra g$mr$7790$Up9ra)
        ((case-lambda
           ((g$t$7791$Up9ra)
            ((case-lambda
               ((g$ls/false$7792$Up9ra)
                (if g$ls/false$7792$Up9ra
                  (apply
                    (case-lambda
                      ((g$test$7793$Up9ra g$e$7794$Up9ra g$e*$7795$Up9ra)
                       (list
                         'if
                         (g$chi-expr$7374$Up9ra
                           g$test$7793$Up9ra
                           g$r$7789$Up9ra
                           g$mr$7790$Up9ra)
                         (g$build-sequence$7012$Up9ra
                           '#f
                           (g$chi-expr*$7372$Up9ra
                             (cons g$e$7794$Up9ra g$e*$7795$Up9ra)
                             g$r$7789$Up9ra
                             g$mr$7790$Up9ra))
                         (g$build-void$7013$Up9ra))))
                    g$ls/false$7792$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$7791$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$7791$Up9ra
               '(_ any any . each-any)))))
         g$e$7788$Up9ra))))
   (g$unless-transformer$7313$Up9ra
     g$unless-transformer$10763$Up9ra
     (case-lambda
       ((g$e$7796$Up9ra g$r$7797$Up9ra g$mr$7798$Up9ra)
        ((case-lambda
           ((g$t$7799$Up9ra)
            ((case-lambda
               ((g$ls/false$7800$Up9ra)
                (if g$ls/false$7800$Up9ra
                  (apply
                    (case-lambda
                      ((g$test$7801$Up9ra g$e$7802$Up9ra g$e*$7803$Up9ra)
                       (list
                         'if
                         (g$chi-expr$7374$Up9ra
                           g$test$7801$Up9ra
                           g$r$7797$Up9ra
                           g$mr$7798$Up9ra)
                         (g$build-void$7013$Up9ra)
                         (g$build-sequence$7012$Up9ra
                           '#f
                           (g$chi-expr*$7372$Up9ra
                             (cons g$e$7802$Up9ra g$e*$7803$Up9ra)
                             g$r$7797$Up9ra
                             g$mr$7798$Up9ra)))))
                    g$ls/false$7800$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$7799$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$7799$Up9ra
               '(_ any any . each-any)))))
         g$e$7796$Up9ra))))
   (g$if-transformer$7314$Up9ra
     g$if-transformer$10764$Up9ra
     (case-lambda
       ((g$e$7804$Up9ra g$r$7805$Up9ra g$mr$7806$Up9ra)
        ((case-lambda
           ((g$t$7807$Up9ra)
            ((case-lambda
               ((g$ls/false$7808$Up9ra)
                (if g$ls/false$7808$Up9ra
                  (apply
                    (case-lambda
                      ((g$e0$7809$Up9ra g$e1$7810$Up9ra g$e2$7811$Up9ra)
                       (list
                         'if
                         (g$chi-expr$7374$Up9ra
                           g$e0$7809$Up9ra
                           g$r$7805$Up9ra
                           g$mr$7806$Up9ra)
                         (g$chi-expr$7374$Up9ra
                           g$e1$7810$Up9ra
                           g$r$7805$Up9ra
                           g$mr$7806$Up9ra)
                         (g$chi-expr$7374$Up9ra
                           g$e2$7811$Up9ra
                           g$r$7805$Up9ra
                           g$mr$7806$Up9ra))))
                    g$ls/false$7808$Up9ra)
                  ((case-lambda
                     ((g$t$7812$Up9ra)
                      ((case-lambda
                         ((g$ls/false$7813$Up9ra)
                          (if g$ls/false$7813$Up9ra
                            (apply
                              (case-lambda
                                ((g$e0$7814$Up9ra g$e1$7815$Up9ra)
                                 (list
                                   'if
                                   (g$chi-expr$7374$Up9ra
                                     g$e0$7814$Up9ra
                                     g$r$7805$Up9ra
                                     g$mr$7806$Up9ra)
                                   (g$chi-expr$7374$Up9ra
                                     g$e1$7815$Up9ra
                                     g$r$7805$Up9ra
                                     g$mr$7806$Up9ra)
                                   (g$build-void$7013$Up9ra))))
                              g$ls/false$7813$Up9ra)
                            (g$syntax-violation$7462$Up9ra
                              '#f
                              '"invalid syntax"
                              g$t$7812$Up9ra))))
                       (g$syntax-dispatch$7356$Up9ra
                         g$t$7812$Up9ra
                         '(_ any any)))))
                   g$t$7807$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$7807$Up9ra '(_ any any any)))))
         g$e$7804$Up9ra))))
   (g$case-transformer$7315$Up9ra
     g$case-transformer$10765$Up9ra
     (case-lambda
       ((g$e$7816$Up9ra g$r$7817$Up9ra g$mr$7818$Up9ra)
        (letrec* ((g$build-one$7819$Up9ra
                    (case-lambda
                      ((g$t$7848$Up9ra g$cls$7849$Up9ra g$rest$7850$Up9ra)
                       ((case-lambda
                          ((g$t$7851$Up9ra)
                           ((case-lambda
                              ((g$ls/false$7852$Up9ra)
                               (if g$ls/false$7852$Up9ra
                                 (apply
                                   (case-lambda
                                     ((g$d*$7853$Up9ra
                                        g$e$7854$Up9ra
                                        g$e*$7855$Up9ra)
                                      (list
                                        'if
                                        ((case-lambda
                                           ((g$data$7856$Up9ra)
                                            (if (= '1
                                                   (length g$data$7856$Up9ra))
                                              (list
                                                '(primitive eqv?)
                                                g$t$7848$Up9ra
                                                (list
                                                  'quote
                                                  (car g$data$7856$Up9ra)))
                                              (list
                                                '(primitive memv)
                                                g$t$7848$Up9ra
                                                (list
                                                  'quote
                                                  g$data$7856$Up9ra)))))
                                         (g$stx->datum$7089$Up9ra
                                           g$d*$7853$Up9ra))
                                        (g$build-sequence$7012$Up9ra
                                          '#f
                                          (g$chi-expr*$7372$Up9ra
                                            (cons
                                              g$e$7854$Up9ra
                                              g$e*$7855$Up9ra)
                                            g$r$7817$Up9ra
                                            g$mr$7818$Up9ra))
                                        g$rest$7850$Up9ra)))
                                   g$ls/false$7852$Up9ra)
                                 ((case-lambda
                                    ((g$t$7857$Up9ra)
                                     ((case-lambda
                                        ((g$ls/false$7858$Up9ra)
                                         (if g$ls/false$7858$Up9ra
                                           (apply
                                             (case-lambda
                                               ((g$else$7859$Up9ra)
                                                (g$syntax-violation$7462$Up9ra
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$7816$Up9ra)))
                                             g$ls/false$7858$Up9ra)
                                           (g$syntax-violation$7462$Up9ra
                                             '#f
                                             '"invalid syntax"
                                             g$t$7857$Up9ra))))
                                      (g$syntax-dispatch$7356$Up9ra
                                        g$t$7857$Up9ra
                                        'any))))
                                  g$t$7851$Up9ra))))
                            (g$syntax-dispatch$7356$Up9ra
                              g$t$7851$Up9ra
                              '(each-any any . each-any)))))
                        g$cls$7849$Up9ra))))
                  (g$build-last$7820$Up9ra
                    (case-lambda
                      ((g$t$7833$Up9ra g$cls$7834$Up9ra)
                       ((case-lambda
                          ((g$t$7835$Up9ra)
                           ((case-lambda
                              ((g$ls/false$7836$Up9ra)
                               (if g$ls/false$7836$Up9ra
                                 (apply
                                   (case-lambda
                                     ((g$d*$7837$Up9ra
                                        g$e$7838$Up9ra
                                        g$e*$7839$Up9ra)
                                      (g$build-one$7819$Up9ra
                                        g$t$7833$Up9ra
                                        g$cls$7834$Up9ra
                                        (g$build-void$7013$Up9ra))))
                                   g$ls/false$7836$Up9ra)
                                 ((case-lambda
                                    ((g$t$7840$Up9ra)
                                     ((case-lambda
                                        ((g$ls/false$7841$Up9ra)
                                         (if g$ls/false$7841$Up9ra
                                           (apply
                                             (case-lambda
                                               ((g$else-kwd$7842$Up9ra
                                                  g$x$7843$Up9ra
                                                  g$x*$7844$Up9ra)
                                                (if (if (g$id?$7078$Up9ra
                                                          g$else-kwd$7842$Up9ra)
                                                      (begin
                                                        '#f
                                                        (g$free-id=?$7082$Up9ra
                                                          g$else-kwd$7842$Up9ra
                                                          (g$scheme-stx$7299$Up9ra
                                                            'else)))
                                                      '#f)
                                                  (g$build-sequence$7012$Up9ra
                                                    '#f
                                                    (g$chi-expr*$7372$Up9ra
                                                      (cons
                                                        g$x$7843$Up9ra
                                                        g$x*$7844$Up9ra)
                                                      g$r$7817$Up9ra
                                                      g$mr$7818$Up9ra))
                                                  (g$syntax-violation$7462$Up9ra
                                                    '#f
                                                    '"invalid syntax"
                                                    g$e$7816$Up9ra))))
                                             g$ls/false$7841$Up9ra)
                                           ((case-lambda
                                              ((g$t$7845$Up9ra)
                                               ((case-lambda
                                                  ((g$ls/false$7846$Up9ra)
                                                   (if g$ls/false$7846$Up9ra
                                                     (apply
                                                       (case-lambda
                                                         ((g$else$7847$Up9ra)
                                                          (g$syntax-violation$7462$Up9ra
                                                            '#f
                                                            '"invalid syntax"
                                                            g$e$7816$Up9ra)))
                                                       g$ls/false$7846$Up9ra)
                                                     (g$syntax-violation$7462$Up9ra
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$7845$Up9ra))))
                                                (g$syntax-dispatch$7356$Up9ra
                                                  g$t$7845$Up9ra
                                                  'any))))
                                            g$t$7840$Up9ra))))
                                      (g$syntax-dispatch$7356$Up9ra
                                        g$t$7840$Up9ra
                                        '(any any . each-any)))))
                                  g$t$7835$Up9ra))))
                            (g$syntax-dispatch$7356$Up9ra
                              g$t$7835$Up9ra
                              '(each-any any . each-any)))))
                        g$cls$7834$Up9ra)))))
          ((case-lambda
             ((g$t$7821$Up9ra)
              ((case-lambda
                 ((g$ls/false$7822$Up9ra)
                  (if g$ls/false$7822$Up9ra
                    (apply
                      (case-lambda
                        ((g$expr$7823$Up9ra)
                         (g$build-sequence$7012$Up9ra
                           '#f
                           (list
                             (g$chi-expr$7374$Up9ra
                               g$expr$7823$Up9ra
                               g$r$7817$Up9ra
                               g$mr$7818$Up9ra)
                             (g$build-void$7013$Up9ra)))))
                      g$ls/false$7822$Up9ra)
                    ((case-lambda
                       ((g$t$7824$Up9ra)
                        ((case-lambda
                           ((g$ls/false$7825$Up9ra)
                            (if g$ls/false$7825$Up9ra
                              (apply
                                (case-lambda
                                  ((g$expr$7826$Up9ra
                                     g$cls$7827$Up9ra
                                     g$cls*$7828$Up9ra)
                                   ((case-lambda
                                      ((g$t$7829$Up9ra)
                                       (g$build-let$7011$Up9ra
                                         '#f
                                         (list g$t$7829$Up9ra)
                                         (list
                                           (g$chi-expr$7374$Up9ra
                                             g$expr$7826$Up9ra
                                             g$r$7817$Up9ra
                                             g$mr$7818$Up9ra))
                                         ((letrec ((g$f$7830$Up9ra
                                                     (case-lambda
                                                       ((g$cls$7831$Up9ra
                                                          g$cls*$7832$Up9ra)
                                                        (if (null?
                                                              g$cls*$7832$Up9ra)
                                                          (g$build-last$7820$Up9ra
                                                            g$t$7829$Up9ra
                                                            g$cls$7831$Up9ra)
                                                          (g$build-one$7819$Up9ra
                                                            g$t$7829$Up9ra
                                                            g$cls$7831$Up9ra
                                                            (g$f$7830$Up9ra
                                                              (car g$cls*$7832$Up9ra)
                                                              (cdr g$cls*$7832$Up9ra))))))))
                                            g$f$7830$Up9ra)
                                          g$cls$7827$Up9ra
                                          g$cls*$7828$Up9ra))))
                                    (g$gen-lexical$7022$Up9ra 't))))
                                g$ls/false$7825$Up9ra)
                              (g$syntax-violation$7462$Up9ra
                                '#f
                                '"invalid syntax"
                                g$t$7824$Up9ra))))
                         (g$syntax-dispatch$7356$Up9ra
                           g$t$7824$Up9ra
                           '(_ any any . each-any)))))
                     g$t$7821$Up9ra))))
               (g$syntax-dispatch$7356$Up9ra g$t$7821$Up9ra '(_ any)))))
           g$e$7816$Up9ra)))))
   (g$quote-transformer$7316$Up9ra
     g$quote-transformer$10766$Up9ra
     (case-lambda
       ((g$e$7860$Up9ra g$r$7861$Up9ra g$mr$7862$Up9ra)
        ((case-lambda
           ((g$t$7863$Up9ra)
            ((case-lambda
               ((g$ls/false$7864$Up9ra)
                (if g$ls/false$7864$Up9ra
                  (apply
                    (case-lambda
                      ((g$datum$7865$Up9ra)
                       (list
                         'quote
                         (g$stx->datum$7089$Up9ra g$datum$7865$Up9ra))))
                    g$ls/false$7864$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$7863$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$7863$Up9ra '(_ any)))))
         g$e$7860$Up9ra))))
   (g$case-lambda-transformer$7317$Up9ra
     g$case-lambda-transformer$10767$Up9ra
     (case-lambda
       ((g$e$7866$Up9ra g$r$7867$Up9ra g$mr$7868$Up9ra)
        ((case-lambda
           ((g$t$7869$Up9ra)
            ((case-lambda
               ((g$ls/false$7870$Up9ra)
                (if g$ls/false$7870$Up9ra
                  (apply
                    (case-lambda
                      ((g$fmls*$7871$Up9ra g$b*$7872$Up9ra g$b**$7873$Up9ra)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$7378$Up9ra
                              g$e$7866$Up9ra
                              g$fmls*$7871$Up9ra
                              (map cons g$b*$7872$Up9ra g$b**$7873$Up9ra)
                              g$r$7867$Up9ra
                              g$mr$7868$Up9ra)))
                         (case-lambda
                           ((g$fmls*$7876$Up9ra g$body*$7877$Up9ra)
                            ((case-lambda
                               ((g$body*$7878$Up9ra g$fmls*$7879$Up9ra)
                                (g$build-case-lambda$7010$Up9ra
                                  '#f
                                  g$fmls*$7879$Up9ra
                                  g$body*$7878$Up9ra)))
                             g$body*$7877$Up9ra
                             g$fmls*$7876$Up9ra))))))
                    g$ls/false$7870$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$7869$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$7869$Up9ra
               '(_ . #(each (any any . each-any)))))))
         g$e$7866$Up9ra))))
   (g$lambda-transformer$7318$Up9ra
     g$lambda-transformer$10768$Up9ra
     (case-lambda
       ((g$e$7880$Up9ra g$r$7881$Up9ra g$mr$7882$Up9ra)
        ((case-lambda
           ((g$t$7883$Up9ra)
            ((case-lambda
               ((g$ls/false$7884$Up9ra)
                (if g$ls/false$7884$Up9ra
                  (apply
                    (case-lambda
                      ((g$fmls$7885$Up9ra g$b$7886$Up9ra g$b*$7887$Up9ra)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$7377$Up9ra
                              g$e$7880$Up9ra
                              g$fmls$7885$Up9ra
                              (cons g$b$7886$Up9ra g$b*$7887$Up9ra)
                              g$r$7881$Up9ra
                              g$mr$7882$Up9ra)))
                         (case-lambda
                           ((g$fmls$7890$Up9ra g$body$7891$Up9ra)
                            ((case-lambda
                               ((g$body$7892$Up9ra g$fmls$7893$Up9ra)
                                (g$build-lambda$7009$Up9ra
                                  '#f
                                  g$fmls$7893$Up9ra
                                  g$body$7892$Up9ra)))
                             g$body$7891$Up9ra
                             g$fmls$7890$Up9ra))))))
                    g$ls/false$7884$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$7883$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$7883$Up9ra
               '(_ any any . each-any)))))
         g$e$7880$Up9ra))))
   (g$bless$7319$Up9ra
     g$bless$10769$Up9ra
     (case-lambda
       ((g$x$7894$Up9ra)
        (g$mkstx$7066$Up9ra
          ((letrec ((g$f$7895$Up9ra
                      (case-lambda
                        ((g$x$7896$Up9ra)
                         (if (g$stx?$7050$Up9ra g$x$7896$Up9ra)
                           g$x$7896$Up9ra
                           (if (pair? g$x$7896$Up9ra)
                             (cons
                               (g$f$7895$Up9ra (car g$x$7896$Up9ra))
                               (g$f$7895$Up9ra (cdr g$x$7896$Up9ra)))
                             (if (symbol? g$x$7896$Up9ra)
                               (g$scheme-stx$7299$Up9ra g$x$7896$Up9ra)
                               (if (vector? g$x$7896$Up9ra)
                                 (vector-map g$f$7895$Up9ra g$x$7896$Up9ra)
                                 g$x$7896$Up9ra))))))))
             g$f$7895$Up9ra)
           g$x$7894$Up9ra)
          '()
          '()
          '()))))
   (g$with-syntax-macro$7320$Up9ra
     g$with-syntax-macro$10770$Up9ra
     (case-lambda
       ((g$e$7897$Up9ra)
        ((case-lambda
           ((g$t$7898$Up9ra)
            ((case-lambda
               ((g$ls/false$7899$Up9ra)
                (if g$ls/false$7899$Up9ra
                  (apply
                    (case-lambda
                      ((g$pat*$7900$Up9ra
                         g$expr*$7901$Up9ra
                         g$b$7902$Up9ra
                         g$b*$7903$Up9ra)
                       ((case-lambda
                          ((g$idn*$7904$Up9ra)
                           (begin
                             (g$verify-formals$7376$Up9ra
                               (map car g$idn*$7904$Up9ra)
                               g$e$7897$Up9ra)
                             ((case-lambda
                                ((g$t*$7905$Up9ra)
                                 (g$bless$7319$Up9ra
                                   (list
                                     'let
                                     (map list
                                          g$t*$7905$Up9ra
                                          g$expr*$7901$Up9ra)
                                     ((letrec ((g$f$7906$Up9ra
                                                 (case-lambda
                                                   ((g$pat*$7907$Up9ra
                                                      g$t*$7908$Up9ra)
                                                    (if (null?
                                                          g$pat*$7907$Up9ra)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$7902$Up9ra
                                                            g$b*$7903$Up9ra)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$7908$Up9ra)
                                                        '()
                                                        (list
                                                          (car g$pat*$7907$Up9ra)
                                                          (g$f$7906$Up9ra
                                                            (cdr g$pat*$7907$Up9ra)
                                                            (cdr g$t*$7908$Up9ra)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$7907$Up9ra))
                                                            (car g$t*$7908$Up9ra)))))))))
                                        g$f$7906$Up9ra)
                                      g$pat*$7900$Up9ra
                                      g$t*$7905$Up9ra)))))
                              (g$generate-temporaries$7455$Up9ra
                                g$expr*$7901$Up9ra)))))
                        ((letrec ((g$f$7909$Up9ra
                                    (case-lambda
                                      ((g$pat*$7910$Up9ra)
                                       (if (null? g$pat*$7910$Up9ra)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$7355$Up9ra
                                                (car g$pat*$7910$Up9ra)
                                                '())))
                                           (case-lambda
                                             ((g$pat$7913$Up9ra
                                                g$idn*$7914$Up9ra)
                                              ((case-lambda
                                                 ((g$idn*$7915$Up9ra
                                                    g$pat$7916$Up9ra)
                                                  (append
                                                    g$idn*$7915$Up9ra
                                                    (g$f$7909$Up9ra
                                                      (cdr g$pat*$7910$Up9ra)))))
                                               g$idn*$7914$Up9ra
                                               g$pat$7913$Up9ra)))))))))
                           g$f$7909$Up9ra)
                         g$pat*$7900$Up9ra))))
                    g$ls/false$7899$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$7898$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$7898$Up9ra
               '(_ #(each (any any)) any . each-any)))))
         g$e$7897$Up9ra))))
   (g$invalid-fmls-error$7321$Up9ra
     g$invalid-fmls-error$10771$Up9ra
     (case-lambda
       ((g$stx$7917$Up9ra g$fmls$7918$Up9ra)
        ((case-lambda
           ((g$t$7919$Up9ra)
            ((case-lambda
               ((g$ls/false$7920$Up9ra)
                (if g$ls/false$7920$Up9ra
                  (apply
                    (case-lambda
                      ((g$id*$7921$Up9ra g$last$7922$Up9ra)
                       ((letrec ((g$f$7923$Up9ra
                                   (case-lambda
                                     ((g$id*$7924$Up9ra)
                                      (if (null? g$id*$7924$Up9ra)
                                        (values)
                                        (if (not (g$id?$7078$Up9ra
                                                   (car g$id*$7924$Up9ra)))
                                          (g$syntax-violation$7462$Up9ra
                                            '#f
                                            '"not an identifier"
                                            g$stx$7917$Up9ra
                                            (car g$id*$7924$Up9ra))
                                          (begin
                                            (g$f$7923$Up9ra
                                              (cdr g$id*$7924$Up9ra))
                                            (if (g$bound-id-member?$7085$Up9ra
                                                  (car g$id*$7924$Up9ra)
                                                  (cdr g$id*$7924$Up9ra))
                                              (g$syntax-violation$7462$Up9ra
                                                '#f
                                                '"duplicate binding"
                                                g$stx$7917$Up9ra
                                                (car g$id*$7924$Up9ra))
                                              (void)))))))))
                          g$f$7923$Up9ra)
                        (if (g$id?$7078$Up9ra g$last$7922$Up9ra)
                          (cons g$last$7922$Up9ra g$id*$7921$Up9ra)
                          (if (g$syntax-null?$7073$Up9ra g$last$7922$Up9ra)
                            g$id*$7921$Up9ra
                            (g$syntax-violation$7462$Up9ra
                              '#f
                              '"not an identifier"
                              g$stx$7917$Up9ra
                              g$last$7922$Up9ra))))))
                    g$ls/false$7920$Up9ra)
                  ((case-lambda
                     ((g$t$7925$Up9ra)
                      ((case-lambda
                         ((g$ls/false$7926$Up9ra)
                          (if g$ls/false$7926$Up9ra
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7462$Up9ra
                                   '#f
                                   '"malformed binding form"
                                   g$stx$7917$Up9ra
                                   g$fmls$7918$Up9ra)))
                              g$ls/false$7926$Up9ra)
                            (g$syntax-violation$7462$Up9ra
                              '#f
                              '"invalid syntax"
                              g$t$7925$Up9ra))))
                       (g$syntax-dispatch$7356$Up9ra g$t$7925$Up9ra '_))))
                   g$t$7919$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$7919$Up9ra
               '#(each+ any () any)))))
         g$fmls$7918$Up9ra))))
   (g$let-macro$7322$Up9ra
     g$let-macro$10772$Up9ra
     (case-lambda
       ((g$stx$7927$Up9ra)
        ((case-lambda
           ((g$t$7928$Up9ra)
            ((case-lambda
               ((g$ls/false$7929$Up9ra)
                (if g$ls/false$7929$Up9ra
                  (apply
                    (case-lambda
                      ((g$lhs*$7930$Up9ra
                         g$rhs*$7931$Up9ra
                         g$b$7932$Up9ra
                         g$b*$7933$Up9ra)
                       (if (g$valid-bound-ids?$7083$Up9ra g$lhs*$7930$Up9ra)
                         (g$bless$7319$Up9ra
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$7930$Up9ra
                                 (cons g$b$7932$Up9ra g$b*$7933$Up9ra)))
                             g$rhs*$7931$Up9ra))
                         (g$invalid-fmls-error$7321$Up9ra
                           g$stx$7927$Up9ra
                           g$lhs*$7930$Up9ra))))
                    g$ls/false$7929$Up9ra)
                  ((case-lambda
                     ((g$t$7934$Up9ra)
                      ((case-lambda
                         ((g$ls/false$7935$Up9ra)
                          (if (if g$ls/false$7935$Up9ra
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$7936$Up9ra
                                         g$lhs*$7937$Up9ra
                                         g$rhs*$7938$Up9ra
                                         g$b$7939$Up9ra
                                         g$b*$7940$Up9ra)
                                       (g$id?$7078$Up9ra g$f$7936$Up9ra)))
                                    g$ls/false$7935$Up9ra))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$7941$Up9ra
                                   g$lhs*$7942$Up9ra
                                   g$rhs*$7943$Up9ra
                                   g$b$7944$Up9ra
                                   g$b*$7945$Up9ra)
                                 (if (g$valid-bound-ids?$7083$Up9ra
                                       g$lhs*$7942$Up9ra)
                                   (g$bless$7319$Up9ra
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$7941$Up9ra
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$7942$Up9ra
                                                 (cons
                                                   g$b$7944$Up9ra
                                                   g$b*$7945$Up9ra)))))
                                         g$f$7941$Up9ra)
                                       g$rhs*$7943$Up9ra))
                                   (g$invalid-fmls-error$7321$Up9ra
                                     g$stx$7927$Up9ra
                                     g$lhs*$7942$Up9ra))))
                              g$ls/false$7935$Up9ra)
                            (g$syntax-violation$7462$Up9ra
                              '#f
                              '"invalid syntax"
                              g$t$7934$Up9ra))))
                       (g$syntax-dispatch$7356$Up9ra
                         g$t$7934$Up9ra
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$7928$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$7928$Up9ra
               '(_ #(each (any any)) any . each-any)))))
         g$stx$7927$Up9ra))))
   (g$let-values-macro$7323$Up9ra
     g$let-values-macro$10773$Up9ra
     (case-lambda
       ((g$stx$7946$Up9ra)
        (letrec* ((g$rename$7947$Up9ra
                    (case-lambda
                      ((g$x$7998$Up9ra g$old*$7999$Up9ra g$new*$8000$Up9ra)
                       (begin
                         (if (g$id?$7078$Up9ra g$x$7998$Up9ra)
                           (void)
                           (g$syntax-violation$7462$Up9ra
                             '#f
                             '"not an indentifier"
                             g$stx$7946$Up9ra
                             g$x$7998$Up9ra))
                         (if (g$bound-id-member?$7085$Up9ra
                               g$x$7998$Up9ra
                               g$old*$7999$Up9ra)
                           (g$syntax-violation$7462$Up9ra
                             '#f
                             '"duplicate binding"
                             g$stx$7946$Up9ra
                             g$x$7998$Up9ra)
                           (void))
                         ((case-lambda
                            ((g$y$8001$Up9ra)
                             (values
                               g$y$8001$Up9ra
                               (cons g$x$7998$Up9ra g$old*$7999$Up9ra)
                               (cons g$y$8001$Up9ra g$new*$8000$Up9ra))))
                          (gensym
                            (g$syntax->datum$7465$Up9ra g$x$7998$Up9ra)))))))
                  (g$rename*$7948$Up9ra
                    (case-lambda
                      ((g$x*$7989$Up9ra g$old*$7990$Up9ra g$new*$7991$Up9ra)
                       (if (null? g$x*$7989$Up9ra)
                         (values '() g$old*$7990$Up9ra g$new*$7991$Up9ra)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$7947$Up9ra
                                (car g$x*$7989$Up9ra)
                                g$old*$7990$Up9ra
                                g$new*$7991$Up9ra)))
                           (case-lambda
                             ((g$x$7992$Up9ra
                                g$old*$7993$Up9ra
                                g$new*$7994$Up9ra)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$7948$Up9ra
                                     (cdr g$x*$7989$Up9ra)
                                     g$old*$7993$Up9ra
                                     g$new*$7994$Up9ra)))
                                (case-lambda
                                  ((g$x*$7995$Up9ra
                                     g$old*$7996$Up9ra
                                     g$new*$7997$Up9ra)
                                   (values
                                     (cons g$x$7992$Up9ra g$x*$7995$Up9ra)
                                     g$old*$7996$Up9ra
                                     g$new*$7997$Up9ra))))))))))))
          ((case-lambda
             ((g$t$7949$Up9ra)
              ((case-lambda
                 ((g$ls/false$7950$Up9ra)
                  (if g$ls/false$7950$Up9ra
                    (apply
                      (case-lambda
                        ((g$b$7951$Up9ra g$b*$7952$Up9ra)
                         (g$cons*$5367$Up9ra
                           (g$bless$7319$Up9ra 'let)
                           '()
                           g$b$7951$Up9ra
                           g$b*$7952$Up9ra)))
                      g$ls/false$7950$Up9ra)
                    ((case-lambda
                       ((g$t$7953$Up9ra)
                        ((case-lambda
                           ((g$ls/false$7954$Up9ra)
                            (if g$ls/false$7954$Up9ra
                              (apply
                                (case-lambda
                                  ((g$lhs*$7955$Up9ra
                                     g$rhs*$7956$Up9ra
                                     g$b$7957$Up9ra
                                     g$b*$7958$Up9ra)
                                   (g$bless$7319$Up9ra
                                     ((letrec ((g$f$7959$Up9ra
                                                 (case-lambda
                                                   ((g$lhs*$7960$Up9ra
                                                      g$rhs*$7961$Up9ra
                                                      g$old*$7962$Up9ra
                                                      g$new*$7963$Up9ra)
                                                    (if (null?
                                                          g$lhs*$7960$Up9ra)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (map list
                                                               g$old*$7962$Up9ra
                                                               g$new*$7963$Up9ra)
                                                          (cons
                                                            g$b$7957$Up9ra
                                                            g$b*$7958$Up9ra)))
                                                      ((case-lambda
                                                         ((g$t$7964$Up9ra)
                                                          ((case-lambda
                                                             ((g$ls/false$7965$Up9ra)
                                                              (if g$ls/false$7965$Up9ra
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$7966$Up9ra)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$7948$Up9ra
                                                                            g$x*$7966$Up9ra
                                                                            g$old*$7962$Up9ra
                                                                            g$new*$7963$Up9ra)))
                                                                       (case-lambda
                                                                         ((g$y*$7970$Up9ra
                                                                            g$old*$7971$Up9ra
                                                                            g$new*$7972$Up9ra)
                                                                          ((case-lambda
                                                                             ((g$new*$7973$Up9ra
                                                                                g$old*$7974$Up9ra
                                                                                g$y*$7975$Up9ra)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$7961$Up9ra))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$7975$Up9ra
                                                                                  (g$f$7959$Up9ra
                                                                                    (cdr g$lhs*$7960$Up9ra)
                                                                                    (cdr g$rhs*$7961$Up9ra)
                                                                                    g$old*$7974$Up9ra
                                                                                    g$new*$7973$Up9ra)))))
                                                                           g$new*$7972$Up9ra
                                                                           g$old*$7971$Up9ra
                                                                           g$y*$7970$Up9ra))))))
                                                                  g$ls/false$7965$Up9ra)
                                                                ((case-lambda
                                                                   ((g$t$7976$Up9ra)
                                                                    ((case-lambda
                                                                       ((g$ls/false$7977$Up9ra)
                                                                        (if g$ls/false$7977$Up9ra
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$7978$Up9ra
                                                                                 g$x$7979$Up9ra)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$7947$Up9ra
                                                                                      g$x$7979$Up9ra
                                                                                      g$old*$7962$Up9ra
                                                                                      g$new*$7963$Up9ra)))
                                                                                 (case-lambda
                                                                                   ((g$y$7980$Up9ra
                                                                                      g$old*$7981$Up9ra
                                                                                      g$new*$7982$Up9ra)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$7948$Up9ra
                                                                                           g$x*$7978$Up9ra
                                                                                           g$old*$7981$Up9ra
                                                                                           g$new*$7982$Up9ra)))
                                                                                      (case-lambda
                                                                                        ((g$y*$7983$Up9ra
                                                                                           g$old*$7984$Up9ra
                                                                                           g$new*$7985$Up9ra)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$7961$Up9ra))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$7983$Up9ra
                                                                                               g$y$7980$Up9ra)
                                                                                             (g$f$7959$Up9ra
                                                                                               (cdr g$lhs*$7960$Up9ra)
                                                                                               (cdr g$rhs*$7961$Up9ra)
                                                                                               g$old*$7984$Up9ra
                                                                                               g$new*$7985$Up9ra)))))))))))
                                                                            g$ls/false$7977$Up9ra)
                                                                          ((case-lambda
                                                                             ((g$t$7986$Up9ra)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$7987$Up9ra)
                                                                                  (if g$ls/false$7987$Up9ra
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$7988$Up9ra)
                                                                                         (g$syntax-violation$7462$Up9ra
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$7946$Up9ra
                                                                                           g$others$7988$Up9ra)))
                                                                                      g$ls/false$7987$Up9ra)
                                                                                    (g$syntax-violation$7462$Up9ra
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$7986$Up9ra))))
                                                                               (g$syntax-dispatch$7356$Up9ra
                                                                                 g$t$7986$Up9ra
                                                                                 'any))))
                                                                           g$t$7976$Up9ra))))
                                                                     (g$syntax-dispatch$7356$Up9ra
                                                                       g$t$7976$Up9ra
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$7964$Up9ra))))
                                                           (g$syntax-dispatch$7356$Up9ra
                                                             g$t$7964$Up9ra
                                                             'each-any))))
                                                       (car g$lhs*$7960$Up9ra)))))))
                                        g$f$7959$Up9ra)
                                      g$lhs*$7955$Up9ra
                                      g$rhs*$7956$Up9ra
                                      '()
                                      '()))))
                                g$ls/false$7954$Up9ra)
                              (g$syntax-violation$7462$Up9ra
                                '#f
                                '"invalid syntax"
                                g$t$7953$Up9ra))))
                         (g$syntax-dispatch$7356$Up9ra
                           g$t$7953$Up9ra
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$7949$Up9ra))))
               (g$syntax-dispatch$7356$Up9ra
                 g$t$7949$Up9ra
                 '(_ () any . each-any)))))
           g$stx$7946$Up9ra)))))
   (g$let*-values-macro$7324$Up9ra
     g$let*-values-macro$10774$Up9ra
     (case-lambda
       ((g$stx$8002$Up9ra)
        (letrec* ((g$check$8003$Up9ra
                    (case-lambda
                      ((g$x*$8027$Up9ra)
                       (if (null? g$x*$8027$Up9ra)
                         (void)
                         ((case-lambda
                            ((g$x$8028$Up9ra)
                             (begin
                               (if (g$id?$7078$Up9ra g$x$8028$Up9ra)
                                 (void)
                                 (g$syntax-violation$7462$Up9ra
                                   '#f
                                   '"not an identifier"
                                   g$stx$8002$Up9ra
                                   g$x$8028$Up9ra))
                               (g$check$8003$Up9ra (cdr g$x*$8027$Up9ra))
                               (if (g$bound-id-member?$7085$Up9ra
                                     g$x$8028$Up9ra
                                     (cdr g$x*$8027$Up9ra))
                                 (g$syntax-violation$7462$Up9ra
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$8002$Up9ra
                                   g$x$8028$Up9ra)
                                 (void)))))
                          (car g$x*$8027$Up9ra)))))))
          ((case-lambda
             ((g$t$8004$Up9ra)
              ((case-lambda
                 ((g$ls/false$8005$Up9ra)
                  (if g$ls/false$8005$Up9ra
                    (apply
                      (case-lambda
                        ((g$b$8006$Up9ra g$b*$8007$Up9ra)
                         (g$cons*$5367$Up9ra
                           (g$bless$7319$Up9ra 'let)
                           '()
                           g$b$8006$Up9ra
                           g$b*$8007$Up9ra)))
                      g$ls/false$8005$Up9ra)
                    ((case-lambda
                       ((g$t$8008$Up9ra)
                        ((case-lambda
                           ((g$ls/false$8009$Up9ra)
                            (if g$ls/false$8009$Up9ra
                              (apply
                                (case-lambda
                                  ((g$lhs*$8010$Up9ra
                                     g$rhs*$8011$Up9ra
                                     g$b$8012$Up9ra
                                     g$b*$8013$Up9ra)
                                   (g$bless$7319$Up9ra
                                     ((letrec ((g$f$8014$Up9ra
                                                 (case-lambda
                                                   ((g$lhs*$8015$Up9ra
                                                      g$rhs*$8016$Up9ra)
                                                    (if (null?
                                                          g$lhs*$8015$Up9ra)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$8012$Up9ra
                                                          g$b*$8013$Up9ra))
                                                      ((case-lambda
                                                         ((g$t$8017$Up9ra)
                                                          ((case-lambda
                                                             ((g$ls/false$8018$Up9ra)
                                                              (if g$ls/false$8018$Up9ra
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8019$Up9ra)
                                                                     (begin
                                                                       (g$check$8003$Up9ra
                                                                         g$x*$8019$Up9ra)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$8016$Up9ra))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$8019$Up9ra
                                                                           (g$f$8014$Up9ra
                                                                             (cdr g$lhs*$8015$Up9ra)
                                                                             (cdr g$rhs*$8016$Up9ra)))))))
                                                                  g$ls/false$8018$Up9ra)
                                                                ((case-lambda
                                                                   ((g$t$8020$Up9ra)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8021$Up9ra)
                                                                        (if g$ls/false$8021$Up9ra
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8022$Up9ra
                                                                                 g$x$8023$Up9ra)
                                                                               (begin
                                                                                 (g$check$8003$Up9ra
                                                                                   (cons
                                                                                     g$x$8023$Up9ra
                                                                                     g$x*$8022$Up9ra))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$8016$Up9ra))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$8022$Up9ra
                                                                                       g$x$8023$Up9ra)
                                                                                     (g$f$8014$Up9ra
                                                                                       (cdr g$lhs*$8015$Up9ra)
                                                                                       (cdr g$rhs*$8016$Up9ra)))))))
                                                                            g$ls/false$8021$Up9ra)
                                                                          ((case-lambda
                                                                             ((g$t$8024$Up9ra)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8025$Up9ra)
                                                                                  (if g$ls/false$8025$Up9ra
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8026$Up9ra)
                                                                                         (g$syntax-violation$7462$Up9ra
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8002$Up9ra
                                                                                           g$others$8026$Up9ra)))
                                                                                      g$ls/false$8025$Up9ra)
                                                                                    (g$syntax-violation$7462$Up9ra
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8024$Up9ra))))
                                                                               (g$syntax-dispatch$7356$Up9ra
                                                                                 g$t$8024$Up9ra
                                                                                 'any))))
                                                                           g$t$8020$Up9ra))))
                                                                     (g$syntax-dispatch$7356$Up9ra
                                                                       g$t$8020$Up9ra
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8017$Up9ra))))
                                                           (g$syntax-dispatch$7356$Up9ra
                                                             g$t$8017$Up9ra
                                                             'each-any))))
                                                       (car g$lhs*$8015$Up9ra)))))))
                                        g$f$8014$Up9ra)
                                      g$lhs*$8010$Up9ra
                                      g$rhs*$8011$Up9ra))))
                                g$ls/false$8009$Up9ra)
                              (g$syntax-violation$7462$Up9ra
                                '#f
                                '"invalid syntax"
                                g$t$8008$Up9ra))))
                         (g$syntax-dispatch$7356$Up9ra
                           g$t$8008$Up9ra
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8004$Up9ra))))
               (g$syntax-dispatch$7356$Up9ra
                 g$t$8004$Up9ra
                 '(_ () any . each-any)))))
           g$stx$8002$Up9ra)))))
   (g$trace-lambda-macro$7325$Up9ra
     g$trace-lambda-macro$10775$Up9ra
     (case-lambda
       ((g$stx$8029$Up9ra)
        ((case-lambda
           ((g$t$8030$Up9ra)
            ((case-lambda
               ((g$ls/false$8031$Up9ra)
                (if g$ls/false$8031$Up9ra
                  (apply
                    (case-lambda
                      ((g$who$8032$Up9ra
                         g$fmls$8033$Up9ra
                         g$b$8034$Up9ra
                         g$b*$8035$Up9ra)
                       (if (g$valid-bound-ids?$7083$Up9ra g$fmls$8033$Up9ra)
                         (g$bless$7319$Up9ra
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$8032$Up9ra)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$8033$Up9ra
                                 (cons g$b$8034$Up9ra g$b*$8035$Up9ra)))))
                         (g$invalid-fmls-error$7321$Up9ra
                           g$stx$8029$Up9ra
                           g$fmls$8033$Up9ra))))
                    g$ls/false$8031$Up9ra)
                  ((case-lambda
                     ((g$t$8036$Up9ra)
                      ((case-lambda
                         ((g$ls/false$8037$Up9ra)
                          (if g$ls/false$8037$Up9ra
                            (apply
                              (case-lambda
                                ((g$who$8038$Up9ra
                                   g$fmls$8039$Up9ra
                                   g$last$8040$Up9ra
                                   g$b$8041$Up9ra
                                   g$b*$8042$Up9ra)
                                 (if (g$valid-bound-ids?$7083$Up9ra
                                       (cons
                                         g$last$8040$Up9ra
                                         g$fmls$8039$Up9ra))
                                   (g$bless$7319$Up9ra
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$8038$Up9ra)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$8039$Up9ra
                                             g$last$8040$Up9ra)
                                           (cons
                                             g$b$8041$Up9ra
                                             g$b*$8042$Up9ra)))))
                                   (g$invalid-fmls-error$7321$Up9ra
                                     g$stx$8029$Up9ra
                                     (append
                                       g$fmls$8039$Up9ra
                                       g$last$8040$Up9ra)))))
                              g$ls/false$8037$Up9ra)
                            (g$syntax-violation$7462$Up9ra
                              '#f
                              '"invalid syntax"
                              g$t$8036$Up9ra))))
                       (g$syntax-dispatch$7356$Up9ra
                         g$t$8036$Up9ra
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$8030$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$8030$Up9ra
               '(_ any each-any any . each-any)))))
         g$stx$8029$Up9ra))))
   (g$trace-define-macro$7326$Up9ra
     g$trace-define-macro$10776$Up9ra
     (case-lambda
       ((g$stx$8043$Up9ra)
        ((case-lambda
           ((g$t$8044$Up9ra)
            ((case-lambda
               ((g$ls/false$8045$Up9ra)
                (if g$ls/false$8045$Up9ra
                  (apply
                    (case-lambda
                      ((g$who$8046$Up9ra
                         g$fmls$8047$Up9ra
                         g$b$8048$Up9ra
                         g$b*$8049$Up9ra)
                       (if (g$valid-bound-ids?$7083$Up9ra g$fmls$8047$Up9ra)
                         (g$bless$7319$Up9ra
                           (list
                             'define
                             g$who$8046$Up9ra
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$8046$Up9ra)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$8047$Up9ra
                                   (cons g$b$8048$Up9ra g$b*$8049$Up9ra))))))
                         (g$invalid-fmls-error$7321$Up9ra
                           g$stx$8043$Up9ra
                           g$fmls$8047$Up9ra))))
                    g$ls/false$8045$Up9ra)
                  ((case-lambda
                     ((g$t$8050$Up9ra)
                      ((case-lambda
                         ((g$ls/false$8051$Up9ra)
                          (if g$ls/false$8051$Up9ra
                            (apply
                              (case-lambda
                                ((g$who$8052$Up9ra
                                   g$fmls$8053$Up9ra
                                   g$last$8054$Up9ra
                                   g$b$8055$Up9ra
                                   g$b*$8056$Up9ra)
                                 (if (g$valid-bound-ids?$7083$Up9ra
                                       (cons
                                         g$last$8054$Up9ra
                                         g$fmls$8053$Up9ra))
                                   (g$bless$7319$Up9ra
                                     (list
                                       'define
                                       g$who$8052$Up9ra
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$8052$Up9ra)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$8053$Up9ra
                                               g$last$8054$Up9ra)
                                             (cons
                                               g$b$8055$Up9ra
                                               g$b*$8056$Up9ra))))))
                                   (g$invalid-fmls-error$7321$Up9ra
                                     g$stx$8043$Up9ra
                                     (append
                                       g$fmls$8053$Up9ra
                                       g$last$8054$Up9ra)))))
                              g$ls/false$8051$Up9ra)
                            ((case-lambda
                               ((g$t$8057$Up9ra)
                                ((case-lambda
                                   ((g$ls/false$8058$Up9ra)
                                    (if g$ls/false$8058$Up9ra
                                      (apply
                                        (case-lambda
                                          ((g$who$8059$Up9ra g$expr$8060$Up9ra)
                                           (if (g$id?$7078$Up9ra
                                                 g$who$8059$Up9ra)
                                             (g$bless$7319$Up9ra
                                               (list
                                                 'define
                                                 g$who$8059$Up9ra
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$8060$Up9ra))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$8059$Up9ra)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$7462$Up9ra
                                               '#f
                                               '"invalid name"
                                               g$stx$8043$Up9ra))))
                                        g$ls/false$8058$Up9ra)
                                      (g$syntax-violation$7462$Up9ra
                                        '#f
                                        '"invalid syntax"
                                        g$t$8057$Up9ra))))
                                 (g$syntax-dispatch$7356$Up9ra
                                   g$t$8057$Up9ra
                                   '(_ any any)))))
                             g$t$8050$Up9ra))))
                       (g$syntax-dispatch$7356$Up9ra
                         g$t$8050$Up9ra
                         '(_ (any . #(each+ any () any)) any . each-any)))))
                   g$t$8044$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$8044$Up9ra
               '(_ (any . each-any) any . each-any)))))
         g$stx$8043$Up9ra))))
   (g$trace-define-syntax-macro$7327$Up9ra
     g$trace-define-syntax-macro$10777$Up9ra
     (case-lambda
       ((g$stx$8061$Up9ra)
        ((case-lambda
           ((g$t$8062$Up9ra)
            ((case-lambda
               ((g$ls/false$8063$Up9ra)
                (if g$ls/false$8063$Up9ra
                  (apply
                    (case-lambda
                      ((g$who$8064$Up9ra g$expr$8065$Up9ra)
                       (if (g$id?$7078$Up9ra g$who$8064$Up9ra)
                         (g$bless$7319$Up9ra
                           (list
                             'define-syntax
                             g$who$8064$Up9ra
                             (list
                               'make-traced-macro
                               (list 'quote g$who$8064$Up9ra)
                               g$expr$8065$Up9ra)))
                         (g$syntax-violation$7462$Up9ra
                           '#f
                           '"invalid name"
                           g$stx$8061$Up9ra))))
                    g$ls/false$8063$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$8062$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$8062$Up9ra '(_ any any)))))
         g$stx$8061$Up9ra))))
   (g$trace-let/rec-syntax$7328$Up9ra
     g$trace-let/rec-syntax$10778$Up9ra
     (case-lambda
       ((g$who$8066$Up9ra)
        (case-lambda
          ((g$stx$8067$Up9ra)
           ((case-lambda
              ((g$t$8068$Up9ra)
               ((case-lambda
                  ((g$ls/false$8069$Up9ra)
                   (if g$ls/false$8069$Up9ra
                     (apply
                       (case-lambda
                         ((g$lhs*$8070$Up9ra
                            g$rhs*$8071$Up9ra
                            g$b$8072$Up9ra
                            g$b*$8073$Up9ra)
                          (if (g$valid-bound-ids?$7083$Up9ra g$lhs*$8070$Up9ra)
                            ((case-lambda
                               ((g$rhs*$8074$Up9ra)
                                (g$bless$7319$Up9ra
                                  (cons
                                    g$who$8066$Up9ra
                                    (cons
                                      (map list
                                           g$lhs*$8070$Up9ra
                                           g$rhs*$8074$Up9ra)
                                      (cons g$b$8072$Up9ra g$b*$8073$Up9ra))))))
                             (map (case-lambda
                                    ((g$lhs$8075$Up9ra g$rhs$8076$Up9ra)
                                     (list
                                       'make-traced-macro
                                       (list 'quote g$lhs$8075$Up9ra)
                                       g$rhs$8076$Up9ra)))
                                  g$lhs*$8070$Up9ra
                                  g$rhs*$8071$Up9ra))
                            (g$invalid-fmls-error$7321$Up9ra
                              g$stx$8067$Up9ra
                              g$lhs*$8070$Up9ra))))
                       g$ls/false$8069$Up9ra)
                     (g$syntax-violation$7462$Up9ra
                       '#f
                       '"invalid syntax"
                       g$t$8068$Up9ra))))
                (g$syntax-dispatch$7356$Up9ra
                  g$t$8068$Up9ra
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$8067$Up9ra))))))
   (g$trace-let-syntax-macro$7329$Up9ra
     g$trace-let-syntax-macro$10779$Up9ra
     (g$trace-let/rec-syntax$7328$Up9ra 'let-syntax))
   (g$trace-letrec-syntax-macro$7330$Up9ra
     g$trace-letrec-syntax-macro$10780$Up9ra
     (g$trace-let/rec-syntax$7328$Up9ra 'letrec-syntax))
   (g$guard-macro$7331$Up9ra
     g$guard-macro$10781$Up9ra
     (case-lambda
       ((g$x$8077$Up9ra)
        (letrec* ((g$gen-clauses$8078$Up9ra
                    (case-lambda
                      ((g$con$8090$Up9ra
                         g$outerk$8091$Up9ra
                         g$clause*$8092$Up9ra)
                       (letrec* ((g$f$8093$Up9ra
                                   (case-lambda
                                     ((g$x$8121$Up9ra g$k$8122$Up9ra)
                                      ((case-lambda
                                         ((g$t$8123$Up9ra)
                                          ((case-lambda
                                             ((g$ls/false$8124$Up9ra)
                                              (if g$ls/false$8124$Up9ra
                                                (apply
                                                  (case-lambda
                                                    ((g$e$8125$Up9ra
                                                       g$p$8126$Up9ra)
                                                     ((case-lambda
                                                        ((g$t$8127$Up9ra)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$8127$Up9ra
                                                               g$e$8125$Up9ra))
                                                           (list
                                                             'if
                                                             g$t$8127$Up9ra
                                                             (list
                                                               g$p$8126$Up9ra
                                                               g$t$8127$Up9ra)
                                                             g$k$8122$Up9ra))))
                                                      (gensym))))
                                                  g$ls/false$8124$Up9ra)
                                                ((case-lambda
                                                   ((g$t$8128$Up9ra)
                                                    ((case-lambda
                                                       ((g$ls/false$8129$Up9ra)
                                                        (if g$ls/false$8129$Up9ra
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8130$Up9ra)
                                                               ((case-lambda
                                                                  ((g$t$8131$Up9ra)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$8131$Up9ra
                                                                         g$e$8130$Up9ra))
                                                                     (list
                                                                       'if
                                                                       g$t$8131$Up9ra
                                                                       g$t$8131$Up9ra
                                                                       g$k$8122$Up9ra))))
                                                                (gensym))))
                                                            g$ls/false$8129$Up9ra)
                                                          ((case-lambda
                                                             ((g$t$8132$Up9ra)
                                                              ((case-lambda
                                                                 ((g$ls/false$8133$Up9ra)
                                                                  (if g$ls/false$8133$Up9ra
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$8134$Up9ra
                                                                           g$v$8135$Up9ra
                                                                           g$v*$8136$Up9ra)
                                                                         (list
                                                                           'if
                                                                           g$e$8134$Up9ra
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$8135$Up9ra
                                                                               g$v*$8136$Up9ra))
                                                                           g$k$8122$Up9ra)))
                                                                      g$ls/false$8133$Up9ra)
                                                                    ((case-lambda
                                                                       ((g$t$8137$Up9ra)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8138$Up9ra)
                                                                            (if g$ls/false$8138$Up9ra
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$7462$Up9ra
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$8121$Up9ra)))
                                                                                g$ls/false$8138$Up9ra)
                                                                              (g$syntax-violation$7462$Up9ra
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8137$Up9ra))))
                                                                         (g$syntax-dispatch$7356$Up9ra
                                                                           g$t$8137$Up9ra
                                                                           '_))))
                                                                     g$t$8132$Up9ra))))
                                                               (g$syntax-dispatch$7356$Up9ra
                                                                 g$t$8132$Up9ra
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$8128$Up9ra))))
                                                     (g$syntax-dispatch$7356$Up9ra
                                                       g$t$8128$Up9ra
                                                       '(any)))))
                                                 g$t$8123$Up9ra))))
                                           (g$syntax-dispatch$7356$Up9ra
                                             g$t$8123$Up9ra
                                             '(any #(scheme-id =>) any)))))
                                       g$x$8121$Up9ra))))
                                 (g$f*$8094$Up9ra
                                   (case-lambda
                                     ((g$x*$8101$Up9ra)
                                      ((case-lambda
                                         ((g$t$8102$Up9ra)
                                          ((case-lambda
                                             ((g$ls/false$8103$Up9ra)
                                              (if g$ls/false$8103$Up9ra
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$8090$Up9ra)
                                                       '#t)))
                                                  g$ls/false$8103$Up9ra)
                                                ((case-lambda
                                                   ((g$t$8104$Up9ra)
                                                    ((case-lambda
                                                       ((g$ls/false$8105$Up9ra)
                                                        (if g$ls/false$8105$Up9ra
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8106$Up9ra
                                                                 g$e*$8107$Up9ra)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$8106$Up9ra
                                                                     g$e*$8107$Up9ra))
                                                                 '#f)))
                                                            g$ls/false$8105$Up9ra)
                                                          ((case-lambda
                                                             ((g$t$8108$Up9ra)
                                                              ((case-lambda
                                                                 ((g$ls/false$8109$Up9ra)
                                                                  (if g$ls/false$8109$Up9ra
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$8110$Up9ra
                                                                           g$cls*$8111$Up9ra)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$8094$Up9ra
                                                                                g$cls*$8111$Up9ra)))
                                                                           (case-lambda
                                                                             ((g$e$8114$Up9ra
                                                                                g$g$8115$Up9ra)
                                                                              ((case-lambda
                                                                                 ((g$g$8116$Up9ra
                                                                                    g$e$8117$Up9ra)
                                                                                  (values
                                                                                    (g$f$8093$Up9ra
                                                                                      g$cls$8110$Up9ra
                                                                                      g$e$8117$Up9ra)
                                                                                    g$g$8116$Up9ra)))
                                                                               g$g$8115$Up9ra
                                                                               g$e$8114$Up9ra))))))
                                                                      g$ls/false$8109$Up9ra)
                                                                    ((case-lambda
                                                                       ((g$t$8118$Up9ra)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8119$Up9ra)
                                                                            (if g$ls/false$8119$Up9ra
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$8120$Up9ra)
                                                                                   (g$syntax-violation$7462$Up9ra
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$8120$Up9ra)))
                                                                                g$ls/false$8119$Up9ra)
                                                                              (g$syntax-violation$7462$Up9ra
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8118$Up9ra))))
                                                                         (g$syntax-dispatch$7356$Up9ra
                                                                           g$t$8118$Up9ra
                                                                           'any))))
                                                                     g$t$8108$Up9ra))))
                                                               (g$syntax-dispatch$7356$Up9ra
                                                                 g$t$8108$Up9ra
                                                                 '(any .
                                                                       any)))))
                                                           g$t$8104$Up9ra))))
                                                     (g$syntax-dispatch$7356$Up9ra
                                                       g$t$8104$Up9ra
                                                       '((#(scheme-id else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$8102$Up9ra))))
                                           (g$syntax-dispatch$7356$Up9ra
                                             g$t$8102$Up9ra
                                             '()))))
                                       g$x*$8101$Up9ra)))))
                         (call-with-values
                           (case-lambda
                             (() (g$f*$8094$Up9ra g$clause*$8092$Up9ra)))
                           (case-lambda
                             ((g$code$8097$Up9ra g$raisek$8098$Up9ra)
                              ((case-lambda
                                 ((g$raisek$8099$Up9ra g$code$8100$Up9ra)
                                  (if g$raisek$8099$Up9ra
                                    (list g$outerk$8091$Up9ra g$code$8100$Up9ra)
                                    g$code$8100$Up9ra)))
                               g$raisek$8098$Up9ra
                               g$code$8097$Up9ra)))))))))
          ((case-lambda
             ((g$t$8079$Up9ra)
              ((case-lambda
                 ((g$ls/false$8080$Up9ra)
                  (if (if g$ls/false$8080$Up9ra
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$8081$Up9ra
                                 g$clause*$8082$Up9ra
                                 g$b$8083$Up9ra
                                 g$b*$8084$Up9ra)
                               (g$id?$7078$Up9ra g$con$8081$Up9ra)))
                            g$ls/false$8080$Up9ra))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$8085$Up9ra
                           g$clause*$8086$Up9ra
                           g$b$8087$Up9ra
                           g$b*$8088$Up9ra)
                         ((case-lambda
                            ((g$outerk$8089$Up9ra)
                             (g$bless$7319$Up9ra
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$8089$Up9ra)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$8085$Up9ra)
                                           (g$gen-clauses$8078$Up9ra
                                             g$con$8085$Up9ra
                                             g$outerk$8089$Up9ra
                                             g$clause*$8086$Up9ra))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$8087$Up9ra
                                                 g$b*$8088$Up9ra))))))))))))
                          (gensym))))
                      g$ls/false$8080$Up9ra)
                    (g$syntax-violation$7462$Up9ra
                      '#f
                      '"invalid syntax"
                      g$t$8079$Up9ra))))
               (g$syntax-dispatch$7356$Up9ra
                 g$t$8079$Up9ra
                 '(_ (any . each-any) any . each-any)))))
           g$x$8077$Up9ra)))))
   (g$define-enumeration-macro$7332$Up9ra
     g$define-enumeration-macro$10782$Up9ra
     (case-lambda
       ((g$stx$8139$Up9ra)
        (letrec* ((g$set?$8140$Up9ra
                    (case-lambda
                      ((g$x$8153$Up9ra)
                       ((case-lambda
                          ((g$t$8154$Up9ra)
                           (if g$t$8154$Up9ra
                             g$t$8154$Up9ra
                             (begin
                               '#f
                               (if (not (memq
                                          (car g$x$8153$Up9ra)
                                          (cdr g$x$8153$Up9ra)))
                                 (begin
                                   '#f
                                   (g$set?$8140$Up9ra (cdr g$x$8153$Up9ra)))
                                 '#f)))))
                        (null? g$x$8153$Up9ra)))))
                  (g$remove-dups$8141$Up9ra
                    (case-lambda
                      ((g$ls$8152$Up9ra)
                       (if (null? g$ls$8152$Up9ra)
                         '()
                         (cons
                           (car g$ls$8152$Up9ra)
                           (g$remove-dups$8141$Up9ra
                             (g$remq$5372$Up9ra
                               (car g$ls$8152$Up9ra)
                               (cdr g$ls$8152$Up9ra)))))))))
          ((case-lambda
             ((g$t$8142$Up9ra)
              ((case-lambda
                 ((g$ls/false$8143$Up9ra)
                  (if (if g$ls/false$8143$Up9ra
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$8144$Up9ra
                                 g$id*$8145$Up9ra
                                 g$maker$8146$Up9ra)
                               (if (g$id?$7078$Up9ra g$name$8144$Up9ra)
                                 (if (g$id?$7078$Up9ra g$maker$8146$Up9ra)
                                   (begin
                                     '#f
                                     (g$for-all$5365$Up9ra
                                       g$id?$7078$Up9ra
                                       g$id*$8145$Up9ra))
                                   '#f)
                                 '#f)))
                            g$ls/false$8143$Up9ra))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$8147$Up9ra g$id*$8148$Up9ra g$maker$8149$Up9ra)
                         ((case-lambda
                            ((g$name*$8150$Up9ra g$mk$8151$Up9ra)
                             (g$bless$7319$Up9ra
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$8151$Up9ra
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list 'quote g$name*$8150$Up9ra))))
                                 (list
                                   'define-syntax
                                   g$name$8147$Up9ra
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list 'quote g$name*$8150$Up9ra))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list 'quote g$name$8147$Up9ra)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$8149$Up9ra
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8149$Up9ra)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$8150$Up9ra))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8149$Up9ra)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$8151$Up9ra
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$8141$Up9ra
                            (g$syntax->datum$7465$Up9ra g$id*$8148$Up9ra))
                          (gensym))))
                      g$ls/false$8143$Up9ra)
                    (g$syntax-violation$7462$Up9ra
                      '#f
                      '"invalid syntax"
                      g$t$8142$Up9ra))))
               (g$syntax-dispatch$7356$Up9ra
                 g$t$8142$Up9ra
                 '(_ any each-any any)))))
           g$stx$8139$Up9ra)))))
   (g$time-macro$7333$Up9ra
     g$time-macro$10783$Up9ra
     (case-lambda
       ((g$stx$8155$Up9ra)
        ((case-lambda
           ((g$t$8156$Up9ra)
            ((case-lambda
               ((g$ls/false$8157$Up9ra)
                (if g$ls/false$8157$Up9ra
                  (apply
                    (case-lambda
                      ((g$expr$8158$Up9ra)
                       ((case-lambda
                          ((g$str$8159$Up9ra)
                           (g$bless$7319$Up9ra
                             (list
                               'time-it
                               g$str$8159$Up9ra
                               (list 'lambda '() g$expr$8158$Up9ra)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$6095$Up9ra)))
                          (case-lambda
                            ((g$p$8162$Up9ra g$e$8163$Up9ra)
                             ((case-lambda
                                ((g$e$8164$Up9ra g$p$8165$Up9ra)
                                 (begin
                                   (write
                                     (g$syntax->datum$7465$Up9ra
                                       g$expr$8158$Up9ra)
                                     g$p$8165$Up9ra)
                                   (g$e$8164$Up9ra))))
                              g$e$8163$Up9ra
                              g$p$8162$Up9ra)))))))
                    g$ls/false$8157$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$8156$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$8156$Up9ra '(_ any)))))
         g$stx$8155$Up9ra))))
   (g$delay-macro$7334$Up9ra
     g$delay-macro$10784$Up9ra
     (case-lambda
       ((g$stx$8166$Up9ra)
        ((case-lambda
           ((g$t$8167$Up9ra)
            ((case-lambda
               ((g$ls/false$8168$Up9ra)
                (if g$ls/false$8168$Up9ra
                  (apply
                    (case-lambda
                      ((g$expr$8169$Up9ra)
                       (g$bless$7319$Up9ra
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$8169$Up9ra)))))
                    g$ls/false$8168$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$8167$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$8167$Up9ra '(_ any)))))
         g$stx$8166$Up9ra))))
   (g$assert-macro$7335$Up9ra
     g$assert-macro$10785$Up9ra
     (case-lambda
       ((g$stx$8170$Up9ra)
        ((case-lambda
           ((g$t$8171$Up9ra)
            ((case-lambda
               ((g$ls/false$8172$Up9ra)
                (if g$ls/false$8172$Up9ra
                  (apply
                    (case-lambda
                      ((g$expr$8173$Up9ra)
                       (g$bless$7319$Up9ra
                         (list
                           'unless
                           g$expr$8173$Up9ra
                           (list
                             'assertion-violation
                             ''assert
                             '"assertion failed"
                             (list 'quote g$expr$8173$Up9ra))))))
                    g$ls/false$8172$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$8171$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$8171$Up9ra '(_ any)))))
         g$stx$8170$Up9ra))))
   (g$endianness-macro$7336$Up9ra
     g$endianness-macro$10786$Up9ra
     (case-lambda
       ((g$stx$8174$Up9ra)
        ((case-lambda
           ((g$t$8175$Up9ra)
            ((case-lambda
               ((g$ls/false$8176$Up9ra)
                (if g$ls/false$8176$Up9ra
                  (apply
                    (case-lambda
                      ((g$e$8177$Up9ra)
                       ((case-lambda
                          ((g$t$8178$Up9ra)
                           (if (eqv? g$t$8178$Up9ra 'little)
                             (g$bless$7319$Up9ra ''little)
                             (if (eqv? g$t$8178$Up9ra 'big)
                               (g$bless$7319$Up9ra ''big)
                               (g$syntax-violation$7462$Up9ra
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$8174$Up9ra)))))
                        (g$syntax->datum$7465$Up9ra g$e$8177$Up9ra))))
                    g$ls/false$8176$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$8175$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$8175$Up9ra '(_ any)))))
         g$stx$8174$Up9ra))))
   (g$identifier-syntax-macro$7337$Up9ra
     g$identifier-syntax-macro$10787$Up9ra
     (case-lambda
       ((g$stx$8179$Up9ra)
        ((case-lambda
           ((g$t$8180$Up9ra)
            ((case-lambda
               ((g$ls/false$8181$Up9ra)
                (if g$ls/false$8181$Up9ra
                  (apply
                    (case-lambda
                      ((g$expr$8182$Up9ra)
                       (g$bless$7319$Up9ra
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$8182$Up9ra))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$8182$Up9ra)
                                   '(#'(e* ...))))))))))
                    g$ls/false$8181$Up9ra)
                  ((case-lambda
                     ((g$t$8183$Up9ra)
                      ((case-lambda
                         ((g$ls/false$8184$Up9ra)
                          (if (if g$ls/false$8184$Up9ra
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$8185$Up9ra
                                         g$expr1$8186$Up9ra
                                         g$id2$8187$Up9ra
                                         g$expr2$8188$Up9ra
                                         g$expr3$8189$Up9ra)
                                       (if (g$id?$7078$Up9ra g$id1$8185$Up9ra)
                                         (if (g$id?$7078$Up9ra g$id2$8187$Up9ra)
                                           (begin
                                             '#f
                                             (g$id?$7078$Up9ra
                                               g$expr2$8188$Up9ra))
                                           '#f)
                                         '#f)))
                                    g$ls/false$8184$Up9ra))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$8190$Up9ra
                                   g$expr1$8191$Up9ra
                                   g$id2$8192$Up9ra
                                   g$expr2$8193$Up9ra
                                   g$expr3$8194$Up9ra)
                                 (g$bless$7319$Up9ra
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list 'syntax g$expr1$8191$Up9ra))
                                         (list
                                           (list 'set! 'id g$expr2$8193$Up9ra)
                                           (list 'syntax g$expr3$8194$Up9ra))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$8191$Up9ra
                                               '(e* ...))))))))))
                              g$ls/false$8184$Up9ra)
                            (g$syntax-violation$7462$Up9ra
                              '#f
                              '"invalid syntax"
                              g$t$8183$Up9ra))))
                       (g$syntax-dispatch$7356$Up9ra
                         g$t$8183$Up9ra
                         '(_ (any any) ((#(scheme-id set!) any any) any))))))
                   g$t$8180$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$8180$Up9ra '(_ any)))))
         g$stx$8179$Up9ra))))
   (g$do-macro$7338$Up9ra
     g$do-macro$10788$Up9ra
     (case-lambda
       ((g$stx$8195$Up9ra)
        (letrec* ((g$bind$8196$Up9ra
                    (case-lambda
                      ((g$x$8208$Up9ra)
                       ((case-lambda
                          ((g$t$8209$Up9ra)
                           ((case-lambda
                              ((g$ls/false$8210$Up9ra)
                               (if g$ls/false$8210$Up9ra
                                 (apply
                                   (case-lambda
                                     ((g$x$8211$Up9ra g$init$8212$Up9ra)
                                      (list
                                        g$x$8211$Up9ra
                                        g$init$8212$Up9ra
                                        g$x$8211$Up9ra)))
                                   g$ls/false$8210$Up9ra)
                                 ((case-lambda
                                    ((g$t$8213$Up9ra)
                                     ((case-lambda
                                        ((g$ls/false$8214$Up9ra)
                                         (if g$ls/false$8214$Up9ra
                                           (apply
                                             (case-lambda
                                               ((g$x$8215$Up9ra
                                                  g$init$8216$Up9ra
                                                  g$step$8217$Up9ra)
                                                (list
                                                  g$x$8215$Up9ra
                                                  g$init$8216$Up9ra
                                                  g$step$8217$Up9ra)))
                                             g$ls/false$8214$Up9ra)
                                           ((case-lambda
                                              ((g$t$8218$Up9ra)
                                               ((case-lambda
                                                  ((g$ls/false$8219$Up9ra)
                                                   (if g$ls/false$8219$Up9ra
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$7462$Up9ra
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$8195$Up9ra)))
                                                       g$ls/false$8219$Up9ra)
                                                     (g$syntax-violation$7462$Up9ra
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8218$Up9ra))))
                                                (g$syntax-dispatch$7356$Up9ra
                                                  g$t$8218$Up9ra
                                                  '_))))
                                            g$t$8213$Up9ra))))
                                      (g$syntax-dispatch$7356$Up9ra
                                        g$t$8213$Up9ra
                                        '(any any any)))))
                                  g$t$8209$Up9ra))))
                            (g$syntax-dispatch$7356$Up9ra
                              g$t$8209$Up9ra
                              '(any any)))))
                        g$x$8208$Up9ra)))))
          ((case-lambda
             ((g$t$8197$Up9ra)
              ((case-lambda
                 ((g$ls/false$8198$Up9ra)
                  (if g$ls/false$8198$Up9ra
                    (apply
                      (case-lambda
                        ((g$binding*$8199$Up9ra
                           g$test$8200$Up9ra
                           g$expr*$8201$Up9ra
                           g$command*$8202$Up9ra)
                         ((case-lambda
                            ((g$t$8203$Up9ra)
                             ((case-lambda
                                ((g$ls/false$8204$Up9ra)
                                 (if g$ls/false$8204$Up9ra
                                   (apply
                                     (case-lambda
                                       ((g$x*$8205$Up9ra
                                          g$init*$8206$Up9ra
                                          g$step*$8207$Up9ra)
                                        (if (g$valid-bound-ids?$7083$Up9ra
                                              g$x*$8205$Up9ra)
                                          (g$bless$7319$Up9ra
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$8205$Up9ra
                                                    (list
                                                      'if
                                                      g$test$8200$Up9ra
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$8201$Up9ra))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$8202$Up9ra
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$8207$Up9ra))))))))
                                              (cons 'loop g$init*$8206$Up9ra)))
                                          (g$syntax-violation$7462$Up9ra
                                            '#f
                                            '"invalid bindings"
                                            g$stx$8195$Up9ra))))
                                     g$ls/false$8204$Up9ra)
                                   (g$syntax-violation$7462$Up9ra
                                     '#f
                                     '"invalid syntax"
                                     g$t$8203$Up9ra))))
                              (g$syntax-dispatch$7356$Up9ra
                                g$t$8203$Up9ra
                                '#(each (any any any))))))
                          (map g$bind$8196$Up9ra g$binding*$8199$Up9ra))))
                      g$ls/false$8198$Up9ra)
                    (g$syntax-violation$7462$Up9ra
                      '#f
                      '"invalid syntax"
                      g$t$8197$Up9ra))))
               (g$syntax-dispatch$7356$Up9ra
                 g$t$8197$Up9ra
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$8195$Up9ra)))))
   (g$let*-macro$7339$Up9ra
     g$let*-macro$10789$Up9ra
     (case-lambda
       ((g$stx$8220$Up9ra)
        ((case-lambda
           ((g$t$8221$Up9ra)
            ((case-lambda
               ((g$ls/false$8222$Up9ra)
                (if (if g$ls/false$8222$Up9ra
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$8223$Up9ra
                               g$rhs*$8224$Up9ra
                               g$b$8225$Up9ra
                               g$b*$8226$Up9ra)
                             (g$for-all$5365$Up9ra
                               g$id?$7078$Up9ra
                               g$lhs*$8223$Up9ra)))
                          g$ls/false$8222$Up9ra))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$8227$Up9ra
                         g$rhs*$8228$Up9ra
                         g$b$8229$Up9ra
                         g$b*$8230$Up9ra)
                       (g$bless$7319$Up9ra
                         ((letrec ((g$f$8231$Up9ra
                                     (case-lambda
                                       ((g$x*$8232$Up9ra)
                                        (if (null? g$x*$8232$Up9ra)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$8229$Up9ra
                                                g$b*$8230$Up9ra)))
                                          (list
                                            'let
                                            (list (car g$x*$8232$Up9ra))
                                            (g$f$8231$Up9ra
                                              (cdr g$x*$8232$Up9ra))))))))
                            g$f$8231$Up9ra)
                          (map list g$lhs*$8227$Up9ra g$rhs*$8228$Up9ra)))))
                    g$ls/false$8222$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$8221$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$8221$Up9ra
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8220$Up9ra))))
   (g$or-macro$7340$Up9ra
     g$or-macro$10790$Up9ra
     (case-lambda
       ((g$stx$8233$Up9ra)
        ((case-lambda
           ((g$t$8234$Up9ra)
            ((case-lambda
               ((g$ls/false$8235$Up9ra)
                (if g$ls/false$8235$Up9ra
                  (apply (case-lambda (() '#f)) g$ls/false$8235$Up9ra)
                  ((case-lambda
                     ((g$t$8236$Up9ra)
                      ((case-lambda
                         ((g$ls/false$8237$Up9ra)
                          (if g$ls/false$8237$Up9ra
                            (apply
                              (case-lambda
                                ((g$e$8238$Up9ra g$e*$8239$Up9ra)
                                 (g$bless$7319$Up9ra
                                   ((letrec ((g$f$8240$Up9ra
                                               (case-lambda
                                                 ((g$e$8241$Up9ra
                                                    g$e*$8242$Up9ra)
                                                  (if (null? g$e*$8242$Up9ra)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8241$Up9ra)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$8241$Up9ra))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$8240$Up9ra
                                                          (car g$e*$8242$Up9ra)
                                                          (cdr g$e*$8242$Up9ra)))))))))
                                      g$f$8240$Up9ra)
                                    g$e$8238$Up9ra
                                    g$e*$8239$Up9ra))))
                              g$ls/false$8237$Up9ra)
                            (g$syntax-violation$7462$Up9ra
                              '#f
                              '"invalid syntax"
                              g$t$8236$Up9ra))))
                       (g$syntax-dispatch$7356$Up9ra
                         g$t$8236$Up9ra
                         '(_ any . each-any)))))
                   g$t$8234$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$8234$Up9ra '(_)))))
         g$stx$8233$Up9ra))))
   (g$and-macro$7341$Up9ra
     g$and-macro$10791$Up9ra
     (case-lambda
       ((g$stx$8243$Up9ra)
        ((case-lambda
           ((g$t$8244$Up9ra)
            ((case-lambda
               ((g$ls/false$8245$Up9ra)
                (if g$ls/false$8245$Up9ra
                  (apply (case-lambda (() '#t)) g$ls/false$8245$Up9ra)
                  ((case-lambda
                     ((g$t$8246$Up9ra)
                      ((case-lambda
                         ((g$ls/false$8247$Up9ra)
                          (if g$ls/false$8247$Up9ra
                            (apply
                              (case-lambda
                                ((g$e$8248$Up9ra g$e*$8249$Up9ra)
                                 (g$bless$7319$Up9ra
                                   ((letrec ((g$f$8250$Up9ra
                                               (case-lambda
                                                 ((g$e$8251$Up9ra
                                                    g$e*$8252$Up9ra)
                                                  (if (null? g$e*$8252$Up9ra)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8251$Up9ra)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$8251$Up9ra
                                                        (cons
                                                          (g$f$8250$Up9ra
                                                            (car g$e*$8252$Up9ra)
                                                            (cdr g$e*$8252$Up9ra))
                                                          '(#f)))))))))
                                      g$f$8250$Up9ra)
                                    g$e$8248$Up9ra
                                    g$e*$8249$Up9ra))))
                              g$ls/false$8247$Up9ra)
                            (g$syntax-violation$7462$Up9ra
                              '#f
                              '"invalid syntax"
                              g$t$8246$Up9ra))))
                       (g$syntax-dispatch$7356$Up9ra
                         g$t$8246$Up9ra
                         '(_ any . each-any)))))
                   g$t$8244$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$8244$Up9ra '(_)))))
         g$stx$8243$Up9ra))))
   (g$cond-macro$7342$Up9ra
     g$cond-macro$10792$Up9ra
     (case-lambda
       ((g$stx$8253$Up9ra)
        ((case-lambda
           ((g$t$8254$Up9ra)
            ((case-lambda
               ((g$ls/false$8255$Up9ra)
                (if g$ls/false$8255$Up9ra
                  (apply
                    (case-lambda
                      ((g$cls$8256$Up9ra g$cls*$8257$Up9ra)
                       (g$bless$7319$Up9ra
                         ((letrec ((g$f$8258$Up9ra
                                     (case-lambda
                                       ((g$cls$8259$Up9ra g$cls*$8260$Up9ra)
                                        (if (null? g$cls*$8260$Up9ra)
                                          ((case-lambda
                                             ((g$t$8261$Up9ra)
                                              ((case-lambda
                                                 ((g$ls/false$8262$Up9ra)
                                                  (if g$ls/false$8262$Up9ra
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8263$Up9ra
                                                           g$e*$8264$Up9ra)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$8263$Up9ra
                                                             g$e*$8264$Up9ra))))
                                                      g$ls/false$8262$Up9ra)
                                                    ((case-lambda
                                                       ((g$t$8265$Up9ra)
                                                        ((case-lambda
                                                           ((g$ls/false$8266$Up9ra)
                                                            (if g$ls/false$8266$Up9ra
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8267$Up9ra
                                                                     g$p$8268$Up9ra)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8267$Up9ra))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8268$Up9ra
                                                                         '(t))))))
                                                                g$ls/false$8266$Up9ra)
                                                              ((case-lambda
                                                                 ((g$t$8269$Up9ra)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8270$Up9ra)
                                                                      (if g$ls/false$8270$Up9ra
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8271$Up9ra)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$8271$Up9ra
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$8270$Up9ra)
                                                                        ((case-lambda
                                                                           ((g$t$8272$Up9ra)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8273$Up9ra)
                                                                                (if g$ls/false$8273$Up9ra
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8274$Up9ra
                                                                                         g$e*$8275$Up9ra)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8274$Up9ra
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8275$Up9ra))))
                                                                                    g$ls/false$8273$Up9ra)
                                                                                  ((case-lambda
                                                                                     ((g$t$8276$Up9ra)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8277$Up9ra)
                                                                                          (if g$ls/false$8277$Up9ra
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7462$Up9ra
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8253$Up9ra)))
                                                                                              g$ls/false$8277$Up9ra)
                                                                                            (g$syntax-violation$7462$Up9ra
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8276$Up9ra))))
                                                                                       (g$syntax-dispatch$7356$Up9ra
                                                                                         g$t$8276$Up9ra
                                                                                         '_))))
                                                                                   g$t$8272$Up9ra))))
                                                                             (g$syntax-dispatch$7356$Up9ra
                                                                               g$t$8272$Up9ra
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8269$Up9ra))))
                                                                   (g$syntax-dispatch$7356$Up9ra
                                                                     g$t$8269$Up9ra
                                                                     '(any)))))
                                                               g$t$8265$Up9ra))))
                                                         (g$syntax-dispatch$7356$Up9ra
                                                           g$t$8265$Up9ra
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8261$Up9ra))))
                                               (g$syntax-dispatch$7356$Up9ra
                                                 g$t$8261$Up9ra
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8259$Up9ra)
                                          ((case-lambda
                                             ((g$t$8278$Up9ra)
                                              ((case-lambda
                                                 ((g$ls/false$8279$Up9ra)
                                                  (if g$ls/false$8279$Up9ra
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8280$Up9ra
                                                           g$e*$8281$Up9ra)
                                                         (g$syntax-violation$7462$Up9ra
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$8253$Up9ra)))
                                                      g$ls/false$8279$Up9ra)
                                                    ((case-lambda
                                                       ((g$t$8282$Up9ra)
                                                        ((case-lambda
                                                           ((g$ls/false$8283$Up9ra)
                                                            (if g$ls/false$8283$Up9ra
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8284$Up9ra
                                                                     g$p$8285$Up9ra)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8284$Up9ra))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8285$Up9ra
                                                                         '(t))
                                                                       (g$f$8258$Up9ra
                                                                         (car g$cls*$8260$Up9ra)
                                                                         (cdr g$cls*$8260$Up9ra))))))
                                                                g$ls/false$8283$Up9ra)
                                                              ((case-lambda
                                                                 ((g$t$8286$Up9ra)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8287$Up9ra)
                                                                      (if g$ls/false$8287$Up9ra
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8288$Up9ra)
                                                                             (list
                                                                               'or
                                                                               g$e$8288$Up9ra
                                                                               (g$f$8258$Up9ra
                                                                                 (car g$cls*$8260$Up9ra)
                                                                                 (cdr g$cls*$8260$Up9ra)))))
                                                                          g$ls/false$8287$Up9ra)
                                                                        ((case-lambda
                                                                           ((g$t$8289$Up9ra)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8290$Up9ra)
                                                                                (if g$ls/false$8290$Up9ra
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8291$Up9ra
                                                                                         g$e*$8292$Up9ra)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8291$Up9ra
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8292$Up9ra)
                                                                                         (g$f$8258$Up9ra
                                                                                           (car g$cls*$8260$Up9ra)
                                                                                           (cdr g$cls*$8260$Up9ra)))))
                                                                                    g$ls/false$8290$Up9ra)
                                                                                  ((case-lambda
                                                                                     ((g$t$8293$Up9ra)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8294$Up9ra)
                                                                                          (if g$ls/false$8294$Up9ra
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7462$Up9ra
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8253$Up9ra)))
                                                                                              g$ls/false$8294$Up9ra)
                                                                                            (g$syntax-violation$7462$Up9ra
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8293$Up9ra))))
                                                                                       (g$syntax-dispatch$7356$Up9ra
                                                                                         g$t$8293$Up9ra
                                                                                         '_))))
                                                                                   g$t$8289$Up9ra))))
                                                                             (g$syntax-dispatch$7356$Up9ra
                                                                               g$t$8289$Up9ra
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8286$Up9ra))))
                                                                   (g$syntax-dispatch$7356$Up9ra
                                                                     g$t$8286$Up9ra
                                                                     '(any)))))
                                                               g$t$8282$Up9ra))))
                                                         (g$syntax-dispatch$7356$Up9ra
                                                           g$t$8282$Up9ra
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8278$Up9ra))))
                                               (g$syntax-dispatch$7356$Up9ra
                                                 g$t$8278$Up9ra
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8259$Up9ra))))))
                            g$f$8258$Up9ra)
                          g$cls$8256$Up9ra
                          g$cls*$8257$Up9ra))))
                    g$ls/false$8255$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$8254$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$8254$Up9ra
               '(_ any . each-any)))))
         g$stx$8253$Up9ra))))
   (g$do-include$7343$Up9ra
     g$do-include$10793$Up9ra
     (case-lambda
       ((g$stx$8295$Up9ra g$id$8296$Up9ra g$filename$8297$Up9ra)
        ((case-lambda
           ((g$filename$8298$Up9ra)
            (begin
              (if (if (string? g$filename$8298$Up9ra)
                    (begin '#f (g$id?$7078$Up9ra g$id$8296$Up9ra))
                    '#f)
                (void)
                (g$syntax-violation$7462$Up9ra
                  '#f
                  '"invalid syntax"
                  g$stx$8295$Up9ra))
              (cons
                (g$bless$7319$Up9ra 'begin)
                (with-input-from-file
                  g$filename$8298$Up9ra
                  (case-lambda
                    (()
                     ((letrec ((g$f$8299$Up9ra
                                 (case-lambda
                                   ((g$ls$8300$Up9ra)
                                    ((case-lambda
                                       ((g$x$8301$Up9ra)
                                        (if (eof-object? g$x$8301$Up9ra)
                                          (reverse g$ls$8300$Up9ra)
                                          (g$f$8299$Up9ra
                                            (cons
                                              (g$datum->stx$7061$Up9ra
                                                g$id$8296$Up9ra
                                                g$x$8301$Up9ra)
                                              g$ls$8300$Up9ra)))))
                                     (read-annotated))))))
                        g$f$8299$Up9ra)
                      '()))))))))
         (g$stx->datum$7089$Up9ra g$filename$8297$Up9ra)))))
   (g$include-macro$7344$Up9ra
     g$include-macro$10794$Up9ra
     (case-lambda
       ((g$e$8302$Up9ra)
        ((case-lambda
           ((g$t$8303$Up9ra)
            ((case-lambda
               ((g$ls/false$8304$Up9ra)
                (if g$ls/false$8304$Up9ra
                  (apply
                    (case-lambda
                      ((g$id$8305$Up9ra g$filename$8306$Up9ra)
                       (g$do-include$7343$Up9ra
                         g$e$8302$Up9ra
                         g$id$8305$Up9ra
                         g$filename$8306$Up9ra)))
                    g$ls/false$8304$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$8303$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$8303$Up9ra '(any any)))))
         g$e$8302$Up9ra))))
   (g$include-into-macro$7345$Up9ra
     g$include-into-macro$10795$Up9ra
     (case-lambda
       ((g$e$8307$Up9ra)
        ((case-lambda
           ((g$t$8308$Up9ra)
            ((case-lambda
               ((g$ls/false$8309$Up9ra)
                (if g$ls/false$8309$Up9ra
                  (apply
                    (case-lambda
                      ((g$id$8310$Up9ra g$filename$8311$Up9ra)
                       (g$do-include$7343$Up9ra
                         g$e$8307$Up9ra
                         g$id$8310$Up9ra
                         g$filename$8311$Up9ra)))
                    g$ls/false$8309$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$8308$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$8308$Up9ra '(_ any any)))))
         g$e$8307$Up9ra))))
   (g$syntax-rules-macro$7346$Up9ra
     g$syntax-rules-macro$10796$Up9ra
     (case-lambda
       ((g$e$8312$Up9ra)
        ((case-lambda
           ((g$t$8313$Up9ra)
            ((case-lambda
               ((g$ls/false$8314$Up9ra)
                (if g$ls/false$8314$Up9ra
                  (apply
                    (case-lambda
                      ((g$lits$8315$Up9ra g$pat*$8316$Up9ra g$tmp*$8317$Up9ra)
                       (begin
                         (g$verify-literals$7359$Up9ra
                           g$lits$8315$Up9ra
                           g$e$8312$Up9ra)
                         (g$bless$7319$Up9ra
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$8315$Up9ra
                                   (map (case-lambda
                                          ((g$pat$8318$Up9ra g$tmp$8319$Up9ra)
                                           ((case-lambda
                                              ((g$t$8320$Up9ra)
                                               ((case-lambda
                                                  ((g$ls/false$8321$Up9ra)
                                                   (if g$ls/false$8321$Up9ra
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$8322$Up9ra)
                                                          (list
                                                            (cons
                                                              'g
                                                              g$rest$8322$Up9ra)
                                                            (list
                                                              'syntax
                                                              g$tmp$8319$Up9ra))))
                                                       g$ls/false$8321$Up9ra)
                                                     ((case-lambda
                                                        ((g$t$8323$Up9ra)
                                                         ((case-lambda
                                                            ((g$ls/false$8324$Up9ra)
                                                             (if g$ls/false$8324$Up9ra
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$7462$Up9ra
                                                                      '#f
                                                                      '"invalid syntax-rules pattern"
                                                                      g$e$8312$Up9ra
                                                                      g$pat$8318$Up9ra)))
                                                                 g$ls/false$8324$Up9ra)
                                                               (g$syntax-violation$7462$Up9ra
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$8323$Up9ra))))
                                                          (g$syntax-dispatch$7356$Up9ra
                                                            g$t$8323$Up9ra
                                                            '_))))
                                                      g$t$8320$Up9ra))))
                                                (g$syntax-dispatch$7356$Up9ra
                                                  g$t$8320$Up9ra
                                                  '(_ . any)))))
                                            g$pat$8318$Up9ra)))
                                        g$pat*$8316$Up9ra
                                        g$tmp*$8317$Up9ra)))))))))
                    g$ls/false$8314$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$8313$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$8313$Up9ra
               '(_ each-any . #(each (any any)))))))
         g$e$8312$Up9ra))))
   (g$quasiquote-macro$7347$Up9ra
     g$quasiquote-macro$10797$Up9ra
     ((case-lambda
        (()
         (letrec* ((g$datum$8325$Up9ra
                     (case-lambda
                       ((g$x$8456$Up9ra)
                        (list
                          (g$scheme-stx$7299$Up9ra 'quote)
                          (g$mkstx$7066$Up9ra g$x$8456$Up9ra '() '() '())))))
                   (g$quasicons*$8341$Up9ra
                     (case-lambda
                       ((g$x$8452$Up9ra g$y$8453$Up9ra)
                        ((letrec ((g$f$8454$Up9ra
                                    (case-lambda
                                      ((g$x$8455$Up9ra)
                                       (if (null? g$x$8455$Up9ra)
                                         g$y$8453$Up9ra
                                         (g$quasicons$8342$Up9ra
                                           (car g$x$8455$Up9ra)
                                           (g$f$8454$Up9ra
                                             (cdr g$x$8455$Up9ra))))))))
                           g$f$8454$Up9ra)
                         g$x$8452$Up9ra))))
                   (g$quasicons$8342$Up9ra
                     (case-lambda
                       ((g$x$8433$Up9ra g$y$8434$Up9ra)
                        ((case-lambda
                           ((g$t$8435$Up9ra)
                            ((case-lambda
                               ((g$ls/false$8436$Up9ra)
                                (if g$ls/false$8436$Up9ra
                                  (apply
                                    (case-lambda
                                      ((g$dy$8437$Up9ra)
                                       ((case-lambda
                                          ((g$t$8438$Up9ra)
                                           ((case-lambda
                                              ((g$ls/false$8439$Up9ra)
                                               (if g$ls/false$8439$Up9ra
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$8440$Up9ra)
                                                      (list
                                                        (g$scheme-stx$7299$Up9ra
                                                          'quote)
                                                        (cons
                                                          g$dx$8440$Up9ra
                                                          g$dy$8437$Up9ra))))
                                                   g$ls/false$8439$Up9ra)
                                                 ((case-lambda
                                                    ((g$t$8441$Up9ra)
                                                     ((case-lambda
                                                        ((g$ls/false$8442$Up9ra)
                                                         (if g$ls/false$8442$Up9ra
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$8443$Up9ra)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8444$Up9ra)
                                                                        (if g$ls/false$8444$Up9ra
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$7299$Up9ra
                                                                                   'list)
                                                                                 g$x$8433$Up9ra)))
                                                                            g$ls/false$8444$Up9ra)
                                                                          ((case-lambda
                                                                             ((g$t$8445$Up9ra)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8446$Up9ra)
                                                                                  (if g$ls/false$8446$Up9ra
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$7299$Up9ra
                                                                                             'cons)
                                                                                           g$x$8433$Up9ra
                                                                                           g$y$8434$Up9ra)))
                                                                                      g$ls/false$8446$Up9ra)
                                                                                    (g$syntax-violation$7462$Up9ra
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8445$Up9ra))))
                                                                               (g$syntax-dispatch$7356$Up9ra
                                                                                 g$t$8445$Up9ra
                                                                                 '_))))
                                                                           g$t$8443$Up9ra))))
                                                                     (g$syntax-dispatch$7356$Up9ra
                                                                       g$t$8443$Up9ra
                                                                       '()))))
                                                                 g$dy$8437$Up9ra)))
                                                             g$ls/false$8442$Up9ra)
                                                           (g$syntax-violation$7462$Up9ra
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$8441$Up9ra))))
                                                      (g$syntax-dispatch$7356$Up9ra
                                                        g$t$8441$Up9ra
                                                        '_))))
                                                  g$t$8438$Up9ra))))
                                            (g$syntax-dispatch$7356$Up9ra
                                              g$t$8438$Up9ra
                                              '(#(scheme-id quote) any)))))
                                        g$x$8433$Up9ra)))
                                    g$ls/false$8436$Up9ra)
                                  ((case-lambda
                                     ((g$t$8447$Up9ra)
                                      ((case-lambda
                                         ((g$ls/false$8448$Up9ra)
                                          (if g$ls/false$8448$Up9ra
                                            (apply
                                              (case-lambda
                                                ((g$stuff$8449$Up9ra)
                                                 (g$cons*$5367$Up9ra
                                                   (g$scheme-stx$7299$Up9ra
                                                     'list)
                                                   g$x$8433$Up9ra
                                                   g$stuff$8449$Up9ra)))
                                              g$ls/false$8448$Up9ra)
                                            ((case-lambda
                                               ((g$t$8450$Up9ra)
                                                ((case-lambda
                                                   ((g$ls/false$8451$Up9ra)
                                                    (if g$ls/false$8451$Up9ra
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$7299$Up9ra
                                                               'cons)
                                                             g$x$8433$Up9ra
                                                             g$y$8434$Up9ra)))
                                                        g$ls/false$8451$Up9ra)
                                                      (g$syntax-violation$7462$Up9ra
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$8450$Up9ra))))
                                                 (g$syntax-dispatch$7356$Up9ra
                                                   g$t$8450$Up9ra
                                                   '_))))
                                             g$t$8447$Up9ra))))
                                       (g$syntax-dispatch$7356$Up9ra
                                         g$t$8447$Up9ra
                                         '(#(scheme-id list) . each-any)))))
                                   g$t$8435$Up9ra))))
                             (g$syntax-dispatch$7356$Up9ra
                               g$t$8435$Up9ra
                               '(#(scheme-id quote) any)))))
                         g$y$8434$Up9ra))))
                   (g$quasiappend$8343$Up9ra
                     (case-lambda
                       ((g$x$8420$Up9ra g$y$8421$Up9ra)
                        ((case-lambda
                           ((g$ls$8422$Up9ra)
                            (if (null? g$ls$8422$Up9ra)
                              (list (g$scheme-stx$7299$Up9ra 'quote) '())
                              (if (null? (cdr g$ls$8422$Up9ra))
                                (car g$ls$8422$Up9ra)
                                (g$cons*$5367$Up9ra
                                  (g$scheme-stx$7299$Up9ra 'append)
                                  g$ls$8422$Up9ra)))))
                         ((letrec ((g$f$8423$Up9ra
                                     (case-lambda
                                       ((g$x$8424$Up9ra)
                                        (if (null? g$x$8424$Up9ra)
                                          ((case-lambda
                                             ((g$t$8425$Up9ra)
                                              ((case-lambda
                                                 ((g$ls/false$8426$Up9ra)
                                                  (if g$ls/false$8426$Up9ra
                                                    (apply
                                                      (case-lambda (() '()))
                                                      g$ls/false$8426$Up9ra)
                                                    ((case-lambda
                                                       ((g$t$8427$Up9ra)
                                                        ((case-lambda
                                                           ((g$ls/false$8428$Up9ra)
                                                            (if g$ls/false$8428$Up9ra
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$8421$Up9ra)))
                                                                g$ls/false$8428$Up9ra)
                                                              (g$syntax-violation$7462$Up9ra
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8427$Up9ra))))
                                                         (g$syntax-dispatch$7356$Up9ra
                                                           g$t$8427$Up9ra
                                                           '_))))
                                                     g$t$8425$Up9ra))))
                                               (g$syntax-dispatch$7356$Up9ra
                                                 g$t$8425$Up9ra
                                                 '(#(scheme-id quote) ())))))
                                           g$y$8421$Up9ra)
                                          ((case-lambda
                                             ((g$t$8429$Up9ra)
                                              ((case-lambda
                                                 ((g$ls/false$8430$Up9ra)
                                                  (if g$ls/false$8430$Up9ra
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$8423$Up9ra
                                                           (cdr g$x$8424$Up9ra))))
                                                      g$ls/false$8430$Up9ra)
                                                    ((case-lambda
                                                       ((g$t$8431$Up9ra)
                                                        ((case-lambda
                                                           ((g$ls/false$8432$Up9ra)
                                                            (if g$ls/false$8432$Up9ra
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$8424$Up9ra)
                                                                     (g$f$8423$Up9ra
                                                                       (cdr g$x$8424$Up9ra)))))
                                                                g$ls/false$8432$Up9ra)
                                                              (g$syntax-violation$7462$Up9ra
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8431$Up9ra))))
                                                         (g$syntax-dispatch$7356$Up9ra
                                                           g$t$8431$Up9ra
                                                           '_))))
                                                     g$t$8429$Up9ra))))
                                               (g$syntax-dispatch$7356$Up9ra
                                                 g$t$8429$Up9ra
                                                 '(#(scheme-id quote) ())))))
                                           (car g$x$8424$Up9ra)))))))
                            g$f$8423$Up9ra)
                          g$x$8420$Up9ra)))))
                   (g$quasivector$8344$Up9ra
                     (case-lambda
                       ((g$x$8395$Up9ra)
                        ((case-lambda
                           ((g$pat-x$8396$Up9ra)
                            ((case-lambda
                               ((g$t$8397$Up9ra)
                                ((case-lambda
                                   ((g$ls/false$8398$Up9ra)
                                    (if g$ls/false$8398$Up9ra
                                      (apply
                                        (case-lambda
                                          ((g$x*$8399$Up9ra)
                                           (list
                                             (g$scheme-stx$7299$Up9ra 'quote)
                                             (list->vector g$x*$8399$Up9ra))))
                                        g$ls/false$8398$Up9ra)
                                      ((case-lambda
                                         ((g$t$8400$Up9ra)
                                          ((case-lambda
                                             ((g$ls/false$8401$Up9ra)
                                              (if g$ls/false$8401$Up9ra
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$8402$Up9ra
                                                                 (case-lambda
                                                                   ((g$x$8403$Up9ra
                                                                      g$k$8404$Up9ra)
                                                                    ((case-lambda
                                                                       ((g$t$8405$Up9ra)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8406$Up9ra)
                                                                            (if g$ls/false$8406$Up9ra
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$8407$Up9ra)
                                                                                   (g$k$8404$Up9ra
                                                                                     (map (case-lambda
                                                                                            ((g$x$8408$Up9ra)
                                                                                             (list
                                                                                               (g$scheme-stx$7299$Up9ra
                                                                                                 'quote)
                                                                                               g$x$8408$Up9ra)))
                                                                                          g$x*$8407$Up9ra))))
                                                                                g$ls/false$8406$Up9ra)
                                                                              ((case-lambda
                                                                                 ((g$t$8409$Up9ra)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$8410$Up9ra)
                                                                                      (if g$ls/false$8410$Up9ra
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$8411$Up9ra)
                                                                                             (g$k$8404$Up9ra
                                                                                               g$x*$8411$Up9ra)))
                                                                                          g$ls/false$8410$Up9ra)
                                                                                        ((case-lambda
                                                                                           ((g$t$8412$Up9ra)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$8413$Up9ra)
                                                                                                (if g$ls/false$8413$Up9ra
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$8414$Up9ra
                                                                                                         g$y$8415$Up9ra)
                                                                                                       (g$f$8402$Up9ra
                                                                                                         g$y$8415$Up9ra
                                                                                                         (case-lambda
                                                                                                           ((g$ls$8416$Up9ra)
                                                                                                            (g$k$8404$Up9ra
                                                                                                              (cons
                                                                                                                g$x$8414$Up9ra
                                                                                                                g$ls$8416$Up9ra)))))))
                                                                                                    g$ls/false$8413$Up9ra)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$8417$Up9ra)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$8418$Up9ra)
                                                                                                          (if g$ls/false$8418$Up9ra
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$7299$Up9ra
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$8396$Up9ra)))
                                                                                                              g$ls/false$8418$Up9ra)
                                                                                                            (g$syntax-violation$7462$Up9ra
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$8417$Up9ra))))
                                                                                                       (g$syntax-dispatch$7356$Up9ra
                                                                                                         g$t$8417$Up9ra
                                                                                                         '_))))
                                                                                                   g$t$8412$Up9ra))))
                                                                                             (g$syntax-dispatch$7356$Up9ra
                                                                                               g$t$8412$Up9ra
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$8409$Up9ra))))
                                                                                   (g$syntax-dispatch$7356$Up9ra
                                                                                     g$t$8409$Up9ra
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$8405$Up9ra))))
                                                                         (g$syntax-dispatch$7356$Up9ra
                                                                           g$t$8405$Up9ra
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$8403$Up9ra)))))
                                                        g$f$8402$Up9ra)
                                                      g$x$8395$Up9ra
                                                      (case-lambda
                                                        ((g$ls$8419$Up9ra)
                                                         (g$cons*$5367$Up9ra
                                                           (g$scheme-stx$7299$Up9ra
                                                             'vector)
                                                           g$ls$8419$Up9ra))))))
                                                  g$ls/false$8401$Up9ra)
                                                (g$syntax-violation$7462$Up9ra
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$8400$Up9ra))))
                                           (g$syntax-dispatch$7356$Up9ra
                                             g$t$8400$Up9ra
                                             '_))))
                                       g$t$8397$Up9ra))))
                                 (g$syntax-dispatch$7356$Up9ra
                                   g$t$8397$Up9ra
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$8396$Up9ra)))
                         g$x$8395$Up9ra))))
                   (g$vquasi$8345$Up9ra
                     (case-lambda
                       ((g$p$8378$Up9ra g$lev$8379$Up9ra)
                        ((case-lambda
                           ((g$t$8380$Up9ra)
                            ((case-lambda
                               ((g$ls/false$8381$Up9ra)
                                (if g$ls/false$8381$Up9ra
                                  (apply
                                    (case-lambda
                                      ((g$p$8382$Up9ra g$q$8383$Up9ra)
                                       ((case-lambda
                                          ((g$t$8384$Up9ra)
                                           ((case-lambda
                                              ((g$ls/false$8385$Up9ra)
                                               (if g$ls/false$8385$Up9ra
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$8386$Up9ra)
                                                      (if (= g$lev$8379$Up9ra
                                                             '0)
                                                        (g$quasicons*$8341$Up9ra
                                                          g$p$8386$Up9ra
                                                          (g$vquasi$8345$Up9ra
                                                            g$q$8383$Up9ra
                                                            g$lev$8379$Up9ra))
                                                        (g$quasicons$8342$Up9ra
                                                          (g$quasicons$8342$Up9ra
                                                            (g$datum$8325$Up9ra
                                                              'unquote)
                                                            (g$quasi$8346$Up9ra
                                                              g$p$8386$Up9ra
                                                              (- g$lev$8379$Up9ra
                                                                 '1)))
                                                          (g$vquasi$8345$Up9ra
                                                            g$q$8383$Up9ra
                                                            g$lev$8379$Up9ra)))))
                                                   g$ls/false$8385$Up9ra)
                                                 ((case-lambda
                                                    ((g$t$8387$Up9ra)
                                                     ((case-lambda
                                                        ((g$ls/false$8388$Up9ra)
                                                         (if g$ls/false$8388$Up9ra
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$8389$Up9ra)
                                                                (if (= g$lev$8379$Up9ra
                                                                       '0)
                                                                  (g$quasiappend$8343$Up9ra
                                                                    g$p$8389$Up9ra
                                                                    (g$vquasi$8345$Up9ra
                                                                      g$q$8383$Up9ra
                                                                      g$lev$8379$Up9ra))
                                                                  (g$quasicons$8342$Up9ra
                                                                    (g$quasicons$8342$Up9ra
                                                                      (g$datum$8325$Up9ra
                                                                        'unquote-splicing)
                                                                      (g$quasi$8346$Up9ra
                                                                        g$p$8389$Up9ra
                                                                        (- g$lev$8379$Up9ra
                                                                           '1)))
                                                                    (g$vquasi$8345$Up9ra
                                                                      g$q$8383$Up9ra
                                                                      g$lev$8379$Up9ra)))))
                                                             g$ls/false$8388$Up9ra)
                                                           ((case-lambda
                                                              ((g$t$8390$Up9ra)
                                                               ((case-lambda
                                                                  ((g$ls/false$8391$Up9ra)
                                                                   (if g$ls/false$8391$Up9ra
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$8392$Up9ra)
                                                                          (g$quasicons$8342$Up9ra
                                                                            (g$quasi$8346$Up9ra
                                                                              g$p$8392$Up9ra
                                                                              g$lev$8379$Up9ra)
                                                                            (g$vquasi$8345$Up9ra
                                                                              g$q$8383$Up9ra
                                                                              g$lev$8379$Up9ra))))
                                                                       g$ls/false$8391$Up9ra)
                                                                     (g$syntax-violation$7462$Up9ra
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$8390$Up9ra))))
                                                                (g$syntax-dispatch$7356$Up9ra
                                                                  g$t$8390$Up9ra
                                                                  'any))))
                                                            g$t$8387$Up9ra))))
                                                      (g$syntax-dispatch$7356$Up9ra
                                                        g$t$8387$Up9ra
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$8384$Up9ra))))
                                            (g$syntax-dispatch$7356$Up9ra
                                              g$t$8384$Up9ra
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$8382$Up9ra)))
                                    g$ls/false$8381$Up9ra)
                                  ((case-lambda
                                     ((g$t$8393$Up9ra)
                                      ((case-lambda
                                         ((g$ls/false$8394$Up9ra)
                                          (if g$ls/false$8394$Up9ra
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$7299$Up9ra
                                                     'quote)
                                                   '())))
                                              g$ls/false$8394$Up9ra)
                                            (g$syntax-violation$7462$Up9ra
                                              '#f
                                              '"invalid syntax"
                                              g$t$8393$Up9ra))))
                                       (g$syntax-dispatch$7356$Up9ra
                                         g$t$8393$Up9ra
                                         '()))))
                                   g$t$8380$Up9ra))))
                             (g$syntax-dispatch$7356$Up9ra
                               g$t$8380$Up9ra
                               '(any . any)))))
                         g$p$8378$Up9ra))))
                   (g$quasi$8346$Up9ra
                     (case-lambda
                       ((g$p$8351$Up9ra g$lev$8352$Up9ra)
                        ((case-lambda
                           ((g$t$8353$Up9ra)
                            ((case-lambda
                               ((g$ls/false$8354$Up9ra)
                                (if g$ls/false$8354$Up9ra
                                  (apply
                                    (case-lambda
                                      ((g$p$8355$Up9ra)
                                       (if (= g$lev$8352$Up9ra '0)
                                         g$p$8355$Up9ra
                                         (g$quasicons$8342$Up9ra
                                           (g$datum$8325$Up9ra 'unquote)
                                           (g$quasi$8346$Up9ra
                                             (list g$p$8355$Up9ra)
                                             (- g$lev$8352$Up9ra '1))))))
                                    g$ls/false$8354$Up9ra)
                                  ((case-lambda
                                     ((g$t$8356$Up9ra)
                                      ((case-lambda
                                         ((g$ls/false$8357$Up9ra)
                                          (if g$ls/false$8357$Up9ra
                                            (apply
                                              (case-lambda
                                                ((g$p$8358$Up9ra g$q$8359$Up9ra)
                                                 (if (= g$lev$8352$Up9ra '0)
                                                   (g$quasicons*$8341$Up9ra
                                                     g$p$8358$Up9ra
                                                     (g$quasi$8346$Up9ra
                                                       g$q$8359$Up9ra
                                                       g$lev$8352$Up9ra))
                                                   (g$quasicons$8342$Up9ra
                                                     (g$quasicons$8342$Up9ra
                                                       (g$datum$8325$Up9ra
                                                         'unquote)
                                                       (g$quasi$8346$Up9ra
                                                         g$p$8358$Up9ra
                                                         (- g$lev$8352$Up9ra
                                                            '1)))
                                                     (g$quasi$8346$Up9ra
                                                       g$q$8359$Up9ra
                                                       g$lev$8352$Up9ra)))))
                                              g$ls/false$8357$Up9ra)
                                            ((case-lambda
                                               ((g$t$8360$Up9ra)
                                                ((case-lambda
                                                   ((g$ls/false$8361$Up9ra)
                                                    (if g$ls/false$8361$Up9ra
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$8362$Up9ra
                                                             g$q$8363$Up9ra)
                                                           (if (= g$lev$8352$Up9ra
                                                                  '0)
                                                             (g$quasiappend$8343$Up9ra
                                                               g$p$8362$Up9ra
                                                               (g$quasi$8346$Up9ra
                                                                 g$q$8363$Up9ra
                                                                 g$lev$8352$Up9ra))
                                                             (g$quasicons$8342$Up9ra
                                                               (g$quasicons$8342$Up9ra
                                                                 (g$datum$8325$Up9ra
                                                                   'unquote-splicing)
                                                                 (g$quasi$8346$Up9ra
                                                                   g$p$8362$Up9ra
                                                                   (- g$lev$8352$Up9ra
                                                                      '1)))
                                                               (g$quasi$8346$Up9ra
                                                                 g$q$8363$Up9ra
                                                                 g$lev$8352$Up9ra)))))
                                                        g$ls/false$8361$Up9ra)
                                                      ((case-lambda
                                                         ((g$t$8364$Up9ra)
                                                          ((case-lambda
                                                             ((g$ls/false$8365$Up9ra)
                                                              (if g$ls/false$8365$Up9ra
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$8366$Up9ra)
                                                                     (g$quasicons$8342$Up9ra
                                                                       (g$datum$8325$Up9ra
                                                                         'quasiquote)
                                                                       (g$quasi$8346$Up9ra
                                                                         (list
                                                                           g$p$8366$Up9ra)
                                                                         (+ g$lev$8352$Up9ra
                                                                            '1)))))
                                                                  g$ls/false$8365$Up9ra)
                                                                ((case-lambda
                                                                   ((g$t$8367$Up9ra)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8368$Up9ra)
                                                                        (if g$ls/false$8368$Up9ra
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$8369$Up9ra
                                                                                 g$q$8370$Up9ra)
                                                                               (g$quasicons$8342$Up9ra
                                                                                 (g$quasi$8346$Up9ra
                                                                                   g$p$8369$Up9ra
                                                                                   g$lev$8352$Up9ra)
                                                                                 (g$quasi$8346$Up9ra
                                                                                   g$q$8370$Up9ra
                                                                                   g$lev$8352$Up9ra))))
                                                                            g$ls/false$8368$Up9ra)
                                                                          ((case-lambda
                                                                             ((g$t$8371$Up9ra)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8372$Up9ra)
                                                                                  (if (if g$ls/false$8372$Up9ra
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$8373$Up9ra)
                                                                                               (not (g$stx?$7050$Up9ra
                                                                                                      g$x$8373$Up9ra))))
                                                                                            g$ls/false$8372$Up9ra))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$8374$Up9ra)
                                                                                         (g$quasivector$8344$Up9ra
                                                                                           (g$vquasi$8345$Up9ra
                                                                                             g$x$8374$Up9ra
                                                                                             g$lev$8352$Up9ra))))
                                                                                      g$ls/false$8372$Up9ra)
                                                                                    ((case-lambda
                                                                                       ((g$t$8375$Up9ra)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8376$Up9ra)
                                                                                            (if g$ls/false$8376$Up9ra
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$8377$Up9ra)
                                                                                                   (list
                                                                                                     (g$scheme-stx$7299$Up9ra
                                                                                                       'quote)
                                                                                                     g$p$8377$Up9ra)))
                                                                                                g$ls/false$8376$Up9ra)
                                                                                              (g$syntax-violation$7462$Up9ra
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$8375$Up9ra))))
                                                                                         (g$syntax-dispatch$7356$Up9ra
                                                                                           g$t$8375$Up9ra
                                                                                           'any))))
                                                                                     g$t$8371$Up9ra))))
                                                                               (g$syntax-dispatch$7356$Up9ra
                                                                                 g$t$8371$Up9ra
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$8367$Up9ra))))
                                                                     (g$syntax-dispatch$7356$Up9ra
                                                                       g$t$8367$Up9ra
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$8364$Up9ra))))
                                                           (g$syntax-dispatch$7356$Up9ra
                                                             g$t$8364$Up9ra
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$8360$Up9ra))))
                                                 (g$syntax-dispatch$7356$Up9ra
                                                   g$t$8360$Up9ra
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8356$Up9ra))))
                                       (g$syntax-dispatch$7356$Up9ra
                                         g$t$8356$Up9ra
                                         '((#(scheme-id unquote) . each-any)
                                           .
                                           any)))))
                                   g$t$8353$Up9ra))))
                             (g$syntax-dispatch$7356$Up9ra
                               g$t$8353$Up9ra
                               '(#(scheme-id unquote) any)))))
                         g$p$8351$Up9ra)))))
           (case-lambda
             ((g$x$8347$Up9ra)
              ((case-lambda
                 ((g$t$8348$Up9ra)
                  ((case-lambda
                     ((g$ls/false$8349$Up9ra)
                      (if g$ls/false$8349$Up9ra
                        (apply
                          (case-lambda
                            ((g$e$8350$Up9ra)
                             (g$quasi$8346$Up9ra g$e$8350$Up9ra '0)))
                          g$ls/false$8349$Up9ra)
                        (g$syntax-violation$7462$Up9ra
                          '#f
                          '"invalid syntax"
                          g$t$8348$Up9ra))))
                   (g$syntax-dispatch$7356$Up9ra g$t$8348$Up9ra '(_ any)))))
               g$x$8347$Up9ra))))))))
   (g$quasisyntax-macro$7348$Up9ra
     g$quasisyntax-macro$10798$Up9ra
     ((case-lambda
        (()
         (letrec* ((g$quasi$8457$Up9ra
                     (case-lambda
                       ((g$p$8471$Up9ra g$lev$8472$Up9ra)
                        ((case-lambda
                           ((g$t$8473$Up9ra)
                            ((case-lambda
                               ((g$ls/false$8474$Up9ra)
                                (if g$ls/false$8474$Up9ra
                                  (apply
                                    (case-lambda
                                      ((g$p$8475$Up9ra)
                                       (if (= g$lev$8472$Up9ra '0)
                                         ((case-lambda
                                            ((g$g$8476$Up9ra)
                                             (values
                                               (list g$g$8476$Up9ra)
                                               (list g$p$8475$Up9ra)
                                               g$g$8476$Up9ra)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$8457$Up9ra
                                                g$p$8475$Up9ra
                                                (- g$lev$8472$Up9ra '1))))
                                           (case-lambda
                                             ((g$lhs*$8480$Up9ra
                                                g$rhs*$8481$Up9ra
                                                g$p$8482$Up9ra)
                                              ((case-lambda
                                                 ((g$p$8483$Up9ra
                                                    g$rhs*$8484$Up9ra
                                                    g$lhs*$8485$Up9ra)
                                                  (values
                                                    g$lhs*$8485$Up9ra
                                                    g$rhs*$8484$Up9ra
                                                    (list
                                                      'unsyntax
                                                      g$p$8483$Up9ra))))
                                               g$p$8482$Up9ra
                                               g$rhs*$8481$Up9ra
                                               g$lhs*$8480$Up9ra)))))))
                                    g$ls/false$8474$Up9ra)
                                  ((case-lambda
                                     ((g$t$8486$Up9ra)
                                      ((case-lambda
                                         ((g$ls/false$8487$Up9ra)
                                          (if (if g$ls/false$8487$Up9ra
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$8472$Up9ra '0)))
                                                    g$ls/false$8487$Up9ra))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$7462$Up9ra
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$8471$Up9ra)))
                                              g$ls/false$8487$Up9ra)
                                            ((case-lambda
                                               ((g$t$8488$Up9ra)
                                                ((case-lambda
                                                   ((g$ls/false$8489$Up9ra)
                                                    (if g$ls/false$8489$Up9ra
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$8490$Up9ra
                                                             g$q$8491$Up9ra)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$8457$Up9ra
                                                                  g$q$8491$Up9ra
                                                                  g$lev$8472$Up9ra)))
                                                             (case-lambda
                                                               ((g$lhs*$8495$Up9ra
                                                                  g$rhs*$8496$Up9ra
                                                                  g$q$8497$Up9ra)
                                                                ((case-lambda
                                                                   ((g$q$8498$Up9ra
                                                                      g$rhs*$8499$Up9ra
                                                                      g$lhs*$8500$Up9ra)
                                                                    (if (= g$lev$8472$Up9ra
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g$8501$Up9ra)
                                                                          (values
                                                                            (cons
                                                                              (cons
                                                                                g$g$8501$Up9ra
                                                                                '(...))
                                                                              g$lhs*$8500$Up9ra)
                                                                            (cons
                                                                              g$p$8490$Up9ra
                                                                              g$rhs*$8499$Up9ra)
                                                                            (cons
                                                                              g$g$8501$Up9ra
                                                                              (cons
                                                                                '...
                                                                                g$q$8498$Up9ra)))))
                                                                       (gensym))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$8457$Up9ra
                                                                             g$p$8490$Up9ra
                                                                             (- g$lev$8472$Up9ra
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$8505$Up9ra
                                                                             g$rhs2*$8506$Up9ra
                                                                             g$p$8507$Up9ra)
                                                                           ((case-lambda
                                                                              ((g$p$8508$Up9ra
                                                                                 g$rhs2*$8509$Up9ra
                                                                                 g$lhs2*$8510$Up9ra)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$8510$Up9ra
                                                                                   g$lhs*$8500$Up9ra)
                                                                                 (append
                                                                                   g$rhs2*$8509$Up9ra
                                                                                   g$rhs*$8499$Up9ra)
                                                                                 (cons
                                                                                   (list
                                                                                     'unsyntax-splicing
                                                                                     g$p$8508$Up9ra)
                                                                                   g$q$8498$Up9ra))))
                                                                            g$p$8507$Up9ra
                                                                            g$rhs2*$8506$Up9ra
                                                                            g$lhs2*$8505$Up9ra)))))))
                                                                 g$q$8497$Up9ra
                                                                 g$rhs*$8496$Up9ra
                                                                 g$lhs*$8495$Up9ra))))))
                                                        g$ls/false$8489$Up9ra)
                                                      ((case-lambda
                                                         ((g$t$8511$Up9ra)
                                                          ((case-lambda
                                                             ((g$ls/false$8512$Up9ra)
                                                              (if (if g$ls/false$8512$Up9ra
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          (()
                                                                           (= g$lev$8472$Up9ra
                                                                              '0)))
                                                                        g$ls/false$8512$Up9ra))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    (()
                                                                     (g$syntax-violation$7462$Up9ra
                                                                       '#f
                                                                       '"incorrect use of unsyntax-splicing"
                                                                       g$p$8471$Up9ra)))
                                                                  g$ls/false$8512$Up9ra)
                                                                ((case-lambda
                                                                   ((g$t$8513$Up9ra)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8514$Up9ra)
                                                                        (if g$ls/false$8514$Up9ra
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$8515$Up9ra)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$quasi$8457$Up9ra
                                                                                      g$p$8515$Up9ra
                                                                                      (+ g$lev$8472$Up9ra
                                                                                         '1))))
                                                                                 (case-lambda
                                                                                   ((g$lhs*$8519$Up9ra
                                                                                      g$rhs*$8520$Up9ra
                                                                                      g$p$8521$Up9ra)
                                                                                    ((case-lambda
                                                                                       ((g$p$8522$Up9ra
                                                                                          g$rhs*$8523$Up9ra
                                                                                          g$lhs*$8524$Up9ra)
                                                                                        (values
                                                                                          g$lhs*$8524$Up9ra
                                                                                          g$rhs*$8523$Up9ra
                                                                                          (list
                                                                                            'quasisyntax
                                                                                            g$p$8522$Up9ra))))
                                                                                     g$p$8521$Up9ra
                                                                                     g$rhs*$8520$Up9ra
                                                                                     g$lhs*$8519$Up9ra))))))
                                                                            g$ls/false$8514$Up9ra)
                                                                          ((case-lambda
                                                                             ((g$t$8525$Up9ra)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8526$Up9ra)
                                                                                  (if g$ls/false$8526$Up9ra
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$8527$Up9ra
                                                                                           g$q$8528$Up9ra)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$8457$Up9ra
                                                                                                g$p$8527$Up9ra
                                                                                                g$lev$8472$Up9ra)))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$8535$Up9ra
                                                                                                g$rhs*$8536$Up9ra
                                                                                                g$p$8537$Up9ra)
                                                                                              (call-with-values
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$quasi$8457$Up9ra
                                                                                                     g$q$8528$Up9ra
                                                                                                     g$lev$8472$Up9ra)))
                                                                                                (case-lambda
                                                                                                  ((g$lhs2*$8538$Up9ra
                                                                                                     g$rhs2*$8539$Up9ra
                                                                                                     g$q$8540$Up9ra)
                                                                                                   ((case-lambda
                                                                                                      ((g$q$8541$Up9ra
                                                                                                         g$rhs2*$8542$Up9ra
                                                                                                         g$lhs2*$8543$Up9ra
                                                                                                         g$p$8544$Up9ra
                                                                                                         g$rhs*$8545$Up9ra
                                                                                                         g$lhs*$8546$Up9ra)
                                                                                                       (values
                                                                                                         (append
                                                                                                           g$lhs2*$8543$Up9ra
                                                                                                           g$lhs*$8546$Up9ra)
                                                                                                         (append
                                                                                                           g$rhs2*$8542$Up9ra
                                                                                                           g$rhs*$8545$Up9ra)
                                                                                                         (cons
                                                                                                           g$p$8544$Up9ra
                                                                                                           g$q$8541$Up9ra))))
                                                                                                    g$q$8540$Up9ra
                                                                                                    g$rhs2*$8539$Up9ra
                                                                                                    g$lhs2*$8538$Up9ra
                                                                                                    g$p$8537$Up9ra
                                                                                                    g$rhs*$8536$Up9ra
                                                                                                    g$lhs*$8535$Up9ra)))))))))
                                                                                      g$ls/false$8526$Up9ra)
                                                                                    ((case-lambda
                                                                                       ((g$t$8547$Up9ra)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8548$Up9ra)
                                                                                            (if (if g$ls/false$8548$Up9ra
                                                                                                  (begin
                                                                                                    '#f
                                                                                                    (apply
                                                                                                      (case-lambda
                                                                                                        ((g$x$8549$Up9ra)
                                                                                                         (not (g$stx?$7050$Up9ra
                                                                                                                g$p$8471$Up9ra))))
                                                                                                      g$ls/false$8548$Up9ra))
                                                                                                  '#f)
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$x$8550$Up9ra)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        ((letrec ((g$f$8554$Up9ra
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$8555$Up9ra)
                                                                                                                       (if (null?
                                                                                                                             g$x$8555$Up9ra)
                                                                                                                         (values
                                                                                                                           '()
                                                                                                                           '()
                                                                                                                           '())
                                                                                                                         (call-with-values
                                                                                                                           (case-lambda
                                                                                                                             (()
                                                                                                                              (g$quasi$8457$Up9ra
                                                                                                                                (car g$x$8555$Up9ra)
                                                                                                                                g$lev$8472$Up9ra)))
                                                                                                                           (case-lambda
                                                                                                                             ((g$lhs*$8559$Up9ra
                                                                                                                                g$rhs*$8560$Up9ra
                                                                                                                                g$a$8561$Up9ra)
                                                                                                                              ((case-lambda
                                                                                                                                 ((g$a$8562$Up9ra
                                                                                                                                    g$rhs*$8563$Up9ra
                                                                                                                                    g$lhs*$8564$Up9ra)
                                                                                                                                  (call-with-values
                                                                                                                                    (case-lambda
                                                                                                                                      (()
                                                                                                                                       (g$f$8554$Up9ra
                                                                                                                                         (cdr g$x$8555$Up9ra))))
                                                                                                                                    (case-lambda
                                                                                                                                      ((g$lhs2*$8568$Up9ra
                                                                                                                                         g$rhs2*$8569$Up9ra
                                                                                                                                         g$d$8570$Up9ra)
                                                                                                                                       ((case-lambda
                                                                                                                                          ((g$d$8571$Up9ra
                                                                                                                                             g$rhs2*$8572$Up9ra
                                                                                                                                             g$lhs2*$8573$Up9ra)
                                                                                                                                           (values
                                                                                                                                             (append
                                                                                                                                               g$lhs*$8564$Up9ra
                                                                                                                                               g$lhs2*$8573$Up9ra)
                                                                                                                                             (append
                                                                                                                                               g$rhs*$8563$Up9ra
                                                                                                                                               g$rhs2*$8572$Up9ra)
                                                                                                                                             (cons
                                                                                                                                               g$a$8562$Up9ra
                                                                                                                                               g$d$8571$Up9ra))))
                                                                                                                                        g$d$8570$Up9ra
                                                                                                                                        g$rhs2*$8569$Up9ra
                                                                                                                                        g$lhs2*$8568$Up9ra))))))
                                                                                                                               g$a$8561$Up9ra
                                                                                                                               g$rhs*$8560$Up9ra
                                                                                                                               g$lhs*$8559$Up9ra)))))))))
                                                                                                           g$f$8554$Up9ra)
                                                                                                         g$x$8550$Up9ra)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$8574$Up9ra
                                                                                                          g$rhs*$8575$Up9ra
                                                                                                          g$x*$8576$Up9ra)
                                                                                                        ((case-lambda
                                                                                                           ((g$x*$8577$Up9ra
                                                                                                              g$rhs*$8578$Up9ra
                                                                                                              g$lhs*$8579$Up9ra)
                                                                                                            (values
                                                                                                              g$lhs*$8579$Up9ra
                                                                                                              g$rhs*$8578$Up9ra
                                                                                                              (list->vector
                                                                                                                g$x*$8577$Up9ra))))
                                                                                                         g$x*$8576$Up9ra
                                                                                                         g$rhs*$8575$Up9ra
                                                                                                         g$lhs*$8574$Up9ra))))))
                                                                                                g$ls/false$8548$Up9ra)
                                                                                              ((case-lambda
                                                                                                 ((g$t$8580$Up9ra)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$8581$Up9ra)
                                                                                                      (if g$ls/false$8581$Up9ra
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (values
                                                                                                               '()
                                                                                                               '()
                                                                                                               g$p$8471$Up9ra)))
                                                                                                          g$ls/false$8581$Up9ra)
                                                                                                        (g$syntax-violation$7462$Up9ra
                                                                                                          '#f
                                                                                                          '"invalid syntax"
                                                                                                          g$t$8580$Up9ra))))
                                                                                                   (g$syntax-dispatch$7356$Up9ra
                                                                                                     g$t$8580$Up9ra
                                                                                                     '_))))
                                                                                               g$t$8547$Up9ra))))
                                                                                         (g$syntax-dispatch$7356$Up9ra
                                                                                           g$t$8547$Up9ra
                                                                                           '#(vector
                                                                                              each-any)))))
                                                                                     g$t$8525$Up9ra))))
                                                                               (g$syntax-dispatch$7356$Up9ra
                                                                                 g$t$8525$Up9ra
                                                                                 '(any .
                                                                                       any)))))
                                                                           g$t$8513$Up9ra))))
                                                                     (g$syntax-dispatch$7356$Up9ra
                                                                       g$t$8513$Up9ra
                                                                       '(#(scheme-id
                                                                           quasisyntax)
                                                                         any)))))
                                                                 g$t$8511$Up9ra))))
                                                           (g$syntax-dispatch$7356$Up9ra
                                                             g$t$8511$Up9ra
                                                             '#(scheme-id
                                                                unsyntax-splicing)))))
                                                       g$t$8488$Up9ra))))
                                                 (g$syntax-dispatch$7356$Up9ra
                                                   g$t$8488$Up9ra
                                                   '((#(scheme-id
                                                        unsyntax-splicing)
                                                      any)
                                                     .
                                                     any)))))
                                             g$t$8486$Up9ra))))
                                       (g$syntax-dispatch$7356$Up9ra
                                         g$t$8486$Up9ra
                                         '#(scheme-id unsyntax)))))
                                   g$t$8473$Up9ra))))
                             (g$syntax-dispatch$7356$Up9ra
                               g$t$8473$Up9ra
                               '(#(scheme-id unsyntax) any)))))
                         g$p$8471$Up9ra)))))
           (case-lambda
             ((g$x$8458$Up9ra)
              ((case-lambda
                 ((g$t$8459$Up9ra)
                  ((case-lambda
                     ((g$ls/false$8460$Up9ra)
                      (if g$ls/false$8460$Up9ra
                        (apply
                          (case-lambda
                            ((g$e$8461$Up9ra)
                             (call-with-values
                               (case-lambda
                                 (() (g$quasi$8457$Up9ra g$e$8461$Up9ra '0)))
                               (case-lambda
                                 ((g$lhs*$8465$Up9ra
                                    g$rhs*$8466$Up9ra
                                    g$v$8467$Up9ra)
                                  ((case-lambda
                                     ((g$v$8468$Up9ra
                                        g$rhs*$8469$Up9ra
                                        g$lhs*$8470$Up9ra)
                                      (g$bless$7319$Up9ra
                                        (list
                                          'syntax-case
                                          (cons 'list g$rhs*$8469$Up9ra)
                                          '()
                                          (list
                                            g$lhs*$8470$Up9ra
                                            (list 'syntax g$v$8468$Up9ra))))))
                                   g$v$8467$Up9ra
                                   g$rhs*$8466$Up9ra
                                   g$lhs*$8465$Up9ra))))))
                          g$ls/false$8460$Up9ra)
                        (g$syntax-violation$7462$Up9ra
                          '#f
                          '"invalid syntax"
                          g$t$8459$Up9ra))))
                   (g$syntax-dispatch$7356$Up9ra g$t$8459$Up9ra '(_ any)))))
               g$x$8458$Up9ra))))))))
   (g$define-struct-macro$7349$Up9ra
     g$define-struct-macro$10799$Up9ra
     (case-lambda
       ((g$stx$8582$Up9ra)
        (g$syntax-violation$7462$Up9ra
          '#f
          '"define-struct not supported"
          g$stx$8582$Up9ra))))
   (g$define-record-type-macro$7350$Up9ra
     g$define-record-type-macro$10800$Up9ra
     (case-lambda
       ((g$x$8583$Up9ra)
        (letrec* ((g$id$8584$Up9ra
                    (case-lambda
                      ((g$ctxt$8836$Up9ra . g$str*$8837$Up9ra)
                       (g$datum->syntax$7464$Up9ra
                         g$ctxt$8836$Up9ra
                         (string->symbol
                           (apply
                             string-append
                             (map (case-lambda
                                    ((g$x$8838$Up9ra)
                                     (if (symbol? g$x$8838$Up9ra)
                                       (symbol->string g$x$8838$Up9ra)
                                       (if (string? g$x$8838$Up9ra)
                                         g$x$8838$Up9ra
                                         (assertion-violation
                                           'define-record-type
                                           '"BUG")))))
                                  g$str*$8837$Up9ra)))))))
                  (g$get-record-name$8585$Up9ra
                    (case-lambda
                      ((g$spec$8827$Up9ra)
                       ((case-lambda
                          ((g$t$8828$Up9ra)
                           ((case-lambda
                              ((g$ls/false$8829$Up9ra)
                               (if g$ls/false$8829$Up9ra
                                 (apply
                                   (case-lambda
                                     ((g$foo$8830$Up9ra
                                        g$make-foo$8831$Up9ra
                                        g$foo?$8832$Up9ra)
                                      g$foo$8830$Up9ra))
                                   g$ls/false$8829$Up9ra)
                                 ((case-lambda
                                    ((g$t$8833$Up9ra)
                                     ((case-lambda
                                        ((g$ls/false$8834$Up9ra)
                                         (if g$ls/false$8834$Up9ra
                                           (apply
                                             (case-lambda
                                               ((g$foo$8835$Up9ra)
                                                g$foo$8835$Up9ra))
                                             g$ls/false$8834$Up9ra)
                                           (g$syntax-violation$7462$Up9ra
                                             '#f
                                             '"invalid syntax"
                                             g$t$8833$Up9ra))))
                                      (g$syntax-dispatch$7356$Up9ra
                                        g$t$8833$Up9ra
                                        'any))))
                                  g$t$8828$Up9ra))))
                            (g$syntax-dispatch$7356$Up9ra
                              g$t$8828$Up9ra
                              '(any any any)))))
                        g$spec$8827$Up9ra))))
                  (g$get-record-constructor-name$8586$Up9ra
                    (case-lambda
                      ((g$spec$8817$Up9ra)
                       ((case-lambda
                          ((g$t$8818$Up9ra)
                           ((case-lambda
                              ((g$ls/false$8819$Up9ra)
                               (if g$ls/false$8819$Up9ra
                                 (apply
                                   (case-lambda
                                     ((g$foo$8820$Up9ra
                                        g$make-foo$8821$Up9ra
                                        g$foo?$8822$Up9ra)
                                      g$make-foo$8821$Up9ra))
                                   g$ls/false$8819$Up9ra)
                                 ((case-lambda
                                    ((g$t$8823$Up9ra)
                                     ((case-lambda
                                        ((g$ls/false$8824$Up9ra)
                                         (if (if g$ls/false$8824$Up9ra
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$8825$Up9ra)
                                                      (g$id?$7078$Up9ra
                                                        g$foo$8825$Up9ra)))
                                                   g$ls/false$8824$Up9ra))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$8826$Up9ra)
                                                (g$id$8584$Up9ra
                                                  g$foo$8826$Up9ra
                                                  '"make-"
                                                  (g$stx->datum$7089$Up9ra
                                                    g$foo$8826$Up9ra))))
                                             g$ls/false$8824$Up9ra)
                                           (g$syntax-violation$7462$Up9ra
                                             '#f
                                             '"invalid syntax"
                                             g$t$8823$Up9ra))))
                                      (g$syntax-dispatch$7356$Up9ra
                                        g$t$8823$Up9ra
                                        'any))))
                                  g$t$8818$Up9ra))))
                            (g$syntax-dispatch$7356$Up9ra
                              g$t$8818$Up9ra
                              '(any any any)))))
                        g$spec$8817$Up9ra))))
                  (g$get-record-predicate-name$8587$Up9ra
                    (case-lambda
                      ((g$spec$8807$Up9ra)
                       ((case-lambda
                          ((g$t$8808$Up9ra)
                           ((case-lambda
                              ((g$ls/false$8809$Up9ra)
                               (if g$ls/false$8809$Up9ra
                                 (apply
                                   (case-lambda
                                     ((g$foo$8810$Up9ra
                                        g$make-foo$8811$Up9ra
                                        g$foo?$8812$Up9ra)
                                      g$foo?$8812$Up9ra))
                                   g$ls/false$8809$Up9ra)
                                 ((case-lambda
                                    ((g$t$8813$Up9ra)
                                     ((case-lambda
                                        ((g$ls/false$8814$Up9ra)
                                         (if (if g$ls/false$8814$Up9ra
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$8815$Up9ra)
                                                      (g$id?$7078$Up9ra
                                                        g$foo$8815$Up9ra)))
                                                   g$ls/false$8814$Up9ra))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$8816$Up9ra)
                                                (g$id$8584$Up9ra
                                                  g$foo$8816$Up9ra
                                                  (g$stx->datum$7089$Up9ra
                                                    g$foo$8816$Up9ra)
                                                  '"?")))
                                             g$ls/false$8814$Up9ra)
                                           (g$syntax-violation$7462$Up9ra
                                             '#f
                                             '"invalid syntax"
                                             g$t$8813$Up9ra))))
                                      (g$syntax-dispatch$7356$Up9ra
                                        g$t$8813$Up9ra
                                        'any))))
                                  g$t$8808$Up9ra))))
                            (g$syntax-dispatch$7356$Up9ra
                              g$t$8808$Up9ra
                              '(any any any)))))
                        g$spec$8807$Up9ra))))
                  (g$get-clause$8588$Up9ra
                    (case-lambda
                      ((g$id$8798$Up9ra g$ls$8799$Up9ra)
                       ((case-lambda
                          ((g$t$8800$Up9ra)
                           ((case-lambda
                              ((g$ls/false$8801$Up9ra)
                               (if g$ls/false$8801$Up9ra
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$8801$Up9ra)
                                 ((case-lambda
                                    ((g$t$8802$Up9ra)
                                     ((case-lambda
                                        ((g$ls/false$8803$Up9ra)
                                         (if g$ls/false$8803$Up9ra
                                           (apply
                                             (case-lambda
                                               ((g$x$8804$Up9ra
                                                  g$rest$8805$Up9ra
                                                  g$ls$8806$Up9ra)
                                                (if (g$free-id=?$7082$Up9ra
                                                      (g$bless$7319$Up9ra
                                                        g$id$8798$Up9ra)
                                                      g$x$8804$Up9ra)
                                                  (cons
                                                    g$x$8804$Up9ra
                                                    g$rest$8805$Up9ra)
                                                  (g$get-clause$8588$Up9ra
                                                    g$id$8798$Up9ra
                                                    g$ls$8806$Up9ra))))
                                             g$ls/false$8803$Up9ra)
                                           (g$syntax-violation$7462$Up9ra
                                             '#f
                                             '"invalid syntax"
                                             g$t$8802$Up9ra))))
                                      (g$syntax-dispatch$7356$Up9ra
                                        g$t$8802$Up9ra
                                        '((any . any) . any)))))
                                  g$t$8800$Up9ra))))
                            (g$syntax-dispatch$7356$Up9ra g$t$8800$Up9ra '()))))
                        g$ls$8799$Up9ra))))
                  (g$foo-rtd-code$8589$Up9ra
                    (case-lambda
                      ((g$name$8757$Up9ra
                         g$clause*$8758$Up9ra
                         g$parent-rtd-code$8759$Up9ra)
                       (letrec* ((g$convert-field-spec*$8760$Up9ra
                                   (case-lambda
                                     ((g$ls$8785$Up9ra)
                                      (list->vector
                                        (map (case-lambda
                                               ((g$x$8786$Up9ra)
                                                ((case-lambda
                                                   ((g$t$8787$Up9ra)
                                                    ((case-lambda
                                                       ((g$ls/false$8788$Up9ra)
                                                        (if g$ls/false$8788$Up9ra
                                                          (apply
                                                            (case-lambda
                                                              ((g$name$8789$Up9ra
                                                                 g$rest$8790$Up9ra)
                                                               (list
                                                                 'mutable
                                                                 g$name$8789$Up9ra)))
                                                            g$ls/false$8788$Up9ra)
                                                          ((case-lambda
                                                             ((g$t$8791$Up9ra)
                                                              ((case-lambda
                                                                 ((g$ls/false$8792$Up9ra)
                                                                  (if g$ls/false$8792$Up9ra
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$name$8793$Up9ra
                                                                           g$rest$8794$Up9ra)
                                                                         (list
                                                                           'immutable
                                                                           g$name$8793$Up9ra)))
                                                                      g$ls/false$8792$Up9ra)
                                                                    ((case-lambda
                                                                       ((g$t$8795$Up9ra)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8796$Up9ra)
                                                                            (if g$ls/false$8796$Up9ra
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$name$8797$Up9ra)
                                                                                   (list
                                                                                     'immutable
                                                                                     g$name$8797$Up9ra)))
                                                                                g$ls/false$8796$Up9ra)
                                                                              (g$syntax-violation$7462$Up9ra
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8795$Up9ra))))
                                                                         (g$syntax-dispatch$7356$Up9ra
                                                                           g$t$8795$Up9ra
                                                                           'any))))
                                                                     g$t$8791$Up9ra))))
                                                               (g$syntax-dispatch$7356$Up9ra
                                                                 g$t$8791$Up9ra
                                                                 '(#(scheme-id
                                                                     immutable)
                                                                   any
                                                                   .
                                                                   any)))))
                                                           g$t$8787$Up9ra))))
                                                     (g$syntax-dispatch$7356$Up9ra
                                                       g$t$8787$Up9ra
                                                       '(#(scheme-id mutable)
                                                         any
                                                         .
                                                         any)))))
                                                 g$x$8786$Up9ra)))
                                             g$ls$8785$Up9ra))))))
                         ((case-lambda
                            ((g$uid-code$8761$Up9ra
                               g$sealed?$8762$Up9ra
                               g$opaque?$8763$Up9ra
                               g$fields$8764$Up9ra)
                             (g$bless$7319$Up9ra
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$8757$Up9ra)
                                 g$parent-rtd-code$8759$Up9ra
                                 g$uid-code$8761$Up9ra
                                 g$sealed?$8762$Up9ra
                                 g$opaque?$8763$Up9ra
                                 g$fields$8764$Up9ra))))
                          ((case-lambda
                             ((g$t$8765$Up9ra)
                              ((case-lambda
                                 ((g$ls/false$8766$Up9ra)
                                  (if g$ls/false$8766$Up9ra
                                    (apply
                                      (case-lambda (() (list 'quote (gensym))))
                                      g$ls/false$8766$Up9ra)
                                    ((case-lambda
                                       ((g$t$8767$Up9ra)
                                        ((case-lambda
                                           ((g$ls/false$8768$Up9ra)
                                            (if g$ls/false$8768$Up9ra
                                              (apply
                                                (case-lambda
                                                  ((g$uid$8769$Up9ra)
                                                   (list
                                                     'quote
                                                     g$uid$8769$Up9ra)))
                                                g$ls/false$8768$Up9ra)
                                              ((case-lambda
                                                 ((g$t$8770$Up9ra)
                                                  ((case-lambda
                                                     ((g$ls/false$8771$Up9ra)
                                                      (if g$ls/false$8771$Up9ra
                                                        (apply
                                                          (case-lambda (() '#f))
                                                          g$ls/false$8771$Up9ra)
                                                        (g$syntax-violation$7462$Up9ra
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$8770$Up9ra))))
                                                   (g$syntax-dispatch$7356$Up9ra
                                                     g$t$8770$Up9ra
                                                     '_))))
                                               g$t$8767$Up9ra))))
                                         (g$syntax-dispatch$7356$Up9ra
                                           g$t$8767$Up9ra
                                           '(_ any)))))
                                     g$t$8765$Up9ra))))
                               (g$syntax-dispatch$7356$Up9ra
                                 g$t$8765$Up9ra
                                 '(_)))))
                           (g$get-clause$8588$Up9ra
                             'nongenerative
                             g$clause*$8758$Up9ra))
                          ((case-lambda
                             ((g$t$8772$Up9ra)
                              ((case-lambda
                                 ((g$ls/false$8773$Up9ra)
                                  (if g$ls/false$8773$Up9ra
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$8773$Up9ra)
                                    ((case-lambda
                                       ((g$t$8774$Up9ra)
                                        ((case-lambda
                                           ((g$ls/false$8775$Up9ra)
                                            (if g$ls/false$8775$Up9ra
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$8775$Up9ra)
                                              (g$syntax-violation$7462$Up9ra
                                                '#f
                                                '"invalid syntax"
                                                g$t$8774$Up9ra))))
                                         (g$syntax-dispatch$7356$Up9ra
                                           g$t$8774$Up9ra
                                           '_))))
                                     g$t$8772$Up9ra))))
                               (g$syntax-dispatch$7356$Up9ra
                                 g$t$8772$Up9ra
                                 '(_ #(atom #t))))))
                           (g$get-clause$8588$Up9ra
                             'sealed
                             g$clause*$8758$Up9ra))
                          ((case-lambda
                             ((g$t$8776$Up9ra)
                              ((case-lambda
                                 ((g$ls/false$8777$Up9ra)
                                  (if g$ls/false$8777$Up9ra
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$8777$Up9ra)
                                    ((case-lambda
                                       ((g$t$8778$Up9ra)
                                        ((case-lambda
                                           ((g$ls/false$8779$Up9ra)
                                            (if g$ls/false$8779$Up9ra
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$8779$Up9ra)
                                              (g$syntax-violation$7462$Up9ra
                                                '#f
                                                '"invalid syntax"
                                                g$t$8778$Up9ra))))
                                         (g$syntax-dispatch$7356$Up9ra
                                           g$t$8778$Up9ra
                                           '_))))
                                     g$t$8776$Up9ra))))
                               (g$syntax-dispatch$7356$Up9ra
                                 g$t$8776$Up9ra
                                 '(_ #(atom #t))))))
                           (g$get-clause$8588$Up9ra
                             'opaque
                             g$clause*$8758$Up9ra))
                          ((case-lambda
                             ((g$t$8780$Up9ra)
                              ((case-lambda
                                 ((g$ls/false$8781$Up9ra)
                                  (if g$ls/false$8781$Up9ra
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$8782$Up9ra)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$8760$Up9ra
                                             g$field-spec*$8782$Up9ra))))
                                      g$ls/false$8781$Up9ra)
                                    ((case-lambda
                                       ((g$t$8783$Up9ra)
                                        ((case-lambda
                                           ((g$ls/false$8784$Up9ra)
                                            (if g$ls/false$8784$Up9ra
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$8784$Up9ra)
                                              (g$syntax-violation$7462$Up9ra
                                                '#f
                                                '"invalid syntax"
                                                g$t$8783$Up9ra))))
                                         (g$syntax-dispatch$7356$Up9ra
                                           g$t$8783$Up9ra
                                           '_))))
                                     g$t$8780$Up9ra))))
                               (g$syntax-dispatch$7356$Up9ra
                                 g$t$8780$Up9ra
                                 '(_ . each-any)))))
                           (g$get-clause$8588$Up9ra
                             'fields
                             g$clause*$8758$Up9ra)))))))
                  (g$parent-rtd-code$8590$Up9ra
                    (case-lambda
                      ((g$clause*$8745$Up9ra)
                       ((case-lambda
                          ((g$t$8746$Up9ra)
                           ((case-lambda
                              ((g$ls/false$8747$Up9ra)
                               (if g$ls/false$8747$Up9ra
                                 (apply
                                   (case-lambda
                                     ((g$name$8748$Up9ra)
                                      (list
                                        'record-type-descriptor
                                        g$name$8748$Up9ra)))
                                   g$ls/false$8747$Up9ra)
                                 ((case-lambda
                                    ((g$t$8749$Up9ra)
                                     ((case-lambda
                                        ((g$ls/false$8750$Up9ra)
                                         (if g$ls/false$8750$Up9ra
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$8751$Up9ra)
                                                    ((case-lambda
                                                       ((g$ls/false$8752$Up9ra)
                                                        (if g$ls/false$8752$Up9ra
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$8753$Up9ra
                                                                 g$rcd$8754$Up9ra)
                                                               g$rtd$8753$Up9ra))
                                                            g$ls/false$8752$Up9ra)
                                                          ((case-lambda
                                                             ((g$t$8755$Up9ra)
                                                              ((case-lambda
                                                                 ((g$ls/false$8756$Up9ra)
                                                                  (if g$ls/false$8756$Up9ra
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$8756$Up9ra)
                                                                    (g$syntax-violation$7462$Up9ra
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8755$Up9ra))))
                                                               (g$syntax-dispatch$7356$Up9ra
                                                                 g$t$8755$Up9ra
                                                                 '#(atom #f)))))
                                                           g$t$8751$Up9ra))))
                                                     (g$syntax-dispatch$7356$Up9ra
                                                       g$t$8751$Up9ra
                                                       '(_ any any)))))
                                                 (g$get-clause$8588$Up9ra
                                                   'parent-rtd
                                                   g$clause*$8745$Up9ra))))
                                             g$ls/false$8750$Up9ra)
                                           (g$syntax-violation$7462$Up9ra
                                             '#f
                                             '"invalid syntax"
                                             g$t$8749$Up9ra))))
                                      (g$syntax-dispatch$7356$Up9ra
                                        g$t$8749$Up9ra
                                        '#(atom #f)))))
                                  g$t$8746$Up9ra))))
                            (g$syntax-dispatch$7356$Up9ra
                              g$t$8746$Up9ra
                              '(_ any)))))
                        (g$get-clause$8588$Up9ra
                          'parent
                          g$clause*$8745$Up9ra)))))
                  (g$parent-rcd-code$8591$Up9ra
                    (case-lambda
                      ((g$clause*$8733$Up9ra)
                       ((case-lambda
                          ((g$t$8734$Up9ra)
                           ((case-lambda
                              ((g$ls/false$8735$Up9ra)
                               (if g$ls/false$8735$Up9ra
                                 (apply
                                   (case-lambda
                                     ((g$name$8736$Up9ra)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$8736$Up9ra)))
                                   g$ls/false$8735$Up9ra)
                                 ((case-lambda
                                    ((g$t$8737$Up9ra)
                                     ((case-lambda
                                        ((g$ls/false$8738$Up9ra)
                                         (if g$ls/false$8738$Up9ra
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$8739$Up9ra)
                                                    ((case-lambda
                                                       ((g$ls/false$8740$Up9ra)
                                                        (if g$ls/false$8740$Up9ra
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$8741$Up9ra
                                                                 g$rcd$8742$Up9ra)
                                                               g$rcd$8742$Up9ra))
                                                            g$ls/false$8740$Up9ra)
                                                          ((case-lambda
                                                             ((g$t$8743$Up9ra)
                                                              ((case-lambda
                                                                 ((g$ls/false$8744$Up9ra)
                                                                  (if g$ls/false$8744$Up9ra
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$8744$Up9ra)
                                                                    (g$syntax-violation$7462$Up9ra
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8743$Up9ra))))
                                                               (g$syntax-dispatch$7356$Up9ra
                                                                 g$t$8743$Up9ra
                                                                 '#(atom #f)))))
                                                           g$t$8739$Up9ra))))
                                                     (g$syntax-dispatch$7356$Up9ra
                                                       g$t$8739$Up9ra
                                                       '(_ any any)))))
                                                 (g$get-clause$8588$Up9ra
                                                   'parent-rtd
                                                   g$clause*$8733$Up9ra))))
                                             g$ls/false$8738$Up9ra)
                                           (g$syntax-violation$7462$Up9ra
                                             '#f
                                             '"invalid syntax"
                                             g$t$8737$Up9ra))))
                                      (g$syntax-dispatch$7356$Up9ra
                                        g$t$8737$Up9ra
                                        '#(atom #f)))))
                                  g$t$8734$Up9ra))))
                            (g$syntax-dispatch$7356$Up9ra
                              g$t$8734$Up9ra
                              '(_ any)))))
                        (g$get-clause$8588$Up9ra
                          'parent
                          g$clause*$8733$Up9ra)))))
                  (g$foo-rcd-code$8592$Up9ra
                    (case-lambda
                      ((g$clause*$8729$Up9ra
                         g$foo-rtd$8730$Up9ra
                         g$protocol$8731$Up9ra
                         g$parent-rcd-code$8732$Up9ra)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$8730$Up9ra
                         g$parent-rcd-code$8732$Up9ra
                         g$protocol$8731$Up9ra))))
                  (g$get-protocol-code$8593$Up9ra
                    (case-lambda
                      ((g$clause*$8723$Up9ra)
                       ((case-lambda
                          ((g$t$8724$Up9ra)
                           ((case-lambda
                              ((g$ls/false$8725$Up9ra)
                               (if g$ls/false$8725$Up9ra
                                 (apply
                                   (case-lambda
                                     ((g$expr$8726$Up9ra) g$expr$8726$Up9ra))
                                   g$ls/false$8725$Up9ra)
                                 ((case-lambda
                                    ((g$t$8727$Up9ra)
                                     ((case-lambda
                                        ((g$ls/false$8728$Up9ra)
                                         (if g$ls/false$8728$Up9ra
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$8728$Up9ra)
                                           (g$syntax-violation$7462$Up9ra
                                             '#f
                                             '"invalid syntax"
                                             g$t$8727$Up9ra))))
                                      (g$syntax-dispatch$7356$Up9ra
                                        g$t$8727$Up9ra
                                        '_))))
                                  g$t$8724$Up9ra))))
                            (g$syntax-dispatch$7356$Up9ra
                              g$t$8724$Up9ra
                              '(_ any)))))
                        (g$get-clause$8588$Up9ra
                          'protocol
                          g$clause*$8723$Up9ra)))))
                  (g$get-fields$8594$Up9ra
                    (case-lambda
                      ((g$clause*$8714$Up9ra)
                       ((case-lambda
                          ((g$t$8715$Up9ra)
                           ((case-lambda
                              ((g$ls/false$8716$Up9ra)
                               (if g$ls/false$8716$Up9ra
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$8716$Up9ra)
                                 ((case-lambda
                                    ((g$t$8717$Up9ra)
                                     ((case-lambda
                                        ((g$ls/false$8718$Up9ra)
                                         (if g$ls/false$8718$Up9ra
                                           (apply
                                             (case-lambda
                                               ((g$f*$8719$Up9ra)
                                                g$f*$8719$Up9ra))
                                             g$ls/false$8718$Up9ra)
                                           ((case-lambda
                                              ((g$t$8720$Up9ra)
                                               ((case-lambda
                                                  ((g$ls/false$8721$Up9ra)
                                                   (if g$ls/false$8721$Up9ra
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$8722$Up9ra)
                                                          (g$get-fields$8594$Up9ra
                                                            g$rest$8722$Up9ra)))
                                                       g$ls/false$8721$Up9ra)
                                                     (g$syntax-violation$7462$Up9ra
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8720$Up9ra))))
                                                (g$syntax-dispatch$7356$Up9ra
                                                  g$t$8720$Up9ra
                                                  '(_ . any)))))
                                            g$t$8717$Up9ra))))
                                      (g$syntax-dispatch$7356$Up9ra
                                        g$t$8717$Up9ra
                                        '((#(scheme-id fields) . each-any)
                                          .
                                          _)))))
                                  g$t$8715$Up9ra))))
                            (g$syntax-dispatch$7356$Up9ra g$t$8715$Up9ra '()))))
                        g$clause*$8714$Up9ra))))
                  (g$get-mutator-indices$8595$Up9ra
                    (case-lambda
                      ((g$fields$8702$Up9ra)
                       ((letrec ((g$f$8703$Up9ra
                                   (case-lambda
                                     ((g$fields$8704$Up9ra g$i$8705$Up9ra)
                                      ((case-lambda
                                         ((g$t$8706$Up9ra)
                                          ((case-lambda
                                             ((g$ls/false$8707$Up9ra)
                                              (if g$ls/false$8707$Up9ra
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$8707$Up9ra)
                                                ((case-lambda
                                                   ((g$t$8708$Up9ra)
                                                    ((case-lambda
                                                       ((g$ls/false$8709$Up9ra)
                                                        (if g$ls/false$8709$Up9ra
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$8710$Up9ra)
                                                               (cons
                                                                 g$i$8705$Up9ra
                                                                 (g$f$8703$Up9ra
                                                                   g$rest$8710$Up9ra
                                                                   (+ g$i$8705$Up9ra
                                                                      '1)))))
                                                            g$ls/false$8709$Up9ra)
                                                          ((case-lambda
                                                             ((g$t$8711$Up9ra)
                                                              ((case-lambda
                                                                 ((g$ls/false$8712$Up9ra)
                                                                  (if g$ls/false$8712$Up9ra
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$8713$Up9ra)
                                                                         (g$f$8703$Up9ra
                                                                           g$rest$8713$Up9ra
                                                                           (+ g$i$8705$Up9ra
                                                                              '1))))
                                                                      g$ls/false$8712$Up9ra)
                                                                    (g$syntax-violation$7462$Up9ra
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8711$Up9ra))))
                                                               (g$syntax-dispatch$7356$Up9ra
                                                                 g$t$8711$Up9ra
                                                                 '(_ . any)))))
                                                           g$t$8708$Up9ra))))
                                                     (g$syntax-dispatch$7356$Up9ra
                                                       g$t$8708$Up9ra
                                                       '((#(scheme-id mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$8706$Up9ra))))
                                           (g$syntax-dispatch$7356$Up9ra
                                             g$t$8706$Up9ra
                                             '()))))
                                       g$fields$8704$Up9ra)))))
                          g$f$8703$Up9ra)
                        g$fields$8702$Up9ra
                        '0))))
                  (g$get-mutators$8596$Up9ra
                    (case-lambda
                      ((g$foo$8681$Up9ra g$fields$8682$Up9ra)
                       (letrec* ((g$gen-name$8683$Up9ra
                                   (case-lambda
                                     ((g$x$8701$Up9ra)
                                      (g$datum->syntax$7464$Up9ra
                                        g$foo$8681$Up9ra
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7465$Up9ra
                                                g$foo$8681$Up9ra))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7465$Up9ra
                                                g$x$8701$Up9ra))
                                            '"-set!")))))))
                         ((letrec ((g$f$8684$Up9ra
                                     (case-lambda
                                       ((g$fields$8685$Up9ra)
                                        ((case-lambda
                                           ((g$t$8686$Up9ra)
                                            ((case-lambda
                                               ((g$ls/false$8687$Up9ra)
                                                (if g$ls/false$8687$Up9ra
                                                  (apply
                                                    (case-lambda (() '()))
                                                    g$ls/false$8687$Up9ra)
                                                  ((case-lambda
                                                     ((g$t$8688$Up9ra)
                                                      ((case-lambda
                                                         ((g$ls/false$8689$Up9ra)
                                                          (if g$ls/false$8689$Up9ra
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$8690$Up9ra
                                                                   g$accessor$8691$Up9ra
                                                                   g$mutator$8692$Up9ra
                                                                   g$rest$8693$Up9ra)
                                                                 (cons
                                                                   g$mutator$8692$Up9ra
                                                                   (g$f$8684$Up9ra
                                                                     g$rest$8693$Up9ra))))
                                                              g$ls/false$8689$Up9ra)
                                                            ((case-lambda
                                                               ((g$t$8694$Up9ra)
                                                                ((case-lambda
                                                                   ((g$ls/false$8695$Up9ra)
                                                                    (if g$ls/false$8695$Up9ra
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$8696$Up9ra
                                                                             g$rest$8697$Up9ra)
                                                                           (cons
                                                                             (g$gen-name$8683$Up9ra
                                                                               g$name$8696$Up9ra)
                                                                             (g$f$8684$Up9ra
                                                                               g$rest$8697$Up9ra))))
                                                                        g$ls/false$8695$Up9ra)
                                                                      ((case-lambda
                                                                         ((g$t$8698$Up9ra)
                                                                          ((case-lambda
                                                                             ((g$ls/false$8699$Up9ra)
                                                                              (if g$ls/false$8699$Up9ra
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$8700$Up9ra)
                                                                                     (g$f$8684$Up9ra
                                                                                       g$rest$8700$Up9ra)))
                                                                                  g$ls/false$8699$Up9ra)
                                                                                (g$syntax-violation$7462$Up9ra
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$8698$Up9ra))))
                                                                           (g$syntax-dispatch$7356$Up9ra
                                                                             g$t$8698$Up9ra
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$8694$Up9ra))))
                                                                 (g$syntax-dispatch$7356$Up9ra
                                                                   g$t$8694$Up9ra
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$8688$Up9ra))))
                                                       (g$syntax-dispatch$7356$Up9ra
                                                         g$t$8688$Up9ra
                                                         '((#(scheme-id mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$8686$Up9ra))))
                                             (g$syntax-dispatch$7356$Up9ra
                                               g$t$8686$Up9ra
                                               '()))))
                                         g$fields$8685$Up9ra)))))
                            g$f$8684$Up9ra)
                          g$fields$8682$Up9ra)))))
                  (g$get-accessors$8597$Up9ra
                    (case-lambda
                      ((g$foo$8647$Up9ra g$fields$8648$Up9ra)
                       (letrec* ((g$gen-name$8649$Up9ra
                                   (case-lambda
                                     ((g$x$8680$Up9ra)
                                      (g$datum->syntax$7464$Up9ra
                                        g$foo$8647$Up9ra
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7465$Up9ra
                                                g$foo$8647$Up9ra))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7465$Up9ra
                                                g$x$8680$Up9ra)))))))))
                         (map (case-lambda
                                ((g$field$8650$Up9ra)
                                 ((case-lambda
                                    ((g$t$8651$Up9ra)
                                     ((case-lambda
                                        ((g$ls/false$8652$Up9ra)
                                         (if (if g$ls/false$8652$Up9ra
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$name$8653$Up9ra
                                                        g$accessor$8654$Up9ra
                                                        g$mutator$8655$Up9ra)
                                                      (g$id?$7078$Up9ra
                                                        g$accessor$8654$Up9ra)))
                                                   g$ls/false$8652$Up9ra))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$name$8656$Up9ra
                                                  g$accessor$8657$Up9ra
                                                  g$mutator$8658$Up9ra)
                                                g$accessor$8657$Up9ra))
                                             g$ls/false$8652$Up9ra)
                                           ((case-lambda
                                              ((g$t$8659$Up9ra)
                                               ((case-lambda
                                                  ((g$ls/false$8660$Up9ra)
                                                   (if (if g$ls/false$8660$Up9ra
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$name$8661$Up9ra
                                                                  g$accessor$8662$Up9ra)
                                                                (g$id?$7078$Up9ra
                                                                  g$accessor$8662$Up9ra)))
                                                             g$ls/false$8660$Up9ra))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$name$8663$Up9ra
                                                            g$accessor$8664$Up9ra)
                                                          g$accessor$8664$Up9ra))
                                                       g$ls/false$8660$Up9ra)
                                                     ((case-lambda
                                                        ((g$t$8665$Up9ra)
                                                         ((case-lambda
                                                            ((g$ls/false$8666$Up9ra)
                                                             (if (if g$ls/false$8666$Up9ra
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$name$8667$Up9ra)
                                                                          (g$id?$7078$Up9ra
                                                                            g$name$8667$Up9ra)))
                                                                       g$ls/false$8666$Up9ra))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$name$8668$Up9ra)
                                                                    (g$gen-name$8649$Up9ra
                                                                      g$name$8668$Up9ra)))
                                                                 g$ls/false$8666$Up9ra)
                                                               ((case-lambda
                                                                  ((g$t$8669$Up9ra)
                                                                   ((case-lambda
                                                                      ((g$ls/false$8670$Up9ra)
                                                                       (if (if g$ls/false$8670$Up9ra
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$name$8671$Up9ra)
                                                                                    (g$id?$7078$Up9ra
                                                                                      g$name$8671$Up9ra)))
                                                                                 g$ls/false$8670$Up9ra))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$name$8672$Up9ra)
                                                                              (g$gen-name$8649$Up9ra
                                                                                g$name$8672$Up9ra)))
                                                                           g$ls/false$8670$Up9ra)
                                                                         ((case-lambda
                                                                            ((g$t$8673$Up9ra)
                                                                             ((case-lambda
                                                                                ((g$ls/false$8674$Up9ra)
                                                                                 (if (if g$ls/false$8674$Up9ra
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$name$8675$Up9ra)
                                                                                              (g$id?$7078$Up9ra
                                                                                                g$name$8675$Up9ra)))
                                                                                           g$ls/false$8674$Up9ra))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$name$8676$Up9ra)
                                                                                        (g$gen-name$8649$Up9ra
                                                                                          g$name$8676$Up9ra)))
                                                                                     g$ls/false$8674$Up9ra)
                                                                                   ((case-lambda
                                                                                      ((g$t$8677$Up9ra)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$8678$Up9ra)
                                                                                           (if g$ls/false$8678$Up9ra
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$others$8679$Up9ra)
                                                                                                  (g$syntax-violation$7462$Up9ra
                                                                                                    '#f
                                                                                                    '"invalid field spec"
                                                                                                    g$field$8650$Up9ra)))
                                                                                               g$ls/false$8678$Up9ra)
                                                                                             (g$syntax-violation$7462$Up9ra
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$8677$Up9ra))))
                                                                                        (g$syntax-dispatch$7356$Up9ra
                                                                                          g$t$8677$Up9ra
                                                                                          'any))))
                                                                                    g$t$8673$Up9ra))))
                                                                              (g$syntax-dispatch$7356$Up9ra
                                                                                g$t$8673$Up9ra
                                                                                'any))))
                                                                          g$t$8669$Up9ra))))
                                                                    (g$syntax-dispatch$7356$Up9ra
                                                                      g$t$8669$Up9ra
                                                                      '(#(scheme-id
                                                                          immutable)
                                                                        any)))))
                                                                g$t$8665$Up9ra))))
                                                          (g$syntax-dispatch$7356$Up9ra
                                                            g$t$8665$Up9ra
                                                            '(#(scheme-id
                                                                mutable)
                                                              any)))))
                                                      g$t$8659$Up9ra))))
                                                (g$syntax-dispatch$7356$Up9ra
                                                  g$t$8659$Up9ra
                                                  '(#(scheme-id immutable)
                                                    any
                                                    any)))))
                                            g$t$8651$Up9ra))))
                                      (g$syntax-dispatch$7356$Up9ra
                                        g$t$8651$Up9ra
                                        '(#(scheme-id mutable) any any any)))))
                                  g$field$8650$Up9ra)))
                              g$fields$8648$Up9ra)))))
                  (g$enumerate$8598$Up9ra
                    (case-lambda
                      ((g$ls$8643$Up9ra)
                       ((letrec ((g$f$8644$Up9ra
                                   (case-lambda
                                     ((g$ls$8645$Up9ra g$i$8646$Up9ra)
                                      (if (null? g$ls$8645$Up9ra)
                                        '()
                                        (cons
                                          g$i$8646$Up9ra
                                          (g$f$8644$Up9ra
                                            (cdr g$ls$8645$Up9ra)
                                            (+ g$i$8646$Up9ra '1))))))))
                          g$f$8644$Up9ra)
                        g$ls$8643$Up9ra
                        '0))))
                  (g$do-define-record$8599$Up9ra
                    (case-lambda
                      ((g$namespec$8623$Up9ra g$clause*$8624$Up9ra)
                       ((case-lambda
                          ((g$foo$8625$Up9ra)
                           ((case-lambda
                              ((g$foo-rtd$8626$Up9ra)
                               ((case-lambda
                                  ((g$foo-rcd$8627$Up9ra)
                                   ((case-lambda
                                      ((g$protocol$8628$Up9ra)
                                       ((case-lambda
                                          ((g$make-foo$8629$Up9ra)
                                           ((case-lambda
                                              ((g$fields$8630$Up9ra)
                                               ((case-lambda
                                                  ((g$idx*$8631$Up9ra)
                                                   ((case-lambda
                                                      ((g$foo-x*$8632$Up9ra)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$8633$Up9ra)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$8634$Up9ra)
                                                               ((case-lambda
                                                                  ((g$foo?$8635$Up9ra)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$8636$Up9ra)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$8637$Up9ra)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$8638$Up9ra)
                                                                               ((case-lambda
                                                                                  (()
                                                                                   (g$bless$7319$Up9ra
                                                                                     (cons
                                                                                       'begin
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rtd$8626$Up9ra
                                                                                           g$foo-rtd-code$8636$Up9ra)
                                                                                         (cons
                                                                                           (list
                                                                                             'define
                                                                                             g$protocol$8628$Up9ra
                                                                                             g$protocol-code$8638$Up9ra)
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo-rcd$8627$Up9ra
                                                                                               g$foo-rcd-code$8637$Up9ra)
                                                                                             (cons
                                                                                               (list
                                                                                                 'define-syntax
                                                                                                 g$foo$8625$Up9ra
                                                                                                 (list
                                                                                                   'list
                                                                                                   ''$rtd
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rtd$8626$Up9ra)
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rcd$8627$Up9ra)))
                                                                                               (cons
                                                                                                 (list
                                                                                                   'define
                                                                                                   g$foo?$8635$Up9ra
                                                                                                   (list
                                                                                                     'record-predicate
                                                                                                     g$foo-rtd$8626$Up9ra))
                                                                                                 (cons
                                                                                                   (list
                                                                                                     'define
                                                                                                     g$make-foo$8629$Up9ra
                                                                                                     (list
                                                                                                       'record-constructor
                                                                                                       g$foo-rcd$8627$Up9ra))
                                                                                                   (append
                                                                                                     (map (case-lambda
                                                                                                            ((g$foo-x$8639$Up9ra
                                                                                                               g$idx$8640$Up9ra)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$foo-x$8639$Up9ra
                                                                                                               (list
                                                                                                                 'record-accessor
                                                                                                                 g$foo-rtd$8626$Up9ra
                                                                                                                 g$idx$8640$Up9ra))))
                                                                                                          g$foo-x*$8632$Up9ra
                                                                                                          g$idx*$8631$Up9ra)
                                                                                                     (map (case-lambda
                                                                                                            ((g$set-foo-x!$8641$Up9ra
                                                                                                               g$idx$8642$Up9ra)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$set-foo-x!$8641$Up9ra
                                                                                                               (list
                                                                                                                 'record-mutator
                                                                                                                 g$foo-rtd$8626$Up9ra
                                                                                                                 g$idx$8642$Up9ra))))
                                                                                                          g$set-foo-x!*$8633$Up9ra
                                                                                                          g$set-foo-idx*$8634$Up9ra)))))))))))))))
                                                                            (g$get-protocol-code$8593$Up9ra
                                                                              g$clause*$8624$Up9ra))))
                                                                        (g$foo-rcd-code$8592$Up9ra
                                                                          g$clause*$8624$Up9ra
                                                                          g$foo-rtd$8626$Up9ra
                                                                          g$protocol$8628$Up9ra
                                                                          (g$parent-rcd-code$8591$Up9ra
                                                                            g$clause*$8624$Up9ra)))))
                                                                    (g$foo-rtd-code$8589$Up9ra
                                                                      g$foo$8625$Up9ra
                                                                      g$clause*$8624$Up9ra
                                                                      (g$parent-rtd-code$8590$Up9ra
                                                                        g$clause*$8624$Up9ra)))))
                                                                (g$get-record-predicate-name$8587$Up9ra
                                                                  g$namespec$8623$Up9ra))))
                                                            (g$get-mutator-indices$8595$Up9ra
                                                              g$fields$8630$Up9ra))))
                                                        (g$get-mutators$8596$Up9ra
                                                          g$foo$8625$Up9ra
                                                          g$fields$8630$Up9ra))))
                                                    (g$get-accessors$8597$Up9ra
                                                      g$foo$8625$Up9ra
                                                      g$fields$8630$Up9ra))))
                                                (g$enumerate$8598$Up9ra
                                                  g$fields$8630$Up9ra))))
                                            (g$get-fields$8594$Up9ra
                                              g$clause*$8624$Up9ra))))
                                        (g$get-record-constructor-name$8586$Up9ra
                                          g$namespec$8623$Up9ra))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$8585$Up9ra g$namespec$8623$Up9ra)))))
                  (g$verify-clauses$8600$Up9ra
                    (case-lambda
                      ((g$x$8605$Up9ra g$cls*$8606$Up9ra)
                       (letrec* ((g$valid-kwds$8607$Up9ra
                                   (map g$bless$7319$Up9ra
                                        '(fields
                                           parent
                                           parent-rtd
                                           protocol
                                           sealed
                                           opaque
                                           nongenerative)))
                                 (g$free-id-member?$8608$Up9ra
                                   (case-lambda
                                     ((g$x$8620$Up9ra g$ls$8621$Up9ra)
                                      (if (pair? g$ls$8621$Up9ra)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$8622$Up9ra)
                                              (if g$t$8622$Up9ra
                                                g$t$8622$Up9ra
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$8608$Up9ra
                                                    g$x$8620$Up9ra
                                                    (cdr g$ls$8621$Up9ra))))))
                                           (g$free-id=?$7082$Up9ra
                                             g$x$8620$Up9ra
                                             (car g$ls$8621$Up9ra))))
                                        '#f)))))
                         ((letrec ((g$f$8609$Up9ra
                                     (case-lambda
                                       ((g$cls*$8610$Up9ra g$seen*$8611$Up9ra)
                                        (if (null? g$cls*$8610$Up9ra)
                                          (void)
                                          ((case-lambda
                                             ((g$t$8612$Up9ra)
                                              ((case-lambda
                                                 ((g$ls/false$8613$Up9ra)
                                                  (if g$ls/false$8613$Up9ra
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$8614$Up9ra
                                                           g$rest$8615$Up9ra)
                                                         (if ((case-lambda
                                                                ((g$t$8616$Up9ra)
                                                                 (if g$t$8616$Up9ra
                                                                   g$t$8616$Up9ra
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$8608$Up9ra
                                                                            g$kwd$8614$Up9ra
                                                                            g$valid-kwds$8607$Up9ra))))))
                                                              (not (g$id?$7078$Up9ra
                                                                     g$kwd$8614$Up9ra)))
                                                           (g$syntax-violation$7462$Up9ra
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$8614$Up9ra)
                                                           (if (g$bound-id-member?$7085$Up9ra
                                                                 g$kwd$8614$Up9ra
                                                                 g$seen*$8611$Up9ra)
                                                             (g$syntax-violation$7462$Up9ra
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$8605$Up9ra
                                                               g$kwd$8614$Up9ra)
                                                             (g$f$8609$Up9ra
                                                               (cdr g$cls*$8610$Up9ra)
                                                               (cons
                                                                 g$kwd$8614$Up9ra
                                                                 g$seen*$8611$Up9ra))))))
                                                      g$ls/false$8613$Up9ra)
                                                    ((case-lambda
                                                       ((g$t$8617$Up9ra)
                                                        ((case-lambda
                                                           ((g$ls/false$8618$Up9ra)
                                                            (if g$ls/false$8618$Up9ra
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$8619$Up9ra)
                                                                   (g$syntax-violation$7462$Up9ra
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$8619$Up9ra)))
                                                                g$ls/false$8618$Up9ra)
                                                              (g$syntax-violation$7462$Up9ra
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8617$Up9ra))))
                                                         (g$syntax-dispatch$7356$Up9ra
                                                           g$t$8617$Up9ra
                                                           'any))))
                                                     g$t$8612$Up9ra))))
                                               (g$syntax-dispatch$7356$Up9ra
                                                 g$t$8612$Up9ra
                                                 '(any . any)))))
                                           (car g$cls*$8610$Up9ra)))))))
                            g$f$8609$Up9ra)
                          g$cls*$8606$Up9ra
                          '()))))))
          ((case-lambda
             ((g$t$8601$Up9ra)
              ((case-lambda
                 ((g$ls/false$8602$Up9ra)
                  (if g$ls/false$8602$Up9ra
                    (apply
                      (case-lambda
                        ((g$namespec$8603$Up9ra g$clause*$8604$Up9ra)
                         (begin
                           (g$verify-clauses$8600$Up9ra
                             g$x$8583$Up9ra
                             g$clause*$8604$Up9ra)
                           (g$do-define-record$8599$Up9ra
                             g$namespec$8603$Up9ra
                             g$clause*$8604$Up9ra))))
                      g$ls/false$8602$Up9ra)
                    (g$syntax-violation$7462$Up9ra
                      '#f
                      '"invalid syntax"
                      g$t$8601$Up9ra))))
               (g$syntax-dispatch$7356$Up9ra
                 g$t$8601$Up9ra
                 '(_ any . each-any)))))
           g$x$8583$Up9ra)))))
   (g$define-condition-type-macro$7351$Up9ra
     g$define-condition-type-macro$10801$Up9ra
     (case-lambda
       ((g$x$8839$Up9ra)
        (letrec* ((g$mkname$8840$Up9ra
                    (case-lambda
                      ((g$name$8863$Up9ra g$suffix$8864$Up9ra)
                       (g$datum->syntax$7464$Up9ra
                         g$name$8863$Up9ra
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$7465$Up9ra g$name$8863$Up9ra))
                             g$suffix$8864$Up9ra)))))))
          ((case-lambda
             ((g$t$8841$Up9ra)
              ((case-lambda
                 ((g$ls/false$8842$Up9ra)
                  (if (if g$ls/false$8842$Up9ra
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$8843$Up9ra
                                 g$name$8844$Up9ra
                                 g$super$8845$Up9ra
                                 g$constructor$8846$Up9ra
                                 g$predicate$8847$Up9ra
                                 g$field*$8848$Up9ra
                                 g$accessor*$8849$Up9ra)
                               (if (g$id?$7078$Up9ra g$name$8844$Up9ra)
                                 (if (g$id?$7078$Up9ra g$super$8845$Up9ra)
                                   (if (g$id?$7078$Up9ra
                                         g$constructor$8846$Up9ra)
                                     (if (g$id?$7078$Up9ra
                                           g$predicate$8847$Up9ra)
                                       (if (g$for-all$5365$Up9ra
                                             g$id?$7078$Up9ra
                                             g$field*$8848$Up9ra)
                                         (begin
                                           '#f
                                           (g$for-all$5365$Up9ra
                                             g$id?$7078$Up9ra
                                             g$accessor*$8849$Up9ra))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$8842$Up9ra))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$8850$Up9ra
                           g$name$8851$Up9ra
                           g$super$8852$Up9ra
                           g$constructor$8853$Up9ra
                           g$predicate$8854$Up9ra
                           g$field*$8855$Up9ra
                           g$accessor*$8856$Up9ra)
                         ((case-lambda
                            ((g$aux-accessor*$8857$Up9ra)
                             (g$bless$7319$Up9ra
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$8851$Up9ra
                                         g$constructor$8853$Up9ra
                                         (gensym))
                                       (cons
                                         (list 'parent g$super$8852$Up9ra)
                                         (cons
                                           (cons
                                             'fields
                                             (map (case-lambda
                                                    ((g$field$8858$Up9ra
                                                       g$aux$8859$Up9ra)
                                                     (list
                                                       'immutable
                                                       g$field$8858$Up9ra
                                                       g$aux$8859$Up9ra)))
                                                  g$field*$8855$Up9ra
                                                  g$aux-accessor*$8857$Up9ra))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$8854$Up9ra
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$8851$Up9ra)))
                                     (map (case-lambda
                                            ((g$accessor$8860$Up9ra
                                               g$aux$8861$Up9ra)
                                             (list
                                               'define
                                               g$accessor$8860$Up9ra
                                               (list
                                                 'condition-accessor
                                                 (list
                                                   'record-type-descriptor
                                                   g$name$8851$Up9ra)
                                                 g$aux$8861$Up9ra))))
                                          g$accessor*$8856$Up9ra
                                          g$aux-accessor*$8857$Up9ra)))))))
                          (map (case-lambda ((g$x$8862$Up9ra) (gensym)))
                               g$accessor*$8856$Up9ra))))
                      g$ls/false$8842$Up9ra)
                    (g$syntax-violation$7462$Up9ra
                      '#f
                      '"invalid syntax"
                      g$t$8841$Up9ra))))
               (g$syntax-dispatch$7356$Up9ra
                 g$t$8841$Up9ra
                 '(any any any any any . #(each (any any)))))))
           g$x$8839$Up9ra)))))
   (g$incorrect-usage-macro$7352$Up9ra
     g$incorrect-usage-macro$10802$Up9ra
     (case-lambda
       ((g$e$8865$Up9ra)
        (g$syntax-violation$7462$Up9ra
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$8865$Up9ra))))
   (g$parameterize-transformer$7353$Up9ra
     g$parameterize-transformer$10803$Up9ra
     (case-lambda
       ((g$e$8866$Up9ra g$r$8867$Up9ra g$mr$8868$Up9ra)
        ((case-lambda
           ((g$t$8869$Up9ra)
            ((case-lambda
               ((g$ls/false$8870$Up9ra)
                (if g$ls/false$8870$Up9ra
                  (apply
                    (case-lambda
                      ((g$b$8871$Up9ra g$b*$8872$Up9ra)
                       (g$chi-internal$7385$Up9ra
                         (cons g$b$8871$Up9ra g$b*$8872$Up9ra)
                         g$r$8867$Up9ra
                         g$mr$8868$Up9ra)))
                    g$ls/false$8870$Up9ra)
                  ((case-lambda
                     ((g$t$8873$Up9ra)
                      ((case-lambda
                         ((g$ls/false$8874$Up9ra)
                          (if g$ls/false$8874$Up9ra
                            (apply
                              (case-lambda
                                ((g$olhs*$8875$Up9ra
                                   g$orhs*$8876$Up9ra
                                   g$b$8877$Up9ra
                                   g$b*$8878$Up9ra)
                                 ((case-lambda
                                    ((g$lhs*$8879$Up9ra
                                       g$rhs*$8880$Up9ra
                                       g$t*$8881$Up9ra
                                       g$swap$8882$Up9ra)
                                     (g$build-let$7011$Up9ra
                                       '#f
                                       (append
                                         g$lhs*$8879$Up9ra
                                         g$rhs*$8880$Up9ra)
                                       (append
                                         (g$chi-expr*$7372$Up9ra
                                           g$olhs*$8875$Up9ra
                                           g$r$8867$Up9ra
                                           g$mr$8868$Up9ra)
                                         (g$chi-expr*$7372$Up9ra
                                           g$orhs*$8876$Up9ra
                                           g$r$8867$Up9ra
                                           g$mr$8868$Up9ra))
                                       (g$build-let$7011$Up9ra
                                         '#f
                                         (list g$swap$8882$Up9ra)
                                         (list
                                           (g$build-lambda$7009$Up9ra
                                             '#f
                                             '()
                                             (g$build-sequence$7012$Up9ra
                                               '#f
                                               (map (case-lambda
                                                      ((g$t$8883$Up9ra
                                                         g$lhs$8884$Up9ra
                                                         g$rhs$8885$Up9ra)
                                                       (g$build-let$7011$Up9ra
                                                         '#f
                                                         (list g$t$8883$Up9ra)
                                                         (list
                                                           (list
                                                             g$lhs$8884$Up9ra))
                                                         (g$build-sequence$7012$Up9ra
                                                           '#f
                                                           (list
                                                             (list
                                                               g$lhs$8884$Up9ra
                                                               g$rhs$8885$Up9ra)
                                                             (list
                                                               'set!
                                                               g$rhs$8885$Up9ra
                                                               g$t$8883$Up9ra))))))
                                                    g$t*$8881$Up9ra
                                                    g$lhs*$8879$Up9ra
                                                    g$rhs*$8880$Up9ra))))
                                         (list
                                           '(primitive dynamic-wind)
                                           g$swap$8882$Up9ra
                                           (g$build-lambda$7009$Up9ra
                                             '#f
                                             '()
                                             (g$chi-internal$7385$Up9ra
                                               (cons
                                                 g$b$8877$Up9ra
                                                 g$b*$8878$Up9ra)
                                               g$r$8867$Up9ra
                                               g$mr$8868$Up9ra))
                                           g$swap$8882$Up9ra)))))
                                  (map (case-lambda
                                         ((g$x$8886$Up9ra)
                                          (g$gen-lexical$7022$Up9ra 'lhs)))
                                       g$olhs*$8875$Up9ra)
                                  (map (case-lambda
                                         ((g$x$8887$Up9ra)
                                          (g$gen-lexical$7022$Up9ra 'rhs)))
                                       g$olhs*$8875$Up9ra)
                                  (map (case-lambda
                                         ((g$x$8888$Up9ra)
                                          (g$gen-lexical$7022$Up9ra 't)))
                                       g$olhs*$8875$Up9ra)
                                  (g$gen-lexical$7022$Up9ra 'swap))))
                              g$ls/false$8874$Up9ra)
                            (g$syntax-violation$7462$Up9ra
                              '#f
                              '"invalid syntax"
                              g$t$8873$Up9ra))))
                       (g$syntax-dispatch$7356$Up9ra
                         g$t$8873$Up9ra
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$8869$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$8869$Up9ra
               '(_ () any . each-any)))))
         g$e$8866$Up9ra))))
   (g$foreign-call-transformer$7354$Up9ra
     g$foreign-call-transformer$10804$Up9ra
     (case-lambda
       ((g$e$8889$Up9ra g$r$8890$Up9ra g$mr$8891$Up9ra)
        ((case-lambda
           ((g$t$8892$Up9ra)
            ((case-lambda
               ((g$ls/false$8893$Up9ra)
                (if g$ls/false$8893$Up9ra
                  (apply
                    (case-lambda
                      ((g$name$8894$Up9ra g$arg*$8895$Up9ra)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$7374$Up9ra
                             g$name$8894$Up9ra
                             g$r$8890$Up9ra
                             g$mr$8891$Up9ra)
                           (g$chi-expr*$7372$Up9ra
                             g$arg*$8895$Up9ra
                             g$r$8890$Up9ra
                             g$mr$8891$Up9ra)))))
                    g$ls/false$8893$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$8892$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$8892$Up9ra
               '(_ any . each-any)))))
         g$e$8889$Up9ra))))
   (g$convert-pattern$7355$Up9ra
     g$convert-pattern$10805$Up9ra
     (case-lambda
       ((g$pattern$8896$Up9ra g$keys$8897$Up9ra)
        (letrec* ((g$cvt*$8898$Up9ra
                    (case-lambda
                      ((g$p*$8978$Up9ra g$n$8979$Up9ra g$ids$8980$Up9ra)
                       (if (null? g$p*$8978$Up9ra)
                         (values '() g$ids$8980$Up9ra)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$8898$Up9ra
                                (cdr g$p*$8978$Up9ra)
                                g$n$8979$Up9ra
                                g$ids$8980$Up9ra)))
                           (case-lambda
                             ((g$y$8983$Up9ra g$ids$8984$Up9ra)
                              ((case-lambda
                                 ((g$ids$8985$Up9ra g$y$8986$Up9ra)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$8899$Up9ra
                                         (car g$p*$8978$Up9ra)
                                         g$n$8979$Up9ra
                                         g$ids$8985$Up9ra)))
                                    (case-lambda
                                      ((g$x$8989$Up9ra g$ids$8990$Up9ra)
                                       ((case-lambda
                                          ((g$ids$8991$Up9ra g$x$8992$Up9ra)
                                           (values
                                             (cons
                                               g$x$8992$Up9ra
                                               g$y$8986$Up9ra)
                                             g$ids$8991$Up9ra)))
                                        g$ids$8990$Up9ra
                                        g$x$8989$Up9ra))))))
                               g$ids$8984$Up9ra
                               g$y$8983$Up9ra))))))))
                  (g$cvt$8899$Up9ra
                    (case-lambda
                      ((g$p$8900$Up9ra g$n$8901$Up9ra g$ids$8902$Up9ra)
                       ((case-lambda
                          ((g$t$8903$Up9ra)
                           ((case-lambda
                              ((g$ls/false$8904$Up9ra)
                               (if (if g$ls/false$8904$Up9ra
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$8905$Up9ra)
                                            (g$id?$7078$Up9ra g$id$8905$Up9ra)))
                                         g$ls/false$8904$Up9ra))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$8906$Up9ra)
                                      (if (g$bound-id-member?$7085$Up9ra
                                            g$p$8900$Up9ra
                                            g$keys$8897$Up9ra)
                                        (values
                                          (vector 'free-id g$p$8900$Up9ra)
                                          g$ids$8902$Up9ra)
                                        (if (g$free-id=?$7082$Up9ra
                                              g$p$8900$Up9ra
                                              (g$scheme-stx$7299$Up9ra '_))
                                          (values '_ g$ids$8902$Up9ra)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$8900$Up9ra
                                                g$n$8901$Up9ra)
                                              g$ids$8902$Up9ra))))))
                                   g$ls/false$8904$Up9ra)
                                 ((case-lambda
                                    ((g$t$8907$Up9ra)
                                     ((case-lambda
                                        ((g$ls/false$8908$Up9ra)
                                         (if (if g$ls/false$8908$Up9ra
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$8909$Up9ra
                                                        g$dots$8910$Up9ra)
                                                      (g$ellipsis?$7357$Up9ra
                                                        g$dots$8910$Up9ra)))
                                                   g$ls/false$8908$Up9ra))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$8911$Up9ra
                                                  g$dots$8912$Up9ra)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$8899$Up9ra
                                                       g$p$8911$Up9ra
                                                       (+ g$n$8901$Up9ra '1)
                                                       g$ids$8902$Up9ra)))
                                                  (case-lambda
                                                    ((g$p$8915$Up9ra
                                                       g$ids$8916$Up9ra)
                                                     ((case-lambda
                                                        ((g$ids$8917$Up9ra
                                                           g$p$8918$Up9ra)
                                                         (values
                                                           (if (eq? g$p$8918$Up9ra
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$8918$Up9ra))
                                                           g$ids$8917$Up9ra)))
                                                      g$ids$8916$Up9ra
                                                      g$p$8915$Up9ra))))))
                                             g$ls/false$8908$Up9ra)
                                           ((case-lambda
                                              ((g$t$8919$Up9ra)
                                               ((case-lambda
                                                  ((g$ls/false$8920$Up9ra)
                                                   (if (if g$ls/false$8920$Up9ra
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$8921$Up9ra
                                                                  g$dots$8922$Up9ra
                                                                  g$ys$8923$Up9ra
                                                                  g$z$8924$Up9ra)
                                                                (g$ellipsis?$7357$Up9ra
                                                                  g$dots$8922$Up9ra)))
                                                             g$ls/false$8920$Up9ra))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$8925$Up9ra
                                                            g$dots$8926$Up9ra
                                                            g$ys$8927$Up9ra
                                                            g$z$8928$Up9ra)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$8899$Up9ra
                                                                 g$z$8928$Up9ra
                                                                 g$n$8901$Up9ra
                                                                 g$ids$8902$Up9ra)))
                                                            (case-lambda
                                                              ((g$z$8931$Up9ra
                                                                 g$ids$8932$Up9ra)
                                                               ((case-lambda
                                                                  ((g$ids$8933$Up9ra
                                                                     g$z$8934$Up9ra)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$8898$Up9ra
                                                                          g$ys$8927$Up9ra
                                                                          g$n$8901$Up9ra
                                                                          g$ids$8933$Up9ra)))
                                                                     (case-lambda
                                                                       ((g$ys$8937$Up9ra
                                                                          g$ids$8938$Up9ra)
                                                                        ((case-lambda
                                                                           ((g$ids$8939$Up9ra
                                                                              g$ys$8940$Up9ra)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$8899$Up9ra
                                                                                   g$x$8925$Up9ra
                                                                                   (+ g$n$8901$Up9ra
                                                                                      '1)
                                                                                   g$ids$8939$Up9ra)))
                                                                              (case-lambda
                                                                                ((g$x$8943$Up9ra
                                                                                   g$ids$8944$Up9ra)
                                                                                 ((case-lambda
                                                                                    ((g$ids$8945$Up9ra
                                                                                       g$x$8946$Up9ra)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$8946$Up9ra
                                                                                         (reverse
                                                                                           g$ys$8940$Up9ra)
                                                                                         g$z$8934$Up9ra)
                                                                                       g$ids$8945$Up9ra)))
                                                                                  g$ids$8944$Up9ra
                                                                                  g$x$8943$Up9ra))))))
                                                                         g$ids$8938$Up9ra
                                                                         g$ys$8937$Up9ra))))))
                                                                g$ids$8932$Up9ra
                                                                g$z$8931$Up9ra))))))
                                                       g$ls/false$8920$Up9ra)
                                                     ((case-lambda
                                                        ((g$t$8947$Up9ra)
                                                         ((case-lambda
                                                            ((g$ls/false$8948$Up9ra)
                                                             (if g$ls/false$8948$Up9ra
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$8949$Up9ra
                                                                      g$y$8950$Up9ra)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$8899$Up9ra
                                                                           g$y$8950$Up9ra
                                                                           g$n$8901$Up9ra
                                                                           g$ids$8902$Up9ra)))
                                                                      (case-lambda
                                                                        ((g$y$8953$Up9ra
                                                                           g$ids$8954$Up9ra)
                                                                         ((case-lambda
                                                                            ((g$ids$8955$Up9ra
                                                                               g$y$8956$Up9ra)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$8899$Up9ra
                                                                                    g$x$8949$Up9ra
                                                                                    g$n$8901$Up9ra
                                                                                    g$ids$8955$Up9ra)))
                                                                               (case-lambda
                                                                                 ((g$x$8959$Up9ra
                                                                                    g$ids$8960$Up9ra)
                                                                                  ((case-lambda
                                                                                     ((g$ids$8961$Up9ra
                                                                                        g$x$8962$Up9ra)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$8962$Up9ra
                                                                                          g$y$8956$Up9ra)
                                                                                        g$ids$8961$Up9ra)))
                                                                                   g$ids$8960$Up9ra
                                                                                   g$x$8959$Up9ra))))))
                                                                          g$ids$8954$Up9ra
                                                                          g$y$8953$Up9ra))))))
                                                                 g$ls/false$8948$Up9ra)
                                                               ((case-lambda
                                                                  ((g$t$8963$Up9ra)
                                                                   ((case-lambda
                                                                      ((g$ls/false$8964$Up9ra)
                                                                       (if g$ls/false$8964$Up9ra
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$8902$Up9ra)))
                                                                           g$ls/false$8964$Up9ra)
                                                                         ((case-lambda
                                                                            ((g$t$8965$Up9ra)
                                                                             ((case-lambda
                                                                                ((g$ls/false$8966$Up9ra)
                                                                                 (if (if g$ls/false$8966$Up9ra
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$8967$Up9ra)
                                                                                              (not (g$stx?$7050$Up9ra
                                                                                                     g$p$8967$Up9ra))))
                                                                                           g$ls/false$8966$Up9ra))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$8968$Up9ra)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$8899$Up9ra
                                                                                               g$p$8968$Up9ra
                                                                                               g$n$8901$Up9ra
                                                                                               g$ids$8902$Up9ra)))
                                                                                          (case-lambda
                                                                                            ((g$p$8971$Up9ra
                                                                                               g$ids$8972$Up9ra)
                                                                                             ((case-lambda
                                                                                                ((g$ids$8973$Up9ra
                                                                                                   g$p$8974$Up9ra)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$8974$Up9ra)
                                                                                                   g$ids$8973$Up9ra)))
                                                                                              g$ids$8972$Up9ra
                                                                                              g$p$8971$Up9ra))))))
                                                                                     g$ls/false$8966$Up9ra)
                                                                                   ((case-lambda
                                                                                      ((g$t$8975$Up9ra)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$8976$Up9ra)
                                                                                           (if g$ls/false$8976$Up9ra
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$8977$Up9ra)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$7089$Up9ra
                                                                                                        g$datum$8977$Up9ra))
                                                                                                    g$ids$8902$Up9ra)))
                                                                                               g$ls/false$8976$Up9ra)
                                                                                             (g$syntax-violation$7462$Up9ra
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$8975$Up9ra))))
                                                                                        (g$syntax-dispatch$7356$Up9ra
                                                                                          g$t$8975$Up9ra
                                                                                          'any))))
                                                                                    g$t$8965$Up9ra))))
                                                                              (g$syntax-dispatch$7356$Up9ra
                                                                                g$t$8965$Up9ra
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$8963$Up9ra))))
                                                                    (g$syntax-dispatch$7356$Up9ra
                                                                      g$t$8963$Up9ra
                                                                      '()))))
                                                                g$t$8947$Up9ra))))
                                                          (g$syntax-dispatch$7356$Up9ra
                                                            g$t$8947$Up9ra
                                                            '(any . any)))))
                                                      g$t$8919$Up9ra))))
                                                (g$syntax-dispatch$7356$Up9ra
                                                  g$t$8919$Up9ra
                                                  '(any any
                                                        .
                                                        #(each+ any () any))))))
                                            g$t$8907$Up9ra))))
                                      (g$syntax-dispatch$7356$Up9ra
                                        g$t$8907$Up9ra
                                        '(any any)))))
                                  g$t$8903$Up9ra))))
                            (g$syntax-dispatch$7356$Up9ra
                              g$t$8903$Up9ra
                              'any))))
                        g$p$8900$Up9ra)))))
          (g$cvt$8899$Up9ra g$pattern$8896$Up9ra '0 '())))))
   (g$syntax-dispatch$7356$Up9ra
     g$syntax-dispatch$10806$Up9ra
     (case-lambda
       ((g$e$8993$Up9ra g$p$8994$Up9ra)
        (letrec* ((g$stx^$8995$Up9ra
                    (case-lambda
                      ((g$e$9103$Up9ra
                         g$m*$9104$Up9ra
                         g$s*$9105$Up9ra
                         g$ae*$9106$Up9ra)
                       (if (if (null? g$m*$9104$Up9ra)
                             (if (null? g$s*$9105$Up9ra)
                               (begin '#f (null? g$ae*$9106$Up9ra))
                               '#f)
                             '#f)
                         g$e$9103$Up9ra
                         (g$mkstx$7066$Up9ra
                           g$e$9103$Up9ra
                           g$m*$9104$Up9ra
                           g$s*$9105$Up9ra
                           g$ae*$9106$Up9ra)))))
                  (g$match-each$8996$Up9ra
                    (case-lambda
                      ((g$e$9087$Up9ra
                         g$p$9088$Up9ra
                         g$m*$9089$Up9ra
                         g$s*$9090$Up9ra
                         g$ae*$9091$Up9ra)
                       (if (pair? g$e$9087$Up9ra)
                         ((case-lambda
                            ((g$first$9092$Up9ra)
                             (if g$first$9092$Up9ra
                               (begin
                                 '#f
                                 ((case-lambda
                                    ((g$rest$9093$Up9ra)
                                     (if g$rest$9093$Up9ra
                                       (begin
                                         '#f
                                         (cons
                                           g$first$9092$Up9ra
                                           g$rest$9093$Up9ra))
                                       '#f)))
                                  (g$match-each$8996$Up9ra
                                    (cdr g$e$9087$Up9ra)
                                    g$p$9088$Up9ra
                                    g$m*$9089$Up9ra
                                    g$s*$9090$Up9ra
                                    g$ae*$9091$Up9ra)))
                               '#f)))
                          (g$match$9002$Up9ra
                            (car g$e$9087$Up9ra)
                            g$p$9088$Up9ra
                            g$m*$9089$Up9ra
                            g$s*$9090$Up9ra
                            g$ae*$9091$Up9ra
                            '()))
                         (if (null? g$e$9087$Up9ra)
                           '()
                           (if (g$stx?$7050$Up9ra g$e$9087$Up9ra)
                             (if (not (g$top-marked?$7021$Up9ra
                                        g$m*$9089$Up9ra))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$7065$Up9ra
                                        g$m*$9089$Up9ra
                                        g$s*$9090$Up9ra
                                        g$ae*$9091$Up9ra
                                        g$e$9087$Up9ra)))
                                   (case-lambda
                                     ((g$m*$9097$Up9ra
                                        g$s*$9098$Up9ra
                                        g$ae*$9099$Up9ra)
                                      ((case-lambda
                                         ((g$ae*$9100$Up9ra
                                            g$s*$9101$Up9ra
                                            g$m*$9102$Up9ra)
                                          (g$match-each$8996$Up9ra
                                            (g$stx-expr$7052$Up9ra
                                              g$e$9087$Up9ra)
                                            g$p$9088$Up9ra
                                            g$m*$9102$Up9ra
                                            g$s*$9101$Up9ra
                                            g$ae*$9100$Up9ra)))
                                       g$ae*$9099$Up9ra
                                       g$s*$9098$Up9ra
                                       g$m*$9097$Up9ra)))))
                               '#f)
                             (if (annotation? g$e$9087$Up9ra)
                               (g$match-each$8996$Up9ra
                                 (annotation-expression g$e$9087$Up9ra)
                                 g$p$9088$Up9ra
                                 g$m*$9089$Up9ra
                                 g$s*$9090$Up9ra
                                 g$ae*$9091$Up9ra)
                               '#f)))))))
                  (g$match-each+$8997$Up9ra
                    (case-lambda
                      ((g$e$9055$Up9ra
                         g$x-pat$9056$Up9ra
                         g$y-pat$9057$Up9ra
                         g$z-pat$9058$Up9ra
                         g$m*$9059$Up9ra
                         g$s*$9060$Up9ra
                         g$ae*$9061$Up9ra
                         g$r$9062$Up9ra)
                       ((letrec ((g$f$9063$Up9ra
                                   (case-lambda
                                     ((g$e$9064$Up9ra
                                        g$m*$9065$Up9ra
                                        g$s*$9066$Up9ra
                                        g$ae*$9067$Up9ra)
                                      (if (pair? g$e$9064$Up9ra)
                                        (call-with-values
                                          (case-lambda
                                            (()
                                             (g$f$9063$Up9ra
                                               (cdr g$e$9064$Up9ra)
                                               g$m*$9065$Up9ra
                                               g$s*$9066$Up9ra
                                               g$ae*$9067$Up9ra)))
                                          (case-lambda
                                            ((g$xr*$9071$Up9ra
                                               g$y-pat$9072$Up9ra
                                               g$r$9073$Up9ra)
                                             ((case-lambda
                                                ((g$r$9074$Up9ra
                                                   g$y-pat$9075$Up9ra
                                                   g$xr*$9076$Up9ra)
                                                 (if g$r$9074$Up9ra
                                                   (if (null?
                                                         g$y-pat$9075$Up9ra)
                                                     ((case-lambda
                                                        ((g$xr$9077$Up9ra)
                                                         (if g$xr$9077$Up9ra
                                                           (values
                                                             (cons
                                                               g$xr$9077$Up9ra
                                                               g$xr*$9076$Up9ra)
                                                             g$y-pat$9075$Up9ra
                                                             g$r$9074$Up9ra)
                                                           (values
                                                             '#f
                                                             '#f
                                                             '#f))))
                                                      (g$match$9002$Up9ra
                                                        (car g$e$9064$Up9ra)
                                                        g$x-pat$9056$Up9ra
                                                        g$m*$9065$Up9ra
                                                        g$s*$9066$Up9ra
                                                        g$ae*$9067$Up9ra
                                                        '()))
                                                     (values
                                                       '()
                                                       (cdr g$y-pat$9075$Up9ra)
                                                       (g$match$9002$Up9ra
                                                         (car g$e$9064$Up9ra)
                                                         (car g$y-pat$9075$Up9ra)
                                                         g$m*$9065$Up9ra
                                                         g$s*$9066$Up9ra
                                                         g$ae*$9067$Up9ra
                                                         g$r$9074$Up9ra)))
                                                   (values '#f '#f '#f))))
                                              g$r$9073$Up9ra
                                              g$y-pat$9072$Up9ra
                                              g$xr*$9071$Up9ra))))
                                        (if (g$stx?$7050$Up9ra g$e$9064$Up9ra)
                                          (if (g$top-marked?$7021$Up9ra
                                                g$m*$9065$Up9ra)
                                            (values
                                              '()
                                              g$y-pat$9057$Up9ra
                                              (g$match$9002$Up9ra
                                                g$e$9064$Up9ra
                                                g$z-pat$9058$Up9ra
                                                g$m*$9065$Up9ra
                                                g$s*$9066$Up9ra
                                                g$ae*$9067$Up9ra
                                                g$r$9062$Up9ra))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$join-wraps$7065$Up9ra
                                                   g$m*$9065$Up9ra
                                                   g$s*$9066$Up9ra
                                                   g$ae*$9067$Up9ra
                                                   g$e$9064$Up9ra)))
                                              (case-lambda
                                                ((g$m*$9081$Up9ra
                                                   g$s*$9082$Up9ra
                                                   g$ae*$9083$Up9ra)
                                                 ((case-lambda
                                                    ((g$ae*$9084$Up9ra
                                                       g$s*$9085$Up9ra
                                                       g$m*$9086$Up9ra)
                                                     (g$f$9063$Up9ra
                                                       (g$stx-expr$7052$Up9ra
                                                         g$e$9064$Up9ra)
                                                       g$m*$9086$Up9ra
                                                       g$s*$9085$Up9ra
                                                       g$ae*$9084$Up9ra)))
                                                  g$ae*$9083$Up9ra
                                                  g$s*$9082$Up9ra
                                                  g$m*$9081$Up9ra)))))
                                          (if (annotation? g$e$9064$Up9ra)
                                            (g$f$9063$Up9ra
                                              (annotation-expression
                                                g$e$9064$Up9ra)
                                              g$m*$9065$Up9ra
                                              g$s*$9066$Up9ra
                                              g$ae*$9067$Up9ra)
                                            (values
                                              '()
                                              g$y-pat$9057$Up9ra
                                              (g$match$9002$Up9ra
                                                g$e$9064$Up9ra
                                                g$z-pat$9058$Up9ra
                                                g$m*$9065$Up9ra
                                                g$s*$9066$Up9ra
                                                g$ae*$9067$Up9ra
                                                g$r$9062$Up9ra)))))))))
                          g$f$9063$Up9ra)
                        g$e$9055$Up9ra
                        g$m*$9059$Up9ra
                        g$s*$9060$Up9ra
                        g$ae*$9061$Up9ra))))
                  (g$match-each-any$8998$Up9ra
                    (case-lambda
                      ((g$e$9041$Up9ra
                         g$m*$9042$Up9ra
                         g$s*$9043$Up9ra
                         g$ae*$9044$Up9ra)
                       (if (pair? g$e$9041$Up9ra)
                         ((case-lambda
                            ((g$l$9045$Up9ra)
                             (if g$l$9045$Up9ra
                               (begin
                                 '#f
                                 (cons
                                   (g$stx^$8995$Up9ra
                                     (car g$e$9041$Up9ra)
                                     g$m*$9042$Up9ra
                                     g$s*$9043$Up9ra
                                     g$ae*$9044$Up9ra)
                                   g$l$9045$Up9ra))
                               '#f)))
                          (g$match-each-any$8998$Up9ra
                            (cdr g$e$9041$Up9ra)
                            g$m*$9042$Up9ra
                            g$s*$9043$Up9ra
                            g$ae*$9044$Up9ra))
                         (if (null? g$e$9041$Up9ra)
                           '()
                           (if (g$stx?$7050$Up9ra g$e$9041$Up9ra)
                             (if (not (g$top-marked?$7021$Up9ra
                                        g$m*$9042$Up9ra))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$7065$Up9ra
                                        g$m*$9042$Up9ra
                                        g$s*$9043$Up9ra
                                        g$ae*$9044$Up9ra
                                        g$e$9041$Up9ra)))
                                   (case-lambda
                                     ((g$m*$9049$Up9ra
                                        g$s*$9050$Up9ra
                                        g$ae*$9051$Up9ra)
                                      ((case-lambda
                                         ((g$ae*$9052$Up9ra
                                            g$s*$9053$Up9ra
                                            g$m*$9054$Up9ra)
                                          (g$match-each-any$8998$Up9ra
                                            (g$stx-expr$7052$Up9ra
                                              g$e$9041$Up9ra)
                                            g$m*$9054$Up9ra
                                            g$s*$9053$Up9ra
                                            g$ae*$9052$Up9ra)))
                                       g$ae*$9051$Up9ra
                                       g$s*$9050$Up9ra
                                       g$m*$9049$Up9ra)))))
                               '#f)
                             (if (annotation? g$e$9041$Up9ra)
                               (g$match-each-any$8998$Up9ra
                                 (annotation-expression g$e$9041$Up9ra)
                                 g$m*$9042$Up9ra
                                 g$s*$9043$Up9ra
                                 g$ae*$9044$Up9ra)
                               '#f)))))))
                  (g$match-empty$8999$Up9ra
                    (case-lambda
                      ((g$p$9038$Up9ra g$r$9039$Up9ra)
                       (if (null? g$p$9038$Up9ra)
                         g$r$9039$Up9ra
                         (if (eq? g$p$9038$Up9ra '_)
                           g$r$9039$Up9ra
                           (if (eq? g$p$9038$Up9ra 'any)
                             (cons '() g$r$9039$Up9ra)
                             (if (pair? g$p$9038$Up9ra)
                               (g$match-empty$8999$Up9ra
                                 (car g$p$9038$Up9ra)
                                 (g$match-empty$8999$Up9ra
                                   (cdr g$p$9038$Up9ra)
                                   g$r$9039$Up9ra))
                               (if (eq? g$p$9038$Up9ra 'each-any)
                                 (cons '() g$r$9039$Up9ra)
                                 ((case-lambda
                                    ((g$t$9040$Up9ra)
                                     (if (eqv? g$t$9040$Up9ra 'each)
                                       (g$match-empty$8999$Up9ra
                                         (vector-ref g$p$9038$Up9ra '1)
                                         g$r$9039$Up9ra)
                                       (if (eqv? g$t$9040$Up9ra 'each+)
                                         (g$match-empty$8999$Up9ra
                                           (vector-ref g$p$9038$Up9ra '1)
                                           (g$match-empty$8999$Up9ra
                                             (reverse
                                               (vector-ref g$p$9038$Up9ra '2))
                                             (g$match-empty$8999$Up9ra
                                               (vector-ref g$p$9038$Up9ra '3)
                                               g$r$9039$Up9ra)))
                                         (if (memv
                                               g$t$9040$Up9ra
                                               '(free-id atom))
                                           g$r$9039$Up9ra
                                           (if (memv
                                                 g$t$9040$Up9ra
                                                 '(scheme-id atom))
                                             g$r$9039$Up9ra
                                             (if (eqv? g$t$9040$Up9ra 'vector)
                                               (g$match-empty$8999$Up9ra
                                                 (vector-ref g$p$9038$Up9ra '1)
                                                 g$r$9039$Up9ra)
                                               (assertion-violation
                                                 'syntax-dispatch
                                                 '"invalid pattern"
                                                 g$p$9038$Up9ra))))))))
                                  (vector-ref g$p$9038$Up9ra '0))))))))))
                  (g$combine$9000$Up9ra
                    (case-lambda
                      ((g$r*$9036$Up9ra g$r$9037$Up9ra)
                       (if (null? (car g$r*$9036$Up9ra))
                         g$r$9037$Up9ra
                         (cons
                           (map car g$r*$9036$Up9ra)
                           (g$combine$9000$Up9ra
                             (map cdr g$r*$9036$Up9ra)
                             g$r$9037$Up9ra))))))
                  (g$match*$9001$Up9ra
                    (case-lambda
                      ((g$e$9018$Up9ra
                         g$p$9019$Up9ra
                         g$m*$9020$Up9ra
                         g$s*$9021$Up9ra
                         g$ae*$9022$Up9ra
                         g$r$9023$Up9ra)
                       (if (null? g$p$9019$Up9ra)
                         (if (null? g$e$9018$Up9ra)
                           (begin '#f g$r$9023$Up9ra)
                           '#f)
                         (if (pair? g$p$9019$Up9ra)
                           (if (pair? g$e$9018$Up9ra)
                             (begin
                               '#f
                               (g$match$9002$Up9ra
                                 (car g$e$9018$Up9ra)
                                 (car g$p$9019$Up9ra)
                                 g$m*$9020$Up9ra
                                 g$s*$9021$Up9ra
                                 g$ae*$9022$Up9ra
                                 (g$match$9002$Up9ra
                                   (cdr g$e$9018$Up9ra)
                                   (cdr g$p$9019$Up9ra)
                                   g$m*$9020$Up9ra
                                   g$s*$9021$Up9ra
                                   g$ae*$9022$Up9ra
                                   g$r$9023$Up9ra)))
                             '#f)
                           (if (eq? g$p$9019$Up9ra 'each-any)
                             ((case-lambda
                                ((g$l$9024$Up9ra)
                                 (if g$l$9024$Up9ra
                                   (begin
                                     '#f
                                     (cons g$l$9024$Up9ra g$r$9023$Up9ra))
                                   '#f)))
                              (g$match-each-any$8998$Up9ra
                                g$e$9018$Up9ra
                                g$m*$9020$Up9ra
                                g$s*$9021$Up9ra
                                g$ae*$9022$Up9ra))
                             ((case-lambda
                                ((g$t$9025$Up9ra)
                                 (if (eqv? g$t$9025$Up9ra 'each)
                                   (if (null? g$e$9018$Up9ra)
                                     (g$match-empty$8999$Up9ra
                                       (vector-ref g$p$9019$Up9ra '1)
                                       g$r$9023$Up9ra)
                                     ((case-lambda
                                        ((g$r*$9035$Up9ra)
                                         (if g$r*$9035$Up9ra
                                           (begin
                                             '#f
                                             (g$combine$9000$Up9ra
                                               g$r*$9035$Up9ra
                                               g$r$9023$Up9ra))
                                           '#f)))
                                      (g$match-each$8996$Up9ra
                                        g$e$9018$Up9ra
                                        (vector-ref g$p$9019$Up9ra '1)
                                        g$m*$9020$Up9ra
                                        g$s*$9021$Up9ra
                                        g$ae*$9022$Up9ra)))
                                   (if (eqv? g$t$9025$Up9ra 'free-id)
                                     (if (symbol? g$e$9018$Up9ra)
                                       (if (g$top-marked?$7021$Up9ra
                                             g$m*$9020$Up9ra)
                                         (if (g$free-id=?$7082$Up9ra
                                               (g$stx^$8995$Up9ra
                                                 g$e$9018$Up9ra
                                                 g$m*$9020$Up9ra
                                                 g$s*$9021$Up9ra
                                                 g$ae*$9022$Up9ra)
                                               (vector-ref g$p$9019$Up9ra '1))
                                           (begin '#f g$r$9023$Up9ra)
                                           '#f)
                                         '#f)
                                       '#f)
                                     (if (eqv? g$t$9025$Up9ra 'scheme-id)
                                       (if (symbol? g$e$9018$Up9ra)
                                         (if (g$top-marked?$7021$Up9ra
                                               g$m*$9020$Up9ra)
                                           (if (g$free-id=?$7082$Up9ra
                                                 (g$stx^$8995$Up9ra
                                                   g$e$9018$Up9ra
                                                   g$m*$9020$Up9ra
                                                   g$s*$9021$Up9ra
                                                   g$ae*$9022$Up9ra)
                                                 (g$scheme-stx$7299$Up9ra
                                                   (vector-ref
                                                     g$p$9019$Up9ra
                                                     '1)))
                                             (begin '#f g$r$9023$Up9ra)
                                             '#f)
                                           '#f)
                                         '#f)
                                       (if (eqv? g$t$9025$Up9ra 'each+)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$match-each+$8997$Up9ra
                                                g$e$9018$Up9ra
                                                (vector-ref g$p$9019$Up9ra '1)
                                                (vector-ref g$p$9019$Up9ra '2)
                                                (vector-ref g$p$9019$Up9ra '3)
                                                g$m*$9020$Up9ra
                                                g$s*$9021$Up9ra
                                                g$ae*$9022$Up9ra
                                                g$r$9023$Up9ra)))
                                           (case-lambda
                                             ((g$xr*$9029$Up9ra
                                                g$y-pat$9030$Up9ra
                                                g$r$9031$Up9ra)
                                              ((case-lambda
                                                 ((g$r$9032$Up9ra
                                                    g$y-pat$9033$Up9ra
                                                    g$xr*$9034$Up9ra)
                                                  (if g$r$9032$Up9ra
                                                    (if (null?
                                                          g$y-pat$9033$Up9ra)
                                                      (begin
                                                        '#f
                                                        (if (null?
                                                              g$xr*$9034$Up9ra)
                                                          (g$match-empty$8999$Up9ra
                                                            (vector-ref
                                                              g$p$9019$Up9ra
                                                              '1)
                                                            g$r$9032$Up9ra)
                                                          (g$combine$9000$Up9ra
                                                            g$xr*$9034$Up9ra
                                                            g$r$9032$Up9ra)))
                                                      '#f)
                                                    '#f)))
                                               g$r$9031$Up9ra
                                               g$y-pat$9030$Up9ra
                                               g$xr*$9029$Up9ra))))
                                         (if (eqv? g$t$9025$Up9ra 'atom)
                                           (if (equal?
                                                 (vector-ref g$p$9019$Up9ra '1)
                                                 (g$strip$7088$Up9ra
                                                   g$e$9018$Up9ra
                                                   g$m*$9020$Up9ra))
                                             (begin '#f g$r$9023$Up9ra)
                                             '#f)
                                           (if (eqv? g$t$9025$Up9ra 'vector)
                                             (if (vector? g$e$9018$Up9ra)
                                               (begin
                                                 '#f
                                                 (g$match$9002$Up9ra
                                                   (vector->list g$e$9018$Up9ra)
                                                   (vector-ref
                                                     g$p$9019$Up9ra
                                                     '1)
                                                   g$m*$9020$Up9ra
                                                   g$s*$9021$Up9ra
                                                   g$ae*$9022$Up9ra
                                                   g$r$9023$Up9ra))
                                               '#f)
                                             (assertion-violation
                                               'syntax-dispatch
                                               '"invalid pattern"
                                               g$p$9019$Up9ra)))))))))
                              (vector-ref g$p$9019$Up9ra '0))))))))
                  (g$match$9002$Up9ra
                    (case-lambda
                      ((g$e$9003$Up9ra
                         g$p$9004$Up9ra
                         g$m*$9005$Up9ra
                         g$s*$9006$Up9ra
                         g$ae*$9007$Up9ra
                         g$r$9008$Up9ra)
                       (if (not g$r$9008$Up9ra)
                         '#f
                         (if (eq? g$p$9004$Up9ra '_)
                           g$r$9008$Up9ra
                           (if (eq? g$p$9004$Up9ra 'any)
                             (cons
                               (g$stx^$8995$Up9ra
                                 g$e$9003$Up9ra
                                 g$m*$9005$Up9ra
                                 g$s*$9006$Up9ra
                                 g$ae*$9007$Up9ra)
                               g$r$9008$Up9ra)
                             (if (g$stx?$7050$Up9ra g$e$9003$Up9ra)
                               (if (not (g$top-marked?$7021$Up9ra
                                          g$m*$9005$Up9ra))
                                 (begin
                                   '#f
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$join-wraps$7065$Up9ra
                                          g$m*$9005$Up9ra
                                          g$s*$9006$Up9ra
                                          g$ae*$9007$Up9ra
                                          g$e$9003$Up9ra)))
                                     (case-lambda
                                       ((g$m*$9012$Up9ra
                                          g$s*$9013$Up9ra
                                          g$ae*$9014$Up9ra)
                                        ((case-lambda
                                           ((g$ae*$9015$Up9ra
                                              g$s*$9016$Up9ra
                                              g$m*$9017$Up9ra)
                                            (g$match$9002$Up9ra
                                              (g$stx-expr$7052$Up9ra
                                                g$e$9003$Up9ra)
                                              g$p$9004$Up9ra
                                              g$m*$9017$Up9ra
                                              g$s*$9016$Up9ra
                                              g$ae*$9015$Up9ra
                                              g$r$9008$Up9ra)))
                                         g$ae*$9014$Up9ra
                                         g$s*$9013$Up9ra
                                         g$m*$9012$Up9ra)))))
                                 '#f)
                               (if (annotation? g$e$9003$Up9ra)
                                 (g$match$9002$Up9ra
                                   (annotation-expression g$e$9003$Up9ra)
                                   g$p$9004$Up9ra
                                   g$m*$9005$Up9ra
                                   g$s*$9006$Up9ra
                                   g$ae*$9007$Up9ra
                                   g$r$9008$Up9ra)
                                 (g$match*$9001$Up9ra
                                   g$e$9003$Up9ra
                                   g$p$9004$Up9ra
                                   g$m*$9005$Up9ra
                                   g$s*$9006$Up9ra
                                   g$ae*$9007$Up9ra
                                   g$r$9008$Up9ra))))))))))
          (g$match$9002$Up9ra g$e$8993$Up9ra g$p$8994$Up9ra '() '() '() '())))))
   (g$ellipsis?$7357$Up9ra
     g$ellipsis?$10807$Up9ra
     (case-lambda
       ((g$x$9107$Up9ra)
        (if (g$id?$7078$Up9ra g$x$9107$Up9ra)
          (begin
            '#f
            (g$free-id=?$7082$Up9ra
              g$x$9107$Up9ra
              (g$scheme-stx$7299$Up9ra '...)))
          '#f))))
   (g$underscore?$7358$Up9ra
     g$underscore?$10808$Up9ra
     (case-lambda
       ((g$x$9108$Up9ra)
        (if (g$id?$7078$Up9ra g$x$9108$Up9ra)
          (begin
            '#f
            (g$free-id=?$7082$Up9ra
              g$x$9108$Up9ra
              (g$scheme-stx$7299$Up9ra '_)))
          '#f))))
   (g$verify-literals$7359$Up9ra
     g$verify-literals$10809$Up9ra
     (case-lambda
       ((g$lits$9109$Up9ra g$expr$9110$Up9ra)
        (for-each
          (case-lambda
            ((g$x$9111$Up9ra)
             (if ((case-lambda
                    ((g$t$9112$Up9ra)
                     (if g$t$9112$Up9ra
                       g$t$9112$Up9ra
                       ((case-lambda
                          ((g$t$9113$Up9ra)
                           (if g$t$9113$Up9ra
                             g$t$9113$Up9ra
                             (begin
                               '#f
                               (g$underscore?$7358$Up9ra g$x$9111$Up9ra)))))
                        (g$ellipsis?$7357$Up9ra g$x$9111$Up9ra)))))
                  (not (g$id?$7078$Up9ra g$x$9111$Up9ra)))
               (g$syntax-violation$7462$Up9ra
                 '#f
                 '"invalid literal"
                 g$expr$9110$Up9ra
                 g$x$9111$Up9ra)
               (void))))
          g$lits$9109$Up9ra))))
   (g$syntax-case-transformer$7360$Up9ra
     g$syntax-case-transformer$10810$Up9ra
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$9114$Up9ra
                     (case-lambda
                       ((g$pvars$9171$Up9ra
                          g$expr$9172$Up9ra
                          g$y$9173$Up9ra
                          g$r$9174$Up9ra
                          g$mr$9175$Up9ra)
                        ((case-lambda
                           ((g$ids$9176$Up9ra g$levels$9177$Up9ra)
                            ((case-lambda
                               ((g$labels$9178$Up9ra g$new-vars$9179$Up9ra)
                                ((case-lambda
                                   ((g$body$9180$Up9ra)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$7009$Up9ra
                                        '#f
                                        g$new-vars$9179$Up9ra
                                        g$body$9180$Up9ra)
                                      g$y$9173$Up9ra)))
                                 (g$chi-expr$7374$Up9ra
                                   (g$add-subst$7068$Up9ra
                                     (g$make-full-rib$7046$Up9ra
                                       g$ids$9176$Up9ra
                                       g$labels$9178$Up9ra)
                                     g$expr$9172$Up9ra)
                                   (append
                                     (map (case-lambda
                                            ((g$label$9181$Up9ra
                                               g$var$9182$Up9ra
                                               g$level$9183$Up9ra)
                                             (cons
                                               g$label$9181$Up9ra
                                               (g$make-binding$7094$Up9ra
                                                 'syntax
                                                 (cons
                                                   g$var$9182$Up9ra
                                                   g$level$9183$Up9ra)))))
                                          g$labels$9178$Up9ra
                                          g$new-vars$9179$Up9ra
                                          (map cdr g$pvars$9171$Up9ra))
                                     g$r$9174$Up9ra)
                                   g$mr$9175$Up9ra))))
                             (map g$gen-label$7024$Up9ra g$ids$9176$Up9ra)
                             (map g$gen-lexical$7022$Up9ra g$ids$9176$Up9ra))))
                         (map car g$pvars$9171$Up9ra)
                         (map cdr g$pvars$9171$Up9ra)))))
                   (g$invalid-ids-error$9115$Up9ra
                     (case-lambda
                       ((g$id*$9165$Up9ra g$e$9166$Up9ra g$class$9167$Up9ra)
                        ((letrec ((g$find$9168$Up9ra
                                    (case-lambda
                                      ((g$id*$9169$Up9ra g$ok*$9170$Up9ra)
                                       (if (null? g$id*$9169$Up9ra)
                                         (g$syntax-violation$7462$Up9ra
                                           '#f
                                           '"invalid syntax"
                                           g$e$9166$Up9ra)
                                         (if (g$id?$7078$Up9ra
                                               (car g$id*$9169$Up9ra))
                                           (if (g$bound-id-member?$7085$Up9ra
                                                 (car g$id*$9169$Up9ra)
                                                 g$ok*$9170$Up9ra)
                                             (g$syntax-error$7459$Up9ra
                                               (car g$id*$9169$Up9ra)
                                               '"duplicate "
                                               g$class$9167$Up9ra)
                                             (g$find$9168$Up9ra
                                               (cdr g$id*$9169$Up9ra)
                                               (cons
                                                 (car g$id*$9169$Up9ra)
                                                 g$ok*$9170$Up9ra)))
                                           (g$syntax-error$7459$Up9ra
                                             (car g$id*$9169$Up9ra)
                                             '"invalid "
                                             g$class$9167$Up9ra)))))))
                           g$find$9168$Up9ra)
                         g$id*$9165$Up9ra
                         '()))))
                   (g$gen-clause$9116$Up9ra
                     (case-lambda
                       ((g$x$9145$Up9ra
                          g$keys$9146$Up9ra
                          g$clauses$9147$Up9ra
                          g$r$9148$Up9ra
                          g$mr$9149$Up9ra
                          g$pat$9150$Up9ra
                          g$fender$9151$Up9ra
                          g$expr$9152$Up9ra)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$7355$Up9ra
                               g$pat$9150$Up9ra
                               g$keys$9146$Up9ra)))
                          (case-lambda
                            ((g$p$9155$Up9ra g$pvars$9156$Up9ra)
                             ((case-lambda
                                ((g$pvars$9157$Up9ra g$p$9158$Up9ra)
                                 (if (not (g$distinct-bound-ids?$7084$Up9ra
                                            (map car g$pvars$9157$Up9ra)))
                                   (g$invalid-ids-error$9115$Up9ra
                                     (map car g$pvars$9157$Up9ra)
                                     g$pat$9150$Up9ra
                                     '"pattern variable")
                                   (if (not (g$for-all$5365$Up9ra
                                              (case-lambda
                                                ((g$x$9159$Up9ra)
                                                 (not (g$ellipsis?$7357$Up9ra
                                                        (car g$x$9159$Up9ra)))))
                                              g$pvars$9157$Up9ra))
                                     (g$syntax-violation$7462$Up9ra
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$9150$Up9ra)
                                     ((case-lambda
                                        ((g$y$9160$Up9ra)
                                         ((case-lambda
                                            ((g$test$9161$Up9ra)
                                             ((case-lambda
                                                ((g$conseq$9162$Up9ra)
                                                 ((case-lambda
                                                    ((g$altern$9163$Up9ra)
                                                     (list
                                                       (g$build-lambda$7009$Up9ra
                                                         '#f
                                                         (list g$y$9160$Up9ra)
                                                         (list
                                                           'if
                                                           g$test$9161$Up9ra
                                                           g$conseq$9162$Up9ra
                                                           g$altern$9163$Up9ra))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$9145$Up9ra
                                                         (list
                                                           'quote
                                                           g$p$9158$Up9ra)))))
                                                  (g$gen-syntax-case$9117$Up9ra
                                                    g$x$9145$Up9ra
                                                    g$keys$9146$Up9ra
                                                    g$clauses$9147$Up9ra
                                                    g$r$9148$Up9ra
                                                    g$mr$9149$Up9ra))))
                                              (g$build-dispatch-call$9114$Up9ra
                                                g$pvars$9157$Up9ra
                                                g$expr$9152$Up9ra
                                                g$y$9160$Up9ra
                                                g$r$9148$Up9ra
                                                g$mr$9149$Up9ra))))
                                          (if (eq? g$fender$9151$Up9ra '#t)
                                            g$y$9160$Up9ra
                                            ((case-lambda
                                               ((g$call$9164$Up9ra)
                                                (list
                                                  'if
                                                  g$y$9160$Up9ra
                                                  g$call$9164$Up9ra
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$9114$Up9ra
                                               g$pvars$9157$Up9ra
                                               g$fender$9151$Up9ra
                                               g$y$9160$Up9ra
                                               g$r$9148$Up9ra
                                               g$mr$9149$Up9ra))))))
                                      (g$gen-lexical$7022$Up9ra 'tmp))))))
                              g$pvars$9156$Up9ra
                              g$p$9155$Up9ra)))))))
                   (g$gen-syntax-case$9117$Up9ra
                     (case-lambda
                       ((g$x$9128$Up9ra
                          g$keys$9129$Up9ra
                          g$clauses$9130$Up9ra
                          g$r$9131$Up9ra
                          g$mr$9132$Up9ra)
                        (if (null? g$clauses$9130$Up9ra)
                          (list '(primitive syntax-error) g$x$9128$Up9ra)
                          ((case-lambda
                             ((g$t$9133$Up9ra)
                              ((case-lambda
                                 ((g$ls/false$9134$Up9ra)
                                  (if g$ls/false$9134$Up9ra
                                    (apply
                                      (case-lambda
                                        ((g$pat$9135$Up9ra g$expr$9136$Up9ra)
                                         (if (if (g$id?$7078$Up9ra
                                                   g$pat$9135$Up9ra)
                                               (if (not (g$bound-id-member?$7085$Up9ra
                                                          g$pat$9135$Up9ra
                                                          g$keys$9129$Up9ra))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$7357$Up9ra
                                                          g$pat$9135$Up9ra)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$7082$Up9ra
                                                 g$pat$9135$Up9ra
                                                 (g$scheme-stx$7299$Up9ra '_))
                                             (g$chi-expr$7374$Up9ra
                                               g$expr$9136$Up9ra
                                               g$r$9131$Up9ra
                                               g$mr$9132$Up9ra)
                                             ((case-lambda
                                                ((g$lab$9137$Up9ra
                                                   g$lex$9138$Up9ra)
                                                 ((case-lambda
                                                    ((g$body$9139$Up9ra)
                                                     (list
                                                       (g$build-lambda$7009$Up9ra
                                                         '#f
                                                         (list g$lex$9138$Up9ra)
                                                         g$body$9139$Up9ra)
                                                       g$x$9128$Up9ra)))
                                                  (g$chi-expr$7374$Up9ra
                                                    (g$add-subst$7068$Up9ra
                                                      (g$make-full-rib$7046$Up9ra
                                                        (list g$pat$9135$Up9ra)
                                                        (list g$lab$9137$Up9ra))
                                                      g$expr$9136$Up9ra)
                                                    (cons
                                                      (cons
                                                        g$lab$9137$Up9ra
                                                        (g$make-binding$7094$Up9ra
                                                          'syntax
                                                          (cons
                                                            g$lex$9138$Up9ra
                                                            '0)))
                                                      g$r$9131$Up9ra)
                                                    g$mr$9132$Up9ra))))
                                              (g$gen-label$7024$Up9ra
                                                g$pat$9135$Up9ra)
                                              (g$gen-lexical$7022$Up9ra
                                                g$pat$9135$Up9ra)))
                                           (g$gen-clause$9116$Up9ra
                                             g$x$9128$Up9ra
                                             g$keys$9129$Up9ra
                                             (cdr g$clauses$9130$Up9ra)
                                             g$r$9131$Up9ra
                                             g$mr$9132$Up9ra
                                             g$pat$9135$Up9ra
                                             '#t
                                             g$expr$9136$Up9ra))))
                                      g$ls/false$9134$Up9ra)
                                    ((case-lambda
                                       ((g$t$9140$Up9ra)
                                        ((case-lambda
                                           ((g$ls/false$9141$Up9ra)
                                            (if g$ls/false$9141$Up9ra
                                              (apply
                                                (case-lambda
                                                  ((g$pat$9142$Up9ra
                                                     g$fender$9143$Up9ra
                                                     g$expr$9144$Up9ra)
                                                   (g$gen-clause$9116$Up9ra
                                                     g$x$9128$Up9ra
                                                     g$keys$9129$Up9ra
                                                     (cdr g$clauses$9130$Up9ra)
                                                     g$r$9131$Up9ra
                                                     g$mr$9132$Up9ra
                                                     g$pat$9142$Up9ra
                                                     g$fender$9143$Up9ra
                                                     g$expr$9144$Up9ra)))
                                                g$ls/false$9141$Up9ra)
                                              (g$syntax-violation$7462$Up9ra
                                                '#f
                                                '"invalid syntax"
                                                g$t$9140$Up9ra))))
                                         (g$syntax-dispatch$7356$Up9ra
                                           g$t$9140$Up9ra
                                           '(any any any)))))
                                     g$t$9133$Up9ra))))
                               (g$syntax-dispatch$7356$Up9ra
                                 g$t$9133$Up9ra
                                 '(any any)))))
                           (car g$clauses$9130$Up9ra)))))))
           (case-lambda
             ((g$e$9118$Up9ra g$r$9119$Up9ra g$mr$9120$Up9ra)
              ((case-lambda
                 ((g$t$9121$Up9ra)
                  ((case-lambda
                     ((g$ls/false$9122$Up9ra)
                      (if g$ls/false$9122$Up9ra
                        (apply
                          (case-lambda
                            ((g$expr$9123$Up9ra
                               g$keys$9124$Up9ra
                               g$clauses$9125$Up9ra)
                             (begin
                               (g$verify-literals$7359$Up9ra
                                 g$keys$9124$Up9ra
                                 g$e$9118$Up9ra)
                               ((case-lambda
                                  ((g$x$9126$Up9ra)
                                   ((case-lambda
                                      ((g$body$9127$Up9ra)
                                       (list
                                         (g$build-lambda$7009$Up9ra
                                           '#f
                                           (list g$x$9126$Up9ra)
                                           g$body$9127$Up9ra)
                                         (g$chi-expr$7374$Up9ra
                                           g$expr$9123$Up9ra
                                           g$r$9119$Up9ra
                                           g$mr$9120$Up9ra))))
                                    (g$gen-syntax-case$9117$Up9ra
                                      g$x$9126$Up9ra
                                      g$keys$9124$Up9ra
                                      g$clauses$9125$Up9ra
                                      g$r$9119$Up9ra
                                      g$mr$9120$Up9ra))))
                                (g$gen-lexical$7022$Up9ra 'tmp)))))
                          g$ls/false$9122$Up9ra)
                        (g$syntax-violation$7462$Up9ra
                          '#f
                          '"invalid syntax"
                          g$t$9121$Up9ra))))
                   (g$syntax-dispatch$7356$Up9ra
                     g$t$9121$Up9ra
                     '(_ any each-any . each-any)))))
               g$e$9118$Up9ra))))))))
   (g$ellipsis-map$7361$Up9ra
     g$ellipsis-map$10811$Up9ra
     (case-lambda
       ((g$proc$9184$Up9ra g$ls$9185$Up9ra . g$ls*$9186$Up9ra)
        (letrec* ((g$who$9187$Up9ra '...))
          (begin
            (if (list? g$ls$9185$Up9ra)
              (void)
              (assertion-violation
                g$who$9187$Up9ra
                '"not a list"
                g$ls$9185$Up9ra))
            (if (null? g$ls*$9186$Up9ra)
              (void)
              ((case-lambda
                 ((g$n$9188$Up9ra)
                  (for-each
                    (case-lambda
                      ((g$x$9189$Up9ra)
                       (begin
                         (if (list? g$x$9189$Up9ra)
                           (void)
                           (assertion-violation
                             g$who$9187$Up9ra
                             '"not a list"
                             g$x$9189$Up9ra))
                         (if (= (length g$x$9189$Up9ra) g$n$9188$Up9ra)
                           (void)
                           (assertion-violation
                             g$who$9187$Up9ra
                             '"length mismatch"
                             g$ls$9185$Up9ra
                             g$x$9189$Up9ra)))))
                    g$ls*$9186$Up9ra)))
               (length g$ls$9185$Up9ra)))
            (apply map g$proc$9184$Up9ra g$ls$9185$Up9ra g$ls*$9186$Up9ra))))))
   (g$syntax-transformer$7362$Up9ra
     g$syntax-transformer$10812$Up9ra
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$9190$Up9ra
                     (case-lambda
                       ((g$src$9250$Up9ra
                          g$e$9251$Up9ra
                          g$r$9252$Up9ra
                          g$maps$9253$Up9ra
                          g$ellipsis?$9254$Up9ra
                          g$vec?$9255$Up9ra)
                        ((case-lambda
                           ((g$t$9256$Up9ra)
                            ((case-lambda
                               ((g$ls/false$9257$Up9ra)
                                (if (if g$ls/false$9257$Up9ra
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$9258$Up9ra)
                                             (g$ellipsis?$9254$Up9ra
                                               g$dots$9258$Up9ra)))
                                          g$ls/false$9257$Up9ra))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$9259$Up9ra)
                                       (g$syntax-violation$7462$Up9ra
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$9250$Up9ra)))
                                    g$ls/false$9257$Up9ra)
                                  ((case-lambda
                                     ((g$t$9260$Up9ra)
                                      ((case-lambda
                                         ((g$ls/false$9261$Up9ra)
                                          (if (if g$ls/false$9261$Up9ra
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$9262$Up9ra)
                                                       (g$id?$7078$Up9ra
                                                         g$id$9262$Up9ra)))
                                                    g$ls/false$9261$Up9ra))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$9263$Up9ra)
                                                 ((case-lambda
                                                    ((g$label$9264$Up9ra)
                                                     ((case-lambda
                                                        ((g$b$9265$Up9ra)
                                                         ((case-lambda
                                                            (()
                                                             (if (eq? (g$binding-type$7095$Up9ra
                                                                        g$b$9265$Up9ra)
                                                                      'syntax)
                                                               (call-with-values
                                                                 (case-lambda
                                                                   (()
                                                                    ((case-lambda
                                                                       ((g$var.lev$9268$Up9ra)
                                                                        (g$gen-ref$9191$Up9ra
                                                                          g$src$9250$Up9ra
                                                                          (car g$var.lev$9268$Up9ra)
                                                                          (cdr g$var.lev$9268$Up9ra)
                                                                          g$maps$9253$Up9ra)))
                                                                     (g$binding-value$7096$Up9ra
                                                                       g$b$9265$Up9ra))))
                                                                 (case-lambda
                                                                   ((g$var$9269$Up9ra
                                                                      g$maps$9270$Up9ra)
                                                                    ((case-lambda
                                                                       ((g$maps$9271$Up9ra
                                                                          g$var$9272$Up9ra)
                                                                        (values
                                                                          (list
                                                                            'ref
                                                                            g$var$9272$Up9ra)
                                                                          g$maps$9271$Up9ra)))
                                                                     g$maps$9270$Up9ra
                                                                     g$var$9269$Up9ra))))
                                                               (values
                                                                 (list
                                                                   'quote
                                                                   g$e$9251$Up9ra)
                                                                 g$maps$9253$Up9ra)))))))
                                                      (g$label->binding$7093$Up9ra
                                                        g$label$9264$Up9ra
                                                        g$r$9252$Up9ra))))
                                                  (g$id->label$7091$Up9ra
                                                    g$e$9251$Up9ra))))
                                              g$ls/false$9261$Up9ra)
                                            ((case-lambda
                                               ((g$t$9273$Up9ra)
                                                ((case-lambda
                                                   ((g$ls/false$9274$Up9ra)
                                                    (if (if g$ls/false$9274$Up9ra
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$9275$Up9ra
                                                                   g$e$9276$Up9ra)
                                                                 (g$ellipsis?$9254$Up9ra
                                                                   g$dots$9275$Up9ra)))
                                                              g$ls/false$9274$Up9ra))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$9277$Up9ra
                                                             g$e$9278$Up9ra)
                                                           (if g$vec?$9255$Up9ra
                                                             (g$syntax-violation$7462$Up9ra
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$9250$Up9ra)
                                                             (g$gen-syntax$9190$Up9ra
                                                               g$src$9250$Up9ra
                                                               g$e$9278$Up9ra
                                                               g$r$9252$Up9ra
                                                               g$maps$9253$Up9ra
                                                               (case-lambda
                                                                 ((g$x$9279$Up9ra)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$9274$Up9ra)
                                                      ((case-lambda
                                                         ((g$t$9280$Up9ra)
                                                          ((case-lambda
                                                             ((g$ls/false$9281$Up9ra)
                                                              (if (if g$ls/false$9281$Up9ra
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$9282$Up9ra
                                                                             g$dots$9283$Up9ra
                                                                             g$y$9284$Up9ra)
                                                                           (g$ellipsis?$9254$Up9ra
                                                                             g$dots$9283$Up9ra)))
                                                                        g$ls/false$9281$Up9ra))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$9285$Up9ra
                                                                       g$dots$9286$Up9ra
                                                                       g$y$9287$Up9ra)
                                                                     ((letrec ((g$f$9288$Up9ra
                                                                                 (case-lambda
                                                                                   ((g$y$9289$Up9ra
                                                                                      g$k$9290$Up9ra)
                                                                                    ((case-lambda
                                                                                       ((g$t$9291$Up9ra)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9292$Up9ra)
                                                                                            (if g$ls/false$9292$Up9ra
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$9290$Up9ra
                                                                                                     g$maps$9253$Up9ra)))
                                                                                                g$ls/false$9292$Up9ra)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9293$Up9ra)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9294$Up9ra)
                                                                                                      (if (if g$ls/false$9294$Up9ra
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$9295$Up9ra
                                                                                                                     g$y$9296$Up9ra)
                                                                                                                   (g$ellipsis?$9254$Up9ra
                                                                                                                     g$dots$9295$Up9ra)))
                                                                                                                g$ls/false$9294$Up9ra))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$9297$Up9ra
                                                                                                               g$y$9298$Up9ra)
                                                                                                             (g$f$9288$Up9ra
                                                                                                               g$y$9298$Up9ra
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$9299$Up9ra)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$9290$Up9ra
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$9299$Up9ra))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$9302$Up9ra
                                                                                                                         g$maps$9303$Up9ra)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$9304$Up9ra
                                                                                                                             g$x$9305$Up9ra)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$9304$Up9ra))
                                                                                                                             (g$syntax-violation$7462$Up9ra
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$9250$Up9ra)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$9193$Up9ra
                                                                                                                                 g$x$9305$Up9ra
                                                                                                                                 (car g$maps$9304$Up9ra))
                                                                                                                               (cdr g$maps$9304$Up9ra)))))
                                                                                                                        g$maps$9303$Up9ra
                                                                                                                        g$x$9302$Up9ra)))))))))
                                                                                                          g$ls/false$9294$Up9ra)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9306$Up9ra)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9307$Up9ra)
                                                                                                                (if g$ls/false$9307$Up9ra
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$9190$Up9ra
                                                                                                                              g$src$9250$Up9ra
                                                                                                                              g$y$9289$Up9ra
                                                                                                                              g$r$9252$Up9ra
                                                                                                                              g$maps$9253$Up9ra
                                                                                                                              g$ellipsis?$9254$Up9ra
                                                                                                                              g$vec?$9255$Up9ra)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$9310$Up9ra
                                                                                                                              g$maps$9311$Up9ra)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$9312$Up9ra
                                                                                                                                  g$y$9313$Up9ra)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$9290$Up9ra
                                                                                                                                       g$maps$9312$Up9ra)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$9316$Up9ra
                                                                                                                                       g$maps$9317$Up9ra)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$9318$Up9ra
                                                                                                                                           g$x$9319$Up9ra)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$9192$Up9ra
                                                                                                                                             g$x$9319$Up9ra
                                                                                                                                             g$y$9313$Up9ra)
                                                                                                                                           g$maps$9318$Up9ra)))
                                                                                                                                      g$maps$9317$Up9ra
                                                                                                                                      g$x$9316$Up9ra))))))
                                                                                                                             g$maps$9311$Up9ra
                                                                                                                             g$y$9310$Up9ra))))))
                                                                                                                    g$ls/false$9307$Up9ra)
                                                                                                                  (g$syntax-violation$7462$Up9ra
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9306$Up9ra))))
                                                                                                             (g$syntax-dispatch$7356$Up9ra
                                                                                                               g$t$9306$Up9ra
                                                                                                               '_))))
                                                                                                         g$t$9293$Up9ra))))
                                                                                                   (g$syntax-dispatch$7356$Up9ra
                                                                                                     g$t$9293$Up9ra
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$9291$Up9ra))))
                                                                                         (g$syntax-dispatch$7356$Up9ra
                                                                                           g$t$9291$Up9ra
                                                                                           '()))))
                                                                                     g$y$9289$Up9ra)))))
                                                                        g$f$9288$Up9ra)
                                                                      g$y$9287$Up9ra
                                                                      (case-lambda
                                                                        ((g$maps$9320$Up9ra)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$9190$Up9ra
                                                                                g$src$9250$Up9ra
                                                                                g$x$9285$Up9ra
                                                                                g$r$9252$Up9ra
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$9320$Up9ra)
                                                                                g$ellipsis?$9254$Up9ra
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$9323$Up9ra
                                                                                g$maps$9324$Up9ra)
                                                                              ((case-lambda
                                                                                 ((g$maps$9325$Up9ra
                                                                                    g$x$9326$Up9ra)
                                                                                  (if (null?
                                                                                        (car g$maps$9325$Up9ra))
                                                                                    (g$syntax-violation$7462$Up9ra
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$9250$Up9ra)
                                                                                    (values
                                                                                      (g$gen-map$9194$Up9ra
                                                                                        g$x$9326$Up9ra
                                                                                        (car g$maps$9325$Up9ra))
                                                                                      (cdr g$maps$9325$Up9ra)))))
                                                                               g$maps$9324$Up9ra
                                                                               g$x$9323$Up9ra)))))))))
                                                                  g$ls/false$9281$Up9ra)
                                                                ((case-lambda
                                                                   ((g$t$9327$Up9ra)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9328$Up9ra)
                                                                        (if g$ls/false$9328$Up9ra
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$9329$Up9ra
                                                                                 g$y$9330$Up9ra)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$9190$Up9ra
                                                                                      g$src$9250$Up9ra
                                                                                      g$x$9329$Up9ra
                                                                                      g$r$9252$Up9ra
                                                                                      g$maps$9253$Up9ra
                                                                                      g$ellipsis?$9254$Up9ra
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$9333$Up9ra
                                                                                      g$maps$9334$Up9ra)
                                                                                    ((case-lambda
                                                                                       ((g$maps$9335$Up9ra
                                                                                          g$xnew$9336$Up9ra)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$9190$Up9ra
                                                                                               g$src$9250$Up9ra
                                                                                               g$y$9330$Up9ra
                                                                                               g$r$9252$Up9ra
                                                                                               g$maps$9335$Up9ra
                                                                                               g$ellipsis?$9254$Up9ra
                                                                                               g$vec?$9255$Up9ra)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$9339$Up9ra
                                                                                               g$maps$9340$Up9ra)
                                                                                             ((case-lambda
                                                                                                ((g$maps$9341$Up9ra
                                                                                                   g$ynew$9342$Up9ra)
                                                                                                 (values
                                                                                                   (g$gen-cons$9195$Up9ra
                                                                                                     g$e$9251$Up9ra
                                                                                                     g$x$9329$Up9ra
                                                                                                     g$y$9330$Up9ra
                                                                                                     g$xnew$9336$Up9ra
                                                                                                     g$ynew$9342$Up9ra)
                                                                                                   g$maps$9341$Up9ra)))
                                                                                              g$maps$9340$Up9ra
                                                                                              g$ynew$9339$Up9ra))))))
                                                                                     g$maps$9334$Up9ra
                                                                                     g$xnew$9333$Up9ra))))))
                                                                            g$ls/false$9328$Up9ra)
                                                                          ((case-lambda
                                                                             ((g$t$9343$Up9ra)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9344$Up9ra)
                                                                                  (if g$ls/false$9344$Up9ra
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$9345$Up9ra)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$9190$Up9ra
                                                                                                g$src$9250$Up9ra
                                                                                                g$ls$9345$Up9ra
                                                                                                g$r$9252$Up9ra
                                                                                                g$maps$9253$Up9ra
                                                                                                g$ellipsis?$9254$Up9ra
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$9348$Up9ra
                                                                                                g$maps$9349$Up9ra)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$9350$Up9ra
                                                                                                    g$lsnew$9351$Up9ra)
                                                                                                  (values
                                                                                                    (g$gen-vector$9196$Up9ra
                                                                                                      g$e$9251$Up9ra
                                                                                                      g$ls$9345$Up9ra
                                                                                                      g$lsnew$9351$Up9ra)
                                                                                                    g$maps$9350$Up9ra)))
                                                                                               g$maps$9349$Up9ra
                                                                                               g$lsnew$9348$Up9ra))))))
                                                                                      g$ls/false$9344$Up9ra)
                                                                                    ((case-lambda
                                                                                       ((g$t$9352$Up9ra)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9353$Up9ra)
                                                                                            (if g$ls/false$9353$Up9ra
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$9251$Up9ra)
                                                                                                     g$maps$9253$Up9ra)))
                                                                                                g$ls/false$9353$Up9ra)
                                                                                              (g$syntax-violation$7462$Up9ra
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9352$Up9ra))))
                                                                                         (g$syntax-dispatch$7356$Up9ra
                                                                                           g$t$9352$Up9ra
                                                                                           '_))))
                                                                                     g$t$9343$Up9ra))))
                                                                               (g$syntax-dispatch$7356$Up9ra
                                                                                 g$t$9343$Up9ra
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9327$Up9ra))))
                                                                     (g$syntax-dispatch$7356$Up9ra
                                                                       g$t$9327$Up9ra
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9280$Up9ra))))
                                                           (g$syntax-dispatch$7356$Up9ra
                                                             g$t$9280$Up9ra
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$9273$Up9ra))))
                                                 (g$syntax-dispatch$7356$Up9ra
                                                   g$t$9273$Up9ra
                                                   '(any any)))))
                                             g$t$9260$Up9ra))))
                                       (g$syntax-dispatch$7356$Up9ra
                                         g$t$9260$Up9ra
                                         'any))))
                                   g$t$9256$Up9ra))))
                             (g$syntax-dispatch$7356$Up9ra
                               g$t$9256$Up9ra
                               'any))))
                         g$e$9251$Up9ra))))
                   (g$gen-ref$9191$Up9ra
                     (case-lambda
                       ((g$src$9237$Up9ra
                          g$var$9238$Up9ra
                          g$level$9239$Up9ra
                          g$maps$9240$Up9ra)
                        (if (= g$level$9239$Up9ra '0)
                          (values g$var$9238$Up9ra g$maps$9240$Up9ra)
                          (if (null? g$maps$9240$Up9ra)
                            (g$syntax-violation$7462$Up9ra
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$9237$Up9ra)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$9191$Up9ra
                                   g$src$9237$Up9ra
                                   g$var$9238$Up9ra
                                   (- g$level$9239$Up9ra '1)
                                   (cdr g$maps$9240$Up9ra))))
                              (case-lambda
                                ((g$outer-var$9243$Up9ra
                                   g$outer-maps$9244$Up9ra)
                                 ((case-lambda
                                    ((g$outer-maps$9245$Up9ra
                                       g$outer-var$9246$Up9ra)
                                     ((case-lambda
                                        ((g$t$9247$Up9ra)
                                         (if g$t$9247$Up9ra
                                           ((case-lambda
                                              ((g$b$9248$Up9ra)
                                               (values
                                                 (cdr g$b$9248$Up9ra)
                                                 g$maps$9240$Up9ra)))
                                            g$t$9247$Up9ra)
                                           ((case-lambda
                                              ((g$inner-var$9249$Up9ra)
                                               (values
                                                 g$inner-var$9249$Up9ra
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$9246$Up9ra
                                                       g$inner-var$9249$Up9ra)
                                                     (car g$maps$9240$Up9ra))
                                                   g$outer-maps$9245$Up9ra))))
                                            (g$gen-lexical$7022$Up9ra 'tmp)))))
                                      (assq
                                        g$outer-var$9246$Up9ra
                                        (car g$maps$9240$Up9ra)))))
                                  g$outer-maps$9244$Up9ra
                                  g$outer-var$9243$Up9ra)))))))))
                   (g$gen-append$9192$Up9ra
                     (case-lambda
                       ((g$x$9235$Up9ra g$y$9236$Up9ra)
                        (if (equal? g$y$9236$Up9ra ''())
                          g$x$9235$Up9ra
                          (list 'append g$x$9235$Up9ra g$y$9236$Up9ra)))))
                   (g$gen-mappend$9193$Up9ra
                     (case-lambda
                       ((g$e$9233$Up9ra g$map-env$9234$Up9ra)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$9194$Up9ra
                            g$e$9233$Up9ra
                            g$map-env$9234$Up9ra)))))
                   (g$gen-map$9194$Up9ra
                     (case-lambda
                       ((g$e$9224$Up9ra g$map-env$9225$Up9ra)
                        ((case-lambda
                           ((g$formals$9226$Up9ra g$actuals$9227$Up9ra)
                            (if (eq? (car g$e$9224$Up9ra) 'ref)
                              (car g$actuals$9227$Up9ra)
                              (if (g$for-all$5365$Up9ra
                                    (case-lambda
                                      ((g$x$9228$Up9ra)
                                       (if (eq? (car g$x$9228$Up9ra) 'ref)
                                         (begin
                                           '#f
                                           (memq
                                             (g$cadr$4896$Up9ra g$x$9228$Up9ra)
                                             g$formals$9226$Up9ra))
                                         '#f)))
                                    (cdr g$e$9224$Up9ra))
                                ((case-lambda
                                   ((g$args$9229$Up9ra)
                                    (cons
                                      'map
                                      (cons
                                        (list 'primitive (car g$e$9224$Up9ra))
                                        g$args$9229$Up9ra))))
                                 (map ((case-lambda
                                         ((g$r$9230$Up9ra)
                                          (case-lambda
                                            ((g$x$9231$Up9ra)
                                             (cdr (assq
                                                    (g$cadr$4896$Up9ra
                                                      g$x$9231$Up9ra)
                                                    g$r$9230$Up9ra))))))
                                       (map cons
                                            g$formals$9226$Up9ra
                                            g$actuals$9227$Up9ra))
                                      (cdr g$e$9224$Up9ra)))
                                (g$cons*$5367$Up9ra
                                  'map
                                  (list
                                    'lambda
                                    g$formals$9226$Up9ra
                                    g$e$9224$Up9ra)
                                  g$actuals$9227$Up9ra)))))
                         (map cdr g$map-env$9225$Up9ra)
                         (map (case-lambda
                                ((g$x$9232$Up9ra)
                                 (list 'ref (car g$x$9232$Up9ra))))
                              g$map-env$9225$Up9ra)))))
                   (g$gen-cons$9195$Up9ra
                     (case-lambda
                       ((g$e$9216$Up9ra
                          g$x$9217$Up9ra
                          g$y$9218$Up9ra
                          g$xnew$9219$Up9ra
                          g$ynew$9220$Up9ra)
                        ((case-lambda
                           ((g$t$9221$Up9ra)
                            (if (eqv? g$t$9221$Up9ra 'quote)
                              (if (eq? (car g$xnew$9219$Up9ra) 'quote)
                                ((case-lambda
                                   ((g$xnew$9222$Up9ra g$ynew$9223$Up9ra)
                                    (if (if (eq? g$xnew$9222$Up9ra
                                                 g$x$9217$Up9ra)
                                          (begin
                                            '#f
                                            (eq? g$ynew$9223$Up9ra
                                                 g$y$9218$Up9ra))
                                          '#f)
                                      (list 'quote g$e$9216$Up9ra)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$9222$Up9ra
                                          g$ynew$9223$Up9ra)))))
                                 (g$cadr$4896$Up9ra g$xnew$9219$Up9ra)
                                 (g$cadr$4896$Up9ra g$ynew$9220$Up9ra))
                                (if (null?
                                      (g$cadr$4896$Up9ra g$ynew$9220$Up9ra))
                                  (list 'list g$xnew$9219$Up9ra)
                                  (list
                                    'cons
                                    g$xnew$9219$Up9ra
                                    g$ynew$9220$Up9ra)))
                              (if (eqv? g$t$9221$Up9ra 'list)
                                (cons
                                  'list
                                  (cons
                                    g$xnew$9219$Up9ra
                                    (cdr g$ynew$9220$Up9ra)))
                                (list
                                  'cons
                                  g$xnew$9219$Up9ra
                                  g$ynew$9220$Up9ra)))))
                         (car g$ynew$9220$Up9ra)))))
                   (g$gen-vector$9196$Up9ra
                     (case-lambda
                       ((g$e$9213$Up9ra g$ls$9214$Up9ra g$lsnew$9215$Up9ra)
                        (if (eq? (car g$lsnew$9215$Up9ra) 'quote)
                          (if (eq? (g$cadr$4896$Up9ra g$lsnew$9215$Up9ra)
                                   g$ls$9214$Up9ra)
                            (list 'quote g$e$9213$Up9ra)
                            (list
                              'quote
                              (list->vector
                                (g$cadr$4896$Up9ra g$lsnew$9215$Up9ra))))
                          (if (eq? (car g$lsnew$9215$Up9ra) 'list)
                            (cons 'vector (cdr g$lsnew$9215$Up9ra))
                            (list 'list->vector g$lsnew$9215$Up9ra))))))
                   (g$regen$9197$Up9ra
                     (case-lambda
                       ((g$x$9210$Up9ra)
                        ((case-lambda
                           ((g$t$9211$Up9ra)
                            (if (eqv? g$t$9211$Up9ra 'ref)
                              (g$cadr$4896$Up9ra g$x$9210$Up9ra)
                              (if (eqv? g$t$9211$Up9ra 'primitive)
                                (list
                                  'primitive
                                  (g$cadr$4896$Up9ra g$x$9210$Up9ra))
                                (if (eqv? g$t$9211$Up9ra 'quote)
                                  (list
                                    'quote
                                    (g$cadr$4896$Up9ra g$x$9210$Up9ra))
                                  (if (eqv? g$t$9211$Up9ra 'lambda)
                                    (g$build-lambda$7009$Up9ra
                                      '#f
                                      (g$cadr$4896$Up9ra g$x$9210$Up9ra)
                                      (g$regen$9197$Up9ra
                                        (g$caddr$4902$Up9ra g$x$9210$Up9ra)))
                                    (if (eqv? g$t$9211$Up9ra 'map)
                                      ((case-lambda
                                         ((g$ls$9212$Up9ra)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$9212$Up9ra)))
                                       (map g$regen$9197$Up9ra
                                            (cdr g$x$9210$Up9ra)))
                                      (cons
                                        (list 'primitive (car g$x$9210$Up9ra))
                                        (map g$regen$9197$Up9ra
                                             (cdr g$x$9210$Up9ra))))))))))
                         (car g$x$9210$Up9ra))))))
           (case-lambda
             ((g$e$9198$Up9ra g$r$9199$Up9ra g$mr$9200$Up9ra)
              ((case-lambda
                 ((g$t$9201$Up9ra)
                  ((case-lambda
                     ((g$ls/false$9202$Up9ra)
                      (if g$ls/false$9202$Up9ra
                        (apply
                          (case-lambda
                            ((g$x$9203$Up9ra)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$9190$Up9ra
                                    g$e$9198$Up9ra
                                    g$x$9203$Up9ra
                                    g$r$9199$Up9ra
                                    '()
                                    g$ellipsis?$7357$Up9ra
                                    '#f)))
                               (case-lambda
                                 ((g$e$9206$Up9ra g$maps$9207$Up9ra)
                                  ((case-lambda
                                     ((g$maps$9208$Up9ra g$e$9209$Up9ra)
                                      (g$regen$9197$Up9ra g$e$9209$Up9ra)))
                                   g$maps$9207$Up9ra
                                   g$e$9206$Up9ra))))))
                          g$ls/false$9202$Up9ra)
                        (g$syntax-violation$7462$Up9ra
                          '#f
                          '"invalid syntax"
                          g$t$9201$Up9ra))))
                   (g$syntax-dispatch$7356$Up9ra g$t$9201$Up9ra '(_ any)))))
               g$e$9198$Up9ra))))))))
   (g$core-macro-transformer$7363$Up9ra
     g$core-macro-transformer$10813$Up9ra
     (case-lambda
       ((g$name$9354$Up9ra)
        ((case-lambda
           ((g$t$9355$Up9ra)
            (if (eqv? g$t$9355$Up9ra 'quote)
              g$quote-transformer$7316$Up9ra
              (if (eqv? g$t$9355$Up9ra 'lambda)
                g$lambda-transformer$7318$Up9ra
                (if (eqv? g$t$9355$Up9ra 'case-lambda)
                  g$case-lambda-transformer$7317$Up9ra
                  (if (eqv? g$t$9355$Up9ra 'letrec)
                    g$letrec-transformer$7306$Up9ra
                    (if (eqv? g$t$9355$Up9ra 'letrec*)
                      g$letrec*-transformer$7307$Up9ra
                      (if (eqv? g$t$9355$Up9ra 'case)
                        g$case-transformer$7315$Up9ra
                        (if (eqv? g$t$9355$Up9ra 'if)
                          g$if-transformer$7314$Up9ra
                          (if (eqv? g$t$9355$Up9ra 'when)
                            g$when-transformer$7312$Up9ra
                            (if (eqv? g$t$9355$Up9ra 'unless)
                              g$unless-transformer$7313$Up9ra
                              (if (eqv? g$t$9355$Up9ra 'parameterize)
                                g$parameterize-transformer$7353$Up9ra
                                (if (eqv? g$t$9355$Up9ra 'foreign-call)
                                  g$foreign-call-transformer$7354$Up9ra
                                  (if (eqv? g$t$9355$Up9ra 'syntax-case)
                                    g$syntax-case-transformer$7360$Up9ra
                                    (if (eqv? g$t$9355$Up9ra 'syntax)
                                      g$syntax-transformer$7362$Up9ra
                                      (if (eqv? g$t$9355$Up9ra 'type-descriptor)
                                        g$type-descriptor-transformer$7309$Up9ra
                                        (if (eqv?
                                              g$t$9355$Up9ra
                                              'record-type-descriptor)
                                          g$record-type-descriptor-transformer$7310$Up9ra
                                          (if (eqv?
                                                g$t$9355$Up9ra
                                                'record-constructor-descriptor)
                                            g$record-constructor-descriptor-transformer$7311$Up9ra
                                            (if (eqv?
                                                  g$t$9355$Up9ra
                                                  'fluid-let-syntax)
                                              g$fluid-let-syntax-transformer$7308$Up9ra
                                              (assertion-violation
                                                'macro-transformer
                                                '"BUG: cannot find transformer"
                                                g$name$9354$Up9ra))))))))))))))))))))
         g$name$9354$Up9ra))))
   (g$file-options-macro$7364$Up9ra
     g$file-options-macro$10814$Up9ra
     (case-lambda
       ((g$x$9356$Up9ra)
        ((case-lambda
           ((g$t$9357$Up9ra)
            ((case-lambda
               ((g$ls/false$9358$Up9ra)
                (if (if g$ls/false$9358$Up9ra
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$opt*$9359$Up9ra)
                             (if (g$for-all$5365$Up9ra
                                   g$id?$7078$Up9ra
                                   g$opt*$9359$Up9ra)
                               (begin
                                 '#f
                                 (g$file-options-spec$6347$Up9ra
                                   (map g$id->sym$7079$Up9ra
                                        g$opt*$9359$Up9ra)))
                               '#f)))
                          g$ls/false$9358$Up9ra))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$opt*$9360$Up9ra)
                       (g$bless$7319$Up9ra
                         (list
                           'quote
                           (g$file-options-spec$6347$Up9ra
                             (map g$id->sym$7079$Up9ra g$opt*$9360$Up9ra))))))
                    g$ls/false$9358$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$9357$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$9357$Up9ra '(_ . each-any)))))
         g$x$9356$Up9ra))))
   (g$symbol-macro$7365$Up9ra
     g$symbol-macro$10815$Up9ra
     (case-lambda
       ((g$x$9361$Up9ra g$set$9362$Up9ra)
        ((case-lambda
           ((g$t$9363$Up9ra)
            ((case-lambda
               ((g$ls/false$9364$Up9ra)
                (if (if g$ls/false$9364$Up9ra
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$9365$Up9ra)
                             (if (g$id?$7078$Up9ra g$name$9365$Up9ra)
                               (begin
                                 '#f
                                 (memq
                                   (g$id->sym$7079$Up9ra g$name$9365$Up9ra)
                                   g$set$9362$Up9ra))
                               '#f)))
                          g$ls/false$9364$Up9ra))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$9366$Up9ra)
                       (g$bless$7319$Up9ra (list 'quote g$name$9366$Up9ra))))
                    g$ls/false$9364$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$9363$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$9363$Up9ra '(_ any)))))
         g$x$9361$Up9ra))))
   (g$macro-transformer$7366$Up9ra
     g$macro-transformer$10816$Up9ra
     (case-lambda
       ((g$x$9367$Up9ra)
        (if (procedure? g$x$9367$Up9ra)
          g$x$9367$Up9ra
          (if (symbol? g$x$9367$Up9ra)
            ((case-lambda
               ((g$t$9368$Up9ra)
                (if (eqv? g$t$9368$Up9ra 'define-record-type)
                  g$define-record-type-macro$7350$Up9ra
                  (if (eqv? g$t$9368$Up9ra 'define-struct)
                    g$define-struct-macro$7349$Up9ra
                    (if (eqv? g$t$9368$Up9ra 'include)
                      g$include-macro$7344$Up9ra
                      (if (eqv? g$t$9368$Up9ra 'cond)
                        g$cond-macro$7342$Up9ra
                        (if (eqv? g$t$9368$Up9ra 'let)
                          g$let-macro$7322$Up9ra
                          (if (eqv? g$t$9368$Up9ra 'do)
                            g$do-macro$7338$Up9ra
                            (if (eqv? g$t$9368$Up9ra 'or)
                              g$or-macro$7340$Up9ra
                              (if (eqv? g$t$9368$Up9ra 'and)
                                g$and-macro$7341$Up9ra
                                (if (eqv? g$t$9368$Up9ra 'let*)
                                  g$let*-macro$7339$Up9ra
                                  (if (eqv? g$t$9368$Up9ra 'let-values)
                                    g$let-values-macro$7323$Up9ra
                                    (if (eqv? g$t$9368$Up9ra 'let*-values)
                                      g$let*-values-macro$7324$Up9ra
                                      (if (eqv? g$t$9368$Up9ra 'syntax-rules)
                                        g$syntax-rules-macro$7346$Up9ra
                                        (if (eqv? g$t$9368$Up9ra 'quasiquote)
                                          g$quasiquote-macro$7347$Up9ra
                                          (if (eqv? g$t$9368$Up9ra 'quasisyntax)
                                            g$quasisyntax-macro$7348$Up9ra
                                            (if (eqv?
                                                  g$t$9368$Up9ra
                                                  'with-syntax)
                                              g$with-syntax-macro$7320$Up9ra
                                              (if (eqv?
                                                    g$t$9368$Up9ra
                                                    'identifier-syntax)
                                                g$identifier-syntax-macro$7337$Up9ra
                                                (if (eqv? g$t$9368$Up9ra 'time)
                                                  g$time-macro$7333$Up9ra
                                                  (if (eqv?
                                                        g$t$9368$Up9ra
                                                        'delay)
                                                    g$delay-macro$7334$Up9ra
                                                    (if (eqv?
                                                          g$t$9368$Up9ra
                                                          'assert)
                                                      g$assert-macro$7335$Up9ra
                                                      (if (eqv?
                                                            g$t$9368$Up9ra
                                                            'endianness)
                                                        g$endianness-macro$7336$Up9ra
                                                        (if (eqv?
                                                              g$t$9368$Up9ra
                                                              'guard)
                                                          g$guard-macro$7331$Up9ra
                                                          (if (eqv?
                                                                g$t$9368$Up9ra
                                                                'define-enumeration)
                                                            g$define-enumeration-macro$7332$Up9ra
                                                            (if (eqv?
                                                                  g$t$9368$Up9ra
                                                                  'trace-lambda)
                                                              g$trace-lambda-macro$7325$Up9ra
                                                              (if (eqv?
                                                                    g$t$9368$Up9ra
                                                                    'trace-define)
                                                                g$trace-define-macro$7326$Up9ra
                                                                (if (eqv?
                                                                      g$t$9368$Up9ra
                                                                      'trace-define-syntax)
                                                                  g$trace-define-syntax-macro$7327$Up9ra
                                                                  (if (eqv?
                                                                        g$t$9368$Up9ra
                                                                        'trace-let-syntax)
                                                                    g$trace-let-syntax-macro$7329$Up9ra
                                                                    (if (eqv?
                                                                          g$t$9368$Up9ra
                                                                          'trace-letrec-syntax)
                                                                      g$trace-letrec-syntax-macro$7330$Up9ra
                                                                      (if (eqv?
                                                                            g$t$9368$Up9ra
                                                                            'define-condition-type)
                                                                        g$define-condition-type-macro$7351$Up9ra
                                                                        (if (eqv?
                                                                              g$t$9368$Up9ra
                                                                              'include-into)
                                                                          g$include-into-macro$7345$Up9ra
                                                                          (if (eqv?
                                                                                g$t$9368$Up9ra
                                                                                'eol-style)
                                                                            (case-lambda
                                                                              ((g$x$9371$Up9ra)
                                                                               (g$symbol-macro$7365$Up9ra
                                                                                 g$x$9371$Up9ra
                                                                                 '(none
                                                                                    lf
                                                                                    cr
                                                                                    crlf
                                                                                    nel
                                                                                    crnel
                                                                                    ls))))
                                                                            (if (eqv?
                                                                                  g$t$9368$Up9ra
                                                                                  'error-handling-mode)
                                                                              (case-lambda
                                                                                ((g$x$9370$Up9ra)
                                                                                 (g$symbol-macro$7365$Up9ra
                                                                                   g$x$9370$Up9ra
                                                                                   '(ignore
                                                                                      raise
                                                                                      replace))))
                                                                              (if (eqv?
                                                                                    g$t$9368$Up9ra
                                                                                    'buffer-mode)
                                                                                (case-lambda
                                                                                  ((g$x$9369$Up9ra)
                                                                                   (g$symbol-macro$7365$Up9ra
                                                                                     g$x$9369$Up9ra
                                                                                     '(none
                                                                                        line
                                                                                        block))))
                                                                                (if (eqv?
                                                                                      g$t$9368$Up9ra
                                                                                      'file-options)
                                                                                  g$file-options-macro$7364$Up9ra
                                                                                  (if (memv
                                                                                        g$t$9368$Up9ra
                                                                                        '(... =>
                                                                                              _
                                                                                              else
                                                                                              unquote
                                                                                              unquote-splicing
                                                                                              unsyntax
                                                                                              unsyntax-splicing
                                                                                              fields
                                                                                              mutable
                                                                                              immutable
                                                                                              parent
                                                                                              protocol
                                                                                              sealed
                                                                                              opaque
                                                                                              nongenerative
                                                                                              parent-rtd))
                                                                                    g$incorrect-usage-macro$7352$Up9ra
                                                                                    (error
                                                                                      'macro-transformer
                                                                                      '"BUG: invalid macro"
                                                                                      g$x$9367$Up9ra)))))))))))))))))))))))))))))))))))))
             g$x$9367$Up9ra)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$9367$Up9ra))))))
   (g$local-macro-transformer$7367$Up9ra
     g$local-macro-transformer$10817$Up9ra
     (case-lambda ((g$x$9372$Up9ra) (car g$x$9372$Up9ra))))
   (g$do-macro-call$7368$Up9ra
     g$do-macro-call$10818$Up9ra
     (case-lambda
       ((g$transformer$9373$Up9ra g$expr$9374$Up9ra)
        ((case-lambda
           ((g$out$9375$Up9ra)
            (begin
              ((letrec ((g$f$9376$Up9ra
                          (case-lambda
                            ((g$x$9377$Up9ra)
                             (if (g$stx?$7050$Up9ra g$x$9377$Up9ra)
                               (void)
                               (if (pair? g$x$9377$Up9ra)
                                 (begin
                                   (g$f$9376$Up9ra (car g$x$9377$Up9ra))
                                   (g$f$9376$Up9ra (cdr g$x$9377$Up9ra)))
                                 (if (vector? g$x$9377$Up9ra)
                                   (vector-for-each
                                     g$f$9376$Up9ra
                                     g$x$9377$Up9ra)
                                   (if (symbol? g$x$9377$Up9ra)
                                     (g$syntax-violation$7462$Up9ra
                                       '#f
                                       '"raw symbol encountered in output of macro"
                                       g$expr$9374$Up9ra
                                       g$x$9377$Up9ra)
                                     (void)))))))))
                 g$f$9376$Up9ra)
               g$out$9375$Up9ra)
              (g$add-mark$7067$Up9ra
                (g$gen-mark$7062$Up9ra)
                g$out$9375$Up9ra
                g$expr$9374$Up9ra))))
         (g$transformer$9373$Up9ra
           (g$add-mark$7067$Up9ra
             g$anti-mark$7063$Up9ra
             g$expr$9374$Up9ra
             '#f))))))
   (g$chi-macro$7369$Up9ra
     g$chi-macro$10819$Up9ra
     (case-lambda
       ((g$p$9378$Up9ra g$e$9379$Up9ra)
        (g$do-macro-call$7368$Up9ra
          (g$macro-transformer$7366$Up9ra g$p$9378$Up9ra)
          g$e$9379$Up9ra))))
   (g$chi-local-macro$7370$Up9ra
     g$chi-local-macro$10820$Up9ra
     (case-lambda
       ((g$p$9380$Up9ra g$e$9381$Up9ra)
        (g$do-macro-call$7368$Up9ra
          (g$local-macro-transformer$7367$Up9ra g$p$9380$Up9ra)
          g$e$9381$Up9ra))))
   (g$chi-global-macro$7371$Up9ra
     g$chi-global-macro$10821$Up9ra
     (case-lambda
       ((g$p$9382$Up9ra g$e$9383$Up9ra)
        ((case-lambda
           ((g$lib$9384$Up9ra g$loc$9385$Up9ra)
            (begin
              (g$visit-library$6894$Up9ra g$lib$9384$Up9ra)
              ((case-lambda
                 ((g$x$9386$Up9ra)
                  ((case-lambda
                     ((g$transformer$9387$Up9ra)
                      (g$do-macro-call$7368$Up9ra
                        g$transformer$9387$Up9ra
                        g$e$9383$Up9ra)))
                   (if (procedure? g$x$9386$Up9ra)
                     g$x$9386$Up9ra
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$9386$Up9ra)))))
               (symbol-value g$loc$9385$Up9ra)))))
         (car g$p$9382$Up9ra)
         (cdr g$p$9382$Up9ra)))))
   (g$chi-expr*$7372$Up9ra
     g$chi-expr*$10822$Up9ra
     (case-lambda
       ((g$e*$9388$Up9ra g$r$9389$Up9ra g$mr$9390$Up9ra)
        (if (null? g$e*$9388$Up9ra)
          '()
          ((case-lambda
             ((g$e$9391$Up9ra)
              (cons
                g$e$9391$Up9ra
                (g$chi-expr*$7372$Up9ra
                  (cdr g$e*$9388$Up9ra)
                  g$r$9389$Up9ra
                  g$mr$9390$Up9ra))))
           (g$chi-expr$7374$Up9ra
             (car g$e*$9388$Up9ra)
             g$r$9389$Up9ra
             g$mr$9390$Up9ra))))))
   (g$chi-application$7373$Up9ra
     g$chi-application$10823$Up9ra
     (case-lambda
       ((g$e$9392$Up9ra g$r$9393$Up9ra g$mr$9394$Up9ra)
        ((case-lambda
           ((g$t$9395$Up9ra)
            ((case-lambda
               ((g$ls/false$9396$Up9ra)
                (if g$ls/false$9396$Up9ra
                  (apply
                    (case-lambda
                      ((g$rator$9397$Up9ra g$rands$9398$Up9ra)
                       ((case-lambda
                          ((g$rator$9399$Up9ra)
                           (cons
                             g$rator$9399$Up9ra
                             (g$chi-expr*$7372$Up9ra
                               g$rands$9398$Up9ra
                               g$r$9393$Up9ra
                               g$mr$9394$Up9ra))))
                        (g$chi-expr$7374$Up9ra
                          g$rator$9397$Up9ra
                          g$r$9393$Up9ra
                          g$mr$9394$Up9ra))))
                    g$ls/false$9396$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$9395$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$9395$Up9ra '(any . each-any)))))
         g$e$9392$Up9ra))))
   (g$chi-expr$7374$Up9ra
     g$chi-expr$10824$Up9ra
     (case-lambda
       ((g$e$9400$Up9ra g$r$9401$Up9ra g$mr$9402$Up9ra)
        (call-with-values
          (case-lambda
            (() (g$syntax-type$7098$Up9ra g$e$9400$Up9ra g$r$9401$Up9ra)))
          (case-lambda
            ((g$type$9406$Up9ra g$value$9407$Up9ra g$kwd$9408$Up9ra)
             ((case-lambda
                ((g$kwd$9409$Up9ra g$value$9410$Up9ra g$type$9411$Up9ra)
                 ((case-lambda
                    ((g$t$9412$Up9ra)
                     (if (eqv? g$t$9412$Up9ra 'core-macro)
                       ((case-lambda
                          ((g$transformer$9438$Up9ra)
                           (g$transformer$9438$Up9ra
                             g$e$9400$Up9ra
                             g$r$9401$Up9ra
                             g$mr$9402$Up9ra)))
                        (g$core-macro-transformer$7363$Up9ra
                          g$value$9410$Up9ra))
                       (if (eqv? g$t$9412$Up9ra 'global)
                         ((case-lambda
                            ((g$lib$9436$Up9ra)
                             ((case-lambda
                                ((g$loc$9437$Up9ra)
                                 ((case-lambda
                                    (()
                                     (begin
                                       ((g$inv-collector$7408$Up9ra)
                                        g$lib$9436$Up9ra)
                                       g$loc$9437$Up9ra))))))
                              (cdr g$value$9410$Up9ra))))
                          (car g$value$9410$Up9ra))
                         (if (eqv? g$t$9412$Up9ra 'core-prim)
                           ((case-lambda
                              ((g$name$9435$Up9ra)
                               (list 'primitive g$name$9435$Up9ra)))
                            g$value$9410$Up9ra)
                           (if (eqv? g$t$9412$Up9ra 'call)
                             (g$chi-application$7373$Up9ra
                               g$e$9400$Up9ra
                               g$r$9401$Up9ra
                               g$mr$9402$Up9ra)
                             (if (eqv? g$t$9412$Up9ra 'lexical)
                               ((case-lambda
                                  ((g$lex$9434$Up9ra) g$lex$9434$Up9ra))
                                (g$lexical-var$7300$Up9ra g$value$9410$Up9ra))
                               (if (memv
                                     g$t$9412$Up9ra
                                     '(global-macro global-macro!))
                                 (g$chi-expr$7374$Up9ra
                                   (g$chi-global-macro$7371$Up9ra
                                     g$value$9410$Up9ra
                                     g$e$9400$Up9ra)
                                   g$r$9401$Up9ra
                                   g$mr$9402$Up9ra)
                                 (if (memv
                                       g$t$9412$Up9ra
                                       '(local-macro local-macro!))
                                   (g$chi-expr$7374$Up9ra
                                     (g$chi-local-macro$7370$Up9ra
                                       g$value$9410$Up9ra
                                       g$e$9400$Up9ra)
                                     g$r$9401$Up9ra
                                     g$mr$9402$Up9ra)
                                   (if (memv g$t$9412$Up9ra '(macro macro!))
                                     (g$chi-expr$7374$Up9ra
                                       (g$chi-macro$7369$Up9ra
                                         g$value$9410$Up9ra
                                         g$e$9400$Up9ra)
                                       g$r$9401$Up9ra
                                       g$mr$9402$Up9ra)
                                     (if (eqv? g$t$9412$Up9ra 'constant)
                                       ((case-lambda
                                          ((g$datum$9433$Up9ra)
                                           (list 'quote g$datum$9433$Up9ra)))
                                        g$value$9410$Up9ra)
                                       (if (eqv? g$t$9412$Up9ra 'set!)
                                         (g$chi-set!$7375$Up9ra
                                           g$e$9400$Up9ra
                                           g$r$9401$Up9ra
                                           g$mr$9402$Up9ra)
                                         (if (eqv? g$t$9412$Up9ra 'begin)
                                           ((case-lambda
                                              ((g$t$9429$Up9ra)
                                               ((case-lambda
                                                  ((g$ls/false$9430$Up9ra)
                                                   (if g$ls/false$9430$Up9ra
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9431$Up9ra
                                                            g$x*$9432$Up9ra)
                                                          (g$build-sequence$7012$Up9ra
                                                            '#f
                                                            (g$chi-expr*$7372$Up9ra
                                                              (cons
                                                                g$x$9431$Up9ra
                                                                g$x*$9432$Up9ra)
                                                              g$r$9401$Up9ra
                                                              g$mr$9402$Up9ra))))
                                                       g$ls/false$9430$Up9ra)
                                                     (g$syntax-violation$7462$Up9ra
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9429$Up9ra))))
                                                (g$syntax-dispatch$7356$Up9ra
                                                  g$t$9429$Up9ra
                                                  '(_ any . each-any)))))
                                            g$e$9400$Up9ra)
                                           (if (memv
                                                 g$t$9412$Up9ra
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$9414$Up9ra)
                                                 ((case-lambda
                                                    ((g$ls/false$9415$Up9ra)
                                                     (if (if g$ls/false$9415$Up9ra
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$9416$Up9ra
                                                                    g$xrhs*$9417$Up9ra
                                                                    g$xbody$9418$Up9ra
                                                                    g$xbody*$9419$Up9ra)
                                                                  (if (g$valid-bound-ids?$7083$Up9ra
                                                                        g$xlhs*$9416$Up9ra)
                                                                    (void)
                                                                    (g$syntax-violation$7462$Up9ra
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$9400$Up9ra))))
                                                               g$ls/false$9415$Up9ra))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$9420$Up9ra
                                                              g$xrhs*$9421$Up9ra
                                                              g$xbody$9422$Up9ra
                                                              g$xbody*$9423$Up9ra)
                                                            ((case-lambda
                                                               ((g$xlab*$9424$Up9ra)
                                                                ((case-lambda
                                                                   ((g$xrib$9425$Up9ra)
                                                                    ((case-lambda
                                                                       ((g$xb*$9426$Up9ra)
                                                                        ((case-lambda
                                                                           (()
                                                                            (g$build-sequence$7012$Up9ra
                                                                              '#f
                                                                              (g$chi-expr*$7372$Up9ra
                                                                                (map (case-lambda
                                                                                       ((g$x$9427$Up9ra)
                                                                                        (g$add-subst$7068$Up9ra
                                                                                          g$xrib$9425$Up9ra
                                                                                          g$x$9427$Up9ra)))
                                                                                     (cons
                                                                                       g$xbody$9422$Up9ra
                                                                                       g$xbody*$9423$Up9ra))
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$9424$Up9ra
                                                                                       g$xb*$9426$Up9ra)
                                                                                  g$r$9401$Up9ra)
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$9424$Up9ra
                                                                                       g$xb*$9426$Up9ra)
                                                                                  g$mr$9402$Up9ra))))))))
                                                                     (map (case-lambda
                                                                            ((g$x$9428$Up9ra)
                                                                             (g$make-eval-transformer$7110$Up9ra
                                                                               (g$expand-transformer$7401$Up9ra
                                                                                 (if (eq? g$type$9411$Up9ra
                                                                                          'let-syntax)
                                                                                   g$x$9428$Up9ra
                                                                                   (g$add-subst$7068$Up9ra
                                                                                     g$xrib$9425$Up9ra
                                                                                     g$x$9428$Up9ra))
                                                                                 g$mr$9402$Up9ra))))
                                                                          g$xrhs*$9421$Up9ra))))
                                                                 (g$make-full-rib$7046$Up9ra
                                                                   g$xlhs*$9420$Up9ra
                                                                   g$xlab*$9424$Up9ra))))
                                                             (map g$gen-label$7024$Up9ra
                                                                  g$xlhs*$9420$Up9ra))))
                                                         g$ls/false$9415$Up9ra)
                                                       (g$syntax-violation$7462$Up9ra
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$9414$Up9ra))))
                                                  (g$syntax-dispatch$7356$Up9ra
                                                    g$t$9414$Up9ra
                                                    '(_ #(each (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$9400$Up9ra)
                                             (if (eqv?
                                                   g$t$9412$Up9ra
                                                   'displaced-lexical)
                                               (g$syntax-violation$7462$Up9ra
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$9400$Up9ra)
                                               (if (eqv? g$t$9412$Up9ra 'syntax)
                                                 (g$syntax-violation$7462$Up9ra
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$9400$Up9ra)
                                                 (if (memv
                                                       g$t$9412$Up9ra
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$7462$Up9ra
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$9413$Up9ra)
                                                           (if (eqv?
                                                                 g$t$9413$Up9ra
                                                                 'define)
                                                             '"a definition"
                                                             (if (eqv?
                                                                   g$t$9413$Up9ra
                                                                   'define-syntax)
                                                               '"a define-syntax"
                                                               (if (eqv?
                                                                     g$t$9413$Up9ra
                                                                     'module)
                                                                 '"a module definition"
                                                                 (if (eqv?
                                                                       g$t$9413$Up9ra
                                                                       'library)
                                                                   '"a library definition"
                                                                   (if (eqv?
                                                                         g$t$9413$Up9ra
                                                                         'import)
                                                                     '"an import declaration"
                                                                     '"a non-expression")))))))
                                                        g$type$9411$Up9ra)
                                                       '" was found where an expression was expected")
                                                     g$e$9400$Up9ra)
                                                   (if (eqv?
                                                         g$t$9412$Up9ra
                                                         'mutable)
                                                     (g$syntax-violation$7462$Up9ra
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$9400$Up9ra)
                                                     (g$syntax-violation$7462$Up9ra
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$9400$Up9ra)))))))))))))))))))
                  g$type$9411$Up9ra)))
              g$kwd$9408$Up9ra
              g$value$9407$Up9ra
              g$type$9406$Up9ra)))))))
   (g$chi-set!$7375$Up9ra
     g$chi-set!$10825$Up9ra
     (case-lambda
       ((g$e$9439$Up9ra g$r$9440$Up9ra g$mr$9441$Up9ra)
        ((case-lambda
           ((g$t$9442$Up9ra)
            ((case-lambda
               ((g$ls/false$9443$Up9ra)
                (if (if g$ls/false$9443$Up9ra
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$9444$Up9ra g$v$9445$Up9ra)
                             (g$id?$7078$Up9ra g$x$9444$Up9ra)))
                          g$ls/false$9443$Up9ra))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$9446$Up9ra g$v$9447$Up9ra)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$7098$Up9ra
                              g$x$9446$Up9ra
                              g$r$9440$Up9ra)))
                         (case-lambda
                           ((g$type$9451$Up9ra
                              g$value$9452$Up9ra
                              g$kwd$9453$Up9ra)
                            ((case-lambda
                               ((g$kwd$9454$Up9ra
                                  g$value$9455$Up9ra
                                  g$type$9456$Up9ra)
                                ((case-lambda
                                   ((g$t$9457$Up9ra)
                                    (if (eqv? g$t$9457$Up9ra 'lexical)
                                      (begin
                                        (g$set-lexical-mutable!$7302$Up9ra
                                          g$value$9455$Up9ra
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$7300$Up9ra
                                            g$value$9455$Up9ra)
                                          (g$chi-expr$7374$Up9ra
                                            g$v$9447$Up9ra
                                            g$r$9440$Up9ra
                                            g$mr$9441$Up9ra)))
                                      (if (eqv? g$t$9457$Up9ra 'core-prim)
                                        (g$syntax-violation$7462$Up9ra
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$9439$Up9ra)
                                        (if (eqv? g$t$9457$Up9ra 'global)
                                          (g$syntax-violation$7462$Up9ra
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$9439$Up9ra)
                                          (if (eqv?
                                                g$t$9457$Up9ra
                                                'global-macro!)
                                            (g$chi-expr$7374$Up9ra
                                              (g$chi-global-macro$7371$Up9ra
                                                g$value$9455$Up9ra
                                                g$e$9439$Up9ra)
                                              g$r$9440$Up9ra
                                              g$mr$9441$Up9ra)
                                            (if (eqv?
                                                  g$t$9457$Up9ra
                                                  'local-macro!)
                                              (g$chi-expr$7374$Up9ra
                                                (g$chi-local-macro$7370$Up9ra
                                                  g$value$9455$Up9ra
                                                  g$e$9439$Up9ra)
                                                g$r$9440$Up9ra
                                                g$mr$9441$Up9ra)
                                              (if (eqv? g$t$9457$Up9ra 'mutable)
                                                (g$syntax-violation$7462$Up9ra
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$9439$Up9ra)
                                                (g$syntax-violation$7462$Up9ra
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$9439$Up9ra)))))))))
                                 g$type$9456$Up9ra)))
                             g$kwd$9453$Up9ra
                             g$value$9452$Up9ra
                             g$type$9451$Up9ra))))))
                    g$ls/false$9443$Up9ra)
                  (g$syntax-violation$7462$Up9ra
                    '#f
                    '"invalid syntax"
                    g$t$9442$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$9442$Up9ra '(_ any any)))))
         g$e$9439$Up9ra))))
   (g$verify-formals$7376$Up9ra
     g$verify-formals$10826$Up9ra
     (case-lambda
       ((g$fmls$9458$Up9ra g$stx$9459$Up9ra)
        ((case-lambda
           ((g$t$9460$Up9ra)
            ((case-lambda
               ((g$ls/false$9461$Up9ra)
                (if g$ls/false$9461$Up9ra
                  (apply
                    (case-lambda
                      ((g$x*$9462$Up9ra)
                       (if (g$valid-bound-ids?$7083$Up9ra g$x*$9462$Up9ra)
                         (void)
                         (g$invalid-fmls-error$7321$Up9ra
                           g$stx$9459$Up9ra
                           g$fmls$9458$Up9ra))))
                    g$ls/false$9461$Up9ra)
                  ((case-lambda
                     ((g$t$9463$Up9ra)
                      ((case-lambda
                         ((g$ls/false$9464$Up9ra)
                          (if g$ls/false$9464$Up9ra
                            (apply
                              (case-lambda
                                ((g$x*$9465$Up9ra g$x$9466$Up9ra)
                                 (if (g$valid-bound-ids?$7083$Up9ra
                                       (cons g$x$9466$Up9ra g$x*$9465$Up9ra))
                                   (void)
                                   (g$invalid-fmls-error$7321$Up9ra
                                     g$stx$9459$Up9ra
                                     g$fmls$9458$Up9ra))))
                              g$ls/false$9464$Up9ra)
                            ((case-lambda
                               ((g$t$9467$Up9ra)
                                ((case-lambda
                                   ((g$ls/false$9468$Up9ra)
                                    (if g$ls/false$9468$Up9ra
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7462$Up9ra
                                             '#f
                                             '"invalid syntax"
                                             g$stx$9459$Up9ra)))
                                        g$ls/false$9468$Up9ra)
                                      (g$syntax-violation$7462$Up9ra
                                        '#f
                                        '"invalid syntax"
                                        g$t$9467$Up9ra))))
                                 (g$syntax-dispatch$7356$Up9ra
                                   g$t$9467$Up9ra
                                   '_))))
                             g$t$9463$Up9ra))))
                       (g$syntax-dispatch$7356$Up9ra
                         g$t$9463$Up9ra
                         '#(each+ any () any)))))
                   g$t$9460$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$9460$Up9ra 'each-any))))
         g$fmls$9458$Up9ra))))
   (g$chi-lambda-clause$7377$Up9ra
     g$chi-lambda-clause$10827$Up9ra
     (case-lambda
       ((g$stx$9469$Up9ra
          g$fmls$9470$Up9ra
          g$body*$9471$Up9ra
          g$r$9472$Up9ra
          g$mr$9473$Up9ra)
        ((case-lambda
           ((g$t$9474$Up9ra)
            ((case-lambda
               ((g$ls/false$9475$Up9ra)
                (if g$ls/false$9475$Up9ra
                  (apply
                    (case-lambda
                      ((g$x*$9476$Up9ra)
                       (begin
                         (g$verify-formals$7376$Up9ra
                           g$fmls$9470$Up9ra
                           g$stx$9469$Up9ra)
                         ((case-lambda
                            ((g$lex*$9477$Up9ra g$lab*$9478$Up9ra)
                             (values
                               g$lex*$9477$Up9ra
                               (g$chi-internal$7385$Up9ra
                                 (g$add-subst$7068$Up9ra
                                   (g$make-full-rib$7046$Up9ra
                                     g$x*$9476$Up9ra
                                     g$lab*$9478$Up9ra)
                                   g$body*$9471$Up9ra)
                                 (g$add-lexicals$7304$Up9ra
                                   g$lab*$9478$Up9ra
                                   g$lex*$9477$Up9ra
                                   g$r$9472$Up9ra)
                                 g$mr$9473$Up9ra))))
                          (map g$gen-lexical$7022$Up9ra g$x*$9476$Up9ra)
                          (map g$gen-label$7024$Up9ra g$x*$9476$Up9ra)))))
                    g$ls/false$9475$Up9ra)
                  ((case-lambda
                     ((g$t$9479$Up9ra)
                      ((case-lambda
                         ((g$ls/false$9480$Up9ra)
                          (if g$ls/false$9480$Up9ra
                            (apply
                              (case-lambda
                                ((g$x*$9481$Up9ra g$x$9482$Up9ra)
                                 (begin
                                   (g$verify-formals$7376$Up9ra
                                     g$fmls$9470$Up9ra
                                     g$stx$9469$Up9ra)
                                   ((case-lambda
                                      ((g$lex*$9483$Up9ra
                                         g$lab*$9484$Up9ra
                                         g$lex$9485$Up9ra
                                         g$lab$9486$Up9ra)
                                       (values
                                         (append
                                           g$lex*$9483$Up9ra
                                           g$lex$9485$Up9ra)
                                         (g$chi-internal$7385$Up9ra
                                           (g$add-subst$7068$Up9ra
                                             (g$make-full-rib$7046$Up9ra
                                               (cons
                                                 g$x$9482$Up9ra
                                                 g$x*$9481$Up9ra)
                                               (cons
                                                 g$lab$9486$Up9ra
                                                 g$lab*$9484$Up9ra))
                                             g$body*$9471$Up9ra)
                                           (g$add-lexicals$7304$Up9ra
                                             (cons
                                               g$lab$9486$Up9ra
                                               g$lab*$9484$Up9ra)
                                             (cons
                                               g$lex$9485$Up9ra
                                               g$lex*$9483$Up9ra)
                                             g$r$9472$Up9ra)
                                           g$mr$9473$Up9ra))))
                                    (map g$gen-lexical$7022$Up9ra
                                         g$x*$9481$Up9ra)
                                    (map g$gen-label$7024$Up9ra g$x*$9481$Up9ra)
                                    (g$gen-lexical$7022$Up9ra g$x$9482$Up9ra)
                                    (g$gen-label$7024$Up9ra g$x$9482$Up9ra)))))
                              g$ls/false$9480$Up9ra)
                            ((case-lambda
                               ((g$t$9487$Up9ra)
                                ((case-lambda
                                   ((g$ls/false$9488$Up9ra)
                                    (if g$ls/false$9488$Up9ra
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7462$Up9ra
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$9470$Up9ra)))
                                        g$ls/false$9488$Up9ra)
                                      (g$syntax-violation$7462$Up9ra
                                        '#f
                                        '"invalid syntax"
                                        g$t$9487$Up9ra))))
                                 (g$syntax-dispatch$7356$Up9ra
                                   g$t$9487$Up9ra
                                   '_))))
                             g$t$9479$Up9ra))))
                       (g$syntax-dispatch$7356$Up9ra
                         g$t$9479$Up9ra
                         '#(each+ any () any)))))
                   g$t$9474$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$9474$Up9ra 'each-any))))
         g$fmls$9470$Up9ra))))
   (g$chi-lambda-clause*$7378$Up9ra
     g$chi-lambda-clause*$10828$Up9ra
     (case-lambda
       ((g$stx$9489$Up9ra
          g$fmls*$9490$Up9ra
          g$body**$9491$Up9ra
          g$r$9492$Up9ra
          g$mr$9493$Up9ra)
        (if (null? g$fmls*$9490$Up9ra)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$7377$Up9ra
                 g$stx$9489$Up9ra
                 (car g$fmls*$9490$Up9ra)
                 (car g$body**$9491$Up9ra)
                 g$r$9492$Up9ra
                 g$mr$9493$Up9ra)))
            (case-lambda
              ((g$a$9496$Up9ra g$b$9497$Up9ra)
               ((case-lambda
                  ((g$b$9498$Up9ra g$a$9499$Up9ra)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$7378$Up9ra
                          g$stx$9489$Up9ra
                          (cdr g$fmls*$9490$Up9ra)
                          (cdr g$body**$9491$Up9ra)
                          g$r$9492$Up9ra
                          g$mr$9493$Up9ra)))
                     (case-lambda
                       ((g$a*$9502$Up9ra g$b*$9503$Up9ra)
                        ((case-lambda
                           ((g$b*$9504$Up9ra g$a*$9505$Up9ra)
                            (values
                              (cons g$a$9499$Up9ra g$a*$9505$Up9ra)
                              (cons g$b$9498$Up9ra g$b*$9504$Up9ra))))
                         g$b*$9503$Up9ra
                         g$a*$9502$Up9ra))))))
                g$b$9497$Up9ra
                g$a$9496$Up9ra))))))))
   (g$chi-defun$7379$Up9ra
     g$chi-defun$10829$Up9ra
     (case-lambda
       ((g$x$9506$Up9ra g$r$9507$Up9ra g$mr$9508$Up9ra)
        ((case-lambda
           ((g$fmls$9509$Up9ra g$body*$9510$Up9ra)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$7377$Up9ra
                   g$fmls$9509$Up9ra
                   g$fmls$9509$Up9ra
                   g$body*$9510$Up9ra
                   g$r$9507$Up9ra
                   g$mr$9508$Up9ra)))
              (case-lambda
                ((g$fmls$9513$Up9ra g$body$9514$Up9ra)
                 ((case-lambda
                    ((g$body$9515$Up9ra g$fmls$9516$Up9ra)
                     (g$build-lambda$7009$Up9ra
                       '#f
                       g$fmls$9516$Up9ra
                       g$body$9515$Up9ra)))
                  g$body$9514$Up9ra
                  g$fmls$9513$Up9ra))))))
         (car g$x$9506$Up9ra)
         (cdr g$x$9506$Up9ra)))))
   (g$chi-rhs$7380$Up9ra
     g$chi-rhs$10830$Up9ra
     (case-lambda
       ((g$rhs$9517$Up9ra g$r$9518$Up9ra g$mr$9519$Up9ra)
        ((case-lambda
           ((g$t$9520$Up9ra)
            (if (eqv? g$t$9520$Up9ra 'defun)
              (g$chi-defun$7379$Up9ra
                (cdr g$rhs$9517$Up9ra)
                g$r$9518$Up9ra
                g$mr$9519$Up9ra)
              (if (eqv? g$t$9520$Up9ra 'expr)
                ((case-lambda
                   ((g$expr$9522$Up9ra)
                    (g$chi-expr$7374$Up9ra
                      g$expr$9522$Up9ra
                      g$r$9518$Up9ra
                      g$mr$9519$Up9ra)))
                 (cdr g$rhs$9517$Up9ra))
                (if (eqv? g$t$9520$Up9ra 'top-expr)
                  ((case-lambda
                     ((g$expr$9521$Up9ra)
                      (g$build-sequence$7012$Up9ra
                        '#f
                        (list
                          (g$chi-expr$7374$Up9ra
                            g$expr$9521$Up9ra
                            g$r$9518$Up9ra
                            g$mr$9519$Up9ra)
                          (g$build-void$7013$Up9ra)))))
                   (cdr g$rhs$9517$Up9ra))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$9517$Up9ra))))))
         (car g$rhs$9517$Up9ra)))))
   (g$expand-interaction-rhs*/init*$7381$Up9ra
     g$expand-interaction-rhs*/init*$10831$Up9ra
     (case-lambda
       ((g$lhs*$9523$Up9ra
          g$rhs*$9524$Up9ra
          g$init*$9525$Up9ra
          g$r$9526$Up9ra
          g$mr$9527$Up9ra)
        ((letrec ((g$f$9528$Up9ra
                    (case-lambda
                      ((g$lhs*$9529$Up9ra g$rhs*$9530$Up9ra)
                       (if (null? g$lhs*$9529$Up9ra)
                         (map (case-lambda
                                ((g$x$9531$Up9ra)
                                 (g$chi-expr$7374$Up9ra
                                   g$x$9531$Up9ra
                                   g$r$9526$Up9ra
                                   g$mr$9527$Up9ra)))
                              g$init*$9525$Up9ra)
                         ((case-lambda
                            ((g$lhs$9532$Up9ra g$rhs$9533$Up9ra)
                             ((case-lambda
                                ((g$t$9534$Up9ra)
                                 (if (eqv? g$t$9534$Up9ra 'defun)
                                   ((case-lambda
                                      ((g$rhs$9537$Up9ra)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$9532$Up9ra
                                           g$rhs$9537$Up9ra)
                                         (g$f$9528$Up9ra
                                           (cdr g$lhs*$9529$Up9ra)
                                           (cdr g$rhs*$9530$Up9ra)))))
                                    (g$chi-defun$7379$Up9ra
                                      (cdr g$rhs$9533$Up9ra)
                                      g$r$9526$Up9ra
                                      g$mr$9527$Up9ra))
                                   (if (eqv? g$t$9534$Up9ra 'expr)
                                     ((case-lambda
                                        ((g$rhs$9536$Up9ra)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$9532$Up9ra
                                             g$rhs$9536$Up9ra)
                                           (g$f$9528$Up9ra
                                             (cdr g$lhs*$9529$Up9ra)
                                             (cdr g$rhs*$9530$Up9ra)))))
                                      (g$chi-expr$7374$Up9ra
                                        (cdr g$rhs$9533$Up9ra)
                                        g$r$9526$Up9ra
                                        g$mr$9527$Up9ra))
                                     (if (eqv? g$t$9534$Up9ra 'top-expr)
                                       ((case-lambda
                                          ((g$e$9535$Up9ra)
                                           (cons
                                             g$e$9535$Up9ra
                                             (g$f$9528$Up9ra
                                               (cdr g$lhs*$9529$Up9ra)
                                               (cdr g$rhs*$9530$Up9ra)))))
                                        (g$chi-expr$7374$Up9ra
                                          (cdr g$rhs$9533$Up9ra)
                                          g$r$9526$Up9ra
                                          g$mr$9527$Up9ra))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$9533$Up9ra))))))
                              (car g$rhs$9533$Up9ra))))
                          (car g$lhs*$9529$Up9ra)
                          (car g$rhs*$9530$Up9ra)))))))
           g$f$9528$Up9ra)
         g$lhs*$9523$Up9ra
         g$rhs*$9524$Up9ra))))
   (g$chi-rhs*$7382$Up9ra
     g$chi-rhs*$10832$Up9ra
     (case-lambda
       ((g$rhs*$9538$Up9ra g$r$9539$Up9ra g$mr$9540$Up9ra)
        ((letrec ((g$f$9541$Up9ra
                    (case-lambda
                      ((g$ls$9542$Up9ra)
                       (if (null? g$ls$9542$Up9ra)
                         '()
                         ((case-lambda
                            ((g$a$9543$Up9ra)
                             (cons
                               g$a$9543$Up9ra
                               (g$f$9541$Up9ra (cdr g$ls$9542$Up9ra)))))
                          (g$chi-rhs$7380$Up9ra
                            (car g$ls$9542$Up9ra)
                            g$r$9539$Up9ra
                            g$mr$9540$Up9ra)))))))
           g$f$9541$Up9ra)
         g$rhs*$9538$Up9ra))))
   (g$find-bound=?$7383$Up9ra
     g$find-bound=?$10833$Up9ra
     (case-lambda
       ((g$x$9544$Up9ra g$lhs*$9545$Up9ra g$rhs*$9546$Up9ra)
        (if (null? g$lhs*$9545$Up9ra)
          '#f
          (if (g$bound-id=?$7081$Up9ra g$x$9544$Up9ra (car g$lhs*$9545$Up9ra))
            (car g$rhs*$9546$Up9ra)
            (g$find-bound=?$7383$Up9ra
              g$x$9544$Up9ra
              (cdr g$lhs*$9545$Up9ra)
              (cdr g$rhs*$9546$Up9ra)))))))
   (g$find-dups$7384$Up9ra
     g$find-dups$10834$Up9ra
     (case-lambda
       ((g$ls$9547$Up9ra)
        ((letrec ((g$f$9548$Up9ra
                    (case-lambda
                      ((g$ls$9549$Up9ra g$dups$9550$Up9ra)
                       (if (null? g$ls$9549$Up9ra)
                         g$dups$9550$Up9ra
                         ((case-lambda
                            ((g$t$9551$Up9ra)
                             (if g$t$9551$Up9ra
                               ((case-lambda
                                  ((g$x$9552$Up9ra)
                                   (g$f$9548$Up9ra
                                     (cdr g$ls$9549$Up9ra)
                                     (cons
                                       (list
                                         (car g$ls$9549$Up9ra)
                                         g$x$9552$Up9ra)
                                       g$dups$9550$Up9ra))))
                                g$t$9551$Up9ra)
                               (g$f$9548$Up9ra
                                 (cdr g$ls$9549$Up9ra)
                                 g$dups$9550$Up9ra))))
                          (g$find-bound=?$7383$Up9ra
                            (car g$ls$9549$Up9ra)
                            (cdr g$ls$9549$Up9ra)
                            (cdr g$ls$9549$Up9ra))))))))
           g$f$9548$Up9ra)
         g$ls$9547$Up9ra
         '()))))
   (g$chi-internal$7385$Up9ra
     g$chi-internal$10835$Up9ra
     (case-lambda
       ((g$e*$9553$Up9ra g$r$9554$Up9ra g$mr$9555$Up9ra)
        ((case-lambda
           ((g$rib$9556$Up9ra)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$7400$Up9ra
                   (map (case-lambda
                          ((g$x$9564$Up9ra)
                           (g$add-subst$7068$Up9ra
                             g$rib$9556$Up9ra
                             g$x$9564$Up9ra)))
                        (g$syntax->list$7077$Up9ra g$e*$9553$Up9ra))
                   g$r$9554$Up9ra
                   g$mr$9555$Up9ra
                   '()
                   '()
                   '()
                   '()
                   g$rib$9556$Up9ra
                   '#f)))
              (case-lambda
                ((g$e*$9565$Up9ra
                   g$r$9566$Up9ra
                   g$mr$9567$Up9ra
                   g$lex*$9568$Up9ra
                   g$rhs*$9569$Up9ra
                   g$mod**$9570$Up9ra
                   g$kwd*$9571$Up9ra)
                 ((case-lambda
                    ((g$kwd*$9572$Up9ra
                       g$mod**$9573$Up9ra
                       g$rhs*$9574$Up9ra
                       g$lex*$9575$Up9ra
                       g$mr$9576$Up9ra
                       g$r$9577$Up9ra
                       g$e*$9578$Up9ra)
                     (begin
                       (if (null? g$e*$9578$Up9ra)
                         (g$syntax-violation$7462$Up9ra
                           '#f
                           '"no expression in body"
                           g$e*$9578$Up9ra)
                         (void))
                       ((case-lambda
                          ((g$init*$9579$Up9ra)
                           ((case-lambda
                              ((g$rhs*$9580$Up9ra)
                               ((case-lambda
                                  (()
                                   (g$build-letrec*$7015$Up9ra
                                     '#f
                                     (reverse g$lex*$9575$Up9ra)
                                     (reverse g$rhs*$9580$Up9ra)
                                     (g$build-sequence$7012$Up9ra
                                       '#f
                                       g$init*$9579$Up9ra)))))))
                            (g$chi-rhs*$7382$Up9ra
                              g$rhs*$9574$Up9ra
                              g$r$9577$Up9ra
                              g$mr$9576$Up9ra))))
                        (g$chi-expr*$7372$Up9ra
                          (append
                            (apply append (reverse g$mod**$9573$Up9ra))
                            g$e*$9578$Up9ra)
                          g$r$9577$Up9ra
                          g$mr$9576$Up9ra)))))
                  g$kwd*$9571$Up9ra
                  g$mod**$9570$Up9ra
                  g$rhs*$9569$Up9ra
                  g$lex*$9568$Up9ra
                  g$mr$9567$Up9ra
                  g$r$9566$Up9ra
                  g$e*$9565$Up9ra))))))
         (g$make-empty-rib$7041$Up9ra)))))
   (g$parse-module$7386$Up9ra
     g$parse-module$10836$Up9ra
     (case-lambda
       ((g$e$9581$Up9ra)
        ((case-lambda
           ((g$t$9582$Up9ra)
            ((case-lambda
               ((g$ls/false$9583$Up9ra)
                (if g$ls/false$9583$Up9ra
                  (apply
                    (case-lambda
                      ((g$export*$9584$Up9ra g$b*$9585$Up9ra)
                       (begin
                         (if (g$for-all$5365$Up9ra
                               g$id?$7078$Up9ra
                               g$export*$9584$Up9ra)
                           (void)
                           (g$syntax-violation$7462$Up9ra
                             '#f
                             '"module exports must be identifiers"
                             g$e$9581$Up9ra))
                         (values
                           '#f
                           (list->vector g$export*$9584$Up9ra)
                           g$b*$9585$Up9ra))))
                    g$ls/false$9583$Up9ra)
                  ((case-lambda
                     ((g$t$9586$Up9ra)
                      ((case-lambda
                         ((g$ls/false$9587$Up9ra)
                          (if g$ls/false$9587$Up9ra
                            (apply
                              (case-lambda
                                ((g$name$9588$Up9ra
                                   g$export*$9589$Up9ra
                                   g$b*$9590$Up9ra)
                                 (begin
                                   (if (g$id?$7078$Up9ra g$name$9588$Up9ra)
                                     (void)
                                     (g$syntax-violation$7462$Up9ra
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$9581$Up9ra))
                                   (if (g$for-all$5365$Up9ra
                                         g$id?$7078$Up9ra
                                         g$export*$9589$Up9ra)
                                     (void)
                                     (g$syntax-violation$7462$Up9ra
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$9581$Up9ra))
                                   (values
                                     g$name$9588$Up9ra
                                     (list->vector g$export*$9589$Up9ra)
                                     g$b*$9590$Up9ra))))
                              g$ls/false$9587$Up9ra)
                            (g$syntax-violation$7462$Up9ra
                              '#f
                              '"invalid syntax"
                              g$t$9586$Up9ra))))
                       (g$syntax-dispatch$7356$Up9ra
                         g$t$9586$Up9ra
                         '(_ any each-any . each-any)))))
                   g$t$9582$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$9582$Up9ra
               '(_ each-any . each-any)))))
         g$e$9581$Up9ra))))
   (g$8274$7387$Up9ra
     g$8274$10837$Up9ra
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$8277$Up9ra
       '#t
       '#t
       '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec))))
   (g$8276$7388$Up9ra g$8276$10838$Up9ra '#f)
   (g$8275$7389$Up9ra
     g$8275$10839$Up9ra
     (make-record-constructor-descriptor
       g$8274$7387$Up9ra
       '#f
       g$8276$7388$Up9ra))
   (g$module-interface?$7390$Up9ra
     g$module-interface?$10840$Up9ra
     (record-predicate g$8274$7387$Up9ra))
   (g$make-module-interface$7391$Up9ra
     g$make-module-interface$10841$Up9ra
     (record-constructor g$8275$7389$Up9ra))
   (g$module-interface-first-mark$7392$Up9ra
     g$module-interface-first-mark$10842$Up9ra
     (record-accessor g$8274$7387$Up9ra '0))
   (g$module-interface-exp-id-vec$7393$Up9ra
     g$module-interface-exp-id-vec$10843$Up9ra
     (record-accessor g$8274$7387$Up9ra '1))
   (g$module-interface-exp-lab-vec$7394$Up9ra
     g$module-interface-exp-lab-vec$10844$Up9ra
     (record-accessor g$8274$7387$Up9ra '2))
   (g$set-module-interface-first-mark!$7395$Up9ra
     g$set-module-interface-first-mark!$10845$Up9ra
     (record-mutator g$8274$7387$Up9ra '0))
   (g$set-module-interface-exp-id-vec!$7396$Up9ra
     g$set-module-interface-exp-id-vec!$10846$Up9ra
     (record-mutator g$8274$7387$Up9ra '1))
   (g$set-module-interface-exp-lab-vec!$7397$Up9ra
     g$set-module-interface-exp-lab-vec!$10847$Up9ra
     (record-mutator g$8274$7387$Up9ra '2))
   (g$module-interface-exp-id*$7398$Up9ra
     g$module-interface-exp-id*$10848$Up9ra
     (case-lambda
       ((g$iface$9591$Up9ra g$id$9592$Up9ra)
        (letrec* ((g$diff-marks$9593$Up9ra
                    (case-lambda
                      ((g$ls$9597$Up9ra g$x$9598$Up9ra)
                       (begin
                         (if (null? g$ls$9597$Up9ra)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$9599$Up9ra)
                             (if (eq? g$a$9599$Up9ra g$x$9598$Up9ra)
                               '()
                               (cons
                                 g$a$9599$Up9ra
                                 (g$diff-marks$9593$Up9ra
                                   (cdr g$ls$9597$Up9ra)
                                   g$x$9598$Up9ra)))))
                          (car g$ls$9597$Up9ra)))))))
          ((case-lambda
             ((g$diff$9594$Up9ra g$id-vec$9595$Up9ra)
              (if (null? g$diff$9594$Up9ra)
                g$id-vec$9595$Up9ra
                (vector-map
                  (case-lambda
                    ((g$x$9596$Up9ra)
                     (g$make-stx$7051$Up9ra
                       (g$stx-expr$7052$Up9ra g$x$9596$Up9ra)
                       (append
                         g$diff$9594$Up9ra
                         (g$stx-mark*$7053$Up9ra g$x$9596$Up9ra))
                       '()
                       '())))
                  g$id-vec$9595$Up9ra))))
           (g$diff-marks$9593$Up9ra
             (g$stx-mark*$7053$Up9ra g$id$9592$Up9ra)
             (g$module-interface-first-mark$7392$Up9ra g$iface$9591$Up9ra))
           (g$module-interface-exp-id-vec$7393$Up9ra g$iface$9591$Up9ra))))))
   (g$chi-internal-module$7399$Up9ra
     g$chi-internal-module$10849$Up9ra
     (case-lambda
       ((g$e$9600$Up9ra
          g$r$9601$Up9ra
          g$mr$9602$Up9ra
          g$lex*$9603$Up9ra
          g$rhs*$9604$Up9ra
          g$mod**$9605$Up9ra
          g$kwd*$9606$Up9ra)
        (call-with-values
          (case-lambda (() (g$parse-module$7386$Up9ra g$e$9600$Up9ra)))
          (case-lambda
            ((g$name$9610$Up9ra g$exp-id*$9611$Up9ra g$e*$9612$Up9ra)
             ((case-lambda
                ((g$e*$9613$Up9ra g$exp-id*$9614$Up9ra g$name$9615$Up9ra)
                 ((case-lambda
                    ((g$rib$9616$Up9ra)
                     ((case-lambda
                        ((g$e*$9617$Up9ra)
                         ((case-lambda
                            (()
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$chi-body*$7400$Up9ra
                                    g$e*$9617$Up9ra
                                    g$r$9601$Up9ra
                                    g$mr$9602$Up9ra
                                    g$lex*$9603$Up9ra
                                    g$rhs*$9604$Up9ra
                                    g$mod**$9605$Up9ra
                                    g$kwd*$9606$Up9ra
                                    g$rib$9616$Up9ra
                                    '#f)))
                               (case-lambda
                                 ((g$e*$9625$Up9ra
                                    g$r$9626$Up9ra
                                    g$mr$9627$Up9ra
                                    g$lex*$9628$Up9ra
                                    g$rhs*$9629$Up9ra
                                    g$mod**$9630$Up9ra
                                    g$kwd*$9631$Up9ra)
                                  ((case-lambda
                                     ((g$kwd*$9632$Up9ra
                                        g$mod**$9633$Up9ra
                                        g$rhs*$9634$Up9ra
                                        g$lex*$9635$Up9ra
                                        g$mr$9636$Up9ra
                                        g$r$9637$Up9ra
                                        g$e*$9638$Up9ra)
                                      ((case-lambda
                                         ((g$exp-lab*$9639$Up9ra
                                            g$mod**$9640$Up9ra)
                                          (if (not g$name$9615$Up9ra)
                                            (values
                                              g$lex*$9635$Up9ra
                                              g$rhs*$9634$Up9ra
                                              g$exp-id*$9614$Up9ra
                                              g$exp-lab*$9639$Up9ra
                                              g$r$9637$Up9ra
                                              g$mr$9636$Up9ra
                                              g$mod**$9640$Up9ra
                                              g$kwd*$9632$Up9ra)
                                            ((case-lambda
                                               ((g$lab$9641$Up9ra
                                                  g$iface$9642$Up9ra)
                                                (values
                                                  g$lex*$9635$Up9ra
                                                  g$rhs*$9634$Up9ra
                                                  (vector g$name$9615$Up9ra)
                                                  (vector g$lab$9641$Up9ra)
                                                  (cons
                                                    (cons
                                                      g$lab$9641$Up9ra
                                                      (cons
                                                        '$module
                                                        g$iface$9642$Up9ra))
                                                    g$r$9637$Up9ra)
                                                  (cons
                                                    (cons
                                                      g$lab$9641$Up9ra
                                                      (cons
                                                        '$module
                                                        g$iface$9642$Up9ra))
                                                    g$mr$9636$Up9ra)
                                                  g$mod**$9640$Up9ra
                                                  g$kwd*$9632$Up9ra)))
                                             (g$gen-label$7024$Up9ra 'module)
                                             (g$make-module-interface$7391$Up9ra
                                               (car (g$stx-mark*$7053$Up9ra
                                                      g$name$9615$Up9ra))
                                               (vector-map
                                                 (case-lambda
                                                   ((g$x$9643$Up9ra)
                                                    (g$make-stx$7051$Up9ra
                                                      (g$stx-expr$7052$Up9ra
                                                        g$x$9643$Up9ra)
                                                      (g$stx-mark*$7053$Up9ra
                                                        g$x$9643$Up9ra)
                                                      '()
                                                      '())))
                                                 g$exp-id*$9614$Up9ra)
                                               g$exp-lab*$9639$Up9ra)))))
                                       (vector-map
                                         (case-lambda
                                           ((g$x$9644$Up9ra)
                                            ((case-lambda
                                               ((g$t$9645$Up9ra)
                                                (if g$t$9645$Up9ra
                                                  g$t$9645$Up9ra
                                                  (begin
                                                    '#f
                                                    (g$syntax-violation$7462$Up9ra
                                                      '#f
                                                      '"cannot find module export"
                                                      g$x$9644$Up9ra)))))
                                             (g$id->label$7091$Up9ra
                                               (g$make-stx$7051$Up9ra
                                                 (g$id->sym$7079$Up9ra
                                                   g$x$9644$Up9ra)
                                                 (g$stx-mark*$7053$Up9ra
                                                   g$x$9644$Up9ra)
                                                 (list g$rib$9616$Up9ra)
                                                 '())))))
                                         g$exp-id*$9614$Up9ra)
                                       (cons
                                         g$e*$9638$Up9ra
                                         g$mod**$9633$Up9ra))))
                                   g$kwd*$9631$Up9ra
                                   g$mod**$9630$Up9ra
                                   g$rhs*$9629$Up9ra
                                   g$lex*$9628$Up9ra
                                   g$mr$9627$Up9ra
                                   g$r$9626$Up9ra
                                   g$e*$9625$Up9ra)))))))))
                      (map (case-lambda
                             ((g$x$9646$Up9ra)
                              (g$add-subst$7068$Up9ra
                                g$rib$9616$Up9ra
                                g$x$9646$Up9ra)))
                           (g$syntax->list$7077$Up9ra g$e*$9613$Up9ra)))))
                  (g$make-empty-rib$7041$Up9ra))))
              g$e*$9612$Up9ra
              g$exp-id*$9611$Up9ra
              g$name$9610$Up9ra)))))))
   (g$chi-body*$7400$Up9ra
     g$chi-body*$10850$Up9ra
     (case-lambda
       ((g$e*$9647$Up9ra
          g$r$9648$Up9ra
          g$mr$9649$Up9ra
          g$lex*$9650$Up9ra
          g$rhs*$9651$Up9ra
          g$mod**$9652$Up9ra
          g$kwd*$9653$Up9ra
          g$rib$9654$Up9ra
          g$top?$9655$Up9ra)
        (if (null? g$e*$9647$Up9ra)
          (values
            g$e*$9647$Up9ra
            g$r$9648$Up9ra
            g$mr$9649$Up9ra
            g$lex*$9650$Up9ra
            g$rhs*$9651$Up9ra
            g$mod**$9652$Up9ra
            g$kwd*$9653$Up9ra)
          ((case-lambda
             ((g$e$9656$Up9ra)
              (call-with-values
                (case-lambda
                  (() (g$syntax-type$7098$Up9ra g$e$9656$Up9ra g$r$9648$Up9ra)))
                (case-lambda
                  ((g$type$9660$Up9ra g$value$9661$Up9ra g$kwd$9662$Up9ra)
                   ((case-lambda
                      ((g$kwd$9663$Up9ra g$value$9664$Up9ra g$type$9665$Up9ra)
                       ((case-lambda
                          ((g$kwd*$9666$Up9ra)
                           ((case-lambda
                              ((g$t$9667$Up9ra)
                               (if (eqv? g$t$9667$Up9ra 'define)
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$7296$Up9ra
                                        g$e$9656$Up9ra)))
                                   (case-lambda
                                     ((g$id$9773$Up9ra g$rhs$9774$Up9ra)
                                      ((case-lambda
                                         ((g$rhs$9775$Up9ra g$id$9776$Up9ra)
                                          (begin
                                            (if (g$bound-id-member?$7085$Up9ra
                                                  g$id$9776$Up9ra
                                                  g$kwd*$9666$Up9ra)
                                              (g$syntax-violation$7462$Up9ra
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$9656$Up9ra)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$7026$Up9ra
                                                   g$id$9776$Up9ra
                                                   g$rib$9654$Up9ra)))
                                              (case-lambda
                                                ((g$lab$9779$Up9ra
                                                   g$lex$9780$Up9ra)
                                                 ((case-lambda
                                                    ((g$lex$9781$Up9ra
                                                       g$lab$9782$Up9ra)
                                                     (begin
                                                       (g$extend-rib!$7042$Up9ra
                                                         g$rib$9654$Up9ra
                                                         g$id$9776$Up9ra
                                                         g$lab$9782$Up9ra)
                                                       (g$chi-body*$7400$Up9ra
                                                         (cdr g$e*$9647$Up9ra)
                                                         (g$add-lexical$7303$Up9ra
                                                           g$lab$9782$Up9ra
                                                           g$lex$9781$Up9ra
                                                           g$r$9648$Up9ra)
                                                         g$mr$9649$Up9ra
                                                         (cons
                                                           g$lex$9781$Up9ra
                                                           g$lex*$9650$Up9ra)
                                                         (cons
                                                           g$rhs$9775$Up9ra
                                                           g$rhs*$9651$Up9ra)
                                                         g$mod**$9652$Up9ra
                                                         g$kwd*$9666$Up9ra
                                                         g$rib$9654$Up9ra
                                                         g$top?$9655$Up9ra))))
                                                  g$lex$9780$Up9ra
                                                  g$lab$9779$Up9ra)))))))
                                       g$rhs$9774$Up9ra
                                       g$id$9773$Up9ra))))
                                 (if (eqv? g$t$9667$Up9ra 'define-syntax)
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$7297$Up9ra
                                          g$e$9656$Up9ra)))
                                     (case-lambda
                                       ((g$id$9764$Up9ra g$rhs$9765$Up9ra)
                                        ((case-lambda
                                           ((g$rhs$9766$Up9ra g$id$9767$Up9ra)
                                            (begin
                                              (if (g$bound-id-member?$7085$Up9ra
                                                    g$id$9767$Up9ra
                                                    g$kwd*$9666$Up9ra)
                                                (g$syntax-violation$7462$Up9ra
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$9656$Up9ra)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$9768$Up9ra
                                                    g$expanded-rhs$9769$Up9ra)
                                                  (begin
                                                    (g$extend-rib!$7042$Up9ra
                                                      g$rib$9654$Up9ra
                                                      g$id$9767$Up9ra
                                                      g$lab$9768$Up9ra)
                                                    ((case-lambda
                                                       ((g$b$9770$Up9ra)
                                                        (g$chi-body*$7400$Up9ra
                                                          (cdr g$e*$9647$Up9ra)
                                                          (cons
                                                            (cons
                                                              g$lab$9768$Up9ra
                                                              g$b$9770$Up9ra)
                                                            g$r$9648$Up9ra)
                                                          (cons
                                                            (cons
                                                              g$lab$9768$Up9ra
                                                              g$b$9770$Up9ra)
                                                            g$mr$9649$Up9ra)
                                                          g$lex*$9650$Up9ra
                                                          g$rhs*$9651$Up9ra
                                                          g$mod**$9652$Up9ra
                                                          g$kwd*$9666$Up9ra
                                                          g$rib$9654$Up9ra
                                                          g$top?$9655$Up9ra)))
                                                     (g$make-eval-transformer$7110$Up9ra
                                                       g$expanded-rhs$9769$Up9ra)))))
                                               (g$gen-define-label$7027$Up9ra
                                                 g$id$9767$Up9ra
                                                 g$rib$9654$Up9ra)
                                               (g$expand-transformer$7401$Up9ra
                                                 g$rhs$9766$Up9ra
                                                 g$mr$9649$Up9ra)))))
                                         g$rhs$9765$Up9ra
                                         g$id$9764$Up9ra))))
                                   (if (memv
                                         g$t$9667$Up9ra
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$9749$Up9ra)
                                         ((case-lambda
                                            ((g$ls/false$9750$Up9ra)
                                             (if (if g$ls/false$9750$Up9ra
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$9751$Up9ra
                                                            g$xrhs*$9752$Up9ra
                                                            g$xbody*$9753$Up9ra)
                                                          (if (g$valid-bound-ids?$7083$Up9ra
                                                                g$xlhs*$9751$Up9ra)
                                                            (void)
                                                            (g$syntax-violation$7462$Up9ra
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$9656$Up9ra))))
                                                       g$ls/false$9750$Up9ra))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$9754$Up9ra
                                                      g$xrhs*$9755$Up9ra
                                                      g$xbody*$9756$Up9ra)
                                                    ((case-lambda
                                                       ((g$xlab*$9757$Up9ra)
                                                        ((case-lambda
                                                           ((g$xrib$9758$Up9ra)
                                                            ((case-lambda
                                                               ((g$xb*$9759$Up9ra)
                                                                ((case-lambda
                                                                   (()
                                                                    (g$chi-body*$7400$Up9ra
                                                                      (append
                                                                        (map (case-lambda
                                                                               ((g$x$9760$Up9ra)
                                                                                (g$add-subst$7068$Up9ra
                                                                                  g$xrib$9758$Up9ra
                                                                                  g$x$9760$Up9ra)))
                                                                             g$xbody*$9756$Up9ra)
                                                                        (cdr g$e*$9647$Up9ra))
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$9757$Up9ra
                                                                             g$xb*$9759$Up9ra)
                                                                        g$r$9648$Up9ra)
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$9757$Up9ra
                                                                             g$xb*$9759$Up9ra)
                                                                        g$mr$9649$Up9ra)
                                                                      g$lex*$9650$Up9ra
                                                                      g$rhs*$9651$Up9ra
                                                                      g$mod**$9652$Up9ra
                                                                      g$kwd*$9666$Up9ra
                                                                      g$rib$9654$Up9ra
                                                                      g$top?$9655$Up9ra))))))
                                                             (map (case-lambda
                                                                    ((g$x$9761$Up9ra)
                                                                     (g$make-eval-transformer$7110$Up9ra
                                                                       (g$expand-transformer$7401$Up9ra
                                                                         (if (eq? g$type$9665$Up9ra
                                                                                  'let-syntax)
                                                                           g$x$9761$Up9ra
                                                                           (g$add-subst$7068$Up9ra
                                                                             g$xrib$9758$Up9ra
                                                                             g$x$9761$Up9ra))
                                                                         g$mr$9649$Up9ra))))
                                                                  g$xrhs*$9755$Up9ra))))
                                                         (g$make-full-rib$7046$Up9ra
                                                           g$xlhs*$9754$Up9ra
                                                           g$xlab*$9757$Up9ra))))
                                                     (map g$gen-label$7024$Up9ra
                                                          g$xlhs*$9754$Up9ra))))
                                                 g$ls/false$9750$Up9ra)
                                               (g$syntax-violation$7462$Up9ra
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$9749$Up9ra))))
                                          (g$syntax-dispatch$7356$Up9ra
                                            g$t$9749$Up9ra
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$9656$Up9ra)
                                     (if (eqv? g$t$9667$Up9ra 'begin)
                                       ((case-lambda
                                          ((g$t$9746$Up9ra)
                                           ((case-lambda
                                              ((g$ls/false$9747$Up9ra)
                                               (if g$ls/false$9747$Up9ra
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$9748$Up9ra)
                                                      (g$chi-body*$7400$Up9ra
                                                        (append
                                                          g$x*$9748$Up9ra
                                                          (cdr g$e*$9647$Up9ra))
                                                        g$r$9648$Up9ra
                                                        g$mr$9649$Up9ra
                                                        g$lex*$9650$Up9ra
                                                        g$rhs*$9651$Up9ra
                                                        g$mod**$9652$Up9ra
                                                        g$kwd*$9666$Up9ra
                                                        g$rib$9654$Up9ra
                                                        g$top?$9655$Up9ra)))
                                                   g$ls/false$9747$Up9ra)
                                                 (g$syntax-violation$7462$Up9ra
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$9746$Up9ra))))
                                            (g$syntax-dispatch$7356$Up9ra
                                              g$t$9746$Up9ra
                                              '(_ . each-any)))))
                                        g$e$9656$Up9ra)
                                       (if (memv
                                             g$t$9667$Up9ra
                                             '(global-macro global-macro!))
                                         (g$chi-body*$7400$Up9ra
                                           (cons
                                             (g$add-subst$7068$Up9ra
                                               g$rib$9654$Up9ra
                                               (g$chi-global-macro$7371$Up9ra
                                                 g$value$9664$Up9ra
                                                 g$e$9656$Up9ra))
                                             (cdr g$e*$9647$Up9ra))
                                           g$r$9648$Up9ra
                                           g$mr$9649$Up9ra
                                           g$lex*$9650$Up9ra
                                           g$rhs*$9651$Up9ra
                                           g$mod**$9652$Up9ra
                                           g$kwd*$9666$Up9ra
                                           g$rib$9654$Up9ra
                                           g$top?$9655$Up9ra)
                                         (if (memv
                                               g$t$9667$Up9ra
                                               '(local-macro local-macro!))
                                           (g$chi-body*$7400$Up9ra
                                             (cons
                                               (g$add-subst$7068$Up9ra
                                                 g$rib$9654$Up9ra
                                                 (g$chi-local-macro$7370$Up9ra
                                                   g$value$9664$Up9ra
                                                   g$e$9656$Up9ra))
                                               (cdr g$e*$9647$Up9ra))
                                             g$r$9648$Up9ra
                                             g$mr$9649$Up9ra
                                             g$lex*$9650$Up9ra
                                             g$rhs*$9651$Up9ra
                                             g$mod**$9652$Up9ra
                                             g$kwd*$9666$Up9ra
                                             g$rib$9654$Up9ra
                                             g$top?$9655$Up9ra)
                                           (if (memv
                                                 g$t$9667$Up9ra
                                                 '(macro macro!))
                                             (g$chi-body*$7400$Up9ra
                                               (cons
                                                 (g$add-subst$7068$Up9ra
                                                   g$rib$9654$Up9ra
                                                   (g$chi-macro$7369$Up9ra
                                                     g$value$9664$Up9ra
                                                     g$e$9656$Up9ra))
                                                 (cdr g$e*$9647$Up9ra))
                                               g$r$9648$Up9ra
                                               g$mr$9649$Up9ra
                                               g$lex*$9650$Up9ra
                                               g$rhs*$9651$Up9ra
                                               g$mod**$9652$Up9ra
                                               g$kwd*$9666$Up9ra
                                               g$rib$9654$Up9ra
                                               g$top?$9655$Up9ra)
                                             (if (eqv? g$t$9667$Up9ra 'module)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$7399$Up9ra
                                                      g$e$9656$Up9ra
                                                      g$r$9648$Up9ra
                                                      g$mr$9649$Up9ra
                                                      g$lex*$9650$Up9ra
                                                      g$rhs*$9651$Up9ra
                                                      g$mod**$9652$Up9ra
                                                      g$kwd*$9666$Up9ra)))
                                                 (case-lambda
                                                   ((g$lex*$9728$Up9ra
                                                      g$rhs*$9729$Up9ra
                                                      g$m-exp-id*$9730$Up9ra
                                                      g$m-exp-lab*$9731$Up9ra
                                                      g$r$9732$Up9ra
                                                      g$mr$9733$Up9ra
                                                      g$mod**$9734$Up9ra
                                                      g$kwd*$9735$Up9ra)
                                                    ((case-lambda
                                                       ((g$kwd*$9736$Up9ra
                                                          g$mod**$9737$Up9ra
                                                          g$mr$9738$Up9ra
                                                          g$r$9739$Up9ra
                                                          g$m-exp-lab*$9740$Up9ra
                                                          g$m-exp-id*$9741$Up9ra
                                                          g$rhs*$9742$Up9ra
                                                          g$lex*$9743$Up9ra)
                                                        (begin
                                                          (vector-for-each
                                                            (case-lambda
                                                              ((g$id$9744$Up9ra
                                                                 g$lab$9745$Up9ra)
                                                               (g$extend-rib!$7042$Up9ra
                                                                 g$rib$9654$Up9ra
                                                                 g$id$9744$Up9ra
                                                                 g$lab$9745$Up9ra)))
                                                            g$m-exp-id*$9741$Up9ra
                                                            g$m-exp-lab*$9740$Up9ra)
                                                          (g$chi-body*$7400$Up9ra
                                                            (cdr g$e*$9647$Up9ra)
                                                            g$r$9739$Up9ra
                                                            g$mr$9738$Up9ra
                                                            g$lex*$9743$Up9ra
                                                            g$rhs*$9742$Up9ra
                                                            g$mod**$9737$Up9ra
                                                            g$kwd*$9736$Up9ra
                                                            g$rib$9654$Up9ra
                                                            g$top?$9655$Up9ra))))
                                                     g$kwd*$9735$Up9ra
                                                     g$mod**$9734$Up9ra
                                                     g$mr$9733$Up9ra
                                                     g$r$9732$Up9ra
                                                     g$m-exp-lab*$9731$Up9ra
                                                     g$m-exp-id*$9730$Up9ra
                                                     g$rhs*$9729$Up9ra
                                                     g$lex*$9728$Up9ra))))
                                               (if (eqv?
                                                     g$t$9667$Up9ra
                                                     'library)
                                                 (begin
                                                   (g$library-expander$7449$Up9ra
                                                     (g$stx->datum$7089$Up9ra
                                                       g$e$9656$Up9ra))
                                                   (g$chi-body*$7400$Up9ra
                                                     (cdr g$e*$9647$Up9ra)
                                                     g$r$9648$Up9ra
                                                     g$mr$9649$Up9ra
                                                     g$lex*$9650$Up9ra
                                                     g$rhs*$9651$Up9ra
                                                     g$mod**$9652$Up9ra
                                                     g$kwd*$9666$Up9ra
                                                     g$rib$9654$Up9ra
                                                     g$top?$9655$Up9ra))
                                                 (if (eqv?
                                                       g$t$9667$Up9ra
                                                       'import)
                                                   (begin
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$9668$Up9ra
                                                                     (case-lambda
                                                                       ((g$e$9710$Up9ra)
                                                                        ((case-lambda
                                                                           ((g$t$9711$Up9ra)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9712$Up9ra)
                                                                                (if (if g$ls/false$9712$Up9ra
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$9713$Up9ra)
                                                                                             (g$id?$7078$Up9ra
                                                                                               g$id$9713$Up9ra)))
                                                                                          g$ls/false$9712$Up9ra))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$9714$Up9ra)
                                                                                       '#t))
                                                                                    g$ls/false$9712$Up9ra)
                                                                                  ((case-lambda
                                                                                     ((g$t$9715$Up9ra)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$9716$Up9ra)
                                                                                          (if g$ls/false$9716$Up9ra
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$9717$Up9ra)
                                                                                                 '#f))
                                                                                              g$ls/false$9716$Up9ra)
                                                                                            ((case-lambda
                                                                                               ((g$t$9718$Up9ra)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$9719$Up9ra)
                                                                                                    (if g$ls/false$9719$Up9ra
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$7462$Up9ra
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$9710$Up9ra)))
                                                                                                        g$ls/false$9719$Up9ra)
                                                                                                      (g$syntax-violation$7462$Up9ra
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$9718$Up9ra))))
                                                                                                 (g$syntax-dispatch$7356$Up9ra
                                                                                                   g$t$9718$Up9ra
                                                                                                   '_))))
                                                                                             g$t$9715$Up9ra))))
                                                                                       (g$syntax-dispatch$7356$Up9ra
                                                                                         g$t$9715$Up9ra
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$9711$Up9ra))))
                                                                             (g$syntax-dispatch$7356$Up9ra
                                                                               g$t$9711$Up9ra
                                                                               '(_ any)))))
                                                                         g$e$9710$Up9ra))))
                                                                   (g$module-import$9669$Up9ra
                                                                     (case-lambda
                                                                       ((g$e$9693$Up9ra
                                                                          g$r$9694$Up9ra)
                                                                        ((case-lambda
                                                                           ((g$t$9695$Up9ra)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9696$Up9ra)
                                                                                (if (if g$ls/false$9696$Up9ra
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$9697$Up9ra)
                                                                                             (g$id?$7078$Up9ra
                                                                                               g$id$9697$Up9ra)))
                                                                                          g$ls/false$9696$Up9ra))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$9698$Up9ra)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$7098$Up9ra
                                                                                              g$id$9698$Up9ra
                                                                                              g$r$9694$Up9ra)))
                                                                                         (case-lambda
                                                                                           ((g$type$9702$Up9ra
                                                                                              g$value$9703$Up9ra
                                                                                              g$kwd$9704$Up9ra)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$9705$Up9ra
                                                                                                  g$value$9706$Up9ra
                                                                                                  g$type$9707$Up9ra)
                                                                                                ((case-lambda
                                                                                                   ((g$t$9708$Up9ra)
                                                                                                    (if (eqv?
                                                                                                          g$t$9708$Up9ra
                                                                                                          '$module)
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$9709$Up9ra)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$7398$Up9ra
                                                                                                              g$iface$9709$Up9ra
                                                                                                              g$id$9698$Up9ra)
                                                                                                            (g$module-interface-exp-lab-vec$7394$Up9ra
                                                                                                              g$iface$9709$Up9ra))))
                                                                                                       g$value$9706$Up9ra)
                                                                                                      (g$syntax-violation$7462$Up9ra
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$9693$Up9ra))))
                                                                                                 g$type$9707$Up9ra)))
                                                                                             g$kwd$9704$Up9ra
                                                                                             g$value$9703$Up9ra
                                                                                             g$type$9702$Up9ra))))))
                                                                                    g$ls/false$9696$Up9ra)
                                                                                  (g$syntax-violation$7462$Up9ra
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$9695$Up9ra))))
                                                                             (g$syntax-dispatch$7356$Up9ra
                                                                               g$t$9695$Up9ra
                                                                               '(_ any)))))
                                                                         g$e$9693$Up9ra))))
                                                                   (g$library-import$9670$Up9ra
                                                                     (case-lambda
                                                                       ((g$e$9679$Up9ra)
                                                                        ((case-lambda
                                                                           ((g$t$9680$Up9ra)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9681$Up9ra)
                                                                                (if g$ls/false$9681$Up9ra
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$9682$Up9ra
                                                                                         g$imp*$9683$Up9ra)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$7405$Up9ra
                                                                                              (g$syntax->datum$7465$Up9ra
                                                                                                g$imp*$9683$Up9ra))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$9686$Up9ra
                                                                                              g$subst-labels$9687$Up9ra)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$9688$Up9ra
                                                                                                  g$subst-names$9689$Up9ra)
                                                                                                (values
                                                                                                  (vector-map
                                                                                                    (case-lambda
                                                                                                      ((g$name$9690$Up9ra)
                                                                                                       (g$datum->stx$7061$Up9ra
                                                                                                         g$ctxt$9682$Up9ra
                                                                                                         g$name$9690$Up9ra)))
                                                                                                    g$subst-names$9689$Up9ra)
                                                                                                  g$subst-labels$9688$Up9ra)))
                                                                                             g$subst-labels$9687$Up9ra
                                                                                             g$subst-names$9686$Up9ra))))))
                                                                                    g$ls/false$9681$Up9ra)
                                                                                  ((case-lambda
                                                                                     ((g$t$9691$Up9ra)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$9692$Up9ra)
                                                                                          (if g$ls/false$9692$Up9ra
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7462$Up9ra
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$9679$Up9ra)))
                                                                                              g$ls/false$9692$Up9ra)
                                                                                            (g$syntax-violation$7462$Up9ra
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$9691$Up9ra))))
                                                                                       (g$syntax-dispatch$7356$Up9ra
                                                                                         g$t$9691$Up9ra
                                                                                         '_))))
                                                                                   g$t$9680$Up9ra))))
                                                                             (g$syntax-dispatch$7356$Up9ra
                                                                               g$t$9680$Up9ra
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$9679$Up9ra)))))
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (if (g$module-import?$9668$Up9ra
                                                                      g$e$9656$Up9ra)
                                                                  (g$module-import$9669$Up9ra
                                                                    g$e$9656$Up9ra
                                                                    g$r$9648$Up9ra)
                                                                  (g$library-import$9670$Up9ra
                                                                    g$e$9656$Up9ra))))
                                                             (case-lambda
                                                               ((g$id*$9673$Up9ra
                                                                  g$lab*$9674$Up9ra)
                                                                ((case-lambda
                                                                   ((g$lab*$9675$Up9ra
                                                                      g$id*$9676$Up9ra)
                                                                    (vector-for-each
                                                                      (case-lambda
                                                                        ((g$id$9677$Up9ra
                                                                           g$lab$9678$Up9ra)
                                                                         (g$extend-rib!$7042$Up9ra
                                                                           g$rib$9654$Up9ra
                                                                           g$id$9677$Up9ra
                                                                           g$lab$9678$Up9ra)))
                                                                      g$id*$9676$Up9ra
                                                                      g$lab*$9675$Up9ra)))
                                                                 g$lab*$9674$Up9ra
                                                                 g$id*$9673$Up9ra))))))))
                                                     (g$chi-body*$7400$Up9ra
                                                       (cdr g$e*$9647$Up9ra)
                                                       g$r$9648$Up9ra
                                                       g$mr$9649$Up9ra
                                                       g$lex*$9650$Up9ra
                                                       g$rhs*$9651$Up9ra
                                                       g$mod**$9652$Up9ra
                                                       g$kwd*$9666$Up9ra
                                                       g$rib$9654$Up9ra
                                                       g$top?$9655$Up9ra))
                                                   (if g$top?$9655$Up9ra
                                                     (g$chi-body*$7400$Up9ra
                                                       (cdr g$e*$9647$Up9ra)
                                                       g$r$9648$Up9ra
                                                       g$mr$9649$Up9ra
                                                       (cons
                                                         (g$gen-lexical$7022$Up9ra
                                                           'dummy)
                                                         g$lex*$9650$Up9ra)
                                                       (cons
                                                         (cons
                                                           'top-expr
                                                           g$e$9656$Up9ra)
                                                         g$rhs*$9651$Up9ra)
                                                       g$mod**$9652$Up9ra
                                                       g$kwd*$9666$Up9ra
                                                       g$rib$9654$Up9ra
                                                       g$top?$9655$Up9ra)
                                                     (values
                                                       g$e*$9647$Up9ra
                                                       g$r$9648$Up9ra
                                                       g$mr$9649$Up9ra
                                                       g$lex*$9650$Up9ra
                                                       g$rhs*$9651$Up9ra
                                                       g$mod**$9652$Up9ra
                                                       g$kwd*$9666$Up9ra))))))))))))))
                            g$type$9665$Up9ra)))
                        (if (g$id?$7078$Up9ra g$kwd$9663$Up9ra)
                          (cons g$kwd$9663$Up9ra g$kwd*$9653$Up9ra)
                          g$kwd*$9653$Up9ra))))
                    g$kwd$9662$Up9ra
                    g$value$9661$Up9ra
                    g$type$9660$Up9ra))))))
           (car g$e*$9647$Up9ra))))))
   (g$expand-transformer$7401$Up9ra
     g$expand-transformer$10851$Up9ra
     (case-lambda
       ((g$expr$9783$Up9ra g$r$9784$Up9ra)
        ((case-lambda
           ((g$rtc$9785$Up9ra)
            ((case-lambda
               ((g$expanded-rhs$9786$Up9ra)
                (begin
                  (for-each
                    ((case-lambda
                       ((g$mark-visit$9787$Up9ra)
                        (case-lambda
                          ((g$x$9788$Up9ra)
                           (begin
                             (g$invoke-library$6893$Up9ra g$x$9788$Up9ra)
                             (g$mark-visit$9787$Up9ra g$x$9788$Up9ra))))))
                     (g$vis-collector$7409$Up9ra))
                    (g$rtc$9785$Up9ra))
                  g$expanded-rhs$9786$Up9ra)))
             ((case-lambda
                ((g$inv-collector$9793$Up9ra
                   g$vis-collector$9794$Up9ra
                   g$inv-collector$9795$Up9ra
                   g$vis-collector$9796$Up9ra)
                 ((case-lambda
                    ((g$swap$9797$Up9ra)
                     (dynamic-wind
                       g$swap$9797$Up9ra
                       (case-lambda
                         (()
                          (g$chi-expr$7374$Up9ra
                            g$expr$9783$Up9ra
                            g$r$9784$Up9ra
                            g$r$9784$Up9ra)))
                       g$swap$9797$Up9ra)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$9798$Up9ra)
                           (begin
                             (g$inv-collector$9793$Up9ra
                               g$inv-collector$9795$Up9ra)
                             (set! g$inv-collector$9795$Up9ra g$t$9798$Up9ra))))
                        (g$inv-collector$9793$Up9ra))
                       ((case-lambda
                          ((g$t$9799$Up9ra)
                           (begin
                             (g$vis-collector$9794$Up9ra
                               g$vis-collector$9796$Up9ra)
                             (set! g$vis-collector$9796$Up9ra g$t$9799$Up9ra))))
                        (g$vis-collector$9794$Up9ra))))))))
              g$inv-collector$7408$Up9ra
              g$vis-collector$7409$Up9ra
              g$rtc$9785$Up9ra
              (case-lambda ((g$x$9800$Up9ra) (values)))))))
         (g$make-collector$7407$Up9ra)))))
   (g$parse-exports$7402$Up9ra
     g$parse-exports$10852$Up9ra
     (case-lambda
       ((g$exp*$9801$Up9ra)
        (letrec* ((g$idsyn?$9802$Up9ra
                    (case-lambda
                      ((g$x$9817$Up9ra)
                       (symbol? (g$syntax->datum$7465$Up9ra g$x$9817$Up9ra))))))
          ((letrec ((g$f$9803$Up9ra
                      (case-lambda
                        ((g$exp*$9804$Up9ra g$int*$9805$Up9ra g$ext*$9806$Up9ra)
                         (if (null? g$exp*$9804$Up9ra)
                           (begin
                             ((case-lambda
                                ((g$id*$9807$Up9ra)
                                 (if (g$valid-bound-ids?$7083$Up9ra
                                       g$id*$9807$Up9ra)
                                   (void)
                                   (g$syntax-violation$7462$Up9ra
                                     'export
                                     '"invalid exports"
                                     (g$find-dups$7384$Up9ra
                                       g$id*$9807$Up9ra)))))
                              (map (case-lambda
                                     ((g$x$9808$Up9ra)
                                      (g$make-stx$7051$Up9ra
                                        g$x$9808$Up9ra
                                        g$top-mark*$7020$Up9ra
                                        '()
                                        '())))
                                   g$ext*$9806$Up9ra))
                             (values
                               (map g$syntax->datum$7465$Up9ra
                                    g$int*$9805$Up9ra)
                               (map g$syntax->datum$7465$Up9ra
                                    g$ext*$9806$Up9ra)))
                           ((case-lambda
                              ((g$t$9809$Up9ra)
                               ((case-lambda
                                  ((g$ls/false$9810$Up9ra)
                                   (if g$ls/false$9810$Up9ra
                                     (apply
                                       (case-lambda
                                         ((g$rename$9811$Up9ra
                                            g$i*$9812$Up9ra
                                            g$e*$9813$Up9ra)
                                          (begin
                                            (if (if (eq? (g$syntax->datum$7465$Up9ra
                                                           g$rename$9811$Up9ra)
                                                         'rename)
                                                  (if (g$for-all$5365$Up9ra
                                                        g$idsyn?$9802$Up9ra
                                                        g$i*$9812$Up9ra)
                                                    (begin
                                                      '#f
                                                      (g$for-all$5365$Up9ra
                                                        g$idsyn?$9802$Up9ra
                                                        g$e*$9813$Up9ra))
                                                    '#f)
                                                  '#f)
                                              (void)
                                              (g$syntax-violation$7462$Up9ra
                                                'export
                                                '"invalid export specifier"
                                                (car g$exp*$9804$Up9ra)))
                                            (g$f$9803$Up9ra
                                              (cdr g$exp*$9804$Up9ra)
                                              (append
                                                g$i*$9812$Up9ra
                                                g$int*$9805$Up9ra)
                                              (append
                                                g$e*$9813$Up9ra
                                                g$ext*$9806$Up9ra)))))
                                       g$ls/false$9810$Up9ra)
                                     ((case-lambda
                                        ((g$t$9814$Up9ra)
                                         ((case-lambda
                                            ((g$ls/false$9815$Up9ra)
                                             (if g$ls/false$9815$Up9ra
                                               (apply
                                                 (case-lambda
                                                   ((g$ie$9816$Up9ra)
                                                    (begin
                                                      (if (g$idsyn?$9802$Up9ra
                                                            g$ie$9816$Up9ra)
                                                        (void)
                                                        (g$syntax-violation$7462$Up9ra
                                                          'export
                                                          '"invalid export"
                                                          g$ie$9816$Up9ra))
                                                      (g$f$9803$Up9ra
                                                        (cdr g$exp*$9804$Up9ra)
                                                        (cons
                                                          g$ie$9816$Up9ra
                                                          g$int*$9805$Up9ra)
                                                        (cons
                                                          g$ie$9816$Up9ra
                                                          g$ext*$9806$Up9ra)))))
                                                 g$ls/false$9815$Up9ra)
                                               (g$syntax-violation$7462$Up9ra
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$9814$Up9ra))))
                                          (g$syntax-dispatch$7356$Up9ra
                                            g$t$9814$Up9ra
                                            'any))))
                                      g$t$9809$Up9ra))))
                                (g$syntax-dispatch$7356$Up9ra
                                  g$t$9809$Up9ra
                                  '(any . #(each (any any)))))))
                            (car g$exp*$9804$Up9ra)))))))
             g$f$9803$Up9ra)
           g$exp*$9801$Up9ra
           '()
           '())))))
   (g$parse-library-name$7403$Up9ra
     g$parse-library-name$10853$Up9ra
     (case-lambda
       ((g$spec$9818$Up9ra)
        (letrec* ((g$parse$9819$Up9ra
                    (case-lambda
                      ((g$x$9826$Up9ra)
                       ((case-lambda
                          ((g$t$9827$Up9ra)
                           ((case-lambda
                              ((g$ls/false$9828$Up9ra)
                               (if (if g$ls/false$9828$Up9ra
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$9829$Up9ra)
                                            (g$for-all$5365$Up9ra
                                              (case-lambda
                                                ((g$x$9830$Up9ra)
                                                 ((case-lambda
                                                    ((g$x$9831$Up9ra)
                                                     (if (integer?
                                                           g$x$9831$Up9ra)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$9831$Up9ra))
                                                       '#f)))
                                                  (g$syntax->datum$7465$Up9ra
                                                    g$x$9830$Up9ra))))
                                              g$v*$9829$Up9ra)))
                                         g$ls/false$9828$Up9ra))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$9832$Up9ra)
                                      (values
                                        '()
                                        (map g$syntax->datum$7465$Up9ra
                                             g$v*$9832$Up9ra))))
                                   g$ls/false$9828$Up9ra)
                                 ((case-lambda
                                    ((g$t$9833$Up9ra)
                                     ((case-lambda
                                        ((g$ls/false$9834$Up9ra)
                                         (if (if g$ls/false$9834$Up9ra
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$9835$Up9ra
                                                        g$rest$9836$Up9ra)
                                                      (symbol?
                                                        (g$syntax->datum$7465$Up9ra
                                                          g$x$9835$Up9ra))))
                                                   g$ls/false$9834$Up9ra))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$9837$Up9ra
                                                  g$rest$9838$Up9ra)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$9819$Up9ra
                                                       g$rest$9838$Up9ra)))
                                                  (case-lambda
                                                    ((g$x*$9841$Up9ra
                                                       g$v*$9842$Up9ra)
                                                     ((case-lambda
                                                        ((g$v*$9843$Up9ra
                                                           g$x*$9844$Up9ra)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$7465$Up9ra
                                                               g$x$9837$Up9ra)
                                                             g$x*$9844$Up9ra)
                                                           g$v*$9843$Up9ra)))
                                                      g$v*$9842$Up9ra
                                                      g$x*$9841$Up9ra))))))
                                             g$ls/false$9834$Up9ra)
                                           ((case-lambda
                                              ((g$t$9845$Up9ra)
                                               ((case-lambda
                                                  ((g$ls/false$9846$Up9ra)
                                                   (if g$ls/false$9846$Up9ra
                                                     (apply
                                                       (case-lambda
                                                         (() (values '() '())))
                                                       g$ls/false$9846$Up9ra)
                                                     ((case-lambda
                                                        ((g$t$9847$Up9ra)
                                                         ((case-lambda
                                                            ((g$ls/false$9848$Up9ra)
                                                             (if g$ls/false$9848$Up9ra
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$7462$Up9ra
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$9818$Up9ra)))
                                                                 g$ls/false$9848$Up9ra)
                                                               (g$syntax-violation$7462$Up9ra
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$9847$Up9ra))))
                                                          (g$syntax-dispatch$7356$Up9ra
                                                            g$t$9847$Up9ra
                                                            '_))))
                                                      g$t$9845$Up9ra))))
                                                (g$syntax-dispatch$7356$Up9ra
                                                  g$t$9845$Up9ra
                                                  '()))))
                                            g$t$9833$Up9ra))))
                                      (g$syntax-dispatch$7356$Up9ra
                                        g$t$9833$Up9ra
                                        '(any . any)))))
                                  g$t$9827$Up9ra))))
                            (g$syntax-dispatch$7356$Up9ra
                              g$t$9827$Up9ra
                              '(each-any)))))
                        g$x$9826$Up9ra)))))
          (call-with-values
            (case-lambda (() (g$parse$9819$Up9ra g$spec$9818$Up9ra)))
            (case-lambda
              ((g$name*$9822$Up9ra g$ver*$9823$Up9ra)
               ((case-lambda
                  ((g$ver*$9824$Up9ra g$name*$9825$Up9ra)
                   (begin
                     (if (null? g$name*$9825$Up9ra)
                       (g$syntax-violation$7462$Up9ra
                         '#f
                         '"empty library name"
                         g$spec$9818$Up9ra)
                       (void))
                     (values g$name*$9825$Up9ra g$ver*$9824$Up9ra))))
                g$ver*$9823$Up9ra
                g$name*$9822$Up9ra))))))))
   (g$parse-library$7404$Up9ra
     g$parse-library$10854$Up9ra
     (case-lambda
       ((g$e$9849$Up9ra)
        ((case-lambda
           ((g$t$9850$Up9ra)
            ((case-lambda
               ((g$ls/false$9851$Up9ra)
                (if (if g$ls/false$9851$Up9ra
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$9852$Up9ra
                               g$name*$9853$Up9ra
                               g$export$9854$Up9ra
                               g$exp*$9855$Up9ra
                               g$import$9856$Up9ra
                               g$imp*$9857$Up9ra
                               g$b*$9858$Up9ra)
                             (if (eq? (g$syntax->datum$7465$Up9ra
                                        g$export$9854$Up9ra)
                                      'export)
                               (if (eq? (g$syntax->datum$7465$Up9ra
                                          g$import$9856$Up9ra)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$7465$Up9ra
                                          g$library$9852$Up9ra)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$9851$Up9ra))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$9859$Up9ra
                         g$name*$9860$Up9ra
                         g$export$9861$Up9ra
                         g$exp*$9862$Up9ra
                         g$import$9863$Up9ra
                         g$imp*$9864$Up9ra
                         g$b*$9865$Up9ra)
                       (values
                         g$name*$9860$Up9ra
                         g$exp*$9862$Up9ra
                         g$imp*$9864$Up9ra
                         g$b*$9865$Up9ra)))
                    g$ls/false$9851$Up9ra)
                  ((case-lambda
                     ((g$t$9866$Up9ra)
                      ((case-lambda
                         ((g$ls/false$9867$Up9ra)
                          (if g$ls/false$9867$Up9ra
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7462$Up9ra
                                   '#f
                                   '"malformed library"
                                   g$e$9849$Up9ra)))
                              g$ls/false$9867$Up9ra)
                            (g$syntax-violation$7462$Up9ra
                              '#f
                              '"invalid syntax"
                              g$t$9866$Up9ra))))
                       (g$syntax-dispatch$7356$Up9ra g$t$9866$Up9ra '_))))
                   g$t$9850$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$9850$Up9ra
               '(any each-any (any . each-any) (any . each-any) . each-any)))))
         g$e$9849$Up9ra))))
   (g$parse-import-spec*$7405$Up9ra
     g$parse-import-spec*$10855$Up9ra
     (case-lambda
       ((g$imp*$9868$Up9ra)
        (letrec* ((g$idsyn?$9869$Up9ra
                    (case-lambda
                      ((g$x$10128$Up9ra)
                       (symbol? (g$syntax->datum$7465$Up9ra g$x$10128$Up9ra)))))
                  (g$dup-error$9870$Up9ra
                    (case-lambda
                      ((g$name$10127$Up9ra)
                       (g$syntax-violation$7462$Up9ra
                         'import
                         '"two imports with different bindings"
                         g$name$10127$Up9ra))))
                  (g$merge-substs$9871$Up9ra
                    (case-lambda
                      ((g$s$10118$Up9ra g$subst$10119$Up9ra)
                       (letrec* ((g$insert-to-subst$10120$Up9ra
                                   (case-lambda
                                     ((g$a$10121$Up9ra g$subst$10122$Up9ra)
                                      ((case-lambda
                                         ((g$name$10123$Up9ra
                                            g$label$10124$Up9ra)
                                          ((case-lambda
                                             ((g$t$10125$Up9ra)
                                              (if g$t$10125$Up9ra
                                                ((case-lambda
                                                   ((g$x$10126$Up9ra)
                                                    (if (eq? (cdr g$x$10126$Up9ra)
                                                             g$label$10124$Up9ra)
                                                      g$subst$10122$Up9ra
                                                      (g$dup-error$9870$Up9ra
                                                        g$name$10123$Up9ra))))
                                                 g$t$10125$Up9ra)
                                                (cons
                                                  g$a$10121$Up9ra
                                                  g$subst$10122$Up9ra))))
                                           (assq
                                             g$name$10123$Up9ra
                                             g$subst$10122$Up9ra))))
                                       (car g$a$10121$Up9ra)
                                       (cdr g$a$10121$Up9ra))))))
                         (if (null? g$s$10118$Up9ra)
                           g$subst$10119$Up9ra
                           (g$insert-to-subst$10120$Up9ra
                             (car g$s$10118$Up9ra)
                             (g$merge-substs$9871$Up9ra
                               (cdr g$s$10118$Up9ra)
                               g$subst$10119$Up9ra)))))))
                  (g$exclude*$9872$Up9ra
                    (case-lambda
                      ((g$sym*$10094$Up9ra g$subst$10095$Up9ra)
                       (letrec* ((g$exclude$10096$Up9ra
                                   (case-lambda
                                     ((g$sym$10109$Up9ra g$subst$10110$Up9ra)
                                      (if (null? g$subst$10110$Up9ra)
                                        (g$syntax-violation$7462$Up9ra
                                          'import
                                          '"cannot rename unbound identifier"
                                          g$sym$10109$Up9ra)
                                        (if (eq? g$sym$10109$Up9ra
                                                 (g$caar$4895$Up9ra
                                                   g$subst$10110$Up9ra))
                                          (values
                                            (g$cdar$4897$Up9ra
                                              g$subst$10110$Up9ra)
                                            (cdr g$subst$10110$Up9ra))
                                          ((case-lambda
                                             ((g$a$10111$Up9ra)
                                              (call-with-values
                                                (case-lambda
                                                  (()
                                                   (g$exclude$10096$Up9ra
                                                     g$sym$10109$Up9ra
                                                     (cdr g$subst$10110$Up9ra))))
                                                (case-lambda
                                                  ((g$old$10114$Up9ra
                                                     g$subst$10115$Up9ra)
                                                   ((case-lambda
                                                      ((g$subst$10116$Up9ra
                                                         g$old$10117$Up9ra)
                                                       (values
                                                         g$old$10117$Up9ra
                                                         (cons
                                                           g$a$10111$Up9ra
                                                           g$subst$10116$Up9ra))))
                                                    g$subst$10115$Up9ra
                                                    g$old$10114$Up9ra))))))
                                           (car g$subst$10110$Up9ra))))))))
                         (if (null? g$sym*$10094$Up9ra)
                           (values '() g$subst$10095$Up9ra)
                           (call-with-values
                             (case-lambda
                               (()
                                (g$exclude$10096$Up9ra
                                  (car g$sym*$10094$Up9ra)
                                  g$subst$10095$Up9ra)))
                             (case-lambda
                               ((g$old$10099$Up9ra g$subst$10100$Up9ra)
                                ((case-lambda
                                   ((g$subst$10101$Up9ra g$old$10102$Up9ra)
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$exclude*$9872$Up9ra
                                           (cdr g$sym*$10094$Up9ra)
                                           g$subst$10101$Up9ra)))
                                      (case-lambda
                                        ((g$old*$10105$Up9ra
                                           g$subst$10106$Up9ra)
                                         ((case-lambda
                                            ((g$subst$10107$Up9ra
                                               g$old*$10108$Up9ra)
                                             (values
                                               (cons
                                                 g$old$10102$Up9ra
                                                 g$old*$10108$Up9ra)
                                               g$subst$10107$Up9ra)))
                                          g$subst$10106$Up9ra
                                          g$old*$10105$Up9ra))))))
                                 g$subst$10100$Up9ra
                                 g$old$10099$Up9ra)))))))))
                  (g$find*$9873$Up9ra
                    (case-lambda
                      ((g$sym*$10090$Up9ra g$subst$10091$Up9ra)
                       (map (case-lambda
                              ((g$x$10092$Up9ra)
                               ((case-lambda
                                  ((g$t$10093$Up9ra)
                                   (if g$t$10093$Up9ra
                                     (cdr g$t$10093$Up9ra)
                                     (g$syntax-violation$7462$Up9ra
                                       'import
                                       '"cannot find identifier"
                                       g$x$10092$Up9ra))))
                                (assq g$x$10092$Up9ra g$subst$10091$Up9ra))))
                            g$sym*$10090$Up9ra))))
                  (g$rem*$9874$Up9ra
                    (case-lambda
                      ((g$sym*$10086$Up9ra g$subst$10087$Up9ra)
                       ((letrec ((g$f$10088$Up9ra
                                   (case-lambda
                                     ((g$subst$10089$Up9ra)
                                      (if (null? g$subst$10089$Up9ra)
                                        '()
                                        (if (memq
                                              (g$caar$4895$Up9ra
                                                g$subst$10089$Up9ra)
                                              g$sym*$10086$Up9ra)
                                          (g$f$10088$Up9ra
                                            (cdr g$subst$10089$Up9ra))
                                          (cons
                                            (car g$subst$10089$Up9ra)
                                            (g$f$10088$Up9ra
                                              (cdr g$subst$10089$Up9ra)))))))))
                          g$f$10088$Up9ra)
                        g$subst$10087$Up9ra))))
                  (g$remove-dups$9875$Up9ra
                    (case-lambda
                      ((g$ls$10085$Up9ra)
                       (if (null? g$ls$10085$Up9ra)
                         '()
                         (if (memq
                               (car g$ls$10085$Up9ra)
                               (cdr g$ls$10085$Up9ra))
                           (g$remove-dups$9875$Up9ra (cdr g$ls$10085$Up9ra))
                           (cons
                             (car g$ls$10085$Up9ra)
                             (g$remove-dups$9875$Up9ra
                               (cdr g$ls$10085$Up9ra))))))))
                  (g$parse-library-name$9876$Up9ra
                    (case-lambda
                      ((g$spec$9970$Up9ra)
                       (letrec* ((g$subversion?$9971$Up9ra
                                   (case-lambda
                                     ((g$x$10084$Up9ra)
                                      (if (integer? g$x$10084$Up9ra)
                                        (if (exact? g$x$10084$Up9ra)
                                          (begin '#f (>= g$x$10084$Up9ra '0))
                                          '#f)
                                        '#f))))
                                 (g$subversion-pred$9972$Up9ra
                                   (case-lambda
                                     ((g$x*$10036$Up9ra)
                                      ((case-lambda
                                         ((g$t$10037$Up9ra)
                                          ((case-lambda
                                             ((g$ls/false$10038$Up9ra)
                                              (if (if g$ls/false$10038$Up9ra
                                                    (begin
                                                      '#f
                                                      (apply
                                                        (case-lambda
                                                          ((g$n$10039$Up9ra)
                                                           (g$subversion?$9971$Up9ra
                                                             (g$syntax->datum$7465$Up9ra
                                                               g$n$10039$Up9ra))))
                                                        g$ls/false$10038$Up9ra))
                                                    '#f)
                                                (apply
                                                  (case-lambda
                                                    ((g$n$10040$Up9ra)
                                                     (case-lambda
                                                       ((g$x$10041$Up9ra)
                                                        (= g$x$10041$Up9ra
                                                           (g$syntax->datum$7465$Up9ra
                                                             g$n$10040$Up9ra))))))
                                                  g$ls/false$10038$Up9ra)
                                                ((case-lambda
                                                   ((g$t$10042$Up9ra)
                                                    ((case-lambda
                                                       ((g$ls/false$10043$Up9ra)
                                                        (if (if g$ls/false$10043$Up9ra
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p?$10044$Up9ra
                                                                       g$sub*$10045$Up9ra)
                                                                     (eq? (g$syntax->datum$7465$Up9ra
                                                                            g$p?$10044$Up9ra)
                                                                          'and)))
                                                                  g$ls/false$10043$Up9ra))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$p?$10046$Up9ra
                                                                 g$sub*$10047$Up9ra)
                                                               ((case-lambda
                                                                  ((g$p*$10048$Up9ra)
                                                                   (case-lambda
                                                                     ((g$x$10049$Up9ra)
                                                                      (g$for-all$5365$Up9ra
                                                                        (case-lambda
                                                                          ((g$p$10050$Up9ra)
                                                                           (g$p$10050$Up9ra
                                                                             g$x$10049$Up9ra)))
                                                                        g$p*$10048$Up9ra)))))
                                                                (map g$subversion-pred$9972$Up9ra
                                                                     g$sub*$10047$Up9ra))))
                                                            g$ls/false$10043$Up9ra)
                                                          ((case-lambda
                                                             ((g$t$10051$Up9ra)
                                                              ((case-lambda
                                                                 ((g$ls/false$10052$Up9ra)
                                                                  (if (if g$ls/false$10052$Up9ra
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p?$10053$Up9ra
                                                                                 g$sub*$10054$Up9ra)
                                                                               (eq? (g$syntax->datum$7465$Up9ra
                                                                                      g$p?$10053$Up9ra)
                                                                                    'or)))
                                                                            g$ls/false$10052$Up9ra))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$p?$10055$Up9ra
                                                                           g$sub*$10056$Up9ra)
                                                                         ((case-lambda
                                                                            ((g$p*$10057$Up9ra)
                                                                             (case-lambda
                                                                               ((g$x$10058$Up9ra)
                                                                                (g$exists$5366$Up9ra
                                                                                  (case-lambda
                                                                                    ((g$p$10059$Up9ra)
                                                                                     (g$p$10059$Up9ra
                                                                                       g$x$10058$Up9ra)))
                                                                                  g$p*$10057$Up9ra)))))
                                                                          (map g$subversion-pred$9972$Up9ra
                                                                               g$sub*$10056$Up9ra))))
                                                                      g$ls/false$10052$Up9ra)
                                                                    ((case-lambda
                                                                       ((g$t$10060$Up9ra)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10061$Up9ra)
                                                                            (if (if g$ls/false$10061$Up9ra
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p?$10062$Up9ra
                                                                                           g$sub$10063$Up9ra)
                                                                                         (eq? (g$syntax->datum$7465$Up9ra
                                                                                                g$p?$10062$Up9ra)
                                                                                              'not)))
                                                                                      g$ls/false$10061$Up9ra))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$p?$10064$Up9ra
                                                                                     g$sub$10065$Up9ra)
                                                                                   ((case-lambda
                                                                                      ((g$p$10066$Up9ra)
                                                                                       (case-lambda
                                                                                         ((g$x$10067$Up9ra)
                                                                                          (not (g$p$10066$Up9ra
                                                                                                 g$x$10067$Up9ra))))))
                                                                                    (g$subversion-pred$9972$Up9ra
                                                                                      g$sub$10065$Up9ra))))
                                                                                g$ls/false$10061$Up9ra)
                                                                              ((case-lambda
                                                                                 ((g$t$10068$Up9ra)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$10069$Up9ra)
                                                                                      (if (if g$ls/false$10069$Up9ra
                                                                                            (begin
                                                                                              '#f
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p?$10070$Up9ra
                                                                                                     g$n$10071$Up9ra)
                                                                                                   (if (eq? (g$syntax->datum$7465$Up9ra
                                                                                                              g$p?$10070$Up9ra)
                                                                                                            '<=)
                                                                                                     (begin
                                                                                                       '#f
                                                                                                       (g$subversion?$9971$Up9ra
                                                                                                         (g$syntax->datum$7465$Up9ra
                                                                                                           g$n$10071$Up9ra)))
                                                                                                     '#f)))
                                                                                                g$ls/false$10069$Up9ra))
                                                                                            '#f)
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$p?$10072$Up9ra
                                                                                               g$n$10073$Up9ra)
                                                                                             (case-lambda
                                                                                               ((g$x$10074$Up9ra)
                                                                                                (<= g$x$10074$Up9ra
                                                                                                    (g$syntax->datum$7465$Up9ra
                                                                                                      g$n$10073$Up9ra))))))
                                                                                          g$ls/false$10069$Up9ra)
                                                                                        ((case-lambda
                                                                                           ((g$t$10075$Up9ra)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$10076$Up9ra)
                                                                                                (if (if g$ls/false$10076$Up9ra
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$p?$10077$Up9ra
                                                                                                               g$n$10078$Up9ra)
                                                                                                             (if (eq? (g$syntax->datum$7465$Up9ra
                                                                                                                        g$p?$10077$Up9ra)
                                                                                                                      '>=)
                                                                                                               (begin
                                                                                                                 '#f
                                                                                                                 (g$subversion?$9971$Up9ra
                                                                                                                   g$n$10078$Up9ra))
                                                                                                               '#f)))
                                                                                                          g$ls/false$10076$Up9ra))
                                                                                                      '#f)
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$p?$10079$Up9ra
                                                                                                         g$n$10080$Up9ra)
                                                                                                       (case-lambda
                                                                                                         ((g$x$10081$Up9ra)
                                                                                                          (>= g$x$10081$Up9ra
                                                                                                              (g$syntax->datum$7465$Up9ra
                                                                                                                g$n$10080$Up9ra))))))
                                                                                                    g$ls/false$10076$Up9ra)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$10082$Up9ra)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$10083$Up9ra)
                                                                                                          (if g$ls/false$10083$Up9ra
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (g$syntax-violation$7462$Up9ra
                                                                                                                   'import
                                                                                                                   '"invalid sub-version spec"
                                                                                                                   g$spec$9970$Up9ra
                                                                                                                   g$x*$10036$Up9ra)))
                                                                                                              g$ls/false$10083$Up9ra)
                                                                                                            (g$syntax-violation$7462$Up9ra
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$10082$Up9ra))))
                                                                                                       (g$syntax-dispatch$7356$Up9ra
                                                                                                         g$t$10082$Up9ra
                                                                                                         '_))))
                                                                                                   g$t$10075$Up9ra))))
                                                                                             (g$syntax-dispatch$7356$Up9ra
                                                                                               g$t$10075$Up9ra
                                                                                               '(any any)))))
                                                                                         g$t$10068$Up9ra))))
                                                                                   (g$syntax-dispatch$7356$Up9ra
                                                                                     g$t$10068$Up9ra
                                                                                     '(any any)))))
                                                                               g$t$10060$Up9ra))))
                                                                         (g$syntax-dispatch$7356$Up9ra
                                                                           g$t$10060$Up9ra
                                                                           '(any any)))))
                                                                     g$t$10051$Up9ra))))
                                                               (g$syntax-dispatch$7356$Up9ra
                                                                 g$t$10051$Up9ra
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$10042$Up9ra))))
                                                     (g$syntax-dispatch$7356$Up9ra
                                                       g$t$10042$Up9ra
                                                       '(any . each-any)))))
                                                 g$t$10037$Up9ra))))
                                           (g$syntax-dispatch$7356$Up9ra
                                             g$t$10037$Up9ra
                                             'any))))
                                       g$x*$10036$Up9ra))))
                                 (g$version-pred$9973$Up9ra
                                   (case-lambda
                                     ((g$x*$9996$Up9ra)
                                      ((case-lambda
                                         ((g$t$9997$Up9ra)
                                          ((case-lambda
                                             ((g$ls/false$9998$Up9ra)
                                              (if g$ls/false$9998$Up9ra
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (case-lambda
                                                       ((g$x$9999$Up9ra) '#t))))
                                                  g$ls/false$9998$Up9ra)
                                                ((case-lambda
                                                   ((g$t$10000$Up9ra)
                                                    ((case-lambda
                                                       ((g$ls/false$10001$Up9ra)
                                                        (if (if g$ls/false$10001$Up9ra
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$c$10002$Up9ra
                                                                       g$ver*$10003$Up9ra)
                                                                     (eq? (g$syntax->datum$7465$Up9ra
                                                                            g$c$10002$Up9ra)
                                                                          'and)))
                                                                  g$ls/false$10001$Up9ra))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$c$10004$Up9ra
                                                                 g$ver*$10005$Up9ra)
                                                               ((case-lambda
                                                                  ((g$p*$10006$Up9ra)
                                                                   (case-lambda
                                                                     ((g$x$10007$Up9ra)
                                                                      (g$for-all$5365$Up9ra
                                                                        (case-lambda
                                                                          ((g$p$10008$Up9ra)
                                                                           (g$p$10008$Up9ra
                                                                             g$x$10007$Up9ra)))
                                                                        g$p*$10006$Up9ra)))))
                                                                (map g$version-pred$9973$Up9ra
                                                                     g$ver*$10005$Up9ra))))
                                                            g$ls/false$10001$Up9ra)
                                                          ((case-lambda
                                                             ((g$t$10009$Up9ra)
                                                              ((case-lambda
                                                                 ((g$ls/false$10010$Up9ra)
                                                                  (if (if g$ls/false$10010$Up9ra
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$c$10011$Up9ra
                                                                                 g$ver*$10012$Up9ra)
                                                                               (eq? (g$syntax->datum$7465$Up9ra
                                                                                      g$c$10011$Up9ra)
                                                                                    'or)))
                                                                            g$ls/false$10010$Up9ra))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$c$10013$Up9ra
                                                                           g$ver*$10014$Up9ra)
                                                                         ((case-lambda
                                                                            ((g$p*$10015$Up9ra)
                                                                             (case-lambda
                                                                               ((g$x$10016$Up9ra)
                                                                                (g$exists$5366$Up9ra
                                                                                  (case-lambda
                                                                                    ((g$p$10017$Up9ra)
                                                                                     (g$p$10017$Up9ra
                                                                                       g$x$10016$Up9ra)))
                                                                                  g$p*$10015$Up9ra)))))
                                                                          (map g$version-pred$9973$Up9ra
                                                                               g$ver*$10014$Up9ra))))
                                                                      g$ls/false$10010$Up9ra)
                                                                    ((case-lambda
                                                                       ((g$t$10018$Up9ra)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10019$Up9ra)
                                                                            (if (if g$ls/false$10019$Up9ra
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$c$10020$Up9ra
                                                                                           g$ver$10021$Up9ra)
                                                                                         (eq? (g$syntax->datum$7465$Up9ra
                                                                                                g$c$10020$Up9ra)
                                                                                              'not)))
                                                                                      g$ls/false$10019$Up9ra))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$c$10022$Up9ra
                                                                                     g$ver$10023$Up9ra)
                                                                                   ((case-lambda
                                                                                      ((g$p$10024$Up9ra)
                                                                                       (case-lambda
                                                                                         ((g$x$10025$Up9ra)
                                                                                          (not (g$p$10024$Up9ra
                                                                                                 g$x$10025$Up9ra))))))
                                                                                    (g$version-pred$9973$Up9ra
                                                                                      g$ver$10023$Up9ra))))
                                                                                g$ls/false$10019$Up9ra)
                                                                              ((case-lambda
                                                                                 ((g$t$10026$Up9ra)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$10027$Up9ra)
                                                                                      (if g$ls/false$10027$Up9ra
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$sub*$10028$Up9ra)
                                                                                             ((case-lambda
                                                                                                ((g$p*$10029$Up9ra)
                                                                                                 (case-lambda
                                                                                                   ((g$x$10030$Up9ra)
                                                                                                    ((letrec ((g$f$10031$Up9ra
                                                                                                                (case-lambda
                                                                                                                  ((g$p*$10032$Up9ra
                                                                                                                     g$x$10033$Up9ra)
                                                                                                                   (if (null?
                                                                                                                         g$p*$10032$Up9ra)
                                                                                                                     '#t
                                                                                                                     (if (null?
                                                                                                                           g$x$10033$Up9ra)
                                                                                                                       '#f
                                                                                                                       (if ((car g$p*$10032$Up9ra)
                                                                                                                            (car g$x$10033$Up9ra))
                                                                                                                         (begin
                                                                                                                           '#f
                                                                                                                           (g$f$10031$Up9ra
                                                                                                                             (cdr g$p*$10032$Up9ra)
                                                                                                                             (cdr g$x$10033$Up9ra)))
                                                                                                                         '#f)))))))
                                                                                                       g$f$10031$Up9ra)
                                                                                                     g$p*$10029$Up9ra
                                                                                                     g$x$10030$Up9ra)))))
                                                                                              (map g$subversion-pred$9972$Up9ra
                                                                                                   g$sub*$10028$Up9ra))))
                                                                                          g$ls/false$10027$Up9ra)
                                                                                        ((case-lambda
                                                                                           ((g$t$10034$Up9ra)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$10035$Up9ra)
                                                                                                (if g$ls/false$10035$Up9ra
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      (()
                                                                                                       (g$syntax-violation$7462$Up9ra
                                                                                                         'import
                                                                                                         '"invalid version spec"
                                                                                                         g$spec$9970$Up9ra
                                                                                                         g$x*$9996$Up9ra)))
                                                                                                    g$ls/false$10035$Up9ra)
                                                                                                  (g$syntax-violation$7462$Up9ra
                                                                                                    '#f
                                                                                                    '"invalid syntax"
                                                                                                    g$t$10034$Up9ra))))
                                                                                             (g$syntax-dispatch$7356$Up9ra
                                                                                               g$t$10034$Up9ra
                                                                                               '_))))
                                                                                         g$t$10026$Up9ra))))
                                                                                   (g$syntax-dispatch$7356$Up9ra
                                                                                     g$t$10026$Up9ra
                                                                                     'each-any))))
                                                                               g$t$10018$Up9ra))))
                                                                         (g$syntax-dispatch$7356$Up9ra
                                                                           g$t$10018$Up9ra
                                                                           '(any any)))))
                                                                     g$t$10009$Up9ra))))
                                                               (g$syntax-dispatch$7356$Up9ra
                                                                 g$t$10009$Up9ra
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$10000$Up9ra))))
                                                     (g$syntax-dispatch$7356$Up9ra
                                                       g$t$10000$Up9ra
                                                       '(any . each-any)))))
                                                 g$t$9997$Up9ra))))
                                           (g$syntax-dispatch$7356$Up9ra
                                             g$t$9997$Up9ra
                                             '()))))
                                       g$x*$9996$Up9ra)))))
                         ((letrec ((g$f$9974$Up9ra
                                     (case-lambda
                                       ((g$x$9975$Up9ra)
                                        ((case-lambda
                                           ((g$t$9976$Up9ra)
                                            ((case-lambda
                                               ((g$ls/false$9977$Up9ra)
                                                (if g$ls/false$9977$Up9ra
                                                  (apply
                                                    (case-lambda
                                                      ((g$version-spec*$9978$Up9ra)
                                                       (values
                                                         '()
                                                         (g$version-pred$9973$Up9ra
                                                           g$version-spec*$9978$Up9ra))))
                                                    g$ls/false$9977$Up9ra)
                                                  ((case-lambda
                                                     ((g$t$9979$Up9ra)
                                                      ((case-lambda
                                                         ((g$ls/false$9980$Up9ra)
                                                          (if (if g$ls/false$9980$Up9ra
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$x$9981$Up9ra
                                                                         g$x*$9982$Up9ra)
                                                                       (g$idsyn?$9869$Up9ra
                                                                         g$x$9981$Up9ra)))
                                                                    g$ls/false$9980$Up9ra))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$x$9983$Up9ra
                                                                   g$x*$9984$Up9ra)
                                                                 (call-with-values
                                                                   (case-lambda
                                                                     (()
                                                                      (g$f$9974$Up9ra
                                                                        g$x*$9984$Up9ra)))
                                                                   (case-lambda
                                                                     ((g$name$9987$Up9ra
                                                                        g$pred$9988$Up9ra)
                                                                      ((case-lambda
                                                                         ((g$pred$9989$Up9ra
                                                                            g$name$9990$Up9ra)
                                                                          (values
                                                                            (cons
                                                                              (g$syntax->datum$7465$Up9ra
                                                                                g$x$9983$Up9ra)
                                                                              g$name$9990$Up9ra)
                                                                            g$pred$9989$Up9ra)))
                                                                       g$pred$9988$Up9ra
                                                                       g$name$9987$Up9ra))))))
                                                              g$ls/false$9980$Up9ra)
                                                            ((case-lambda
                                                               ((g$t$9991$Up9ra)
                                                                ((case-lambda
                                                                   ((g$ls/false$9992$Up9ra)
                                                                    (if g$ls/false$9992$Up9ra
                                                                      (apply
                                                                        (case-lambda
                                                                          (()
                                                                           (values
                                                                             '()
                                                                             (case-lambda
                                                                               ((g$x$9993$Up9ra)
                                                                                '#t)))))
                                                                        g$ls/false$9992$Up9ra)
                                                                      ((case-lambda
                                                                         ((g$t$9994$Up9ra)
                                                                          ((case-lambda
                                                                             ((g$ls/false$9995$Up9ra)
                                                                              (if g$ls/false$9995$Up9ra
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$syntax-violation$7462$Up9ra
                                                                                       '#f
                                                                                       '"invalid import spec"
                                                                                       g$spec$9970$Up9ra)))
                                                                                  g$ls/false$9995$Up9ra)
                                                                                (g$syntax-violation$7462$Up9ra
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$9994$Up9ra))))
                                                                           (g$syntax-dispatch$7356$Up9ra
                                                                             g$t$9994$Up9ra
                                                                             '_))))
                                                                       g$t$9991$Up9ra))))
                                                                 (g$syntax-dispatch$7356$Up9ra
                                                                   g$t$9991$Up9ra
                                                                   '()))))
                                                             g$t$9979$Up9ra))))
                                                       (g$syntax-dispatch$7356$Up9ra
                                                         g$t$9979$Up9ra
                                                         '(any . any)))))
                                                   g$t$9976$Up9ra))))
                                             (g$syntax-dispatch$7356$Up9ra
                                               g$t$9976$Up9ra
                                               '(each-any)))))
                                         g$x$9975$Up9ra)))))
                            g$f$9974$Up9ra)
                          g$spec$9970$Up9ra)))))
                  (g$import-library$9877$Up9ra
                    (case-lambda
                      ((g$spec*$9962$Up9ra)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-library-name$9876$Up9ra
                              g$spec*$9962$Up9ra)))
                         (case-lambda
                           ((g$name$9965$Up9ra g$pred$9966$Up9ra)
                            ((case-lambda
                               ((g$pred$9967$Up9ra g$name$9968$Up9ra)
                                (begin
                                  (if (null? g$name$9968$Up9ra)
                                    (g$syntax-violation$7462$Up9ra
                                      'import
                                      '"empty library name"
                                      g$spec*$9962$Up9ra)
                                    (void))
                                  ((case-lambda
                                     ((g$lib$9969$Up9ra)
                                      (begin
                                        (if g$lib$9969$Up9ra
                                          (void)
                                          (g$syntax-violation$7462$Up9ra
                                            'import
                                            '"cannot find library with required name"
                                            g$name$9968$Up9ra))
                                        (if (g$pred$9967$Up9ra
                                              (g$library-version$6846$Up9ra
                                                g$lib$9969$Up9ra))
                                          (void)
                                          (g$syntax-violation$7462$Up9ra
                                            'import
                                            '"library does not satisfy version specification"
                                            g$spec*$9962$Up9ra
                                            g$lib$9969$Up9ra))
                                        ((g$imp-collector$7410$Up9ra)
                                         g$lib$9969$Up9ra)
                                        (g$library-subst$6850$Up9ra
                                          g$lib$9969$Up9ra))))
                                   (g$find-library-by-name$6886$Up9ra
                                     g$name$9968$Up9ra)))))
                             g$pred$9966$Up9ra
                             g$name$9965$Up9ra)))))))
                  (g$get-import$9878$Up9ra
                    (case-lambda
                      ((g$spec$9891$Up9ra)
                       ((case-lambda
                          ((g$t$9892$Up9ra)
                           ((case-lambda
                              ((g$ls/false$9893$Up9ra)
                               (if (if g$ls/false$9893$Up9ra
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$x$9894$Up9ra g$x*$9895$Up9ra)
                                            (not (memq
                                                   (g$syntax->datum$7465$Up9ra
                                                     g$x$9894$Up9ra)
                                                   '(for rename
                                                         except
                                                         only
                                                         prefix
                                                         library)))))
                                         g$ls/false$9893$Up9ra))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$x$9896$Up9ra g$x*$9897$Up9ra)
                                      (g$import-library$9877$Up9ra
                                        (cons g$x$9896$Up9ra g$x*$9897$Up9ra))))
                                   g$ls/false$9893$Up9ra)
                                 ((case-lambda
                                    ((g$t$9898$Up9ra)
                                     ((case-lambda
                                        ((g$ls/false$9899$Up9ra)
                                         (if (if g$ls/false$9899$Up9ra
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$rename$9900$Up9ra
                                                        g$isp$9901$Up9ra
                                                        g$old*$9902$Up9ra
                                                        g$new*$9903$Up9ra)
                                                      (if (eq? (g$syntax->datum$7465$Up9ra
                                                                 g$rename$9900$Up9ra)
                                                               'rename)
                                                        (if (g$for-all$5365$Up9ra
                                                              g$idsyn?$9869$Up9ra
                                                              g$old*$9902$Up9ra)
                                                          (begin
                                                            '#f
                                                            (g$for-all$5365$Up9ra
                                                              g$idsyn?$9869$Up9ra
                                                              g$new*$9903$Up9ra))
                                                          '#f)
                                                        '#f)))
                                                   g$ls/false$9899$Up9ra))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$rename$9904$Up9ra
                                                  g$isp$9905$Up9ra
                                                  g$old*$9906$Up9ra
                                                  g$new*$9907$Up9ra)
                                                ((case-lambda
                                                   ((g$subst$9908$Up9ra
                                                      g$old*$9909$Up9ra
                                                      g$new*$9910$Up9ra)
                                                    ((case-lambda
                                                       ((g$old-label*$9911$Up9ra)
                                                        ((case-lambda
                                                           ((g$subst$9912$Up9ra)
                                                            (g$merge-substs$9871$Up9ra
                                                              (map cons
                                                                   g$new*$9910$Up9ra
                                                                   g$old-label*$9911$Up9ra)
                                                              g$subst$9912$Up9ra)))
                                                         (g$rem*$9874$Up9ra
                                                           g$old*$9909$Up9ra
                                                           g$subst$9908$Up9ra))))
                                                     (g$find*$9873$Up9ra
                                                       g$old*$9909$Up9ra
                                                       g$subst$9908$Up9ra))))
                                                 (g$get-import$9878$Up9ra
                                                   g$isp$9905$Up9ra)
                                                 (map g$syntax->datum$7465$Up9ra
                                                      g$old*$9906$Up9ra)
                                                 (map g$syntax->datum$7465$Up9ra
                                                      g$new*$9907$Up9ra))))
                                             g$ls/false$9899$Up9ra)
                                           ((case-lambda
                                              ((g$t$9913$Up9ra)
                                               ((case-lambda
                                                  ((g$ls/false$9914$Up9ra)
                                                   (if (if g$ls/false$9914$Up9ra
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$except$9915$Up9ra
                                                                  g$isp$9916$Up9ra
                                                                  g$sym*$9917$Up9ra)
                                                                (if (eq? (g$syntax->datum$7465$Up9ra
                                                                           g$except$9915$Up9ra)
                                                                         'except)
                                                                  (begin
                                                                    '#f
                                                                    (g$for-all$5365$Up9ra
                                                                      g$idsyn?$9869$Up9ra
                                                                      g$sym*$9917$Up9ra))
                                                                  '#f)))
                                                             g$ls/false$9914$Up9ra))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$except$9918$Up9ra
                                                            g$isp$9919$Up9ra
                                                            g$sym*$9920$Up9ra)
                                                          ((case-lambda
                                                             ((g$subst$9921$Up9ra)
                                                              (g$rem*$9874$Up9ra
                                                                (map g$syntax->datum$7465$Up9ra
                                                                     g$sym*$9920$Up9ra)
                                                                g$subst$9921$Up9ra)))
                                                           (g$get-import$9878$Up9ra
                                                             g$isp$9919$Up9ra))))
                                                       g$ls/false$9914$Up9ra)
                                                     ((case-lambda
                                                        ((g$t$9922$Up9ra)
                                                         ((case-lambda
                                                            ((g$ls/false$9923$Up9ra)
                                                             (if (if g$ls/false$9923$Up9ra
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$only$9924$Up9ra
                                                                            g$isp$9925$Up9ra
                                                                            g$sym*$9926$Up9ra)
                                                                          (if (eq? (g$syntax->datum$7465$Up9ra
                                                                                     g$only$9924$Up9ra)
                                                                                   'only)
                                                                            (begin
                                                                              '#f
                                                                              (g$for-all$5365$Up9ra
                                                                                g$idsyn?$9869$Up9ra
                                                                                g$sym*$9926$Up9ra))
                                                                            '#f)))
                                                                       g$ls/false$9923$Up9ra))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$only$9927$Up9ra
                                                                      g$isp$9928$Up9ra
                                                                      g$sym*$9929$Up9ra)
                                                                    ((case-lambda
                                                                       ((g$subst$9930$Up9ra
                                                                          g$sym*$9931$Up9ra)
                                                                        ((case-lambda
                                                                           ((g$sym*$9932$Up9ra)
                                                                            ((case-lambda
                                                                               ((g$lab*$9933$Up9ra)
                                                                                (map cons
                                                                                     g$sym*$9932$Up9ra
                                                                                     g$lab*$9933$Up9ra)))
                                                                             (g$find*$9873$Up9ra
                                                                               g$sym*$9932$Up9ra
                                                                               g$subst$9930$Up9ra))))
                                                                         (g$remove-dups$9875$Up9ra
                                                                           g$sym*$9931$Up9ra))))
                                                                     (g$get-import$9878$Up9ra
                                                                       g$isp$9928$Up9ra)
                                                                     (map g$syntax->datum$7465$Up9ra
                                                                          g$sym*$9929$Up9ra))))
                                                                 g$ls/false$9923$Up9ra)
                                                               ((case-lambda
                                                                  ((g$t$9934$Up9ra)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9935$Up9ra)
                                                                       (if (if g$ls/false$9935$Up9ra
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$prefix$9936$Up9ra
                                                                                      g$isp$9937$Up9ra
                                                                                      g$p$9938$Up9ra)
                                                                                    (if (eq? (g$syntax->datum$7465$Up9ra
                                                                                               g$prefix$9936$Up9ra)
                                                                                             'prefix)
                                                                                      (begin
                                                                                        '#f
                                                                                        (g$idsyn?$9869$Up9ra
                                                                                          g$p$9938$Up9ra))
                                                                                      '#f)))
                                                                                 g$ls/false$9935$Up9ra))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$prefix$9939$Up9ra
                                                                                g$isp$9940$Up9ra
                                                                                g$p$9941$Up9ra)
                                                                              ((case-lambda
                                                                                 ((g$subst$9942$Up9ra
                                                                                    g$prefix$9943$Up9ra)
                                                                                  (map (case-lambda
                                                                                         ((g$x$9944$Up9ra)
                                                                                          (cons
                                                                                            (string->symbol
                                                                                              (string-append
                                                                                                g$prefix$9943$Up9ra
                                                                                                (symbol->string
                                                                                                  (car g$x$9944$Up9ra))))
                                                                                            (cdr g$x$9944$Up9ra))))
                                                                                       g$subst$9942$Up9ra)))
                                                                               (g$get-import$9878$Up9ra
                                                                                 g$isp$9940$Up9ra)
                                                                               (symbol->string
                                                                                 (g$syntax->datum$7465$Up9ra
                                                                                   g$p$9941$Up9ra)))))
                                                                           g$ls/false$9935$Up9ra)
                                                                         ((case-lambda
                                                                            ((g$t$9945$Up9ra)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9946$Up9ra)
                                                                                 (if (if g$ls/false$9946$Up9ra
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$library$9947$Up9ra
                                                                                                g$spec*$9948$Up9ra)
                                                                                              (eq? (g$syntax->datum$7465$Up9ra
                                                                                                     g$library$9947$Up9ra)
                                                                                                   'library)))
                                                                                           g$ls/false$9946$Up9ra))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$library$9949$Up9ra
                                                                                          g$spec*$9950$Up9ra)
                                                                                        (g$import-library$9877$Up9ra
                                                                                          g$spec*$9950$Up9ra)))
                                                                                     g$ls/false$9946$Up9ra)
                                                                                   ((case-lambda
                                                                                      ((g$t$9951$Up9ra)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9952$Up9ra)
                                                                                           (if (if g$ls/false$9952$Up9ra
                                                                                                 (begin
                                                                                                   '#f
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$for$9953$Up9ra
                                                                                                          g$isp$9954$Up9ra
                                                                                                          g$rest$9955$Up9ra)
                                                                                                        (eq? (g$syntax->datum$7465$Up9ra
                                                                                                               g$for$9953$Up9ra)
                                                                                                             'for)))
                                                                                                     g$ls/false$9952$Up9ra))
                                                                                                 '#f)
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$for$9956$Up9ra
                                                                                                    g$isp$9957$Up9ra
                                                                                                    g$rest$9958$Up9ra)
                                                                                                  (g$get-import$9878$Up9ra
                                                                                                    g$isp$9957$Up9ra)))
                                                                                               g$ls/false$9952$Up9ra)
                                                                                             ((case-lambda
                                                                                                ((g$t$9959$Up9ra)
                                                                                                 ((case-lambda
                                                                                                    ((g$ls/false$9960$Up9ra)
                                                                                                     (if g$ls/false$9960$Up9ra
                                                                                                       (apply
                                                                                                         (case-lambda
                                                                                                           ((g$spec$9961$Up9ra)
                                                                                                            (g$syntax-violation$7462$Up9ra
                                                                                                              'import
                                                                                                              '"invalid import spec"
                                                                                                              g$spec$9961$Up9ra)))
                                                                                                         g$ls/false$9960$Up9ra)
                                                                                                       (g$syntax-violation$7462$Up9ra
                                                                                                         '#f
                                                                                                         '"invalid syntax"
                                                                                                         g$t$9959$Up9ra))))
                                                                                                  (g$syntax-dispatch$7356$Up9ra
                                                                                                    g$t$9959$Up9ra
                                                                                                    'any))))
                                                                                              g$t$9951$Up9ra))))
                                                                                        (g$syntax-dispatch$7356$Up9ra
                                                                                          g$t$9951$Up9ra
                                                                                          '(any any
                                                                                                .
                                                                                                any)))))
                                                                                    g$t$9945$Up9ra))))
                                                                              (g$syntax-dispatch$7356$Up9ra
                                                                                g$t$9945$Up9ra
                                                                                '(any each-any)))))
                                                                          g$t$9934$Up9ra))))
                                                                    (g$syntax-dispatch$7356$Up9ra
                                                                      g$t$9934$Up9ra
                                                                      '(any any
                                                                            any)))))
                                                                g$t$9922$Up9ra))))
                                                          (g$syntax-dispatch$7356$Up9ra
                                                            g$t$9922$Up9ra
                                                            '(any any
                                                                  .
                                                                  each-any)))))
                                                      g$t$9913$Up9ra))))
                                                (g$syntax-dispatch$7356$Up9ra
                                                  g$t$9913$Up9ra
                                                  '(any any . each-any)))))
                                            g$t$9898$Up9ra))))
                                      (g$syntax-dispatch$7356$Up9ra
                                        g$t$9898$Up9ra
                                        '(any any . #(each (any any)))))))
                                  g$t$9892$Up9ra))))
                            (g$syntax-dispatch$7356$Up9ra
                              g$t$9892$Up9ra
                              '(any . each-any)))))
                        g$spec$9891$Up9ra))))
                  (g$add-imports!$9879$Up9ra
                    (case-lambda
                      ((g$imp$9883$Up9ra g$h$9884$Up9ra)
                       ((case-lambda
                          ((g$subst$9885$Up9ra)
                           (for-each
                             (case-lambda
                               ((g$x$9886$Up9ra)
                                ((case-lambda
                                   ((g$name$9887$Up9ra g$label$9888$Up9ra)
                                    ((case-lambda
                                       ((g$t$9889$Up9ra)
                                        (if g$t$9889$Up9ra
                                          ((case-lambda
                                             ((g$l$9890$Up9ra)
                                              (if (eq? g$l$9890$Up9ra
                                                       g$label$9888$Up9ra)
                                                (void)
                                                (g$dup-error$9870$Up9ra
                                                  g$name$9887$Up9ra))))
                                           g$t$9889$Up9ra)
                                          (g$hashtable-set!$5162$Up9ra
                                            g$h$9884$Up9ra
                                            g$name$9887$Up9ra
                                            g$label$9888$Up9ra))))
                                     (g$hashtable-ref$5161$Up9ra
                                       g$h$9884$Up9ra
                                       g$name$9887$Up9ra
                                       '#f))))
                                 (car g$x$9886$Up9ra)
                                 (cdr g$x$9886$Up9ra))))
                             g$subst$9885$Up9ra)))
                        (g$get-import$9878$Up9ra g$imp$9883$Up9ra))))))
          ((letrec ((g$f$9880$Up9ra
                      (case-lambda
                        ((g$imp*$9881$Up9ra g$h$9882$Up9ra)
                         (if (null? g$imp*$9881$Up9ra)
                           (hashtable-entries g$h$9882$Up9ra)
                           (begin
                             (g$add-imports!$9879$Up9ra
                               (car g$imp*$9881$Up9ra)
                               g$h$9882$Up9ra)
                             (g$f$9880$Up9ra
                               (cdr g$imp*$9881$Up9ra)
                               g$h$9882$Up9ra)))))))
             g$f$9880$Up9ra)
           g$imp*$9868$Up9ra
           (g$make-eq-hashtable$5158$Up9ra))))))
   (g$make-top-rib$7406$Up9ra
     g$make-top-rib$10856$Up9ra
     (case-lambda
       ((g$names$10129$Up9ra g$labels$10130$Up9ra)
        ((case-lambda
           ((g$rib$10131$Up9ra)
            (begin
              (vector-for-each
                (case-lambda
                  ((g$name$10132$Up9ra g$label$10133$Up9ra)
                   (begin
                     (if (symbol? g$name$10132$Up9ra)
                       (void)
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$10132$Up9ra))
                     (g$extend-rib!$7042$Up9ra
                       g$rib$10131$Up9ra
                       (g$make-stx$7051$Up9ra
                         g$name$10132$Up9ra
                         g$top-mark*$7020$Up9ra
                         '()
                         '())
                       g$label$10133$Up9ra))))
                g$names$10129$Up9ra
                g$labels$10130$Up9ra)
              g$rib$10131$Up9ra)))
         (g$make-empty-rib$7041$Up9ra)))))
   (g$make-collector$7407$Up9ra
     g$make-collector$10857$Up9ra
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$10134$Up9ra)
            (case-lambda
              (() g$ls$10134$Up9ra)
              ((g$x$10135$Up9ra)
               (set! g$ls$10134$Up9ra
                 (g$set-cons$7017$Up9ra g$x$10135$Up9ra g$ls$10134$Up9ra))))))
         '()))))
   (g$inv-collector$7408$Up9ra
     g$inv-collector$10858$Up9ra
     (g$make-parameter$6346$Up9ra
       (case-lambda
         (g$args$10136$Up9ra
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10137$Up9ra)
          (begin
            (if (procedure? g$x$10137$Up9ra)
              (void)
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$10137$Up9ra))
            g$x$10137$Up9ra)))))
   (g$vis-collector$7409$Up9ra
     g$vis-collector$10859$Up9ra
     (g$make-parameter$6346$Up9ra
       (case-lambda
         (g$args$10138$Up9ra
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10139$Up9ra)
          (begin
            (if (procedure? g$x$10139$Up9ra)
              (void)
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$10139$Up9ra))
            g$x$10139$Up9ra)))))
   (g$imp-collector$7410$Up9ra
     g$imp-collector$10860$Up9ra
     (g$make-parameter$6346$Up9ra
       (case-lambda
         (g$args$10140$Up9ra
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10141$Up9ra)
          (begin
            (if (procedure? g$x$10141$Up9ra)
              (void)
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$10141$Up9ra))
            g$x$10141$Up9ra)))))
   (g$chi-library-internal$7411$Up9ra
     g$chi-library-internal$10861$Up9ra
     (case-lambda
       ((g$e*$10142$Up9ra g$rib$10143$Up9ra g$top?$10144$Up9ra)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7400$Up9ra
               g$e*$10142$Up9ra
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$10143$Up9ra
               g$top?$10144$Up9ra)))
          (case-lambda
            ((g$e*$10152$Up9ra
               g$r$10153$Up9ra
               g$mr$10154$Up9ra
               g$lex*$10155$Up9ra
               g$rhs*$10156$Up9ra
               g$mod**$10157$Up9ra
               g$_kwd*$10158$Up9ra)
             ((case-lambda
                ((g$_kwd*$10159$Up9ra
                   g$mod**$10160$Up9ra
                   g$rhs*$10161$Up9ra
                   g$lex*$10162$Up9ra
                   g$mr$10163$Up9ra
                   g$r$10164$Up9ra
                   g$e*$10165$Up9ra)
                 (values
                   (append
                     (apply append (reverse g$mod**$10160$Up9ra))
                     g$e*$10165$Up9ra)
                   g$r$10164$Up9ra
                   g$mr$10163$Up9ra
                   (reverse g$lex*$10162$Up9ra)
                   (reverse g$rhs*$10161$Up9ra))))
              g$_kwd*$10158$Up9ra
              g$mod**$10157$Up9ra
              g$rhs*$10156$Up9ra
              g$lex*$10155$Up9ra
              g$mr$10154$Up9ra
              g$r$10153$Up9ra
              g$e*$10152$Up9ra)))))))
   (g$chi-interaction-expr$7412$Up9ra
     g$chi-interaction-expr$10862$Up9ra
     (case-lambda
       ((g$e$10166$Up9ra g$rib$10167$Up9ra g$r$10168$Up9ra)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7400$Up9ra
               (list g$e$10166$Up9ra)
               g$r$10168$Up9ra
               g$r$10168$Up9ra
               '()
               '()
               '()
               '()
               g$rib$10167$Up9ra
               '#t)))
          (case-lambda
            ((g$e*$10176$Up9ra
               g$r$10177$Up9ra
               g$mr$10178$Up9ra
               g$lex*$10179$Up9ra
               g$rhs*$10180$Up9ra
               g$mod**$10181$Up9ra
               g$_kwd*$10182$Up9ra)
             ((case-lambda
                ((g$_kwd*$10183$Up9ra
                   g$mod**$10184$Up9ra
                   g$rhs*$10185$Up9ra
                   g$lex*$10186$Up9ra
                   g$mr$10187$Up9ra
                   g$r$10188$Up9ra
                   g$e*$10189$Up9ra)
                 ((case-lambda
                    ((g$e*$10190$Up9ra)
                     ((case-lambda
                        ((g$e$10191$Up9ra)
                         (values g$e$10191$Up9ra g$r$10188$Up9ra)))
                      (if (null? g$e*$10190$Up9ra)
                        (g$build-void$7013$Up9ra)
                        (if (null? (cdr g$e*$10190$Up9ra))
                          (car g$e*$10190$Up9ra)
                          (g$build-sequence$7012$Up9ra
                            '#f
                            g$e*$10190$Up9ra))))))
                  (g$expand-interaction-rhs*/init*$7381$Up9ra
                    (reverse g$lex*$10186$Up9ra)
                    (reverse g$rhs*$10185$Up9ra)
                    (append
                      (apply append (reverse g$mod**$10184$Up9ra))
                      g$e*$10189$Up9ra)
                    g$r$10188$Up9ra
                    g$mr$10187$Up9ra))))
              g$_kwd*$10182$Up9ra
              g$mod**$10181$Up9ra
              g$rhs*$10180$Up9ra
              g$lex*$10179$Up9ra
              g$mr$10178$Up9ra
              g$r$10177$Up9ra
              g$e*$10176$Up9ra)))))))
   (g$library-body-expander$7413$Up9ra
     g$library-body-expander$10863$Up9ra
     (case-lambda
       ((g$name$10192$Up9ra
          g$exp*$10193$Up9ra
          g$imp*$10194$Up9ra
          g$b*$10195$Up9ra
          g$top?$10196$Up9ra)
        (letrec* ((g$itc$10197$Up9ra (g$make-collector$7407$Up9ra)))
          ((case-lambda
             ((g$imp-collector$10202$Up9ra
                g$top-level-context$10203$Up9ra
                g$imp-collector$10204$Up9ra
                g$top-level-context$10205$Up9ra)
              ((case-lambda
                 ((g$swap$10206$Up9ra)
                  (dynamic-wind
                    g$swap$10206$Up9ra
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (() (g$parse-exports$7402$Up9ra g$exp*$10193$Up9ra)))
                         (case-lambda
                           ((g$exp-int*$10209$Up9ra g$exp-ext*$10210$Up9ra)
                            ((case-lambda
                               ((g$exp-ext*$10211$Up9ra g$exp-int*$10212$Up9ra)
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (g$parse-import-spec*$7405$Up9ra
                                       g$imp*$10194$Up9ra)))
                                  (case-lambda
                                    ((g$subst-names$10215$Up9ra
                                       g$subst-labels$10216$Up9ra)
                                     ((case-lambda
                                        ((g$subst-labels$10217$Up9ra
                                           g$subst-names$10218$Up9ra)
                                         ((case-lambda
                                            ((g$rib$10219$Up9ra)
                                             ((case-lambda
                                                ((g$b*$10220$Up9ra
                                                   g$rtc$10221$Up9ra
                                                   g$vtc$10222$Up9ra)
                                                 ((case-lambda
                                                    ((g$inv-collector$10227$Up9ra
                                                       g$vis-collector$10228$Up9ra
                                                       g$inv-collector$10229$Up9ra
                                                       g$vis-collector$10230$Up9ra)
                                                     ((case-lambda
                                                        ((g$swap$10231$Up9ra)
                                                         (dynamic-wind
                                                           g$swap$10231$Up9ra
                                                           (case-lambda
                                                             (()
                                                              (call-with-values
                                                                (case-lambda
                                                                  (()
                                                                   (g$chi-library-internal$7411$Up9ra
                                                                     g$b*$10220$Up9ra
                                                                     g$rib$10219$Up9ra
                                                                     g$top?$10196$Up9ra)))
                                                                (case-lambda
                                                                  ((g$init*$10237$Up9ra
                                                                     g$r$10238$Up9ra
                                                                     g$mr$10239$Up9ra
                                                                     g$lex*$10240$Up9ra
                                                                     g$rhs*$10241$Up9ra)
                                                                   ((case-lambda
                                                                      ((g$rhs*$10242$Up9ra
                                                                         g$lex*$10243$Up9ra
                                                                         g$mr$10244$Up9ra
                                                                         g$r$10245$Up9ra
                                                                         g$init*$10246$Up9ra)
                                                                       (begin
                                                                         (g$seal-rib!$7044$Up9ra
                                                                           g$rib$10219$Up9ra)
                                                                         ((case-lambda
                                                                            ((g$init*$10247$Up9ra)
                                                                             ((case-lambda
                                                                                ((g$rhs*$10248$Up9ra)
                                                                                 ((case-lambda
                                                                                    (()
                                                                                     (begin
                                                                                       (g$unseal-rib!$7045$Up9ra
                                                                                         g$rib$10219$Up9ra)
                                                                                       ((case-lambda
                                                                                          ((g$loc*$10249$Up9ra
                                                                                             g$export-subst$10250$Up9ra)
                                                                                           (letrec* ((g$errstr$10251$Up9ra
                                                                                                       '"attempt to export mutated variable"))
                                                                                             (call-with-values
                                                                                               (case-lambda
                                                                                                 (()
                                                                                                  (g$make-export-env/macros$7454$Up9ra
                                                                                                    g$lex*$10243$Up9ra
                                                                                                    g$loc*$10249$Up9ra
                                                                                                    g$r$10245$Up9ra)))
                                                                                               (case-lambda
                                                                                                 ((g$export-env$10255$Up9ra
                                                                                                    g$global*$10256$Up9ra
                                                                                                    g$macro*$10257$Up9ra)
                                                                                                  ((case-lambda
                                                                                                     ((g$macro*$10258$Up9ra
                                                                                                        g$global*$10259$Up9ra
                                                                                                        g$export-env$10260$Up9ra)
                                                                                                      (begin
                                                                                                        (for-each
                                                                                                          (case-lambda
                                                                                                            ((g$s$10261$Up9ra)
                                                                                                             ((case-lambda
                                                                                                                ((g$name$10262$Up9ra
                                                                                                                   g$label$10263$Up9ra)
                                                                                                                 ((case-lambda
                                                                                                                    ((g$p$10264$Up9ra)
                                                                                                                     (if g$p$10264$Up9ra
                                                                                                                       ((case-lambda
                                                                                                                          ((g$b$10265$Up9ra)
                                                                                                                           ((case-lambda
                                                                                                                              ((g$type$10266$Up9ra)
                                                                                                                               (if (eq? g$type$10266$Up9ra
                                                                                                                                        'mutable)
                                                                                                                                 (g$syntax-violation$7462$Up9ra
                                                                                                                                   'export
                                                                                                                                   g$errstr$10251$Up9ra
                                                                                                                                   g$name$10262$Up9ra)
                                                                                                                                 (void))))
                                                                                                                            (car g$b$10265$Up9ra))))
                                                                                                                        (cdr g$p$10264$Up9ra))
                                                                                                                       (void))))
                                                                                                                  (assq
                                                                                                                    g$label$10263$Up9ra
                                                                                                                    g$export-env$10260$Up9ra))))
                                                                                                              (car g$s$10261$Up9ra)
                                                                                                              (cdr g$s$10261$Up9ra))))
                                                                                                          g$export-subst$10250$Up9ra)
                                                                                                        ((case-lambda
                                                                                                           ((g$invoke-body$10267$Up9ra
                                                                                                              g$invoke-definitions$10268$Up9ra)
                                                                                                            (values
                                                                                                              (g$itc$10197$Up9ra)
                                                                                                              (g$rtc$10221$Up9ra)
                                                                                                              (g$vtc$10222$Up9ra)
                                                                                                              (g$build-sequence$7012$Up9ra
                                                                                                                '#f
                                                                                                                (append
                                                                                                                  g$invoke-definitions$10268$Up9ra
                                                                                                                  (list
                                                                                                                    g$invoke-body$10267$Up9ra)))
                                                                                                              g$macro*$10258$Up9ra
                                                                                                              g$export-subst$10250$Up9ra
                                                                                                              g$export-env$10260$Up9ra)))
                                                                                                         (g$build-library-letrec*$7016$Up9ra
                                                                                                           '#f
                                                                                                           g$name$10192$Up9ra
                                                                                                           g$lex*$10243$Up9ra
                                                                                                           g$loc*$10249$Up9ra
                                                                                                           g$rhs*$10248$Up9ra
                                                                                                           (if (null?
                                                                                                                 g$init*$10247$Up9ra)
                                                                                                             (g$build-void$7013$Up9ra)
                                                                                                             (g$build-sequence$7012$Up9ra
                                                                                                               '#f
                                                                                                               g$init*$10247$Up9ra)))
                                                                                                         (map g$build-global-define$7008$Up9ra
                                                                                                              (map cdr
                                                                                                                   g$global*$10259$Up9ra))))))
                                                                                                   g$macro*$10257$Up9ra
                                                                                                   g$global*$10256$Up9ra
                                                                                                   g$export-env$10255$Up9ra)))))))
                                                                                        (map g$gen-global$7023$Up9ra
                                                                                             g$lex*$10243$Up9ra)
                                                                                        (g$make-export-subst$7453$Up9ra
                                                                                          g$exp-int*$10212$Up9ra
                                                                                          g$exp-ext*$10211$Up9ra
                                                                                          g$rib$10219$Up9ra))))))))
                                                                              (g$chi-rhs*$7382$Up9ra
                                                                                g$rhs*$10242$Up9ra
                                                                                g$r$10245$Up9ra
                                                                                g$mr$10244$Up9ra))))
                                                                          (g$chi-expr*$7372$Up9ra
                                                                            g$init*$10246$Up9ra
                                                                            g$r$10245$Up9ra
                                                                            g$mr$10244$Up9ra)))))
                                                                    g$rhs*$10241$Up9ra
                                                                    g$lex*$10240$Up9ra
                                                                    g$mr$10239$Up9ra
                                                                    g$r$10238$Up9ra
                                                                    g$init*$10237$Up9ra))))))
                                                           g$swap$10231$Up9ra)))
                                                      (case-lambda
                                                        (()
                                                         (begin
                                                           ((case-lambda
                                                              ((g$t$10269$Up9ra)
                                                               (begin
                                                                 (g$inv-collector$10227$Up9ra
                                                                   g$inv-collector$10229$Up9ra)
                                                                 (set! g$inv-collector$10229$Up9ra
                                                                   g$t$10269$Up9ra))))
                                                            (g$inv-collector$10227$Up9ra))
                                                           ((case-lambda
                                                              ((g$t$10270$Up9ra)
                                                               (begin
                                                                 (g$vis-collector$10228$Up9ra
                                                                   g$vis-collector$10230$Up9ra)
                                                                 (set! g$vis-collector$10230$Up9ra
                                                                   g$t$10270$Up9ra))))
                                                            (g$vis-collector$10228$Up9ra))))))))
                                                  g$inv-collector$7408$Up9ra
                                                  g$vis-collector$7409$Up9ra
                                                  g$rtc$10221$Up9ra
                                                  g$vtc$10222$Up9ra)))
                                              (map (case-lambda
                                                     ((g$x$10271$Up9ra)
                                                      (g$make-stx$7051$Up9ra
                                                        g$x$10271$Up9ra
                                                        g$top-mark*$7020$Up9ra
                                                        (list g$rib$10219$Up9ra)
                                                        '())))
                                                   g$b*$10195$Up9ra)
                                              (g$make-collector$7407$Up9ra)
                                              (g$make-collector$7407$Up9ra))))
                                          (g$make-top-rib$7406$Up9ra
                                            g$subst-names$10218$Up9ra
                                            g$subst-labels$10217$Up9ra))))
                                      g$subst-labels$10216$Up9ra
                                      g$subst-names$10215$Up9ra))))))
                             g$exp-ext*$10210$Up9ra
                             g$exp-int*$10209$Up9ra))))))
                    g$swap$10206$Up9ra)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$10272$Up9ra)
                        (begin
                          (g$imp-collector$10202$Up9ra
                            g$imp-collector$10204$Up9ra)
                          (set! g$imp-collector$10204$Up9ra g$t$10272$Up9ra))))
                     (g$imp-collector$10202$Up9ra))
                    ((case-lambda
                       ((g$t$10273$Up9ra)
                        (begin
                          (g$top-level-context$10203$Up9ra
                            g$top-level-context$10205$Up9ra)
                          (set! g$top-level-context$10205$Up9ra
                            g$t$10273$Up9ra))))
                     (g$top-level-context$10203$Up9ra))))))))
           g$imp-collector$7410$Up9ra
           g$top-level-context$7469$Up9ra
           g$itc$10197$Up9ra
           '#f)))))
   (g$core-library-expander$7414$Up9ra
     g$core-library-expander$10864$Up9ra
     (case-lambda
       ((g$e$10274$Up9ra g$verify-name$10275$Up9ra)
        (call-with-values
          (case-lambda (() (g$parse-library$7404$Up9ra g$e$10274$Up9ra)))
          (case-lambda
            ((g$name*$10280$Up9ra
               g$exp*$10281$Up9ra
               g$imp*$10282$Up9ra
               g$b*$10283$Up9ra)
             ((case-lambda
                ((g$b*$10284$Up9ra
                   g$imp*$10285$Up9ra
                   g$exp*$10286$Up9ra
                   g$name*$10287$Up9ra)
                 (call-with-values
                   (case-lambda
                     (() (g$parse-library-name$7403$Up9ra g$name*$10287$Up9ra)))
                   (case-lambda
                     ((g$name$10290$Up9ra g$ver$10291$Up9ra)
                      ((case-lambda
                         ((g$ver$10292$Up9ra g$name$10293$Up9ra)
                          (begin
                            (g$verify-name$10275$Up9ra g$name$10293$Up9ra)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$7413$Up9ra
                                   g$name$10293$Up9ra
                                   g$exp*$10286$Up9ra
                                   g$imp*$10285$Up9ra
                                   g$b*$10284$Up9ra
                                   '#f)))
                              (case-lambda
                                ((g$imp*$10301$Up9ra
                                   g$invoke-req*$10302$Up9ra
                                   g$visit-req*$10303$Up9ra
                                   g$invoke-code$10304$Up9ra
                                   g$visit-code$10305$Up9ra
                                   g$export-subst$10306$Up9ra
                                   g$export-env$10307$Up9ra)
                                 ((case-lambda
                                    ((g$export-env$10308$Up9ra
                                       g$export-subst$10309$Up9ra
                                       g$visit-code$10310$Up9ra
                                       g$invoke-code$10311$Up9ra
                                       g$visit-req*$10312$Up9ra
                                       g$invoke-req*$10313$Up9ra
                                       g$imp*$10314$Up9ra)
                                     (values
                                       g$name$10293$Up9ra
                                       g$ver$10292$Up9ra
                                       g$imp*$10314$Up9ra
                                       g$invoke-req*$10313$Up9ra
                                       g$visit-req*$10312$Up9ra
                                       g$invoke-code$10311$Up9ra
                                       g$visit-code$10310$Up9ra
                                       g$export-subst$10309$Up9ra
                                       g$export-env$10308$Up9ra)))
                                  g$export-env$10307$Up9ra
                                  g$export-subst$10306$Up9ra
                                  g$visit-code$10305$Up9ra
                                  g$invoke-code$10304$Up9ra
                                  g$visit-req*$10303$Up9ra
                                  g$invoke-req*$10302$Up9ra
                                  g$imp*$10301$Up9ra)))))))
                       g$ver$10291$Up9ra
                       g$name$10290$Up9ra))))))
              g$b*$10283$Up9ra
              g$imp*$10282$Up9ra
              g$exp*$10281$Up9ra
              g$name*$10280$Up9ra)))))))
   (g$parse-top-level-program$7415$Up9ra
     g$parse-top-level-program$10865$Up9ra
     (case-lambda
       ((g$e*$10315$Up9ra)
        ((case-lambda
           ((g$t$10316$Up9ra)
            ((case-lambda
               ((g$ls/false$10317$Up9ra)
                (if (if g$ls/false$10317$Up9ra
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$10318$Up9ra
                               g$imp*$10319$Up9ra
                               g$b*$10320$Up9ra)
                             (eq? (g$syntax->datum$7465$Up9ra
                                    g$import$10318$Up9ra)
                                  'import)))
                          g$ls/false$10317$Up9ra))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$10321$Up9ra
                         g$imp*$10322$Up9ra
                         g$b*$10323$Up9ra)
                       (values g$imp*$10322$Up9ra g$b*$10323$Up9ra)))
                    g$ls/false$10317$Up9ra)
                  ((case-lambda
                     ((g$t$10324$Up9ra)
                      ((case-lambda
                         ((g$ls/false$10325$Up9ra)
                          (if (if g$ls/false$10325$Up9ra
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$10326$Up9ra
                                         g$x$10327$Up9ra
                                         g$y$10328$Up9ra)
                                       (eq? (g$syntax->datum$7465$Up9ra
                                              g$import$10326$Up9ra)
                                            'import)))
                                    g$ls/false$10325$Up9ra))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$10329$Up9ra
                                   g$x$10330$Up9ra
                                   g$y$10331$Up9ra)
                                 (g$syntax-violation$7462$Up9ra
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$7075$Up9ra g$e*$10315$Up9ra))))
                              g$ls/false$10325$Up9ra)
                            ((case-lambda
                               ((g$t$10332$Up9ra)
                                ((case-lambda
                                   ((g$ls/false$10333$Up9ra)
                                    (if g$ls/false$10333$Up9ra
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$10333$Up9ra)
                                      (g$syntax-violation$7462$Up9ra
                                        '#f
                                        '"invalid syntax"
                                        g$t$10332$Up9ra))))
                                 (g$syntax-dispatch$7356$Up9ra
                                   g$t$10332$Up9ra
                                   '_))))
                             g$t$10324$Up9ra))))
                       (g$syntax-dispatch$7356$Up9ra
                         g$t$10324$Up9ra
                         '((any . any) . any)))))
                   g$t$10316$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra
               g$t$10316$Up9ra
               '((any . each-any) . each-any)))))
         g$e*$10315$Up9ra))))
   (g$top-level-expander$7416$Up9ra
     g$top-level-expander$10866$Up9ra
     (case-lambda
       ((g$e*$10334$Up9ra)
        (call-with-values
          (case-lambda
            (() (g$parse-top-level-program$7415$Up9ra g$e*$10334$Up9ra)))
          (case-lambda
            ((g$imp*$10337$Up9ra g$b*$10338$Up9ra)
             ((case-lambda
                ((g$b*$10339$Up9ra g$imp*$10340$Up9ra)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$7413$Up9ra
                        '()
                        '()
                        g$imp*$10340$Up9ra
                        g$b*$10339$Up9ra
                        '#t)))
                   (case-lambda
                     ((g$imp*$10348$Up9ra
                        g$invoke-req*$10349$Up9ra
                        g$visit-req*$10350$Up9ra
                        g$invoke-code$10351$Up9ra
                        g$visit-code$10352$Up9ra
                        g$export-subst$10353$Up9ra
                        g$export-env$10354$Up9ra)
                      ((case-lambda
                         ((g$export-env$10355$Up9ra
                            g$export-subst$10356$Up9ra
                            g$visit-code$10357$Up9ra
                            g$invoke-code$10358$Up9ra
                            g$visit-req*$10359$Up9ra
                            g$invoke-req*$10360$Up9ra
                            g$imp*$10361$Up9ra)
                          (values
                            g$invoke-req*$10360$Up9ra
                            g$invoke-code$10358$Up9ra)))
                       g$export-env$10354$Up9ra
                       g$export-subst$10353$Up9ra
                       g$visit-code$10352$Up9ra
                       g$invoke-code$10351$Up9ra
                       g$visit-req*$10350$Up9ra
                       g$invoke-req*$10349$Up9ra
                       g$imp*$10348$Up9ra))))))
              g$b*$10338$Up9ra
              g$imp*$10337$Up9ra)))))))
   (g$8311$7417$Up9ra
     g$8311$10867$Up9ra
     (make-record-type-descriptor
       'env
       '#f
       'g$8314$Up9ra
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$8313$7418$Up9ra g$8313$10868$Up9ra '#f)
   (g$8312$7419$Up9ra
     g$8312$10869$Up9ra
     (make-record-constructor-descriptor
       g$8311$7417$Up9ra
       '#f
       g$8313$7418$Up9ra))
   (g$env?$7420$Up9ra
     g$env?$10870$Up9ra
     (record-predicate g$8311$7417$Up9ra))
   (g$make-env$7421$Up9ra
     g$make-env$10871$Up9ra
     (record-constructor g$8312$7419$Up9ra))
   (g$env-names$7422$Up9ra
     g$env-names$10872$Up9ra
     (record-accessor g$8311$7417$Up9ra '0))
   (g$env-labels$7423$Up9ra
     g$env-labels$10873$Up9ra
     (record-accessor g$8311$7417$Up9ra '1))
   (g$env-itc$7424$Up9ra
     g$env-itc$10874$Up9ra
     (record-accessor g$8311$7417$Up9ra '2))
   (g$set-env-names!$7425$Up9ra
     g$set-env-names!$10875$Up9ra
     (record-mutator g$8311$7417$Up9ra '0))
   (g$set-env-labels!$7426$Up9ra
     g$set-env-labels!$10876$Up9ra
     (record-mutator g$8311$7417$Up9ra '1))
   (g$set-env-itc!$7427$Up9ra
     g$set-env-itc!$10877$Up9ra
     (record-mutator g$8311$7417$Up9ra '2))
   (g$rp$7428$Up9ra
     g$rp$10878$Up9ra
     (make-record-printer
       'env
       (case-lambda
         ((g$x$10362$Up9ra g$p$10363$Up9ra)
          (display '"#<environment>" g$p$10363$Up9ra)))))
   (g$8330$7429$Up9ra
     g$8330$10879$Up9ra
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$8333$Up9ra
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$8332$7430$Up9ra g$8332$10880$Up9ra '#f)
   (g$8331$7431$Up9ra
     g$8331$10881$Up9ra
     (make-record-constructor-descriptor
       g$8330$7429$Up9ra
       '#f
       g$8332$7430$Up9ra))
   (g$interaction-env?$7432$Up9ra
     g$interaction-env?$10882$Up9ra
     (record-predicate g$8330$7429$Up9ra))
   (g$make-interaction-env$7433$Up9ra
     g$make-interaction-env$10883$Up9ra
     (record-constructor g$8331$7431$Up9ra))
   (g$interaction-env-rib$7434$Up9ra
     g$interaction-env-rib$10884$Up9ra
     (record-accessor g$8330$7429$Up9ra '0))
   (g$interaction-env-r$7435$Up9ra
     g$interaction-env-r$10885$Up9ra
     (record-accessor g$8330$7429$Up9ra '1))
   (g$interaction-env-locs$7436$Up9ra
     g$interaction-env-locs$10886$Up9ra
     (record-accessor g$8330$7429$Up9ra '2))
   (g$set-interaction-env-rib!$7437$Up9ra
     g$set-interaction-env-rib!$10887$Up9ra
     (record-mutator g$8330$7429$Up9ra '0))
   (g$set-interaction-env-r!$7438$Up9ra
     g$set-interaction-env-r!$10888$Up9ra
     (record-mutator g$8330$7429$Up9ra '1))
   (g$set-interaction-env-locs!$7439$Up9ra
     g$set-interaction-env-locs!$10889$Up9ra
     (record-mutator g$8330$7429$Up9ra '2))
   (g$rp$7440$Up9ra
     g$rp$10890$Up9ra
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$10364$Up9ra g$p$10365$Up9ra)
          (display '"#<environment>" g$p$10365$Up9ra)))))
   (g$interaction-environment-symbols$7441$Up9ra
     g$interaction-environment-symbols$10891$Up9ra
     (case-lambda
       (()
        (map (case-lambda ((g$x$10366$Up9ra) g$x$10366$Up9ra))
             (g$rib-sym*$7033$Up9ra
               (g$interaction-env-rib$7434$Up9ra
                 (g$interaction-environment$7468$Up9ra)))))))
   (g$environment-symbols$7442$Up9ra
     g$environment-symbols$10892$Up9ra
     (case-lambda
       ((g$e$10367$Up9ra)
        (vector->list (g$env-names$7422$Up9ra g$e$10367$Up9ra)))))
   (g$environment?$7443$Up9ra
     g$environment?$10893$Up9ra
     (case-lambda
       ((g$x$10368$Up9ra)
        ((case-lambda
           ((g$t$10369$Up9ra)
            (if g$t$10369$Up9ra
              g$t$10369$Up9ra
              (begin '#f (g$interaction-env?$7432$Up9ra g$x$10368$Up9ra)))))
         (g$env?$7420$Up9ra g$x$10368$Up9ra)))))
   (g$environment$7444$Up9ra
     g$environment$10894$Up9ra
     (case-lambda
       (g$imp*$10370$Up9ra
        ((case-lambda
           ((g$itc$10371$Up9ra)
            ((case-lambda
               ((g$imp-collector$10374$Up9ra g$imp-collector$10375$Up9ra)
                ((case-lambda
                   ((g$swap$10376$Up9ra)
                    (dynamic-wind
                      g$swap$10376$Up9ra
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$7405$Up9ra
                                g$imp*$10370$Up9ra)))
                           (case-lambda
                             ((g$subst-names$10379$Up9ra
                                g$subst-labels$10380$Up9ra)
                              ((case-lambda
                                 ((g$subst-labels$10381$Up9ra
                                    g$subst-names$10382$Up9ra)
                                  (g$make-env$7421$Up9ra
                                    g$subst-names$10382$Up9ra
                                    g$subst-labels$10381$Up9ra
                                    g$itc$10371$Up9ra)))
                               g$subst-labels$10380$Up9ra
                               g$subst-names$10379$Up9ra))))))
                      g$swap$10376$Up9ra)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$10383$Up9ra)
                        (begin
                          (g$imp-collector$10374$Up9ra
                            g$imp-collector$10375$Up9ra)
                          (set! g$imp-collector$10375$Up9ra g$t$10383$Up9ra))))
                     (g$imp-collector$10374$Up9ra)))))))
             g$imp-collector$7410$Up9ra
             g$itc$10371$Up9ra)))
         (g$make-collector$7407$Up9ra)))))
   (g$null-environment$7445$Up9ra
     g$null-environment$10895$Up9ra
     (case-lambda
       ((g$n$10384$Up9ra)
        (begin
          (if (eqv? g$n$10384$Up9ra '5)
            (void)
            (assertion-violation 'null-environment '"not 5" g$n$10384$Up9ra))
          (g$environment$7444$Up9ra '(psyntax null-environment-5))))))
   (g$scheme-report-environment$7446$Up9ra
     g$scheme-report-environment$10896$Up9ra
     (case-lambda
       ((g$n$10385$Up9ra)
        (begin
          (if (eqv? g$n$10385$Up9ra '5)
            (void)
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$10385$Up9ra))
          (g$environment$7444$Up9ra '(psyntax scheme-report-environment-5))))))
   (g$expand$7447$Up9ra
     g$expand$10897$Up9ra
     (case-lambda
       ((g$x$10386$Up9ra g$env$10387$Up9ra)
        (if (g$env?$7420$Up9ra g$env$10387$Up9ra)
          ((case-lambda
             ((g$rib$10388$Up9ra)
              ((case-lambda
                 ((g$x$10389$Up9ra
                    g$itc$10390$Up9ra
                    g$rtc$10391$Up9ra
                    g$vtc$10392$Up9ra)
                  ((case-lambda
                     ((g$x$10393$Up9ra)
                      (begin
                        (g$seal-rib!$7044$Up9ra g$rib$10388$Up9ra)
                        (values g$x$10393$Up9ra (g$rtc$10391$Up9ra)))))
                   ((case-lambda
                      ((g$inv-collector$10400$Up9ra
                         g$vis-collector$10401$Up9ra
                         g$imp-collector$10402$Up9ra
                         g$inv-collector$10403$Up9ra
                         g$vis-collector$10404$Up9ra
                         g$imp-collector$10405$Up9ra)
                       ((case-lambda
                          ((g$swap$10406$Up9ra)
                           (dynamic-wind
                             g$swap$10406$Up9ra
                             (case-lambda
                               (()
                                (g$chi-expr$7374$Up9ra
                                  g$x$10389$Up9ra
                                  '()
                                  '())))
                             g$swap$10406$Up9ra)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$10407$Up9ra)
                                 (begin
                                   (g$inv-collector$10400$Up9ra
                                     g$inv-collector$10403$Up9ra)
                                   (set! g$inv-collector$10403$Up9ra
                                     g$t$10407$Up9ra))))
                              (g$inv-collector$10400$Up9ra))
                             ((case-lambda
                                ((g$t$10408$Up9ra)
                                 (begin
                                   (g$vis-collector$10401$Up9ra
                                     g$vis-collector$10404$Up9ra)
                                   (set! g$vis-collector$10404$Up9ra
                                     g$t$10408$Up9ra))))
                              (g$vis-collector$10401$Up9ra))
                             ((case-lambda
                                ((g$t$10409$Up9ra)
                                 (begin
                                   (g$imp-collector$10402$Up9ra
                                     g$imp-collector$10405$Up9ra)
                                   (set! g$imp-collector$10405$Up9ra
                                     g$t$10409$Up9ra))))
                              (g$imp-collector$10402$Up9ra))))))))
                    g$inv-collector$7408$Up9ra
                    g$vis-collector$7409$Up9ra
                    g$imp-collector$7410$Up9ra
                    g$rtc$10391$Up9ra
                    g$vtc$10392$Up9ra
                    g$itc$10390$Up9ra))))
               (g$make-stx$7051$Up9ra
                 g$x$10386$Up9ra
                 g$top-mark*$7020$Up9ra
                 (list g$rib$10388$Up9ra)
                 '())
               (g$env-itc$7424$Up9ra g$env$10387$Up9ra)
               (g$make-collector$7407$Up9ra)
               (g$make-collector$7407$Up9ra))))
           (g$make-top-rib$7406$Up9ra
             (g$env-names$7422$Up9ra g$env$10387$Up9ra)
             (g$env-labels$7423$Up9ra g$env$10387$Up9ra)))
          (if (g$interaction-env?$7432$Up9ra g$env$10387$Up9ra)
            ((case-lambda
               ((g$rib$10410$Up9ra g$r$10411$Up9ra g$rtc$10412$Up9ra)
                ((case-lambda
                   ((g$x$10413$Up9ra)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$10424$Up9ra
                               g$inv-collector$10425$Up9ra
                               g$vis-collector$10426$Up9ra
                               g$imp-collector$10427$Up9ra
                               g$top-level-context$10428$Up9ra
                               g$inv-collector$10429$Up9ra
                               g$vis-collector$10430$Up9ra
                               g$imp-collector$10431$Up9ra)
                             ((case-lambda
                                ((g$swap$10432$Up9ra)
                                 (dynamic-wind
                                   g$swap$10432$Up9ra
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$7412$Up9ra
                                        g$x$10413$Up9ra
                                        g$rib$10410$Up9ra
                                        g$r$10411$Up9ra)))
                                   g$swap$10432$Up9ra)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$10433$Up9ra)
                                       (begin
                                         (g$top-level-context$10424$Up9ra
                                           g$top-level-context$10428$Up9ra)
                                         (set! g$top-level-context$10428$Up9ra
                                           g$t$10433$Up9ra))))
                                    (g$top-level-context$10424$Up9ra))
                                   ((case-lambda
                                      ((g$t$10434$Up9ra)
                                       (begin
                                         (g$inv-collector$10425$Up9ra
                                           g$inv-collector$10429$Up9ra)
                                         (set! g$inv-collector$10429$Up9ra
                                           g$t$10434$Up9ra))))
                                    (g$inv-collector$10425$Up9ra))
                                   ((case-lambda
                                      ((g$t$10435$Up9ra)
                                       (begin
                                         (g$vis-collector$10426$Up9ra
                                           g$vis-collector$10430$Up9ra)
                                         (set! g$vis-collector$10430$Up9ra
                                           g$t$10435$Up9ra))))
                                    (g$vis-collector$10426$Up9ra))
                                   ((case-lambda
                                      ((g$t$10436$Up9ra)
                                       (begin
                                         (g$imp-collector$10427$Up9ra
                                           g$imp-collector$10431$Up9ra)
                                         (set! g$imp-collector$10431$Up9ra
                                           g$t$10436$Up9ra))))
                                    (g$imp-collector$10427$Up9ra))))))))
                          g$top-level-context$7469$Up9ra
                          g$inv-collector$7408$Up9ra
                          g$vis-collector$7409$Up9ra
                          g$imp-collector$7410$Up9ra
                          g$env$10387$Up9ra
                          g$rtc$10412$Up9ra
                          (g$make-collector$7407$Up9ra)
                          (g$make-collector$7407$Up9ra))))
                      (case-lambda
                        ((g$e$10437$Up9ra g$r^$10438$Up9ra)
                         ((case-lambda
                            ((g$r^$10439$Up9ra g$e$10440$Up9ra)
                             (begin
                               (g$set-interaction-env-r!$7438$Up9ra
                                 g$env$10387$Up9ra
                                 g$r^$10439$Up9ra)
                               (values g$e$10440$Up9ra (g$rtc$10412$Up9ra)))))
                          g$r^$10438$Up9ra
                          g$e$10437$Up9ra))))))
                 (g$make-stx$7051$Up9ra
                   g$x$10386$Up9ra
                   g$top-mark*$7020$Up9ra
                   (list g$rib$10410$Up9ra)
                   '()))))
             (g$interaction-env-rib$7434$Up9ra g$env$10387$Up9ra)
             (g$interaction-env-r$7435$Up9ra g$env$10387$Up9ra)
             (g$make-collector$7407$Up9ra))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$10387$Up9ra))))))
   (g$eval$7448$Up9ra
     g$eval$10898$Up9ra
     (case-lambda
       ((g$x$10441$Up9ra g$env$10442$Up9ra)
        (begin
          (if (g$environment?$7443$Up9ra g$env$10442$Up9ra)
            (void)
            (error 'eval '"not an environment" g$env$10442$Up9ra))
          (call-with-values
            (case-lambda
              (() (g$expand$7447$Up9ra g$x$10441$Up9ra g$env$10442$Up9ra)))
            (case-lambda
              ((g$x$10445$Up9ra g$invoke-req*$10446$Up9ra)
               ((case-lambda
                  ((g$invoke-req*$10447$Up9ra g$x$10448$Up9ra)
                   (begin
                     (for-each
                       g$invoke-library$6893$Up9ra
                       g$invoke-req*$10447$Up9ra)
                     (eval-core
                       (g$expanded->core$6592$Up9ra g$x$10448$Up9ra)))))
                g$invoke-req*$10446$Up9ra
                g$x$10445$Up9ra))))))))
   (g$library-expander$7449$Up9ra
     g$library-expander$10899$Up9ra
     (case-lambda
       ((g$x$10449$Up9ra g$filename$10450$Up9ra g$verify-name$10451$Up9ra)
        (letrec* ((g$build-visit-code$10452$Up9ra
                    (case-lambda
                      ((g$macro*$10495$Up9ra)
                       (if (null? g$macro*$10495$Up9ra)
                         (g$build-void$7013$Up9ra)
                         (g$build-sequence$7012$Up9ra
                           '#f
                           (map (case-lambda
                                  ((g$x$10496$Up9ra)
                                   ((case-lambda
                                      ((g$loc$10497$Up9ra g$src$10498$Up9ra)
                                       (list
                                         'set!
                                         g$loc$10497$Up9ra
                                         g$src$10498$Up9ra)))
                                    (car g$x$10496$Up9ra)
                                    (g$cddr$4898$Up9ra g$x$10496$Up9ra))))
                                g$macro*$10495$Up9ra))))))
                  (g$visit!$10453$Up9ra
                    (case-lambda
                      ((g$macro*$10491$Up9ra)
                       (for-each
                         (case-lambda
                           ((g$x$10492$Up9ra)
                            ((case-lambda
                               ((g$loc$10493$Up9ra g$proc$10494$Up9ra)
                                (set-symbol-value!
                                  g$loc$10493$Up9ra
                                  g$proc$10494$Up9ra)))
                             (car g$x$10492$Up9ra)
                             (g$cadr$4896$Up9ra g$x$10492$Up9ra))))
                         g$macro*$10491$Up9ra)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$7414$Up9ra
                 g$x$10449$Up9ra
                 g$verify-name$10451$Up9ra)))
            (case-lambda
              ((g$name$10463$Up9ra
                 g$ver$10464$Up9ra
                 g$imp*$10465$Up9ra
                 g$inv*$10466$Up9ra
                 g$vis*$10467$Up9ra
                 g$invoke-code$10468$Up9ra
                 g$macro*$10469$Up9ra
                 g$export-subst$10470$Up9ra
                 g$export-env$10471$Up9ra)
               ((case-lambda
                  ((g$export-env$10472$Up9ra
                     g$export-subst$10473$Up9ra
                     g$macro*$10474$Up9ra
                     g$invoke-code$10475$Up9ra
                     g$vis*$10476$Up9ra
                     g$inv*$10477$Up9ra
                     g$imp*$10478$Up9ra
                     g$ver$10479$Up9ra
                     g$name$10480$Up9ra)
                   ((case-lambda
                      ((g$id$10481$Up9ra
                         g$name$10482$Up9ra
                         g$ver$10483$Up9ra
                         g$imp*$10484$Up9ra
                         g$vis*$10485$Up9ra
                         g$inv*$10486$Up9ra
                         g$visit-proc$10487$Up9ra
                         g$invoke-proc$10488$Up9ra
                         g$visit-code$10489$Up9ra
                         g$invoke-code$10490$Up9ra)
                       (begin
                         (g$install-library$6891$Up9ra
                           g$id$10481$Up9ra
                           g$name$10482$Up9ra
                           g$ver$10483$Up9ra
                           g$imp*$10484$Up9ra
                           g$vis*$10485$Up9ra
                           g$inv*$10486$Up9ra
                           g$export-subst$10473$Up9ra
                           g$export-env$10472$Up9ra
                           g$visit-proc$10487$Up9ra
                           g$invoke-proc$10488$Up9ra
                           g$visit-code$10489$Up9ra
                           g$invoke-code$10490$Up9ra
                           '#t
                           g$filename$10450$Up9ra)
                         (values
                           g$id$10481$Up9ra
                           g$name$10482$Up9ra
                           g$ver$10483$Up9ra
                           g$imp*$10484$Up9ra
                           g$vis*$10485$Up9ra
                           g$inv*$10486$Up9ra
                           g$invoke-code$10490$Up9ra
                           g$visit-code$10489$Up9ra
                           g$export-subst$10473$Up9ra
                           g$export-env$10472$Up9ra))))
                    (gensym)
                    g$name$10480$Up9ra
                    g$ver$10479$Up9ra
                    (map g$library-spec$6897$Up9ra g$imp*$10478$Up9ra)
                    (map g$library-spec$6897$Up9ra g$vis*$10476$Up9ra)
                    (map g$library-spec$6897$Up9ra g$inv*$10477$Up9ra)
                    (case-lambda
                      (() (g$visit!$10453$Up9ra g$macro*$10474$Up9ra)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$6592$Up9ra
                           g$invoke-code$10475$Up9ra))))
                    (g$build-visit-code$10452$Up9ra g$macro*$10474$Up9ra)
                    g$invoke-code$10475$Up9ra)))
                g$export-env$10471$Up9ra
                g$export-subst$10470$Up9ra
                g$macro*$10469$Up9ra
                g$invoke-code$10468$Up9ra
                g$vis*$10467$Up9ra
                g$inv*$10466$Up9ra
                g$imp*$10465$Up9ra
                g$ver$10464$Up9ra
                g$name$10463$Up9ra))))))
       ((g$x$10499$Up9ra g$filename$10500$Up9ra)
        (g$library-expander$7449$Up9ra
          g$x$10499$Up9ra
          g$filename$10500$Up9ra
          (case-lambda ((g$x$10501$Up9ra) (values)))))
       ((g$x$10502$Up9ra)
        (g$library-expander$7449$Up9ra
          g$x$10502$Up9ra
          '#f
          (case-lambda ((g$x$10503$Up9ra) (values)))))))
   (g$boot-library-expand$7450$Up9ra
     g$boot-library-expand$10900$Up9ra
     (case-lambda
       ((g$x$10504$Up9ra)
        (call-with-values
          (case-lambda (() (g$library-expander$7449$Up9ra g$x$10504$Up9ra)))
          (case-lambda
            ((g$id$10515$Up9ra
               g$name$10516$Up9ra
               g$ver$10517$Up9ra
               g$imp*$10518$Up9ra
               g$vis*$10519$Up9ra
               g$inv*$10520$Up9ra
               g$invoke-code$10521$Up9ra
               g$visit-code$10522$Up9ra
               g$export-subst$10523$Up9ra
               g$export-env$10524$Up9ra)
             ((case-lambda
                ((g$export-env$10525$Up9ra
                   g$export-subst$10526$Up9ra
                   g$visit-code$10527$Up9ra
                   g$invoke-code$10528$Up9ra
                   g$inv*$10529$Up9ra
                   g$vis*$10530$Up9ra
                   g$imp*$10531$Up9ra
                   g$ver$10532$Up9ra
                   g$name$10533$Up9ra
                   g$id$10534$Up9ra)
                 (values
                   g$name$10533$Up9ra
                   g$invoke-code$10528$Up9ra
                   g$export-subst$10526$Up9ra
                   g$export-env$10525$Up9ra)))
              g$export-env$10524$Up9ra
              g$export-subst$10523$Up9ra
              g$visit-code$10522$Up9ra
              g$invoke-code$10521$Up9ra
              g$inv*$10520$Up9ra
              g$vis*$10519$Up9ra
              g$imp*$10518$Up9ra
              g$ver$10517$Up9ra
              g$name$10516$Up9ra
              g$id$10515$Up9ra)))))))
   (g$rev-map-append$7451$Up9ra
     g$rev-map-append$10901$Up9ra
     (case-lambda
       ((g$f$10535$Up9ra g$ls$10536$Up9ra g$ac$10537$Up9ra)
        (if (null? g$ls$10536$Up9ra)
          g$ac$10537$Up9ra
          (g$rev-map-append$7451$Up9ra
            g$f$10535$Up9ra
            (cdr g$ls$10536$Up9ra)
            (cons
              (g$f$10535$Up9ra (car g$ls$10536$Up9ra))
              g$ac$10537$Up9ra))))))
   (g$build-exports$7452$Up9ra
     g$build-exports$10902$Up9ra
     (case-lambda
       ((g$lex*+loc*$10538$Up9ra g$init*$10539$Up9ra)
        (g$build-sequence$7012$Up9ra
          '#f
          (cons
            (g$build-void$7013$Up9ra)
            (g$rev-map-append$7451$Up9ra
              (case-lambda
                ((g$x$10540$Up9ra)
                 (list 'set! (cdr g$x$10540$Up9ra) (car g$x$10540$Up9ra))))
              g$lex*+loc*$10538$Up9ra
              g$init*$10539$Up9ra))))))
   (g$make-export-subst$7453$Up9ra
     g$make-export-subst$10903$Up9ra
     (case-lambda
       ((g$int*$10541$Up9ra g$ext*$10542$Up9ra g$rib$10543$Up9ra)
        (map (case-lambda
               ((g$int$10544$Up9ra g$ext$10545$Up9ra)
                ((case-lambda
                   ((g$id$10546$Up9ra)
                    ((case-lambda
                       ((g$label$10547$Up9ra)
                        ((case-lambda
                           (()
                            (begin
                              (if g$label$10547$Up9ra
                                (void)
                                (g$syntax-violation$7462$Up9ra
                                  '#f
                                  '"cannot export unbound identifier"
                                  g$id$10546$Up9ra))
                              (cons g$ext$10545$Up9ra g$label$10547$Up9ra)))))))
                     (g$id->label$7091$Up9ra g$id$10546$Up9ra))))
                 (g$make-stx$7051$Up9ra
                   g$int$10544$Up9ra
                   g$top-mark*$7020$Up9ra
                   (list g$rib$10543$Up9ra)
                   '()))))
             g$int*$10541$Up9ra
             g$ext*$10542$Up9ra))))
   (g$make-export-env/macros$7454$Up9ra
     g$make-export-env/macros$10904$Up9ra
     (case-lambda
       ((g$lex*$10548$Up9ra g$loc*$10549$Up9ra g$r$10550$Up9ra)
        (letrec* ((g$lookup$10551$Up9ra
                    (case-lambda
                      ((g$x$10566$Up9ra)
                       ((letrec ((g$f$10567$Up9ra
                                   (case-lambda
                                     ((g$x$10568$Up9ra
                                        g$lex*$10569$Up9ra
                                        g$loc*$10570$Up9ra)
                                      (if (pair? g$lex*$10569$Up9ra)
                                        (if (eq? g$x$10568$Up9ra
                                                 (car g$lex*$10569$Up9ra))
                                          (car g$loc*$10570$Up9ra)
                                          (g$f$10567$Up9ra
                                            g$x$10568$Up9ra
                                            (cdr g$lex*$10569$Up9ra)
                                            (cdr g$loc*$10570$Up9ra)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$10567$Up9ra)
                        g$x$10566$Up9ra
                        g$lex*$10548$Up9ra
                        g$loc*$10549$Up9ra)))))
          ((letrec ((g$f$10552$Up9ra
                      (case-lambda
                        ((g$r$10553$Up9ra
                           g$env$10554$Up9ra
                           g$global*$10555$Up9ra
                           g$macro*$10556$Up9ra)
                         (if (null? g$r$10553$Up9ra)
                           (values
                             g$env$10554$Up9ra
                             g$global*$10555$Up9ra
                             g$macro*$10556$Up9ra)
                           ((case-lambda
                              ((g$x$10557$Up9ra)
                               ((case-lambda
                                  ((g$label$10558$Up9ra g$b$10559$Up9ra)
                                   ((case-lambda
                                      ((g$t$10560$Up9ra)
                                       (if (eqv? g$t$10560$Up9ra 'lexical)
                                         ((case-lambda
                                            ((g$v$10563$Up9ra)
                                             ((case-lambda
                                                ((g$loc$10564$Up9ra
                                                   g$type$10565$Up9ra)
                                                 (g$f$10552$Up9ra
                                                   (cdr g$r$10553$Up9ra)
                                                   (cons
                                                     (g$cons*$5367$Up9ra
                                                       g$label$10558$Up9ra
                                                       g$type$10565$Up9ra
                                                       g$loc$10564$Up9ra)
                                                     g$env$10554$Up9ra)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$7300$Up9ra
                                                         g$v$10563$Up9ra)
                                                       g$loc$10564$Up9ra)
                                                     g$global*$10555$Up9ra)
                                                   g$macro*$10556$Up9ra)))
                                              (g$lookup$10551$Up9ra
                                                (g$lexical-var$7300$Up9ra
                                                  g$v$10563$Up9ra))
                                              (if (g$lexical-mutable?$7301$Up9ra
                                                    g$v$10563$Up9ra)
                                                'mutable
                                                'global))))
                                          (g$binding-value$7096$Up9ra
                                            g$b$10559$Up9ra))
                                         (if (eqv? g$t$10560$Up9ra 'local-macro)
                                           ((case-lambda
                                              ((g$loc$10562$Up9ra)
                                               (g$f$10552$Up9ra
                                                 (cdr g$r$10553$Up9ra)
                                                 (cons
                                                   (g$cons*$5367$Up9ra
                                                     g$label$10558$Up9ra
                                                     'global-macro
                                                     g$loc$10562$Up9ra)
                                                   g$env$10554$Up9ra)
                                                 g$global*$10555$Up9ra
                                                 (cons
                                                   (cons
                                                     g$loc$10562$Up9ra
                                                     (g$binding-value$7096$Up9ra
                                                       g$b$10559$Up9ra))
                                                   g$macro*$10556$Up9ra))))
                                            (gensym))
                                           (if (eqv?
                                                 g$t$10560$Up9ra
                                                 'local-macro!)
                                             ((case-lambda
                                                ((g$loc$10561$Up9ra)
                                                 (g$f$10552$Up9ra
                                                   (cdr g$r$10553$Up9ra)
                                                   (cons
                                                     (g$cons*$5367$Up9ra
                                                       g$label$10558$Up9ra
                                                       'global-macro!
                                                       g$loc$10561$Up9ra)
                                                     g$env$10554$Up9ra)
                                                   g$global*$10555$Up9ra
                                                   (cons
                                                     (cons
                                                       g$loc$10561$Up9ra
                                                       (g$binding-value$7096$Up9ra
                                                         g$b$10559$Up9ra))
                                                     g$macro*$10556$Up9ra))))
                                              (gensym))
                                             (if (memv
                                                   g$t$10560$Up9ra
                                                   '($rtd $module))
                                               (g$f$10552$Up9ra
                                                 (cdr g$r$10553$Up9ra)
                                                 (cons
                                                   g$x$10557$Up9ra
                                                   g$env$10554$Up9ra)
                                                 g$global*$10555$Up9ra
                                                 g$macro*$10556$Up9ra)
                                               (assertion-violation
                                                 'expander
                                                 '"BUG: do not know how to export"
                                                 (g$binding-type$7095$Up9ra
                                                   g$b$10559$Up9ra)
                                                 (g$binding-value$7096$Up9ra
                                                   g$b$10559$Up9ra))))))))
                                    (g$binding-type$7095$Up9ra
                                      g$b$10559$Up9ra))))
                                (car g$x$10557$Up9ra)
                                (cdr g$x$10557$Up9ra))))
                            (car g$r$10553$Up9ra)))))))
             g$f$10552$Up9ra)
           g$r$10550$Up9ra
           '()
           '()
           '())))))
   (g$generate-temporaries$7455$Up9ra
     g$generate-temporaries$10905$Up9ra
     (case-lambda
       ((g$ls$10571$Up9ra)
        ((case-lambda
           ((g$t$10572$Up9ra)
            ((case-lambda
               ((g$ls/false$10573$Up9ra)
                (if g$ls/false$10573$Up9ra
                  (apply
                    (case-lambda
                      ((g$ls$10574$Up9ra)
                       (map (case-lambda
                              ((g$x$10575$Up9ra)
                               (g$make-stx$7051$Up9ra
                                 ((case-lambda
                                    ((g$x$10576$Up9ra)
                                     (if ((case-lambda
                                            ((g$t$10577$Up9ra)
                                             (if g$t$10577$Up9ra
                                               g$t$10577$Up9ra
                                               (begin
                                                 '#f
                                                 (string? g$x$10576$Up9ra)))))
                                          (symbol? g$x$10576$Up9ra))
                                       (gensym g$x$10576$Up9ra)
                                       (gensym 't))))
                                  (g$syntax->datum$7465$Up9ra g$x$10575$Up9ra))
                                 g$top-mark*$7020$Up9ra
                                 '()
                                 '())))
                            g$ls$10574$Up9ra)))
                    g$ls/false$10573$Up9ra)
                  ((case-lambda
                     ((g$t$10578$Up9ra)
                      ((case-lambda
                         ((g$ls/false$10579$Up9ra)
                          (if g$ls/false$10579$Up9ra
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$10579$Up9ra)
                            (g$syntax-violation$7462$Up9ra
                              '#f
                              '"invalid syntax"
                              g$t$10578$Up9ra))))
                       (g$syntax-dispatch$7356$Up9ra g$t$10578$Up9ra '_))))
                   g$t$10572$Up9ra))))
             (g$syntax-dispatch$7356$Up9ra g$t$10572$Up9ra 'each-any))))
         g$ls$10571$Up9ra))))
   (g$free-identifier=?$7456$Up9ra
     g$free-identifier=?$10906$Up9ra
     (case-lambda
       ((g$x$10580$Up9ra g$y$10581$Up9ra)
        (if (g$id?$7078$Up9ra g$x$10580$Up9ra)
          (if (g$id?$7078$Up9ra g$y$10581$Up9ra)
            (g$free-id=?$7082$Up9ra g$x$10580$Up9ra g$y$10581$Up9ra)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$10581$Up9ra))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$10580$Up9ra)))))
   (g$bound-identifier=?$7457$Up9ra
     g$bound-identifier=?$10907$Up9ra
     (case-lambda
       ((g$x$10582$Up9ra g$y$10583$Up9ra)
        (if (g$id?$7078$Up9ra g$x$10582$Up9ra)
          (if (g$id?$7078$Up9ra g$y$10583$Up9ra)
            (g$bound-id=?$7081$Up9ra g$x$10582$Up9ra g$y$10583$Up9ra)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$10583$Up9ra))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$10582$Up9ra)))))
   (g$extract-position-condition$7458$Up9ra
     g$extract-position-condition$10908$Up9ra
     (case-lambda
       ((g$x$10584$Up9ra)
        (letrec* ((g$11212$10585$Up9ra
                    (make-record-type-descriptor
                      '&source-information
                      &condition-rtd
                      'g$11215$Up9ra
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$11214$10586$Up9ra '#f)
                  (g$11213$10587$Up9ra
                    (make-record-constructor-descriptor
                      g$11212$10585$Up9ra
                      &condition-rcd
                      g$11214$10586$Up9ra))
                  (g$11211$10588$Up9ra (record-predicate g$11212$10585$Up9ra))
                  (g$make-source-condition$10589$Up9ra
                    (record-constructor g$11213$10587$Up9ra))
                  (g$11209$10590$Up9ra (record-accessor g$11212$10585$Up9ra '0))
                  (g$11210$10591$Up9ra (record-accessor g$11212$10585$Up9ra '1))
                  (g$source-condition?$10592$Up9ra
                    (condition-predicate g$11212$10585$Up9ra))
                  (g$source-filename$10593$Up9ra
                    (condition-accessor
                      g$11212$10585$Up9ra
                      g$11209$10590$Up9ra))
                  (g$source-character$10594$Up9ra
                    (condition-accessor
                      g$11212$10585$Up9ra
                      g$11210$10591$Up9ra)))
          (if (g$stx?$7050$Up9ra g$x$10584$Up9ra)
            ((case-lambda
               ((g$x$10595$Up9ra)
                (if (annotation? g$x$10595$Up9ra)
                  ((case-lambda
                     ((g$src$10596$Up9ra)
                      (if (pair? g$src$10596$Up9ra)
                        (g$make-source-condition$10589$Up9ra
                          (car g$src$10596$Up9ra)
                          (cdr g$src$10596$Up9ra))
                        (condition))))
                   (annotation-source g$x$10595$Up9ra))
                  (condition))))
             (g$stx-expr$7052$Up9ra g$x$10584$Up9ra))
            (condition))))))
   (g$syntax-error$7459$Up9ra
     g$syntax-error$10909$Up9ra
     (case-lambda
       ((g$x$10597$Up9ra . g$args$10598$Up9ra)
        (begin
          (if (g$for-all$5365$Up9ra string? g$args$10598$Up9ra)
            (void)
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$10598$Up9ra))
          (raise
            (condition
              (g$make-message-condition$5619$Up9ra
                (if (null? g$args$10598$Up9ra)
                  '"invalid syntax"
                  (apply string-append g$args$10598$Up9ra)))
              (g$make-syntax-violation$5691$Up9ra
                (g$syntax->datum$7465$Up9ra g$x$10597$Up9ra)
                '#f)
              (g$extract-position-condition$7458$Up9ra g$x$10597$Up9ra)
              (g$extract-trace$7460$Up9ra g$x$10597$Up9ra)))))))
   (g$extract-trace$7460$Up9ra
     g$extract-trace$10910$Up9ra
     (case-lambda
       ((g$x$10599$Up9ra)
        (letrec* ((g$11236$10600$Up9ra
                    (make-record-type-descriptor
                      '&trace
                      &condition-rtd
                      'g$11239$Up9ra
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$11238$10601$Up9ra '#f)
                  (g$11237$10602$Up9ra
                    (make-record-constructor-descriptor
                      g$11236$10600$Up9ra
                      &condition-rcd
                      g$11238$10601$Up9ra))
                  (g$11235$10603$Up9ra (record-predicate g$11236$10600$Up9ra))
                  (g$make-trace$10604$Up9ra
                    (record-constructor g$11237$10602$Up9ra))
                  (g$11234$10605$Up9ra (record-accessor g$11236$10600$Up9ra '0))
                  (g$trace?$10606$Up9ra
                    (condition-predicate g$11236$10600$Up9ra))
                  (g$trace-form$10607$Up9ra
                    (condition-accessor
                      g$11236$10600$Up9ra
                      g$11234$10605$Up9ra)))
          ((letrec ((g$f$10608$Up9ra
                      (case-lambda
                        ((g$x$10609$Up9ra)
                         (if (g$stx?$7050$Up9ra g$x$10609$Up9ra)
                           (apply
                             condition
                             (g$make-trace$10604$Up9ra g$x$10609$Up9ra)
                             (map g$f$10608$Up9ra
                                  (g$stx-ae*$7055$Up9ra g$x$10609$Up9ra)))
                           (if (annotation? g$x$10609$Up9ra)
                             (g$make-trace$10604$Up9ra
                               (g$make-stx$7051$Up9ra
                                 g$x$10609$Up9ra
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$10608$Up9ra)
           g$x$10599$Up9ra)))))
   (g$syntax-violation*$7461$Up9ra
     g$syntax-violation*$10911$Up9ra
     (case-lambda
       ((g$who$10610$Up9ra
          g$msg$10611$Up9ra
          g$form$10612$Up9ra
          g$condition-object$10613$Up9ra)
        (begin
          (if (string? g$msg$10611$Up9ra)
            (void)
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$10611$Up9ra))
          ((case-lambda
             ((g$who$10614$Up9ra)
              (raise
                (condition
                  (if g$who$10614$Up9ra
                    (g$make-who-condition$5665$Up9ra g$who$10614$Up9ra)
                    (condition))
                  (g$make-message-condition$5619$Up9ra g$msg$10611$Up9ra)
                  g$condition-object$10613$Up9ra
                  (g$extract-position-condition$7458$Up9ra g$form$10612$Up9ra)
                  (g$extract-trace$7460$Up9ra g$form$10612$Up9ra)))))
           (if ((case-lambda
                  ((g$t$10615$Up9ra)
                   (if g$t$10615$Up9ra
                     g$t$10615$Up9ra
                     (begin '#f (symbol? g$who$10610$Up9ra)))))
                (string? g$who$10610$Up9ra))
             g$who$10610$Up9ra
             (if (not g$who$10610$Up9ra)
               ((case-lambda
                  ((g$t$10616$Up9ra)
                   ((case-lambda
                      ((g$ls/false$10617$Up9ra)
                       (if (if g$ls/false$10617$Up9ra
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$10618$Up9ra)
                                    (g$id?$7078$Up9ra g$id$10618$Up9ra)))
                                 g$ls/false$10617$Up9ra))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$10619$Up9ra)
                              (g$syntax->datum$7465$Up9ra g$id$10619$Up9ra)))
                           g$ls/false$10617$Up9ra)
                         ((case-lambda
                            ((g$t$10620$Up9ra)
                             ((case-lambda
                                ((g$ls/false$10621$Up9ra)
                                 (if (if g$ls/false$10621$Up9ra
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$10622$Up9ra
                                                g$rest$10623$Up9ra)
                                              (g$id?$7078$Up9ra
                                                g$id$10622$Up9ra)))
                                           g$ls/false$10621$Up9ra))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$10624$Up9ra g$rest$10625$Up9ra)
                                        (g$syntax->datum$7465$Up9ra
                                          g$id$10624$Up9ra)))
                                     g$ls/false$10621$Up9ra)
                                   ((case-lambda
                                      ((g$t$10626$Up9ra)
                                       ((case-lambda
                                          ((g$ls/false$10627$Up9ra)
                                           (if g$ls/false$10627$Up9ra
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$10627$Up9ra)
                                             (g$syntax-violation$7462$Up9ra
                                               '#f
                                               '"invalid syntax"
                                               g$t$10626$Up9ra))))
                                        (g$syntax-dispatch$7356$Up9ra
                                          g$t$10626$Up9ra
                                          '_))))
                                    g$t$10620$Up9ra))))
                              (g$syntax-dispatch$7356$Up9ra
                                g$t$10620$Up9ra
                                '(any . any)))))
                          g$t$10616$Up9ra))))
                    (g$syntax-dispatch$7356$Up9ra g$t$10616$Up9ra 'any))))
                g$form$10612$Up9ra)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$10610$Up9ra))))))))
   (g$syntax-violation$7462$Up9ra
     g$syntax-violation$10912$Up9ra
     (case-lambda
       ((g$who$10628$Up9ra g$msg$10629$Up9ra g$form$10630$Up9ra)
        (g$syntax-violation$7462$Up9ra
          g$who$10628$Up9ra
          g$msg$10629$Up9ra
          g$form$10630$Up9ra
          '#f))
       ((g$who$10631$Up9ra
          g$msg$10632$Up9ra
          g$form$10633$Up9ra
          g$subform$10634$Up9ra)
        (g$syntax-violation*$7461$Up9ra
          g$who$10631$Up9ra
          g$msg$10632$Up9ra
          g$form$10633$Up9ra
          (g$make-syntax-violation$5691$Up9ra
            (g$syntax->datum$7465$Up9ra g$form$10633$Up9ra)
            (g$syntax->datum$7465$Up9ra g$subform$10634$Up9ra))))))
   (g$identifier?$7463$Up9ra
     g$identifier?$10913$Up9ra
     (case-lambda ((g$x$10635$Up9ra) (g$id?$7078$Up9ra g$x$10635$Up9ra))))
   (g$datum->syntax$7464$Up9ra
     g$datum->syntax$10914$Up9ra
     (case-lambda
       ((g$id$10636$Up9ra g$datum$10637$Up9ra)
        (if (g$id?$7078$Up9ra g$id$10636$Up9ra)
          (g$datum->stx$7061$Up9ra g$id$10636$Up9ra g$datum$10637$Up9ra)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$10636$Up9ra)))))
   (g$syntax->datum$7465$Up9ra
     g$syntax->datum$10915$Up9ra
     (case-lambda
       ((g$x$10638$Up9ra) (g$stx->datum$7089$Up9ra g$x$10638$Up9ra))))
   (g$compile-r6rs-top-level$7466$Up9ra
     g$compile-r6rs-top-level$10916$Up9ra
     (case-lambda
       ((g$x*$10639$Up9ra)
        (call-with-values
          (case-lambda (() (g$top-level-expander$7416$Up9ra g$x*$10639$Up9ra)))
          (case-lambda
            ((g$lib*$10642$Up9ra g$invoke-code$10643$Up9ra)
             ((case-lambda
                ((g$invoke-code$10644$Up9ra g$lib*$10645$Up9ra)
                 (case-lambda
                   (()
                    (begin
                      (for-each g$invoke-library$6893$Up9ra g$lib*$10645$Up9ra)
                      (eval-core
                        (g$expanded->core$6592$Up9ra
                          g$invoke-code$10644$Up9ra)))))))
              g$invoke-code$10643$Up9ra
              g$lib*$10642$Up9ra)))))))
   (g$pre-compile-r6rs-top-level$7467$Up9ra
     g$pre-compile-r6rs-top-level$10917$Up9ra
     (case-lambda
       ((g$x*$10646$Up9ra)
        (call-with-values
          (case-lambda (() (g$top-level-expander$7416$Up9ra g$x*$10646$Up9ra)))
          (case-lambda
            ((g$lib*$10649$Up9ra g$invoke-code$10650$Up9ra)
             ((case-lambda
                ((g$invoke-code$10651$Up9ra g$lib*$10652$Up9ra)
                 (begin
                   (for-each g$invoke-library$6893$Up9ra g$lib*$10652$Up9ra)
                   (compile-core
                     (g$expanded->core$6592$Up9ra g$invoke-code$10651$Up9ra)))))
              g$invoke-code$10650$Up9ra
              g$lib*$10649$Up9ra)))))))
   (g$interaction-environment$7468$Up9ra
     g$interaction-environment$10918$Up9ra
     ((case-lambda
        ((g$the-env$10653$Up9ra)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$10654$Up9ra)
                (if g$t$10654$Up9ra
                  g$t$10654$Up9ra
                  (begin
                    '#f
                    ((case-lambda
                       ((g$lib$10655$Up9ra g$rib$10656$Up9ra)
                        (begin
                          ((case-lambda
                             ((g$subst$10657$Up9ra)
                              (begin
                                (g$set-rib-sym*!$7037$Up9ra
                                  g$rib$10656$Up9ra
                                  (map car g$subst$10657$Up9ra))
                                (g$set-rib-mark**!$7038$Up9ra
                                  g$rib$10656$Up9ra
                                  (map (case-lambda
                                         ((g$x$10658$Up9ra)
                                          g$top-mark*$7020$Up9ra))
                                       g$subst$10657$Up9ra))
                                (g$set-rib-label*!$7039$Up9ra
                                  g$rib$10656$Up9ra
                                  (map cdr g$subst$10657$Up9ra)))))
                           (g$library-subst$6850$Up9ra g$lib$10655$Up9ra))
                          ((case-lambda
                             ((g$env$10659$Up9ra)
                              (begin
                                (set! g$the-env$10653$Up9ra g$env$10659$Up9ra)
                                g$env$10659$Up9ra)))
                           (g$make-interaction-env$7433$Up9ra
                             g$rib$10656$Up9ra
                             '()
                             '())))))
                     (g$find-library-by-name$6886$Up9ra '(ironscheme))
                     (g$make-empty-rib$7041$Up9ra))))))
             g$the-env$10653$Up9ra)))))
      '#f))
   (g$top-level-context$7469$Up9ra
     g$top-level-context$10919$Up9ra
     (g$make-parameter$6346$Up9ra '#f)))
  (g$current-library-expander$6883$Up9ra g$library-expander$7449$Up9ra))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$6589$Up9ra
      (case-lambda
        ((g$x$10970$Up9ra)
         ((case-lambda
            ((g$t$10971$Up9ra) (if g$t$10971$Up9ra (cdr g$t$10971$Up9ra) '#f)))
          (assq
            g$x$10970$Up9ra
            '((ellipsis-map . g$ellipsis-map$10811$Up9ra)
              (ironscheme-build . g$ironscheme-build$10964$Up9ra)
              (syntax-error . g$syntax-error$10909$Up9ra)
              (syntax-dispatch . g$syntax-dispatch$10806$Up9ra)
              (compile-system-libraries
                .
                g$compile-system-libraries$10966$Up9ra)
              (compile->closure . g$compile->closure$10968$Up9ra)
              (compile . g$compile$10967$Up9ra)
              (load . g$load$10963$Up9ra)
              (interaction-environment . g$interaction-environment$10918$Up9ra)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$10744$Up9ra)
              (variable-transformer? . g$variable-transformer?$10743$Up9ra)
              (make-variable-transformer
                .
                g$make-variable-transformer$10742$Up9ra)
              (identifier? . g$identifier?$10913$Up9ra)
              (generate-temporaries . g$generate-temporaries$10905$Up9ra)
              (free-identifier=? . g$free-identifier=?$10906$Up9ra)
              (syntax->datum . g$syntax->datum$10915$Up9ra)
              (datum->syntax . g$datum->syntax$10914$Up9ra)
              (bound-identifier=? . g$bound-identifier=?$10907$Up9ra)
              (delete-file . g$delete-file$5237$Up9ra)
              (file-exists? . g$file-exists?$5236$Up9ra)
              (list-sort . g$list-sort$5753$Up9ra)
              (make-eqv-hashtable . g$make-eqv-hashtable$5159$Up9ra)
              (make-eq-hashtable . g$make-eq-hashtable$5158$Up9ra)
              (hashtable-update! . g$hashtable-update!$5165$Up9ra)
              (hashtable-size . g$hashtable-size$5160$Up9ra)
              (hashtable-set! . g$hashtable-set!$5162$Up9ra)
              (hashtable-ref . g$hashtable-ref$5161$Up9ra)
              (hashtable-delete! . g$hashtable-delete!$5163$Up9ra)
              (hashtable-contains? . g$hashtable-contains?$5164$Up9ra)
              (hashtable-clear! . g$hashtable-clear!$5166$Up9ra)
              (open-string-output-port . g$open-string-output-port$6095$Up9ra)
              (make-i/o-write-error . g$make-i/o-write-error$6024$Up9ra)
              (make-i/o-read-error . g$make-i/o-read-error$6018$Up9ra)
              (make-i/o-port-error . g$make-i/o-port-error$6070$Up9ra)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$6030$Up9ra)
              (make-i/o-filename-error . g$make-i/o-filename-error$6038$Up9ra)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$6046$Up9ra)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$6052$Up9ra)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$6064$Up9ra)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$6058$Up9ra)
              (make-i/o-error . g$make-i/o-error$6012$Up9ra)
              (make-i/o-encoding-error . g$make-i/o-encoding-error$6084$Up9ra)
              (make-i/o-decoding-error . g$make-i/o-decoding-error$6078$Up9ra)
              (i/o-write-error? . g$i/o-write-error?$6025$Up9ra)
              (i/o-read-error? . g$i/o-read-error?$6019$Up9ra)
              (i/o-port-error? . g$i/o-port-error?$6072$Up9ra)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$6032$Up9ra)
              (i/o-filename-error? . g$i/o-filename-error?$6040$Up9ra)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$6047$Up9ra)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$6053$Up9ra)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$6065$Up9ra)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$6059$Up9ra)
              (i/o-error? . g$i/o-error?$6013$Up9ra)
              (i/o-error-port . g$i/o-error-port$6073$Up9ra)
              (i/o-error-filename . g$i/o-error-filename$6041$Up9ra)
              (i/o-encoding-error? . g$i/o-encoding-error?$6086$Up9ra)
              (i/o-encoding-error-char . g$i/o-encoding-error-char$6087$Up9ra)
              (i/o-decoding-error? . g$i/o-decoding-error?$6079$Up9ra)
              (scheme-report-environment
                .
                g$scheme-report-environment$10896$Up9ra)
              (quotient . g$quotient$5722$Up9ra)
              (null-environment . g$null-environment$10895$Up9ra)
              (remainder . g$remainder$5723$Up9ra)
              (modulo . g$modulo$5724$Up9ra)
              (command-line . g$command-line$10960$Up9ra)
              (remove . g$remove$5370$Up9ra)
              (remv . g$remv$5371$Up9ra)
              (remp . g$remp$5356$Up9ra)
              (remq . g$remq$5372$Up9ra)
              (partition . g$partition$5355$Up9ra)
              (memp . g$memp$5362$Up9ra)
              (member . g$member$5361$Up9ra)
              (exists . g$exists$5366$Up9ra)
              (for-all . g$for-all$5365$Up9ra)
              (fold-right . g$fold-right$5369$Up9ra)
              (fold-left . g$fold-left$5368$Up9ra)
              (find . g$find$5354$Up9ra)
              (filter . g$filter$5357$Up9ra)
              (cons* . g$cons*$5367$Up9ra)
              (assv . g$assv$5358$Up9ra)
              (assp . g$assp$5360$Up9ra)
              (assoc . g$assoc$5359$Up9ra)
              (eval . g$eval$10898$Up9ra)
              (environment . g$environment$10894$Up9ra)
              (make-enumeration . g$make-enumeration$6224$Up9ra)
              (enum-set=? . g$enum-set=?$6231$Up9ra)
              (enum-set-universe . g$enum-set-universe$6225$Up9ra)
              (enum-set-union . g$enum-set-union$6232$Up9ra)
              (enum-set-subset? . g$enum-set-subset?$6230$Up9ra)
              (enum-set-projection . g$enum-set-projection$6236$Up9ra)
              (enum-set-member? . g$enum-set-member?$6229$Up9ra)
              (enum-set-intersection . g$enum-set-intersection$6233$Up9ra)
              (enum-set-indexer . g$enum-set-indexer$6226$Up9ra)
              (enum-set-difference . g$enum-set-difference$6234$Up9ra)
              (enum-set-constructor . g$enum-set-constructor$6227$Up9ra)
              (enum-set-complement . g$enum-set-complement$6235$Up9ra)
              (enum-set->list . g$enum-set->list$6228$Up9ra)
              (who-condition? . g$who-condition?$5667$Up9ra)
              (warning? . g$warning?$5628$Up9ra)
              (violation? . g$violation?$5646$Up9ra)
              (undefined-violation? . g$undefined-violation?$5702$Up9ra)
              (syntax-violation? . g$syntax-violation?$5694$Up9ra)
              (syntax-violation-subform . g$syntax-violation-subform$5696$Up9ra)
              (syntax-violation-form . g$syntax-violation-form$5695$Up9ra)
              (syntax-violation . g$syntax-violation$10912$Up9ra)
              (serious-condition? . g$serious-condition?$5634$Up9ra)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$5674$Up9ra)
              (message-condition? . g$message-condition?$5621$Up9ra)
              (make-who-condition . g$make-who-condition$5665$Up9ra)
              (make-warning . g$make-warning$5627$Up9ra)
              (make-violation . g$make-violation$5645$Up9ra)
              (make-undefined-violation . g$make-undefined-violation$5701$Up9ra)
              (make-syntax-violation . g$make-syntax-violation$5691$Up9ra)
              (make-serious-condition . g$make-serious-condition$5633$Up9ra)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$5673$Up9ra)
              (make-message-condition . g$make-message-condition$5619$Up9ra)
              (make-lexical-violation . g$make-lexical-violation$5685$Up9ra)
              (make-irritants-condition . g$make-irritants-condition$5657$Up9ra)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$5679$Up9ra)
              (make-error . g$make-error$5639$Up9ra)
              (make-assertion-violation . g$make-assertion-violation$5651$Up9ra)
              (lexical-violation? . g$lexical-violation?$5686$Up9ra)
              (irritants-condition? . g$irritants-condition?$5659$Up9ra)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$5680$Up9ra)
              (error? . g$error?$5640$Up9ra)
              (condition-who . g$condition-who$5668$Up9ra)
              (condition-message . g$condition-message$5622$Up9ra)
              (condition-irritants . g$condition-irritants$5660$Up9ra)
              (assertion-violation? . g$assertion-violation?$5652$Up9ra)
              (native-endianness . g$native-endianness$5484$Up9ra)
              (bytevector-u64-set! . g$bytevector-u64-set!$5505$Up9ra)
              (bytevector-u64-ref . g$bytevector-u64-ref$5501$Up9ra)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$5507$Up9ra)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$5503$Up9ra)
              (bytevector-u32-set! . g$bytevector-u32-set!$5497$Up9ra)
              (bytevector-u32-ref . g$bytevector-u32-ref$5493$Up9ra)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$5499$Up9ra)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$5495$Up9ra)
              (bytevector-u16-set! . g$bytevector-u16-set!$5489$Up9ra)
              (bytevector-u16-ref . g$bytevector-u16-ref$5485$Up9ra)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$5491$Up9ra)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$5487$Up9ra)
              (bytevector-s64-set! . g$bytevector-s64-set!$5506$Up9ra)
              (bytevector-s64-ref . g$bytevector-s64-ref$5502$Up9ra)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$5508$Up9ra)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$5504$Up9ra)
              (bytevector-s32-set! . g$bytevector-s32-set!$5498$Up9ra)
              (bytevector-s32-ref . g$bytevector-s32-ref$5494$Up9ra)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$5500$Up9ra)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$5496$Up9ra)
              (bytevector-s16-set! . g$bytevector-s16-set!$5490$Up9ra)
              (bytevector-s16-ref . g$bytevector-s16-ref$5486$Up9ra)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$5492$Up9ra)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$5488$Up9ra)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$5511$Up9ra)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$5509$Up9ra)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$5512$Up9ra)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$5510$Up9ra)
              (no-nans-violation? . g$no-nans-violation?$5927$Up9ra)
              (no-infinities-violation? . g$no-infinities-violation?$5921$Up9ra)
              (make-no-nans-violation . g$make-no-nans-violation$5926$Up9ra)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$5920$Up9ra)
              (fxrotate-bit-field . g$fxrotate-bit-field$5903$Up9ra)
              (fxif . g$fxif$5897$Up9ra)
              (fxcopy-bit-field . g$fxcopy-bit-field$5900$Up9ra)
              (fxcopy-bit . g$fxcopy-bit$5898$Up9ra)
              (fxbit-field . g$fxbit-field$5899$Up9ra)
              (fxarithmetic-shift-right . g$fxarithmetic-shift-right$5902$Up9ra)
              (fxarithmetic-shift-left . g$fxarithmetic-shift-left$5901$Up9ra)
              (bitwise-rotate-bit-field . g$bitwise-rotate-bit-field$5848$Up9ra)
              (bitwise-reverse-bit-field
                .
                g$bitwise-reverse-bit-field$5849$Up9ra)
              (bitwise-if . g$bitwise-if$5842$Up9ra)
              (bitwise-copy-bit-field . g$bitwise-copy-bit-field$5845$Up9ra)
              (bitwise-copy-bit . g$bitwise-copy-bit$5843$Up9ra)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$5847$Up9ra)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$5846$Up9ra)
              (rationalize . g$rationalize$4923$Up9ra)
              (cddddr . g$cddddr$4922$Up9ra)
              (cdddar . g$cdddar$4921$Up9ra)
              (cddadr . g$cddadr$4920$Up9ra)
              (cddaar . g$cddaar$4919$Up9ra)
              (cdaddr . g$cdaddr$4918$Up9ra)
              (cdadar . g$cdadar$4917$Up9ra)
              (cdaadr . g$cdaadr$4916$Up9ra)
              (cdaaar . g$cdaaar$4915$Up9ra)
              (cadddr . g$cadddr$4914$Up9ra)
              (caddar . g$caddar$4913$Up9ra)
              (cadadr . g$cadadr$4912$Up9ra)
              (cadaar . g$cadaar$4911$Up9ra)
              (caaddr . g$caaddr$4910$Up9ra)
              (caadar . g$caadar$4909$Up9ra)
              (caaadr . g$caaadr$4908$Up9ra)
              (caaaar . g$caaaar$4907$Up9ra)
              (cdddr . g$cdddr$4906$Up9ra)
              (cddar . g$cddar$4905$Up9ra)
              (cdadr . g$cdadr$4904$Up9ra)
              (cdaar . g$cdaar$4903$Up9ra)
              (caddr . g$caddr$4902$Up9ra)
              (cadar . g$cadar$4901$Up9ra)
              (caadr . g$caadr$4900$Up9ra)
              (caaar . g$caaar$4899$Up9ra)
              (cddr . g$cddr$4898$Up9ra)
              (cdar . g$cdar$4897$Up9ra)
              (cadr . g$cadr$4896$Up9ra)
              (caar . g$caar$4895$Up9ra)
              (load/args . g$load/args$10962$Up9ra)
              (printf . g$printf$6260$Up9ra)
              (fprintf . g$fprintf$6261$Up9ra)
              (format . g$format$6262$Up9ra)
              (trace-printer . g$trace-printer$10959$Up9ra)
              (make-traced-macro . g$make-traced-macro$6266$Up9ra)
              (make-parameter . g$make-parameter$6346$Up9ra)
              (environment-symbols . g$environment-symbols$10892$Up9ra)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$10891$Up9ra)
              (library-path . g$library-path$6875$Up9ra)
              (library-extensions . g$library-extensions$6876$Up9ra)
              (installed-libraries . g$installed-libraries$6896$Up9ra)
              (expand . g$expand$10897$Up9ra)))))))
    (g$install-library$6891$Up9ra
      'g$11982$Up9ra
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$11919$Up9ra)
        (cosh . g$11918$Up9ra)
        (sinh . g$11917$Up9ra)
        (make-guid . g$11916$Up9ra)
        (unspecified? . g$11915$Up9ra)
        (make-trace . g$11914$Up9ra)
        (make-list . g$11913$Up9ra)
        (last-pair . g$11912$Up9ra)
        (load-r5rs . g$11911$Up9ra)
        (license . g$11910$Up9ra)
        (stacktrace . g$11909$Up9ra)
        (ironscheme-build . g$11308$Up9ra)
        (set-symbol-value! . g$11895$Up9ra)
        (symbol-value . g$11894$Up9ra)
        (ungensym . g$11893$Up9ra)
        (gensym . g$11892$Up9ra)
        (void . g$11891$Up9ra)
        (compile-system-libraries . g$11310$Up9ra)
        (compile->closure . g$11312$Up9ra)
        (compile . g$11311$Up9ra)
        (load . g$11307$Up9ra)
        (interaction-environment . g$8376$Up9ra)
        (string-upcase . g$11887$Up9ra)
        (string-titlecase . g$11886$Up9ra)
        (string-normalize-nfkd . g$11885$Up9ra)
        (string-normalize-nfkc . g$11884$Up9ra)
        (string-normalize-nfd . g$11883$Up9ra)
        (string-normalize-nfc . g$11882$Up9ra)
        (string-foldcase . g$11881$Up9ra)
        (string-downcase . g$11880$Up9ra)
        (string-ci>? . g$11879$Up9ra)
        (string-ci>=? . g$11878$Up9ra)
        (string-ci=? . g$11877$Up9ra)
        (string-ci<? . g$11876$Up9ra)
        (string-ci<=? . g$11875$Up9ra)
        (char-whitespace? . g$11874$Up9ra)
        (char-upper-case? . g$11873$Up9ra)
        (char-title-case? . g$11872$Up9ra)
        (char-numeric? . g$11871$Up9ra)
        (char-lower-case? . g$11870$Up9ra)
        (char-general-category . g$11869$Up9ra)
        (char-upcase . g$11868$Up9ra)
        (char-titlecase . g$11867$Up9ra)
        (char-foldcase . g$11866$Up9ra)
        (char-downcase . g$11865$Up9ra)
        (char-ci>? . g$11864$Up9ra)
        (char-ci>=? . g$11863$Up9ra)
        (char-ci=? . g$11862$Up9ra)
        (char-ci<? . g$11861$Up9ra)
        (char-ci<=? . g$11860$Up9ra)
        (char-alphabetic? . g$11859$Up9ra)
        (variable-transformer-procedure . g$7980$Up9ra)
        (variable-transformer? . g$7979$Up9ra)
        (make-variable-transformer . g$7978$Up9ra)
        (identifier? . g$8371$Up9ra)
        (generate-temporaries . g$8363$Up9ra)
        (free-identifier=? . g$8364$Up9ra)
        (syntax->datum . g$8373$Up9ra)
        (datum->syntax . g$8372$Up9ra)
        (bound-identifier=? . g$8365$Up9ra)
        (record-type-descriptor? . g$11858$Up9ra)
        (record-predicate . g$11857$Up9ra)
        (record-mutator . g$11856$Up9ra)
        (record-constructor . g$11855$Up9ra)
        (record-accessor . g$11854$Up9ra)
        (make-record-type-descriptor . g$11853$Up9ra)
        (make-record-constructor-descriptor . g$11852$Up9ra)
        (record? . g$11851$Up9ra)
        (record-type-uid . g$11850$Up9ra)
        (record-type-sealed? . g$11849$Up9ra)
        (record-type-parent . g$11848$Up9ra)
        (record-type-opaque? . g$11847$Up9ra)
        (record-type-name . g$11846$Up9ra)
        (record-type-generative? . g$11845$Up9ra)
        (record-type-field-names . g$11844$Up9ra)
        (record-rtd . g$11843$Up9ra)
        (record-field-mutable? . g$11842$Up9ra)
        (delete-file . g$6018$Up9ra)
        (file-exists? . g$6017$Up9ra)
        (vector-sort! . g$11841$Up9ra)
        (vector-sort . g$11840$Up9ra)
        (list-sort . g$6524$Up9ra)
        (symbol-hash . g$11839$Up9ra)
        (string-ci-hash . g$11838$Up9ra)
        (string-hash . g$11837$Up9ra)
        (equal-hash . g$11836$Up9ra)
        (hashtable-equivalence-function . g$11835$Up9ra)
        (make-hashtable . g$11834$Up9ra)
        (hashtable-hash-function . g$11833$Up9ra)
        (make-eqv-hashtable . g$5985$Up9ra)
        (make-eq-hashtable . g$5984$Up9ra)
        (hashtable? . g$11832$Up9ra)
        (hashtable-update! . g$5991$Up9ra)
        (hashtable-size . g$5986$Up9ra)
        (hashtable-set! . g$5988$Up9ra)
        (hashtable-ref . g$5987$Up9ra)
        (hashtable-mutable? . g$11831$Up9ra)
        (hashtable-keys . g$11830$Up9ra)
        (hashtable-entries . g$11829$Up9ra)
        (hashtable-delete! . g$5989$Up9ra)
        (hashtable-copy . g$11828$Up9ra)
        (hashtable-contains? . g$5990$Up9ra)
        (hashtable-clear! . g$5992$Up9ra)
        (call-with-output-file . g$11827$Up9ra)
        (call-with-input-file . g$11826$Up9ra)
        (write-char . g$11825$Up9ra)
        (write . g$11824$Up9ra)
        (with-output-to-file . g$11823$Up9ra)
        (with-input-from-file . g$11822$Up9ra)
        (read-char . g$11821$Up9ra)
        (read . g$11820$Up9ra)
        (peek-char . g$11819$Up9ra)
        (open-output-file . g$11818$Up9ra)
        (open-input-file . g$11817$Up9ra)
        (newline . g$11816$Up9ra)
        (display . g$11815$Up9ra)
        (close-output-port . g$11814$Up9ra)
        (close-input-port . g$11813$Up9ra)
        (eof-object? . g$11812$Up9ra)
        (eof-object . g$11811$Up9ra)
        (current-error-port . g$11810$Up9ra)
        (current-output-port . g$11809$Up9ra)
        (current-input-port . g$11808$Up9ra)
        (output-port? . g$11807$Up9ra)
        (input-port? . g$11806$Up9ra)
        (utf-8-codec . g$11805$Up9ra)
        (utf-16-codec . g$11804$Up9ra)
        (transcoder-error-handling-mode . g$11803$Up9ra)
        (transcoder-eol-style . g$11802$Up9ra)
        (transcoder-codec . g$11801$Up9ra)
        (transcoded-port . g$11800$Up9ra)
        (textual-port? . g$11799$Up9ra)
        (string->bytevector . g$11798$Up9ra)
        (standard-output-port . g$11797$Up9ra)
        (standard-input-port . g$11796$Up9ra)
        (standard-error-port . g$11795$Up9ra)
        (set-port-position! . g$11794$Up9ra)
        (put-u8 . g$11793$Up9ra)
        (put-string . g$11792$Up9ra)
        (put-datum . g$11791$Up9ra)
        (put-char . g$11790$Up9ra)
        (put-bytevector . g$11789$Up9ra)
        (port? . g$11788$Up9ra)
        (port-transcoder . g$11787$Up9ra)
        (port-position . g$11786$Up9ra)
        (port-has-set-port-position!? . g$11785$Up9ra)
        (port-has-port-position? . g$11784$Up9ra)
        (port-eof? . g$11783$Up9ra)
        (output-port-buffer-mode . g$11782$Up9ra)
        (open-string-output-port . g$6915$Up9ra)
        (open-string-input-port . g$11781$Up9ra)
        (open-file-output-port . g$11780$Up9ra)
        (open-file-input/output-port . g$11779$Up9ra)
        (open-file-input-port . g$11778$Up9ra)
        (open-bytevector-output-port . g$11777$Up9ra)
        (open-bytevector-input-port . g$11776$Up9ra)
        (native-transcoder . g$11775$Up9ra)
        (native-eol-style . g$11774$Up9ra)
        (make-transcoder . g$11773$Up9ra)
        (latin-1-codec . g$11772$Up9ra)
        (make-i/o-write-error . g$6772$Up9ra)
        (make-i/o-read-error . g$6758$Up9ra)
        (make-i/o-port-error . g$6877$Up9ra)
        (make-i/o-invalid-position-error . g$6787$Up9ra)
        (make-i/o-filename-error . g$6804$Up9ra)
        (make-i/o-file-protection-error . g$6820$Up9ra)
        (make-i/o-file-is-read-only-error . g$6834$Up9ra)
        (make-i/o-file-does-not-exist-error . g$6862$Up9ra)
        (make-i/o-file-already-exists-error . g$6848$Up9ra)
        (make-i/o-error . g$6744$Up9ra)
        (make-i/o-encoding-error . g$6908$Up9ra)
        (make-i/o-decoding-error . g$6893$Up9ra)
        (make-custom-textual-output-port . g$11771$Up9ra)
        (make-custom-textual-input/output-port . g$11770$Up9ra)
        (make-custom-textual-input-port . g$11769$Up9ra)
        (make-custom-binary-output-port . g$11768$Up9ra)
        (make-custom-binary-input/output-port . g$11767$Up9ra)
        (make-custom-binary-input-port . g$11766$Up9ra)
        (make-bytevector . g$11765$Up9ra)
        (lookahead-u8 . g$11764$Up9ra)
        (lookahead-char . g$11763$Up9ra)
        (i/o-write-error? . g$6773$Up9ra)
        (i/o-read-error? . g$6759$Up9ra)
        (i/o-port-error? . g$6879$Up9ra)
        (i/o-invalid-position-error? . g$6789$Up9ra)
        (i/o-filename-error? . g$6806$Up9ra)
        (i/o-file-protection-error? . g$6821$Up9ra)
        (i/o-file-is-read-only-error? . g$6835$Up9ra)
        (i/o-file-does-not-exist-error? . g$6863$Up9ra)
        (i/o-file-already-exists-error? . g$6849$Up9ra)
        (i/o-error? . g$6745$Up9ra)
        (i/o-error-port . g$6880$Up9ra)
        (i/o-error-filename . g$6807$Up9ra)
        (i/o-encoding-error? . g$6910$Up9ra)
        (i/o-encoding-error-char . g$6911$Up9ra)
        (i/o-decoding-error? . g$6894$Up9ra)
        (get-u8 . g$11762$Up9ra)
        (get-string-n! . g$11761$Up9ra)
        (get-string-n . g$11760$Up9ra)
        (get-string-all . g$11759$Up9ra)
        (get-line . g$11758$Up9ra)
        (get-datum . g$11757$Up9ra)
        (get-char . g$11756$Up9ra)
        (get-bytevector-some . g$11755$Up9ra)
        (get-bytevector-n! . g$11754$Up9ra)
        (get-bytevector-n . g$11753$Up9ra)
        (get-bytevector-all . g$11752$Up9ra)
        (flush-output-port . g$11751$Up9ra)
        (close-port . g$11750$Up9ra)
        (call-with-string-output-port . g$11749$Up9ra)
        (call-with-port . g$11748$Up9ra)
        (call-with-bytevector-output-port . g$11747$Up9ra)
        (bytevector->string . g$11746$Up9ra)
        (buffer-mode? . g$11745$Up9ra)
        (binary-port? . g$11744$Up9ra)
        (scheme-report-environment . g$8354$Up9ra)
        (quotient . g$6511$Up9ra)
        (null-environment . g$8353$Up9ra)
        (remainder . g$6512$Up9ra)
        (modulo . g$6513$Up9ra)
        (inexact->exact . g$11743$Up9ra)
        (force . g$11742$Up9ra)
        (exact->inexact . g$11741$Up9ra)
        (exit . g$11740$Up9ra)
        (command-line . g$11304$Up9ra)
        (string-fill! . g$11739$Up9ra)
        (string-set! . g$11738$Up9ra)
        (set-cdr! . g$11737$Up9ra)
        (set-car! . g$11736$Up9ra)
        (remove . g$6098$Up9ra)
        (remv . g$6099$Up9ra)
        (remp . g$6084$Up9ra)
        (remq . g$6100$Up9ra)
        (partition . g$6083$Up9ra)
        (memv . g$11735$Up9ra)
        (memq . g$11734$Up9ra)
        (memp . g$6090$Up9ra)
        (member . g$6089$Up9ra)
        (exists . g$6094$Up9ra)
        (for-all . g$6093$Up9ra)
        (fold-right . g$6097$Up9ra)
        (fold-left . g$6096$Up9ra)
        (find . g$6082$Up9ra)
        (filter . g$6085$Up9ra)
        (cons* . g$6095$Up9ra)
        (assv . g$6086$Up9ra)
        (assq . g$11733$Up9ra)
        (assp . g$6088$Up9ra)
        (assoc . g$6087$Up9ra)
        (with-exception-handler . g$11732$Up9ra)
        (raise-continuable . g$11731$Up9ra)
        (raise . g$11730$Up9ra)
        (eval . g$8356$Up9ra)
        (environment . g$8352$Up9ra)
        (make-enumeration . g$6962$Up9ra)
        (enum-set=? . g$6969$Up9ra)
        (enum-set-universe . g$6963$Up9ra)
        (enum-set-union . g$6970$Up9ra)
        (enum-set-subset? . g$6968$Up9ra)
        (enum-set-projection . g$6974$Up9ra)
        (enum-set-member? . g$6967$Up9ra)
        (enum-set-intersection . g$6971$Up9ra)
        (enum-set-indexer . g$6964$Up9ra)
        (enum-set-difference . g$6972$Up9ra)
        (enum-set-constructor . g$6965$Up9ra)
        (enum-set-complement . g$6973$Up9ra)
        (enum-set->list . g$6966$Up9ra)
        (who-condition? . g$6422$Up9ra)
        (warning? . g$6333$Up9ra)
        (violation? . g$6375$Up9ra)
        (undefined-violation? . g$6499$Up9ra)
        (syntax-violation? . g$6483$Up9ra)
        (syntax-violation-subform . g$6485$Up9ra)
        (syntax-violation-form . g$6484$Up9ra)
        (syntax-violation . g$8370$Up9ra)
        (simple-conditions . g$11729$Up9ra)
        (serious-condition? . g$6347$Up9ra)
        (non-continuable-violation? . g$6437$Up9ra)
        (message-condition? . g$6318$Up9ra)
        (make-who-condition . g$6420$Up9ra)
        (make-warning . g$6332$Up9ra)
        (make-violation . g$6374$Up9ra)
        (make-undefined-violation . g$6498$Up9ra)
        (make-syntax-violation . g$6480$Up9ra)
        (make-serious-condition . g$6346$Up9ra)
        (make-non-continuable-violation . g$6436$Up9ra)
        (make-message-condition . g$6316$Up9ra)
        (make-lexical-violation . g$6464$Up9ra)
        (make-irritants-condition . g$6403$Up9ra)
        (make-implementation-restriction-violation . g$6450$Up9ra)
        (make-error . g$6360$Up9ra)
        (make-assertion-violation . g$6388$Up9ra)
        (lexical-violation? . g$6465$Up9ra)
        (irritants-condition? . g$6405$Up9ra)
        (implementation-restriction-violation? . g$6451$Up9ra)
        (error? . g$6361$Up9ra)
        (condition-who . g$6423$Up9ra)
        (condition-predicate . g$11728$Up9ra)
        (condition-message . g$6319$Up9ra)
        (condition-irritants . g$6406$Up9ra)
        (condition-accessor . g$11727$Up9ra)
        (condition . g$11726$Up9ra)
        (assertion-violation? . g$6389$Up9ra)
        (condition? . g$11725$Up9ra)
        (utf32->string . g$11724$Up9ra)
        (utf16->string . g$11723$Up9ra)
        (utf8->string . g$11722$Up9ra)
        (uint-list->bytevector . g$11721$Up9ra)
        (u8-list->bytevector . g$11720$Up9ra)
        (string->utf8 . g$11719$Up9ra)
        (string->utf32 . g$11718$Up9ra)
        (string->utf16 . g$11717$Up9ra)
        (sint-list->bytevector . g$11716$Up9ra)
        (native-endianness . g$6174$Up9ra)
        (bytevector? . g$11715$Up9ra)
        (bytevector=? . g$11714$Up9ra)
        (bytevector-uint-set! . g$11713$Up9ra)
        (bytevector-uint-ref . g$11712$Up9ra)
        (bytevector-u8-set! . g$11711$Up9ra)
        (bytevector-u8-ref . g$11710$Up9ra)
        (bytevector-u64-set! . g$6195$Up9ra)
        (bytevector-u64-ref . g$6191$Up9ra)
        (bytevector-u64-native-set! . g$6197$Up9ra)
        (bytevector-u64-native-ref . g$6193$Up9ra)
        (bytevector-u32-set! . g$6187$Up9ra)
        (bytevector-u32-ref . g$6183$Up9ra)
        (bytevector-u32-native-set! . g$6189$Up9ra)
        (bytevector-u32-native-ref . g$6185$Up9ra)
        (bytevector-u16-set! . g$6179$Up9ra)
        (bytevector-u16-ref . g$6175$Up9ra)
        (bytevector-u16-native-set! . g$6181$Up9ra)
        (bytevector-u16-native-ref . g$6177$Up9ra)
        (bytevector-sint-set! . g$11709$Up9ra)
        (bytevector-sint-ref . g$11708$Up9ra)
        (bytevector-s8-set! . g$11707$Up9ra)
        (bytevector-s8-ref . g$11706$Up9ra)
        (bytevector-s64-set! . g$6196$Up9ra)
        (bytevector-s64-ref . g$6192$Up9ra)
        (bytevector-s64-native-set! . g$6198$Up9ra)
        (bytevector-s64-native-ref . g$6194$Up9ra)
        (bytevector-s32-set! . g$6188$Up9ra)
        (bytevector-s32-ref . g$6184$Up9ra)
        (bytevector-s32-native-set! . g$6190$Up9ra)
        (bytevector-s32-native-ref . g$6186$Up9ra)
        (bytevector-s16-set! . g$6180$Up9ra)
        (bytevector-s16-ref . g$6176$Up9ra)
        (bytevector-s16-native-set! . g$6182$Up9ra)
        (bytevector-s16-native-ref . g$6178$Up9ra)
        (bytevector-length . g$11705$Up9ra)
        (bytevector-ieee-single-set! . g$11704$Up9ra)
        (bytevector-ieee-single-ref . g$11703$Up9ra)
        (bytevector-ieee-single-native-set! . g$6201$Up9ra)
        (bytevector-ieee-single-native-ref . g$6199$Up9ra)
        (bytevector-ieee-double-set! . g$11702$Up9ra)
        (bytevector-ieee-double-ref . g$11701$Up9ra)
        (bytevector-ieee-double-native-set! . g$6202$Up9ra)
        (bytevector-ieee-double-native-ref . g$6200$Up9ra)
        (bytevector-fill! . g$11700$Up9ra)
        (bytevector-copy! . g$11699$Up9ra)
        (bytevector-copy . g$11698$Up9ra)
        (bytevector->uint-list . g$11697$Up9ra)
        (bytevector->u8-list . g$11696$Up9ra)
        (bytevector->sint-list . g$11695$Up9ra)
        (no-nans-violation? . g$6730$Up9ra)
        (no-infinities-violation? . g$6716$Up9ra)
        (make-no-nans-violation . g$6729$Up9ra)
        (make-no-infinities-violation . g$6715$Up9ra)
        (real->flonum . g$11694$Up9ra)
        (flzero? . g$11693$Up9ra)
        (fltruncate . g$11692$Up9ra)
        (fltan . g$11691$Up9ra)
        (flsqrt . g$11690$Up9ra)
        (flsin . g$11689$Up9ra)
        (flround . g$11688$Up9ra)
        (flpositive? . g$11687$Up9ra)
        (flonum? . g$11686$Up9ra)
        (flodd? . g$11685$Up9ra)
        (flnumerator . g$11684$Up9ra)
        (flnegative? . g$11683$Up9ra)
        (flnan? . g$11682$Up9ra)
        (flmod0 . g$11681$Up9ra)
        (flmod . g$11680$Up9ra)
        (flmin . g$11679$Up9ra)
        (flmax . g$11678$Up9ra)
        (fllog . g$11677$Up9ra)
        (flinteger? . g$11676$Up9ra)
        (flinfinite? . g$11675$Up9ra)
        (flfloor . g$11674$Up9ra)
        (flfinite? . g$11673$Up9ra)
        (flexpt . g$11672$Up9ra)
        (flexp . g$11671$Up9ra)
        (fleven? . g$11670$Up9ra)
        (fldiv0-and-mod0 . g$11669$Up9ra)
        (fldiv0 . g$11668$Up9ra)
        (fldiv-and-mod . g$11667$Up9ra)
        (fldiv . g$11666$Up9ra)
        (fldenominator . g$11665$Up9ra)
        (flcos . g$11664$Up9ra)
        (flceiling . g$11663$Up9ra)
        (flatan . g$11662$Up9ra)
        (flasin . g$11661$Up9ra)
        (flacos . g$11660$Up9ra)
        (flabs . g$11659$Up9ra)
        (fl>? . g$11658$Up9ra)
        (fl>=? . g$11657$Up9ra)
        (fl=? . g$11656$Up9ra)
        (fl<? . g$11655$Up9ra)
        (fl<=? . g$11654$Up9ra)
        (fl/ . g$11653$Up9ra)
        (fl- . g$11652$Up9ra)
        (fl+ . g$11651$Up9ra)
        (fl* . g$11650$Up9ra)
        (fixnum->flonum . g$11649$Up9ra)
        (fxzero? . g$11648$Up9ra)
        (fxxor . g$11647$Up9ra)
        (fxrotate-bit-field . g$6661$Up9ra)
        (fxreverse-bit-field . g$11646$Up9ra)
        (fxpositive? . g$11645$Up9ra)
        (fxodd? . g$11644$Up9ra)
        (fxnot . g$11643$Up9ra)
        (fxnegative? . g$11642$Up9ra)
        (fxmod0 . g$11641$Up9ra)
        (fxmod . g$11640$Up9ra)
        (fxmin . g$11639$Up9ra)
        (fxmax . g$11638$Up9ra)
        (fxlength . g$11637$Up9ra)
        (fxior . g$11636$Up9ra)
        (fxif . g$6655$Up9ra)
        (fxfirst-bit-set . g$11635$Up9ra)
        (fxeven? . g$11634$Up9ra)
        (fxdiv0-and-mod0 . g$11633$Up9ra)
        (fxdiv0 . g$11632$Up9ra)
        (fxdiv-and-mod . g$11631$Up9ra)
        (fxdiv . g$11630$Up9ra)
        (fxcopy-bit-field . g$6658$Up9ra)
        (fxcopy-bit . g$6656$Up9ra)
        (fxbit-set? . g$11629$Up9ra)
        (fxbit-field . g$6657$Up9ra)
        (fxbit-count . g$11628$Up9ra)
        (fxarithmetic-shift-right . g$6660$Up9ra)
        (fxarithmetic-shift-left . g$6659$Up9ra)
        (fxarithmetic-shift . g$11627$Up9ra)
        (fxand . g$11626$Up9ra)
        (fx>? . g$11625$Up9ra)
        (fx>=? . g$11624$Up9ra)
        (fx=? . g$11623$Up9ra)
        (fx<? . g$11622$Up9ra)
        (fx<=? . g$11621$Up9ra)
        (fx-/carry . g$11620$Up9ra)
        (fx- . g$11619$Up9ra)
        (fx+/carry . g$11618$Up9ra)
        (fx+ . g$11617$Up9ra)
        (fx*/carry . g$11616$Up9ra)
        (fx* . g$11615$Up9ra)
        (greatest-fixnum . g$11614$Up9ra)
        (least-fixnum . g$11613$Up9ra)
        (fixnum-width . g$11612$Up9ra)
        (fixnum? . g$11611$Up9ra)
        (bitwise-rotate-bit-field . g$6609$Up9ra)
        (bitwise-reverse-bit-field . g$6610$Up9ra)
        (bitwise-length . g$11610$Up9ra)
        (bitwise-if . g$6603$Up9ra)
        (bitwise-first-bit-set . g$11609$Up9ra)
        (bitwise-copy-bit-field . g$6606$Up9ra)
        (bitwise-copy-bit . g$6604$Up9ra)
        (bitwise-bit-set? . g$11608$Up9ra)
        (bitwise-bit-field . g$11607$Up9ra)
        (bitwise-bit-count . g$11606$Up9ra)
        (bitwise-xor . g$11605$Up9ra)
        (bitwise-ior . g$11604$Up9ra)
        (bitwise-and . g$11603$Up9ra)
        (bitwise-not . g$11602$Up9ra)
        (bitwise-arithmetic-shift-right . g$6608$Up9ra)
        (bitwise-arithmetic-shift-left . g$6607$Up9ra)
        (bitwise-arithmetic-shift . g$11601$Up9ra)
        (zero? . g$11600$Up9ra)
        (vector? . g$11599$Up9ra)
        (vector-set! . g$11598$Up9ra)
        (vector-ref . g$11597$Up9ra)
        (vector-map . g$11596$Up9ra)
        (vector-length . g$11595$Up9ra)
        (vector-for-each . g$11594$Up9ra)
        (vector-fill! . g$11593$Up9ra)
        (vector->list . g$11592$Up9ra)
        (vector . g$11591$Up9ra)
        (values . g$11590$Up9ra)
        (truncate . g$11589$Up9ra)
        (tan . g$11588$Up9ra)
        (symbol? . g$11587$Up9ra)
        (symbol=? . g$11586$Up9ra)
        (symbol->string . g$11585$Up9ra)
        (substring . g$11584$Up9ra)
        (string? . g$11583$Up9ra)
        (string>? . g$11582$Up9ra)
        (string>=? . g$11581$Up9ra)
        (string=? . g$11580$Up9ra)
        (string<? . g$11579$Up9ra)
        (string<=? . g$11578$Up9ra)
        (string-ref . g$11577$Up9ra)
        (string-length . g$11576$Up9ra)
        (string-for-each . g$11575$Up9ra)
        (string-copy . g$11574$Up9ra)
        (string-append . g$11573$Up9ra)
        (string->symbol . g$11572$Up9ra)
        (string->number . g$11571$Up9ra)
        (string->list . g$11570$Up9ra)
        (string . g$11569$Up9ra)
        (sqrt . g$11568$Up9ra)
        (sin . g$11567$Up9ra)
        (round . g$11566$Up9ra)
        (reverse . g$11565$Up9ra)
        (real? . g$11564$Up9ra)
        (real-valued? . g$11563$Up9ra)
        (real-part . g$11562$Up9ra)
        (rationalize . g$5635$Up9ra)
        (rational? . g$11561$Up9ra)
        (rational-valued? . g$11560$Up9ra)
        (procedure? . g$11559$Up9ra)
        (positive? . g$11558$Up9ra)
        (pair? . g$11557$Up9ra)
        (odd? . g$11556$Up9ra)
        (numerator . g$11555$Up9ra)
        (number? . g$11554$Up9ra)
        (number->string . g$11553$Up9ra)
        (null? . g$11552$Up9ra)
        (not . g$11551$Up9ra)
        (negative? . g$11550$Up9ra)
        (nan? . g$11549$Up9ra)
        (min . g$11548$Up9ra)
        (max . g$11547$Up9ra)
        (map . g$11546$Up9ra)
        (make-vector . g$11545$Up9ra)
        (make-string . g$11544$Up9ra)
        (make-rectangular . g$11543$Up9ra)
        (make-polar . g$11542$Up9ra)
        (magnitude . g$11541$Up9ra)
        (log . g$11540$Up9ra)
        (list? . g$11539$Up9ra)
        (list-tail . g$11538$Up9ra)
        (list-ref . g$11537$Up9ra)
        (list->vector . g$11536$Up9ra)
        (list->string . g$11535$Up9ra)
        (list . g$11534$Up9ra)
        (length . g$11533$Up9ra)
        (lcm . g$11532$Up9ra)
        (integer? . g$11531$Up9ra)
        (integer-valued? . g$11530$Up9ra)
        (integer->char . g$11529$Up9ra)
        (infinite? . g$11528$Up9ra)
        (inexact? . g$11527$Up9ra)
        (inexact . g$11526$Up9ra)
        (imag-part . g$11525$Up9ra)
        (gcd . g$11524$Up9ra)
        (for-each . g$11523$Up9ra)
        (floor . g$11522$Up9ra)
        (finite? . g$11521$Up9ra)
        (expt . g$11520$Up9ra)
        (exp . g$11519$Up9ra)
        (exact? . g$11518$Up9ra)
        (exact-integer-sqrt . g$11517$Up9ra)
        (exact . g$11516$Up9ra)
        (even? . g$11515$Up9ra)
        (error . g$11514$Up9ra)
        (eqv? . g$11513$Up9ra)
        (equal? . g$11512$Up9ra)
        (eq? . g$11511$Up9ra)
        (dynamic-wind . g$11510$Up9ra)
        (div0-and-mod0 . g$11509$Up9ra)
        (mod0 . g$11508$Up9ra)
        (div0 . g$11507$Up9ra)
        (div-and-mod . g$11506$Up9ra)
        (mod . g$11505$Up9ra)
        (div . g$11504$Up9ra)
        (denominator . g$11503$Up9ra)
        (cos . g$11502$Up9ra)
        (cons . g$11501$Up9ra)
        (complex? . g$11500$Up9ra)
        (char? . g$11499$Up9ra)
        (char>? . g$11498$Up9ra)
        (char>=? . g$11497$Up9ra)
        (char=? . g$11496$Up9ra)
        (char<? . g$11495$Up9ra)
        (char<=? . g$11494$Up9ra)
        (char->integer . g$11493$Up9ra)
        (ceiling . g$11492$Up9ra)
        (call-with-values . g$11491$Up9ra)
        (call/cc . g$11490$Up9ra)
        (call-with-current-continuation . g$11489$Up9ra)
        (cddddr . g$5634$Up9ra)
        (cdddar . g$5633$Up9ra)
        (cddadr . g$5632$Up9ra)
        (cddaar . g$5631$Up9ra)
        (cdaddr . g$5630$Up9ra)
        (cdadar . g$5629$Up9ra)
        (cdaadr . g$5628$Up9ra)
        (cdaaar . g$5627$Up9ra)
        (cadddr . g$5626$Up9ra)
        (caddar . g$5625$Up9ra)
        (cadadr . g$5624$Up9ra)
        (cadaar . g$5623$Up9ra)
        (caaddr . g$5622$Up9ra)
        (caadar . g$5621$Up9ra)
        (caaadr . g$5620$Up9ra)
        (caaaar . g$5619$Up9ra)
        (cdddr . g$5618$Up9ra)
        (cddar . g$5617$Up9ra)
        (cdadr . g$5616$Up9ra)
        (cdaar . g$5615$Up9ra)
        (caddr . g$5614$Up9ra)
        (cadar . g$5613$Up9ra)
        (caadr . g$5612$Up9ra)
        (caaar . g$5611$Up9ra)
        (cddr . g$5610$Up9ra)
        (cdar . g$5609$Up9ra)
        (cadr . g$5608$Up9ra)
        (caar . g$5607$Up9ra)
        (cdr . g$11488$Up9ra)
        (car . g$11487$Up9ra)
        (boolean? . g$11486$Up9ra)
        (boolean=? . g$11485$Up9ra)
        (atan . g$11484$Up9ra)
        (assertion-violation . g$11483$Up9ra)
        (asin . g$11482$Up9ra)
        (apply . g$11481$Up9ra)
        (append . g$11480$Up9ra)
        (angle . g$11479$Up9ra)
        (acos . g$11478$Up9ra)
        (abs . g$11477$Up9ra)
        (/ . g$11476$Up9ra)
        (* . g$11475$Up9ra)
        (- . g$11474$Up9ra)
        (+ . g$11473$Up9ra)
        (>= . g$11472$Up9ra)
        (> . g$11471$Up9ra)
        (= . g$11470$Up9ra)
        (<= . g$11469$Up9ra)
        (< . g$11468$Up9ra)
        (load/args . g$11306$Up9ra)
        (printf . g$7068$Up9ra)
        (fprintf . g$7069$Up9ra)
        (format . g$7070$Up9ra)
        (get-arity . g$11463$Up9ra)
        (gc-collect . g$11462$Up9ra)
        (clr-type? . g$11461$Up9ra)
        (get-clr-type . g$11460$Up9ra)
        (vector-append . g$11458$Up9ra)
        (vector-filter . g$11457$Up9ra)
        (vector-reverse! . g$11456$Up9ra)
        (vector-contains? . g$11455$Up9ra)
        (vector-index-of . g$11454$Up9ra)
        (vector-copy . g$11453$Up9ra)
        (vector-binary-search . g$11452$Up9ra)
        (get-output-string . g$11451$Up9ra)
        (open-output-string . g$11450$Up9ra)
        (open-input-string . g$11449$Up9ra)
        (string-format . g$11448$Up9ra)
        (trace-printer . g$11303$Up9ra)
        (make-traced-procedure . g$11447$Up9ra)
        (make-traced-macro . g$7089$Up9ra)
        (pmap . g$11446$Up9ra)
        (time-it . g$11445$Up9ra)
        (make-parameter . g$7094$Up9ra)
        (library-locator . g$11444$Up9ra)
        (get-library-paths . g$11443$Up9ra)
        (environment-symbols . g$8350$Up9ra)
        (interaction-environment-symbols . g$8349$Up9ra)
        (library-path . g$7519$Up9ra)
        (library-extensions . g$7520$Up9ra)
        (installed-libraries . g$7540$Up9ra)
        (expand . g$8355$Up9ra)
        (&no-nans . g$11442$Up9ra)
        (&no-infinities . g$11441$Up9ra)
        (&i/o-encoding . g$11440$Up9ra)
        (&i/o-decoding . g$11439$Up9ra)
        (&i/o-port . g$11438$Up9ra)
        (&i/o-file-does-not-exist . g$11437$Up9ra)
        (&i/o-file-already-exists . g$11436$Up9ra)
        (&i/o-file-is-read-only . g$11435$Up9ra)
        (&i/o-file-protection . g$11434$Up9ra)
        (&i/o-filename . g$11433$Up9ra)
        (&i/o-invalid-position . g$11432$Up9ra)
        (&i/o-write . g$11431$Up9ra)
        (&i/o-read . g$11430$Up9ra)
        (&i/o . g$11429$Up9ra)
        (&non-continuable . g$11428$Up9ra)
        (&undefined . g$11427$Up9ra)
        (&syntax . g$11426$Up9ra)
        (&lexical . g$11425$Up9ra)
        (&implementation-restriction . g$11424$Up9ra)
        (&who . g$11422$Up9ra)
        (&irritants . g$11421$Up9ra)
        (&assertion . g$11420$Up9ra)
        (&violation . g$11419$Up9ra)
        (&error . g$11418$Up9ra)
        (&serious . g$11417$Up9ra)
        (&warning . g$11416$Up9ra)
        (&message . g$11415$Up9ra)
        (&condition . g$11414$Up9ra)
        (define-condition-type . g$11413$Up9ra)
        (define-enumeration . g$11412$Up9ra)
        (define-record-type . g$11411$Up9ra)
        (parent-rtd . g$11410$Up9ra)
        (nongenerative . g$11409$Up9ra)
        (opaque . g$11408$Up9ra)
        (sealed . g$11407$Up9ra)
        (protocol . g$11406$Up9ra)
        (parent . g$11405$Up9ra)
        (immutable . g$11404$Up9ra)
        (mutable . g$11403$Up9ra)
        (fields . g$11402$Up9ra)
        (error-handling-mode . g$11401$Up9ra)
        (file-options . g$11400$Up9ra)
        (buffer-mode . g$11399$Up9ra)
        (eol-style . g$11398$Up9ra)
        (guard . g$11397$Up9ra)
        (trace-letrec-syntax . g$11396$Up9ra)
        (trace-let-syntax . g$11395$Up9ra)
        (trace-define-syntax . g$11394$Up9ra)
        (trace-define . g$11393$Up9ra)
        (trace-lambda . g$11392$Up9ra)
        (unsyntax-splicing . g$11391$Up9ra)
        (unsyntax . g$11390$Up9ra)
        (unquote-splicing . g$11389$Up9ra)
        (unquote . g$11388$Up9ra)
        (_ . g$11387$Up9ra)
        (else . g$11386$Up9ra)
        (=> . g$11385$Up9ra)
        (... . g$11384$Up9ra)
        (assert . g$11383$Up9ra)
        (endianness . g$11382$Up9ra)
        (delay . g$11381$Up9ra)
        (time . g$11380$Up9ra)
        (or . g$11379$Up9ra)
        (and . g$11378$Up9ra)
        (do . g$11377$Up9ra)
        (cond . g$11376$Up9ra)
        (let* . g$11375$Up9ra)
        (let . g$11374$Up9ra)
        (identifier-syntax . g$11373$Up9ra)
        (with-syntax . g$11372$Up9ra)
        (quasisyntax . g$11371$Up9ra)
        (quasiquote . g$11370$Up9ra)
        (syntax-rules . g$11369$Up9ra)
        (include-into . g$11368$Up9ra)
        (include . g$11367$Up9ra)
        (let-values . g$11365$Up9ra)
        (let*-values . g$11364$Up9ra)
        (record-constructor-descriptor . g$11363$Up9ra)
        (record-type-descriptor . g$11362$Up9ra)
        (fluid-let-syntax . g$11361$Up9ra)
        (case . g$11360$Up9ra)
        (parameterize . g$11359$Up9ra)
        (unless . g$11358$Up9ra)
        (when . g$11357$Up9ra)
        (if . g$11356$Up9ra)
        (letrec* . g$11355$Up9ra)
        (letrec . g$11354$Up9ra)
        (case-lambda . g$11352$Up9ra)
        (lambda . g$11351$Up9ra)
        (syntax . g$11350$Up9ra)
        (syntax-case . g$11349$Up9ra)
        (quote . g$11348$Up9ra)
        (letrec-syntax . g$11346$Up9ra)
        (let-syntax . g$11345$Up9ra)
        (set! . g$11344$Up9ra)
        (import . g$11343$Up9ra)
        (library . g$11342$Up9ra)
        (begin . g$11341$Up9ra)
        (module . g$11340$Up9ra)
        (define-syntax . g$11339$Up9ra)
        (define . g$11338$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$11983$Up9ra
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$11443$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6891$Up9ra
      'g$11984$Up9ra
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$11924$Up9ra)
        (annotation-source . g$11923$Up9ra)
        (annotation-expression . g$11922$Up9ra)
        (annotation? . g$11921$Up9ra)
        (read-annotated . g$11920$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6891$Up9ra
      'g$11985$Up9ra
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$11890$Up9ra)
        (serialize-library . g$11889$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6891$Up9ra
      'g$11986$Up9ra
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((variable-transformer-procedure . g$7980$Up9ra)
        (variable-transformer? . g$7979$Up9ra)
        (eqv-hash . g$11466$Up9ra)
        (eq-hash . g$11465$Up9ra)
        (reverse! . g$11464$Up9ra)
        (format . g$7070$Up9ra)
        (get-command-line . g$11459$Up9ra)
        (make-traced-procedure . g$11447$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6891$Up9ra
      'g$11987$Up9ra
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$11467$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$11988$Up9ra
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$11908$Up9ra)
        (clr-field-set!-internal . g$11907$Up9ra)
        (clr-field-get-internal . g$11906$Up9ra)
        (clr-cast-internal . g$11905$Up9ra)
        (clr-call-internal . g$11904$Up9ra)
        (clr-new-internal . g$11903$Up9ra)
        (clr-new-array-internal . g$11902$Up9ra)
        (clr-is-internal . g$11901$Up9ra)
        (clr-reference-internal . g$11900$Up9ra)
        (clr-using-internal . g$11899$Up9ra)
        (clr-clear-usings-internal . g$11898$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$11989$Up9ra
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$11389$Up9ra)
        (unquote . g$11388$Up9ra)
        (delay . g$11381$Up9ra)
        (or . g$11379$Up9ra)
        (and . g$11378$Up9ra)
        (do . g$11377$Up9ra)
        (cond . g$11376$Up9ra)
        (let* . g$11375$Up9ra)
        (let . g$11374$Up9ra)
        (quasiquote . g$11370$Up9ra)
        (syntax-rules . g$11369$Up9ra)
        (case . g$11360$Up9ra)
        (if . g$11356$Up9ra)
        (letrec . g$11354$Up9ra)
        (lambda . g$11351$Up9ra)
        (quote . g$11348$Up9ra)
        (letrec-syntax . g$11346$Up9ra)
        (let-syntax . g$11345$Up9ra)
        (set! . g$11344$Up9ra)
        (begin . g$11341$Up9ra)
        (define-syntax . g$11339$Up9ra)
        (define . g$11338$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6891$Up9ra
      'g$11990$Up9ra
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((interaction-environment . g$8376$Up9ra)
        (char-ready? . g$11888$Up9ra)
        (string-ci>? . g$11879$Up9ra)
        (string-ci>=? . g$11878$Up9ra)
        (string-ci=? . g$11877$Up9ra)
        (string-ci<? . g$11876$Up9ra)
        (string-ci<=? . g$11875$Up9ra)
        (char-whitespace? . g$11874$Up9ra)
        (char-upper-case? . g$11873$Up9ra)
        (char-numeric? . g$11871$Up9ra)
        (char-lower-case? . g$11870$Up9ra)
        (char-upcase . g$11868$Up9ra)
        (char-downcase . g$11865$Up9ra)
        (char-ci>? . g$11864$Up9ra)
        (char-ci>=? . g$11863$Up9ra)
        (char-ci=? . g$11862$Up9ra)
        (char-ci<? . g$11861$Up9ra)
        (char-ci<=? . g$11860$Up9ra)
        (char-alphabetic? . g$11859$Up9ra)
        (call-with-output-file . g$11827$Up9ra)
        (call-with-input-file . g$11826$Up9ra)
        (write-char . g$11825$Up9ra)
        (write . g$11824$Up9ra)
        (with-output-to-file . g$11823$Up9ra)
        (with-input-from-file . g$11822$Up9ra)
        (read-char . g$11821$Up9ra)
        (read . g$11820$Up9ra)
        (peek-char . g$11819$Up9ra)
        (open-output-file . g$11818$Up9ra)
        (open-input-file . g$11817$Up9ra)
        (newline . g$11816$Up9ra)
        (display . g$11815$Up9ra)
        (close-output-port . g$11814$Up9ra)
        (close-input-port . g$11813$Up9ra)
        (eof-object? . g$11812$Up9ra)
        (eof-object . g$11811$Up9ra)
        (current-error-port . g$11810$Up9ra)
        (current-output-port . g$11809$Up9ra)
        (current-input-port . g$11808$Up9ra)
        (output-port? . g$11807$Up9ra)
        (input-port? . g$11806$Up9ra)
        (scheme-report-environment . g$8354$Up9ra)
        (quotient . g$6511$Up9ra)
        (null-environment . g$8353$Up9ra)
        (remainder . g$6512$Up9ra)
        (modulo . g$6513$Up9ra)
        (inexact->exact . g$11743$Up9ra)
        (force . g$11742$Up9ra)
        (exact->inexact . g$11741$Up9ra)
        (string-fill! . g$11739$Up9ra)
        (string-set! . g$11738$Up9ra)
        (set-cdr! . g$11737$Up9ra)
        (set-car! . g$11736$Up9ra)
        (memv . g$11735$Up9ra)
        (memq . g$11734$Up9ra)
        (member . g$6089$Up9ra)
        (assv . g$6086$Up9ra)
        (assq . g$11733$Up9ra)
        (assoc . g$6087$Up9ra)
        (eval . g$8356$Up9ra)
        (zero? . g$11600$Up9ra)
        (vector? . g$11599$Up9ra)
        (vector-set! . g$11598$Up9ra)
        (vector-ref . g$11597$Up9ra)
        (vector-length . g$11595$Up9ra)
        (vector-fill! . g$11593$Up9ra)
        (vector->list . g$11592$Up9ra)
        (vector . g$11591$Up9ra)
        (values . g$11590$Up9ra)
        (truncate . g$11589$Up9ra)
        (tan . g$11588$Up9ra)
        (symbol? . g$11587$Up9ra)
        (symbol->string . g$11585$Up9ra)
        (substring . g$11584$Up9ra)
        (string? . g$11583$Up9ra)
        (string>? . g$11582$Up9ra)
        (string>=? . g$11581$Up9ra)
        (string=? . g$11580$Up9ra)
        (string<? . g$11579$Up9ra)
        (string<=? . g$11578$Up9ra)
        (string-ref . g$11577$Up9ra)
        (string-length . g$11576$Up9ra)
        (string-copy . g$11574$Up9ra)
        (string-append . g$11573$Up9ra)
        (string->symbol . g$11572$Up9ra)
        (string->number . g$11571$Up9ra)
        (string->list . g$11570$Up9ra)
        (string . g$11569$Up9ra)
        (sqrt . g$11568$Up9ra)
        (sin . g$11567$Up9ra)
        (round . g$11566$Up9ra)
        (reverse . g$11565$Up9ra)
        (real? . g$11564$Up9ra)
        (real-part . g$11562$Up9ra)
        (rationalize . g$5635$Up9ra)
        (rational? . g$11561$Up9ra)
        (procedure? . g$11559$Up9ra)
        (positive? . g$11558$Up9ra)
        (pair? . g$11557$Up9ra)
        (odd? . g$11556$Up9ra)
        (numerator . g$11555$Up9ra)
        (number? . g$11554$Up9ra)
        (number->string . g$11553$Up9ra)
        (null? . g$11552$Up9ra)
        (not . g$11551$Up9ra)
        (negative? . g$11550$Up9ra)
        (min . g$11548$Up9ra)
        (max . g$11547$Up9ra)
        (map . g$11546$Up9ra)
        (make-vector . g$11545$Up9ra)
        (make-string . g$11544$Up9ra)
        (make-rectangular . g$11543$Up9ra)
        (make-polar . g$11542$Up9ra)
        (magnitude . g$11541$Up9ra)
        (log . g$11540$Up9ra)
        (list? . g$11539$Up9ra)
        (list-tail . g$11538$Up9ra)
        (list-ref . g$11537$Up9ra)
        (list->vector . g$11536$Up9ra)
        (list->string . g$11535$Up9ra)
        (list . g$11534$Up9ra)
        (length . g$11533$Up9ra)
        (lcm . g$11532$Up9ra)
        (integer? . g$11531$Up9ra)
        (integer->char . g$11529$Up9ra)
        (inexact? . g$11527$Up9ra)
        (imag-part . g$11525$Up9ra)
        (gcd . g$11524$Up9ra)
        (for-each . g$11523$Up9ra)
        (floor . g$11522$Up9ra)
        (expt . g$11520$Up9ra)
        (exp . g$11519$Up9ra)
        (exact? . g$11518$Up9ra)
        (even? . g$11515$Up9ra)
        (eqv? . g$11513$Up9ra)
        (equal? . g$11512$Up9ra)
        (eq? . g$11511$Up9ra)
        (dynamic-wind . g$11510$Up9ra)
        (denominator . g$11503$Up9ra)
        (cos . g$11502$Up9ra)
        (cons . g$11501$Up9ra)
        (complex? . g$11500$Up9ra)
        (char? . g$11499$Up9ra)
        (char>? . g$11498$Up9ra)
        (char>=? . g$11497$Up9ra)
        (char=? . g$11496$Up9ra)
        (char<? . g$11495$Up9ra)
        (char<=? . g$11494$Up9ra)
        (char->integer . g$11493$Up9ra)
        (ceiling . g$11492$Up9ra)
        (call-with-values . g$11491$Up9ra)
        (call-with-current-continuation . g$11489$Up9ra)
        (cddddr . g$5634$Up9ra)
        (cdddar . g$5633$Up9ra)
        (cddadr . g$5632$Up9ra)
        (cddaar . g$5631$Up9ra)
        (cdaddr . g$5630$Up9ra)
        (cdadar . g$5629$Up9ra)
        (cdaadr . g$5628$Up9ra)
        (cdaaar . g$5627$Up9ra)
        (cadddr . g$5626$Up9ra)
        (caddar . g$5625$Up9ra)
        (cadadr . g$5624$Up9ra)
        (cadaar . g$5623$Up9ra)
        (caaddr . g$5622$Up9ra)
        (caadar . g$5621$Up9ra)
        (caaadr . g$5620$Up9ra)
        (caaaar . g$5619$Up9ra)
        (cdddr . g$5618$Up9ra)
        (cddar . g$5617$Up9ra)
        (cdadr . g$5616$Up9ra)
        (cdaar . g$5615$Up9ra)
        (caddr . g$5614$Up9ra)
        (cadar . g$5613$Up9ra)
        (caadr . g$5612$Up9ra)
        (caaar . g$5611$Up9ra)
        (cddr . g$5610$Up9ra)
        (cdar . g$5609$Up9ra)
        (cadr . g$5608$Up9ra)
        (caar . g$5607$Up9ra)
        (cdr . g$11488$Up9ra)
        (car . g$11487$Up9ra)
        (boolean? . g$11486$Up9ra)
        (atan . g$11484$Up9ra)
        (asin . g$11482$Up9ra)
        (apply . g$11481$Up9ra)
        (append . g$11480$Up9ra)
        (angle . g$11479$Up9ra)
        (acos . g$11478$Up9ra)
        (abs . g$11477$Up9ra)
        (/ . g$11476$Up9ra)
        (* . g$11475$Up9ra)
        (- . g$11474$Up9ra)
        (+ . g$11473$Up9ra)
        (>= . g$11472$Up9ra)
        (> . g$11471$Up9ra)
        (= . g$11470$Up9ra)
        (<= . g$11469$Up9ra)
        (< . g$11468$Up9ra)
        (unquote-splicing . g$11389$Up9ra)
        (unquote . g$11388$Up9ra)
        (else . g$11386$Up9ra)
        (=> . g$11385$Up9ra)
        (... . g$11384$Up9ra)
        (delay . g$11381$Up9ra)
        (or . g$11379$Up9ra)
        (and . g$11378$Up9ra)
        (do . g$11377$Up9ra)
        (cond . g$11376$Up9ra)
        (let* . g$11375$Up9ra)
        (let . g$11374$Up9ra)
        (quasiquote . g$11370$Up9ra)
        (syntax-rules . g$11369$Up9ra)
        (case . g$11360$Up9ra)
        (if . g$11356$Up9ra)
        (letrec . g$11354$Up9ra)
        (lambda . g$11351$Up9ra)
        (quote . g$11348$Up9ra)
        (letrec-syntax . g$11346$Up9ra)
        (let-syntax . g$11345$Up9ra)
        (set! . g$11344$Up9ra)
        (begin . g$11341$Up9ra)
        (define-syntax . g$11339$Up9ra)
        (define . g$11338$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6891$Up9ra
      'g$11991$Up9ra
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$11887$Up9ra)
        (string-titlecase . g$11886$Up9ra)
        (string-normalize-nfkd . g$11885$Up9ra)
        (string-normalize-nfkc . g$11884$Up9ra)
        (string-normalize-nfd . g$11883$Up9ra)
        (string-normalize-nfc . g$11882$Up9ra)
        (string-foldcase . g$11881$Up9ra)
        (string-downcase . g$11880$Up9ra)
        (string-ci>? . g$11879$Up9ra)
        (string-ci>=? . g$11878$Up9ra)
        (string-ci=? . g$11877$Up9ra)
        (string-ci<? . g$11876$Up9ra)
        (string-ci<=? . g$11875$Up9ra)
        (char-whitespace? . g$11874$Up9ra)
        (char-upper-case? . g$11873$Up9ra)
        (char-title-case? . g$11872$Up9ra)
        (char-numeric? . g$11871$Up9ra)
        (char-lower-case? . g$11870$Up9ra)
        (char-general-category . g$11869$Up9ra)
        (char-upcase . g$11868$Up9ra)
        (char-titlecase . g$11867$Up9ra)
        (char-foldcase . g$11866$Up9ra)
        (char-downcase . g$11865$Up9ra)
        (char-ci>? . g$11864$Up9ra)
        (char-ci>=? . g$11863$Up9ra)
        (char-ci=? . g$11862$Up9ra)
        (char-ci<? . g$11861$Up9ra)
        (char-ci<=? . g$11860$Up9ra)
        (char-alphabetic? . g$11859$Up9ra)
        (make-variable-transformer . g$7978$Up9ra)
        (identifier? . g$8371$Up9ra)
        (generate-temporaries . g$8363$Up9ra)
        (free-identifier=? . g$8364$Up9ra)
        (syntax->datum . g$8373$Up9ra)
        (datum->syntax . g$8372$Up9ra)
        (bound-identifier=? . g$8365$Up9ra)
        (record-type-descriptor? . g$11858$Up9ra)
        (record-predicate . g$11857$Up9ra)
        (record-mutator . g$11856$Up9ra)
        (record-constructor . g$11855$Up9ra)
        (record-accessor . g$11854$Up9ra)
        (make-record-type-descriptor . g$11853$Up9ra)
        (make-record-constructor-descriptor . g$11852$Up9ra)
        (record? . g$11851$Up9ra)
        (record-type-uid . g$11850$Up9ra)
        (record-type-sealed? . g$11849$Up9ra)
        (record-type-parent . g$11848$Up9ra)
        (record-type-opaque? . g$11847$Up9ra)
        (record-type-name . g$11846$Up9ra)
        (record-type-generative? . g$11845$Up9ra)
        (record-type-field-names . g$11844$Up9ra)
        (record-rtd . g$11843$Up9ra)
        (record-field-mutable? . g$11842$Up9ra)
        (delete-file . g$6018$Up9ra)
        (file-exists? . g$6017$Up9ra)
        (vector-sort! . g$11841$Up9ra)
        (vector-sort . g$11840$Up9ra)
        (list-sort . g$6524$Up9ra)
        (symbol-hash . g$11839$Up9ra)
        (string-ci-hash . g$11838$Up9ra)
        (string-hash . g$11837$Up9ra)
        (equal-hash . g$11836$Up9ra)
        (hashtable-equivalence-function . g$11835$Up9ra)
        (make-hashtable . g$11834$Up9ra)
        (hashtable-hash-function . g$11833$Up9ra)
        (make-eqv-hashtable . g$5985$Up9ra)
        (make-eq-hashtable . g$5984$Up9ra)
        (hashtable? . g$11832$Up9ra)
        (hashtable-update! . g$5991$Up9ra)
        (hashtable-size . g$5986$Up9ra)
        (hashtable-set! . g$5988$Up9ra)
        (hashtable-ref . g$5987$Up9ra)
        (hashtable-mutable? . g$11831$Up9ra)
        (hashtable-keys . g$11830$Up9ra)
        (hashtable-entries . g$11829$Up9ra)
        (hashtable-delete! . g$5989$Up9ra)
        (hashtable-copy . g$11828$Up9ra)
        (hashtable-contains? . g$5990$Up9ra)
        (hashtable-clear! . g$5992$Up9ra)
        (call-with-output-file . g$11827$Up9ra)
        (call-with-input-file . g$11826$Up9ra)
        (write-char . g$11825$Up9ra)
        (write . g$11824$Up9ra)
        (with-output-to-file . g$11823$Up9ra)
        (with-input-from-file . g$11822$Up9ra)
        (read-char . g$11821$Up9ra)
        (read . g$11820$Up9ra)
        (peek-char . g$11819$Up9ra)
        (open-output-file . g$11818$Up9ra)
        (open-input-file . g$11817$Up9ra)
        (newline . g$11816$Up9ra)
        (display . g$11815$Up9ra)
        (close-output-port . g$11814$Up9ra)
        (close-input-port . g$11813$Up9ra)
        (eof-object? . g$11812$Up9ra)
        (eof-object . g$11811$Up9ra)
        (current-error-port . g$11810$Up9ra)
        (current-output-port . g$11809$Up9ra)
        (current-input-port . g$11808$Up9ra)
        (output-port? . g$11807$Up9ra)
        (input-port? . g$11806$Up9ra)
        (utf-8-codec . g$11805$Up9ra)
        (utf-16-codec . g$11804$Up9ra)
        (transcoder-error-handling-mode . g$11803$Up9ra)
        (transcoder-eol-style . g$11802$Up9ra)
        (transcoder-codec . g$11801$Up9ra)
        (transcoded-port . g$11800$Up9ra)
        (textual-port? . g$11799$Up9ra)
        (string->bytevector . g$11798$Up9ra)
        (standard-output-port . g$11797$Up9ra)
        (standard-input-port . g$11796$Up9ra)
        (standard-error-port . g$11795$Up9ra)
        (set-port-position! . g$11794$Up9ra)
        (put-u8 . g$11793$Up9ra)
        (put-string . g$11792$Up9ra)
        (put-datum . g$11791$Up9ra)
        (put-char . g$11790$Up9ra)
        (put-bytevector . g$11789$Up9ra)
        (port? . g$11788$Up9ra)
        (port-transcoder . g$11787$Up9ra)
        (port-position . g$11786$Up9ra)
        (port-has-set-port-position!? . g$11785$Up9ra)
        (port-has-port-position? . g$11784$Up9ra)
        (port-eof? . g$11783$Up9ra)
        (output-port-buffer-mode . g$11782$Up9ra)
        (open-string-output-port . g$6915$Up9ra)
        (open-string-input-port . g$11781$Up9ra)
        (open-file-output-port . g$11780$Up9ra)
        (open-file-input/output-port . g$11779$Up9ra)
        (open-file-input-port . g$11778$Up9ra)
        (open-bytevector-output-port . g$11777$Up9ra)
        (open-bytevector-input-port . g$11776$Up9ra)
        (native-transcoder . g$11775$Up9ra)
        (native-eol-style . g$11774$Up9ra)
        (make-transcoder . g$11773$Up9ra)
        (latin-1-codec . g$11772$Up9ra)
        (make-i/o-write-error . g$6772$Up9ra)
        (make-i/o-read-error . g$6758$Up9ra)
        (make-i/o-port-error . g$6877$Up9ra)
        (make-i/o-invalid-position-error . g$6787$Up9ra)
        (make-i/o-filename-error . g$6804$Up9ra)
        (make-i/o-file-protection-error . g$6820$Up9ra)
        (make-i/o-file-is-read-only-error . g$6834$Up9ra)
        (make-i/o-file-does-not-exist-error . g$6862$Up9ra)
        (make-i/o-file-already-exists-error . g$6848$Up9ra)
        (make-i/o-error . g$6744$Up9ra)
        (make-i/o-encoding-error . g$6908$Up9ra)
        (make-i/o-decoding-error . g$6893$Up9ra)
        (make-custom-textual-output-port . g$11771$Up9ra)
        (make-custom-textual-input/output-port . g$11770$Up9ra)
        (make-custom-textual-input-port . g$11769$Up9ra)
        (make-custom-binary-output-port . g$11768$Up9ra)
        (make-custom-binary-input/output-port . g$11767$Up9ra)
        (make-custom-binary-input-port . g$11766$Up9ra)
        (make-bytevector . g$11765$Up9ra)
        (lookahead-u8 . g$11764$Up9ra)
        (lookahead-char . g$11763$Up9ra)
        (i/o-write-error? . g$6773$Up9ra)
        (i/o-read-error? . g$6759$Up9ra)
        (i/o-port-error? . g$6879$Up9ra)
        (i/o-invalid-position-error? . g$6789$Up9ra)
        (i/o-filename-error? . g$6806$Up9ra)
        (i/o-file-protection-error? . g$6821$Up9ra)
        (i/o-file-is-read-only-error? . g$6835$Up9ra)
        (i/o-file-does-not-exist-error? . g$6863$Up9ra)
        (i/o-file-already-exists-error? . g$6849$Up9ra)
        (i/o-error? . g$6745$Up9ra)
        (i/o-error-port . g$6880$Up9ra)
        (i/o-error-filename . g$6807$Up9ra)
        (i/o-encoding-error? . g$6910$Up9ra)
        (i/o-encoding-error-char . g$6911$Up9ra)
        (i/o-decoding-error? . g$6894$Up9ra)
        (get-u8 . g$11762$Up9ra)
        (get-string-n! . g$11761$Up9ra)
        (get-string-n . g$11760$Up9ra)
        (get-string-all . g$11759$Up9ra)
        (get-line . g$11758$Up9ra)
        (get-datum . g$11757$Up9ra)
        (get-char . g$11756$Up9ra)
        (get-bytevector-some . g$11755$Up9ra)
        (get-bytevector-n! . g$11754$Up9ra)
        (get-bytevector-n . g$11753$Up9ra)
        (get-bytevector-all . g$11752$Up9ra)
        (flush-output-port . g$11751$Up9ra)
        (close-port . g$11750$Up9ra)
        (call-with-string-output-port . g$11749$Up9ra)
        (call-with-port . g$11748$Up9ra)
        (call-with-bytevector-output-port . g$11747$Up9ra)
        (bytevector->string . g$11746$Up9ra)
        (buffer-mode? . g$11745$Up9ra)
        (binary-port? . g$11744$Up9ra)
        (exit . g$11740$Up9ra)
        (command-line . g$11304$Up9ra)
        (remove . g$6098$Up9ra)
        (remv . g$6099$Up9ra)
        (remp . g$6084$Up9ra)
        (remq . g$6100$Up9ra)
        (partition . g$6083$Up9ra)
        (memv . g$11735$Up9ra)
        (memq . g$11734$Up9ra)
        (memp . g$6090$Up9ra)
        (member . g$6089$Up9ra)
        (exists . g$6094$Up9ra)
        (for-all . g$6093$Up9ra)
        (fold-right . g$6097$Up9ra)
        (fold-left . g$6096$Up9ra)
        (find . g$6082$Up9ra)
        (filter . g$6085$Up9ra)
        (cons* . g$6095$Up9ra)
        (assv . g$6086$Up9ra)
        (assq . g$11733$Up9ra)
        (assp . g$6088$Up9ra)
        (assoc . g$6087$Up9ra)
        (with-exception-handler . g$11732$Up9ra)
        (raise-continuable . g$11731$Up9ra)
        (raise . g$11730$Up9ra)
        (make-enumeration . g$6962$Up9ra)
        (enum-set=? . g$6969$Up9ra)
        (enum-set-universe . g$6963$Up9ra)
        (enum-set-union . g$6970$Up9ra)
        (enum-set-subset? . g$6968$Up9ra)
        (enum-set-projection . g$6974$Up9ra)
        (enum-set-member? . g$6967$Up9ra)
        (enum-set-intersection . g$6971$Up9ra)
        (enum-set-indexer . g$6964$Up9ra)
        (enum-set-difference . g$6972$Up9ra)
        (enum-set-constructor . g$6965$Up9ra)
        (enum-set-complement . g$6973$Up9ra)
        (enum-set->list . g$6966$Up9ra)
        (who-condition? . g$6422$Up9ra)
        (warning? . g$6333$Up9ra)
        (violation? . g$6375$Up9ra)
        (undefined-violation? . g$6499$Up9ra)
        (syntax-violation? . g$6483$Up9ra)
        (syntax-violation-subform . g$6485$Up9ra)
        (syntax-violation-form . g$6484$Up9ra)
        (syntax-violation . g$8370$Up9ra)
        (simple-conditions . g$11729$Up9ra)
        (serious-condition? . g$6347$Up9ra)
        (non-continuable-violation? . g$6437$Up9ra)
        (message-condition? . g$6318$Up9ra)
        (make-who-condition . g$6420$Up9ra)
        (make-warning . g$6332$Up9ra)
        (make-violation . g$6374$Up9ra)
        (make-undefined-violation . g$6498$Up9ra)
        (make-syntax-violation . g$6480$Up9ra)
        (make-serious-condition . g$6346$Up9ra)
        (make-non-continuable-violation . g$6436$Up9ra)
        (make-message-condition . g$6316$Up9ra)
        (make-lexical-violation . g$6464$Up9ra)
        (make-irritants-condition . g$6403$Up9ra)
        (make-implementation-restriction-violation . g$6450$Up9ra)
        (make-error . g$6360$Up9ra)
        (make-assertion-violation . g$6388$Up9ra)
        (lexical-violation? . g$6465$Up9ra)
        (irritants-condition? . g$6405$Up9ra)
        (implementation-restriction-violation? . g$6451$Up9ra)
        (error? . g$6361$Up9ra)
        (condition-who . g$6423$Up9ra)
        (condition-predicate . g$11728$Up9ra)
        (condition-message . g$6319$Up9ra)
        (condition-irritants . g$6406$Up9ra)
        (condition-accessor . g$11727$Up9ra)
        (condition . g$11726$Up9ra)
        (assertion-violation? . g$6389$Up9ra)
        (condition? . g$11725$Up9ra)
        (utf32->string . g$11724$Up9ra)
        (utf16->string . g$11723$Up9ra)
        (utf8->string . g$11722$Up9ra)
        (uint-list->bytevector . g$11721$Up9ra)
        (u8-list->bytevector . g$11720$Up9ra)
        (string->utf8 . g$11719$Up9ra)
        (string->utf32 . g$11718$Up9ra)
        (string->utf16 . g$11717$Up9ra)
        (sint-list->bytevector . g$11716$Up9ra)
        (native-endianness . g$6174$Up9ra)
        (bytevector? . g$11715$Up9ra)
        (bytevector=? . g$11714$Up9ra)
        (bytevector-uint-set! . g$11713$Up9ra)
        (bytevector-uint-ref . g$11712$Up9ra)
        (bytevector-u8-set! . g$11711$Up9ra)
        (bytevector-u8-ref . g$11710$Up9ra)
        (bytevector-u64-set! . g$6195$Up9ra)
        (bytevector-u64-ref . g$6191$Up9ra)
        (bytevector-u64-native-set! . g$6197$Up9ra)
        (bytevector-u64-native-ref . g$6193$Up9ra)
        (bytevector-u32-set! . g$6187$Up9ra)
        (bytevector-u32-ref . g$6183$Up9ra)
        (bytevector-u32-native-set! . g$6189$Up9ra)
        (bytevector-u32-native-ref . g$6185$Up9ra)
        (bytevector-u16-set! . g$6179$Up9ra)
        (bytevector-u16-ref . g$6175$Up9ra)
        (bytevector-u16-native-set! . g$6181$Up9ra)
        (bytevector-u16-native-ref . g$6177$Up9ra)
        (bytevector-sint-set! . g$11709$Up9ra)
        (bytevector-sint-ref . g$11708$Up9ra)
        (bytevector-s8-set! . g$11707$Up9ra)
        (bytevector-s8-ref . g$11706$Up9ra)
        (bytevector-s64-set! . g$6196$Up9ra)
        (bytevector-s64-ref . g$6192$Up9ra)
        (bytevector-s64-native-set! . g$6198$Up9ra)
        (bytevector-s64-native-ref . g$6194$Up9ra)
        (bytevector-s32-set! . g$6188$Up9ra)
        (bytevector-s32-ref . g$6184$Up9ra)
        (bytevector-s32-native-set! . g$6190$Up9ra)
        (bytevector-s32-native-ref . g$6186$Up9ra)
        (bytevector-s16-set! . g$6180$Up9ra)
        (bytevector-s16-ref . g$6176$Up9ra)
        (bytevector-s16-native-set! . g$6182$Up9ra)
        (bytevector-s16-native-ref . g$6178$Up9ra)
        (bytevector-length . g$11705$Up9ra)
        (bytevector-ieee-single-set! . g$11704$Up9ra)
        (bytevector-ieee-single-ref . g$11703$Up9ra)
        (bytevector-ieee-single-native-set! . g$6201$Up9ra)
        (bytevector-ieee-single-native-ref . g$6199$Up9ra)
        (bytevector-ieee-double-set! . g$11702$Up9ra)
        (bytevector-ieee-double-ref . g$11701$Up9ra)
        (bytevector-ieee-double-native-set! . g$6202$Up9ra)
        (bytevector-ieee-double-native-ref . g$6200$Up9ra)
        (bytevector-fill! . g$11700$Up9ra)
        (bytevector-copy! . g$11699$Up9ra)
        (bytevector-copy . g$11698$Up9ra)
        (bytevector->uint-list . g$11697$Up9ra)
        (bytevector->u8-list . g$11696$Up9ra)
        (bytevector->sint-list . g$11695$Up9ra)
        (no-nans-violation? . g$6730$Up9ra)
        (no-infinities-violation? . g$6716$Up9ra)
        (make-no-nans-violation . g$6729$Up9ra)
        (make-no-infinities-violation . g$6715$Up9ra)
        (real->flonum . g$11694$Up9ra)
        (flzero? . g$11693$Up9ra)
        (fltruncate . g$11692$Up9ra)
        (fltan . g$11691$Up9ra)
        (flsqrt . g$11690$Up9ra)
        (flsin . g$11689$Up9ra)
        (flround . g$11688$Up9ra)
        (flpositive? . g$11687$Up9ra)
        (flonum? . g$11686$Up9ra)
        (flodd? . g$11685$Up9ra)
        (flnumerator . g$11684$Up9ra)
        (flnegative? . g$11683$Up9ra)
        (flnan? . g$11682$Up9ra)
        (flmod0 . g$11681$Up9ra)
        (flmod . g$11680$Up9ra)
        (flmin . g$11679$Up9ra)
        (flmax . g$11678$Up9ra)
        (fllog . g$11677$Up9ra)
        (flinteger? . g$11676$Up9ra)
        (flinfinite? . g$11675$Up9ra)
        (flfloor . g$11674$Up9ra)
        (flfinite? . g$11673$Up9ra)
        (flexpt . g$11672$Up9ra)
        (flexp . g$11671$Up9ra)
        (fleven? . g$11670$Up9ra)
        (fldiv0-and-mod0 . g$11669$Up9ra)
        (fldiv0 . g$11668$Up9ra)
        (fldiv-and-mod . g$11667$Up9ra)
        (fldiv . g$11666$Up9ra)
        (fldenominator . g$11665$Up9ra)
        (flcos . g$11664$Up9ra)
        (flceiling . g$11663$Up9ra)
        (flatan . g$11662$Up9ra)
        (flasin . g$11661$Up9ra)
        (flacos . g$11660$Up9ra)
        (flabs . g$11659$Up9ra)
        (fl>? . g$11658$Up9ra)
        (fl>=? . g$11657$Up9ra)
        (fl=? . g$11656$Up9ra)
        (fl<? . g$11655$Up9ra)
        (fl<=? . g$11654$Up9ra)
        (fl/ . g$11653$Up9ra)
        (fl- . g$11652$Up9ra)
        (fl+ . g$11651$Up9ra)
        (fl* . g$11650$Up9ra)
        (fixnum->flonum . g$11649$Up9ra)
        (fxzero? . g$11648$Up9ra)
        (fxxor . g$11647$Up9ra)
        (fxrotate-bit-field . g$6661$Up9ra)
        (fxreverse-bit-field . g$11646$Up9ra)
        (fxpositive? . g$11645$Up9ra)
        (fxodd? . g$11644$Up9ra)
        (fxnot . g$11643$Up9ra)
        (fxnegative? . g$11642$Up9ra)
        (fxmod0 . g$11641$Up9ra)
        (fxmod . g$11640$Up9ra)
        (fxmin . g$11639$Up9ra)
        (fxmax . g$11638$Up9ra)
        (fxlength . g$11637$Up9ra)
        (fxior . g$11636$Up9ra)
        (fxif . g$6655$Up9ra)
        (fxfirst-bit-set . g$11635$Up9ra)
        (fxeven? . g$11634$Up9ra)
        (fxdiv0-and-mod0 . g$11633$Up9ra)
        (fxdiv0 . g$11632$Up9ra)
        (fxdiv-and-mod . g$11631$Up9ra)
        (fxdiv . g$11630$Up9ra)
        (fxcopy-bit-field . g$6658$Up9ra)
        (fxcopy-bit . g$6656$Up9ra)
        (fxbit-set? . g$11629$Up9ra)
        (fxbit-field . g$6657$Up9ra)
        (fxbit-count . g$11628$Up9ra)
        (fxarithmetic-shift-right . g$6660$Up9ra)
        (fxarithmetic-shift-left . g$6659$Up9ra)
        (fxarithmetic-shift . g$11627$Up9ra)
        (fxand . g$11626$Up9ra)
        (fx>? . g$11625$Up9ra)
        (fx>=? . g$11624$Up9ra)
        (fx=? . g$11623$Up9ra)
        (fx<? . g$11622$Up9ra)
        (fx<=? . g$11621$Up9ra)
        (fx-/carry . g$11620$Up9ra)
        (fx- . g$11619$Up9ra)
        (fx+/carry . g$11618$Up9ra)
        (fx+ . g$11617$Up9ra)
        (fx*/carry . g$11616$Up9ra)
        (fx* . g$11615$Up9ra)
        (greatest-fixnum . g$11614$Up9ra)
        (least-fixnum . g$11613$Up9ra)
        (fixnum-width . g$11612$Up9ra)
        (fixnum? . g$11611$Up9ra)
        (bitwise-rotate-bit-field . g$6609$Up9ra)
        (bitwise-reverse-bit-field . g$6610$Up9ra)
        (bitwise-length . g$11610$Up9ra)
        (bitwise-if . g$6603$Up9ra)
        (bitwise-first-bit-set . g$11609$Up9ra)
        (bitwise-copy-bit-field . g$6606$Up9ra)
        (bitwise-copy-bit . g$6604$Up9ra)
        (bitwise-bit-set? . g$11608$Up9ra)
        (bitwise-bit-field . g$11607$Up9ra)
        (bitwise-bit-count . g$11606$Up9ra)
        (bitwise-xor . g$11605$Up9ra)
        (bitwise-ior . g$11604$Up9ra)
        (bitwise-and . g$11603$Up9ra)
        (bitwise-not . g$11602$Up9ra)
        (bitwise-arithmetic-shift-right . g$6608$Up9ra)
        (bitwise-arithmetic-shift-left . g$6607$Up9ra)
        (bitwise-arithmetic-shift . g$11601$Up9ra)
        (zero? . g$11600$Up9ra)
        (vector? . g$11599$Up9ra)
        (vector-set! . g$11598$Up9ra)
        (vector-ref . g$11597$Up9ra)
        (vector-map . g$11596$Up9ra)
        (vector-length . g$11595$Up9ra)
        (vector-for-each . g$11594$Up9ra)
        (vector-fill! . g$11593$Up9ra)
        (vector->list . g$11592$Up9ra)
        (vector . g$11591$Up9ra)
        (values . g$11590$Up9ra)
        (truncate . g$11589$Up9ra)
        (tan . g$11588$Up9ra)
        (symbol? . g$11587$Up9ra)
        (symbol=? . g$11586$Up9ra)
        (symbol->string . g$11585$Up9ra)
        (substring . g$11584$Up9ra)
        (string? . g$11583$Up9ra)
        (string>? . g$11582$Up9ra)
        (string>=? . g$11581$Up9ra)
        (string=? . g$11580$Up9ra)
        (string<? . g$11579$Up9ra)
        (string<=? . g$11578$Up9ra)
        (string-ref . g$11577$Up9ra)
        (string-length . g$11576$Up9ra)
        (string-for-each . g$11575$Up9ra)
        (string-copy . g$11574$Up9ra)
        (string-append . g$11573$Up9ra)
        (string->symbol . g$11572$Up9ra)
        (string->number . g$11571$Up9ra)
        (string->list . g$11570$Up9ra)
        (string . g$11569$Up9ra)
        (sqrt . g$11568$Up9ra)
        (sin . g$11567$Up9ra)
        (round . g$11566$Up9ra)
        (reverse . g$11565$Up9ra)
        (real? . g$11564$Up9ra)
        (real-valued? . g$11563$Up9ra)
        (real-part . g$11562$Up9ra)
        (rationalize . g$5635$Up9ra)
        (rational? . g$11561$Up9ra)
        (rational-valued? . g$11560$Up9ra)
        (procedure? . g$11559$Up9ra)
        (positive? . g$11558$Up9ra)
        (pair? . g$11557$Up9ra)
        (odd? . g$11556$Up9ra)
        (numerator . g$11555$Up9ra)
        (number? . g$11554$Up9ra)
        (number->string . g$11553$Up9ra)
        (null? . g$11552$Up9ra)
        (not . g$11551$Up9ra)
        (negative? . g$11550$Up9ra)
        (nan? . g$11549$Up9ra)
        (min . g$11548$Up9ra)
        (max . g$11547$Up9ra)
        (map . g$11546$Up9ra)
        (make-vector . g$11545$Up9ra)
        (make-string . g$11544$Up9ra)
        (make-rectangular . g$11543$Up9ra)
        (make-polar . g$11542$Up9ra)
        (magnitude . g$11541$Up9ra)
        (log . g$11540$Up9ra)
        (list? . g$11539$Up9ra)
        (list-tail . g$11538$Up9ra)
        (list-ref . g$11537$Up9ra)
        (list->vector . g$11536$Up9ra)
        (list->string . g$11535$Up9ra)
        (list . g$11534$Up9ra)
        (length . g$11533$Up9ra)
        (lcm . g$11532$Up9ra)
        (integer? . g$11531$Up9ra)
        (integer-valued? . g$11530$Up9ra)
        (integer->char . g$11529$Up9ra)
        (infinite? . g$11528$Up9ra)
        (inexact? . g$11527$Up9ra)
        (inexact . g$11526$Up9ra)
        (imag-part . g$11525$Up9ra)
        (gcd . g$11524$Up9ra)
        (for-each . g$11523$Up9ra)
        (floor . g$11522$Up9ra)
        (finite? . g$11521$Up9ra)
        (expt . g$11520$Up9ra)
        (exp . g$11519$Up9ra)
        (exact? . g$11518$Up9ra)
        (exact-integer-sqrt . g$11517$Up9ra)
        (exact . g$11516$Up9ra)
        (even? . g$11515$Up9ra)
        (error . g$11514$Up9ra)
        (eqv? . g$11513$Up9ra)
        (equal? . g$11512$Up9ra)
        (eq? . g$11511$Up9ra)
        (dynamic-wind . g$11510$Up9ra)
        (div0-and-mod0 . g$11509$Up9ra)
        (mod0 . g$11508$Up9ra)
        (div0 . g$11507$Up9ra)
        (div-and-mod . g$11506$Up9ra)
        (mod . g$11505$Up9ra)
        (div . g$11504$Up9ra)
        (denominator . g$11503$Up9ra)
        (cos . g$11502$Up9ra)
        (cons . g$11501$Up9ra)
        (complex? . g$11500$Up9ra)
        (char? . g$11499$Up9ra)
        (char>? . g$11498$Up9ra)
        (char>=? . g$11497$Up9ra)
        (char=? . g$11496$Up9ra)
        (char<? . g$11495$Up9ra)
        (char<=? . g$11494$Up9ra)
        (char->integer . g$11493$Up9ra)
        (ceiling . g$11492$Up9ra)
        (call-with-values . g$11491$Up9ra)
        (call/cc . g$11490$Up9ra)
        (call-with-current-continuation . g$11489$Up9ra)
        (cddddr . g$5634$Up9ra)
        (cdddar . g$5633$Up9ra)
        (cddadr . g$5632$Up9ra)
        (cddaar . g$5631$Up9ra)
        (cdaddr . g$5630$Up9ra)
        (cdadar . g$5629$Up9ra)
        (cdaadr . g$5628$Up9ra)
        (cdaaar . g$5627$Up9ra)
        (cadddr . g$5626$Up9ra)
        (caddar . g$5625$Up9ra)
        (cadadr . g$5624$Up9ra)
        (cadaar . g$5623$Up9ra)
        (caaddr . g$5622$Up9ra)
        (caadar . g$5621$Up9ra)
        (caaadr . g$5620$Up9ra)
        (caaaar . g$5619$Up9ra)
        (cdddr . g$5618$Up9ra)
        (cddar . g$5617$Up9ra)
        (cdadr . g$5616$Up9ra)
        (cdaar . g$5615$Up9ra)
        (caddr . g$5614$Up9ra)
        (cadar . g$5613$Up9ra)
        (caadr . g$5612$Up9ra)
        (caaar . g$5611$Up9ra)
        (cddr . g$5610$Up9ra)
        (cdar . g$5609$Up9ra)
        (cadr . g$5608$Up9ra)
        (caar . g$5607$Up9ra)
        (cdr . g$11488$Up9ra)
        (car . g$11487$Up9ra)
        (boolean? . g$11486$Up9ra)
        (boolean=? . g$11485$Up9ra)
        (atan . g$11484$Up9ra)
        (assertion-violation . g$11483$Up9ra)
        (asin . g$11482$Up9ra)
        (apply . g$11481$Up9ra)
        (append . g$11480$Up9ra)
        (angle . g$11479$Up9ra)
        (acos . g$11478$Up9ra)
        (abs . g$11477$Up9ra)
        (/ . g$11476$Up9ra)
        (* . g$11475$Up9ra)
        (- . g$11474$Up9ra)
        (+ . g$11473$Up9ra)
        (>= . g$11472$Up9ra)
        (> . g$11471$Up9ra)
        (= . g$11470$Up9ra)
        (<= . g$11469$Up9ra)
        (< . g$11468$Up9ra)
        (&no-nans . g$11442$Up9ra)
        (&no-infinities . g$11441$Up9ra)
        (&i/o-encoding . g$11440$Up9ra)
        (&i/o-decoding . g$11439$Up9ra)
        (&i/o-port . g$11438$Up9ra)
        (&i/o-file-does-not-exist . g$11437$Up9ra)
        (&i/o-file-already-exists . g$11436$Up9ra)
        (&i/o-file-is-read-only . g$11435$Up9ra)
        (&i/o-file-protection . g$11434$Up9ra)
        (&i/o-filename . g$11433$Up9ra)
        (&i/o-invalid-position . g$11432$Up9ra)
        (&i/o-write . g$11431$Up9ra)
        (&i/o-read . g$11430$Up9ra)
        (&i/o . g$11429$Up9ra)
        (&non-continuable . g$11428$Up9ra)
        (&undefined . g$11427$Up9ra)
        (&syntax . g$11426$Up9ra)
        (&lexical . g$11425$Up9ra)
        (&implementation-restriction . g$11424$Up9ra)
        (&who . g$11422$Up9ra)
        (&irritants . g$11421$Up9ra)
        (&assertion . g$11420$Up9ra)
        (&violation . g$11419$Up9ra)
        (&error . g$11418$Up9ra)
        (&serious . g$11417$Up9ra)
        (&warning . g$11416$Up9ra)
        (&message . g$11415$Up9ra)
        (&condition . g$11414$Up9ra)
        (define-condition-type . g$11413$Up9ra)
        (define-enumeration . g$11412$Up9ra)
        (define-record-type . g$11411$Up9ra)
        (parent-rtd . g$11410$Up9ra)
        (nongenerative . g$11409$Up9ra)
        (opaque . g$11408$Up9ra)
        (sealed . g$11407$Up9ra)
        (protocol . g$11406$Up9ra)
        (parent . g$11405$Up9ra)
        (immutable . g$11404$Up9ra)
        (mutable . g$11403$Up9ra)
        (fields . g$11402$Up9ra)
        (error-handling-mode . g$11401$Up9ra)
        (file-options . g$11400$Up9ra)
        (buffer-mode . g$11399$Up9ra)
        (eol-style . g$11398$Up9ra)
        (guard . g$11397$Up9ra)
        (unsyntax-splicing . g$11391$Up9ra)
        (unsyntax . g$11390$Up9ra)
        (unquote-splicing . g$11389$Up9ra)
        (unquote . g$11388$Up9ra)
        (_ . g$11387$Up9ra)
        (else . g$11386$Up9ra)
        (=> . g$11385$Up9ra)
        (... . g$11384$Up9ra)
        (assert . g$11383$Up9ra)
        (endianness . g$11382$Up9ra)
        (or . g$11379$Up9ra)
        (and . g$11378$Up9ra)
        (do . g$11377$Up9ra)
        (cond . g$11376$Up9ra)
        (let* . g$11375$Up9ra)
        (let . g$11374$Up9ra)
        (identifier-syntax . g$11373$Up9ra)
        (with-syntax . g$11372$Up9ra)
        (quasisyntax . g$11371$Up9ra)
        (quasiquote . g$11370$Up9ra)
        (syntax-rules . g$11369$Up9ra)
        (let-values . g$11365$Up9ra)
        (let*-values . g$11364$Up9ra)
        (record-constructor-descriptor . g$11363$Up9ra)
        (record-type-descriptor . g$11362$Up9ra)
        (case . g$11360$Up9ra)
        (unless . g$11358$Up9ra)
        (when . g$11357$Up9ra)
        (if . g$11356$Up9ra)
        (letrec* . g$11355$Up9ra)
        (letrec . g$11354$Up9ra)
        (case-lambda . g$11352$Up9ra)
        (lambda . g$11351$Up9ra)
        (syntax . g$11350$Up9ra)
        (syntax-case . g$11349$Up9ra)
        (quote . g$11348$Up9ra)
        (letrec-syntax . g$11346$Up9ra)
        (let-syntax . g$11345$Up9ra)
        (set! . g$11344$Up9ra)
        (import . g$11343$Up9ra)
        (library . g$11342$Up9ra)
        (begin . g$11341$Up9ra)
        (define-syntax . g$11339$Up9ra)
        (define . g$11338$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$11992$Up9ra
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((interaction-environment . g$8376$Up9ra)
        (scheme-report-environment . g$8354$Up9ra)
        (quotient . g$6511$Up9ra)
        (null-environment . g$8353$Up9ra)
        (remainder . g$6512$Up9ra)
        (modulo . g$6513$Up9ra)
        (inexact->exact . g$11743$Up9ra)
        (force . g$11742$Up9ra)
        (exact->inexact . g$11741$Up9ra)
        (delay . g$11381$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$11993$Up9ra
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$11377$Up9ra)
        (unless . g$11358$Up9ra)
        (when . g$11357$Up9ra)
        (case-lambda . g$11352$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$11994$Up9ra
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$8356$Up9ra) (environment . g$8352$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$11995$Up9ra
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$11737$Up9ra) (set-car! . g$11736$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$11996$Up9ra
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$11739$Up9ra) (string-set! . g$11738$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$11997$Up9ra
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$11740$Up9ra) (command-line . g$11304$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$11998$Up9ra
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$7978$Up9ra)
        (identifier? . g$8371$Up9ra)
        (generate-temporaries . g$8363$Up9ra)
        (free-identifier=? . g$8364$Up9ra)
        (syntax->datum . g$8373$Up9ra)
        (datum->syntax . g$8372$Up9ra)
        (bound-identifier=? . g$8365$Up9ra)
        (syntax-violation . g$8370$Up9ra)
        (unsyntax-splicing . g$11391$Up9ra)
        (unsyntax . g$11390$Up9ra)
        (_ . g$11387$Up9ra)
        (... . g$11384$Up9ra)
        (with-syntax . g$11372$Up9ra)
        (quasisyntax . g$11371$Up9ra)
        (syntax . g$11350$Up9ra)
        (syntax-case . g$11349$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$11999$Up9ra
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$6018$Up9ra)
        (file-exists? . g$6017$Up9ra)
        (make-i/o-write-error . g$6772$Up9ra)
        (make-i/o-read-error . g$6758$Up9ra)
        (make-i/o-port-error . g$6877$Up9ra)
        (make-i/o-invalid-position-error . g$6787$Up9ra)
        (make-i/o-filename-error . g$6804$Up9ra)
        (make-i/o-file-protection-error . g$6820$Up9ra)
        (make-i/o-file-is-read-only-error . g$6834$Up9ra)
        (make-i/o-file-does-not-exist-error . g$6862$Up9ra)
        (make-i/o-file-already-exists-error . g$6848$Up9ra)
        (make-i/o-error . g$6744$Up9ra)
        (i/o-write-error? . g$6773$Up9ra)
        (i/o-read-error? . g$6759$Up9ra)
        (i/o-port-error? . g$6879$Up9ra)
        (i/o-invalid-position-error? . g$6789$Up9ra)
        (i/o-filename-error? . g$6806$Up9ra)
        (i/o-file-protection-error? . g$6821$Up9ra)
        (i/o-file-is-read-only-error? . g$6835$Up9ra)
        (i/o-file-does-not-exist-error? . g$6863$Up9ra)
        (i/o-file-already-exists-error? . g$6849$Up9ra)
        (i/o-error? . g$6745$Up9ra)
        (i/o-error-port . g$6880$Up9ra)
        (i/o-error-filename . g$6807$Up9ra)
        (&i/o-port . g$11438$Up9ra)
        (&i/o-file-does-not-exist . g$11437$Up9ra)
        (&i/o-file-already-exists . g$11436$Up9ra)
        (&i/o-file-is-read-only . g$11435$Up9ra)
        (&i/o-file-protection . g$11434$Up9ra)
        (&i/o-filename . g$11433$Up9ra)
        (&i/o-invalid-position . g$11432$Up9ra)
        (&i/o-write . g$11431$Up9ra)
        (&i/o-read . g$11430$Up9ra)
        (&i/o . g$11429$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12000$Up9ra
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$11841$Up9ra)
        (vector-sort . g$11840$Up9ra)
        (list-sort . g$6524$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12001$Up9ra
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$11600$Up9ra)
        (vector? . g$11599$Up9ra)
        (vector-set! . g$11598$Up9ra)
        (vector-ref . g$11597$Up9ra)
        (vector-map . g$11596$Up9ra)
        (vector-length . g$11595$Up9ra)
        (vector-for-each . g$11594$Up9ra)
        (vector-fill! . g$11593$Up9ra)
        (vector->list . g$11592$Up9ra)
        (vector . g$11591$Up9ra)
        (values . g$11590$Up9ra)
        (truncate . g$11589$Up9ra)
        (tan . g$11588$Up9ra)
        (symbol? . g$11587$Up9ra)
        (symbol=? . g$11586$Up9ra)
        (symbol->string . g$11585$Up9ra)
        (substring . g$11584$Up9ra)
        (string? . g$11583$Up9ra)
        (string>? . g$11582$Up9ra)
        (string>=? . g$11581$Up9ra)
        (string=? . g$11580$Up9ra)
        (string<? . g$11579$Up9ra)
        (string<=? . g$11578$Up9ra)
        (string-ref . g$11577$Up9ra)
        (string-length . g$11576$Up9ra)
        (string-for-each . g$11575$Up9ra)
        (string-copy . g$11574$Up9ra)
        (string-append . g$11573$Up9ra)
        (string->symbol . g$11572$Up9ra)
        (string->number . g$11571$Up9ra)
        (string->list . g$11570$Up9ra)
        (string . g$11569$Up9ra)
        (sqrt . g$11568$Up9ra)
        (sin . g$11567$Up9ra)
        (round . g$11566$Up9ra)
        (reverse . g$11565$Up9ra)
        (real? . g$11564$Up9ra)
        (real-valued? . g$11563$Up9ra)
        (real-part . g$11562$Up9ra)
        (rationalize . g$5635$Up9ra)
        (rational? . g$11561$Up9ra)
        (rational-valued? . g$11560$Up9ra)
        (procedure? . g$11559$Up9ra)
        (positive? . g$11558$Up9ra)
        (pair? . g$11557$Up9ra)
        (odd? . g$11556$Up9ra)
        (numerator . g$11555$Up9ra)
        (number? . g$11554$Up9ra)
        (number->string . g$11553$Up9ra)
        (null? . g$11552$Up9ra)
        (not . g$11551$Up9ra)
        (negative? . g$11550$Up9ra)
        (nan? . g$11549$Up9ra)
        (min . g$11548$Up9ra)
        (max . g$11547$Up9ra)
        (map . g$11546$Up9ra)
        (make-vector . g$11545$Up9ra)
        (make-string . g$11544$Up9ra)
        (make-rectangular . g$11543$Up9ra)
        (make-polar . g$11542$Up9ra)
        (magnitude . g$11541$Up9ra)
        (log . g$11540$Up9ra)
        (list? . g$11539$Up9ra)
        (list-tail . g$11538$Up9ra)
        (list-ref . g$11537$Up9ra)
        (list->vector . g$11536$Up9ra)
        (list->string . g$11535$Up9ra)
        (list . g$11534$Up9ra)
        (length . g$11533$Up9ra)
        (lcm . g$11532$Up9ra)
        (integer? . g$11531$Up9ra)
        (integer-valued? . g$11530$Up9ra)
        (integer->char . g$11529$Up9ra)
        (infinite? . g$11528$Up9ra)
        (inexact? . g$11527$Up9ra)
        (inexact . g$11526$Up9ra)
        (imag-part . g$11525$Up9ra)
        (gcd . g$11524$Up9ra)
        (for-each . g$11523$Up9ra)
        (floor . g$11522$Up9ra)
        (finite? . g$11521$Up9ra)
        (expt . g$11520$Up9ra)
        (exp . g$11519$Up9ra)
        (exact? . g$11518$Up9ra)
        (exact-integer-sqrt . g$11517$Up9ra)
        (exact . g$11516$Up9ra)
        (even? . g$11515$Up9ra)
        (error . g$11514$Up9ra)
        (eqv? . g$11513$Up9ra)
        (equal? . g$11512$Up9ra)
        (eq? . g$11511$Up9ra)
        (dynamic-wind . g$11510$Up9ra)
        (div0-and-mod0 . g$11509$Up9ra)
        (mod0 . g$11508$Up9ra)
        (div0 . g$11507$Up9ra)
        (div-and-mod . g$11506$Up9ra)
        (mod . g$11505$Up9ra)
        (div . g$11504$Up9ra)
        (denominator . g$11503$Up9ra)
        (cos . g$11502$Up9ra)
        (cons . g$11501$Up9ra)
        (complex? . g$11500$Up9ra)
        (char? . g$11499$Up9ra)
        (char>? . g$11498$Up9ra)
        (char>=? . g$11497$Up9ra)
        (char=? . g$11496$Up9ra)
        (char<? . g$11495$Up9ra)
        (char<=? . g$11494$Up9ra)
        (char->integer . g$11493$Up9ra)
        (ceiling . g$11492$Up9ra)
        (call-with-values . g$11491$Up9ra)
        (call/cc . g$11490$Up9ra)
        (call-with-current-continuation . g$11489$Up9ra)
        (cddddr . g$5634$Up9ra)
        (cdddar . g$5633$Up9ra)
        (cddadr . g$5632$Up9ra)
        (cddaar . g$5631$Up9ra)
        (cdaddr . g$5630$Up9ra)
        (cdadar . g$5629$Up9ra)
        (cdaadr . g$5628$Up9ra)
        (cdaaar . g$5627$Up9ra)
        (cadddr . g$5626$Up9ra)
        (caddar . g$5625$Up9ra)
        (cadadr . g$5624$Up9ra)
        (cadaar . g$5623$Up9ra)
        (caaddr . g$5622$Up9ra)
        (caadar . g$5621$Up9ra)
        (caaadr . g$5620$Up9ra)
        (caaaar . g$5619$Up9ra)
        (cdddr . g$5618$Up9ra)
        (cddar . g$5617$Up9ra)
        (cdadr . g$5616$Up9ra)
        (cdaar . g$5615$Up9ra)
        (caddr . g$5614$Up9ra)
        (cadar . g$5613$Up9ra)
        (caadr . g$5612$Up9ra)
        (caaar . g$5611$Up9ra)
        (cddr . g$5610$Up9ra)
        (cdar . g$5609$Up9ra)
        (cadr . g$5608$Up9ra)
        (caar . g$5607$Up9ra)
        (cdr . g$11488$Up9ra)
        (car . g$11487$Up9ra)
        (boolean? . g$11486$Up9ra)
        (boolean=? . g$11485$Up9ra)
        (atan . g$11484$Up9ra)
        (assertion-violation . g$11483$Up9ra)
        (asin . g$11482$Up9ra)
        (apply . g$11481$Up9ra)
        (append . g$11480$Up9ra)
        (angle . g$11479$Up9ra)
        (acos . g$11478$Up9ra)
        (abs . g$11477$Up9ra)
        (/ . g$11476$Up9ra)
        (* . g$11475$Up9ra)
        (- . g$11474$Up9ra)
        (+ . g$11473$Up9ra)
        (>= . g$11472$Up9ra)
        (> . g$11471$Up9ra)
        (= . g$11470$Up9ra)
        (<= . g$11469$Up9ra)
        (< . g$11468$Up9ra)
        (unquote-splicing . g$11389$Up9ra)
        (unquote . g$11388$Up9ra)
        (_ . g$11387$Up9ra)
        (else . g$11386$Up9ra)
        (=> . g$11385$Up9ra)
        (... . g$11384$Up9ra)
        (assert . g$11383$Up9ra)
        (or . g$11379$Up9ra)
        (and . g$11378$Up9ra)
        (cond . g$11376$Up9ra)
        (let* . g$11375$Up9ra)
        (let . g$11374$Up9ra)
        (identifier-syntax . g$11373$Up9ra)
        (quasiquote . g$11370$Up9ra)
        (syntax-rules . g$11369$Up9ra)
        (let-values . g$11365$Up9ra)
        (let*-values . g$11364$Up9ra)
        (case . g$11360$Up9ra)
        (if . g$11356$Up9ra)
        (letrec* . g$11355$Up9ra)
        (letrec . g$11354$Up9ra)
        (lambda . g$11351$Up9ra)
        (quote . g$11348$Up9ra)
        (letrec-syntax . g$11346$Up9ra)
        (let-syntax . g$11345$Up9ra)
        (set! . g$11344$Up9ra)
        (begin . g$11341$Up9ra)
        (define-syntax . g$11339$Up9ra)
        (define . g$11338$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12002$Up9ra
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$6098$Up9ra)
        (remv . g$6099$Up9ra)
        (remp . g$6084$Up9ra)
        (remq . g$6100$Up9ra)
        (partition . g$6083$Up9ra)
        (memv . g$11735$Up9ra)
        (memq . g$11734$Up9ra)
        (memp . g$6090$Up9ra)
        (member . g$6089$Up9ra)
        (exists . g$6094$Up9ra)
        (for-all . g$6093$Up9ra)
        (fold-right . g$6097$Up9ra)
        (fold-left . g$6096$Up9ra)
        (find . g$6082$Up9ra)
        (filter . g$6085$Up9ra)
        (cons* . g$6095$Up9ra)
        (assv . g$6086$Up9ra)
        (assq . g$11733$Up9ra)
        (assp . g$6088$Up9ra)
        (assoc . g$6087$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12003$Up9ra
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$11827$Up9ra)
        (call-with-input-file . g$11826$Up9ra)
        (write-char . g$11825$Up9ra)
        (write . g$11824$Up9ra)
        (with-output-to-file . g$11823$Up9ra)
        (with-input-from-file . g$11822$Up9ra)
        (read-char . g$11821$Up9ra)
        (read . g$11820$Up9ra)
        (peek-char . g$11819$Up9ra)
        (open-output-file . g$11818$Up9ra)
        (open-input-file . g$11817$Up9ra)
        (newline . g$11816$Up9ra)
        (display . g$11815$Up9ra)
        (close-output-port . g$11814$Up9ra)
        (close-input-port . g$11813$Up9ra)
        (eof-object? . g$11812$Up9ra)
        (eof-object . g$11811$Up9ra)
        (current-error-port . g$11810$Up9ra)
        (current-output-port . g$11809$Up9ra)
        (current-input-port . g$11808$Up9ra)
        (output-port? . g$11807$Up9ra)
        (input-port? . g$11806$Up9ra)
        (make-i/o-write-error . g$6772$Up9ra)
        (make-i/o-read-error . g$6758$Up9ra)
        (make-i/o-port-error . g$6877$Up9ra)
        (make-i/o-invalid-position-error . g$6787$Up9ra)
        (make-i/o-filename-error . g$6804$Up9ra)
        (make-i/o-file-protection-error . g$6820$Up9ra)
        (make-i/o-file-is-read-only-error . g$6834$Up9ra)
        (make-i/o-file-does-not-exist-error . g$6862$Up9ra)
        (make-i/o-file-already-exists-error . g$6848$Up9ra)
        (make-i/o-error . g$6744$Up9ra)
        (i/o-write-error? . g$6773$Up9ra)
        (i/o-read-error? . g$6759$Up9ra)
        (i/o-port-error? . g$6879$Up9ra)
        (i/o-invalid-position-error? . g$6789$Up9ra)
        (i/o-filename-error? . g$6806$Up9ra)
        (i/o-file-protection-error? . g$6821$Up9ra)
        (i/o-file-is-read-only-error? . g$6835$Up9ra)
        (i/o-file-does-not-exist-error? . g$6863$Up9ra)
        (i/o-file-already-exists-error? . g$6849$Up9ra)
        (i/o-error? . g$6745$Up9ra)
        (i/o-error-port . g$6880$Up9ra)
        (i/o-error-filename . g$6807$Up9ra)
        (&i/o-port . g$11438$Up9ra)
        (&i/o-file-does-not-exist . g$11437$Up9ra)
        (&i/o-file-already-exists . g$11436$Up9ra)
        (&i/o-file-is-read-only . g$11435$Up9ra)
        (&i/o-file-protection . g$11434$Up9ra)
        (&i/o-filename . g$11433$Up9ra)
        (&i/o-invalid-position . g$11432$Up9ra)
        (&i/o-write . g$11431$Up9ra)
        (&i/o-read . g$11430$Up9ra)
        (&i/o . g$11429$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12004$Up9ra
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$11765$Up9ra)
        (utf32->string . g$11724$Up9ra)
        (utf16->string . g$11723$Up9ra)
        (utf8->string . g$11722$Up9ra)
        (uint-list->bytevector . g$11721$Up9ra)
        (u8-list->bytevector . g$11720$Up9ra)
        (string->utf8 . g$11719$Up9ra)
        (string->utf32 . g$11718$Up9ra)
        (string->utf16 . g$11717$Up9ra)
        (sint-list->bytevector . g$11716$Up9ra)
        (native-endianness . g$6174$Up9ra)
        (bytevector? . g$11715$Up9ra)
        (bytevector=? . g$11714$Up9ra)
        (bytevector-uint-set! . g$11713$Up9ra)
        (bytevector-uint-ref . g$11712$Up9ra)
        (bytevector-u8-set! . g$11711$Up9ra)
        (bytevector-u8-ref . g$11710$Up9ra)
        (bytevector-u64-set! . g$6195$Up9ra)
        (bytevector-u64-ref . g$6191$Up9ra)
        (bytevector-u64-native-set! . g$6197$Up9ra)
        (bytevector-u64-native-ref . g$6193$Up9ra)
        (bytevector-u32-set! . g$6187$Up9ra)
        (bytevector-u32-ref . g$6183$Up9ra)
        (bytevector-u32-native-set! . g$6189$Up9ra)
        (bytevector-u32-native-ref . g$6185$Up9ra)
        (bytevector-u16-set! . g$6179$Up9ra)
        (bytevector-u16-ref . g$6175$Up9ra)
        (bytevector-u16-native-set! . g$6181$Up9ra)
        (bytevector-u16-native-ref . g$6177$Up9ra)
        (bytevector-sint-set! . g$11709$Up9ra)
        (bytevector-sint-ref . g$11708$Up9ra)
        (bytevector-s8-set! . g$11707$Up9ra)
        (bytevector-s8-ref . g$11706$Up9ra)
        (bytevector-s64-set! . g$6196$Up9ra)
        (bytevector-s64-ref . g$6192$Up9ra)
        (bytevector-s64-native-set! . g$6198$Up9ra)
        (bytevector-s64-native-ref . g$6194$Up9ra)
        (bytevector-s32-set! . g$6188$Up9ra)
        (bytevector-s32-ref . g$6184$Up9ra)
        (bytevector-s32-native-set! . g$6190$Up9ra)
        (bytevector-s32-native-ref . g$6186$Up9ra)
        (bytevector-s16-set! . g$6180$Up9ra)
        (bytevector-s16-ref . g$6176$Up9ra)
        (bytevector-s16-native-set! . g$6182$Up9ra)
        (bytevector-s16-native-ref . g$6178$Up9ra)
        (bytevector-length . g$11705$Up9ra)
        (bytevector-ieee-single-set! . g$11704$Up9ra)
        (bytevector-ieee-single-ref . g$11703$Up9ra)
        (bytevector-ieee-single-native-set! . g$6201$Up9ra)
        (bytevector-ieee-single-native-ref . g$6199$Up9ra)
        (bytevector-ieee-double-set! . g$11702$Up9ra)
        (bytevector-ieee-double-ref . g$11701$Up9ra)
        (bytevector-ieee-double-native-set! . g$6202$Up9ra)
        (bytevector-ieee-double-native-ref . g$6200$Up9ra)
        (bytevector-fill! . g$11700$Up9ra)
        (bytevector-copy! . g$11699$Up9ra)
        (bytevector-copy . g$11698$Up9ra)
        (bytevector->uint-list . g$11697$Up9ra)
        (bytevector->u8-list . g$11696$Up9ra)
        (bytevector->sint-list . g$11695$Up9ra)
        (endianness . g$11382$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12005$Up9ra
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$11887$Up9ra)
        (string-titlecase . g$11886$Up9ra)
        (string-normalize-nfkd . g$11885$Up9ra)
        (string-normalize-nfkc . g$11884$Up9ra)
        (string-normalize-nfd . g$11883$Up9ra)
        (string-normalize-nfc . g$11882$Up9ra)
        (string-foldcase . g$11881$Up9ra)
        (string-downcase . g$11880$Up9ra)
        (string-ci>? . g$11879$Up9ra)
        (string-ci>=? . g$11878$Up9ra)
        (string-ci=? . g$11877$Up9ra)
        (string-ci<? . g$11876$Up9ra)
        (string-ci<=? . g$11875$Up9ra)
        (char-whitespace? . g$11874$Up9ra)
        (char-upper-case? . g$11873$Up9ra)
        (char-title-case? . g$11872$Up9ra)
        (char-numeric? . g$11871$Up9ra)
        (char-lower-case? . g$11870$Up9ra)
        (char-general-category . g$11869$Up9ra)
        (char-upcase . g$11868$Up9ra)
        (char-titlecase . g$11867$Up9ra)
        (char-foldcase . g$11866$Up9ra)
        (char-downcase . g$11865$Up9ra)
        (char-ci>? . g$11864$Up9ra)
        (char-ci>=? . g$11863$Up9ra)
        (char-ci=? . g$11862$Up9ra)
        (char-ci<? . g$11861$Up9ra)
        (char-ci<=? . g$11860$Up9ra)
        (char-alphabetic? . g$11859$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12006$Up9ra
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$11732$Up9ra)
        (raise-continuable . g$11731$Up9ra)
        (raise . g$11730$Up9ra)
        (guard . g$11397$Up9ra)
        (else . g$11386$Up9ra)
        (=> . g$11385$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12007$Up9ra
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$6609$Up9ra)
        (bitwise-reverse-bit-field . g$6610$Up9ra)
        (bitwise-length . g$11610$Up9ra)
        (bitwise-if . g$6603$Up9ra)
        (bitwise-first-bit-set . g$11609$Up9ra)
        (bitwise-copy-bit-field . g$6606$Up9ra)
        (bitwise-copy-bit . g$6604$Up9ra)
        (bitwise-bit-set? . g$11608$Up9ra)
        (bitwise-bit-field . g$11607$Up9ra)
        (bitwise-bit-count . g$11606$Up9ra)
        (bitwise-xor . g$11605$Up9ra)
        (bitwise-ior . g$11604$Up9ra)
        (bitwise-and . g$11603$Up9ra)
        (bitwise-not . g$11602$Up9ra)
        (bitwise-arithmetic-shift-right . g$6608$Up9ra)
        (bitwise-arithmetic-shift-left . g$6607$Up9ra)
        (bitwise-arithmetic-shift . g$11601$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12008$Up9ra
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$11648$Up9ra)
        (fxxor . g$11647$Up9ra)
        (fxrotate-bit-field . g$6661$Up9ra)
        (fxreverse-bit-field . g$11646$Up9ra)
        (fxpositive? . g$11645$Up9ra)
        (fxodd? . g$11644$Up9ra)
        (fxnot . g$11643$Up9ra)
        (fxnegative? . g$11642$Up9ra)
        (fxmod0 . g$11641$Up9ra)
        (fxmod . g$11640$Up9ra)
        (fxmin . g$11639$Up9ra)
        (fxmax . g$11638$Up9ra)
        (fxlength . g$11637$Up9ra)
        (fxior . g$11636$Up9ra)
        (fxif . g$6655$Up9ra)
        (fxfirst-bit-set . g$11635$Up9ra)
        (fxeven? . g$11634$Up9ra)
        (fxdiv0-and-mod0 . g$11633$Up9ra)
        (fxdiv0 . g$11632$Up9ra)
        (fxdiv-and-mod . g$11631$Up9ra)
        (fxdiv . g$11630$Up9ra)
        (fxcopy-bit-field . g$6658$Up9ra)
        (fxcopy-bit . g$6656$Up9ra)
        (fxbit-set? . g$11629$Up9ra)
        (fxbit-field . g$6657$Up9ra)
        (fxbit-count . g$11628$Up9ra)
        (fxarithmetic-shift-right . g$6660$Up9ra)
        (fxarithmetic-shift-left . g$6659$Up9ra)
        (fxarithmetic-shift . g$11627$Up9ra)
        (fxand . g$11626$Up9ra)
        (fx>? . g$11625$Up9ra)
        (fx>=? . g$11624$Up9ra)
        (fx=? . g$11623$Up9ra)
        (fx<? . g$11622$Up9ra)
        (fx<=? . g$11621$Up9ra)
        (fx-/carry . g$11620$Up9ra)
        (fx- . g$11619$Up9ra)
        (fx+/carry . g$11618$Up9ra)
        (fx+ . g$11617$Up9ra)
        (fx*/carry . g$11616$Up9ra)
        (fx* . g$11615$Up9ra)
        (greatest-fixnum . g$11614$Up9ra)
        (least-fixnum . g$11613$Up9ra)
        (fixnum-width . g$11612$Up9ra)
        (fixnum? . g$11611$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12009$Up9ra
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$6730$Up9ra)
        (no-infinities-violation? . g$6716$Up9ra)
        (make-no-nans-violation . g$6729$Up9ra)
        (make-no-infinities-violation . g$6715$Up9ra)
        (real->flonum . g$11694$Up9ra)
        (flzero? . g$11693$Up9ra)
        (fltruncate . g$11692$Up9ra)
        (fltan . g$11691$Up9ra)
        (flsqrt . g$11690$Up9ra)
        (flsin . g$11689$Up9ra)
        (flround . g$11688$Up9ra)
        (flpositive? . g$11687$Up9ra)
        (flonum? . g$11686$Up9ra)
        (flodd? . g$11685$Up9ra)
        (flnumerator . g$11684$Up9ra)
        (flnegative? . g$11683$Up9ra)
        (flnan? . g$11682$Up9ra)
        (flmod0 . g$11681$Up9ra)
        (flmod . g$11680$Up9ra)
        (flmin . g$11679$Up9ra)
        (flmax . g$11678$Up9ra)
        (fllog . g$11677$Up9ra)
        (flinteger? . g$11676$Up9ra)
        (flinfinite? . g$11675$Up9ra)
        (flfloor . g$11674$Up9ra)
        (flfinite? . g$11673$Up9ra)
        (flexpt . g$11672$Up9ra)
        (flexp . g$11671$Up9ra)
        (fleven? . g$11670$Up9ra)
        (fldiv0-and-mod0 . g$11669$Up9ra)
        (fldiv0 . g$11668$Up9ra)
        (fldiv-and-mod . g$11667$Up9ra)
        (fldiv . g$11666$Up9ra)
        (fldenominator . g$11665$Up9ra)
        (flcos . g$11664$Up9ra)
        (flceiling . g$11663$Up9ra)
        (flatan . g$11662$Up9ra)
        (flasin . g$11661$Up9ra)
        (flacos . g$11660$Up9ra)
        (flabs . g$11659$Up9ra)
        (fl>? . g$11658$Up9ra)
        (fl>=? . g$11657$Up9ra)
        (fl=? . g$11656$Up9ra)
        (fl<? . g$11655$Up9ra)
        (fl<=? . g$11654$Up9ra)
        (fl/ . g$11653$Up9ra)
        (fl- . g$11652$Up9ra)
        (fl+ . g$11651$Up9ra)
        (fl* . g$11650$Up9ra)
        (fixnum->flonum . g$11649$Up9ra)
        (&no-nans . g$11442$Up9ra)
        (&no-infinities . g$11441$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12010$Up9ra
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$11839$Up9ra)
        (string-ci-hash . g$11838$Up9ra)
        (string-hash . g$11837$Up9ra)
        (equal-hash . g$11836$Up9ra)
        (hashtable-equivalence-function . g$11835$Up9ra)
        (make-hashtable . g$11834$Up9ra)
        (hashtable-hash-function . g$11833$Up9ra)
        (make-eqv-hashtable . g$5985$Up9ra)
        (make-eq-hashtable . g$5984$Up9ra)
        (hashtable? . g$11832$Up9ra)
        (hashtable-update! . g$5991$Up9ra)
        (hashtable-size . g$5986$Up9ra)
        (hashtable-set! . g$5988$Up9ra)
        (hashtable-ref . g$5987$Up9ra)
        (hashtable-mutable? . g$11831$Up9ra)
        (hashtable-keys . g$11830$Up9ra)
        (hashtable-entries . g$11829$Up9ra)
        (hashtable-delete! . g$5989$Up9ra)
        (hashtable-copy . g$11828$Up9ra)
        (hashtable-contains? . g$5990$Up9ra)
        (hashtable-clear! . g$5992$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12011$Up9ra
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$11812$Up9ra)
        (eof-object . g$11811$Up9ra)
        (current-error-port . g$11810$Up9ra)
        (current-output-port . g$11809$Up9ra)
        (current-input-port . g$11808$Up9ra)
        (output-port? . g$11807$Up9ra)
        (input-port? . g$11806$Up9ra)
        (utf-8-codec . g$11805$Up9ra)
        (utf-16-codec . g$11804$Up9ra)
        (transcoder-error-handling-mode . g$11803$Up9ra)
        (transcoder-eol-style . g$11802$Up9ra)
        (transcoder-codec . g$11801$Up9ra)
        (transcoded-port . g$11800$Up9ra)
        (textual-port? . g$11799$Up9ra)
        (string->bytevector . g$11798$Up9ra)
        (standard-output-port . g$11797$Up9ra)
        (standard-input-port . g$11796$Up9ra)
        (standard-error-port . g$11795$Up9ra)
        (set-port-position! . g$11794$Up9ra)
        (put-u8 . g$11793$Up9ra)
        (put-string . g$11792$Up9ra)
        (put-datum . g$11791$Up9ra)
        (put-char . g$11790$Up9ra)
        (put-bytevector . g$11789$Up9ra)
        (port? . g$11788$Up9ra)
        (port-transcoder . g$11787$Up9ra)
        (port-position . g$11786$Up9ra)
        (port-has-set-port-position!? . g$11785$Up9ra)
        (port-has-port-position? . g$11784$Up9ra)
        (port-eof? . g$11783$Up9ra)
        (output-port-buffer-mode . g$11782$Up9ra)
        (open-string-output-port . g$6915$Up9ra)
        (open-string-input-port . g$11781$Up9ra)
        (open-file-output-port . g$11780$Up9ra)
        (open-file-input/output-port . g$11779$Up9ra)
        (open-file-input-port . g$11778$Up9ra)
        (open-bytevector-output-port . g$11777$Up9ra)
        (open-bytevector-input-port . g$11776$Up9ra)
        (native-transcoder . g$11775$Up9ra)
        (native-eol-style . g$11774$Up9ra)
        (make-transcoder . g$11773$Up9ra)
        (latin-1-codec . g$11772$Up9ra)
        (make-i/o-write-error . g$6772$Up9ra)
        (make-i/o-read-error . g$6758$Up9ra)
        (make-i/o-port-error . g$6877$Up9ra)
        (make-i/o-invalid-position-error . g$6787$Up9ra)
        (make-i/o-filename-error . g$6804$Up9ra)
        (make-i/o-file-protection-error . g$6820$Up9ra)
        (make-i/o-file-is-read-only-error . g$6834$Up9ra)
        (make-i/o-file-does-not-exist-error . g$6862$Up9ra)
        (make-i/o-file-already-exists-error . g$6848$Up9ra)
        (make-i/o-error . g$6744$Up9ra)
        (make-i/o-encoding-error . g$6908$Up9ra)
        (make-i/o-decoding-error . g$6893$Up9ra)
        (make-custom-textual-output-port . g$11771$Up9ra)
        (make-custom-textual-input/output-port . g$11770$Up9ra)
        (make-custom-textual-input-port . g$11769$Up9ra)
        (make-custom-binary-output-port . g$11768$Up9ra)
        (make-custom-binary-input/output-port . g$11767$Up9ra)
        (make-custom-binary-input-port . g$11766$Up9ra)
        (lookahead-u8 . g$11764$Up9ra)
        (lookahead-char . g$11763$Up9ra)
        (i/o-write-error? . g$6773$Up9ra)
        (i/o-read-error? . g$6759$Up9ra)
        (i/o-port-error? . g$6879$Up9ra)
        (i/o-invalid-position-error? . g$6789$Up9ra)
        (i/o-filename-error? . g$6806$Up9ra)
        (i/o-file-protection-error? . g$6821$Up9ra)
        (i/o-file-is-read-only-error? . g$6835$Up9ra)
        (i/o-file-does-not-exist-error? . g$6863$Up9ra)
        (i/o-file-already-exists-error? . g$6849$Up9ra)
        (i/o-error? . g$6745$Up9ra)
        (i/o-error-port . g$6880$Up9ra)
        (i/o-error-filename . g$6807$Up9ra)
        (i/o-encoding-error? . g$6910$Up9ra)
        (i/o-encoding-error-char . g$6911$Up9ra)
        (i/o-decoding-error? . g$6894$Up9ra)
        (get-u8 . g$11762$Up9ra)
        (get-string-n! . g$11761$Up9ra)
        (get-string-n . g$11760$Up9ra)
        (get-string-all . g$11759$Up9ra)
        (get-line . g$11758$Up9ra)
        (get-datum . g$11757$Up9ra)
        (get-char . g$11756$Up9ra)
        (get-bytevector-some . g$11755$Up9ra)
        (get-bytevector-n! . g$11754$Up9ra)
        (get-bytevector-n . g$11753$Up9ra)
        (get-bytevector-all . g$11752$Up9ra)
        (flush-output-port . g$11751$Up9ra)
        (close-port . g$11750$Up9ra)
        (call-with-string-output-port . g$11749$Up9ra)
        (call-with-port . g$11748$Up9ra)
        (call-with-bytevector-output-port . g$11747$Up9ra)
        (bytevector->string . g$11746$Up9ra)
        (buffer-mode? . g$11745$Up9ra)
        (binary-port? . g$11744$Up9ra)
        (&i/o-encoding . g$11440$Up9ra)
        (&i/o-decoding . g$11439$Up9ra)
        (&i/o-port . g$11438$Up9ra)
        (&i/o-file-does-not-exist . g$11437$Up9ra)
        (&i/o-file-already-exists . g$11436$Up9ra)
        (&i/o-file-is-read-only . g$11435$Up9ra)
        (&i/o-file-protection . g$11434$Up9ra)
        (&i/o-filename . g$11433$Up9ra)
        (&i/o-invalid-position . g$11432$Up9ra)
        (&i/o-write . g$11431$Up9ra)
        (&i/o-read . g$11430$Up9ra)
        (&i/o . g$11429$Up9ra)
        (error-handling-mode . g$11401$Up9ra)
        (file-options . g$11400$Up9ra)
        (buffer-mode . g$11399$Up9ra)
        (eol-style . g$11398$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12012$Up9ra
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$6962$Up9ra)
        (enum-set=? . g$6969$Up9ra)
        (enum-set-universe . g$6963$Up9ra)
        (enum-set-union . g$6970$Up9ra)
        (enum-set-subset? . g$6968$Up9ra)
        (enum-set-projection . g$6974$Up9ra)
        (enum-set-member? . g$6967$Up9ra)
        (enum-set-intersection . g$6971$Up9ra)
        (enum-set-indexer . g$6964$Up9ra)
        (enum-set-difference . g$6972$Up9ra)
        (enum-set-constructor . g$6965$Up9ra)
        (enum-set-complement . g$6973$Up9ra)
        (enum-set->list . g$6966$Up9ra)
        (define-enumeration . g$11412$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12013$Up9ra
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$6422$Up9ra)
        (warning? . g$6333$Up9ra)
        (violation? . g$6375$Up9ra)
        (undefined-violation? . g$6499$Up9ra)
        (syntax-violation? . g$6483$Up9ra)
        (syntax-violation-subform . g$6485$Up9ra)
        (syntax-violation-form . g$6484$Up9ra)
        (syntax-violation . g$8370$Up9ra)
        (simple-conditions . g$11729$Up9ra)
        (serious-condition? . g$6347$Up9ra)
        (non-continuable-violation? . g$6437$Up9ra)
        (message-condition? . g$6318$Up9ra)
        (make-who-condition . g$6420$Up9ra)
        (make-warning . g$6332$Up9ra)
        (make-violation . g$6374$Up9ra)
        (make-undefined-violation . g$6498$Up9ra)
        (make-syntax-violation . g$6480$Up9ra)
        (make-serious-condition . g$6346$Up9ra)
        (make-non-continuable-violation . g$6436$Up9ra)
        (make-message-condition . g$6316$Up9ra)
        (make-lexical-violation . g$6464$Up9ra)
        (make-irritants-condition . g$6403$Up9ra)
        (make-implementation-restriction-violation . g$6450$Up9ra)
        (make-error . g$6360$Up9ra)
        (make-assertion-violation . g$6388$Up9ra)
        (lexical-violation? . g$6465$Up9ra)
        (irritants-condition? . g$6405$Up9ra)
        (implementation-restriction-violation? . g$6451$Up9ra)
        (error? . g$6361$Up9ra)
        (condition-who . g$6423$Up9ra)
        (condition-predicate . g$11728$Up9ra)
        (condition-message . g$6319$Up9ra)
        (condition-irritants . g$6406$Up9ra)
        (condition-accessor . g$11727$Up9ra)
        (condition . g$11726$Up9ra)
        (assertion-violation? . g$6389$Up9ra)
        (condition? . g$11725$Up9ra)
        (&non-continuable . g$11428$Up9ra)
        (&undefined . g$11427$Up9ra)
        (&syntax . g$11426$Up9ra)
        (&lexical . g$11425$Up9ra)
        (&implementation-restriction . g$11424$Up9ra)
        (&who . g$11422$Up9ra)
        (&irritants . g$11421$Up9ra)
        (&assertion . g$11420$Up9ra)
        (&violation . g$11419$Up9ra)
        (&error . g$11418$Up9ra)
        (&serious . g$11417$Up9ra)
        (&warning . g$11416$Up9ra)
        (&message . g$11415$Up9ra)
        (&condition . g$11414$Up9ra)
        (define-condition-type . g$11413$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12014$Up9ra
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$11851$Up9ra)
        (record-type-uid . g$11850$Up9ra)
        (record-type-sealed? . g$11849$Up9ra)
        (record-type-parent . g$11848$Up9ra)
        (record-type-opaque? . g$11847$Up9ra)
        (record-type-name . g$11846$Up9ra)
        (record-type-generative? . g$11845$Up9ra)
        (record-type-field-names . g$11844$Up9ra)
        (record-rtd . g$11843$Up9ra)
        (record-field-mutable? . g$11842$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12015$Up9ra
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$11858$Up9ra)
        (record-predicate . g$11857$Up9ra)
        (record-mutator . g$11856$Up9ra)
        (record-constructor . g$11855$Up9ra)
        (record-accessor . g$11854$Up9ra)
        (make-record-type-descriptor . g$11853$Up9ra)
        (make-record-constructor-descriptor . g$11852$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12016$Up9ra
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$11411$Up9ra)
        (parent-rtd . g$11410$Up9ra)
        (nongenerative . g$11409$Up9ra)
        (opaque . g$11408$Up9ra)
        (sealed . g$11407$Up9ra)
        (protocol . g$11406$Up9ra)
        (parent . g$11405$Up9ra)
        (immutable . g$11404$Up9ra)
        (mutable . g$11403$Up9ra)
        (fields . g$11402$Up9ra)
        (record-constructor-descriptor . g$11363$Up9ra)
        (record-type-descriptor . g$11362$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6891$Up9ra
      'g$12017$Up9ra
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$8248$Up9ra)
        (&no-nans-rcd . g$11981$Up9ra)
        (&no-nans-rtd . g$11980$Up9ra)
        (&no-infinities-rcd . g$11979$Up9ra)
        (&no-infinities-rtd . g$11978$Up9ra)
        (&i/o-encoding-rcd . g$11977$Up9ra)
        (&i/o-encoding-rtd . g$11976$Up9ra)
        (&i/o-decoding-rcd . g$11975$Up9ra)
        (&i/o-decoding-rtd . g$11974$Up9ra)
        (&i/o-port-rcd . g$11973$Up9ra)
        (&i/o-port-rtd . g$11972$Up9ra)
        (&i/o-file-does-not-exist-rcd . g$11971$Up9ra)
        (&i/o-file-does-not-exist-rtd . g$11970$Up9ra)
        (&i/o-file-already-exists-rcd . g$11969$Up9ra)
        (&i/o-file-already-exists-rtd . g$11968$Up9ra)
        (&i/o-fie-is-read-only-rcd . g$11967$Up9ra)
        (&i/o-fie-is-read-only-rtd . g$11966$Up9ra)
        (&i/o-file-protection-rcd . g$11965$Up9ra)
        (&i/o-file-protection-rtd . g$11964$Up9ra)
        (&i/o-filename-rcd . g$11963$Up9ra)
        (&i/o-filename-rtd . g$11962$Up9ra)
        (&i/o-invalid-position-rcd . g$11961$Up9ra)
        (&i/o-invalid-position-rtd . g$11960$Up9ra)
        (&i/o-write-rcd . g$11959$Up9ra)
        (&i/o-write-rtd . g$11958$Up9ra)
        (&i/o-read-rcd . g$11957$Up9ra)
        (&i/o-read-rtd . g$11956$Up9ra)
        (&i/o-rcd . g$11955$Up9ra)
        (&i/o-rtd . g$11954$Up9ra)
        (&undefined-rcd . g$11953$Up9ra)
        (&undefined-rtd . g$11952$Up9ra)
        (&syntax-rcd . g$11951$Up9ra)
        (&syntax-rtd . g$11950$Up9ra)
        (&lexical-rcd . g$11949$Up9ra)
        (&lexical-rtd . g$11948$Up9ra)
        (&implementation-restriction-rcd . g$11947$Up9ra)
        (&implementation-restriction-rtd . g$11946$Up9ra)
        (&non-continuable-rcd . g$11945$Up9ra)
        (&non-continuable-rtd . g$11944$Up9ra)
        (&who-rcd . g$11943$Up9ra)
        (&who-rtd . g$11942$Up9ra)
        (&irritants-rcd . g$11941$Up9ra)
        (&irritants-rtd . g$11940$Up9ra)
        (&assertion-rcd . g$11939$Up9ra)
        (&assertion-rtd . g$11938$Up9ra)
        (&violation-rcd . g$11937$Up9ra)
        (&violation-rtd . g$11936$Up9ra)
        (&error-rcd . g$11935$Up9ra)
        (&error-rtd . g$11934$Up9ra)
        (&serious-rcd . g$11933$Up9ra)
        (&serious-rtd . g$11932$Up9ra)
        (&warning-rcd . g$11931$Up9ra)
        (&warning-rtd . g$11930$Up9ra)
        (&message-rcd . g$11929$Up9ra)
        (&message-rtd . g$11928$Up9ra)
        (&condition-rcd . g$11927$Up9ra)
        (&condition-rtd . g$11926$Up9ra)
        (library-letrec* . g$11925$Up9ra)
        (annotation-stripped . g$11924$Up9ra)
        (annotation-source . g$11923$Up9ra)
        (annotation-expression . g$11922$Up9ra)
        (annotation? . g$11921$Up9ra)
        (read-annotated . g$11920$Up9ra)
        (tanh . g$11919$Up9ra)
        (cosh . g$11918$Up9ra)
        (sinh . g$11917$Up9ra)
        (make-guid . g$11916$Up9ra)
        (unspecified? . g$11915$Up9ra)
        (make-trace . g$11914$Up9ra)
        (make-list . g$11913$Up9ra)
        (last-pair . g$11912$Up9ra)
        (load-r5rs . g$11911$Up9ra)
        (license . g$11910$Up9ra)
        (stacktrace . g$11909$Up9ra)
        (ironscheme-build . g$11308$Up9ra)
        (define-clr-class-internal . g$11908$Up9ra)
        (clr-field-set!-internal . g$11907$Up9ra)
        (clr-field-get-internal . g$11906$Up9ra)
        (clr-cast-internal . g$11905$Up9ra)
        (clr-call-internal . g$11904$Up9ra)
        (clr-new-internal . g$11903$Up9ra)
        (clr-new-array-internal . g$11902$Up9ra)
        (clr-is-internal . g$11901$Up9ra)
        (clr-reference-internal . g$11900$Up9ra)
        (clr-using-internal . g$11899$Up9ra)
        (clr-clear-usings-internal . g$11898$Up9ra)
        (syntax-error . g$8367$Up9ra)
        (syntax-dispatch . g$8243$Up9ra)
        (compile-core . g$11897$Up9ra)
        (eval-core . g$11896$Up9ra)
        (set-symbol-value! . g$11895$Up9ra)
        (symbol-value . g$11894$Up9ra)
        (ungensym . g$11893$Up9ra)
        (gensym . g$11892$Up9ra)
        (void . g$11891$Up9ra)
        (load-serialized-library . g$11890$Up9ra)
        (serialize-library . g$11889$Up9ra)
        (compile-system-libraries . g$11310$Up9ra)
        (compile->closure . g$11312$Up9ra)
        (compile . g$11311$Up9ra)
        (load . g$11307$Up9ra)
        (interaction-environment . g$8376$Up9ra)
        (char-ready? . g$11888$Up9ra)
        (string-upcase . g$11887$Up9ra)
        (string-titlecase . g$11886$Up9ra)
        (string-normalize-nfkd . g$11885$Up9ra)
        (string-normalize-nfkc . g$11884$Up9ra)
        (string-normalize-nfd . g$11883$Up9ra)
        (string-normalize-nfc . g$11882$Up9ra)
        (string-foldcase . g$11881$Up9ra)
        (string-downcase . g$11880$Up9ra)
        (string-ci>? . g$11879$Up9ra)
        (string-ci>=? . g$11878$Up9ra)
        (string-ci=? . g$11877$Up9ra)
        (string-ci<? . g$11876$Up9ra)
        (string-ci<=? . g$11875$Up9ra)
        (char-whitespace? . g$11874$Up9ra)
        (char-upper-case? . g$11873$Up9ra)
        (char-title-case? . g$11872$Up9ra)
        (char-numeric? . g$11871$Up9ra)
        (char-lower-case? . g$11870$Up9ra)
        (char-general-category . g$11869$Up9ra)
        (char-upcase . g$11868$Up9ra)
        (char-titlecase . g$11867$Up9ra)
        (char-foldcase . g$11866$Up9ra)
        (char-downcase . g$11865$Up9ra)
        (char-ci>? . g$11864$Up9ra)
        (char-ci>=? . g$11863$Up9ra)
        (char-ci=? . g$11862$Up9ra)
        (char-ci<? . g$11861$Up9ra)
        (char-ci<=? . g$11860$Up9ra)
        (char-alphabetic? . g$11859$Up9ra)
        (variable-transformer-procedure . g$7980$Up9ra)
        (variable-transformer? . g$7979$Up9ra)
        (make-variable-transformer . g$7978$Up9ra)
        (identifier? . g$8371$Up9ra)
        (generate-temporaries . g$8363$Up9ra)
        (free-identifier=? . g$8364$Up9ra)
        (syntax->datum . g$8373$Up9ra)
        (datum->syntax . g$8372$Up9ra)
        (bound-identifier=? . g$8365$Up9ra)
        (record-type-descriptor? . g$11858$Up9ra)
        (record-predicate . g$11857$Up9ra)
        (record-mutator . g$11856$Up9ra)
        (record-constructor . g$11855$Up9ra)
        (record-accessor . g$11854$Up9ra)
        (make-record-type-descriptor . g$11853$Up9ra)
        (make-record-constructor-descriptor . g$11852$Up9ra)
        (record? . g$11851$Up9ra)
        (record-type-uid . g$11850$Up9ra)
        (record-type-sealed? . g$11849$Up9ra)
        (record-type-parent . g$11848$Up9ra)
        (record-type-opaque? . g$11847$Up9ra)
        (record-type-name . g$11846$Up9ra)
        (record-type-generative? . g$11845$Up9ra)
        (record-type-field-names . g$11844$Up9ra)
        (record-rtd . g$11843$Up9ra)
        (record-field-mutable? . g$11842$Up9ra)
        (delete-file . g$6018$Up9ra)
        (file-exists? . g$6017$Up9ra)
        (vector-sort! . g$11841$Up9ra)
        (vector-sort . g$11840$Up9ra)
        (list-sort . g$6524$Up9ra)
        (symbol-hash . g$11839$Up9ra)
        (string-ci-hash . g$11838$Up9ra)
        (string-hash . g$11837$Up9ra)
        (equal-hash . g$11836$Up9ra)
        (hashtable-equivalence-function . g$11835$Up9ra)
        (make-hashtable . g$11834$Up9ra)
        (hashtable-hash-function . g$11833$Up9ra)
        (make-eqv-hashtable . g$5985$Up9ra)
        (make-eq-hashtable . g$5984$Up9ra)
        (hashtable? . g$11832$Up9ra)
        (hashtable-update! . g$5991$Up9ra)
        (hashtable-size . g$5986$Up9ra)
        (hashtable-set! . g$5988$Up9ra)
        (hashtable-ref . g$5987$Up9ra)
        (hashtable-mutable? . g$11831$Up9ra)
        (hashtable-keys . g$11830$Up9ra)
        (hashtable-entries . g$11829$Up9ra)
        (hashtable-delete! . g$5989$Up9ra)
        (hashtable-copy . g$11828$Up9ra)
        (hashtable-contains? . g$5990$Up9ra)
        (hashtable-clear! . g$5992$Up9ra)
        (call-with-output-file . g$11827$Up9ra)
        (call-with-input-file . g$11826$Up9ra)
        (write-char . g$11825$Up9ra)
        (write . g$11824$Up9ra)
        (with-output-to-file . g$11823$Up9ra)
        (with-input-from-file . g$11822$Up9ra)
        (read-char . g$11821$Up9ra)
        (read . g$11820$Up9ra)
        (peek-char . g$11819$Up9ra)
        (open-output-file . g$11818$Up9ra)
        (open-input-file . g$11817$Up9ra)
        (newline . g$11816$Up9ra)
        (display . g$11815$Up9ra)
        (close-output-port . g$11814$Up9ra)
        (close-input-port . g$11813$Up9ra)
        (eof-object? . g$11812$Up9ra)
        (eof-object . g$11811$Up9ra)
        (current-error-port . g$11810$Up9ra)
        (current-output-port . g$11809$Up9ra)
        (current-input-port . g$11808$Up9ra)
        (output-port? . g$11807$Up9ra)
        (input-port? . g$11806$Up9ra)
        (utf-8-codec . g$11805$Up9ra)
        (utf-16-codec . g$11804$Up9ra)
        (transcoder-error-handling-mode . g$11803$Up9ra)
        (transcoder-eol-style . g$11802$Up9ra)
        (transcoder-codec . g$11801$Up9ra)
        (transcoded-port . g$11800$Up9ra)
        (textual-port? . g$11799$Up9ra)
        (string->bytevector . g$11798$Up9ra)
        (standard-output-port . g$11797$Up9ra)
        (standard-input-port . g$11796$Up9ra)
        (standard-error-port . g$11795$Up9ra)
        (set-port-position! . g$11794$Up9ra)
        (put-u8 . g$11793$Up9ra)
        (put-string . g$11792$Up9ra)
        (put-datum . g$11791$Up9ra)
        (put-char . g$11790$Up9ra)
        (put-bytevector . g$11789$Up9ra)
        (port? . g$11788$Up9ra)
        (port-transcoder . g$11787$Up9ra)
        (port-position . g$11786$Up9ra)
        (port-has-set-port-position!? . g$11785$Up9ra)
        (port-has-port-position? . g$11784$Up9ra)
        (port-eof? . g$11783$Up9ra)
        (output-port-buffer-mode . g$11782$Up9ra)
        (open-string-output-port . g$6915$Up9ra)
        (open-string-input-port . g$11781$Up9ra)
        (open-file-output-port . g$11780$Up9ra)
        (open-file-input/output-port . g$11779$Up9ra)
        (open-file-input-port . g$11778$Up9ra)
        (open-bytevector-output-port . g$11777$Up9ra)
        (open-bytevector-input-port . g$11776$Up9ra)
        (native-transcoder . g$11775$Up9ra)
        (native-eol-style . g$11774$Up9ra)
        (make-transcoder . g$11773$Up9ra)
        (latin-1-codec . g$11772$Up9ra)
        (make-i/o-write-error . g$6772$Up9ra)
        (make-i/o-read-error . g$6758$Up9ra)
        (make-i/o-port-error . g$6877$Up9ra)
        (make-i/o-invalid-position-error . g$6787$Up9ra)
        (make-i/o-filename-error . g$6804$Up9ra)
        (make-i/o-file-protection-error . g$6820$Up9ra)
        (make-i/o-file-is-read-only-error . g$6834$Up9ra)
        (make-i/o-file-does-not-exist-error . g$6862$Up9ra)
        (make-i/o-file-already-exists-error . g$6848$Up9ra)
        (make-i/o-error . g$6744$Up9ra)
        (make-i/o-encoding-error . g$6908$Up9ra)
        (make-i/o-decoding-error . g$6893$Up9ra)
        (make-custom-textual-output-port . g$11771$Up9ra)
        (make-custom-textual-input/output-port . g$11770$Up9ra)
        (make-custom-textual-input-port . g$11769$Up9ra)
        (make-custom-binary-output-port . g$11768$Up9ra)
        (make-custom-binary-input/output-port . g$11767$Up9ra)
        (make-custom-binary-input-port . g$11766$Up9ra)
        (make-bytevector . g$11765$Up9ra)
        (lookahead-u8 . g$11764$Up9ra)
        (lookahead-char . g$11763$Up9ra)
        (i/o-write-error? . g$6773$Up9ra)
        (i/o-read-error? . g$6759$Up9ra)
        (i/o-port-error? . g$6879$Up9ra)
        (i/o-invalid-position-error? . g$6789$Up9ra)
        (i/o-filename-error? . g$6806$Up9ra)
        (i/o-file-protection-error? . g$6821$Up9ra)
        (i/o-file-is-read-only-error? . g$6835$Up9ra)
        (i/o-file-does-not-exist-error? . g$6863$Up9ra)
        (i/o-file-already-exists-error? . g$6849$Up9ra)
        (i/o-error? . g$6745$Up9ra)
        (i/o-error-port . g$6880$Up9ra)
        (i/o-error-filename . g$6807$Up9ra)
        (i/o-encoding-error? . g$6910$Up9ra)
        (i/o-encoding-error-char . g$6911$Up9ra)
        (i/o-decoding-error? . g$6894$Up9ra)
        (get-u8 . g$11762$Up9ra)
        (get-string-n! . g$11761$Up9ra)
        (get-string-n . g$11760$Up9ra)
        (get-string-all . g$11759$Up9ra)
        (get-line . g$11758$Up9ra)
        (get-datum . g$11757$Up9ra)
        (get-char . g$11756$Up9ra)
        (get-bytevector-some . g$11755$Up9ra)
        (get-bytevector-n! . g$11754$Up9ra)
        (get-bytevector-n . g$11753$Up9ra)
        (get-bytevector-all . g$11752$Up9ra)
        (flush-output-port . g$11751$Up9ra)
        (close-port . g$11750$Up9ra)
        (call-with-string-output-port . g$11749$Up9ra)
        (call-with-port . g$11748$Up9ra)
        (call-with-bytevector-output-port . g$11747$Up9ra)
        (bytevector->string . g$11746$Up9ra)
        (buffer-mode? . g$11745$Up9ra)
        (binary-port? . g$11744$Up9ra)
        (scheme-report-environment . g$8354$Up9ra)
        (quotient . g$6511$Up9ra)
        (null-environment . g$8353$Up9ra)
        (remainder . g$6512$Up9ra)
        (modulo . g$6513$Up9ra)
        (inexact->exact . g$11743$Up9ra)
        (force . g$11742$Up9ra)
        (exact->inexact . g$11741$Up9ra)
        (exit . g$11740$Up9ra)
        (command-line . g$11304$Up9ra)
        (string-fill! . g$11739$Up9ra)
        (string-set! . g$11738$Up9ra)
        (set-cdr! . g$11737$Up9ra)
        (set-car! . g$11736$Up9ra)
        (remove . g$6098$Up9ra)
        (remv . g$6099$Up9ra)
        (remp . g$6084$Up9ra)
        (remq . g$6100$Up9ra)
        (partition . g$6083$Up9ra)
        (memv . g$11735$Up9ra)
        (memq . g$11734$Up9ra)
        (memp . g$6090$Up9ra)
        (member . g$6089$Up9ra)
        (exists . g$6094$Up9ra)
        (for-all . g$6093$Up9ra)
        (fold-right . g$6097$Up9ra)
        (fold-left . g$6096$Up9ra)
        (find . g$6082$Up9ra)
        (filter . g$6085$Up9ra)
        (cons* . g$6095$Up9ra)
        (assv . g$6086$Up9ra)
        (assq . g$11733$Up9ra)
        (assp . g$6088$Up9ra)
        (assoc . g$6087$Up9ra)
        (with-exception-handler . g$11732$Up9ra)
        (raise-continuable . g$11731$Up9ra)
        (raise . g$11730$Up9ra)
        (eval . g$8356$Up9ra)
        (environment . g$8352$Up9ra)
        (make-enumeration . g$6962$Up9ra)
        (enum-set=? . g$6969$Up9ra)
        (enum-set-universe . g$6963$Up9ra)
        (enum-set-union . g$6970$Up9ra)
        (enum-set-subset? . g$6968$Up9ra)
        (enum-set-projection . g$6974$Up9ra)
        (enum-set-member? . g$6967$Up9ra)
        (enum-set-intersection . g$6971$Up9ra)
        (enum-set-indexer . g$6964$Up9ra)
        (enum-set-difference . g$6972$Up9ra)
        (enum-set-constructor . g$6965$Up9ra)
        (enum-set-complement . g$6973$Up9ra)
        (enum-set->list . g$6966$Up9ra)
        (who-condition? . g$6422$Up9ra)
        (warning? . g$6333$Up9ra)
        (violation? . g$6375$Up9ra)
        (undefined-violation? . g$6499$Up9ra)
        (syntax-violation? . g$6483$Up9ra)
        (syntax-violation-subform . g$6485$Up9ra)
        (syntax-violation-form . g$6484$Up9ra)
        (syntax-violation . g$8370$Up9ra)
        (simple-conditions . g$11729$Up9ra)
        (serious-condition? . g$6347$Up9ra)
        (non-continuable-violation? . g$6437$Up9ra)
        (message-condition? . g$6318$Up9ra)
        (make-who-condition . g$6420$Up9ra)
        (make-warning . g$6332$Up9ra)
        (make-violation . g$6374$Up9ra)
        (make-undefined-violation . g$6498$Up9ra)
        (make-syntax-violation . g$6480$Up9ra)
        (make-serious-condition . g$6346$Up9ra)
        (make-non-continuable-violation . g$6436$Up9ra)
        (make-message-condition . g$6316$Up9ra)
        (make-lexical-violation . g$6464$Up9ra)
        (make-irritants-condition . g$6403$Up9ra)
        (make-implementation-restriction-violation . g$6450$Up9ra)
        (make-error . g$6360$Up9ra)
        (make-assertion-violation . g$6388$Up9ra)
        (lexical-violation? . g$6465$Up9ra)
        (irritants-condition? . g$6405$Up9ra)
        (implementation-restriction-violation? . g$6451$Up9ra)
        (error? . g$6361$Up9ra)
        (condition-who . g$6423$Up9ra)
        (condition-predicate . g$11728$Up9ra)
        (condition-message . g$6319$Up9ra)
        (condition-irritants . g$6406$Up9ra)
        (condition-accessor . g$11727$Up9ra)
        (condition . g$11726$Up9ra)
        (assertion-violation? . g$6389$Up9ra)
        (condition? . g$11725$Up9ra)
        (utf32->string . g$11724$Up9ra)
        (utf16->string . g$11723$Up9ra)
        (utf8->string . g$11722$Up9ra)
        (uint-list->bytevector . g$11721$Up9ra)
        (u8-list->bytevector . g$11720$Up9ra)
        (string->utf8 . g$11719$Up9ra)
        (string->utf32 . g$11718$Up9ra)
        (string->utf16 . g$11717$Up9ra)
        (sint-list->bytevector . g$11716$Up9ra)
        (native-endianness . g$6174$Up9ra)
        (bytevector? . g$11715$Up9ra)
        (bytevector=? . g$11714$Up9ra)
        (bytevector-uint-set! . g$11713$Up9ra)
        (bytevector-uint-ref . g$11712$Up9ra)
        (bytevector-u8-set! . g$11711$Up9ra)
        (bytevector-u8-ref . g$11710$Up9ra)
        (bytevector-u64-set! . g$6195$Up9ra)
        (bytevector-u64-ref . g$6191$Up9ra)
        (bytevector-u64-native-set! . g$6197$Up9ra)
        (bytevector-u64-native-ref . g$6193$Up9ra)
        (bytevector-u32-set! . g$6187$Up9ra)
        (bytevector-u32-ref . g$6183$Up9ra)
        (bytevector-u32-native-set! . g$6189$Up9ra)
        (bytevector-u32-native-ref . g$6185$Up9ra)
        (bytevector-u16-set! . g$6179$Up9ra)
        (bytevector-u16-ref . g$6175$Up9ra)
        (bytevector-u16-native-set! . g$6181$Up9ra)
        (bytevector-u16-native-ref . g$6177$Up9ra)
        (bytevector-sint-set! . g$11709$Up9ra)
        (bytevector-sint-ref . g$11708$Up9ra)
        (bytevector-s8-set! . g$11707$Up9ra)
        (bytevector-s8-ref . g$11706$Up9ra)
        (bytevector-s64-set! . g$6196$Up9ra)
        (bytevector-s64-ref . g$6192$Up9ra)
        (bytevector-s64-native-set! . g$6198$Up9ra)
        (bytevector-s64-native-ref . g$6194$Up9ra)
        (bytevector-s32-set! . g$6188$Up9ra)
        (bytevector-s32-ref . g$6184$Up9ra)
        (bytevector-s32-native-set! . g$6190$Up9ra)
        (bytevector-s32-native-ref . g$6186$Up9ra)
        (bytevector-s16-set! . g$6180$Up9ra)
        (bytevector-s16-ref . g$6176$Up9ra)
        (bytevector-s16-native-set! . g$6182$Up9ra)
        (bytevector-s16-native-ref . g$6178$Up9ra)
        (bytevector-length . g$11705$Up9ra)
        (bytevector-ieee-single-set! . g$11704$Up9ra)
        (bytevector-ieee-single-ref . g$11703$Up9ra)
        (bytevector-ieee-single-native-set! . g$6201$Up9ra)
        (bytevector-ieee-single-native-ref . g$6199$Up9ra)
        (bytevector-ieee-double-set! . g$11702$Up9ra)
        (bytevector-ieee-double-ref . g$11701$Up9ra)
        (bytevector-ieee-double-native-set! . g$6202$Up9ra)
        (bytevector-ieee-double-native-ref . g$6200$Up9ra)
        (bytevector-fill! . g$11700$Up9ra)
        (bytevector-copy! . g$11699$Up9ra)
        (bytevector-copy . g$11698$Up9ra)
        (bytevector->uint-list . g$11697$Up9ra)
        (bytevector->u8-list . g$11696$Up9ra)
        (bytevector->sint-list . g$11695$Up9ra)
        (no-nans-violation? . g$6730$Up9ra)
        (no-infinities-violation? . g$6716$Up9ra)
        (make-no-nans-violation . g$6729$Up9ra)
        (make-no-infinities-violation . g$6715$Up9ra)
        (real->flonum . g$11694$Up9ra)
        (flzero? . g$11693$Up9ra)
        (fltruncate . g$11692$Up9ra)
        (fltan . g$11691$Up9ra)
        (flsqrt . g$11690$Up9ra)
        (flsin . g$11689$Up9ra)
        (flround . g$11688$Up9ra)
        (flpositive? . g$11687$Up9ra)
        (flonum? . g$11686$Up9ra)
        (flodd? . g$11685$Up9ra)
        (flnumerator . g$11684$Up9ra)
        (flnegative? . g$11683$Up9ra)
        (flnan? . g$11682$Up9ra)
        (flmod0 . g$11681$Up9ra)
        (flmod . g$11680$Up9ra)
        (flmin . g$11679$Up9ra)
        (flmax . g$11678$Up9ra)
        (fllog . g$11677$Up9ra)
        (flinteger? . g$11676$Up9ra)
        (flinfinite? . g$11675$Up9ra)
        (flfloor . g$11674$Up9ra)
        (flfinite? . g$11673$Up9ra)
        (flexpt . g$11672$Up9ra)
        (flexp . g$11671$Up9ra)
        (fleven? . g$11670$Up9ra)
        (fldiv0-and-mod0 . g$11669$Up9ra)
        (fldiv0 . g$11668$Up9ra)
        (fldiv-and-mod . g$11667$Up9ra)
        (fldiv . g$11666$Up9ra)
        (fldenominator . g$11665$Up9ra)
        (flcos . g$11664$Up9ra)
        (flceiling . g$11663$Up9ra)
        (flatan . g$11662$Up9ra)
        (flasin . g$11661$Up9ra)
        (flacos . g$11660$Up9ra)
        (flabs . g$11659$Up9ra)
        (fl>? . g$11658$Up9ra)
        (fl>=? . g$11657$Up9ra)
        (fl=? . g$11656$Up9ra)
        (fl<? . g$11655$Up9ra)
        (fl<=? . g$11654$Up9ra)
        (fl/ . g$11653$Up9ra)
        (fl- . g$11652$Up9ra)
        (fl+ . g$11651$Up9ra)
        (fl* . g$11650$Up9ra)
        (fixnum->flonum . g$11649$Up9ra)
        (fxzero? . g$11648$Up9ra)
        (fxxor . g$11647$Up9ra)
        (fxrotate-bit-field . g$6661$Up9ra)
        (fxreverse-bit-field . g$11646$Up9ra)
        (fxpositive? . g$11645$Up9ra)
        (fxodd? . g$11644$Up9ra)
        (fxnot . g$11643$Up9ra)
        (fxnegative? . g$11642$Up9ra)
        (fxmod0 . g$11641$Up9ra)
        (fxmod . g$11640$Up9ra)
        (fxmin . g$11639$Up9ra)
        (fxmax . g$11638$Up9ra)
        (fxlength . g$11637$Up9ra)
        (fxior . g$11636$Up9ra)
        (fxif . g$6655$Up9ra)
        (fxfirst-bit-set . g$11635$Up9ra)
        (fxeven? . g$11634$Up9ra)
        (fxdiv0-and-mod0 . g$11633$Up9ra)
        (fxdiv0 . g$11632$Up9ra)
        (fxdiv-and-mod . g$11631$Up9ra)
        (fxdiv . g$11630$Up9ra)
        (fxcopy-bit-field . g$6658$Up9ra)
        (fxcopy-bit . g$6656$Up9ra)
        (fxbit-set? . g$11629$Up9ra)
        (fxbit-field . g$6657$Up9ra)
        (fxbit-count . g$11628$Up9ra)
        (fxarithmetic-shift-right . g$6660$Up9ra)
        (fxarithmetic-shift-left . g$6659$Up9ra)
        (fxarithmetic-shift . g$11627$Up9ra)
        (fxand . g$11626$Up9ra)
        (fx>? . g$11625$Up9ra)
        (fx>=? . g$11624$Up9ra)
        (fx=? . g$11623$Up9ra)
        (fx<? . g$11622$Up9ra)
        (fx<=? . g$11621$Up9ra)
        (fx-/carry . g$11620$Up9ra)
        (fx- . g$11619$Up9ra)
        (fx+/carry . g$11618$Up9ra)
        (fx+ . g$11617$Up9ra)
        (fx*/carry . g$11616$Up9ra)
        (fx* . g$11615$Up9ra)
        (greatest-fixnum . g$11614$Up9ra)
        (least-fixnum . g$11613$Up9ra)
        (fixnum-width . g$11612$Up9ra)
        (fixnum? . g$11611$Up9ra)
        (bitwise-rotate-bit-field . g$6609$Up9ra)
        (bitwise-reverse-bit-field . g$6610$Up9ra)
        (bitwise-length . g$11610$Up9ra)
        (bitwise-if . g$6603$Up9ra)
        (bitwise-first-bit-set . g$11609$Up9ra)
        (bitwise-copy-bit-field . g$6606$Up9ra)
        (bitwise-copy-bit . g$6604$Up9ra)
        (bitwise-bit-set? . g$11608$Up9ra)
        (bitwise-bit-field . g$11607$Up9ra)
        (bitwise-bit-count . g$11606$Up9ra)
        (bitwise-xor . g$11605$Up9ra)
        (bitwise-ior . g$11604$Up9ra)
        (bitwise-and . g$11603$Up9ra)
        (bitwise-not . g$11602$Up9ra)
        (bitwise-arithmetic-shift-right . g$6608$Up9ra)
        (bitwise-arithmetic-shift-left . g$6607$Up9ra)
        (bitwise-arithmetic-shift . g$11601$Up9ra)
        (zero? . g$11600$Up9ra)
        (vector? . g$11599$Up9ra)
        (vector-set! . g$11598$Up9ra)
        (vector-ref . g$11597$Up9ra)
        (vector-map . g$11596$Up9ra)
        (vector-length . g$11595$Up9ra)
        (vector-for-each . g$11594$Up9ra)
        (vector-fill! . g$11593$Up9ra)
        (vector->list . g$11592$Up9ra)
        (vector . g$11591$Up9ra)
        (values . g$11590$Up9ra)
        (truncate . g$11589$Up9ra)
        (tan . g$11588$Up9ra)
        (symbol? . g$11587$Up9ra)
        (symbol=? . g$11586$Up9ra)
        (symbol->string . g$11585$Up9ra)
        (substring . g$11584$Up9ra)
        (string? . g$11583$Up9ra)
        (string>? . g$11582$Up9ra)
        (string>=? . g$11581$Up9ra)
        (string=? . g$11580$Up9ra)
        (string<? . g$11579$Up9ra)
        (string<=? . g$11578$Up9ra)
        (string-ref . g$11577$Up9ra)
        (string-length . g$11576$Up9ra)
        (string-for-each . g$11575$Up9ra)
        (string-copy . g$11574$Up9ra)
        (string-append . g$11573$Up9ra)
        (string->symbol . g$11572$Up9ra)
        (string->number . g$11571$Up9ra)
        (string->list . g$11570$Up9ra)
        (string . g$11569$Up9ra)
        (sqrt . g$11568$Up9ra)
        (sin . g$11567$Up9ra)
        (round . g$11566$Up9ra)
        (reverse . g$11565$Up9ra)
        (real? . g$11564$Up9ra)
        (real-valued? . g$11563$Up9ra)
        (real-part . g$11562$Up9ra)
        (rationalize . g$5635$Up9ra)
        (rational? . g$11561$Up9ra)
        (rational-valued? . g$11560$Up9ra)
        (procedure? . g$11559$Up9ra)
        (positive? . g$11558$Up9ra)
        (pair? . g$11557$Up9ra)
        (odd? . g$11556$Up9ra)
        (numerator . g$11555$Up9ra)
        (number? . g$11554$Up9ra)
        (number->string . g$11553$Up9ra)
        (null? . g$11552$Up9ra)
        (not . g$11551$Up9ra)
        (negative? . g$11550$Up9ra)
        (nan? . g$11549$Up9ra)
        (min . g$11548$Up9ra)
        (max . g$11547$Up9ra)
        (map . g$11546$Up9ra)
        (make-vector . g$11545$Up9ra)
        (make-string . g$11544$Up9ra)
        (make-rectangular . g$11543$Up9ra)
        (make-polar . g$11542$Up9ra)
        (magnitude . g$11541$Up9ra)
        (log . g$11540$Up9ra)
        (list? . g$11539$Up9ra)
        (list-tail . g$11538$Up9ra)
        (list-ref . g$11537$Up9ra)
        (list->vector . g$11536$Up9ra)
        (list->string . g$11535$Up9ra)
        (list . g$11534$Up9ra)
        (length . g$11533$Up9ra)
        (lcm . g$11532$Up9ra)
        (integer? . g$11531$Up9ra)
        (integer-valued? . g$11530$Up9ra)
        (integer->char . g$11529$Up9ra)
        (infinite? . g$11528$Up9ra)
        (inexact? . g$11527$Up9ra)
        (inexact . g$11526$Up9ra)
        (imag-part . g$11525$Up9ra)
        (gcd . g$11524$Up9ra)
        (for-each . g$11523$Up9ra)
        (floor . g$11522$Up9ra)
        (finite? . g$11521$Up9ra)
        (expt . g$11520$Up9ra)
        (exp . g$11519$Up9ra)
        (exact? . g$11518$Up9ra)
        (exact-integer-sqrt . g$11517$Up9ra)
        (exact . g$11516$Up9ra)
        (even? . g$11515$Up9ra)
        (error . g$11514$Up9ra)
        (eqv? . g$11513$Up9ra)
        (equal? . g$11512$Up9ra)
        (eq? . g$11511$Up9ra)
        (dynamic-wind . g$11510$Up9ra)
        (div0-and-mod0 . g$11509$Up9ra)
        (mod0 . g$11508$Up9ra)
        (div0 . g$11507$Up9ra)
        (div-and-mod . g$11506$Up9ra)
        (mod . g$11505$Up9ra)
        (div . g$11504$Up9ra)
        (denominator . g$11503$Up9ra)
        (cos . g$11502$Up9ra)
        (cons . g$11501$Up9ra)
        (complex? . g$11500$Up9ra)
        (char? . g$11499$Up9ra)
        (char>? . g$11498$Up9ra)
        (char>=? . g$11497$Up9ra)
        (char=? . g$11496$Up9ra)
        (char<? . g$11495$Up9ra)
        (char<=? . g$11494$Up9ra)
        (char->integer . g$11493$Up9ra)
        (ceiling . g$11492$Up9ra)
        (call-with-values . g$11491$Up9ra)
        (call/cc . g$11490$Up9ra)
        (call-with-current-continuation . g$11489$Up9ra)
        (cddddr . g$5634$Up9ra)
        (cdddar . g$5633$Up9ra)
        (cddadr . g$5632$Up9ra)
        (cddaar . g$5631$Up9ra)
        (cdaddr . g$5630$Up9ra)
        (cdadar . g$5629$Up9ra)
        (cdaadr . g$5628$Up9ra)
        (cdaaar . g$5627$Up9ra)
        (cadddr . g$5626$Up9ra)
        (caddar . g$5625$Up9ra)
        (cadadr . g$5624$Up9ra)
        (cadaar . g$5623$Up9ra)
        (caaddr . g$5622$Up9ra)
        (caadar . g$5621$Up9ra)
        (caaadr . g$5620$Up9ra)
        (caaaar . g$5619$Up9ra)
        (cdddr . g$5618$Up9ra)
        (cddar . g$5617$Up9ra)
        (cdadr . g$5616$Up9ra)
        (cdaar . g$5615$Up9ra)
        (caddr . g$5614$Up9ra)
        (cadar . g$5613$Up9ra)
        (caadr . g$5612$Up9ra)
        (caaar . g$5611$Up9ra)
        (cddr . g$5610$Up9ra)
        (cdar . g$5609$Up9ra)
        (cadr . g$5608$Up9ra)
        (caar . g$5607$Up9ra)
        (cdr . g$11488$Up9ra)
        (car . g$11487$Up9ra)
        (boolean? . g$11486$Up9ra)
        (boolean=? . g$11485$Up9ra)
        (atan . g$11484$Up9ra)
        (assertion-violation . g$11483$Up9ra)
        (asin . g$11482$Up9ra)
        (apply . g$11481$Up9ra)
        (append . g$11480$Up9ra)
        (angle . g$11479$Up9ra)
        (acos . g$11478$Up9ra)
        (abs . g$11477$Up9ra)
        (/ . g$11476$Up9ra)
        (* . g$11475$Up9ra)
        (- . g$11474$Up9ra)
        (+ . g$11473$Up9ra)
        (>= . g$11472$Up9ra)
        (> . g$11471$Up9ra)
        (= . g$11470$Up9ra)
        (<= . g$11469$Up9ra)
        (< . g$11468$Up9ra)
        (make-record-printer . g$11467$Up9ra)
        (eqv-hash . g$11466$Up9ra)
        (eq-hash . g$11465$Up9ra)
        (reverse! . g$11464$Up9ra)
        (load/args . g$11306$Up9ra)
        (printf . g$7068$Up9ra)
        (fprintf . g$7069$Up9ra)
        (format . g$7070$Up9ra)
        (get-arity . g$11463$Up9ra)
        (gc-collect . g$11462$Up9ra)
        (clr-type? . g$11461$Up9ra)
        (get-clr-type . g$11460$Up9ra)
        (get-command-line . g$11459$Up9ra)
        (vector-append . g$11458$Up9ra)
        (vector-filter . g$11457$Up9ra)
        (vector-reverse! . g$11456$Up9ra)
        (vector-contains? . g$11455$Up9ra)
        (vector-index-of . g$11454$Up9ra)
        (vector-copy . g$11453$Up9ra)
        (vector-binary-search . g$11452$Up9ra)
        (get-output-string . g$11451$Up9ra)
        (open-output-string . g$11450$Up9ra)
        (open-input-string . g$11449$Up9ra)
        (string-format . g$11448$Up9ra)
        (trace-printer . g$11303$Up9ra)
        (make-traced-procedure . g$11447$Up9ra)
        (make-traced-macro . g$7089$Up9ra)
        (pmap . g$11446$Up9ra)
        (time-it . g$11445$Up9ra)
        (make-parameter . g$7094$Up9ra)
        (library-locator . g$11444$Up9ra)
        (get-library-paths . g$11443$Up9ra)
        (environment-symbols . g$8350$Up9ra)
        (interaction-environment-symbols . g$8349$Up9ra)
        (library-path . g$7519$Up9ra)
        (library-extensions . g$7520$Up9ra)
        (installed-libraries . g$7540$Up9ra)
        (expand . g$8355$Up9ra)
        (&no-nans . g$11442$Up9ra)
        (&no-infinities . g$11441$Up9ra)
        (&i/o-encoding . g$11440$Up9ra)
        (&i/o-decoding . g$11439$Up9ra)
        (&i/o-port . g$11438$Up9ra)
        (&i/o-file-does-not-exist . g$11437$Up9ra)
        (&i/o-file-already-exists . g$11436$Up9ra)
        (&i/o-file-is-read-only . g$11435$Up9ra)
        (&i/o-file-protection . g$11434$Up9ra)
        (&i/o-filename . g$11433$Up9ra)
        (&i/o-invalid-position . g$11432$Up9ra)
        (&i/o-write . g$11431$Up9ra)
        (&i/o-read . g$11430$Up9ra)
        (&i/o . g$11429$Up9ra)
        (&non-continuable . g$11428$Up9ra)
        (&undefined . g$11427$Up9ra)
        (&syntax . g$11426$Up9ra)
        (&lexical . g$11425$Up9ra)
        (&implementation-restriction . g$11424$Up9ra)
        (&non . g$11423$Up9ra)
        (&who . g$11422$Up9ra)
        (&irritants . g$11421$Up9ra)
        (&assertion . g$11420$Up9ra)
        (&violation . g$11419$Up9ra)
        (&error . g$11418$Up9ra)
        (&serious . g$11417$Up9ra)
        (&warning . g$11416$Up9ra)
        (&message . g$11415$Up9ra)
        (&condition . g$11414$Up9ra)
        (define-condition-type . g$11413$Up9ra)
        (define-enumeration . g$11412$Up9ra)
        (define-record-type . g$11411$Up9ra)
        (parent-rtd . g$11410$Up9ra)
        (nongenerative . g$11409$Up9ra)
        (opaque . g$11408$Up9ra)
        (sealed . g$11407$Up9ra)
        (protocol . g$11406$Up9ra)
        (parent . g$11405$Up9ra)
        (immutable . g$11404$Up9ra)
        (mutable . g$11403$Up9ra)
        (fields . g$11402$Up9ra)
        (error-handling-mode . g$11401$Up9ra)
        (file-options . g$11400$Up9ra)
        (buffer-mode . g$11399$Up9ra)
        (eol-style . g$11398$Up9ra)
        (guard . g$11397$Up9ra)
        (trace-letrec-syntax . g$11396$Up9ra)
        (trace-let-syntax . g$11395$Up9ra)
        (trace-define-syntax . g$11394$Up9ra)
        (trace-define . g$11393$Up9ra)
        (trace-lambda . g$11392$Up9ra)
        (unsyntax-splicing . g$11391$Up9ra)
        (unsyntax . g$11390$Up9ra)
        (unquote-splicing . g$11389$Up9ra)
        (unquote . g$11388$Up9ra)
        (_ . g$11387$Up9ra)
        (else . g$11386$Up9ra)
        (=> . g$11385$Up9ra)
        (... . g$11384$Up9ra)
        (assert . g$11383$Up9ra)
        (endianness . g$11382$Up9ra)
        (delay . g$11381$Up9ra)
        (time . g$11380$Up9ra)
        (or . g$11379$Up9ra)
        (and . g$11378$Up9ra)
        (do . g$11377$Up9ra)
        (cond . g$11376$Up9ra)
        (let* . g$11375$Up9ra)
        (let . g$11374$Up9ra)
        (identifier-syntax . g$11373$Up9ra)
        (with-syntax . g$11372$Up9ra)
        (quasisyntax . g$11371$Up9ra)
        (quasiquote . g$11370$Up9ra)
        (syntax-rules . g$11369$Up9ra)
        (include-into . g$11368$Up9ra)
        (include . g$11367$Up9ra)
        (define-struct . g$11366$Up9ra)
        (let-values . g$11365$Up9ra)
        (let*-values . g$11364$Up9ra)
        (record-constructor-descriptor . g$11363$Up9ra)
        (record-type-descriptor . g$11362$Up9ra)
        (fluid-let-syntax . g$11361$Up9ra)
        (case . g$11360$Up9ra)
        (parameterize . g$11359$Up9ra)
        (unless . g$11358$Up9ra)
        (when . g$11357$Up9ra)
        (if . g$11356$Up9ra)
        (letrec* . g$11355$Up9ra)
        (letrec . g$11354$Up9ra)
        (type-descriptor . g$11353$Up9ra)
        (case-lambda . g$11352$Up9ra)
        (lambda . g$11351$Up9ra)
        (syntax . g$11350$Up9ra)
        (syntax-case . g$11349$Up9ra)
        (quote . g$11348$Up9ra)
        (foreign-call . g$11347$Up9ra)
        (letrec-syntax . g$11346$Up9ra)
        (let-syntax . g$11345$Up9ra)
        (set! . g$11344$Up9ra)
        (import . g$11343$Up9ra)
        (library . g$11342$Up9ra)
        (begin . g$11341$Up9ra)
        (module . g$11340$Up9ra)
        (define-syntax . g$11339$Up9ra)
        (define . g$11338$Up9ra))
      '((g$8248$Up9ra core-prim . ellipsis-map)
        (g$11981$Up9ra core-prim . &no-nans-rcd)
        (g$11980$Up9ra core-prim . &no-nans-rtd)
        (g$11979$Up9ra core-prim . &no-infinities-rcd)
        (g$11978$Up9ra core-prim . &no-infinities-rtd)
        (g$11977$Up9ra core-prim . &i/o-encoding-rcd)
        (g$11976$Up9ra core-prim . &i/o-encoding-rtd)
        (g$11975$Up9ra core-prim . &i/o-decoding-rcd)
        (g$11974$Up9ra core-prim . &i/o-decoding-rtd)
        (g$11973$Up9ra core-prim . &i/o-port-rcd)
        (g$11972$Up9ra core-prim . &i/o-port-rtd)
        (g$11971$Up9ra core-prim . &i/o-file-does-not-exist-rcd)
        (g$11970$Up9ra core-prim . &i/o-file-does-not-exist-rtd)
        (g$11969$Up9ra core-prim . &i/o-file-already-exists-rcd)
        (g$11968$Up9ra core-prim . &i/o-file-already-exists-rtd)
        (g$11967$Up9ra core-prim . &i/o-fie-is-read-only-rcd)
        (g$11966$Up9ra core-prim . &i/o-fie-is-read-only-rtd)
        (g$11965$Up9ra core-prim . &i/o-file-protection-rcd)
        (g$11964$Up9ra core-prim . &i/o-file-protection-rtd)
        (g$11963$Up9ra core-prim . &i/o-filename-rcd)
        (g$11962$Up9ra core-prim . &i/o-filename-rtd)
        (g$11961$Up9ra core-prim . &i/o-invalid-position-rcd)
        (g$11960$Up9ra core-prim . &i/o-invalid-position-rtd)
        (g$11959$Up9ra core-prim . &i/o-write-rcd)
        (g$11958$Up9ra core-prim . &i/o-write-rtd)
        (g$11957$Up9ra core-prim . &i/o-read-rcd)
        (g$11956$Up9ra core-prim . &i/o-read-rtd)
        (g$11955$Up9ra core-prim . &i/o-rcd)
        (g$11954$Up9ra core-prim . &i/o-rtd)
        (g$11953$Up9ra core-prim . &undefined-rcd)
        (g$11952$Up9ra core-prim . &undefined-rtd)
        (g$11951$Up9ra core-prim . &syntax-rcd)
        (g$11950$Up9ra core-prim . &syntax-rtd)
        (g$11949$Up9ra core-prim . &lexical-rcd)
        (g$11948$Up9ra core-prim . &lexical-rtd)
        (g$11947$Up9ra core-prim . &implementation-restriction-rcd)
        (g$11946$Up9ra core-prim . &implementation-restriction-rtd)
        (g$11945$Up9ra core-prim . &non-continuable-rcd)
        (g$11944$Up9ra core-prim . &non-continuable-rtd)
        (g$11943$Up9ra core-prim . &who-rcd)
        (g$11942$Up9ra core-prim . &who-rtd)
        (g$11941$Up9ra core-prim . &irritants-rcd)
        (g$11940$Up9ra core-prim . &irritants-rtd)
        (g$11939$Up9ra core-prim . &assertion-rcd)
        (g$11938$Up9ra core-prim . &assertion-rtd)
        (g$11937$Up9ra core-prim . &violation-rcd)
        (g$11936$Up9ra core-prim . &violation-rtd)
        (g$11935$Up9ra core-prim . &error-rcd)
        (g$11934$Up9ra core-prim . &error-rtd)
        (g$11933$Up9ra core-prim . &serious-rcd)
        (g$11932$Up9ra core-prim . &serious-rtd)
        (g$11931$Up9ra core-prim . &warning-rcd)
        (g$11930$Up9ra core-prim . &warning-rtd)
        (g$11929$Up9ra core-prim . &message-rcd)
        (g$11928$Up9ra core-prim . &message-rtd)
        (g$11927$Up9ra core-prim . &condition-rcd)
        (g$11926$Up9ra core-prim . &condition-rtd)
        (g$11925$Up9ra core-prim . library-letrec*)
        (g$11924$Up9ra core-prim . annotation-stripped)
        (g$11923$Up9ra core-prim . annotation-source)
        (g$11922$Up9ra core-prim . annotation-expression)
        (g$11921$Up9ra core-prim . annotation?)
        (g$11920$Up9ra core-prim . read-annotated)
        (g$11919$Up9ra core-prim . tanh)
        (g$11918$Up9ra core-prim . cosh)
        (g$11917$Up9ra core-prim . sinh)
        (g$11916$Up9ra core-prim . make-guid)
        (g$11915$Up9ra core-prim . unspecified?)
        (g$11914$Up9ra core-prim . make-trace)
        (g$11913$Up9ra core-prim . make-list)
        (g$11912$Up9ra core-prim . last-pair)
        (g$11911$Up9ra core-prim . load-r5rs)
        (g$11910$Up9ra core-prim . license)
        (g$11909$Up9ra core-prim . stacktrace)
        (g$11308$Up9ra core-prim . ironscheme-build)
        (g$11908$Up9ra core-prim . define-clr-class-internal)
        (g$11907$Up9ra core-prim . clr-field-set!-internal)
        (g$11906$Up9ra core-prim . clr-field-get-internal)
        (g$11905$Up9ra core-prim . clr-cast-internal)
        (g$11904$Up9ra core-prim . clr-call-internal)
        (g$11903$Up9ra core-prim . clr-new-internal)
        (g$11902$Up9ra core-prim . clr-new-array-internal)
        (g$11901$Up9ra core-prim . clr-is-internal)
        (g$11900$Up9ra core-prim . clr-reference-internal)
        (g$11899$Up9ra core-prim . clr-using-internal)
        (g$11898$Up9ra core-prim . clr-clear-usings-internal)
        (g$8367$Up9ra core-prim . syntax-error)
        (g$8243$Up9ra core-prim . syntax-dispatch)
        (g$11897$Up9ra core-prim . compile-core)
        (g$11896$Up9ra core-prim . eval-core)
        (g$11895$Up9ra core-prim . set-symbol-value!)
        (g$11894$Up9ra core-prim . symbol-value)
        (g$11893$Up9ra core-prim . ungensym)
        (g$11892$Up9ra core-prim . gensym)
        (g$11891$Up9ra core-prim . void)
        (g$11890$Up9ra core-prim . load-serialized-library)
        (g$11889$Up9ra core-prim . serialize-library)
        (g$11310$Up9ra core-prim . compile-system-libraries)
        (g$11312$Up9ra core-prim . compile->closure)
        (g$11311$Up9ra core-prim . compile)
        (g$11307$Up9ra core-prim . load)
        (g$8376$Up9ra core-prim . interaction-environment)
        (g$11888$Up9ra core-prim . char-ready?)
        (g$11887$Up9ra core-prim . string-upcase)
        (g$11886$Up9ra core-prim . string-titlecase)
        (g$11885$Up9ra core-prim . string-normalize-nfkd)
        (g$11884$Up9ra core-prim . string-normalize-nfkc)
        (g$11883$Up9ra core-prim . string-normalize-nfd)
        (g$11882$Up9ra core-prim . string-normalize-nfc)
        (g$11881$Up9ra core-prim . string-foldcase)
        (g$11880$Up9ra core-prim . string-downcase)
        (g$11879$Up9ra core-prim . string-ci>?)
        (g$11878$Up9ra core-prim . string-ci>=?)
        (g$11877$Up9ra core-prim . string-ci=?)
        (g$11876$Up9ra core-prim . string-ci<?)
        (g$11875$Up9ra core-prim . string-ci<=?)
        (g$11874$Up9ra core-prim . char-whitespace?)
        (g$11873$Up9ra core-prim . char-upper-case?)
        (g$11872$Up9ra core-prim . char-title-case?)
        (g$11871$Up9ra core-prim . char-numeric?)
        (g$11870$Up9ra core-prim . char-lower-case?)
        (g$11869$Up9ra core-prim . char-general-category)
        (g$11868$Up9ra core-prim . char-upcase)
        (g$11867$Up9ra core-prim . char-titlecase)
        (g$11866$Up9ra core-prim . char-foldcase)
        (g$11865$Up9ra core-prim . char-downcase)
        (g$11864$Up9ra core-prim . char-ci>?)
        (g$11863$Up9ra core-prim . char-ci>=?)
        (g$11862$Up9ra core-prim . char-ci=?)
        (g$11861$Up9ra core-prim . char-ci<?)
        (g$11860$Up9ra core-prim . char-ci<=?)
        (g$11859$Up9ra core-prim . char-alphabetic?)
        (g$7980$Up9ra core-prim . variable-transformer-procedure)
        (g$7979$Up9ra core-prim . variable-transformer?)
        (g$7978$Up9ra core-prim . make-variable-transformer)
        (g$8371$Up9ra core-prim . identifier?)
        (g$8363$Up9ra core-prim . generate-temporaries)
        (g$8364$Up9ra core-prim . free-identifier=?)
        (g$8373$Up9ra core-prim . syntax->datum)
        (g$8372$Up9ra core-prim . datum->syntax)
        (g$8365$Up9ra core-prim . bound-identifier=?)
        (g$11858$Up9ra core-prim . record-type-descriptor?)
        (g$11857$Up9ra core-prim . record-predicate)
        (g$11856$Up9ra core-prim . record-mutator)
        (g$11855$Up9ra core-prim . record-constructor)
        (g$11854$Up9ra core-prim . record-accessor)
        (g$11853$Up9ra core-prim . make-record-type-descriptor)
        (g$11852$Up9ra core-prim . make-record-constructor-descriptor)
        (g$11851$Up9ra core-prim . record?)
        (g$11850$Up9ra core-prim . record-type-uid)
        (g$11849$Up9ra core-prim . record-type-sealed?)
        (g$11848$Up9ra core-prim . record-type-parent)
        (g$11847$Up9ra core-prim . record-type-opaque?)
        (g$11846$Up9ra core-prim . record-type-name)
        (g$11845$Up9ra core-prim . record-type-generative?)
        (g$11844$Up9ra core-prim . record-type-field-names)
        (g$11843$Up9ra core-prim . record-rtd)
        (g$11842$Up9ra core-prim . record-field-mutable?)
        (g$6018$Up9ra core-prim . delete-file)
        (g$6017$Up9ra core-prim . file-exists?)
        (g$11841$Up9ra core-prim . vector-sort!)
        (g$11840$Up9ra core-prim . vector-sort)
        (g$6524$Up9ra core-prim . list-sort)
        (g$11839$Up9ra core-prim . symbol-hash)
        (g$11838$Up9ra core-prim . string-ci-hash)
        (g$11837$Up9ra core-prim . string-hash)
        (g$11836$Up9ra core-prim . equal-hash)
        (g$11835$Up9ra core-prim . hashtable-equivalence-function)
        (g$11834$Up9ra core-prim . make-hashtable)
        (g$11833$Up9ra core-prim . hashtable-hash-function)
        (g$5985$Up9ra core-prim . make-eqv-hashtable)
        (g$5984$Up9ra core-prim . make-eq-hashtable)
        (g$11832$Up9ra core-prim . hashtable?)
        (g$5991$Up9ra core-prim . hashtable-update!)
        (g$5986$Up9ra core-prim . hashtable-size)
        (g$5988$Up9ra core-prim . hashtable-set!)
        (g$5987$Up9ra core-prim . hashtable-ref)
        (g$11831$Up9ra core-prim . hashtable-mutable?)
        (g$11830$Up9ra core-prim . hashtable-keys)
        (g$11829$Up9ra core-prim . hashtable-entries)
        (g$5989$Up9ra core-prim . hashtable-delete!)
        (g$11828$Up9ra core-prim . hashtable-copy)
        (g$5990$Up9ra core-prim . hashtable-contains?)
        (g$5992$Up9ra core-prim . hashtable-clear!)
        (g$11827$Up9ra core-prim . call-with-output-file)
        (g$11826$Up9ra core-prim . call-with-input-file)
        (g$11825$Up9ra core-prim . write-char)
        (g$11824$Up9ra core-prim . write)
        (g$11823$Up9ra core-prim . with-output-to-file)
        (g$11822$Up9ra core-prim . with-input-from-file)
        (g$11821$Up9ra core-prim . read-char)
        (g$11820$Up9ra core-prim . read)
        (g$11819$Up9ra core-prim . peek-char)
        (g$11818$Up9ra core-prim . open-output-file)
        (g$11817$Up9ra core-prim . open-input-file)
        (g$11816$Up9ra core-prim . newline)
        (g$11815$Up9ra core-prim . display)
        (g$11814$Up9ra core-prim . close-output-port)
        (g$11813$Up9ra core-prim . close-input-port)
        (g$11812$Up9ra core-prim . eof-object?)
        (g$11811$Up9ra core-prim . eof-object)
        (g$11810$Up9ra core-prim . current-error-port)
        (g$11809$Up9ra core-prim . current-output-port)
        (g$11808$Up9ra core-prim . current-input-port)
        (g$11807$Up9ra core-prim . output-port?)
        (g$11806$Up9ra core-prim . input-port?)
        (g$11805$Up9ra core-prim . utf-8-codec)
        (g$11804$Up9ra core-prim . utf-16-codec)
        (g$11803$Up9ra core-prim . transcoder-error-handling-mode)
        (g$11802$Up9ra core-prim . transcoder-eol-style)
        (g$11801$Up9ra core-prim . transcoder-codec)
        (g$11800$Up9ra core-prim . transcoded-port)
        (g$11799$Up9ra core-prim . textual-port?)
        (g$11798$Up9ra core-prim . string->bytevector)
        (g$11797$Up9ra core-prim . standard-output-port)
        (g$11796$Up9ra core-prim . standard-input-port)
        (g$11795$Up9ra core-prim . standard-error-port)
        (g$11794$Up9ra core-prim . set-port-position!)
        (g$11793$Up9ra core-prim . put-u8)
        (g$11792$Up9ra core-prim . put-string)
        (g$11791$Up9ra core-prim . put-datum)
        (g$11790$Up9ra core-prim . put-char)
        (g$11789$Up9ra core-prim . put-bytevector)
        (g$11788$Up9ra core-prim . port?)
        (g$11787$Up9ra core-prim . port-transcoder)
        (g$11786$Up9ra core-prim . port-position)
        (g$11785$Up9ra core-prim . port-has-set-port-position!?)
        (g$11784$Up9ra core-prim . port-has-port-position?)
        (g$11783$Up9ra core-prim . port-eof?)
        (g$11782$Up9ra core-prim . output-port-buffer-mode)
        (g$6915$Up9ra core-prim . open-string-output-port)
        (g$11781$Up9ra core-prim . open-string-input-port)
        (g$11780$Up9ra core-prim . open-file-output-port)
        (g$11779$Up9ra core-prim . open-file-input/output-port)
        (g$11778$Up9ra core-prim . open-file-input-port)
        (g$11777$Up9ra core-prim . open-bytevector-output-port)
        (g$11776$Up9ra core-prim . open-bytevector-input-port)
        (g$11775$Up9ra core-prim . native-transcoder)
        (g$11774$Up9ra core-prim . native-eol-style)
        (g$11773$Up9ra core-prim . make-transcoder)
        (g$11772$Up9ra core-prim . latin-1-codec)
        (g$6772$Up9ra core-prim . make-i/o-write-error)
        (g$6758$Up9ra core-prim . make-i/o-read-error)
        (g$6877$Up9ra core-prim . make-i/o-port-error)
        (g$6787$Up9ra core-prim . make-i/o-invalid-position-error)
        (g$6804$Up9ra core-prim . make-i/o-filename-error)
        (g$6820$Up9ra core-prim . make-i/o-file-protection-error)
        (g$6834$Up9ra core-prim . make-i/o-file-is-read-only-error)
        (g$6862$Up9ra core-prim . make-i/o-file-does-not-exist-error)
        (g$6848$Up9ra core-prim . make-i/o-file-already-exists-error)
        (g$6744$Up9ra core-prim . make-i/o-error)
        (g$6908$Up9ra core-prim . make-i/o-encoding-error)
        (g$6893$Up9ra core-prim . make-i/o-decoding-error)
        (g$11771$Up9ra core-prim . make-custom-textual-output-port)
        (g$11770$Up9ra core-prim . make-custom-textual-input/output-port)
        (g$11769$Up9ra core-prim . make-custom-textual-input-port)
        (g$11768$Up9ra core-prim . make-custom-binary-output-port)
        (g$11767$Up9ra core-prim . make-custom-binary-input/output-port)
        (g$11766$Up9ra core-prim . make-custom-binary-input-port)
        (g$11765$Up9ra core-prim . make-bytevector)
        (g$11764$Up9ra core-prim . lookahead-u8)
        (g$11763$Up9ra core-prim . lookahead-char)
        (g$6773$Up9ra core-prim . i/o-write-error?)
        (g$6759$Up9ra core-prim . i/o-read-error?)
        (g$6879$Up9ra core-prim . i/o-port-error?)
        (g$6789$Up9ra core-prim . i/o-invalid-position-error?)
        (g$6806$Up9ra core-prim . i/o-filename-error?)
        (g$6821$Up9ra core-prim . i/o-file-protection-error?)
        (g$6835$Up9ra core-prim . i/o-file-is-read-only-error?)
        (g$6863$Up9ra core-prim . i/o-file-does-not-exist-error?)
        (g$6849$Up9ra core-prim . i/o-file-already-exists-error?)
        (g$6745$Up9ra core-prim . i/o-error?)
        (g$6880$Up9ra core-prim . i/o-error-port)
        (g$6807$Up9ra core-prim . i/o-error-filename)
        (g$6910$Up9ra core-prim . i/o-encoding-error?)
        (g$6911$Up9ra core-prim . i/o-encoding-error-char)
        (g$6894$Up9ra core-prim . i/o-decoding-error?)
        (g$11762$Up9ra core-prim . get-u8)
        (g$11761$Up9ra core-prim . get-string-n!)
        (g$11760$Up9ra core-prim . get-string-n)
        (g$11759$Up9ra core-prim . get-string-all)
        (g$11758$Up9ra core-prim . get-line)
        (g$11757$Up9ra core-prim . get-datum)
        (g$11756$Up9ra core-prim . get-char)
        (g$11755$Up9ra core-prim . get-bytevector-some)
        (g$11754$Up9ra core-prim . get-bytevector-n!)
        (g$11753$Up9ra core-prim . get-bytevector-n)
        (g$11752$Up9ra core-prim . get-bytevector-all)
        (g$11751$Up9ra core-prim . flush-output-port)
        (g$11750$Up9ra core-prim . close-port)
        (g$11749$Up9ra core-prim . call-with-string-output-port)
        (g$11748$Up9ra core-prim . call-with-port)
        (g$11747$Up9ra core-prim . call-with-bytevector-output-port)
        (g$11746$Up9ra core-prim . bytevector->string)
        (g$11745$Up9ra core-prim . buffer-mode?)
        (g$11744$Up9ra core-prim . binary-port?)
        (g$8354$Up9ra core-prim . scheme-report-environment)
        (g$6511$Up9ra core-prim . quotient)
        (g$8353$Up9ra core-prim . null-environment)
        (g$6512$Up9ra core-prim . remainder)
        (g$6513$Up9ra core-prim . modulo)
        (g$11743$Up9ra core-prim . inexact->exact)
        (g$11742$Up9ra core-prim . force)
        (g$11741$Up9ra core-prim . exact->inexact)
        (g$11740$Up9ra core-prim . exit)
        (g$11304$Up9ra core-prim . command-line)
        (g$11739$Up9ra core-prim . string-fill!)
        (g$11738$Up9ra core-prim . string-set!)
        (g$11737$Up9ra core-prim . set-cdr!)
        (g$11736$Up9ra core-prim . set-car!)
        (g$6098$Up9ra core-prim . remove)
        (g$6099$Up9ra core-prim . remv)
        (g$6084$Up9ra core-prim . remp)
        (g$6100$Up9ra core-prim . remq)
        (g$6083$Up9ra core-prim . partition)
        (g$11735$Up9ra core-prim . memv)
        (g$11734$Up9ra core-prim . memq)
        (g$6090$Up9ra core-prim . memp)
        (g$6089$Up9ra core-prim . member)
        (g$6094$Up9ra core-prim . exists)
        (g$6093$Up9ra core-prim . for-all)
        (g$6097$Up9ra core-prim . fold-right)
        (g$6096$Up9ra core-prim . fold-left)
        (g$6082$Up9ra core-prim . find)
        (g$6085$Up9ra core-prim . filter)
        (g$6095$Up9ra core-prim . cons*)
        (g$6086$Up9ra core-prim . assv)
        (g$11733$Up9ra core-prim . assq)
        (g$6088$Up9ra core-prim . assp)
        (g$6087$Up9ra core-prim . assoc)
        (g$11732$Up9ra core-prim . with-exception-handler)
        (g$11731$Up9ra core-prim . raise-continuable)
        (g$11730$Up9ra core-prim . raise)
        (g$8356$Up9ra core-prim . eval)
        (g$8352$Up9ra core-prim . environment)
        (g$6962$Up9ra core-prim . make-enumeration)
        (g$6969$Up9ra core-prim . enum-set=?)
        (g$6963$Up9ra core-prim . enum-set-universe)
        (g$6970$Up9ra core-prim . enum-set-union)
        (g$6968$Up9ra core-prim . enum-set-subset?)
        (g$6974$Up9ra core-prim . enum-set-projection)
        (g$6967$Up9ra core-prim . enum-set-member?)
        (g$6971$Up9ra core-prim . enum-set-intersection)
        (g$6964$Up9ra core-prim . enum-set-indexer)
        (g$6972$Up9ra core-prim . enum-set-difference)
        (g$6965$Up9ra core-prim . enum-set-constructor)
        (g$6973$Up9ra core-prim . enum-set-complement)
        (g$6966$Up9ra core-prim . enum-set->list)
        (g$6422$Up9ra core-prim . who-condition?)
        (g$6333$Up9ra core-prim . warning?)
        (g$6375$Up9ra core-prim . violation?)
        (g$6499$Up9ra core-prim . undefined-violation?)
        (g$6483$Up9ra core-prim . syntax-violation?)
        (g$6485$Up9ra core-prim . syntax-violation-subform)
        (g$6484$Up9ra core-prim . syntax-violation-form)
        (g$8370$Up9ra core-prim . syntax-violation)
        (g$11729$Up9ra core-prim . simple-conditions)
        (g$6347$Up9ra core-prim . serious-condition?)
        (g$6437$Up9ra core-prim . non-continuable-violation?)
        (g$6318$Up9ra core-prim . message-condition?)
        (g$6420$Up9ra core-prim . make-who-condition)
        (g$6332$Up9ra core-prim . make-warning)
        (g$6374$Up9ra core-prim . make-violation)
        (g$6498$Up9ra core-prim . make-undefined-violation)
        (g$6480$Up9ra core-prim . make-syntax-violation)
        (g$6346$Up9ra core-prim . make-serious-condition)
        (g$6436$Up9ra core-prim . make-non-continuable-violation)
        (g$6316$Up9ra core-prim . make-message-condition)
        (g$6464$Up9ra core-prim . make-lexical-violation)
        (g$6403$Up9ra core-prim . make-irritants-condition)
        (g$6450$Up9ra core-prim . make-implementation-restriction-violation)
        (g$6360$Up9ra core-prim . make-error)
        (g$6388$Up9ra core-prim . make-assertion-violation)
        (g$6465$Up9ra core-prim . lexical-violation?)
        (g$6405$Up9ra core-prim . irritants-condition?)
        (g$6451$Up9ra core-prim . implementation-restriction-violation?)
        (g$6361$Up9ra core-prim . error?)
        (g$6423$Up9ra core-prim . condition-who)
        (g$11728$Up9ra core-prim . condition-predicate)
        (g$6319$Up9ra core-prim . condition-message)
        (g$6406$Up9ra core-prim . condition-irritants)
        (g$11727$Up9ra core-prim . condition-accessor)
        (g$11726$Up9ra core-prim . condition)
        (g$6389$Up9ra core-prim . assertion-violation?)
        (g$11725$Up9ra core-prim . condition?)
        (g$11724$Up9ra core-prim . utf32->string)
        (g$11723$Up9ra core-prim . utf16->string)
        (g$11722$Up9ra core-prim . utf8->string)
        (g$11721$Up9ra core-prim . uint-list->bytevector)
        (g$11720$Up9ra core-prim . u8-list->bytevector)
        (g$11719$Up9ra core-prim . string->utf8)
        (g$11718$Up9ra core-prim . string->utf32)
        (g$11717$Up9ra core-prim . string->utf16)
        (g$11716$Up9ra core-prim . sint-list->bytevector)
        (g$6174$Up9ra core-prim . native-endianness)
        (g$11715$Up9ra core-prim . bytevector?)
        (g$11714$Up9ra core-prim . bytevector=?)
        (g$11713$Up9ra core-prim . bytevector-uint-set!)
        (g$11712$Up9ra core-prim . bytevector-uint-ref)
        (g$11711$Up9ra core-prim . bytevector-u8-set!)
        (g$11710$Up9ra core-prim . bytevector-u8-ref)
        (g$6195$Up9ra core-prim . bytevector-u64-set!)
        (g$6191$Up9ra core-prim . bytevector-u64-ref)
        (g$6197$Up9ra core-prim . bytevector-u64-native-set!)
        (g$6193$Up9ra core-prim . bytevector-u64-native-ref)
        (g$6187$Up9ra core-prim . bytevector-u32-set!)
        (g$6183$Up9ra core-prim . bytevector-u32-ref)
        (g$6189$Up9ra core-prim . bytevector-u32-native-set!)
        (g$6185$Up9ra core-prim . bytevector-u32-native-ref)
        (g$6179$Up9ra core-prim . bytevector-u16-set!)
        (g$6175$Up9ra core-prim . bytevector-u16-ref)
        (g$6181$Up9ra core-prim . bytevector-u16-native-set!)
        (g$6177$Up9ra core-prim . bytevector-u16-native-ref)
        (g$11709$Up9ra core-prim . bytevector-sint-set!)
        (g$11708$Up9ra core-prim . bytevector-sint-ref)
        (g$11707$Up9ra core-prim . bytevector-s8-set!)
        (g$11706$Up9ra core-prim . bytevector-s8-ref)
        (g$6196$Up9ra core-prim . bytevector-s64-set!)
        (g$6192$Up9ra core-prim . bytevector-s64-ref)
        (g$6198$Up9ra core-prim . bytevector-s64-native-set!)
        (g$6194$Up9ra core-prim . bytevector-s64-native-ref)
        (g$6188$Up9ra core-prim . bytevector-s32-set!)
        (g$6184$Up9ra core-prim . bytevector-s32-ref)
        (g$6190$Up9ra core-prim . bytevector-s32-native-set!)
        (g$6186$Up9ra core-prim . bytevector-s32-native-ref)
        (g$6180$Up9ra core-prim . bytevector-s16-set!)
        (g$6176$Up9ra core-prim . bytevector-s16-ref)
        (g$6182$Up9ra core-prim . bytevector-s16-native-set!)
        (g$6178$Up9ra core-prim . bytevector-s16-native-ref)
        (g$11705$Up9ra core-prim . bytevector-length)
        (g$11704$Up9ra core-prim . bytevector-ieee-single-set!)
        (g$11703$Up9ra core-prim . bytevector-ieee-single-ref)
        (g$6201$Up9ra core-prim . bytevector-ieee-single-native-set!)
        (g$6199$Up9ra core-prim . bytevector-ieee-single-native-ref)
        (g$11702$Up9ra core-prim . bytevector-ieee-double-set!)
        (g$11701$Up9ra core-prim . bytevector-ieee-double-ref)
        (g$6202$Up9ra core-prim . bytevector-ieee-double-native-set!)
        (g$6200$Up9ra core-prim . bytevector-ieee-double-native-ref)
        (g$11700$Up9ra core-prim . bytevector-fill!)
        (g$11699$Up9ra core-prim . bytevector-copy!)
        (g$11698$Up9ra core-prim . bytevector-copy)
        (g$11697$Up9ra core-prim . bytevector->uint-list)
        (g$11696$Up9ra core-prim . bytevector->u8-list)
        (g$11695$Up9ra core-prim . bytevector->sint-list)
        (g$6730$Up9ra core-prim . no-nans-violation?)
        (g$6716$Up9ra core-prim . no-infinities-violation?)
        (g$6729$Up9ra core-prim . make-no-nans-violation)
        (g$6715$Up9ra core-prim . make-no-infinities-violation)
        (g$11694$Up9ra core-prim . real->flonum)
        (g$11693$Up9ra core-prim . flzero?)
        (g$11692$Up9ra core-prim . fltruncate)
        (g$11691$Up9ra core-prim . fltan)
        (g$11690$Up9ra core-prim . flsqrt)
        (g$11689$Up9ra core-prim . flsin)
        (g$11688$Up9ra core-prim . flround)
        (g$11687$Up9ra core-prim . flpositive?)
        (g$11686$Up9ra core-prim . flonum?)
        (g$11685$Up9ra core-prim . flodd?)
        (g$11684$Up9ra core-prim . flnumerator)
        (g$11683$Up9ra core-prim . flnegative?)
        (g$11682$Up9ra core-prim . flnan?)
        (g$11681$Up9ra core-prim . flmod0)
        (g$11680$Up9ra core-prim . flmod)
        (g$11679$Up9ra core-prim . flmin)
        (g$11678$Up9ra core-prim . flmax)
        (g$11677$Up9ra core-prim . fllog)
        (g$11676$Up9ra core-prim . flinteger?)
        (g$11675$Up9ra core-prim . flinfinite?)
        (g$11674$Up9ra core-prim . flfloor)
        (g$11673$Up9ra core-prim . flfinite?)
        (g$11672$Up9ra core-prim . flexpt)
        (g$11671$Up9ra core-prim . flexp)
        (g$11670$Up9ra core-prim . fleven?)
        (g$11669$Up9ra core-prim . fldiv0-and-mod0)
        (g$11668$Up9ra core-prim . fldiv0)
        (g$11667$Up9ra core-prim . fldiv-and-mod)
        (g$11666$Up9ra core-prim . fldiv)
        (g$11665$Up9ra core-prim . fldenominator)
        (g$11664$Up9ra core-prim . flcos)
        (g$11663$Up9ra core-prim . flceiling)
        (g$11662$Up9ra core-prim . flatan)
        (g$11661$Up9ra core-prim . flasin)
        (g$11660$Up9ra core-prim . flacos)
        (g$11659$Up9ra core-prim . flabs)
        (g$11658$Up9ra core-prim . fl>?)
        (g$11657$Up9ra core-prim . fl>=?)
        (g$11656$Up9ra core-prim . fl=?)
        (g$11655$Up9ra core-prim . fl<?)
        (g$11654$Up9ra core-prim . fl<=?)
        (g$11653$Up9ra core-prim . fl/)
        (g$11652$Up9ra core-prim . fl-)
        (g$11651$Up9ra core-prim . fl+)
        (g$11650$Up9ra core-prim . fl*)
        (g$11649$Up9ra core-prim . fixnum->flonum)
        (g$11648$Up9ra core-prim . fxzero?)
        (g$11647$Up9ra core-prim . fxxor)
        (g$6661$Up9ra core-prim . fxrotate-bit-field)
        (g$11646$Up9ra core-prim . fxreverse-bit-field)
        (g$11645$Up9ra core-prim . fxpositive?)
        (g$11644$Up9ra core-prim . fxodd?)
        (g$11643$Up9ra core-prim . fxnot)
        (g$11642$Up9ra core-prim . fxnegative?)
        (g$11641$Up9ra core-prim . fxmod0)
        (g$11640$Up9ra core-prim . fxmod)
        (g$11639$Up9ra core-prim . fxmin)
        (g$11638$Up9ra core-prim . fxmax)
        (g$11637$Up9ra core-prim . fxlength)
        (g$11636$Up9ra core-prim . fxior)
        (g$6655$Up9ra core-prim . fxif)
        (g$11635$Up9ra core-prim . fxfirst-bit-set)
        (g$11634$Up9ra core-prim . fxeven?)
        (g$11633$Up9ra core-prim . fxdiv0-and-mod0)
        (g$11632$Up9ra core-prim . fxdiv0)
        (g$11631$Up9ra core-prim . fxdiv-and-mod)
        (g$11630$Up9ra core-prim . fxdiv)
        (g$6658$Up9ra core-prim . fxcopy-bit-field)
        (g$6656$Up9ra core-prim . fxcopy-bit)
        (g$11629$Up9ra core-prim . fxbit-set?)
        (g$6657$Up9ra core-prim . fxbit-field)
        (g$11628$Up9ra core-prim . fxbit-count)
        (g$6660$Up9ra core-prim . fxarithmetic-shift-right)
        (g$6659$Up9ra core-prim . fxarithmetic-shift-left)
        (g$11627$Up9ra core-prim . fxarithmetic-shift)
        (g$11626$Up9ra core-prim . fxand)
        (g$11625$Up9ra core-prim . fx>?)
        (g$11624$Up9ra core-prim . fx>=?)
        (g$11623$Up9ra core-prim . fx=?)
        (g$11622$Up9ra core-prim . fx<?)
        (g$11621$Up9ra core-prim . fx<=?)
        (g$11620$Up9ra core-prim . fx-/carry)
        (g$11619$Up9ra core-prim . fx-)
        (g$11618$Up9ra core-prim . fx+/carry)
        (g$11617$Up9ra core-prim . fx+)
        (g$11616$Up9ra core-prim . fx*/carry)
        (g$11615$Up9ra core-prim . fx*)
        (g$11614$Up9ra core-prim . greatest-fixnum)
        (g$11613$Up9ra core-prim . least-fixnum)
        (g$11612$Up9ra core-prim . fixnum-width)
        (g$11611$Up9ra core-prim . fixnum?)
        (g$6609$Up9ra core-prim . bitwise-rotate-bit-field)
        (g$6610$Up9ra core-prim . bitwise-reverse-bit-field)
        (g$11610$Up9ra core-prim . bitwise-length)
        (g$6603$Up9ra core-prim . bitwise-if)
        (g$11609$Up9ra core-prim . bitwise-first-bit-set)
        (g$6606$Up9ra core-prim . bitwise-copy-bit-field)
        (g$6604$Up9ra core-prim . bitwise-copy-bit)
        (g$11608$Up9ra core-prim . bitwise-bit-set?)
        (g$11607$Up9ra core-prim . bitwise-bit-field)
        (g$11606$Up9ra core-prim . bitwise-bit-count)
        (g$11605$Up9ra core-prim . bitwise-xor)
        (g$11604$Up9ra core-prim . bitwise-ior)
        (g$11603$Up9ra core-prim . bitwise-and)
        (g$11602$Up9ra core-prim . bitwise-not)
        (g$6608$Up9ra core-prim . bitwise-arithmetic-shift-right)
        (g$6607$Up9ra core-prim . bitwise-arithmetic-shift-left)
        (g$11601$Up9ra core-prim . bitwise-arithmetic-shift)
        (g$11600$Up9ra core-prim . zero?)
        (g$11599$Up9ra core-prim . vector?)
        (g$11598$Up9ra core-prim . vector-set!)
        (g$11597$Up9ra core-prim . vector-ref)
        (g$11596$Up9ra core-prim . vector-map)
        (g$11595$Up9ra core-prim . vector-length)
        (g$11594$Up9ra core-prim . vector-for-each)
        (g$11593$Up9ra core-prim . vector-fill!)
        (g$11592$Up9ra core-prim . vector->list)
        (g$11591$Up9ra core-prim . vector)
        (g$11590$Up9ra core-prim . values)
        (g$11589$Up9ra core-prim . truncate)
        (g$11588$Up9ra core-prim . tan)
        (g$11587$Up9ra core-prim . symbol?)
        (g$11586$Up9ra core-prim . symbol=?)
        (g$11585$Up9ra core-prim . symbol->string)
        (g$11584$Up9ra core-prim . substring)
        (g$11583$Up9ra core-prim . string?)
        (g$11582$Up9ra core-prim . string>?)
        (g$11581$Up9ra core-prim . string>=?)
        (g$11580$Up9ra core-prim . string=?)
        (g$11579$Up9ra core-prim . string<?)
        (g$11578$Up9ra core-prim . string<=?)
        (g$11577$Up9ra core-prim . string-ref)
        (g$11576$Up9ra core-prim . string-length)
        (g$11575$Up9ra core-prim . string-for-each)
        (g$11574$Up9ra core-prim . string-copy)
        (g$11573$Up9ra core-prim . string-append)
        (g$11572$Up9ra core-prim . string->symbol)
        (g$11571$Up9ra core-prim . string->number)
        (g$11570$Up9ra core-prim . string->list)
        (g$11569$Up9ra core-prim . string)
        (g$11568$Up9ra core-prim . sqrt)
        (g$11567$Up9ra core-prim . sin)
        (g$11566$Up9ra core-prim . round)
        (g$11565$Up9ra core-prim . reverse)
        (g$11564$Up9ra core-prim . real?)
        (g$11563$Up9ra core-prim . real-valued?)
        (g$11562$Up9ra core-prim . real-part)
        (g$5635$Up9ra core-prim . rationalize)
        (g$11561$Up9ra core-prim . rational?)
        (g$11560$Up9ra core-prim . rational-valued?)
        (g$11559$Up9ra core-prim . procedure?)
        (g$11558$Up9ra core-prim . positive?)
        (g$11557$Up9ra core-prim . pair?)
        (g$11556$Up9ra core-prim . odd?)
        (g$11555$Up9ra core-prim . numerator)
        (g$11554$Up9ra core-prim . number?)
        (g$11553$Up9ra core-prim . number->string)
        (g$11552$Up9ra core-prim . null?)
        (g$11551$Up9ra core-prim . not)
        (g$11550$Up9ra core-prim . negative?)
        (g$11549$Up9ra core-prim . nan?)
        (g$11548$Up9ra core-prim . min)
        (g$11547$Up9ra core-prim . max)
        (g$11546$Up9ra core-prim . map)
        (g$11545$Up9ra core-prim . make-vector)
        (g$11544$Up9ra core-prim . make-string)
        (g$11543$Up9ra core-prim . make-rectangular)
        (g$11542$Up9ra core-prim . make-polar)
        (g$11541$Up9ra core-prim . magnitude)
        (g$11540$Up9ra core-prim . log)
        (g$11539$Up9ra core-prim . list?)
        (g$11538$Up9ra core-prim . list-tail)
        (g$11537$Up9ra core-prim . list-ref)
        (g$11536$Up9ra core-prim . list->vector)
        (g$11535$Up9ra core-prim . list->string)
        (g$11534$Up9ra core-prim . list)
        (g$11533$Up9ra core-prim . length)
        (g$11532$Up9ra core-prim . lcm)
        (g$11531$Up9ra core-prim . integer?)
        (g$11530$Up9ra core-prim . integer-valued?)
        (g$11529$Up9ra core-prim . integer->char)
        (g$11528$Up9ra core-prim . infinite?)
        (g$11527$Up9ra core-prim . inexact?)
        (g$11526$Up9ra core-prim . inexact)
        (g$11525$Up9ra core-prim . imag-part)
        (g$11524$Up9ra core-prim . gcd)
        (g$11523$Up9ra core-prim . for-each)
        (g$11522$Up9ra core-prim . floor)
        (g$11521$Up9ra core-prim . finite?)
        (g$11520$Up9ra core-prim . expt)
        (g$11519$Up9ra core-prim . exp)
        (g$11518$Up9ra core-prim . exact?)
        (g$11517$Up9ra core-prim . exact-integer-sqrt)
        (g$11516$Up9ra core-prim . exact)
        (g$11515$Up9ra core-prim . even?)
        (g$11514$Up9ra core-prim . error)
        (g$11513$Up9ra core-prim . eqv?)
        (g$11512$Up9ra core-prim . equal?)
        (g$11511$Up9ra core-prim . eq?)
        (g$11510$Up9ra core-prim . dynamic-wind)
        (g$11509$Up9ra core-prim . div0-and-mod0)
        (g$11508$Up9ra core-prim . mod0)
        (g$11507$Up9ra core-prim . div0)
        (g$11506$Up9ra core-prim . div-and-mod)
        (g$11505$Up9ra core-prim . mod)
        (g$11504$Up9ra core-prim . div)
        (g$11503$Up9ra core-prim . denominator)
        (g$11502$Up9ra core-prim . cos)
        (g$11501$Up9ra core-prim . cons)
        (g$11500$Up9ra core-prim . complex?)
        (g$11499$Up9ra core-prim . char?)
        (g$11498$Up9ra core-prim . char>?)
        (g$11497$Up9ra core-prim . char>=?)
        (g$11496$Up9ra core-prim . char=?)
        (g$11495$Up9ra core-prim . char<?)
        (g$11494$Up9ra core-prim . char<=?)
        (g$11493$Up9ra core-prim . char->integer)
        (g$11492$Up9ra core-prim . ceiling)
        (g$11491$Up9ra core-prim . call-with-values)
        (g$11490$Up9ra core-prim . call/cc)
        (g$11489$Up9ra core-prim . call-with-current-continuation)
        (g$5634$Up9ra core-prim . cddddr)
        (g$5633$Up9ra core-prim . cdddar)
        (g$5632$Up9ra core-prim . cddadr)
        (g$5631$Up9ra core-prim . cddaar)
        (g$5630$Up9ra core-prim . cdaddr)
        (g$5629$Up9ra core-prim . cdadar)
        (g$5628$Up9ra core-prim . cdaadr)
        (g$5627$Up9ra core-prim . cdaaar)
        (g$5626$Up9ra core-prim . cadddr)
        (g$5625$Up9ra core-prim . caddar)
        (g$5624$Up9ra core-prim . cadadr)
        (g$5623$Up9ra core-prim . cadaar)
        (g$5622$Up9ra core-prim . caaddr)
        (g$5621$Up9ra core-prim . caadar)
        (g$5620$Up9ra core-prim . caaadr)
        (g$5619$Up9ra core-prim . caaaar)
        (g$5618$Up9ra core-prim . cdddr)
        (g$5617$Up9ra core-prim . cddar)
        (g$5616$Up9ra core-prim . cdadr)
        (g$5615$Up9ra core-prim . cdaar)
        (g$5614$Up9ra core-prim . caddr)
        (g$5613$Up9ra core-prim . cadar)
        (g$5612$Up9ra core-prim . caadr)
        (g$5611$Up9ra core-prim . caaar)
        (g$5610$Up9ra core-prim . cddr)
        (g$5609$Up9ra core-prim . cdar)
        (g$5608$Up9ra core-prim . cadr)
        (g$5607$Up9ra core-prim . caar)
        (g$11488$Up9ra core-prim . cdr)
        (g$11487$Up9ra core-prim . car)
        (g$11486$Up9ra core-prim . boolean?)
        (g$11485$Up9ra core-prim . boolean=?)
        (g$11484$Up9ra core-prim . atan)
        (g$11483$Up9ra core-prim . assertion-violation)
        (g$11482$Up9ra core-prim . asin)
        (g$11481$Up9ra core-prim . apply)
        (g$11480$Up9ra core-prim . append)
        (g$11479$Up9ra core-prim . angle)
        (g$11478$Up9ra core-prim . acos)
        (g$11477$Up9ra core-prim . abs)
        (g$11476$Up9ra core-prim . /)
        (g$11475$Up9ra core-prim . *)
        (g$11474$Up9ra core-prim . -)
        (g$11473$Up9ra core-prim . +)
        (g$11472$Up9ra core-prim . >=)
        (g$11471$Up9ra core-prim . >)
        (g$11470$Up9ra core-prim . =)
        (g$11469$Up9ra core-prim . <=)
        (g$11468$Up9ra core-prim . <)
        (g$11467$Up9ra core-prim . make-record-printer)
        (g$11466$Up9ra core-prim . eqv-hash)
        (g$11465$Up9ra core-prim . eq-hash)
        (g$11464$Up9ra core-prim . reverse!)
        (g$11306$Up9ra core-prim . load/args)
        (g$7068$Up9ra core-prim . printf)
        (g$7069$Up9ra core-prim . fprintf)
        (g$7070$Up9ra core-prim . format)
        (g$11463$Up9ra core-prim . get-arity)
        (g$11462$Up9ra core-prim . gc-collect)
        (g$11461$Up9ra core-prim . clr-type?)
        (g$11460$Up9ra core-prim . get-clr-type)
        (g$11459$Up9ra core-prim . get-command-line)
        (g$11458$Up9ra core-prim . vector-append)
        (g$11457$Up9ra core-prim . vector-filter)
        (g$11456$Up9ra core-prim . vector-reverse!)
        (g$11455$Up9ra core-prim . vector-contains?)
        (g$11454$Up9ra core-prim . vector-index-of)
        (g$11453$Up9ra core-prim . vector-copy)
        (g$11452$Up9ra core-prim . vector-binary-search)
        (g$11451$Up9ra core-prim . get-output-string)
        (g$11450$Up9ra core-prim . open-output-string)
        (g$11449$Up9ra core-prim . open-input-string)
        (g$11448$Up9ra core-prim . string-format)
        (g$11303$Up9ra core-prim . trace-printer)
        (g$11447$Up9ra core-prim . make-traced-procedure)
        (g$7089$Up9ra core-prim . make-traced-macro)
        (g$11446$Up9ra core-prim . pmap)
        (g$11445$Up9ra core-prim . time-it)
        (g$7094$Up9ra core-prim . make-parameter)
        (g$11444$Up9ra core-prim . library-locator)
        (g$11443$Up9ra core-prim . get-library-paths)
        (g$8350$Up9ra core-prim . environment-symbols)
        (g$8349$Up9ra core-prim . interaction-environment-symbols)
        (g$7519$Up9ra core-prim . library-path)
        (g$7520$Up9ra core-prim . library-extensions)
        (g$7540$Up9ra core-prim . installed-libraries)
        (g$8355$Up9ra core-prim . expand)
        (g$11442$Up9ra $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$11441$Up9ra $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$11440$Up9ra $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$11439$Up9ra $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$11438$Up9ra $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$11437$Up9ra
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$11436$Up9ra
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$11435$Up9ra
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$11434$Up9ra
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$11433$Up9ra $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$11432$Up9ra
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$11431$Up9ra $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$11430$Up9ra $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$11429$Up9ra $core-rtd &i/o-rtd &i/o-rcd)
        (g$11428$Up9ra $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$11427$Up9ra $core-rtd &undefined-rtd &undefined-rcd)
        (g$11426$Up9ra $core-rtd &syntax-rtd &syntax-rcd)
        (g$11425$Up9ra $core-rtd &lexical-rtd &lexical-rcd)
        (g$11424$Up9ra
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$11423$Up9ra $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$11422$Up9ra $core-rtd &who-rtd &who-rcd)
        (g$11421$Up9ra $core-rtd &irritants-rtd &irritants-rcd)
        (g$11420$Up9ra $core-rtd &assertion-rtd &assertion-rcd)
        (g$11419$Up9ra $core-rtd &violation-rtd &violation-rcd)
        (g$11418$Up9ra $core-rtd &error-rtd &error-rcd)
        (g$11417$Up9ra $core-rtd &serious-rtd &serious-rcd)
        (g$11416$Up9ra $core-rtd &warning-rtd &warning-rcd)
        (g$11415$Up9ra $core-rtd &message-rtd &message-rcd)
        (g$11414$Up9ra $core-rtd &condition-rtd &condition-rcd)
        (g$11413$Up9ra macro . define-condition-type)
        (g$11412$Up9ra macro . define-enumeration)
        (g$11411$Up9ra macro . define-record-type)
        (g$11410$Up9ra macro . parent-rtd)
        (g$11409$Up9ra macro . nongenerative)
        (g$11408$Up9ra macro . opaque)
        (g$11407$Up9ra macro . sealed)
        (g$11406$Up9ra macro . protocol)
        (g$11405$Up9ra macro . parent)
        (g$11404$Up9ra macro . immutable)
        (g$11403$Up9ra macro . mutable)
        (g$11402$Up9ra macro . fields)
        (g$11401$Up9ra macro . error-handling-mode)
        (g$11400$Up9ra macro . file-options)
        (g$11399$Up9ra macro . buffer-mode)
        (g$11398$Up9ra macro . eol-style)
        (g$11397$Up9ra macro . guard)
        (g$11396$Up9ra macro . trace-letrec-syntax)
        (g$11395$Up9ra macro . trace-let-syntax)
        (g$11394$Up9ra macro . trace-define-syntax)
        (g$11393$Up9ra macro . trace-define)
        (g$11392$Up9ra macro . trace-lambda)
        (g$11391$Up9ra macro . unsyntax-splicing)
        (g$11390$Up9ra macro . unsyntax)
        (g$11389$Up9ra macro . unquote-splicing)
        (g$11388$Up9ra macro . unquote)
        (g$11387$Up9ra macro . _)
        (g$11386$Up9ra macro . else)
        (g$11385$Up9ra macro . =>)
        (g$11384$Up9ra macro . ...)
        (g$11383$Up9ra macro . assert)
        (g$11382$Up9ra macro . endianness)
        (g$11381$Up9ra macro . delay)
        (g$11380$Up9ra macro . time)
        (g$11379$Up9ra macro . or)
        (g$11378$Up9ra macro . and)
        (g$11377$Up9ra macro . do)
        (g$11376$Up9ra macro . cond)
        (g$11375$Up9ra macro . let*)
        (g$11374$Up9ra macro . let)
        (g$11373$Up9ra macro . identifier-syntax)
        (g$11372$Up9ra macro . with-syntax)
        (g$11371$Up9ra macro . quasisyntax)
        (g$11370$Up9ra macro . quasiquote)
        (g$11369$Up9ra macro . syntax-rules)
        (g$11368$Up9ra macro . include-into)
        (g$11367$Up9ra macro . include)
        (g$11366$Up9ra macro . define-struct)
        (g$11365$Up9ra macro . let-values)
        (g$11364$Up9ra macro . let*-values)
        (g$11363$Up9ra core-macro . record-constructor-descriptor)
        (g$11362$Up9ra core-macro . record-type-descriptor)
        (g$11361$Up9ra core-macro . fluid-let-syntax)
        (g$11360$Up9ra core-macro . case)
        (g$11359$Up9ra core-macro . parameterize)
        (g$11358$Up9ra core-macro . unless)
        (g$11357$Up9ra core-macro . when)
        (g$11356$Up9ra core-macro . if)
        (g$11355$Up9ra core-macro . letrec*)
        (g$11354$Up9ra core-macro . letrec)
        (g$11353$Up9ra core-macro . type-descriptor)
        (g$11352$Up9ra core-macro . case-lambda)
        (g$11351$Up9ra core-macro . lambda)
        (g$11350$Up9ra core-macro . syntax)
        (g$11349$Up9ra core-macro . syntax-case)
        (g$11348$Up9ra core-macro . quote)
        (g$11347$Up9ra core-macro . foreign-call)
        (g$11346$Up9ra letrec-syntax)
        (g$11345$Up9ra let-syntax)
        (g$11344$Up9ra set!)
        (g$11343$Up9ra import)
        (g$11342$Up9ra library)
        (g$11341$Up9ra begin)
        (g$11340$Up9ra module)
        (g$11339$Up9ra define-syntax)
        (g$11338$Up9ra define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6891$Up9ra
      'g$12018$Up9ra
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$11897$Up9ra)
        (eval-core . g$11896$Up9ra)
        (set-symbol-value! . g$11895$Up9ra)
        (symbol-value . g$11894$Up9ra)
        (gensym . g$11892$Up9ra)
        (void . g$11891$Up9ra))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$10920$Up9ra
     g$trace-printer$10959$Up9ra
     (g$make-parameter$6346$Up9ra write))
   (g$command-line$10921$Up9ra
     g$command-line$10960$Up9ra
     (g$make-parameter$6346$Up9ra (get-command-line)))
   (g$local-library-path$10922$Up9ra
     g$local-library-path$10961$Up9ra
     (case-lambda
       ((g$filename$10932$Up9ra)
        (cons
          (g$get-directory-name$5251$Up9ra g$filename$10932$Up9ra)
          (g$library-path$6875$Up9ra)))))
   (g$load/args$10923$Up9ra
     g$load/args$10962$Up9ra
     (case-lambda
       ((g$filename$10933$Up9ra . g$args$10934$Up9ra)
        (begin
          (apply
            g$load-r6rs-top-level$10930$Up9ra
            g$filename$10933$Up9ra
            'load
            g$args$10934$Up9ra)
          (void)))))
   (g$load$10924$Up9ra
     g$load$10963$Up9ra
     (case-lambda
       ((g$filename$10935$Up9ra)
        (begin
          (apply
            g$load-r6rs-top-level$10930$Up9ra
            g$filename$10935$Up9ra
            'load
            (cdr (g$command-line$10921$Up9ra)))
          (void)))))
   (g$ironscheme-build$10925$Up9ra
     g$ironscheme-build$10964$Up9ra
     (case-lambda (() (g$load$10924$Up9ra '"ironscheme-buildscript.ss"))))
   (g$eval-top-level$10926$Up9ra
     g$eval-top-level$10965$Up9ra
     (case-lambda
       ((g$x$10936$Up9ra)
        (g$eval$10898$Up9ra
          g$x$10936$Up9ra
          (g$interaction-environment$10918$Up9ra)))))
   (g$compile-system-libraries$10927$Up9ra
     g$compile-system-libraries$10966$Up9ra
     (case-lambda
       (()
        (g$eval-top-level$10926$Up9ra
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$10928$Up9ra
     g$compile$10967$Up9ra
     (case-lambda
       ((g$filename$10937$Up9ra)
        (g$load-r6rs-top-level$10930$Up9ra g$filename$10937$Up9ra 'compile))))
   (g$compile->closure$10929$Up9ra
     g$compile->closure$10968$Up9ra
     (case-lambda
       ((g$filename$10938$Up9ra)
        (g$load-r6rs-top-level$10930$Up9ra g$filename$10938$Up9ra 'closure))))
   (g$load-r6rs-top-level$10930$Up9ra
     g$load-r6rs-top-level$10969$Up9ra
     (case-lambda
       ((g$filename$10939$Up9ra g$how$10940$Up9ra . g$args$10941$Up9ra)
        ((case-lambda
           ((g$library-path$10944$Up9ra g$library-path$10945$Up9ra)
            ((case-lambda
               ((g$swap$10946$Up9ra)
                (dynamic-wind
                  g$swap$10946$Up9ra
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$10947$Up9ra)
                         ((case-lambda
                            ((g$t$10948$Up9ra)
                             (if (eqv? g$t$10948$Up9ra 'closure)
                               (g$pre-compile-r6rs-top-level$10917$Up9ra
                                 g$x*$10947$Up9ra)
                               (if (eqv? g$t$10948$Up9ra 'load)
                                 ((case-lambda
                                    ((g$command-line$10951$Up9ra
                                       g$command-line$10952$Up9ra)
                                     ((case-lambda
                                        ((g$swap$10953$Up9ra)
                                         (dynamic-wind
                                           g$swap$10953$Up9ra
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$10916$Up9ra
                                                 g$x*$10947$Up9ra))))
                                           g$swap$10953$Up9ra)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$10954$Up9ra)
                                             (begin
                                               (g$command-line$10951$Up9ra
                                                 g$command-line$10952$Up9ra)
                                               (set! g$command-line$10952$Up9ra
                                                 g$t$10954$Up9ra))))
                                          (g$command-line$10951$Up9ra)))))))
                                  g$command-line$10921$Up9ra
                                  (cons
                                    g$filename$10939$Up9ra
                                    (map (case-lambda
                                           ((g$x$10955$Up9ra)
                                            (g$format$6262$Up9ra
                                              '"~a"
                                              g$x$10955$Up9ra)))
                                         g$args$10941$Up9ra)))
                                 (if (eqv? g$t$10948$Up9ra 'compile)
                                   (begin
                                     (g$compile-r6rs-top-level$10916$Up9ra
                                       g$x*$10947$Up9ra)
                                     (g$serialize-all$6879$Up9ra
                                       serialize-library
                                       g$compile-core-expr$6593$Up9ra))
                                   (void))))))
                          g$how$10940$Up9ra)))
                      (with-input-from-file
                        g$filename$10939$Up9ra
                        (case-lambda
                          (()
                           ((letrec ((g$f$10956$Up9ra
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$10957$Up9ra)
                                              (if (eof-object? g$x$10957$Up9ra)
                                                '()
                                                (cons
                                                  g$x$10957$Up9ra
                                                  (g$f$10956$Up9ra)))))
                                           (read-annotated))))))
                              g$f$10956$Up9ra))))))))
                  g$swap$10946$Up9ra)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$10958$Up9ra)
                    (begin
                      (g$library-path$10944$Up9ra g$library-path$10945$Up9ra)
                      (set! g$library-path$10945$Up9ra g$t$10958$Up9ra))))
                 (g$library-path$10944$Up9ra)))))))
         g$library-path$6875$Up9ra
         (g$local-library-path$10922$Up9ra g$filename$10939$Up9ra))))))
  (begin
    (g$current-precompiled-library-loader$6880$Up9ra
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$10931$Up9ra)
         (if (g$serious-condition?$5634$Up9ra g$ex$10931$Up9ra)
           (raise g$ex$10931$Up9ra)
           (begin (display g$ex$10931$Up9ra) (newline))))))
    (set-symbol-value! 'load g$load$10924$Up9ra)
    (set-symbol-value! 'compile g$compile$10928$Up9ra)
    (set-symbol-value! 'compile->closure g$compile->closure$10929$Up9ra)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$10926$Up9ra)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$10891$Up9ra)
    (set-symbol-value! 'expanded2core g$expanded->core$6592$Up9ra)
    (set-symbol-value! 'trace-printer g$trace-printer$10920$Up9ra)
    (g$library-path$6875$Up9ra (get-library-paths))))

