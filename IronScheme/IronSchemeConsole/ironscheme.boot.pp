;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (ironscheme base)
  ((g$caar$4823$UGjMA
     g$caar$4895$UGjMA
     (case-lambda ((g$x$4854$UGjMA) (car (car g$x$4854$UGjMA)))))
   (g$cadr$4824$UGjMA
     g$cadr$4896$UGjMA
     (case-lambda ((g$x$4855$UGjMA) (car (cdr g$x$4855$UGjMA)))))
   (g$cdar$4825$UGjMA
     g$cdar$4897$UGjMA
     (case-lambda ((g$x$4856$UGjMA) (cdr (car g$x$4856$UGjMA)))))
   (g$cddr$4826$UGjMA
     g$cddr$4898$UGjMA
     (case-lambda ((g$x$4857$UGjMA) (cdr (cdr g$x$4857$UGjMA)))))
   (g$caaar$4827$UGjMA
     g$caaar$4899$UGjMA
     (case-lambda
       ((g$x$4858$UGjMA) (g$caar$4823$UGjMA (car g$x$4858$UGjMA)))))
   (g$caadr$4828$UGjMA
     g$caadr$4900$UGjMA
     (case-lambda
       ((g$x$4859$UGjMA) (g$caar$4823$UGjMA (cdr g$x$4859$UGjMA)))))
   (g$cadar$4829$UGjMA
     g$cadar$4901$UGjMA
     (case-lambda
       ((g$x$4860$UGjMA) (g$cadr$4824$UGjMA (car g$x$4860$UGjMA)))))
   (g$caddr$4830$UGjMA
     g$caddr$4902$UGjMA
     (case-lambda
       ((g$x$4861$UGjMA) (g$cadr$4824$UGjMA (cdr g$x$4861$UGjMA)))))
   (g$cdaar$4831$UGjMA
     g$cdaar$4903$UGjMA
     (case-lambda
       ((g$x$4862$UGjMA) (g$cdar$4825$UGjMA (car g$x$4862$UGjMA)))))
   (g$cdadr$4832$UGjMA
     g$cdadr$4904$UGjMA
     (case-lambda
       ((g$x$4863$UGjMA) (g$cdar$4825$UGjMA (cdr g$x$4863$UGjMA)))))
   (g$cddar$4833$UGjMA
     g$cddar$4905$UGjMA
     (case-lambda
       ((g$x$4864$UGjMA) (g$cddr$4826$UGjMA (car g$x$4864$UGjMA)))))
   (g$cdddr$4834$UGjMA
     g$cdddr$4906$UGjMA
     (case-lambda
       ((g$x$4865$UGjMA) (g$cddr$4826$UGjMA (cdr g$x$4865$UGjMA)))))
   (g$caaaar$4835$UGjMA
     g$caaaar$4907$UGjMA
     (case-lambda
       ((g$x$4866$UGjMA) (g$caaar$4827$UGjMA (car g$x$4866$UGjMA)))))
   (g$caaadr$4836$UGjMA
     g$caaadr$4908$UGjMA
     (case-lambda
       ((g$x$4867$UGjMA) (g$caaar$4827$UGjMA (cdr g$x$4867$UGjMA)))))
   (g$caadar$4837$UGjMA
     g$caadar$4909$UGjMA
     (case-lambda
       ((g$x$4868$UGjMA) (g$caadr$4828$UGjMA (car g$x$4868$UGjMA)))))
   (g$caaddr$4838$UGjMA
     g$caaddr$4910$UGjMA
     (case-lambda
       ((g$x$4869$UGjMA) (g$caadr$4828$UGjMA (cdr g$x$4869$UGjMA)))))
   (g$cadaar$4839$UGjMA
     g$cadaar$4911$UGjMA
     (case-lambda
       ((g$x$4870$UGjMA) (g$cadar$4829$UGjMA (car g$x$4870$UGjMA)))))
   (g$cadadr$4840$UGjMA
     g$cadadr$4912$UGjMA
     (case-lambda
       ((g$x$4871$UGjMA) (g$cadar$4829$UGjMA (cdr g$x$4871$UGjMA)))))
   (g$caddar$4841$UGjMA
     g$caddar$4913$UGjMA
     (case-lambda
       ((g$x$4872$UGjMA) (g$caddr$4830$UGjMA (car g$x$4872$UGjMA)))))
   (g$cadddr$4842$UGjMA
     g$cadddr$4914$UGjMA
     (case-lambda
       ((g$x$4873$UGjMA) (g$caddr$4830$UGjMA (cdr g$x$4873$UGjMA)))))
   (g$cdaaar$4843$UGjMA
     g$cdaaar$4915$UGjMA
     (case-lambda
       ((g$x$4874$UGjMA) (g$cdaar$4831$UGjMA (car g$x$4874$UGjMA)))))
   (g$cdaadr$4844$UGjMA
     g$cdaadr$4916$UGjMA
     (case-lambda
       ((g$x$4875$UGjMA) (g$cdaar$4831$UGjMA (cdr g$x$4875$UGjMA)))))
   (g$cdadar$4845$UGjMA
     g$cdadar$4917$UGjMA
     (case-lambda
       ((g$x$4876$UGjMA) (g$cdadr$4832$UGjMA (car g$x$4876$UGjMA)))))
   (g$cdaddr$4846$UGjMA
     g$cdaddr$4918$UGjMA
     (case-lambda
       ((g$x$4877$UGjMA) (g$cdadr$4832$UGjMA (cdr g$x$4877$UGjMA)))))
   (g$cddaar$4847$UGjMA
     g$cddaar$4919$UGjMA
     (case-lambda
       ((g$x$4878$UGjMA) (g$cddar$4833$UGjMA (car g$x$4878$UGjMA)))))
   (g$cddadr$4848$UGjMA
     g$cddadr$4920$UGjMA
     (case-lambda
       ((g$x$4879$UGjMA) (g$cddar$4833$UGjMA (cdr g$x$4879$UGjMA)))))
   (g$cdddar$4849$UGjMA
     g$cdddar$4921$UGjMA
     (case-lambda
       ((g$x$4880$UGjMA) (g$cdddr$4834$UGjMA (car g$x$4880$UGjMA)))))
   (g$cddddr$4850$UGjMA
     g$cddddr$4922$UGjMA
     (case-lambda
       ((g$x$4881$UGjMA) (g$cdddr$4834$UGjMA (cdr g$x$4881$UGjMA)))))
   (g$rationalize$4851$UGjMA
     g$rationalize$4923$UGjMA
     (case-lambda
       ((g$x$4882$UGjMA g$e$4883$UGjMA)
        (apply / (g$find-ratio$4852$UGjMA g$x$4882$UGjMA g$e$4883$UGjMA)))))
   (g$find-ratio$4852$UGjMA
     g$find-ratio$4924$UGjMA
     (case-lambda
       ((g$x$4884$UGjMA g$e$4885$UGjMA)
        (g$find-ratio-between$4853$UGjMA
          (- g$x$4884$UGjMA g$e$4885$UGjMA)
          (+ g$x$4884$UGjMA g$e$4885$UGjMA)))))
   (g$find-ratio-between$4853$UGjMA
     g$find-ratio-between$4925$UGjMA
     (case-lambda
       ((g$x$4886$UGjMA g$y$4887$UGjMA)
        (letrec* ((g$sr$4888$UGjMA
                    (case-lambda
                      ((g$x$4890$UGjMA g$y$4891$UGjMA)
                       ((case-lambda
                          ((g$fx$4892$UGjMA g$fy$4893$UGjMA)
                           (if (>= g$fx$4892$UGjMA g$x$4890$UGjMA)
                             (list g$fx$4892$UGjMA '1)
                             (if (= g$fx$4892$UGjMA g$fy$4893$UGjMA)
                               ((case-lambda
                                  ((g$rat$4894$UGjMA)
                                   (list
                                     (+ (g$cadr$4824$UGjMA g$rat$4894$UGjMA)
                                        (* g$fx$4892$UGjMA
                                           (car g$rat$4894$UGjMA)))
                                     (car g$rat$4894$UGjMA))))
                                (g$sr$4888$UGjMA
                                  (/ (- g$y$4891$UGjMA g$fy$4893$UGjMA))
                                  (/ (- g$x$4890$UGjMA g$fx$4892$UGjMA))))
                               (list (+ '1 g$fx$4892$UGjMA) '1)))))
                        (exact (floor g$x$4890$UGjMA))
                        (exact (floor g$y$4891$UGjMA)))))))
          (if (< g$y$4887$UGjMA g$x$4886$UGjMA)
            (g$find-ratio-between$4853$UGjMA g$y$4887$UGjMA g$x$4886$UGjMA)
            (if (>= g$x$4886$UGjMA g$y$4887$UGjMA)
              (list g$x$4886$UGjMA '1)
              (if (positive? g$x$4886$UGjMA)
                (g$sr$4888$UGjMA g$x$4886$UGjMA g$y$4887$UGjMA)
                (if (negative? g$y$4887$UGjMA)
                  ((case-lambda
                     ((g$rat$4889$UGjMA)
                      (list
                        (- (car g$rat$4889$UGjMA))
                        (g$cadr$4824$UGjMA g$rat$4889$UGjMA))))
                   (g$sr$4888$UGjMA (- g$y$4887$UGjMA) (- g$x$4886$UGjMA)))
                  '(0 1))))))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$5121$UGjMA g$using$5156$UGjMA (clr-using-internal 'system))
   (g$using$5123$UGjMA
     g$using$5157$UGjMA
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$5124$UGjMA
     g$make-eq-hashtable$5158$UGjMA
     (case-lambda
       (() (clr-new-internal 'hashtable))
       ((g$k$5135$UGjMA)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$5135$UGjMA)))))
   (g$make-eqv-hashtable$5125$UGjMA
     g$make-eqv-hashtable$5159$UGjMA
     (case-lambda
       (() (make-hashtable eqv-hash eqv?))
       ((g$k$5136$UGjMA) (make-hashtable eqv-hash eqv? g$k$5136$UGjMA))))
   (g$hashtable-size$5126$UGjMA
     g$hashtable-size$5160$UGjMA
     (case-lambda
       ((g$ht$5137$UGjMA)
        (clr-call-internal 'hashtable 'get_count g$ht$5137$UGjMA))))
   (g$hashtable-ref$5127$UGjMA
     g$hashtable-ref$5161$UGjMA
     (case-lambda
       ((g$ht$5138$UGjMA g$key$5139$UGjMA g$default$5140$UGjMA)
        (letrec* ((g$r$5141$UGjMA
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$5138$UGjMA
                      g$key$5139$UGjMA)))
          (if (not (null? g$r$5141$UGjMA))
            g$r$5141$UGjMA
            g$default$5140$UGjMA)))))
   (g$hashtable-set!$5128$UGjMA
     g$hashtable-set!$5162$UGjMA
     (case-lambda
       ((g$ht$5142$UGjMA g$key$5143$UGjMA g$obj$5144$UGjMA)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$5142$UGjMA
          g$key$5143$UGjMA
          g$obj$5144$UGjMA))))
   (g$hashtable-delete!$5129$UGjMA
     g$hashtable-delete!$5163$UGjMA
     (case-lambda
       ((g$ht$5145$UGjMA g$key$5146$UGjMA)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$5145$UGjMA
          g$key$5146$UGjMA))))
   (g$hashtable-contains?$5130$UGjMA
     g$hashtable-contains?$5164$UGjMA
     (case-lambda
       ((g$ht$5147$UGjMA g$key$5148$UGjMA)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$5147$UGjMA
          g$key$5148$UGjMA))))
   (g$hashtable-update!$5131$UGjMA
     g$hashtable-update!$5165$UGjMA
     (case-lambda
       ((g$ht$5149$UGjMA
          g$key$5150$UGjMA
          g$proc$5151$UGjMA
          g$default$5152$UGjMA)
        (g$hashtable-set!$5128$UGjMA
          g$ht$5149$UGjMA
          g$key$5150$UGjMA
          (g$proc$5151$UGjMA
            (g$hashtable-ref$5127$UGjMA
              g$ht$5149$UGjMA
              g$key$5150$UGjMA
              g$default$5152$UGjMA))))))
   (g$hashtable-clear!$5132$UGjMA
     g$hashtable-clear!$5166$UGjMA
     (case-lambda
       ((g$ht$5153$UGjMA)
        (clr-call-internal 'hashtable 'clear g$ht$5153$UGjMA))
       ((g$ht$5154$UGjMA g$k$5155$UGjMA)
        (clr-call-internal 'hashtable 'clear g$ht$5154$UGjMA))))
   (g$clear-usings$5134$UGjMA
     g$clear-usings$5167$UGjMA
     (clr-clear-usings-internal)))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$5169$UGjMA g$using$5235$UGjMA (clr-using-internal 'system.io))
   (g$file-exists?$5170$UGjMA
     g$file-exists?$5236$UGjMA
     (case-lambda
       ((g$fn$5198$UGjMA)
        (clr-call-internal 'file 'exists '() g$fn$5198$UGjMA))))
   (g$delete-file$5171$UGjMA
     g$delete-file$5237$UGjMA
     (case-lambda
       ((g$fn$5199$UGjMA)
        (clr-call-internal 'file 'delete '() g$fn$5199$UGjMA))))
   (g$file-copy$5172$UGjMA
     g$file-copy$5238$UGjMA
     (case-lambda
       ((g$from$5200$UGjMA g$to$5201$UGjMA)
        (g$file-copy$5172$UGjMA g$from$5200$UGjMA g$to$5201$UGjMA '#f))
       ((g$from$5202$UGjMA g$to$5203$UGjMA g$overwrite?$5204$UGjMA)
        (clr-call-internal
          'file
          'copy
          '()
          g$from$5202$UGjMA
          g$to$5203$UGjMA
          g$overwrite?$5204$UGjMA))))
   (g$file-move$5173$UGjMA
     g$file-move$5239$UGjMA
     (case-lambda
       ((g$from$5205$UGjMA g$to$5206$UGjMA)
        (clr-call-internal 'file 'move '() g$from$5205$UGjMA g$to$5206$UGjMA))))
   (g$file-create-time$5174$UGjMA
     g$file-create-time$5240$UGjMA
     (case-lambda
       ((g$fn$5207$UGjMA)
        (clr-call-internal 'file 'getcreationtime '() g$fn$5207$UGjMA))))
   (g$file-access-time$5175$UGjMA
     g$file-access-time$5241$UGjMA
     (case-lambda
       ((g$fn$5208$UGjMA)
        (clr-call-internal 'file 'getlastaccesstime '() g$fn$5208$UGjMA))))
   (g$file-modified-time$5176$UGjMA
     g$file-modified-time$5242$UGjMA
     (case-lambda
       ((g$fn$5209$UGjMA)
        (clr-call-internal 'file 'getlastwritetime '() g$fn$5209$UGjMA))))
   (g$directory-exists?$5177$UGjMA
     g$directory-exists?$5243$UGjMA
     (case-lambda
       ((g$fn$5210$UGjMA)
        (clr-call-internal 'directory 'exists '() g$fn$5210$UGjMA))))
   (g$delete-directory$5178$UGjMA
     g$delete-directory$5244$UGjMA
     (case-lambda
       ((g$dir$5211$UGjMA)
        (g$delete-directory$5178$UGjMA g$dir$5211$UGjMA '#f))
       ((g$dir$5212$UGjMA g$recursive?$5213$UGjMA)
        (clr-call-internal
          'directory
          'delete
          '()
          g$dir$5212$UGjMA
          g$recursive?$5213$UGjMA))))
   (g$directory-move$5179$UGjMA
     g$directory-move$5245$UGjMA
     (case-lambda
       ((g$from$5214$UGjMA g$to$5215$UGjMA)
        (clr-call-internal
          'directory
          'move
          '()
          g$from$5214$UGjMA
          g$to$5215$UGjMA))))
   (g$create-directory$5180$UGjMA
     g$create-directory$5246$UGjMA
     (case-lambda
       ((g$name$5216$UGjMA)
        (clr-call-internal 'directory 'createdirectory '() g$name$5216$UGjMA))))
   (g$get-files$5181$UGjMA
     g$get-files$5247$UGjMA
     (case-lambda
       ((g$dir$5217$UGjMA) (g$get-files$5181$UGjMA g$dir$5217$UGjMA '"*"))
       ((g$dir$5218$UGjMA g$pattern$5219$UGjMA)
        (clr-call-internal
          'directory
          'getfiles
          '()
          g$dir$5218$UGjMA
          g$pattern$5219$UGjMA))))
   (g$get-directories$5182$UGjMA
     g$get-directories$5248$UGjMA
     (case-lambda
       ((g$dir$5220$UGjMA)
        (g$get-directories$5182$UGjMA g$dir$5220$UGjMA '"*"))
       ((g$dir$5221$UGjMA g$pattern$5222$UGjMA)
        (clr-call-internal
          'directory
          'getdirectories
          '()
          g$dir$5221$UGjMA
          g$pattern$5222$UGjMA))))
   (g$change-extension$5183$UGjMA
     g$change-extension$5249$UGjMA
     (case-lambda
       ((g$path$5223$UGjMA g$extension$5224$UGjMA)
        (clr-call-internal
          'path
          'changeextension
          '()
          g$path$5223$UGjMA
          g$extension$5224$UGjMA))))
   (g$path-combine$5184$UGjMA
     g$path-combine$5250$UGjMA
     (case-lambda
       ((g$path1$5225$UGjMA g$path2$5226$UGjMA)
        (clr-call-internal
          'path
          'combine
          '()
          g$path1$5225$UGjMA
          g$path2$5226$UGjMA))))
   (g$get-directory-name$5185$UGjMA
     g$get-directory-name$5251$UGjMA
     (case-lambda
       ((g$path$5227$UGjMA)
        (clr-call-internal 'path 'getdirectoryname '() g$path$5227$UGjMA))))
   (g$get-extension$5186$UGjMA
     g$get-extension$5252$UGjMA
     (case-lambda
       ((g$path$5228$UGjMA)
        (clr-call-internal 'path 'getextension '() g$path$5228$UGjMA))))
   (g$get-filename$5187$UGjMA
     g$get-filename$5253$UGjMA
     (case-lambda
       ((g$path$5229$UGjMA)
        (clr-call-internal 'path 'getfilename '() g$path$5229$UGjMA))))
   (g$get-filename-without-extension$5188$UGjMA
     g$get-filename-without-extension$5254$UGjMA
     (case-lambda
       ((g$path$5230$UGjMA)
        (clr-call-internal
          'path
          'getfilenamewithoutextension
          '()
          g$path$5230$UGjMA))))
   (g$get-full-path$5189$UGjMA
     g$get-full-path$5255$UGjMA
     (case-lambda
       ((g$path$5231$UGjMA)
        (clr-call-internal 'path 'getfullpath '() g$path$5231$UGjMA))))
   (g$get-path-root$5190$UGjMA
     g$get-path-root$5256$UGjMA
     (case-lambda
       ((g$path$5232$UGjMA)
        (clr-call-internal 'path 'getpathroot '() g$path$5232$UGjMA))))
   (g$get-random-filename$5191$UGjMA
     g$get-random-filename$5257$UGjMA
     (case-lambda (() (clr-call-internal 'path 'getrandomfilename '()))))
   (g$get-temp-filename$5192$UGjMA
     g$get-temp-filename$5258$UGjMA
     (case-lambda (() (clr-call-internal 'path 'gettempfilename '()))))
   (g$get-temp-path$5193$UGjMA
     g$get-temp-path$5259$UGjMA
     (case-lambda (() (clr-call-internal 'path 'gettemppath '()))))
   (g$path-rooted?$5194$UGjMA
     g$path-rooted?$5260$UGjMA
     (case-lambda
       ((g$path$5233$UGjMA)
        (clr-call-internal 'path 'ispathrooted '() g$path$5233$UGjMA))))
   (g$path-has-extension?$5195$UGjMA
     g$path-has-extension?$5261$UGjMA
     (case-lambda
       ((g$path$5234$UGjMA)
        (clr-call-internal 'path 'hasextension '() g$path$5234$UGjMA))))
   (g$clear-usings$5197$UGjMA
     g$clear-usings$5262$UGjMA
     (clr-clear-usings-internal)))
  (void))

(library-letrec* (ironscheme lists)
  ((g$find$5263$UGjMA
     g$find$5354$UGjMA
     (case-lambda
       ((g$proc$5282$UGjMA g$l$5283$UGjMA)
        (if (null? g$l$5283$UGjMA)
          '#f
          ((case-lambda
             ((g$e$5284$UGjMA)
              (if (g$proc$5282$UGjMA g$e$5284$UGjMA)
                g$e$5284$UGjMA
                (g$find$5263$UGjMA g$proc$5282$UGjMA (cdr g$l$5283$UGjMA)))))
           (car g$l$5283$UGjMA))))))
   (g$partition$5264$UGjMA
     g$partition$5355$UGjMA
     (case-lambda
       ((g$proc$5285$UGjMA g$l$5286$UGjMA)
        ((letrec ((g$f$5287$UGjMA
                    (case-lambda
                      ((g$l$5288$UGjMA g$a$5289$UGjMA g$b$5290$UGjMA)
                       (if (null? g$l$5288$UGjMA)
                         (values
                           (reverse! g$a$5289$UGjMA)
                           (reverse! g$b$5290$UGjMA))
                         ((case-lambda
                            ((g$e$5291$UGjMA)
                             (if (g$proc$5285$UGjMA g$e$5291$UGjMA)
                               (g$f$5287$UGjMA
                                 (cdr g$l$5288$UGjMA)
                                 (cons g$e$5291$UGjMA g$a$5289$UGjMA)
                                 g$b$5290$UGjMA)
                               (g$f$5287$UGjMA
                                 (cdr g$l$5288$UGjMA)
                                 g$a$5289$UGjMA
                                 (cons g$e$5291$UGjMA g$b$5290$UGjMA)))))
                          (car g$l$5288$UGjMA)))))))
           g$f$5287$UGjMA)
         g$l$5286$UGjMA
         '()
         '()))))
   (g$remp$5265$UGjMA
     g$remp$5356$UGjMA
     (case-lambda
       ((g$proc$5292$UGjMA g$l$5293$UGjMA)
        ((letrec ((g$f$5294$UGjMA
                    (case-lambda
                      ((g$l$5295$UGjMA g$a$5296$UGjMA)
                       (if (null? g$l$5295$UGjMA)
                         (reverse! g$a$5296$UGjMA)
                         ((case-lambda
                            ((g$e$5297$UGjMA)
                             (if (g$proc$5292$UGjMA g$e$5297$UGjMA)
                               (g$f$5294$UGjMA
                                 (cdr g$l$5295$UGjMA)
                                 g$a$5296$UGjMA)
                               (g$f$5294$UGjMA
                                 (cdr g$l$5295$UGjMA)
                                 (cons g$e$5297$UGjMA g$a$5296$UGjMA)))))
                          (car g$l$5295$UGjMA)))))))
           g$f$5294$UGjMA)
         g$l$5293$UGjMA
         '()))))
   (g$filter$5266$UGjMA
     g$filter$5357$UGjMA
     (case-lambda
       ((g$proc$5298$UGjMA g$l$5299$UGjMA)
        ((letrec ((g$f$5300$UGjMA
                    (case-lambda
                      ((g$l$5301$UGjMA g$a$5302$UGjMA)
                       (if (null? g$l$5301$UGjMA)
                         (reverse! g$a$5302$UGjMA)
                         ((case-lambda
                            ((g$e$5303$UGjMA)
                             (if (g$proc$5298$UGjMA g$e$5303$UGjMA)
                               (g$f$5300$UGjMA
                                 (cdr g$l$5301$UGjMA)
                                 (cons g$e$5303$UGjMA g$a$5302$UGjMA))
                               (g$f$5300$UGjMA
                                 (cdr g$l$5301$UGjMA)
                                 g$a$5302$UGjMA))))
                          (car g$l$5301$UGjMA)))))))
           g$f$5300$UGjMA)
         g$l$5299$UGjMA
         '()))))
   (g$assv$5267$UGjMA
     g$assv$5358$UGjMA
     (case-lambda
       ((g$obj$5304$UGjMA g$lst$5305$UGjMA)
        (if (null? g$lst$5305$UGjMA)
          '#f
          ((case-lambda
             ((g$c$5306$UGjMA)
              (if (eqv? g$obj$5304$UGjMA (car g$c$5306$UGjMA))
                g$c$5306$UGjMA
                (g$assv$5267$UGjMA g$obj$5304$UGjMA (cdr g$lst$5305$UGjMA)))))
           (car g$lst$5305$UGjMA))))))
   (g$assoc$5268$UGjMA
     g$assoc$5359$UGjMA
     (case-lambda
       ((g$obj$5307$UGjMA g$lst$5308$UGjMA)
        (if (null? g$lst$5308$UGjMA)
          '#f
          ((case-lambda
             ((g$c$5309$UGjMA)
              (if (equal? g$obj$5307$UGjMA (car g$c$5309$UGjMA))
                g$c$5309$UGjMA
                (g$assoc$5268$UGjMA g$obj$5307$UGjMA (cdr g$lst$5308$UGjMA)))))
           (car g$lst$5308$UGjMA))))))
   (g$assp$5269$UGjMA
     g$assp$5360$UGjMA
     (case-lambda
       ((g$p?$5310$UGjMA g$lst$5311$UGjMA)
        (if (null? g$lst$5311$UGjMA)
          '#f
          ((case-lambda
             ((g$c$5312$UGjMA)
              (if (g$p?$5310$UGjMA (car g$c$5312$UGjMA))
                g$c$5312$UGjMA
                (g$assp$5269$UGjMA g$p?$5310$UGjMA (cdr g$lst$5311$UGjMA)))))
           (car g$lst$5311$UGjMA))))))
   (g$member$5270$UGjMA
     g$member$5361$UGjMA
     (case-lambda
       ((g$obj$5313$UGjMA g$lst$5314$UGjMA)
        (if (null? g$lst$5314$UGjMA)
          '#f
          (if (equal? g$obj$5313$UGjMA (car g$lst$5314$UGjMA))
            g$lst$5314$UGjMA
            (g$member$5270$UGjMA g$obj$5313$UGjMA (cdr g$lst$5314$UGjMA)))))))
   (g$memp$5271$UGjMA
     g$memp$5362$UGjMA
     (case-lambda
       ((g$p?$5315$UGjMA g$lst$5316$UGjMA)
        (if (null? g$lst$5316$UGjMA)
          '#f
          (if (g$p?$5315$UGjMA (car g$lst$5316$UGjMA))
            g$lst$5316$UGjMA
            (g$memp$5271$UGjMA g$p?$5315$UGjMA (cdr g$lst$5316$UGjMA)))))))
   (g$all-empty?$5272$UGjMA
     g$all-empty?$5363$UGjMA
     (case-lambda
       ((g$ls$5317$UGjMA)
        ((case-lambda
           ((g$t$5318$UGjMA)
            (if g$t$5318$UGjMA
              g$t$5318$UGjMA
              (begin
                '#f
                (if (null? (car g$ls$5317$UGjMA))
                  (begin '#f (g$all-empty?$5272$UGjMA (cdr g$ls$5317$UGjMA)))
                  '#f)))))
         (null? g$ls$5317$UGjMA)))))
   (g$split$5273$UGjMA
     g$split$5364$UGjMA
     (case-lambda
       ((g$ls$5319$UGjMA)
        (if (null? g$ls$5319$UGjMA)
          (values '() '())
          (call-with-values
            (case-lambda (() (g$split$5273$UGjMA (cdr g$ls$5319$UGjMA))))
            (case-lambda
              ((g$cars$5320$UGjMA g$cdrs$5321$UGjMA)
               ((case-lambda
                  ((g$a$5322$UGjMA)
                   (values
                     (cons (car g$a$5322$UGjMA) g$cars$5320$UGjMA)
                     (cons (cdr g$a$5322$UGjMA) g$cdrs$5321$UGjMA))))
                (car g$ls$5319$UGjMA)))))))))
   (g$for-all$5274$UGjMA
     g$for-all$5365$UGjMA
     (case-lambda
       ((g$f$5323$UGjMA . g$args$5324$UGjMA)
        (if (g$all-empty?$5272$UGjMA g$args$5324$UGjMA)
          '#t
          (call-with-values
            (case-lambda (() (g$split$5273$UGjMA g$args$5324$UGjMA)))
            (case-lambda
              ((g$cars$5325$UGjMA g$cdrs$5326$UGjMA)
               (if (apply g$f$5323$UGjMA g$cars$5325$UGjMA)
                 (begin
                   '#f
                   (apply
                     g$for-all$5274$UGjMA
                     g$f$5323$UGjMA
                     g$cdrs$5326$UGjMA))
                 '#f))))))))
   (g$exists$5275$UGjMA
     g$exists$5366$UGjMA
     (case-lambda
       ((g$f$5327$UGjMA . g$args$5328$UGjMA)
        (if (g$all-empty?$5272$UGjMA g$args$5328$UGjMA)
          '#f
          (call-with-values
            (case-lambda (() (g$split$5273$UGjMA g$args$5328$UGjMA)))
            (case-lambda
              ((g$cars$5329$UGjMA g$cdrs$5330$UGjMA)
               ((case-lambda
                  ((g$t$5331$UGjMA)
                   (if g$t$5331$UGjMA
                     g$t$5331$UGjMA
                     (begin
                       '#f
                       (apply
                         g$exists$5275$UGjMA
                         g$f$5327$UGjMA
                         g$cdrs$5330$UGjMA)))))
                (apply g$f$5327$UGjMA g$cars$5329$UGjMA)))))))))
   (g$cons*$5276$UGjMA
     g$cons*$5367$UGjMA
     (case-lambda
       ((g$a$5332$UGjMA . g$rest$5333$UGjMA)
        ((letrec ((g$f$5334$UGjMA
                    (case-lambda
                      ((g$a$5335$UGjMA g$rest$5336$UGjMA)
                       (if (null? g$rest$5336$UGjMA)
                         g$a$5335$UGjMA
                         (cons
                           g$a$5335$UGjMA
                           (g$f$5334$UGjMA
                             (car g$rest$5336$UGjMA)
                             (cdr g$rest$5336$UGjMA))))))))
           g$f$5334$UGjMA)
         g$a$5332$UGjMA
         g$rest$5333$UGjMA))))
   (g$fold-left$5277$UGjMA
     g$fold-left$5368$UGjMA
     (case-lambda
       ((g$combine$5337$UGjMA
          g$nil$5338$UGjMA
          g$list1$5339$UGjMA
          .
          g$lists$5340$UGjMA)
        (if (null? g$list1$5339$UGjMA)
          g$nil$5338$UGjMA
          (apply
            g$fold-left$5277$UGjMA
            (g$cons*$5276$UGjMA
              g$combine$5337$UGjMA
              (apply
                g$combine$5337$UGjMA
                (g$cons*$5276$UGjMA
                  g$nil$5338$UGjMA
                  (car g$list1$5339$UGjMA)
                  (map car g$lists$5340$UGjMA)))
              (cdr g$list1$5339$UGjMA)
              (map cdr g$lists$5340$UGjMA)))))))
   (g$fold-right$5278$UGjMA
     g$fold-right$5369$UGjMA
     (case-lambda
       ((g$combine$5341$UGjMA
          g$nil$5342$UGjMA
          g$list1$5343$UGjMA
          .
          g$lists$5344$UGjMA)
        (if (null? g$list1$5343$UGjMA)
          g$nil$5342$UGjMA
          (apply
            g$combine$5341$UGjMA
            (append
              (list (car g$list1$5343$UGjMA))
              (map car g$lists$5344$UGjMA)
              (list
                (apply
                  g$fold-right$5278$UGjMA
                  (g$cons*$5276$UGjMA
                    g$combine$5341$UGjMA
                    g$nil$5342$UGjMA
                    (cdr g$list1$5343$UGjMA)
                    (map cdr g$lists$5344$UGjMA))))))))))
   (g$remove$5279$UGjMA
     g$remove$5370$UGjMA
     (case-lambda
       ((g$obj$5345$UGjMA g$list$5346$UGjMA)
        (g$remp$5265$UGjMA
          (case-lambda
            ((g$x$5347$UGjMA) (equal? g$obj$5345$UGjMA g$x$5347$UGjMA)))
          g$list$5346$UGjMA))))
   (g$remv$5280$UGjMA
     g$remv$5371$UGjMA
     (case-lambda
       ((g$obj$5348$UGjMA g$list$5349$UGjMA)
        (g$remp$5265$UGjMA
          (case-lambda
            ((g$x$5350$UGjMA) (eqv? g$obj$5348$UGjMA g$x$5350$UGjMA)))
          g$list$5349$UGjMA))))
   (g$remq$5281$UGjMA
     g$remq$5372$UGjMA
     (case-lambda
       ((g$obj$5351$UGjMA g$list$5352$UGjMA)
        (g$remp$5265$UGjMA
          (case-lambda ((g$x$5353$UGjMA) (eq? g$obj$5351$UGjMA g$x$5353$UGjMA)))
          g$list$5352$UGjMA)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$5373$UGjMA
     g$native-endianness$5484$UGjMA
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$5374$UGjMA
     g$bytevector-u16-ref$5485$UGjMA
     (case-lambda
       ((g$bytevector$5402$UGjMA g$k$5403$UGjMA g$endianness$5404$UGjMA)
        (bytevector-uint-ref
          g$bytevector$5402$UGjMA
          g$k$5403$UGjMA
          g$endianness$5404$UGjMA
          '2))))
   (g$bytevector-s16-ref$5375$UGjMA
     g$bytevector-s16-ref$5486$UGjMA
     (case-lambda
       ((g$bytevector$5405$UGjMA g$k$5406$UGjMA g$endianness$5407$UGjMA)
        (bytevector-sint-ref
          g$bytevector$5405$UGjMA
          g$k$5406$UGjMA
          g$endianness$5407$UGjMA
          '2))))
   (g$bytevector-u16-native-ref$5376$UGjMA
     g$bytevector-u16-native-ref$5487$UGjMA
     (case-lambda
       ((g$bytevector$5408$UGjMA g$k$5409$UGjMA)
        (bytevector-uint-ref
          g$bytevector$5408$UGjMA
          g$k$5409$UGjMA
          (g$native-endianness$5373$UGjMA)
          '2))))
   (g$bytevector-s16-native-ref$5377$UGjMA
     g$bytevector-s16-native-ref$5488$UGjMA
     (case-lambda
       ((g$bytevector$5410$UGjMA g$k$5411$UGjMA)
        (bytevector-sint-ref
          g$bytevector$5410$UGjMA
          g$k$5411$UGjMA
          (g$native-endianness$5373$UGjMA)
          '2))))
   (g$bytevector-u16-set!$5378$UGjMA
     g$bytevector-u16-set!$5489$UGjMA
     (case-lambda
       ((g$bytevector$5412$UGjMA
          g$k$5413$UGjMA
          g$n$5414$UGjMA
          g$endianness$5415$UGjMA)
        (bytevector-uint-ref
          g$bytevector$5412$UGjMA
          g$k$5413$UGjMA
          g$endianness$5415$UGjMA
          '2))))
   (g$bytevector-s16-set!$5379$UGjMA
     g$bytevector-s16-set!$5490$UGjMA
     (case-lambda
       ((g$bytevector$5416$UGjMA
          g$k$5417$UGjMA
          g$n$5418$UGjMA
          g$endianness$5419$UGjMA)
        (bytevector-sint-ref
          g$bytevector$5416$UGjMA
          g$k$5417$UGjMA
          g$endianness$5419$UGjMA
          '2))))
   (g$bytevector-u16-native-set!$5380$UGjMA
     g$bytevector-u16-native-set!$5491$UGjMA
     (case-lambda
       ((g$bytevector$5420$UGjMA g$k$5421$UGjMA g$n$5422$UGjMA)
        (bytevector-uint-ref
          g$bytevector$5420$UGjMA
          g$k$5421$UGjMA
          (g$native-endianness$5373$UGjMA)
          '2))))
   (g$bytevector-s16-native-set!$5381$UGjMA
     g$bytevector-s16-native-set!$5492$UGjMA
     (case-lambda
       ((g$bytevector$5423$UGjMA g$k$5424$UGjMA g$n$5425$UGjMA)
        (bytevector-sint-ref
          g$bytevector$5423$UGjMA
          g$k$5424$UGjMA
          (g$native-endianness$5373$UGjMA)
          '2))))
   (g$bytevector-u32-ref$5382$UGjMA
     g$bytevector-u32-ref$5493$UGjMA
     (case-lambda
       ((g$bytevector$5426$UGjMA g$k$5427$UGjMA g$endianness$5428$UGjMA)
        (bytevector-uint-ref
          g$bytevector$5426$UGjMA
          g$k$5427$UGjMA
          g$endianness$5428$UGjMA
          '4))))
   (g$bytevector-s32-ref$5383$UGjMA
     g$bytevector-s32-ref$5494$UGjMA
     (case-lambda
       ((g$bytevector$5429$UGjMA g$k$5430$UGjMA g$endianness$5431$UGjMA)
        (bytevector-sint-ref
          g$bytevector$5429$UGjMA
          g$k$5430$UGjMA
          g$endianness$5431$UGjMA
          '4))))
   (g$bytevector-u32-native-ref$5384$UGjMA
     g$bytevector-u32-native-ref$5495$UGjMA
     (case-lambda
       ((g$bytevector$5432$UGjMA g$k$5433$UGjMA)
        (bytevector-uint-ref
          g$bytevector$5432$UGjMA
          g$k$5433$UGjMA
          (g$native-endianness$5373$UGjMA)
          '4))))
   (g$bytevector-s32-native-ref$5385$UGjMA
     g$bytevector-s32-native-ref$5496$UGjMA
     (case-lambda
       ((g$bytevector$5434$UGjMA g$k$5435$UGjMA)
        (bytevector-sint-ref
          g$bytevector$5434$UGjMA
          g$k$5435$UGjMA
          (g$native-endianness$5373$UGjMA)
          '4))))
   (g$bytevector-u32-set!$5386$UGjMA
     g$bytevector-u32-set!$5497$UGjMA
     (case-lambda
       ((g$bytevector$5436$UGjMA
          g$k$5437$UGjMA
          g$n$5438$UGjMA
          g$endianness$5439$UGjMA)
        (bytevector-uint-ref
          g$bytevector$5436$UGjMA
          g$k$5437$UGjMA
          g$endianness$5439$UGjMA
          '4))))
   (g$bytevector-s32-set!$5387$UGjMA
     g$bytevector-s32-set!$5498$UGjMA
     (case-lambda
       ((g$bytevector$5440$UGjMA
          g$k$5441$UGjMA
          g$n$5442$UGjMA
          g$endianness$5443$UGjMA)
        (bytevector-sint-ref
          g$bytevector$5440$UGjMA
          g$k$5441$UGjMA
          g$endianness$5443$UGjMA
          '4))))
   (g$bytevector-u32-native-set!$5388$UGjMA
     g$bytevector-u32-native-set!$5499$UGjMA
     (case-lambda
       ((g$bytevector$5444$UGjMA g$k$5445$UGjMA g$n$5446$UGjMA)
        (bytevector-uint-ref
          g$bytevector$5444$UGjMA
          g$k$5445$UGjMA
          (g$native-endianness$5373$UGjMA)
          '4))))
   (g$bytevector-s32-native-set!$5389$UGjMA
     g$bytevector-s32-native-set!$5500$UGjMA
     (case-lambda
       ((g$bytevector$5447$UGjMA g$k$5448$UGjMA g$n$5449$UGjMA)
        (bytevector-sint-ref
          g$bytevector$5447$UGjMA
          g$k$5448$UGjMA
          (g$native-endianness$5373$UGjMA)
          '4))))
   (g$bytevector-u64-ref$5390$UGjMA
     g$bytevector-u64-ref$5501$UGjMA
     (case-lambda
       ((g$bytevector$5450$UGjMA g$k$5451$UGjMA g$endianness$5452$UGjMA)
        (bytevector-uint-ref
          g$bytevector$5450$UGjMA
          g$k$5451$UGjMA
          g$endianness$5452$UGjMA
          '8))))
   (g$bytevector-s64-ref$5391$UGjMA
     g$bytevector-s64-ref$5502$UGjMA
     (case-lambda
       ((g$bytevector$5453$UGjMA g$k$5454$UGjMA g$endianness$5455$UGjMA)
        (bytevector-sint-ref
          g$bytevector$5453$UGjMA
          g$k$5454$UGjMA
          g$endianness$5455$UGjMA
          '8))))
   (g$bytevector-u64-native-ref$5392$UGjMA
     g$bytevector-u64-native-ref$5503$UGjMA
     (case-lambda
       ((g$bytevector$5456$UGjMA g$k$5457$UGjMA)
        (bytevector-uint-ref
          g$bytevector$5456$UGjMA
          g$k$5457$UGjMA
          (g$native-endianness$5373$UGjMA)
          '8))))
   (g$bytevector-s64-native-ref$5393$UGjMA
     g$bytevector-s64-native-ref$5504$UGjMA
     (case-lambda
       ((g$bytevector$5458$UGjMA g$k$5459$UGjMA)
        (bytevector-sint-ref
          g$bytevector$5458$UGjMA
          g$k$5459$UGjMA
          (g$native-endianness$5373$UGjMA)
          '8))))
   (g$bytevector-u64-set!$5394$UGjMA
     g$bytevector-u64-set!$5505$UGjMA
     (case-lambda
       ((g$bytevector$5460$UGjMA
          g$k$5461$UGjMA
          g$n$5462$UGjMA
          g$endianness$5463$UGjMA)
        (bytevector-uint-ref
          g$bytevector$5460$UGjMA
          g$k$5461$UGjMA
          g$endianness$5463$UGjMA
          '8))))
   (g$bytevector-s64-set!$5395$UGjMA
     g$bytevector-s64-set!$5506$UGjMA
     (case-lambda
       ((g$bytevector$5464$UGjMA
          g$k$5465$UGjMA
          g$n$5466$UGjMA
          g$endianness$5467$UGjMA)
        (bytevector-sint-ref
          g$bytevector$5464$UGjMA
          g$k$5465$UGjMA
          g$endianness$5467$UGjMA
          '8))))
   (g$bytevector-u64-native-set!$5396$UGjMA
     g$bytevector-u64-native-set!$5507$UGjMA
     (case-lambda
       ((g$bytevector$5468$UGjMA g$k$5469$UGjMA g$n$5470$UGjMA)
        (bytevector-uint-ref
          g$bytevector$5468$UGjMA
          g$k$5469$UGjMA
          (g$native-endianness$5373$UGjMA)
          '8))))
   (g$bytevector-s64-native-set!$5397$UGjMA
     g$bytevector-s64-native-set!$5508$UGjMA
     (case-lambda
       ((g$bytevector$5471$UGjMA g$k$5472$UGjMA g$n$5473$UGjMA)
        (bytevector-sint-ref
          g$bytevector$5471$UGjMA
          g$k$5472$UGjMA
          (g$native-endianness$5373$UGjMA)
          '8))))
   (g$bytevector-ieee-single-native-ref$5398$UGjMA
     g$bytevector-ieee-single-native-ref$5509$UGjMA
     (case-lambda
       ((g$bytevector$5474$UGjMA g$k$5475$UGjMA)
        (bytevector-ieee-single-ref
          g$bytevector$5474$UGjMA
          g$k$5475$UGjMA
          (g$native-endianness$5373$UGjMA)))))
   (g$bytevector-ieee-double-native-ref$5399$UGjMA
     g$bytevector-ieee-double-native-ref$5510$UGjMA
     (case-lambda
       ((g$bytevector$5476$UGjMA g$k$5477$UGjMA)
        (bytevector-ieee-double-ref
          g$bytevector$5476$UGjMA
          g$k$5477$UGjMA
          (g$native-endianness$5373$UGjMA)))))
   (g$bytevector-ieee-single-native-set!$5400$UGjMA
     g$bytevector-ieee-single-native-set!$5511$UGjMA
     (case-lambda
       ((g$bytevector$5478$UGjMA g$k$5479$UGjMA g$x$5480$UGjMA)
        (bytevector-ieee-single-set!
          g$bytevector$5478$UGjMA
          g$k$5479$UGjMA
          g$x$5480$UGjMA
          (g$native-endianness$5373$UGjMA)))))
   (g$bytevector-ieee-double-native-set!$5401$UGjMA
     g$bytevector-ieee-double-native-set!$5512$UGjMA
     (case-lambda
       ((g$bytevector$5481$UGjMA g$k$5482$UGjMA g$x$5483$UGjMA)
        (bytevector-ieee-double-set!
          g$bytevector$5481$UGjMA
          g$k$5482$UGjMA
          g$x$5483$UGjMA
          (g$native-endianness$5373$UGjMA))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$6289$5513$UGjMA
     g$6289$5608$UGjMA
     (make-record-type-descriptor
       '&condition
       '#f
       'g$6292$UGjMA
       '#f
       '#f
       '#()))
   (g$6291$5514$UGjMA g$6291$5609$UGjMA '#f)
   (g$6290$5515$UGjMA
     g$6290$5610$UGjMA
     (make-record-constructor-descriptor
       g$6289$5513$UGjMA
       '#f
       g$6291$5514$UGjMA))
   (g$&condition?$5516$UGjMA
     g$&condition?$5611$UGjMA
     (record-predicate g$6289$5513$UGjMA))
   (g$make-&condition$5517$UGjMA
     g$make-&condition$5612$UGjMA
     (record-constructor g$6290$5515$UGjMA))
   (g$&condition-rtd$5518$UGjMA
     g$&condition-rtd$5613$UGjMA
     g$6289$5513$UGjMA)
   (g$&condition-rcd$5519$UGjMA
     g$&condition-rcd$5614$UGjMA
     g$6290$5515$UGjMA)
   (g$6305$5520$UGjMA
     g$6305$5615$UGjMA
     (make-record-type-descriptor
       '&message
       g$6289$5513$UGjMA
       'g$6308$UGjMA
       '#f
       '#f
       '#((immutable message))))
   (g$6307$5521$UGjMA g$6307$5616$UGjMA '#f)
   (g$6306$5522$UGjMA
     g$6306$5617$UGjMA
     (make-record-constructor-descriptor
       g$6305$5520$UGjMA
       g$6290$5515$UGjMA
       g$6307$5521$UGjMA))
   (g$6304$5523$UGjMA
     g$6304$5618$UGjMA
     (record-predicate g$6305$5520$UGjMA))
   (g$make-message-condition$5524$UGjMA
     g$make-message-condition$5619$UGjMA
     (record-constructor g$6306$5522$UGjMA))
   (g$6303$5525$UGjMA
     g$6303$5620$UGjMA
     (record-accessor g$6305$5520$UGjMA '0))
   (g$message-condition?$5526$UGjMA
     g$message-condition?$5621$UGjMA
     (condition-predicate g$6305$5520$UGjMA))
   (g$condition-message$5527$UGjMA
     g$condition-message$5622$UGjMA
     (condition-accessor g$6305$5520$UGjMA g$6303$5525$UGjMA))
   (g$6321$5528$UGjMA
     g$6321$5623$UGjMA
     (make-record-type-descriptor
       '&warning
       g$6289$5513$UGjMA
       'g$6324$UGjMA
       '#f
       '#f
       '#()))
   (g$6323$5529$UGjMA g$6323$5624$UGjMA '#f)
   (g$6322$5530$UGjMA
     g$6322$5625$UGjMA
     (make-record-constructor-descriptor
       g$6321$5528$UGjMA
       g$6290$5515$UGjMA
       g$6323$5529$UGjMA))
   (g$6320$5531$UGjMA
     g$6320$5626$UGjMA
     (record-predicate g$6321$5528$UGjMA))
   (g$make-warning$5532$UGjMA
     g$make-warning$5627$UGjMA
     (record-constructor g$6322$5530$UGjMA))
   (g$warning?$5533$UGjMA
     g$warning?$5628$UGjMA
     (condition-predicate g$6321$5528$UGjMA))
   (g$6335$5534$UGjMA
     g$6335$5629$UGjMA
     (make-record-type-descriptor
       '&serious
       g$6289$5513$UGjMA
       'g$6338$UGjMA
       '#f
       '#f
       '#()))
   (g$6337$5535$UGjMA g$6337$5630$UGjMA '#f)
   (g$6336$5536$UGjMA
     g$6336$5631$UGjMA
     (make-record-constructor-descriptor
       g$6335$5534$UGjMA
       g$6290$5515$UGjMA
       g$6337$5535$UGjMA))
   (g$6334$5537$UGjMA
     g$6334$5632$UGjMA
     (record-predicate g$6335$5534$UGjMA))
   (g$make-serious-condition$5538$UGjMA
     g$make-serious-condition$5633$UGjMA
     (record-constructor g$6336$5536$UGjMA))
   (g$serious-condition?$5539$UGjMA
     g$serious-condition?$5634$UGjMA
     (condition-predicate g$6335$5534$UGjMA))
   (g$6349$5540$UGjMA
     g$6349$5635$UGjMA
     (make-record-type-descriptor
       '&error
       g$6335$5534$UGjMA
       'g$6352$UGjMA
       '#f
       '#f
       '#()))
   (g$6351$5541$UGjMA g$6351$5636$UGjMA '#f)
   (g$6350$5542$UGjMA
     g$6350$5637$UGjMA
     (make-record-constructor-descriptor
       g$6349$5540$UGjMA
       g$6336$5536$UGjMA
       g$6351$5541$UGjMA))
   (g$6348$5543$UGjMA
     g$6348$5638$UGjMA
     (record-predicate g$6349$5540$UGjMA))
   (g$make-error$5544$UGjMA
     g$make-error$5639$UGjMA
     (record-constructor g$6350$5542$UGjMA))
   (g$error?$5545$UGjMA
     g$error?$5640$UGjMA
     (condition-predicate g$6349$5540$UGjMA))
   (g$6363$5546$UGjMA
     g$6363$5641$UGjMA
     (make-record-type-descriptor
       '&violation
       g$6335$5534$UGjMA
       'g$6366$UGjMA
       '#f
       '#f
       '#()))
   (g$6365$5547$UGjMA g$6365$5642$UGjMA '#f)
   (g$6364$5548$UGjMA
     g$6364$5643$UGjMA
     (make-record-constructor-descriptor
       g$6363$5546$UGjMA
       g$6336$5536$UGjMA
       g$6365$5547$UGjMA))
   (g$6362$5549$UGjMA
     g$6362$5644$UGjMA
     (record-predicate g$6363$5546$UGjMA))
   (g$make-violation$5550$UGjMA
     g$make-violation$5645$UGjMA
     (record-constructor g$6364$5548$UGjMA))
   (g$violation?$5551$UGjMA
     g$violation?$5646$UGjMA
     (condition-predicate g$6363$5546$UGjMA))
   (g$6377$5552$UGjMA
     g$6377$5647$UGjMA
     (make-record-type-descriptor
       '&assertion
       g$6363$5546$UGjMA
       'g$6380$UGjMA
       '#f
       '#f
       '#()))
   (g$6379$5553$UGjMA g$6379$5648$UGjMA '#f)
   (g$6378$5554$UGjMA
     g$6378$5649$UGjMA
     (make-record-constructor-descriptor
       g$6377$5552$UGjMA
       g$6364$5548$UGjMA
       g$6379$5553$UGjMA))
   (g$6376$5555$UGjMA
     g$6376$5650$UGjMA
     (record-predicate g$6377$5552$UGjMA))
   (g$make-assertion-violation$5556$UGjMA
     g$make-assertion-violation$5651$UGjMA
     (record-constructor g$6378$5554$UGjMA))
   (g$assertion-violation?$5557$UGjMA
     g$assertion-violation?$5652$UGjMA
     (condition-predicate g$6377$5552$UGjMA))
   (g$6392$5558$UGjMA
     g$6392$5653$UGjMA
     (make-record-type-descriptor
       '&irritants
       g$6289$5513$UGjMA
       'g$6395$UGjMA
       '#f
       '#f
       '#((immutable irritants))))
   (g$6394$5559$UGjMA g$6394$5654$UGjMA '#f)
   (g$6393$5560$UGjMA
     g$6393$5655$UGjMA
     (make-record-constructor-descriptor
       g$6392$5558$UGjMA
       g$6290$5515$UGjMA
       g$6394$5559$UGjMA))
   (g$6391$5561$UGjMA
     g$6391$5656$UGjMA
     (record-predicate g$6392$5558$UGjMA))
   (g$make-irritants-condition$5562$UGjMA
     g$make-irritants-condition$5657$UGjMA
     (record-constructor g$6393$5560$UGjMA))
   (g$6390$5563$UGjMA
     g$6390$5658$UGjMA
     (record-accessor g$6392$5558$UGjMA '0))
   (g$irritants-condition?$5564$UGjMA
     g$irritants-condition?$5659$UGjMA
     (condition-predicate g$6392$5558$UGjMA))
   (g$condition-irritants$5565$UGjMA
     g$condition-irritants$5660$UGjMA
     (condition-accessor g$6392$5558$UGjMA g$6390$5563$UGjMA))
   (g$6409$5566$UGjMA
     g$6409$5661$UGjMA
     (make-record-type-descriptor
       '&who
       g$6289$5513$UGjMA
       'g$6412$UGjMA
       '#f
       '#f
       '#((immutable who))))
   (g$6411$5567$UGjMA g$6411$5662$UGjMA '#f)
   (g$6410$5568$UGjMA
     g$6410$5663$UGjMA
     (make-record-constructor-descriptor
       g$6409$5566$UGjMA
       g$6290$5515$UGjMA
       g$6411$5567$UGjMA))
   (g$6408$5569$UGjMA
     g$6408$5664$UGjMA
     (record-predicate g$6409$5566$UGjMA))
   (g$make-who-condition$5570$UGjMA
     g$make-who-condition$5665$UGjMA
     (record-constructor g$6410$5568$UGjMA))
   (g$6407$5571$UGjMA
     g$6407$5666$UGjMA
     (record-accessor g$6409$5566$UGjMA '0))
   (g$who-condition?$5572$UGjMA
     g$who-condition?$5667$UGjMA
     (condition-predicate g$6409$5566$UGjMA))
   (g$condition-who$5573$UGjMA
     g$condition-who$5668$UGjMA
     (condition-accessor g$6409$5566$UGjMA g$6407$5571$UGjMA))
   (g$6425$5574$UGjMA
     g$6425$5669$UGjMA
     (make-record-type-descriptor
       '&non-continuable
       g$6363$5546$UGjMA
       'g$6428$UGjMA
       '#f
       '#f
       '#()))
   (g$6427$5575$UGjMA g$6427$5670$UGjMA '#f)
   (g$6426$5576$UGjMA
     g$6426$5671$UGjMA
     (make-record-constructor-descriptor
       g$6425$5574$UGjMA
       g$6364$5548$UGjMA
       g$6427$5575$UGjMA))
   (g$6424$5577$UGjMA
     g$6424$5672$UGjMA
     (record-predicate g$6425$5574$UGjMA))
   (g$make-non-continuable-violation$5578$UGjMA
     g$make-non-continuable-violation$5673$UGjMA
     (record-constructor g$6426$5576$UGjMA))
   (g$non-continuable-violation?$5579$UGjMA
     g$non-continuable-violation?$5674$UGjMA
     (condition-predicate g$6425$5574$UGjMA))
   (g$6439$5580$UGjMA
     g$6439$5675$UGjMA
     (make-record-type-descriptor
       '&implementation-restriction
       g$6363$5546$UGjMA
       'g$6442$UGjMA
       '#f
       '#f
       '#()))
   (g$6441$5581$UGjMA g$6441$5676$UGjMA '#f)
   (g$6440$5582$UGjMA
     g$6440$5677$UGjMA
     (make-record-constructor-descriptor
       g$6439$5580$UGjMA
       g$6364$5548$UGjMA
       g$6441$5581$UGjMA))
   (g$6438$5583$UGjMA
     g$6438$5678$UGjMA
     (record-predicate g$6439$5580$UGjMA))
   (g$make-implementation-restriction-violation$5584$UGjMA
     g$make-implementation-restriction-violation$5679$UGjMA
     (record-constructor g$6440$5582$UGjMA))
   (g$implementation-restriction-violation?$5585$UGjMA
     g$implementation-restriction-violation?$5680$UGjMA
     (condition-predicate g$6439$5580$UGjMA))
   (g$6453$5586$UGjMA
     g$6453$5681$UGjMA
     (make-record-type-descriptor
       '&lexical
       g$6363$5546$UGjMA
       'g$6456$UGjMA
       '#f
       '#f
       '#()))
   (g$6455$5587$UGjMA g$6455$5682$UGjMA '#f)
   (g$6454$5588$UGjMA
     g$6454$5683$UGjMA
     (make-record-constructor-descriptor
       g$6453$5586$UGjMA
       g$6364$5548$UGjMA
       g$6455$5587$UGjMA))
   (g$6452$5589$UGjMA
     g$6452$5684$UGjMA
     (record-predicate g$6453$5586$UGjMA))
   (g$make-lexical-violation$5590$UGjMA
     g$make-lexical-violation$5685$UGjMA
     (record-constructor g$6454$5588$UGjMA))
   (g$lexical-violation?$5591$UGjMA
     g$lexical-violation?$5686$UGjMA
     (condition-predicate g$6453$5586$UGjMA))
   (g$6469$5592$UGjMA
     g$6469$5687$UGjMA
     (make-record-type-descriptor
       '&syntax
       g$6363$5546$UGjMA
       'g$6472$UGjMA
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6471$5593$UGjMA g$6471$5688$UGjMA '#f)
   (g$6470$5594$UGjMA
     g$6470$5689$UGjMA
     (make-record-constructor-descriptor
       g$6469$5592$UGjMA
       g$6364$5548$UGjMA
       g$6471$5593$UGjMA))
   (g$6468$5595$UGjMA
     g$6468$5690$UGjMA
     (record-predicate g$6469$5592$UGjMA))
   (g$make-syntax-violation$5596$UGjMA
     g$make-syntax-violation$5691$UGjMA
     (record-constructor g$6470$5594$UGjMA))
   (g$6466$5597$UGjMA
     g$6466$5692$UGjMA
     (record-accessor g$6469$5592$UGjMA '0))
   (g$6467$5598$UGjMA
     g$6467$5693$UGjMA
     (record-accessor g$6469$5592$UGjMA '1))
   (g$syntax-violation?$5599$UGjMA
     g$syntax-violation?$5694$UGjMA
     (condition-predicate g$6469$5592$UGjMA))
   (g$syntax-violation-form$5600$UGjMA
     g$syntax-violation-form$5695$UGjMA
     (condition-accessor g$6469$5592$UGjMA g$6466$5597$UGjMA))
   (g$syntax-violation-subform$5601$UGjMA
     g$syntax-violation-subform$5696$UGjMA
     (condition-accessor g$6469$5592$UGjMA g$6467$5598$UGjMA))
   (g$6487$5602$UGjMA
     g$6487$5697$UGjMA
     (make-record-type-descriptor
       '&undefined
       g$6363$5546$UGjMA
       'g$6490$UGjMA
       '#f
       '#f
       '#()))
   (g$6489$5603$UGjMA g$6489$5698$UGjMA '#f)
   (g$6488$5604$UGjMA
     g$6488$5699$UGjMA
     (make-record-constructor-descriptor
       g$6487$5602$UGjMA
       g$6364$5548$UGjMA
       g$6489$5603$UGjMA))
   (g$6486$5605$UGjMA
     g$6486$5700$UGjMA
     (record-predicate g$6487$5602$UGjMA))
   (g$make-undefined-violation$5606$UGjMA
     g$make-undefined-violation$5701$UGjMA
     (record-constructor g$6488$5604$UGjMA))
   (g$undefined-violation?$5607$UGjMA
     g$undefined-violation?$5702$UGjMA
     (condition-predicate g$6487$5602$UGjMA)))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$5703$UGjMA
     g$append!$5709$UGjMA
     (case-lambda
       ((g$a$5704$UGjMA . g$b$5705$UGjMA)
        (if (null? g$a$5704$UGjMA)
          g$b$5705$UGjMA
          (if (null? g$b$5705$UGjMA)
            g$a$5704$UGjMA
            (begin
              ((letrec ((g$f$5706$UGjMA
                          (case-lambda
                            ((g$a$5707$UGjMA)
                             ((case-lambda
                                ((g$n$5708$UGjMA)
                                 (if (null? g$n$5708$UGjMA)
                                   (set-cdr! g$a$5707$UGjMA g$b$5705$UGjMA)
                                   (g$f$5706$UGjMA g$n$5708$UGjMA))))
                              (cdr g$a$5707$UGjMA))))))
                 g$f$5706$UGjMA)
               g$a$5704$UGjMA)
              g$a$5704$UGjMA)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$sign$5710$UGjMA
     g$sign$5721$UGjMA
     (case-lambda
       ((g$n$5714$UGjMA)
        (if (> g$n$5714$UGjMA '0) '1 (if (< g$n$5714$UGjMA '0) '-1 '0)))))
   (g$quotient$5711$UGjMA
     g$quotient$5722$UGjMA
     (case-lambda
       ((g$n1$5715$UGjMA g$n2$5716$UGjMA)
        (* (g$sign$5710$UGjMA g$n1$5715$UGjMA)
           (g$sign$5710$UGjMA g$n2$5716$UGjMA)
           (div (abs g$n1$5715$UGjMA) (abs g$n2$5716$UGjMA))))))
   (g$remainder$5712$UGjMA
     g$remainder$5723$UGjMA
     (case-lambda
       ((g$n1$5717$UGjMA g$n2$5718$UGjMA)
        (* (g$sign$5710$UGjMA g$n1$5717$UGjMA)
           (mod (abs g$n1$5717$UGjMA) (abs g$n2$5718$UGjMA))))))
   (g$modulo$5713$UGjMA
     g$modulo$5724$UGjMA
     (case-lambda
       ((g$n1$5719$UGjMA g$n2$5720$UGjMA)
        (* (g$sign$5710$UGjMA g$n2$5720$UGjMA)
           (mod (* (g$sign$5710$UGjMA g$n2$5720$UGjMA) g$n1$5719$UGjMA)
                (abs g$n2$5720$UGjMA)))))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$5725$UGjMA
     g$split$5751$UGjMA
     (case-lambda
       ((g$ls$5728$UGjMA)
        ((letrec ((g$loop$5729$UGjMA
                    (case-lambda
                      ((g$rest$5730$UGjMA g$left$5731$UGjMA g$right$5732$UGjMA)
                       (if (null? g$rest$5730$UGjMA)
                         (cons g$left$5731$UGjMA g$right$5732$UGjMA)
                         (if (null? (cdr g$rest$5730$UGjMA))
                           (cons
                             (cons (car g$rest$5730$UGjMA) g$left$5731$UGjMA)
                             g$right$5732$UGjMA)
                           (g$loop$5729$UGjMA
                             (g$cddr$4898$UGjMA g$rest$5730$UGjMA)
                             (cons (car g$rest$5730$UGjMA) g$left$5731$UGjMA)
                             (cons
                               (g$cadr$4896$UGjMA g$rest$5730$UGjMA)
                               g$right$5732$UGjMA))))))))
           g$loop$5729$UGjMA)
         g$ls$5728$UGjMA
         '()
         '()))))
   (g$reverse-it$5726$UGjMA
     g$reverse-it$5752$UGjMA
     (case-lambda
       ((g$head$5733$UGjMA g$tail$5734$UGjMA)
        (if (null? g$head$5733$UGjMA)
          g$tail$5734$UGjMA
          ((case-lambda
             ((g$hd$5735$UGjMA g$tl$5736$UGjMA)
              (g$reverse-it$5726$UGjMA
                g$tl$5736$UGjMA
                (cons g$hd$5735$UGjMA g$tail$5734$UGjMA))))
           (car g$head$5733$UGjMA)
           (cdr g$head$5733$UGjMA))))))
   (g$list-sort$5727$UGjMA
     g$list-sort$5753$UGjMA
     (case-lambda
       ((g$precedes?$5737$UGjMA g$ls$5738$UGjMA)
        ((case-lambda
           ((g$merge$5739$UGjMA)
            ((case-lambda
               (()
                (if (null? g$ls$5738$UGjMA)
                  '()
                  ((letrec ((g$helper$5740$UGjMA
                              (case-lambda
                                ((g$piece$5741$UGjMA)
                                 (if (null? (cdr g$piece$5741$UGjMA))
                                   g$piece$5741$UGjMA
                                   ((case-lambda
                                      ((g$parts$5742$UGjMA)
                                       (g$merge$5739$UGjMA
                                         (g$helper$5740$UGjMA
                                           (car g$parts$5742$UGjMA))
                                         (g$helper$5740$UGjMA
                                           (cdr g$parts$5742$UGjMA)))))
                                    (g$split$5725$UGjMA
                                      g$piece$5741$UGjMA)))))))
                     g$helper$5740$UGjMA)
                   g$ls$5738$UGjMA)))))))
         (case-lambda
           ((g$list-1$5743$UGjMA g$list-2$5744$UGjMA)
            ((letrec ((g$loop$5745$UGjMA
                        (case-lambda
                          ((g$source-1$5746$UGjMA
                             g$source-2$5747$UGjMA
                             g$so-far$5748$UGjMA)
                           (if (null? g$source-1$5746$UGjMA)
                             (g$reverse-it$5726$UGjMA
                               g$so-far$5748$UGjMA
                               g$source-2$5747$UGjMA)
                             (if (null? g$source-2$5747$UGjMA)
                               (g$reverse-it$5726$UGjMA
                                 g$so-far$5748$UGjMA
                                 g$source-1$5746$UGjMA)
                               ((case-lambda
                                  ((g$car-1$5749$UGjMA g$car-2$5750$UGjMA)
                                   (if (g$precedes?$5737$UGjMA
                                         g$car-2$5750$UGjMA
                                         g$car-1$5749$UGjMA)
                                     (g$loop$5745$UGjMA
                                       g$source-1$5746$UGjMA
                                       (cdr g$source-2$5747$UGjMA)
                                       (cons
                                         g$car-2$5750$UGjMA
                                         g$so-far$5748$UGjMA))
                                     (g$loop$5745$UGjMA
                                       g$source-2$5747$UGjMA
                                       (cdr g$source-1$5746$UGjMA)
                                       (cons
                                         g$car-1$5749$UGjMA
                                         g$so-far$5748$UGjMA)))))
                                (car g$source-1$5746$UGjMA)
                                (car g$source-2$5747$UGjMA))))))))
               g$loop$5745$UGjMA)
             g$list-1$5743$UGjMA
             g$list-2$5744$UGjMA
             '()))))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode) () (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$5791$UGjMA
     g$bitwise-if$5842$UGjMA
     (case-lambda
       ((g$ei1$5799$UGjMA g$ei2$5800$UGjMA g$ei3$5801$UGjMA)
        (bitwise-ior
          (bitwise-and g$ei1$5799$UGjMA g$ei2$5800$UGjMA)
          (bitwise-and (bitwise-not g$ei1$5799$UGjMA) g$ei3$5801$UGjMA)))))
   (g$bitwise-copy-bit$5792$UGjMA
     g$bitwise-copy-bit$5843$UGjMA
     (case-lambda
       ((g$ei1$5802$UGjMA g$ei2$5803$UGjMA g$ei3$5804$UGjMA)
        ((case-lambda
           ((g$mask$5805$UGjMA)
            ((case-lambda
               (()
                (g$bitwise-if$5791$UGjMA
                  g$mask$5805$UGjMA
                  (g$bitwise-arithmetic-shift-left$5795$UGjMA
                    g$ei3$5804$UGjMA
                    g$ei2$5803$UGjMA)
                  g$ei1$5802$UGjMA))))))
         (g$bitwise-arithmetic-shift-left$5795$UGjMA '1 g$ei2$5803$UGjMA)))))
   (g$bitwise-bit-field$5793$UGjMA
     g$bitwise-bit-field$5844$UGjMA
     (case-lambda
       ((g$ei1$5806$UGjMA g$ei2$5807$UGjMA g$ei3$5808$UGjMA)
        ((case-lambda
           ((g$mask$5809$UGjMA)
            (g$bitwise-arithmetic-shift-right$5796$UGjMA
              (bitwise-and g$ei1$5806$UGjMA g$mask$5809$UGjMA)
              g$ei2$5807$UGjMA)))
         (bitwise-not
           (g$bitwise-arithmetic-shift-left$5795$UGjMA
             '-1
             g$ei3$5808$UGjMA))))))
   (g$bitwise-copy-bit-field$5794$UGjMA
     g$bitwise-copy-bit-field$5845$UGjMA
     (case-lambda
       ((g$ei1$5810$UGjMA g$ei2$5811$UGjMA g$ei3$5812$UGjMA g$ei4$5813$UGjMA)
        ((case-lambda
           ((g$to$5814$UGjMA)
            ((case-lambda
               ((g$start$5815$UGjMA)
                ((case-lambda
                   ((g$end$5816$UGjMA)
                    ((case-lambda
                       ((g$from$5817$UGjMA)
                        ((case-lambda
                           ((g$mask1$5818$UGjMA)
                            ((case-lambda
                               ((g$mask2$5819$UGjMA)
                                ((case-lambda
                                   ((g$mask$5820$UGjMA)
                                    ((case-lambda
                                       (()
                                        (g$bitwise-if$5791$UGjMA
                                          g$mask$5820$UGjMA
                                          (g$bitwise-arithmetic-shift-left$5795$UGjMA
                                            g$from$5817$UGjMA
                                            g$start$5815$UGjMA)
                                          g$to$5814$UGjMA))))))
                                 (bitwise-and
                                   g$mask1$5818$UGjMA
                                   g$mask2$5819$UGjMA))))
                             (bitwise-not
                               (g$bitwise-arithmetic-shift-left$5795$UGjMA
                                 '-1
                                 g$end$5816$UGjMA)))))
                         (g$bitwise-arithmetic-shift-left$5795$UGjMA
                           '-1
                           g$start$5815$UGjMA))))
                     g$ei4$5813$UGjMA)))
                 g$ei3$5812$UGjMA)))
             g$ei2$5811$UGjMA)))
         g$ei1$5810$UGjMA))))
   (g$bitwise-arithmetic-shift-left$5795$UGjMA
     g$bitwise-arithmetic-shift-left$5846$UGjMA
     (case-lambda
       ((g$ei1$5821$UGjMA g$ei2$5822$UGjMA)
        (bitwise-arithmetic-shift g$ei1$5821$UGjMA g$ei2$5822$UGjMA))))
   (g$bitwise-arithmetic-shift-right$5796$UGjMA
     g$bitwise-arithmetic-shift-right$5847$UGjMA
     (case-lambda
       ((g$ei1$5823$UGjMA g$ei2$5824$UGjMA)
        (bitwise-arithmetic-shift g$ei1$5823$UGjMA (- g$ei2$5824$UGjMA)))))
   (g$bitwise-rotate-bit-field$5797$UGjMA
     g$bitwise-rotate-bit-field$5848$UGjMA
     (case-lambda
       ((g$ei1$5825$UGjMA g$ei2$5826$UGjMA g$ei3$5827$UGjMA g$ei4$5828$UGjMA)
        ((case-lambda
           ((g$n$5829$UGjMA)
            ((case-lambda
               ((g$start$5830$UGjMA)
                ((case-lambda
                   ((g$end$5831$UGjMA)
                    ((case-lambda
                       ((g$count$5832$UGjMA)
                        ((case-lambda
                           ((g$width$5833$UGjMA)
                            ((case-lambda
                               (()
                                (if (positive? g$width$5833$UGjMA)
                                  ((case-lambda
                                     ((g$count$5834$UGjMA)
                                      ((case-lambda
                                         ((g$field0$5835$UGjMA)
                                          ((case-lambda
                                             ((g$field1$5836$UGjMA)
                                              ((case-lambda
                                                 ((g$field2$5837$UGjMA)
                                                  ((case-lambda
                                                     ((g$field$5838$UGjMA)
                                                      ((case-lambda
                                                         (()
                                                          (g$bitwise-copy-bit-field$5794$UGjMA
                                                            g$n$5829$UGjMA
                                                            g$start$5830$UGjMA
                                                            g$end$5831$UGjMA
                                                            g$field$5838$UGjMA))))))
                                                   (bitwise-ior
                                                     g$field1$5836$UGjMA
                                                     g$field2$5837$UGjMA))))
                                               (g$bitwise-arithmetic-shift-right$5796$UGjMA
                                                 g$field0$5835$UGjMA
                                                 (- g$width$5833$UGjMA
                                                    g$count$5834$UGjMA)))))
                                           (g$bitwise-arithmetic-shift-left$5795$UGjMA
                                             g$field0$5835$UGjMA
                                             g$count$5834$UGjMA))))
                                       (g$bitwise-bit-field$5793$UGjMA
                                         g$n$5829$UGjMA
                                         g$start$5830$UGjMA
                                         g$end$5831$UGjMA))))
                                   (mod g$count$5832$UGjMA g$width$5833$UGjMA))
                                  g$n$5829$UGjMA))))))
                         (- g$end$5831$UGjMA g$start$5830$UGjMA))))
                     g$ei4$5828$UGjMA)))
                 g$ei3$5827$UGjMA)))
             g$ei2$5826$UGjMA)))
         g$ei1$5825$UGjMA))))
   (g$bitwise-reverse-bit-field$5798$UGjMA
     g$bitwise-reverse-bit-field$5849$UGjMA
     (case-lambda
       ((g$ei1$5839$UGjMA g$ei2$5840$UGjMA g$ei3$5841$UGjMA) 'TODO))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fxif$5850$UGjMA
     g$fxif$5897$UGjMA
     (case-lambda
       ((g$fx1$5857$UGjMA g$fx2$5858$UGjMA g$fx3$5859$UGjMA)
        (fxior
          (fxand g$fx1$5857$UGjMA g$fx2$5858$UGjMA)
          (fxand (fxnot g$fx1$5857$UGjMA) g$fx3$5859$UGjMA)))))
   (g$fxcopy-bit$5851$UGjMA
     g$fxcopy-bit$5898$UGjMA
     (case-lambda
       ((g$fx1$5860$UGjMA g$fx2$5861$UGjMA g$fx3$5862$UGjMA)
        ((case-lambda
           ((g$mask$5863$UGjMA)
            ((case-lambda
               (()
                (g$fxif$5850$UGjMA
                  g$mask$5863$UGjMA
                  (g$fxarithmetic-shift-left$5854$UGjMA
                    g$fx3$5862$UGjMA
                    g$fx2$5861$UGjMA)
                  g$fx1$5860$UGjMA))))))
         (g$fxarithmetic-shift-left$5854$UGjMA '1 g$fx2$5861$UGjMA)))))
   (g$fxbit-field$5852$UGjMA
     g$fxbit-field$5899$UGjMA
     (case-lambda
       ((g$fx1$5864$UGjMA g$fx2$5865$UGjMA g$fx3$5866$UGjMA)
        ((case-lambda
           ((g$mask$5867$UGjMA)
            ((case-lambda
               (()
                (g$fxarithmetic-shift-right$5855$UGjMA
                  (fxand g$fx1$5864$UGjMA g$mask$5867$UGjMA)
                  g$fx2$5865$UGjMA))))))
         (fxnot (g$fxarithmetic-shift-left$5854$UGjMA '-1 g$fx3$5866$UGjMA))))))
   (g$fxcopy-bit-field$5853$UGjMA
     g$fxcopy-bit-field$5900$UGjMA
     (case-lambda
       ((g$fx1$5868$UGjMA g$fx2$5869$UGjMA g$fx3$5870$UGjMA g$fx4$5871$UGjMA)
        ((case-lambda
           ((g$to$5872$UGjMA)
            ((case-lambda
               ((g$start$5873$UGjMA)
                ((case-lambda
                   ((g$end$5874$UGjMA)
                    ((case-lambda
                       ((g$from$5875$UGjMA)
                        ((case-lambda
                           ((g$mask1$5876$UGjMA)
                            ((case-lambda
                               ((g$mask2$5877$UGjMA)
                                ((case-lambda
                                   ((g$mask$5878$UGjMA)
                                    ((case-lambda
                                       (()
                                        (g$fxif$5850$UGjMA
                                          g$mask$5878$UGjMA
                                          (g$fxarithmetic-shift-left$5854$UGjMA
                                            g$from$5875$UGjMA
                                            g$start$5873$UGjMA)
                                          g$to$5872$UGjMA))))))
                                 (fxand
                                   g$mask1$5876$UGjMA
                                   g$mask2$5877$UGjMA))))
                             (fxnot
                               (g$fxarithmetic-shift-left$5854$UGjMA
                                 '-1
                                 g$end$5874$UGjMA)))))
                         (g$fxarithmetic-shift-left$5854$UGjMA
                           '-1
                           g$start$5873$UGjMA))))
                     g$fx4$5871$UGjMA)))
                 g$fx3$5870$UGjMA)))
             g$fx2$5869$UGjMA)))
         g$fx1$5868$UGjMA))))
   (g$fxarithmetic-shift-left$5854$UGjMA
     g$fxarithmetic-shift-left$5901$UGjMA
     (case-lambda
       ((g$fx1$5879$UGjMA g$fx2$5880$UGjMA)
        (fxarithmetic-shift g$fx1$5879$UGjMA g$fx2$5880$UGjMA))))
   (g$fxarithmetic-shift-right$5855$UGjMA
     g$fxarithmetic-shift-right$5902$UGjMA
     (case-lambda
       ((g$fx1$5881$UGjMA g$fx2$5882$UGjMA)
        (fxarithmetic-shift g$fx1$5881$UGjMA (- g$fx2$5882$UGjMA)))))
   (g$fxrotate-bit-field$5856$UGjMA
     g$fxrotate-bit-field$5903$UGjMA
     (case-lambda
       ((g$fx1$5883$UGjMA g$fx2$5884$UGjMA g$fx3$5885$UGjMA g$fx4$5886$UGjMA)
        ((case-lambda
           ((g$n$5887$UGjMA)
            ((case-lambda
               ((g$start$5888$UGjMA)
                ((case-lambda
                   ((g$end$5889$UGjMA)
                    ((case-lambda
                       ((g$count$5890$UGjMA)
                        ((case-lambda
                           ((g$width$5891$UGjMA)
                            ((case-lambda
                               (()
                                (if (positive? g$width$5891$UGjMA)
                                  ((case-lambda
                                     ((g$count$5892$UGjMA)
                                      ((case-lambda
                                         ((g$field0$5893$UGjMA)
                                          ((case-lambda
                                             ((g$field1$5894$UGjMA)
                                              ((case-lambda
                                                 ((g$field2$5895$UGjMA)
                                                  ((case-lambda
                                                     ((g$field$5896$UGjMA)
                                                      ((case-lambda
                                                         (()
                                                          (g$fxcopy-bit-field$5853$UGjMA
                                                            g$n$5887$UGjMA
                                                            g$start$5888$UGjMA
                                                            g$end$5889$UGjMA
                                                            g$field$5896$UGjMA))))))
                                                   (fxior
                                                     g$field1$5894$UGjMA
                                                     g$field2$5895$UGjMA))))
                                               (g$fxarithmetic-shift-right$5855$UGjMA
                                                 g$field0$5893$UGjMA
                                                 (- g$width$5891$UGjMA
                                                    g$count$5892$UGjMA)))))
                                           (g$fxarithmetic-shift-left$5854$UGjMA
                                             g$field0$5893$UGjMA
                                             g$count$5892$UGjMA))))
                                       (g$fxbit-field$5852$UGjMA
                                         g$n$5887$UGjMA
                                         g$start$5888$UGjMA
                                         g$end$5889$UGjMA))))
                                   (mod g$count$5890$UGjMA g$width$5891$UGjMA))
                                  g$n$5887$UGjMA))))))
                         (- g$end$5889$UGjMA g$start$5888$UGjMA))))
                     g$fx4$5886$UGjMA)))
                 g$fx3$5885$UGjMA)))
             g$fx2$5884$UGjMA)))
         g$fx1$5883$UGjMA)))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$6704$5904$UGjMA
     g$6704$5916$UGjMA
     (make-record-type-descriptor
       '&no-infinities
       &implementation-restriction-rtd
       'g$6707$UGjMA
       '#f
       '#f
       '#()))
   (g$6706$5905$UGjMA g$6706$5917$UGjMA '#f)
   (g$6705$5906$UGjMA
     g$6705$5918$UGjMA
     (make-record-constructor-descriptor
       g$6704$5904$UGjMA
       &implementation-restriction-rcd
       g$6706$5905$UGjMA))
   (g$6703$5907$UGjMA
     g$6703$5919$UGjMA
     (record-predicate g$6704$5904$UGjMA))
   (g$make-no-infinities-violation$5908$UGjMA
     g$make-no-infinities-violation$5920$UGjMA
     (record-constructor g$6705$5906$UGjMA))
   (g$no-infinities-violation?$5909$UGjMA
     g$no-infinities-violation?$5921$UGjMA
     (condition-predicate g$6704$5904$UGjMA))
   (g$6718$5910$UGjMA
     g$6718$5922$UGjMA
     (make-record-type-descriptor
       '&no-nans
       &implementation-restriction-rtd
       'g$6721$UGjMA
       '#f
       '#f
       '#()))
   (g$6720$5911$UGjMA g$6720$5923$UGjMA '#f)
   (g$6719$5912$UGjMA
     g$6719$5924$UGjMA
     (make-record-constructor-descriptor
       g$6718$5910$UGjMA
       &implementation-restriction-rcd
       g$6720$5911$UGjMA))
   (g$6717$5913$UGjMA
     g$6717$5925$UGjMA
     (record-predicate g$6718$5910$UGjMA))
   (g$make-no-nans-violation$5914$UGjMA
     g$make-no-nans-violation$5926$UGjMA
     (record-constructor g$6719$5912$UGjMA))
   (g$no-nans-violation?$5915$UGjMA
     g$no-nans-violation?$5927$UGjMA
     (condition-predicate g$6718$5910$UGjMA)))
  (void))

(library-letrec* (ironscheme io conditions)
  ((g$6733$5928$UGjMA
     g$6733$6008$UGjMA
     (make-record-type-descriptor
       '&i/o
       &error-rtd
       'g$6736$UGjMA
       '#f
       '#f
       '#()))
   (g$6735$5929$UGjMA g$6735$6009$UGjMA '#f)
   (g$6734$5930$UGjMA
     g$6734$6010$UGjMA
     (make-record-constructor-descriptor
       g$6733$5928$UGjMA
       &error-rcd
       g$6735$5929$UGjMA))
   (g$6732$5931$UGjMA
     g$6732$6011$UGjMA
     (record-predicate g$6733$5928$UGjMA))
   (g$make-i/o-error$5932$UGjMA
     g$make-i/o-error$6012$UGjMA
     (record-constructor g$6734$5930$UGjMA))
   (g$i/o-error?$5933$UGjMA
     g$i/o-error?$6013$UGjMA
     (condition-predicate g$6733$5928$UGjMA))
   (g$6747$5934$UGjMA
     g$6747$6014$UGjMA
     (make-record-type-descriptor
       '&i/o-read
       g$6733$5928$UGjMA
       'g$6750$UGjMA
       '#f
       '#f
       '#()))
   (g$6749$5935$UGjMA g$6749$6015$UGjMA '#f)
   (g$6748$5936$UGjMA
     g$6748$6016$UGjMA
     (make-record-constructor-descriptor
       g$6747$5934$UGjMA
       g$6734$5930$UGjMA
       g$6749$5935$UGjMA))
   (g$6746$5937$UGjMA
     g$6746$6017$UGjMA
     (record-predicate g$6747$5934$UGjMA))
   (g$make-i/o-read-error$5938$UGjMA
     g$make-i/o-read-error$6018$UGjMA
     (record-constructor g$6748$5936$UGjMA))
   (g$i/o-read-error?$5939$UGjMA
     g$i/o-read-error?$6019$UGjMA
     (condition-predicate g$6747$5934$UGjMA))
   (g$6761$5940$UGjMA
     g$6761$6020$UGjMA
     (make-record-type-descriptor
       '&i/o-write
       g$6733$5928$UGjMA
       'g$6764$UGjMA
       '#f
       '#f
       '#()))
   (g$6763$5941$UGjMA g$6763$6021$UGjMA '#f)
   (g$6762$5942$UGjMA
     g$6762$6022$UGjMA
     (make-record-constructor-descriptor
       g$6761$5940$UGjMA
       g$6734$5930$UGjMA
       g$6763$5941$UGjMA))
   (g$6760$5943$UGjMA
     g$6760$6023$UGjMA
     (record-predicate g$6761$5940$UGjMA))
   (g$make-i/o-write-error$5944$UGjMA
     g$make-i/o-write-error$6024$UGjMA
     (record-constructor g$6762$5942$UGjMA))
   (g$i/o-write-error?$5945$UGjMA
     g$i/o-write-error?$6025$UGjMA
     (condition-predicate g$6761$5940$UGjMA))
   (g$6776$5946$UGjMA
     g$6776$6026$UGjMA
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$6733$5928$UGjMA
       'g$6779$UGjMA
       '#f
       '#f
       '#((immutable position))))
   (g$6778$5947$UGjMA g$6778$6027$UGjMA '#f)
   (g$6777$5948$UGjMA
     g$6777$6028$UGjMA
     (make-record-constructor-descriptor
       g$6776$5946$UGjMA
       g$6734$5930$UGjMA
       g$6778$5947$UGjMA))
   (g$6775$5949$UGjMA
     g$6775$6029$UGjMA
     (record-predicate g$6776$5946$UGjMA))
   (g$make-i/o-invalid-position-error$5950$UGjMA
     g$make-i/o-invalid-position-error$6030$UGjMA
     (record-constructor g$6777$5948$UGjMA))
   (g$6774$5951$UGjMA
     g$6774$6031$UGjMA
     (record-accessor g$6776$5946$UGjMA '0))
   (g$i/o-invalid-position-error?$5952$UGjMA
     g$i/o-invalid-position-error?$6032$UGjMA
     (condition-predicate g$6776$5946$UGjMA))
   (g$i/o-error-position$5953$UGjMA
     g$i/o-error-position$6033$UGjMA
     (condition-accessor g$6776$5946$UGjMA g$6774$5951$UGjMA))
   (g$6793$5954$UGjMA
     g$6793$6034$UGjMA
     (make-record-type-descriptor
       '&i/o-filename
       g$6733$5928$UGjMA
       'g$6796$UGjMA
       '#f
       '#f
       '#((immutable filename))))
   (g$6795$5955$UGjMA g$6795$6035$UGjMA '#f)
   (g$6794$5956$UGjMA
     g$6794$6036$UGjMA
     (make-record-constructor-descriptor
       g$6793$5954$UGjMA
       g$6734$5930$UGjMA
       g$6795$5955$UGjMA))
   (g$6792$5957$UGjMA
     g$6792$6037$UGjMA
     (record-predicate g$6793$5954$UGjMA))
   (g$make-i/o-filename-error$5958$UGjMA
     g$make-i/o-filename-error$6038$UGjMA
     (record-constructor g$6794$5956$UGjMA))
   (g$6791$5959$UGjMA
     g$6791$6039$UGjMA
     (record-accessor g$6793$5954$UGjMA '0))
   (g$i/o-filename-error?$5960$UGjMA
     g$i/o-filename-error?$6040$UGjMA
     (condition-predicate g$6793$5954$UGjMA))
   (g$i/o-error-filename$5961$UGjMA
     g$i/o-error-filename$6041$UGjMA
     (condition-accessor g$6793$5954$UGjMA g$6791$5959$UGjMA))
   (g$6809$5962$UGjMA
     g$6809$6042$UGjMA
     (make-record-type-descriptor
       '&i/o-file-protection
       g$6733$5928$UGjMA
       'g$6812$UGjMA
       '#f
       '#f
       '#()))
   (g$6811$5963$UGjMA g$6811$6043$UGjMA '#f)
   (g$6810$5964$UGjMA
     g$6810$6044$UGjMA
     (make-record-constructor-descriptor
       g$6809$5962$UGjMA
       g$6734$5930$UGjMA
       g$6811$5963$UGjMA))
   (g$6808$5965$UGjMA
     g$6808$6045$UGjMA
     (record-predicate g$6809$5962$UGjMA))
   (g$make-i/o-file-protection-error$5966$UGjMA
     g$make-i/o-file-protection-error$6046$UGjMA
     (record-constructor g$6810$5964$UGjMA))
   (g$i/o-file-protection-error?$5967$UGjMA
     g$i/o-file-protection-error?$6047$UGjMA
     (condition-predicate g$6809$5962$UGjMA))
   (g$6823$5968$UGjMA
     g$6823$6048$UGjMA
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$6809$5962$UGjMA
       'g$6826$UGjMA
       '#f
       '#f
       '#()))
   (g$6825$5969$UGjMA g$6825$6049$UGjMA '#f)
   (g$6824$5970$UGjMA
     g$6824$6050$UGjMA
     (make-record-constructor-descriptor
       g$6823$5968$UGjMA
       g$6810$5964$UGjMA
       g$6825$5969$UGjMA))
   (g$6822$5971$UGjMA
     g$6822$6051$UGjMA
     (record-predicate g$6823$5968$UGjMA))
   (g$make-i/o-file-is-read-only-error$5972$UGjMA
     g$make-i/o-file-is-read-only-error$6052$UGjMA
     (record-constructor g$6824$5970$UGjMA))
   (g$i/o-file-is-read-only-error?$5973$UGjMA
     g$i/o-file-is-read-only-error?$6053$UGjMA
     (condition-predicate g$6823$5968$UGjMA))
   (g$6837$5974$UGjMA
     g$6837$6054$UGjMA
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$6793$5954$UGjMA
       'g$6840$UGjMA
       '#f
       '#f
       '#()))
   (g$6839$5975$UGjMA g$6839$6055$UGjMA '#f)
   (g$6838$5976$UGjMA
     g$6838$6056$UGjMA
     (make-record-constructor-descriptor
       g$6837$5974$UGjMA
       g$6794$5956$UGjMA
       g$6839$5975$UGjMA))
   (g$6836$5977$UGjMA
     g$6836$6057$UGjMA
     (record-predicate g$6837$5974$UGjMA))
   (g$make-i/o-file-already-exists-error$5978$UGjMA
     g$make-i/o-file-already-exists-error$6058$UGjMA
     (record-constructor g$6838$5976$UGjMA))
   (g$i/o-file-already-exists-error?$5979$UGjMA
     g$i/o-file-already-exists-error?$6059$UGjMA
     (condition-predicate g$6837$5974$UGjMA))
   (g$6851$5980$UGjMA
     g$6851$6060$UGjMA
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$6793$5954$UGjMA
       'g$6854$UGjMA
       '#f
       '#f
       '#()))
   (g$6853$5981$UGjMA g$6853$6061$UGjMA '#f)
   (g$6852$5982$UGjMA
     g$6852$6062$UGjMA
     (make-record-constructor-descriptor
       g$6851$5980$UGjMA
       g$6794$5956$UGjMA
       g$6853$5981$UGjMA))
   (g$6850$5983$UGjMA
     g$6850$6063$UGjMA
     (record-predicate g$6851$5980$UGjMA))
   (g$make-i/o-file-does-not-exist-error$5984$UGjMA
     g$make-i/o-file-does-not-exist-error$6064$UGjMA
     (record-constructor g$6852$5982$UGjMA))
   (g$i/o-file-does-not-exist-error?$5985$UGjMA
     g$i/o-file-does-not-exist-error?$6065$UGjMA
     (condition-predicate g$6851$5980$UGjMA))
   (g$6866$5986$UGjMA
     g$6866$6066$UGjMA
     (make-record-type-descriptor
       '&i/o-port
       g$6733$5928$UGjMA
       'g$6869$UGjMA
       '#f
       '#f
       '#((immutable port))))
   (g$6868$5987$UGjMA g$6868$6067$UGjMA '#f)
   (g$6867$5988$UGjMA
     g$6867$6068$UGjMA
     (make-record-constructor-descriptor
       g$6866$5986$UGjMA
       g$6734$5930$UGjMA
       g$6868$5987$UGjMA))
   (g$6865$5989$UGjMA
     g$6865$6069$UGjMA
     (record-predicate g$6866$5986$UGjMA))
   (g$make-i/o-port-error$5990$UGjMA
     g$make-i/o-port-error$6070$UGjMA
     (record-constructor g$6867$5988$UGjMA))
   (g$6864$5991$UGjMA
     g$6864$6071$UGjMA
     (record-accessor g$6866$5986$UGjMA '0))
   (g$i/o-port-error?$5992$UGjMA
     g$i/o-port-error?$6072$UGjMA
     (condition-predicate g$6866$5986$UGjMA))
   (g$i/o-error-port$5993$UGjMA
     g$i/o-error-port$6073$UGjMA
     (condition-accessor g$6866$5986$UGjMA g$6864$5991$UGjMA))
   (g$6882$5994$UGjMA
     g$6882$6074$UGjMA
     (make-record-type-descriptor
       '&i/o-decoding
       g$6866$5986$UGjMA
       'g$6885$UGjMA
       '#f
       '#f
       '#()))
   (g$6884$5995$UGjMA g$6884$6075$UGjMA '#f)
   (g$6883$5996$UGjMA
     g$6883$6076$UGjMA
     (make-record-constructor-descriptor
       g$6882$5994$UGjMA
       g$6867$5988$UGjMA
       g$6884$5995$UGjMA))
   (g$6881$5997$UGjMA
     g$6881$6077$UGjMA
     (record-predicate g$6882$5994$UGjMA))
   (g$make-i/o-decoding-error$5998$UGjMA
     g$make-i/o-decoding-error$6078$UGjMA
     (record-constructor g$6883$5996$UGjMA))
   (g$i/o-decoding-error?$5999$UGjMA
     g$i/o-decoding-error?$6079$UGjMA
     (condition-predicate g$6882$5994$UGjMA))
   (g$6897$6000$UGjMA
     g$6897$6080$UGjMA
     (make-record-type-descriptor
       '&i/o-encoding
       g$6866$5986$UGjMA
       'g$6900$UGjMA
       '#f
       '#f
       '#((immutable char))))
   (g$6899$6001$UGjMA g$6899$6081$UGjMA '#f)
   (g$6898$6002$UGjMA
     g$6898$6082$UGjMA
     (make-record-constructor-descriptor
       g$6897$6000$UGjMA
       g$6867$5988$UGjMA
       g$6899$6001$UGjMA))
   (g$6896$6003$UGjMA
     g$6896$6083$UGjMA
     (record-predicate g$6897$6000$UGjMA))
   (g$make-i/o-encoding-error$6004$UGjMA
     g$make-i/o-encoding-error$6084$UGjMA
     (record-constructor g$6898$6002$UGjMA))
   (g$6895$6005$UGjMA
     g$6895$6085$UGjMA
     (record-accessor g$6897$6000$UGjMA '0))
   (g$i/o-encoding-error?$6006$UGjMA
     g$i/o-encoding-error?$6086$UGjMA
     (condition-predicate g$6897$6000$UGjMA))
   (g$i/o-encoding-error-char$6007$UGjMA
     g$i/o-encoding-error-char$6087$UGjMA
     (condition-accessor g$6897$6000$UGjMA g$6895$6005$UGjMA)))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$get-output-string$6088$UGjMA
     g$get-output-string$6093$UGjMA
     (case-lambda
       ((g$port$6091$UGjMA)
        (clr-call-internal
          'system.io.stringwriter
          'tostring
          g$port$6091$UGjMA))))
   (g$open-output-string$6089$UGjMA
     g$open-output-string$6094$UGjMA
     (case-lambda (() (clr-new-internal 'system.io.stringwriter))))
   (g$open-string-output-port$6090$UGjMA
     g$open-string-output-port$6095$UGjMA
     (case-lambda
       (()
        ((case-lambda
           ((g$p$6092$UGjMA)
            (values
              g$p$6092$UGjMA
              (case-lambda
                (() (g$get-output-string$6088$UGjMA g$p$6092$UGjMA))))))
         (g$open-output-string$6089$UGjMA))))))
  (void))

(library-letrec* (ironscheme io simple) () (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$enummap$6096$UGjMA
     g$enummap$6221$UGjMA
     (g$make-eq-hashtable$5158$UGjMA))
   (g$enumordermap$6097$UGjMA
     g$enumordermap$6222$UGjMA
     (g$make-eq-hashtable$5158$UGjMA))
   (g$rcdmap$6098$UGjMA
     g$rcdmap$6223$UGjMA
     (g$make-eq-hashtable$5158$UGjMA))
   (g$6926$6099$UGjMA
     g$6926$6224$UGjMA
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value))))
   (g$6928$6100$UGjMA g$6928$6225$UGjMA '#f)
   (g$6927$6101$UGjMA
     g$6927$6226$UGjMA
     (make-record-constructor-descriptor
       g$6926$6099$UGjMA
       '#f
       g$6928$6100$UGjMA))
   (g$enum?$6102$UGjMA
     g$enum?$6227$UGjMA
     (record-predicate g$6926$6099$UGjMA))
   (g$make-enum$6103$UGjMA
     g$make-enum$6228$UGjMA
     (record-constructor g$6927$6101$UGjMA))
   (g$enum-value$6104$UGjMA
     g$enum-value$6229$UGjMA
     (record-accessor g$6926$6099$UGjMA '0))
   (g$get-symbols$6113$UGjMA
     g$get-symbols$6230$UGjMA
     (case-lambda
       ((g$rtd$6131$UGjMA)
        (g$hashtable-ref$5161$UGjMA
          g$enumordermap$6097$UGjMA
          g$rtd$6131$UGjMA
          '#f))))
   (g$get-value$6114$UGjMA
     g$get-value$6231$UGjMA
     (case-lambda
       ((g$rtd$6132$UGjMA g$s$6133$UGjMA)
        (g$hashtable-ref$5161$UGjMA
          (g$hashtable-ref$5161$UGjMA g$enummap$6096$UGjMA g$rtd$6132$UGjMA '#f)
          g$s$6133$UGjMA
          '#f))))
   (g$construct$6115$UGjMA
     g$construct$6232$UGjMA
     (case-lambda
       ((g$rtd$6134$UGjMA g$value$6135$UGjMA)
        ((record-constructor
           (g$hashtable-ref$5161$UGjMA
             g$rcdmap$6098$UGjMA
             g$rtd$6134$UGjMA
             '#f))
         g$value$6135$UGjMA))))
   (g$assert-enum$6116$UGjMA
     g$assert-enum$6233$UGjMA
     (case-lambda
       ((g$who$6136$UGjMA g$enumset$6137$UGjMA)
        (if (g$enum?$6102$UGjMA g$enumset$6137$UGjMA)
          (void)
          (assertion-violation
            g$who$6136$UGjMA
            '"not an enumeration"
            g$enumset$6137$UGjMA)))))
   (g$distinct$6117$UGjMA
     g$distinct$6234$UGjMA
     (case-lambda
       ((g$symbols$6138$UGjMA)
        ((case-lambda
           ((g$ht$6139$UGjMA)
            ((letrec ((g$f$6140$UGjMA
                        (case-lambda
                          ((g$s$6141$UGjMA g$a$6142$UGjMA)
                           (if (null? g$s$6141$UGjMA)
                             (reverse! g$a$6142$UGjMA)
                             (if (g$hashtable-contains?$5164$UGjMA
                                   g$ht$6139$UGjMA
                                   (car g$s$6141$UGjMA))
                               (g$f$6140$UGjMA
                                 (cdr g$s$6141$UGjMA)
                                 g$a$6142$UGjMA)
                               (begin
                                 (g$hashtable-set!$5162$UGjMA
                                   g$ht$6139$UGjMA
                                   (car g$s$6141$UGjMA)
                                   '#t)
                                 (g$f$6140$UGjMA
                                   (cdr g$s$6141$UGjMA)
                                   (cons
                                     (car g$s$6141$UGjMA)
                                     g$a$6142$UGjMA)))))))))
               g$f$6140$UGjMA)
             g$symbols$6138$UGjMA
             '())))
         (g$make-eq-hashtable$5158$UGjMA)))))
   (g$make-enumeration$6118$UGjMA
     g$make-enumeration$6235$UGjMA
     (case-lambda
       ((g$symbols$6143$UGjMA)
        (begin
          (if (g$for-all$5365$UGjMA symbol? g$symbols$6143$UGjMA)
            (void)
            (assertion-violation
              'make-enumeration
              '"not a list of symbols"
              g$symbols$6143$UGjMA))
          (call-with-values
            (case-lambda
              (()
               (letrec* ((g$6991$6144$UGjMA
                           (make-record-type-descriptor
                             'g$6990$UGjMA
                             g$6926$6099$UGjMA
                             '#f
                             '#t
                             '#f
                             '#()))
                         (g$6993$6145$UGjMA '#f)
                         (g$6992$6146$UGjMA
                           (make-record-constructor-descriptor
                             g$6991$6144$UGjMA
                             g$6927$6101$UGjMA
                             g$6993$6145$UGjMA))
                         (g$6990$6147$UGjMA
                           (record-predicate g$6991$6144$UGjMA))
                         (g$6990$6148$UGjMA
                           (record-constructor g$6992$6146$UGjMA)))
                 (begin
                   (make-record-printer
                     'g$6990$UGjMA
                     (case-lambda
                       ((g$x$6149$UGjMA g$p$6150$UGjMA)
                        (g$fprintf$6272$UGjMA
                          g$p$6150$UGjMA
                          '"#[enum-set ~a]"
                          (g$enum-set->list$6122$UGjMA g$x$6149$UGjMA)))))
                   (values g$6991$6144$UGjMA g$6992$6146$UGjMA)))))
            (case-lambda
              ((g$rtd$6151$UGjMA g$rcd$6152$UGjMA)
               ((case-lambda
                  ((g$s$6153$UGjMA g$mask$6154$UGjMA g$intmap$6155$UGjMA)
                   (begin
                     (g$hashtable-set!$5162$UGjMA
                       g$rcdmap$6098$UGjMA
                       g$rtd$6151$UGjMA
                       g$rcd$6152$UGjMA)
                     (g$hashtable-set!$5162$UGjMA
                       g$enumordermap$6097$UGjMA
                       g$rtd$6151$UGjMA
                       g$s$6153$UGjMA)
                     (for-each
                       (case-lambda
                         ((g$e$6156$UGjMA)
                          (begin
                            (g$hashtable-set!$5162$UGjMA
                              g$intmap$6155$UGjMA
                              g$e$6156$UGjMA
                              g$mask$6154$UGjMA)
                            (set! g$mask$6154$UGjMA
                              (g$bitwise-arithmetic-shift-left$5846$UGjMA
                                g$mask$6154$UGjMA
                                '1)))))
                       g$s$6153$UGjMA)
                     (g$hashtable-set!$5162$UGjMA
                       g$enummap$6096$UGjMA
                       g$rtd$6151$UGjMA
                       g$intmap$6155$UGjMA)
                     ((record-constructor g$rcd$6152$UGjMA)
                      (- (g$bitwise-arithmetic-shift-left$5846$UGjMA
                           '1
                           (length g$s$6153$UGjMA))
                         '1)))))
                (g$distinct$6117$UGjMA g$symbols$6143$UGjMA)
                '1
                (g$make-eq-hashtable$5158$UGjMA)))))))))
   (g$enum-set-universe$6119$UGjMA
     g$enum-set-universe$6236$UGjMA
     (case-lambda
       ((g$enumset$6157$UGjMA)
        (begin
          (g$assert-enum$6116$UGjMA 'enum-set-universe g$enumset$6157$UGjMA)
          ((case-lambda
             ((g$rtd$6158$UGjMA)
              ((case-lambda
                 ((g$count$6159$UGjMA)
                  ((case-lambda
                     (()
                      (g$construct$6115$UGjMA
                        g$rtd$6158$UGjMA
                        (- (g$bitwise-arithmetic-shift-left$5846$UGjMA
                             '1
                             g$count$6159$UGjMA)
                           '1)))))))
               (length (g$get-symbols$6113$UGjMA g$rtd$6158$UGjMA)))))
           (record-rtd g$enumset$6157$UGjMA))))))
   (g$enum-set-indexer$6120$UGjMA
     g$enum-set-indexer$6237$UGjMA
     (case-lambda
       ((g$enumset$6160$UGjMA)
        (begin
          (g$assert-enum$6116$UGjMA 'enum-set-indexer g$enumset$6160$UGjMA)
          (case-lambda
            ((g$symbol$6161$UGjMA)
             ((letrec ((g$f$6162$UGjMA
                         (case-lambda
                           ((g$s$6163$UGjMA g$i$6164$UGjMA)
                            (if (null? g$s$6163$UGjMA)
                              '#f
                              (if (eq? (car g$s$6163$UGjMA) g$symbol$6161$UGjMA)
                                g$i$6164$UGjMA
                                (g$f$6162$UGjMA
                                  (cdr g$s$6163$UGjMA)
                                  (+ g$i$6164$UGjMA '1))))))))
                g$f$6162$UGjMA)
              (g$get-symbols$6113$UGjMA (record-rtd g$enumset$6160$UGjMA))
              '0)))))))
   (g$enum-set-constructor$6121$UGjMA
     g$enum-set-constructor$6238$UGjMA
     (case-lambda
       ((g$enumset$6165$UGjMA)
        (begin
          (g$assert-enum$6116$UGjMA 'enum-set-constructor g$enumset$6165$UGjMA)
          ((case-lambda
             ((g$rtd$6166$UGjMA)
              (case-lambda
                ((g$symbols$6167$UGjMA)
                 ((letrec ((g$f$6168$UGjMA
                             (case-lambda
                               ((g$v$6169$UGjMA g$s$6170$UGjMA)
                                (if (null? g$s$6170$UGjMA)
                                  (g$construct$6115$UGjMA
                                    g$rtd$6166$UGjMA
                                    g$v$6169$UGjMA)
                                  (g$f$6168$UGjMA
                                    (bitwise-ior
                                      g$v$6169$UGjMA
                                      (g$get-value$6114$UGjMA
                                        g$rtd$6166$UGjMA
                                        (car g$s$6170$UGjMA)))
                                    (cdr g$s$6170$UGjMA)))))))
                    g$f$6168$UGjMA)
                  '0
                  g$symbols$6167$UGjMA)))))
           (record-rtd g$enumset$6165$UGjMA))))))
   (g$enum-set->list$6122$UGjMA
     g$enum-set->list$6239$UGjMA
     (case-lambda
       ((g$enumset$6171$UGjMA)
        (begin
          (g$assert-enum$6116$UGjMA 'enum-set->list g$enumset$6171$UGjMA)
          ((case-lambda
             ((g$rtd$6172$UGjMA g$value$6173$UGjMA)
              ((letrec ((g$f$6174$UGjMA
                          (case-lambda
                            ((g$s$6175$UGjMA g$l$6176$UGjMA)
                             (if (null? g$s$6175$UGjMA)
                               (reverse! g$l$6176$UGjMA)
                               (if (zero?
                                     (bitwise-and
                                       (g$get-value$6114$UGjMA
                                         g$rtd$6172$UGjMA
                                         (car g$s$6175$UGjMA))
                                       g$value$6173$UGjMA))
                                 (g$f$6174$UGjMA
                                   (cdr g$s$6175$UGjMA)
                                   g$l$6176$UGjMA)
                                 (g$f$6174$UGjMA
                                   (cdr g$s$6175$UGjMA)
                                   (cons
                                     (car g$s$6175$UGjMA)
                                     g$l$6176$UGjMA))))))))
                 g$f$6174$UGjMA)
               (g$get-symbols$6113$UGjMA g$rtd$6172$UGjMA)
               '())))
           (record-rtd g$enumset$6171$UGjMA)
           (g$enum-value$6104$UGjMA g$enumset$6171$UGjMA))))))
   (g$enum-set-member?$6123$UGjMA
     g$enum-set-member?$6240$UGjMA
     (case-lambda
       ((g$symbol$6177$UGjMA g$enumset$6178$UGjMA)
        (begin
          (if (symbol? g$symbol$6177$UGjMA)
            (void)
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$6177$UGjMA))
          (g$assert-enum$6116$UGjMA 'enum-set-member? g$enumset$6178$UGjMA)
          (not (zero?
                 (bitwise-and
                   (g$get-value$6114$UGjMA
                     (record-rtd g$enumset$6178$UGjMA)
                     g$symbol$6177$UGjMA)
                   (g$enum-value$6104$UGjMA g$enumset$6178$UGjMA))))))))
   (g$enum-set-subset?$6124$UGjMA
     g$enum-set-subset?$6241$UGjMA
     (case-lambda
       ((g$enumset1$6179$UGjMA g$enumset2$6180$UGjMA)
        (begin
          (g$assert-enum$6116$UGjMA 'enum-set-subset? g$enumset1$6179$UGjMA)
          (g$assert-enum$6116$UGjMA 'enum-set-subset? g$enumset2$6180$UGjMA)
          ((case-lambda
             ((g$v1$6181$UGjMA
                g$v2$6182$UGjMA
                g$rtd1$6183$UGjMA
                g$rtd2$6184$UGjMA)
              (if (eq? g$rtd1$6183$UGjMA g$rtd2$6184$UGjMA)
                (= (bitwise-and g$v1$6181$UGjMA g$v2$6182$UGjMA)
                   g$v1$6181$UGjMA)
                ((letrec ((g$f$6185$UGjMA
                            (case-lambda
                              ((g$s$6186$UGjMA)
                               (if (null? g$s$6186$UGjMA)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$6187$UGjMA g$v2*$6188$UGjMA)
                                     (if g$v2*$6188$UGjMA
                                       ((case-lambda
                                          ((g$has1$6189$UGjMA g$has2$6190$UGjMA)
                                           (if (if g$has1$6189$UGjMA
                                                 (begin
                                                   '#f
                                                   (not g$has2$6190$UGjMA))
                                                 '#f)
                                             '#f
                                             (g$f$6185$UGjMA
                                               (cdr g$s$6186$UGjMA)))))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v1$6181$UGjMA
                                                 g$v1*$6187$UGjMA)))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v2$6182$UGjMA
                                                 g$v2*$6188$UGjMA))))
                                       '#f)))
                                  (g$get-value$6114$UGjMA
                                    g$rtd1$6183$UGjMA
                                    (car g$s$6186$UGjMA))
                                  (g$get-value$6114$UGjMA
                                    g$rtd2$6184$UGjMA
                                    (car g$s$6186$UGjMA))))))))
                   g$f$6185$UGjMA)
                 (g$get-symbols$6113$UGjMA g$rtd1$6183$UGjMA)))))
           (g$enum-value$6104$UGjMA g$enumset1$6179$UGjMA)
           (g$enum-value$6104$UGjMA g$enumset2$6180$UGjMA)
           (record-rtd g$enumset1$6179$UGjMA)
           (record-rtd g$enumset2$6180$UGjMA))))))
   (g$enum-set=?$6125$UGjMA
     g$enum-set=?$6242$UGjMA
     (case-lambda
       ((g$enumset1$6191$UGjMA g$enumset2$6192$UGjMA)
        (begin
          (g$assert-enum$6116$UGjMA 'enum-set=? g$enumset1$6191$UGjMA)
          (g$assert-enum$6116$UGjMA 'enum-set=? g$enumset2$6192$UGjMA)
          (if (g$enum-set-subset?$6124$UGjMA
                g$enumset1$6191$UGjMA
                g$enumset2$6192$UGjMA)
            (begin
              '#f
              (g$enum-set-subset?$6124$UGjMA
                g$enumset2$6192$UGjMA
                g$enumset1$6191$UGjMA))
            '#f)))))
   (g$enum-set-union$6126$UGjMA
     g$enum-set-union$6243$UGjMA
     (case-lambda
       ((g$enumset1$6193$UGjMA g$enumset2$6194$UGjMA)
        (begin
          (g$assert-enum$6116$UGjMA 'enum-set-union g$enumset1$6193$UGjMA)
          (g$assert-enum$6116$UGjMA 'enum-set-union g$enumset2$6194$UGjMA)
          ((case-lambda
             ((g$v1$6195$UGjMA
                g$v2$6196$UGjMA
                g$rtd1$6197$UGjMA
                g$rtd2$6198$UGjMA)
              (if (eq? g$rtd1$6197$UGjMA g$rtd2$6198$UGjMA)
                (g$construct$6115$UGjMA
                  g$rtd1$6197$UGjMA
                  (bitwise-ior g$v1$6195$UGjMA g$v2$6196$UGjMA))
                '#f)))
           (g$enum-value$6104$UGjMA g$enumset1$6193$UGjMA)
           (g$enum-value$6104$UGjMA g$enumset2$6194$UGjMA)
           (record-rtd g$enumset1$6193$UGjMA)
           (record-rtd g$enumset2$6194$UGjMA))))))
   (g$enum-set-intersection$6127$UGjMA
     g$enum-set-intersection$6244$UGjMA
     (case-lambda
       ((g$enumset1$6199$UGjMA g$enumset2$6200$UGjMA)
        (begin
          (g$assert-enum$6116$UGjMA
            'enum-set-intersection
            g$enumset1$6199$UGjMA)
          (g$assert-enum$6116$UGjMA
            'enum-set-intersection
            g$enumset2$6200$UGjMA)
          ((case-lambda
             ((g$v1$6201$UGjMA
                g$v2$6202$UGjMA
                g$rtd1$6203$UGjMA
                g$rtd2$6204$UGjMA)
              (if (eq? g$rtd1$6203$UGjMA g$rtd2$6204$UGjMA)
                (g$construct$6115$UGjMA
                  g$rtd1$6203$UGjMA
                  (bitwise-and g$v1$6201$UGjMA g$v2$6202$UGjMA))
                '#f)))
           (g$enum-value$6104$UGjMA g$enumset1$6199$UGjMA)
           (g$enum-value$6104$UGjMA g$enumset2$6200$UGjMA)
           (record-rtd g$enumset1$6199$UGjMA)
           (record-rtd g$enumset2$6200$UGjMA))))))
   (g$enum-set-difference$6128$UGjMA
     g$enum-set-difference$6245$UGjMA
     (case-lambda
       ((g$enumset1$6205$UGjMA g$enumset2$6206$UGjMA)
        (begin
          (g$assert-enum$6116$UGjMA 'enum-set-difference g$enumset1$6205$UGjMA)
          (g$assert-enum$6116$UGjMA 'enum-set-difference g$enumset2$6206$UGjMA)
          ((case-lambda
             ((g$v1$6207$UGjMA
                g$v2$6208$UGjMA
                g$rtd1$6209$UGjMA
                g$rtd2$6210$UGjMA)
              (if (eq? g$rtd1$6209$UGjMA g$rtd2$6210$UGjMA)
                (g$construct$6115$UGjMA
                  g$rtd1$6209$UGjMA
                  (bitwise-xor g$v1$6207$UGjMA g$v2$6208$UGjMA))
                '#f)))
           (g$enum-value$6104$UGjMA g$enumset1$6205$UGjMA)
           (g$enum-value$6104$UGjMA g$enumset2$6206$UGjMA)
           (record-rtd g$enumset1$6205$UGjMA)
           (record-rtd g$enumset2$6206$UGjMA))))))
   (g$enum-set-complement$6129$UGjMA
     g$enum-set-complement$6246$UGjMA
     (case-lambda
       ((g$enumset$6211$UGjMA)
        (begin
          (g$assert-enum$6116$UGjMA 'enum-set-complement g$enumset$6211$UGjMA)
          (g$enum-set-difference$6128$UGjMA
            g$enumset$6211$UGjMA
            (g$enum-set-universe$6119$UGjMA g$enumset$6211$UGjMA))))))
   (g$enum-set-projection$6130$UGjMA
     g$enum-set-projection$6247$UGjMA
     (case-lambda
       ((g$enumset1$6212$UGjMA g$enumset2$6213$UGjMA)
        (begin
          (g$assert-enum$6116$UGjMA 'enum-set-projection g$enumset1$6212$UGjMA)
          (g$assert-enum$6116$UGjMA 'enum-set-projection g$enumset2$6213$UGjMA)
          ((case-lambda
             ((g$v1$6214$UGjMA g$rtd1$6215$UGjMA g$rtd2$6216$UGjMA)
              ((letrec ((g$f$6217$UGjMA
                          (case-lambda
                            ((g$s$6218$UGjMA g$v$6219$UGjMA)
                             (if (null? g$s$6218$UGjMA)
                               (g$construct$6115$UGjMA
                                 g$rtd2$6216$UGjMA
                                 g$v$6219$UGjMA)
                               (if (zero?
                                     (bitwise-and
                                       g$v1$6214$UGjMA
                                       (g$get-value$6114$UGjMA
                                         g$rtd1$6215$UGjMA
                                         (car g$s$6218$UGjMA))))
                                 (g$f$6217$UGjMA
                                   (cdr g$s$6218$UGjMA)
                                   g$v$6219$UGjMA)
                                 ((case-lambda
                                    ((g$v2$6220$UGjMA)
                                     (if (g$v2$6220$UGjMA)
                                       (g$f$6217$UGjMA
                                         (cdr g$s$6218$UGjMA)
                                         (bitwise-ior
                                           g$v$6219$UGjMA
                                           g$v2$6220$UGjMA))
                                       (g$f$6217$UGjMA
                                         (cdr g$s$6218$UGjMA)
                                         g$v$6219$UGjMA))))
                                  (g$get-value$6114$UGjMA
                                    g$rtd2$6216$UGjMA
                                    (car g$s$6218$UGjMA)))))))))
                 g$f$6217$UGjMA)
               (g$get-symbols$6113$UGjMA g$rtd1$6215$UGjMA)
               '0)))
           (g$enum-value$6104$UGjMA g$enumset1$6212$UGjMA)
           (record-rtd g$enumset1$6212$UGjMA)
           (record-rtd g$enumset2$6213$UGjMA)))))))
  (void))

(library-letrec* (ironscheme format)
  ((g$dofmt$6248$UGjMA
     g$dofmt$6270$UGjMA
     (case-lambda
       ((g$p$6252$UGjMA g$cntl$6253$UGjMA g$args$6254$UGjMA)
        ((case-lambda
           ((g$nmax$6255$UGjMA)
            ((letrec ((g$loop$6256$UGjMA
                        (case-lambda
                          ((g$n$6257$UGjMA g$a$6258$UGjMA)
                           (if (fx<=? g$n$6257$UGjMA g$nmax$6255$UGjMA)
                             ((case-lambda
                                ((g$c$6259$UGjMA)
                                 (if (if (char=? g$c$6259$UGjMA '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$6257$UGjMA
                                           g$nmax$6255$UGjMA))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$6260$UGjMA)
                                       (if (eqv? g$t$6260$UGjMA '#\a)
                                         (begin
                                           (display
                                             (car g$a$6258$UGjMA)
                                             g$p$6252$UGjMA)
                                           (g$loop$6256$UGjMA
                                             (fx+ g$n$6257$UGjMA '2)
                                             (cdr g$a$6258$UGjMA)))
                                         (if (eqv? g$t$6260$UGjMA '#\s)
                                           (begin
                                             (write
                                               (car g$a$6258$UGjMA)
                                               g$p$6252$UGjMA)
                                             (g$loop$6256$UGjMA
                                               (fx+ g$n$6257$UGjMA '2)
                                               (cdr g$a$6258$UGjMA)))
                                           (if (eqv? g$t$6260$UGjMA '#\b)
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$6258$UGjMA)
                                                   '2)
                                                 g$p$6252$UGjMA)
                                               (g$loop$6256$UGjMA
                                                 (fx+ g$n$6257$UGjMA '2)
                                                 (cdr g$a$6258$UGjMA)))
                                             (if (eqv? g$t$6260$UGjMA '#\o)
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$6258$UGjMA)
                                                     '8)
                                                   g$p$6252$UGjMA)
                                                 (g$loop$6256$UGjMA
                                                   (fx+ g$n$6257$UGjMA '2)
                                                   (cdr g$a$6258$UGjMA)))
                                               (if (eqv? g$t$6260$UGjMA '#\x)
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$6258$UGjMA)
                                                       '16)
                                                     g$p$6252$UGjMA)
                                                   (g$loop$6256$UGjMA
                                                     (fx+ g$n$6257$UGjMA '2)
                                                     (cdr g$a$6258$UGjMA)))
                                                 (if (eqv? g$t$6260$UGjMA '#\d)
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$6258$UGjMA)
                                                         '10)
                                                       g$p$6252$UGjMA)
                                                     (g$loop$6256$UGjMA
                                                       (fx+ g$n$6257$UGjMA '2)
                                                       (cdr g$a$6258$UGjMA)))
                                                   (if (eqv?
                                                         g$t$6260$UGjMA
                                                         '#\~)
                                                     (begin
                                                       (write-char
                                                         '#\~
                                                         g$p$6252$UGjMA)
                                                       (g$loop$6256$UGjMA
                                                         (fx+ g$n$6257$UGjMA '2)
                                                         g$a$6258$UGjMA))
                                                     (begin
                                                       (write-char
                                                         g$c$6259$UGjMA
                                                         g$p$6252$UGjMA)
                                                       (g$loop$6256$UGjMA
                                                         (fx+ g$n$6257$UGjMA '1)
                                                         g$a$6258$UGjMA)))))))))))
                                    (string-ref
                                      g$cntl$6253$UGjMA
                                      (fx+ g$n$6257$UGjMA '1)))
                                   (begin
                                     (write-char g$c$6259$UGjMA g$p$6252$UGjMA)
                                     (g$loop$6256$UGjMA
                                       (fx+ g$n$6257$UGjMA '1)
                                       g$a$6258$UGjMA)))))
                              (string-ref g$cntl$6253$UGjMA g$n$6257$UGjMA))
                             (void))))))
               g$loop$6256$UGjMA)
             '0
             g$args$6254$UGjMA)))
         (fx- (string-length g$cntl$6253$UGjMA) '1)))))
   (g$printf$6249$UGjMA
     g$printf$6271$UGjMA
     (case-lambda
       ((g$control$6261$UGjMA . g$args$6262$UGjMA)
        (g$dofmt$6248$UGjMA
          (current-output-port)
          g$control$6261$UGjMA
          g$args$6262$UGjMA))))
   (g$fprintf$6250$UGjMA
     g$fprintf$6272$UGjMA
     (case-lambda
       ((g$p$6263$UGjMA g$control$6264$UGjMA . g$args$6265$UGjMA)
        (g$dofmt$6248$UGjMA
          g$p$6263$UGjMA
          g$control$6264$UGjMA
          g$args$6265$UGjMA))))
   (g$format$6251$UGjMA
     g$format$6273$UGjMA
     (case-lambda
       ((g$control$6266$UGjMA . g$args$6267$UGjMA)
        (call-with-values
          g$open-string-output-port$6095$UGjMA
          (case-lambda
            ((g$p$6268$UGjMA g$c$6269$UGjMA)
             (begin
               (g$dofmt$6248$UGjMA
                 g$p$6268$UGjMA
                 g$control$6266$UGjMA
                 g$args$6267$UGjMA)
               (g$c$6269$UGjMA)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$6274$UGjMA
     g$make-traced-macro$6277$UGjMA
     (case-lambda
       ((g$name$6275$UGjMA g$x$6276$UGjMA)
        (if (procedure? g$x$6276$UGjMA)
          (make-traced-procedure
            g$name$6275$UGjMA
            g$x$6276$UGjMA
            g$syntax->datum$10926$UGjMA)
          (if (g$variable-transformer?$10754$UGjMA g$x$6276$UGjMA)
            (g$make-variable-transformer$10753$UGjMA
              (make-traced-procedure
                g$name$6275$UGjMA
                (g$variable-transformer-procedure$10755$UGjMA g$x$6276$UGjMA)
                g$syntax->datum$10926$UGjMA))
            g$x$6276$UGjMA))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$read-library-source-file$6278$UGjMA
     g$read-library-source-file$6356$UGjMA
     (case-lambda
       ((g$file-name$6348$UGjMA)
        (with-input-from-file g$file-name$6348$UGjMA read-annotated))))
   (g$make-parameter$6279$UGjMA
     g$make-parameter$6357$UGjMA
     (case-lambda
       ((g$x$6349$UGjMA)
        (g$make-parameter$6279$UGjMA
          g$x$6349$UGjMA
          (case-lambda ((g$x$6350$UGjMA) g$x$6350$UGjMA))))
       ((g$x$6351$UGjMA g$fender$6352$UGjMA)
        (begin
          (if (procedure? g$fender$6352$UGjMA)
            (void)
            (assertion-violation
              'assert
              '"assertion failed"
              '(procedure? fender)))
          ((case-lambda
             ((g$x$6353$UGjMA)
              (case-lambda
                (() g$x$6353$UGjMA)
                ((g$v$6354$UGjMA)
                 (set! g$x$6353$UGjMA (g$fender$6352$UGjMA g$v$6354$UGjMA))))))
           (g$fender$6352$UGjMA g$x$6351$UGjMA))))))
   (g$file-options-spec$6347$UGjMA
     g$file-options-spec$6358$UGjMA
     (case-lambda ((g$x$6355$UGjMA) g$x$6355$UGjMA))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$6555$UGjMA
     g$current-primitive-locations$6600$UGjMA
     (g$make-parameter$6357$UGjMA
       (case-lambda ((g$x$6561$UGjMA) '#f))
       (case-lambda
         ((g$p$6562$UGjMA)
          (begin
            (if (procedure? g$p$6562$UGjMA)
              (void)
              (assertion-violation 'assert '"assertion failed" '(procedure? p)))
            g$p$6562$UGjMA)))))
   (g$mutable?$6556$UGjMA
     g$mutable?$6601$UGjMA
     (case-lambda
       ((g$x$6563$UGjMA)
        (letrec* ((g$simple?$6564$UGjMA
                    (case-lambda
                      ((g$x$6565$UGjMA)
                       ((case-lambda
                          ((g$t$6566$UGjMA)
                           (if g$t$6566$UGjMA
                             g$t$6566$UGjMA
                             ((case-lambda
                                ((g$t$6567$UGjMA)
                                 (if g$t$6567$UGjMA
                                   g$t$6567$UGjMA
                                   ((case-lambda
                                      ((g$t$6568$UGjMA)
                                       (if g$t$6568$UGjMA
                                         g$t$6568$UGjMA
                                         ((case-lambda
                                            ((g$t$6569$UGjMA)
                                             (if g$t$6569$UGjMA
                                               g$t$6569$UGjMA
                                               ((case-lambda
                                                  ((g$t$6570$UGjMA)
                                                   (if g$t$6570$UGjMA
                                                     g$t$6570$UGjMA
                                                     ((case-lambda
                                                        ((g$t$6571$UGjMA)
                                                         (if g$t$6571$UGjMA
                                                           g$t$6571$UGjMA
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$6565$UGjMA)))))
                                                      (bytevector?
                                                        g$x$6565$UGjMA)))))
                                                (string? g$x$6565$UGjMA)))))
                                          (boolean? g$x$6565$UGjMA)))))
                                    (symbol? g$x$6565$UGjMA)))))
                              (char? g$x$6565$UGjMA)))))
                        (null? g$x$6565$UGjMA))))))
          (not (g$simple?$6564$UGjMA g$x$6563$UGjMA))))))
   (g$rewriter$6557$UGjMA
     g$rewriter$6602$UGjMA
     (case-lambda
       ((g$quote-hack?$6572$UGjMA)
        (letrec* ((g$f$6573$UGjMA
                    (case-lambda
                      ((g$x$6574$UGjMA)
                       (if (pair? g$x$6574$UGjMA)
                         ((case-lambda
                            ((g$t$6575$UGjMA)
                             (if (eqv? g$t$6575$UGjMA 'quote)
                               (if (if g$quote-hack?$6572$UGjMA
                                     (begin
                                       '#f
                                       (g$mutable?$6556$UGjMA
                                         (g$cadr$4896$UGjMA g$x$6574$UGjMA)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$6595$UGjMA)
                                     (begin
                                       (set-symbol-value!
                                         g$g$6595$UGjMA
                                         (g$cadr$4896$UGjMA g$x$6574$UGjMA))
                                       g$g$6595$UGjMA)))
                                  (gensym))
                                 g$x$6574$UGjMA)
                               (if (eqv? g$t$6575$UGjMA 'case-lambda)
                                 (cons
                                   'case-lambda
                                   (map (case-lambda
                                          ((g$x$6594$UGjMA)
                                           (cons
                                             (car g$x$6594$UGjMA)
                                             (map g$f$6573$UGjMA
                                                  (cdr g$x$6594$UGjMA)))))
                                        (cdr g$x$6574$UGjMA)))
                                 (if (eqv? g$t$6575$UGjMA 'lambda)
                                   (g$cons*$5367$UGjMA
                                     'lambda
                                     (g$cadr$4896$UGjMA g$x$6574$UGjMA)
                                     (map g$f$6573$UGjMA
                                          (g$cddr$4898$UGjMA g$x$6574$UGjMA)))
                                   (if (eqv? g$t$6575$UGjMA 'letrec)
                                     ((case-lambda
                                        ((g$bindings$6590$UGjMA
                                           g$body*$6591$UGjMA)
                                         ((case-lambda
                                            ((g$lhs*$6592$UGjMA
                                               g$rhs*$6593$UGjMA)
                                             (g$cons*$5367$UGjMA
                                               'letrec
                                               (map list
                                                    g$lhs*$6592$UGjMA
                                                    (map g$f$6573$UGjMA
                                                         g$rhs*$6593$UGjMA))
                                               (map g$f$6573$UGjMA
                                                    g$body*$6591$UGjMA))))
                                          (map car g$bindings$6590$UGjMA)
                                          (map g$cadr$4896$UGjMA
                                               g$bindings$6590$UGjMA))))
                                      (g$cadr$4896$UGjMA g$x$6574$UGjMA)
                                      (g$cddr$4898$UGjMA g$x$6574$UGjMA))
                                     (if (eqv? g$t$6575$UGjMA 'letrec*)
                                       ((case-lambda
                                          ((g$bindings$6586$UGjMA
                                             g$body*$6587$UGjMA)
                                           ((case-lambda
                                              ((g$lhs*$6588$UGjMA
                                                 g$rhs*$6589$UGjMA)
                                               (g$cons*$5367$UGjMA
                                                 'letrec*
                                                 (map list
                                                      g$lhs*$6588$UGjMA
                                                      (map g$f$6573$UGjMA
                                                           g$rhs*$6589$UGjMA))
                                                 (map g$f$6573$UGjMA
                                                      g$body*$6587$UGjMA))))
                                            (map car g$bindings$6586$UGjMA)
                                            (map g$cadr$4896$UGjMA
                                                 g$bindings$6586$UGjMA))))
                                        (g$cadr$4896$UGjMA g$x$6574$UGjMA)
                                        (g$cddr$4898$UGjMA g$x$6574$UGjMA))
                                       (if (eqv?
                                             g$t$6575$UGjMA
                                             'library-letrec*)
                                         ((case-lambda
                                            ((g$name$6579$UGjMA g$x$6580$UGjMA)
                                             ((case-lambda
                                                ((g$bindings$6581$UGjMA
                                                   g$body*$6582$UGjMA)
                                                 ((case-lambda
                                                    ((g$lhs*$6583$UGjMA
                                                       g$lhs**$6584$UGjMA
                                                       g$rhs*$6585$UGjMA)
                                                     (g$cons*$5367$UGjMA
                                                       'library-letrec*
                                                       g$name$6579$UGjMA
                                                       (map list
                                                            g$lhs*$6583$UGjMA
                                                            g$lhs**$6584$UGjMA
                                                            (map g$f$6573$UGjMA
                                                                 g$rhs*$6585$UGjMA))
                                                       (map g$f$6573$UGjMA
                                                            g$body*$6582$UGjMA))))
                                                  (map car
                                                       g$bindings$6581$UGjMA)
                                                  (map g$cadr$4896$UGjMA
                                                       g$bindings$6581$UGjMA)
                                                  (map g$caddr$4902$UGjMA
                                                       g$bindings$6581$UGjMA))))
                                              (g$cadr$4896$UGjMA g$x$6580$UGjMA)
                                              (g$cddr$4898$UGjMA
                                                g$x$6580$UGjMA))))
                                          (g$cadr$4896$UGjMA g$x$6574$UGjMA)
                                          (cdr g$x$6574$UGjMA))
                                         (if (eqv? g$t$6575$UGjMA 'begin)
                                           (cons
                                             'begin
                                             (map g$f$6573$UGjMA
                                                  (cdr g$x$6574$UGjMA)))
                                           (if (eqv? g$t$6575$UGjMA 'set!)
                                             (list
                                               'set!
                                               (g$cadr$4896$UGjMA
                                                 g$x$6574$UGjMA)
                                               (g$f$6573$UGjMA
                                                 (g$caddr$4902$UGjMA
                                                   g$x$6574$UGjMA)))
                                             (if (eqv?
                                                   g$t$6575$UGjMA
                                                   'primitive)
                                               ((case-lambda
                                                  ((g$op$6576$UGjMA)
                                                   ((case-lambda
                                                      ((g$t$6577$UGjMA)
                                                       (if g$t$6577$UGjMA
                                                         ((case-lambda
                                                            ((g$loc$6578$UGjMA)
                                                             g$loc$6578$UGjMA))
                                                          g$t$6577$UGjMA)
                                                         g$op$6576$UGjMA)))
                                                    ((g$current-primitive-locations$6555$UGjMA)
                                                     g$op$6576$UGjMA))))
                                                (g$cadr$4896$UGjMA
                                                  g$x$6574$UGjMA))
                                               (if (eqv? g$t$6575$UGjMA 'define)
                                                 g$x$6574$UGjMA
                                                 (if (list? g$x$6574$UGjMA)
                                                   (map g$f$6573$UGjMA
                                                        g$x$6574$UGjMA)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$6574$UGjMA
                                                     (list?
                                                       g$x$6574$UGjMA)))))))))))))))
                          (car g$x$6574$UGjMA))
                         g$x$6574$UGjMA)))))
          g$f$6573$UGjMA))))
   (g$expanded->core$6558$UGjMA
     g$expanded->core$6603$UGjMA
     (case-lambda
       ((g$x$6596$UGjMA) ((g$rewriter$6557$UGjMA '#t) g$x$6596$UGjMA))))
   (g$compile-core-expr$6559$UGjMA
     g$compile-core-expr$6604$UGjMA
     (case-lambda
       ((g$x$6597$UGjMA) ((g$rewriter$6557$UGjMA '#f) g$x$6597$UGjMA))))
   (g$compile-core-expr-to-port$6560$UGjMA
     g$compile-core-expr-to-port$6605$UGjMA
     (case-lambda
       ((g$x$6598$UGjMA g$p$6599$UGjMA)
        (g$pretty-print$6554$UGjMA
          ((g$rewriter$6557$UGjMA '#f) g$x$6598$UGjMA)
          g$p$6599$UGjMA)))))
  (void))

(library-letrec* (psyntax config) () (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$6644$UGjMA
     g$make-collection$6848$UGjMA
     (case-lambda
       (()
        ((case-lambda
           ((g$set$6705$UGjMA)
            (letrec* ((g$set-cons$6706$UGjMA
                        (case-lambda
                          ((g$x$6708$UGjMA g$ls$6709$UGjMA)
                           (if (memq g$x$6708$UGjMA g$ls$6709$UGjMA)
                             g$ls$6709$UGjMA
                             (cons g$x$6708$UGjMA g$ls$6709$UGjMA))))))
              (case-lambda
                (() g$set$6705$UGjMA)
                ((g$x$6707$UGjMA)
                 (set! g$set$6705$UGjMA
                   (g$set-cons$6706$UGjMA g$x$6707$UGjMA g$set$6705$UGjMA)))))))
         '()))))
   (g$current-library-collection$6645$UGjMA
     g$current-library-collection$6849$UGjMA
     (g$make-parameter$6357$UGjMA
       (g$make-collection$6644$UGjMA)
       (case-lambda
         ((g$x$6710$UGjMA)
          (begin
            (if (procedure? g$x$6710$UGjMA)
              (void)
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$6710$UGjMA))
            g$x$6710$UGjMA)))))
   (g$7485$6646$UGjMA
     g$7485$6850$UGjMA
     (make-record-type-descriptor
       'library
       '#f
       'g$7488$UGjMA
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$7487$6647$UGjMA g$7487$6851$UGjMA '#f)
   (g$7486$6648$UGjMA
     g$7486$6852$UGjMA
     (make-record-constructor-descriptor
       g$7485$6646$UGjMA
       '#f
       g$7487$6647$UGjMA))
   (g$library?$6649$UGjMA
     g$library?$6853$UGjMA
     (record-predicate g$7485$6646$UGjMA))
   (g$make-library$6650$UGjMA
     g$make-library$6854$UGjMA
     (record-constructor g$7486$6648$UGjMA))
   (g$library-id$6651$UGjMA
     g$library-id$6855$UGjMA
     (record-accessor g$7485$6646$UGjMA '0))
   (g$library-name$6652$UGjMA
     g$library-name$6856$UGjMA
     (record-accessor g$7485$6646$UGjMA '1))
   (g$library-version$6653$UGjMA
     g$library-version$6857$UGjMA
     (record-accessor g$7485$6646$UGjMA '2))
   (g$library-imp*$6654$UGjMA
     g$library-imp*$6858$UGjMA
     (record-accessor g$7485$6646$UGjMA '3))
   (g$library-vis*$6655$UGjMA
     g$library-vis*$6859$UGjMA
     (record-accessor g$7485$6646$UGjMA '4))
   (g$library-inv*$6656$UGjMA
     g$library-inv*$6860$UGjMA
     (record-accessor g$7485$6646$UGjMA '5))
   (g$library-subst$6657$UGjMA
     g$library-subst$6861$UGjMA
     (record-accessor g$7485$6646$UGjMA '6))
   (g$library-env$6658$UGjMA
     g$library-env$6862$UGjMA
     (record-accessor g$7485$6646$UGjMA '7))
   (g$library-visit-state$6659$UGjMA
     g$library-visit-state$6863$UGjMA
     (record-accessor g$7485$6646$UGjMA '8))
   (g$library-invoke-state$6660$UGjMA
     g$library-invoke-state$6864$UGjMA
     (record-accessor g$7485$6646$UGjMA '9))
   (g$library-visit-code$6661$UGjMA
     g$library-visit-code$6865$UGjMA
     (record-accessor g$7485$6646$UGjMA '10))
   (g$library-invoke-code$6662$UGjMA
     g$library-invoke-code$6866$UGjMA
     (record-accessor g$7485$6646$UGjMA '11))
   (g$library-visible?$6663$UGjMA
     g$library-visible?$6867$UGjMA
     (record-accessor g$7485$6646$UGjMA '12))
   (g$library-source-file-name$6664$UGjMA
     g$library-source-file-name$6868$UGjMA
     (record-accessor g$7485$6646$UGjMA '13))
   (g$set-library-id!$6665$UGjMA
     g$set-library-id!$6869$UGjMA
     (record-mutator g$7485$6646$UGjMA '0))
   (g$set-library-name!$6666$UGjMA
     g$set-library-name!$6870$UGjMA
     (record-mutator g$7485$6646$UGjMA '1))
   (g$set-library-version!$6667$UGjMA
     g$set-library-version!$6871$UGjMA
     (record-mutator g$7485$6646$UGjMA '2))
   (g$set-library-imp*!$6668$UGjMA
     g$set-library-imp*!$6872$UGjMA
     (record-mutator g$7485$6646$UGjMA '3))
   (g$set-library-vis*!$6669$UGjMA
     g$set-library-vis*!$6873$UGjMA
     (record-mutator g$7485$6646$UGjMA '4))
   (g$set-library-inv*!$6670$UGjMA
     g$set-library-inv*!$6874$UGjMA
     (record-mutator g$7485$6646$UGjMA '5))
   (g$set-library-subst!$6671$UGjMA
     g$set-library-subst!$6875$UGjMA
     (record-mutator g$7485$6646$UGjMA '6))
   (g$set-library-env!$6672$UGjMA
     g$set-library-env!$6876$UGjMA
     (record-mutator g$7485$6646$UGjMA '7))
   (g$set-library-visit-state!$6673$UGjMA
     g$set-library-visit-state!$6877$UGjMA
     (record-mutator g$7485$6646$UGjMA '8))
   (g$set-library-invoke-state!$6674$UGjMA
     g$set-library-invoke-state!$6878$UGjMA
     (record-mutator g$7485$6646$UGjMA '9))
   (g$set-library-visit-code!$6675$UGjMA
     g$set-library-visit-code!$6879$UGjMA
     (record-mutator g$7485$6646$UGjMA '10))
   (g$set-library-invoke-code!$6676$UGjMA
     g$set-library-invoke-code!$6880$UGjMA
     (record-mutator g$7485$6646$UGjMA '11))
   (g$set-library-visible?!$6677$UGjMA
     g$set-library-visible?!$6881$UGjMA
     (record-mutator g$7485$6646$UGjMA '12))
   (g$set-library-source-file-name!$6678$UGjMA
     g$set-library-source-file-name!$6882$UGjMA
     (record-mutator g$7485$6646$UGjMA '13))
   (g$rp$6679$UGjMA
     g$rp$6883$UGjMA
     (make-record-printer
       'library
       (case-lambda
         ((g$x$6711$UGjMA g$p$6712$UGjMA)
          (begin
            (if (g$library?$6649$UGjMA g$x$6711$UGjMA)
              (void)
              (assertion-violation 'record-type-printer '"not a library"))
            (display
              (g$format$6273$UGjMA
                '"#<library ~s>"
                (if (null? (g$library-version$6653$UGjMA g$x$6711$UGjMA))
                  (g$library-name$6652$UGjMA g$x$6711$UGjMA)
                  (append
                    (g$library-name$6652$UGjMA g$x$6711$UGjMA)
                    (list (g$library-version$6653$UGjMA g$x$6711$UGjMA)))))
              g$p$6712$UGjMA))))))
   (g$find-dependencies$6680$UGjMA
     g$find-dependencies$6884$UGjMA
     (case-lambda
       ((g$ls$6713$UGjMA)
        (if (null? g$ls$6713$UGjMA)
          '()
          (assertion-violation 'find-dependencies '"cannot handle deps yet")))))
   (g$find-library-by$6681$UGjMA
     g$find-library-by$6885$UGjMA
     (case-lambda
       ((g$pred$6714$UGjMA)
        ((letrec ((g$f$6715$UGjMA
                    (case-lambda
                      ((g$ls$6716$UGjMA)
                       (if (null? g$ls$6716$UGjMA)
                         '#f
                         (if (g$pred$6714$UGjMA (car g$ls$6716$UGjMA))
                           (car g$ls$6716$UGjMA)
                           (g$f$6715$UGjMA (cdr g$ls$6716$UGjMA))))))))
           g$f$6715$UGjMA)
         ((g$current-library-collection$6645$UGjMA))))))
   (g$library-path$6682$UGjMA
     g$library-path$6886$UGjMA
     (g$make-parameter$6357$UGjMA
       '(".")
       (case-lambda
         ((g$x$6717$UGjMA)
          (if (if (list? g$x$6717$UGjMA)
                (begin '#f (g$for-all$5365$UGjMA string? g$x$6717$UGjMA))
                '#f)
            (map (case-lambda ((g$x$6718$UGjMA) g$x$6718$UGjMA)) g$x$6717$UGjMA)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$6717$UGjMA))))))
   (g$library-extensions$6683$UGjMA
     g$library-extensions$6887$UGjMA
     (g$make-parameter$6357$UGjMA
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$6719$UGjMA)
          (if (if (list? g$x$6719$UGjMA)
                (begin '#f (g$for-all$5365$UGjMA string? g$x$6719$UGjMA))
                '#f)
            (map (case-lambda ((g$x$6720$UGjMA) g$x$6720$UGjMA)) g$x$6719$UGjMA)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$6719$UGjMA))))))
   (g$library-name->file-name$6684$UGjMA
     g$library-name->file-name$6888$UGjMA
     (case-lambda
       ((g$x$6721$UGjMA)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$6095$UGjMA)))
          (case-lambda
            ((g$p$6724$UGjMA g$extract$6725$UGjMA)
             ((case-lambda
                ((g$extract$6726$UGjMA g$p$6727$UGjMA)
                 (letrec* ((g$display-hex$6728$UGjMA
                             (case-lambda
                               ((g$n$6736$UGjMA)
                                (if (<= '0 g$n$6736$UGjMA '9)
                                  (display g$n$6736$UGjMA g$p$6727$UGjMA)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$6736$UGjMA '10)))
                                    g$p$6727$UGjMA))))))
                   (begin
                     ((letrec ((g$f$6729$UGjMA
                                 (case-lambda
                                   ((g$ls$6730$UGjMA)
                                    (if (null? g$ls$6730$UGjMA)
                                      (void)
                                      (begin
                                        (display '"/" g$p$6727$UGjMA)
                                        (for-each
                                          (case-lambda
                                            ((g$c$6731$UGjMA)
                                             (if ((case-lambda
                                                    ((g$t$6732$UGjMA)
                                                     (if g$t$6732$UGjMA
                                                       g$t$6732$UGjMA
                                                       ((case-lambda
                                                          ((g$t$6733$UGjMA)
                                                           (if g$t$6733$UGjMA
                                                             g$t$6733$UGjMA
                                                             ((case-lambda
                                                                ((g$t$6734$UGjMA)
                                                                 (if g$t$6734$UGjMA
                                                                   g$t$6734$UGjMA
                                                                   (begin
                                                                     '#f
                                                                     (memv
                                                                       g$c$6731$UGjMA
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (char<=?
                                                                '#\0
                                                                g$c$6731$UGjMA
                                                                '#\9)))))
                                                        (char<=?
                                                          '#\A
                                                          g$c$6731$UGjMA
                                                          '#\Z)))))
                                                  (char<=?
                                                    '#\a
                                                    g$c$6731$UGjMA
                                                    '#\z))
                                               (display
                                                 g$c$6731$UGjMA
                                                 g$p$6727$UGjMA)
                                               (begin
                                                 (display '"%" g$p$6727$UGjMA)
                                                 ((case-lambda
                                                    ((g$n$6735$UGjMA)
                                                     (begin
                                                       (g$display-hex$6728$UGjMA
                                                         (g$quotient$5722$UGjMA
                                                           g$n$6735$UGjMA
                                                           '16))
                                                       (g$display-hex$6728$UGjMA
                                                         (g$remainder$5723$UGjMA
                                                           g$n$6735$UGjMA
                                                           '16)))))
                                                  (char->integer
                                                    g$c$6731$UGjMA))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$6730$UGjMA))))
                                        (g$f$6729$UGjMA
                                          (cdr g$ls$6730$UGjMA))))))))
                        g$f$6729$UGjMA)
                      g$x$6721$UGjMA)
                     (g$extract$6726$UGjMA)))))
              g$extract$6725$UGjMA
              g$p$6724$UGjMA)))))))
   (g$file-locator$6685$UGjMA
     g$file-locator$6889$UGjMA
     (g$make-parameter$6357$UGjMA
       (case-lambda
         ((g$x$6737$UGjMA)
          ((case-lambda
             ((g$str$6738$UGjMA)
              ((letrec ((g$f$6739$UGjMA
                          (case-lambda
                            ((g$ls$6740$UGjMA
                               g$exts$6741$UGjMA
                               g$failed-list$6742$UGjMA)
                             (if (null? g$ls$6740$UGjMA)
                               ((case-lambda
                                  (()
                                   (letrec* ((g$7590$6743$UGjMA
                                               (make-record-type-descriptor
                                                 '&library-resolution
                                                 &condition-rtd
                                                 'g$7593$UGjMA
                                                 '#f
                                                 '#f
                                                 '#((immutable library)
                                                    (immutable files))))
                                             (g$7592$6744$UGjMA '#f)
                                             (g$7591$6745$UGjMA
                                               (make-record-constructor-descriptor
                                                 g$7590$6743$UGjMA
                                                 &condition-rcd
                                                 g$7592$6744$UGjMA))
                                             (g$7589$6746$UGjMA
                                               (record-predicate
                                                 g$7590$6743$UGjMA))
                                             (g$make-library-resolution-condition$6747$UGjMA
                                               (record-constructor
                                                 g$7591$6745$UGjMA))
                                             (g$7587$6748$UGjMA
                                               (record-accessor
                                                 g$7590$6743$UGjMA
                                                 '0))
                                             (g$7588$6749$UGjMA
                                               (record-accessor
                                                 g$7590$6743$UGjMA
                                                 '1))
                                             (g$library-resolution-condition?$6750$UGjMA
                                               (condition-predicate
                                                 g$7590$6743$UGjMA))
                                             (g$condition-library$6751$UGjMA
                                               (condition-accessor
                                                 g$7590$6743$UGjMA
                                                 g$7587$6748$UGjMA))
                                             (g$condition-files$6752$UGjMA
                                               (condition-accessor
                                                 g$7590$6743$UGjMA
                                                 g$7588$6749$UGjMA)))
                                     (raise
                                       (condition
                                         (g$make-error$5639$UGjMA)
                                         (g$make-who-condition$5665$UGjMA
                                           'expander)
                                         (g$make-message-condition$5619$UGjMA
                                           '"cannot locate library in library-path")
                                         (g$make-library-resolution-condition$6747$UGjMA
                                           g$x$6737$UGjMA
                                           (reverse
                                             g$failed-list$6742$UGjMA))))))))
                               (if (null? g$exts$6741$UGjMA)
                                 (g$f$6739$UGjMA
                                   (cdr g$ls$6740$UGjMA)
                                   (g$library-extensions$6683$UGjMA)
                                   g$failed-list$6742$UGjMA)
                                 ((case-lambda
                                    ((g$name$6753$UGjMA)
                                     (if (g$file-exists?$5236$UGjMA
                                           g$name$6753$UGjMA)
                                       g$name$6753$UGjMA
                                       (g$f$6739$UGjMA
                                         g$ls$6740$UGjMA
                                         (cdr g$exts$6741$UGjMA)
                                         (cons
                                           g$name$6753$UGjMA
                                           g$failed-list$6742$UGjMA)))))
                                  (string-append
                                    (car g$ls$6740$UGjMA)
                                    g$str$6738$UGjMA
                                    (car g$exts$6741$UGjMA)))))))))
                 g$f$6739$UGjMA)
               (g$library-path$6682$UGjMA)
               (g$library-extensions$6683$UGjMA)
               '())))
           (g$library-name->file-name$6684$UGjMA g$x$6737$UGjMA))))
       (case-lambda
         ((g$f$6754$UGjMA)
          (if (procedure? g$f$6754$UGjMA)
            g$f$6754$UGjMA
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$6754$UGjMA))))))
   (g$serialize-all$6686$UGjMA
     g$serialize-all$6890$UGjMA
     (case-lambda
       ((g$serialize$6755$UGjMA g$compile$6756$UGjMA)
        (letrec* ((g$library-desc$6757$UGjMA
                    (case-lambda
                      ((g$x$6759$UGjMA)
                       (list
                         (g$library-id$6651$UGjMA g$x$6759$UGjMA)
                         (g$library-name$6652$UGjMA g$x$6759$UGjMA))))))
          (for-each
            (case-lambda
              ((g$x$6758$UGjMA)
               (if (g$library-source-file-name$6664$UGjMA g$x$6758$UGjMA)
                 (g$serialize$6755$UGjMA
                   (g$library-source-file-name$6664$UGjMA g$x$6758$UGjMA)
                   (list
                     (g$library-id$6651$UGjMA g$x$6758$UGjMA)
                     (g$library-name$6652$UGjMA g$x$6758$UGjMA)
                     (g$library-version$6653$UGjMA g$x$6758$UGjMA)
                     (map g$library-desc$6757$UGjMA
                          (g$library-imp*$6654$UGjMA g$x$6758$UGjMA))
                     (map g$library-desc$6757$UGjMA
                          (g$library-vis*$6655$UGjMA g$x$6758$UGjMA))
                     (map g$library-desc$6757$UGjMA
                          (g$library-inv*$6656$UGjMA g$x$6758$UGjMA))
                     (g$library-subst$6657$UGjMA g$x$6758$UGjMA)
                     (g$library-env$6658$UGjMA g$x$6758$UGjMA)
                     (g$compile$6756$UGjMA
                       (g$library-visit-code$6661$UGjMA g$x$6758$UGjMA))
                     (g$compile$6756$UGjMA
                       (g$library-invoke-code$6662$UGjMA g$x$6758$UGjMA))
                     (g$library-visible?$6663$UGjMA g$x$6758$UGjMA)))
                 (void))))
            ((g$current-library-collection$6645$UGjMA)))))))
   (g$current-precompiled-library-loader$6687$UGjMA
     g$current-precompiled-library-loader$6891$UGjMA
     (g$make-parameter$6357$UGjMA
       (case-lambda ((g$filename$6760$UGjMA g$sk$6761$UGjMA) '#f))))
   (g$try-load-from-file$6688$UGjMA
     g$try-load-from-file$6892$UGjMA
     (case-lambda
       ((g$filename$6762$UGjMA)
        ((g$current-precompiled-library-loader$6687$UGjMA)
         g$filename$6762$UGjMA
         (case-lambda
           ((g$id$6763$UGjMA
              g$name$6764$UGjMA
              g$ver$6765$UGjMA
              g$imp*$6766$UGjMA
              g$vis*$6767$UGjMA
              g$inv*$6768$UGjMA
              g$exp-subst$6769$UGjMA
              g$exp-env$6770$UGjMA
              g$visit-proc$6771$UGjMA
              g$invoke-proc$6772$UGjMA
              g$visible?$6773$UGjMA)
            ((letrec ((g$f$6774$UGjMA
                        (case-lambda
                          ((g$deps$6775$UGjMA)
                           (if (null? g$deps$6775$UGjMA)
                             (begin
                               (g$install-library$6698$UGjMA
                                 g$id$6763$UGjMA
                                 g$name$6764$UGjMA
                                 g$ver$6765$UGjMA
                                 g$imp*$6766$UGjMA
                                 g$vis*$6767$UGjMA
                                 g$inv*$6768$UGjMA
                                 g$exp-subst$6769$UGjMA
                                 g$exp-env$6770$UGjMA
                                 g$visit-proc$6771$UGjMA
                                 g$invoke-proc$6772$UGjMA
                                 '#f
                                 '#f
                                 g$visible?$6773$UGjMA
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$6776$UGjMA)
                                 ((case-lambda
                                    ((g$label$6777$UGjMA g$dname$6778$UGjMA)
                                     ((case-lambda
                                        ((g$l$6779$UGjMA)
                                         (if (if (g$library?$6649$UGjMA
                                                   g$l$6779$UGjMA)
                                               (begin
                                                 '#f
                                                 (eq? g$label$6777$UGjMA
                                                      (g$library-id$6651$UGjMA
                                                        g$l$6779$UGjMA)))
                                               '#f)
                                           (g$f$6774$UGjMA
                                             (cdr g$deps$6775$UGjMA))
                                           (begin
                                             (g$fprintf$6272$UGjMA
                                               (current-error-port)
                                               '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from \\
                           source.
"
                                               g$name$6764$UGjMA
                                               g$dname$6778$UGjMA
                                               g$filename$6762$UGjMA)
                                             '#f))))
                                      (g$find-library-by-name$6693$UGjMA
                                        g$dname$6778$UGjMA))))
                                  (car g$d$6776$UGjMA)
                                  (g$cadr$4896$UGjMA g$d$6776$UGjMA))))
                              (car g$deps$6775$UGjMA)))))))
               g$f$6774$UGjMA)
             (append g$imp*$6766$UGjMA g$vis*$6767$UGjMA g$inv*$6768$UGjMA)))
           (g$others$6780$UGjMA '#f))))))
   (g$library-loader$6689$UGjMA
     g$library-loader$6893$UGjMA
     (g$make-parameter$6357$UGjMA
       (case-lambda
         ((g$x$6781$UGjMA)
          ((case-lambda
             ((g$file-name$6782$UGjMA)
              (if (not g$file-name$6782$UGjMA)
                (assertion-violation '#f '"cannot file library" g$x$6781$UGjMA)
                ((case-lambda
                   ((g$t$6783$UGjMA)
                    (if g$t$6783$UGjMA
                      g$t$6783$UGjMA
                      (begin
                        '#f
                        ((g$current-library-expander$6690$UGjMA)
                         (g$read-library-source-file$6356$UGjMA
                           g$file-name$6782$UGjMA)
                         g$file-name$6782$UGjMA
                         (case-lambda
                           ((g$name$6784$UGjMA)
                            (if (equal? g$name$6784$UGjMA g$x$6781$UGjMA)
                              (void)
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (() (g$open-string-output-port$6095$UGjMA)))
                                  (case-lambda
                                    ((g$p$6787$UGjMA g$e$6788$UGjMA)
                                     ((case-lambda
                                        ((g$e$6789$UGjMA g$p$6790$UGjMA)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$6790$UGjMA)
                                           (write g$x$6781$UGjMA g$p$6790$UGjMA)
                                           (display '" in file " g$p$6790$UGjMA)
                                           (display
                                             g$file-name$6782$UGjMA
                                             g$p$6790$UGjMA)
                                           (display '", found " g$p$6790$UGjMA)
                                           (write
                                             g$name$6784$UGjMA
                                             g$p$6790$UGjMA)
                                           (display '" instead" g$p$6790$UGjMA)
                                           (g$e$6789$UGjMA))))
                                      g$e$6788$UGjMA
                                      g$p$6787$UGjMA)))))))))))))
                 (g$try-load-from-file$6688$UGjMA g$file-name$6782$UGjMA)))))
           ((g$file-locator$6685$UGjMA) g$x$6781$UGjMA))))
       (case-lambda
         ((g$f$6791$UGjMA)
          (if (procedure? g$f$6791$UGjMA)
            g$f$6791$UGjMA
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$6791$UGjMA))))))
   (g$current-library-expander$6690$UGjMA
     g$current-library-expander$6894$UGjMA
     (g$make-parameter$6357$UGjMA
       (case-lambda
         ((g$x$6792$UGjMA)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$6793$UGjMA)
          (if (procedure? g$f$6793$UGjMA)
            g$f$6793$UGjMA
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$6793$UGjMA))))))
   (g$external-pending-libraries$6691$UGjMA
     g$external-pending-libraries$6895$UGjMA
     (g$make-parameter$6357$UGjMA '()))
   (g$find-external-library$6692$UGjMA
     g$find-external-library$6896$UGjMA
     (case-lambda
       ((g$name$6794$UGjMA)
        (begin
          (if (g$member$5361$UGjMA
                g$name$6794$UGjMA
                (g$external-pending-libraries$6691$UGjMA))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$6794$UGjMA)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$6797$UGjMA
                g$external-pending-libraries$6798$UGjMA)
              ((case-lambda
                 ((g$swap$6799$UGjMA)
                  (dynamic-wind
                    g$swap$6799$UGjMA
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$6689$UGjMA) g$name$6794$UGjMA)
                         ((case-lambda
                            ((g$t$6800$UGjMA)
                             (if g$t$6800$UGjMA
                               g$t$6800$UGjMA
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$6794$UGjMA)))))
                          (g$find-library-by$6681$UGjMA
                            (case-lambda
                              ((g$x$6801$UGjMA)
                               (equal?
                                 (g$library-name$6652$UGjMA g$x$6801$UGjMA)
                                 g$name$6794$UGjMA))))))))
                    g$swap$6799$UGjMA)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$6802$UGjMA)
                      (begin
                        (g$external-pending-libraries$6797$UGjMA
                          g$external-pending-libraries$6798$UGjMA)
                        (set! g$external-pending-libraries$6798$UGjMA
                          g$t$6802$UGjMA))))
                   (g$external-pending-libraries$6797$UGjMA)))))))
           g$external-pending-libraries$6691$UGjMA
           (cons
             g$name$6794$UGjMA
             (g$external-pending-libraries$6691$UGjMA)))))))
   (g$find-library-by-name$6693$UGjMA
     g$find-library-by-name$6897$UGjMA
     (case-lambda
       ((g$name$6803$UGjMA)
        ((case-lambda
           ((g$t$6804$UGjMA)
            (if g$t$6804$UGjMA
              g$t$6804$UGjMA
              (begin
                '#f
                (g$find-external-library$6692$UGjMA g$name$6803$UGjMA)))))
         (g$find-library-by$6681$UGjMA
           (case-lambda
             ((g$x$6805$UGjMA)
              (equal?
                (g$library-name$6652$UGjMA g$x$6805$UGjMA)
                g$name$6803$UGjMA))))))))
   (g$library-exists?$6694$UGjMA
     g$library-exists?$6898$UGjMA
     (case-lambda
       ((g$name$6806$UGjMA)
        (if (g$find-library-by$6681$UGjMA
              (case-lambda
                ((g$x$6807$UGjMA)
                 (equal?
                   (g$library-name$6652$UGjMA g$x$6807$UGjMA)
                   g$name$6806$UGjMA))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$6695$UGjMA
     g$find-library-by-spec/die$6899$UGjMA
     (case-lambda
       ((g$spec$6808$UGjMA)
        ((case-lambda
           ((g$id$6809$UGjMA)
            ((case-lambda
               ((g$t$6810$UGjMA)
                (if g$t$6810$UGjMA
                  g$t$6810$UGjMA
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$6808$UGjMA)))))
             (g$find-library-by$6681$UGjMA
               (case-lambda
                 ((g$x$6811$UGjMA)
                  (eq? g$id$6809$UGjMA
                       (g$library-id$6651$UGjMA g$x$6811$UGjMA))))))))
         (car g$spec$6808$UGjMA)))))
   (g$label->binding-table$6696$UGjMA
     g$label->binding-table$6900$UGjMA
     (g$make-eq-hashtable$5158$UGjMA))
   (g$install-library-record$6697$UGjMA
     g$install-library-record$6901$UGjMA
     (case-lambda
       ((g$lib$6812$UGjMA)
        (begin
          ((case-lambda
             ((g$exp-env$6813$UGjMA)
              (for-each
                (case-lambda
                  ((g$x$6814$UGjMA)
                   ((case-lambda
                      ((g$label$6815$UGjMA g$binding$6816$UGjMA)
                       ((case-lambda
                          ((g$binding$6817$UGjMA)
                           (g$hashtable-set!$5162$UGjMA
                             g$label->binding-table$6696$UGjMA
                             g$label$6815$UGjMA
                             g$binding$6817$UGjMA)))
                        ((case-lambda
                           ((g$t$6818$UGjMA)
                            (if (eqv? g$t$6818$UGjMA 'global)
                              (cons
                                'global
                                (cons
                                  g$lib$6812$UGjMA
                                  (cdr g$binding$6816$UGjMA)))
                              (if (eqv? g$t$6818$UGjMA 'global-macro)
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$6812$UGjMA
                                    (cdr g$binding$6816$UGjMA)))
                                (if (eqv? g$t$6818$UGjMA 'global-macro!)
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$6812$UGjMA
                                      (cdr g$binding$6816$UGjMA)))
                                  g$binding$6816$UGjMA)))))
                         (car g$binding$6816$UGjMA)))))
                    (car g$x$6814$UGjMA)
                    (cdr g$x$6814$UGjMA))))
                g$exp-env$6813$UGjMA)))
           (g$library-env$6658$UGjMA g$lib$6812$UGjMA))
          ((g$current-library-collection$6645$UGjMA) g$lib$6812$UGjMA)))))
   (g$install-library$6698$UGjMA
     g$install-library$6902$UGjMA
     (case-lambda
       ((g$id$6819$UGjMA
          g$name$6820$UGjMA
          g$ver$6821$UGjMA
          g$imp*$6822$UGjMA
          g$vis*$6823$UGjMA
          g$inv*$6824$UGjMA
          g$exp-subst$6825$UGjMA
          g$exp-env$6826$UGjMA
          g$visit-proc$6827$UGjMA
          g$invoke-proc$6828$UGjMA
          g$visit-code$6829$UGjMA
          g$invoke-code$6830$UGjMA
          g$visible?$6831$UGjMA
          g$source-file-name$6832$UGjMA)
        ((case-lambda
           ((g$imp-lib*$6833$UGjMA g$vis-lib*$6834$UGjMA g$inv-lib*$6835$UGjMA)
            (begin
              (if (if (symbol? g$id$6819$UGjMA)
                    (if (list? g$name$6820$UGjMA)
                      (begin '#f (list? g$ver$6821$UGjMA))
                      '#f)
                    '#f)
                (void)
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$6819$UGjMA
                  g$name$6820$UGjMA
                  g$ver$6821$UGjMA))
              (if (g$library-exists?$6694$UGjMA g$name$6820$UGjMA)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$6820$UGjMA)
                (void))
              ((case-lambda
                 ((g$lib$6836$UGjMA)
                  (g$install-library-record$6697$UGjMA g$lib$6836$UGjMA)))
               (g$make-library$6650$UGjMA
                 g$id$6819$UGjMA
                 g$name$6820$UGjMA
                 g$ver$6821$UGjMA
                 g$imp-lib*$6833$UGjMA
                 g$vis-lib*$6834$UGjMA
                 g$inv-lib*$6835$UGjMA
                 g$exp-subst$6825$UGjMA
                 g$exp-env$6826$UGjMA
                 g$visit-proc$6827$UGjMA
                 g$invoke-proc$6828$UGjMA
                 g$visit-code$6829$UGjMA
                 g$invoke-code$6830$UGjMA
                 g$visible?$6831$UGjMA
                 g$source-file-name$6832$UGjMA)))))
         (map g$find-library-by-spec/die$6695$UGjMA g$imp*$6822$UGjMA)
         (map g$find-library-by-spec/die$6695$UGjMA g$vis*$6823$UGjMA)
         (map g$find-library-by-spec/die$6695$UGjMA g$inv*$6824$UGjMA)))))
   (g$imported-label->binding$6699$UGjMA
     g$imported-label->binding$6903$UGjMA
     (case-lambda
       ((g$lab$6837$UGjMA)
        (g$hashtable-ref$5161$UGjMA
          g$label->binding-table$6696$UGjMA
          g$lab$6837$UGjMA
          '#f))))
   (g$invoke-library$6700$UGjMA
     g$invoke-library$6904$UGjMA
     (case-lambda
       ((g$lib$6838$UGjMA)
        ((case-lambda
           ((g$invoke$6839$UGjMA)
            (if (procedure? g$invoke$6839$UGjMA)
              (begin
                (g$set-library-invoke-state!$6674$UGjMA
                  g$lib$6838$UGjMA
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$6838$UGjMA))))
                (for-each
                  g$invoke-library$6700$UGjMA
                  (g$library-inv*$6656$UGjMA g$lib$6838$UGjMA))
                (g$set-library-invoke-state!$6674$UGjMA
                  g$lib$6838$UGjMA
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$6838$UGjMA))))
                (g$invoke$6839$UGjMA)
                (g$set-library-invoke-state!$6674$UGjMA g$lib$6838$UGjMA '#t))
              (void))))
         (g$library-invoke-state$6660$UGjMA g$lib$6838$UGjMA)))))
   (g$visit-library$6701$UGjMA
     g$visit-library$6905$UGjMA
     (case-lambda
       ((g$lib$6840$UGjMA)
        ((case-lambda
           ((g$visit$6841$UGjMA)
            (if (procedure? g$visit$6841$UGjMA)
              (begin
                (g$set-library-visit-state!$6673$UGjMA
                  g$lib$6840$UGjMA
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$6840$UGjMA))))
                (for-each
                  g$invoke-library$6700$UGjMA
                  (g$library-vis*$6655$UGjMA g$lib$6840$UGjMA))
                (g$set-library-visit-state!$6673$UGjMA
                  g$lib$6840$UGjMA
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$6840$UGjMA))))
                (g$visit$6841$UGjMA)
                (g$set-library-visit-state!$6673$UGjMA g$lib$6840$UGjMA '#t))
              (void))))
         (g$library-visit-state$6659$UGjMA g$lib$6840$UGjMA)))))
   (g$invoke-library-by-spec$6702$UGjMA
     g$invoke-library-by-spec$6906$UGjMA
     (case-lambda
       ((g$spec$6842$UGjMA)
        (g$invoke-library$6700$UGjMA
          (g$find-library-by-spec/die$6695$UGjMA g$spec$6842$UGjMA)))))
   (g$installed-libraries$6703$UGjMA
     g$installed-libraries$6907$UGjMA
     (case-lambda
       ((g$all?$6843$UGjMA)
        ((letrec ((g$f$6844$UGjMA
                    (case-lambda
                      ((g$ls$6845$UGjMA)
                       (if (null? g$ls$6845$UGjMA)
                         '()
                         (if ((case-lambda
                                ((g$t$6846$UGjMA)
                                 (if g$t$6846$UGjMA
                                   g$t$6846$UGjMA
                                   (begin
                                     '#f
                                     (g$library-visible?$6663$UGjMA
                                       (car g$ls$6845$UGjMA))))))
                              g$all?$6843$UGjMA)
                           (cons
                             (car g$ls$6845$UGjMA)
                             (g$f$6844$UGjMA (cdr g$ls$6845$UGjMA)))
                           (g$f$6844$UGjMA (cdr g$ls$6845$UGjMA))))))))
           g$f$6844$UGjMA)
         ((g$current-library-collection$6645$UGjMA))))
       (() (g$installed-libraries$6703$UGjMA '#f))))
   (g$library-spec$6704$UGjMA
     g$library-spec$6908$UGjMA
     (case-lambda
       ((g$x$6847$UGjMA)
        (begin
          (if (g$library?$6649$UGjMA g$x$6847$UGjMA)
            (void)
            (assertion-violation 'library-spec '"not a library" g$x$6847$UGjMA))
          (list
            (g$library-id$6651$UGjMA g$x$6847$UGjMA)
            (g$library-name$6652$UGjMA g$x$6847$UGjMA)
            (g$library-version$6653$UGjMA g$x$6847$UGjMA)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$6909$UGjMA
     g$build-global-define$7019$UGjMA
     (case-lambda ((g$x$6990$UGjMA) (g$build-void$6986$UGjMA))))
   (g$build-lambda$6958$UGjMA
     g$build-lambda$7020$UGjMA
     (case-lambda
       ((g$ae$6991$UGjMA g$vars$6992$UGjMA g$exp$6993$UGjMA)
        (list 'case-lambda (list g$vars$6992$UGjMA g$exp$6993$UGjMA)))))
   (g$build-case-lambda$6959$UGjMA
     g$build-case-lambda$7021$UGjMA
     (case-lambda
       ((g$ae$6994$UGjMA g$vars*$6995$UGjMA g$exp*$6996$UGjMA)
        (cons 'case-lambda (map list g$vars*$6995$UGjMA g$exp*$6996$UGjMA)))))
   (g$build-let$6960$UGjMA
     g$build-let$7022$UGjMA
     (case-lambda
       ((g$ae$6997$UGjMA g$lhs*$6998$UGjMA g$rhs*$6999$UGjMA g$body$7000$UGjMA)
        (cons
          (g$build-lambda$6958$UGjMA
            g$ae$6997$UGjMA
            g$lhs*$6998$UGjMA
            g$body$7000$UGjMA)
          g$rhs*$6999$UGjMA))))
   (g$build-sequence$6985$UGjMA
     g$build-sequence$7023$UGjMA
     (case-lambda
       ((g$ae$7001$UGjMA g$exps$7002$UGjMA)
        ((letrec ((g$loop$7003$UGjMA
                    (case-lambda
                      ((g$exps$7004$UGjMA)
                       (if (null? (cdr g$exps$7004$UGjMA))
                         (car g$exps$7004$UGjMA)
                         (if (equal?
                               (car g$exps$7004$UGjMA)
                               (g$build-void$6986$UGjMA))
                           (g$loop$7003$UGjMA (cdr g$exps$7004$UGjMA))
                           (cons 'begin g$exps$7004$UGjMA)))))))
           g$loop$7003$UGjMA)
         g$exps$7002$UGjMA))))
   (g$build-void$6986$UGjMA
     g$build-void$7024$UGjMA
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$6987$UGjMA
     g$build-letrec$7025$UGjMA
     (case-lambda
       ((g$ae$7005$UGjMA
          g$vars$7006$UGjMA
          g$val-exps$7007$UGjMA
          g$body-exp$7008$UGjMA)
        (if (null? g$vars$7006$UGjMA)
          g$body-exp$7008$UGjMA
          (list
            'letrec
            (map list g$vars$7006$UGjMA g$val-exps$7007$UGjMA)
            g$body-exp$7008$UGjMA)))))
   (g$build-letrec*$6988$UGjMA
     g$build-letrec*$7026$UGjMA
     (case-lambda
       ((g$ae$7009$UGjMA
          g$vars$7010$UGjMA
          g$val-exps$7011$UGjMA
          g$body-exp$7012$UGjMA)
        (if (null? g$vars$7010$UGjMA)
          g$body-exp$7012$UGjMA
          (list
            'letrec*
            (map list g$vars$7010$UGjMA g$val-exps$7011$UGjMA)
            g$body-exp$7012$UGjMA)))))
   (g$build-library-letrec*$6989$UGjMA
     g$build-library-letrec*$7027$UGjMA
     (case-lambda
       ((g$ae$7013$UGjMA
          g$name$7014$UGjMA
          g$vars$7015$UGjMA
          g$locs$7016$UGjMA
          g$val-exps$7017$UGjMA
          g$body-exp$7018$UGjMA)
        (list
          'library-letrec*
          g$name$7014$UGjMA
          (map list g$vars$7015$UGjMA g$locs$7016$UGjMA g$val-exps$7017$UGjMA)
          g$body-exp$7018$UGjMA)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$7028$UGjMA
     g$set-cons$10671$UGjMA
     (case-lambda
       ((g$x$7481$UGjMA g$ls$7482$UGjMA)
        (if (memq g$x$7481$UGjMA g$ls$7482$UGjMA)
          g$ls$7482$UGjMA
          (cons g$x$7481$UGjMA g$ls$7482$UGjMA)))))
   (g$set-union$7029$UGjMA
     g$set-union$10672$UGjMA
     (case-lambda
       ((g$ls1$7483$UGjMA g$ls2$7484$UGjMA)
        (if (null? g$ls1$7483$UGjMA)
          g$ls2$7484$UGjMA
          (if (memq (car g$ls1$7483$UGjMA) g$ls2$7484$UGjMA)
            (g$set-union$7029$UGjMA (cdr g$ls1$7483$UGjMA) g$ls2$7484$UGjMA)
            (cons
              (car g$ls1$7483$UGjMA)
              (g$set-union$7029$UGjMA
                (cdr g$ls1$7483$UGjMA)
                g$ls2$7484$UGjMA)))))))
   (g$top-mark*$7031$UGjMA g$top-mark*$10673$UGjMA '(top))
   (g$top-marked?$7032$UGjMA
     g$top-marked?$10674$UGjMA
     (case-lambda ((g$m*$7485$UGjMA) (memq 'top g$m*$7485$UGjMA))))
   (g$gen-lexical$7033$UGjMA
     g$gen-lexical$10675$UGjMA
     (case-lambda
       ((g$sym$7486$UGjMA)
        (if (symbol? g$sym$7486$UGjMA)
          (gensym g$sym$7486$UGjMA)
          (if (g$stx?$7061$UGjMA g$sym$7486$UGjMA)
            (g$gen-lexical$7033$UGjMA (g$id->sym$7090$UGjMA g$sym$7486$UGjMA))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$7486$UGjMA))))))
   (g$gen-global$7034$UGjMA
     g$gen-global$10676$UGjMA
     (case-lambda
       ((g$x$7487$UGjMA) (g$gen-lexical$7033$UGjMA g$x$7487$UGjMA))))
   (g$gen-label$7035$UGjMA
     g$gen-label$10677$UGjMA
     (case-lambda ((g$_$7488$UGjMA) (gensym))))
   (g$gen-top-level-label$7036$UGjMA
     g$gen-top-level-label$10678$UGjMA
     (case-lambda
       ((g$id$7489$UGjMA g$rib$7490$UGjMA)
        (letrec* ((g$find$7491$UGjMA
                    (case-lambda
                      ((g$sym$7497$UGjMA
                         g$mark*$7498$UGjMA
                         g$sym*$7499$UGjMA
                         g$mark**$7500$UGjMA
                         g$label*$7501$UGjMA)
                       (if (pair? g$sym*$7499$UGjMA)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7497$UGjMA
                                        (car g$sym*$7499$UGjMA))
                                 (begin
                                   '#f
                                   (g$same-marks?$7091$UGjMA
                                     g$mark*$7498$UGjMA
                                     (car g$mark**$7500$UGjMA)))
                                 '#f)
                             (car g$label*$7501$UGjMA)
                             (g$find$7491$UGjMA
                               g$sym$7497$UGjMA
                               g$mark*$7498$UGjMA
                               (cdr g$sym*$7499$UGjMA)
                               (cdr g$mark**$7500$UGjMA)
                               (cdr g$label*$7501$UGjMA))))
                         '#f)))))
          ((case-lambda
             ((g$sym$7492$UGjMA g$mark*$7493$UGjMA)
              ((case-lambda
                 ((g$sym*$7494$UGjMA)
                  ((case-lambda
                     ((g$t$7495$UGjMA)
                      (if g$t$7495$UGjMA
                        ((case-lambda
                           ((g$label$7496$UGjMA)
                            (if (g$imported-label->binding$6903$UGjMA
                                  g$label$7496$UGjMA)
                              (gensym)
                              g$label$7496$UGjMA)))
                         g$t$7495$UGjMA)
                        (gensym))))
                   (if (memq
                         g$sym$7492$UGjMA
                         (g$rib-sym*$7044$UGjMA g$rib$7490$UGjMA))
                     (begin
                       '#f
                       (g$find$7491$UGjMA
                         g$sym$7492$UGjMA
                         g$mark*$7493$UGjMA
                         g$sym*$7494$UGjMA
                         (g$rib-mark**$7045$UGjMA g$rib$7490$UGjMA)
                         (g$rib-label*$7046$UGjMA g$rib$7490$UGjMA)))
                     '#f))))
               (g$rib-sym*$7044$UGjMA g$rib$7490$UGjMA))))
           (g$id->sym$7090$UGjMA g$id$7489$UGjMA)
           (g$stx-mark*$7064$UGjMA g$id$7489$UGjMA))))))
   (g$gen-define-label+loc$7037$UGjMA
     g$gen-define-label+loc$10679$UGjMA
     (case-lambda
       ((g$id$7502$UGjMA g$rib$7503$UGjMA)
        ((case-lambda
           ((g$t$7504$UGjMA)
            (if g$t$7504$UGjMA
              ((case-lambda
                 ((g$env$7505$UGjMA)
                  ((case-lambda
                     ((g$label$7506$UGjMA g$locs$7507$UGjMA)
                      (values
                        g$label$7506$UGjMA
                        ((case-lambda
                           ((g$t$7508$UGjMA)
                            (if g$t$7508$UGjMA
                              (cdr g$t$7508$UGjMA)
                              ((case-lambda
                                 ((g$loc$7509$UGjMA)
                                  (begin
                                    (g$set-interaction-env-locs!$7450$UGjMA
                                      g$env$7505$UGjMA
                                      (cons
                                        (cons
                                          g$label$7506$UGjMA
                                          g$loc$7509$UGjMA)
                                        g$locs$7507$UGjMA))
                                    g$loc$7509$UGjMA)))
                               (g$gen-lexical$7033$UGjMA g$id$7502$UGjMA)))))
                         (assq g$label$7506$UGjMA g$locs$7507$UGjMA)))))
                   (g$gen-top-level-label$7036$UGjMA
                     g$id$7502$UGjMA
                     g$rib$7503$UGjMA)
                   (g$interaction-env-locs$7447$UGjMA g$env$7505$UGjMA))))
               g$t$7504$UGjMA)
              (values (gensym) (g$gen-lexical$7033$UGjMA g$id$7502$UGjMA)))))
         (g$top-level-context$7480$UGjMA)))))
   (g$gen-define-label$7038$UGjMA
     g$gen-define-label$10680$UGjMA
     (case-lambda
       ((g$id$7510$UGjMA g$rib$7511$UGjMA)
        (if (g$top-level-context$7480$UGjMA)
          (g$gen-top-level-label$7036$UGjMA g$id$7510$UGjMA g$rib$7511$UGjMA)
          (gensym)))))
   (g$7887$7039$UGjMA
     g$7887$10681$UGjMA
     (make-record-type-descriptor
       'rib
       '#f
       'g$7890$UGjMA
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq))))
   (g$7889$7040$UGjMA g$7889$10682$UGjMA '#f)
   (g$7888$7041$UGjMA
     g$7888$10683$UGjMA
     (make-record-constructor-descriptor
       g$7887$7039$UGjMA
       '#f
       g$7889$7040$UGjMA))
   (g$rib?$7042$UGjMA
     g$rib?$10684$UGjMA
     (record-predicate g$7887$7039$UGjMA))
   (g$make-rib$7043$UGjMA
     g$make-rib$10685$UGjMA
     (record-constructor g$7888$7041$UGjMA))
   (g$rib-sym*$7044$UGjMA
     g$rib-sym*$10686$UGjMA
     (record-accessor g$7887$7039$UGjMA '0))
   (g$rib-mark**$7045$UGjMA
     g$rib-mark**$10687$UGjMA
     (record-accessor g$7887$7039$UGjMA '1))
   (g$rib-label*$7046$UGjMA
     g$rib-label*$10688$UGjMA
     (record-accessor g$7887$7039$UGjMA '2))
   (g$rib-sealed/freq$7047$UGjMA
     g$rib-sealed/freq$10689$UGjMA
     (record-accessor g$7887$7039$UGjMA '3))
   (g$set-rib-sym*!$7048$UGjMA
     g$set-rib-sym*!$10690$UGjMA
     (record-mutator g$7887$7039$UGjMA '0))
   (g$set-rib-mark**!$7049$UGjMA
     g$set-rib-mark**!$10691$UGjMA
     (record-mutator g$7887$7039$UGjMA '1))
   (g$set-rib-label*!$7050$UGjMA
     g$set-rib-label*!$10692$UGjMA
     (record-mutator g$7887$7039$UGjMA '2))
   (g$set-rib-sealed/freq!$7051$UGjMA
     g$set-rib-sealed/freq!$10693$UGjMA
     (record-mutator g$7887$7039$UGjMA '3))
   (g$make-empty-rib$7052$UGjMA
     g$make-empty-rib$10694$UGjMA
     (case-lambda (() (g$make-rib$7043$UGjMA '() '() '() '#f))))
   (g$extend-rib!$7053$UGjMA
     g$extend-rib!$10695$UGjMA
     (case-lambda
       ((g$rib$7512$UGjMA g$id$7513$UGjMA g$label$7514$UGjMA)
        (letrec* ((g$find$7515$UGjMA
                    (case-lambda
                      ((g$sym$7521$UGjMA
                         g$mark*$7522$UGjMA
                         g$sym*$7523$UGjMA
                         g$mark**$7524$UGjMA
                         g$label*$7525$UGjMA)
                       (if (pair? g$sym*$7523$UGjMA)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7521$UGjMA
                                        (car g$sym*$7523$UGjMA))
                                 (begin
                                   '#f
                                   (g$same-marks?$7091$UGjMA
                                     g$mark*$7522$UGjMA
                                     (car g$mark**$7524$UGjMA)))
                                 '#f)
                             g$label*$7525$UGjMA
                             (g$find$7515$UGjMA
                               g$sym$7521$UGjMA
                               g$mark*$7522$UGjMA
                               (cdr g$sym*$7523$UGjMA)
                               (cdr g$mark**$7524$UGjMA)
                               (cdr g$label*$7525$UGjMA))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$7047$UGjMA g$rib$7512$UGjMA)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$7512$UGjMA)
              (void))
            ((case-lambda
               ((g$sym$7516$UGjMA g$mark*$7517$UGjMA)
                ((case-lambda
                   ((g$sym*$7518$UGjMA)
                    ((case-lambda
                       ((g$t$7519$UGjMA)
                        (if g$t$7519$UGjMA
                          ((case-lambda
                             ((g$p$7520$UGjMA)
                              (if (eq? g$label$7514$UGjMA (car g$p$7520$UGjMA))
                                (void)
                                (if (g$top-level-context$7480$UGjMA)
                                  (set-car! g$p$7520$UGjMA g$label$7514$UGjMA)
                                  (g$syntax-violation$7473$UGjMA
                                    '#f
                                    '"cannot redefine"
                                    g$id$7513$UGjMA)))))
                           g$t$7519$UGjMA)
                          (begin
                            (g$set-rib-sym*!$7048$UGjMA
                              g$rib$7512$UGjMA
                              (cons g$sym$7516$UGjMA g$sym*$7518$UGjMA))
                            (g$set-rib-mark**!$7049$UGjMA
                              g$rib$7512$UGjMA
                              (cons
                                g$mark*$7517$UGjMA
                                (g$rib-mark**$7045$UGjMA g$rib$7512$UGjMA)))
                            (g$set-rib-label*!$7050$UGjMA
                              g$rib$7512$UGjMA
                              (cons
                                g$label$7514$UGjMA
                                (g$rib-label*$7046$UGjMA g$rib$7512$UGjMA)))))))
                     (if (memq
                           g$sym$7516$UGjMA
                           (g$rib-sym*$7044$UGjMA g$rib$7512$UGjMA))
                       (begin
                         '#f
                         (g$find$7515$UGjMA
                           g$sym$7516$UGjMA
                           g$mark*$7517$UGjMA
                           g$sym*$7518$UGjMA
                           (g$rib-mark**$7045$UGjMA g$rib$7512$UGjMA)
                           (g$rib-label*$7046$UGjMA g$rib$7512$UGjMA)))
                       '#f))))
                 (g$rib-sym*$7044$UGjMA g$rib$7512$UGjMA))))
             (g$id->sym$7090$UGjMA g$id$7513$UGjMA)
             (g$stx-mark*$7064$UGjMA g$id$7513$UGjMA)))))))
   (g$make-rib-map$7054$UGjMA
     g$make-rib-map$10696$UGjMA
     (case-lambda
       ((g$sym*$7526$UGjMA)
        ((case-lambda
           ((g$ht$7527$UGjMA)
            ((letrec ((g$f$7528$UGjMA
                        (case-lambda
                          ((g$i$7529$UGjMA g$sym*$7530$UGjMA)
                           (if (null? g$sym*$7530$UGjMA)
                             g$ht$7527$UGjMA
                             (begin
                               (g$hashtable-update!$5165$UGjMA
                                 g$ht$7527$UGjMA
                                 (car g$sym*$7530$UGjMA)
                                 (case-lambda
                                   ((g$x$7531$UGjMA)
                                    (cons g$i$7529$UGjMA g$x$7531$UGjMA)))
                                 '())
                               (g$f$7528$UGjMA
                                 (+ g$i$7529$UGjMA '1)
                                 (cdr g$sym*$7530$UGjMA))))))))
               g$f$7528$UGjMA)
             '0
             g$sym*$7526$UGjMA)))
         (g$make-eq-hashtable$5158$UGjMA)))))
   (g$seal-rib!$7055$UGjMA
     g$seal-rib!$10697$UGjMA
     (case-lambda
       ((g$rib$7532$UGjMA)
        ((case-lambda
           ((g$sym*$7533$UGjMA)
            (if (null? g$sym*$7533$UGjMA)
              (void)
              (begin
                (g$set-rib-sym*!$7048$UGjMA
                  g$rib$7532$UGjMA
                  (list->vector g$sym*$7533$UGjMA))
                (g$set-rib-mark**!$7049$UGjMA
                  g$rib$7532$UGjMA
                  (list->vector (g$rib-mark**$7045$UGjMA g$rib$7532$UGjMA)))
                (g$set-rib-label*!$7050$UGjMA
                  g$rib$7532$UGjMA
                  (list->vector (g$rib-label*$7046$UGjMA g$rib$7532$UGjMA)))
                (g$set-rib-sealed/freq!$7051$UGjMA
                  g$rib$7532$UGjMA
                  (g$make-rib-map$7054$UGjMA g$sym*$7533$UGjMA))))))
         (g$rib-sym*$7044$UGjMA g$rib$7532$UGjMA)))))
   (g$unseal-rib!$7056$UGjMA
     g$unseal-rib!$10698$UGjMA
     (case-lambda
       ((g$rib$7534$UGjMA)
        (if (g$rib-sealed/freq$7047$UGjMA g$rib$7534$UGjMA)
          (begin
            (g$set-rib-sealed/freq!$7051$UGjMA g$rib$7534$UGjMA '#f)
            (g$set-rib-sym*!$7048$UGjMA
              g$rib$7534$UGjMA
              (vector->list (g$rib-sym*$7044$UGjMA g$rib$7534$UGjMA)))
            (g$set-rib-mark**!$7049$UGjMA
              g$rib$7534$UGjMA
              (vector->list (g$rib-mark**$7045$UGjMA g$rib$7534$UGjMA)))
            (g$set-rib-label*!$7050$UGjMA
              g$rib$7534$UGjMA
              (vector->list (g$rib-label*$7046$UGjMA g$rib$7534$UGjMA))))
          (void)))))
   (g$make-full-rib$7057$UGjMA
     g$make-full-rib$10699$UGjMA
     (case-lambda
       ((g$id*$7535$UGjMA g$label*$7536$UGjMA)
        ((case-lambda
           ((g$r$7537$UGjMA)
            (begin (g$seal-rib!$7055$UGjMA g$r$7537$UGjMA) g$r$7537$UGjMA)))
         (g$make-rib$7043$UGjMA
           (map g$id->sym$7090$UGjMA g$id*$7535$UGjMA)
           (map g$stx-mark*$7064$UGjMA g$id*$7535$UGjMA)
           g$label*$7536$UGjMA
           '#f)))))
   (g$7913$7058$UGjMA
     g$7913$10700$UGjMA
     (make-record-type-descriptor
       'stx
       '#f
       'g$7916$UGjMA
       '#t
       '#t
       '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*))))
   (g$7915$7059$UGjMA g$7915$10701$UGjMA '#f)
   (g$7914$7060$UGjMA
     g$7914$10702$UGjMA
     (make-record-constructor-descriptor
       g$7913$7058$UGjMA
       '#f
       g$7915$7059$UGjMA))
   (g$stx?$7061$UGjMA
     g$stx?$10703$UGjMA
     (record-predicate g$7913$7058$UGjMA))
   (g$make-stx$7062$UGjMA
     g$make-stx$10704$UGjMA
     (record-constructor g$7914$7060$UGjMA))
   (g$stx-expr$7063$UGjMA
     g$stx-expr$10705$UGjMA
     (record-accessor g$7913$7058$UGjMA '0))
   (g$stx-mark*$7064$UGjMA
     g$stx-mark*$10706$UGjMA
     (record-accessor g$7913$7058$UGjMA '1))
   (g$stx-subst*$7065$UGjMA
     g$stx-subst*$10707$UGjMA
     (record-accessor g$7913$7058$UGjMA '2))
   (g$stx-ae*$7066$UGjMA
     g$stx-ae*$10708$UGjMA
     (record-accessor g$7913$7058$UGjMA '3))
   (g$set-stx-expr!$7067$UGjMA
     g$set-stx-expr!$10709$UGjMA
     (record-mutator g$7913$7058$UGjMA '0))
   (g$set-stx-mark*!$7068$UGjMA
     g$set-stx-mark*!$10710$UGjMA
     (record-mutator g$7913$7058$UGjMA '1))
   (g$set-stx-subst*!$7069$UGjMA
     g$set-stx-subst*!$10711$UGjMA
     (record-mutator g$7913$7058$UGjMA '2))
   (g$set-stx-ae*!$7070$UGjMA
     g$set-stx-ae*!$10712$UGjMA
     (record-mutator g$7913$7058$UGjMA '3))
   (g$rp$7071$UGjMA
     g$rp$10713$UGjMA
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$7538$UGjMA g$p$7539$UGjMA)
          (begin
            (display '"#<syntax " g$p$7539$UGjMA)
            (write (g$stx->datum$7100$UGjMA g$x$7538$UGjMA) g$p$7539$UGjMA)
            ((case-lambda
               ((g$expr$7540$UGjMA)
                (if (annotation? g$expr$7540$UGjMA)
                  ((case-lambda
                     ((g$src$7541$UGjMA)
                      (if (pair? g$src$7541$UGjMA)
                        (begin
                          (display '" [" g$p$7539$UGjMA)
                          (display (cdr g$src$7541$UGjMA) g$p$7539$UGjMA)
                          (display '" of " g$p$7539$UGjMA)
                          (display (car g$src$7541$UGjMA) g$p$7539$UGjMA)
                          (display '"]" g$p$7539$UGjMA))
                        (void))))
                   (annotation-source g$expr$7540$UGjMA))
                  (void))))
             (g$stx-expr$7063$UGjMA g$x$7538$UGjMA))
            (display '">" g$p$7539$UGjMA))))))
   (g$datum->stx$7072$UGjMA
     g$datum->stx$10714$UGjMA
     (case-lambda
       ((g$id$7542$UGjMA g$datum$7543$UGjMA)
        (g$make-stx$7062$UGjMA
          g$datum$7543$UGjMA
          (g$stx-mark*$7064$UGjMA g$id$7542$UGjMA)
          (g$stx-subst*$7065$UGjMA g$id$7542$UGjMA)
          (g$stx-ae*$7066$UGjMA g$id$7542$UGjMA)))))
   (g$gen-mark$7073$UGjMA
     g$gen-mark$10715$UGjMA
     (case-lambda (() (string '#\m))))
   (g$anti-mark$7074$UGjMA g$anti-mark$10716$UGjMA '#f)
   (g$anti-mark?$7075$UGjMA g$anti-mark?$10717$UGjMA not)
   (g$join-wraps$7076$UGjMA
     g$join-wraps$10718$UGjMA
     (case-lambda
       ((g$m1*$7544$UGjMA g$s1*$7545$UGjMA g$ae1*$7546$UGjMA g$e$7547$UGjMA)
        (letrec* ((g$cancel$7548$UGjMA
                    (case-lambda
                      ((g$ls1$7552$UGjMA g$ls2$7553$UGjMA)
                       ((letrec ((g$f$7554$UGjMA
                                   (case-lambda
                                     ((g$x$7555$UGjMA g$ls1$7556$UGjMA)
                                      (if (null? g$ls1$7556$UGjMA)
                                        (cdr g$ls2$7553$UGjMA)
                                        (cons
                                          g$x$7555$UGjMA
                                          (g$f$7554$UGjMA
                                            (car g$ls1$7556$UGjMA)
                                            (cdr g$ls1$7556$UGjMA))))))))
                          g$f$7554$UGjMA)
                        (car g$ls1$7552$UGjMA)
                        (cdr g$ls1$7552$UGjMA))))))
          ((case-lambda
             ((g$m2*$7549$UGjMA g$s2*$7550$UGjMA g$ae2*$7551$UGjMA)
              (if (if (not (null? g$m1*$7544$UGjMA))
                    (if (not (null? g$m2*$7549$UGjMA))
                      (begin
                        '#f
                        (g$anti-mark?$7075$UGjMA (car g$m2*$7549$UGjMA)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$7548$UGjMA g$m1*$7544$UGjMA g$m2*$7549$UGjMA)
                  (g$cancel$7548$UGjMA g$s1*$7545$UGjMA g$s2*$7550$UGjMA)
                  (g$cancel$7548$UGjMA g$ae1*$7546$UGjMA g$ae2*$7551$UGjMA))
                (values
                  (append g$m1*$7544$UGjMA g$m2*$7549$UGjMA)
                  (append g$s1*$7545$UGjMA g$s2*$7550$UGjMA)
                  (append g$ae1*$7546$UGjMA g$ae2*$7551$UGjMA)))))
           (g$stx-mark*$7064$UGjMA g$e$7547$UGjMA)
           (g$stx-subst*$7065$UGjMA g$e$7547$UGjMA)
           (g$stx-ae*$7066$UGjMA g$e$7547$UGjMA))))))
   (g$mkstx$7077$UGjMA
     g$mkstx$10719$UGjMA
     (case-lambda
       ((g$e$7557$UGjMA g$m*$7558$UGjMA g$s*$7559$UGjMA g$ae*$7560$UGjMA)
        (if (g$stx?$7061$UGjMA g$e$7557$UGjMA)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$7076$UGjMA
                 g$m*$7558$UGjMA
                 g$s*$7559$UGjMA
                 g$ae*$7560$UGjMA
                 g$e$7557$UGjMA)))
            (case-lambda
              ((g$m*$7564$UGjMA g$s*$7565$UGjMA g$ae*$7566$UGjMA)
               ((case-lambda
                  ((g$ae*$7567$UGjMA g$s*$7568$UGjMA g$m*$7569$UGjMA)
                   (g$make-stx$7062$UGjMA
                     (g$stx-expr$7063$UGjMA g$e$7557$UGjMA)
                     g$m*$7569$UGjMA
                     g$s*$7568$UGjMA
                     g$ae*$7567$UGjMA)))
                g$ae*$7566$UGjMA
                g$s*$7565$UGjMA
                g$m*$7564$UGjMA))))
          (g$make-stx$7062$UGjMA
            g$e$7557$UGjMA
            g$m*$7558$UGjMA
            g$s*$7559$UGjMA
            g$ae*$7560$UGjMA)))))
   (g$add-mark$7078$UGjMA
     g$add-mark$10720$UGjMA
     (case-lambda
       ((g$m$7570$UGjMA g$e$7571$UGjMA g$ae$7572$UGjMA)
        (g$mkstx$7077$UGjMA
          g$e$7571$UGjMA
          (list g$m$7570$UGjMA)
          '(shift)
          (list g$ae$7572$UGjMA)))))
   (g$add-subst$7079$UGjMA
     g$add-subst$10721$UGjMA
     (case-lambda
       ((g$subst$7573$UGjMA g$e$7574$UGjMA)
        (g$mkstx$7077$UGjMA g$e$7574$UGjMA '() (list g$subst$7573$UGjMA) '()))))
   (g$syntax-kind?$7080$UGjMA
     g$syntax-kind?$10722$UGjMA
     (case-lambda
       ((g$x$7575$UGjMA g$p?$7576$UGjMA)
        (if (g$stx?$7061$UGjMA g$x$7575$UGjMA)
          (g$syntax-kind?$7080$UGjMA
            (g$stx-expr$7063$UGjMA g$x$7575$UGjMA)
            g$p?$7576$UGjMA)
          (if (annotation? g$x$7575$UGjMA)
            (g$syntax-kind?$7080$UGjMA
              (annotation-expression g$x$7575$UGjMA)
              g$p?$7576$UGjMA)
            (g$p?$7576$UGjMA g$x$7575$UGjMA))))))
   (g$syntax-vector->list$7081$UGjMA
     g$syntax-vector->list$10723$UGjMA
     (case-lambda
       ((g$x$7577$UGjMA)
        (if (g$stx?$7061$UGjMA g$x$7577$UGjMA)
          ((case-lambda
             ((g$ls$7578$UGjMA g$m*$7579$UGjMA g$s*$7580$UGjMA g$ae*$7581$UGjMA)
              (map (case-lambda
                     ((g$x$7582$UGjMA)
                      (g$mkstx$7077$UGjMA
                        g$x$7582$UGjMA
                        g$m*$7579$UGjMA
                        g$s*$7580$UGjMA
                        g$ae*$7581$UGjMA)))
                   g$ls$7578$UGjMA)))
           (g$syntax-vector->list$7081$UGjMA
             (g$stx-expr$7063$UGjMA g$x$7577$UGjMA))
           (g$stx-mark*$7064$UGjMA g$x$7577$UGjMA)
           (g$stx-subst*$7065$UGjMA g$x$7577$UGjMA)
           (g$stx-ae*$7066$UGjMA g$x$7577$UGjMA))
          (if (annotation? g$x$7577$UGjMA)
            (g$syntax-vector->list$7081$UGjMA
              (annotation-expression g$x$7577$UGjMA))
            (if (vector? g$x$7577$UGjMA)
              (vector->list g$x$7577$UGjMA)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$7577$UGjMA)))))))
   (g$syntax-pair?$7082$UGjMA
     g$syntax-pair?$10724$UGjMA
     (case-lambda
       ((g$x$7583$UGjMA) (g$syntax-kind?$7080$UGjMA g$x$7583$UGjMA pair?))))
   (g$syntax-vector?$7083$UGjMA
     g$syntax-vector?$10725$UGjMA
     (case-lambda
       ((g$x$7584$UGjMA) (g$syntax-kind?$7080$UGjMA g$x$7584$UGjMA vector?))))
   (g$syntax-null?$7084$UGjMA
     g$syntax-null?$10726$UGjMA
     (case-lambda
       ((g$x$7585$UGjMA) (g$syntax-kind?$7080$UGjMA g$x$7585$UGjMA null?))))
   (g$syntax-list?$7085$UGjMA
     g$syntax-list?$10727$UGjMA
     (case-lambda
       ((g$x$7586$UGjMA)
        ((case-lambda
           ((g$t$7587$UGjMA)
            (if g$t$7587$UGjMA
              g$t$7587$UGjMA
              (begin
                '#f
                (if (g$syntax-pair?$7082$UGjMA g$x$7586$UGjMA)
                  (begin
                    '#f
                    (g$syntax-list?$7085$UGjMA
                      (g$syntax-cdr$7087$UGjMA g$x$7586$UGjMA)))
                  '#f)))))
         (g$syntax-null?$7084$UGjMA g$x$7586$UGjMA)))))
   (g$syntax-car$7086$UGjMA
     g$syntax-car$10728$UGjMA
     (case-lambda
       ((g$x$7588$UGjMA)
        (if (g$stx?$7061$UGjMA g$x$7588$UGjMA)
          (g$mkstx$7077$UGjMA
            (g$syntax-car$7086$UGjMA (g$stx-expr$7063$UGjMA g$x$7588$UGjMA))
            (g$stx-mark*$7064$UGjMA g$x$7588$UGjMA)
            (g$stx-subst*$7065$UGjMA g$x$7588$UGjMA)
            (g$stx-ae*$7066$UGjMA g$x$7588$UGjMA))
          (if (annotation? g$x$7588$UGjMA)
            (g$syntax-car$7086$UGjMA (annotation-expression g$x$7588$UGjMA))
            (if (pair? g$x$7588$UGjMA)
              (car g$x$7588$UGjMA)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$7588$UGjMA)))))))
   (g$syntax-cdr$7087$UGjMA
     g$syntax-cdr$10729$UGjMA
     (case-lambda
       ((g$x$7589$UGjMA)
        (if (g$stx?$7061$UGjMA g$x$7589$UGjMA)
          (g$mkstx$7077$UGjMA
            (g$syntax-cdr$7087$UGjMA (g$stx-expr$7063$UGjMA g$x$7589$UGjMA))
            (g$stx-mark*$7064$UGjMA g$x$7589$UGjMA)
            (g$stx-subst*$7065$UGjMA g$x$7589$UGjMA)
            (g$stx-ae*$7066$UGjMA g$x$7589$UGjMA))
          (if (annotation? g$x$7589$UGjMA)
            (g$syntax-cdr$7087$UGjMA (annotation-expression g$x$7589$UGjMA))
            (if (pair? g$x$7589$UGjMA)
              (cdr g$x$7589$UGjMA)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$7589$UGjMA)))))))
   (g$syntax->list$7088$UGjMA
     g$syntax->list$10730$UGjMA
     (case-lambda
       ((g$x$7590$UGjMA)
        (if (g$syntax-pair?$7082$UGjMA g$x$7590$UGjMA)
          (cons
            (g$syntax-car$7086$UGjMA g$x$7590$UGjMA)
            (g$syntax->list$7088$UGjMA
              (g$syntax-cdr$7087$UGjMA g$x$7590$UGjMA)))
          (if (g$syntax-null?$7084$UGjMA g$x$7590$UGjMA)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$7590$UGjMA))))))
   (g$id?$7089$UGjMA
     g$id?$10731$UGjMA
     (case-lambda
       ((g$x$7591$UGjMA)
        (if (g$stx?$7061$UGjMA g$x$7591$UGjMA)
          (begin
            '#f
            ((case-lambda
               ((g$expr$7592$UGjMA)
                (symbol?
                  (if (annotation? g$expr$7592$UGjMA)
                    (annotation-stripped g$expr$7592$UGjMA)
                    g$expr$7592$UGjMA))))
             (g$stx-expr$7063$UGjMA g$x$7591$UGjMA)))
          '#f))))
   (g$id->sym$7090$UGjMA
     g$id->sym$10732$UGjMA
     (case-lambda
       ((g$x$7593$UGjMA)
        (begin
          (if (g$stx?$7061$UGjMA g$x$7593$UGjMA)
            (void)
            (error 'id->sym '"BUG in ikarus: not an id" g$x$7593$UGjMA))
          ((case-lambda
             ((g$expr$7594$UGjMA)
              ((case-lambda
                 ((g$sym$7595$UGjMA)
                  (if (symbol? g$sym$7595$UGjMA)
                    g$sym$7595$UGjMA
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$7593$UGjMA))))
               (if (annotation? g$expr$7594$UGjMA)
                 (annotation-stripped g$expr$7594$UGjMA)
                 g$expr$7594$UGjMA))))
           (g$stx-expr$7063$UGjMA g$x$7593$UGjMA))))))
   (g$same-marks?$7091$UGjMA
     g$same-marks?$10733$UGjMA
     (case-lambda
       ((g$x$7596$UGjMA g$y$7597$UGjMA)
        ((case-lambda
           ((g$t$7598$UGjMA)
            (if g$t$7598$UGjMA
              g$t$7598$UGjMA
              (begin
                '#f
                (if (pair? g$x$7596$UGjMA)
                  (if (pair? g$y$7597$UGjMA)
                    (if (eq? (car g$x$7596$UGjMA) (car g$y$7597$UGjMA))
                      (begin
                        '#f
                        (g$same-marks?$7091$UGjMA
                          (cdr g$x$7596$UGjMA)
                          (cdr g$y$7597$UGjMA)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$7596$UGjMA) (begin '#f (null? g$y$7597$UGjMA)) '#f)))))
   (g$bound-id=?$7092$UGjMA
     g$bound-id=?$10734$UGjMA
     (case-lambda
       ((g$x$7599$UGjMA g$y$7600$UGjMA)
        (if (eq? (g$id->sym$7090$UGjMA g$x$7599$UGjMA)
                 (g$id->sym$7090$UGjMA g$y$7600$UGjMA))
          (begin
            '#f
            (g$same-marks?$7091$UGjMA
              (g$stx-mark*$7064$UGjMA g$x$7599$UGjMA)
              (g$stx-mark*$7064$UGjMA g$y$7600$UGjMA)))
          '#f))))
   (g$free-id=?$7093$UGjMA
     g$free-id=?$10735$UGjMA
     (case-lambda
       ((g$i$7601$UGjMA g$j$7602$UGjMA)
        ((case-lambda
           ((g$t0$7603$UGjMA g$t1$7604$UGjMA)
            (if ((case-lambda
                   ((g$t$7605$UGjMA)
                    (if g$t$7605$UGjMA
                      g$t$7605$UGjMA
                      (begin '#f g$t1$7604$UGjMA))))
                 g$t0$7603$UGjMA)
              (eq? g$t0$7603$UGjMA g$t1$7604$UGjMA)
              (eq? (g$id->sym$7090$UGjMA g$i$7601$UGjMA)
                   (g$id->sym$7090$UGjMA g$j$7602$UGjMA)))))
         (g$id->real-label$7103$UGjMA g$i$7601$UGjMA)
         (g$id->real-label$7103$UGjMA g$j$7602$UGjMA)))))
   (g$valid-bound-ids?$7094$UGjMA
     g$valid-bound-ids?$10736$UGjMA
     (case-lambda
       ((g$id*$7606$UGjMA)
        (if (g$for-all$5365$UGjMA g$id?$7089$UGjMA g$id*$7606$UGjMA)
          (begin '#f (g$distinct-bound-ids?$7095$UGjMA g$id*$7606$UGjMA))
          '#f))))
   (g$distinct-bound-ids?$7095$UGjMA
     g$distinct-bound-ids?$10737$UGjMA
     (case-lambda
       ((g$id*$7607$UGjMA)
        ((case-lambda
           ((g$t$7608$UGjMA)
            (if g$t$7608$UGjMA
              g$t$7608$UGjMA
              (begin
                '#f
                (if (not (g$bound-id-member?$7096$UGjMA
                           (car g$id*$7607$UGjMA)
                           (cdr g$id*$7607$UGjMA)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$7095$UGjMA (cdr g$id*$7607$UGjMA)))
                  '#f)))))
         (null? g$id*$7607$UGjMA)))))
   (g$bound-id-member?$7096$UGjMA
     g$bound-id-member?$10738$UGjMA
     (case-lambda
       ((g$id$7609$UGjMA g$id*$7610$UGjMA)
        (if (pair? g$id*$7610$UGjMA)
          (begin
            '#f
            ((case-lambda
               ((g$t$7611$UGjMA)
                (if g$t$7611$UGjMA
                  g$t$7611$UGjMA
                  (begin
                    '#f
                    (g$bound-id-member?$7096$UGjMA
                      g$id$7609$UGjMA
                      (cdr g$id*$7610$UGjMA))))))
             (g$bound-id=?$7092$UGjMA g$id$7609$UGjMA (car g$id*$7610$UGjMA))))
          '#f))))
   (g$self-evaluating?$7097$UGjMA
     g$self-evaluating?$10739$UGjMA
     (case-lambda
       ((g$x$7612$UGjMA)
        ((case-lambda
           ((g$t$7613$UGjMA)
            (if g$t$7613$UGjMA
              g$t$7613$UGjMA
              ((case-lambda
                 ((g$t$7614$UGjMA)
                  (if g$t$7614$UGjMA
                    g$t$7614$UGjMA
                    ((case-lambda
                       ((g$t$7615$UGjMA)
                        (if g$t$7615$UGjMA
                          g$t$7615$UGjMA
                          ((case-lambda
                             ((g$t$7616$UGjMA)
                              (if g$t$7616$UGjMA
                                g$t$7616$UGjMA
                                (begin '#f (bytevector? g$x$7612$UGjMA)))))
                           (boolean? g$x$7612$UGjMA)))))
                     (char? g$x$7612$UGjMA)))))
               (string? g$x$7612$UGjMA)))))
         (number? g$x$7612$UGjMA)))))
   (g$strip-annotations$7098$UGjMA
     g$strip-annotations$10740$UGjMA
     (case-lambda
       ((g$x$7617$UGjMA)
        (if (pair? g$x$7617$UGjMA)
          (cons
            (g$strip-annotations$7098$UGjMA (car g$x$7617$UGjMA))
            (g$strip-annotations$7098$UGjMA (cdr g$x$7617$UGjMA)))
          (if (vector? g$x$7617$UGjMA)
            (vector-map g$strip-annotations$7098$UGjMA g$x$7617$UGjMA)
            (if (annotation? g$x$7617$UGjMA)
              (annotation-stripped g$x$7617$UGjMA)
              g$x$7617$UGjMA))))))
   (g$strip$7099$UGjMA
     g$strip$10741$UGjMA
     (case-lambda
       ((g$x$7618$UGjMA g$m*$7619$UGjMA)
        (if (g$top-marked?$7032$UGjMA g$m*$7619$UGjMA)
          (if ((case-lambda
                 ((g$t$7620$UGjMA)
                  (if g$t$7620$UGjMA
                    g$t$7620$UGjMA
                    ((case-lambda
                       ((g$t$7621$UGjMA)
                        (if g$t$7621$UGjMA
                          g$t$7621$UGjMA
                          (begin
                            '#f
                            (if (vector? g$x$7618$UGjMA)
                              (if (> (vector-length g$x$7618$UGjMA) '0)
                                (begin
                                  '#f
                                  (annotation? (vector-ref g$x$7618$UGjMA '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$7618$UGjMA)
                       (begin '#f (annotation? (car g$x$7618$UGjMA)))
                       '#f)))))
               (annotation? g$x$7618$UGjMA))
            (g$strip-annotations$7098$UGjMA g$x$7618$UGjMA)
            g$x$7618$UGjMA)
          ((letrec ((g$f$7622$UGjMA
                      (case-lambda
                        ((g$x$7623$UGjMA)
                         (if (g$stx?$7061$UGjMA g$x$7623$UGjMA)
                           (g$strip$7099$UGjMA
                             (g$stx-expr$7063$UGjMA g$x$7623$UGjMA)
                             (g$stx-mark*$7064$UGjMA g$x$7623$UGjMA))
                           (if (annotation? g$x$7623$UGjMA)
                             (annotation-stripped g$x$7623$UGjMA)
                             (if (pair? g$x$7623$UGjMA)
                               ((case-lambda
                                  ((g$a$7624$UGjMA g$d$7625$UGjMA)
                                   (if (if (eq? g$a$7624$UGjMA
                                                (car g$x$7623$UGjMA))
                                         (begin
                                           '#f
                                           (eq? g$d$7625$UGjMA
                                                (cdr g$x$7623$UGjMA)))
                                         '#f)
                                     g$x$7623$UGjMA
                                     (cons g$a$7624$UGjMA g$d$7625$UGjMA))))
                                (g$f$7622$UGjMA (car g$x$7623$UGjMA))
                                (g$f$7622$UGjMA (cdr g$x$7623$UGjMA)))
                               (if (vector? g$x$7623$UGjMA)
                                 ((case-lambda
                                    ((g$old$7626$UGjMA)
                                     ((case-lambda
                                        ((g$new$7627$UGjMA)
                                         (if (g$for-all$5365$UGjMA
                                               eq?
                                               g$old$7626$UGjMA
                                               g$new$7627$UGjMA)
                                           g$x$7623$UGjMA
                                           (list->vector g$new$7627$UGjMA))))
                                      (map g$f$7622$UGjMA g$old$7626$UGjMA))))
                                  (vector->list g$x$7623$UGjMA))
                                 g$x$7623$UGjMA))))))))
             g$f$7622$UGjMA)
           g$x$7618$UGjMA)))))
   (g$stx->datum$7100$UGjMA
     g$stx->datum$10742$UGjMA
     (case-lambda
       ((g$x$7628$UGjMA) (g$strip$7099$UGjMA g$x$7628$UGjMA '()))))
   (g$same-marks*?$7101$UGjMA
     g$same-marks*?$10743$UGjMA
     (case-lambda
       ((g$mark*$7629$UGjMA g$mark**$7630$UGjMA g$si$7631$UGjMA)
        (if (null? g$si$7631$UGjMA)
          '#f
          (if (g$same-marks?$7091$UGjMA
                g$mark*$7629$UGjMA
                (vector-ref g$mark**$7630$UGjMA (car g$si$7631$UGjMA)))
            (car g$si$7631$UGjMA)
            (g$same-marks*?$7101$UGjMA
              g$mark*$7629$UGjMA
              g$mark**$7630$UGjMA
              (cdr g$si$7631$UGjMA)))))))
   (g$id->label$7102$UGjMA
     g$id->label$10744$UGjMA
     (case-lambda
       ((g$id$7632$UGjMA)
        ((case-lambda
           ((g$t$7633$UGjMA)
            (if g$t$7633$UGjMA
              g$t$7633$UGjMA
              (begin
                '#f
                ((case-lambda
                   ((g$t$7634$UGjMA)
                    (if g$t$7634$UGjMA
                      ((case-lambda
                         ((g$env$7635$UGjMA)
                          ((case-lambda
                             ((g$rib$7636$UGjMA)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$7037$UGjMA
                                     g$id$7632$UGjMA
                                     g$rib$7636$UGjMA)))
                                (case-lambda
                                  ((g$lab$7639$UGjMA g$loc_$7640$UGjMA)
                                   ((case-lambda
                                      ((g$loc_$7641$UGjMA g$lab$7642$UGjMA)
                                       (begin
                                         (g$extend-rib!$7053$UGjMA
                                           g$rib$7636$UGjMA
                                           g$id$7632$UGjMA
                                           g$lab$7642$UGjMA)
                                         g$lab$7642$UGjMA)))
                                    g$loc_$7640$UGjMA
                                    g$lab$7639$UGjMA))))))
                           (g$interaction-env-rib$7445$UGjMA
                             g$env$7635$UGjMA))))
                       g$t$7634$UGjMA)
                      '#f)))
                 (g$top-level-context$7480$UGjMA))))))
         (g$id->real-label$7103$UGjMA g$id$7632$UGjMA)))))
   (g$id->real-label$7103$UGjMA
     g$id->real-label$10745$UGjMA
     (case-lambda
       ((g$id$7643$UGjMA)
        ((case-lambda
           ((g$sym$7644$UGjMA)
            ((letrec ((g$search$7645$UGjMA
                        (case-lambda
                          ((g$subst*$7646$UGjMA g$mark*$7647$UGjMA)
                           (if (null? g$subst*$7646$UGjMA)
                             '#f
                             (if (eq? (car g$subst*$7646$UGjMA) 'shift)
                               (g$search$7645$UGjMA
                                 (cdr g$subst*$7646$UGjMA)
                                 (cdr g$mark*$7647$UGjMA))
                               ((case-lambda
                                  ((g$rib$7648$UGjMA)
                                   ((case-lambda
                                      ((g$t$7649$UGjMA)
                                       (if g$t$7649$UGjMA
                                         ((case-lambda
                                            ((g$ht$7650$UGjMA)
                                             ((case-lambda
                                                ((g$si$7651$UGjMA)
                                                 ((case-lambda
                                                    ((g$i$7652$UGjMA)
                                                     (if g$i$7652$UGjMA
                                                       (vector-ref
                                                         (g$rib-label*$7046$UGjMA
                                                           g$rib$7648$UGjMA)
                                                         g$i$7652$UGjMA)
                                                       (g$search$7645$UGjMA
                                                         (cdr g$subst*$7646$UGjMA)
                                                         g$mark*$7647$UGjMA))))
                                                  (if g$si$7651$UGjMA
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$7101$UGjMA
                                                        g$mark*$7647$UGjMA
                                                        (g$rib-mark**$7045$UGjMA
                                                          g$rib$7648$UGjMA)
                                                        (reverse
                                                          g$si$7651$UGjMA)))
                                                    '#f))))
                                              (g$hashtable-ref$5161$UGjMA
                                                g$ht$7650$UGjMA
                                                g$sym$7644$UGjMA
                                                '#f))))
                                          g$t$7649$UGjMA)
                                         ((letrec ((g$f$7653$UGjMA
                                                     (case-lambda
                                                       ((g$sym*$7654$UGjMA
                                                          g$mark**$7655$UGjMA
                                                          g$label*$7656$UGjMA)
                                                        (if (null?
                                                              g$sym*$7654$UGjMA)
                                                          (g$search$7645$UGjMA
                                                            (cdr g$subst*$7646$UGjMA)
                                                            g$mark*$7647$UGjMA)
                                                          (if (if (eq? (car g$sym*$7654$UGjMA)
                                                                       g$sym$7644$UGjMA)
                                                                (begin
                                                                  '#f
                                                                  (g$same-marks?$7091$UGjMA
                                                                    (car g$mark**$7655$UGjMA)
                                                                    g$mark*$7647$UGjMA))
                                                                '#f)
                                                            (car g$label*$7656$UGjMA)
                                                            (g$f$7653$UGjMA
                                                              (cdr g$sym*$7654$UGjMA)
                                                              (cdr g$mark**$7655$UGjMA)
                                                              (cdr g$label*$7656$UGjMA))))))))
                                            g$f$7653$UGjMA)
                                          (g$rib-sym*$7044$UGjMA
                                            g$rib$7648$UGjMA)
                                          (g$rib-mark**$7045$UGjMA
                                            g$rib$7648$UGjMA)
                                          (g$rib-label*$7046$UGjMA
                                            g$rib$7648$UGjMA)))))
                                    (g$rib-sealed/freq$7047$UGjMA
                                      g$rib$7648$UGjMA))))
                                (car g$subst*$7646$UGjMA))))))))
               g$search$7645$UGjMA)
             (g$stx-subst*$7065$UGjMA g$id$7643$UGjMA)
             (g$stx-mark*$7064$UGjMA g$id$7643$UGjMA))))
         (g$id->sym$7090$UGjMA g$id$7643$UGjMA)))))
   (g$label->binding$7104$UGjMA
     g$label->binding$10746$UGjMA
     (case-lambda
       ((g$x$7657$UGjMA g$r$7658$UGjMA)
        ((case-lambda
           ((g$t$7659$UGjMA)
            (if g$t$7659$UGjMA
              ((case-lambda
                 ((g$b$7660$UGjMA)
                  (if (if (pair? g$b$7660$UGjMA)
                        (begin '#f (eq? (car g$b$7660$UGjMA) '$core-rtd))
                        '#f)
                    (cons '$rtd (map g$bless$7330$UGjMA (cdr g$b$7660$UGjMA)))
                    (if (if (pair? g$b$7660$UGjMA)
                          (begin '#f (eq? (car g$b$7660$UGjMA) 'global-rtd))
                          '#f)
                      ((case-lambda
                         ((g$lib$7661$UGjMA g$loc$7662$UGjMA)
                          (cons '$rtd (symbol-value g$loc$7662$UGjMA))))
                       (g$cadr$4896$UGjMA g$b$7660$UGjMA)
                       (g$cddr$4898$UGjMA g$b$7660$UGjMA))
                      g$b$7660$UGjMA))))
               g$t$7659$UGjMA)
              ((case-lambda
                 ((g$t$7663$UGjMA)
                  (if g$t$7663$UGjMA
                    (cdr g$t$7663$UGjMA)
                    ((case-lambda
                       ((g$t$7664$UGjMA)
                        (if g$t$7664$UGjMA
                          ((case-lambda
                             ((g$env$7665$UGjMA)
                              ((case-lambda
                                 ((g$t$7666$UGjMA)
                                  (if g$t$7666$UGjMA
                                    ((case-lambda
                                       ((g$p$7667$UGjMA)
                                        (g$cons*$5367$UGjMA
                                          'lexical
                                          (cdr g$p$7667$UGjMA)
                                          '#f)))
                                     g$t$7666$UGjMA)
                                    '(displaced-lexical . #f))))
                               (assq
                                 g$x$7657$UGjMA
                                 (g$interaction-env-locs$7447$UGjMA
                                   g$env$7665$UGjMA)))))
                           g$t$7664$UGjMA)
                          '(displaced-lexical . #f))))
                     (g$top-level-context$7480$UGjMA)))))
               (assq g$x$7657$UGjMA g$r$7658$UGjMA)))))
         (g$imported-label->binding$6903$UGjMA g$x$7657$UGjMA)))))
   (g$make-binding$7105$UGjMA g$make-binding$10747$UGjMA cons)
   (g$binding-type$7106$UGjMA g$binding-type$10748$UGjMA car)
   (g$binding-value$7107$UGjMA g$binding-value$10749$UGjMA cdr)
   (g$raise-unbound-error$7108$UGjMA
     g$raise-unbound-error$10750$UGjMA
     (case-lambda
       ((g$id$7668$UGjMA)
        (g$syntax-violation*$7472$UGjMA
          '#f
          '"unbound identifier"
          g$id$7668$UGjMA
          (g$make-undefined-violation$5701$UGjMA)))))
   (g$syntax-type$7109$UGjMA
     g$syntax-type$10751$UGjMA
     (case-lambda
       ((g$e$7669$UGjMA g$r$7670$UGjMA)
        (if (g$id?$7089$UGjMA g$e$7669$UGjMA)
          ((case-lambda
             ((g$id$7671$UGjMA)
              ((case-lambda
                 ((g$label$7672$UGjMA)
                  ((case-lambda
                     ((g$b$7673$UGjMA)
                      ((case-lambda
                         ((g$type$7674$UGjMA)
                          ((case-lambda
                             (()
                              (begin
                                (if g$label$7672$UGjMA
                                  (void)
                                  (g$raise-unbound-error$7108$UGjMA
                                    g$id$7671$UGjMA))
                                ((case-lambda
                                   ((g$t$7675$UGjMA)
                                    (if (memv
                                          g$t$7675$UGjMA
                                          '(lexical
                                             core-prim
                                             macro
                                             macro!
                                             global
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             displaced-lexical
                                             syntax
                                             import
                                             $module
                                             $core-rtd
                                             library
                                             mutable))
                                      (values
                                        g$type$7674$UGjMA
                                        (g$binding-value$7107$UGjMA
                                          g$b$7673$UGjMA)
                                        g$id$7671$UGjMA)
                                      (values 'other '#f '#f))))
                                 g$type$7674$UGjMA)))))))
                       (g$binding-type$7106$UGjMA g$b$7673$UGjMA))))
                   (g$label->binding$7104$UGjMA
                     g$label$7672$UGjMA
                     g$r$7670$UGjMA))))
               (g$id->label$7102$UGjMA g$id$7671$UGjMA))))
           g$e$7669$UGjMA)
          (if (g$syntax-pair?$7082$UGjMA g$e$7669$UGjMA)
            ((case-lambda
               ((g$id$7676$UGjMA)
                (if (g$id?$7089$UGjMA g$id$7676$UGjMA)
                  ((case-lambda
                     ((g$label$7677$UGjMA)
                      ((case-lambda
                         ((g$b$7678$UGjMA)
                          ((case-lambda
                             ((g$type$7679$UGjMA)
                              ((case-lambda
                                 (()
                                  (begin
                                    (if g$label$7677$UGjMA
                                      (void)
                                      (g$raise-unbound-error$7108$UGjMA
                                        g$id$7676$UGjMA))
                                    ((case-lambda
                                       ((g$t$7680$UGjMA)
                                        (if (memv
                                              g$t$7680$UGjMA
                                              '(define define-syntax
                                                 core-macro
                                                 begin
                                                 macro
                                                 macro!
                                                 local-macro
                                                 local-macro!
                                                 global-macro
                                                 global-macro!
                                                 module
                                                 library
                                                 set!
                                                 let-syntax
                                                 letrec-syntax
                                                 import
                                                 $core-rtd))
                                          (values
                                            g$type$7679$UGjMA
                                            (g$binding-value$7107$UGjMA
                                              g$b$7678$UGjMA)
                                            g$id$7676$UGjMA)
                                          (values 'call '#f '#f))))
                                     g$type$7679$UGjMA)))))))
                           (g$binding-type$7106$UGjMA g$b$7678$UGjMA))))
                       (g$label->binding$7104$UGjMA
                         g$label$7677$UGjMA
                         g$r$7670$UGjMA))))
                   (g$id->label$7102$UGjMA g$id$7676$UGjMA))
                  (values 'call '#f '#f))))
             (g$syntax-car$7086$UGjMA g$e$7669$UGjMA))
            ((case-lambda
               ((g$d$7681$UGjMA)
                (if (g$self-evaluating?$7097$UGjMA g$d$7681$UGjMA)
                  (values 'constant g$d$7681$UGjMA '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$7100$UGjMA g$e$7669$UGjMA)))))))
   (g$sanitize-binding$7117$UGjMA
     g$sanitize-binding$10752$UGjMA
     (case-lambda
       ((g$x$7682$UGjMA g$src$7683$UGjMA)
        (if (procedure? g$x$7682$UGjMA)
          (g$cons*$5367$UGjMA 'local-macro g$x$7682$UGjMA g$src$7683$UGjMA)
          (if (if (pair? g$x$7682$UGjMA)
                (if (eq? (car g$x$7682$UGjMA) 'macro!)
                  (begin '#f (procedure? (cdr g$x$7682$UGjMA)))
                  '#f)
                '#f)
            (g$cons*$5367$UGjMA
              'local-macro!
              (cdr g$x$7682$UGjMA)
              g$src$7683$UGjMA)
            (if (if (pair? g$x$7682$UGjMA)
                  (begin '#f (eq? (car g$x$7682$UGjMA) '$rtd))
                  '#f)
              g$x$7682$UGjMA
              (assertion-violation
                'expand
                '"invalid transformer"
                g$x$7682$UGjMA)))))))
   (g$make-variable-transformer$7118$UGjMA
     g$make-variable-transformer$10753$UGjMA
     (case-lambda
       ((g$x$7684$UGjMA)
        (if (procedure? g$x$7684$UGjMA)
          (cons 'macro! g$x$7684$UGjMA)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$7684$UGjMA)))))
   (g$variable-transformer?$7119$UGjMA
     g$variable-transformer?$10754$UGjMA
     (case-lambda
       ((g$x$7685$UGjMA)
        (if (pair? g$x$7685$UGjMA)
          (if (eq? (car g$x$7685$UGjMA) 'macro!)
            (begin '#f (procedure? (cdr g$x$7685$UGjMA)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$7120$UGjMA
     g$variable-transformer-procedure$10755$UGjMA
     (case-lambda
       ((g$x$7686$UGjMA)
        (if (g$variable-transformer?$7119$UGjMA g$x$7686$UGjMA)
          (cdr g$x$7686$UGjMA)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$7686$UGjMA)))))
   (g$make-eval-transformer$7121$UGjMA
     g$make-eval-transformer$10756$UGjMA
     (case-lambda
       ((g$x$7687$UGjMA)
        (g$sanitize-binding$7117$UGjMA
          (eval-core (g$expanded->core$6603$UGjMA g$x$7687$UGjMA))
          g$x$7687$UGjMA))))
   (g$parse-define$7307$UGjMA
     g$parse-define$10757$UGjMA
     (case-lambda
       ((g$x$7688$UGjMA)
        ((case-lambda
           ((g$t$7689$UGjMA)
            ((case-lambda
               ((g$ls/false$7690$UGjMA)
                (if (if g$ls/false$7690$UGjMA
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7691$UGjMA
                               g$fmls$7692$UGjMA
                               g$b$7693$UGjMA
                               g$b*$7694$UGjMA)
                             (g$id?$7089$UGjMA g$id$7691$UGjMA)))
                          g$ls/false$7690$UGjMA))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7695$UGjMA
                         g$fmls$7696$UGjMA
                         g$b$7697$UGjMA
                         g$b*$7698$UGjMA)
                       (begin
                         (g$verify-formals$7387$UGjMA
                           g$fmls$7696$UGjMA
                           g$x$7688$UGjMA)
                         (values
                           g$id$7695$UGjMA
                           (cons
                             'defun
                             (cons
                               g$fmls$7696$UGjMA
                               (cons g$b$7697$UGjMA g$b*$7698$UGjMA)))))))
                    g$ls/false$7690$UGjMA)
                  ((case-lambda
                     ((g$t$7699$UGjMA)
                      ((case-lambda
                         ((g$ls/false$7700$UGjMA)
                          (if (if g$ls/false$7700$UGjMA
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$7701$UGjMA g$val$7702$UGjMA)
                                       (g$id?$7089$UGjMA g$id$7701$UGjMA)))
                                    g$ls/false$7700$UGjMA))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$7703$UGjMA g$val$7704$UGjMA)
                                 (values
                                   g$id$7703$UGjMA
                                   (cons 'expr g$val$7704$UGjMA))))
                              g$ls/false$7700$UGjMA)
                            ((case-lambda
                               ((g$t$7705$UGjMA)
                                ((case-lambda
                                   ((g$ls/false$7706$UGjMA)
                                    (if (if g$ls/false$7706$UGjMA
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$7707$UGjMA)
                                                 (g$id?$7089$UGjMA
                                                   g$id$7707$UGjMA)))
                                              g$ls/false$7706$UGjMA))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$7708$UGjMA)
                                           (values
                                             g$id$7708$UGjMA
                                             (cons
                                               'expr
                                               (g$bless$7330$UGjMA '(void))))))
                                        g$ls/false$7706$UGjMA)
                                      (g$syntax-violation$7473$UGjMA
                                        '#f
                                        '"invalid syntax"
                                        g$t$7705$UGjMA))))
                                 (g$syntax-dispatch$7367$UGjMA
                                   g$t$7705$UGjMA
                                   '(_ any)))))
                             g$t$7699$UGjMA))))
                       (g$syntax-dispatch$7367$UGjMA
                         g$t$7699$UGjMA
                         '(_ any any)))))
                   g$t$7689$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$7689$UGjMA
               '(_ (any . any) any . each-any)))))
         g$x$7688$UGjMA))))
   (g$parse-define-syntax$7308$UGjMA
     g$parse-define-syntax$10758$UGjMA
     (case-lambda
       ((g$x$7709$UGjMA)
        ((case-lambda
           ((g$t$7710$UGjMA)
            ((case-lambda
               ((g$ls/false$7711$UGjMA)
                (if (if g$ls/false$7711$UGjMA
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7712$UGjMA g$val$7713$UGjMA)
                             (g$id?$7089$UGjMA g$id$7712$UGjMA)))
                          g$ls/false$7711$UGjMA))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7714$UGjMA g$val$7715$UGjMA)
                       (values g$id$7714$UGjMA g$val$7715$UGjMA)))
                    g$ls/false$7711$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$7710$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$7710$UGjMA '(_ any any)))))
         g$x$7709$UGjMA))))
   (g$scheme-stx-hashtable$7309$UGjMA
     g$scheme-stx-hashtable$10759$UGjMA
     (g$make-eq-hashtable$5158$UGjMA))
   (g$scheme-stx$7310$UGjMA
     g$scheme-stx$10760$UGjMA
     (case-lambda
       ((g$sym$7716$UGjMA)
        ((case-lambda
           ((g$t$7717$UGjMA)
            (if g$t$7717$UGjMA
              g$t$7717$UGjMA
              (begin
                '#f
                ((case-lambda
                   ((g$subst$7718$UGjMA)
                    ((case-lambda
                       ((g$stx$7719$UGjMA)
                        ((case-lambda
                           ((g$stx$7720$UGjMA)
                            ((case-lambda
                               (()
                                (begin
                                  (g$hashtable-set!$5162$UGjMA
                                    g$scheme-stx-hashtable$7309$UGjMA
                                    g$sym$7716$UGjMA
                                    g$stx$7720$UGjMA)
                                  g$stx$7720$UGjMA))))))
                         ((case-lambda
                            ((g$t$7721$UGjMA)
                             (if g$t$7721$UGjMA
                               ((case-lambda
                                  ((g$x$7722$UGjMA)
                                   ((case-lambda
                                      ((g$name$7723$UGjMA g$label$7724$UGjMA)
                                       (g$add-subst$7079$UGjMA
                                         (g$make-rib$7043$UGjMA
                                           (list g$name$7723$UGjMA)
                                           (list g$top-mark*$7031$UGjMA)
                                           (list g$label$7724$UGjMA)
                                           '#f)
                                         g$stx$7719$UGjMA)))
                                    (car g$x$7722$UGjMA)
                                    (cdr g$x$7722$UGjMA))))
                                g$t$7721$UGjMA)
                               g$stx$7719$UGjMA)))
                          (assq g$sym$7716$UGjMA g$subst$7718$UGjMA)))))
                     (g$make-stx$7062$UGjMA
                       g$sym$7716$UGjMA
                       g$top-mark*$7031$UGjMA
                       '()
                       '()))))
                 (g$library-subst$6861$UGjMA
                   (g$find-library-by-name$6897$UGjMA
                     '(psyntax system $all))))))))
         (g$hashtable-ref$5161$UGjMA
           g$scheme-stx-hashtable$7309$UGjMA
           g$sym$7716$UGjMA
           '#f)))))
   (g$lexical-var$7311$UGjMA g$lexical-var$10761$UGjMA car)
   (g$lexical-mutable?$7312$UGjMA g$lexical-mutable?$10762$UGjMA cdr)
   (g$set-lexical-mutable!$7313$UGjMA
     g$set-lexical-mutable!$10763$UGjMA
     set-cdr!)
   (g$add-lexical$7314$UGjMA
     g$add-lexical$10764$UGjMA
     (case-lambda
       ((g$lab$7725$UGjMA g$lex$7726$UGjMA g$r$7727$UGjMA)
        (cons
          (g$cons*$5367$UGjMA g$lab$7725$UGjMA 'lexical g$lex$7726$UGjMA '#f)
          g$r$7727$UGjMA))))
   (g$add-lexicals$7315$UGjMA
     g$add-lexicals$10765$UGjMA
     (case-lambda
       ((g$lab*$7728$UGjMA g$lex*$7729$UGjMA g$r$7730$UGjMA)
        (if (null? g$lab*$7728$UGjMA)
          g$r$7730$UGjMA
          (g$add-lexicals$7315$UGjMA
            (cdr g$lab*$7728$UGjMA)
            (cdr g$lex*$7729$UGjMA)
            (g$add-lexical$7314$UGjMA
              (car g$lab*$7728$UGjMA)
              (car g$lex*$7729$UGjMA)
              g$r$7730$UGjMA))))))
   (g$letrec-helper$7316$UGjMA
     g$letrec-helper$10766$UGjMA
     (case-lambda
       ((g$e$7731$UGjMA g$r$7732$UGjMA g$mr$7733$UGjMA g$build$7734$UGjMA)
        ((case-lambda
           ((g$t$7735$UGjMA)
            ((case-lambda
               ((g$ls/false$7736$UGjMA)
                (if g$ls/false$7736$UGjMA
                  (apply
                    (case-lambda
                      ((g$lhs*$7737$UGjMA
                         g$rhs*$7738$UGjMA
                         g$b$7739$UGjMA
                         g$b*$7740$UGjMA)
                       (if (not (g$valid-bound-ids?$7094$UGjMA
                                  g$lhs*$7737$UGjMA))
                         (g$invalid-fmls-error$7332$UGjMA
                           g$e$7731$UGjMA
                           g$lhs*$7737$UGjMA)
                         ((case-lambda
                            ((g$lex*$7741$UGjMA g$lab*$7742$UGjMA)
                             ((case-lambda
                                ((g$rib$7743$UGjMA g$r$7744$UGjMA)
                                 ((case-lambda
                                    ((g$body$7745$UGjMA g$rhs*$7746$UGjMA)
                                     (g$build$7734$UGjMA
                                       '#f
                                       g$lex*$7741$UGjMA
                                       g$rhs*$7746$UGjMA
                                       g$body$7745$UGjMA)))
                                  (g$chi-internal$7396$UGjMA
                                    (g$add-subst$7079$UGjMA
                                      g$rib$7743$UGjMA
                                      (cons g$b$7739$UGjMA g$b*$7740$UGjMA))
                                    g$r$7744$UGjMA
                                    g$mr$7733$UGjMA)
                                  (g$chi-expr*$7383$UGjMA
                                    (map (case-lambda
                                           ((g$x$7747$UGjMA)
                                            (g$add-subst$7079$UGjMA
                                              g$rib$7743$UGjMA
                                              g$x$7747$UGjMA)))
                                         g$rhs*$7738$UGjMA)
                                    g$r$7744$UGjMA
                                    g$mr$7733$UGjMA))))
                              (g$make-full-rib$7057$UGjMA
                                g$lhs*$7737$UGjMA
                                g$lab*$7742$UGjMA)
                              (g$add-lexicals$7315$UGjMA
                                g$lab*$7742$UGjMA
                                g$lex*$7741$UGjMA
                                g$r$7732$UGjMA))))
                          (map g$gen-lexical$7033$UGjMA g$lhs*$7737$UGjMA)
                          (map g$gen-label$7035$UGjMA g$lhs*$7737$UGjMA)))))
                    g$ls/false$7736$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$7735$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$7735$UGjMA
               '(_ #(each (any any)) any . each-any)))))
         g$e$7731$UGjMA))))
   (g$letrec-transformer$7317$UGjMA
     g$letrec-transformer$10767$UGjMA
     (case-lambda
       ((g$e$7748$UGjMA g$r$7749$UGjMA g$mr$7750$UGjMA)
        (g$letrec-helper$7316$UGjMA
          g$e$7748$UGjMA
          g$r$7749$UGjMA
          g$mr$7750$UGjMA
          g$build-letrec$7025$UGjMA))))
   (g$letrec*-transformer$7318$UGjMA
     g$letrec*-transformer$10768$UGjMA
     (case-lambda
       ((g$e$7751$UGjMA g$r$7752$UGjMA g$mr$7753$UGjMA)
        (g$letrec-helper$7316$UGjMA
          g$e$7751$UGjMA
          g$r$7752$UGjMA
          g$mr$7753$UGjMA
          g$build-letrec*$7026$UGjMA))))
   (g$fluid-let-syntax-transformer$7319$UGjMA
     g$fluid-let-syntax-transformer$10769$UGjMA
     (case-lambda
       ((g$e$7754$UGjMA g$r$7755$UGjMA g$mr$7756$UGjMA)
        (letrec* ((g$lookup$7757$UGjMA
                    (case-lambda
                      ((g$x$7767$UGjMA)
                       ((case-lambda
                          ((g$t$7768$UGjMA)
                           (if g$t$7768$UGjMA
                             g$t$7768$UGjMA
                             (begin
                               '#f
                               (g$syntax-violation$7473$UGjMA
                                 '#f
                                 '"unbound identifier"
                                 g$e$7754$UGjMA
                                 g$x$7767$UGjMA)))))
                        (g$id->label$7102$UGjMA g$x$7767$UGjMA))))))
          ((case-lambda
             ((g$t$7758$UGjMA)
              ((case-lambda
                 ((g$ls/false$7759$UGjMA)
                  (if g$ls/false$7759$UGjMA
                    (apply
                      (case-lambda
                        ((g$lhs*$7760$UGjMA
                           g$rhs*$7761$UGjMA
                           g$b$7762$UGjMA
                           g$b*$7763$UGjMA)
                         (if (not (g$valid-bound-ids?$7094$UGjMA
                                    g$lhs*$7760$UGjMA))
                           (g$invalid-fmls-error$7332$UGjMA
                             g$e$7754$UGjMA
                             g$lhs*$7760$UGjMA)
                           ((case-lambda
                              ((g$lab*$7764$UGjMA g$rhs*$7765$UGjMA)
                               (g$chi-internal$7396$UGjMA
                                 (cons g$b$7762$UGjMA g$b*$7763$UGjMA)
                                 (append
                                   (map cons
                                        g$lab*$7764$UGjMA
                                        g$rhs*$7765$UGjMA)
                                   g$r$7755$UGjMA)
                                 (append
                                   (map cons
                                        g$lab*$7764$UGjMA
                                        g$rhs*$7765$UGjMA)
                                   g$mr$7756$UGjMA))))
                            (map g$lookup$7757$UGjMA g$lhs*$7760$UGjMA)
                            (map (case-lambda
                                   ((g$x$7766$UGjMA)
                                    (g$make-eval-transformer$7121$UGjMA
                                      (g$expand-transformer$7412$UGjMA
                                        g$x$7766$UGjMA
                                        g$mr$7756$UGjMA))))
                                 g$rhs*$7761$UGjMA)))))
                      g$ls/false$7759$UGjMA)
                    (g$syntax-violation$7473$UGjMA
                      '#f
                      '"invalid syntax"
                      g$t$7758$UGjMA))))
               (g$syntax-dispatch$7367$UGjMA
                 g$t$7758$UGjMA
                 '(_ #(each (any any)) any . each-any)))))
           g$e$7754$UGjMA)))))
   (g$type-descriptor-transformer$7320$UGjMA
     g$type-descriptor-transformer$10770$UGjMA
     (case-lambda
       ((g$e$7769$UGjMA g$r$7770$UGjMA g$mr$7771$UGjMA)
        ((case-lambda
           ((g$t$7772$UGjMA)
            ((case-lambda
               ((g$ls/false$7773$UGjMA)
                (if (if g$ls/false$7773$UGjMA
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7774$UGjMA)
                             (g$id?$7089$UGjMA g$id$7774$UGjMA)))
                          g$ls/false$7773$UGjMA))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7775$UGjMA)
                       ((case-lambda
                          ((g$lab$7776$UGjMA)
                           ((case-lambda
                              ((g$b$7777$UGjMA)
                               ((case-lambda
                                  ((g$type$7778$UGjMA)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if g$lab$7776$UGjMA
                                           (void)
                                           (g$raise-unbound-error$7108$UGjMA
                                             g$id$7775$UGjMA))
                                         (if (if (eq? g$type$7778$UGjMA '$rtd)
                                               (begin
                                                 '#f
                                                 (not (list?
                                                        (g$binding-value$7107$UGjMA
                                                          g$b$7777$UGjMA))))
                                               '#f)
                                           (void)
                                           (g$syntax-violation$7473$UGjMA
                                             '#f
                                             '"not a record type"
                                             g$e$7769$UGjMA))
                                         (list
                                           'quote
                                           (g$binding-value$7107$UGjMA
                                             g$b$7777$UGjMA))))))))
                                (g$binding-type$7106$UGjMA g$b$7777$UGjMA))))
                            (g$label->binding$7104$UGjMA
                              g$lab$7776$UGjMA
                              g$r$7770$UGjMA))))
                        (g$id->label$7102$UGjMA g$id$7775$UGjMA))))
                    g$ls/false$7773$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$7772$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$7772$UGjMA '(_ any)))))
         g$e$7769$UGjMA))))
   (g$record-type-descriptor-transformer$7321$UGjMA
     g$record-type-descriptor-transformer$10771$UGjMA
     (case-lambda
       ((g$e$7779$UGjMA g$r$7780$UGjMA g$mr$7781$UGjMA)
        ((case-lambda
           ((g$t$7782$UGjMA)
            ((case-lambda
               ((g$ls/false$7783$UGjMA)
                (if (if g$ls/false$7783$UGjMA
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7784$UGjMA)
                             (g$id?$7089$UGjMA g$id$7784$UGjMA)))
                          g$ls/false$7783$UGjMA))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7785$UGjMA)
                       ((case-lambda
                          ((g$lab$7786$UGjMA)
                           ((case-lambda
                              ((g$b$7787$UGjMA)
                               ((case-lambda
                                  ((g$type$7788$UGjMA)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if g$lab$7786$UGjMA
                                           (void)
                                           (g$raise-unbound-error$7108$UGjMA
                                             g$id$7785$UGjMA))
                                         (if (if (eq? g$type$7788$UGjMA '$rtd)
                                               (begin
                                                 '#f
                                                 (list?
                                                   (g$binding-value$7107$UGjMA
                                                     g$b$7787$UGjMA)))
                                               '#f)
                                           (void)
                                           (g$syntax-violation$7473$UGjMA
                                             '#f
                                             '"not a record type"
                                             g$e$7779$UGjMA))
                                         (g$chi-expr$7385$UGjMA
                                           (car (g$binding-value$7107$UGjMA
                                                  g$b$7787$UGjMA))
                                           g$r$7780$UGjMA
                                           g$mr$7781$UGjMA)))))))
                                (g$binding-type$7106$UGjMA g$b$7787$UGjMA))))
                            (g$label->binding$7104$UGjMA
                              g$lab$7786$UGjMA
                              g$r$7780$UGjMA))))
                        (g$id->label$7102$UGjMA g$id$7785$UGjMA))))
                    g$ls/false$7783$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$7782$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$7782$UGjMA '(_ any)))))
         g$e$7779$UGjMA))))
   (g$record-constructor-descriptor-transformer$7322$UGjMA
     g$record-constructor-descriptor-transformer$10772$UGjMA
     (case-lambda
       ((g$e$7789$UGjMA g$r$7790$UGjMA g$mr$7791$UGjMA)
        ((case-lambda
           ((g$t$7792$UGjMA)
            ((case-lambda
               ((g$ls/false$7793$UGjMA)
                (if (if g$ls/false$7793$UGjMA
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7794$UGjMA)
                             (g$id?$7089$UGjMA g$id$7794$UGjMA)))
                          g$ls/false$7793$UGjMA))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7795$UGjMA)
                       ((case-lambda
                          ((g$lab$7796$UGjMA)
                           ((case-lambda
                              ((g$b$7797$UGjMA)
                               ((case-lambda
                                  ((g$type$7798$UGjMA)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if g$lab$7796$UGjMA
                                           (void)
                                           (g$raise-unbound-error$7108$UGjMA
                                             g$id$7795$UGjMA))
                                         (if (if (eq? g$type$7798$UGjMA '$rtd)
                                               (begin
                                                 '#f
                                                 (list?
                                                   (g$binding-value$7107$UGjMA
                                                     g$b$7797$UGjMA)))
                                               '#f)
                                           (void)
                                           (g$syntax-violation$7473$UGjMA
                                             '#f
                                             '"invalid type"
                                             g$e$7789$UGjMA))
                                         (g$chi-expr$7385$UGjMA
                                           (g$cadr$4896$UGjMA
                                             (g$binding-value$7107$UGjMA
                                               g$b$7797$UGjMA))
                                           g$r$7790$UGjMA
                                           g$mr$7791$UGjMA)))))))
                                (g$binding-type$7106$UGjMA g$b$7797$UGjMA))))
                            (g$label->binding$7104$UGjMA
                              g$lab$7796$UGjMA
                              g$r$7790$UGjMA))))
                        (g$id->label$7102$UGjMA g$id$7795$UGjMA))))
                    g$ls/false$7793$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$7792$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$7792$UGjMA '(_ any)))))
         g$e$7789$UGjMA))))
   (g$when-transformer$7323$UGjMA
     g$when-transformer$10773$UGjMA
     (case-lambda
       ((g$e$7799$UGjMA g$r$7800$UGjMA g$mr$7801$UGjMA)
        ((case-lambda
           ((g$t$7802$UGjMA)
            ((case-lambda
               ((g$ls/false$7803$UGjMA)
                (if g$ls/false$7803$UGjMA
                  (apply
                    (case-lambda
                      ((g$test$7804$UGjMA g$e$7805$UGjMA g$e*$7806$UGjMA)
                       (list
                         'if
                         (g$chi-expr$7385$UGjMA
                           g$test$7804$UGjMA
                           g$r$7800$UGjMA
                           g$mr$7801$UGjMA)
                         (g$build-sequence$7023$UGjMA
                           '#f
                           (g$chi-expr*$7383$UGjMA
                             (cons g$e$7805$UGjMA g$e*$7806$UGjMA)
                             g$r$7800$UGjMA
                             g$mr$7801$UGjMA))
                         (g$build-void$7024$UGjMA))))
                    g$ls/false$7803$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$7802$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$7802$UGjMA
               '(_ any any . each-any)))))
         g$e$7799$UGjMA))))
   (g$unless-transformer$7324$UGjMA
     g$unless-transformer$10774$UGjMA
     (case-lambda
       ((g$e$7807$UGjMA g$r$7808$UGjMA g$mr$7809$UGjMA)
        ((case-lambda
           ((g$t$7810$UGjMA)
            ((case-lambda
               ((g$ls/false$7811$UGjMA)
                (if g$ls/false$7811$UGjMA
                  (apply
                    (case-lambda
                      ((g$test$7812$UGjMA g$e$7813$UGjMA g$e*$7814$UGjMA)
                       (list
                         'if
                         (g$chi-expr$7385$UGjMA
                           g$test$7812$UGjMA
                           g$r$7808$UGjMA
                           g$mr$7809$UGjMA)
                         (g$build-void$7024$UGjMA)
                         (g$build-sequence$7023$UGjMA
                           '#f
                           (g$chi-expr*$7383$UGjMA
                             (cons g$e$7813$UGjMA g$e*$7814$UGjMA)
                             g$r$7808$UGjMA
                             g$mr$7809$UGjMA)))))
                    g$ls/false$7811$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$7810$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$7810$UGjMA
               '(_ any any . each-any)))))
         g$e$7807$UGjMA))))
   (g$if-transformer$7325$UGjMA
     g$if-transformer$10775$UGjMA
     (case-lambda
       ((g$e$7815$UGjMA g$r$7816$UGjMA g$mr$7817$UGjMA)
        ((case-lambda
           ((g$t$7818$UGjMA)
            ((case-lambda
               ((g$ls/false$7819$UGjMA)
                (if g$ls/false$7819$UGjMA
                  (apply
                    (case-lambda
                      ((g$e0$7820$UGjMA g$e1$7821$UGjMA g$e2$7822$UGjMA)
                       (list
                         'if
                         (g$chi-expr$7385$UGjMA
                           g$e0$7820$UGjMA
                           g$r$7816$UGjMA
                           g$mr$7817$UGjMA)
                         (g$chi-expr$7385$UGjMA
                           g$e1$7821$UGjMA
                           g$r$7816$UGjMA
                           g$mr$7817$UGjMA)
                         (g$chi-expr$7385$UGjMA
                           g$e2$7822$UGjMA
                           g$r$7816$UGjMA
                           g$mr$7817$UGjMA))))
                    g$ls/false$7819$UGjMA)
                  ((case-lambda
                     ((g$t$7823$UGjMA)
                      ((case-lambda
                         ((g$ls/false$7824$UGjMA)
                          (if g$ls/false$7824$UGjMA
                            (apply
                              (case-lambda
                                ((g$e0$7825$UGjMA g$e1$7826$UGjMA)
                                 (list
                                   'if
                                   (g$chi-expr$7385$UGjMA
                                     g$e0$7825$UGjMA
                                     g$r$7816$UGjMA
                                     g$mr$7817$UGjMA)
                                   (g$chi-expr$7385$UGjMA
                                     g$e1$7826$UGjMA
                                     g$r$7816$UGjMA
                                     g$mr$7817$UGjMA)
                                   (g$build-void$7024$UGjMA))))
                              g$ls/false$7824$UGjMA)
                            (g$syntax-violation$7473$UGjMA
                              '#f
                              '"invalid syntax"
                              g$t$7823$UGjMA))))
                       (g$syntax-dispatch$7367$UGjMA
                         g$t$7823$UGjMA
                         '(_ any any)))))
                   g$t$7818$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$7818$UGjMA '(_ any any any)))))
         g$e$7815$UGjMA))))
   (g$case-transformer$7326$UGjMA
     g$case-transformer$10776$UGjMA
     (case-lambda
       ((g$e$7827$UGjMA g$r$7828$UGjMA g$mr$7829$UGjMA)
        (letrec* ((g$build-one$7830$UGjMA
                    (case-lambda
                      ((g$t$7859$UGjMA g$cls$7860$UGjMA g$rest$7861$UGjMA)
                       ((case-lambda
                          ((g$t$7862$UGjMA)
                           ((case-lambda
                              ((g$ls/false$7863$UGjMA)
                               (if g$ls/false$7863$UGjMA
                                 (apply
                                   (case-lambda
                                     ((g$d*$7864$UGjMA
                                        g$e$7865$UGjMA
                                        g$e*$7866$UGjMA)
                                      (list
                                        'if
                                        ((case-lambda
                                           ((g$data$7867$UGjMA)
                                            (if (= '1
                                                   (length g$data$7867$UGjMA))
                                              (list
                                                '(primitive eqv?)
                                                g$t$7859$UGjMA
                                                (list
                                                  'quote
                                                  (car g$data$7867$UGjMA)))
                                              (list
                                                '(primitive memv)
                                                g$t$7859$UGjMA
                                                (list
                                                  'quote
                                                  g$data$7867$UGjMA)))))
                                         (g$stx->datum$7100$UGjMA
                                           g$d*$7864$UGjMA))
                                        (g$build-sequence$7023$UGjMA
                                          '#f
                                          (g$chi-expr*$7383$UGjMA
                                            (cons
                                              g$e$7865$UGjMA
                                              g$e*$7866$UGjMA)
                                            g$r$7828$UGjMA
                                            g$mr$7829$UGjMA))
                                        g$rest$7861$UGjMA)))
                                   g$ls/false$7863$UGjMA)
                                 ((case-lambda
                                    ((g$t$7868$UGjMA)
                                     ((case-lambda
                                        ((g$ls/false$7869$UGjMA)
                                         (if g$ls/false$7869$UGjMA
                                           (apply
                                             (case-lambda
                                               ((g$else$7870$UGjMA)
                                                (g$syntax-violation$7473$UGjMA
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$7827$UGjMA)))
                                             g$ls/false$7869$UGjMA)
                                           (g$syntax-violation$7473$UGjMA
                                             '#f
                                             '"invalid syntax"
                                             g$t$7868$UGjMA))))
                                      (g$syntax-dispatch$7367$UGjMA
                                        g$t$7868$UGjMA
                                        'any))))
                                  g$t$7862$UGjMA))))
                            (g$syntax-dispatch$7367$UGjMA
                              g$t$7862$UGjMA
                              '(each-any any . each-any)))))
                        g$cls$7860$UGjMA))))
                  (g$build-last$7831$UGjMA
                    (case-lambda
                      ((g$t$7844$UGjMA g$cls$7845$UGjMA)
                       ((case-lambda
                          ((g$t$7846$UGjMA)
                           ((case-lambda
                              ((g$ls/false$7847$UGjMA)
                               (if g$ls/false$7847$UGjMA
                                 (apply
                                   (case-lambda
                                     ((g$d*$7848$UGjMA
                                        g$e$7849$UGjMA
                                        g$e*$7850$UGjMA)
                                      (g$build-one$7830$UGjMA
                                        g$t$7844$UGjMA
                                        g$cls$7845$UGjMA
                                        (g$build-void$7024$UGjMA))))
                                   g$ls/false$7847$UGjMA)
                                 ((case-lambda
                                    ((g$t$7851$UGjMA)
                                     ((case-lambda
                                        ((g$ls/false$7852$UGjMA)
                                         (if g$ls/false$7852$UGjMA
                                           (apply
                                             (case-lambda
                                               ((g$else-kwd$7853$UGjMA
                                                  g$x$7854$UGjMA
                                                  g$x*$7855$UGjMA)
                                                (if (if (g$id?$7089$UGjMA
                                                          g$else-kwd$7853$UGjMA)
                                                      (begin
                                                        '#f
                                                        (g$free-id=?$7093$UGjMA
                                                          g$else-kwd$7853$UGjMA
                                                          (g$scheme-stx$7310$UGjMA
                                                            'else)))
                                                      '#f)
                                                  (g$build-sequence$7023$UGjMA
                                                    '#f
                                                    (g$chi-expr*$7383$UGjMA
                                                      (cons
                                                        g$x$7854$UGjMA
                                                        g$x*$7855$UGjMA)
                                                      g$r$7828$UGjMA
                                                      g$mr$7829$UGjMA))
                                                  (g$syntax-violation$7473$UGjMA
                                                    '#f
                                                    '"invalid syntax"
                                                    g$e$7827$UGjMA))))
                                             g$ls/false$7852$UGjMA)
                                           ((case-lambda
                                              ((g$t$7856$UGjMA)
                                               ((case-lambda
                                                  ((g$ls/false$7857$UGjMA)
                                                   (if g$ls/false$7857$UGjMA
                                                     (apply
                                                       (case-lambda
                                                         ((g$else$7858$UGjMA)
                                                          (g$syntax-violation$7473$UGjMA
                                                            '#f
                                                            '"invalid syntax"
                                                            g$e$7827$UGjMA)))
                                                       g$ls/false$7857$UGjMA)
                                                     (g$syntax-violation$7473$UGjMA
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$7856$UGjMA))))
                                                (g$syntax-dispatch$7367$UGjMA
                                                  g$t$7856$UGjMA
                                                  'any))))
                                            g$t$7851$UGjMA))))
                                      (g$syntax-dispatch$7367$UGjMA
                                        g$t$7851$UGjMA
                                        '(any any . each-any)))))
                                  g$t$7846$UGjMA))))
                            (g$syntax-dispatch$7367$UGjMA
                              g$t$7846$UGjMA
                              '(each-any any . each-any)))))
                        g$cls$7845$UGjMA)))))
          ((case-lambda
             ((g$t$7832$UGjMA)
              ((case-lambda
                 ((g$ls/false$7833$UGjMA)
                  (if g$ls/false$7833$UGjMA
                    (apply
                      (case-lambda
                        ((g$expr$7834$UGjMA)
                         (g$build-sequence$7023$UGjMA
                           '#f
                           (list
                             (g$chi-expr$7385$UGjMA
                               g$expr$7834$UGjMA
                               g$r$7828$UGjMA
                               g$mr$7829$UGjMA)
                             (g$build-void$7024$UGjMA)))))
                      g$ls/false$7833$UGjMA)
                    ((case-lambda
                       ((g$t$7835$UGjMA)
                        ((case-lambda
                           ((g$ls/false$7836$UGjMA)
                            (if g$ls/false$7836$UGjMA
                              (apply
                                (case-lambda
                                  ((g$expr$7837$UGjMA
                                     g$cls$7838$UGjMA
                                     g$cls*$7839$UGjMA)
                                   ((case-lambda
                                      ((g$t$7840$UGjMA)
                                       (g$build-let$7022$UGjMA
                                         '#f
                                         (list g$t$7840$UGjMA)
                                         (list
                                           (g$chi-expr$7385$UGjMA
                                             g$expr$7837$UGjMA
                                             g$r$7828$UGjMA
                                             g$mr$7829$UGjMA))
                                         ((letrec ((g$f$7841$UGjMA
                                                     (case-lambda
                                                       ((g$cls$7842$UGjMA
                                                          g$cls*$7843$UGjMA)
                                                        (if (null?
                                                              g$cls*$7843$UGjMA)
                                                          (g$build-last$7831$UGjMA
                                                            g$t$7840$UGjMA
                                                            g$cls$7842$UGjMA)
                                                          (g$build-one$7830$UGjMA
                                                            g$t$7840$UGjMA
                                                            g$cls$7842$UGjMA
                                                            (g$f$7841$UGjMA
                                                              (car g$cls*$7843$UGjMA)
                                                              (cdr g$cls*$7843$UGjMA))))))))
                                            g$f$7841$UGjMA)
                                          g$cls$7838$UGjMA
                                          g$cls*$7839$UGjMA))))
                                    (g$gen-lexical$7033$UGjMA 't))))
                                g$ls/false$7836$UGjMA)
                              (g$syntax-violation$7473$UGjMA
                                '#f
                                '"invalid syntax"
                                g$t$7835$UGjMA))))
                         (g$syntax-dispatch$7367$UGjMA
                           g$t$7835$UGjMA
                           '(_ any any . each-any)))))
                     g$t$7832$UGjMA))))
               (g$syntax-dispatch$7367$UGjMA g$t$7832$UGjMA '(_ any)))))
           g$e$7827$UGjMA)))))
   (g$quote-transformer$7327$UGjMA
     g$quote-transformer$10777$UGjMA
     (case-lambda
       ((g$e$7871$UGjMA g$r$7872$UGjMA g$mr$7873$UGjMA)
        ((case-lambda
           ((g$t$7874$UGjMA)
            ((case-lambda
               ((g$ls/false$7875$UGjMA)
                (if g$ls/false$7875$UGjMA
                  (apply
                    (case-lambda
                      ((g$datum$7876$UGjMA)
                       (list
                         'quote
                         (g$stx->datum$7100$UGjMA g$datum$7876$UGjMA))))
                    g$ls/false$7875$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$7874$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$7874$UGjMA '(_ any)))))
         g$e$7871$UGjMA))))
   (g$case-lambda-transformer$7328$UGjMA
     g$case-lambda-transformer$10778$UGjMA
     (case-lambda
       ((g$e$7877$UGjMA g$r$7878$UGjMA g$mr$7879$UGjMA)
        ((case-lambda
           ((g$t$7880$UGjMA)
            ((case-lambda
               ((g$ls/false$7881$UGjMA)
                (if g$ls/false$7881$UGjMA
                  (apply
                    (case-lambda
                      ((g$fmls*$7882$UGjMA g$b*$7883$UGjMA g$b**$7884$UGjMA)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$7389$UGjMA
                              g$e$7877$UGjMA
                              g$fmls*$7882$UGjMA
                              (map cons g$b*$7883$UGjMA g$b**$7884$UGjMA)
                              g$r$7878$UGjMA
                              g$mr$7879$UGjMA)))
                         (case-lambda
                           ((g$fmls*$7887$UGjMA g$body*$7888$UGjMA)
                            ((case-lambda
                               ((g$body*$7889$UGjMA g$fmls*$7890$UGjMA)
                                (g$build-case-lambda$7021$UGjMA
                                  '#f
                                  g$fmls*$7890$UGjMA
                                  g$body*$7889$UGjMA)))
                             g$body*$7888$UGjMA
                             g$fmls*$7887$UGjMA))))))
                    g$ls/false$7881$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$7880$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$7880$UGjMA
               '(_ . #(each (any any . each-any)))))))
         g$e$7877$UGjMA))))
   (g$lambda-transformer$7329$UGjMA
     g$lambda-transformer$10779$UGjMA
     (case-lambda
       ((g$e$7891$UGjMA g$r$7892$UGjMA g$mr$7893$UGjMA)
        ((case-lambda
           ((g$t$7894$UGjMA)
            ((case-lambda
               ((g$ls/false$7895$UGjMA)
                (if g$ls/false$7895$UGjMA
                  (apply
                    (case-lambda
                      ((g$fmls$7896$UGjMA g$b$7897$UGjMA g$b*$7898$UGjMA)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$7388$UGjMA
                              g$e$7891$UGjMA
                              g$fmls$7896$UGjMA
                              (cons g$b$7897$UGjMA g$b*$7898$UGjMA)
                              g$r$7892$UGjMA
                              g$mr$7893$UGjMA)))
                         (case-lambda
                           ((g$fmls$7901$UGjMA g$body$7902$UGjMA)
                            ((case-lambda
                               ((g$body$7903$UGjMA g$fmls$7904$UGjMA)
                                (g$build-lambda$7020$UGjMA
                                  '#f
                                  g$fmls$7904$UGjMA
                                  g$body$7903$UGjMA)))
                             g$body$7902$UGjMA
                             g$fmls$7901$UGjMA))))))
                    g$ls/false$7895$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$7894$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$7894$UGjMA
               '(_ any any . each-any)))))
         g$e$7891$UGjMA))))
   (g$bless$7330$UGjMA
     g$bless$10780$UGjMA
     (case-lambda
       ((g$x$7905$UGjMA)
        (g$mkstx$7077$UGjMA
          ((letrec ((g$f$7906$UGjMA
                      (case-lambda
                        ((g$x$7907$UGjMA)
                         (if (g$stx?$7061$UGjMA g$x$7907$UGjMA)
                           g$x$7907$UGjMA
                           (if (pair? g$x$7907$UGjMA)
                             (cons
                               (g$f$7906$UGjMA (car g$x$7907$UGjMA))
                               (g$f$7906$UGjMA (cdr g$x$7907$UGjMA)))
                             (if (symbol? g$x$7907$UGjMA)
                               (g$scheme-stx$7310$UGjMA g$x$7907$UGjMA)
                               (if (vector? g$x$7907$UGjMA)
                                 (vector-map g$f$7906$UGjMA g$x$7907$UGjMA)
                                 g$x$7907$UGjMA))))))))
             g$f$7906$UGjMA)
           g$x$7905$UGjMA)
          '()
          '()
          '()))))
   (g$with-syntax-macro$7331$UGjMA
     g$with-syntax-macro$10781$UGjMA
     (case-lambda
       ((g$e$7908$UGjMA)
        ((case-lambda
           ((g$t$7909$UGjMA)
            ((case-lambda
               ((g$ls/false$7910$UGjMA)
                (if g$ls/false$7910$UGjMA
                  (apply
                    (case-lambda
                      ((g$pat*$7911$UGjMA
                         g$expr*$7912$UGjMA
                         g$b$7913$UGjMA
                         g$b*$7914$UGjMA)
                       ((case-lambda
                          ((g$idn*$7915$UGjMA)
                           (begin
                             (g$verify-formals$7387$UGjMA
                               (map car g$idn*$7915$UGjMA)
                               g$e$7908$UGjMA)
                             ((case-lambda
                                ((g$t*$7916$UGjMA)
                                 (g$bless$7330$UGjMA
                                   (list
                                     'let
                                     (map list
                                          g$t*$7916$UGjMA
                                          g$expr*$7912$UGjMA)
                                     ((letrec ((g$f$7917$UGjMA
                                                 (case-lambda
                                                   ((g$pat*$7918$UGjMA
                                                      g$t*$7919$UGjMA)
                                                    (if (null?
                                                          g$pat*$7918$UGjMA)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$7913$UGjMA
                                                            g$b*$7914$UGjMA)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$7919$UGjMA)
                                                        '()
                                                        (list
                                                          (car g$pat*$7918$UGjMA)
                                                          (g$f$7917$UGjMA
                                                            (cdr g$pat*$7918$UGjMA)
                                                            (cdr g$t*$7919$UGjMA)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$7918$UGjMA))
                                                            (car g$t*$7919$UGjMA)))))))))
                                        g$f$7917$UGjMA)
                                      g$pat*$7911$UGjMA
                                      g$t*$7916$UGjMA)))))
                              (g$generate-temporaries$7466$UGjMA
                                g$expr*$7912$UGjMA)))))
                        ((letrec ((g$f$7920$UGjMA
                                    (case-lambda
                                      ((g$pat*$7921$UGjMA)
                                       (if (null? g$pat*$7921$UGjMA)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$7366$UGjMA
                                                (car g$pat*$7921$UGjMA)
                                                '())))
                                           (case-lambda
                                             ((g$pat$7924$UGjMA
                                                g$idn*$7925$UGjMA)
                                              ((case-lambda
                                                 ((g$idn*$7926$UGjMA
                                                    g$pat$7927$UGjMA)
                                                  (append
                                                    g$idn*$7926$UGjMA
                                                    (g$f$7920$UGjMA
                                                      (cdr g$pat*$7921$UGjMA)))))
                                               g$idn*$7925$UGjMA
                                               g$pat$7924$UGjMA)))))))))
                           g$f$7920$UGjMA)
                         g$pat*$7911$UGjMA))))
                    g$ls/false$7910$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$7909$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$7909$UGjMA
               '(_ #(each (any any)) any . each-any)))))
         g$e$7908$UGjMA))))
   (g$invalid-fmls-error$7332$UGjMA
     g$invalid-fmls-error$10782$UGjMA
     (case-lambda
       ((g$stx$7928$UGjMA g$fmls$7929$UGjMA)
        ((case-lambda
           ((g$t$7930$UGjMA)
            ((case-lambda
               ((g$ls/false$7931$UGjMA)
                (if g$ls/false$7931$UGjMA
                  (apply
                    (case-lambda
                      ((g$id*$7932$UGjMA g$last$7933$UGjMA)
                       ((letrec ((g$f$7934$UGjMA
                                   (case-lambda
                                     ((g$id*$7935$UGjMA)
                                      (if (null? g$id*$7935$UGjMA)
                                        (values)
                                        (if (not (g$id?$7089$UGjMA
                                                   (car g$id*$7935$UGjMA)))
                                          (g$syntax-violation$7473$UGjMA
                                            '#f
                                            '"not an identifier"
                                            g$stx$7928$UGjMA
                                            (car g$id*$7935$UGjMA))
                                          (begin
                                            (g$f$7934$UGjMA
                                              (cdr g$id*$7935$UGjMA))
                                            (if (g$bound-id-member?$7096$UGjMA
                                                  (car g$id*$7935$UGjMA)
                                                  (cdr g$id*$7935$UGjMA))
                                              (g$syntax-violation$7473$UGjMA
                                                '#f
                                                '"duplicate binding"
                                                g$stx$7928$UGjMA
                                                (car g$id*$7935$UGjMA))
                                              (void)))))))))
                          g$f$7934$UGjMA)
                        (if (g$id?$7089$UGjMA g$last$7933$UGjMA)
                          (cons g$last$7933$UGjMA g$id*$7932$UGjMA)
                          (if (g$syntax-null?$7084$UGjMA g$last$7933$UGjMA)
                            g$id*$7932$UGjMA
                            (g$syntax-violation$7473$UGjMA
                              '#f
                              '"not an identifier"
                              g$stx$7928$UGjMA
                              g$last$7933$UGjMA))))))
                    g$ls/false$7931$UGjMA)
                  ((case-lambda
                     ((g$t$7936$UGjMA)
                      ((case-lambda
                         ((g$ls/false$7937$UGjMA)
                          (if g$ls/false$7937$UGjMA
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7473$UGjMA
                                   '#f
                                   '"malformed binding form"
                                   g$stx$7928$UGjMA
                                   g$fmls$7929$UGjMA)))
                              g$ls/false$7937$UGjMA)
                            (g$syntax-violation$7473$UGjMA
                              '#f
                              '"invalid syntax"
                              g$t$7936$UGjMA))))
                       (g$syntax-dispatch$7367$UGjMA g$t$7936$UGjMA '_))))
                   g$t$7930$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$7930$UGjMA
               '#(each+ any () any)))))
         g$fmls$7929$UGjMA))))
   (g$let-macro$7333$UGjMA
     g$let-macro$10783$UGjMA
     (case-lambda
       ((g$stx$7938$UGjMA)
        ((case-lambda
           ((g$t$7939$UGjMA)
            ((case-lambda
               ((g$ls/false$7940$UGjMA)
                (if g$ls/false$7940$UGjMA
                  (apply
                    (case-lambda
                      ((g$lhs*$7941$UGjMA
                         g$rhs*$7942$UGjMA
                         g$b$7943$UGjMA
                         g$b*$7944$UGjMA)
                       (if (g$valid-bound-ids?$7094$UGjMA g$lhs*$7941$UGjMA)
                         (g$bless$7330$UGjMA
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$7941$UGjMA
                                 (cons g$b$7943$UGjMA g$b*$7944$UGjMA)))
                             g$rhs*$7942$UGjMA))
                         (g$invalid-fmls-error$7332$UGjMA
                           g$stx$7938$UGjMA
                           g$lhs*$7941$UGjMA))))
                    g$ls/false$7940$UGjMA)
                  ((case-lambda
                     ((g$t$7945$UGjMA)
                      ((case-lambda
                         ((g$ls/false$7946$UGjMA)
                          (if (if g$ls/false$7946$UGjMA
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$7947$UGjMA
                                         g$lhs*$7948$UGjMA
                                         g$rhs*$7949$UGjMA
                                         g$b$7950$UGjMA
                                         g$b*$7951$UGjMA)
                                       (g$id?$7089$UGjMA g$f$7947$UGjMA)))
                                    g$ls/false$7946$UGjMA))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$7952$UGjMA
                                   g$lhs*$7953$UGjMA
                                   g$rhs*$7954$UGjMA
                                   g$b$7955$UGjMA
                                   g$b*$7956$UGjMA)
                                 (if (g$valid-bound-ids?$7094$UGjMA
                                       g$lhs*$7953$UGjMA)
                                   (g$bless$7330$UGjMA
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$7952$UGjMA
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$7953$UGjMA
                                                 (cons
                                                   g$b$7955$UGjMA
                                                   g$b*$7956$UGjMA)))))
                                         g$f$7952$UGjMA)
                                       g$rhs*$7954$UGjMA))
                                   (g$invalid-fmls-error$7332$UGjMA
                                     g$stx$7938$UGjMA
                                     g$lhs*$7953$UGjMA))))
                              g$ls/false$7946$UGjMA)
                            (g$syntax-violation$7473$UGjMA
                              '#f
                              '"invalid syntax"
                              g$t$7945$UGjMA))))
                       (g$syntax-dispatch$7367$UGjMA
                         g$t$7945$UGjMA
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$7939$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$7939$UGjMA
               '(_ #(each (any any)) any . each-any)))))
         g$stx$7938$UGjMA))))
   (g$let-values-macro$7334$UGjMA
     g$let-values-macro$10784$UGjMA
     (case-lambda
       ((g$stx$7957$UGjMA)
        (letrec* ((g$rename$7958$UGjMA
                    (case-lambda
                      ((g$x$8009$UGjMA g$old*$8010$UGjMA g$new*$8011$UGjMA)
                       (begin
                         (if (g$id?$7089$UGjMA g$x$8009$UGjMA)
                           (void)
                           (g$syntax-violation$7473$UGjMA
                             '#f
                             '"not an indentifier"
                             g$stx$7957$UGjMA
                             g$x$8009$UGjMA))
                         (if (g$bound-id-member?$7096$UGjMA
                               g$x$8009$UGjMA
                               g$old*$8010$UGjMA)
                           (g$syntax-violation$7473$UGjMA
                             '#f
                             '"duplicate binding"
                             g$stx$7957$UGjMA
                             g$x$8009$UGjMA)
                           (void))
                         ((case-lambda
                            ((g$y$8012$UGjMA)
                             (values
                               g$y$8012$UGjMA
                               (cons g$x$8009$UGjMA g$old*$8010$UGjMA)
                               (cons g$y$8012$UGjMA g$new*$8011$UGjMA))))
                          (gensym
                            (g$syntax->datum$7476$UGjMA g$x$8009$UGjMA)))))))
                  (g$rename*$7959$UGjMA
                    (case-lambda
                      ((g$x*$8000$UGjMA g$old*$8001$UGjMA g$new*$8002$UGjMA)
                       (if (null? g$x*$8000$UGjMA)
                         (values '() g$old*$8001$UGjMA g$new*$8002$UGjMA)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$7958$UGjMA
                                (car g$x*$8000$UGjMA)
                                g$old*$8001$UGjMA
                                g$new*$8002$UGjMA)))
                           (case-lambda
                             ((g$x$8003$UGjMA
                                g$old*$8004$UGjMA
                                g$new*$8005$UGjMA)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$7959$UGjMA
                                     (cdr g$x*$8000$UGjMA)
                                     g$old*$8004$UGjMA
                                     g$new*$8005$UGjMA)))
                                (case-lambda
                                  ((g$x*$8006$UGjMA
                                     g$old*$8007$UGjMA
                                     g$new*$8008$UGjMA)
                                   (values
                                     (cons g$x$8003$UGjMA g$x*$8006$UGjMA)
                                     g$old*$8007$UGjMA
                                     g$new*$8008$UGjMA))))))))))))
          ((case-lambda
             ((g$t$7960$UGjMA)
              ((case-lambda
                 ((g$ls/false$7961$UGjMA)
                  (if g$ls/false$7961$UGjMA
                    (apply
                      (case-lambda
                        ((g$b$7962$UGjMA g$b*$7963$UGjMA)
                         (g$cons*$5367$UGjMA
                           (g$bless$7330$UGjMA 'let)
                           '()
                           g$b$7962$UGjMA
                           g$b*$7963$UGjMA)))
                      g$ls/false$7961$UGjMA)
                    ((case-lambda
                       ((g$t$7964$UGjMA)
                        ((case-lambda
                           ((g$ls/false$7965$UGjMA)
                            (if g$ls/false$7965$UGjMA
                              (apply
                                (case-lambda
                                  ((g$lhs*$7966$UGjMA
                                     g$rhs*$7967$UGjMA
                                     g$b$7968$UGjMA
                                     g$b*$7969$UGjMA)
                                   (g$bless$7330$UGjMA
                                     ((letrec ((g$f$7970$UGjMA
                                                 (case-lambda
                                                   ((g$lhs*$7971$UGjMA
                                                      g$rhs*$7972$UGjMA
                                                      g$old*$7973$UGjMA
                                                      g$new*$7974$UGjMA)
                                                    (if (null?
                                                          g$lhs*$7971$UGjMA)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (map list
                                                               g$old*$7973$UGjMA
                                                               g$new*$7974$UGjMA)
                                                          (cons
                                                            g$b$7968$UGjMA
                                                            g$b*$7969$UGjMA)))
                                                      ((case-lambda
                                                         ((g$t$7975$UGjMA)
                                                          ((case-lambda
                                                             ((g$ls/false$7976$UGjMA)
                                                              (if g$ls/false$7976$UGjMA
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$7977$UGjMA)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$7959$UGjMA
                                                                            g$x*$7977$UGjMA
                                                                            g$old*$7973$UGjMA
                                                                            g$new*$7974$UGjMA)))
                                                                       (case-lambda
                                                                         ((g$y*$7981$UGjMA
                                                                            g$old*$7982$UGjMA
                                                                            g$new*$7983$UGjMA)
                                                                          ((case-lambda
                                                                             ((g$new*$7984$UGjMA
                                                                                g$old*$7985$UGjMA
                                                                                g$y*$7986$UGjMA)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$7972$UGjMA))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$7986$UGjMA
                                                                                  (g$f$7970$UGjMA
                                                                                    (cdr g$lhs*$7971$UGjMA)
                                                                                    (cdr g$rhs*$7972$UGjMA)
                                                                                    g$old*$7985$UGjMA
                                                                                    g$new*$7984$UGjMA)))))
                                                                           g$new*$7983$UGjMA
                                                                           g$old*$7982$UGjMA
                                                                           g$y*$7981$UGjMA))))))
                                                                  g$ls/false$7976$UGjMA)
                                                                ((case-lambda
                                                                   ((g$t$7987$UGjMA)
                                                                    ((case-lambda
                                                                       ((g$ls/false$7988$UGjMA)
                                                                        (if g$ls/false$7988$UGjMA
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$7989$UGjMA
                                                                                 g$x$7990$UGjMA)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$7958$UGjMA
                                                                                      g$x$7990$UGjMA
                                                                                      g$old*$7973$UGjMA
                                                                                      g$new*$7974$UGjMA)))
                                                                                 (case-lambda
                                                                                   ((g$y$7991$UGjMA
                                                                                      g$old*$7992$UGjMA
                                                                                      g$new*$7993$UGjMA)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$7959$UGjMA
                                                                                           g$x*$7989$UGjMA
                                                                                           g$old*$7992$UGjMA
                                                                                           g$new*$7993$UGjMA)))
                                                                                      (case-lambda
                                                                                        ((g$y*$7994$UGjMA
                                                                                           g$old*$7995$UGjMA
                                                                                           g$new*$7996$UGjMA)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$7972$UGjMA))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$7994$UGjMA
                                                                                               g$y$7991$UGjMA)
                                                                                             (g$f$7970$UGjMA
                                                                                               (cdr g$lhs*$7971$UGjMA)
                                                                                               (cdr g$rhs*$7972$UGjMA)
                                                                                               g$old*$7995$UGjMA
                                                                                               g$new*$7996$UGjMA)))))))))))
                                                                            g$ls/false$7988$UGjMA)
                                                                          ((case-lambda
                                                                             ((g$t$7997$UGjMA)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$7998$UGjMA)
                                                                                  (if g$ls/false$7998$UGjMA
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$7999$UGjMA)
                                                                                         (g$syntax-violation$7473$UGjMA
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$7957$UGjMA
                                                                                           g$others$7999$UGjMA)))
                                                                                      g$ls/false$7998$UGjMA)
                                                                                    (g$syntax-violation$7473$UGjMA
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$7997$UGjMA))))
                                                                               (g$syntax-dispatch$7367$UGjMA
                                                                                 g$t$7997$UGjMA
                                                                                 'any))))
                                                                           g$t$7987$UGjMA))))
                                                                     (g$syntax-dispatch$7367$UGjMA
                                                                       g$t$7987$UGjMA
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$7975$UGjMA))))
                                                           (g$syntax-dispatch$7367$UGjMA
                                                             g$t$7975$UGjMA
                                                             'each-any))))
                                                       (car g$lhs*$7971$UGjMA)))))))
                                        g$f$7970$UGjMA)
                                      g$lhs*$7966$UGjMA
                                      g$rhs*$7967$UGjMA
                                      '()
                                      '()))))
                                g$ls/false$7965$UGjMA)
                              (g$syntax-violation$7473$UGjMA
                                '#f
                                '"invalid syntax"
                                g$t$7964$UGjMA))))
                         (g$syntax-dispatch$7367$UGjMA
                           g$t$7964$UGjMA
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$7960$UGjMA))))
               (g$syntax-dispatch$7367$UGjMA
                 g$t$7960$UGjMA
                 '(_ () any . each-any)))))
           g$stx$7957$UGjMA)))))
   (g$let*-values-macro$7335$UGjMA
     g$let*-values-macro$10785$UGjMA
     (case-lambda
       ((g$stx$8013$UGjMA)
        (letrec* ((g$check$8014$UGjMA
                    (case-lambda
                      ((g$x*$8038$UGjMA)
                       (if (null? g$x*$8038$UGjMA)
                         (void)
                         ((case-lambda
                            ((g$x$8039$UGjMA)
                             (begin
                               (if (g$id?$7089$UGjMA g$x$8039$UGjMA)
                                 (void)
                                 (g$syntax-violation$7473$UGjMA
                                   '#f
                                   '"not an identifier"
                                   g$stx$8013$UGjMA
                                   g$x$8039$UGjMA))
                               (g$check$8014$UGjMA (cdr g$x*$8038$UGjMA))
                               (if (g$bound-id-member?$7096$UGjMA
                                     g$x$8039$UGjMA
                                     (cdr g$x*$8038$UGjMA))
                                 (g$syntax-violation$7473$UGjMA
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$8013$UGjMA
                                   g$x$8039$UGjMA)
                                 (void)))))
                          (car g$x*$8038$UGjMA)))))))
          ((case-lambda
             ((g$t$8015$UGjMA)
              ((case-lambda
                 ((g$ls/false$8016$UGjMA)
                  (if g$ls/false$8016$UGjMA
                    (apply
                      (case-lambda
                        ((g$b$8017$UGjMA g$b*$8018$UGjMA)
                         (g$cons*$5367$UGjMA
                           (g$bless$7330$UGjMA 'let)
                           '()
                           g$b$8017$UGjMA
                           g$b*$8018$UGjMA)))
                      g$ls/false$8016$UGjMA)
                    ((case-lambda
                       ((g$t$8019$UGjMA)
                        ((case-lambda
                           ((g$ls/false$8020$UGjMA)
                            (if g$ls/false$8020$UGjMA
                              (apply
                                (case-lambda
                                  ((g$lhs*$8021$UGjMA
                                     g$rhs*$8022$UGjMA
                                     g$b$8023$UGjMA
                                     g$b*$8024$UGjMA)
                                   (g$bless$7330$UGjMA
                                     ((letrec ((g$f$8025$UGjMA
                                                 (case-lambda
                                                   ((g$lhs*$8026$UGjMA
                                                      g$rhs*$8027$UGjMA)
                                                    (if (null?
                                                          g$lhs*$8026$UGjMA)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$8023$UGjMA
                                                          g$b*$8024$UGjMA))
                                                      ((case-lambda
                                                         ((g$t$8028$UGjMA)
                                                          ((case-lambda
                                                             ((g$ls/false$8029$UGjMA)
                                                              (if g$ls/false$8029$UGjMA
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8030$UGjMA)
                                                                     (begin
                                                                       (g$check$8014$UGjMA
                                                                         g$x*$8030$UGjMA)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$8027$UGjMA))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$8030$UGjMA
                                                                           (g$f$8025$UGjMA
                                                                             (cdr g$lhs*$8026$UGjMA)
                                                                             (cdr g$rhs*$8027$UGjMA)))))))
                                                                  g$ls/false$8029$UGjMA)
                                                                ((case-lambda
                                                                   ((g$t$8031$UGjMA)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8032$UGjMA)
                                                                        (if g$ls/false$8032$UGjMA
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8033$UGjMA
                                                                                 g$x$8034$UGjMA)
                                                                               (begin
                                                                                 (g$check$8014$UGjMA
                                                                                   (cons
                                                                                     g$x$8034$UGjMA
                                                                                     g$x*$8033$UGjMA))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$8027$UGjMA))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$8033$UGjMA
                                                                                       g$x$8034$UGjMA)
                                                                                     (g$f$8025$UGjMA
                                                                                       (cdr g$lhs*$8026$UGjMA)
                                                                                       (cdr g$rhs*$8027$UGjMA)))))))
                                                                            g$ls/false$8032$UGjMA)
                                                                          ((case-lambda
                                                                             ((g$t$8035$UGjMA)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8036$UGjMA)
                                                                                  (if g$ls/false$8036$UGjMA
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8037$UGjMA)
                                                                                         (g$syntax-violation$7473$UGjMA
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8013$UGjMA
                                                                                           g$others$8037$UGjMA)))
                                                                                      g$ls/false$8036$UGjMA)
                                                                                    (g$syntax-violation$7473$UGjMA
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8035$UGjMA))))
                                                                               (g$syntax-dispatch$7367$UGjMA
                                                                                 g$t$8035$UGjMA
                                                                                 'any))))
                                                                           g$t$8031$UGjMA))))
                                                                     (g$syntax-dispatch$7367$UGjMA
                                                                       g$t$8031$UGjMA
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8028$UGjMA))))
                                                           (g$syntax-dispatch$7367$UGjMA
                                                             g$t$8028$UGjMA
                                                             'each-any))))
                                                       (car g$lhs*$8026$UGjMA)))))))
                                        g$f$8025$UGjMA)
                                      g$lhs*$8021$UGjMA
                                      g$rhs*$8022$UGjMA))))
                                g$ls/false$8020$UGjMA)
                              (g$syntax-violation$7473$UGjMA
                                '#f
                                '"invalid syntax"
                                g$t$8019$UGjMA))))
                         (g$syntax-dispatch$7367$UGjMA
                           g$t$8019$UGjMA
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8015$UGjMA))))
               (g$syntax-dispatch$7367$UGjMA
                 g$t$8015$UGjMA
                 '(_ () any . each-any)))))
           g$stx$8013$UGjMA)))))
   (g$trace-lambda-macro$7336$UGjMA
     g$trace-lambda-macro$10786$UGjMA
     (case-lambda
       ((g$stx$8040$UGjMA)
        ((case-lambda
           ((g$t$8041$UGjMA)
            ((case-lambda
               ((g$ls/false$8042$UGjMA)
                (if g$ls/false$8042$UGjMA
                  (apply
                    (case-lambda
                      ((g$who$8043$UGjMA
                         g$fmls$8044$UGjMA
                         g$b$8045$UGjMA
                         g$b*$8046$UGjMA)
                       (if (g$valid-bound-ids?$7094$UGjMA g$fmls$8044$UGjMA)
                         (g$bless$7330$UGjMA
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$8043$UGjMA)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$8044$UGjMA
                                 (cons g$b$8045$UGjMA g$b*$8046$UGjMA)))))
                         (g$invalid-fmls-error$7332$UGjMA
                           g$stx$8040$UGjMA
                           g$fmls$8044$UGjMA))))
                    g$ls/false$8042$UGjMA)
                  ((case-lambda
                     ((g$t$8047$UGjMA)
                      ((case-lambda
                         ((g$ls/false$8048$UGjMA)
                          (if g$ls/false$8048$UGjMA
                            (apply
                              (case-lambda
                                ((g$who$8049$UGjMA
                                   g$fmls$8050$UGjMA
                                   g$last$8051$UGjMA
                                   g$b$8052$UGjMA
                                   g$b*$8053$UGjMA)
                                 (if (g$valid-bound-ids?$7094$UGjMA
                                       (cons
                                         g$last$8051$UGjMA
                                         g$fmls$8050$UGjMA))
                                   (g$bless$7330$UGjMA
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$8049$UGjMA)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$8050$UGjMA
                                             g$last$8051$UGjMA)
                                           (cons
                                             g$b$8052$UGjMA
                                             g$b*$8053$UGjMA)))))
                                   (g$invalid-fmls-error$7332$UGjMA
                                     g$stx$8040$UGjMA
                                     (append
                                       g$fmls$8050$UGjMA
                                       g$last$8051$UGjMA)))))
                              g$ls/false$8048$UGjMA)
                            (g$syntax-violation$7473$UGjMA
                              '#f
                              '"invalid syntax"
                              g$t$8047$UGjMA))))
                       (g$syntax-dispatch$7367$UGjMA
                         g$t$8047$UGjMA
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$8041$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$8041$UGjMA
               '(_ any each-any any . each-any)))))
         g$stx$8040$UGjMA))))
   (g$trace-define-macro$7337$UGjMA
     g$trace-define-macro$10787$UGjMA
     (case-lambda
       ((g$stx$8054$UGjMA)
        ((case-lambda
           ((g$t$8055$UGjMA)
            ((case-lambda
               ((g$ls/false$8056$UGjMA)
                (if g$ls/false$8056$UGjMA
                  (apply
                    (case-lambda
                      ((g$who$8057$UGjMA
                         g$fmls$8058$UGjMA
                         g$b$8059$UGjMA
                         g$b*$8060$UGjMA)
                       (if (g$valid-bound-ids?$7094$UGjMA g$fmls$8058$UGjMA)
                         (g$bless$7330$UGjMA
                           (list
                             'define
                             g$who$8057$UGjMA
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$8057$UGjMA)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$8058$UGjMA
                                   (cons g$b$8059$UGjMA g$b*$8060$UGjMA))))))
                         (g$invalid-fmls-error$7332$UGjMA
                           g$stx$8054$UGjMA
                           g$fmls$8058$UGjMA))))
                    g$ls/false$8056$UGjMA)
                  ((case-lambda
                     ((g$t$8061$UGjMA)
                      ((case-lambda
                         ((g$ls/false$8062$UGjMA)
                          (if g$ls/false$8062$UGjMA
                            (apply
                              (case-lambda
                                ((g$who$8063$UGjMA
                                   g$fmls$8064$UGjMA
                                   g$last$8065$UGjMA
                                   g$b$8066$UGjMA
                                   g$b*$8067$UGjMA)
                                 (if (g$valid-bound-ids?$7094$UGjMA
                                       (cons
                                         g$last$8065$UGjMA
                                         g$fmls$8064$UGjMA))
                                   (g$bless$7330$UGjMA
                                     (list
                                       'define
                                       g$who$8063$UGjMA
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$8063$UGjMA)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$8064$UGjMA
                                               g$last$8065$UGjMA)
                                             (cons
                                               g$b$8066$UGjMA
                                               g$b*$8067$UGjMA))))))
                                   (g$invalid-fmls-error$7332$UGjMA
                                     g$stx$8054$UGjMA
                                     (append
                                       g$fmls$8064$UGjMA
                                       g$last$8065$UGjMA)))))
                              g$ls/false$8062$UGjMA)
                            ((case-lambda
                               ((g$t$8068$UGjMA)
                                ((case-lambda
                                   ((g$ls/false$8069$UGjMA)
                                    (if g$ls/false$8069$UGjMA
                                      (apply
                                        (case-lambda
                                          ((g$who$8070$UGjMA g$expr$8071$UGjMA)
                                           (if (g$id?$7089$UGjMA
                                                 g$who$8070$UGjMA)
                                             (g$bless$7330$UGjMA
                                               (list
                                                 'define
                                                 g$who$8070$UGjMA
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$8071$UGjMA))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$8070$UGjMA)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$7473$UGjMA
                                               '#f
                                               '"invalid name"
                                               g$stx$8054$UGjMA))))
                                        g$ls/false$8069$UGjMA)
                                      (g$syntax-violation$7473$UGjMA
                                        '#f
                                        '"invalid syntax"
                                        g$t$8068$UGjMA))))
                                 (g$syntax-dispatch$7367$UGjMA
                                   g$t$8068$UGjMA
                                   '(_ any any)))))
                             g$t$8061$UGjMA))))
                       (g$syntax-dispatch$7367$UGjMA
                         g$t$8061$UGjMA
                         '(_ (any . #(each+ any () any)) any . each-any)))))
                   g$t$8055$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$8055$UGjMA
               '(_ (any . each-any) any . each-any)))))
         g$stx$8054$UGjMA))))
   (g$trace-define-syntax-macro$7338$UGjMA
     g$trace-define-syntax-macro$10788$UGjMA
     (case-lambda
       ((g$stx$8072$UGjMA)
        ((case-lambda
           ((g$t$8073$UGjMA)
            ((case-lambda
               ((g$ls/false$8074$UGjMA)
                (if g$ls/false$8074$UGjMA
                  (apply
                    (case-lambda
                      ((g$who$8075$UGjMA g$expr$8076$UGjMA)
                       (if (g$id?$7089$UGjMA g$who$8075$UGjMA)
                         (g$bless$7330$UGjMA
                           (list
                             'define-syntax
                             g$who$8075$UGjMA
                             (list
                               'make-traced-macro
                               (list 'quote g$who$8075$UGjMA)
                               g$expr$8076$UGjMA)))
                         (g$syntax-violation$7473$UGjMA
                           '#f
                           '"invalid name"
                           g$stx$8072$UGjMA))))
                    g$ls/false$8074$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$8073$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$8073$UGjMA '(_ any any)))))
         g$stx$8072$UGjMA))))
   (g$trace-let/rec-syntax$7339$UGjMA
     g$trace-let/rec-syntax$10789$UGjMA
     (case-lambda
       ((g$who$8077$UGjMA)
        (case-lambda
          ((g$stx$8078$UGjMA)
           ((case-lambda
              ((g$t$8079$UGjMA)
               ((case-lambda
                  ((g$ls/false$8080$UGjMA)
                   (if g$ls/false$8080$UGjMA
                     (apply
                       (case-lambda
                         ((g$lhs*$8081$UGjMA
                            g$rhs*$8082$UGjMA
                            g$b$8083$UGjMA
                            g$b*$8084$UGjMA)
                          (if (g$valid-bound-ids?$7094$UGjMA g$lhs*$8081$UGjMA)
                            ((case-lambda
                               ((g$rhs*$8085$UGjMA)
                                (g$bless$7330$UGjMA
                                  (cons
                                    g$who$8077$UGjMA
                                    (cons
                                      (map list
                                           g$lhs*$8081$UGjMA
                                           g$rhs*$8085$UGjMA)
                                      (cons g$b$8083$UGjMA g$b*$8084$UGjMA))))))
                             (map (case-lambda
                                    ((g$lhs$8086$UGjMA g$rhs$8087$UGjMA)
                                     (list
                                       'make-traced-macro
                                       (list 'quote g$lhs$8086$UGjMA)
                                       g$rhs$8087$UGjMA)))
                                  g$lhs*$8081$UGjMA
                                  g$rhs*$8082$UGjMA))
                            (g$invalid-fmls-error$7332$UGjMA
                              g$stx$8078$UGjMA
                              g$lhs*$8081$UGjMA))))
                       g$ls/false$8080$UGjMA)
                     (g$syntax-violation$7473$UGjMA
                       '#f
                       '"invalid syntax"
                       g$t$8079$UGjMA))))
                (g$syntax-dispatch$7367$UGjMA
                  g$t$8079$UGjMA
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$8078$UGjMA))))))
   (g$trace-let-syntax-macro$7340$UGjMA
     g$trace-let-syntax-macro$10790$UGjMA
     (g$trace-let/rec-syntax$7339$UGjMA 'let-syntax))
   (g$trace-letrec-syntax-macro$7341$UGjMA
     g$trace-letrec-syntax-macro$10791$UGjMA
     (g$trace-let/rec-syntax$7339$UGjMA 'letrec-syntax))
   (g$guard-macro$7342$UGjMA
     g$guard-macro$10792$UGjMA
     (case-lambda
       ((g$x$8088$UGjMA)
        (letrec* ((g$gen-clauses$8089$UGjMA
                    (case-lambda
                      ((g$con$8101$UGjMA
                         g$outerk$8102$UGjMA
                         g$clause*$8103$UGjMA)
                       (letrec* ((g$f$8104$UGjMA
                                   (case-lambda
                                     ((g$x$8132$UGjMA g$k$8133$UGjMA)
                                      ((case-lambda
                                         ((g$t$8134$UGjMA)
                                          ((case-lambda
                                             ((g$ls/false$8135$UGjMA)
                                              (if g$ls/false$8135$UGjMA
                                                (apply
                                                  (case-lambda
                                                    ((g$e$8136$UGjMA
                                                       g$p$8137$UGjMA)
                                                     ((case-lambda
                                                        ((g$t$8138$UGjMA)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$8138$UGjMA
                                                               g$e$8136$UGjMA))
                                                           (list
                                                             'if
                                                             g$t$8138$UGjMA
                                                             (list
                                                               g$p$8137$UGjMA
                                                               g$t$8138$UGjMA)
                                                             g$k$8133$UGjMA))))
                                                      (gensym))))
                                                  g$ls/false$8135$UGjMA)
                                                ((case-lambda
                                                   ((g$t$8139$UGjMA)
                                                    ((case-lambda
                                                       ((g$ls/false$8140$UGjMA)
                                                        (if g$ls/false$8140$UGjMA
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8141$UGjMA)
                                                               ((case-lambda
                                                                  ((g$t$8142$UGjMA)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$8142$UGjMA
                                                                         g$e$8141$UGjMA))
                                                                     (list
                                                                       'if
                                                                       g$t$8142$UGjMA
                                                                       g$t$8142$UGjMA
                                                                       g$k$8133$UGjMA))))
                                                                (gensym))))
                                                            g$ls/false$8140$UGjMA)
                                                          ((case-lambda
                                                             ((g$t$8143$UGjMA)
                                                              ((case-lambda
                                                                 ((g$ls/false$8144$UGjMA)
                                                                  (if g$ls/false$8144$UGjMA
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$8145$UGjMA
                                                                           g$v$8146$UGjMA
                                                                           g$v*$8147$UGjMA)
                                                                         (list
                                                                           'if
                                                                           g$e$8145$UGjMA
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$8146$UGjMA
                                                                               g$v*$8147$UGjMA))
                                                                           g$k$8133$UGjMA)))
                                                                      g$ls/false$8144$UGjMA)
                                                                    ((case-lambda
                                                                       ((g$t$8148$UGjMA)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8149$UGjMA)
                                                                            (if g$ls/false$8149$UGjMA
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$7473$UGjMA
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$8132$UGjMA)))
                                                                                g$ls/false$8149$UGjMA)
                                                                              (g$syntax-violation$7473$UGjMA
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8148$UGjMA))))
                                                                         (g$syntax-dispatch$7367$UGjMA
                                                                           g$t$8148$UGjMA
                                                                           '_))))
                                                                     g$t$8143$UGjMA))))
                                                               (g$syntax-dispatch$7367$UGjMA
                                                                 g$t$8143$UGjMA
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$8139$UGjMA))))
                                                     (g$syntax-dispatch$7367$UGjMA
                                                       g$t$8139$UGjMA
                                                       '(any)))))
                                                 g$t$8134$UGjMA))))
                                           (g$syntax-dispatch$7367$UGjMA
                                             g$t$8134$UGjMA
                                             '(any #(scheme-id =>) any)))))
                                       g$x$8132$UGjMA))))
                                 (g$f*$8105$UGjMA
                                   (case-lambda
                                     ((g$x*$8112$UGjMA)
                                      ((case-lambda
                                         ((g$t$8113$UGjMA)
                                          ((case-lambda
                                             ((g$ls/false$8114$UGjMA)
                                              (if g$ls/false$8114$UGjMA
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$8101$UGjMA)
                                                       '#t)))
                                                  g$ls/false$8114$UGjMA)
                                                ((case-lambda
                                                   ((g$t$8115$UGjMA)
                                                    ((case-lambda
                                                       ((g$ls/false$8116$UGjMA)
                                                        (if g$ls/false$8116$UGjMA
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8117$UGjMA
                                                                 g$e*$8118$UGjMA)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$8117$UGjMA
                                                                     g$e*$8118$UGjMA))
                                                                 '#f)))
                                                            g$ls/false$8116$UGjMA)
                                                          ((case-lambda
                                                             ((g$t$8119$UGjMA)
                                                              ((case-lambda
                                                                 ((g$ls/false$8120$UGjMA)
                                                                  (if g$ls/false$8120$UGjMA
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$8121$UGjMA
                                                                           g$cls*$8122$UGjMA)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$8105$UGjMA
                                                                                g$cls*$8122$UGjMA)))
                                                                           (case-lambda
                                                                             ((g$e$8125$UGjMA
                                                                                g$g$8126$UGjMA)
                                                                              ((case-lambda
                                                                                 ((g$g$8127$UGjMA
                                                                                    g$e$8128$UGjMA)
                                                                                  (values
                                                                                    (g$f$8104$UGjMA
                                                                                      g$cls$8121$UGjMA
                                                                                      g$e$8128$UGjMA)
                                                                                    g$g$8127$UGjMA)))
                                                                               g$g$8126$UGjMA
                                                                               g$e$8125$UGjMA))))))
                                                                      g$ls/false$8120$UGjMA)
                                                                    ((case-lambda
                                                                       ((g$t$8129$UGjMA)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8130$UGjMA)
                                                                            (if g$ls/false$8130$UGjMA
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$8131$UGjMA)
                                                                                   (g$syntax-violation$7473$UGjMA
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$8131$UGjMA)))
                                                                                g$ls/false$8130$UGjMA)
                                                                              (g$syntax-violation$7473$UGjMA
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8129$UGjMA))))
                                                                         (g$syntax-dispatch$7367$UGjMA
                                                                           g$t$8129$UGjMA
                                                                           'any))))
                                                                     g$t$8119$UGjMA))))
                                                               (g$syntax-dispatch$7367$UGjMA
                                                                 g$t$8119$UGjMA
                                                                 '(any .
                                                                       any)))))
                                                           g$t$8115$UGjMA))))
                                                     (g$syntax-dispatch$7367$UGjMA
                                                       g$t$8115$UGjMA
                                                       '((#(scheme-id else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$8113$UGjMA))))
                                           (g$syntax-dispatch$7367$UGjMA
                                             g$t$8113$UGjMA
                                             '()))))
                                       g$x*$8112$UGjMA)))))
                         (call-with-values
                           (case-lambda
                             (() (g$f*$8105$UGjMA g$clause*$8103$UGjMA)))
                           (case-lambda
                             ((g$code$8108$UGjMA g$raisek$8109$UGjMA)
                              ((case-lambda
                                 ((g$raisek$8110$UGjMA g$code$8111$UGjMA)
                                  (if g$raisek$8110$UGjMA
                                    (list g$outerk$8102$UGjMA g$code$8111$UGjMA)
                                    g$code$8111$UGjMA)))
                               g$raisek$8109$UGjMA
                               g$code$8108$UGjMA)))))))))
          ((case-lambda
             ((g$t$8090$UGjMA)
              ((case-lambda
                 ((g$ls/false$8091$UGjMA)
                  (if (if g$ls/false$8091$UGjMA
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$8092$UGjMA
                                 g$clause*$8093$UGjMA
                                 g$b$8094$UGjMA
                                 g$b*$8095$UGjMA)
                               (g$id?$7089$UGjMA g$con$8092$UGjMA)))
                            g$ls/false$8091$UGjMA))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$8096$UGjMA
                           g$clause*$8097$UGjMA
                           g$b$8098$UGjMA
                           g$b*$8099$UGjMA)
                         ((case-lambda
                            ((g$outerk$8100$UGjMA)
                             (g$bless$7330$UGjMA
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$8100$UGjMA)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$8096$UGjMA)
                                           (g$gen-clauses$8089$UGjMA
                                             g$con$8096$UGjMA
                                             g$outerk$8100$UGjMA
                                             g$clause*$8097$UGjMA))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$8098$UGjMA
                                                 g$b*$8099$UGjMA))))))))))))
                          (gensym))))
                      g$ls/false$8091$UGjMA)
                    (g$syntax-violation$7473$UGjMA
                      '#f
                      '"invalid syntax"
                      g$t$8090$UGjMA))))
               (g$syntax-dispatch$7367$UGjMA
                 g$t$8090$UGjMA
                 '(_ (any . each-any) any . each-any)))))
           g$x$8088$UGjMA)))))
   (g$define-enumeration-macro$7343$UGjMA
     g$define-enumeration-macro$10793$UGjMA
     (case-lambda
       ((g$stx$8150$UGjMA)
        (letrec* ((g$set?$8151$UGjMA
                    (case-lambda
                      ((g$x$8164$UGjMA)
                       ((case-lambda
                          ((g$t$8165$UGjMA)
                           (if g$t$8165$UGjMA
                             g$t$8165$UGjMA
                             (begin
                               '#f
                               (if (not (memq
                                          (car g$x$8164$UGjMA)
                                          (cdr g$x$8164$UGjMA)))
                                 (begin
                                   '#f
                                   (g$set?$8151$UGjMA (cdr g$x$8164$UGjMA)))
                                 '#f)))))
                        (null? g$x$8164$UGjMA)))))
                  (g$remove-dups$8152$UGjMA
                    (case-lambda
                      ((g$ls$8163$UGjMA)
                       (if (null? g$ls$8163$UGjMA)
                         '()
                         (cons
                           (car g$ls$8163$UGjMA)
                           (g$remove-dups$8152$UGjMA
                             (g$remq$5372$UGjMA
                               (car g$ls$8163$UGjMA)
                               (cdr g$ls$8163$UGjMA)))))))))
          ((case-lambda
             ((g$t$8153$UGjMA)
              ((case-lambda
                 ((g$ls/false$8154$UGjMA)
                  (if (if g$ls/false$8154$UGjMA
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$8155$UGjMA
                                 g$id*$8156$UGjMA
                                 g$maker$8157$UGjMA)
                               (if (g$id?$7089$UGjMA g$name$8155$UGjMA)
                                 (if (g$id?$7089$UGjMA g$maker$8157$UGjMA)
                                   (begin
                                     '#f
                                     (g$for-all$5365$UGjMA
                                       g$id?$7089$UGjMA
                                       g$id*$8156$UGjMA))
                                   '#f)
                                 '#f)))
                            g$ls/false$8154$UGjMA))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$8158$UGjMA g$id*$8159$UGjMA g$maker$8160$UGjMA)
                         ((case-lambda
                            ((g$name*$8161$UGjMA g$mk$8162$UGjMA)
                             (g$bless$7330$UGjMA
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$8162$UGjMA
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list 'quote g$name*$8161$UGjMA))))
                                 (list
                                   'define-syntax
                                   g$name$8158$UGjMA
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list 'quote g$name*$8161$UGjMA))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list 'quote g$name$8158$UGjMA)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$8160$UGjMA
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8160$UGjMA)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$8161$UGjMA))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8160$UGjMA)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$8162$UGjMA
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$8152$UGjMA
                            (g$syntax->datum$7476$UGjMA g$id*$8159$UGjMA))
                          (gensym))))
                      g$ls/false$8154$UGjMA)
                    (g$syntax-violation$7473$UGjMA
                      '#f
                      '"invalid syntax"
                      g$t$8153$UGjMA))))
               (g$syntax-dispatch$7367$UGjMA
                 g$t$8153$UGjMA
                 '(_ any each-any any)))))
           g$stx$8150$UGjMA)))))
   (g$time-macro$7344$UGjMA
     g$time-macro$10794$UGjMA
     (case-lambda
       ((g$stx$8166$UGjMA)
        ((case-lambda
           ((g$t$8167$UGjMA)
            ((case-lambda
               ((g$ls/false$8168$UGjMA)
                (if g$ls/false$8168$UGjMA
                  (apply
                    (case-lambda
                      ((g$expr$8169$UGjMA)
                       ((case-lambda
                          ((g$str$8170$UGjMA)
                           (g$bless$7330$UGjMA
                             (list
                               'time-it
                               g$str$8170$UGjMA
                               (list 'lambda '() g$expr$8169$UGjMA)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$6095$UGjMA)))
                          (case-lambda
                            ((g$p$8173$UGjMA g$e$8174$UGjMA)
                             ((case-lambda
                                ((g$e$8175$UGjMA g$p$8176$UGjMA)
                                 (begin
                                   (write
                                     (g$syntax->datum$7476$UGjMA
                                       g$expr$8169$UGjMA)
                                     g$p$8176$UGjMA)
                                   (g$e$8175$UGjMA))))
                              g$e$8174$UGjMA
                              g$p$8173$UGjMA)))))))
                    g$ls/false$8168$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$8167$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$8167$UGjMA '(_ any)))))
         g$stx$8166$UGjMA))))
   (g$delay-macro$7345$UGjMA
     g$delay-macro$10795$UGjMA
     (case-lambda
       ((g$stx$8177$UGjMA)
        ((case-lambda
           ((g$t$8178$UGjMA)
            ((case-lambda
               ((g$ls/false$8179$UGjMA)
                (if g$ls/false$8179$UGjMA
                  (apply
                    (case-lambda
                      ((g$expr$8180$UGjMA)
                       (g$bless$7330$UGjMA
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$8180$UGjMA)))))
                    g$ls/false$8179$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$8178$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$8178$UGjMA '(_ any)))))
         g$stx$8177$UGjMA))))
   (g$assert-macro$7346$UGjMA
     g$assert-macro$10796$UGjMA
     (case-lambda
       ((g$stx$8181$UGjMA)
        ((case-lambda
           ((g$t$8182$UGjMA)
            ((case-lambda
               ((g$ls/false$8183$UGjMA)
                (if g$ls/false$8183$UGjMA
                  (apply
                    (case-lambda
                      ((g$expr$8184$UGjMA)
                       (g$bless$7330$UGjMA
                         (list
                           'unless
                           g$expr$8184$UGjMA
                           (list
                             'assertion-violation
                             ''assert
                             '"assertion failed"
                             (list 'quote g$expr$8184$UGjMA))))))
                    g$ls/false$8183$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$8182$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$8182$UGjMA '(_ any)))))
         g$stx$8181$UGjMA))))
   (g$endianness-macro$7347$UGjMA
     g$endianness-macro$10797$UGjMA
     (case-lambda
       ((g$stx$8185$UGjMA)
        ((case-lambda
           ((g$t$8186$UGjMA)
            ((case-lambda
               ((g$ls/false$8187$UGjMA)
                (if g$ls/false$8187$UGjMA
                  (apply
                    (case-lambda
                      ((g$e$8188$UGjMA)
                       ((case-lambda
                          ((g$t$8189$UGjMA)
                           (if (eqv? g$t$8189$UGjMA 'little)
                             (g$bless$7330$UGjMA ''little)
                             (if (eqv? g$t$8189$UGjMA 'big)
                               (g$bless$7330$UGjMA ''big)
                               (g$syntax-violation$7473$UGjMA
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$8185$UGjMA)))))
                        (g$syntax->datum$7476$UGjMA g$e$8188$UGjMA))))
                    g$ls/false$8187$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$8186$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$8186$UGjMA '(_ any)))))
         g$stx$8185$UGjMA))))
   (g$identifier-syntax-macro$7348$UGjMA
     g$identifier-syntax-macro$10798$UGjMA
     (case-lambda
       ((g$stx$8190$UGjMA)
        ((case-lambda
           ((g$t$8191$UGjMA)
            ((case-lambda
               ((g$ls/false$8192$UGjMA)
                (if g$ls/false$8192$UGjMA
                  (apply
                    (case-lambda
                      ((g$expr$8193$UGjMA)
                       (g$bless$7330$UGjMA
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$8193$UGjMA))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$8193$UGjMA)
                                   '(#'(e* ...))))))))))
                    g$ls/false$8192$UGjMA)
                  ((case-lambda
                     ((g$t$8194$UGjMA)
                      ((case-lambda
                         ((g$ls/false$8195$UGjMA)
                          (if (if g$ls/false$8195$UGjMA
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$8196$UGjMA
                                         g$expr1$8197$UGjMA
                                         g$id2$8198$UGjMA
                                         g$expr2$8199$UGjMA
                                         g$expr3$8200$UGjMA)
                                       (if (g$id?$7089$UGjMA g$id1$8196$UGjMA)
                                         (if (g$id?$7089$UGjMA g$id2$8198$UGjMA)
                                           (begin
                                             '#f
                                             (g$id?$7089$UGjMA
                                               g$expr2$8199$UGjMA))
                                           '#f)
                                         '#f)))
                                    g$ls/false$8195$UGjMA))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$8201$UGjMA
                                   g$expr1$8202$UGjMA
                                   g$id2$8203$UGjMA
                                   g$expr2$8204$UGjMA
                                   g$expr3$8205$UGjMA)
                                 (g$bless$7330$UGjMA
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list 'syntax g$expr1$8202$UGjMA))
                                         (list
                                           (list 'set! 'id g$expr2$8204$UGjMA)
                                           (list 'syntax g$expr3$8205$UGjMA))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$8202$UGjMA
                                               '(e* ...))))))))))
                              g$ls/false$8195$UGjMA)
                            (g$syntax-violation$7473$UGjMA
                              '#f
                              '"invalid syntax"
                              g$t$8194$UGjMA))))
                       (g$syntax-dispatch$7367$UGjMA
                         g$t$8194$UGjMA
                         '(_ (any any) ((#(scheme-id set!) any any) any))))))
                   g$t$8191$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$8191$UGjMA '(_ any)))))
         g$stx$8190$UGjMA))))
   (g$do-macro$7349$UGjMA
     g$do-macro$10799$UGjMA
     (case-lambda
       ((g$stx$8206$UGjMA)
        (letrec* ((g$bind$8207$UGjMA
                    (case-lambda
                      ((g$x$8219$UGjMA)
                       ((case-lambda
                          ((g$t$8220$UGjMA)
                           ((case-lambda
                              ((g$ls/false$8221$UGjMA)
                               (if g$ls/false$8221$UGjMA
                                 (apply
                                   (case-lambda
                                     ((g$x$8222$UGjMA g$init$8223$UGjMA)
                                      (list
                                        g$x$8222$UGjMA
                                        g$init$8223$UGjMA
                                        g$x$8222$UGjMA)))
                                   g$ls/false$8221$UGjMA)
                                 ((case-lambda
                                    ((g$t$8224$UGjMA)
                                     ((case-lambda
                                        ((g$ls/false$8225$UGjMA)
                                         (if g$ls/false$8225$UGjMA
                                           (apply
                                             (case-lambda
                                               ((g$x$8226$UGjMA
                                                  g$init$8227$UGjMA
                                                  g$step$8228$UGjMA)
                                                (list
                                                  g$x$8226$UGjMA
                                                  g$init$8227$UGjMA
                                                  g$step$8228$UGjMA)))
                                             g$ls/false$8225$UGjMA)
                                           ((case-lambda
                                              ((g$t$8229$UGjMA)
                                               ((case-lambda
                                                  ((g$ls/false$8230$UGjMA)
                                                   (if g$ls/false$8230$UGjMA
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$7473$UGjMA
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$8206$UGjMA)))
                                                       g$ls/false$8230$UGjMA)
                                                     (g$syntax-violation$7473$UGjMA
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8229$UGjMA))))
                                                (g$syntax-dispatch$7367$UGjMA
                                                  g$t$8229$UGjMA
                                                  '_))))
                                            g$t$8224$UGjMA))))
                                      (g$syntax-dispatch$7367$UGjMA
                                        g$t$8224$UGjMA
                                        '(any any any)))))
                                  g$t$8220$UGjMA))))
                            (g$syntax-dispatch$7367$UGjMA
                              g$t$8220$UGjMA
                              '(any any)))))
                        g$x$8219$UGjMA)))))
          ((case-lambda
             ((g$t$8208$UGjMA)
              ((case-lambda
                 ((g$ls/false$8209$UGjMA)
                  (if g$ls/false$8209$UGjMA
                    (apply
                      (case-lambda
                        ((g$binding*$8210$UGjMA
                           g$test$8211$UGjMA
                           g$expr*$8212$UGjMA
                           g$command*$8213$UGjMA)
                         ((case-lambda
                            ((g$t$8214$UGjMA)
                             ((case-lambda
                                ((g$ls/false$8215$UGjMA)
                                 (if g$ls/false$8215$UGjMA
                                   (apply
                                     (case-lambda
                                       ((g$x*$8216$UGjMA
                                          g$init*$8217$UGjMA
                                          g$step*$8218$UGjMA)
                                        (if (g$valid-bound-ids?$7094$UGjMA
                                              g$x*$8216$UGjMA)
                                          (g$bless$7330$UGjMA
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$8216$UGjMA
                                                    (list
                                                      'if
                                                      g$test$8211$UGjMA
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$8212$UGjMA))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$8213$UGjMA
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$8218$UGjMA))))))))
                                              (cons 'loop g$init*$8217$UGjMA)))
                                          (g$syntax-violation$7473$UGjMA
                                            '#f
                                            '"invalid bindings"
                                            g$stx$8206$UGjMA))))
                                     g$ls/false$8215$UGjMA)
                                   (g$syntax-violation$7473$UGjMA
                                     '#f
                                     '"invalid syntax"
                                     g$t$8214$UGjMA))))
                              (g$syntax-dispatch$7367$UGjMA
                                g$t$8214$UGjMA
                                '#(each (any any any))))))
                          (map g$bind$8207$UGjMA g$binding*$8210$UGjMA))))
                      g$ls/false$8209$UGjMA)
                    (g$syntax-violation$7473$UGjMA
                      '#f
                      '"invalid syntax"
                      g$t$8208$UGjMA))))
               (g$syntax-dispatch$7367$UGjMA
                 g$t$8208$UGjMA
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$8206$UGjMA)))))
   (g$let*-macro$7350$UGjMA
     g$let*-macro$10800$UGjMA
     (case-lambda
       ((g$stx$8231$UGjMA)
        ((case-lambda
           ((g$t$8232$UGjMA)
            ((case-lambda
               ((g$ls/false$8233$UGjMA)
                (if (if g$ls/false$8233$UGjMA
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$8234$UGjMA
                               g$rhs*$8235$UGjMA
                               g$b$8236$UGjMA
                               g$b*$8237$UGjMA)
                             (g$for-all$5365$UGjMA
                               g$id?$7089$UGjMA
                               g$lhs*$8234$UGjMA)))
                          g$ls/false$8233$UGjMA))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$8238$UGjMA
                         g$rhs*$8239$UGjMA
                         g$b$8240$UGjMA
                         g$b*$8241$UGjMA)
                       (g$bless$7330$UGjMA
                         ((letrec ((g$f$8242$UGjMA
                                     (case-lambda
                                       ((g$x*$8243$UGjMA)
                                        (if (null? g$x*$8243$UGjMA)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$8240$UGjMA
                                                g$b*$8241$UGjMA)))
                                          (list
                                            'let
                                            (list (car g$x*$8243$UGjMA))
                                            (g$f$8242$UGjMA
                                              (cdr g$x*$8243$UGjMA))))))))
                            g$f$8242$UGjMA)
                          (map list g$lhs*$8238$UGjMA g$rhs*$8239$UGjMA)))))
                    g$ls/false$8233$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$8232$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$8232$UGjMA
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8231$UGjMA))))
   (g$or-macro$7351$UGjMA
     g$or-macro$10801$UGjMA
     (case-lambda
       ((g$stx$8244$UGjMA)
        ((case-lambda
           ((g$t$8245$UGjMA)
            ((case-lambda
               ((g$ls/false$8246$UGjMA)
                (if g$ls/false$8246$UGjMA
                  (apply (case-lambda (() '#f)) g$ls/false$8246$UGjMA)
                  ((case-lambda
                     ((g$t$8247$UGjMA)
                      ((case-lambda
                         ((g$ls/false$8248$UGjMA)
                          (if g$ls/false$8248$UGjMA
                            (apply
                              (case-lambda
                                ((g$e$8249$UGjMA g$e*$8250$UGjMA)
                                 (g$bless$7330$UGjMA
                                   ((letrec ((g$f$8251$UGjMA
                                               (case-lambda
                                                 ((g$e$8252$UGjMA
                                                    g$e*$8253$UGjMA)
                                                  (if (null? g$e*$8253$UGjMA)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8252$UGjMA)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$8252$UGjMA))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$8251$UGjMA
                                                          (car g$e*$8253$UGjMA)
                                                          (cdr g$e*$8253$UGjMA)))))))))
                                      g$f$8251$UGjMA)
                                    g$e$8249$UGjMA
                                    g$e*$8250$UGjMA))))
                              g$ls/false$8248$UGjMA)
                            (g$syntax-violation$7473$UGjMA
                              '#f
                              '"invalid syntax"
                              g$t$8247$UGjMA))))
                       (g$syntax-dispatch$7367$UGjMA
                         g$t$8247$UGjMA
                         '(_ any . each-any)))))
                   g$t$8245$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$8245$UGjMA '(_)))))
         g$stx$8244$UGjMA))))
   (g$and-macro$7352$UGjMA
     g$and-macro$10802$UGjMA
     (case-lambda
       ((g$stx$8254$UGjMA)
        ((case-lambda
           ((g$t$8255$UGjMA)
            ((case-lambda
               ((g$ls/false$8256$UGjMA)
                (if g$ls/false$8256$UGjMA
                  (apply (case-lambda (() '#t)) g$ls/false$8256$UGjMA)
                  ((case-lambda
                     ((g$t$8257$UGjMA)
                      ((case-lambda
                         ((g$ls/false$8258$UGjMA)
                          (if g$ls/false$8258$UGjMA
                            (apply
                              (case-lambda
                                ((g$e$8259$UGjMA g$e*$8260$UGjMA)
                                 (g$bless$7330$UGjMA
                                   ((letrec ((g$f$8261$UGjMA
                                               (case-lambda
                                                 ((g$e$8262$UGjMA
                                                    g$e*$8263$UGjMA)
                                                  (if (null? g$e*$8263$UGjMA)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8262$UGjMA)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$8262$UGjMA
                                                        (cons
                                                          (g$f$8261$UGjMA
                                                            (car g$e*$8263$UGjMA)
                                                            (cdr g$e*$8263$UGjMA))
                                                          '(#f)))))))))
                                      g$f$8261$UGjMA)
                                    g$e$8259$UGjMA
                                    g$e*$8260$UGjMA))))
                              g$ls/false$8258$UGjMA)
                            (g$syntax-violation$7473$UGjMA
                              '#f
                              '"invalid syntax"
                              g$t$8257$UGjMA))))
                       (g$syntax-dispatch$7367$UGjMA
                         g$t$8257$UGjMA
                         '(_ any . each-any)))))
                   g$t$8255$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$8255$UGjMA '(_)))))
         g$stx$8254$UGjMA))))
   (g$cond-macro$7353$UGjMA
     g$cond-macro$10803$UGjMA
     (case-lambda
       ((g$stx$8264$UGjMA)
        ((case-lambda
           ((g$t$8265$UGjMA)
            ((case-lambda
               ((g$ls/false$8266$UGjMA)
                (if g$ls/false$8266$UGjMA
                  (apply
                    (case-lambda
                      ((g$cls$8267$UGjMA g$cls*$8268$UGjMA)
                       (g$bless$7330$UGjMA
                         ((letrec ((g$f$8269$UGjMA
                                     (case-lambda
                                       ((g$cls$8270$UGjMA g$cls*$8271$UGjMA)
                                        (if (null? g$cls*$8271$UGjMA)
                                          ((case-lambda
                                             ((g$t$8272$UGjMA)
                                              ((case-lambda
                                                 ((g$ls/false$8273$UGjMA)
                                                  (if g$ls/false$8273$UGjMA
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8274$UGjMA
                                                           g$e*$8275$UGjMA)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$8274$UGjMA
                                                             g$e*$8275$UGjMA))))
                                                      g$ls/false$8273$UGjMA)
                                                    ((case-lambda
                                                       ((g$t$8276$UGjMA)
                                                        ((case-lambda
                                                           ((g$ls/false$8277$UGjMA)
                                                            (if g$ls/false$8277$UGjMA
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8278$UGjMA
                                                                     g$p$8279$UGjMA)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8278$UGjMA))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8279$UGjMA
                                                                         '(t))))))
                                                                g$ls/false$8277$UGjMA)
                                                              ((case-lambda
                                                                 ((g$t$8280$UGjMA)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8281$UGjMA)
                                                                      (if g$ls/false$8281$UGjMA
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8282$UGjMA)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$8282$UGjMA
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$8281$UGjMA)
                                                                        ((case-lambda
                                                                           ((g$t$8283$UGjMA)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8284$UGjMA)
                                                                                (if g$ls/false$8284$UGjMA
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8285$UGjMA
                                                                                         g$e*$8286$UGjMA)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8285$UGjMA
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8286$UGjMA))))
                                                                                    g$ls/false$8284$UGjMA)
                                                                                  ((case-lambda
                                                                                     ((g$t$8287$UGjMA)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8288$UGjMA)
                                                                                          (if g$ls/false$8288$UGjMA
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7473$UGjMA
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8264$UGjMA)))
                                                                                              g$ls/false$8288$UGjMA)
                                                                                            (g$syntax-violation$7473$UGjMA
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8287$UGjMA))))
                                                                                       (g$syntax-dispatch$7367$UGjMA
                                                                                         g$t$8287$UGjMA
                                                                                         '_))))
                                                                                   g$t$8283$UGjMA))))
                                                                             (g$syntax-dispatch$7367$UGjMA
                                                                               g$t$8283$UGjMA
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8280$UGjMA))))
                                                                   (g$syntax-dispatch$7367$UGjMA
                                                                     g$t$8280$UGjMA
                                                                     '(any)))))
                                                               g$t$8276$UGjMA))))
                                                         (g$syntax-dispatch$7367$UGjMA
                                                           g$t$8276$UGjMA
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8272$UGjMA))))
                                               (g$syntax-dispatch$7367$UGjMA
                                                 g$t$8272$UGjMA
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8270$UGjMA)
                                          ((case-lambda
                                             ((g$t$8289$UGjMA)
                                              ((case-lambda
                                                 ((g$ls/false$8290$UGjMA)
                                                  (if g$ls/false$8290$UGjMA
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8291$UGjMA
                                                           g$e*$8292$UGjMA)
                                                         (g$syntax-violation$7473$UGjMA
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$8264$UGjMA)))
                                                      g$ls/false$8290$UGjMA)
                                                    ((case-lambda
                                                       ((g$t$8293$UGjMA)
                                                        ((case-lambda
                                                           ((g$ls/false$8294$UGjMA)
                                                            (if g$ls/false$8294$UGjMA
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8295$UGjMA
                                                                     g$p$8296$UGjMA)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8295$UGjMA))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8296$UGjMA
                                                                         '(t))
                                                                       (g$f$8269$UGjMA
                                                                         (car g$cls*$8271$UGjMA)
                                                                         (cdr g$cls*$8271$UGjMA))))))
                                                                g$ls/false$8294$UGjMA)
                                                              ((case-lambda
                                                                 ((g$t$8297$UGjMA)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8298$UGjMA)
                                                                      (if g$ls/false$8298$UGjMA
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8299$UGjMA)
                                                                             (list
                                                                               'or
                                                                               g$e$8299$UGjMA
                                                                               (g$f$8269$UGjMA
                                                                                 (car g$cls*$8271$UGjMA)
                                                                                 (cdr g$cls*$8271$UGjMA)))))
                                                                          g$ls/false$8298$UGjMA)
                                                                        ((case-lambda
                                                                           ((g$t$8300$UGjMA)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8301$UGjMA)
                                                                                (if g$ls/false$8301$UGjMA
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8302$UGjMA
                                                                                         g$e*$8303$UGjMA)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8302$UGjMA
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8303$UGjMA)
                                                                                         (g$f$8269$UGjMA
                                                                                           (car g$cls*$8271$UGjMA)
                                                                                           (cdr g$cls*$8271$UGjMA)))))
                                                                                    g$ls/false$8301$UGjMA)
                                                                                  ((case-lambda
                                                                                     ((g$t$8304$UGjMA)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8305$UGjMA)
                                                                                          (if g$ls/false$8305$UGjMA
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7473$UGjMA
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8264$UGjMA)))
                                                                                              g$ls/false$8305$UGjMA)
                                                                                            (g$syntax-violation$7473$UGjMA
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8304$UGjMA))))
                                                                                       (g$syntax-dispatch$7367$UGjMA
                                                                                         g$t$8304$UGjMA
                                                                                         '_))))
                                                                                   g$t$8300$UGjMA))))
                                                                             (g$syntax-dispatch$7367$UGjMA
                                                                               g$t$8300$UGjMA
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8297$UGjMA))))
                                                                   (g$syntax-dispatch$7367$UGjMA
                                                                     g$t$8297$UGjMA
                                                                     '(any)))))
                                                               g$t$8293$UGjMA))))
                                                         (g$syntax-dispatch$7367$UGjMA
                                                           g$t$8293$UGjMA
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8289$UGjMA))))
                                               (g$syntax-dispatch$7367$UGjMA
                                                 g$t$8289$UGjMA
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8270$UGjMA))))))
                            g$f$8269$UGjMA)
                          g$cls$8267$UGjMA
                          g$cls*$8268$UGjMA))))
                    g$ls/false$8266$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$8265$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$8265$UGjMA
               '(_ any . each-any)))))
         g$stx$8264$UGjMA))))
   (g$do-include$7354$UGjMA
     g$do-include$10804$UGjMA
     (case-lambda
       ((g$stx$8306$UGjMA g$id$8307$UGjMA g$filename$8308$UGjMA)
        ((case-lambda
           ((g$filename$8309$UGjMA)
            (begin
              (if (if (string? g$filename$8309$UGjMA)
                    (begin '#f (g$id?$7089$UGjMA g$id$8307$UGjMA))
                    '#f)
                (void)
                (g$syntax-violation$7473$UGjMA
                  '#f
                  '"invalid syntax"
                  g$stx$8306$UGjMA))
              (cons
                (g$bless$7330$UGjMA 'begin)
                (with-input-from-file
                  g$filename$8309$UGjMA
                  (case-lambda
                    (()
                     ((letrec ((g$f$8310$UGjMA
                                 (case-lambda
                                   ((g$ls$8311$UGjMA)
                                    ((case-lambda
                                       ((g$x$8312$UGjMA)
                                        (if (eof-object? g$x$8312$UGjMA)
                                          (reverse g$ls$8311$UGjMA)
                                          (g$f$8310$UGjMA
                                            (cons
                                              (g$datum->stx$7072$UGjMA
                                                g$id$8307$UGjMA
                                                g$x$8312$UGjMA)
                                              g$ls$8311$UGjMA)))))
                                     (read-annotated))))))
                        g$f$8310$UGjMA)
                      '()))))))))
         (g$stx->datum$7100$UGjMA g$filename$8308$UGjMA)))))
   (g$include-macro$7355$UGjMA
     g$include-macro$10805$UGjMA
     (case-lambda
       ((g$e$8313$UGjMA)
        ((case-lambda
           ((g$t$8314$UGjMA)
            ((case-lambda
               ((g$ls/false$8315$UGjMA)
                (if g$ls/false$8315$UGjMA
                  (apply
                    (case-lambda
                      ((g$id$8316$UGjMA g$filename$8317$UGjMA)
                       (g$do-include$7354$UGjMA
                         g$e$8313$UGjMA
                         g$id$8316$UGjMA
                         g$filename$8317$UGjMA)))
                    g$ls/false$8315$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$8314$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$8314$UGjMA '(any any)))))
         g$e$8313$UGjMA))))
   (g$include-into-macro$7356$UGjMA
     g$include-into-macro$10806$UGjMA
     (case-lambda
       ((g$e$8318$UGjMA)
        ((case-lambda
           ((g$t$8319$UGjMA)
            ((case-lambda
               ((g$ls/false$8320$UGjMA)
                (if g$ls/false$8320$UGjMA
                  (apply
                    (case-lambda
                      ((g$id$8321$UGjMA g$filename$8322$UGjMA)
                       (g$do-include$7354$UGjMA
                         g$e$8318$UGjMA
                         g$id$8321$UGjMA
                         g$filename$8322$UGjMA)))
                    g$ls/false$8320$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$8319$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$8319$UGjMA '(_ any any)))))
         g$e$8318$UGjMA))))
   (g$syntax-rules-macro$7357$UGjMA
     g$syntax-rules-macro$10807$UGjMA
     (case-lambda
       ((g$e$8323$UGjMA)
        ((case-lambda
           ((g$t$8324$UGjMA)
            ((case-lambda
               ((g$ls/false$8325$UGjMA)
                (if g$ls/false$8325$UGjMA
                  (apply
                    (case-lambda
                      ((g$lits$8326$UGjMA g$pat*$8327$UGjMA g$tmp*$8328$UGjMA)
                       (begin
                         (g$verify-literals$7370$UGjMA
                           g$lits$8326$UGjMA
                           g$e$8323$UGjMA)
                         (g$bless$7330$UGjMA
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$8326$UGjMA
                                   (map (case-lambda
                                          ((g$pat$8329$UGjMA g$tmp$8330$UGjMA)
                                           ((case-lambda
                                              ((g$t$8331$UGjMA)
                                               ((case-lambda
                                                  ((g$ls/false$8332$UGjMA)
                                                   (if g$ls/false$8332$UGjMA
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$8333$UGjMA)
                                                          (list
                                                            (cons
                                                              'g
                                                              g$rest$8333$UGjMA)
                                                            (list
                                                              'syntax
                                                              g$tmp$8330$UGjMA))))
                                                       g$ls/false$8332$UGjMA)
                                                     ((case-lambda
                                                        ((g$t$8334$UGjMA)
                                                         ((case-lambda
                                                            ((g$ls/false$8335$UGjMA)
                                                             (if g$ls/false$8335$UGjMA
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$7473$UGjMA
                                                                      '#f
                                                                      '"invalid syntax-rules pattern"
                                                                      g$e$8323$UGjMA
                                                                      g$pat$8329$UGjMA)))
                                                                 g$ls/false$8335$UGjMA)
                                                               (g$syntax-violation$7473$UGjMA
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$8334$UGjMA))))
                                                          (g$syntax-dispatch$7367$UGjMA
                                                            g$t$8334$UGjMA
                                                            '_))))
                                                      g$t$8331$UGjMA))))
                                                (g$syntax-dispatch$7367$UGjMA
                                                  g$t$8331$UGjMA
                                                  '(_ . any)))))
                                            g$pat$8329$UGjMA)))
                                        g$pat*$8327$UGjMA
                                        g$tmp*$8328$UGjMA)))))))))
                    g$ls/false$8325$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$8324$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$8324$UGjMA
               '(_ each-any . #(each (any any)))))))
         g$e$8323$UGjMA))))
   (g$quasiquote-macro$7358$UGjMA
     g$quasiquote-macro$10808$UGjMA
     ((case-lambda
        (()
         (letrec* ((g$datum$8336$UGjMA
                     (case-lambda
                       ((g$x$8467$UGjMA)
                        (list
                          (g$scheme-stx$7310$UGjMA 'quote)
                          (g$mkstx$7077$UGjMA g$x$8467$UGjMA '() '() '())))))
                   (g$quasicons*$8352$UGjMA
                     (case-lambda
                       ((g$x$8463$UGjMA g$y$8464$UGjMA)
                        ((letrec ((g$f$8465$UGjMA
                                    (case-lambda
                                      ((g$x$8466$UGjMA)
                                       (if (null? g$x$8466$UGjMA)
                                         g$y$8464$UGjMA
                                         (g$quasicons$8353$UGjMA
                                           (car g$x$8466$UGjMA)
                                           (g$f$8465$UGjMA
                                             (cdr g$x$8466$UGjMA))))))))
                           g$f$8465$UGjMA)
                         g$x$8463$UGjMA))))
                   (g$quasicons$8353$UGjMA
                     (case-lambda
                       ((g$x$8444$UGjMA g$y$8445$UGjMA)
                        ((case-lambda
                           ((g$t$8446$UGjMA)
                            ((case-lambda
                               ((g$ls/false$8447$UGjMA)
                                (if g$ls/false$8447$UGjMA
                                  (apply
                                    (case-lambda
                                      ((g$dy$8448$UGjMA)
                                       ((case-lambda
                                          ((g$t$8449$UGjMA)
                                           ((case-lambda
                                              ((g$ls/false$8450$UGjMA)
                                               (if g$ls/false$8450$UGjMA
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$8451$UGjMA)
                                                      (list
                                                        (g$scheme-stx$7310$UGjMA
                                                          'quote)
                                                        (cons
                                                          g$dx$8451$UGjMA
                                                          g$dy$8448$UGjMA))))
                                                   g$ls/false$8450$UGjMA)
                                                 ((case-lambda
                                                    ((g$t$8452$UGjMA)
                                                     ((case-lambda
                                                        ((g$ls/false$8453$UGjMA)
                                                         (if g$ls/false$8453$UGjMA
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$8454$UGjMA)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8455$UGjMA)
                                                                        (if g$ls/false$8455$UGjMA
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$7310$UGjMA
                                                                                   'list)
                                                                                 g$x$8444$UGjMA)))
                                                                            g$ls/false$8455$UGjMA)
                                                                          ((case-lambda
                                                                             ((g$t$8456$UGjMA)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8457$UGjMA)
                                                                                  (if g$ls/false$8457$UGjMA
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$7310$UGjMA
                                                                                             'cons)
                                                                                           g$x$8444$UGjMA
                                                                                           g$y$8445$UGjMA)))
                                                                                      g$ls/false$8457$UGjMA)
                                                                                    (g$syntax-violation$7473$UGjMA
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8456$UGjMA))))
                                                                               (g$syntax-dispatch$7367$UGjMA
                                                                                 g$t$8456$UGjMA
                                                                                 '_))))
                                                                           g$t$8454$UGjMA))))
                                                                     (g$syntax-dispatch$7367$UGjMA
                                                                       g$t$8454$UGjMA
                                                                       '()))))
                                                                 g$dy$8448$UGjMA)))
                                                             g$ls/false$8453$UGjMA)
                                                           (g$syntax-violation$7473$UGjMA
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$8452$UGjMA))))
                                                      (g$syntax-dispatch$7367$UGjMA
                                                        g$t$8452$UGjMA
                                                        '_))))
                                                  g$t$8449$UGjMA))))
                                            (g$syntax-dispatch$7367$UGjMA
                                              g$t$8449$UGjMA
                                              '(#(scheme-id quote) any)))))
                                        g$x$8444$UGjMA)))
                                    g$ls/false$8447$UGjMA)
                                  ((case-lambda
                                     ((g$t$8458$UGjMA)
                                      ((case-lambda
                                         ((g$ls/false$8459$UGjMA)
                                          (if g$ls/false$8459$UGjMA
                                            (apply
                                              (case-lambda
                                                ((g$stuff$8460$UGjMA)
                                                 (g$cons*$5367$UGjMA
                                                   (g$scheme-stx$7310$UGjMA
                                                     'list)
                                                   g$x$8444$UGjMA
                                                   g$stuff$8460$UGjMA)))
                                              g$ls/false$8459$UGjMA)
                                            ((case-lambda
                                               ((g$t$8461$UGjMA)
                                                ((case-lambda
                                                   ((g$ls/false$8462$UGjMA)
                                                    (if g$ls/false$8462$UGjMA
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$7310$UGjMA
                                                               'cons)
                                                             g$x$8444$UGjMA
                                                             g$y$8445$UGjMA)))
                                                        g$ls/false$8462$UGjMA)
                                                      (g$syntax-violation$7473$UGjMA
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$8461$UGjMA))))
                                                 (g$syntax-dispatch$7367$UGjMA
                                                   g$t$8461$UGjMA
                                                   '_))))
                                             g$t$8458$UGjMA))))
                                       (g$syntax-dispatch$7367$UGjMA
                                         g$t$8458$UGjMA
                                         '(#(scheme-id list) . each-any)))))
                                   g$t$8446$UGjMA))))
                             (g$syntax-dispatch$7367$UGjMA
                               g$t$8446$UGjMA
                               '(#(scheme-id quote) any)))))
                         g$y$8445$UGjMA))))
                   (g$quasiappend$8354$UGjMA
                     (case-lambda
                       ((g$x$8431$UGjMA g$y$8432$UGjMA)
                        ((case-lambda
                           ((g$ls$8433$UGjMA)
                            (if (null? g$ls$8433$UGjMA)
                              (list (g$scheme-stx$7310$UGjMA 'quote) '())
                              (if (null? (cdr g$ls$8433$UGjMA))
                                (car g$ls$8433$UGjMA)
                                (g$cons*$5367$UGjMA
                                  (g$scheme-stx$7310$UGjMA 'append)
                                  g$ls$8433$UGjMA)))))
                         ((letrec ((g$f$8434$UGjMA
                                     (case-lambda
                                       ((g$x$8435$UGjMA)
                                        (if (null? g$x$8435$UGjMA)
                                          ((case-lambda
                                             ((g$t$8436$UGjMA)
                                              ((case-lambda
                                                 ((g$ls/false$8437$UGjMA)
                                                  (if g$ls/false$8437$UGjMA
                                                    (apply
                                                      (case-lambda (() '()))
                                                      g$ls/false$8437$UGjMA)
                                                    ((case-lambda
                                                       ((g$t$8438$UGjMA)
                                                        ((case-lambda
                                                           ((g$ls/false$8439$UGjMA)
                                                            (if g$ls/false$8439$UGjMA
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$8432$UGjMA)))
                                                                g$ls/false$8439$UGjMA)
                                                              (g$syntax-violation$7473$UGjMA
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8438$UGjMA))))
                                                         (g$syntax-dispatch$7367$UGjMA
                                                           g$t$8438$UGjMA
                                                           '_))))
                                                     g$t$8436$UGjMA))))
                                               (g$syntax-dispatch$7367$UGjMA
                                                 g$t$8436$UGjMA
                                                 '(#(scheme-id quote) ())))))
                                           g$y$8432$UGjMA)
                                          ((case-lambda
                                             ((g$t$8440$UGjMA)
                                              ((case-lambda
                                                 ((g$ls/false$8441$UGjMA)
                                                  (if g$ls/false$8441$UGjMA
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$8434$UGjMA
                                                           (cdr g$x$8435$UGjMA))))
                                                      g$ls/false$8441$UGjMA)
                                                    ((case-lambda
                                                       ((g$t$8442$UGjMA)
                                                        ((case-lambda
                                                           ((g$ls/false$8443$UGjMA)
                                                            (if g$ls/false$8443$UGjMA
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$8435$UGjMA)
                                                                     (g$f$8434$UGjMA
                                                                       (cdr g$x$8435$UGjMA)))))
                                                                g$ls/false$8443$UGjMA)
                                                              (g$syntax-violation$7473$UGjMA
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8442$UGjMA))))
                                                         (g$syntax-dispatch$7367$UGjMA
                                                           g$t$8442$UGjMA
                                                           '_))))
                                                     g$t$8440$UGjMA))))
                                               (g$syntax-dispatch$7367$UGjMA
                                                 g$t$8440$UGjMA
                                                 '(#(scheme-id quote) ())))))
                                           (car g$x$8435$UGjMA)))))))
                            g$f$8434$UGjMA)
                          g$x$8431$UGjMA)))))
                   (g$quasivector$8355$UGjMA
                     (case-lambda
                       ((g$x$8406$UGjMA)
                        ((case-lambda
                           ((g$pat-x$8407$UGjMA)
                            ((case-lambda
                               ((g$t$8408$UGjMA)
                                ((case-lambda
                                   ((g$ls/false$8409$UGjMA)
                                    (if g$ls/false$8409$UGjMA
                                      (apply
                                        (case-lambda
                                          ((g$x*$8410$UGjMA)
                                           (list
                                             (g$scheme-stx$7310$UGjMA 'quote)
                                             (list->vector g$x*$8410$UGjMA))))
                                        g$ls/false$8409$UGjMA)
                                      ((case-lambda
                                         ((g$t$8411$UGjMA)
                                          ((case-lambda
                                             ((g$ls/false$8412$UGjMA)
                                              (if g$ls/false$8412$UGjMA
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$8413$UGjMA
                                                                 (case-lambda
                                                                   ((g$x$8414$UGjMA
                                                                      g$k$8415$UGjMA)
                                                                    ((case-lambda
                                                                       ((g$t$8416$UGjMA)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8417$UGjMA)
                                                                            (if g$ls/false$8417$UGjMA
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$8418$UGjMA)
                                                                                   (g$k$8415$UGjMA
                                                                                     (map (case-lambda
                                                                                            ((g$x$8419$UGjMA)
                                                                                             (list
                                                                                               (g$scheme-stx$7310$UGjMA
                                                                                                 'quote)
                                                                                               g$x$8419$UGjMA)))
                                                                                          g$x*$8418$UGjMA))))
                                                                                g$ls/false$8417$UGjMA)
                                                                              ((case-lambda
                                                                                 ((g$t$8420$UGjMA)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$8421$UGjMA)
                                                                                      (if g$ls/false$8421$UGjMA
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$8422$UGjMA)
                                                                                             (g$k$8415$UGjMA
                                                                                               g$x*$8422$UGjMA)))
                                                                                          g$ls/false$8421$UGjMA)
                                                                                        ((case-lambda
                                                                                           ((g$t$8423$UGjMA)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$8424$UGjMA)
                                                                                                (if g$ls/false$8424$UGjMA
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$8425$UGjMA
                                                                                                         g$y$8426$UGjMA)
                                                                                                       (g$f$8413$UGjMA
                                                                                                         g$y$8426$UGjMA
                                                                                                         (case-lambda
                                                                                                           ((g$ls$8427$UGjMA)
                                                                                                            (g$k$8415$UGjMA
                                                                                                              (cons
                                                                                                                g$x$8425$UGjMA
                                                                                                                g$ls$8427$UGjMA)))))))
                                                                                                    g$ls/false$8424$UGjMA)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$8428$UGjMA)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$8429$UGjMA)
                                                                                                          (if g$ls/false$8429$UGjMA
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$7310$UGjMA
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$8407$UGjMA)))
                                                                                                              g$ls/false$8429$UGjMA)
                                                                                                            (g$syntax-violation$7473$UGjMA
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$8428$UGjMA))))
                                                                                                       (g$syntax-dispatch$7367$UGjMA
                                                                                                         g$t$8428$UGjMA
                                                                                                         '_))))
                                                                                                   g$t$8423$UGjMA))))
                                                                                             (g$syntax-dispatch$7367$UGjMA
                                                                                               g$t$8423$UGjMA
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$8420$UGjMA))))
                                                                                   (g$syntax-dispatch$7367$UGjMA
                                                                                     g$t$8420$UGjMA
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$8416$UGjMA))))
                                                                         (g$syntax-dispatch$7367$UGjMA
                                                                           g$t$8416$UGjMA
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$8414$UGjMA)))))
                                                        g$f$8413$UGjMA)
                                                      g$x$8406$UGjMA
                                                      (case-lambda
                                                        ((g$ls$8430$UGjMA)
                                                         (g$cons*$5367$UGjMA
                                                           (g$scheme-stx$7310$UGjMA
                                                             'vector)
                                                           g$ls$8430$UGjMA))))))
                                                  g$ls/false$8412$UGjMA)
                                                (g$syntax-violation$7473$UGjMA
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$8411$UGjMA))))
                                           (g$syntax-dispatch$7367$UGjMA
                                             g$t$8411$UGjMA
                                             '_))))
                                       g$t$8408$UGjMA))))
                                 (g$syntax-dispatch$7367$UGjMA
                                   g$t$8408$UGjMA
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$8407$UGjMA)))
                         g$x$8406$UGjMA))))
                   (g$vquasi$8356$UGjMA
                     (case-lambda
                       ((g$p$8389$UGjMA g$lev$8390$UGjMA)
                        ((case-lambda
                           ((g$t$8391$UGjMA)
                            ((case-lambda
                               ((g$ls/false$8392$UGjMA)
                                (if g$ls/false$8392$UGjMA
                                  (apply
                                    (case-lambda
                                      ((g$p$8393$UGjMA g$q$8394$UGjMA)
                                       ((case-lambda
                                          ((g$t$8395$UGjMA)
                                           ((case-lambda
                                              ((g$ls/false$8396$UGjMA)
                                               (if g$ls/false$8396$UGjMA
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$8397$UGjMA)
                                                      (if (= g$lev$8390$UGjMA
                                                             '0)
                                                        (g$quasicons*$8352$UGjMA
                                                          g$p$8397$UGjMA
                                                          (g$vquasi$8356$UGjMA
                                                            g$q$8394$UGjMA
                                                            g$lev$8390$UGjMA))
                                                        (g$quasicons$8353$UGjMA
                                                          (g$quasicons$8353$UGjMA
                                                            (g$datum$8336$UGjMA
                                                              'unquote)
                                                            (g$quasi$8357$UGjMA
                                                              g$p$8397$UGjMA
                                                              (- g$lev$8390$UGjMA
                                                                 '1)))
                                                          (g$vquasi$8356$UGjMA
                                                            g$q$8394$UGjMA
                                                            g$lev$8390$UGjMA)))))
                                                   g$ls/false$8396$UGjMA)
                                                 ((case-lambda
                                                    ((g$t$8398$UGjMA)
                                                     ((case-lambda
                                                        ((g$ls/false$8399$UGjMA)
                                                         (if g$ls/false$8399$UGjMA
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$8400$UGjMA)
                                                                (if (= g$lev$8390$UGjMA
                                                                       '0)
                                                                  (g$quasiappend$8354$UGjMA
                                                                    g$p$8400$UGjMA
                                                                    (g$vquasi$8356$UGjMA
                                                                      g$q$8394$UGjMA
                                                                      g$lev$8390$UGjMA))
                                                                  (g$quasicons$8353$UGjMA
                                                                    (g$quasicons$8353$UGjMA
                                                                      (g$datum$8336$UGjMA
                                                                        'unquote-splicing)
                                                                      (g$quasi$8357$UGjMA
                                                                        g$p$8400$UGjMA
                                                                        (- g$lev$8390$UGjMA
                                                                           '1)))
                                                                    (g$vquasi$8356$UGjMA
                                                                      g$q$8394$UGjMA
                                                                      g$lev$8390$UGjMA)))))
                                                             g$ls/false$8399$UGjMA)
                                                           ((case-lambda
                                                              ((g$t$8401$UGjMA)
                                                               ((case-lambda
                                                                  ((g$ls/false$8402$UGjMA)
                                                                   (if g$ls/false$8402$UGjMA
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$8403$UGjMA)
                                                                          (g$quasicons$8353$UGjMA
                                                                            (g$quasi$8357$UGjMA
                                                                              g$p$8403$UGjMA
                                                                              g$lev$8390$UGjMA)
                                                                            (g$vquasi$8356$UGjMA
                                                                              g$q$8394$UGjMA
                                                                              g$lev$8390$UGjMA))))
                                                                       g$ls/false$8402$UGjMA)
                                                                     (g$syntax-violation$7473$UGjMA
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$8401$UGjMA))))
                                                                (g$syntax-dispatch$7367$UGjMA
                                                                  g$t$8401$UGjMA
                                                                  'any))))
                                                            g$t$8398$UGjMA))))
                                                      (g$syntax-dispatch$7367$UGjMA
                                                        g$t$8398$UGjMA
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$8395$UGjMA))))
                                            (g$syntax-dispatch$7367$UGjMA
                                              g$t$8395$UGjMA
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$8393$UGjMA)))
                                    g$ls/false$8392$UGjMA)
                                  ((case-lambda
                                     ((g$t$8404$UGjMA)
                                      ((case-lambda
                                         ((g$ls/false$8405$UGjMA)
                                          (if g$ls/false$8405$UGjMA
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$7310$UGjMA
                                                     'quote)
                                                   '())))
                                              g$ls/false$8405$UGjMA)
                                            (g$syntax-violation$7473$UGjMA
                                              '#f
                                              '"invalid syntax"
                                              g$t$8404$UGjMA))))
                                       (g$syntax-dispatch$7367$UGjMA
                                         g$t$8404$UGjMA
                                         '()))))
                                   g$t$8391$UGjMA))))
                             (g$syntax-dispatch$7367$UGjMA
                               g$t$8391$UGjMA
                               '(any . any)))))
                         g$p$8389$UGjMA))))
                   (g$quasi$8357$UGjMA
                     (case-lambda
                       ((g$p$8362$UGjMA g$lev$8363$UGjMA)
                        ((case-lambda
                           ((g$t$8364$UGjMA)
                            ((case-lambda
                               ((g$ls/false$8365$UGjMA)
                                (if g$ls/false$8365$UGjMA
                                  (apply
                                    (case-lambda
                                      ((g$p$8366$UGjMA)
                                       (if (= g$lev$8363$UGjMA '0)
                                         g$p$8366$UGjMA
                                         (g$quasicons$8353$UGjMA
                                           (g$datum$8336$UGjMA 'unquote)
                                           (g$quasi$8357$UGjMA
                                             (list g$p$8366$UGjMA)
                                             (- g$lev$8363$UGjMA '1))))))
                                    g$ls/false$8365$UGjMA)
                                  ((case-lambda
                                     ((g$t$8367$UGjMA)
                                      ((case-lambda
                                         ((g$ls/false$8368$UGjMA)
                                          (if g$ls/false$8368$UGjMA
                                            (apply
                                              (case-lambda
                                                ((g$p$8369$UGjMA g$q$8370$UGjMA)
                                                 (if (= g$lev$8363$UGjMA '0)
                                                   (g$quasicons*$8352$UGjMA
                                                     g$p$8369$UGjMA
                                                     (g$quasi$8357$UGjMA
                                                       g$q$8370$UGjMA
                                                       g$lev$8363$UGjMA))
                                                   (g$quasicons$8353$UGjMA
                                                     (g$quasicons$8353$UGjMA
                                                       (g$datum$8336$UGjMA
                                                         'unquote)
                                                       (g$quasi$8357$UGjMA
                                                         g$p$8369$UGjMA
                                                         (- g$lev$8363$UGjMA
                                                            '1)))
                                                     (g$quasi$8357$UGjMA
                                                       g$q$8370$UGjMA
                                                       g$lev$8363$UGjMA)))))
                                              g$ls/false$8368$UGjMA)
                                            ((case-lambda
                                               ((g$t$8371$UGjMA)
                                                ((case-lambda
                                                   ((g$ls/false$8372$UGjMA)
                                                    (if g$ls/false$8372$UGjMA
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$8373$UGjMA
                                                             g$q$8374$UGjMA)
                                                           (if (= g$lev$8363$UGjMA
                                                                  '0)
                                                             (g$quasiappend$8354$UGjMA
                                                               g$p$8373$UGjMA
                                                               (g$quasi$8357$UGjMA
                                                                 g$q$8374$UGjMA
                                                                 g$lev$8363$UGjMA))
                                                             (g$quasicons$8353$UGjMA
                                                               (g$quasicons$8353$UGjMA
                                                                 (g$datum$8336$UGjMA
                                                                   'unquote-splicing)
                                                                 (g$quasi$8357$UGjMA
                                                                   g$p$8373$UGjMA
                                                                   (- g$lev$8363$UGjMA
                                                                      '1)))
                                                               (g$quasi$8357$UGjMA
                                                                 g$q$8374$UGjMA
                                                                 g$lev$8363$UGjMA)))))
                                                        g$ls/false$8372$UGjMA)
                                                      ((case-lambda
                                                         ((g$t$8375$UGjMA)
                                                          ((case-lambda
                                                             ((g$ls/false$8376$UGjMA)
                                                              (if g$ls/false$8376$UGjMA
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$8377$UGjMA)
                                                                     (g$quasicons$8353$UGjMA
                                                                       (g$datum$8336$UGjMA
                                                                         'quasiquote)
                                                                       (g$quasi$8357$UGjMA
                                                                         (list
                                                                           g$p$8377$UGjMA)
                                                                         (+ g$lev$8363$UGjMA
                                                                            '1)))))
                                                                  g$ls/false$8376$UGjMA)
                                                                ((case-lambda
                                                                   ((g$t$8378$UGjMA)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8379$UGjMA)
                                                                        (if g$ls/false$8379$UGjMA
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$8380$UGjMA
                                                                                 g$q$8381$UGjMA)
                                                                               (g$quasicons$8353$UGjMA
                                                                                 (g$quasi$8357$UGjMA
                                                                                   g$p$8380$UGjMA
                                                                                   g$lev$8363$UGjMA)
                                                                                 (g$quasi$8357$UGjMA
                                                                                   g$q$8381$UGjMA
                                                                                   g$lev$8363$UGjMA))))
                                                                            g$ls/false$8379$UGjMA)
                                                                          ((case-lambda
                                                                             ((g$t$8382$UGjMA)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8383$UGjMA)
                                                                                  (if (if g$ls/false$8383$UGjMA
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$8384$UGjMA)
                                                                                               (not (g$stx?$7061$UGjMA
                                                                                                      g$x$8384$UGjMA))))
                                                                                            g$ls/false$8383$UGjMA))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$8385$UGjMA)
                                                                                         (g$quasivector$8355$UGjMA
                                                                                           (g$vquasi$8356$UGjMA
                                                                                             g$x$8385$UGjMA
                                                                                             g$lev$8363$UGjMA))))
                                                                                      g$ls/false$8383$UGjMA)
                                                                                    ((case-lambda
                                                                                       ((g$t$8386$UGjMA)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8387$UGjMA)
                                                                                            (if g$ls/false$8387$UGjMA
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$8388$UGjMA)
                                                                                                   (list
                                                                                                     (g$scheme-stx$7310$UGjMA
                                                                                                       'quote)
                                                                                                     g$p$8388$UGjMA)))
                                                                                                g$ls/false$8387$UGjMA)
                                                                                              (g$syntax-violation$7473$UGjMA
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$8386$UGjMA))))
                                                                                         (g$syntax-dispatch$7367$UGjMA
                                                                                           g$t$8386$UGjMA
                                                                                           'any))))
                                                                                     g$t$8382$UGjMA))))
                                                                               (g$syntax-dispatch$7367$UGjMA
                                                                                 g$t$8382$UGjMA
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$8378$UGjMA))))
                                                                     (g$syntax-dispatch$7367$UGjMA
                                                                       g$t$8378$UGjMA
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$8375$UGjMA))))
                                                           (g$syntax-dispatch$7367$UGjMA
                                                             g$t$8375$UGjMA
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$8371$UGjMA))))
                                                 (g$syntax-dispatch$7367$UGjMA
                                                   g$t$8371$UGjMA
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8367$UGjMA))))
                                       (g$syntax-dispatch$7367$UGjMA
                                         g$t$8367$UGjMA
                                         '((#(scheme-id unquote) . each-any)
                                           .
                                           any)))))
                                   g$t$8364$UGjMA))))
                             (g$syntax-dispatch$7367$UGjMA
                               g$t$8364$UGjMA
                               '(#(scheme-id unquote) any)))))
                         g$p$8362$UGjMA)))))
           (case-lambda
             ((g$x$8358$UGjMA)
              ((case-lambda
                 ((g$t$8359$UGjMA)
                  ((case-lambda
                     ((g$ls/false$8360$UGjMA)
                      (if g$ls/false$8360$UGjMA
                        (apply
                          (case-lambda
                            ((g$e$8361$UGjMA)
                             (g$quasi$8357$UGjMA g$e$8361$UGjMA '0)))
                          g$ls/false$8360$UGjMA)
                        (g$syntax-violation$7473$UGjMA
                          '#f
                          '"invalid syntax"
                          g$t$8359$UGjMA))))
                   (g$syntax-dispatch$7367$UGjMA g$t$8359$UGjMA '(_ any)))))
               g$x$8358$UGjMA))))))))
   (g$quasisyntax-macro$7359$UGjMA
     g$quasisyntax-macro$10809$UGjMA
     ((case-lambda
        (()
         (letrec* ((g$quasi$8468$UGjMA
                     (case-lambda
                       ((g$p$8482$UGjMA g$lev$8483$UGjMA)
                        ((case-lambda
                           ((g$t$8484$UGjMA)
                            ((case-lambda
                               ((g$ls/false$8485$UGjMA)
                                (if g$ls/false$8485$UGjMA
                                  (apply
                                    (case-lambda
                                      ((g$p$8486$UGjMA)
                                       (if (= g$lev$8483$UGjMA '0)
                                         ((case-lambda
                                            ((g$g$8487$UGjMA)
                                             (values
                                               (list g$g$8487$UGjMA)
                                               (list g$p$8486$UGjMA)
                                               g$g$8487$UGjMA)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$8468$UGjMA
                                                g$p$8486$UGjMA
                                                (- g$lev$8483$UGjMA '1))))
                                           (case-lambda
                                             ((g$lhs*$8491$UGjMA
                                                g$rhs*$8492$UGjMA
                                                g$p$8493$UGjMA)
                                              ((case-lambda
                                                 ((g$p$8494$UGjMA
                                                    g$rhs*$8495$UGjMA
                                                    g$lhs*$8496$UGjMA)
                                                  (values
                                                    g$lhs*$8496$UGjMA
                                                    g$rhs*$8495$UGjMA
                                                    (list
                                                      'unsyntax
                                                      g$p$8494$UGjMA))))
                                               g$p$8493$UGjMA
                                               g$rhs*$8492$UGjMA
                                               g$lhs*$8491$UGjMA)))))))
                                    g$ls/false$8485$UGjMA)
                                  ((case-lambda
                                     ((g$t$8497$UGjMA)
                                      ((case-lambda
                                         ((g$ls/false$8498$UGjMA)
                                          (if (if g$ls/false$8498$UGjMA
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$8483$UGjMA '0)))
                                                    g$ls/false$8498$UGjMA))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$7473$UGjMA
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$8482$UGjMA)))
                                              g$ls/false$8498$UGjMA)
                                            ((case-lambda
                                               ((g$t$8499$UGjMA)
                                                ((case-lambda
                                                   ((g$ls/false$8500$UGjMA)
                                                    (if g$ls/false$8500$UGjMA
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$8501$UGjMA
                                                             g$q$8502$UGjMA)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$8468$UGjMA
                                                                  g$q$8502$UGjMA
                                                                  g$lev$8483$UGjMA)))
                                                             (case-lambda
                                                               ((g$lhs*$8506$UGjMA
                                                                  g$rhs*$8507$UGjMA
                                                                  g$q$8508$UGjMA)
                                                                ((case-lambda
                                                                   ((g$q$8509$UGjMA
                                                                      g$rhs*$8510$UGjMA
                                                                      g$lhs*$8511$UGjMA)
                                                                    (if (= g$lev$8483$UGjMA
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g$8512$UGjMA)
                                                                          (values
                                                                            (cons
                                                                              (cons
                                                                                g$g$8512$UGjMA
                                                                                '(...))
                                                                              g$lhs*$8511$UGjMA)
                                                                            (cons
                                                                              g$p$8501$UGjMA
                                                                              g$rhs*$8510$UGjMA)
                                                                            (cons
                                                                              g$g$8512$UGjMA
                                                                              (cons
                                                                                '...
                                                                                g$q$8509$UGjMA)))))
                                                                       (gensym))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$8468$UGjMA
                                                                             g$p$8501$UGjMA
                                                                             (- g$lev$8483$UGjMA
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$8516$UGjMA
                                                                             g$rhs2*$8517$UGjMA
                                                                             g$p$8518$UGjMA)
                                                                           ((case-lambda
                                                                              ((g$p$8519$UGjMA
                                                                                 g$rhs2*$8520$UGjMA
                                                                                 g$lhs2*$8521$UGjMA)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$8521$UGjMA
                                                                                   g$lhs*$8511$UGjMA)
                                                                                 (append
                                                                                   g$rhs2*$8520$UGjMA
                                                                                   g$rhs*$8510$UGjMA)
                                                                                 (cons
                                                                                   (list
                                                                                     'unsyntax-splicing
                                                                                     g$p$8519$UGjMA)
                                                                                   g$q$8509$UGjMA))))
                                                                            g$p$8518$UGjMA
                                                                            g$rhs2*$8517$UGjMA
                                                                            g$lhs2*$8516$UGjMA)))))))
                                                                 g$q$8508$UGjMA
                                                                 g$rhs*$8507$UGjMA
                                                                 g$lhs*$8506$UGjMA))))))
                                                        g$ls/false$8500$UGjMA)
                                                      ((case-lambda
                                                         ((g$t$8522$UGjMA)
                                                          ((case-lambda
                                                             ((g$ls/false$8523$UGjMA)
                                                              (if (if g$ls/false$8523$UGjMA
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          (()
                                                                           (= g$lev$8483$UGjMA
                                                                              '0)))
                                                                        g$ls/false$8523$UGjMA))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    (()
                                                                     (g$syntax-violation$7473$UGjMA
                                                                       '#f
                                                                       '"incorrect use of unsyntax-splicing"
                                                                       g$p$8482$UGjMA)))
                                                                  g$ls/false$8523$UGjMA)
                                                                ((case-lambda
                                                                   ((g$t$8524$UGjMA)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8525$UGjMA)
                                                                        (if g$ls/false$8525$UGjMA
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$8526$UGjMA)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$quasi$8468$UGjMA
                                                                                      g$p$8526$UGjMA
                                                                                      (+ g$lev$8483$UGjMA
                                                                                         '1))))
                                                                                 (case-lambda
                                                                                   ((g$lhs*$8530$UGjMA
                                                                                      g$rhs*$8531$UGjMA
                                                                                      g$p$8532$UGjMA)
                                                                                    ((case-lambda
                                                                                       ((g$p$8533$UGjMA
                                                                                          g$rhs*$8534$UGjMA
                                                                                          g$lhs*$8535$UGjMA)
                                                                                        (values
                                                                                          g$lhs*$8535$UGjMA
                                                                                          g$rhs*$8534$UGjMA
                                                                                          (list
                                                                                            'quasisyntax
                                                                                            g$p$8533$UGjMA))))
                                                                                     g$p$8532$UGjMA
                                                                                     g$rhs*$8531$UGjMA
                                                                                     g$lhs*$8530$UGjMA))))))
                                                                            g$ls/false$8525$UGjMA)
                                                                          ((case-lambda
                                                                             ((g$t$8536$UGjMA)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8537$UGjMA)
                                                                                  (if g$ls/false$8537$UGjMA
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$8538$UGjMA
                                                                                           g$q$8539$UGjMA)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$8468$UGjMA
                                                                                                g$p$8538$UGjMA
                                                                                                g$lev$8483$UGjMA)))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$8546$UGjMA
                                                                                                g$rhs*$8547$UGjMA
                                                                                                g$p$8548$UGjMA)
                                                                                              (call-with-values
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$quasi$8468$UGjMA
                                                                                                     g$q$8539$UGjMA
                                                                                                     g$lev$8483$UGjMA)))
                                                                                                (case-lambda
                                                                                                  ((g$lhs2*$8549$UGjMA
                                                                                                     g$rhs2*$8550$UGjMA
                                                                                                     g$q$8551$UGjMA)
                                                                                                   ((case-lambda
                                                                                                      ((g$q$8552$UGjMA
                                                                                                         g$rhs2*$8553$UGjMA
                                                                                                         g$lhs2*$8554$UGjMA
                                                                                                         g$p$8555$UGjMA
                                                                                                         g$rhs*$8556$UGjMA
                                                                                                         g$lhs*$8557$UGjMA)
                                                                                                       (values
                                                                                                         (append
                                                                                                           g$lhs2*$8554$UGjMA
                                                                                                           g$lhs*$8557$UGjMA)
                                                                                                         (append
                                                                                                           g$rhs2*$8553$UGjMA
                                                                                                           g$rhs*$8556$UGjMA)
                                                                                                         (cons
                                                                                                           g$p$8555$UGjMA
                                                                                                           g$q$8552$UGjMA))))
                                                                                                    g$q$8551$UGjMA
                                                                                                    g$rhs2*$8550$UGjMA
                                                                                                    g$lhs2*$8549$UGjMA
                                                                                                    g$p$8548$UGjMA
                                                                                                    g$rhs*$8547$UGjMA
                                                                                                    g$lhs*$8546$UGjMA)))))))))
                                                                                      g$ls/false$8537$UGjMA)
                                                                                    ((case-lambda
                                                                                       ((g$t$8558$UGjMA)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8559$UGjMA)
                                                                                            (if (if g$ls/false$8559$UGjMA
                                                                                                  (begin
                                                                                                    '#f
                                                                                                    (apply
                                                                                                      (case-lambda
                                                                                                        ((g$x$8560$UGjMA)
                                                                                                         (not (g$stx?$7061$UGjMA
                                                                                                                g$p$8482$UGjMA))))
                                                                                                      g$ls/false$8559$UGjMA))
                                                                                                  '#f)
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$x$8561$UGjMA)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        ((letrec ((g$f$8565$UGjMA
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$8566$UGjMA)
                                                                                                                       (if (null?
                                                                                                                             g$x$8566$UGjMA)
                                                                                                                         (values
                                                                                                                           '()
                                                                                                                           '()
                                                                                                                           '())
                                                                                                                         (call-with-values
                                                                                                                           (case-lambda
                                                                                                                             (()
                                                                                                                              (g$quasi$8468$UGjMA
                                                                                                                                (car g$x$8566$UGjMA)
                                                                                                                                g$lev$8483$UGjMA)))
                                                                                                                           (case-lambda
                                                                                                                             ((g$lhs*$8570$UGjMA
                                                                                                                                g$rhs*$8571$UGjMA
                                                                                                                                g$a$8572$UGjMA)
                                                                                                                              ((case-lambda
                                                                                                                                 ((g$a$8573$UGjMA
                                                                                                                                    g$rhs*$8574$UGjMA
                                                                                                                                    g$lhs*$8575$UGjMA)
                                                                                                                                  (call-with-values
                                                                                                                                    (case-lambda
                                                                                                                                      (()
                                                                                                                                       (g$f$8565$UGjMA
                                                                                                                                         (cdr g$x$8566$UGjMA))))
                                                                                                                                    (case-lambda
                                                                                                                                      ((g$lhs2*$8579$UGjMA
                                                                                                                                         g$rhs2*$8580$UGjMA
                                                                                                                                         g$d$8581$UGjMA)
                                                                                                                                       ((case-lambda
                                                                                                                                          ((g$d$8582$UGjMA
                                                                                                                                             g$rhs2*$8583$UGjMA
                                                                                                                                             g$lhs2*$8584$UGjMA)
                                                                                                                                           (values
                                                                                                                                             (append
                                                                                                                                               g$lhs*$8575$UGjMA
                                                                                                                                               g$lhs2*$8584$UGjMA)
                                                                                                                                             (append
                                                                                                                                               g$rhs*$8574$UGjMA
                                                                                                                                               g$rhs2*$8583$UGjMA)
                                                                                                                                             (cons
                                                                                                                                               g$a$8573$UGjMA
                                                                                                                                               g$d$8582$UGjMA))))
                                                                                                                                        g$d$8581$UGjMA
                                                                                                                                        g$rhs2*$8580$UGjMA
                                                                                                                                        g$lhs2*$8579$UGjMA))))))
                                                                                                                               g$a$8572$UGjMA
                                                                                                                               g$rhs*$8571$UGjMA
                                                                                                                               g$lhs*$8570$UGjMA)))))))))
                                                                                                           g$f$8565$UGjMA)
                                                                                                         g$x$8561$UGjMA)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$8585$UGjMA
                                                                                                          g$rhs*$8586$UGjMA
                                                                                                          g$x*$8587$UGjMA)
                                                                                                        ((case-lambda
                                                                                                           ((g$x*$8588$UGjMA
                                                                                                              g$rhs*$8589$UGjMA
                                                                                                              g$lhs*$8590$UGjMA)
                                                                                                            (values
                                                                                                              g$lhs*$8590$UGjMA
                                                                                                              g$rhs*$8589$UGjMA
                                                                                                              (list->vector
                                                                                                                g$x*$8588$UGjMA))))
                                                                                                         g$x*$8587$UGjMA
                                                                                                         g$rhs*$8586$UGjMA
                                                                                                         g$lhs*$8585$UGjMA))))))
                                                                                                g$ls/false$8559$UGjMA)
                                                                                              ((case-lambda
                                                                                                 ((g$t$8591$UGjMA)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$8592$UGjMA)
                                                                                                      (if g$ls/false$8592$UGjMA
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (values
                                                                                                               '()
                                                                                                               '()
                                                                                                               g$p$8482$UGjMA)))
                                                                                                          g$ls/false$8592$UGjMA)
                                                                                                        (g$syntax-violation$7473$UGjMA
                                                                                                          '#f
                                                                                                          '"invalid syntax"
                                                                                                          g$t$8591$UGjMA))))
                                                                                                   (g$syntax-dispatch$7367$UGjMA
                                                                                                     g$t$8591$UGjMA
                                                                                                     '_))))
                                                                                               g$t$8558$UGjMA))))
                                                                                         (g$syntax-dispatch$7367$UGjMA
                                                                                           g$t$8558$UGjMA
                                                                                           '#(vector
                                                                                              each-any)))))
                                                                                     g$t$8536$UGjMA))))
                                                                               (g$syntax-dispatch$7367$UGjMA
                                                                                 g$t$8536$UGjMA
                                                                                 '(any .
                                                                                       any)))))
                                                                           g$t$8524$UGjMA))))
                                                                     (g$syntax-dispatch$7367$UGjMA
                                                                       g$t$8524$UGjMA
                                                                       '(#(scheme-id
                                                                           quasisyntax)
                                                                         any)))))
                                                                 g$t$8522$UGjMA))))
                                                           (g$syntax-dispatch$7367$UGjMA
                                                             g$t$8522$UGjMA
                                                             '#(scheme-id
                                                                unsyntax-splicing)))))
                                                       g$t$8499$UGjMA))))
                                                 (g$syntax-dispatch$7367$UGjMA
                                                   g$t$8499$UGjMA
                                                   '((#(scheme-id
                                                        unsyntax-splicing)
                                                      any)
                                                     .
                                                     any)))))
                                             g$t$8497$UGjMA))))
                                       (g$syntax-dispatch$7367$UGjMA
                                         g$t$8497$UGjMA
                                         '#(scheme-id unsyntax)))))
                                   g$t$8484$UGjMA))))
                             (g$syntax-dispatch$7367$UGjMA
                               g$t$8484$UGjMA
                               '(#(scheme-id unsyntax) any)))))
                         g$p$8482$UGjMA)))))
           (case-lambda
             ((g$x$8469$UGjMA)
              ((case-lambda
                 ((g$t$8470$UGjMA)
                  ((case-lambda
                     ((g$ls/false$8471$UGjMA)
                      (if g$ls/false$8471$UGjMA
                        (apply
                          (case-lambda
                            ((g$e$8472$UGjMA)
                             (call-with-values
                               (case-lambda
                                 (() (g$quasi$8468$UGjMA g$e$8472$UGjMA '0)))
                               (case-lambda
                                 ((g$lhs*$8476$UGjMA
                                    g$rhs*$8477$UGjMA
                                    g$v$8478$UGjMA)
                                  ((case-lambda
                                     ((g$v$8479$UGjMA
                                        g$rhs*$8480$UGjMA
                                        g$lhs*$8481$UGjMA)
                                      (g$bless$7330$UGjMA
                                        (list
                                          'syntax-case
                                          (cons 'list g$rhs*$8480$UGjMA)
                                          '()
                                          (list
                                            g$lhs*$8481$UGjMA
                                            (list 'syntax g$v$8479$UGjMA))))))
                                   g$v$8478$UGjMA
                                   g$rhs*$8477$UGjMA
                                   g$lhs*$8476$UGjMA))))))
                          g$ls/false$8471$UGjMA)
                        (g$syntax-violation$7473$UGjMA
                          '#f
                          '"invalid syntax"
                          g$t$8470$UGjMA))))
                   (g$syntax-dispatch$7367$UGjMA g$t$8470$UGjMA '(_ any)))))
               g$x$8469$UGjMA))))))))
   (g$define-struct-macro$7360$UGjMA
     g$define-struct-macro$10810$UGjMA
     (case-lambda
       ((g$stx$8593$UGjMA)
        (g$syntax-violation$7473$UGjMA
          '#f
          '"define-struct not supported"
          g$stx$8593$UGjMA))))
   (g$define-record-type-macro$7361$UGjMA
     g$define-record-type-macro$10811$UGjMA
     (case-lambda
       ((g$x$8594$UGjMA)
        (letrec* ((g$id$8595$UGjMA
                    (case-lambda
                      ((g$ctxt$8847$UGjMA . g$str*$8848$UGjMA)
                       (g$datum->syntax$7475$UGjMA
                         g$ctxt$8847$UGjMA
                         (string->symbol
                           (apply
                             string-append
                             (map (case-lambda
                                    ((g$x$8849$UGjMA)
                                     (if (symbol? g$x$8849$UGjMA)
                                       (symbol->string g$x$8849$UGjMA)
                                       (if (string? g$x$8849$UGjMA)
                                         g$x$8849$UGjMA
                                         (assertion-violation
                                           'define-record-type
                                           '"BUG")))))
                                  g$str*$8848$UGjMA)))))))
                  (g$get-record-name$8596$UGjMA
                    (case-lambda
                      ((g$spec$8838$UGjMA)
                       ((case-lambda
                          ((g$t$8839$UGjMA)
                           ((case-lambda
                              ((g$ls/false$8840$UGjMA)
                               (if g$ls/false$8840$UGjMA
                                 (apply
                                   (case-lambda
                                     ((g$foo$8841$UGjMA
                                        g$make-foo$8842$UGjMA
                                        g$foo?$8843$UGjMA)
                                      g$foo$8841$UGjMA))
                                   g$ls/false$8840$UGjMA)
                                 ((case-lambda
                                    ((g$t$8844$UGjMA)
                                     ((case-lambda
                                        ((g$ls/false$8845$UGjMA)
                                         (if g$ls/false$8845$UGjMA
                                           (apply
                                             (case-lambda
                                               ((g$foo$8846$UGjMA)
                                                g$foo$8846$UGjMA))
                                             g$ls/false$8845$UGjMA)
                                           (g$syntax-violation$7473$UGjMA
                                             '#f
                                             '"invalid syntax"
                                             g$t$8844$UGjMA))))
                                      (g$syntax-dispatch$7367$UGjMA
                                        g$t$8844$UGjMA
                                        'any))))
                                  g$t$8839$UGjMA))))
                            (g$syntax-dispatch$7367$UGjMA
                              g$t$8839$UGjMA
                              '(any any any)))))
                        g$spec$8838$UGjMA))))
                  (g$get-record-constructor-name$8597$UGjMA
                    (case-lambda
                      ((g$spec$8828$UGjMA)
                       ((case-lambda
                          ((g$t$8829$UGjMA)
                           ((case-lambda
                              ((g$ls/false$8830$UGjMA)
                               (if g$ls/false$8830$UGjMA
                                 (apply
                                   (case-lambda
                                     ((g$foo$8831$UGjMA
                                        g$make-foo$8832$UGjMA
                                        g$foo?$8833$UGjMA)
                                      g$make-foo$8832$UGjMA))
                                   g$ls/false$8830$UGjMA)
                                 ((case-lambda
                                    ((g$t$8834$UGjMA)
                                     ((case-lambda
                                        ((g$ls/false$8835$UGjMA)
                                         (if (if g$ls/false$8835$UGjMA
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$8836$UGjMA)
                                                      (g$id?$7089$UGjMA
                                                        g$foo$8836$UGjMA)))
                                                   g$ls/false$8835$UGjMA))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$8837$UGjMA)
                                                (g$id$8595$UGjMA
                                                  g$foo$8837$UGjMA
                                                  '"make-"
                                                  (g$stx->datum$7100$UGjMA
                                                    g$foo$8837$UGjMA))))
                                             g$ls/false$8835$UGjMA)
                                           (g$syntax-violation$7473$UGjMA
                                             '#f
                                             '"invalid syntax"
                                             g$t$8834$UGjMA))))
                                      (g$syntax-dispatch$7367$UGjMA
                                        g$t$8834$UGjMA
                                        'any))))
                                  g$t$8829$UGjMA))))
                            (g$syntax-dispatch$7367$UGjMA
                              g$t$8829$UGjMA
                              '(any any any)))))
                        g$spec$8828$UGjMA))))
                  (g$get-record-predicate-name$8598$UGjMA
                    (case-lambda
                      ((g$spec$8818$UGjMA)
                       ((case-lambda
                          ((g$t$8819$UGjMA)
                           ((case-lambda
                              ((g$ls/false$8820$UGjMA)
                               (if g$ls/false$8820$UGjMA
                                 (apply
                                   (case-lambda
                                     ((g$foo$8821$UGjMA
                                        g$make-foo$8822$UGjMA
                                        g$foo?$8823$UGjMA)
                                      g$foo?$8823$UGjMA))
                                   g$ls/false$8820$UGjMA)
                                 ((case-lambda
                                    ((g$t$8824$UGjMA)
                                     ((case-lambda
                                        ((g$ls/false$8825$UGjMA)
                                         (if (if g$ls/false$8825$UGjMA
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$8826$UGjMA)
                                                      (g$id?$7089$UGjMA
                                                        g$foo$8826$UGjMA)))
                                                   g$ls/false$8825$UGjMA))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$8827$UGjMA)
                                                (g$id$8595$UGjMA
                                                  g$foo$8827$UGjMA
                                                  (g$stx->datum$7100$UGjMA
                                                    g$foo$8827$UGjMA)
                                                  '"?")))
                                             g$ls/false$8825$UGjMA)
                                           (g$syntax-violation$7473$UGjMA
                                             '#f
                                             '"invalid syntax"
                                             g$t$8824$UGjMA))))
                                      (g$syntax-dispatch$7367$UGjMA
                                        g$t$8824$UGjMA
                                        'any))))
                                  g$t$8819$UGjMA))))
                            (g$syntax-dispatch$7367$UGjMA
                              g$t$8819$UGjMA
                              '(any any any)))))
                        g$spec$8818$UGjMA))))
                  (g$get-clause$8599$UGjMA
                    (case-lambda
                      ((g$id$8809$UGjMA g$ls$8810$UGjMA)
                       ((case-lambda
                          ((g$t$8811$UGjMA)
                           ((case-lambda
                              ((g$ls/false$8812$UGjMA)
                               (if g$ls/false$8812$UGjMA
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$8812$UGjMA)
                                 ((case-lambda
                                    ((g$t$8813$UGjMA)
                                     ((case-lambda
                                        ((g$ls/false$8814$UGjMA)
                                         (if g$ls/false$8814$UGjMA
                                           (apply
                                             (case-lambda
                                               ((g$x$8815$UGjMA
                                                  g$rest$8816$UGjMA
                                                  g$ls$8817$UGjMA)
                                                (if (g$free-id=?$7093$UGjMA
                                                      (g$bless$7330$UGjMA
                                                        g$id$8809$UGjMA)
                                                      g$x$8815$UGjMA)
                                                  (cons
                                                    g$x$8815$UGjMA
                                                    g$rest$8816$UGjMA)
                                                  (g$get-clause$8599$UGjMA
                                                    g$id$8809$UGjMA
                                                    g$ls$8817$UGjMA))))
                                             g$ls/false$8814$UGjMA)
                                           (g$syntax-violation$7473$UGjMA
                                             '#f
                                             '"invalid syntax"
                                             g$t$8813$UGjMA))))
                                      (g$syntax-dispatch$7367$UGjMA
                                        g$t$8813$UGjMA
                                        '((any . any) . any)))))
                                  g$t$8811$UGjMA))))
                            (g$syntax-dispatch$7367$UGjMA g$t$8811$UGjMA '()))))
                        g$ls$8810$UGjMA))))
                  (g$foo-rtd-code$8600$UGjMA
                    (case-lambda
                      ((g$name$8768$UGjMA
                         g$clause*$8769$UGjMA
                         g$parent-rtd-code$8770$UGjMA)
                       (letrec* ((g$convert-field-spec*$8771$UGjMA
                                   (case-lambda
                                     ((g$ls$8796$UGjMA)
                                      (list->vector
                                        (map (case-lambda
                                               ((g$x$8797$UGjMA)
                                                ((case-lambda
                                                   ((g$t$8798$UGjMA)
                                                    ((case-lambda
                                                       ((g$ls/false$8799$UGjMA)
                                                        (if g$ls/false$8799$UGjMA
                                                          (apply
                                                            (case-lambda
                                                              ((g$name$8800$UGjMA
                                                                 g$rest$8801$UGjMA)
                                                               (list
                                                                 'mutable
                                                                 g$name$8800$UGjMA)))
                                                            g$ls/false$8799$UGjMA)
                                                          ((case-lambda
                                                             ((g$t$8802$UGjMA)
                                                              ((case-lambda
                                                                 ((g$ls/false$8803$UGjMA)
                                                                  (if g$ls/false$8803$UGjMA
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$name$8804$UGjMA
                                                                           g$rest$8805$UGjMA)
                                                                         (list
                                                                           'immutable
                                                                           g$name$8804$UGjMA)))
                                                                      g$ls/false$8803$UGjMA)
                                                                    ((case-lambda
                                                                       ((g$t$8806$UGjMA)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8807$UGjMA)
                                                                            (if g$ls/false$8807$UGjMA
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$name$8808$UGjMA)
                                                                                   (list
                                                                                     'immutable
                                                                                     g$name$8808$UGjMA)))
                                                                                g$ls/false$8807$UGjMA)
                                                                              (g$syntax-violation$7473$UGjMA
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8806$UGjMA))))
                                                                         (g$syntax-dispatch$7367$UGjMA
                                                                           g$t$8806$UGjMA
                                                                           'any))))
                                                                     g$t$8802$UGjMA))))
                                                               (g$syntax-dispatch$7367$UGjMA
                                                                 g$t$8802$UGjMA
                                                                 '(#(scheme-id
                                                                     immutable)
                                                                   any
                                                                   .
                                                                   any)))))
                                                           g$t$8798$UGjMA))))
                                                     (g$syntax-dispatch$7367$UGjMA
                                                       g$t$8798$UGjMA
                                                       '(#(scheme-id mutable)
                                                         any
                                                         .
                                                         any)))))
                                                 g$x$8797$UGjMA)))
                                             g$ls$8796$UGjMA))))))
                         ((case-lambda
                            ((g$uid-code$8772$UGjMA
                               g$sealed?$8773$UGjMA
                               g$opaque?$8774$UGjMA
                               g$fields$8775$UGjMA)
                             (g$bless$7330$UGjMA
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$8768$UGjMA)
                                 g$parent-rtd-code$8770$UGjMA
                                 g$uid-code$8772$UGjMA
                                 g$sealed?$8773$UGjMA
                                 g$opaque?$8774$UGjMA
                                 g$fields$8775$UGjMA))))
                          ((case-lambda
                             ((g$t$8776$UGjMA)
                              ((case-lambda
                                 ((g$ls/false$8777$UGjMA)
                                  (if g$ls/false$8777$UGjMA
                                    (apply
                                      (case-lambda (() (list 'quote (gensym))))
                                      g$ls/false$8777$UGjMA)
                                    ((case-lambda
                                       ((g$t$8778$UGjMA)
                                        ((case-lambda
                                           ((g$ls/false$8779$UGjMA)
                                            (if g$ls/false$8779$UGjMA
                                              (apply
                                                (case-lambda
                                                  ((g$uid$8780$UGjMA)
                                                   (list
                                                     'quote
                                                     g$uid$8780$UGjMA)))
                                                g$ls/false$8779$UGjMA)
                                              ((case-lambda
                                                 ((g$t$8781$UGjMA)
                                                  ((case-lambda
                                                     ((g$ls/false$8782$UGjMA)
                                                      (if g$ls/false$8782$UGjMA
                                                        (apply
                                                          (case-lambda (() '#f))
                                                          g$ls/false$8782$UGjMA)
                                                        (g$syntax-violation$7473$UGjMA
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$8781$UGjMA))))
                                                   (g$syntax-dispatch$7367$UGjMA
                                                     g$t$8781$UGjMA
                                                     '_))))
                                               g$t$8778$UGjMA))))
                                         (g$syntax-dispatch$7367$UGjMA
                                           g$t$8778$UGjMA
                                           '(_ any)))))
                                     g$t$8776$UGjMA))))
                               (g$syntax-dispatch$7367$UGjMA
                                 g$t$8776$UGjMA
                                 '(_)))))
                           (g$get-clause$8599$UGjMA
                             'nongenerative
                             g$clause*$8769$UGjMA))
                          ((case-lambda
                             ((g$t$8783$UGjMA)
                              ((case-lambda
                                 ((g$ls/false$8784$UGjMA)
                                  (if g$ls/false$8784$UGjMA
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$8784$UGjMA)
                                    ((case-lambda
                                       ((g$t$8785$UGjMA)
                                        ((case-lambda
                                           ((g$ls/false$8786$UGjMA)
                                            (if g$ls/false$8786$UGjMA
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$8786$UGjMA)
                                              (g$syntax-violation$7473$UGjMA
                                                '#f
                                                '"invalid syntax"
                                                g$t$8785$UGjMA))))
                                         (g$syntax-dispatch$7367$UGjMA
                                           g$t$8785$UGjMA
                                           '_))))
                                     g$t$8783$UGjMA))))
                               (g$syntax-dispatch$7367$UGjMA
                                 g$t$8783$UGjMA
                                 '(_ #(atom #t))))))
                           (g$get-clause$8599$UGjMA
                             'sealed
                             g$clause*$8769$UGjMA))
                          ((case-lambda
                             ((g$t$8787$UGjMA)
                              ((case-lambda
                                 ((g$ls/false$8788$UGjMA)
                                  (if g$ls/false$8788$UGjMA
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$8788$UGjMA)
                                    ((case-lambda
                                       ((g$t$8789$UGjMA)
                                        ((case-lambda
                                           ((g$ls/false$8790$UGjMA)
                                            (if g$ls/false$8790$UGjMA
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$8790$UGjMA)
                                              (g$syntax-violation$7473$UGjMA
                                                '#f
                                                '"invalid syntax"
                                                g$t$8789$UGjMA))))
                                         (g$syntax-dispatch$7367$UGjMA
                                           g$t$8789$UGjMA
                                           '_))))
                                     g$t$8787$UGjMA))))
                               (g$syntax-dispatch$7367$UGjMA
                                 g$t$8787$UGjMA
                                 '(_ #(atom #t))))))
                           (g$get-clause$8599$UGjMA
                             'opaque
                             g$clause*$8769$UGjMA))
                          ((case-lambda
                             ((g$t$8791$UGjMA)
                              ((case-lambda
                                 ((g$ls/false$8792$UGjMA)
                                  (if g$ls/false$8792$UGjMA
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$8793$UGjMA)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$8771$UGjMA
                                             g$field-spec*$8793$UGjMA))))
                                      g$ls/false$8792$UGjMA)
                                    ((case-lambda
                                       ((g$t$8794$UGjMA)
                                        ((case-lambda
                                           ((g$ls/false$8795$UGjMA)
                                            (if g$ls/false$8795$UGjMA
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$8795$UGjMA)
                                              (g$syntax-violation$7473$UGjMA
                                                '#f
                                                '"invalid syntax"
                                                g$t$8794$UGjMA))))
                                         (g$syntax-dispatch$7367$UGjMA
                                           g$t$8794$UGjMA
                                           '_))))
                                     g$t$8791$UGjMA))))
                               (g$syntax-dispatch$7367$UGjMA
                                 g$t$8791$UGjMA
                                 '(_ . each-any)))))
                           (g$get-clause$8599$UGjMA
                             'fields
                             g$clause*$8769$UGjMA)))))))
                  (g$parent-rtd-code$8601$UGjMA
                    (case-lambda
                      ((g$clause*$8756$UGjMA)
                       ((case-lambda
                          ((g$t$8757$UGjMA)
                           ((case-lambda
                              ((g$ls/false$8758$UGjMA)
                               (if g$ls/false$8758$UGjMA
                                 (apply
                                   (case-lambda
                                     ((g$name$8759$UGjMA)
                                      (list
                                        'record-type-descriptor
                                        g$name$8759$UGjMA)))
                                   g$ls/false$8758$UGjMA)
                                 ((case-lambda
                                    ((g$t$8760$UGjMA)
                                     ((case-lambda
                                        ((g$ls/false$8761$UGjMA)
                                         (if g$ls/false$8761$UGjMA
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$8762$UGjMA)
                                                    ((case-lambda
                                                       ((g$ls/false$8763$UGjMA)
                                                        (if g$ls/false$8763$UGjMA
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$8764$UGjMA
                                                                 g$rcd$8765$UGjMA)
                                                               g$rtd$8764$UGjMA))
                                                            g$ls/false$8763$UGjMA)
                                                          ((case-lambda
                                                             ((g$t$8766$UGjMA)
                                                              ((case-lambda
                                                                 ((g$ls/false$8767$UGjMA)
                                                                  (if g$ls/false$8767$UGjMA
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$8767$UGjMA)
                                                                    (g$syntax-violation$7473$UGjMA
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8766$UGjMA))))
                                                               (g$syntax-dispatch$7367$UGjMA
                                                                 g$t$8766$UGjMA
                                                                 '#(atom #f)))))
                                                           g$t$8762$UGjMA))))
                                                     (g$syntax-dispatch$7367$UGjMA
                                                       g$t$8762$UGjMA
                                                       '(_ any any)))))
                                                 (g$get-clause$8599$UGjMA
                                                   'parent-rtd
                                                   g$clause*$8756$UGjMA))))
                                             g$ls/false$8761$UGjMA)
                                           (g$syntax-violation$7473$UGjMA
                                             '#f
                                             '"invalid syntax"
                                             g$t$8760$UGjMA))))
                                      (g$syntax-dispatch$7367$UGjMA
                                        g$t$8760$UGjMA
                                        '#(atom #f)))))
                                  g$t$8757$UGjMA))))
                            (g$syntax-dispatch$7367$UGjMA
                              g$t$8757$UGjMA
                              '(_ any)))))
                        (g$get-clause$8599$UGjMA
                          'parent
                          g$clause*$8756$UGjMA)))))
                  (g$parent-rcd-code$8602$UGjMA
                    (case-lambda
                      ((g$clause*$8744$UGjMA)
                       ((case-lambda
                          ((g$t$8745$UGjMA)
                           ((case-lambda
                              ((g$ls/false$8746$UGjMA)
                               (if g$ls/false$8746$UGjMA
                                 (apply
                                   (case-lambda
                                     ((g$name$8747$UGjMA)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$8747$UGjMA)))
                                   g$ls/false$8746$UGjMA)
                                 ((case-lambda
                                    ((g$t$8748$UGjMA)
                                     ((case-lambda
                                        ((g$ls/false$8749$UGjMA)
                                         (if g$ls/false$8749$UGjMA
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$8750$UGjMA)
                                                    ((case-lambda
                                                       ((g$ls/false$8751$UGjMA)
                                                        (if g$ls/false$8751$UGjMA
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$8752$UGjMA
                                                                 g$rcd$8753$UGjMA)
                                                               g$rcd$8753$UGjMA))
                                                            g$ls/false$8751$UGjMA)
                                                          ((case-lambda
                                                             ((g$t$8754$UGjMA)
                                                              ((case-lambda
                                                                 ((g$ls/false$8755$UGjMA)
                                                                  (if g$ls/false$8755$UGjMA
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$8755$UGjMA)
                                                                    (g$syntax-violation$7473$UGjMA
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8754$UGjMA))))
                                                               (g$syntax-dispatch$7367$UGjMA
                                                                 g$t$8754$UGjMA
                                                                 '#(atom #f)))))
                                                           g$t$8750$UGjMA))))
                                                     (g$syntax-dispatch$7367$UGjMA
                                                       g$t$8750$UGjMA
                                                       '(_ any any)))))
                                                 (g$get-clause$8599$UGjMA
                                                   'parent-rtd
                                                   g$clause*$8744$UGjMA))))
                                             g$ls/false$8749$UGjMA)
                                           (g$syntax-violation$7473$UGjMA
                                             '#f
                                             '"invalid syntax"
                                             g$t$8748$UGjMA))))
                                      (g$syntax-dispatch$7367$UGjMA
                                        g$t$8748$UGjMA
                                        '#(atom #f)))))
                                  g$t$8745$UGjMA))))
                            (g$syntax-dispatch$7367$UGjMA
                              g$t$8745$UGjMA
                              '(_ any)))))
                        (g$get-clause$8599$UGjMA
                          'parent
                          g$clause*$8744$UGjMA)))))
                  (g$foo-rcd-code$8603$UGjMA
                    (case-lambda
                      ((g$clause*$8740$UGjMA
                         g$foo-rtd$8741$UGjMA
                         g$protocol$8742$UGjMA
                         g$parent-rcd-code$8743$UGjMA)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$8741$UGjMA
                         g$parent-rcd-code$8743$UGjMA
                         g$protocol$8742$UGjMA))))
                  (g$get-protocol-code$8604$UGjMA
                    (case-lambda
                      ((g$clause*$8734$UGjMA)
                       ((case-lambda
                          ((g$t$8735$UGjMA)
                           ((case-lambda
                              ((g$ls/false$8736$UGjMA)
                               (if g$ls/false$8736$UGjMA
                                 (apply
                                   (case-lambda
                                     ((g$expr$8737$UGjMA) g$expr$8737$UGjMA))
                                   g$ls/false$8736$UGjMA)
                                 ((case-lambda
                                    ((g$t$8738$UGjMA)
                                     ((case-lambda
                                        ((g$ls/false$8739$UGjMA)
                                         (if g$ls/false$8739$UGjMA
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$8739$UGjMA)
                                           (g$syntax-violation$7473$UGjMA
                                             '#f
                                             '"invalid syntax"
                                             g$t$8738$UGjMA))))
                                      (g$syntax-dispatch$7367$UGjMA
                                        g$t$8738$UGjMA
                                        '_))))
                                  g$t$8735$UGjMA))))
                            (g$syntax-dispatch$7367$UGjMA
                              g$t$8735$UGjMA
                              '(_ any)))))
                        (g$get-clause$8599$UGjMA
                          'protocol
                          g$clause*$8734$UGjMA)))))
                  (g$get-fields$8605$UGjMA
                    (case-lambda
                      ((g$clause*$8725$UGjMA)
                       ((case-lambda
                          ((g$t$8726$UGjMA)
                           ((case-lambda
                              ((g$ls/false$8727$UGjMA)
                               (if g$ls/false$8727$UGjMA
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$8727$UGjMA)
                                 ((case-lambda
                                    ((g$t$8728$UGjMA)
                                     ((case-lambda
                                        ((g$ls/false$8729$UGjMA)
                                         (if g$ls/false$8729$UGjMA
                                           (apply
                                             (case-lambda
                                               ((g$f*$8730$UGjMA)
                                                g$f*$8730$UGjMA))
                                             g$ls/false$8729$UGjMA)
                                           ((case-lambda
                                              ((g$t$8731$UGjMA)
                                               ((case-lambda
                                                  ((g$ls/false$8732$UGjMA)
                                                   (if g$ls/false$8732$UGjMA
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$8733$UGjMA)
                                                          (g$get-fields$8605$UGjMA
                                                            g$rest$8733$UGjMA)))
                                                       g$ls/false$8732$UGjMA)
                                                     (g$syntax-violation$7473$UGjMA
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8731$UGjMA))))
                                                (g$syntax-dispatch$7367$UGjMA
                                                  g$t$8731$UGjMA
                                                  '(_ . any)))))
                                            g$t$8728$UGjMA))))
                                      (g$syntax-dispatch$7367$UGjMA
                                        g$t$8728$UGjMA
                                        '((#(scheme-id fields) . each-any)
                                          .
                                          _)))))
                                  g$t$8726$UGjMA))))
                            (g$syntax-dispatch$7367$UGjMA g$t$8726$UGjMA '()))))
                        g$clause*$8725$UGjMA))))
                  (g$get-mutator-indices$8606$UGjMA
                    (case-lambda
                      ((g$fields$8713$UGjMA)
                       ((letrec ((g$f$8714$UGjMA
                                   (case-lambda
                                     ((g$fields$8715$UGjMA g$i$8716$UGjMA)
                                      ((case-lambda
                                         ((g$t$8717$UGjMA)
                                          ((case-lambda
                                             ((g$ls/false$8718$UGjMA)
                                              (if g$ls/false$8718$UGjMA
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$8718$UGjMA)
                                                ((case-lambda
                                                   ((g$t$8719$UGjMA)
                                                    ((case-lambda
                                                       ((g$ls/false$8720$UGjMA)
                                                        (if g$ls/false$8720$UGjMA
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$8721$UGjMA)
                                                               (cons
                                                                 g$i$8716$UGjMA
                                                                 (g$f$8714$UGjMA
                                                                   g$rest$8721$UGjMA
                                                                   (+ g$i$8716$UGjMA
                                                                      '1)))))
                                                            g$ls/false$8720$UGjMA)
                                                          ((case-lambda
                                                             ((g$t$8722$UGjMA)
                                                              ((case-lambda
                                                                 ((g$ls/false$8723$UGjMA)
                                                                  (if g$ls/false$8723$UGjMA
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$8724$UGjMA)
                                                                         (g$f$8714$UGjMA
                                                                           g$rest$8724$UGjMA
                                                                           (+ g$i$8716$UGjMA
                                                                              '1))))
                                                                      g$ls/false$8723$UGjMA)
                                                                    (g$syntax-violation$7473$UGjMA
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8722$UGjMA))))
                                                               (g$syntax-dispatch$7367$UGjMA
                                                                 g$t$8722$UGjMA
                                                                 '(_ . any)))))
                                                           g$t$8719$UGjMA))))
                                                     (g$syntax-dispatch$7367$UGjMA
                                                       g$t$8719$UGjMA
                                                       '((#(scheme-id mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$8717$UGjMA))))
                                           (g$syntax-dispatch$7367$UGjMA
                                             g$t$8717$UGjMA
                                             '()))))
                                       g$fields$8715$UGjMA)))))
                          g$f$8714$UGjMA)
                        g$fields$8713$UGjMA
                        '0))))
                  (g$get-mutators$8607$UGjMA
                    (case-lambda
                      ((g$foo$8692$UGjMA g$fields$8693$UGjMA)
                       (letrec* ((g$gen-name$8694$UGjMA
                                   (case-lambda
                                     ((g$x$8712$UGjMA)
                                      (g$datum->syntax$7475$UGjMA
                                        g$foo$8692$UGjMA
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7476$UGjMA
                                                g$foo$8692$UGjMA))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7476$UGjMA
                                                g$x$8712$UGjMA))
                                            '"-set!")))))))
                         ((letrec ((g$f$8695$UGjMA
                                     (case-lambda
                                       ((g$fields$8696$UGjMA)
                                        ((case-lambda
                                           ((g$t$8697$UGjMA)
                                            ((case-lambda
                                               ((g$ls/false$8698$UGjMA)
                                                (if g$ls/false$8698$UGjMA
                                                  (apply
                                                    (case-lambda (() '()))
                                                    g$ls/false$8698$UGjMA)
                                                  ((case-lambda
                                                     ((g$t$8699$UGjMA)
                                                      ((case-lambda
                                                         ((g$ls/false$8700$UGjMA)
                                                          (if g$ls/false$8700$UGjMA
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$8701$UGjMA
                                                                   g$accessor$8702$UGjMA
                                                                   g$mutator$8703$UGjMA
                                                                   g$rest$8704$UGjMA)
                                                                 (cons
                                                                   g$mutator$8703$UGjMA
                                                                   (g$f$8695$UGjMA
                                                                     g$rest$8704$UGjMA))))
                                                              g$ls/false$8700$UGjMA)
                                                            ((case-lambda
                                                               ((g$t$8705$UGjMA)
                                                                ((case-lambda
                                                                   ((g$ls/false$8706$UGjMA)
                                                                    (if g$ls/false$8706$UGjMA
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$8707$UGjMA
                                                                             g$rest$8708$UGjMA)
                                                                           (cons
                                                                             (g$gen-name$8694$UGjMA
                                                                               g$name$8707$UGjMA)
                                                                             (g$f$8695$UGjMA
                                                                               g$rest$8708$UGjMA))))
                                                                        g$ls/false$8706$UGjMA)
                                                                      ((case-lambda
                                                                         ((g$t$8709$UGjMA)
                                                                          ((case-lambda
                                                                             ((g$ls/false$8710$UGjMA)
                                                                              (if g$ls/false$8710$UGjMA
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$8711$UGjMA)
                                                                                     (g$f$8695$UGjMA
                                                                                       g$rest$8711$UGjMA)))
                                                                                  g$ls/false$8710$UGjMA)
                                                                                (g$syntax-violation$7473$UGjMA
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$8709$UGjMA))))
                                                                           (g$syntax-dispatch$7367$UGjMA
                                                                             g$t$8709$UGjMA
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$8705$UGjMA))))
                                                                 (g$syntax-dispatch$7367$UGjMA
                                                                   g$t$8705$UGjMA
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$8699$UGjMA))))
                                                       (g$syntax-dispatch$7367$UGjMA
                                                         g$t$8699$UGjMA
                                                         '((#(scheme-id mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$8697$UGjMA))))
                                             (g$syntax-dispatch$7367$UGjMA
                                               g$t$8697$UGjMA
                                               '()))))
                                         g$fields$8696$UGjMA)))))
                            g$f$8695$UGjMA)
                          g$fields$8693$UGjMA)))))
                  (g$get-accessors$8608$UGjMA
                    (case-lambda
                      ((g$foo$8658$UGjMA g$fields$8659$UGjMA)
                       (letrec* ((g$gen-name$8660$UGjMA
                                   (case-lambda
                                     ((g$x$8691$UGjMA)
                                      (g$datum->syntax$7475$UGjMA
                                        g$foo$8658$UGjMA
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7476$UGjMA
                                                g$foo$8658$UGjMA))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7476$UGjMA
                                                g$x$8691$UGjMA)))))))))
                         (map (case-lambda
                                ((g$field$8661$UGjMA)
                                 ((case-lambda
                                    ((g$t$8662$UGjMA)
                                     ((case-lambda
                                        ((g$ls/false$8663$UGjMA)
                                         (if (if g$ls/false$8663$UGjMA
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$name$8664$UGjMA
                                                        g$accessor$8665$UGjMA
                                                        g$mutator$8666$UGjMA)
                                                      (g$id?$7089$UGjMA
                                                        g$accessor$8665$UGjMA)))
                                                   g$ls/false$8663$UGjMA))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$name$8667$UGjMA
                                                  g$accessor$8668$UGjMA
                                                  g$mutator$8669$UGjMA)
                                                g$accessor$8668$UGjMA))
                                             g$ls/false$8663$UGjMA)
                                           ((case-lambda
                                              ((g$t$8670$UGjMA)
                                               ((case-lambda
                                                  ((g$ls/false$8671$UGjMA)
                                                   (if (if g$ls/false$8671$UGjMA
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$name$8672$UGjMA
                                                                  g$accessor$8673$UGjMA)
                                                                (g$id?$7089$UGjMA
                                                                  g$accessor$8673$UGjMA)))
                                                             g$ls/false$8671$UGjMA))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$name$8674$UGjMA
                                                            g$accessor$8675$UGjMA)
                                                          g$accessor$8675$UGjMA))
                                                       g$ls/false$8671$UGjMA)
                                                     ((case-lambda
                                                        ((g$t$8676$UGjMA)
                                                         ((case-lambda
                                                            ((g$ls/false$8677$UGjMA)
                                                             (if (if g$ls/false$8677$UGjMA
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$name$8678$UGjMA)
                                                                          (g$id?$7089$UGjMA
                                                                            g$name$8678$UGjMA)))
                                                                       g$ls/false$8677$UGjMA))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$name$8679$UGjMA)
                                                                    (g$gen-name$8660$UGjMA
                                                                      g$name$8679$UGjMA)))
                                                                 g$ls/false$8677$UGjMA)
                                                               ((case-lambda
                                                                  ((g$t$8680$UGjMA)
                                                                   ((case-lambda
                                                                      ((g$ls/false$8681$UGjMA)
                                                                       (if (if g$ls/false$8681$UGjMA
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$name$8682$UGjMA)
                                                                                    (g$id?$7089$UGjMA
                                                                                      g$name$8682$UGjMA)))
                                                                                 g$ls/false$8681$UGjMA))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$name$8683$UGjMA)
                                                                              (g$gen-name$8660$UGjMA
                                                                                g$name$8683$UGjMA)))
                                                                           g$ls/false$8681$UGjMA)
                                                                         ((case-lambda
                                                                            ((g$t$8684$UGjMA)
                                                                             ((case-lambda
                                                                                ((g$ls/false$8685$UGjMA)
                                                                                 (if (if g$ls/false$8685$UGjMA
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$name$8686$UGjMA)
                                                                                              (g$id?$7089$UGjMA
                                                                                                g$name$8686$UGjMA)))
                                                                                           g$ls/false$8685$UGjMA))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$name$8687$UGjMA)
                                                                                        (g$gen-name$8660$UGjMA
                                                                                          g$name$8687$UGjMA)))
                                                                                     g$ls/false$8685$UGjMA)
                                                                                   ((case-lambda
                                                                                      ((g$t$8688$UGjMA)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$8689$UGjMA)
                                                                                           (if g$ls/false$8689$UGjMA
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$others$8690$UGjMA)
                                                                                                  (g$syntax-violation$7473$UGjMA
                                                                                                    '#f
                                                                                                    '"invalid field spec"
                                                                                                    g$field$8661$UGjMA)))
                                                                                               g$ls/false$8689$UGjMA)
                                                                                             (g$syntax-violation$7473$UGjMA
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$8688$UGjMA))))
                                                                                        (g$syntax-dispatch$7367$UGjMA
                                                                                          g$t$8688$UGjMA
                                                                                          'any))))
                                                                                    g$t$8684$UGjMA))))
                                                                              (g$syntax-dispatch$7367$UGjMA
                                                                                g$t$8684$UGjMA
                                                                                'any))))
                                                                          g$t$8680$UGjMA))))
                                                                    (g$syntax-dispatch$7367$UGjMA
                                                                      g$t$8680$UGjMA
                                                                      '(#(scheme-id
                                                                          immutable)
                                                                        any)))))
                                                                g$t$8676$UGjMA))))
                                                          (g$syntax-dispatch$7367$UGjMA
                                                            g$t$8676$UGjMA
                                                            '(#(scheme-id
                                                                mutable)
                                                              any)))))
                                                      g$t$8670$UGjMA))))
                                                (g$syntax-dispatch$7367$UGjMA
                                                  g$t$8670$UGjMA
                                                  '(#(scheme-id immutable)
                                                    any
                                                    any)))))
                                            g$t$8662$UGjMA))))
                                      (g$syntax-dispatch$7367$UGjMA
                                        g$t$8662$UGjMA
                                        '(#(scheme-id mutable) any any any)))))
                                  g$field$8661$UGjMA)))
                              g$fields$8659$UGjMA)))))
                  (g$enumerate$8609$UGjMA
                    (case-lambda
                      ((g$ls$8654$UGjMA)
                       ((letrec ((g$f$8655$UGjMA
                                   (case-lambda
                                     ((g$ls$8656$UGjMA g$i$8657$UGjMA)
                                      (if (null? g$ls$8656$UGjMA)
                                        '()
                                        (cons
                                          g$i$8657$UGjMA
                                          (g$f$8655$UGjMA
                                            (cdr g$ls$8656$UGjMA)
                                            (+ g$i$8657$UGjMA '1))))))))
                          g$f$8655$UGjMA)
                        g$ls$8654$UGjMA
                        '0))))
                  (g$do-define-record$8610$UGjMA
                    (case-lambda
                      ((g$namespec$8634$UGjMA g$clause*$8635$UGjMA)
                       ((case-lambda
                          ((g$foo$8636$UGjMA)
                           ((case-lambda
                              ((g$foo-rtd$8637$UGjMA)
                               ((case-lambda
                                  ((g$foo-rcd$8638$UGjMA)
                                   ((case-lambda
                                      ((g$protocol$8639$UGjMA)
                                       ((case-lambda
                                          ((g$make-foo$8640$UGjMA)
                                           ((case-lambda
                                              ((g$fields$8641$UGjMA)
                                               ((case-lambda
                                                  ((g$idx*$8642$UGjMA)
                                                   ((case-lambda
                                                      ((g$foo-x*$8643$UGjMA)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$8644$UGjMA)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$8645$UGjMA)
                                                               ((case-lambda
                                                                  ((g$foo?$8646$UGjMA)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$8647$UGjMA)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$8648$UGjMA)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$8649$UGjMA)
                                                                               ((case-lambda
                                                                                  (()
                                                                                   (g$bless$7330$UGjMA
                                                                                     (cons
                                                                                       'begin
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rtd$8637$UGjMA
                                                                                           g$foo-rtd-code$8647$UGjMA)
                                                                                         (cons
                                                                                           (list
                                                                                             'define
                                                                                             g$protocol$8639$UGjMA
                                                                                             g$protocol-code$8649$UGjMA)
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo-rcd$8638$UGjMA
                                                                                               g$foo-rcd-code$8648$UGjMA)
                                                                                             (cons
                                                                                               (list
                                                                                                 'define-syntax
                                                                                                 g$foo$8636$UGjMA
                                                                                                 (list
                                                                                                   'list
                                                                                                   ''$rtd
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rtd$8637$UGjMA)
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rcd$8638$UGjMA)))
                                                                                               (cons
                                                                                                 (list
                                                                                                   'define
                                                                                                   g$foo?$8646$UGjMA
                                                                                                   (list
                                                                                                     'record-predicate
                                                                                                     g$foo-rtd$8637$UGjMA))
                                                                                                 (cons
                                                                                                   (list
                                                                                                     'define
                                                                                                     g$make-foo$8640$UGjMA
                                                                                                     (list
                                                                                                       'record-constructor
                                                                                                       g$foo-rcd$8638$UGjMA))
                                                                                                   (append
                                                                                                     (map (case-lambda
                                                                                                            ((g$foo-x$8650$UGjMA
                                                                                                               g$idx$8651$UGjMA)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$foo-x$8650$UGjMA
                                                                                                               (list
                                                                                                                 'record-accessor
                                                                                                                 g$foo-rtd$8637$UGjMA
                                                                                                                 g$idx$8651$UGjMA))))
                                                                                                          g$foo-x*$8643$UGjMA
                                                                                                          g$idx*$8642$UGjMA)
                                                                                                     (map (case-lambda
                                                                                                            ((g$set-foo-x!$8652$UGjMA
                                                                                                               g$idx$8653$UGjMA)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$set-foo-x!$8652$UGjMA
                                                                                                               (list
                                                                                                                 'record-mutator
                                                                                                                 g$foo-rtd$8637$UGjMA
                                                                                                                 g$idx$8653$UGjMA))))
                                                                                                          g$set-foo-x!*$8644$UGjMA
                                                                                                          g$set-foo-idx*$8645$UGjMA)))))))))))))))
                                                                            (g$get-protocol-code$8604$UGjMA
                                                                              g$clause*$8635$UGjMA))))
                                                                        (g$foo-rcd-code$8603$UGjMA
                                                                          g$clause*$8635$UGjMA
                                                                          g$foo-rtd$8637$UGjMA
                                                                          g$protocol$8639$UGjMA
                                                                          (g$parent-rcd-code$8602$UGjMA
                                                                            g$clause*$8635$UGjMA)))))
                                                                    (g$foo-rtd-code$8600$UGjMA
                                                                      g$foo$8636$UGjMA
                                                                      g$clause*$8635$UGjMA
                                                                      (g$parent-rtd-code$8601$UGjMA
                                                                        g$clause*$8635$UGjMA)))))
                                                                (g$get-record-predicate-name$8598$UGjMA
                                                                  g$namespec$8634$UGjMA))))
                                                            (g$get-mutator-indices$8606$UGjMA
                                                              g$fields$8641$UGjMA))))
                                                        (g$get-mutators$8607$UGjMA
                                                          g$foo$8636$UGjMA
                                                          g$fields$8641$UGjMA))))
                                                    (g$get-accessors$8608$UGjMA
                                                      g$foo$8636$UGjMA
                                                      g$fields$8641$UGjMA))))
                                                (g$enumerate$8609$UGjMA
                                                  g$fields$8641$UGjMA))))
                                            (g$get-fields$8605$UGjMA
                                              g$clause*$8635$UGjMA))))
                                        (g$get-record-constructor-name$8597$UGjMA
                                          g$namespec$8634$UGjMA))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$8596$UGjMA g$namespec$8634$UGjMA)))))
                  (g$verify-clauses$8611$UGjMA
                    (case-lambda
                      ((g$x$8616$UGjMA g$cls*$8617$UGjMA)
                       (letrec* ((g$valid-kwds$8618$UGjMA
                                   (map g$bless$7330$UGjMA
                                        '(fields
                                           parent
                                           parent-rtd
                                           protocol
                                           sealed
                                           opaque
                                           nongenerative)))
                                 (g$free-id-member?$8619$UGjMA
                                   (case-lambda
                                     ((g$x$8631$UGjMA g$ls$8632$UGjMA)
                                      (if (pair? g$ls$8632$UGjMA)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$8633$UGjMA)
                                              (if g$t$8633$UGjMA
                                                g$t$8633$UGjMA
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$8619$UGjMA
                                                    g$x$8631$UGjMA
                                                    (cdr g$ls$8632$UGjMA))))))
                                           (g$free-id=?$7093$UGjMA
                                             g$x$8631$UGjMA
                                             (car g$ls$8632$UGjMA))))
                                        '#f)))))
                         ((letrec ((g$f$8620$UGjMA
                                     (case-lambda
                                       ((g$cls*$8621$UGjMA g$seen*$8622$UGjMA)
                                        (if (null? g$cls*$8621$UGjMA)
                                          (void)
                                          ((case-lambda
                                             ((g$t$8623$UGjMA)
                                              ((case-lambda
                                                 ((g$ls/false$8624$UGjMA)
                                                  (if g$ls/false$8624$UGjMA
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$8625$UGjMA
                                                           g$rest$8626$UGjMA)
                                                         (if ((case-lambda
                                                                ((g$t$8627$UGjMA)
                                                                 (if g$t$8627$UGjMA
                                                                   g$t$8627$UGjMA
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$8619$UGjMA
                                                                            g$kwd$8625$UGjMA
                                                                            g$valid-kwds$8618$UGjMA))))))
                                                              (not (g$id?$7089$UGjMA
                                                                     g$kwd$8625$UGjMA)))
                                                           (g$syntax-violation$7473$UGjMA
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$8625$UGjMA)
                                                           (if (g$bound-id-member?$7096$UGjMA
                                                                 g$kwd$8625$UGjMA
                                                                 g$seen*$8622$UGjMA)
                                                             (g$syntax-violation$7473$UGjMA
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$8616$UGjMA
                                                               g$kwd$8625$UGjMA)
                                                             (g$f$8620$UGjMA
                                                               (cdr g$cls*$8621$UGjMA)
                                                               (cons
                                                                 g$kwd$8625$UGjMA
                                                                 g$seen*$8622$UGjMA))))))
                                                      g$ls/false$8624$UGjMA)
                                                    ((case-lambda
                                                       ((g$t$8628$UGjMA)
                                                        ((case-lambda
                                                           ((g$ls/false$8629$UGjMA)
                                                            (if g$ls/false$8629$UGjMA
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$8630$UGjMA)
                                                                   (g$syntax-violation$7473$UGjMA
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$8630$UGjMA)))
                                                                g$ls/false$8629$UGjMA)
                                                              (g$syntax-violation$7473$UGjMA
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8628$UGjMA))))
                                                         (g$syntax-dispatch$7367$UGjMA
                                                           g$t$8628$UGjMA
                                                           'any))))
                                                     g$t$8623$UGjMA))))
                                               (g$syntax-dispatch$7367$UGjMA
                                                 g$t$8623$UGjMA
                                                 '(any . any)))))
                                           (car g$cls*$8621$UGjMA)))))))
                            g$f$8620$UGjMA)
                          g$cls*$8617$UGjMA
                          '()))))))
          ((case-lambda
             ((g$t$8612$UGjMA)
              ((case-lambda
                 ((g$ls/false$8613$UGjMA)
                  (if g$ls/false$8613$UGjMA
                    (apply
                      (case-lambda
                        ((g$namespec$8614$UGjMA g$clause*$8615$UGjMA)
                         (begin
                           (g$verify-clauses$8611$UGjMA
                             g$x$8594$UGjMA
                             g$clause*$8615$UGjMA)
                           (g$do-define-record$8610$UGjMA
                             g$namespec$8614$UGjMA
                             g$clause*$8615$UGjMA))))
                      g$ls/false$8613$UGjMA)
                    (g$syntax-violation$7473$UGjMA
                      '#f
                      '"invalid syntax"
                      g$t$8612$UGjMA))))
               (g$syntax-dispatch$7367$UGjMA
                 g$t$8612$UGjMA
                 '(_ any . each-any)))))
           g$x$8594$UGjMA)))))
   (g$define-condition-type-macro$7362$UGjMA
     g$define-condition-type-macro$10812$UGjMA
     (case-lambda
       ((g$x$8850$UGjMA)
        (letrec* ((g$mkname$8851$UGjMA
                    (case-lambda
                      ((g$name$8874$UGjMA g$suffix$8875$UGjMA)
                       (g$datum->syntax$7475$UGjMA
                         g$name$8874$UGjMA
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$7476$UGjMA g$name$8874$UGjMA))
                             g$suffix$8875$UGjMA)))))))
          ((case-lambda
             ((g$t$8852$UGjMA)
              ((case-lambda
                 ((g$ls/false$8853$UGjMA)
                  (if (if g$ls/false$8853$UGjMA
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$8854$UGjMA
                                 g$name$8855$UGjMA
                                 g$super$8856$UGjMA
                                 g$constructor$8857$UGjMA
                                 g$predicate$8858$UGjMA
                                 g$field*$8859$UGjMA
                                 g$accessor*$8860$UGjMA)
                               (if (g$id?$7089$UGjMA g$name$8855$UGjMA)
                                 (if (g$id?$7089$UGjMA g$super$8856$UGjMA)
                                   (if (g$id?$7089$UGjMA
                                         g$constructor$8857$UGjMA)
                                     (if (g$id?$7089$UGjMA
                                           g$predicate$8858$UGjMA)
                                       (if (g$for-all$5365$UGjMA
                                             g$id?$7089$UGjMA
                                             g$field*$8859$UGjMA)
                                         (begin
                                           '#f
                                           (g$for-all$5365$UGjMA
                                             g$id?$7089$UGjMA
                                             g$accessor*$8860$UGjMA))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$8853$UGjMA))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$8861$UGjMA
                           g$name$8862$UGjMA
                           g$super$8863$UGjMA
                           g$constructor$8864$UGjMA
                           g$predicate$8865$UGjMA
                           g$field*$8866$UGjMA
                           g$accessor*$8867$UGjMA)
                         ((case-lambda
                            ((g$aux-accessor*$8868$UGjMA)
                             (g$bless$7330$UGjMA
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$8862$UGjMA
                                         g$constructor$8864$UGjMA
                                         (gensym))
                                       (cons
                                         (list 'parent g$super$8863$UGjMA)
                                         (cons
                                           (cons
                                             'fields
                                             (map (case-lambda
                                                    ((g$field$8869$UGjMA
                                                       g$aux$8870$UGjMA)
                                                     (list
                                                       'immutable
                                                       g$field$8869$UGjMA
                                                       g$aux$8870$UGjMA)))
                                                  g$field*$8866$UGjMA
                                                  g$aux-accessor*$8868$UGjMA))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$8865$UGjMA
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$8862$UGjMA)))
                                     (map (case-lambda
                                            ((g$accessor$8871$UGjMA
                                               g$aux$8872$UGjMA)
                                             (list
                                               'define
                                               g$accessor$8871$UGjMA
                                               (list
                                                 'condition-accessor
                                                 (list
                                                   'record-type-descriptor
                                                   g$name$8862$UGjMA)
                                                 g$aux$8872$UGjMA))))
                                          g$accessor*$8867$UGjMA
                                          g$aux-accessor*$8868$UGjMA)))))))
                          (map (case-lambda ((g$x$8873$UGjMA) (gensym)))
                               g$accessor*$8867$UGjMA))))
                      g$ls/false$8853$UGjMA)
                    (g$syntax-violation$7473$UGjMA
                      '#f
                      '"invalid syntax"
                      g$t$8852$UGjMA))))
               (g$syntax-dispatch$7367$UGjMA
                 g$t$8852$UGjMA
                 '(any any any any any . #(each (any any)))))))
           g$x$8850$UGjMA)))))
   (g$incorrect-usage-macro$7363$UGjMA
     g$incorrect-usage-macro$10813$UGjMA
     (case-lambda
       ((g$e$8876$UGjMA)
        (g$syntax-violation$7473$UGjMA
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$8876$UGjMA))))
   (g$parameterize-transformer$7364$UGjMA
     g$parameterize-transformer$10814$UGjMA
     (case-lambda
       ((g$e$8877$UGjMA g$r$8878$UGjMA g$mr$8879$UGjMA)
        ((case-lambda
           ((g$t$8880$UGjMA)
            ((case-lambda
               ((g$ls/false$8881$UGjMA)
                (if g$ls/false$8881$UGjMA
                  (apply
                    (case-lambda
                      ((g$b$8882$UGjMA g$b*$8883$UGjMA)
                       (g$chi-internal$7396$UGjMA
                         (cons g$b$8882$UGjMA g$b*$8883$UGjMA)
                         g$r$8878$UGjMA
                         g$mr$8879$UGjMA)))
                    g$ls/false$8881$UGjMA)
                  ((case-lambda
                     ((g$t$8884$UGjMA)
                      ((case-lambda
                         ((g$ls/false$8885$UGjMA)
                          (if g$ls/false$8885$UGjMA
                            (apply
                              (case-lambda
                                ((g$olhs*$8886$UGjMA
                                   g$orhs*$8887$UGjMA
                                   g$b$8888$UGjMA
                                   g$b*$8889$UGjMA)
                                 ((case-lambda
                                    ((g$lhs*$8890$UGjMA
                                       g$rhs*$8891$UGjMA
                                       g$t*$8892$UGjMA
                                       g$swap$8893$UGjMA)
                                     (g$build-let$7022$UGjMA
                                       '#f
                                       (append
                                         g$lhs*$8890$UGjMA
                                         g$rhs*$8891$UGjMA)
                                       (append
                                         (g$chi-expr*$7383$UGjMA
                                           g$olhs*$8886$UGjMA
                                           g$r$8878$UGjMA
                                           g$mr$8879$UGjMA)
                                         (g$chi-expr*$7383$UGjMA
                                           g$orhs*$8887$UGjMA
                                           g$r$8878$UGjMA
                                           g$mr$8879$UGjMA))
                                       (g$build-let$7022$UGjMA
                                         '#f
                                         (list g$swap$8893$UGjMA)
                                         (list
                                           (g$build-lambda$7020$UGjMA
                                             '#f
                                             '()
                                             (g$build-sequence$7023$UGjMA
                                               '#f
                                               (map (case-lambda
                                                      ((g$t$8894$UGjMA
                                                         g$lhs$8895$UGjMA
                                                         g$rhs$8896$UGjMA)
                                                       (g$build-let$7022$UGjMA
                                                         '#f
                                                         (list g$t$8894$UGjMA)
                                                         (list
                                                           (list
                                                             g$lhs$8895$UGjMA))
                                                         (g$build-sequence$7023$UGjMA
                                                           '#f
                                                           (list
                                                             (list
                                                               g$lhs$8895$UGjMA
                                                               g$rhs$8896$UGjMA)
                                                             (list
                                                               'set!
                                                               g$rhs$8896$UGjMA
                                                               g$t$8894$UGjMA))))))
                                                    g$t*$8892$UGjMA
                                                    g$lhs*$8890$UGjMA
                                                    g$rhs*$8891$UGjMA))))
                                         (list
                                           '(primitive dynamic-wind)
                                           g$swap$8893$UGjMA
                                           (g$build-lambda$7020$UGjMA
                                             '#f
                                             '()
                                             (g$chi-internal$7396$UGjMA
                                               (cons
                                                 g$b$8888$UGjMA
                                                 g$b*$8889$UGjMA)
                                               g$r$8878$UGjMA
                                               g$mr$8879$UGjMA))
                                           g$swap$8893$UGjMA)))))
                                  (map (case-lambda
                                         ((g$x$8897$UGjMA)
                                          (g$gen-lexical$7033$UGjMA 'lhs)))
                                       g$olhs*$8886$UGjMA)
                                  (map (case-lambda
                                         ((g$x$8898$UGjMA)
                                          (g$gen-lexical$7033$UGjMA 'rhs)))
                                       g$olhs*$8886$UGjMA)
                                  (map (case-lambda
                                         ((g$x$8899$UGjMA)
                                          (g$gen-lexical$7033$UGjMA 't)))
                                       g$olhs*$8886$UGjMA)
                                  (g$gen-lexical$7033$UGjMA 'swap))))
                              g$ls/false$8885$UGjMA)
                            (g$syntax-violation$7473$UGjMA
                              '#f
                              '"invalid syntax"
                              g$t$8884$UGjMA))))
                       (g$syntax-dispatch$7367$UGjMA
                         g$t$8884$UGjMA
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$8880$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$8880$UGjMA
               '(_ () any . each-any)))))
         g$e$8877$UGjMA))))
   (g$foreign-call-transformer$7365$UGjMA
     g$foreign-call-transformer$10815$UGjMA
     (case-lambda
       ((g$e$8900$UGjMA g$r$8901$UGjMA g$mr$8902$UGjMA)
        ((case-lambda
           ((g$t$8903$UGjMA)
            ((case-lambda
               ((g$ls/false$8904$UGjMA)
                (if g$ls/false$8904$UGjMA
                  (apply
                    (case-lambda
                      ((g$name$8905$UGjMA g$arg*$8906$UGjMA)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$7385$UGjMA
                             g$name$8905$UGjMA
                             g$r$8901$UGjMA
                             g$mr$8902$UGjMA)
                           (g$chi-expr*$7383$UGjMA
                             g$arg*$8906$UGjMA
                             g$r$8901$UGjMA
                             g$mr$8902$UGjMA)))))
                    g$ls/false$8904$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$8903$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$8903$UGjMA
               '(_ any . each-any)))))
         g$e$8900$UGjMA))))
   (g$convert-pattern$7366$UGjMA
     g$convert-pattern$10816$UGjMA
     (case-lambda
       ((g$pattern$8907$UGjMA g$keys$8908$UGjMA)
        (letrec* ((g$cvt*$8909$UGjMA
                    (case-lambda
                      ((g$p*$8989$UGjMA g$n$8990$UGjMA g$ids$8991$UGjMA)
                       (if (null? g$p*$8989$UGjMA)
                         (values '() g$ids$8991$UGjMA)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$8909$UGjMA
                                (cdr g$p*$8989$UGjMA)
                                g$n$8990$UGjMA
                                g$ids$8991$UGjMA)))
                           (case-lambda
                             ((g$y$8994$UGjMA g$ids$8995$UGjMA)
                              ((case-lambda
                                 ((g$ids$8996$UGjMA g$y$8997$UGjMA)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$8910$UGjMA
                                         (car g$p*$8989$UGjMA)
                                         g$n$8990$UGjMA
                                         g$ids$8996$UGjMA)))
                                    (case-lambda
                                      ((g$x$9000$UGjMA g$ids$9001$UGjMA)
                                       ((case-lambda
                                          ((g$ids$9002$UGjMA g$x$9003$UGjMA)
                                           (values
                                             (cons
                                               g$x$9003$UGjMA
                                               g$y$8997$UGjMA)
                                             g$ids$9002$UGjMA)))
                                        g$ids$9001$UGjMA
                                        g$x$9000$UGjMA))))))
                               g$ids$8995$UGjMA
                               g$y$8994$UGjMA))))))))
                  (g$cvt$8910$UGjMA
                    (case-lambda
                      ((g$p$8911$UGjMA g$n$8912$UGjMA g$ids$8913$UGjMA)
                       ((case-lambda
                          ((g$t$8914$UGjMA)
                           ((case-lambda
                              ((g$ls/false$8915$UGjMA)
                               (if (if g$ls/false$8915$UGjMA
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$8916$UGjMA)
                                            (g$id?$7089$UGjMA g$id$8916$UGjMA)))
                                         g$ls/false$8915$UGjMA))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$8917$UGjMA)
                                      (if (g$bound-id-member?$7096$UGjMA
                                            g$p$8911$UGjMA
                                            g$keys$8908$UGjMA)
                                        (values
                                          (vector 'free-id g$p$8911$UGjMA)
                                          g$ids$8913$UGjMA)
                                        (if (g$free-id=?$7093$UGjMA
                                              g$p$8911$UGjMA
                                              (g$scheme-stx$7310$UGjMA '_))
                                          (values '_ g$ids$8913$UGjMA)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$8911$UGjMA
                                                g$n$8912$UGjMA)
                                              g$ids$8913$UGjMA))))))
                                   g$ls/false$8915$UGjMA)
                                 ((case-lambda
                                    ((g$t$8918$UGjMA)
                                     ((case-lambda
                                        ((g$ls/false$8919$UGjMA)
                                         (if (if g$ls/false$8919$UGjMA
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$8920$UGjMA
                                                        g$dots$8921$UGjMA)
                                                      (g$ellipsis?$7368$UGjMA
                                                        g$dots$8921$UGjMA)))
                                                   g$ls/false$8919$UGjMA))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$8922$UGjMA
                                                  g$dots$8923$UGjMA)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$8910$UGjMA
                                                       g$p$8922$UGjMA
                                                       (+ g$n$8912$UGjMA '1)
                                                       g$ids$8913$UGjMA)))
                                                  (case-lambda
                                                    ((g$p$8926$UGjMA
                                                       g$ids$8927$UGjMA)
                                                     ((case-lambda
                                                        ((g$ids$8928$UGjMA
                                                           g$p$8929$UGjMA)
                                                         (values
                                                           (if (eq? g$p$8929$UGjMA
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$8929$UGjMA))
                                                           g$ids$8928$UGjMA)))
                                                      g$ids$8927$UGjMA
                                                      g$p$8926$UGjMA))))))
                                             g$ls/false$8919$UGjMA)
                                           ((case-lambda
                                              ((g$t$8930$UGjMA)
                                               ((case-lambda
                                                  ((g$ls/false$8931$UGjMA)
                                                   (if (if g$ls/false$8931$UGjMA
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$8932$UGjMA
                                                                  g$dots$8933$UGjMA
                                                                  g$ys$8934$UGjMA
                                                                  g$z$8935$UGjMA)
                                                                (g$ellipsis?$7368$UGjMA
                                                                  g$dots$8933$UGjMA)))
                                                             g$ls/false$8931$UGjMA))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$8936$UGjMA
                                                            g$dots$8937$UGjMA
                                                            g$ys$8938$UGjMA
                                                            g$z$8939$UGjMA)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$8910$UGjMA
                                                                 g$z$8939$UGjMA
                                                                 g$n$8912$UGjMA
                                                                 g$ids$8913$UGjMA)))
                                                            (case-lambda
                                                              ((g$z$8942$UGjMA
                                                                 g$ids$8943$UGjMA)
                                                               ((case-lambda
                                                                  ((g$ids$8944$UGjMA
                                                                     g$z$8945$UGjMA)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$8909$UGjMA
                                                                          g$ys$8938$UGjMA
                                                                          g$n$8912$UGjMA
                                                                          g$ids$8944$UGjMA)))
                                                                     (case-lambda
                                                                       ((g$ys$8948$UGjMA
                                                                          g$ids$8949$UGjMA)
                                                                        ((case-lambda
                                                                           ((g$ids$8950$UGjMA
                                                                              g$ys$8951$UGjMA)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$8910$UGjMA
                                                                                   g$x$8936$UGjMA
                                                                                   (+ g$n$8912$UGjMA
                                                                                      '1)
                                                                                   g$ids$8950$UGjMA)))
                                                                              (case-lambda
                                                                                ((g$x$8954$UGjMA
                                                                                   g$ids$8955$UGjMA)
                                                                                 ((case-lambda
                                                                                    ((g$ids$8956$UGjMA
                                                                                       g$x$8957$UGjMA)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$8957$UGjMA
                                                                                         (reverse
                                                                                           g$ys$8951$UGjMA)
                                                                                         g$z$8945$UGjMA)
                                                                                       g$ids$8956$UGjMA)))
                                                                                  g$ids$8955$UGjMA
                                                                                  g$x$8954$UGjMA))))))
                                                                         g$ids$8949$UGjMA
                                                                         g$ys$8948$UGjMA))))))
                                                                g$ids$8943$UGjMA
                                                                g$z$8942$UGjMA))))))
                                                       g$ls/false$8931$UGjMA)
                                                     ((case-lambda
                                                        ((g$t$8958$UGjMA)
                                                         ((case-lambda
                                                            ((g$ls/false$8959$UGjMA)
                                                             (if g$ls/false$8959$UGjMA
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$8960$UGjMA
                                                                      g$y$8961$UGjMA)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$8910$UGjMA
                                                                           g$y$8961$UGjMA
                                                                           g$n$8912$UGjMA
                                                                           g$ids$8913$UGjMA)))
                                                                      (case-lambda
                                                                        ((g$y$8964$UGjMA
                                                                           g$ids$8965$UGjMA)
                                                                         ((case-lambda
                                                                            ((g$ids$8966$UGjMA
                                                                               g$y$8967$UGjMA)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$8910$UGjMA
                                                                                    g$x$8960$UGjMA
                                                                                    g$n$8912$UGjMA
                                                                                    g$ids$8966$UGjMA)))
                                                                               (case-lambda
                                                                                 ((g$x$8970$UGjMA
                                                                                    g$ids$8971$UGjMA)
                                                                                  ((case-lambda
                                                                                     ((g$ids$8972$UGjMA
                                                                                        g$x$8973$UGjMA)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$8973$UGjMA
                                                                                          g$y$8967$UGjMA)
                                                                                        g$ids$8972$UGjMA)))
                                                                                   g$ids$8971$UGjMA
                                                                                   g$x$8970$UGjMA))))))
                                                                          g$ids$8965$UGjMA
                                                                          g$y$8964$UGjMA))))))
                                                                 g$ls/false$8959$UGjMA)
                                                               ((case-lambda
                                                                  ((g$t$8974$UGjMA)
                                                                   ((case-lambda
                                                                      ((g$ls/false$8975$UGjMA)
                                                                       (if g$ls/false$8975$UGjMA
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$8913$UGjMA)))
                                                                           g$ls/false$8975$UGjMA)
                                                                         ((case-lambda
                                                                            ((g$t$8976$UGjMA)
                                                                             ((case-lambda
                                                                                ((g$ls/false$8977$UGjMA)
                                                                                 (if (if g$ls/false$8977$UGjMA
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$8978$UGjMA)
                                                                                              (not (g$stx?$7061$UGjMA
                                                                                                     g$p$8978$UGjMA))))
                                                                                           g$ls/false$8977$UGjMA))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$8979$UGjMA)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$8910$UGjMA
                                                                                               g$p$8979$UGjMA
                                                                                               g$n$8912$UGjMA
                                                                                               g$ids$8913$UGjMA)))
                                                                                          (case-lambda
                                                                                            ((g$p$8982$UGjMA
                                                                                               g$ids$8983$UGjMA)
                                                                                             ((case-lambda
                                                                                                ((g$ids$8984$UGjMA
                                                                                                   g$p$8985$UGjMA)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$8985$UGjMA)
                                                                                                   g$ids$8984$UGjMA)))
                                                                                              g$ids$8983$UGjMA
                                                                                              g$p$8982$UGjMA))))))
                                                                                     g$ls/false$8977$UGjMA)
                                                                                   ((case-lambda
                                                                                      ((g$t$8986$UGjMA)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$8987$UGjMA)
                                                                                           (if g$ls/false$8987$UGjMA
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$8988$UGjMA)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$7100$UGjMA
                                                                                                        g$datum$8988$UGjMA))
                                                                                                    g$ids$8913$UGjMA)))
                                                                                               g$ls/false$8987$UGjMA)
                                                                                             (g$syntax-violation$7473$UGjMA
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$8986$UGjMA))))
                                                                                        (g$syntax-dispatch$7367$UGjMA
                                                                                          g$t$8986$UGjMA
                                                                                          'any))))
                                                                                    g$t$8976$UGjMA))))
                                                                              (g$syntax-dispatch$7367$UGjMA
                                                                                g$t$8976$UGjMA
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$8974$UGjMA))))
                                                                    (g$syntax-dispatch$7367$UGjMA
                                                                      g$t$8974$UGjMA
                                                                      '()))))
                                                                g$t$8958$UGjMA))))
                                                          (g$syntax-dispatch$7367$UGjMA
                                                            g$t$8958$UGjMA
                                                            '(any . any)))))
                                                      g$t$8930$UGjMA))))
                                                (g$syntax-dispatch$7367$UGjMA
                                                  g$t$8930$UGjMA
                                                  '(any any
                                                        .
                                                        #(each+ any () any))))))
                                            g$t$8918$UGjMA))))
                                      (g$syntax-dispatch$7367$UGjMA
                                        g$t$8918$UGjMA
                                        '(any any)))))
                                  g$t$8914$UGjMA))))
                            (g$syntax-dispatch$7367$UGjMA
                              g$t$8914$UGjMA
                              'any))))
                        g$p$8911$UGjMA)))))
          (g$cvt$8910$UGjMA g$pattern$8907$UGjMA '0 '())))))
   (g$syntax-dispatch$7367$UGjMA
     g$syntax-dispatch$10817$UGjMA
     (case-lambda
       ((g$e$9004$UGjMA g$p$9005$UGjMA)
        (letrec* ((g$stx^$9006$UGjMA
                    (case-lambda
                      ((g$e$9114$UGjMA
                         g$m*$9115$UGjMA
                         g$s*$9116$UGjMA
                         g$ae*$9117$UGjMA)
                       (if (if (null? g$m*$9115$UGjMA)
                             (if (null? g$s*$9116$UGjMA)
                               (begin '#f (null? g$ae*$9117$UGjMA))
                               '#f)
                             '#f)
                         g$e$9114$UGjMA
                         (g$mkstx$7077$UGjMA
                           g$e$9114$UGjMA
                           g$m*$9115$UGjMA
                           g$s*$9116$UGjMA
                           g$ae*$9117$UGjMA)))))
                  (g$match-each$9007$UGjMA
                    (case-lambda
                      ((g$e$9098$UGjMA
                         g$p$9099$UGjMA
                         g$m*$9100$UGjMA
                         g$s*$9101$UGjMA
                         g$ae*$9102$UGjMA)
                       (if (pair? g$e$9098$UGjMA)
                         ((case-lambda
                            ((g$first$9103$UGjMA)
                             (if g$first$9103$UGjMA
                               (begin
                                 '#f
                                 ((case-lambda
                                    ((g$rest$9104$UGjMA)
                                     (if g$rest$9104$UGjMA
                                       (begin
                                         '#f
                                         (cons
                                           g$first$9103$UGjMA
                                           g$rest$9104$UGjMA))
                                       '#f)))
                                  (g$match-each$9007$UGjMA
                                    (cdr g$e$9098$UGjMA)
                                    g$p$9099$UGjMA
                                    g$m*$9100$UGjMA
                                    g$s*$9101$UGjMA
                                    g$ae*$9102$UGjMA)))
                               '#f)))
                          (g$match$9013$UGjMA
                            (car g$e$9098$UGjMA)
                            g$p$9099$UGjMA
                            g$m*$9100$UGjMA
                            g$s*$9101$UGjMA
                            g$ae*$9102$UGjMA
                            '()))
                         (if (null? g$e$9098$UGjMA)
                           '()
                           (if (g$stx?$7061$UGjMA g$e$9098$UGjMA)
                             (if (not (g$top-marked?$7032$UGjMA
                                        g$m*$9100$UGjMA))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$7076$UGjMA
                                        g$m*$9100$UGjMA
                                        g$s*$9101$UGjMA
                                        g$ae*$9102$UGjMA
                                        g$e$9098$UGjMA)))
                                   (case-lambda
                                     ((g$m*$9108$UGjMA
                                        g$s*$9109$UGjMA
                                        g$ae*$9110$UGjMA)
                                      ((case-lambda
                                         ((g$ae*$9111$UGjMA
                                            g$s*$9112$UGjMA
                                            g$m*$9113$UGjMA)
                                          (g$match-each$9007$UGjMA
                                            (g$stx-expr$7063$UGjMA
                                              g$e$9098$UGjMA)
                                            g$p$9099$UGjMA
                                            g$m*$9113$UGjMA
                                            g$s*$9112$UGjMA
                                            g$ae*$9111$UGjMA)))
                                       g$ae*$9110$UGjMA
                                       g$s*$9109$UGjMA
                                       g$m*$9108$UGjMA)))))
                               '#f)
                             (if (annotation? g$e$9098$UGjMA)
                               (g$match-each$9007$UGjMA
                                 (annotation-expression g$e$9098$UGjMA)
                                 g$p$9099$UGjMA
                                 g$m*$9100$UGjMA
                                 g$s*$9101$UGjMA
                                 g$ae*$9102$UGjMA)
                               '#f)))))))
                  (g$match-each+$9008$UGjMA
                    (case-lambda
                      ((g$e$9066$UGjMA
                         g$x-pat$9067$UGjMA
                         g$y-pat$9068$UGjMA
                         g$z-pat$9069$UGjMA
                         g$m*$9070$UGjMA
                         g$s*$9071$UGjMA
                         g$ae*$9072$UGjMA
                         g$r$9073$UGjMA)
                       ((letrec ((g$f$9074$UGjMA
                                   (case-lambda
                                     ((g$e$9075$UGjMA
                                        g$m*$9076$UGjMA
                                        g$s*$9077$UGjMA
                                        g$ae*$9078$UGjMA)
                                      (if (pair? g$e$9075$UGjMA)
                                        (call-with-values
                                          (case-lambda
                                            (()
                                             (g$f$9074$UGjMA
                                               (cdr g$e$9075$UGjMA)
                                               g$m*$9076$UGjMA
                                               g$s*$9077$UGjMA
                                               g$ae*$9078$UGjMA)))
                                          (case-lambda
                                            ((g$xr*$9082$UGjMA
                                               g$y-pat$9083$UGjMA
                                               g$r$9084$UGjMA)
                                             ((case-lambda
                                                ((g$r$9085$UGjMA
                                                   g$y-pat$9086$UGjMA
                                                   g$xr*$9087$UGjMA)
                                                 (if g$r$9085$UGjMA
                                                   (if (null?
                                                         g$y-pat$9086$UGjMA)
                                                     ((case-lambda
                                                        ((g$xr$9088$UGjMA)
                                                         (if g$xr$9088$UGjMA
                                                           (values
                                                             (cons
                                                               g$xr$9088$UGjMA
                                                               g$xr*$9087$UGjMA)
                                                             g$y-pat$9086$UGjMA
                                                             g$r$9085$UGjMA)
                                                           (values
                                                             '#f
                                                             '#f
                                                             '#f))))
                                                      (g$match$9013$UGjMA
                                                        (car g$e$9075$UGjMA)
                                                        g$x-pat$9067$UGjMA
                                                        g$m*$9076$UGjMA
                                                        g$s*$9077$UGjMA
                                                        g$ae*$9078$UGjMA
                                                        '()))
                                                     (values
                                                       '()
                                                       (cdr g$y-pat$9086$UGjMA)
                                                       (g$match$9013$UGjMA
                                                         (car g$e$9075$UGjMA)
                                                         (car g$y-pat$9086$UGjMA)
                                                         g$m*$9076$UGjMA
                                                         g$s*$9077$UGjMA
                                                         g$ae*$9078$UGjMA
                                                         g$r$9085$UGjMA)))
                                                   (values '#f '#f '#f))))
                                              g$r$9084$UGjMA
                                              g$y-pat$9083$UGjMA
                                              g$xr*$9082$UGjMA))))
                                        (if (g$stx?$7061$UGjMA g$e$9075$UGjMA)
                                          (if (g$top-marked?$7032$UGjMA
                                                g$m*$9076$UGjMA)
                                            (values
                                              '()
                                              g$y-pat$9068$UGjMA
                                              (g$match$9013$UGjMA
                                                g$e$9075$UGjMA
                                                g$z-pat$9069$UGjMA
                                                g$m*$9076$UGjMA
                                                g$s*$9077$UGjMA
                                                g$ae*$9078$UGjMA
                                                g$r$9073$UGjMA))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$join-wraps$7076$UGjMA
                                                   g$m*$9076$UGjMA
                                                   g$s*$9077$UGjMA
                                                   g$ae*$9078$UGjMA
                                                   g$e$9075$UGjMA)))
                                              (case-lambda
                                                ((g$m*$9092$UGjMA
                                                   g$s*$9093$UGjMA
                                                   g$ae*$9094$UGjMA)
                                                 ((case-lambda
                                                    ((g$ae*$9095$UGjMA
                                                       g$s*$9096$UGjMA
                                                       g$m*$9097$UGjMA)
                                                     (g$f$9074$UGjMA
                                                       (g$stx-expr$7063$UGjMA
                                                         g$e$9075$UGjMA)
                                                       g$m*$9097$UGjMA
                                                       g$s*$9096$UGjMA
                                                       g$ae*$9095$UGjMA)))
                                                  g$ae*$9094$UGjMA
                                                  g$s*$9093$UGjMA
                                                  g$m*$9092$UGjMA)))))
                                          (if (annotation? g$e$9075$UGjMA)
                                            (g$f$9074$UGjMA
                                              (annotation-expression
                                                g$e$9075$UGjMA)
                                              g$m*$9076$UGjMA
                                              g$s*$9077$UGjMA
                                              g$ae*$9078$UGjMA)
                                            (values
                                              '()
                                              g$y-pat$9068$UGjMA
                                              (g$match$9013$UGjMA
                                                g$e$9075$UGjMA
                                                g$z-pat$9069$UGjMA
                                                g$m*$9076$UGjMA
                                                g$s*$9077$UGjMA
                                                g$ae*$9078$UGjMA
                                                g$r$9073$UGjMA)))))))))
                          g$f$9074$UGjMA)
                        g$e$9066$UGjMA
                        g$m*$9070$UGjMA
                        g$s*$9071$UGjMA
                        g$ae*$9072$UGjMA))))
                  (g$match-each-any$9009$UGjMA
                    (case-lambda
                      ((g$e$9052$UGjMA
                         g$m*$9053$UGjMA
                         g$s*$9054$UGjMA
                         g$ae*$9055$UGjMA)
                       (if (pair? g$e$9052$UGjMA)
                         ((case-lambda
                            ((g$l$9056$UGjMA)
                             (if g$l$9056$UGjMA
                               (begin
                                 '#f
                                 (cons
                                   (g$stx^$9006$UGjMA
                                     (car g$e$9052$UGjMA)
                                     g$m*$9053$UGjMA
                                     g$s*$9054$UGjMA
                                     g$ae*$9055$UGjMA)
                                   g$l$9056$UGjMA))
                               '#f)))
                          (g$match-each-any$9009$UGjMA
                            (cdr g$e$9052$UGjMA)
                            g$m*$9053$UGjMA
                            g$s*$9054$UGjMA
                            g$ae*$9055$UGjMA))
                         (if (null? g$e$9052$UGjMA)
                           '()
                           (if (g$stx?$7061$UGjMA g$e$9052$UGjMA)
                             (if (not (g$top-marked?$7032$UGjMA
                                        g$m*$9053$UGjMA))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$7076$UGjMA
                                        g$m*$9053$UGjMA
                                        g$s*$9054$UGjMA
                                        g$ae*$9055$UGjMA
                                        g$e$9052$UGjMA)))
                                   (case-lambda
                                     ((g$m*$9060$UGjMA
                                        g$s*$9061$UGjMA
                                        g$ae*$9062$UGjMA)
                                      ((case-lambda
                                         ((g$ae*$9063$UGjMA
                                            g$s*$9064$UGjMA
                                            g$m*$9065$UGjMA)
                                          (g$match-each-any$9009$UGjMA
                                            (g$stx-expr$7063$UGjMA
                                              g$e$9052$UGjMA)
                                            g$m*$9065$UGjMA
                                            g$s*$9064$UGjMA
                                            g$ae*$9063$UGjMA)))
                                       g$ae*$9062$UGjMA
                                       g$s*$9061$UGjMA
                                       g$m*$9060$UGjMA)))))
                               '#f)
                             (if (annotation? g$e$9052$UGjMA)
                               (g$match-each-any$9009$UGjMA
                                 (annotation-expression g$e$9052$UGjMA)
                                 g$m*$9053$UGjMA
                                 g$s*$9054$UGjMA
                                 g$ae*$9055$UGjMA)
                               '#f)))))))
                  (g$match-empty$9010$UGjMA
                    (case-lambda
                      ((g$p$9049$UGjMA g$r$9050$UGjMA)
                       (if (null? g$p$9049$UGjMA)
                         g$r$9050$UGjMA
                         (if (eq? g$p$9049$UGjMA '_)
                           g$r$9050$UGjMA
                           (if (eq? g$p$9049$UGjMA 'any)
                             (cons '() g$r$9050$UGjMA)
                             (if (pair? g$p$9049$UGjMA)
                               (g$match-empty$9010$UGjMA
                                 (car g$p$9049$UGjMA)
                                 (g$match-empty$9010$UGjMA
                                   (cdr g$p$9049$UGjMA)
                                   g$r$9050$UGjMA))
                               (if (eq? g$p$9049$UGjMA 'each-any)
                                 (cons '() g$r$9050$UGjMA)
                                 ((case-lambda
                                    ((g$t$9051$UGjMA)
                                     (if (eqv? g$t$9051$UGjMA 'each)
                                       (g$match-empty$9010$UGjMA
                                         (vector-ref g$p$9049$UGjMA '1)
                                         g$r$9050$UGjMA)
                                       (if (eqv? g$t$9051$UGjMA 'each+)
                                         (g$match-empty$9010$UGjMA
                                           (vector-ref g$p$9049$UGjMA '1)
                                           (g$match-empty$9010$UGjMA
                                             (reverse
                                               (vector-ref g$p$9049$UGjMA '2))
                                             (g$match-empty$9010$UGjMA
                                               (vector-ref g$p$9049$UGjMA '3)
                                               g$r$9050$UGjMA)))
                                         (if (memv
                                               g$t$9051$UGjMA
                                               '(free-id atom))
                                           g$r$9050$UGjMA
                                           (if (memv
                                                 g$t$9051$UGjMA
                                                 '(scheme-id atom))
                                             g$r$9050$UGjMA
                                             (if (eqv? g$t$9051$UGjMA 'vector)
                                               (g$match-empty$9010$UGjMA
                                                 (vector-ref g$p$9049$UGjMA '1)
                                                 g$r$9050$UGjMA)
                                               (assertion-violation
                                                 'syntax-dispatch
                                                 '"invalid pattern"
                                                 g$p$9049$UGjMA))))))))
                                  (vector-ref g$p$9049$UGjMA '0))))))))))
                  (g$combine$9011$UGjMA
                    (case-lambda
                      ((g$r*$9047$UGjMA g$r$9048$UGjMA)
                       (if (null? (car g$r*$9047$UGjMA))
                         g$r$9048$UGjMA
                         (cons
                           (map car g$r*$9047$UGjMA)
                           (g$combine$9011$UGjMA
                             (map cdr g$r*$9047$UGjMA)
                             g$r$9048$UGjMA))))))
                  (g$match*$9012$UGjMA
                    (case-lambda
                      ((g$e$9029$UGjMA
                         g$p$9030$UGjMA
                         g$m*$9031$UGjMA
                         g$s*$9032$UGjMA
                         g$ae*$9033$UGjMA
                         g$r$9034$UGjMA)
                       (if (null? g$p$9030$UGjMA)
                         (if (null? g$e$9029$UGjMA)
                           (begin '#f g$r$9034$UGjMA)
                           '#f)
                         (if (pair? g$p$9030$UGjMA)
                           (if (pair? g$e$9029$UGjMA)
                             (begin
                               '#f
                               (g$match$9013$UGjMA
                                 (car g$e$9029$UGjMA)
                                 (car g$p$9030$UGjMA)
                                 g$m*$9031$UGjMA
                                 g$s*$9032$UGjMA
                                 g$ae*$9033$UGjMA
                                 (g$match$9013$UGjMA
                                   (cdr g$e$9029$UGjMA)
                                   (cdr g$p$9030$UGjMA)
                                   g$m*$9031$UGjMA
                                   g$s*$9032$UGjMA
                                   g$ae*$9033$UGjMA
                                   g$r$9034$UGjMA)))
                             '#f)
                           (if (eq? g$p$9030$UGjMA 'each-any)
                             ((case-lambda
                                ((g$l$9035$UGjMA)
                                 (if g$l$9035$UGjMA
                                   (begin
                                     '#f
                                     (cons g$l$9035$UGjMA g$r$9034$UGjMA))
                                   '#f)))
                              (g$match-each-any$9009$UGjMA
                                g$e$9029$UGjMA
                                g$m*$9031$UGjMA
                                g$s*$9032$UGjMA
                                g$ae*$9033$UGjMA))
                             ((case-lambda
                                ((g$t$9036$UGjMA)
                                 (if (eqv? g$t$9036$UGjMA 'each)
                                   (if (null? g$e$9029$UGjMA)
                                     (g$match-empty$9010$UGjMA
                                       (vector-ref g$p$9030$UGjMA '1)
                                       g$r$9034$UGjMA)
                                     ((case-lambda
                                        ((g$r*$9046$UGjMA)
                                         (if g$r*$9046$UGjMA
                                           (begin
                                             '#f
                                             (g$combine$9011$UGjMA
                                               g$r*$9046$UGjMA
                                               g$r$9034$UGjMA))
                                           '#f)))
                                      (g$match-each$9007$UGjMA
                                        g$e$9029$UGjMA
                                        (vector-ref g$p$9030$UGjMA '1)
                                        g$m*$9031$UGjMA
                                        g$s*$9032$UGjMA
                                        g$ae*$9033$UGjMA)))
                                   (if (eqv? g$t$9036$UGjMA 'free-id)
                                     (if (symbol? g$e$9029$UGjMA)
                                       (if (g$top-marked?$7032$UGjMA
                                             g$m*$9031$UGjMA)
                                         (if (g$free-id=?$7093$UGjMA
                                               (g$stx^$9006$UGjMA
                                                 g$e$9029$UGjMA
                                                 g$m*$9031$UGjMA
                                                 g$s*$9032$UGjMA
                                                 g$ae*$9033$UGjMA)
                                               (vector-ref g$p$9030$UGjMA '1))
                                           (begin '#f g$r$9034$UGjMA)
                                           '#f)
                                         '#f)
                                       '#f)
                                     (if (eqv? g$t$9036$UGjMA 'scheme-id)
                                       (if (symbol? g$e$9029$UGjMA)
                                         (if (g$top-marked?$7032$UGjMA
                                               g$m*$9031$UGjMA)
                                           (if (g$free-id=?$7093$UGjMA
                                                 (g$stx^$9006$UGjMA
                                                   g$e$9029$UGjMA
                                                   g$m*$9031$UGjMA
                                                   g$s*$9032$UGjMA
                                                   g$ae*$9033$UGjMA)
                                                 (g$scheme-stx$7310$UGjMA
                                                   (vector-ref
                                                     g$p$9030$UGjMA
                                                     '1)))
                                             (begin '#f g$r$9034$UGjMA)
                                             '#f)
                                           '#f)
                                         '#f)
                                       (if (eqv? g$t$9036$UGjMA 'each+)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$match-each+$9008$UGjMA
                                                g$e$9029$UGjMA
                                                (vector-ref g$p$9030$UGjMA '1)
                                                (vector-ref g$p$9030$UGjMA '2)
                                                (vector-ref g$p$9030$UGjMA '3)
                                                g$m*$9031$UGjMA
                                                g$s*$9032$UGjMA
                                                g$ae*$9033$UGjMA
                                                g$r$9034$UGjMA)))
                                           (case-lambda
                                             ((g$xr*$9040$UGjMA
                                                g$y-pat$9041$UGjMA
                                                g$r$9042$UGjMA)
                                              ((case-lambda
                                                 ((g$r$9043$UGjMA
                                                    g$y-pat$9044$UGjMA
                                                    g$xr*$9045$UGjMA)
                                                  (if g$r$9043$UGjMA
                                                    (if (null?
                                                          g$y-pat$9044$UGjMA)
                                                      (begin
                                                        '#f
                                                        (if (null?
                                                              g$xr*$9045$UGjMA)
                                                          (g$match-empty$9010$UGjMA
                                                            (vector-ref
                                                              g$p$9030$UGjMA
                                                              '1)
                                                            g$r$9043$UGjMA)
                                                          (g$combine$9011$UGjMA
                                                            g$xr*$9045$UGjMA
                                                            g$r$9043$UGjMA)))
                                                      '#f)
                                                    '#f)))
                                               g$r$9042$UGjMA
                                               g$y-pat$9041$UGjMA
                                               g$xr*$9040$UGjMA))))
                                         (if (eqv? g$t$9036$UGjMA 'atom)
                                           (if (equal?
                                                 (vector-ref g$p$9030$UGjMA '1)
                                                 (g$strip$7099$UGjMA
                                                   g$e$9029$UGjMA
                                                   g$m*$9031$UGjMA))
                                             (begin '#f g$r$9034$UGjMA)
                                             '#f)
                                           (if (eqv? g$t$9036$UGjMA 'vector)
                                             (if (vector? g$e$9029$UGjMA)
                                               (begin
                                                 '#f
                                                 (g$match$9013$UGjMA
                                                   (vector->list g$e$9029$UGjMA)
                                                   (vector-ref
                                                     g$p$9030$UGjMA
                                                     '1)
                                                   g$m*$9031$UGjMA
                                                   g$s*$9032$UGjMA
                                                   g$ae*$9033$UGjMA
                                                   g$r$9034$UGjMA))
                                               '#f)
                                             (assertion-violation
                                               'syntax-dispatch
                                               '"invalid pattern"
                                               g$p$9030$UGjMA)))))))))
                              (vector-ref g$p$9030$UGjMA '0))))))))
                  (g$match$9013$UGjMA
                    (case-lambda
                      ((g$e$9014$UGjMA
                         g$p$9015$UGjMA
                         g$m*$9016$UGjMA
                         g$s*$9017$UGjMA
                         g$ae*$9018$UGjMA
                         g$r$9019$UGjMA)
                       (if (not g$r$9019$UGjMA)
                         '#f
                         (if (eq? g$p$9015$UGjMA '_)
                           g$r$9019$UGjMA
                           (if (eq? g$p$9015$UGjMA 'any)
                             (cons
                               (g$stx^$9006$UGjMA
                                 g$e$9014$UGjMA
                                 g$m*$9016$UGjMA
                                 g$s*$9017$UGjMA
                                 g$ae*$9018$UGjMA)
                               g$r$9019$UGjMA)
                             (if (g$stx?$7061$UGjMA g$e$9014$UGjMA)
                               (if (not (g$top-marked?$7032$UGjMA
                                          g$m*$9016$UGjMA))
                                 (begin
                                   '#f
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$join-wraps$7076$UGjMA
                                          g$m*$9016$UGjMA
                                          g$s*$9017$UGjMA
                                          g$ae*$9018$UGjMA
                                          g$e$9014$UGjMA)))
                                     (case-lambda
                                       ((g$m*$9023$UGjMA
                                          g$s*$9024$UGjMA
                                          g$ae*$9025$UGjMA)
                                        ((case-lambda
                                           ((g$ae*$9026$UGjMA
                                              g$s*$9027$UGjMA
                                              g$m*$9028$UGjMA)
                                            (g$match$9013$UGjMA
                                              (g$stx-expr$7063$UGjMA
                                                g$e$9014$UGjMA)
                                              g$p$9015$UGjMA
                                              g$m*$9028$UGjMA
                                              g$s*$9027$UGjMA
                                              g$ae*$9026$UGjMA
                                              g$r$9019$UGjMA)))
                                         g$ae*$9025$UGjMA
                                         g$s*$9024$UGjMA
                                         g$m*$9023$UGjMA)))))
                                 '#f)
                               (if (annotation? g$e$9014$UGjMA)
                                 (g$match$9013$UGjMA
                                   (annotation-expression g$e$9014$UGjMA)
                                   g$p$9015$UGjMA
                                   g$m*$9016$UGjMA
                                   g$s*$9017$UGjMA
                                   g$ae*$9018$UGjMA
                                   g$r$9019$UGjMA)
                                 (g$match*$9012$UGjMA
                                   g$e$9014$UGjMA
                                   g$p$9015$UGjMA
                                   g$m*$9016$UGjMA
                                   g$s*$9017$UGjMA
                                   g$ae*$9018$UGjMA
                                   g$r$9019$UGjMA))))))))))
          (g$match$9013$UGjMA g$e$9004$UGjMA g$p$9005$UGjMA '() '() '() '())))))
   (g$ellipsis?$7368$UGjMA
     g$ellipsis?$10818$UGjMA
     (case-lambda
       ((g$x$9118$UGjMA)
        (if (g$id?$7089$UGjMA g$x$9118$UGjMA)
          (begin
            '#f
            (g$free-id=?$7093$UGjMA
              g$x$9118$UGjMA
              (g$scheme-stx$7310$UGjMA '...)))
          '#f))))
   (g$underscore?$7369$UGjMA
     g$underscore?$10819$UGjMA
     (case-lambda
       ((g$x$9119$UGjMA)
        (if (g$id?$7089$UGjMA g$x$9119$UGjMA)
          (begin
            '#f
            (g$free-id=?$7093$UGjMA
              g$x$9119$UGjMA
              (g$scheme-stx$7310$UGjMA '_)))
          '#f))))
   (g$verify-literals$7370$UGjMA
     g$verify-literals$10820$UGjMA
     (case-lambda
       ((g$lits$9120$UGjMA g$expr$9121$UGjMA)
        (for-each
          (case-lambda
            ((g$x$9122$UGjMA)
             (if ((case-lambda
                    ((g$t$9123$UGjMA)
                     (if g$t$9123$UGjMA
                       g$t$9123$UGjMA
                       ((case-lambda
                          ((g$t$9124$UGjMA)
                           (if g$t$9124$UGjMA
                             g$t$9124$UGjMA
                             (begin
                               '#f
                               (g$underscore?$7369$UGjMA g$x$9122$UGjMA)))))
                        (g$ellipsis?$7368$UGjMA g$x$9122$UGjMA)))))
                  (not (g$id?$7089$UGjMA g$x$9122$UGjMA)))
               (g$syntax-violation$7473$UGjMA
                 '#f
                 '"invalid literal"
                 g$expr$9121$UGjMA
                 g$x$9122$UGjMA)
               (void))))
          g$lits$9120$UGjMA))))
   (g$syntax-case-transformer$7371$UGjMA
     g$syntax-case-transformer$10821$UGjMA
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$9125$UGjMA
                     (case-lambda
                       ((g$pvars$9182$UGjMA
                          g$expr$9183$UGjMA
                          g$y$9184$UGjMA
                          g$r$9185$UGjMA
                          g$mr$9186$UGjMA)
                        ((case-lambda
                           ((g$ids$9187$UGjMA g$levels$9188$UGjMA)
                            ((case-lambda
                               ((g$labels$9189$UGjMA g$new-vars$9190$UGjMA)
                                ((case-lambda
                                   ((g$body$9191$UGjMA)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$7020$UGjMA
                                        '#f
                                        g$new-vars$9190$UGjMA
                                        g$body$9191$UGjMA)
                                      g$y$9184$UGjMA)))
                                 (g$chi-expr$7385$UGjMA
                                   (g$add-subst$7079$UGjMA
                                     (g$make-full-rib$7057$UGjMA
                                       g$ids$9187$UGjMA
                                       g$labels$9189$UGjMA)
                                     g$expr$9183$UGjMA)
                                   (append
                                     (map (case-lambda
                                            ((g$label$9192$UGjMA
                                               g$var$9193$UGjMA
                                               g$level$9194$UGjMA)
                                             (cons
                                               g$label$9192$UGjMA
                                               (g$make-binding$7105$UGjMA
                                                 'syntax
                                                 (cons
                                                   g$var$9193$UGjMA
                                                   g$level$9194$UGjMA)))))
                                          g$labels$9189$UGjMA
                                          g$new-vars$9190$UGjMA
                                          (map cdr g$pvars$9182$UGjMA))
                                     g$r$9185$UGjMA)
                                   g$mr$9186$UGjMA))))
                             (map g$gen-label$7035$UGjMA g$ids$9187$UGjMA)
                             (map g$gen-lexical$7033$UGjMA g$ids$9187$UGjMA))))
                         (map car g$pvars$9182$UGjMA)
                         (map cdr g$pvars$9182$UGjMA)))))
                   (g$invalid-ids-error$9126$UGjMA
                     (case-lambda
                       ((g$id*$9176$UGjMA g$e$9177$UGjMA g$class$9178$UGjMA)
                        ((letrec ((g$find$9179$UGjMA
                                    (case-lambda
                                      ((g$id*$9180$UGjMA g$ok*$9181$UGjMA)
                                       (if (null? g$id*$9180$UGjMA)
                                         (g$syntax-violation$7473$UGjMA
                                           '#f
                                           '"invalid syntax"
                                           g$e$9177$UGjMA)
                                         (if (g$id?$7089$UGjMA
                                               (car g$id*$9180$UGjMA))
                                           (if (g$bound-id-member?$7096$UGjMA
                                                 (car g$id*$9180$UGjMA)
                                                 g$ok*$9181$UGjMA)
                                             (g$syntax-error$7470$UGjMA
                                               (car g$id*$9180$UGjMA)
                                               '"duplicate "
                                               g$class$9178$UGjMA)
                                             (g$find$9179$UGjMA
                                               (cdr g$id*$9180$UGjMA)
                                               (cons
                                                 (car g$id*$9180$UGjMA)
                                                 g$ok*$9181$UGjMA)))
                                           (g$syntax-error$7470$UGjMA
                                             (car g$id*$9180$UGjMA)
                                             '"invalid "
                                             g$class$9178$UGjMA)))))))
                           g$find$9179$UGjMA)
                         g$id*$9176$UGjMA
                         '()))))
                   (g$gen-clause$9127$UGjMA
                     (case-lambda
                       ((g$x$9156$UGjMA
                          g$keys$9157$UGjMA
                          g$clauses$9158$UGjMA
                          g$r$9159$UGjMA
                          g$mr$9160$UGjMA
                          g$pat$9161$UGjMA
                          g$fender$9162$UGjMA
                          g$expr$9163$UGjMA)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$7366$UGjMA
                               g$pat$9161$UGjMA
                               g$keys$9157$UGjMA)))
                          (case-lambda
                            ((g$p$9166$UGjMA g$pvars$9167$UGjMA)
                             ((case-lambda
                                ((g$pvars$9168$UGjMA g$p$9169$UGjMA)
                                 (if (not (g$distinct-bound-ids?$7095$UGjMA
                                            (map car g$pvars$9168$UGjMA)))
                                   (g$invalid-ids-error$9126$UGjMA
                                     (map car g$pvars$9168$UGjMA)
                                     g$pat$9161$UGjMA
                                     '"pattern variable")
                                   (if (not (g$for-all$5365$UGjMA
                                              (case-lambda
                                                ((g$x$9170$UGjMA)
                                                 (not (g$ellipsis?$7368$UGjMA
                                                        (car g$x$9170$UGjMA)))))
                                              g$pvars$9168$UGjMA))
                                     (g$syntax-violation$7473$UGjMA
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$9161$UGjMA)
                                     ((case-lambda
                                        ((g$y$9171$UGjMA)
                                         ((case-lambda
                                            ((g$test$9172$UGjMA)
                                             ((case-lambda
                                                ((g$conseq$9173$UGjMA)
                                                 ((case-lambda
                                                    ((g$altern$9174$UGjMA)
                                                     (list
                                                       (g$build-lambda$7020$UGjMA
                                                         '#f
                                                         (list g$y$9171$UGjMA)
                                                         (list
                                                           'if
                                                           g$test$9172$UGjMA
                                                           g$conseq$9173$UGjMA
                                                           g$altern$9174$UGjMA))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$9156$UGjMA
                                                         (list
                                                           'quote
                                                           g$p$9169$UGjMA)))))
                                                  (g$gen-syntax-case$9128$UGjMA
                                                    g$x$9156$UGjMA
                                                    g$keys$9157$UGjMA
                                                    g$clauses$9158$UGjMA
                                                    g$r$9159$UGjMA
                                                    g$mr$9160$UGjMA))))
                                              (g$build-dispatch-call$9125$UGjMA
                                                g$pvars$9168$UGjMA
                                                g$expr$9163$UGjMA
                                                g$y$9171$UGjMA
                                                g$r$9159$UGjMA
                                                g$mr$9160$UGjMA))))
                                          (if (eq? g$fender$9162$UGjMA '#t)
                                            g$y$9171$UGjMA
                                            ((case-lambda
                                               ((g$call$9175$UGjMA)
                                                (list
                                                  'if
                                                  g$y$9171$UGjMA
                                                  g$call$9175$UGjMA
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$9125$UGjMA
                                               g$pvars$9168$UGjMA
                                               g$fender$9162$UGjMA
                                               g$y$9171$UGjMA
                                               g$r$9159$UGjMA
                                               g$mr$9160$UGjMA))))))
                                      (g$gen-lexical$7033$UGjMA 'tmp))))))
                              g$pvars$9167$UGjMA
                              g$p$9166$UGjMA)))))))
                   (g$gen-syntax-case$9128$UGjMA
                     (case-lambda
                       ((g$x$9139$UGjMA
                          g$keys$9140$UGjMA
                          g$clauses$9141$UGjMA
                          g$r$9142$UGjMA
                          g$mr$9143$UGjMA)
                        (if (null? g$clauses$9141$UGjMA)
                          (list '(primitive syntax-error) g$x$9139$UGjMA)
                          ((case-lambda
                             ((g$t$9144$UGjMA)
                              ((case-lambda
                                 ((g$ls/false$9145$UGjMA)
                                  (if g$ls/false$9145$UGjMA
                                    (apply
                                      (case-lambda
                                        ((g$pat$9146$UGjMA g$expr$9147$UGjMA)
                                         (if (if (g$id?$7089$UGjMA
                                                   g$pat$9146$UGjMA)
                                               (if (not (g$bound-id-member?$7096$UGjMA
                                                          g$pat$9146$UGjMA
                                                          g$keys$9140$UGjMA))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$7368$UGjMA
                                                          g$pat$9146$UGjMA)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$7093$UGjMA
                                                 g$pat$9146$UGjMA
                                                 (g$scheme-stx$7310$UGjMA '_))
                                             (g$chi-expr$7385$UGjMA
                                               g$expr$9147$UGjMA
                                               g$r$9142$UGjMA
                                               g$mr$9143$UGjMA)
                                             ((case-lambda
                                                ((g$lab$9148$UGjMA
                                                   g$lex$9149$UGjMA)
                                                 ((case-lambda
                                                    ((g$body$9150$UGjMA)
                                                     (list
                                                       (g$build-lambda$7020$UGjMA
                                                         '#f
                                                         (list g$lex$9149$UGjMA)
                                                         g$body$9150$UGjMA)
                                                       g$x$9139$UGjMA)))
                                                  (g$chi-expr$7385$UGjMA
                                                    (g$add-subst$7079$UGjMA
                                                      (g$make-full-rib$7057$UGjMA
                                                        (list g$pat$9146$UGjMA)
                                                        (list g$lab$9148$UGjMA))
                                                      g$expr$9147$UGjMA)
                                                    (cons
                                                      (cons
                                                        g$lab$9148$UGjMA
                                                        (g$make-binding$7105$UGjMA
                                                          'syntax
                                                          (cons
                                                            g$lex$9149$UGjMA
                                                            '0)))
                                                      g$r$9142$UGjMA)
                                                    g$mr$9143$UGjMA))))
                                              (g$gen-label$7035$UGjMA
                                                g$pat$9146$UGjMA)
                                              (g$gen-lexical$7033$UGjMA
                                                g$pat$9146$UGjMA)))
                                           (g$gen-clause$9127$UGjMA
                                             g$x$9139$UGjMA
                                             g$keys$9140$UGjMA
                                             (cdr g$clauses$9141$UGjMA)
                                             g$r$9142$UGjMA
                                             g$mr$9143$UGjMA
                                             g$pat$9146$UGjMA
                                             '#t
                                             g$expr$9147$UGjMA))))
                                      g$ls/false$9145$UGjMA)
                                    ((case-lambda
                                       ((g$t$9151$UGjMA)
                                        ((case-lambda
                                           ((g$ls/false$9152$UGjMA)
                                            (if g$ls/false$9152$UGjMA
                                              (apply
                                                (case-lambda
                                                  ((g$pat$9153$UGjMA
                                                     g$fender$9154$UGjMA
                                                     g$expr$9155$UGjMA)
                                                   (g$gen-clause$9127$UGjMA
                                                     g$x$9139$UGjMA
                                                     g$keys$9140$UGjMA
                                                     (cdr g$clauses$9141$UGjMA)
                                                     g$r$9142$UGjMA
                                                     g$mr$9143$UGjMA
                                                     g$pat$9153$UGjMA
                                                     g$fender$9154$UGjMA
                                                     g$expr$9155$UGjMA)))
                                                g$ls/false$9152$UGjMA)
                                              (g$syntax-violation$7473$UGjMA
                                                '#f
                                                '"invalid syntax"
                                                g$t$9151$UGjMA))))
                                         (g$syntax-dispatch$7367$UGjMA
                                           g$t$9151$UGjMA
                                           '(any any any)))))
                                     g$t$9144$UGjMA))))
                               (g$syntax-dispatch$7367$UGjMA
                                 g$t$9144$UGjMA
                                 '(any any)))))
                           (car g$clauses$9141$UGjMA)))))))
           (case-lambda
             ((g$e$9129$UGjMA g$r$9130$UGjMA g$mr$9131$UGjMA)
              ((case-lambda
                 ((g$t$9132$UGjMA)
                  ((case-lambda
                     ((g$ls/false$9133$UGjMA)
                      (if g$ls/false$9133$UGjMA
                        (apply
                          (case-lambda
                            ((g$expr$9134$UGjMA
                               g$keys$9135$UGjMA
                               g$clauses$9136$UGjMA)
                             (begin
                               (g$verify-literals$7370$UGjMA
                                 g$keys$9135$UGjMA
                                 g$e$9129$UGjMA)
                               ((case-lambda
                                  ((g$x$9137$UGjMA)
                                   ((case-lambda
                                      ((g$body$9138$UGjMA)
                                       (list
                                         (g$build-lambda$7020$UGjMA
                                           '#f
                                           (list g$x$9137$UGjMA)
                                           g$body$9138$UGjMA)
                                         (g$chi-expr$7385$UGjMA
                                           g$expr$9134$UGjMA
                                           g$r$9130$UGjMA
                                           g$mr$9131$UGjMA))))
                                    (g$gen-syntax-case$9128$UGjMA
                                      g$x$9137$UGjMA
                                      g$keys$9135$UGjMA
                                      g$clauses$9136$UGjMA
                                      g$r$9130$UGjMA
                                      g$mr$9131$UGjMA))))
                                (g$gen-lexical$7033$UGjMA 'tmp)))))
                          g$ls/false$9133$UGjMA)
                        (g$syntax-violation$7473$UGjMA
                          '#f
                          '"invalid syntax"
                          g$t$9132$UGjMA))))
                   (g$syntax-dispatch$7367$UGjMA
                     g$t$9132$UGjMA
                     '(_ any each-any . each-any)))))
               g$e$9129$UGjMA))))))))
   (g$ellipsis-map$7372$UGjMA
     g$ellipsis-map$10822$UGjMA
     (case-lambda
       ((g$proc$9195$UGjMA g$ls$9196$UGjMA . g$ls*$9197$UGjMA)
        (letrec* ((g$who$9198$UGjMA '...))
          (begin
            (if (list? g$ls$9196$UGjMA)
              (void)
              (assertion-violation
                g$who$9198$UGjMA
                '"not a list"
                g$ls$9196$UGjMA))
            (if (null? g$ls*$9197$UGjMA)
              (void)
              ((case-lambda
                 ((g$n$9199$UGjMA)
                  (for-each
                    (case-lambda
                      ((g$x$9200$UGjMA)
                       (begin
                         (if (list? g$x$9200$UGjMA)
                           (void)
                           (assertion-violation
                             g$who$9198$UGjMA
                             '"not a list"
                             g$x$9200$UGjMA))
                         (if (= (length g$x$9200$UGjMA) g$n$9199$UGjMA)
                           (void)
                           (assertion-violation
                             g$who$9198$UGjMA
                             '"length mismatch"
                             g$ls$9196$UGjMA
                             g$x$9200$UGjMA)))))
                    g$ls*$9197$UGjMA)))
               (length g$ls$9196$UGjMA)))
            (apply map g$proc$9195$UGjMA g$ls$9196$UGjMA g$ls*$9197$UGjMA))))))
   (g$syntax-transformer$7373$UGjMA
     g$syntax-transformer$10823$UGjMA
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$9201$UGjMA
                     (case-lambda
                       ((g$src$9261$UGjMA
                          g$e$9262$UGjMA
                          g$r$9263$UGjMA
                          g$maps$9264$UGjMA
                          g$ellipsis?$9265$UGjMA
                          g$vec?$9266$UGjMA)
                        ((case-lambda
                           ((g$t$9267$UGjMA)
                            ((case-lambda
                               ((g$ls/false$9268$UGjMA)
                                (if (if g$ls/false$9268$UGjMA
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$9269$UGjMA)
                                             (g$ellipsis?$9265$UGjMA
                                               g$dots$9269$UGjMA)))
                                          g$ls/false$9268$UGjMA))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$9270$UGjMA)
                                       (g$syntax-violation$7473$UGjMA
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$9261$UGjMA)))
                                    g$ls/false$9268$UGjMA)
                                  ((case-lambda
                                     ((g$t$9271$UGjMA)
                                      ((case-lambda
                                         ((g$ls/false$9272$UGjMA)
                                          (if (if g$ls/false$9272$UGjMA
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$9273$UGjMA)
                                                       (g$id?$7089$UGjMA
                                                         g$id$9273$UGjMA)))
                                                    g$ls/false$9272$UGjMA))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$9274$UGjMA)
                                                 ((case-lambda
                                                    ((g$label$9275$UGjMA)
                                                     ((case-lambda
                                                        ((g$b$9276$UGjMA)
                                                         ((case-lambda
                                                            (()
                                                             (if (eq? (g$binding-type$7106$UGjMA
                                                                        g$b$9276$UGjMA)
                                                                      'syntax)
                                                               (call-with-values
                                                                 (case-lambda
                                                                   (()
                                                                    ((case-lambda
                                                                       ((g$var.lev$9279$UGjMA)
                                                                        (g$gen-ref$9202$UGjMA
                                                                          g$src$9261$UGjMA
                                                                          (car g$var.lev$9279$UGjMA)
                                                                          (cdr g$var.lev$9279$UGjMA)
                                                                          g$maps$9264$UGjMA)))
                                                                     (g$binding-value$7107$UGjMA
                                                                       g$b$9276$UGjMA))))
                                                                 (case-lambda
                                                                   ((g$var$9280$UGjMA
                                                                      g$maps$9281$UGjMA)
                                                                    ((case-lambda
                                                                       ((g$maps$9282$UGjMA
                                                                          g$var$9283$UGjMA)
                                                                        (values
                                                                          (list
                                                                            'ref
                                                                            g$var$9283$UGjMA)
                                                                          g$maps$9282$UGjMA)))
                                                                     g$maps$9281$UGjMA
                                                                     g$var$9280$UGjMA))))
                                                               (values
                                                                 (list
                                                                   'quote
                                                                   g$e$9262$UGjMA)
                                                                 g$maps$9264$UGjMA)))))))
                                                      (g$label->binding$7104$UGjMA
                                                        g$label$9275$UGjMA
                                                        g$r$9263$UGjMA))))
                                                  (g$id->label$7102$UGjMA
                                                    g$e$9262$UGjMA))))
                                              g$ls/false$9272$UGjMA)
                                            ((case-lambda
                                               ((g$t$9284$UGjMA)
                                                ((case-lambda
                                                   ((g$ls/false$9285$UGjMA)
                                                    (if (if g$ls/false$9285$UGjMA
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$9286$UGjMA
                                                                   g$e$9287$UGjMA)
                                                                 (g$ellipsis?$9265$UGjMA
                                                                   g$dots$9286$UGjMA)))
                                                              g$ls/false$9285$UGjMA))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$9288$UGjMA
                                                             g$e$9289$UGjMA)
                                                           (if g$vec?$9266$UGjMA
                                                             (g$syntax-violation$7473$UGjMA
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$9261$UGjMA)
                                                             (g$gen-syntax$9201$UGjMA
                                                               g$src$9261$UGjMA
                                                               g$e$9289$UGjMA
                                                               g$r$9263$UGjMA
                                                               g$maps$9264$UGjMA
                                                               (case-lambda
                                                                 ((g$x$9290$UGjMA)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$9285$UGjMA)
                                                      ((case-lambda
                                                         ((g$t$9291$UGjMA)
                                                          ((case-lambda
                                                             ((g$ls/false$9292$UGjMA)
                                                              (if (if g$ls/false$9292$UGjMA
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$9293$UGjMA
                                                                             g$dots$9294$UGjMA
                                                                             g$y$9295$UGjMA)
                                                                           (g$ellipsis?$9265$UGjMA
                                                                             g$dots$9294$UGjMA)))
                                                                        g$ls/false$9292$UGjMA))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$9296$UGjMA
                                                                       g$dots$9297$UGjMA
                                                                       g$y$9298$UGjMA)
                                                                     ((letrec ((g$f$9299$UGjMA
                                                                                 (case-lambda
                                                                                   ((g$y$9300$UGjMA
                                                                                      g$k$9301$UGjMA)
                                                                                    ((case-lambda
                                                                                       ((g$t$9302$UGjMA)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9303$UGjMA)
                                                                                            (if g$ls/false$9303$UGjMA
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$9301$UGjMA
                                                                                                     g$maps$9264$UGjMA)))
                                                                                                g$ls/false$9303$UGjMA)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9304$UGjMA)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9305$UGjMA)
                                                                                                      (if (if g$ls/false$9305$UGjMA
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$9306$UGjMA
                                                                                                                     g$y$9307$UGjMA)
                                                                                                                   (g$ellipsis?$9265$UGjMA
                                                                                                                     g$dots$9306$UGjMA)))
                                                                                                                g$ls/false$9305$UGjMA))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$9308$UGjMA
                                                                                                               g$y$9309$UGjMA)
                                                                                                             (g$f$9299$UGjMA
                                                                                                               g$y$9309$UGjMA
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$9310$UGjMA)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$9301$UGjMA
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$9310$UGjMA))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$9313$UGjMA
                                                                                                                         g$maps$9314$UGjMA)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$9315$UGjMA
                                                                                                                             g$x$9316$UGjMA)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$9315$UGjMA))
                                                                                                                             (g$syntax-violation$7473$UGjMA
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$9261$UGjMA)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$9204$UGjMA
                                                                                                                                 g$x$9316$UGjMA
                                                                                                                                 (car g$maps$9315$UGjMA))
                                                                                                                               (cdr g$maps$9315$UGjMA)))))
                                                                                                                        g$maps$9314$UGjMA
                                                                                                                        g$x$9313$UGjMA)))))))))
                                                                                                          g$ls/false$9305$UGjMA)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9317$UGjMA)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9318$UGjMA)
                                                                                                                (if g$ls/false$9318$UGjMA
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$9201$UGjMA
                                                                                                                              g$src$9261$UGjMA
                                                                                                                              g$y$9300$UGjMA
                                                                                                                              g$r$9263$UGjMA
                                                                                                                              g$maps$9264$UGjMA
                                                                                                                              g$ellipsis?$9265$UGjMA
                                                                                                                              g$vec?$9266$UGjMA)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$9321$UGjMA
                                                                                                                              g$maps$9322$UGjMA)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$9323$UGjMA
                                                                                                                                  g$y$9324$UGjMA)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$9301$UGjMA
                                                                                                                                       g$maps$9323$UGjMA)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$9327$UGjMA
                                                                                                                                       g$maps$9328$UGjMA)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$9329$UGjMA
                                                                                                                                           g$x$9330$UGjMA)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$9203$UGjMA
                                                                                                                                             g$x$9330$UGjMA
                                                                                                                                             g$y$9324$UGjMA)
                                                                                                                                           g$maps$9329$UGjMA)))
                                                                                                                                      g$maps$9328$UGjMA
                                                                                                                                      g$x$9327$UGjMA))))))
                                                                                                                             g$maps$9322$UGjMA
                                                                                                                             g$y$9321$UGjMA))))))
                                                                                                                    g$ls/false$9318$UGjMA)
                                                                                                                  (g$syntax-violation$7473$UGjMA
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9317$UGjMA))))
                                                                                                             (g$syntax-dispatch$7367$UGjMA
                                                                                                               g$t$9317$UGjMA
                                                                                                               '_))))
                                                                                                         g$t$9304$UGjMA))))
                                                                                                   (g$syntax-dispatch$7367$UGjMA
                                                                                                     g$t$9304$UGjMA
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$9302$UGjMA))))
                                                                                         (g$syntax-dispatch$7367$UGjMA
                                                                                           g$t$9302$UGjMA
                                                                                           '()))))
                                                                                     g$y$9300$UGjMA)))))
                                                                        g$f$9299$UGjMA)
                                                                      g$y$9298$UGjMA
                                                                      (case-lambda
                                                                        ((g$maps$9331$UGjMA)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$9201$UGjMA
                                                                                g$src$9261$UGjMA
                                                                                g$x$9296$UGjMA
                                                                                g$r$9263$UGjMA
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$9331$UGjMA)
                                                                                g$ellipsis?$9265$UGjMA
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$9334$UGjMA
                                                                                g$maps$9335$UGjMA)
                                                                              ((case-lambda
                                                                                 ((g$maps$9336$UGjMA
                                                                                    g$x$9337$UGjMA)
                                                                                  (if (null?
                                                                                        (car g$maps$9336$UGjMA))
                                                                                    (g$syntax-violation$7473$UGjMA
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$9261$UGjMA)
                                                                                    (values
                                                                                      (g$gen-map$9205$UGjMA
                                                                                        g$x$9337$UGjMA
                                                                                        (car g$maps$9336$UGjMA))
                                                                                      (cdr g$maps$9336$UGjMA)))))
                                                                               g$maps$9335$UGjMA
                                                                               g$x$9334$UGjMA)))))))))
                                                                  g$ls/false$9292$UGjMA)
                                                                ((case-lambda
                                                                   ((g$t$9338$UGjMA)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9339$UGjMA)
                                                                        (if g$ls/false$9339$UGjMA
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$9340$UGjMA
                                                                                 g$y$9341$UGjMA)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$9201$UGjMA
                                                                                      g$src$9261$UGjMA
                                                                                      g$x$9340$UGjMA
                                                                                      g$r$9263$UGjMA
                                                                                      g$maps$9264$UGjMA
                                                                                      g$ellipsis?$9265$UGjMA
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$9344$UGjMA
                                                                                      g$maps$9345$UGjMA)
                                                                                    ((case-lambda
                                                                                       ((g$maps$9346$UGjMA
                                                                                          g$xnew$9347$UGjMA)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$9201$UGjMA
                                                                                               g$src$9261$UGjMA
                                                                                               g$y$9341$UGjMA
                                                                                               g$r$9263$UGjMA
                                                                                               g$maps$9346$UGjMA
                                                                                               g$ellipsis?$9265$UGjMA
                                                                                               g$vec?$9266$UGjMA)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$9350$UGjMA
                                                                                               g$maps$9351$UGjMA)
                                                                                             ((case-lambda
                                                                                                ((g$maps$9352$UGjMA
                                                                                                   g$ynew$9353$UGjMA)
                                                                                                 (values
                                                                                                   (g$gen-cons$9206$UGjMA
                                                                                                     g$e$9262$UGjMA
                                                                                                     g$x$9340$UGjMA
                                                                                                     g$y$9341$UGjMA
                                                                                                     g$xnew$9347$UGjMA
                                                                                                     g$ynew$9353$UGjMA)
                                                                                                   g$maps$9352$UGjMA)))
                                                                                              g$maps$9351$UGjMA
                                                                                              g$ynew$9350$UGjMA))))))
                                                                                     g$maps$9345$UGjMA
                                                                                     g$xnew$9344$UGjMA))))))
                                                                            g$ls/false$9339$UGjMA)
                                                                          ((case-lambda
                                                                             ((g$t$9354$UGjMA)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9355$UGjMA)
                                                                                  (if g$ls/false$9355$UGjMA
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$9356$UGjMA)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$9201$UGjMA
                                                                                                g$src$9261$UGjMA
                                                                                                g$ls$9356$UGjMA
                                                                                                g$r$9263$UGjMA
                                                                                                g$maps$9264$UGjMA
                                                                                                g$ellipsis?$9265$UGjMA
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$9359$UGjMA
                                                                                                g$maps$9360$UGjMA)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$9361$UGjMA
                                                                                                    g$lsnew$9362$UGjMA)
                                                                                                  (values
                                                                                                    (g$gen-vector$9207$UGjMA
                                                                                                      g$e$9262$UGjMA
                                                                                                      g$ls$9356$UGjMA
                                                                                                      g$lsnew$9362$UGjMA)
                                                                                                    g$maps$9361$UGjMA)))
                                                                                               g$maps$9360$UGjMA
                                                                                               g$lsnew$9359$UGjMA))))))
                                                                                      g$ls/false$9355$UGjMA)
                                                                                    ((case-lambda
                                                                                       ((g$t$9363$UGjMA)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9364$UGjMA)
                                                                                            (if g$ls/false$9364$UGjMA
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$9262$UGjMA)
                                                                                                     g$maps$9264$UGjMA)))
                                                                                                g$ls/false$9364$UGjMA)
                                                                                              (g$syntax-violation$7473$UGjMA
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9363$UGjMA))))
                                                                                         (g$syntax-dispatch$7367$UGjMA
                                                                                           g$t$9363$UGjMA
                                                                                           '_))))
                                                                                     g$t$9354$UGjMA))))
                                                                               (g$syntax-dispatch$7367$UGjMA
                                                                                 g$t$9354$UGjMA
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9338$UGjMA))))
                                                                     (g$syntax-dispatch$7367$UGjMA
                                                                       g$t$9338$UGjMA
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9291$UGjMA))))
                                                           (g$syntax-dispatch$7367$UGjMA
                                                             g$t$9291$UGjMA
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$9284$UGjMA))))
                                                 (g$syntax-dispatch$7367$UGjMA
                                                   g$t$9284$UGjMA
                                                   '(any any)))))
                                             g$t$9271$UGjMA))))
                                       (g$syntax-dispatch$7367$UGjMA
                                         g$t$9271$UGjMA
                                         'any))))
                                   g$t$9267$UGjMA))))
                             (g$syntax-dispatch$7367$UGjMA
                               g$t$9267$UGjMA
                               'any))))
                         g$e$9262$UGjMA))))
                   (g$gen-ref$9202$UGjMA
                     (case-lambda
                       ((g$src$9248$UGjMA
                          g$var$9249$UGjMA
                          g$level$9250$UGjMA
                          g$maps$9251$UGjMA)
                        (if (= g$level$9250$UGjMA '0)
                          (values g$var$9249$UGjMA g$maps$9251$UGjMA)
                          (if (null? g$maps$9251$UGjMA)
                            (g$syntax-violation$7473$UGjMA
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$9248$UGjMA)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$9202$UGjMA
                                   g$src$9248$UGjMA
                                   g$var$9249$UGjMA
                                   (- g$level$9250$UGjMA '1)
                                   (cdr g$maps$9251$UGjMA))))
                              (case-lambda
                                ((g$outer-var$9254$UGjMA
                                   g$outer-maps$9255$UGjMA)
                                 ((case-lambda
                                    ((g$outer-maps$9256$UGjMA
                                       g$outer-var$9257$UGjMA)
                                     ((case-lambda
                                        ((g$t$9258$UGjMA)
                                         (if g$t$9258$UGjMA
                                           ((case-lambda
                                              ((g$b$9259$UGjMA)
                                               (values
                                                 (cdr g$b$9259$UGjMA)
                                                 g$maps$9251$UGjMA)))
                                            g$t$9258$UGjMA)
                                           ((case-lambda
                                              ((g$inner-var$9260$UGjMA)
                                               (values
                                                 g$inner-var$9260$UGjMA
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$9257$UGjMA
                                                       g$inner-var$9260$UGjMA)
                                                     (car g$maps$9251$UGjMA))
                                                   g$outer-maps$9256$UGjMA))))
                                            (g$gen-lexical$7033$UGjMA 'tmp)))))
                                      (assq
                                        g$outer-var$9257$UGjMA
                                        (car g$maps$9251$UGjMA)))))
                                  g$outer-maps$9255$UGjMA
                                  g$outer-var$9254$UGjMA)))))))))
                   (g$gen-append$9203$UGjMA
                     (case-lambda
                       ((g$x$9246$UGjMA g$y$9247$UGjMA)
                        (if (equal? g$y$9247$UGjMA ''())
                          g$x$9246$UGjMA
                          (list 'append g$x$9246$UGjMA g$y$9247$UGjMA)))))
                   (g$gen-mappend$9204$UGjMA
                     (case-lambda
                       ((g$e$9244$UGjMA g$map-env$9245$UGjMA)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$9205$UGjMA
                            g$e$9244$UGjMA
                            g$map-env$9245$UGjMA)))))
                   (g$gen-map$9205$UGjMA
                     (case-lambda
                       ((g$e$9235$UGjMA g$map-env$9236$UGjMA)
                        ((case-lambda
                           ((g$formals$9237$UGjMA g$actuals$9238$UGjMA)
                            (if (eq? (car g$e$9235$UGjMA) 'ref)
                              (car g$actuals$9238$UGjMA)
                              (if (g$for-all$5365$UGjMA
                                    (case-lambda
                                      ((g$x$9239$UGjMA)
                                       (if (eq? (car g$x$9239$UGjMA) 'ref)
                                         (begin
                                           '#f
                                           (memq
                                             (g$cadr$4896$UGjMA g$x$9239$UGjMA)
                                             g$formals$9237$UGjMA))
                                         '#f)))
                                    (cdr g$e$9235$UGjMA))
                                ((case-lambda
                                   ((g$args$9240$UGjMA)
                                    (cons
                                      'map
                                      (cons
                                        (list 'primitive (car g$e$9235$UGjMA))
                                        g$args$9240$UGjMA))))
                                 (map ((case-lambda
                                         ((g$r$9241$UGjMA)
                                          (case-lambda
                                            ((g$x$9242$UGjMA)
                                             (cdr (assq
                                                    (g$cadr$4896$UGjMA
                                                      g$x$9242$UGjMA)
                                                    g$r$9241$UGjMA))))))
                                       (map cons
                                            g$formals$9237$UGjMA
                                            g$actuals$9238$UGjMA))
                                      (cdr g$e$9235$UGjMA)))
                                (g$cons*$5367$UGjMA
                                  'map
                                  (list
                                    'lambda
                                    g$formals$9237$UGjMA
                                    g$e$9235$UGjMA)
                                  g$actuals$9238$UGjMA)))))
                         (map cdr g$map-env$9236$UGjMA)
                         (map (case-lambda
                                ((g$x$9243$UGjMA)
                                 (list 'ref (car g$x$9243$UGjMA))))
                              g$map-env$9236$UGjMA)))))
                   (g$gen-cons$9206$UGjMA
                     (case-lambda
                       ((g$e$9227$UGjMA
                          g$x$9228$UGjMA
                          g$y$9229$UGjMA
                          g$xnew$9230$UGjMA
                          g$ynew$9231$UGjMA)
                        ((case-lambda
                           ((g$t$9232$UGjMA)
                            (if (eqv? g$t$9232$UGjMA 'quote)
                              (if (eq? (car g$xnew$9230$UGjMA) 'quote)
                                ((case-lambda
                                   ((g$xnew$9233$UGjMA g$ynew$9234$UGjMA)
                                    (if (if (eq? g$xnew$9233$UGjMA
                                                 g$x$9228$UGjMA)
                                          (begin
                                            '#f
                                            (eq? g$ynew$9234$UGjMA
                                                 g$y$9229$UGjMA))
                                          '#f)
                                      (list 'quote g$e$9227$UGjMA)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$9233$UGjMA
                                          g$ynew$9234$UGjMA)))))
                                 (g$cadr$4896$UGjMA g$xnew$9230$UGjMA)
                                 (g$cadr$4896$UGjMA g$ynew$9231$UGjMA))
                                (if (null?
                                      (g$cadr$4896$UGjMA g$ynew$9231$UGjMA))
                                  (list 'list g$xnew$9230$UGjMA)
                                  (list
                                    'cons
                                    g$xnew$9230$UGjMA
                                    g$ynew$9231$UGjMA)))
                              (if (eqv? g$t$9232$UGjMA 'list)
                                (cons
                                  'list
                                  (cons
                                    g$xnew$9230$UGjMA
                                    (cdr g$ynew$9231$UGjMA)))
                                (list
                                  'cons
                                  g$xnew$9230$UGjMA
                                  g$ynew$9231$UGjMA)))))
                         (car g$ynew$9231$UGjMA)))))
                   (g$gen-vector$9207$UGjMA
                     (case-lambda
                       ((g$e$9224$UGjMA g$ls$9225$UGjMA g$lsnew$9226$UGjMA)
                        (if (eq? (car g$lsnew$9226$UGjMA) 'quote)
                          (if (eq? (g$cadr$4896$UGjMA g$lsnew$9226$UGjMA)
                                   g$ls$9225$UGjMA)
                            (list 'quote g$e$9224$UGjMA)
                            (list
                              'quote
                              (list->vector
                                (g$cadr$4896$UGjMA g$lsnew$9226$UGjMA))))
                          (if (eq? (car g$lsnew$9226$UGjMA) 'list)
                            (cons 'vector (cdr g$lsnew$9226$UGjMA))
                            (list 'list->vector g$lsnew$9226$UGjMA))))))
                   (g$regen$9208$UGjMA
                     (case-lambda
                       ((g$x$9221$UGjMA)
                        ((case-lambda
                           ((g$t$9222$UGjMA)
                            (if (eqv? g$t$9222$UGjMA 'ref)
                              (g$cadr$4896$UGjMA g$x$9221$UGjMA)
                              (if (eqv? g$t$9222$UGjMA 'primitive)
                                (list
                                  'primitive
                                  (g$cadr$4896$UGjMA g$x$9221$UGjMA))
                                (if (eqv? g$t$9222$UGjMA 'quote)
                                  (list
                                    'quote
                                    (g$cadr$4896$UGjMA g$x$9221$UGjMA))
                                  (if (eqv? g$t$9222$UGjMA 'lambda)
                                    (g$build-lambda$7020$UGjMA
                                      '#f
                                      (g$cadr$4896$UGjMA g$x$9221$UGjMA)
                                      (g$regen$9208$UGjMA
                                        (g$caddr$4902$UGjMA g$x$9221$UGjMA)))
                                    (if (eqv? g$t$9222$UGjMA 'map)
                                      ((case-lambda
                                         ((g$ls$9223$UGjMA)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$9223$UGjMA)))
                                       (map g$regen$9208$UGjMA
                                            (cdr g$x$9221$UGjMA)))
                                      (cons
                                        (list 'primitive (car g$x$9221$UGjMA))
                                        (map g$regen$9208$UGjMA
                                             (cdr g$x$9221$UGjMA))))))))))
                         (car g$x$9221$UGjMA))))))
           (case-lambda
             ((g$e$9209$UGjMA g$r$9210$UGjMA g$mr$9211$UGjMA)
              ((case-lambda
                 ((g$t$9212$UGjMA)
                  ((case-lambda
                     ((g$ls/false$9213$UGjMA)
                      (if g$ls/false$9213$UGjMA
                        (apply
                          (case-lambda
                            ((g$x$9214$UGjMA)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$9201$UGjMA
                                    g$e$9209$UGjMA
                                    g$x$9214$UGjMA
                                    g$r$9210$UGjMA
                                    '()
                                    g$ellipsis?$7368$UGjMA
                                    '#f)))
                               (case-lambda
                                 ((g$e$9217$UGjMA g$maps$9218$UGjMA)
                                  ((case-lambda
                                     ((g$maps$9219$UGjMA g$e$9220$UGjMA)
                                      (g$regen$9208$UGjMA g$e$9220$UGjMA)))
                                   g$maps$9218$UGjMA
                                   g$e$9217$UGjMA))))))
                          g$ls/false$9213$UGjMA)
                        (g$syntax-violation$7473$UGjMA
                          '#f
                          '"invalid syntax"
                          g$t$9212$UGjMA))))
                   (g$syntax-dispatch$7367$UGjMA g$t$9212$UGjMA '(_ any)))))
               g$e$9209$UGjMA))))))))
   (g$core-macro-transformer$7374$UGjMA
     g$core-macro-transformer$10824$UGjMA
     (case-lambda
       ((g$name$9365$UGjMA)
        ((case-lambda
           ((g$t$9366$UGjMA)
            (if (eqv? g$t$9366$UGjMA 'quote)
              g$quote-transformer$7327$UGjMA
              (if (eqv? g$t$9366$UGjMA 'lambda)
                g$lambda-transformer$7329$UGjMA
                (if (eqv? g$t$9366$UGjMA 'case-lambda)
                  g$case-lambda-transformer$7328$UGjMA
                  (if (eqv? g$t$9366$UGjMA 'letrec)
                    g$letrec-transformer$7317$UGjMA
                    (if (eqv? g$t$9366$UGjMA 'letrec*)
                      g$letrec*-transformer$7318$UGjMA
                      (if (eqv? g$t$9366$UGjMA 'case)
                        g$case-transformer$7326$UGjMA
                        (if (eqv? g$t$9366$UGjMA 'if)
                          g$if-transformer$7325$UGjMA
                          (if (eqv? g$t$9366$UGjMA 'when)
                            g$when-transformer$7323$UGjMA
                            (if (eqv? g$t$9366$UGjMA 'unless)
                              g$unless-transformer$7324$UGjMA
                              (if (eqv? g$t$9366$UGjMA 'parameterize)
                                g$parameterize-transformer$7364$UGjMA
                                (if (eqv? g$t$9366$UGjMA 'foreign-call)
                                  g$foreign-call-transformer$7365$UGjMA
                                  (if (eqv? g$t$9366$UGjMA 'syntax-case)
                                    g$syntax-case-transformer$7371$UGjMA
                                    (if (eqv? g$t$9366$UGjMA 'syntax)
                                      g$syntax-transformer$7373$UGjMA
                                      (if (eqv? g$t$9366$UGjMA 'type-descriptor)
                                        g$type-descriptor-transformer$7320$UGjMA
                                        (if (eqv?
                                              g$t$9366$UGjMA
                                              'record-type-descriptor)
                                          g$record-type-descriptor-transformer$7321$UGjMA
                                          (if (eqv?
                                                g$t$9366$UGjMA
                                                'record-constructor-descriptor)
                                            g$record-constructor-descriptor-transformer$7322$UGjMA
                                            (if (eqv?
                                                  g$t$9366$UGjMA
                                                  'fluid-let-syntax)
                                              g$fluid-let-syntax-transformer$7319$UGjMA
                                              (assertion-violation
                                                'macro-transformer
                                                '"BUG: cannot find transformer"
                                                g$name$9365$UGjMA))))))))))))))))))))
         g$name$9365$UGjMA))))
   (g$file-options-macro$7375$UGjMA
     g$file-options-macro$10825$UGjMA
     (case-lambda
       ((g$x$9367$UGjMA)
        ((case-lambda
           ((g$t$9368$UGjMA)
            ((case-lambda
               ((g$ls/false$9369$UGjMA)
                (if (if g$ls/false$9369$UGjMA
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$opt*$9370$UGjMA)
                             (if (g$for-all$5365$UGjMA
                                   g$id?$7089$UGjMA
                                   g$opt*$9370$UGjMA)
                               (begin
                                 '#f
                                 (g$file-options-spec$6358$UGjMA
                                   (map g$id->sym$7090$UGjMA
                                        g$opt*$9370$UGjMA)))
                               '#f)))
                          g$ls/false$9369$UGjMA))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$opt*$9371$UGjMA)
                       (g$bless$7330$UGjMA
                         (list
                           'quote
                           (g$file-options-spec$6358$UGjMA
                             (map g$id->sym$7090$UGjMA g$opt*$9371$UGjMA))))))
                    g$ls/false$9369$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$9368$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$9368$UGjMA '(_ . each-any)))))
         g$x$9367$UGjMA))))
   (g$symbol-macro$7376$UGjMA
     g$symbol-macro$10826$UGjMA
     (case-lambda
       ((g$x$9372$UGjMA g$set$9373$UGjMA)
        ((case-lambda
           ((g$t$9374$UGjMA)
            ((case-lambda
               ((g$ls/false$9375$UGjMA)
                (if (if g$ls/false$9375$UGjMA
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$9376$UGjMA)
                             (if (g$id?$7089$UGjMA g$name$9376$UGjMA)
                               (begin
                                 '#f
                                 (memq
                                   (g$id->sym$7090$UGjMA g$name$9376$UGjMA)
                                   g$set$9373$UGjMA))
                               '#f)))
                          g$ls/false$9375$UGjMA))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$9377$UGjMA)
                       (g$bless$7330$UGjMA (list 'quote g$name$9377$UGjMA))))
                    g$ls/false$9375$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$9374$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$9374$UGjMA '(_ any)))))
         g$x$9372$UGjMA))))
   (g$macro-transformer$7377$UGjMA
     g$macro-transformer$10827$UGjMA
     (case-lambda
       ((g$x$9378$UGjMA)
        (if (procedure? g$x$9378$UGjMA)
          g$x$9378$UGjMA
          (if (symbol? g$x$9378$UGjMA)
            ((case-lambda
               ((g$t$9379$UGjMA)
                (if (eqv? g$t$9379$UGjMA 'define-record-type)
                  g$define-record-type-macro$7361$UGjMA
                  (if (eqv? g$t$9379$UGjMA 'define-struct)
                    g$define-struct-macro$7360$UGjMA
                    (if (eqv? g$t$9379$UGjMA 'include)
                      g$include-macro$7355$UGjMA
                      (if (eqv? g$t$9379$UGjMA 'cond)
                        g$cond-macro$7353$UGjMA
                        (if (eqv? g$t$9379$UGjMA 'let)
                          g$let-macro$7333$UGjMA
                          (if (eqv? g$t$9379$UGjMA 'do)
                            g$do-macro$7349$UGjMA
                            (if (eqv? g$t$9379$UGjMA 'or)
                              g$or-macro$7351$UGjMA
                              (if (eqv? g$t$9379$UGjMA 'and)
                                g$and-macro$7352$UGjMA
                                (if (eqv? g$t$9379$UGjMA 'let*)
                                  g$let*-macro$7350$UGjMA
                                  (if (eqv? g$t$9379$UGjMA 'let-values)
                                    g$let-values-macro$7334$UGjMA
                                    (if (eqv? g$t$9379$UGjMA 'let*-values)
                                      g$let*-values-macro$7335$UGjMA
                                      (if (eqv? g$t$9379$UGjMA 'syntax-rules)
                                        g$syntax-rules-macro$7357$UGjMA
                                        (if (eqv? g$t$9379$UGjMA 'quasiquote)
                                          g$quasiquote-macro$7358$UGjMA
                                          (if (eqv? g$t$9379$UGjMA 'quasisyntax)
                                            g$quasisyntax-macro$7359$UGjMA
                                            (if (eqv?
                                                  g$t$9379$UGjMA
                                                  'with-syntax)
                                              g$with-syntax-macro$7331$UGjMA
                                              (if (eqv?
                                                    g$t$9379$UGjMA
                                                    'identifier-syntax)
                                                g$identifier-syntax-macro$7348$UGjMA
                                                (if (eqv? g$t$9379$UGjMA 'time)
                                                  g$time-macro$7344$UGjMA
                                                  (if (eqv?
                                                        g$t$9379$UGjMA
                                                        'delay)
                                                    g$delay-macro$7345$UGjMA
                                                    (if (eqv?
                                                          g$t$9379$UGjMA
                                                          'assert)
                                                      g$assert-macro$7346$UGjMA
                                                      (if (eqv?
                                                            g$t$9379$UGjMA
                                                            'endianness)
                                                        g$endianness-macro$7347$UGjMA
                                                        (if (eqv?
                                                              g$t$9379$UGjMA
                                                              'guard)
                                                          g$guard-macro$7342$UGjMA
                                                          (if (eqv?
                                                                g$t$9379$UGjMA
                                                                'define-enumeration)
                                                            g$define-enumeration-macro$7343$UGjMA
                                                            (if (eqv?
                                                                  g$t$9379$UGjMA
                                                                  'trace-lambda)
                                                              g$trace-lambda-macro$7336$UGjMA
                                                              (if (eqv?
                                                                    g$t$9379$UGjMA
                                                                    'trace-define)
                                                                g$trace-define-macro$7337$UGjMA
                                                                (if (eqv?
                                                                      g$t$9379$UGjMA
                                                                      'trace-define-syntax)
                                                                  g$trace-define-syntax-macro$7338$UGjMA
                                                                  (if (eqv?
                                                                        g$t$9379$UGjMA
                                                                        'trace-let-syntax)
                                                                    g$trace-let-syntax-macro$7340$UGjMA
                                                                    (if (eqv?
                                                                          g$t$9379$UGjMA
                                                                          'trace-letrec-syntax)
                                                                      g$trace-letrec-syntax-macro$7341$UGjMA
                                                                      (if (eqv?
                                                                            g$t$9379$UGjMA
                                                                            'define-condition-type)
                                                                        g$define-condition-type-macro$7362$UGjMA
                                                                        (if (eqv?
                                                                              g$t$9379$UGjMA
                                                                              'include-into)
                                                                          g$include-into-macro$7356$UGjMA
                                                                          (if (eqv?
                                                                                g$t$9379$UGjMA
                                                                                'eol-style)
                                                                            (case-lambda
                                                                              ((g$x$9382$UGjMA)
                                                                               (g$symbol-macro$7376$UGjMA
                                                                                 g$x$9382$UGjMA
                                                                                 '(none
                                                                                    lf
                                                                                    cr
                                                                                    crlf
                                                                                    nel
                                                                                    crnel
                                                                                    ls))))
                                                                            (if (eqv?
                                                                                  g$t$9379$UGjMA
                                                                                  'error-handling-mode)
                                                                              (case-lambda
                                                                                ((g$x$9381$UGjMA)
                                                                                 (g$symbol-macro$7376$UGjMA
                                                                                   g$x$9381$UGjMA
                                                                                   '(ignore
                                                                                      raise
                                                                                      replace))))
                                                                              (if (eqv?
                                                                                    g$t$9379$UGjMA
                                                                                    'buffer-mode)
                                                                                (case-lambda
                                                                                  ((g$x$9380$UGjMA)
                                                                                   (g$symbol-macro$7376$UGjMA
                                                                                     g$x$9380$UGjMA
                                                                                     '(none
                                                                                        line
                                                                                        block))))
                                                                                (if (eqv?
                                                                                      g$t$9379$UGjMA
                                                                                      'file-options)
                                                                                  g$file-options-macro$7375$UGjMA
                                                                                  (if (memv
                                                                                        g$t$9379$UGjMA
                                                                                        '(... =>
                                                                                              _
                                                                                              else
                                                                                              unquote
                                                                                              unquote-splicing
                                                                                              unsyntax
                                                                                              unsyntax-splicing
                                                                                              fields
                                                                                              mutable
                                                                                              immutable
                                                                                              parent
                                                                                              protocol
                                                                                              sealed
                                                                                              opaque
                                                                                              nongenerative
                                                                                              parent-rtd))
                                                                                    g$incorrect-usage-macro$7363$UGjMA
                                                                                    (error
                                                                                      'macro-transformer
                                                                                      '"BUG: invalid macro"
                                                                                      g$x$9378$UGjMA)))))))))))))))))))))))))))))))))))))
             g$x$9378$UGjMA)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$9378$UGjMA))))))
   (g$local-macro-transformer$7378$UGjMA
     g$local-macro-transformer$10828$UGjMA
     (case-lambda ((g$x$9383$UGjMA) (car g$x$9383$UGjMA))))
   (g$do-macro-call$7379$UGjMA
     g$do-macro-call$10829$UGjMA
     (case-lambda
       ((g$transformer$9384$UGjMA g$expr$9385$UGjMA)
        ((case-lambda
           ((g$out$9386$UGjMA)
            (begin
              ((letrec ((g$f$9387$UGjMA
                          (case-lambda
                            ((g$x$9388$UGjMA)
                             (if (g$stx?$7061$UGjMA g$x$9388$UGjMA)
                               (void)
                               (if (pair? g$x$9388$UGjMA)
                                 (begin
                                   (g$f$9387$UGjMA (car g$x$9388$UGjMA))
                                   (g$f$9387$UGjMA (cdr g$x$9388$UGjMA)))
                                 (if (vector? g$x$9388$UGjMA)
                                   (vector-for-each
                                     g$f$9387$UGjMA
                                     g$x$9388$UGjMA)
                                   (if (symbol? g$x$9388$UGjMA)
                                     (g$syntax-violation$7473$UGjMA
                                       '#f
                                       '"raw symbol encountered in output of macro"
                                       g$expr$9385$UGjMA
                                       g$x$9388$UGjMA)
                                     (void)))))))))
                 g$f$9387$UGjMA)
               g$out$9386$UGjMA)
              (g$add-mark$7078$UGjMA
                (g$gen-mark$7073$UGjMA)
                g$out$9386$UGjMA
                g$expr$9385$UGjMA))))
         (g$transformer$9384$UGjMA
           (g$add-mark$7078$UGjMA
             g$anti-mark$7074$UGjMA
             g$expr$9385$UGjMA
             '#f))))))
   (g$chi-macro$7380$UGjMA
     g$chi-macro$10830$UGjMA
     (case-lambda
       ((g$p$9389$UGjMA g$e$9390$UGjMA)
        (g$do-macro-call$7379$UGjMA
          (g$macro-transformer$7377$UGjMA g$p$9389$UGjMA)
          g$e$9390$UGjMA))))
   (g$chi-local-macro$7381$UGjMA
     g$chi-local-macro$10831$UGjMA
     (case-lambda
       ((g$p$9391$UGjMA g$e$9392$UGjMA)
        (g$do-macro-call$7379$UGjMA
          (g$local-macro-transformer$7378$UGjMA g$p$9391$UGjMA)
          g$e$9392$UGjMA))))
   (g$chi-global-macro$7382$UGjMA
     g$chi-global-macro$10832$UGjMA
     (case-lambda
       ((g$p$9393$UGjMA g$e$9394$UGjMA)
        ((case-lambda
           ((g$lib$9395$UGjMA g$loc$9396$UGjMA)
            (begin
              (g$visit-library$6905$UGjMA g$lib$9395$UGjMA)
              ((case-lambda
                 ((g$x$9397$UGjMA)
                  ((case-lambda
                     ((g$transformer$9398$UGjMA)
                      (g$do-macro-call$7379$UGjMA
                        g$transformer$9398$UGjMA
                        g$e$9394$UGjMA)))
                   (if (procedure? g$x$9397$UGjMA)
                     g$x$9397$UGjMA
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$9397$UGjMA)))))
               (symbol-value g$loc$9396$UGjMA)))))
         (car g$p$9393$UGjMA)
         (cdr g$p$9393$UGjMA)))))
   (g$chi-expr*$7383$UGjMA
     g$chi-expr*$10833$UGjMA
     (case-lambda
       ((g$e*$9399$UGjMA g$r$9400$UGjMA g$mr$9401$UGjMA)
        (if (null? g$e*$9399$UGjMA)
          '()
          ((case-lambda
             ((g$e$9402$UGjMA)
              (cons
                g$e$9402$UGjMA
                (g$chi-expr*$7383$UGjMA
                  (cdr g$e*$9399$UGjMA)
                  g$r$9400$UGjMA
                  g$mr$9401$UGjMA))))
           (g$chi-expr$7385$UGjMA
             (car g$e*$9399$UGjMA)
             g$r$9400$UGjMA
             g$mr$9401$UGjMA))))))
   (g$chi-application$7384$UGjMA
     g$chi-application$10834$UGjMA
     (case-lambda
       ((g$e$9403$UGjMA g$r$9404$UGjMA g$mr$9405$UGjMA)
        ((case-lambda
           ((g$t$9406$UGjMA)
            ((case-lambda
               ((g$ls/false$9407$UGjMA)
                (if g$ls/false$9407$UGjMA
                  (apply
                    (case-lambda
                      ((g$rator$9408$UGjMA g$rands$9409$UGjMA)
                       ((case-lambda
                          ((g$rator$9410$UGjMA)
                           (cons
                             g$rator$9410$UGjMA
                             (g$chi-expr*$7383$UGjMA
                               g$rands$9409$UGjMA
                               g$r$9404$UGjMA
                               g$mr$9405$UGjMA))))
                        (g$chi-expr$7385$UGjMA
                          g$rator$9408$UGjMA
                          g$r$9404$UGjMA
                          g$mr$9405$UGjMA))))
                    g$ls/false$9407$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$9406$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$9406$UGjMA '(any . each-any)))))
         g$e$9403$UGjMA))))
   (g$chi-expr$7385$UGjMA
     g$chi-expr$10835$UGjMA
     (case-lambda
       ((g$e$9411$UGjMA g$r$9412$UGjMA g$mr$9413$UGjMA)
        (call-with-values
          (case-lambda
            (() (g$syntax-type$7109$UGjMA g$e$9411$UGjMA g$r$9412$UGjMA)))
          (case-lambda
            ((g$type$9417$UGjMA g$value$9418$UGjMA g$kwd$9419$UGjMA)
             ((case-lambda
                ((g$kwd$9420$UGjMA g$value$9421$UGjMA g$type$9422$UGjMA)
                 ((case-lambda
                    ((g$t$9423$UGjMA)
                     (if (eqv? g$t$9423$UGjMA 'core-macro)
                       ((case-lambda
                          ((g$transformer$9449$UGjMA)
                           (g$transformer$9449$UGjMA
                             g$e$9411$UGjMA
                             g$r$9412$UGjMA
                             g$mr$9413$UGjMA)))
                        (g$core-macro-transformer$7374$UGjMA
                          g$value$9421$UGjMA))
                       (if (eqv? g$t$9423$UGjMA 'global)
                         ((case-lambda
                            ((g$lib$9447$UGjMA)
                             ((case-lambda
                                ((g$loc$9448$UGjMA)
                                 ((case-lambda
                                    (()
                                     (begin
                                       ((g$inv-collector$7419$UGjMA)
                                        g$lib$9447$UGjMA)
                                       g$loc$9448$UGjMA))))))
                              (cdr g$value$9421$UGjMA))))
                          (car g$value$9421$UGjMA))
                         (if (eqv? g$t$9423$UGjMA 'core-prim)
                           ((case-lambda
                              ((g$name$9446$UGjMA)
                               (list 'primitive g$name$9446$UGjMA)))
                            g$value$9421$UGjMA)
                           (if (eqv? g$t$9423$UGjMA 'call)
                             (g$chi-application$7384$UGjMA
                               g$e$9411$UGjMA
                               g$r$9412$UGjMA
                               g$mr$9413$UGjMA)
                             (if (eqv? g$t$9423$UGjMA 'lexical)
                               ((case-lambda
                                  ((g$lex$9445$UGjMA) g$lex$9445$UGjMA))
                                (g$lexical-var$7311$UGjMA g$value$9421$UGjMA))
                               (if (memv
                                     g$t$9423$UGjMA
                                     '(global-macro global-macro!))
                                 (g$chi-expr$7385$UGjMA
                                   (g$chi-global-macro$7382$UGjMA
                                     g$value$9421$UGjMA
                                     g$e$9411$UGjMA)
                                   g$r$9412$UGjMA
                                   g$mr$9413$UGjMA)
                                 (if (memv
                                       g$t$9423$UGjMA
                                       '(local-macro local-macro!))
                                   (g$chi-expr$7385$UGjMA
                                     (g$chi-local-macro$7381$UGjMA
                                       g$value$9421$UGjMA
                                       g$e$9411$UGjMA)
                                     g$r$9412$UGjMA
                                     g$mr$9413$UGjMA)
                                   (if (memv g$t$9423$UGjMA '(macro macro!))
                                     (g$chi-expr$7385$UGjMA
                                       (g$chi-macro$7380$UGjMA
                                         g$value$9421$UGjMA
                                         g$e$9411$UGjMA)
                                       g$r$9412$UGjMA
                                       g$mr$9413$UGjMA)
                                     (if (eqv? g$t$9423$UGjMA 'constant)
                                       ((case-lambda
                                          ((g$datum$9444$UGjMA)
                                           (list 'quote g$datum$9444$UGjMA)))
                                        g$value$9421$UGjMA)
                                       (if (eqv? g$t$9423$UGjMA 'set!)
                                         (g$chi-set!$7386$UGjMA
                                           g$e$9411$UGjMA
                                           g$r$9412$UGjMA
                                           g$mr$9413$UGjMA)
                                         (if (eqv? g$t$9423$UGjMA 'begin)
                                           ((case-lambda
                                              ((g$t$9440$UGjMA)
                                               ((case-lambda
                                                  ((g$ls/false$9441$UGjMA)
                                                   (if g$ls/false$9441$UGjMA
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9442$UGjMA
                                                            g$x*$9443$UGjMA)
                                                          (g$build-sequence$7023$UGjMA
                                                            '#f
                                                            (g$chi-expr*$7383$UGjMA
                                                              (cons
                                                                g$x$9442$UGjMA
                                                                g$x*$9443$UGjMA)
                                                              g$r$9412$UGjMA
                                                              g$mr$9413$UGjMA))))
                                                       g$ls/false$9441$UGjMA)
                                                     (g$syntax-violation$7473$UGjMA
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9440$UGjMA))))
                                                (g$syntax-dispatch$7367$UGjMA
                                                  g$t$9440$UGjMA
                                                  '(_ any . each-any)))))
                                            g$e$9411$UGjMA)
                                           (if (memv
                                                 g$t$9423$UGjMA
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$9425$UGjMA)
                                                 ((case-lambda
                                                    ((g$ls/false$9426$UGjMA)
                                                     (if (if g$ls/false$9426$UGjMA
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$9427$UGjMA
                                                                    g$xrhs*$9428$UGjMA
                                                                    g$xbody$9429$UGjMA
                                                                    g$xbody*$9430$UGjMA)
                                                                  (if (g$valid-bound-ids?$7094$UGjMA
                                                                        g$xlhs*$9427$UGjMA)
                                                                    (void)
                                                                    (g$syntax-violation$7473$UGjMA
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$9411$UGjMA))))
                                                               g$ls/false$9426$UGjMA))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$9431$UGjMA
                                                              g$xrhs*$9432$UGjMA
                                                              g$xbody$9433$UGjMA
                                                              g$xbody*$9434$UGjMA)
                                                            ((case-lambda
                                                               ((g$xlab*$9435$UGjMA)
                                                                ((case-lambda
                                                                   ((g$xrib$9436$UGjMA)
                                                                    ((case-lambda
                                                                       ((g$xb*$9437$UGjMA)
                                                                        ((case-lambda
                                                                           (()
                                                                            (g$build-sequence$7023$UGjMA
                                                                              '#f
                                                                              (g$chi-expr*$7383$UGjMA
                                                                                (map (case-lambda
                                                                                       ((g$x$9438$UGjMA)
                                                                                        (g$add-subst$7079$UGjMA
                                                                                          g$xrib$9436$UGjMA
                                                                                          g$x$9438$UGjMA)))
                                                                                     (cons
                                                                                       g$xbody$9433$UGjMA
                                                                                       g$xbody*$9434$UGjMA))
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$9435$UGjMA
                                                                                       g$xb*$9437$UGjMA)
                                                                                  g$r$9412$UGjMA)
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$9435$UGjMA
                                                                                       g$xb*$9437$UGjMA)
                                                                                  g$mr$9413$UGjMA))))))))
                                                                     (map (case-lambda
                                                                            ((g$x$9439$UGjMA)
                                                                             (g$make-eval-transformer$7121$UGjMA
                                                                               (g$expand-transformer$7412$UGjMA
                                                                                 (if (eq? g$type$9422$UGjMA
                                                                                          'let-syntax)
                                                                                   g$x$9439$UGjMA
                                                                                   (g$add-subst$7079$UGjMA
                                                                                     g$xrib$9436$UGjMA
                                                                                     g$x$9439$UGjMA))
                                                                                 g$mr$9413$UGjMA))))
                                                                          g$xrhs*$9432$UGjMA))))
                                                                 (g$make-full-rib$7057$UGjMA
                                                                   g$xlhs*$9431$UGjMA
                                                                   g$xlab*$9435$UGjMA))))
                                                             (map g$gen-label$7035$UGjMA
                                                                  g$xlhs*$9431$UGjMA))))
                                                         g$ls/false$9426$UGjMA)
                                                       (g$syntax-violation$7473$UGjMA
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$9425$UGjMA))))
                                                  (g$syntax-dispatch$7367$UGjMA
                                                    g$t$9425$UGjMA
                                                    '(_ #(each (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$9411$UGjMA)
                                             (if (eqv?
                                                   g$t$9423$UGjMA
                                                   'displaced-lexical)
                                               (g$syntax-violation$7473$UGjMA
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$9411$UGjMA)
                                               (if (eqv? g$t$9423$UGjMA 'syntax)
                                                 (g$syntax-violation$7473$UGjMA
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$9411$UGjMA)
                                                 (if (memv
                                                       g$t$9423$UGjMA
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$7473$UGjMA
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$9424$UGjMA)
                                                           (if (eqv?
                                                                 g$t$9424$UGjMA
                                                                 'define)
                                                             '"a definition"
                                                             (if (eqv?
                                                                   g$t$9424$UGjMA
                                                                   'define-syntax)
                                                               '"a define-syntax"
                                                               (if (eqv?
                                                                     g$t$9424$UGjMA
                                                                     'module)
                                                                 '"a module definition"
                                                                 (if (eqv?
                                                                       g$t$9424$UGjMA
                                                                       'library)
                                                                   '"a library definition"
                                                                   (if (eqv?
                                                                         g$t$9424$UGjMA
                                                                         'import)
                                                                     '"an import declaration"
                                                                     '"a non-expression")))))))
                                                        g$type$9422$UGjMA)
                                                       '" was found where an expression was expected")
                                                     g$e$9411$UGjMA)
                                                   (if (eqv?
                                                         g$t$9423$UGjMA
                                                         'mutable)
                                                     (g$syntax-violation$7473$UGjMA
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$9411$UGjMA)
                                                     (g$syntax-violation$7473$UGjMA
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$9411$UGjMA)))))))))))))))))))
                  g$type$9422$UGjMA)))
              g$kwd$9419$UGjMA
              g$value$9418$UGjMA
              g$type$9417$UGjMA)))))))
   (g$chi-set!$7386$UGjMA
     g$chi-set!$10836$UGjMA
     (case-lambda
       ((g$e$9450$UGjMA g$r$9451$UGjMA g$mr$9452$UGjMA)
        ((case-lambda
           ((g$t$9453$UGjMA)
            ((case-lambda
               ((g$ls/false$9454$UGjMA)
                (if (if g$ls/false$9454$UGjMA
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$9455$UGjMA g$v$9456$UGjMA)
                             (g$id?$7089$UGjMA g$x$9455$UGjMA)))
                          g$ls/false$9454$UGjMA))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$9457$UGjMA g$v$9458$UGjMA)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$7109$UGjMA
                              g$x$9457$UGjMA
                              g$r$9451$UGjMA)))
                         (case-lambda
                           ((g$type$9462$UGjMA
                              g$value$9463$UGjMA
                              g$kwd$9464$UGjMA)
                            ((case-lambda
                               ((g$kwd$9465$UGjMA
                                  g$value$9466$UGjMA
                                  g$type$9467$UGjMA)
                                ((case-lambda
                                   ((g$t$9468$UGjMA)
                                    (if (eqv? g$t$9468$UGjMA 'lexical)
                                      (begin
                                        (g$set-lexical-mutable!$7313$UGjMA
                                          g$value$9466$UGjMA
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$7311$UGjMA
                                            g$value$9466$UGjMA)
                                          (g$chi-expr$7385$UGjMA
                                            g$v$9458$UGjMA
                                            g$r$9451$UGjMA
                                            g$mr$9452$UGjMA)))
                                      (if (eqv? g$t$9468$UGjMA 'core-prim)
                                        (g$syntax-violation$7473$UGjMA
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$9450$UGjMA)
                                        (if (eqv? g$t$9468$UGjMA 'global)
                                          (g$syntax-violation$7473$UGjMA
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$9450$UGjMA)
                                          (if (eqv?
                                                g$t$9468$UGjMA
                                                'global-macro!)
                                            (g$chi-expr$7385$UGjMA
                                              (g$chi-global-macro$7382$UGjMA
                                                g$value$9466$UGjMA
                                                g$e$9450$UGjMA)
                                              g$r$9451$UGjMA
                                              g$mr$9452$UGjMA)
                                            (if (eqv?
                                                  g$t$9468$UGjMA
                                                  'local-macro!)
                                              (g$chi-expr$7385$UGjMA
                                                (g$chi-local-macro$7381$UGjMA
                                                  g$value$9466$UGjMA
                                                  g$e$9450$UGjMA)
                                                g$r$9451$UGjMA
                                                g$mr$9452$UGjMA)
                                              (if (eqv? g$t$9468$UGjMA 'mutable)
                                                (g$syntax-violation$7473$UGjMA
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$9450$UGjMA)
                                                (g$syntax-violation$7473$UGjMA
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$9450$UGjMA)))))))))
                                 g$type$9467$UGjMA)))
                             g$kwd$9464$UGjMA
                             g$value$9463$UGjMA
                             g$type$9462$UGjMA))))))
                    g$ls/false$9454$UGjMA)
                  (g$syntax-violation$7473$UGjMA
                    '#f
                    '"invalid syntax"
                    g$t$9453$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$9453$UGjMA '(_ any any)))))
         g$e$9450$UGjMA))))
   (g$verify-formals$7387$UGjMA
     g$verify-formals$10837$UGjMA
     (case-lambda
       ((g$fmls$9469$UGjMA g$stx$9470$UGjMA)
        ((case-lambda
           ((g$t$9471$UGjMA)
            ((case-lambda
               ((g$ls/false$9472$UGjMA)
                (if g$ls/false$9472$UGjMA
                  (apply
                    (case-lambda
                      ((g$x*$9473$UGjMA)
                       (if (g$valid-bound-ids?$7094$UGjMA g$x*$9473$UGjMA)
                         (void)
                         (g$invalid-fmls-error$7332$UGjMA
                           g$stx$9470$UGjMA
                           g$fmls$9469$UGjMA))))
                    g$ls/false$9472$UGjMA)
                  ((case-lambda
                     ((g$t$9474$UGjMA)
                      ((case-lambda
                         ((g$ls/false$9475$UGjMA)
                          (if g$ls/false$9475$UGjMA
                            (apply
                              (case-lambda
                                ((g$x*$9476$UGjMA g$x$9477$UGjMA)
                                 (if (g$valid-bound-ids?$7094$UGjMA
                                       (cons g$x$9477$UGjMA g$x*$9476$UGjMA))
                                   (void)
                                   (g$invalid-fmls-error$7332$UGjMA
                                     g$stx$9470$UGjMA
                                     g$fmls$9469$UGjMA))))
                              g$ls/false$9475$UGjMA)
                            ((case-lambda
                               ((g$t$9478$UGjMA)
                                ((case-lambda
                                   ((g$ls/false$9479$UGjMA)
                                    (if g$ls/false$9479$UGjMA
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7473$UGjMA
                                             '#f
                                             '"invalid syntax"
                                             g$stx$9470$UGjMA)))
                                        g$ls/false$9479$UGjMA)
                                      (g$syntax-violation$7473$UGjMA
                                        '#f
                                        '"invalid syntax"
                                        g$t$9478$UGjMA))))
                                 (g$syntax-dispatch$7367$UGjMA
                                   g$t$9478$UGjMA
                                   '_))))
                             g$t$9474$UGjMA))))
                       (g$syntax-dispatch$7367$UGjMA
                         g$t$9474$UGjMA
                         '#(each+ any () any)))))
                   g$t$9471$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$9471$UGjMA 'each-any))))
         g$fmls$9469$UGjMA))))
   (g$chi-lambda-clause$7388$UGjMA
     g$chi-lambda-clause$10838$UGjMA
     (case-lambda
       ((g$stx$9480$UGjMA
          g$fmls$9481$UGjMA
          g$body*$9482$UGjMA
          g$r$9483$UGjMA
          g$mr$9484$UGjMA)
        ((case-lambda
           ((g$t$9485$UGjMA)
            ((case-lambda
               ((g$ls/false$9486$UGjMA)
                (if g$ls/false$9486$UGjMA
                  (apply
                    (case-lambda
                      ((g$x*$9487$UGjMA)
                       (begin
                         (g$verify-formals$7387$UGjMA
                           g$fmls$9481$UGjMA
                           g$stx$9480$UGjMA)
                         ((case-lambda
                            ((g$lex*$9488$UGjMA g$lab*$9489$UGjMA)
                             (values
                               g$lex*$9488$UGjMA
                               (g$chi-internal$7396$UGjMA
                                 (g$add-subst$7079$UGjMA
                                   (g$make-full-rib$7057$UGjMA
                                     g$x*$9487$UGjMA
                                     g$lab*$9489$UGjMA)
                                   g$body*$9482$UGjMA)
                                 (g$add-lexicals$7315$UGjMA
                                   g$lab*$9489$UGjMA
                                   g$lex*$9488$UGjMA
                                   g$r$9483$UGjMA)
                                 g$mr$9484$UGjMA))))
                          (map g$gen-lexical$7033$UGjMA g$x*$9487$UGjMA)
                          (map g$gen-label$7035$UGjMA g$x*$9487$UGjMA)))))
                    g$ls/false$9486$UGjMA)
                  ((case-lambda
                     ((g$t$9490$UGjMA)
                      ((case-lambda
                         ((g$ls/false$9491$UGjMA)
                          (if g$ls/false$9491$UGjMA
                            (apply
                              (case-lambda
                                ((g$x*$9492$UGjMA g$x$9493$UGjMA)
                                 (begin
                                   (g$verify-formals$7387$UGjMA
                                     g$fmls$9481$UGjMA
                                     g$stx$9480$UGjMA)
                                   ((case-lambda
                                      ((g$lex*$9494$UGjMA
                                         g$lab*$9495$UGjMA
                                         g$lex$9496$UGjMA
                                         g$lab$9497$UGjMA)
                                       (values
                                         (append
                                           g$lex*$9494$UGjMA
                                           g$lex$9496$UGjMA)
                                         (g$chi-internal$7396$UGjMA
                                           (g$add-subst$7079$UGjMA
                                             (g$make-full-rib$7057$UGjMA
                                               (cons
                                                 g$x$9493$UGjMA
                                                 g$x*$9492$UGjMA)
                                               (cons
                                                 g$lab$9497$UGjMA
                                                 g$lab*$9495$UGjMA))
                                             g$body*$9482$UGjMA)
                                           (g$add-lexicals$7315$UGjMA
                                             (cons
                                               g$lab$9497$UGjMA
                                               g$lab*$9495$UGjMA)
                                             (cons
                                               g$lex$9496$UGjMA
                                               g$lex*$9494$UGjMA)
                                             g$r$9483$UGjMA)
                                           g$mr$9484$UGjMA))))
                                    (map g$gen-lexical$7033$UGjMA
                                         g$x*$9492$UGjMA)
                                    (map g$gen-label$7035$UGjMA g$x*$9492$UGjMA)
                                    (g$gen-lexical$7033$UGjMA g$x$9493$UGjMA)
                                    (g$gen-label$7035$UGjMA g$x$9493$UGjMA)))))
                              g$ls/false$9491$UGjMA)
                            ((case-lambda
                               ((g$t$9498$UGjMA)
                                ((case-lambda
                                   ((g$ls/false$9499$UGjMA)
                                    (if g$ls/false$9499$UGjMA
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7473$UGjMA
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$9481$UGjMA)))
                                        g$ls/false$9499$UGjMA)
                                      (g$syntax-violation$7473$UGjMA
                                        '#f
                                        '"invalid syntax"
                                        g$t$9498$UGjMA))))
                                 (g$syntax-dispatch$7367$UGjMA
                                   g$t$9498$UGjMA
                                   '_))))
                             g$t$9490$UGjMA))))
                       (g$syntax-dispatch$7367$UGjMA
                         g$t$9490$UGjMA
                         '#(each+ any () any)))))
                   g$t$9485$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$9485$UGjMA 'each-any))))
         g$fmls$9481$UGjMA))))
   (g$chi-lambda-clause*$7389$UGjMA
     g$chi-lambda-clause*$10839$UGjMA
     (case-lambda
       ((g$stx$9500$UGjMA
          g$fmls*$9501$UGjMA
          g$body**$9502$UGjMA
          g$r$9503$UGjMA
          g$mr$9504$UGjMA)
        (if (null? g$fmls*$9501$UGjMA)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$7388$UGjMA
                 g$stx$9500$UGjMA
                 (car g$fmls*$9501$UGjMA)
                 (car g$body**$9502$UGjMA)
                 g$r$9503$UGjMA
                 g$mr$9504$UGjMA)))
            (case-lambda
              ((g$a$9507$UGjMA g$b$9508$UGjMA)
               ((case-lambda
                  ((g$b$9509$UGjMA g$a$9510$UGjMA)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$7389$UGjMA
                          g$stx$9500$UGjMA
                          (cdr g$fmls*$9501$UGjMA)
                          (cdr g$body**$9502$UGjMA)
                          g$r$9503$UGjMA
                          g$mr$9504$UGjMA)))
                     (case-lambda
                       ((g$a*$9513$UGjMA g$b*$9514$UGjMA)
                        ((case-lambda
                           ((g$b*$9515$UGjMA g$a*$9516$UGjMA)
                            (values
                              (cons g$a$9510$UGjMA g$a*$9516$UGjMA)
                              (cons g$b$9509$UGjMA g$b*$9515$UGjMA))))
                         g$b*$9514$UGjMA
                         g$a*$9513$UGjMA))))))
                g$b$9508$UGjMA
                g$a$9507$UGjMA))))))))
   (g$chi-defun$7390$UGjMA
     g$chi-defun$10840$UGjMA
     (case-lambda
       ((g$x$9517$UGjMA g$r$9518$UGjMA g$mr$9519$UGjMA)
        ((case-lambda
           ((g$fmls$9520$UGjMA g$body*$9521$UGjMA)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$7388$UGjMA
                   g$fmls$9520$UGjMA
                   g$fmls$9520$UGjMA
                   g$body*$9521$UGjMA
                   g$r$9518$UGjMA
                   g$mr$9519$UGjMA)))
              (case-lambda
                ((g$fmls$9524$UGjMA g$body$9525$UGjMA)
                 ((case-lambda
                    ((g$body$9526$UGjMA g$fmls$9527$UGjMA)
                     (g$build-lambda$7020$UGjMA
                       '#f
                       g$fmls$9527$UGjMA
                       g$body$9526$UGjMA)))
                  g$body$9525$UGjMA
                  g$fmls$9524$UGjMA))))))
         (car g$x$9517$UGjMA)
         (cdr g$x$9517$UGjMA)))))
   (g$chi-rhs$7391$UGjMA
     g$chi-rhs$10841$UGjMA
     (case-lambda
       ((g$rhs$9528$UGjMA g$r$9529$UGjMA g$mr$9530$UGjMA)
        ((case-lambda
           ((g$t$9531$UGjMA)
            (if (eqv? g$t$9531$UGjMA 'defun)
              (g$chi-defun$7390$UGjMA
                (cdr g$rhs$9528$UGjMA)
                g$r$9529$UGjMA
                g$mr$9530$UGjMA)
              (if (eqv? g$t$9531$UGjMA 'expr)
                ((case-lambda
                   ((g$expr$9533$UGjMA)
                    (g$chi-expr$7385$UGjMA
                      g$expr$9533$UGjMA
                      g$r$9529$UGjMA
                      g$mr$9530$UGjMA)))
                 (cdr g$rhs$9528$UGjMA))
                (if (eqv? g$t$9531$UGjMA 'top-expr)
                  ((case-lambda
                     ((g$expr$9532$UGjMA)
                      (g$build-sequence$7023$UGjMA
                        '#f
                        (list
                          (g$chi-expr$7385$UGjMA
                            g$expr$9532$UGjMA
                            g$r$9529$UGjMA
                            g$mr$9530$UGjMA)
                          (g$build-void$7024$UGjMA)))))
                   (cdr g$rhs$9528$UGjMA))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$9528$UGjMA))))))
         (car g$rhs$9528$UGjMA)))))
   (g$expand-interaction-rhs*/init*$7392$UGjMA
     g$expand-interaction-rhs*/init*$10842$UGjMA
     (case-lambda
       ((g$lhs*$9534$UGjMA
          g$rhs*$9535$UGjMA
          g$init*$9536$UGjMA
          g$r$9537$UGjMA
          g$mr$9538$UGjMA)
        ((letrec ((g$f$9539$UGjMA
                    (case-lambda
                      ((g$lhs*$9540$UGjMA g$rhs*$9541$UGjMA)
                       (if (null? g$lhs*$9540$UGjMA)
                         (map (case-lambda
                                ((g$x$9542$UGjMA)
                                 (g$chi-expr$7385$UGjMA
                                   g$x$9542$UGjMA
                                   g$r$9537$UGjMA
                                   g$mr$9538$UGjMA)))
                              g$init*$9536$UGjMA)
                         ((case-lambda
                            ((g$lhs$9543$UGjMA g$rhs$9544$UGjMA)
                             ((case-lambda
                                ((g$t$9545$UGjMA)
                                 (if (eqv? g$t$9545$UGjMA 'defun)
                                   ((case-lambda
                                      ((g$rhs$9548$UGjMA)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$9543$UGjMA
                                           g$rhs$9548$UGjMA)
                                         (g$f$9539$UGjMA
                                           (cdr g$lhs*$9540$UGjMA)
                                           (cdr g$rhs*$9541$UGjMA)))))
                                    (g$chi-defun$7390$UGjMA
                                      (cdr g$rhs$9544$UGjMA)
                                      g$r$9537$UGjMA
                                      g$mr$9538$UGjMA))
                                   (if (eqv? g$t$9545$UGjMA 'expr)
                                     ((case-lambda
                                        ((g$rhs$9547$UGjMA)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$9543$UGjMA
                                             g$rhs$9547$UGjMA)
                                           (g$f$9539$UGjMA
                                             (cdr g$lhs*$9540$UGjMA)
                                             (cdr g$rhs*$9541$UGjMA)))))
                                      (g$chi-expr$7385$UGjMA
                                        (cdr g$rhs$9544$UGjMA)
                                        g$r$9537$UGjMA
                                        g$mr$9538$UGjMA))
                                     (if (eqv? g$t$9545$UGjMA 'top-expr)
                                       ((case-lambda
                                          ((g$e$9546$UGjMA)
                                           (cons
                                             g$e$9546$UGjMA
                                             (g$f$9539$UGjMA
                                               (cdr g$lhs*$9540$UGjMA)
                                               (cdr g$rhs*$9541$UGjMA)))))
                                        (g$chi-expr$7385$UGjMA
                                          (cdr g$rhs$9544$UGjMA)
                                          g$r$9537$UGjMA
                                          g$mr$9538$UGjMA))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$9544$UGjMA))))))
                              (car g$rhs$9544$UGjMA))))
                          (car g$lhs*$9540$UGjMA)
                          (car g$rhs*$9541$UGjMA)))))))
           g$f$9539$UGjMA)
         g$lhs*$9534$UGjMA
         g$rhs*$9535$UGjMA))))
   (g$chi-rhs*$7393$UGjMA
     g$chi-rhs*$10843$UGjMA
     (case-lambda
       ((g$rhs*$9549$UGjMA g$r$9550$UGjMA g$mr$9551$UGjMA)
        ((letrec ((g$f$9552$UGjMA
                    (case-lambda
                      ((g$ls$9553$UGjMA)
                       (if (null? g$ls$9553$UGjMA)
                         '()
                         ((case-lambda
                            ((g$a$9554$UGjMA)
                             (cons
                               g$a$9554$UGjMA
                               (g$f$9552$UGjMA (cdr g$ls$9553$UGjMA)))))
                          (g$chi-rhs$7391$UGjMA
                            (car g$ls$9553$UGjMA)
                            g$r$9550$UGjMA
                            g$mr$9551$UGjMA)))))))
           g$f$9552$UGjMA)
         g$rhs*$9549$UGjMA))))
   (g$find-bound=?$7394$UGjMA
     g$find-bound=?$10844$UGjMA
     (case-lambda
       ((g$x$9555$UGjMA g$lhs*$9556$UGjMA g$rhs*$9557$UGjMA)
        (if (null? g$lhs*$9556$UGjMA)
          '#f
          (if (g$bound-id=?$7092$UGjMA g$x$9555$UGjMA (car g$lhs*$9556$UGjMA))
            (car g$rhs*$9557$UGjMA)
            (g$find-bound=?$7394$UGjMA
              g$x$9555$UGjMA
              (cdr g$lhs*$9556$UGjMA)
              (cdr g$rhs*$9557$UGjMA)))))))
   (g$find-dups$7395$UGjMA
     g$find-dups$10845$UGjMA
     (case-lambda
       ((g$ls$9558$UGjMA)
        ((letrec ((g$f$9559$UGjMA
                    (case-lambda
                      ((g$ls$9560$UGjMA g$dups$9561$UGjMA)
                       (if (null? g$ls$9560$UGjMA)
                         g$dups$9561$UGjMA
                         ((case-lambda
                            ((g$t$9562$UGjMA)
                             (if g$t$9562$UGjMA
                               ((case-lambda
                                  ((g$x$9563$UGjMA)
                                   (g$f$9559$UGjMA
                                     (cdr g$ls$9560$UGjMA)
                                     (cons
                                       (list
                                         (car g$ls$9560$UGjMA)
                                         g$x$9563$UGjMA)
                                       g$dups$9561$UGjMA))))
                                g$t$9562$UGjMA)
                               (g$f$9559$UGjMA
                                 (cdr g$ls$9560$UGjMA)
                                 g$dups$9561$UGjMA))))
                          (g$find-bound=?$7394$UGjMA
                            (car g$ls$9560$UGjMA)
                            (cdr g$ls$9560$UGjMA)
                            (cdr g$ls$9560$UGjMA))))))))
           g$f$9559$UGjMA)
         g$ls$9558$UGjMA
         '()))))
   (g$chi-internal$7396$UGjMA
     g$chi-internal$10846$UGjMA
     (case-lambda
       ((g$e*$9564$UGjMA g$r$9565$UGjMA g$mr$9566$UGjMA)
        ((case-lambda
           ((g$rib$9567$UGjMA)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$7411$UGjMA
                   (map (case-lambda
                          ((g$x$9575$UGjMA)
                           (g$add-subst$7079$UGjMA
                             g$rib$9567$UGjMA
                             g$x$9575$UGjMA)))
                        (g$syntax->list$7088$UGjMA g$e*$9564$UGjMA))
                   g$r$9565$UGjMA
                   g$mr$9566$UGjMA
                   '()
                   '()
                   '()
                   '()
                   g$rib$9567$UGjMA
                   '#f)))
              (case-lambda
                ((g$e*$9576$UGjMA
                   g$r$9577$UGjMA
                   g$mr$9578$UGjMA
                   g$lex*$9579$UGjMA
                   g$rhs*$9580$UGjMA
                   g$mod**$9581$UGjMA
                   g$kwd*$9582$UGjMA)
                 ((case-lambda
                    ((g$kwd*$9583$UGjMA
                       g$mod**$9584$UGjMA
                       g$rhs*$9585$UGjMA
                       g$lex*$9586$UGjMA
                       g$mr$9587$UGjMA
                       g$r$9588$UGjMA
                       g$e*$9589$UGjMA)
                     (begin
                       (if (null? g$e*$9589$UGjMA)
                         (g$syntax-violation$7473$UGjMA
                           '#f
                           '"no expression in body"
                           g$e*$9589$UGjMA)
                         (void))
                       ((case-lambda
                          ((g$init*$9590$UGjMA)
                           ((case-lambda
                              ((g$rhs*$9591$UGjMA)
                               ((case-lambda
                                  (()
                                   (g$build-letrec*$7026$UGjMA
                                     '#f
                                     (reverse g$lex*$9586$UGjMA)
                                     (reverse g$rhs*$9591$UGjMA)
                                     (g$build-sequence$7023$UGjMA
                                       '#f
                                       g$init*$9590$UGjMA)))))))
                            (g$chi-rhs*$7393$UGjMA
                              g$rhs*$9585$UGjMA
                              g$r$9588$UGjMA
                              g$mr$9587$UGjMA))))
                        (g$chi-expr*$7383$UGjMA
                          (append
                            (apply append (reverse g$mod**$9584$UGjMA))
                            g$e*$9589$UGjMA)
                          g$r$9588$UGjMA
                          g$mr$9587$UGjMA)))))
                  g$kwd*$9582$UGjMA
                  g$mod**$9581$UGjMA
                  g$rhs*$9580$UGjMA
                  g$lex*$9579$UGjMA
                  g$mr$9578$UGjMA
                  g$r$9577$UGjMA
                  g$e*$9576$UGjMA))))))
         (g$make-empty-rib$7052$UGjMA)))))
   (g$parse-module$7397$UGjMA
     g$parse-module$10847$UGjMA
     (case-lambda
       ((g$e$9592$UGjMA)
        ((case-lambda
           ((g$t$9593$UGjMA)
            ((case-lambda
               ((g$ls/false$9594$UGjMA)
                (if g$ls/false$9594$UGjMA
                  (apply
                    (case-lambda
                      ((g$export*$9595$UGjMA g$b*$9596$UGjMA)
                       (begin
                         (if (g$for-all$5365$UGjMA
                               g$id?$7089$UGjMA
                               g$export*$9595$UGjMA)
                           (void)
                           (g$syntax-violation$7473$UGjMA
                             '#f
                             '"module exports must be identifiers"
                             g$e$9592$UGjMA))
                         (values
                           '#f
                           (list->vector g$export*$9595$UGjMA)
                           g$b*$9596$UGjMA))))
                    g$ls/false$9594$UGjMA)
                  ((case-lambda
                     ((g$t$9597$UGjMA)
                      ((case-lambda
                         ((g$ls/false$9598$UGjMA)
                          (if g$ls/false$9598$UGjMA
                            (apply
                              (case-lambda
                                ((g$name$9599$UGjMA
                                   g$export*$9600$UGjMA
                                   g$b*$9601$UGjMA)
                                 (begin
                                   (if (g$id?$7089$UGjMA g$name$9599$UGjMA)
                                     (void)
                                     (g$syntax-violation$7473$UGjMA
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$9592$UGjMA))
                                   (if (g$for-all$5365$UGjMA
                                         g$id?$7089$UGjMA
                                         g$export*$9600$UGjMA)
                                     (void)
                                     (g$syntax-violation$7473$UGjMA
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$9592$UGjMA))
                                   (values
                                     g$name$9599$UGjMA
                                     (list->vector g$export*$9600$UGjMA)
                                     g$b*$9601$UGjMA))))
                              g$ls/false$9598$UGjMA)
                            (g$syntax-violation$7473$UGjMA
                              '#f
                              '"invalid syntax"
                              g$t$9597$UGjMA))))
                       (g$syntax-dispatch$7367$UGjMA
                         g$t$9597$UGjMA
                         '(_ any each-any . each-any)))))
                   g$t$9593$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$9593$UGjMA
               '(_ each-any . each-any)))))
         g$e$9592$UGjMA))))
   (g$8283$7398$UGjMA
     g$8283$10848$UGjMA
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$8286$UGjMA
       '#t
       '#t
       '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec))))
   (g$8285$7399$UGjMA g$8285$10849$UGjMA '#f)
   (g$8284$7400$UGjMA
     g$8284$10850$UGjMA
     (make-record-constructor-descriptor
       g$8283$7398$UGjMA
       '#f
       g$8285$7399$UGjMA))
   (g$module-interface?$7401$UGjMA
     g$module-interface?$10851$UGjMA
     (record-predicate g$8283$7398$UGjMA))
   (g$make-module-interface$7402$UGjMA
     g$make-module-interface$10852$UGjMA
     (record-constructor g$8284$7400$UGjMA))
   (g$module-interface-first-mark$7403$UGjMA
     g$module-interface-first-mark$10853$UGjMA
     (record-accessor g$8283$7398$UGjMA '0))
   (g$module-interface-exp-id-vec$7404$UGjMA
     g$module-interface-exp-id-vec$10854$UGjMA
     (record-accessor g$8283$7398$UGjMA '1))
   (g$module-interface-exp-lab-vec$7405$UGjMA
     g$module-interface-exp-lab-vec$10855$UGjMA
     (record-accessor g$8283$7398$UGjMA '2))
   (g$set-module-interface-first-mark!$7406$UGjMA
     g$set-module-interface-first-mark!$10856$UGjMA
     (record-mutator g$8283$7398$UGjMA '0))
   (g$set-module-interface-exp-id-vec!$7407$UGjMA
     g$set-module-interface-exp-id-vec!$10857$UGjMA
     (record-mutator g$8283$7398$UGjMA '1))
   (g$set-module-interface-exp-lab-vec!$7408$UGjMA
     g$set-module-interface-exp-lab-vec!$10858$UGjMA
     (record-mutator g$8283$7398$UGjMA '2))
   (g$module-interface-exp-id*$7409$UGjMA
     g$module-interface-exp-id*$10859$UGjMA
     (case-lambda
       ((g$iface$9602$UGjMA g$id$9603$UGjMA)
        (letrec* ((g$diff-marks$9604$UGjMA
                    (case-lambda
                      ((g$ls$9608$UGjMA g$x$9609$UGjMA)
                       (begin
                         (if (null? g$ls$9608$UGjMA)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$9610$UGjMA)
                             (if (eq? g$a$9610$UGjMA g$x$9609$UGjMA)
                               '()
                               (cons
                                 g$a$9610$UGjMA
                                 (g$diff-marks$9604$UGjMA
                                   (cdr g$ls$9608$UGjMA)
                                   g$x$9609$UGjMA)))))
                          (car g$ls$9608$UGjMA)))))))
          ((case-lambda
             ((g$diff$9605$UGjMA g$id-vec$9606$UGjMA)
              (if (null? g$diff$9605$UGjMA)
                g$id-vec$9606$UGjMA
                (vector-map
                  (case-lambda
                    ((g$x$9607$UGjMA)
                     (g$make-stx$7062$UGjMA
                       (g$stx-expr$7063$UGjMA g$x$9607$UGjMA)
                       (append
                         g$diff$9605$UGjMA
                         (g$stx-mark*$7064$UGjMA g$x$9607$UGjMA))
                       '()
                       '())))
                  g$id-vec$9606$UGjMA))))
           (g$diff-marks$9604$UGjMA
             (g$stx-mark*$7064$UGjMA g$id$9603$UGjMA)
             (g$module-interface-first-mark$7403$UGjMA g$iface$9602$UGjMA))
           (g$module-interface-exp-id-vec$7404$UGjMA g$iface$9602$UGjMA))))))
   (g$chi-internal-module$7410$UGjMA
     g$chi-internal-module$10860$UGjMA
     (case-lambda
       ((g$e$9611$UGjMA
          g$r$9612$UGjMA
          g$mr$9613$UGjMA
          g$lex*$9614$UGjMA
          g$rhs*$9615$UGjMA
          g$mod**$9616$UGjMA
          g$kwd*$9617$UGjMA)
        (call-with-values
          (case-lambda (() (g$parse-module$7397$UGjMA g$e$9611$UGjMA)))
          (case-lambda
            ((g$name$9621$UGjMA g$exp-id*$9622$UGjMA g$e*$9623$UGjMA)
             ((case-lambda
                ((g$e*$9624$UGjMA g$exp-id*$9625$UGjMA g$name$9626$UGjMA)
                 ((case-lambda
                    ((g$rib$9627$UGjMA)
                     ((case-lambda
                        ((g$e*$9628$UGjMA)
                         ((case-lambda
                            (()
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$chi-body*$7411$UGjMA
                                    g$e*$9628$UGjMA
                                    g$r$9612$UGjMA
                                    g$mr$9613$UGjMA
                                    g$lex*$9614$UGjMA
                                    g$rhs*$9615$UGjMA
                                    g$mod**$9616$UGjMA
                                    g$kwd*$9617$UGjMA
                                    g$rib$9627$UGjMA
                                    '#f)))
                               (case-lambda
                                 ((g$e*$9636$UGjMA
                                    g$r$9637$UGjMA
                                    g$mr$9638$UGjMA
                                    g$lex*$9639$UGjMA
                                    g$rhs*$9640$UGjMA
                                    g$mod**$9641$UGjMA
                                    g$kwd*$9642$UGjMA)
                                  ((case-lambda
                                     ((g$kwd*$9643$UGjMA
                                        g$mod**$9644$UGjMA
                                        g$rhs*$9645$UGjMA
                                        g$lex*$9646$UGjMA
                                        g$mr$9647$UGjMA
                                        g$r$9648$UGjMA
                                        g$e*$9649$UGjMA)
                                      ((case-lambda
                                         ((g$exp-lab*$9650$UGjMA
                                            g$mod**$9651$UGjMA)
                                          (if (not g$name$9626$UGjMA)
                                            (values
                                              g$lex*$9646$UGjMA
                                              g$rhs*$9645$UGjMA
                                              g$exp-id*$9625$UGjMA
                                              g$exp-lab*$9650$UGjMA
                                              g$r$9648$UGjMA
                                              g$mr$9647$UGjMA
                                              g$mod**$9651$UGjMA
                                              g$kwd*$9643$UGjMA)
                                            ((case-lambda
                                               ((g$lab$9652$UGjMA
                                                  g$iface$9653$UGjMA)
                                                (values
                                                  g$lex*$9646$UGjMA
                                                  g$rhs*$9645$UGjMA
                                                  (vector g$name$9626$UGjMA)
                                                  (vector g$lab$9652$UGjMA)
                                                  (cons
                                                    (cons
                                                      g$lab$9652$UGjMA
                                                      (cons
                                                        '$module
                                                        g$iface$9653$UGjMA))
                                                    g$r$9648$UGjMA)
                                                  (cons
                                                    (cons
                                                      g$lab$9652$UGjMA
                                                      (cons
                                                        '$module
                                                        g$iface$9653$UGjMA))
                                                    g$mr$9647$UGjMA)
                                                  g$mod**$9651$UGjMA
                                                  g$kwd*$9643$UGjMA)))
                                             (g$gen-label$7035$UGjMA 'module)
                                             (g$make-module-interface$7402$UGjMA
                                               (car (g$stx-mark*$7064$UGjMA
                                                      g$name$9626$UGjMA))
                                               (vector-map
                                                 (case-lambda
                                                   ((g$x$9654$UGjMA)
                                                    (g$make-stx$7062$UGjMA
                                                      (g$stx-expr$7063$UGjMA
                                                        g$x$9654$UGjMA)
                                                      (g$stx-mark*$7064$UGjMA
                                                        g$x$9654$UGjMA)
                                                      '()
                                                      '())))
                                                 g$exp-id*$9625$UGjMA)
                                               g$exp-lab*$9650$UGjMA)))))
                                       (vector-map
                                         (case-lambda
                                           ((g$x$9655$UGjMA)
                                            ((case-lambda
                                               ((g$t$9656$UGjMA)
                                                (if g$t$9656$UGjMA
                                                  g$t$9656$UGjMA
                                                  (begin
                                                    '#f
                                                    (g$syntax-violation$7473$UGjMA
                                                      '#f
                                                      '"cannot find module export"
                                                      g$x$9655$UGjMA)))))
                                             (g$id->label$7102$UGjMA
                                               (g$make-stx$7062$UGjMA
                                                 (g$id->sym$7090$UGjMA
                                                   g$x$9655$UGjMA)
                                                 (g$stx-mark*$7064$UGjMA
                                                   g$x$9655$UGjMA)
                                                 (list g$rib$9627$UGjMA)
                                                 '())))))
                                         g$exp-id*$9625$UGjMA)
                                       (cons
                                         g$e*$9649$UGjMA
                                         g$mod**$9644$UGjMA))))
                                   g$kwd*$9642$UGjMA
                                   g$mod**$9641$UGjMA
                                   g$rhs*$9640$UGjMA
                                   g$lex*$9639$UGjMA
                                   g$mr$9638$UGjMA
                                   g$r$9637$UGjMA
                                   g$e*$9636$UGjMA)))))))))
                      (map (case-lambda
                             ((g$x$9657$UGjMA)
                              (g$add-subst$7079$UGjMA
                                g$rib$9627$UGjMA
                                g$x$9657$UGjMA)))
                           (g$syntax->list$7088$UGjMA g$e*$9624$UGjMA)))))
                  (g$make-empty-rib$7052$UGjMA))))
              g$e*$9623$UGjMA
              g$exp-id*$9622$UGjMA
              g$name$9621$UGjMA)))))))
   (g$chi-body*$7411$UGjMA
     g$chi-body*$10861$UGjMA
     (case-lambda
       ((g$e*$9658$UGjMA
          g$r$9659$UGjMA
          g$mr$9660$UGjMA
          g$lex*$9661$UGjMA
          g$rhs*$9662$UGjMA
          g$mod**$9663$UGjMA
          g$kwd*$9664$UGjMA
          g$rib$9665$UGjMA
          g$top?$9666$UGjMA)
        (if (null? g$e*$9658$UGjMA)
          (values
            g$e*$9658$UGjMA
            g$r$9659$UGjMA
            g$mr$9660$UGjMA
            g$lex*$9661$UGjMA
            g$rhs*$9662$UGjMA
            g$mod**$9663$UGjMA
            g$kwd*$9664$UGjMA)
          ((case-lambda
             ((g$e$9667$UGjMA)
              (call-with-values
                (case-lambda
                  (() (g$syntax-type$7109$UGjMA g$e$9667$UGjMA g$r$9659$UGjMA)))
                (case-lambda
                  ((g$type$9671$UGjMA g$value$9672$UGjMA g$kwd$9673$UGjMA)
                   ((case-lambda
                      ((g$kwd$9674$UGjMA g$value$9675$UGjMA g$type$9676$UGjMA)
                       ((case-lambda
                          ((g$kwd*$9677$UGjMA)
                           ((case-lambda
                              ((g$t$9678$UGjMA)
                               (if (eqv? g$t$9678$UGjMA 'define)
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$7307$UGjMA
                                        g$e$9667$UGjMA)))
                                   (case-lambda
                                     ((g$id$9784$UGjMA g$rhs$9785$UGjMA)
                                      ((case-lambda
                                         ((g$rhs$9786$UGjMA g$id$9787$UGjMA)
                                          (begin
                                            (if (g$bound-id-member?$7096$UGjMA
                                                  g$id$9787$UGjMA
                                                  g$kwd*$9677$UGjMA)
                                              (g$syntax-violation$7473$UGjMA
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$9667$UGjMA)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$7037$UGjMA
                                                   g$id$9787$UGjMA
                                                   g$rib$9665$UGjMA)))
                                              (case-lambda
                                                ((g$lab$9790$UGjMA
                                                   g$lex$9791$UGjMA)
                                                 ((case-lambda
                                                    ((g$lex$9792$UGjMA
                                                       g$lab$9793$UGjMA)
                                                     (begin
                                                       (g$extend-rib!$7053$UGjMA
                                                         g$rib$9665$UGjMA
                                                         g$id$9787$UGjMA
                                                         g$lab$9793$UGjMA)
                                                       (g$chi-body*$7411$UGjMA
                                                         (cdr g$e*$9658$UGjMA)
                                                         (g$add-lexical$7314$UGjMA
                                                           g$lab$9793$UGjMA
                                                           g$lex$9792$UGjMA
                                                           g$r$9659$UGjMA)
                                                         g$mr$9660$UGjMA
                                                         (cons
                                                           g$lex$9792$UGjMA
                                                           g$lex*$9661$UGjMA)
                                                         (cons
                                                           g$rhs$9786$UGjMA
                                                           g$rhs*$9662$UGjMA)
                                                         g$mod**$9663$UGjMA
                                                         g$kwd*$9677$UGjMA
                                                         g$rib$9665$UGjMA
                                                         g$top?$9666$UGjMA))))
                                                  g$lex$9791$UGjMA
                                                  g$lab$9790$UGjMA)))))))
                                       g$rhs$9785$UGjMA
                                       g$id$9784$UGjMA))))
                                 (if (eqv? g$t$9678$UGjMA 'define-syntax)
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$7308$UGjMA
                                          g$e$9667$UGjMA)))
                                     (case-lambda
                                       ((g$id$9775$UGjMA g$rhs$9776$UGjMA)
                                        ((case-lambda
                                           ((g$rhs$9777$UGjMA g$id$9778$UGjMA)
                                            (begin
                                              (if (g$bound-id-member?$7096$UGjMA
                                                    g$id$9778$UGjMA
                                                    g$kwd*$9677$UGjMA)
                                                (g$syntax-violation$7473$UGjMA
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$9667$UGjMA)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$9779$UGjMA
                                                    g$expanded-rhs$9780$UGjMA)
                                                  (begin
                                                    (g$extend-rib!$7053$UGjMA
                                                      g$rib$9665$UGjMA
                                                      g$id$9778$UGjMA
                                                      g$lab$9779$UGjMA)
                                                    ((case-lambda
                                                       ((g$b$9781$UGjMA)
                                                        (g$chi-body*$7411$UGjMA
                                                          (cdr g$e*$9658$UGjMA)
                                                          (cons
                                                            (cons
                                                              g$lab$9779$UGjMA
                                                              g$b$9781$UGjMA)
                                                            g$r$9659$UGjMA)
                                                          (cons
                                                            (cons
                                                              g$lab$9779$UGjMA
                                                              g$b$9781$UGjMA)
                                                            g$mr$9660$UGjMA)
                                                          g$lex*$9661$UGjMA
                                                          g$rhs*$9662$UGjMA
                                                          g$mod**$9663$UGjMA
                                                          g$kwd*$9677$UGjMA
                                                          g$rib$9665$UGjMA
                                                          g$top?$9666$UGjMA)))
                                                     (g$make-eval-transformer$7121$UGjMA
                                                       g$expanded-rhs$9780$UGjMA)))))
                                               (g$gen-define-label$7038$UGjMA
                                                 g$id$9778$UGjMA
                                                 g$rib$9665$UGjMA)
                                               (g$expand-transformer$7412$UGjMA
                                                 g$rhs$9777$UGjMA
                                                 g$mr$9660$UGjMA)))))
                                         g$rhs$9776$UGjMA
                                         g$id$9775$UGjMA))))
                                   (if (memv
                                         g$t$9678$UGjMA
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$9760$UGjMA)
                                         ((case-lambda
                                            ((g$ls/false$9761$UGjMA)
                                             (if (if g$ls/false$9761$UGjMA
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$9762$UGjMA
                                                            g$xrhs*$9763$UGjMA
                                                            g$xbody*$9764$UGjMA)
                                                          (if (g$valid-bound-ids?$7094$UGjMA
                                                                g$xlhs*$9762$UGjMA)
                                                            (void)
                                                            (g$syntax-violation$7473$UGjMA
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$9667$UGjMA))))
                                                       g$ls/false$9761$UGjMA))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$9765$UGjMA
                                                      g$xrhs*$9766$UGjMA
                                                      g$xbody*$9767$UGjMA)
                                                    ((case-lambda
                                                       ((g$xlab*$9768$UGjMA)
                                                        ((case-lambda
                                                           ((g$xrib$9769$UGjMA)
                                                            ((case-lambda
                                                               ((g$xb*$9770$UGjMA)
                                                                ((case-lambda
                                                                   (()
                                                                    (g$chi-body*$7411$UGjMA
                                                                      (append
                                                                        (map (case-lambda
                                                                               ((g$x$9771$UGjMA)
                                                                                (g$add-subst$7079$UGjMA
                                                                                  g$xrib$9769$UGjMA
                                                                                  g$x$9771$UGjMA)))
                                                                             g$xbody*$9767$UGjMA)
                                                                        (cdr g$e*$9658$UGjMA))
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$9768$UGjMA
                                                                             g$xb*$9770$UGjMA)
                                                                        g$r$9659$UGjMA)
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$9768$UGjMA
                                                                             g$xb*$9770$UGjMA)
                                                                        g$mr$9660$UGjMA)
                                                                      g$lex*$9661$UGjMA
                                                                      g$rhs*$9662$UGjMA
                                                                      g$mod**$9663$UGjMA
                                                                      g$kwd*$9677$UGjMA
                                                                      g$rib$9665$UGjMA
                                                                      g$top?$9666$UGjMA))))))
                                                             (map (case-lambda
                                                                    ((g$x$9772$UGjMA)
                                                                     (g$make-eval-transformer$7121$UGjMA
                                                                       (g$expand-transformer$7412$UGjMA
                                                                         (if (eq? g$type$9676$UGjMA
                                                                                  'let-syntax)
                                                                           g$x$9772$UGjMA
                                                                           (g$add-subst$7079$UGjMA
                                                                             g$xrib$9769$UGjMA
                                                                             g$x$9772$UGjMA))
                                                                         g$mr$9660$UGjMA))))
                                                                  g$xrhs*$9766$UGjMA))))
                                                         (g$make-full-rib$7057$UGjMA
                                                           g$xlhs*$9765$UGjMA
                                                           g$xlab*$9768$UGjMA))))
                                                     (map g$gen-label$7035$UGjMA
                                                          g$xlhs*$9765$UGjMA))))
                                                 g$ls/false$9761$UGjMA)
                                               (g$syntax-violation$7473$UGjMA
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$9760$UGjMA))))
                                          (g$syntax-dispatch$7367$UGjMA
                                            g$t$9760$UGjMA
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$9667$UGjMA)
                                     (if (eqv? g$t$9678$UGjMA 'begin)
                                       ((case-lambda
                                          ((g$t$9757$UGjMA)
                                           ((case-lambda
                                              ((g$ls/false$9758$UGjMA)
                                               (if g$ls/false$9758$UGjMA
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$9759$UGjMA)
                                                      (g$chi-body*$7411$UGjMA
                                                        (append
                                                          g$x*$9759$UGjMA
                                                          (cdr g$e*$9658$UGjMA))
                                                        g$r$9659$UGjMA
                                                        g$mr$9660$UGjMA
                                                        g$lex*$9661$UGjMA
                                                        g$rhs*$9662$UGjMA
                                                        g$mod**$9663$UGjMA
                                                        g$kwd*$9677$UGjMA
                                                        g$rib$9665$UGjMA
                                                        g$top?$9666$UGjMA)))
                                                   g$ls/false$9758$UGjMA)
                                                 (g$syntax-violation$7473$UGjMA
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$9757$UGjMA))))
                                            (g$syntax-dispatch$7367$UGjMA
                                              g$t$9757$UGjMA
                                              '(_ . each-any)))))
                                        g$e$9667$UGjMA)
                                       (if (memv
                                             g$t$9678$UGjMA
                                             '(global-macro global-macro!))
                                         (g$chi-body*$7411$UGjMA
                                           (cons
                                             (g$add-subst$7079$UGjMA
                                               g$rib$9665$UGjMA
                                               (g$chi-global-macro$7382$UGjMA
                                                 g$value$9675$UGjMA
                                                 g$e$9667$UGjMA))
                                             (cdr g$e*$9658$UGjMA))
                                           g$r$9659$UGjMA
                                           g$mr$9660$UGjMA
                                           g$lex*$9661$UGjMA
                                           g$rhs*$9662$UGjMA
                                           g$mod**$9663$UGjMA
                                           g$kwd*$9677$UGjMA
                                           g$rib$9665$UGjMA
                                           g$top?$9666$UGjMA)
                                         (if (memv
                                               g$t$9678$UGjMA
                                               '(local-macro local-macro!))
                                           (g$chi-body*$7411$UGjMA
                                             (cons
                                               (g$add-subst$7079$UGjMA
                                                 g$rib$9665$UGjMA
                                                 (g$chi-local-macro$7381$UGjMA
                                                   g$value$9675$UGjMA
                                                   g$e$9667$UGjMA))
                                               (cdr g$e*$9658$UGjMA))
                                             g$r$9659$UGjMA
                                             g$mr$9660$UGjMA
                                             g$lex*$9661$UGjMA
                                             g$rhs*$9662$UGjMA
                                             g$mod**$9663$UGjMA
                                             g$kwd*$9677$UGjMA
                                             g$rib$9665$UGjMA
                                             g$top?$9666$UGjMA)
                                           (if (memv
                                                 g$t$9678$UGjMA
                                                 '(macro macro!))
                                             (g$chi-body*$7411$UGjMA
                                               (cons
                                                 (g$add-subst$7079$UGjMA
                                                   g$rib$9665$UGjMA
                                                   (g$chi-macro$7380$UGjMA
                                                     g$value$9675$UGjMA
                                                     g$e$9667$UGjMA))
                                                 (cdr g$e*$9658$UGjMA))
                                               g$r$9659$UGjMA
                                               g$mr$9660$UGjMA
                                               g$lex*$9661$UGjMA
                                               g$rhs*$9662$UGjMA
                                               g$mod**$9663$UGjMA
                                               g$kwd*$9677$UGjMA
                                               g$rib$9665$UGjMA
                                               g$top?$9666$UGjMA)
                                             (if (eqv? g$t$9678$UGjMA 'module)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$7410$UGjMA
                                                      g$e$9667$UGjMA
                                                      g$r$9659$UGjMA
                                                      g$mr$9660$UGjMA
                                                      g$lex*$9661$UGjMA
                                                      g$rhs*$9662$UGjMA
                                                      g$mod**$9663$UGjMA
                                                      g$kwd*$9677$UGjMA)))
                                                 (case-lambda
                                                   ((g$lex*$9739$UGjMA
                                                      g$rhs*$9740$UGjMA
                                                      g$m-exp-id*$9741$UGjMA
                                                      g$m-exp-lab*$9742$UGjMA
                                                      g$r$9743$UGjMA
                                                      g$mr$9744$UGjMA
                                                      g$mod**$9745$UGjMA
                                                      g$kwd*$9746$UGjMA)
                                                    ((case-lambda
                                                       ((g$kwd*$9747$UGjMA
                                                          g$mod**$9748$UGjMA
                                                          g$mr$9749$UGjMA
                                                          g$r$9750$UGjMA
                                                          g$m-exp-lab*$9751$UGjMA
                                                          g$m-exp-id*$9752$UGjMA
                                                          g$rhs*$9753$UGjMA
                                                          g$lex*$9754$UGjMA)
                                                        (begin
                                                          (vector-for-each
                                                            (case-lambda
                                                              ((g$id$9755$UGjMA
                                                                 g$lab$9756$UGjMA)
                                                               (g$extend-rib!$7053$UGjMA
                                                                 g$rib$9665$UGjMA
                                                                 g$id$9755$UGjMA
                                                                 g$lab$9756$UGjMA)))
                                                            g$m-exp-id*$9752$UGjMA
                                                            g$m-exp-lab*$9751$UGjMA)
                                                          (g$chi-body*$7411$UGjMA
                                                            (cdr g$e*$9658$UGjMA)
                                                            g$r$9750$UGjMA
                                                            g$mr$9749$UGjMA
                                                            g$lex*$9754$UGjMA
                                                            g$rhs*$9753$UGjMA
                                                            g$mod**$9748$UGjMA
                                                            g$kwd*$9747$UGjMA
                                                            g$rib$9665$UGjMA
                                                            g$top?$9666$UGjMA))))
                                                     g$kwd*$9746$UGjMA
                                                     g$mod**$9745$UGjMA
                                                     g$mr$9744$UGjMA
                                                     g$r$9743$UGjMA
                                                     g$m-exp-lab*$9742$UGjMA
                                                     g$m-exp-id*$9741$UGjMA
                                                     g$rhs*$9740$UGjMA
                                                     g$lex*$9739$UGjMA))))
                                               (if (eqv?
                                                     g$t$9678$UGjMA
                                                     'library)
                                                 (begin
                                                   (g$library-expander$7460$UGjMA
                                                     (g$stx->datum$7100$UGjMA
                                                       g$e$9667$UGjMA))
                                                   (g$chi-body*$7411$UGjMA
                                                     (cdr g$e*$9658$UGjMA)
                                                     g$r$9659$UGjMA
                                                     g$mr$9660$UGjMA
                                                     g$lex*$9661$UGjMA
                                                     g$rhs*$9662$UGjMA
                                                     g$mod**$9663$UGjMA
                                                     g$kwd*$9677$UGjMA
                                                     g$rib$9665$UGjMA
                                                     g$top?$9666$UGjMA))
                                                 (if (eqv?
                                                       g$t$9678$UGjMA
                                                       'import)
                                                   (begin
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$9679$UGjMA
                                                                     (case-lambda
                                                                       ((g$e$9721$UGjMA)
                                                                        ((case-lambda
                                                                           ((g$t$9722$UGjMA)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9723$UGjMA)
                                                                                (if (if g$ls/false$9723$UGjMA
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$9724$UGjMA)
                                                                                             (g$id?$7089$UGjMA
                                                                                               g$id$9724$UGjMA)))
                                                                                          g$ls/false$9723$UGjMA))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$9725$UGjMA)
                                                                                       '#t))
                                                                                    g$ls/false$9723$UGjMA)
                                                                                  ((case-lambda
                                                                                     ((g$t$9726$UGjMA)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$9727$UGjMA)
                                                                                          (if g$ls/false$9727$UGjMA
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$9728$UGjMA)
                                                                                                 '#f))
                                                                                              g$ls/false$9727$UGjMA)
                                                                                            ((case-lambda
                                                                                               ((g$t$9729$UGjMA)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$9730$UGjMA)
                                                                                                    (if g$ls/false$9730$UGjMA
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$7473$UGjMA
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$9721$UGjMA)))
                                                                                                        g$ls/false$9730$UGjMA)
                                                                                                      (g$syntax-violation$7473$UGjMA
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$9729$UGjMA))))
                                                                                                 (g$syntax-dispatch$7367$UGjMA
                                                                                                   g$t$9729$UGjMA
                                                                                                   '_))))
                                                                                             g$t$9726$UGjMA))))
                                                                                       (g$syntax-dispatch$7367$UGjMA
                                                                                         g$t$9726$UGjMA
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$9722$UGjMA))))
                                                                             (g$syntax-dispatch$7367$UGjMA
                                                                               g$t$9722$UGjMA
                                                                               '(_ any)))))
                                                                         g$e$9721$UGjMA))))
                                                                   (g$module-import$9680$UGjMA
                                                                     (case-lambda
                                                                       ((g$e$9704$UGjMA
                                                                          g$r$9705$UGjMA)
                                                                        ((case-lambda
                                                                           ((g$t$9706$UGjMA)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9707$UGjMA)
                                                                                (if (if g$ls/false$9707$UGjMA
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$9708$UGjMA)
                                                                                             (g$id?$7089$UGjMA
                                                                                               g$id$9708$UGjMA)))
                                                                                          g$ls/false$9707$UGjMA))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$9709$UGjMA)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$7109$UGjMA
                                                                                              g$id$9709$UGjMA
                                                                                              g$r$9705$UGjMA)))
                                                                                         (case-lambda
                                                                                           ((g$type$9713$UGjMA
                                                                                              g$value$9714$UGjMA
                                                                                              g$kwd$9715$UGjMA)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$9716$UGjMA
                                                                                                  g$value$9717$UGjMA
                                                                                                  g$type$9718$UGjMA)
                                                                                                ((case-lambda
                                                                                                   ((g$t$9719$UGjMA)
                                                                                                    (if (eqv?
                                                                                                          g$t$9719$UGjMA
                                                                                                          '$module)
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$9720$UGjMA)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$7409$UGjMA
                                                                                                              g$iface$9720$UGjMA
                                                                                                              g$id$9709$UGjMA)
                                                                                                            (g$module-interface-exp-lab-vec$7405$UGjMA
                                                                                                              g$iface$9720$UGjMA))))
                                                                                                       g$value$9717$UGjMA)
                                                                                                      (g$syntax-violation$7473$UGjMA
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$9704$UGjMA))))
                                                                                                 g$type$9718$UGjMA)))
                                                                                             g$kwd$9715$UGjMA
                                                                                             g$value$9714$UGjMA
                                                                                             g$type$9713$UGjMA))))))
                                                                                    g$ls/false$9707$UGjMA)
                                                                                  (g$syntax-violation$7473$UGjMA
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$9706$UGjMA))))
                                                                             (g$syntax-dispatch$7367$UGjMA
                                                                               g$t$9706$UGjMA
                                                                               '(_ any)))))
                                                                         g$e$9704$UGjMA))))
                                                                   (g$library-import$9681$UGjMA
                                                                     (case-lambda
                                                                       ((g$e$9690$UGjMA)
                                                                        ((case-lambda
                                                                           ((g$t$9691$UGjMA)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9692$UGjMA)
                                                                                (if g$ls/false$9692$UGjMA
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$9693$UGjMA
                                                                                         g$imp*$9694$UGjMA)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$7416$UGjMA
                                                                                              (g$syntax->datum$7476$UGjMA
                                                                                                g$imp*$9694$UGjMA))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$9697$UGjMA
                                                                                              g$subst-labels$9698$UGjMA)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$9699$UGjMA
                                                                                                  g$subst-names$9700$UGjMA)
                                                                                                (values
                                                                                                  (vector-map
                                                                                                    (case-lambda
                                                                                                      ((g$name$9701$UGjMA)
                                                                                                       (g$datum->stx$7072$UGjMA
                                                                                                         g$ctxt$9693$UGjMA
                                                                                                         g$name$9701$UGjMA)))
                                                                                                    g$subst-names$9700$UGjMA)
                                                                                                  g$subst-labels$9699$UGjMA)))
                                                                                             g$subst-labels$9698$UGjMA
                                                                                             g$subst-names$9697$UGjMA))))))
                                                                                    g$ls/false$9692$UGjMA)
                                                                                  ((case-lambda
                                                                                     ((g$t$9702$UGjMA)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$9703$UGjMA)
                                                                                          (if g$ls/false$9703$UGjMA
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7473$UGjMA
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$9690$UGjMA)))
                                                                                              g$ls/false$9703$UGjMA)
                                                                                            (g$syntax-violation$7473$UGjMA
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$9702$UGjMA))))
                                                                                       (g$syntax-dispatch$7367$UGjMA
                                                                                         g$t$9702$UGjMA
                                                                                         '_))))
                                                                                   g$t$9691$UGjMA))))
                                                                             (g$syntax-dispatch$7367$UGjMA
                                                                               g$t$9691$UGjMA
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$9690$UGjMA)))))
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (if (g$module-import?$9679$UGjMA
                                                                      g$e$9667$UGjMA)
                                                                  (g$module-import$9680$UGjMA
                                                                    g$e$9667$UGjMA
                                                                    g$r$9659$UGjMA)
                                                                  (g$library-import$9681$UGjMA
                                                                    g$e$9667$UGjMA))))
                                                             (case-lambda
                                                               ((g$id*$9684$UGjMA
                                                                  g$lab*$9685$UGjMA)
                                                                ((case-lambda
                                                                   ((g$lab*$9686$UGjMA
                                                                      g$id*$9687$UGjMA)
                                                                    (vector-for-each
                                                                      (case-lambda
                                                                        ((g$id$9688$UGjMA
                                                                           g$lab$9689$UGjMA)
                                                                         (g$extend-rib!$7053$UGjMA
                                                                           g$rib$9665$UGjMA
                                                                           g$id$9688$UGjMA
                                                                           g$lab$9689$UGjMA)))
                                                                      g$id*$9687$UGjMA
                                                                      g$lab*$9686$UGjMA)))
                                                                 g$lab*$9685$UGjMA
                                                                 g$id*$9684$UGjMA))))))))
                                                     (g$chi-body*$7411$UGjMA
                                                       (cdr g$e*$9658$UGjMA)
                                                       g$r$9659$UGjMA
                                                       g$mr$9660$UGjMA
                                                       g$lex*$9661$UGjMA
                                                       g$rhs*$9662$UGjMA
                                                       g$mod**$9663$UGjMA
                                                       g$kwd*$9677$UGjMA
                                                       g$rib$9665$UGjMA
                                                       g$top?$9666$UGjMA))
                                                   (if g$top?$9666$UGjMA
                                                     (g$chi-body*$7411$UGjMA
                                                       (cdr g$e*$9658$UGjMA)
                                                       g$r$9659$UGjMA
                                                       g$mr$9660$UGjMA
                                                       (cons
                                                         (g$gen-lexical$7033$UGjMA
                                                           'dummy)
                                                         g$lex*$9661$UGjMA)
                                                       (cons
                                                         (cons
                                                           'top-expr
                                                           g$e$9667$UGjMA)
                                                         g$rhs*$9662$UGjMA)
                                                       g$mod**$9663$UGjMA
                                                       g$kwd*$9677$UGjMA
                                                       g$rib$9665$UGjMA
                                                       g$top?$9666$UGjMA)
                                                     (values
                                                       g$e*$9658$UGjMA
                                                       g$r$9659$UGjMA
                                                       g$mr$9660$UGjMA
                                                       g$lex*$9661$UGjMA
                                                       g$rhs*$9662$UGjMA
                                                       g$mod**$9663$UGjMA
                                                       g$kwd*$9677$UGjMA))))))))))))))
                            g$type$9676$UGjMA)))
                        (if (g$id?$7089$UGjMA g$kwd$9674$UGjMA)
                          (cons g$kwd$9674$UGjMA g$kwd*$9664$UGjMA)
                          g$kwd*$9664$UGjMA))))
                    g$kwd$9673$UGjMA
                    g$value$9672$UGjMA
                    g$type$9671$UGjMA))))))
           (car g$e*$9658$UGjMA))))))
   (g$expand-transformer$7412$UGjMA
     g$expand-transformer$10862$UGjMA
     (case-lambda
       ((g$expr$9794$UGjMA g$r$9795$UGjMA)
        ((case-lambda
           ((g$rtc$9796$UGjMA)
            ((case-lambda
               ((g$expanded-rhs$9797$UGjMA)
                (begin
                  (for-each
                    ((case-lambda
                       ((g$mark-visit$9798$UGjMA)
                        (case-lambda
                          ((g$x$9799$UGjMA)
                           (begin
                             (g$invoke-library$6904$UGjMA g$x$9799$UGjMA)
                             (g$mark-visit$9798$UGjMA g$x$9799$UGjMA))))))
                     (g$vis-collector$7420$UGjMA))
                    (g$rtc$9796$UGjMA))
                  g$expanded-rhs$9797$UGjMA)))
             ((case-lambda
                ((g$inv-collector$9804$UGjMA
                   g$vis-collector$9805$UGjMA
                   g$inv-collector$9806$UGjMA
                   g$vis-collector$9807$UGjMA)
                 ((case-lambda
                    ((g$swap$9808$UGjMA)
                     (dynamic-wind
                       g$swap$9808$UGjMA
                       (case-lambda
                         (()
                          (g$chi-expr$7385$UGjMA
                            g$expr$9794$UGjMA
                            g$r$9795$UGjMA
                            g$r$9795$UGjMA)))
                       g$swap$9808$UGjMA)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$9809$UGjMA)
                           (begin
                             (g$inv-collector$9804$UGjMA
                               g$inv-collector$9806$UGjMA)
                             (set! g$inv-collector$9806$UGjMA g$t$9809$UGjMA))))
                        (g$inv-collector$9804$UGjMA))
                       ((case-lambda
                          ((g$t$9810$UGjMA)
                           (begin
                             (g$vis-collector$9805$UGjMA
                               g$vis-collector$9807$UGjMA)
                             (set! g$vis-collector$9807$UGjMA g$t$9810$UGjMA))))
                        (g$vis-collector$9805$UGjMA))))))))
              g$inv-collector$7419$UGjMA
              g$vis-collector$7420$UGjMA
              g$rtc$9796$UGjMA
              (case-lambda ((g$x$9811$UGjMA) (values)))))))
         (g$make-collector$7418$UGjMA)))))
   (g$parse-exports$7413$UGjMA
     g$parse-exports$10863$UGjMA
     (case-lambda
       ((g$exp*$9812$UGjMA)
        (letrec* ((g$idsyn?$9813$UGjMA
                    (case-lambda
                      ((g$x$9828$UGjMA)
                       (symbol? (g$syntax->datum$7476$UGjMA g$x$9828$UGjMA))))))
          ((letrec ((g$f$9814$UGjMA
                      (case-lambda
                        ((g$exp*$9815$UGjMA g$int*$9816$UGjMA g$ext*$9817$UGjMA)
                         (if (null? g$exp*$9815$UGjMA)
                           (begin
                             ((case-lambda
                                ((g$id*$9818$UGjMA)
                                 (if (g$valid-bound-ids?$7094$UGjMA
                                       g$id*$9818$UGjMA)
                                   (void)
                                   (g$syntax-violation$7473$UGjMA
                                     'export
                                     '"invalid exports"
                                     (g$find-dups$7395$UGjMA
                                       g$id*$9818$UGjMA)))))
                              (map (case-lambda
                                     ((g$x$9819$UGjMA)
                                      (g$make-stx$7062$UGjMA
                                        g$x$9819$UGjMA
                                        g$top-mark*$7031$UGjMA
                                        '()
                                        '())))
                                   g$ext*$9817$UGjMA))
                             (values
                               (map g$syntax->datum$7476$UGjMA
                                    g$int*$9816$UGjMA)
                               (map g$syntax->datum$7476$UGjMA
                                    g$ext*$9817$UGjMA)))
                           ((case-lambda
                              ((g$t$9820$UGjMA)
                               ((case-lambda
                                  ((g$ls/false$9821$UGjMA)
                                   (if g$ls/false$9821$UGjMA
                                     (apply
                                       (case-lambda
                                         ((g$rename$9822$UGjMA
                                            g$i*$9823$UGjMA
                                            g$e*$9824$UGjMA)
                                          (begin
                                            (if (if (eq? (g$syntax->datum$7476$UGjMA
                                                           g$rename$9822$UGjMA)
                                                         'rename)
                                                  (if (g$for-all$5365$UGjMA
                                                        g$idsyn?$9813$UGjMA
                                                        g$i*$9823$UGjMA)
                                                    (begin
                                                      '#f
                                                      (g$for-all$5365$UGjMA
                                                        g$idsyn?$9813$UGjMA
                                                        g$e*$9824$UGjMA))
                                                    '#f)
                                                  '#f)
                                              (void)
                                              (g$syntax-violation$7473$UGjMA
                                                'export
                                                '"invalid export specifier"
                                                (car g$exp*$9815$UGjMA)))
                                            (g$f$9814$UGjMA
                                              (cdr g$exp*$9815$UGjMA)
                                              (append
                                                g$i*$9823$UGjMA
                                                g$int*$9816$UGjMA)
                                              (append
                                                g$e*$9824$UGjMA
                                                g$ext*$9817$UGjMA)))))
                                       g$ls/false$9821$UGjMA)
                                     ((case-lambda
                                        ((g$t$9825$UGjMA)
                                         ((case-lambda
                                            ((g$ls/false$9826$UGjMA)
                                             (if g$ls/false$9826$UGjMA
                                               (apply
                                                 (case-lambda
                                                   ((g$ie$9827$UGjMA)
                                                    (begin
                                                      (if (g$idsyn?$9813$UGjMA
                                                            g$ie$9827$UGjMA)
                                                        (void)
                                                        (g$syntax-violation$7473$UGjMA
                                                          'export
                                                          '"invalid export"
                                                          g$ie$9827$UGjMA))
                                                      (g$f$9814$UGjMA
                                                        (cdr g$exp*$9815$UGjMA)
                                                        (cons
                                                          g$ie$9827$UGjMA
                                                          g$int*$9816$UGjMA)
                                                        (cons
                                                          g$ie$9827$UGjMA
                                                          g$ext*$9817$UGjMA)))))
                                                 g$ls/false$9826$UGjMA)
                                               (g$syntax-violation$7473$UGjMA
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$9825$UGjMA))))
                                          (g$syntax-dispatch$7367$UGjMA
                                            g$t$9825$UGjMA
                                            'any))))
                                      g$t$9820$UGjMA))))
                                (g$syntax-dispatch$7367$UGjMA
                                  g$t$9820$UGjMA
                                  '(any . #(each (any any)))))))
                            (car g$exp*$9815$UGjMA)))))))
             g$f$9814$UGjMA)
           g$exp*$9812$UGjMA
           '()
           '())))))
   (g$parse-library-name$7414$UGjMA
     g$parse-library-name$10864$UGjMA
     (case-lambda
       ((g$spec$9829$UGjMA)
        (letrec* ((g$parse$9830$UGjMA
                    (case-lambda
                      ((g$x$9837$UGjMA)
                       ((case-lambda
                          ((g$t$9838$UGjMA)
                           ((case-lambda
                              ((g$ls/false$9839$UGjMA)
                               (if (if g$ls/false$9839$UGjMA
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$9840$UGjMA)
                                            (g$for-all$5365$UGjMA
                                              (case-lambda
                                                ((g$x$9841$UGjMA)
                                                 ((case-lambda
                                                    ((g$x$9842$UGjMA)
                                                     (if (integer?
                                                           g$x$9842$UGjMA)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$9842$UGjMA))
                                                       '#f)))
                                                  (g$syntax->datum$7476$UGjMA
                                                    g$x$9841$UGjMA))))
                                              g$v*$9840$UGjMA)))
                                         g$ls/false$9839$UGjMA))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$9843$UGjMA)
                                      (values
                                        '()
                                        (map g$syntax->datum$7476$UGjMA
                                             g$v*$9843$UGjMA))))
                                   g$ls/false$9839$UGjMA)
                                 ((case-lambda
                                    ((g$t$9844$UGjMA)
                                     ((case-lambda
                                        ((g$ls/false$9845$UGjMA)
                                         (if (if g$ls/false$9845$UGjMA
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$9846$UGjMA
                                                        g$rest$9847$UGjMA)
                                                      (symbol?
                                                        (g$syntax->datum$7476$UGjMA
                                                          g$x$9846$UGjMA))))
                                                   g$ls/false$9845$UGjMA))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$9848$UGjMA
                                                  g$rest$9849$UGjMA)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$9830$UGjMA
                                                       g$rest$9849$UGjMA)))
                                                  (case-lambda
                                                    ((g$x*$9852$UGjMA
                                                       g$v*$9853$UGjMA)
                                                     ((case-lambda
                                                        ((g$v*$9854$UGjMA
                                                           g$x*$9855$UGjMA)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$7476$UGjMA
                                                               g$x$9848$UGjMA)
                                                             g$x*$9855$UGjMA)
                                                           g$v*$9854$UGjMA)))
                                                      g$v*$9853$UGjMA
                                                      g$x*$9852$UGjMA))))))
                                             g$ls/false$9845$UGjMA)
                                           ((case-lambda
                                              ((g$t$9856$UGjMA)
                                               ((case-lambda
                                                  ((g$ls/false$9857$UGjMA)
                                                   (if g$ls/false$9857$UGjMA
                                                     (apply
                                                       (case-lambda
                                                         (() (values '() '())))
                                                       g$ls/false$9857$UGjMA)
                                                     ((case-lambda
                                                        ((g$t$9858$UGjMA)
                                                         ((case-lambda
                                                            ((g$ls/false$9859$UGjMA)
                                                             (if g$ls/false$9859$UGjMA
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$7473$UGjMA
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$9829$UGjMA)))
                                                                 g$ls/false$9859$UGjMA)
                                                               (g$syntax-violation$7473$UGjMA
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$9858$UGjMA))))
                                                          (g$syntax-dispatch$7367$UGjMA
                                                            g$t$9858$UGjMA
                                                            '_))))
                                                      g$t$9856$UGjMA))))
                                                (g$syntax-dispatch$7367$UGjMA
                                                  g$t$9856$UGjMA
                                                  '()))))
                                            g$t$9844$UGjMA))))
                                      (g$syntax-dispatch$7367$UGjMA
                                        g$t$9844$UGjMA
                                        '(any . any)))))
                                  g$t$9838$UGjMA))))
                            (g$syntax-dispatch$7367$UGjMA
                              g$t$9838$UGjMA
                              '(each-any)))))
                        g$x$9837$UGjMA)))))
          (call-with-values
            (case-lambda (() (g$parse$9830$UGjMA g$spec$9829$UGjMA)))
            (case-lambda
              ((g$name*$9833$UGjMA g$ver*$9834$UGjMA)
               ((case-lambda
                  ((g$ver*$9835$UGjMA g$name*$9836$UGjMA)
                   (begin
                     (if (null? g$name*$9836$UGjMA)
                       (g$syntax-violation$7473$UGjMA
                         '#f
                         '"empty library name"
                         g$spec$9829$UGjMA)
                       (void))
                     (values g$name*$9836$UGjMA g$ver*$9835$UGjMA))))
                g$ver*$9834$UGjMA
                g$name*$9833$UGjMA))))))))
   (g$parse-library$7415$UGjMA
     g$parse-library$10865$UGjMA
     (case-lambda
       ((g$e$9860$UGjMA)
        ((case-lambda
           ((g$t$9861$UGjMA)
            ((case-lambda
               ((g$ls/false$9862$UGjMA)
                (if (if g$ls/false$9862$UGjMA
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$9863$UGjMA
                               g$name*$9864$UGjMA
                               g$export$9865$UGjMA
                               g$exp*$9866$UGjMA
                               g$import$9867$UGjMA
                               g$imp*$9868$UGjMA
                               g$b*$9869$UGjMA)
                             (if (eq? (g$syntax->datum$7476$UGjMA
                                        g$export$9865$UGjMA)
                                      'export)
                               (if (eq? (g$syntax->datum$7476$UGjMA
                                          g$import$9867$UGjMA)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$7476$UGjMA
                                          g$library$9863$UGjMA)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$9862$UGjMA))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$9870$UGjMA
                         g$name*$9871$UGjMA
                         g$export$9872$UGjMA
                         g$exp*$9873$UGjMA
                         g$import$9874$UGjMA
                         g$imp*$9875$UGjMA
                         g$b*$9876$UGjMA)
                       (values
                         g$name*$9871$UGjMA
                         g$exp*$9873$UGjMA
                         g$imp*$9875$UGjMA
                         g$b*$9876$UGjMA)))
                    g$ls/false$9862$UGjMA)
                  ((case-lambda
                     ((g$t$9877$UGjMA)
                      ((case-lambda
                         ((g$ls/false$9878$UGjMA)
                          (if g$ls/false$9878$UGjMA
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7473$UGjMA
                                   '#f
                                   '"malformed library"
                                   g$e$9860$UGjMA)))
                              g$ls/false$9878$UGjMA)
                            (g$syntax-violation$7473$UGjMA
                              '#f
                              '"invalid syntax"
                              g$t$9877$UGjMA))))
                       (g$syntax-dispatch$7367$UGjMA g$t$9877$UGjMA '_))))
                   g$t$9861$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$9861$UGjMA
               '(any each-any (any . each-any) (any . each-any) . each-any)))))
         g$e$9860$UGjMA))))
   (g$parse-import-spec*$7416$UGjMA
     g$parse-import-spec*$10866$UGjMA
     (case-lambda
       ((g$imp*$9879$UGjMA)
        (letrec* ((g$idsyn?$9880$UGjMA
                    (case-lambda
                      ((g$x$10139$UGjMA)
                       (symbol? (g$syntax->datum$7476$UGjMA g$x$10139$UGjMA)))))
                  (g$dup-error$9881$UGjMA
                    (case-lambda
                      ((g$name$10138$UGjMA)
                       (g$syntax-violation$7473$UGjMA
                         'import
                         '"two imports with different bindings"
                         g$name$10138$UGjMA))))
                  (g$merge-substs$9882$UGjMA
                    (case-lambda
                      ((g$s$10129$UGjMA g$subst$10130$UGjMA)
                       (letrec* ((g$insert-to-subst$10131$UGjMA
                                   (case-lambda
                                     ((g$a$10132$UGjMA g$subst$10133$UGjMA)
                                      ((case-lambda
                                         ((g$name$10134$UGjMA
                                            g$label$10135$UGjMA)
                                          ((case-lambda
                                             ((g$t$10136$UGjMA)
                                              (if g$t$10136$UGjMA
                                                ((case-lambda
                                                   ((g$x$10137$UGjMA)
                                                    (if (eq? (cdr g$x$10137$UGjMA)
                                                             g$label$10135$UGjMA)
                                                      g$subst$10133$UGjMA
                                                      (g$dup-error$9881$UGjMA
                                                        g$name$10134$UGjMA))))
                                                 g$t$10136$UGjMA)
                                                (cons
                                                  g$a$10132$UGjMA
                                                  g$subst$10133$UGjMA))))
                                           (assq
                                             g$name$10134$UGjMA
                                             g$subst$10133$UGjMA))))
                                       (car g$a$10132$UGjMA)
                                       (cdr g$a$10132$UGjMA))))))
                         (if (null? g$s$10129$UGjMA)
                           g$subst$10130$UGjMA
                           (g$insert-to-subst$10131$UGjMA
                             (car g$s$10129$UGjMA)
                             (g$merge-substs$9882$UGjMA
                               (cdr g$s$10129$UGjMA)
                               g$subst$10130$UGjMA)))))))
                  (g$exclude*$9883$UGjMA
                    (case-lambda
                      ((g$sym*$10105$UGjMA g$subst$10106$UGjMA)
                       (letrec* ((g$exclude$10107$UGjMA
                                   (case-lambda
                                     ((g$sym$10120$UGjMA g$subst$10121$UGjMA)
                                      (if (null? g$subst$10121$UGjMA)
                                        (g$syntax-violation$7473$UGjMA
                                          'import
                                          '"cannot rename unbound identifier"
                                          g$sym$10120$UGjMA)
                                        (if (eq? g$sym$10120$UGjMA
                                                 (g$caar$4895$UGjMA
                                                   g$subst$10121$UGjMA))
                                          (values
                                            (g$cdar$4897$UGjMA
                                              g$subst$10121$UGjMA)
                                            (cdr g$subst$10121$UGjMA))
                                          ((case-lambda
                                             ((g$a$10122$UGjMA)
                                              (call-with-values
                                                (case-lambda
                                                  (()
                                                   (g$exclude$10107$UGjMA
                                                     g$sym$10120$UGjMA
                                                     (cdr g$subst$10121$UGjMA))))
                                                (case-lambda
                                                  ((g$old$10125$UGjMA
                                                     g$subst$10126$UGjMA)
                                                   ((case-lambda
                                                      ((g$subst$10127$UGjMA
                                                         g$old$10128$UGjMA)
                                                       (values
                                                         g$old$10128$UGjMA
                                                         (cons
                                                           g$a$10122$UGjMA
                                                           g$subst$10127$UGjMA))))
                                                    g$subst$10126$UGjMA
                                                    g$old$10125$UGjMA))))))
                                           (car g$subst$10121$UGjMA))))))))
                         (if (null? g$sym*$10105$UGjMA)
                           (values '() g$subst$10106$UGjMA)
                           (call-with-values
                             (case-lambda
                               (()
                                (g$exclude$10107$UGjMA
                                  (car g$sym*$10105$UGjMA)
                                  g$subst$10106$UGjMA)))
                             (case-lambda
                               ((g$old$10110$UGjMA g$subst$10111$UGjMA)
                                ((case-lambda
                                   ((g$subst$10112$UGjMA g$old$10113$UGjMA)
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$exclude*$9883$UGjMA
                                           (cdr g$sym*$10105$UGjMA)
                                           g$subst$10112$UGjMA)))
                                      (case-lambda
                                        ((g$old*$10116$UGjMA
                                           g$subst$10117$UGjMA)
                                         ((case-lambda
                                            ((g$subst$10118$UGjMA
                                               g$old*$10119$UGjMA)
                                             (values
                                               (cons
                                                 g$old$10113$UGjMA
                                                 g$old*$10119$UGjMA)
                                               g$subst$10118$UGjMA)))
                                          g$subst$10117$UGjMA
                                          g$old*$10116$UGjMA))))))
                                 g$subst$10111$UGjMA
                                 g$old$10110$UGjMA)))))))))
                  (g$find*$9884$UGjMA
                    (case-lambda
                      ((g$sym*$10101$UGjMA g$subst$10102$UGjMA)
                       (map (case-lambda
                              ((g$x$10103$UGjMA)
                               ((case-lambda
                                  ((g$t$10104$UGjMA)
                                   (if g$t$10104$UGjMA
                                     (cdr g$t$10104$UGjMA)
                                     (g$syntax-violation$7473$UGjMA
                                       'import
                                       '"cannot find identifier"
                                       g$x$10103$UGjMA))))
                                (assq g$x$10103$UGjMA g$subst$10102$UGjMA))))
                            g$sym*$10101$UGjMA))))
                  (g$rem*$9885$UGjMA
                    (case-lambda
                      ((g$sym*$10097$UGjMA g$subst$10098$UGjMA)
                       ((letrec ((g$f$10099$UGjMA
                                   (case-lambda
                                     ((g$subst$10100$UGjMA)
                                      (if (null? g$subst$10100$UGjMA)
                                        '()
                                        (if (memq
                                              (g$caar$4895$UGjMA
                                                g$subst$10100$UGjMA)
                                              g$sym*$10097$UGjMA)
                                          (g$f$10099$UGjMA
                                            (cdr g$subst$10100$UGjMA))
                                          (cons
                                            (car g$subst$10100$UGjMA)
                                            (g$f$10099$UGjMA
                                              (cdr g$subst$10100$UGjMA)))))))))
                          g$f$10099$UGjMA)
                        g$subst$10098$UGjMA))))
                  (g$remove-dups$9886$UGjMA
                    (case-lambda
                      ((g$ls$10096$UGjMA)
                       (if (null? g$ls$10096$UGjMA)
                         '()
                         (if (memq
                               (car g$ls$10096$UGjMA)
                               (cdr g$ls$10096$UGjMA))
                           (g$remove-dups$9886$UGjMA (cdr g$ls$10096$UGjMA))
                           (cons
                             (car g$ls$10096$UGjMA)
                             (g$remove-dups$9886$UGjMA
                               (cdr g$ls$10096$UGjMA))))))))
                  (g$parse-library-name$9887$UGjMA
                    (case-lambda
                      ((g$spec$9981$UGjMA)
                       (letrec* ((g$subversion?$9982$UGjMA
                                   (case-lambda
                                     ((g$x$10095$UGjMA)
                                      (if (integer? g$x$10095$UGjMA)
                                        (if (exact? g$x$10095$UGjMA)
                                          (begin '#f (>= g$x$10095$UGjMA '0))
                                          '#f)
                                        '#f))))
                                 (g$subversion-pred$9983$UGjMA
                                   (case-lambda
                                     ((g$x*$10047$UGjMA)
                                      ((case-lambda
                                         ((g$t$10048$UGjMA)
                                          ((case-lambda
                                             ((g$ls/false$10049$UGjMA)
                                              (if (if g$ls/false$10049$UGjMA
                                                    (begin
                                                      '#f
                                                      (apply
                                                        (case-lambda
                                                          ((g$n$10050$UGjMA)
                                                           (g$subversion?$9982$UGjMA
                                                             (g$syntax->datum$7476$UGjMA
                                                               g$n$10050$UGjMA))))
                                                        g$ls/false$10049$UGjMA))
                                                    '#f)
                                                (apply
                                                  (case-lambda
                                                    ((g$n$10051$UGjMA)
                                                     (case-lambda
                                                       ((g$x$10052$UGjMA)
                                                        (= g$x$10052$UGjMA
                                                           (g$syntax->datum$7476$UGjMA
                                                             g$n$10051$UGjMA))))))
                                                  g$ls/false$10049$UGjMA)
                                                ((case-lambda
                                                   ((g$t$10053$UGjMA)
                                                    ((case-lambda
                                                       ((g$ls/false$10054$UGjMA)
                                                        (if (if g$ls/false$10054$UGjMA
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p?$10055$UGjMA
                                                                       g$sub*$10056$UGjMA)
                                                                     (eq? (g$syntax->datum$7476$UGjMA
                                                                            g$p?$10055$UGjMA)
                                                                          'and)))
                                                                  g$ls/false$10054$UGjMA))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$p?$10057$UGjMA
                                                                 g$sub*$10058$UGjMA)
                                                               ((case-lambda
                                                                  ((g$p*$10059$UGjMA)
                                                                   (case-lambda
                                                                     ((g$x$10060$UGjMA)
                                                                      (g$for-all$5365$UGjMA
                                                                        (case-lambda
                                                                          ((g$p$10061$UGjMA)
                                                                           (g$p$10061$UGjMA
                                                                             g$x$10060$UGjMA)))
                                                                        g$p*$10059$UGjMA)))))
                                                                (map g$subversion-pred$9983$UGjMA
                                                                     g$sub*$10058$UGjMA))))
                                                            g$ls/false$10054$UGjMA)
                                                          ((case-lambda
                                                             ((g$t$10062$UGjMA)
                                                              ((case-lambda
                                                                 ((g$ls/false$10063$UGjMA)
                                                                  (if (if g$ls/false$10063$UGjMA
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p?$10064$UGjMA
                                                                                 g$sub*$10065$UGjMA)
                                                                               (eq? (g$syntax->datum$7476$UGjMA
                                                                                      g$p?$10064$UGjMA)
                                                                                    'or)))
                                                                            g$ls/false$10063$UGjMA))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$p?$10066$UGjMA
                                                                           g$sub*$10067$UGjMA)
                                                                         ((case-lambda
                                                                            ((g$p*$10068$UGjMA)
                                                                             (case-lambda
                                                                               ((g$x$10069$UGjMA)
                                                                                (g$exists$5366$UGjMA
                                                                                  (case-lambda
                                                                                    ((g$p$10070$UGjMA)
                                                                                     (g$p$10070$UGjMA
                                                                                       g$x$10069$UGjMA)))
                                                                                  g$p*$10068$UGjMA)))))
                                                                          (map g$subversion-pred$9983$UGjMA
                                                                               g$sub*$10067$UGjMA))))
                                                                      g$ls/false$10063$UGjMA)
                                                                    ((case-lambda
                                                                       ((g$t$10071$UGjMA)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10072$UGjMA)
                                                                            (if (if g$ls/false$10072$UGjMA
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p?$10073$UGjMA
                                                                                           g$sub$10074$UGjMA)
                                                                                         (eq? (g$syntax->datum$7476$UGjMA
                                                                                                g$p?$10073$UGjMA)
                                                                                              'not)))
                                                                                      g$ls/false$10072$UGjMA))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$p?$10075$UGjMA
                                                                                     g$sub$10076$UGjMA)
                                                                                   ((case-lambda
                                                                                      ((g$p$10077$UGjMA)
                                                                                       (case-lambda
                                                                                         ((g$x$10078$UGjMA)
                                                                                          (not (g$p$10077$UGjMA
                                                                                                 g$x$10078$UGjMA))))))
                                                                                    (g$subversion-pred$9983$UGjMA
                                                                                      g$sub$10076$UGjMA))))
                                                                                g$ls/false$10072$UGjMA)
                                                                              ((case-lambda
                                                                                 ((g$t$10079$UGjMA)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$10080$UGjMA)
                                                                                      (if (if g$ls/false$10080$UGjMA
                                                                                            (begin
                                                                                              '#f
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p?$10081$UGjMA
                                                                                                     g$n$10082$UGjMA)
                                                                                                   (if (eq? (g$syntax->datum$7476$UGjMA
                                                                                                              g$p?$10081$UGjMA)
                                                                                                            '<=)
                                                                                                     (begin
                                                                                                       '#f
                                                                                                       (g$subversion?$9982$UGjMA
                                                                                                         (g$syntax->datum$7476$UGjMA
                                                                                                           g$n$10082$UGjMA)))
                                                                                                     '#f)))
                                                                                                g$ls/false$10080$UGjMA))
                                                                                            '#f)
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$p?$10083$UGjMA
                                                                                               g$n$10084$UGjMA)
                                                                                             (case-lambda
                                                                                               ((g$x$10085$UGjMA)
                                                                                                (<= g$x$10085$UGjMA
                                                                                                    (g$syntax->datum$7476$UGjMA
                                                                                                      g$n$10084$UGjMA))))))
                                                                                          g$ls/false$10080$UGjMA)
                                                                                        ((case-lambda
                                                                                           ((g$t$10086$UGjMA)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$10087$UGjMA)
                                                                                                (if (if g$ls/false$10087$UGjMA
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$p?$10088$UGjMA
                                                                                                               g$n$10089$UGjMA)
                                                                                                             (if (eq? (g$syntax->datum$7476$UGjMA
                                                                                                                        g$p?$10088$UGjMA)
                                                                                                                      '>=)
                                                                                                               (begin
                                                                                                                 '#f
                                                                                                                 (g$subversion?$9982$UGjMA
                                                                                                                   g$n$10089$UGjMA))
                                                                                                               '#f)))
                                                                                                          g$ls/false$10087$UGjMA))
                                                                                                      '#f)
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$p?$10090$UGjMA
                                                                                                         g$n$10091$UGjMA)
                                                                                                       (case-lambda
                                                                                                         ((g$x$10092$UGjMA)
                                                                                                          (>= g$x$10092$UGjMA
                                                                                                              (g$syntax->datum$7476$UGjMA
                                                                                                                g$n$10091$UGjMA))))))
                                                                                                    g$ls/false$10087$UGjMA)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$10093$UGjMA)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$10094$UGjMA)
                                                                                                          (if g$ls/false$10094$UGjMA
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (g$syntax-violation$7473$UGjMA
                                                                                                                   'import
                                                                                                                   '"invalid sub-version spec"
                                                                                                                   g$spec$9981$UGjMA
                                                                                                                   g$x*$10047$UGjMA)))
                                                                                                              g$ls/false$10094$UGjMA)
                                                                                                            (g$syntax-violation$7473$UGjMA
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$10093$UGjMA))))
                                                                                                       (g$syntax-dispatch$7367$UGjMA
                                                                                                         g$t$10093$UGjMA
                                                                                                         '_))))
                                                                                                   g$t$10086$UGjMA))))
                                                                                             (g$syntax-dispatch$7367$UGjMA
                                                                                               g$t$10086$UGjMA
                                                                                               '(any any)))))
                                                                                         g$t$10079$UGjMA))))
                                                                                   (g$syntax-dispatch$7367$UGjMA
                                                                                     g$t$10079$UGjMA
                                                                                     '(any any)))))
                                                                               g$t$10071$UGjMA))))
                                                                         (g$syntax-dispatch$7367$UGjMA
                                                                           g$t$10071$UGjMA
                                                                           '(any any)))))
                                                                     g$t$10062$UGjMA))))
                                                               (g$syntax-dispatch$7367$UGjMA
                                                                 g$t$10062$UGjMA
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$10053$UGjMA))))
                                                     (g$syntax-dispatch$7367$UGjMA
                                                       g$t$10053$UGjMA
                                                       '(any . each-any)))))
                                                 g$t$10048$UGjMA))))
                                           (g$syntax-dispatch$7367$UGjMA
                                             g$t$10048$UGjMA
                                             'any))))
                                       g$x*$10047$UGjMA))))
                                 (g$version-pred$9984$UGjMA
                                   (case-lambda
                                     ((g$x*$10007$UGjMA)
                                      ((case-lambda
                                         ((g$t$10008$UGjMA)
                                          ((case-lambda
                                             ((g$ls/false$10009$UGjMA)
                                              (if g$ls/false$10009$UGjMA
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (case-lambda
                                                       ((g$x$10010$UGjMA)
                                                        '#t))))
                                                  g$ls/false$10009$UGjMA)
                                                ((case-lambda
                                                   ((g$t$10011$UGjMA)
                                                    ((case-lambda
                                                       ((g$ls/false$10012$UGjMA)
                                                        (if (if g$ls/false$10012$UGjMA
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$c$10013$UGjMA
                                                                       g$ver*$10014$UGjMA)
                                                                     (eq? (g$syntax->datum$7476$UGjMA
                                                                            g$c$10013$UGjMA)
                                                                          'and)))
                                                                  g$ls/false$10012$UGjMA))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$c$10015$UGjMA
                                                                 g$ver*$10016$UGjMA)
                                                               ((case-lambda
                                                                  ((g$p*$10017$UGjMA)
                                                                   (case-lambda
                                                                     ((g$x$10018$UGjMA)
                                                                      (g$for-all$5365$UGjMA
                                                                        (case-lambda
                                                                          ((g$p$10019$UGjMA)
                                                                           (g$p$10019$UGjMA
                                                                             g$x$10018$UGjMA)))
                                                                        g$p*$10017$UGjMA)))))
                                                                (map g$version-pred$9984$UGjMA
                                                                     g$ver*$10016$UGjMA))))
                                                            g$ls/false$10012$UGjMA)
                                                          ((case-lambda
                                                             ((g$t$10020$UGjMA)
                                                              ((case-lambda
                                                                 ((g$ls/false$10021$UGjMA)
                                                                  (if (if g$ls/false$10021$UGjMA
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$c$10022$UGjMA
                                                                                 g$ver*$10023$UGjMA)
                                                                               (eq? (g$syntax->datum$7476$UGjMA
                                                                                      g$c$10022$UGjMA)
                                                                                    'or)))
                                                                            g$ls/false$10021$UGjMA))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$c$10024$UGjMA
                                                                           g$ver*$10025$UGjMA)
                                                                         ((case-lambda
                                                                            ((g$p*$10026$UGjMA)
                                                                             (case-lambda
                                                                               ((g$x$10027$UGjMA)
                                                                                (g$exists$5366$UGjMA
                                                                                  (case-lambda
                                                                                    ((g$p$10028$UGjMA)
                                                                                     (g$p$10028$UGjMA
                                                                                       g$x$10027$UGjMA)))
                                                                                  g$p*$10026$UGjMA)))))
                                                                          (map g$version-pred$9984$UGjMA
                                                                               g$ver*$10025$UGjMA))))
                                                                      g$ls/false$10021$UGjMA)
                                                                    ((case-lambda
                                                                       ((g$t$10029$UGjMA)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10030$UGjMA)
                                                                            (if (if g$ls/false$10030$UGjMA
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$c$10031$UGjMA
                                                                                           g$ver$10032$UGjMA)
                                                                                         (eq? (g$syntax->datum$7476$UGjMA
                                                                                                g$c$10031$UGjMA)
                                                                                              'not)))
                                                                                      g$ls/false$10030$UGjMA))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$c$10033$UGjMA
                                                                                     g$ver$10034$UGjMA)
                                                                                   ((case-lambda
                                                                                      ((g$p$10035$UGjMA)
                                                                                       (case-lambda
                                                                                         ((g$x$10036$UGjMA)
                                                                                          (not (g$p$10035$UGjMA
                                                                                                 g$x$10036$UGjMA))))))
                                                                                    (g$version-pred$9984$UGjMA
                                                                                      g$ver$10034$UGjMA))))
                                                                                g$ls/false$10030$UGjMA)
                                                                              ((case-lambda
                                                                                 ((g$t$10037$UGjMA)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$10038$UGjMA)
                                                                                      (if g$ls/false$10038$UGjMA
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$sub*$10039$UGjMA)
                                                                                             ((case-lambda
                                                                                                ((g$p*$10040$UGjMA)
                                                                                                 (case-lambda
                                                                                                   ((g$x$10041$UGjMA)
                                                                                                    ((letrec ((g$f$10042$UGjMA
                                                                                                                (case-lambda
                                                                                                                  ((g$p*$10043$UGjMA
                                                                                                                     g$x$10044$UGjMA)
                                                                                                                   (if (null?
                                                                                                                         g$p*$10043$UGjMA)
                                                                                                                     '#t
                                                                                                                     (if (null?
                                                                                                                           g$x$10044$UGjMA)
                                                                                                                       '#f
                                                                                                                       (if ((car g$p*$10043$UGjMA)
                                                                                                                            (car g$x$10044$UGjMA))
                                                                                                                         (begin
                                                                                                                           '#f
                                                                                                                           (g$f$10042$UGjMA
                                                                                                                             (cdr g$p*$10043$UGjMA)
                                                                                                                             (cdr g$x$10044$UGjMA)))
                                                                                                                         '#f)))))))
                                                                                                       g$f$10042$UGjMA)
                                                                                                     g$p*$10040$UGjMA
                                                                                                     g$x$10041$UGjMA)))))
                                                                                              (map g$subversion-pred$9983$UGjMA
                                                                                                   g$sub*$10039$UGjMA))))
                                                                                          g$ls/false$10038$UGjMA)
                                                                                        ((case-lambda
                                                                                           ((g$t$10045$UGjMA)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$10046$UGjMA)
                                                                                                (if g$ls/false$10046$UGjMA
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      (()
                                                                                                       (g$syntax-violation$7473$UGjMA
                                                                                                         'import
                                                                                                         '"invalid version spec"
                                                                                                         g$spec$9981$UGjMA
                                                                                                         g$x*$10007$UGjMA)))
                                                                                                    g$ls/false$10046$UGjMA)
                                                                                                  (g$syntax-violation$7473$UGjMA
                                                                                                    '#f
                                                                                                    '"invalid syntax"
                                                                                                    g$t$10045$UGjMA))))
                                                                                             (g$syntax-dispatch$7367$UGjMA
                                                                                               g$t$10045$UGjMA
                                                                                               '_))))
                                                                                         g$t$10037$UGjMA))))
                                                                                   (g$syntax-dispatch$7367$UGjMA
                                                                                     g$t$10037$UGjMA
                                                                                     'each-any))))
                                                                               g$t$10029$UGjMA))))
                                                                         (g$syntax-dispatch$7367$UGjMA
                                                                           g$t$10029$UGjMA
                                                                           '(any any)))))
                                                                     g$t$10020$UGjMA))))
                                                               (g$syntax-dispatch$7367$UGjMA
                                                                 g$t$10020$UGjMA
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$10011$UGjMA))))
                                                     (g$syntax-dispatch$7367$UGjMA
                                                       g$t$10011$UGjMA
                                                       '(any . each-any)))))
                                                 g$t$10008$UGjMA))))
                                           (g$syntax-dispatch$7367$UGjMA
                                             g$t$10008$UGjMA
                                             '()))))
                                       g$x*$10007$UGjMA)))))
                         ((letrec ((g$f$9985$UGjMA
                                     (case-lambda
                                       ((g$x$9986$UGjMA)
                                        ((case-lambda
                                           ((g$t$9987$UGjMA)
                                            ((case-lambda
                                               ((g$ls/false$9988$UGjMA)
                                                (if g$ls/false$9988$UGjMA
                                                  (apply
                                                    (case-lambda
                                                      ((g$version-spec*$9989$UGjMA)
                                                       (values
                                                         '()
                                                         (g$version-pred$9984$UGjMA
                                                           g$version-spec*$9989$UGjMA))))
                                                    g$ls/false$9988$UGjMA)
                                                  ((case-lambda
                                                     ((g$t$9990$UGjMA)
                                                      ((case-lambda
                                                         ((g$ls/false$9991$UGjMA)
                                                          (if (if g$ls/false$9991$UGjMA
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$x$9992$UGjMA
                                                                         g$x*$9993$UGjMA)
                                                                       (g$idsyn?$9880$UGjMA
                                                                         g$x$9992$UGjMA)))
                                                                    g$ls/false$9991$UGjMA))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$x$9994$UGjMA
                                                                   g$x*$9995$UGjMA)
                                                                 (call-with-values
                                                                   (case-lambda
                                                                     (()
                                                                      (g$f$9985$UGjMA
                                                                        g$x*$9995$UGjMA)))
                                                                   (case-lambda
                                                                     ((g$name$9998$UGjMA
                                                                        g$pred$9999$UGjMA)
                                                                      ((case-lambda
                                                                         ((g$pred$10000$UGjMA
                                                                            g$name$10001$UGjMA)
                                                                          (values
                                                                            (cons
                                                                              (g$syntax->datum$7476$UGjMA
                                                                                g$x$9994$UGjMA)
                                                                              g$name$10001$UGjMA)
                                                                            g$pred$10000$UGjMA)))
                                                                       g$pred$9999$UGjMA
                                                                       g$name$9998$UGjMA))))))
                                                              g$ls/false$9991$UGjMA)
                                                            ((case-lambda
                                                               ((g$t$10002$UGjMA)
                                                                ((case-lambda
                                                                   ((g$ls/false$10003$UGjMA)
                                                                    (if g$ls/false$10003$UGjMA
                                                                      (apply
                                                                        (case-lambda
                                                                          (()
                                                                           (values
                                                                             '()
                                                                             (case-lambda
                                                                               ((g$x$10004$UGjMA)
                                                                                '#t)))))
                                                                        g$ls/false$10003$UGjMA)
                                                                      ((case-lambda
                                                                         ((g$t$10005$UGjMA)
                                                                          ((case-lambda
                                                                             ((g$ls/false$10006$UGjMA)
                                                                              (if g$ls/false$10006$UGjMA
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$syntax-violation$7473$UGjMA
                                                                                       '#f
                                                                                       '"invalid import spec"
                                                                                       g$spec$9981$UGjMA)))
                                                                                  g$ls/false$10006$UGjMA)
                                                                                (g$syntax-violation$7473$UGjMA
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$10005$UGjMA))))
                                                                           (g$syntax-dispatch$7367$UGjMA
                                                                             g$t$10005$UGjMA
                                                                             '_))))
                                                                       g$t$10002$UGjMA))))
                                                                 (g$syntax-dispatch$7367$UGjMA
                                                                   g$t$10002$UGjMA
                                                                   '()))))
                                                             g$t$9990$UGjMA))))
                                                       (g$syntax-dispatch$7367$UGjMA
                                                         g$t$9990$UGjMA
                                                         '(any . any)))))
                                                   g$t$9987$UGjMA))))
                                             (g$syntax-dispatch$7367$UGjMA
                                               g$t$9987$UGjMA
                                               '(each-any)))))
                                         g$x$9986$UGjMA)))))
                            g$f$9985$UGjMA)
                          g$spec$9981$UGjMA)))))
                  (g$import-library$9888$UGjMA
                    (case-lambda
                      ((g$spec*$9973$UGjMA)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-library-name$9887$UGjMA
                              g$spec*$9973$UGjMA)))
                         (case-lambda
                           ((g$name$9976$UGjMA g$pred$9977$UGjMA)
                            ((case-lambda
                               ((g$pred$9978$UGjMA g$name$9979$UGjMA)
                                (begin
                                  (if (null? g$name$9979$UGjMA)
                                    (g$syntax-violation$7473$UGjMA
                                      'import
                                      '"empty library name"
                                      g$spec*$9973$UGjMA)
                                    (void))
                                  ((case-lambda
                                     ((g$lib$9980$UGjMA)
                                      (begin
                                        (if g$lib$9980$UGjMA
                                          (void)
                                          (g$syntax-violation$7473$UGjMA
                                            'import
                                            '"cannot find library with required name"
                                            g$name$9979$UGjMA))
                                        (if (g$pred$9978$UGjMA
                                              (g$library-version$6857$UGjMA
                                                g$lib$9980$UGjMA))
                                          (void)
                                          (g$syntax-violation$7473$UGjMA
                                            'import
                                            '"library does not satisfy version specification"
                                            g$spec*$9973$UGjMA
                                            g$lib$9980$UGjMA))
                                        ((g$imp-collector$7421$UGjMA)
                                         g$lib$9980$UGjMA)
                                        (g$library-subst$6861$UGjMA
                                          g$lib$9980$UGjMA))))
                                   (g$find-library-by-name$6897$UGjMA
                                     g$name$9979$UGjMA)))))
                             g$pred$9977$UGjMA
                             g$name$9976$UGjMA)))))))
                  (g$get-import$9889$UGjMA
                    (case-lambda
                      ((g$spec$9902$UGjMA)
                       ((case-lambda
                          ((g$t$9903$UGjMA)
                           ((case-lambda
                              ((g$ls/false$9904$UGjMA)
                               (if (if g$ls/false$9904$UGjMA
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$x$9905$UGjMA g$x*$9906$UGjMA)
                                            (not (memq
                                                   (g$syntax->datum$7476$UGjMA
                                                     g$x$9905$UGjMA)
                                                   '(for rename
                                                         except
                                                         only
                                                         prefix
                                                         library)))))
                                         g$ls/false$9904$UGjMA))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$x$9907$UGjMA g$x*$9908$UGjMA)
                                      (g$import-library$9888$UGjMA
                                        (cons g$x$9907$UGjMA g$x*$9908$UGjMA))))
                                   g$ls/false$9904$UGjMA)
                                 ((case-lambda
                                    ((g$t$9909$UGjMA)
                                     ((case-lambda
                                        ((g$ls/false$9910$UGjMA)
                                         (if (if g$ls/false$9910$UGjMA
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$rename$9911$UGjMA
                                                        g$isp$9912$UGjMA
                                                        g$old*$9913$UGjMA
                                                        g$new*$9914$UGjMA)
                                                      (if (eq? (g$syntax->datum$7476$UGjMA
                                                                 g$rename$9911$UGjMA)
                                                               'rename)
                                                        (if (g$for-all$5365$UGjMA
                                                              g$idsyn?$9880$UGjMA
                                                              g$old*$9913$UGjMA)
                                                          (begin
                                                            '#f
                                                            (g$for-all$5365$UGjMA
                                                              g$idsyn?$9880$UGjMA
                                                              g$new*$9914$UGjMA))
                                                          '#f)
                                                        '#f)))
                                                   g$ls/false$9910$UGjMA))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$rename$9915$UGjMA
                                                  g$isp$9916$UGjMA
                                                  g$old*$9917$UGjMA
                                                  g$new*$9918$UGjMA)
                                                ((case-lambda
                                                   ((g$subst$9919$UGjMA
                                                      g$old*$9920$UGjMA
                                                      g$new*$9921$UGjMA)
                                                    ((case-lambda
                                                       ((g$old-label*$9922$UGjMA)
                                                        ((case-lambda
                                                           ((g$subst$9923$UGjMA)
                                                            (g$merge-substs$9882$UGjMA
                                                              (map cons
                                                                   g$new*$9921$UGjMA
                                                                   g$old-label*$9922$UGjMA)
                                                              g$subst$9923$UGjMA)))
                                                         (g$rem*$9885$UGjMA
                                                           g$old*$9920$UGjMA
                                                           g$subst$9919$UGjMA))))
                                                     (g$find*$9884$UGjMA
                                                       g$old*$9920$UGjMA
                                                       g$subst$9919$UGjMA))))
                                                 (g$get-import$9889$UGjMA
                                                   g$isp$9916$UGjMA)
                                                 (map g$syntax->datum$7476$UGjMA
                                                      g$old*$9917$UGjMA)
                                                 (map g$syntax->datum$7476$UGjMA
                                                      g$new*$9918$UGjMA))))
                                             g$ls/false$9910$UGjMA)
                                           ((case-lambda
                                              ((g$t$9924$UGjMA)
                                               ((case-lambda
                                                  ((g$ls/false$9925$UGjMA)
                                                   (if (if g$ls/false$9925$UGjMA
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$except$9926$UGjMA
                                                                  g$isp$9927$UGjMA
                                                                  g$sym*$9928$UGjMA)
                                                                (if (eq? (g$syntax->datum$7476$UGjMA
                                                                           g$except$9926$UGjMA)
                                                                         'except)
                                                                  (begin
                                                                    '#f
                                                                    (g$for-all$5365$UGjMA
                                                                      g$idsyn?$9880$UGjMA
                                                                      g$sym*$9928$UGjMA))
                                                                  '#f)))
                                                             g$ls/false$9925$UGjMA))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$except$9929$UGjMA
                                                            g$isp$9930$UGjMA
                                                            g$sym*$9931$UGjMA)
                                                          ((case-lambda
                                                             ((g$subst$9932$UGjMA)
                                                              (g$rem*$9885$UGjMA
                                                                (map g$syntax->datum$7476$UGjMA
                                                                     g$sym*$9931$UGjMA)
                                                                g$subst$9932$UGjMA)))
                                                           (g$get-import$9889$UGjMA
                                                             g$isp$9930$UGjMA))))
                                                       g$ls/false$9925$UGjMA)
                                                     ((case-lambda
                                                        ((g$t$9933$UGjMA)
                                                         ((case-lambda
                                                            ((g$ls/false$9934$UGjMA)
                                                             (if (if g$ls/false$9934$UGjMA
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$only$9935$UGjMA
                                                                            g$isp$9936$UGjMA
                                                                            g$sym*$9937$UGjMA)
                                                                          (if (eq? (g$syntax->datum$7476$UGjMA
                                                                                     g$only$9935$UGjMA)
                                                                                   'only)
                                                                            (begin
                                                                              '#f
                                                                              (g$for-all$5365$UGjMA
                                                                                g$idsyn?$9880$UGjMA
                                                                                g$sym*$9937$UGjMA))
                                                                            '#f)))
                                                                       g$ls/false$9934$UGjMA))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$only$9938$UGjMA
                                                                      g$isp$9939$UGjMA
                                                                      g$sym*$9940$UGjMA)
                                                                    ((case-lambda
                                                                       ((g$subst$9941$UGjMA
                                                                          g$sym*$9942$UGjMA)
                                                                        ((case-lambda
                                                                           ((g$sym*$9943$UGjMA)
                                                                            ((case-lambda
                                                                               ((g$lab*$9944$UGjMA)
                                                                                (map cons
                                                                                     g$sym*$9943$UGjMA
                                                                                     g$lab*$9944$UGjMA)))
                                                                             (g$find*$9884$UGjMA
                                                                               g$sym*$9943$UGjMA
                                                                               g$subst$9941$UGjMA))))
                                                                         (g$remove-dups$9886$UGjMA
                                                                           g$sym*$9942$UGjMA))))
                                                                     (g$get-import$9889$UGjMA
                                                                       g$isp$9939$UGjMA)
                                                                     (map g$syntax->datum$7476$UGjMA
                                                                          g$sym*$9940$UGjMA))))
                                                                 g$ls/false$9934$UGjMA)
                                                               ((case-lambda
                                                                  ((g$t$9945$UGjMA)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9946$UGjMA)
                                                                       (if (if g$ls/false$9946$UGjMA
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$prefix$9947$UGjMA
                                                                                      g$isp$9948$UGjMA
                                                                                      g$p$9949$UGjMA)
                                                                                    (if (eq? (g$syntax->datum$7476$UGjMA
                                                                                               g$prefix$9947$UGjMA)
                                                                                             'prefix)
                                                                                      (begin
                                                                                        '#f
                                                                                        (g$idsyn?$9880$UGjMA
                                                                                          g$p$9949$UGjMA))
                                                                                      '#f)))
                                                                                 g$ls/false$9946$UGjMA))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$prefix$9950$UGjMA
                                                                                g$isp$9951$UGjMA
                                                                                g$p$9952$UGjMA)
                                                                              ((case-lambda
                                                                                 ((g$subst$9953$UGjMA
                                                                                    g$prefix$9954$UGjMA)
                                                                                  (map (case-lambda
                                                                                         ((g$x$9955$UGjMA)
                                                                                          (cons
                                                                                            (string->symbol
                                                                                              (string-append
                                                                                                g$prefix$9954$UGjMA
                                                                                                (symbol->string
                                                                                                  (car g$x$9955$UGjMA))))
                                                                                            (cdr g$x$9955$UGjMA))))
                                                                                       g$subst$9953$UGjMA)))
                                                                               (g$get-import$9889$UGjMA
                                                                                 g$isp$9951$UGjMA)
                                                                               (symbol->string
                                                                                 (g$syntax->datum$7476$UGjMA
                                                                                   g$p$9952$UGjMA)))))
                                                                           g$ls/false$9946$UGjMA)
                                                                         ((case-lambda
                                                                            ((g$t$9956$UGjMA)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9957$UGjMA)
                                                                                 (if (if g$ls/false$9957$UGjMA
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$library$9958$UGjMA
                                                                                                g$spec*$9959$UGjMA)
                                                                                              (eq? (g$syntax->datum$7476$UGjMA
                                                                                                     g$library$9958$UGjMA)
                                                                                                   'library)))
                                                                                           g$ls/false$9957$UGjMA))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$library$9960$UGjMA
                                                                                          g$spec*$9961$UGjMA)
                                                                                        (g$import-library$9888$UGjMA
                                                                                          g$spec*$9961$UGjMA)))
                                                                                     g$ls/false$9957$UGjMA)
                                                                                   ((case-lambda
                                                                                      ((g$t$9962$UGjMA)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9963$UGjMA)
                                                                                           (if (if g$ls/false$9963$UGjMA
                                                                                                 (begin
                                                                                                   '#f
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$for$9964$UGjMA
                                                                                                          g$isp$9965$UGjMA
                                                                                                          g$rest$9966$UGjMA)
                                                                                                        (eq? (g$syntax->datum$7476$UGjMA
                                                                                                               g$for$9964$UGjMA)
                                                                                                             'for)))
                                                                                                     g$ls/false$9963$UGjMA))
                                                                                                 '#f)
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$for$9967$UGjMA
                                                                                                    g$isp$9968$UGjMA
                                                                                                    g$rest$9969$UGjMA)
                                                                                                  (g$get-import$9889$UGjMA
                                                                                                    g$isp$9968$UGjMA)))
                                                                                               g$ls/false$9963$UGjMA)
                                                                                             ((case-lambda
                                                                                                ((g$t$9970$UGjMA)
                                                                                                 ((case-lambda
                                                                                                    ((g$ls/false$9971$UGjMA)
                                                                                                     (if g$ls/false$9971$UGjMA
                                                                                                       (apply
                                                                                                         (case-lambda
                                                                                                           ((g$spec$9972$UGjMA)
                                                                                                            (g$syntax-violation$7473$UGjMA
                                                                                                              'import
                                                                                                              '"invalid import spec"
                                                                                                              g$spec$9972$UGjMA)))
                                                                                                         g$ls/false$9971$UGjMA)
                                                                                                       (g$syntax-violation$7473$UGjMA
                                                                                                         '#f
                                                                                                         '"invalid syntax"
                                                                                                         g$t$9970$UGjMA))))
                                                                                                  (g$syntax-dispatch$7367$UGjMA
                                                                                                    g$t$9970$UGjMA
                                                                                                    'any))))
                                                                                              g$t$9962$UGjMA))))
                                                                                        (g$syntax-dispatch$7367$UGjMA
                                                                                          g$t$9962$UGjMA
                                                                                          '(any any
                                                                                                .
                                                                                                any)))))
                                                                                    g$t$9956$UGjMA))))
                                                                              (g$syntax-dispatch$7367$UGjMA
                                                                                g$t$9956$UGjMA
                                                                                '(any each-any)))))
                                                                          g$t$9945$UGjMA))))
                                                                    (g$syntax-dispatch$7367$UGjMA
                                                                      g$t$9945$UGjMA
                                                                      '(any any
                                                                            any)))))
                                                                g$t$9933$UGjMA))))
                                                          (g$syntax-dispatch$7367$UGjMA
                                                            g$t$9933$UGjMA
                                                            '(any any
                                                                  .
                                                                  each-any)))))
                                                      g$t$9924$UGjMA))))
                                                (g$syntax-dispatch$7367$UGjMA
                                                  g$t$9924$UGjMA
                                                  '(any any . each-any)))))
                                            g$t$9909$UGjMA))))
                                      (g$syntax-dispatch$7367$UGjMA
                                        g$t$9909$UGjMA
                                        '(any any . #(each (any any)))))))
                                  g$t$9903$UGjMA))))
                            (g$syntax-dispatch$7367$UGjMA
                              g$t$9903$UGjMA
                              '(any . each-any)))))
                        g$spec$9902$UGjMA))))
                  (g$add-imports!$9890$UGjMA
                    (case-lambda
                      ((g$imp$9894$UGjMA g$h$9895$UGjMA)
                       ((case-lambda
                          ((g$subst$9896$UGjMA)
                           (for-each
                             (case-lambda
                               ((g$x$9897$UGjMA)
                                ((case-lambda
                                   ((g$name$9898$UGjMA g$label$9899$UGjMA)
                                    ((case-lambda
                                       ((g$t$9900$UGjMA)
                                        (if g$t$9900$UGjMA
                                          ((case-lambda
                                             ((g$l$9901$UGjMA)
                                              (if (eq? g$l$9901$UGjMA
                                                       g$label$9899$UGjMA)
                                                (void)
                                                (g$dup-error$9881$UGjMA
                                                  g$name$9898$UGjMA))))
                                           g$t$9900$UGjMA)
                                          (g$hashtable-set!$5162$UGjMA
                                            g$h$9895$UGjMA
                                            g$name$9898$UGjMA
                                            g$label$9899$UGjMA))))
                                     (g$hashtable-ref$5161$UGjMA
                                       g$h$9895$UGjMA
                                       g$name$9898$UGjMA
                                       '#f))))
                                 (car g$x$9897$UGjMA)
                                 (cdr g$x$9897$UGjMA))))
                             g$subst$9896$UGjMA)))
                        (g$get-import$9889$UGjMA g$imp$9894$UGjMA))))))
          ((letrec ((g$f$9891$UGjMA
                      (case-lambda
                        ((g$imp*$9892$UGjMA g$h$9893$UGjMA)
                         (if (null? g$imp*$9892$UGjMA)
                           (hashtable-entries g$h$9893$UGjMA)
                           (begin
                             (g$add-imports!$9890$UGjMA
                               (car g$imp*$9892$UGjMA)
                               g$h$9893$UGjMA)
                             (g$f$9891$UGjMA
                               (cdr g$imp*$9892$UGjMA)
                               g$h$9893$UGjMA)))))))
             g$f$9891$UGjMA)
           g$imp*$9879$UGjMA
           (g$make-eq-hashtable$5158$UGjMA))))))
   (g$make-top-rib$7417$UGjMA
     g$make-top-rib$10867$UGjMA
     (case-lambda
       ((g$names$10140$UGjMA g$labels$10141$UGjMA)
        ((case-lambda
           ((g$rib$10142$UGjMA)
            (begin
              (vector-for-each
                (case-lambda
                  ((g$name$10143$UGjMA g$label$10144$UGjMA)
                   (begin
                     (if (symbol? g$name$10143$UGjMA)
                       (void)
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$10143$UGjMA))
                     (g$extend-rib!$7053$UGjMA
                       g$rib$10142$UGjMA
                       (g$make-stx$7062$UGjMA
                         g$name$10143$UGjMA
                         g$top-mark*$7031$UGjMA
                         '()
                         '())
                       g$label$10144$UGjMA))))
                g$names$10140$UGjMA
                g$labels$10141$UGjMA)
              g$rib$10142$UGjMA)))
         (g$make-empty-rib$7052$UGjMA)))))
   (g$make-collector$7418$UGjMA
     g$make-collector$10868$UGjMA
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$10145$UGjMA)
            (case-lambda
              (() g$ls$10145$UGjMA)
              ((g$x$10146$UGjMA)
               (set! g$ls$10145$UGjMA
                 (g$set-cons$7028$UGjMA g$x$10146$UGjMA g$ls$10145$UGjMA))))))
         '()))))
   (g$inv-collector$7419$UGjMA
     g$inv-collector$10869$UGjMA
     (g$make-parameter$6357$UGjMA
       (case-lambda
         (g$args$10147$UGjMA
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10148$UGjMA)
          (begin
            (if (procedure? g$x$10148$UGjMA)
              (void)
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$10148$UGjMA))
            g$x$10148$UGjMA)))))
   (g$vis-collector$7420$UGjMA
     g$vis-collector$10870$UGjMA
     (g$make-parameter$6357$UGjMA
       (case-lambda
         (g$args$10149$UGjMA
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10150$UGjMA)
          (begin
            (if (procedure? g$x$10150$UGjMA)
              (void)
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$10150$UGjMA))
            g$x$10150$UGjMA)))))
   (g$imp-collector$7421$UGjMA
     g$imp-collector$10871$UGjMA
     (g$make-parameter$6357$UGjMA
       (case-lambda
         (g$args$10151$UGjMA
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10152$UGjMA)
          (begin
            (if (procedure? g$x$10152$UGjMA)
              (void)
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$10152$UGjMA))
            g$x$10152$UGjMA)))))
   (g$chi-library-internal$7422$UGjMA
     g$chi-library-internal$10872$UGjMA
     (case-lambda
       ((g$e*$10153$UGjMA g$rib$10154$UGjMA g$top?$10155$UGjMA)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7411$UGjMA
               g$e*$10153$UGjMA
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$10154$UGjMA
               g$top?$10155$UGjMA)))
          (case-lambda
            ((g$e*$10163$UGjMA
               g$r$10164$UGjMA
               g$mr$10165$UGjMA
               g$lex*$10166$UGjMA
               g$rhs*$10167$UGjMA
               g$mod**$10168$UGjMA
               g$_kwd*$10169$UGjMA)
             ((case-lambda
                ((g$_kwd*$10170$UGjMA
                   g$mod**$10171$UGjMA
                   g$rhs*$10172$UGjMA
                   g$lex*$10173$UGjMA
                   g$mr$10174$UGjMA
                   g$r$10175$UGjMA
                   g$e*$10176$UGjMA)
                 (values
                   (append
                     (apply append (reverse g$mod**$10171$UGjMA))
                     g$e*$10176$UGjMA)
                   g$r$10175$UGjMA
                   g$mr$10174$UGjMA
                   (reverse g$lex*$10173$UGjMA)
                   (reverse g$rhs*$10172$UGjMA))))
              g$_kwd*$10169$UGjMA
              g$mod**$10168$UGjMA
              g$rhs*$10167$UGjMA
              g$lex*$10166$UGjMA
              g$mr$10165$UGjMA
              g$r$10164$UGjMA
              g$e*$10163$UGjMA)))))))
   (g$chi-interaction-expr$7423$UGjMA
     g$chi-interaction-expr$10873$UGjMA
     (case-lambda
       ((g$e$10177$UGjMA g$rib$10178$UGjMA g$r$10179$UGjMA)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7411$UGjMA
               (list g$e$10177$UGjMA)
               g$r$10179$UGjMA
               g$r$10179$UGjMA
               '()
               '()
               '()
               '()
               g$rib$10178$UGjMA
               '#t)))
          (case-lambda
            ((g$e*$10187$UGjMA
               g$r$10188$UGjMA
               g$mr$10189$UGjMA
               g$lex*$10190$UGjMA
               g$rhs*$10191$UGjMA
               g$mod**$10192$UGjMA
               g$_kwd*$10193$UGjMA)
             ((case-lambda
                ((g$_kwd*$10194$UGjMA
                   g$mod**$10195$UGjMA
                   g$rhs*$10196$UGjMA
                   g$lex*$10197$UGjMA
                   g$mr$10198$UGjMA
                   g$r$10199$UGjMA
                   g$e*$10200$UGjMA)
                 ((case-lambda
                    ((g$e*$10201$UGjMA)
                     ((case-lambda
                        ((g$e$10202$UGjMA)
                         (values g$e$10202$UGjMA g$r$10199$UGjMA)))
                      (if (null? g$e*$10201$UGjMA)
                        (g$build-void$7024$UGjMA)
                        (if (null? (cdr g$e*$10201$UGjMA))
                          (car g$e*$10201$UGjMA)
                          (g$build-sequence$7023$UGjMA
                            '#f
                            g$e*$10201$UGjMA))))))
                  (g$expand-interaction-rhs*/init*$7392$UGjMA
                    (reverse g$lex*$10197$UGjMA)
                    (reverse g$rhs*$10196$UGjMA)
                    (append
                      (apply append (reverse g$mod**$10195$UGjMA))
                      g$e*$10200$UGjMA)
                    g$r$10199$UGjMA
                    g$mr$10198$UGjMA))))
              g$_kwd*$10193$UGjMA
              g$mod**$10192$UGjMA
              g$rhs*$10191$UGjMA
              g$lex*$10190$UGjMA
              g$mr$10189$UGjMA
              g$r$10188$UGjMA
              g$e*$10187$UGjMA)))))))
   (g$library-body-expander$7424$UGjMA
     g$library-body-expander$10874$UGjMA
     (case-lambda
       ((g$name$10203$UGjMA
          g$exp*$10204$UGjMA
          g$imp*$10205$UGjMA
          g$b*$10206$UGjMA
          g$top?$10207$UGjMA)
        (letrec* ((g$itc$10208$UGjMA (g$make-collector$7418$UGjMA)))
          ((case-lambda
             ((g$imp-collector$10213$UGjMA
                g$top-level-context$10214$UGjMA
                g$imp-collector$10215$UGjMA
                g$top-level-context$10216$UGjMA)
              ((case-lambda
                 ((g$swap$10217$UGjMA)
                  (dynamic-wind
                    g$swap$10217$UGjMA
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (() (g$parse-exports$7413$UGjMA g$exp*$10204$UGjMA)))
                         (case-lambda
                           ((g$exp-int*$10220$UGjMA g$exp-ext*$10221$UGjMA)
                            ((case-lambda
                               ((g$exp-ext*$10222$UGjMA g$exp-int*$10223$UGjMA)
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (g$parse-import-spec*$7416$UGjMA
                                       g$imp*$10205$UGjMA)))
                                  (case-lambda
                                    ((g$subst-names$10226$UGjMA
                                       g$subst-labels$10227$UGjMA)
                                     ((case-lambda
                                        ((g$subst-labels$10228$UGjMA
                                           g$subst-names$10229$UGjMA)
                                         ((case-lambda
                                            ((g$rib$10230$UGjMA)
                                             ((case-lambda
                                                ((g$b*$10231$UGjMA
                                                   g$rtc$10232$UGjMA
                                                   g$vtc$10233$UGjMA)
                                                 ((case-lambda
                                                    ((g$inv-collector$10238$UGjMA
                                                       g$vis-collector$10239$UGjMA
                                                       g$inv-collector$10240$UGjMA
                                                       g$vis-collector$10241$UGjMA)
                                                     ((case-lambda
                                                        ((g$swap$10242$UGjMA)
                                                         (dynamic-wind
                                                           g$swap$10242$UGjMA
                                                           (case-lambda
                                                             (()
                                                              (call-with-values
                                                                (case-lambda
                                                                  (()
                                                                   (g$chi-library-internal$7422$UGjMA
                                                                     g$b*$10231$UGjMA
                                                                     g$rib$10230$UGjMA
                                                                     g$top?$10207$UGjMA)))
                                                                (case-lambda
                                                                  ((g$init*$10248$UGjMA
                                                                     g$r$10249$UGjMA
                                                                     g$mr$10250$UGjMA
                                                                     g$lex*$10251$UGjMA
                                                                     g$rhs*$10252$UGjMA)
                                                                   ((case-lambda
                                                                      ((g$rhs*$10253$UGjMA
                                                                         g$lex*$10254$UGjMA
                                                                         g$mr$10255$UGjMA
                                                                         g$r$10256$UGjMA
                                                                         g$init*$10257$UGjMA)
                                                                       (begin
                                                                         (g$seal-rib!$7055$UGjMA
                                                                           g$rib$10230$UGjMA)
                                                                         ((case-lambda
                                                                            ((g$init*$10258$UGjMA)
                                                                             ((case-lambda
                                                                                ((g$rhs*$10259$UGjMA)
                                                                                 ((case-lambda
                                                                                    (()
                                                                                     (begin
                                                                                       (g$unseal-rib!$7056$UGjMA
                                                                                         g$rib$10230$UGjMA)
                                                                                       ((case-lambda
                                                                                          ((g$loc*$10260$UGjMA
                                                                                             g$export-subst$10261$UGjMA)
                                                                                           (letrec* ((g$errstr$10262$UGjMA
                                                                                                       '"attempt to export mutated variable"))
                                                                                             (call-with-values
                                                                                               (case-lambda
                                                                                                 (()
                                                                                                  (g$make-export-env/macros$7465$UGjMA
                                                                                                    g$lex*$10254$UGjMA
                                                                                                    g$loc*$10260$UGjMA
                                                                                                    g$r$10256$UGjMA)))
                                                                                               (case-lambda
                                                                                                 ((g$export-env$10266$UGjMA
                                                                                                    g$global*$10267$UGjMA
                                                                                                    g$macro*$10268$UGjMA)
                                                                                                  ((case-lambda
                                                                                                     ((g$macro*$10269$UGjMA
                                                                                                        g$global*$10270$UGjMA
                                                                                                        g$export-env$10271$UGjMA)
                                                                                                      (begin
                                                                                                        (for-each
                                                                                                          (case-lambda
                                                                                                            ((g$s$10272$UGjMA)
                                                                                                             ((case-lambda
                                                                                                                ((g$name$10273$UGjMA
                                                                                                                   g$label$10274$UGjMA)
                                                                                                                 ((case-lambda
                                                                                                                    ((g$p$10275$UGjMA)
                                                                                                                     (if g$p$10275$UGjMA
                                                                                                                       ((case-lambda
                                                                                                                          ((g$b$10276$UGjMA)
                                                                                                                           ((case-lambda
                                                                                                                              ((g$type$10277$UGjMA)
                                                                                                                               (if (eq? g$type$10277$UGjMA
                                                                                                                                        'mutable)
                                                                                                                                 (g$syntax-violation$7473$UGjMA
                                                                                                                                   'export
                                                                                                                                   g$errstr$10262$UGjMA
                                                                                                                                   g$name$10273$UGjMA)
                                                                                                                                 (void))))
                                                                                                                            (car g$b$10276$UGjMA))))
                                                                                                                        (cdr g$p$10275$UGjMA))
                                                                                                                       (void))))
                                                                                                                  (assq
                                                                                                                    g$label$10274$UGjMA
                                                                                                                    g$export-env$10271$UGjMA))))
                                                                                                              (car g$s$10272$UGjMA)
                                                                                                              (cdr g$s$10272$UGjMA))))
                                                                                                          g$export-subst$10261$UGjMA)
                                                                                                        ((case-lambda
                                                                                                           ((g$invoke-body$10278$UGjMA
                                                                                                              g$invoke-definitions$10279$UGjMA)
                                                                                                            (values
                                                                                                              (g$itc$10208$UGjMA)
                                                                                                              (g$rtc$10232$UGjMA)
                                                                                                              (g$vtc$10233$UGjMA)
                                                                                                              (g$build-sequence$7023$UGjMA
                                                                                                                '#f
                                                                                                                (append
                                                                                                                  g$invoke-definitions$10279$UGjMA
                                                                                                                  (list
                                                                                                                    g$invoke-body$10278$UGjMA)))
                                                                                                              g$macro*$10269$UGjMA
                                                                                                              g$export-subst$10261$UGjMA
                                                                                                              g$export-env$10271$UGjMA)))
                                                                                                         (g$build-library-letrec*$7027$UGjMA
                                                                                                           '#f
                                                                                                           g$name$10203$UGjMA
                                                                                                           g$lex*$10254$UGjMA
                                                                                                           g$loc*$10260$UGjMA
                                                                                                           g$rhs*$10259$UGjMA
                                                                                                           (if (null?
                                                                                                                 g$init*$10258$UGjMA)
                                                                                                             (g$build-void$7024$UGjMA)
                                                                                                             (g$build-sequence$7023$UGjMA
                                                                                                               '#f
                                                                                                               g$init*$10258$UGjMA)))
                                                                                                         (map g$build-global-define$7019$UGjMA
                                                                                                              (map cdr
                                                                                                                   g$global*$10270$UGjMA))))))
                                                                                                   g$macro*$10268$UGjMA
                                                                                                   g$global*$10267$UGjMA
                                                                                                   g$export-env$10266$UGjMA)))))))
                                                                                        (map g$gen-global$7034$UGjMA
                                                                                             g$lex*$10254$UGjMA)
                                                                                        (g$make-export-subst$7464$UGjMA
                                                                                          g$exp-int*$10223$UGjMA
                                                                                          g$exp-ext*$10222$UGjMA
                                                                                          g$rib$10230$UGjMA))))))))
                                                                              (g$chi-rhs*$7393$UGjMA
                                                                                g$rhs*$10253$UGjMA
                                                                                g$r$10256$UGjMA
                                                                                g$mr$10255$UGjMA))))
                                                                          (g$chi-expr*$7383$UGjMA
                                                                            g$init*$10257$UGjMA
                                                                            g$r$10256$UGjMA
                                                                            g$mr$10255$UGjMA)))))
                                                                    g$rhs*$10252$UGjMA
                                                                    g$lex*$10251$UGjMA
                                                                    g$mr$10250$UGjMA
                                                                    g$r$10249$UGjMA
                                                                    g$init*$10248$UGjMA))))))
                                                           g$swap$10242$UGjMA)))
                                                      (case-lambda
                                                        (()
                                                         (begin
                                                           ((case-lambda
                                                              ((g$t$10280$UGjMA)
                                                               (begin
                                                                 (g$inv-collector$10238$UGjMA
                                                                   g$inv-collector$10240$UGjMA)
                                                                 (set! g$inv-collector$10240$UGjMA
                                                                   g$t$10280$UGjMA))))
                                                            (g$inv-collector$10238$UGjMA))
                                                           ((case-lambda
                                                              ((g$t$10281$UGjMA)
                                                               (begin
                                                                 (g$vis-collector$10239$UGjMA
                                                                   g$vis-collector$10241$UGjMA)
                                                                 (set! g$vis-collector$10241$UGjMA
                                                                   g$t$10281$UGjMA))))
                                                            (g$vis-collector$10239$UGjMA))))))))
                                                  g$inv-collector$7419$UGjMA
                                                  g$vis-collector$7420$UGjMA
                                                  g$rtc$10232$UGjMA
                                                  g$vtc$10233$UGjMA)))
                                              (map (case-lambda
                                                     ((g$x$10282$UGjMA)
                                                      (g$make-stx$7062$UGjMA
                                                        g$x$10282$UGjMA
                                                        g$top-mark*$7031$UGjMA
                                                        (list g$rib$10230$UGjMA)
                                                        '())))
                                                   g$b*$10206$UGjMA)
                                              (g$make-collector$7418$UGjMA)
                                              (g$make-collector$7418$UGjMA))))
                                          (g$make-top-rib$7417$UGjMA
                                            g$subst-names$10229$UGjMA
                                            g$subst-labels$10228$UGjMA))))
                                      g$subst-labels$10227$UGjMA
                                      g$subst-names$10226$UGjMA))))))
                             g$exp-ext*$10221$UGjMA
                             g$exp-int*$10220$UGjMA))))))
                    g$swap$10217$UGjMA)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$10283$UGjMA)
                        (begin
                          (g$imp-collector$10213$UGjMA
                            g$imp-collector$10215$UGjMA)
                          (set! g$imp-collector$10215$UGjMA g$t$10283$UGjMA))))
                     (g$imp-collector$10213$UGjMA))
                    ((case-lambda
                       ((g$t$10284$UGjMA)
                        (begin
                          (g$top-level-context$10214$UGjMA
                            g$top-level-context$10216$UGjMA)
                          (set! g$top-level-context$10216$UGjMA
                            g$t$10284$UGjMA))))
                     (g$top-level-context$10214$UGjMA))))))))
           g$imp-collector$7421$UGjMA
           g$top-level-context$7480$UGjMA
           g$itc$10208$UGjMA
           '#f)))))
   (g$core-library-expander$7425$UGjMA
     g$core-library-expander$10875$UGjMA
     (case-lambda
       ((g$e$10285$UGjMA g$verify-name$10286$UGjMA)
        (call-with-values
          (case-lambda (() (g$parse-library$7415$UGjMA g$e$10285$UGjMA)))
          (case-lambda
            ((g$name*$10291$UGjMA
               g$exp*$10292$UGjMA
               g$imp*$10293$UGjMA
               g$b*$10294$UGjMA)
             ((case-lambda
                ((g$b*$10295$UGjMA
                   g$imp*$10296$UGjMA
                   g$exp*$10297$UGjMA
                   g$name*$10298$UGjMA)
                 (call-with-values
                   (case-lambda
                     (() (g$parse-library-name$7414$UGjMA g$name*$10298$UGjMA)))
                   (case-lambda
                     ((g$name$10301$UGjMA g$ver$10302$UGjMA)
                      ((case-lambda
                         ((g$ver$10303$UGjMA g$name$10304$UGjMA)
                          (begin
                            (g$verify-name$10286$UGjMA g$name$10304$UGjMA)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$7424$UGjMA
                                   g$name$10304$UGjMA
                                   g$exp*$10297$UGjMA
                                   g$imp*$10296$UGjMA
                                   g$b*$10295$UGjMA
                                   '#f)))
                              (case-lambda
                                ((g$imp*$10312$UGjMA
                                   g$invoke-req*$10313$UGjMA
                                   g$visit-req*$10314$UGjMA
                                   g$invoke-code$10315$UGjMA
                                   g$visit-code$10316$UGjMA
                                   g$export-subst$10317$UGjMA
                                   g$export-env$10318$UGjMA)
                                 ((case-lambda
                                    ((g$export-env$10319$UGjMA
                                       g$export-subst$10320$UGjMA
                                       g$visit-code$10321$UGjMA
                                       g$invoke-code$10322$UGjMA
                                       g$visit-req*$10323$UGjMA
                                       g$invoke-req*$10324$UGjMA
                                       g$imp*$10325$UGjMA)
                                     (values
                                       g$name$10304$UGjMA
                                       g$ver$10303$UGjMA
                                       g$imp*$10325$UGjMA
                                       g$invoke-req*$10324$UGjMA
                                       g$visit-req*$10323$UGjMA
                                       g$invoke-code$10322$UGjMA
                                       g$visit-code$10321$UGjMA
                                       g$export-subst$10320$UGjMA
                                       g$export-env$10319$UGjMA)))
                                  g$export-env$10318$UGjMA
                                  g$export-subst$10317$UGjMA
                                  g$visit-code$10316$UGjMA
                                  g$invoke-code$10315$UGjMA
                                  g$visit-req*$10314$UGjMA
                                  g$invoke-req*$10313$UGjMA
                                  g$imp*$10312$UGjMA)))))))
                       g$ver$10302$UGjMA
                       g$name$10301$UGjMA))))))
              g$b*$10294$UGjMA
              g$imp*$10293$UGjMA
              g$exp*$10292$UGjMA
              g$name*$10291$UGjMA)))))))
   (g$parse-top-level-program$7426$UGjMA
     g$parse-top-level-program$10876$UGjMA
     (case-lambda
       ((g$e*$10326$UGjMA)
        ((case-lambda
           ((g$t$10327$UGjMA)
            ((case-lambda
               ((g$ls/false$10328$UGjMA)
                (if (if g$ls/false$10328$UGjMA
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$10329$UGjMA
                               g$imp*$10330$UGjMA
                               g$b*$10331$UGjMA)
                             (eq? (g$syntax->datum$7476$UGjMA
                                    g$import$10329$UGjMA)
                                  'import)))
                          g$ls/false$10328$UGjMA))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$10332$UGjMA
                         g$imp*$10333$UGjMA
                         g$b*$10334$UGjMA)
                       (values g$imp*$10333$UGjMA g$b*$10334$UGjMA)))
                    g$ls/false$10328$UGjMA)
                  ((case-lambda
                     ((g$t$10335$UGjMA)
                      ((case-lambda
                         ((g$ls/false$10336$UGjMA)
                          (if (if g$ls/false$10336$UGjMA
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$10337$UGjMA
                                         g$x$10338$UGjMA
                                         g$y$10339$UGjMA)
                                       (eq? (g$syntax->datum$7476$UGjMA
                                              g$import$10337$UGjMA)
                                            'import)))
                                    g$ls/false$10336$UGjMA))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$10340$UGjMA
                                   g$x$10341$UGjMA
                                   g$y$10342$UGjMA)
                                 (g$syntax-violation$7473$UGjMA
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$7086$UGjMA g$e*$10326$UGjMA))))
                              g$ls/false$10336$UGjMA)
                            ((case-lambda
                               ((g$t$10343$UGjMA)
                                ((case-lambda
                                   ((g$ls/false$10344$UGjMA)
                                    (if g$ls/false$10344$UGjMA
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$10344$UGjMA)
                                      (g$syntax-violation$7473$UGjMA
                                        '#f
                                        '"invalid syntax"
                                        g$t$10343$UGjMA))))
                                 (g$syntax-dispatch$7367$UGjMA
                                   g$t$10343$UGjMA
                                   '_))))
                             g$t$10335$UGjMA))))
                       (g$syntax-dispatch$7367$UGjMA
                         g$t$10335$UGjMA
                         '((any . any) . any)))))
                   g$t$10327$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA
               g$t$10327$UGjMA
               '((any . each-any) . each-any)))))
         g$e*$10326$UGjMA))))
   (g$top-level-expander$7427$UGjMA
     g$top-level-expander$10877$UGjMA
     (case-lambda
       ((g$e*$10345$UGjMA)
        (call-with-values
          (case-lambda
            (() (g$parse-top-level-program$7426$UGjMA g$e*$10345$UGjMA)))
          (case-lambda
            ((g$imp*$10348$UGjMA g$b*$10349$UGjMA)
             ((case-lambda
                ((g$b*$10350$UGjMA g$imp*$10351$UGjMA)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$7424$UGjMA
                        '()
                        '()
                        g$imp*$10351$UGjMA
                        g$b*$10350$UGjMA
                        '#t)))
                   (case-lambda
                     ((g$imp*$10359$UGjMA
                        g$invoke-req*$10360$UGjMA
                        g$visit-req*$10361$UGjMA
                        g$invoke-code$10362$UGjMA
                        g$visit-code$10363$UGjMA
                        g$export-subst$10364$UGjMA
                        g$export-env$10365$UGjMA)
                      ((case-lambda
                         ((g$export-env$10366$UGjMA
                            g$export-subst$10367$UGjMA
                            g$visit-code$10368$UGjMA
                            g$invoke-code$10369$UGjMA
                            g$visit-req*$10370$UGjMA
                            g$invoke-req*$10371$UGjMA
                            g$imp*$10372$UGjMA)
                          (values
                            g$invoke-req*$10371$UGjMA
                            g$invoke-code$10369$UGjMA)))
                       g$export-env$10365$UGjMA
                       g$export-subst$10364$UGjMA
                       g$visit-code$10363$UGjMA
                       g$invoke-code$10362$UGjMA
                       g$visit-req*$10361$UGjMA
                       g$invoke-req*$10360$UGjMA
                       g$imp*$10359$UGjMA))))))
              g$b*$10349$UGjMA
              g$imp*$10348$UGjMA)))))))
   (g$8320$7428$UGjMA
     g$8320$10878$UGjMA
     (make-record-type-descriptor
       'env
       '#f
       'g$8323$UGjMA
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$8322$7429$UGjMA g$8322$10879$UGjMA '#f)
   (g$8321$7430$UGjMA
     g$8321$10880$UGjMA
     (make-record-constructor-descriptor
       g$8320$7428$UGjMA
       '#f
       g$8322$7429$UGjMA))
   (g$env?$7431$UGjMA
     g$env?$10881$UGjMA
     (record-predicate g$8320$7428$UGjMA))
   (g$make-env$7432$UGjMA
     g$make-env$10882$UGjMA
     (record-constructor g$8321$7430$UGjMA))
   (g$env-names$7433$UGjMA
     g$env-names$10883$UGjMA
     (record-accessor g$8320$7428$UGjMA '0))
   (g$env-labels$7434$UGjMA
     g$env-labels$10884$UGjMA
     (record-accessor g$8320$7428$UGjMA '1))
   (g$env-itc$7435$UGjMA
     g$env-itc$10885$UGjMA
     (record-accessor g$8320$7428$UGjMA '2))
   (g$set-env-names!$7436$UGjMA
     g$set-env-names!$10886$UGjMA
     (record-mutator g$8320$7428$UGjMA '0))
   (g$set-env-labels!$7437$UGjMA
     g$set-env-labels!$10887$UGjMA
     (record-mutator g$8320$7428$UGjMA '1))
   (g$set-env-itc!$7438$UGjMA
     g$set-env-itc!$10888$UGjMA
     (record-mutator g$8320$7428$UGjMA '2))
   (g$rp$7439$UGjMA
     g$rp$10889$UGjMA
     (make-record-printer
       'env
       (case-lambda
         ((g$x$10373$UGjMA g$p$10374$UGjMA)
          (display '"#<environment>" g$p$10374$UGjMA)))))
   (g$8339$7440$UGjMA
     g$8339$10890$UGjMA
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$8342$UGjMA
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$8341$7441$UGjMA g$8341$10891$UGjMA '#f)
   (g$8340$7442$UGjMA
     g$8340$10892$UGjMA
     (make-record-constructor-descriptor
       g$8339$7440$UGjMA
       '#f
       g$8341$7441$UGjMA))
   (g$interaction-env?$7443$UGjMA
     g$interaction-env?$10893$UGjMA
     (record-predicate g$8339$7440$UGjMA))
   (g$make-interaction-env$7444$UGjMA
     g$make-interaction-env$10894$UGjMA
     (record-constructor g$8340$7442$UGjMA))
   (g$interaction-env-rib$7445$UGjMA
     g$interaction-env-rib$10895$UGjMA
     (record-accessor g$8339$7440$UGjMA '0))
   (g$interaction-env-r$7446$UGjMA
     g$interaction-env-r$10896$UGjMA
     (record-accessor g$8339$7440$UGjMA '1))
   (g$interaction-env-locs$7447$UGjMA
     g$interaction-env-locs$10897$UGjMA
     (record-accessor g$8339$7440$UGjMA '2))
   (g$set-interaction-env-rib!$7448$UGjMA
     g$set-interaction-env-rib!$10898$UGjMA
     (record-mutator g$8339$7440$UGjMA '0))
   (g$set-interaction-env-r!$7449$UGjMA
     g$set-interaction-env-r!$10899$UGjMA
     (record-mutator g$8339$7440$UGjMA '1))
   (g$set-interaction-env-locs!$7450$UGjMA
     g$set-interaction-env-locs!$10900$UGjMA
     (record-mutator g$8339$7440$UGjMA '2))
   (g$rp$7451$UGjMA
     g$rp$10901$UGjMA
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$10375$UGjMA g$p$10376$UGjMA)
          (display '"#<environment>" g$p$10376$UGjMA)))))
   (g$interaction-environment-symbols$7452$UGjMA
     g$interaction-environment-symbols$10902$UGjMA
     (case-lambda
       (()
        (map (case-lambda ((g$x$10377$UGjMA) g$x$10377$UGjMA))
             (g$rib-sym*$7044$UGjMA
               (g$interaction-env-rib$7445$UGjMA
                 (g$interaction-environment$7479$UGjMA)))))))
   (g$environment-symbols$7453$UGjMA
     g$environment-symbols$10903$UGjMA
     (case-lambda
       ((g$e$10378$UGjMA)
        (vector->list (g$env-names$7433$UGjMA g$e$10378$UGjMA)))))
   (g$environment?$7454$UGjMA
     g$environment?$10904$UGjMA
     (case-lambda
       ((g$x$10379$UGjMA)
        ((case-lambda
           ((g$t$10380$UGjMA)
            (if g$t$10380$UGjMA
              g$t$10380$UGjMA
              (begin '#f (g$interaction-env?$7443$UGjMA g$x$10379$UGjMA)))))
         (g$env?$7431$UGjMA g$x$10379$UGjMA)))))
   (g$environment$7455$UGjMA
     g$environment$10905$UGjMA
     (case-lambda
       (g$imp*$10381$UGjMA
        ((case-lambda
           ((g$itc$10382$UGjMA)
            ((case-lambda
               ((g$imp-collector$10385$UGjMA g$imp-collector$10386$UGjMA)
                ((case-lambda
                   ((g$swap$10387$UGjMA)
                    (dynamic-wind
                      g$swap$10387$UGjMA
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$7416$UGjMA
                                g$imp*$10381$UGjMA)))
                           (case-lambda
                             ((g$subst-names$10390$UGjMA
                                g$subst-labels$10391$UGjMA)
                              ((case-lambda
                                 ((g$subst-labels$10392$UGjMA
                                    g$subst-names$10393$UGjMA)
                                  (g$make-env$7432$UGjMA
                                    g$subst-names$10393$UGjMA
                                    g$subst-labels$10392$UGjMA
                                    g$itc$10382$UGjMA)))
                               g$subst-labels$10391$UGjMA
                               g$subst-names$10390$UGjMA))))))
                      g$swap$10387$UGjMA)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$10394$UGjMA)
                        (begin
                          (g$imp-collector$10385$UGjMA
                            g$imp-collector$10386$UGjMA)
                          (set! g$imp-collector$10386$UGjMA g$t$10394$UGjMA))))
                     (g$imp-collector$10385$UGjMA)))))))
             g$imp-collector$7421$UGjMA
             g$itc$10382$UGjMA)))
         (g$make-collector$7418$UGjMA)))))
   (g$null-environment$7456$UGjMA
     g$null-environment$10906$UGjMA
     (case-lambda
       ((g$n$10395$UGjMA)
        (begin
          (if (eqv? g$n$10395$UGjMA '5)
            (void)
            (assertion-violation 'null-environment '"not 5" g$n$10395$UGjMA))
          (g$environment$7455$UGjMA '(psyntax null-environment-5))))))
   (g$scheme-report-environment$7457$UGjMA
     g$scheme-report-environment$10907$UGjMA
     (case-lambda
       ((g$n$10396$UGjMA)
        (begin
          (if (eqv? g$n$10396$UGjMA '5)
            (void)
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$10396$UGjMA))
          (g$environment$7455$UGjMA '(psyntax scheme-report-environment-5))))))
   (g$expand$7458$UGjMA
     g$expand$10908$UGjMA
     (case-lambda
       ((g$x$10397$UGjMA g$env$10398$UGjMA)
        (if (g$env?$7431$UGjMA g$env$10398$UGjMA)
          ((case-lambda
             ((g$rib$10399$UGjMA)
              ((case-lambda
                 ((g$x$10400$UGjMA
                    g$itc$10401$UGjMA
                    g$rtc$10402$UGjMA
                    g$vtc$10403$UGjMA)
                  ((case-lambda
                     ((g$x$10404$UGjMA)
                      (begin
                        (g$seal-rib!$7055$UGjMA g$rib$10399$UGjMA)
                        (values g$x$10404$UGjMA (g$rtc$10402$UGjMA)))))
                   ((case-lambda
                      ((g$inv-collector$10411$UGjMA
                         g$vis-collector$10412$UGjMA
                         g$imp-collector$10413$UGjMA
                         g$inv-collector$10414$UGjMA
                         g$vis-collector$10415$UGjMA
                         g$imp-collector$10416$UGjMA)
                       ((case-lambda
                          ((g$swap$10417$UGjMA)
                           (dynamic-wind
                             g$swap$10417$UGjMA
                             (case-lambda
                               (()
                                (g$chi-expr$7385$UGjMA
                                  g$x$10400$UGjMA
                                  '()
                                  '())))
                             g$swap$10417$UGjMA)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$10418$UGjMA)
                                 (begin
                                   (g$inv-collector$10411$UGjMA
                                     g$inv-collector$10414$UGjMA)
                                   (set! g$inv-collector$10414$UGjMA
                                     g$t$10418$UGjMA))))
                              (g$inv-collector$10411$UGjMA))
                             ((case-lambda
                                ((g$t$10419$UGjMA)
                                 (begin
                                   (g$vis-collector$10412$UGjMA
                                     g$vis-collector$10415$UGjMA)
                                   (set! g$vis-collector$10415$UGjMA
                                     g$t$10419$UGjMA))))
                              (g$vis-collector$10412$UGjMA))
                             ((case-lambda
                                ((g$t$10420$UGjMA)
                                 (begin
                                   (g$imp-collector$10413$UGjMA
                                     g$imp-collector$10416$UGjMA)
                                   (set! g$imp-collector$10416$UGjMA
                                     g$t$10420$UGjMA))))
                              (g$imp-collector$10413$UGjMA))))))))
                    g$inv-collector$7419$UGjMA
                    g$vis-collector$7420$UGjMA
                    g$imp-collector$7421$UGjMA
                    g$rtc$10402$UGjMA
                    g$vtc$10403$UGjMA
                    g$itc$10401$UGjMA))))
               (g$make-stx$7062$UGjMA
                 g$x$10397$UGjMA
                 g$top-mark*$7031$UGjMA
                 (list g$rib$10399$UGjMA)
                 '())
               (g$env-itc$7435$UGjMA g$env$10398$UGjMA)
               (g$make-collector$7418$UGjMA)
               (g$make-collector$7418$UGjMA))))
           (g$make-top-rib$7417$UGjMA
             (g$env-names$7433$UGjMA g$env$10398$UGjMA)
             (g$env-labels$7434$UGjMA g$env$10398$UGjMA)))
          (if (g$interaction-env?$7443$UGjMA g$env$10398$UGjMA)
            ((case-lambda
               ((g$rib$10421$UGjMA g$r$10422$UGjMA g$rtc$10423$UGjMA)
                ((case-lambda
                   ((g$x$10424$UGjMA)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$10435$UGjMA
                               g$inv-collector$10436$UGjMA
                               g$vis-collector$10437$UGjMA
                               g$imp-collector$10438$UGjMA
                               g$top-level-context$10439$UGjMA
                               g$inv-collector$10440$UGjMA
                               g$vis-collector$10441$UGjMA
                               g$imp-collector$10442$UGjMA)
                             ((case-lambda
                                ((g$swap$10443$UGjMA)
                                 (dynamic-wind
                                   g$swap$10443$UGjMA
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$7423$UGjMA
                                        g$x$10424$UGjMA
                                        g$rib$10421$UGjMA
                                        g$r$10422$UGjMA)))
                                   g$swap$10443$UGjMA)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$10444$UGjMA)
                                       (begin
                                         (g$top-level-context$10435$UGjMA
                                           g$top-level-context$10439$UGjMA)
                                         (set! g$top-level-context$10439$UGjMA
                                           g$t$10444$UGjMA))))
                                    (g$top-level-context$10435$UGjMA))
                                   ((case-lambda
                                      ((g$t$10445$UGjMA)
                                       (begin
                                         (g$inv-collector$10436$UGjMA
                                           g$inv-collector$10440$UGjMA)
                                         (set! g$inv-collector$10440$UGjMA
                                           g$t$10445$UGjMA))))
                                    (g$inv-collector$10436$UGjMA))
                                   ((case-lambda
                                      ((g$t$10446$UGjMA)
                                       (begin
                                         (g$vis-collector$10437$UGjMA
                                           g$vis-collector$10441$UGjMA)
                                         (set! g$vis-collector$10441$UGjMA
                                           g$t$10446$UGjMA))))
                                    (g$vis-collector$10437$UGjMA))
                                   ((case-lambda
                                      ((g$t$10447$UGjMA)
                                       (begin
                                         (g$imp-collector$10438$UGjMA
                                           g$imp-collector$10442$UGjMA)
                                         (set! g$imp-collector$10442$UGjMA
                                           g$t$10447$UGjMA))))
                                    (g$imp-collector$10438$UGjMA))))))))
                          g$top-level-context$7480$UGjMA
                          g$inv-collector$7419$UGjMA
                          g$vis-collector$7420$UGjMA
                          g$imp-collector$7421$UGjMA
                          g$env$10398$UGjMA
                          g$rtc$10423$UGjMA
                          (g$make-collector$7418$UGjMA)
                          (g$make-collector$7418$UGjMA))))
                      (case-lambda
                        ((g$e$10448$UGjMA g$r^$10449$UGjMA)
                         ((case-lambda
                            ((g$r^$10450$UGjMA g$e$10451$UGjMA)
                             (begin
                               (g$set-interaction-env-r!$7449$UGjMA
                                 g$env$10398$UGjMA
                                 g$r^$10450$UGjMA)
                               (values g$e$10451$UGjMA (g$rtc$10423$UGjMA)))))
                          g$r^$10449$UGjMA
                          g$e$10448$UGjMA))))))
                 (g$make-stx$7062$UGjMA
                   g$x$10397$UGjMA
                   g$top-mark*$7031$UGjMA
                   (list g$rib$10421$UGjMA)
                   '()))))
             (g$interaction-env-rib$7445$UGjMA g$env$10398$UGjMA)
             (g$interaction-env-r$7446$UGjMA g$env$10398$UGjMA)
             (g$make-collector$7418$UGjMA))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$10398$UGjMA))))))
   (g$eval$7459$UGjMA
     g$eval$10909$UGjMA
     (case-lambda
       ((g$x$10452$UGjMA g$env$10453$UGjMA)
        (begin
          (if (g$environment?$7454$UGjMA g$env$10453$UGjMA)
            (void)
            (error 'eval '"not an environment" g$env$10453$UGjMA))
          (call-with-values
            (case-lambda
              (() (g$expand$7458$UGjMA g$x$10452$UGjMA g$env$10453$UGjMA)))
            (case-lambda
              ((g$x$10456$UGjMA g$invoke-req*$10457$UGjMA)
               ((case-lambda
                  ((g$invoke-req*$10458$UGjMA g$x$10459$UGjMA)
                   (begin
                     (for-each
                       g$invoke-library$6904$UGjMA
                       g$invoke-req*$10458$UGjMA)
                     (eval-core
                       (g$expanded->core$6603$UGjMA g$x$10459$UGjMA)))))
                g$invoke-req*$10457$UGjMA
                g$x$10456$UGjMA))))))))
   (g$library-expander$7460$UGjMA
     g$library-expander$10910$UGjMA
     (case-lambda
       ((g$x$10460$UGjMA g$filename$10461$UGjMA g$verify-name$10462$UGjMA)
        (letrec* ((g$build-visit-code$10463$UGjMA
                    (case-lambda
                      ((g$macro*$10506$UGjMA)
                       (if (null? g$macro*$10506$UGjMA)
                         (g$build-void$7024$UGjMA)
                         (g$build-sequence$7023$UGjMA
                           '#f
                           (map (case-lambda
                                  ((g$x$10507$UGjMA)
                                   ((case-lambda
                                      ((g$loc$10508$UGjMA g$src$10509$UGjMA)
                                       (list
                                         'set!
                                         g$loc$10508$UGjMA
                                         g$src$10509$UGjMA)))
                                    (car g$x$10507$UGjMA)
                                    (g$cddr$4898$UGjMA g$x$10507$UGjMA))))
                                g$macro*$10506$UGjMA))))))
                  (g$visit!$10464$UGjMA
                    (case-lambda
                      ((g$macro*$10502$UGjMA)
                       (for-each
                         (case-lambda
                           ((g$x$10503$UGjMA)
                            ((case-lambda
                               ((g$loc$10504$UGjMA g$proc$10505$UGjMA)
                                (set-symbol-value!
                                  g$loc$10504$UGjMA
                                  g$proc$10505$UGjMA)))
                             (car g$x$10503$UGjMA)
                             (g$cadr$4896$UGjMA g$x$10503$UGjMA))))
                         g$macro*$10502$UGjMA)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$7425$UGjMA
                 g$x$10460$UGjMA
                 g$verify-name$10462$UGjMA)))
            (case-lambda
              ((g$name$10474$UGjMA
                 g$ver$10475$UGjMA
                 g$imp*$10476$UGjMA
                 g$inv*$10477$UGjMA
                 g$vis*$10478$UGjMA
                 g$invoke-code$10479$UGjMA
                 g$macro*$10480$UGjMA
                 g$export-subst$10481$UGjMA
                 g$export-env$10482$UGjMA)
               ((case-lambda
                  ((g$export-env$10483$UGjMA
                     g$export-subst$10484$UGjMA
                     g$macro*$10485$UGjMA
                     g$invoke-code$10486$UGjMA
                     g$vis*$10487$UGjMA
                     g$inv*$10488$UGjMA
                     g$imp*$10489$UGjMA
                     g$ver$10490$UGjMA
                     g$name$10491$UGjMA)
                   ((case-lambda
                      ((g$id$10492$UGjMA
                         g$name$10493$UGjMA
                         g$ver$10494$UGjMA
                         g$imp*$10495$UGjMA
                         g$vis*$10496$UGjMA
                         g$inv*$10497$UGjMA
                         g$visit-proc$10498$UGjMA
                         g$invoke-proc$10499$UGjMA
                         g$visit-code$10500$UGjMA
                         g$invoke-code$10501$UGjMA)
                       (begin
                         (g$install-library$6902$UGjMA
                           g$id$10492$UGjMA
                           g$name$10493$UGjMA
                           g$ver$10494$UGjMA
                           g$imp*$10495$UGjMA
                           g$vis*$10496$UGjMA
                           g$inv*$10497$UGjMA
                           g$export-subst$10484$UGjMA
                           g$export-env$10483$UGjMA
                           g$visit-proc$10498$UGjMA
                           g$invoke-proc$10499$UGjMA
                           g$visit-code$10500$UGjMA
                           g$invoke-code$10501$UGjMA
                           '#t
                           g$filename$10461$UGjMA)
                         (values
                           g$id$10492$UGjMA
                           g$name$10493$UGjMA
                           g$ver$10494$UGjMA
                           g$imp*$10495$UGjMA
                           g$vis*$10496$UGjMA
                           g$inv*$10497$UGjMA
                           g$invoke-code$10501$UGjMA
                           g$visit-code$10500$UGjMA
                           g$export-subst$10484$UGjMA
                           g$export-env$10483$UGjMA))))
                    (gensym)
                    g$name$10491$UGjMA
                    g$ver$10490$UGjMA
                    (map g$library-spec$6908$UGjMA g$imp*$10489$UGjMA)
                    (map g$library-spec$6908$UGjMA g$vis*$10487$UGjMA)
                    (map g$library-spec$6908$UGjMA g$inv*$10488$UGjMA)
                    (case-lambda
                      (() (g$visit!$10464$UGjMA g$macro*$10485$UGjMA)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$6603$UGjMA
                           g$invoke-code$10486$UGjMA))))
                    (g$build-visit-code$10463$UGjMA g$macro*$10485$UGjMA)
                    g$invoke-code$10486$UGjMA)))
                g$export-env$10482$UGjMA
                g$export-subst$10481$UGjMA
                g$macro*$10480$UGjMA
                g$invoke-code$10479$UGjMA
                g$vis*$10478$UGjMA
                g$inv*$10477$UGjMA
                g$imp*$10476$UGjMA
                g$ver$10475$UGjMA
                g$name$10474$UGjMA))))))
       ((g$x$10510$UGjMA g$filename$10511$UGjMA)
        (g$library-expander$7460$UGjMA
          g$x$10510$UGjMA
          g$filename$10511$UGjMA
          (case-lambda ((g$x$10512$UGjMA) (values)))))
       ((g$x$10513$UGjMA)
        (g$library-expander$7460$UGjMA
          g$x$10513$UGjMA
          '#f
          (case-lambda ((g$x$10514$UGjMA) (values)))))))
   (g$boot-library-expand$7461$UGjMA
     g$boot-library-expand$10911$UGjMA
     (case-lambda
       ((g$x$10515$UGjMA)
        (call-with-values
          (case-lambda (() (g$library-expander$7460$UGjMA g$x$10515$UGjMA)))
          (case-lambda
            ((g$id$10526$UGjMA
               g$name$10527$UGjMA
               g$ver$10528$UGjMA
               g$imp*$10529$UGjMA
               g$vis*$10530$UGjMA
               g$inv*$10531$UGjMA
               g$invoke-code$10532$UGjMA
               g$visit-code$10533$UGjMA
               g$export-subst$10534$UGjMA
               g$export-env$10535$UGjMA)
             ((case-lambda
                ((g$export-env$10536$UGjMA
                   g$export-subst$10537$UGjMA
                   g$visit-code$10538$UGjMA
                   g$invoke-code$10539$UGjMA
                   g$inv*$10540$UGjMA
                   g$vis*$10541$UGjMA
                   g$imp*$10542$UGjMA
                   g$ver$10543$UGjMA
                   g$name$10544$UGjMA
                   g$id$10545$UGjMA)
                 (values
                   g$name$10544$UGjMA
                   g$invoke-code$10539$UGjMA
                   g$export-subst$10537$UGjMA
                   g$export-env$10536$UGjMA)))
              g$export-env$10535$UGjMA
              g$export-subst$10534$UGjMA
              g$visit-code$10533$UGjMA
              g$invoke-code$10532$UGjMA
              g$inv*$10531$UGjMA
              g$vis*$10530$UGjMA
              g$imp*$10529$UGjMA
              g$ver$10528$UGjMA
              g$name$10527$UGjMA
              g$id$10526$UGjMA)))))))
   (g$rev-map-append$7462$UGjMA
     g$rev-map-append$10912$UGjMA
     (case-lambda
       ((g$f$10546$UGjMA g$ls$10547$UGjMA g$ac$10548$UGjMA)
        (if (null? g$ls$10547$UGjMA)
          g$ac$10548$UGjMA
          (g$rev-map-append$7462$UGjMA
            g$f$10546$UGjMA
            (cdr g$ls$10547$UGjMA)
            (cons
              (g$f$10546$UGjMA (car g$ls$10547$UGjMA))
              g$ac$10548$UGjMA))))))
   (g$build-exports$7463$UGjMA
     g$build-exports$10913$UGjMA
     (case-lambda
       ((g$lex*+loc*$10549$UGjMA g$init*$10550$UGjMA)
        (g$build-sequence$7023$UGjMA
          '#f
          (cons
            (g$build-void$7024$UGjMA)
            (g$rev-map-append$7462$UGjMA
              (case-lambda
                ((g$x$10551$UGjMA)
                 (list 'set! (cdr g$x$10551$UGjMA) (car g$x$10551$UGjMA))))
              g$lex*+loc*$10549$UGjMA
              g$init*$10550$UGjMA))))))
   (g$make-export-subst$7464$UGjMA
     g$make-export-subst$10914$UGjMA
     (case-lambda
       ((g$int*$10552$UGjMA g$ext*$10553$UGjMA g$rib$10554$UGjMA)
        (map (case-lambda
               ((g$int$10555$UGjMA g$ext$10556$UGjMA)
                ((case-lambda
                   ((g$id$10557$UGjMA)
                    ((case-lambda
                       ((g$label$10558$UGjMA)
                        ((case-lambda
                           (()
                            (begin
                              (if g$label$10558$UGjMA
                                (void)
                                (g$syntax-violation$7473$UGjMA
                                  '#f
                                  '"cannot export unbound identifier"
                                  g$id$10557$UGjMA))
                              (cons g$ext$10556$UGjMA g$label$10558$UGjMA)))))))
                     (g$id->label$7102$UGjMA g$id$10557$UGjMA))))
                 (g$make-stx$7062$UGjMA
                   g$int$10555$UGjMA
                   g$top-mark*$7031$UGjMA
                   (list g$rib$10554$UGjMA)
                   '()))))
             g$int*$10552$UGjMA
             g$ext*$10553$UGjMA))))
   (g$make-export-env/macros$7465$UGjMA
     g$make-export-env/macros$10915$UGjMA
     (case-lambda
       ((g$lex*$10559$UGjMA g$loc*$10560$UGjMA g$r$10561$UGjMA)
        (letrec* ((g$lookup$10562$UGjMA
                    (case-lambda
                      ((g$x$10577$UGjMA)
                       ((letrec ((g$f$10578$UGjMA
                                   (case-lambda
                                     ((g$x$10579$UGjMA
                                        g$lex*$10580$UGjMA
                                        g$loc*$10581$UGjMA)
                                      (if (pair? g$lex*$10580$UGjMA)
                                        (if (eq? g$x$10579$UGjMA
                                                 (car g$lex*$10580$UGjMA))
                                          (car g$loc*$10581$UGjMA)
                                          (g$f$10578$UGjMA
                                            g$x$10579$UGjMA
                                            (cdr g$lex*$10580$UGjMA)
                                            (cdr g$loc*$10581$UGjMA)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$10578$UGjMA)
                        g$x$10577$UGjMA
                        g$lex*$10559$UGjMA
                        g$loc*$10560$UGjMA)))))
          ((letrec ((g$f$10563$UGjMA
                      (case-lambda
                        ((g$r$10564$UGjMA
                           g$env$10565$UGjMA
                           g$global*$10566$UGjMA
                           g$macro*$10567$UGjMA)
                         (if (null? g$r$10564$UGjMA)
                           (values
                             g$env$10565$UGjMA
                             g$global*$10566$UGjMA
                             g$macro*$10567$UGjMA)
                           ((case-lambda
                              ((g$x$10568$UGjMA)
                               ((case-lambda
                                  ((g$label$10569$UGjMA g$b$10570$UGjMA)
                                   ((case-lambda
                                      ((g$t$10571$UGjMA)
                                       (if (eqv? g$t$10571$UGjMA 'lexical)
                                         ((case-lambda
                                            ((g$v$10574$UGjMA)
                                             ((case-lambda
                                                ((g$loc$10575$UGjMA
                                                   g$type$10576$UGjMA)
                                                 (g$f$10563$UGjMA
                                                   (cdr g$r$10564$UGjMA)
                                                   (cons
                                                     (g$cons*$5367$UGjMA
                                                       g$label$10569$UGjMA
                                                       g$type$10576$UGjMA
                                                       g$loc$10575$UGjMA)
                                                     g$env$10565$UGjMA)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$7311$UGjMA
                                                         g$v$10574$UGjMA)
                                                       g$loc$10575$UGjMA)
                                                     g$global*$10566$UGjMA)
                                                   g$macro*$10567$UGjMA)))
                                              (g$lookup$10562$UGjMA
                                                (g$lexical-var$7311$UGjMA
                                                  g$v$10574$UGjMA))
                                              (if (g$lexical-mutable?$7312$UGjMA
                                                    g$v$10574$UGjMA)
                                                'mutable
                                                'global))))
                                          (g$binding-value$7107$UGjMA
                                            g$b$10570$UGjMA))
                                         (if (eqv? g$t$10571$UGjMA 'local-macro)
                                           ((case-lambda
                                              ((g$loc$10573$UGjMA)
                                               (g$f$10563$UGjMA
                                                 (cdr g$r$10564$UGjMA)
                                                 (cons
                                                   (g$cons*$5367$UGjMA
                                                     g$label$10569$UGjMA
                                                     'global-macro
                                                     g$loc$10573$UGjMA)
                                                   g$env$10565$UGjMA)
                                                 g$global*$10566$UGjMA
                                                 (cons
                                                   (cons
                                                     g$loc$10573$UGjMA
                                                     (g$binding-value$7107$UGjMA
                                                       g$b$10570$UGjMA))
                                                   g$macro*$10567$UGjMA))))
                                            (gensym))
                                           (if (eqv?
                                                 g$t$10571$UGjMA
                                                 'local-macro!)
                                             ((case-lambda
                                                ((g$loc$10572$UGjMA)
                                                 (g$f$10563$UGjMA
                                                   (cdr g$r$10564$UGjMA)
                                                   (cons
                                                     (g$cons*$5367$UGjMA
                                                       g$label$10569$UGjMA
                                                       'global-macro!
                                                       g$loc$10572$UGjMA)
                                                     g$env$10565$UGjMA)
                                                   g$global*$10566$UGjMA
                                                   (cons
                                                     (cons
                                                       g$loc$10572$UGjMA
                                                       (g$binding-value$7107$UGjMA
                                                         g$b$10570$UGjMA))
                                                     g$macro*$10567$UGjMA))))
                                              (gensym))
                                             (if (memv
                                                   g$t$10571$UGjMA
                                                   '($rtd $module))
                                               (g$f$10563$UGjMA
                                                 (cdr g$r$10564$UGjMA)
                                                 (cons
                                                   g$x$10568$UGjMA
                                                   g$env$10565$UGjMA)
                                                 g$global*$10566$UGjMA
                                                 g$macro*$10567$UGjMA)
                                               (assertion-violation
                                                 'expander
                                                 '"BUG: do not know how to export"
                                                 (g$binding-type$7106$UGjMA
                                                   g$b$10570$UGjMA)
                                                 (g$binding-value$7107$UGjMA
                                                   g$b$10570$UGjMA))))))))
                                    (g$binding-type$7106$UGjMA
                                      g$b$10570$UGjMA))))
                                (car g$x$10568$UGjMA)
                                (cdr g$x$10568$UGjMA))))
                            (car g$r$10564$UGjMA)))))))
             g$f$10563$UGjMA)
           g$r$10561$UGjMA
           '()
           '()
           '())))))
   (g$generate-temporaries$7466$UGjMA
     g$generate-temporaries$10916$UGjMA
     (case-lambda
       ((g$ls$10582$UGjMA)
        ((case-lambda
           ((g$t$10583$UGjMA)
            ((case-lambda
               ((g$ls/false$10584$UGjMA)
                (if g$ls/false$10584$UGjMA
                  (apply
                    (case-lambda
                      ((g$ls$10585$UGjMA)
                       (map (case-lambda
                              ((g$x$10586$UGjMA)
                               (g$make-stx$7062$UGjMA
                                 ((case-lambda
                                    ((g$x$10587$UGjMA)
                                     (if ((case-lambda
                                            ((g$t$10588$UGjMA)
                                             (if g$t$10588$UGjMA
                                               g$t$10588$UGjMA
                                               (begin
                                                 '#f
                                                 (string? g$x$10587$UGjMA)))))
                                          (symbol? g$x$10587$UGjMA))
                                       (gensym g$x$10587$UGjMA)
                                       (gensym 't))))
                                  (g$syntax->datum$7476$UGjMA g$x$10586$UGjMA))
                                 g$top-mark*$7031$UGjMA
                                 '()
                                 '())))
                            g$ls$10585$UGjMA)))
                    g$ls/false$10584$UGjMA)
                  ((case-lambda
                     ((g$t$10589$UGjMA)
                      ((case-lambda
                         ((g$ls/false$10590$UGjMA)
                          (if g$ls/false$10590$UGjMA
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$10590$UGjMA)
                            (g$syntax-violation$7473$UGjMA
                              '#f
                              '"invalid syntax"
                              g$t$10589$UGjMA))))
                       (g$syntax-dispatch$7367$UGjMA g$t$10589$UGjMA '_))))
                   g$t$10583$UGjMA))))
             (g$syntax-dispatch$7367$UGjMA g$t$10583$UGjMA 'each-any))))
         g$ls$10582$UGjMA))))
   (g$free-identifier=?$7467$UGjMA
     g$free-identifier=?$10917$UGjMA
     (case-lambda
       ((g$x$10591$UGjMA g$y$10592$UGjMA)
        (if (g$id?$7089$UGjMA g$x$10591$UGjMA)
          (if (g$id?$7089$UGjMA g$y$10592$UGjMA)
            (g$free-id=?$7093$UGjMA g$x$10591$UGjMA g$y$10592$UGjMA)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$10592$UGjMA))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$10591$UGjMA)))))
   (g$bound-identifier=?$7468$UGjMA
     g$bound-identifier=?$10918$UGjMA
     (case-lambda
       ((g$x$10593$UGjMA g$y$10594$UGjMA)
        (if (g$id?$7089$UGjMA g$x$10593$UGjMA)
          (if (g$id?$7089$UGjMA g$y$10594$UGjMA)
            (g$bound-id=?$7092$UGjMA g$x$10593$UGjMA g$y$10594$UGjMA)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$10594$UGjMA))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$10593$UGjMA)))))
   (g$extract-position-condition$7469$UGjMA
     g$extract-position-condition$10919$UGjMA
     (case-lambda
       ((g$x$10595$UGjMA)
        (letrec* ((g$11221$10596$UGjMA
                    (make-record-type-descriptor
                      '&source-information
                      &condition-rtd
                      'g$11224$UGjMA
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$11223$10597$UGjMA '#f)
                  (g$11222$10598$UGjMA
                    (make-record-constructor-descriptor
                      g$11221$10596$UGjMA
                      &condition-rcd
                      g$11223$10597$UGjMA))
                  (g$11220$10599$UGjMA (record-predicate g$11221$10596$UGjMA))
                  (g$make-source-condition$10600$UGjMA
                    (record-constructor g$11222$10598$UGjMA))
                  (g$11218$10601$UGjMA (record-accessor g$11221$10596$UGjMA '0))
                  (g$11219$10602$UGjMA (record-accessor g$11221$10596$UGjMA '1))
                  (g$source-condition?$10603$UGjMA
                    (condition-predicate g$11221$10596$UGjMA))
                  (g$source-filename$10604$UGjMA
                    (condition-accessor
                      g$11221$10596$UGjMA
                      g$11218$10601$UGjMA))
                  (g$source-character$10605$UGjMA
                    (condition-accessor
                      g$11221$10596$UGjMA
                      g$11219$10602$UGjMA)))
          (if (g$stx?$7061$UGjMA g$x$10595$UGjMA)
            ((case-lambda
               ((g$x$10606$UGjMA)
                (if (annotation? g$x$10606$UGjMA)
                  ((case-lambda
                     ((g$src$10607$UGjMA)
                      (if (pair? g$src$10607$UGjMA)
                        (g$make-source-condition$10600$UGjMA
                          (car g$src$10607$UGjMA)
                          (cdr g$src$10607$UGjMA))
                        (condition))))
                   (annotation-source g$x$10606$UGjMA))
                  (condition))))
             (g$stx-expr$7063$UGjMA g$x$10595$UGjMA))
            (condition))))))
   (g$syntax-error$7470$UGjMA
     g$syntax-error$10920$UGjMA
     (case-lambda
       ((g$x$10608$UGjMA . g$args$10609$UGjMA)
        (begin
          (if (g$for-all$5365$UGjMA string? g$args$10609$UGjMA)
            (void)
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$10609$UGjMA))
          (raise
            (condition
              (g$make-message-condition$5619$UGjMA
                (if (null? g$args$10609$UGjMA)
                  '"invalid syntax"
                  (apply string-append g$args$10609$UGjMA)))
              (g$make-syntax-violation$5691$UGjMA
                (g$syntax->datum$7476$UGjMA g$x$10608$UGjMA)
                '#f)
              (g$extract-position-condition$7469$UGjMA g$x$10608$UGjMA)
              (g$extract-trace$7471$UGjMA g$x$10608$UGjMA)))))))
   (g$extract-trace$7471$UGjMA
     g$extract-trace$10921$UGjMA
     (case-lambda
       ((g$x$10610$UGjMA)
        (letrec* ((g$11245$10611$UGjMA
                    (make-record-type-descriptor
                      '&trace
                      &condition-rtd
                      'g$11248$UGjMA
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$11247$10612$UGjMA '#f)
                  (g$11246$10613$UGjMA
                    (make-record-constructor-descriptor
                      g$11245$10611$UGjMA
                      &condition-rcd
                      g$11247$10612$UGjMA))
                  (g$11244$10614$UGjMA (record-predicate g$11245$10611$UGjMA))
                  (g$make-trace$10615$UGjMA
                    (record-constructor g$11246$10613$UGjMA))
                  (g$11243$10616$UGjMA (record-accessor g$11245$10611$UGjMA '0))
                  (g$trace?$10617$UGjMA
                    (condition-predicate g$11245$10611$UGjMA))
                  (g$trace-form$10618$UGjMA
                    (condition-accessor
                      g$11245$10611$UGjMA
                      g$11243$10616$UGjMA)))
          ((letrec ((g$f$10619$UGjMA
                      (case-lambda
                        ((g$x$10620$UGjMA)
                         (if (g$stx?$7061$UGjMA g$x$10620$UGjMA)
                           (apply
                             condition
                             (g$make-trace$10615$UGjMA g$x$10620$UGjMA)
                             (map g$f$10619$UGjMA
                                  (g$stx-ae*$7066$UGjMA g$x$10620$UGjMA)))
                           (if (annotation? g$x$10620$UGjMA)
                             (g$make-trace$10615$UGjMA
                               (g$make-stx$7062$UGjMA
                                 g$x$10620$UGjMA
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$10619$UGjMA)
           g$x$10610$UGjMA)))))
   (g$syntax-violation*$7472$UGjMA
     g$syntax-violation*$10922$UGjMA
     (case-lambda
       ((g$who$10621$UGjMA
          g$msg$10622$UGjMA
          g$form$10623$UGjMA
          g$condition-object$10624$UGjMA)
        (begin
          (if (string? g$msg$10622$UGjMA)
            (void)
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$10622$UGjMA))
          ((case-lambda
             ((g$who$10625$UGjMA)
              (raise
                (condition
                  (if g$who$10625$UGjMA
                    (g$make-who-condition$5665$UGjMA g$who$10625$UGjMA)
                    (condition))
                  (g$make-message-condition$5619$UGjMA g$msg$10622$UGjMA)
                  g$condition-object$10624$UGjMA
                  (g$extract-position-condition$7469$UGjMA g$form$10623$UGjMA)
                  (g$extract-trace$7471$UGjMA g$form$10623$UGjMA)))))
           (if ((case-lambda
                  ((g$t$10626$UGjMA)
                   (if g$t$10626$UGjMA
                     g$t$10626$UGjMA
                     (begin '#f (symbol? g$who$10621$UGjMA)))))
                (string? g$who$10621$UGjMA))
             g$who$10621$UGjMA
             (if (not g$who$10621$UGjMA)
               ((case-lambda
                  ((g$t$10627$UGjMA)
                   ((case-lambda
                      ((g$ls/false$10628$UGjMA)
                       (if (if g$ls/false$10628$UGjMA
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$10629$UGjMA)
                                    (g$id?$7089$UGjMA g$id$10629$UGjMA)))
                                 g$ls/false$10628$UGjMA))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$10630$UGjMA)
                              (g$syntax->datum$7476$UGjMA g$id$10630$UGjMA)))
                           g$ls/false$10628$UGjMA)
                         ((case-lambda
                            ((g$t$10631$UGjMA)
                             ((case-lambda
                                ((g$ls/false$10632$UGjMA)
                                 (if (if g$ls/false$10632$UGjMA
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$10633$UGjMA
                                                g$rest$10634$UGjMA)
                                              (g$id?$7089$UGjMA
                                                g$id$10633$UGjMA)))
                                           g$ls/false$10632$UGjMA))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$10635$UGjMA g$rest$10636$UGjMA)
                                        (g$syntax->datum$7476$UGjMA
                                          g$id$10635$UGjMA)))
                                     g$ls/false$10632$UGjMA)
                                   ((case-lambda
                                      ((g$t$10637$UGjMA)
                                       ((case-lambda
                                          ((g$ls/false$10638$UGjMA)
                                           (if g$ls/false$10638$UGjMA
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$10638$UGjMA)
                                             (g$syntax-violation$7473$UGjMA
                                               '#f
                                               '"invalid syntax"
                                               g$t$10637$UGjMA))))
                                        (g$syntax-dispatch$7367$UGjMA
                                          g$t$10637$UGjMA
                                          '_))))
                                    g$t$10631$UGjMA))))
                              (g$syntax-dispatch$7367$UGjMA
                                g$t$10631$UGjMA
                                '(any . any)))))
                          g$t$10627$UGjMA))))
                    (g$syntax-dispatch$7367$UGjMA g$t$10627$UGjMA 'any))))
                g$form$10623$UGjMA)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$10621$UGjMA))))))))
   (g$syntax-violation$7473$UGjMA
     g$syntax-violation$10923$UGjMA
     (case-lambda
       ((g$who$10639$UGjMA g$msg$10640$UGjMA g$form$10641$UGjMA)
        (g$syntax-violation$7473$UGjMA
          g$who$10639$UGjMA
          g$msg$10640$UGjMA
          g$form$10641$UGjMA
          '#f))
       ((g$who$10642$UGjMA
          g$msg$10643$UGjMA
          g$form$10644$UGjMA
          g$subform$10645$UGjMA)
        (g$syntax-violation*$7472$UGjMA
          g$who$10642$UGjMA
          g$msg$10643$UGjMA
          g$form$10644$UGjMA
          (g$make-syntax-violation$5691$UGjMA
            (g$syntax->datum$7476$UGjMA g$form$10644$UGjMA)
            (g$syntax->datum$7476$UGjMA g$subform$10645$UGjMA))))))
   (g$identifier?$7474$UGjMA
     g$identifier?$10924$UGjMA
     (case-lambda ((g$x$10646$UGjMA) (g$id?$7089$UGjMA g$x$10646$UGjMA))))
   (g$datum->syntax$7475$UGjMA
     g$datum->syntax$10925$UGjMA
     (case-lambda
       ((g$id$10647$UGjMA g$datum$10648$UGjMA)
        (if (g$id?$7089$UGjMA g$id$10647$UGjMA)
          (g$datum->stx$7072$UGjMA g$id$10647$UGjMA g$datum$10648$UGjMA)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$10647$UGjMA)))))
   (g$syntax->datum$7476$UGjMA
     g$syntax->datum$10926$UGjMA
     (case-lambda
       ((g$x$10649$UGjMA) (g$stx->datum$7100$UGjMA g$x$10649$UGjMA))))
   (g$compile-r6rs-top-level$7477$UGjMA
     g$compile-r6rs-top-level$10927$UGjMA
     (case-lambda
       ((g$x*$10650$UGjMA)
        (call-with-values
          (case-lambda (() (g$top-level-expander$7427$UGjMA g$x*$10650$UGjMA)))
          (case-lambda
            ((g$lib*$10653$UGjMA g$invoke-code$10654$UGjMA)
             ((case-lambda
                ((g$invoke-code$10655$UGjMA g$lib*$10656$UGjMA)
                 (case-lambda
                   (()
                    (begin
                      (for-each g$invoke-library$6904$UGjMA g$lib*$10656$UGjMA)
                      (eval-core
                        (g$expanded->core$6603$UGjMA
                          g$invoke-code$10655$UGjMA)))))))
              g$invoke-code$10654$UGjMA
              g$lib*$10653$UGjMA)))))))
   (g$pre-compile-r6rs-top-level$7478$UGjMA
     g$pre-compile-r6rs-top-level$10928$UGjMA
     (case-lambda
       ((g$x*$10657$UGjMA)
        (call-with-values
          (case-lambda (() (g$top-level-expander$7427$UGjMA g$x*$10657$UGjMA)))
          (case-lambda
            ((g$lib*$10660$UGjMA g$invoke-code$10661$UGjMA)
             ((case-lambda
                ((g$invoke-code$10662$UGjMA g$lib*$10663$UGjMA)
                 (begin
                   (for-each g$invoke-library$6904$UGjMA g$lib*$10663$UGjMA)
                   (compile-core
                     (g$expanded->core$6603$UGjMA g$invoke-code$10662$UGjMA)))))
              g$invoke-code$10661$UGjMA
              g$lib*$10660$UGjMA)))))))
   (g$interaction-environment$7479$UGjMA
     g$interaction-environment$10929$UGjMA
     ((case-lambda
        ((g$the-env$10664$UGjMA)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$10665$UGjMA)
                (if g$t$10665$UGjMA
                  g$t$10665$UGjMA
                  (begin
                    '#f
                    ((case-lambda
                       ((g$lib$10666$UGjMA g$rib$10667$UGjMA)
                        (begin
                          ((case-lambda
                             ((g$subst$10668$UGjMA)
                              (begin
                                (g$set-rib-sym*!$7048$UGjMA
                                  g$rib$10667$UGjMA
                                  (map car g$subst$10668$UGjMA))
                                (g$set-rib-mark**!$7049$UGjMA
                                  g$rib$10667$UGjMA
                                  (map (case-lambda
                                         ((g$x$10669$UGjMA)
                                          g$top-mark*$7031$UGjMA))
                                       g$subst$10668$UGjMA))
                                (g$set-rib-label*!$7050$UGjMA
                                  g$rib$10667$UGjMA
                                  (map cdr g$subst$10668$UGjMA)))))
                           (g$library-subst$6861$UGjMA g$lib$10666$UGjMA))
                          ((case-lambda
                             ((g$env$10670$UGjMA)
                              (begin
                                (set! g$the-env$10664$UGjMA g$env$10670$UGjMA)
                                g$env$10670$UGjMA)))
                           (g$make-interaction-env$7444$UGjMA
                             g$rib$10667$UGjMA
                             '()
                             '())))))
                     (g$find-library-by-name$6897$UGjMA '(ironscheme))
                     (g$make-empty-rib$7052$UGjMA))))))
             g$the-env$10664$UGjMA)))))
      '#f))
   (g$top-level-context$7480$UGjMA
     g$top-level-context$10930$UGjMA
     (g$make-parameter$6357$UGjMA '#f)))
  (g$current-library-expander$6894$UGjMA g$library-expander$7460$UGjMA))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$6600$UGjMA
      (case-lambda
        ((g$x$10981$UGjMA)
         ((case-lambda
            ((g$t$10982$UGjMA) (if g$t$10982$UGjMA (cdr g$t$10982$UGjMA) '#f)))
          (assq
            g$x$10981$UGjMA
            '((ellipsis-map . g$ellipsis-map$10822$UGjMA)
              (ironscheme-build . g$ironscheme-build$10975$UGjMA)
              (syntax-error . g$syntax-error$10920$UGjMA)
              (syntax-dispatch . g$syntax-dispatch$10817$UGjMA)
              (compile-system-libraries
                .
                g$compile-system-libraries$10977$UGjMA)
              (compile->closure . g$compile->closure$10979$UGjMA)
              (compile . g$compile$10978$UGjMA)
              (load . g$load$10974$UGjMA)
              (interaction-environment . g$interaction-environment$10929$UGjMA)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$10755$UGjMA)
              (variable-transformer? . g$variable-transformer?$10754$UGjMA)
              (make-variable-transformer
                .
                g$make-variable-transformer$10753$UGjMA)
              (identifier? . g$identifier?$10924$UGjMA)
              (generate-temporaries . g$generate-temporaries$10916$UGjMA)
              (free-identifier=? . g$free-identifier=?$10917$UGjMA)
              (syntax->datum . g$syntax->datum$10926$UGjMA)
              (datum->syntax . g$datum->syntax$10925$UGjMA)
              (bound-identifier=? . g$bound-identifier=?$10918$UGjMA)
              (delete-file . g$delete-file$5237$UGjMA)
              (file-exists? . g$file-exists?$5236$UGjMA)
              (list-sort . g$list-sort$5753$UGjMA)
              (make-eqv-hashtable . g$make-eqv-hashtable$5159$UGjMA)
              (make-eq-hashtable . g$make-eq-hashtable$5158$UGjMA)
              (hashtable-update! . g$hashtable-update!$5165$UGjMA)
              (hashtable-size . g$hashtable-size$5160$UGjMA)
              (hashtable-set! . g$hashtable-set!$5162$UGjMA)
              (hashtable-ref . g$hashtable-ref$5161$UGjMA)
              (hashtable-delete! . g$hashtable-delete!$5163$UGjMA)
              (hashtable-contains? . g$hashtable-contains?$5164$UGjMA)
              (hashtable-clear! . g$hashtable-clear!$5166$UGjMA)
              (open-string-output-port . g$open-string-output-port$6095$UGjMA)
              (make-i/o-write-error . g$make-i/o-write-error$6024$UGjMA)
              (make-i/o-read-error . g$make-i/o-read-error$6018$UGjMA)
              (make-i/o-port-error . g$make-i/o-port-error$6070$UGjMA)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$6030$UGjMA)
              (make-i/o-filename-error . g$make-i/o-filename-error$6038$UGjMA)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$6046$UGjMA)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$6052$UGjMA)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$6064$UGjMA)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$6058$UGjMA)
              (make-i/o-error . g$make-i/o-error$6012$UGjMA)
              (make-i/o-encoding-error . g$make-i/o-encoding-error$6084$UGjMA)
              (make-i/o-decoding-error . g$make-i/o-decoding-error$6078$UGjMA)
              (i/o-write-error? . g$i/o-write-error?$6025$UGjMA)
              (i/o-read-error? . g$i/o-read-error?$6019$UGjMA)
              (i/o-port-error? . g$i/o-port-error?$6072$UGjMA)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$6032$UGjMA)
              (i/o-filename-error? . g$i/o-filename-error?$6040$UGjMA)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$6047$UGjMA)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$6053$UGjMA)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$6065$UGjMA)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$6059$UGjMA)
              (i/o-error? . g$i/o-error?$6013$UGjMA)
              (i/o-error-port . g$i/o-error-port$6073$UGjMA)
              (i/o-error-filename . g$i/o-error-filename$6041$UGjMA)
              (i/o-encoding-error? . g$i/o-encoding-error?$6086$UGjMA)
              (i/o-encoding-error-char . g$i/o-encoding-error-char$6087$UGjMA)
              (i/o-decoding-error? . g$i/o-decoding-error?$6079$UGjMA)
              (scheme-report-environment
                .
                g$scheme-report-environment$10907$UGjMA)
              (quotient . g$quotient$5722$UGjMA)
              (null-environment . g$null-environment$10906$UGjMA)
              (remainder . g$remainder$5723$UGjMA)
              (modulo . g$modulo$5724$UGjMA)
              (command-line . g$command-line$10971$UGjMA)
              (remove . g$remove$5370$UGjMA)
              (remv . g$remv$5371$UGjMA)
              (remp . g$remp$5356$UGjMA)
              (remq . g$remq$5372$UGjMA)
              (partition . g$partition$5355$UGjMA)
              (memp . g$memp$5362$UGjMA)
              (member . g$member$5361$UGjMA)
              (exists . g$exists$5366$UGjMA)
              (for-all . g$for-all$5365$UGjMA)
              (fold-right . g$fold-right$5369$UGjMA)
              (fold-left . g$fold-left$5368$UGjMA)
              (find . g$find$5354$UGjMA)
              (filter . g$filter$5357$UGjMA)
              (cons* . g$cons*$5367$UGjMA)
              (assv . g$assv$5358$UGjMA)
              (assp . g$assp$5360$UGjMA)
              (assoc . g$assoc$5359$UGjMA)
              (eval . g$eval$10909$UGjMA)
              (environment . g$environment$10905$UGjMA)
              (make-enumeration . g$make-enumeration$6235$UGjMA)
              (enum-set=? . g$enum-set=?$6242$UGjMA)
              (enum-set-universe . g$enum-set-universe$6236$UGjMA)
              (enum-set-union . g$enum-set-union$6243$UGjMA)
              (enum-set-subset? . g$enum-set-subset?$6241$UGjMA)
              (enum-set-projection . g$enum-set-projection$6247$UGjMA)
              (enum-set-member? . g$enum-set-member?$6240$UGjMA)
              (enum-set-intersection . g$enum-set-intersection$6244$UGjMA)
              (enum-set-indexer . g$enum-set-indexer$6237$UGjMA)
              (enum-set-difference . g$enum-set-difference$6245$UGjMA)
              (enum-set-constructor . g$enum-set-constructor$6238$UGjMA)
              (enum-set-complement . g$enum-set-complement$6246$UGjMA)
              (enum-set->list . g$enum-set->list$6239$UGjMA)
              (who-condition? . g$who-condition?$5667$UGjMA)
              (warning? . g$warning?$5628$UGjMA)
              (violation? . g$violation?$5646$UGjMA)
              (undefined-violation? . g$undefined-violation?$5702$UGjMA)
              (syntax-violation? . g$syntax-violation?$5694$UGjMA)
              (syntax-violation-subform . g$syntax-violation-subform$5696$UGjMA)
              (syntax-violation-form . g$syntax-violation-form$5695$UGjMA)
              (syntax-violation . g$syntax-violation$10923$UGjMA)
              (serious-condition? . g$serious-condition?$5634$UGjMA)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$5674$UGjMA)
              (message-condition? . g$message-condition?$5621$UGjMA)
              (make-who-condition . g$make-who-condition$5665$UGjMA)
              (make-warning . g$make-warning$5627$UGjMA)
              (make-violation . g$make-violation$5645$UGjMA)
              (make-undefined-violation . g$make-undefined-violation$5701$UGjMA)
              (make-syntax-violation . g$make-syntax-violation$5691$UGjMA)
              (make-serious-condition . g$make-serious-condition$5633$UGjMA)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$5673$UGjMA)
              (make-message-condition . g$make-message-condition$5619$UGjMA)
              (make-lexical-violation . g$make-lexical-violation$5685$UGjMA)
              (make-irritants-condition . g$make-irritants-condition$5657$UGjMA)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$5679$UGjMA)
              (make-error . g$make-error$5639$UGjMA)
              (make-assertion-violation . g$make-assertion-violation$5651$UGjMA)
              (lexical-violation? . g$lexical-violation?$5686$UGjMA)
              (irritants-condition? . g$irritants-condition?$5659$UGjMA)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$5680$UGjMA)
              (error? . g$error?$5640$UGjMA)
              (condition-who . g$condition-who$5668$UGjMA)
              (condition-message . g$condition-message$5622$UGjMA)
              (condition-irritants . g$condition-irritants$5660$UGjMA)
              (assertion-violation? . g$assertion-violation?$5652$UGjMA)
              (native-endianness . g$native-endianness$5484$UGjMA)
              (bytevector-u64-set! . g$bytevector-u64-set!$5505$UGjMA)
              (bytevector-u64-ref . g$bytevector-u64-ref$5501$UGjMA)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$5507$UGjMA)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$5503$UGjMA)
              (bytevector-u32-set! . g$bytevector-u32-set!$5497$UGjMA)
              (bytevector-u32-ref . g$bytevector-u32-ref$5493$UGjMA)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$5499$UGjMA)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$5495$UGjMA)
              (bytevector-u16-set! . g$bytevector-u16-set!$5489$UGjMA)
              (bytevector-u16-ref . g$bytevector-u16-ref$5485$UGjMA)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$5491$UGjMA)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$5487$UGjMA)
              (bytevector-s64-set! . g$bytevector-s64-set!$5506$UGjMA)
              (bytevector-s64-ref . g$bytevector-s64-ref$5502$UGjMA)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$5508$UGjMA)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$5504$UGjMA)
              (bytevector-s32-set! . g$bytevector-s32-set!$5498$UGjMA)
              (bytevector-s32-ref . g$bytevector-s32-ref$5494$UGjMA)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$5500$UGjMA)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$5496$UGjMA)
              (bytevector-s16-set! . g$bytevector-s16-set!$5490$UGjMA)
              (bytevector-s16-ref . g$bytevector-s16-ref$5486$UGjMA)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$5492$UGjMA)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$5488$UGjMA)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$5511$UGjMA)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$5509$UGjMA)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$5512$UGjMA)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$5510$UGjMA)
              (no-nans-violation? . g$no-nans-violation?$5927$UGjMA)
              (no-infinities-violation? . g$no-infinities-violation?$5921$UGjMA)
              (make-no-nans-violation . g$make-no-nans-violation$5926$UGjMA)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$5920$UGjMA)
              (fxrotate-bit-field . g$fxrotate-bit-field$5903$UGjMA)
              (fxif . g$fxif$5897$UGjMA)
              (fxcopy-bit-field . g$fxcopy-bit-field$5900$UGjMA)
              (fxcopy-bit . g$fxcopy-bit$5898$UGjMA)
              (fxbit-field . g$fxbit-field$5899$UGjMA)
              (fxarithmetic-shift-right . g$fxarithmetic-shift-right$5902$UGjMA)
              (fxarithmetic-shift-left . g$fxarithmetic-shift-left$5901$UGjMA)
              (bitwise-rotate-bit-field . g$bitwise-rotate-bit-field$5848$UGjMA)
              (bitwise-reverse-bit-field
                .
                g$bitwise-reverse-bit-field$5849$UGjMA)
              (bitwise-if . g$bitwise-if$5842$UGjMA)
              (bitwise-copy-bit-field . g$bitwise-copy-bit-field$5845$UGjMA)
              (bitwise-copy-bit . g$bitwise-copy-bit$5843$UGjMA)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$5847$UGjMA)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$5846$UGjMA)
              (rationalize . g$rationalize$4923$UGjMA)
              (cddddr . g$cddddr$4922$UGjMA)
              (cdddar . g$cdddar$4921$UGjMA)
              (cddadr . g$cddadr$4920$UGjMA)
              (cddaar . g$cddaar$4919$UGjMA)
              (cdaddr . g$cdaddr$4918$UGjMA)
              (cdadar . g$cdadar$4917$UGjMA)
              (cdaadr . g$cdaadr$4916$UGjMA)
              (cdaaar . g$cdaaar$4915$UGjMA)
              (cadddr . g$cadddr$4914$UGjMA)
              (caddar . g$caddar$4913$UGjMA)
              (cadadr . g$cadadr$4912$UGjMA)
              (cadaar . g$cadaar$4911$UGjMA)
              (caaddr . g$caaddr$4910$UGjMA)
              (caadar . g$caadar$4909$UGjMA)
              (caaadr . g$caaadr$4908$UGjMA)
              (caaaar . g$caaaar$4907$UGjMA)
              (cdddr . g$cdddr$4906$UGjMA)
              (cddar . g$cddar$4905$UGjMA)
              (cdadr . g$cdadr$4904$UGjMA)
              (cdaar . g$cdaar$4903$UGjMA)
              (caddr . g$caddr$4902$UGjMA)
              (cadar . g$cadar$4901$UGjMA)
              (caadr . g$caadr$4900$UGjMA)
              (caaar . g$caaar$4899$UGjMA)
              (cddr . g$cddr$4898$UGjMA)
              (cdar . g$cdar$4897$UGjMA)
              (cadr . g$cadr$4896$UGjMA)
              (caar . g$caar$4895$UGjMA)
              (load/args . g$load/args$10973$UGjMA)
              (printf . g$printf$6271$UGjMA)
              (fprintf . g$fprintf$6272$UGjMA)
              (format . g$format$6273$UGjMA)
              (trace-printer . g$trace-printer$10970$UGjMA)
              (make-traced-macro . g$make-traced-macro$6277$UGjMA)
              (make-parameter . g$make-parameter$6357$UGjMA)
              (environment-symbols . g$environment-symbols$10903$UGjMA)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$10902$UGjMA)
              (library-path . g$library-path$6886$UGjMA)
              (library-extensions . g$library-extensions$6887$UGjMA)
              (installed-libraries . g$installed-libraries$6907$UGjMA)
              (expand . g$expand$10908$UGjMA)))))))
    (g$install-library$6902$UGjMA
      'g$11991$UGjMA
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$11928$UGjMA)
        (cosh . g$11927$UGjMA)
        (sinh . g$11926$UGjMA)
        (make-guid . g$11925$UGjMA)
        (unspecified? . g$11924$UGjMA)
        (make-trace . g$11923$UGjMA)
        (make-list . g$11922$UGjMA)
        (last-pair . g$11921$UGjMA)
        (load-r5rs . g$11920$UGjMA)
        (license . g$11919$UGjMA)
        (stacktrace . g$11918$UGjMA)
        (ironscheme-build . g$11317$UGjMA)
        (set-symbol-value! . g$11904$UGjMA)
        (symbol-value . g$11903$UGjMA)
        (ungensym . g$11902$UGjMA)
        (gensym . g$11901$UGjMA)
        (void . g$11900$UGjMA)
        (compile-system-libraries . g$11319$UGjMA)
        (compile->closure . g$11321$UGjMA)
        (compile . g$11320$UGjMA)
        (load . g$11316$UGjMA)
        (interaction-environment . g$8385$UGjMA)
        (string-upcase . g$11896$UGjMA)
        (string-titlecase . g$11895$UGjMA)
        (string-normalize-nfkd . g$11894$UGjMA)
        (string-normalize-nfkc . g$11893$UGjMA)
        (string-normalize-nfd . g$11892$UGjMA)
        (string-normalize-nfc . g$11891$UGjMA)
        (string-foldcase . g$11890$UGjMA)
        (string-downcase . g$11889$UGjMA)
        (string-ci>? . g$11888$UGjMA)
        (string-ci>=? . g$11887$UGjMA)
        (string-ci=? . g$11886$UGjMA)
        (string-ci<? . g$11885$UGjMA)
        (string-ci<=? . g$11884$UGjMA)
        (char-whitespace? . g$11883$UGjMA)
        (char-upper-case? . g$11882$UGjMA)
        (char-title-case? . g$11881$UGjMA)
        (char-numeric? . g$11880$UGjMA)
        (char-lower-case? . g$11879$UGjMA)
        (char-general-category . g$11878$UGjMA)
        (char-upcase . g$11877$UGjMA)
        (char-titlecase . g$11876$UGjMA)
        (char-foldcase . g$11875$UGjMA)
        (char-downcase . g$11874$UGjMA)
        (char-ci>? . g$11873$UGjMA)
        (char-ci>=? . g$11872$UGjMA)
        (char-ci=? . g$11871$UGjMA)
        (char-ci<? . g$11870$UGjMA)
        (char-ci<=? . g$11869$UGjMA)
        (char-alphabetic? . g$11868$UGjMA)
        (variable-transformer-procedure . g$7989$UGjMA)
        (variable-transformer? . g$7988$UGjMA)
        (make-variable-transformer . g$7987$UGjMA)
        (identifier? . g$8380$UGjMA)
        (generate-temporaries . g$8372$UGjMA)
        (free-identifier=? . g$8373$UGjMA)
        (syntax->datum . g$8382$UGjMA)
        (datum->syntax . g$8381$UGjMA)
        (bound-identifier=? . g$8374$UGjMA)
        (record-type-descriptor? . g$11867$UGjMA)
        (record-predicate . g$11866$UGjMA)
        (record-mutator . g$11865$UGjMA)
        (record-constructor . g$11864$UGjMA)
        (record-accessor . g$11863$UGjMA)
        (make-record-type-descriptor . g$11862$UGjMA)
        (make-record-constructor-descriptor . g$11861$UGjMA)
        (record? . g$11860$UGjMA)
        (record-type-uid . g$11859$UGjMA)
        (record-type-sealed? . g$11858$UGjMA)
        (record-type-parent . g$11857$UGjMA)
        (record-type-opaque? . g$11856$UGjMA)
        (record-type-name . g$11855$UGjMA)
        (record-type-generative? . g$11854$UGjMA)
        (record-type-field-names . g$11853$UGjMA)
        (record-rtd . g$11852$UGjMA)
        (record-field-mutable? . g$11851$UGjMA)
        (delete-file . g$6018$UGjMA)
        (file-exists? . g$6017$UGjMA)
        (vector-sort! . g$11850$UGjMA)
        (vector-sort . g$11849$UGjMA)
        (list-sort . g$6524$UGjMA)
        (symbol-hash . g$11848$UGjMA)
        (string-ci-hash . g$11847$UGjMA)
        (string-hash . g$11846$UGjMA)
        (equal-hash . g$11845$UGjMA)
        (hashtable-equivalence-function . g$11844$UGjMA)
        (make-hashtable . g$11843$UGjMA)
        (hashtable-hash-function . g$11842$UGjMA)
        (make-eqv-hashtable . g$5985$UGjMA)
        (make-eq-hashtable . g$5984$UGjMA)
        (hashtable? . g$11841$UGjMA)
        (hashtable-update! . g$5991$UGjMA)
        (hashtable-size . g$5986$UGjMA)
        (hashtable-set! . g$5988$UGjMA)
        (hashtable-ref . g$5987$UGjMA)
        (hashtable-mutable? . g$11840$UGjMA)
        (hashtable-keys . g$11839$UGjMA)
        (hashtable-entries . g$11838$UGjMA)
        (hashtable-delete! . g$5989$UGjMA)
        (hashtable-copy . g$11837$UGjMA)
        (hashtable-contains? . g$5990$UGjMA)
        (hashtable-clear! . g$5992$UGjMA)
        (call-with-output-file . g$11836$UGjMA)
        (call-with-input-file . g$11835$UGjMA)
        (write-char . g$11834$UGjMA)
        (write . g$11833$UGjMA)
        (with-output-to-file . g$11832$UGjMA)
        (with-input-from-file . g$11831$UGjMA)
        (read-char . g$11830$UGjMA)
        (read . g$11829$UGjMA)
        (peek-char . g$11828$UGjMA)
        (open-output-file . g$11827$UGjMA)
        (open-input-file . g$11826$UGjMA)
        (newline . g$11825$UGjMA)
        (display . g$11824$UGjMA)
        (close-output-port . g$11823$UGjMA)
        (close-input-port . g$11822$UGjMA)
        (eof-object? . g$11821$UGjMA)
        (eof-object . g$11820$UGjMA)
        (current-error-port . g$11819$UGjMA)
        (current-output-port . g$11818$UGjMA)
        (current-input-port . g$11817$UGjMA)
        (output-port? . g$11816$UGjMA)
        (input-port? . g$11815$UGjMA)
        (utf-8-codec . g$11814$UGjMA)
        (utf-16-codec . g$11813$UGjMA)
        (transcoder-error-handling-mode . g$11812$UGjMA)
        (transcoder-eol-style . g$11811$UGjMA)
        (transcoder-codec . g$11810$UGjMA)
        (transcoded-port . g$11809$UGjMA)
        (textual-port? . g$11808$UGjMA)
        (string->bytevector . g$11807$UGjMA)
        (standard-output-port . g$11806$UGjMA)
        (standard-input-port . g$11805$UGjMA)
        (standard-error-port . g$11804$UGjMA)
        (set-port-position! . g$11803$UGjMA)
        (put-u8 . g$11802$UGjMA)
        (put-string . g$11801$UGjMA)
        (put-datum . g$11800$UGjMA)
        (put-char . g$11799$UGjMA)
        (put-bytevector . g$11798$UGjMA)
        (port? . g$11797$UGjMA)
        (port-transcoder . g$11796$UGjMA)
        (port-position . g$11795$UGjMA)
        (port-has-set-port-position!? . g$11794$UGjMA)
        (port-has-port-position? . g$11793$UGjMA)
        (port-eof? . g$11792$UGjMA)
        (output-port-buffer-mode . g$11791$UGjMA)
        (open-string-output-port . g$6915$UGjMA)
        (open-string-input-port . g$11790$UGjMA)
        (open-file-output-port . g$11789$UGjMA)
        (open-file-input/output-port . g$11788$UGjMA)
        (open-file-input-port . g$11787$UGjMA)
        (open-bytevector-output-port . g$11786$UGjMA)
        (open-bytevector-input-port . g$11785$UGjMA)
        (native-transcoder . g$11784$UGjMA)
        (native-eol-style . g$11783$UGjMA)
        (make-transcoder . g$11782$UGjMA)
        (latin-1-codec . g$11781$UGjMA)
        (make-i/o-write-error . g$6772$UGjMA)
        (make-i/o-read-error . g$6758$UGjMA)
        (make-i/o-port-error . g$6877$UGjMA)
        (make-i/o-invalid-position-error . g$6787$UGjMA)
        (make-i/o-filename-error . g$6804$UGjMA)
        (make-i/o-file-protection-error . g$6820$UGjMA)
        (make-i/o-file-is-read-only-error . g$6834$UGjMA)
        (make-i/o-file-does-not-exist-error . g$6862$UGjMA)
        (make-i/o-file-already-exists-error . g$6848$UGjMA)
        (make-i/o-error . g$6744$UGjMA)
        (make-i/o-encoding-error . g$6908$UGjMA)
        (make-i/o-decoding-error . g$6893$UGjMA)
        (make-custom-textual-output-port . g$11780$UGjMA)
        (make-custom-textual-input/output-port . g$11779$UGjMA)
        (make-custom-textual-input-port . g$11778$UGjMA)
        (make-custom-binary-output-port . g$11777$UGjMA)
        (make-custom-binary-input/output-port . g$11776$UGjMA)
        (make-custom-binary-input-port . g$11775$UGjMA)
        (make-bytevector . g$11774$UGjMA)
        (lookahead-u8 . g$11773$UGjMA)
        (lookahead-char . g$11772$UGjMA)
        (i/o-write-error? . g$6773$UGjMA)
        (i/o-read-error? . g$6759$UGjMA)
        (i/o-port-error? . g$6879$UGjMA)
        (i/o-invalid-position-error? . g$6789$UGjMA)
        (i/o-filename-error? . g$6806$UGjMA)
        (i/o-file-protection-error? . g$6821$UGjMA)
        (i/o-file-is-read-only-error? . g$6835$UGjMA)
        (i/o-file-does-not-exist-error? . g$6863$UGjMA)
        (i/o-file-already-exists-error? . g$6849$UGjMA)
        (i/o-error? . g$6745$UGjMA)
        (i/o-error-port . g$6880$UGjMA)
        (i/o-error-filename . g$6807$UGjMA)
        (i/o-encoding-error? . g$6910$UGjMA)
        (i/o-encoding-error-char . g$6911$UGjMA)
        (i/o-decoding-error? . g$6894$UGjMA)
        (get-u8 . g$11771$UGjMA)
        (get-string-n! . g$11770$UGjMA)
        (get-string-n . g$11769$UGjMA)
        (get-string-all . g$11768$UGjMA)
        (get-line . g$11767$UGjMA)
        (get-datum . g$11766$UGjMA)
        (get-char . g$11765$UGjMA)
        (get-bytevector-some . g$11764$UGjMA)
        (get-bytevector-n! . g$11763$UGjMA)
        (get-bytevector-n . g$11762$UGjMA)
        (get-bytevector-all . g$11761$UGjMA)
        (flush-output-port . g$11760$UGjMA)
        (close-port . g$11759$UGjMA)
        (call-with-string-output-port . g$11758$UGjMA)
        (call-with-port . g$11757$UGjMA)
        (call-with-bytevector-output-port . g$11756$UGjMA)
        (bytevector->string . g$11755$UGjMA)
        (buffer-mode? . g$11754$UGjMA)
        (binary-port? . g$11753$UGjMA)
        (scheme-report-environment . g$8363$UGjMA)
        (quotient . g$6511$UGjMA)
        (null-environment . g$8362$UGjMA)
        (remainder . g$6512$UGjMA)
        (modulo . g$6513$UGjMA)
        (inexact->exact . g$11752$UGjMA)
        (force . g$11751$UGjMA)
        (exact->inexact . g$11750$UGjMA)
        (exit . g$11749$UGjMA)
        (command-line . g$11313$UGjMA)
        (string-fill! . g$11748$UGjMA)
        (string-set! . g$11747$UGjMA)
        (set-cdr! . g$11746$UGjMA)
        (set-car! . g$11745$UGjMA)
        (remove . g$6098$UGjMA)
        (remv . g$6099$UGjMA)
        (remp . g$6084$UGjMA)
        (remq . g$6100$UGjMA)
        (partition . g$6083$UGjMA)
        (memv . g$11744$UGjMA)
        (memq . g$11743$UGjMA)
        (memp . g$6090$UGjMA)
        (member . g$6089$UGjMA)
        (exists . g$6094$UGjMA)
        (for-all . g$6093$UGjMA)
        (fold-right . g$6097$UGjMA)
        (fold-left . g$6096$UGjMA)
        (find . g$6082$UGjMA)
        (filter . g$6085$UGjMA)
        (cons* . g$6095$UGjMA)
        (assv . g$6086$UGjMA)
        (assq . g$11742$UGjMA)
        (assp . g$6088$UGjMA)
        (assoc . g$6087$UGjMA)
        (with-exception-handler . g$11741$UGjMA)
        (raise-continuable . g$11740$UGjMA)
        (raise . g$11739$UGjMA)
        (eval . g$8365$UGjMA)
        (environment . g$8361$UGjMA)
        (make-enumeration . g$6964$UGjMA)
        (enum-set=? . g$6971$UGjMA)
        (enum-set-universe . g$6965$UGjMA)
        (enum-set-union . g$6972$UGjMA)
        (enum-set-subset? . g$6970$UGjMA)
        (enum-set-projection . g$6976$UGjMA)
        (enum-set-member? . g$6969$UGjMA)
        (enum-set-intersection . g$6973$UGjMA)
        (enum-set-indexer . g$6966$UGjMA)
        (enum-set-difference . g$6974$UGjMA)
        (enum-set-constructor . g$6967$UGjMA)
        (enum-set-complement . g$6975$UGjMA)
        (enum-set->list . g$6968$UGjMA)
        (who-condition? . g$6422$UGjMA)
        (warning? . g$6333$UGjMA)
        (violation? . g$6375$UGjMA)
        (undefined-violation? . g$6499$UGjMA)
        (syntax-violation? . g$6483$UGjMA)
        (syntax-violation-subform . g$6485$UGjMA)
        (syntax-violation-form . g$6484$UGjMA)
        (syntax-violation . g$8379$UGjMA)
        (simple-conditions . g$11738$UGjMA)
        (serious-condition? . g$6347$UGjMA)
        (non-continuable-violation? . g$6437$UGjMA)
        (message-condition? . g$6318$UGjMA)
        (make-who-condition . g$6420$UGjMA)
        (make-warning . g$6332$UGjMA)
        (make-violation . g$6374$UGjMA)
        (make-undefined-violation . g$6498$UGjMA)
        (make-syntax-violation . g$6480$UGjMA)
        (make-serious-condition . g$6346$UGjMA)
        (make-non-continuable-violation . g$6436$UGjMA)
        (make-message-condition . g$6316$UGjMA)
        (make-lexical-violation . g$6464$UGjMA)
        (make-irritants-condition . g$6403$UGjMA)
        (make-implementation-restriction-violation . g$6450$UGjMA)
        (make-error . g$6360$UGjMA)
        (make-assertion-violation . g$6388$UGjMA)
        (lexical-violation? . g$6465$UGjMA)
        (irritants-condition? . g$6405$UGjMA)
        (implementation-restriction-violation? . g$6451$UGjMA)
        (error? . g$6361$UGjMA)
        (condition-who . g$6423$UGjMA)
        (condition-predicate . g$11737$UGjMA)
        (condition-message . g$6319$UGjMA)
        (condition-irritants . g$6406$UGjMA)
        (condition-accessor . g$11736$UGjMA)
        (condition . g$11735$UGjMA)
        (assertion-violation? . g$6389$UGjMA)
        (condition? . g$11734$UGjMA)
        (utf32->string . g$11733$UGjMA)
        (utf16->string . g$11732$UGjMA)
        (utf8->string . g$11731$UGjMA)
        (uint-list->bytevector . g$11730$UGjMA)
        (u8-list->bytevector . g$11729$UGjMA)
        (string->utf8 . g$11728$UGjMA)
        (string->utf32 . g$11727$UGjMA)
        (string->utf16 . g$11726$UGjMA)
        (sint-list->bytevector . g$11725$UGjMA)
        (native-endianness . g$6174$UGjMA)
        (bytevector? . g$11724$UGjMA)
        (bytevector=? . g$11723$UGjMA)
        (bytevector-uint-set! . g$11722$UGjMA)
        (bytevector-uint-ref . g$11721$UGjMA)
        (bytevector-u8-set! . g$11720$UGjMA)
        (bytevector-u8-ref . g$11719$UGjMA)
        (bytevector-u64-set! . g$6195$UGjMA)
        (bytevector-u64-ref . g$6191$UGjMA)
        (bytevector-u64-native-set! . g$6197$UGjMA)
        (bytevector-u64-native-ref . g$6193$UGjMA)
        (bytevector-u32-set! . g$6187$UGjMA)
        (bytevector-u32-ref . g$6183$UGjMA)
        (bytevector-u32-native-set! . g$6189$UGjMA)
        (bytevector-u32-native-ref . g$6185$UGjMA)
        (bytevector-u16-set! . g$6179$UGjMA)
        (bytevector-u16-ref . g$6175$UGjMA)
        (bytevector-u16-native-set! . g$6181$UGjMA)
        (bytevector-u16-native-ref . g$6177$UGjMA)
        (bytevector-sint-set! . g$11718$UGjMA)
        (bytevector-sint-ref . g$11717$UGjMA)
        (bytevector-s8-set! . g$11716$UGjMA)
        (bytevector-s8-ref . g$11715$UGjMA)
        (bytevector-s64-set! . g$6196$UGjMA)
        (bytevector-s64-ref . g$6192$UGjMA)
        (bytevector-s64-native-set! . g$6198$UGjMA)
        (bytevector-s64-native-ref . g$6194$UGjMA)
        (bytevector-s32-set! . g$6188$UGjMA)
        (bytevector-s32-ref . g$6184$UGjMA)
        (bytevector-s32-native-set! . g$6190$UGjMA)
        (bytevector-s32-native-ref . g$6186$UGjMA)
        (bytevector-s16-set! . g$6180$UGjMA)
        (bytevector-s16-ref . g$6176$UGjMA)
        (bytevector-s16-native-set! . g$6182$UGjMA)
        (bytevector-s16-native-ref . g$6178$UGjMA)
        (bytevector-length . g$11714$UGjMA)
        (bytevector-ieee-single-set! . g$11713$UGjMA)
        (bytevector-ieee-single-ref . g$11712$UGjMA)
        (bytevector-ieee-single-native-set! . g$6201$UGjMA)
        (bytevector-ieee-single-native-ref . g$6199$UGjMA)
        (bytevector-ieee-double-set! . g$11711$UGjMA)
        (bytevector-ieee-double-ref . g$11710$UGjMA)
        (bytevector-ieee-double-native-set! . g$6202$UGjMA)
        (bytevector-ieee-double-native-ref . g$6200$UGjMA)
        (bytevector-fill! . g$11709$UGjMA)
        (bytevector-copy! . g$11708$UGjMA)
        (bytevector-copy . g$11707$UGjMA)
        (bytevector->uint-list . g$11706$UGjMA)
        (bytevector->u8-list . g$11705$UGjMA)
        (bytevector->sint-list . g$11704$UGjMA)
        (no-nans-violation? . g$6730$UGjMA)
        (no-infinities-violation? . g$6716$UGjMA)
        (make-no-nans-violation . g$6729$UGjMA)
        (make-no-infinities-violation . g$6715$UGjMA)
        (real->flonum . g$11703$UGjMA)
        (flzero? . g$11702$UGjMA)
        (fltruncate . g$11701$UGjMA)
        (fltan . g$11700$UGjMA)
        (flsqrt . g$11699$UGjMA)
        (flsin . g$11698$UGjMA)
        (flround . g$11697$UGjMA)
        (flpositive? . g$11696$UGjMA)
        (flonum? . g$11695$UGjMA)
        (flodd? . g$11694$UGjMA)
        (flnumerator . g$11693$UGjMA)
        (flnegative? . g$11692$UGjMA)
        (flnan? . g$11691$UGjMA)
        (flmod0 . g$11690$UGjMA)
        (flmod . g$11689$UGjMA)
        (flmin . g$11688$UGjMA)
        (flmax . g$11687$UGjMA)
        (fllog . g$11686$UGjMA)
        (flinteger? . g$11685$UGjMA)
        (flinfinite? . g$11684$UGjMA)
        (flfloor . g$11683$UGjMA)
        (flfinite? . g$11682$UGjMA)
        (flexpt . g$11681$UGjMA)
        (flexp . g$11680$UGjMA)
        (fleven? . g$11679$UGjMA)
        (fldiv0-and-mod0 . g$11678$UGjMA)
        (fldiv0 . g$11677$UGjMA)
        (fldiv-and-mod . g$11676$UGjMA)
        (fldiv . g$11675$UGjMA)
        (fldenominator . g$11674$UGjMA)
        (flcos . g$11673$UGjMA)
        (flceiling . g$11672$UGjMA)
        (flatan . g$11671$UGjMA)
        (flasin . g$11670$UGjMA)
        (flacos . g$11669$UGjMA)
        (flabs . g$11668$UGjMA)
        (fl>? . g$11667$UGjMA)
        (fl>=? . g$11666$UGjMA)
        (fl=? . g$11665$UGjMA)
        (fl<? . g$11664$UGjMA)
        (fl<=? . g$11663$UGjMA)
        (fl/ . g$11662$UGjMA)
        (fl- . g$11661$UGjMA)
        (fl+ . g$11660$UGjMA)
        (fl* . g$11659$UGjMA)
        (fixnum->flonum . g$11658$UGjMA)
        (fxzero? . g$11657$UGjMA)
        (fxxor . g$11656$UGjMA)
        (fxrotate-bit-field . g$6661$UGjMA)
        (fxreverse-bit-field . g$11655$UGjMA)
        (fxpositive? . g$11654$UGjMA)
        (fxodd? . g$11653$UGjMA)
        (fxnot . g$11652$UGjMA)
        (fxnegative? . g$11651$UGjMA)
        (fxmod0 . g$11650$UGjMA)
        (fxmod . g$11649$UGjMA)
        (fxmin . g$11648$UGjMA)
        (fxmax . g$11647$UGjMA)
        (fxlength . g$11646$UGjMA)
        (fxior . g$11645$UGjMA)
        (fxif . g$6655$UGjMA)
        (fxfirst-bit-set . g$11644$UGjMA)
        (fxeven? . g$11643$UGjMA)
        (fxdiv0-and-mod0 . g$11642$UGjMA)
        (fxdiv0 . g$11641$UGjMA)
        (fxdiv-and-mod . g$11640$UGjMA)
        (fxdiv . g$11639$UGjMA)
        (fxcopy-bit-field . g$6658$UGjMA)
        (fxcopy-bit . g$6656$UGjMA)
        (fxbit-set? . g$11638$UGjMA)
        (fxbit-field . g$6657$UGjMA)
        (fxbit-count . g$11637$UGjMA)
        (fxarithmetic-shift-right . g$6660$UGjMA)
        (fxarithmetic-shift-left . g$6659$UGjMA)
        (fxarithmetic-shift . g$11636$UGjMA)
        (fxand . g$11635$UGjMA)
        (fx>? . g$11634$UGjMA)
        (fx>=? . g$11633$UGjMA)
        (fx=? . g$11632$UGjMA)
        (fx<? . g$11631$UGjMA)
        (fx<=? . g$11630$UGjMA)
        (fx-/carry . g$11629$UGjMA)
        (fx- . g$11628$UGjMA)
        (fx+/carry . g$11627$UGjMA)
        (fx+ . g$11626$UGjMA)
        (fx*/carry . g$11625$UGjMA)
        (fx* . g$11624$UGjMA)
        (greatest-fixnum . g$11623$UGjMA)
        (least-fixnum . g$11622$UGjMA)
        (fixnum-width . g$11621$UGjMA)
        (fixnum? . g$11620$UGjMA)
        (bitwise-rotate-bit-field . g$6609$UGjMA)
        (bitwise-reverse-bit-field . g$6610$UGjMA)
        (bitwise-length . g$11619$UGjMA)
        (bitwise-if . g$6603$UGjMA)
        (bitwise-first-bit-set . g$11618$UGjMA)
        (bitwise-copy-bit-field . g$6606$UGjMA)
        (bitwise-copy-bit . g$6604$UGjMA)
        (bitwise-bit-set? . g$11617$UGjMA)
        (bitwise-bit-field . g$11616$UGjMA)
        (bitwise-bit-count . g$11615$UGjMA)
        (bitwise-xor . g$11614$UGjMA)
        (bitwise-ior . g$11613$UGjMA)
        (bitwise-and . g$11612$UGjMA)
        (bitwise-not . g$11611$UGjMA)
        (bitwise-arithmetic-shift-right . g$6608$UGjMA)
        (bitwise-arithmetic-shift-left . g$6607$UGjMA)
        (bitwise-arithmetic-shift . g$11610$UGjMA)
        (zero? . g$11609$UGjMA)
        (vector? . g$11608$UGjMA)
        (vector-set! . g$11607$UGjMA)
        (vector-ref . g$11606$UGjMA)
        (vector-map . g$11605$UGjMA)
        (vector-length . g$11604$UGjMA)
        (vector-for-each . g$11603$UGjMA)
        (vector-fill! . g$11602$UGjMA)
        (vector->list . g$11601$UGjMA)
        (vector . g$11600$UGjMA)
        (values . g$11599$UGjMA)
        (truncate . g$11598$UGjMA)
        (tan . g$11597$UGjMA)
        (symbol? . g$11596$UGjMA)
        (symbol=? . g$11595$UGjMA)
        (symbol->string . g$11594$UGjMA)
        (substring . g$11593$UGjMA)
        (string? . g$11592$UGjMA)
        (string>? . g$11591$UGjMA)
        (string>=? . g$11590$UGjMA)
        (string=? . g$11589$UGjMA)
        (string<? . g$11588$UGjMA)
        (string<=? . g$11587$UGjMA)
        (string-ref . g$11586$UGjMA)
        (string-length . g$11585$UGjMA)
        (string-for-each . g$11584$UGjMA)
        (string-copy . g$11583$UGjMA)
        (string-append . g$11582$UGjMA)
        (string->symbol . g$11581$UGjMA)
        (string->number . g$11580$UGjMA)
        (string->list . g$11579$UGjMA)
        (string . g$11578$UGjMA)
        (sqrt . g$11577$UGjMA)
        (sin . g$11576$UGjMA)
        (round . g$11575$UGjMA)
        (reverse . g$11574$UGjMA)
        (real? . g$11573$UGjMA)
        (real-valued? . g$11572$UGjMA)
        (real-part . g$11571$UGjMA)
        (rationalize . g$5635$UGjMA)
        (rational? . g$11570$UGjMA)
        (rational-valued? . g$11569$UGjMA)
        (procedure? . g$11568$UGjMA)
        (positive? . g$11567$UGjMA)
        (pair? . g$11566$UGjMA)
        (odd? . g$11565$UGjMA)
        (numerator . g$11564$UGjMA)
        (number? . g$11563$UGjMA)
        (number->string . g$11562$UGjMA)
        (null? . g$11561$UGjMA)
        (not . g$11560$UGjMA)
        (negative? . g$11559$UGjMA)
        (nan? . g$11558$UGjMA)
        (min . g$11557$UGjMA)
        (max . g$11556$UGjMA)
        (map . g$11555$UGjMA)
        (make-vector . g$11554$UGjMA)
        (make-string . g$11553$UGjMA)
        (make-rectangular . g$11552$UGjMA)
        (make-polar . g$11551$UGjMA)
        (magnitude . g$11550$UGjMA)
        (log . g$11549$UGjMA)
        (list? . g$11548$UGjMA)
        (list-tail . g$11547$UGjMA)
        (list-ref . g$11546$UGjMA)
        (list->vector . g$11545$UGjMA)
        (list->string . g$11544$UGjMA)
        (list . g$11543$UGjMA)
        (length . g$11542$UGjMA)
        (lcm . g$11541$UGjMA)
        (integer? . g$11540$UGjMA)
        (integer-valued? . g$11539$UGjMA)
        (integer->char . g$11538$UGjMA)
        (infinite? . g$11537$UGjMA)
        (inexact? . g$11536$UGjMA)
        (inexact . g$11535$UGjMA)
        (imag-part . g$11534$UGjMA)
        (gcd . g$11533$UGjMA)
        (for-each . g$11532$UGjMA)
        (floor . g$11531$UGjMA)
        (finite? . g$11530$UGjMA)
        (expt . g$11529$UGjMA)
        (exp . g$11528$UGjMA)
        (exact? . g$11527$UGjMA)
        (exact-integer-sqrt . g$11526$UGjMA)
        (exact . g$11525$UGjMA)
        (even? . g$11524$UGjMA)
        (error . g$11523$UGjMA)
        (eqv? . g$11522$UGjMA)
        (equal? . g$11521$UGjMA)
        (eq? . g$11520$UGjMA)
        (dynamic-wind . g$11519$UGjMA)
        (div0-and-mod0 . g$11518$UGjMA)
        (mod0 . g$11517$UGjMA)
        (div0 . g$11516$UGjMA)
        (div-and-mod . g$11515$UGjMA)
        (mod . g$11514$UGjMA)
        (div . g$11513$UGjMA)
        (denominator . g$11512$UGjMA)
        (cos . g$11511$UGjMA)
        (cons . g$11510$UGjMA)
        (complex? . g$11509$UGjMA)
        (char? . g$11508$UGjMA)
        (char>? . g$11507$UGjMA)
        (char>=? . g$11506$UGjMA)
        (char=? . g$11505$UGjMA)
        (char<? . g$11504$UGjMA)
        (char<=? . g$11503$UGjMA)
        (char->integer . g$11502$UGjMA)
        (ceiling . g$11501$UGjMA)
        (call-with-values . g$11500$UGjMA)
        (call/cc . g$11499$UGjMA)
        (call-with-current-continuation . g$11498$UGjMA)
        (cddddr . g$5634$UGjMA)
        (cdddar . g$5633$UGjMA)
        (cddadr . g$5632$UGjMA)
        (cddaar . g$5631$UGjMA)
        (cdaddr . g$5630$UGjMA)
        (cdadar . g$5629$UGjMA)
        (cdaadr . g$5628$UGjMA)
        (cdaaar . g$5627$UGjMA)
        (cadddr . g$5626$UGjMA)
        (caddar . g$5625$UGjMA)
        (cadadr . g$5624$UGjMA)
        (cadaar . g$5623$UGjMA)
        (caaddr . g$5622$UGjMA)
        (caadar . g$5621$UGjMA)
        (caaadr . g$5620$UGjMA)
        (caaaar . g$5619$UGjMA)
        (cdddr . g$5618$UGjMA)
        (cddar . g$5617$UGjMA)
        (cdadr . g$5616$UGjMA)
        (cdaar . g$5615$UGjMA)
        (caddr . g$5614$UGjMA)
        (cadar . g$5613$UGjMA)
        (caadr . g$5612$UGjMA)
        (caaar . g$5611$UGjMA)
        (cddr . g$5610$UGjMA)
        (cdar . g$5609$UGjMA)
        (cadr . g$5608$UGjMA)
        (caar . g$5607$UGjMA)
        (cdr . g$11497$UGjMA)
        (car . g$11496$UGjMA)
        (boolean? . g$11495$UGjMA)
        (boolean=? . g$11494$UGjMA)
        (atan . g$11493$UGjMA)
        (assertion-violation . g$11492$UGjMA)
        (asin . g$11491$UGjMA)
        (apply . g$11490$UGjMA)
        (append . g$11489$UGjMA)
        (angle . g$11488$UGjMA)
        (acos . g$11487$UGjMA)
        (abs . g$11486$UGjMA)
        (/ . g$11485$UGjMA)
        (* . g$11484$UGjMA)
        (- . g$11483$UGjMA)
        (+ . g$11482$UGjMA)
        (>= . g$11481$UGjMA)
        (> . g$11480$UGjMA)
        (= . g$11479$UGjMA)
        (<= . g$11478$UGjMA)
        (< . g$11477$UGjMA)
        (load/args . g$11315$UGjMA)
        (printf . g$7077$UGjMA)
        (fprintf . g$7078$UGjMA)
        (format . g$7079$UGjMA)
        (get-arity . g$11472$UGjMA)
        (gc-collect . g$11471$UGjMA)
        (clr-type? . g$11470$UGjMA)
        (get-clr-type . g$11469$UGjMA)
        (vector-append . g$11467$UGjMA)
        (vector-filter . g$11466$UGjMA)
        (vector-reverse! . g$11465$UGjMA)
        (vector-contains? . g$11464$UGjMA)
        (vector-index-of . g$11463$UGjMA)
        (vector-copy . g$11462$UGjMA)
        (vector-binary-search . g$11461$UGjMA)
        (get-output-string . g$11460$UGjMA)
        (open-output-string . g$11459$UGjMA)
        (open-input-string . g$11458$UGjMA)
        (string-format . g$11457$UGjMA)
        (trace-printer . g$11312$UGjMA)
        (make-traced-procedure . g$11456$UGjMA)
        (make-traced-macro . g$7098$UGjMA)
        (pmap . g$11455$UGjMA)
        (time-it . g$11454$UGjMA)
        (make-parameter . g$7103$UGjMA)
        (library-locator . g$11453$UGjMA)
        (get-library-paths . g$11452$UGjMA)
        (environment-symbols . g$8359$UGjMA)
        (interaction-environment-symbols . g$8358$UGjMA)
        (library-path . g$7528$UGjMA)
        (library-extensions . g$7529$UGjMA)
        (installed-libraries . g$7549$UGjMA)
        (expand . g$8364$UGjMA)
        (&no-nans . g$11451$UGjMA)
        (&no-infinities . g$11450$UGjMA)
        (&i/o-encoding . g$11449$UGjMA)
        (&i/o-decoding . g$11448$UGjMA)
        (&i/o-port . g$11447$UGjMA)
        (&i/o-file-does-not-exist . g$11446$UGjMA)
        (&i/o-file-already-exists . g$11445$UGjMA)
        (&i/o-file-is-read-only . g$11444$UGjMA)
        (&i/o-file-protection . g$11443$UGjMA)
        (&i/o-filename . g$11442$UGjMA)
        (&i/o-invalid-position . g$11441$UGjMA)
        (&i/o-write . g$11440$UGjMA)
        (&i/o-read . g$11439$UGjMA)
        (&i/o . g$11438$UGjMA)
        (&non-continuable . g$11437$UGjMA)
        (&undefined . g$11436$UGjMA)
        (&syntax . g$11435$UGjMA)
        (&lexical . g$11434$UGjMA)
        (&implementation-restriction . g$11433$UGjMA)
        (&who . g$11431$UGjMA)
        (&irritants . g$11430$UGjMA)
        (&assertion . g$11429$UGjMA)
        (&violation . g$11428$UGjMA)
        (&error . g$11427$UGjMA)
        (&serious . g$11426$UGjMA)
        (&warning . g$11425$UGjMA)
        (&message . g$11424$UGjMA)
        (&condition . g$11423$UGjMA)
        (define-condition-type . g$11422$UGjMA)
        (define-enumeration . g$11421$UGjMA)
        (define-record-type . g$11420$UGjMA)
        (parent-rtd . g$11419$UGjMA)
        (nongenerative . g$11418$UGjMA)
        (opaque . g$11417$UGjMA)
        (sealed . g$11416$UGjMA)
        (protocol . g$11415$UGjMA)
        (parent . g$11414$UGjMA)
        (immutable . g$11413$UGjMA)
        (mutable . g$11412$UGjMA)
        (fields . g$11411$UGjMA)
        (error-handling-mode . g$11410$UGjMA)
        (file-options . g$11409$UGjMA)
        (buffer-mode . g$11408$UGjMA)
        (eol-style . g$11407$UGjMA)
        (guard . g$11406$UGjMA)
        (trace-letrec-syntax . g$11405$UGjMA)
        (trace-let-syntax . g$11404$UGjMA)
        (trace-define-syntax . g$11403$UGjMA)
        (trace-define . g$11402$UGjMA)
        (trace-lambda . g$11401$UGjMA)
        (unsyntax-splicing . g$11400$UGjMA)
        (unsyntax . g$11399$UGjMA)
        (unquote-splicing . g$11398$UGjMA)
        (unquote . g$11397$UGjMA)
        (_ . g$11396$UGjMA)
        (else . g$11395$UGjMA)
        (=> . g$11394$UGjMA)
        (... . g$11393$UGjMA)
        (assert . g$11392$UGjMA)
        (endianness . g$11391$UGjMA)
        (delay . g$11390$UGjMA)
        (time . g$11389$UGjMA)
        (or . g$11388$UGjMA)
        (and . g$11387$UGjMA)
        (do . g$11386$UGjMA)
        (cond . g$11385$UGjMA)
        (let* . g$11384$UGjMA)
        (let . g$11383$UGjMA)
        (identifier-syntax . g$11382$UGjMA)
        (with-syntax . g$11381$UGjMA)
        (quasisyntax . g$11380$UGjMA)
        (quasiquote . g$11379$UGjMA)
        (syntax-rules . g$11378$UGjMA)
        (include-into . g$11377$UGjMA)
        (include . g$11376$UGjMA)
        (let-values . g$11374$UGjMA)
        (let*-values . g$11373$UGjMA)
        (record-constructor-descriptor . g$11372$UGjMA)
        (record-type-descriptor . g$11371$UGjMA)
        (fluid-let-syntax . g$11370$UGjMA)
        (case . g$11369$UGjMA)
        (parameterize . g$11368$UGjMA)
        (unless . g$11367$UGjMA)
        (when . g$11366$UGjMA)
        (if . g$11365$UGjMA)
        (letrec* . g$11364$UGjMA)
        (letrec . g$11363$UGjMA)
        (case-lambda . g$11361$UGjMA)
        (lambda . g$11360$UGjMA)
        (syntax . g$11359$UGjMA)
        (syntax-case . g$11358$UGjMA)
        (quote . g$11357$UGjMA)
        (letrec-syntax . g$11355$UGjMA)
        (let-syntax . g$11354$UGjMA)
        (set! . g$11353$UGjMA)
        (import . g$11352$UGjMA)
        (library . g$11351$UGjMA)
        (begin . g$11350$UGjMA)
        (module . g$11349$UGjMA)
        (define-syntax . g$11348$UGjMA)
        (define . g$11347$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$11992$UGjMA
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$11452$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6902$UGjMA
      'g$11993$UGjMA
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$11933$UGjMA)
        (annotation-source . g$11932$UGjMA)
        (annotation-expression . g$11931$UGjMA)
        (annotation? . g$11930$UGjMA)
        (read-annotated . g$11929$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6902$UGjMA
      'g$11994$UGjMA
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$11899$UGjMA)
        (serialize-library . g$11898$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6902$UGjMA
      'g$11995$UGjMA
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((variable-transformer-procedure . g$7989$UGjMA)
        (variable-transformer? . g$7988$UGjMA)
        (eqv-hash . g$11475$UGjMA)
        (eq-hash . g$11474$UGjMA)
        (reverse! . g$11473$UGjMA)
        (format . g$7079$UGjMA)
        (get-command-line . g$11468$UGjMA)
        (make-traced-procedure . g$11456$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6902$UGjMA
      'g$11996$UGjMA
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$11476$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$11997$UGjMA
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$11917$UGjMA)
        (clr-field-set!-internal . g$11916$UGjMA)
        (clr-field-get-internal . g$11915$UGjMA)
        (clr-cast-internal . g$11914$UGjMA)
        (clr-call-internal . g$11913$UGjMA)
        (clr-new-internal . g$11912$UGjMA)
        (clr-new-array-internal . g$11911$UGjMA)
        (clr-is-internal . g$11910$UGjMA)
        (clr-reference-internal . g$11909$UGjMA)
        (clr-using-internal . g$11908$UGjMA)
        (clr-clear-usings-internal . g$11907$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$11998$UGjMA
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$11398$UGjMA)
        (unquote . g$11397$UGjMA)
        (delay . g$11390$UGjMA)
        (or . g$11388$UGjMA)
        (and . g$11387$UGjMA)
        (do . g$11386$UGjMA)
        (cond . g$11385$UGjMA)
        (let* . g$11384$UGjMA)
        (let . g$11383$UGjMA)
        (quasiquote . g$11379$UGjMA)
        (syntax-rules . g$11378$UGjMA)
        (case . g$11369$UGjMA)
        (if . g$11365$UGjMA)
        (letrec . g$11363$UGjMA)
        (lambda . g$11360$UGjMA)
        (quote . g$11357$UGjMA)
        (letrec-syntax . g$11355$UGjMA)
        (let-syntax . g$11354$UGjMA)
        (set! . g$11353$UGjMA)
        (begin . g$11350$UGjMA)
        (define-syntax . g$11348$UGjMA)
        (define . g$11347$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6902$UGjMA
      'g$11999$UGjMA
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((interaction-environment . g$8385$UGjMA)
        (char-ready? . g$11897$UGjMA)
        (string-ci>? . g$11888$UGjMA)
        (string-ci>=? . g$11887$UGjMA)
        (string-ci=? . g$11886$UGjMA)
        (string-ci<? . g$11885$UGjMA)
        (string-ci<=? . g$11884$UGjMA)
        (char-whitespace? . g$11883$UGjMA)
        (char-upper-case? . g$11882$UGjMA)
        (char-numeric? . g$11880$UGjMA)
        (char-lower-case? . g$11879$UGjMA)
        (char-upcase . g$11877$UGjMA)
        (char-downcase . g$11874$UGjMA)
        (char-ci>? . g$11873$UGjMA)
        (char-ci>=? . g$11872$UGjMA)
        (char-ci=? . g$11871$UGjMA)
        (char-ci<? . g$11870$UGjMA)
        (char-ci<=? . g$11869$UGjMA)
        (char-alphabetic? . g$11868$UGjMA)
        (call-with-output-file . g$11836$UGjMA)
        (call-with-input-file . g$11835$UGjMA)
        (write-char . g$11834$UGjMA)
        (write . g$11833$UGjMA)
        (with-output-to-file . g$11832$UGjMA)
        (with-input-from-file . g$11831$UGjMA)
        (read-char . g$11830$UGjMA)
        (read . g$11829$UGjMA)
        (peek-char . g$11828$UGjMA)
        (open-output-file . g$11827$UGjMA)
        (open-input-file . g$11826$UGjMA)
        (newline . g$11825$UGjMA)
        (display . g$11824$UGjMA)
        (close-output-port . g$11823$UGjMA)
        (close-input-port . g$11822$UGjMA)
        (eof-object? . g$11821$UGjMA)
        (eof-object . g$11820$UGjMA)
        (current-error-port . g$11819$UGjMA)
        (current-output-port . g$11818$UGjMA)
        (current-input-port . g$11817$UGjMA)
        (output-port? . g$11816$UGjMA)
        (input-port? . g$11815$UGjMA)
        (scheme-report-environment . g$8363$UGjMA)
        (quotient . g$6511$UGjMA)
        (null-environment . g$8362$UGjMA)
        (remainder . g$6512$UGjMA)
        (modulo . g$6513$UGjMA)
        (inexact->exact . g$11752$UGjMA)
        (force . g$11751$UGjMA)
        (exact->inexact . g$11750$UGjMA)
        (string-fill! . g$11748$UGjMA)
        (string-set! . g$11747$UGjMA)
        (set-cdr! . g$11746$UGjMA)
        (set-car! . g$11745$UGjMA)
        (memv . g$11744$UGjMA)
        (memq . g$11743$UGjMA)
        (member . g$6089$UGjMA)
        (assv . g$6086$UGjMA)
        (assq . g$11742$UGjMA)
        (assoc . g$6087$UGjMA)
        (eval . g$8365$UGjMA)
        (zero? . g$11609$UGjMA)
        (vector? . g$11608$UGjMA)
        (vector-set! . g$11607$UGjMA)
        (vector-ref . g$11606$UGjMA)
        (vector-length . g$11604$UGjMA)
        (vector-fill! . g$11602$UGjMA)
        (vector->list . g$11601$UGjMA)
        (vector . g$11600$UGjMA)
        (values . g$11599$UGjMA)
        (truncate . g$11598$UGjMA)
        (tan . g$11597$UGjMA)
        (symbol? . g$11596$UGjMA)
        (symbol->string . g$11594$UGjMA)
        (substring . g$11593$UGjMA)
        (string? . g$11592$UGjMA)
        (string>? . g$11591$UGjMA)
        (string>=? . g$11590$UGjMA)
        (string=? . g$11589$UGjMA)
        (string<? . g$11588$UGjMA)
        (string<=? . g$11587$UGjMA)
        (string-ref . g$11586$UGjMA)
        (string-length . g$11585$UGjMA)
        (string-copy . g$11583$UGjMA)
        (string-append . g$11582$UGjMA)
        (string->symbol . g$11581$UGjMA)
        (string->number . g$11580$UGjMA)
        (string->list . g$11579$UGjMA)
        (string . g$11578$UGjMA)
        (sqrt . g$11577$UGjMA)
        (sin . g$11576$UGjMA)
        (round . g$11575$UGjMA)
        (reverse . g$11574$UGjMA)
        (real? . g$11573$UGjMA)
        (real-part . g$11571$UGjMA)
        (rationalize . g$5635$UGjMA)
        (rational? . g$11570$UGjMA)
        (procedure? . g$11568$UGjMA)
        (positive? . g$11567$UGjMA)
        (pair? . g$11566$UGjMA)
        (odd? . g$11565$UGjMA)
        (numerator . g$11564$UGjMA)
        (number? . g$11563$UGjMA)
        (number->string . g$11562$UGjMA)
        (null? . g$11561$UGjMA)
        (not . g$11560$UGjMA)
        (negative? . g$11559$UGjMA)
        (min . g$11557$UGjMA)
        (max . g$11556$UGjMA)
        (map . g$11555$UGjMA)
        (make-vector . g$11554$UGjMA)
        (make-string . g$11553$UGjMA)
        (make-rectangular . g$11552$UGjMA)
        (make-polar . g$11551$UGjMA)
        (magnitude . g$11550$UGjMA)
        (log . g$11549$UGjMA)
        (list? . g$11548$UGjMA)
        (list-tail . g$11547$UGjMA)
        (list-ref . g$11546$UGjMA)
        (list->vector . g$11545$UGjMA)
        (list->string . g$11544$UGjMA)
        (list . g$11543$UGjMA)
        (length . g$11542$UGjMA)
        (lcm . g$11541$UGjMA)
        (integer? . g$11540$UGjMA)
        (integer->char . g$11538$UGjMA)
        (inexact? . g$11536$UGjMA)
        (imag-part . g$11534$UGjMA)
        (gcd . g$11533$UGjMA)
        (for-each . g$11532$UGjMA)
        (floor . g$11531$UGjMA)
        (expt . g$11529$UGjMA)
        (exp . g$11528$UGjMA)
        (exact? . g$11527$UGjMA)
        (even? . g$11524$UGjMA)
        (eqv? . g$11522$UGjMA)
        (equal? . g$11521$UGjMA)
        (eq? . g$11520$UGjMA)
        (dynamic-wind . g$11519$UGjMA)
        (denominator . g$11512$UGjMA)
        (cos . g$11511$UGjMA)
        (cons . g$11510$UGjMA)
        (complex? . g$11509$UGjMA)
        (char? . g$11508$UGjMA)
        (char>? . g$11507$UGjMA)
        (char>=? . g$11506$UGjMA)
        (char=? . g$11505$UGjMA)
        (char<? . g$11504$UGjMA)
        (char<=? . g$11503$UGjMA)
        (char->integer . g$11502$UGjMA)
        (ceiling . g$11501$UGjMA)
        (call-with-values . g$11500$UGjMA)
        (call-with-current-continuation . g$11498$UGjMA)
        (cddddr . g$5634$UGjMA)
        (cdddar . g$5633$UGjMA)
        (cddadr . g$5632$UGjMA)
        (cddaar . g$5631$UGjMA)
        (cdaddr . g$5630$UGjMA)
        (cdadar . g$5629$UGjMA)
        (cdaadr . g$5628$UGjMA)
        (cdaaar . g$5627$UGjMA)
        (cadddr . g$5626$UGjMA)
        (caddar . g$5625$UGjMA)
        (cadadr . g$5624$UGjMA)
        (cadaar . g$5623$UGjMA)
        (caaddr . g$5622$UGjMA)
        (caadar . g$5621$UGjMA)
        (caaadr . g$5620$UGjMA)
        (caaaar . g$5619$UGjMA)
        (cdddr . g$5618$UGjMA)
        (cddar . g$5617$UGjMA)
        (cdadr . g$5616$UGjMA)
        (cdaar . g$5615$UGjMA)
        (caddr . g$5614$UGjMA)
        (cadar . g$5613$UGjMA)
        (caadr . g$5612$UGjMA)
        (caaar . g$5611$UGjMA)
        (cddr . g$5610$UGjMA)
        (cdar . g$5609$UGjMA)
        (cadr . g$5608$UGjMA)
        (caar . g$5607$UGjMA)
        (cdr . g$11497$UGjMA)
        (car . g$11496$UGjMA)
        (boolean? . g$11495$UGjMA)
        (atan . g$11493$UGjMA)
        (asin . g$11491$UGjMA)
        (apply . g$11490$UGjMA)
        (append . g$11489$UGjMA)
        (angle . g$11488$UGjMA)
        (acos . g$11487$UGjMA)
        (abs . g$11486$UGjMA)
        (/ . g$11485$UGjMA)
        (* . g$11484$UGjMA)
        (- . g$11483$UGjMA)
        (+ . g$11482$UGjMA)
        (>= . g$11481$UGjMA)
        (> . g$11480$UGjMA)
        (= . g$11479$UGjMA)
        (<= . g$11478$UGjMA)
        (< . g$11477$UGjMA)
        (unquote-splicing . g$11398$UGjMA)
        (unquote . g$11397$UGjMA)
        (else . g$11395$UGjMA)
        (=> . g$11394$UGjMA)
        (... . g$11393$UGjMA)
        (delay . g$11390$UGjMA)
        (or . g$11388$UGjMA)
        (and . g$11387$UGjMA)
        (do . g$11386$UGjMA)
        (cond . g$11385$UGjMA)
        (let* . g$11384$UGjMA)
        (let . g$11383$UGjMA)
        (quasiquote . g$11379$UGjMA)
        (syntax-rules . g$11378$UGjMA)
        (case . g$11369$UGjMA)
        (if . g$11365$UGjMA)
        (letrec . g$11363$UGjMA)
        (lambda . g$11360$UGjMA)
        (quote . g$11357$UGjMA)
        (letrec-syntax . g$11355$UGjMA)
        (let-syntax . g$11354$UGjMA)
        (set! . g$11353$UGjMA)
        (begin . g$11350$UGjMA)
        (define-syntax . g$11348$UGjMA)
        (define . g$11347$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6902$UGjMA
      'g$12000$UGjMA
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$11896$UGjMA)
        (string-titlecase . g$11895$UGjMA)
        (string-normalize-nfkd . g$11894$UGjMA)
        (string-normalize-nfkc . g$11893$UGjMA)
        (string-normalize-nfd . g$11892$UGjMA)
        (string-normalize-nfc . g$11891$UGjMA)
        (string-foldcase . g$11890$UGjMA)
        (string-downcase . g$11889$UGjMA)
        (string-ci>? . g$11888$UGjMA)
        (string-ci>=? . g$11887$UGjMA)
        (string-ci=? . g$11886$UGjMA)
        (string-ci<? . g$11885$UGjMA)
        (string-ci<=? . g$11884$UGjMA)
        (char-whitespace? . g$11883$UGjMA)
        (char-upper-case? . g$11882$UGjMA)
        (char-title-case? . g$11881$UGjMA)
        (char-numeric? . g$11880$UGjMA)
        (char-lower-case? . g$11879$UGjMA)
        (char-general-category . g$11878$UGjMA)
        (char-upcase . g$11877$UGjMA)
        (char-titlecase . g$11876$UGjMA)
        (char-foldcase . g$11875$UGjMA)
        (char-downcase . g$11874$UGjMA)
        (char-ci>? . g$11873$UGjMA)
        (char-ci>=? . g$11872$UGjMA)
        (char-ci=? . g$11871$UGjMA)
        (char-ci<? . g$11870$UGjMA)
        (char-ci<=? . g$11869$UGjMA)
        (char-alphabetic? . g$11868$UGjMA)
        (make-variable-transformer . g$7987$UGjMA)
        (identifier? . g$8380$UGjMA)
        (generate-temporaries . g$8372$UGjMA)
        (free-identifier=? . g$8373$UGjMA)
        (syntax->datum . g$8382$UGjMA)
        (datum->syntax . g$8381$UGjMA)
        (bound-identifier=? . g$8374$UGjMA)
        (record-type-descriptor? . g$11867$UGjMA)
        (record-predicate . g$11866$UGjMA)
        (record-mutator . g$11865$UGjMA)
        (record-constructor . g$11864$UGjMA)
        (record-accessor . g$11863$UGjMA)
        (make-record-type-descriptor . g$11862$UGjMA)
        (make-record-constructor-descriptor . g$11861$UGjMA)
        (record? . g$11860$UGjMA)
        (record-type-uid . g$11859$UGjMA)
        (record-type-sealed? . g$11858$UGjMA)
        (record-type-parent . g$11857$UGjMA)
        (record-type-opaque? . g$11856$UGjMA)
        (record-type-name . g$11855$UGjMA)
        (record-type-generative? . g$11854$UGjMA)
        (record-type-field-names . g$11853$UGjMA)
        (record-rtd . g$11852$UGjMA)
        (record-field-mutable? . g$11851$UGjMA)
        (delete-file . g$6018$UGjMA)
        (file-exists? . g$6017$UGjMA)
        (vector-sort! . g$11850$UGjMA)
        (vector-sort . g$11849$UGjMA)
        (list-sort . g$6524$UGjMA)
        (symbol-hash . g$11848$UGjMA)
        (string-ci-hash . g$11847$UGjMA)
        (string-hash . g$11846$UGjMA)
        (equal-hash . g$11845$UGjMA)
        (hashtable-equivalence-function . g$11844$UGjMA)
        (make-hashtable . g$11843$UGjMA)
        (hashtable-hash-function . g$11842$UGjMA)
        (make-eqv-hashtable . g$5985$UGjMA)
        (make-eq-hashtable . g$5984$UGjMA)
        (hashtable? . g$11841$UGjMA)
        (hashtable-update! . g$5991$UGjMA)
        (hashtable-size . g$5986$UGjMA)
        (hashtable-set! . g$5988$UGjMA)
        (hashtable-ref . g$5987$UGjMA)
        (hashtable-mutable? . g$11840$UGjMA)
        (hashtable-keys . g$11839$UGjMA)
        (hashtable-entries . g$11838$UGjMA)
        (hashtable-delete! . g$5989$UGjMA)
        (hashtable-copy . g$11837$UGjMA)
        (hashtable-contains? . g$5990$UGjMA)
        (hashtable-clear! . g$5992$UGjMA)
        (call-with-output-file . g$11836$UGjMA)
        (call-with-input-file . g$11835$UGjMA)
        (write-char . g$11834$UGjMA)
        (write . g$11833$UGjMA)
        (with-output-to-file . g$11832$UGjMA)
        (with-input-from-file . g$11831$UGjMA)
        (read-char . g$11830$UGjMA)
        (read . g$11829$UGjMA)
        (peek-char . g$11828$UGjMA)
        (open-output-file . g$11827$UGjMA)
        (open-input-file . g$11826$UGjMA)
        (newline . g$11825$UGjMA)
        (display . g$11824$UGjMA)
        (close-output-port . g$11823$UGjMA)
        (close-input-port . g$11822$UGjMA)
        (eof-object? . g$11821$UGjMA)
        (eof-object . g$11820$UGjMA)
        (current-error-port . g$11819$UGjMA)
        (current-output-port . g$11818$UGjMA)
        (current-input-port . g$11817$UGjMA)
        (output-port? . g$11816$UGjMA)
        (input-port? . g$11815$UGjMA)
        (utf-8-codec . g$11814$UGjMA)
        (utf-16-codec . g$11813$UGjMA)
        (transcoder-error-handling-mode . g$11812$UGjMA)
        (transcoder-eol-style . g$11811$UGjMA)
        (transcoder-codec . g$11810$UGjMA)
        (transcoded-port . g$11809$UGjMA)
        (textual-port? . g$11808$UGjMA)
        (string->bytevector . g$11807$UGjMA)
        (standard-output-port . g$11806$UGjMA)
        (standard-input-port . g$11805$UGjMA)
        (standard-error-port . g$11804$UGjMA)
        (set-port-position! . g$11803$UGjMA)
        (put-u8 . g$11802$UGjMA)
        (put-string . g$11801$UGjMA)
        (put-datum . g$11800$UGjMA)
        (put-char . g$11799$UGjMA)
        (put-bytevector . g$11798$UGjMA)
        (port? . g$11797$UGjMA)
        (port-transcoder . g$11796$UGjMA)
        (port-position . g$11795$UGjMA)
        (port-has-set-port-position!? . g$11794$UGjMA)
        (port-has-port-position? . g$11793$UGjMA)
        (port-eof? . g$11792$UGjMA)
        (output-port-buffer-mode . g$11791$UGjMA)
        (open-string-output-port . g$6915$UGjMA)
        (open-string-input-port . g$11790$UGjMA)
        (open-file-output-port . g$11789$UGjMA)
        (open-file-input/output-port . g$11788$UGjMA)
        (open-file-input-port . g$11787$UGjMA)
        (open-bytevector-output-port . g$11786$UGjMA)
        (open-bytevector-input-port . g$11785$UGjMA)
        (native-transcoder . g$11784$UGjMA)
        (native-eol-style . g$11783$UGjMA)
        (make-transcoder . g$11782$UGjMA)
        (latin-1-codec . g$11781$UGjMA)
        (make-i/o-write-error . g$6772$UGjMA)
        (make-i/o-read-error . g$6758$UGjMA)
        (make-i/o-port-error . g$6877$UGjMA)
        (make-i/o-invalid-position-error . g$6787$UGjMA)
        (make-i/o-filename-error . g$6804$UGjMA)
        (make-i/o-file-protection-error . g$6820$UGjMA)
        (make-i/o-file-is-read-only-error . g$6834$UGjMA)
        (make-i/o-file-does-not-exist-error . g$6862$UGjMA)
        (make-i/o-file-already-exists-error . g$6848$UGjMA)
        (make-i/o-error . g$6744$UGjMA)
        (make-i/o-encoding-error . g$6908$UGjMA)
        (make-i/o-decoding-error . g$6893$UGjMA)
        (make-custom-textual-output-port . g$11780$UGjMA)
        (make-custom-textual-input/output-port . g$11779$UGjMA)
        (make-custom-textual-input-port . g$11778$UGjMA)
        (make-custom-binary-output-port . g$11777$UGjMA)
        (make-custom-binary-input/output-port . g$11776$UGjMA)
        (make-custom-binary-input-port . g$11775$UGjMA)
        (make-bytevector . g$11774$UGjMA)
        (lookahead-u8 . g$11773$UGjMA)
        (lookahead-char . g$11772$UGjMA)
        (i/o-write-error? . g$6773$UGjMA)
        (i/o-read-error? . g$6759$UGjMA)
        (i/o-port-error? . g$6879$UGjMA)
        (i/o-invalid-position-error? . g$6789$UGjMA)
        (i/o-filename-error? . g$6806$UGjMA)
        (i/o-file-protection-error? . g$6821$UGjMA)
        (i/o-file-is-read-only-error? . g$6835$UGjMA)
        (i/o-file-does-not-exist-error? . g$6863$UGjMA)
        (i/o-file-already-exists-error? . g$6849$UGjMA)
        (i/o-error? . g$6745$UGjMA)
        (i/o-error-port . g$6880$UGjMA)
        (i/o-error-filename . g$6807$UGjMA)
        (i/o-encoding-error? . g$6910$UGjMA)
        (i/o-encoding-error-char . g$6911$UGjMA)
        (i/o-decoding-error? . g$6894$UGjMA)
        (get-u8 . g$11771$UGjMA)
        (get-string-n! . g$11770$UGjMA)
        (get-string-n . g$11769$UGjMA)
        (get-string-all . g$11768$UGjMA)
        (get-line . g$11767$UGjMA)
        (get-datum . g$11766$UGjMA)
        (get-char . g$11765$UGjMA)
        (get-bytevector-some . g$11764$UGjMA)
        (get-bytevector-n! . g$11763$UGjMA)
        (get-bytevector-n . g$11762$UGjMA)
        (get-bytevector-all . g$11761$UGjMA)
        (flush-output-port . g$11760$UGjMA)
        (close-port . g$11759$UGjMA)
        (call-with-string-output-port . g$11758$UGjMA)
        (call-with-port . g$11757$UGjMA)
        (call-with-bytevector-output-port . g$11756$UGjMA)
        (bytevector->string . g$11755$UGjMA)
        (buffer-mode? . g$11754$UGjMA)
        (binary-port? . g$11753$UGjMA)
        (exit . g$11749$UGjMA)
        (command-line . g$11313$UGjMA)
        (remove . g$6098$UGjMA)
        (remv . g$6099$UGjMA)
        (remp . g$6084$UGjMA)
        (remq . g$6100$UGjMA)
        (partition . g$6083$UGjMA)
        (memv . g$11744$UGjMA)
        (memq . g$11743$UGjMA)
        (memp . g$6090$UGjMA)
        (member . g$6089$UGjMA)
        (exists . g$6094$UGjMA)
        (for-all . g$6093$UGjMA)
        (fold-right . g$6097$UGjMA)
        (fold-left . g$6096$UGjMA)
        (find . g$6082$UGjMA)
        (filter . g$6085$UGjMA)
        (cons* . g$6095$UGjMA)
        (assv . g$6086$UGjMA)
        (assq . g$11742$UGjMA)
        (assp . g$6088$UGjMA)
        (assoc . g$6087$UGjMA)
        (with-exception-handler . g$11741$UGjMA)
        (raise-continuable . g$11740$UGjMA)
        (raise . g$11739$UGjMA)
        (make-enumeration . g$6964$UGjMA)
        (enum-set=? . g$6971$UGjMA)
        (enum-set-universe . g$6965$UGjMA)
        (enum-set-union . g$6972$UGjMA)
        (enum-set-subset? . g$6970$UGjMA)
        (enum-set-projection . g$6976$UGjMA)
        (enum-set-member? . g$6969$UGjMA)
        (enum-set-intersection . g$6973$UGjMA)
        (enum-set-indexer . g$6966$UGjMA)
        (enum-set-difference . g$6974$UGjMA)
        (enum-set-constructor . g$6967$UGjMA)
        (enum-set-complement . g$6975$UGjMA)
        (enum-set->list . g$6968$UGjMA)
        (who-condition? . g$6422$UGjMA)
        (warning? . g$6333$UGjMA)
        (violation? . g$6375$UGjMA)
        (undefined-violation? . g$6499$UGjMA)
        (syntax-violation? . g$6483$UGjMA)
        (syntax-violation-subform . g$6485$UGjMA)
        (syntax-violation-form . g$6484$UGjMA)
        (syntax-violation . g$8379$UGjMA)
        (simple-conditions . g$11738$UGjMA)
        (serious-condition? . g$6347$UGjMA)
        (non-continuable-violation? . g$6437$UGjMA)
        (message-condition? . g$6318$UGjMA)
        (make-who-condition . g$6420$UGjMA)
        (make-warning . g$6332$UGjMA)
        (make-violation . g$6374$UGjMA)
        (make-undefined-violation . g$6498$UGjMA)
        (make-syntax-violation . g$6480$UGjMA)
        (make-serious-condition . g$6346$UGjMA)
        (make-non-continuable-violation . g$6436$UGjMA)
        (make-message-condition . g$6316$UGjMA)
        (make-lexical-violation . g$6464$UGjMA)
        (make-irritants-condition . g$6403$UGjMA)
        (make-implementation-restriction-violation . g$6450$UGjMA)
        (make-error . g$6360$UGjMA)
        (make-assertion-violation . g$6388$UGjMA)
        (lexical-violation? . g$6465$UGjMA)
        (irritants-condition? . g$6405$UGjMA)
        (implementation-restriction-violation? . g$6451$UGjMA)
        (error? . g$6361$UGjMA)
        (condition-who . g$6423$UGjMA)
        (condition-predicate . g$11737$UGjMA)
        (condition-message . g$6319$UGjMA)
        (condition-irritants . g$6406$UGjMA)
        (condition-accessor . g$11736$UGjMA)
        (condition . g$11735$UGjMA)
        (assertion-violation? . g$6389$UGjMA)
        (condition? . g$11734$UGjMA)
        (utf32->string . g$11733$UGjMA)
        (utf16->string . g$11732$UGjMA)
        (utf8->string . g$11731$UGjMA)
        (uint-list->bytevector . g$11730$UGjMA)
        (u8-list->bytevector . g$11729$UGjMA)
        (string->utf8 . g$11728$UGjMA)
        (string->utf32 . g$11727$UGjMA)
        (string->utf16 . g$11726$UGjMA)
        (sint-list->bytevector . g$11725$UGjMA)
        (native-endianness . g$6174$UGjMA)
        (bytevector? . g$11724$UGjMA)
        (bytevector=? . g$11723$UGjMA)
        (bytevector-uint-set! . g$11722$UGjMA)
        (bytevector-uint-ref . g$11721$UGjMA)
        (bytevector-u8-set! . g$11720$UGjMA)
        (bytevector-u8-ref . g$11719$UGjMA)
        (bytevector-u64-set! . g$6195$UGjMA)
        (bytevector-u64-ref . g$6191$UGjMA)
        (bytevector-u64-native-set! . g$6197$UGjMA)
        (bytevector-u64-native-ref . g$6193$UGjMA)
        (bytevector-u32-set! . g$6187$UGjMA)
        (bytevector-u32-ref . g$6183$UGjMA)
        (bytevector-u32-native-set! . g$6189$UGjMA)
        (bytevector-u32-native-ref . g$6185$UGjMA)
        (bytevector-u16-set! . g$6179$UGjMA)
        (bytevector-u16-ref . g$6175$UGjMA)
        (bytevector-u16-native-set! . g$6181$UGjMA)
        (bytevector-u16-native-ref . g$6177$UGjMA)
        (bytevector-sint-set! . g$11718$UGjMA)
        (bytevector-sint-ref . g$11717$UGjMA)
        (bytevector-s8-set! . g$11716$UGjMA)
        (bytevector-s8-ref . g$11715$UGjMA)
        (bytevector-s64-set! . g$6196$UGjMA)
        (bytevector-s64-ref . g$6192$UGjMA)
        (bytevector-s64-native-set! . g$6198$UGjMA)
        (bytevector-s64-native-ref . g$6194$UGjMA)
        (bytevector-s32-set! . g$6188$UGjMA)
        (bytevector-s32-ref . g$6184$UGjMA)
        (bytevector-s32-native-set! . g$6190$UGjMA)
        (bytevector-s32-native-ref . g$6186$UGjMA)
        (bytevector-s16-set! . g$6180$UGjMA)
        (bytevector-s16-ref . g$6176$UGjMA)
        (bytevector-s16-native-set! . g$6182$UGjMA)
        (bytevector-s16-native-ref . g$6178$UGjMA)
        (bytevector-length . g$11714$UGjMA)
        (bytevector-ieee-single-set! . g$11713$UGjMA)
        (bytevector-ieee-single-ref . g$11712$UGjMA)
        (bytevector-ieee-single-native-set! . g$6201$UGjMA)
        (bytevector-ieee-single-native-ref . g$6199$UGjMA)
        (bytevector-ieee-double-set! . g$11711$UGjMA)
        (bytevector-ieee-double-ref . g$11710$UGjMA)
        (bytevector-ieee-double-native-set! . g$6202$UGjMA)
        (bytevector-ieee-double-native-ref . g$6200$UGjMA)
        (bytevector-fill! . g$11709$UGjMA)
        (bytevector-copy! . g$11708$UGjMA)
        (bytevector-copy . g$11707$UGjMA)
        (bytevector->uint-list . g$11706$UGjMA)
        (bytevector->u8-list . g$11705$UGjMA)
        (bytevector->sint-list . g$11704$UGjMA)
        (no-nans-violation? . g$6730$UGjMA)
        (no-infinities-violation? . g$6716$UGjMA)
        (make-no-nans-violation . g$6729$UGjMA)
        (make-no-infinities-violation . g$6715$UGjMA)
        (real->flonum . g$11703$UGjMA)
        (flzero? . g$11702$UGjMA)
        (fltruncate . g$11701$UGjMA)
        (fltan . g$11700$UGjMA)
        (flsqrt . g$11699$UGjMA)
        (flsin . g$11698$UGjMA)
        (flround . g$11697$UGjMA)
        (flpositive? . g$11696$UGjMA)
        (flonum? . g$11695$UGjMA)
        (flodd? . g$11694$UGjMA)
        (flnumerator . g$11693$UGjMA)
        (flnegative? . g$11692$UGjMA)
        (flnan? . g$11691$UGjMA)
        (flmod0 . g$11690$UGjMA)
        (flmod . g$11689$UGjMA)
        (flmin . g$11688$UGjMA)
        (flmax . g$11687$UGjMA)
        (fllog . g$11686$UGjMA)
        (flinteger? . g$11685$UGjMA)
        (flinfinite? . g$11684$UGjMA)
        (flfloor . g$11683$UGjMA)
        (flfinite? . g$11682$UGjMA)
        (flexpt . g$11681$UGjMA)
        (flexp . g$11680$UGjMA)
        (fleven? . g$11679$UGjMA)
        (fldiv0-and-mod0 . g$11678$UGjMA)
        (fldiv0 . g$11677$UGjMA)
        (fldiv-and-mod . g$11676$UGjMA)
        (fldiv . g$11675$UGjMA)
        (fldenominator . g$11674$UGjMA)
        (flcos . g$11673$UGjMA)
        (flceiling . g$11672$UGjMA)
        (flatan . g$11671$UGjMA)
        (flasin . g$11670$UGjMA)
        (flacos . g$11669$UGjMA)
        (flabs . g$11668$UGjMA)
        (fl>? . g$11667$UGjMA)
        (fl>=? . g$11666$UGjMA)
        (fl=? . g$11665$UGjMA)
        (fl<? . g$11664$UGjMA)
        (fl<=? . g$11663$UGjMA)
        (fl/ . g$11662$UGjMA)
        (fl- . g$11661$UGjMA)
        (fl+ . g$11660$UGjMA)
        (fl* . g$11659$UGjMA)
        (fixnum->flonum . g$11658$UGjMA)
        (fxzero? . g$11657$UGjMA)
        (fxxor . g$11656$UGjMA)
        (fxrotate-bit-field . g$6661$UGjMA)
        (fxreverse-bit-field . g$11655$UGjMA)
        (fxpositive? . g$11654$UGjMA)
        (fxodd? . g$11653$UGjMA)
        (fxnot . g$11652$UGjMA)
        (fxnegative? . g$11651$UGjMA)
        (fxmod0 . g$11650$UGjMA)
        (fxmod . g$11649$UGjMA)
        (fxmin . g$11648$UGjMA)
        (fxmax . g$11647$UGjMA)
        (fxlength . g$11646$UGjMA)
        (fxior . g$11645$UGjMA)
        (fxif . g$6655$UGjMA)
        (fxfirst-bit-set . g$11644$UGjMA)
        (fxeven? . g$11643$UGjMA)
        (fxdiv0-and-mod0 . g$11642$UGjMA)
        (fxdiv0 . g$11641$UGjMA)
        (fxdiv-and-mod . g$11640$UGjMA)
        (fxdiv . g$11639$UGjMA)
        (fxcopy-bit-field . g$6658$UGjMA)
        (fxcopy-bit . g$6656$UGjMA)
        (fxbit-set? . g$11638$UGjMA)
        (fxbit-field . g$6657$UGjMA)
        (fxbit-count . g$11637$UGjMA)
        (fxarithmetic-shift-right . g$6660$UGjMA)
        (fxarithmetic-shift-left . g$6659$UGjMA)
        (fxarithmetic-shift . g$11636$UGjMA)
        (fxand . g$11635$UGjMA)
        (fx>? . g$11634$UGjMA)
        (fx>=? . g$11633$UGjMA)
        (fx=? . g$11632$UGjMA)
        (fx<? . g$11631$UGjMA)
        (fx<=? . g$11630$UGjMA)
        (fx-/carry . g$11629$UGjMA)
        (fx- . g$11628$UGjMA)
        (fx+/carry . g$11627$UGjMA)
        (fx+ . g$11626$UGjMA)
        (fx*/carry . g$11625$UGjMA)
        (fx* . g$11624$UGjMA)
        (greatest-fixnum . g$11623$UGjMA)
        (least-fixnum . g$11622$UGjMA)
        (fixnum-width . g$11621$UGjMA)
        (fixnum? . g$11620$UGjMA)
        (bitwise-rotate-bit-field . g$6609$UGjMA)
        (bitwise-reverse-bit-field . g$6610$UGjMA)
        (bitwise-length . g$11619$UGjMA)
        (bitwise-if . g$6603$UGjMA)
        (bitwise-first-bit-set . g$11618$UGjMA)
        (bitwise-copy-bit-field . g$6606$UGjMA)
        (bitwise-copy-bit . g$6604$UGjMA)
        (bitwise-bit-set? . g$11617$UGjMA)
        (bitwise-bit-field . g$11616$UGjMA)
        (bitwise-bit-count . g$11615$UGjMA)
        (bitwise-xor . g$11614$UGjMA)
        (bitwise-ior . g$11613$UGjMA)
        (bitwise-and . g$11612$UGjMA)
        (bitwise-not . g$11611$UGjMA)
        (bitwise-arithmetic-shift-right . g$6608$UGjMA)
        (bitwise-arithmetic-shift-left . g$6607$UGjMA)
        (bitwise-arithmetic-shift . g$11610$UGjMA)
        (zero? . g$11609$UGjMA)
        (vector? . g$11608$UGjMA)
        (vector-set! . g$11607$UGjMA)
        (vector-ref . g$11606$UGjMA)
        (vector-map . g$11605$UGjMA)
        (vector-length . g$11604$UGjMA)
        (vector-for-each . g$11603$UGjMA)
        (vector-fill! . g$11602$UGjMA)
        (vector->list . g$11601$UGjMA)
        (vector . g$11600$UGjMA)
        (values . g$11599$UGjMA)
        (truncate . g$11598$UGjMA)
        (tan . g$11597$UGjMA)
        (symbol? . g$11596$UGjMA)
        (symbol=? . g$11595$UGjMA)
        (symbol->string . g$11594$UGjMA)
        (substring . g$11593$UGjMA)
        (string? . g$11592$UGjMA)
        (string>? . g$11591$UGjMA)
        (string>=? . g$11590$UGjMA)
        (string=? . g$11589$UGjMA)
        (string<? . g$11588$UGjMA)
        (string<=? . g$11587$UGjMA)
        (string-ref . g$11586$UGjMA)
        (string-length . g$11585$UGjMA)
        (string-for-each . g$11584$UGjMA)
        (string-copy . g$11583$UGjMA)
        (string-append . g$11582$UGjMA)
        (string->symbol . g$11581$UGjMA)
        (string->number . g$11580$UGjMA)
        (string->list . g$11579$UGjMA)
        (string . g$11578$UGjMA)
        (sqrt . g$11577$UGjMA)
        (sin . g$11576$UGjMA)
        (round . g$11575$UGjMA)
        (reverse . g$11574$UGjMA)
        (real? . g$11573$UGjMA)
        (real-valued? . g$11572$UGjMA)
        (real-part . g$11571$UGjMA)
        (rationalize . g$5635$UGjMA)
        (rational? . g$11570$UGjMA)
        (rational-valued? . g$11569$UGjMA)
        (procedure? . g$11568$UGjMA)
        (positive? . g$11567$UGjMA)
        (pair? . g$11566$UGjMA)
        (odd? . g$11565$UGjMA)
        (numerator . g$11564$UGjMA)
        (number? . g$11563$UGjMA)
        (number->string . g$11562$UGjMA)
        (null? . g$11561$UGjMA)
        (not . g$11560$UGjMA)
        (negative? . g$11559$UGjMA)
        (nan? . g$11558$UGjMA)
        (min . g$11557$UGjMA)
        (max . g$11556$UGjMA)
        (map . g$11555$UGjMA)
        (make-vector . g$11554$UGjMA)
        (make-string . g$11553$UGjMA)
        (make-rectangular . g$11552$UGjMA)
        (make-polar . g$11551$UGjMA)
        (magnitude . g$11550$UGjMA)
        (log . g$11549$UGjMA)
        (list? . g$11548$UGjMA)
        (list-tail . g$11547$UGjMA)
        (list-ref . g$11546$UGjMA)
        (list->vector . g$11545$UGjMA)
        (list->string . g$11544$UGjMA)
        (list . g$11543$UGjMA)
        (length . g$11542$UGjMA)
        (lcm . g$11541$UGjMA)
        (integer? . g$11540$UGjMA)
        (integer-valued? . g$11539$UGjMA)
        (integer->char . g$11538$UGjMA)
        (infinite? . g$11537$UGjMA)
        (inexact? . g$11536$UGjMA)
        (inexact . g$11535$UGjMA)
        (imag-part . g$11534$UGjMA)
        (gcd . g$11533$UGjMA)
        (for-each . g$11532$UGjMA)
        (floor . g$11531$UGjMA)
        (finite? . g$11530$UGjMA)
        (expt . g$11529$UGjMA)
        (exp . g$11528$UGjMA)
        (exact? . g$11527$UGjMA)
        (exact-integer-sqrt . g$11526$UGjMA)
        (exact . g$11525$UGjMA)
        (even? . g$11524$UGjMA)
        (error . g$11523$UGjMA)
        (eqv? . g$11522$UGjMA)
        (equal? . g$11521$UGjMA)
        (eq? . g$11520$UGjMA)
        (dynamic-wind . g$11519$UGjMA)
        (div0-and-mod0 . g$11518$UGjMA)
        (mod0 . g$11517$UGjMA)
        (div0 . g$11516$UGjMA)
        (div-and-mod . g$11515$UGjMA)
        (mod . g$11514$UGjMA)
        (div . g$11513$UGjMA)
        (denominator . g$11512$UGjMA)
        (cos . g$11511$UGjMA)
        (cons . g$11510$UGjMA)
        (complex? . g$11509$UGjMA)
        (char? . g$11508$UGjMA)
        (char>? . g$11507$UGjMA)
        (char>=? . g$11506$UGjMA)
        (char=? . g$11505$UGjMA)
        (char<? . g$11504$UGjMA)
        (char<=? . g$11503$UGjMA)
        (char->integer . g$11502$UGjMA)
        (ceiling . g$11501$UGjMA)
        (call-with-values . g$11500$UGjMA)
        (call/cc . g$11499$UGjMA)
        (call-with-current-continuation . g$11498$UGjMA)
        (cddddr . g$5634$UGjMA)
        (cdddar . g$5633$UGjMA)
        (cddadr . g$5632$UGjMA)
        (cddaar . g$5631$UGjMA)
        (cdaddr . g$5630$UGjMA)
        (cdadar . g$5629$UGjMA)
        (cdaadr . g$5628$UGjMA)
        (cdaaar . g$5627$UGjMA)
        (cadddr . g$5626$UGjMA)
        (caddar . g$5625$UGjMA)
        (cadadr . g$5624$UGjMA)
        (cadaar . g$5623$UGjMA)
        (caaddr . g$5622$UGjMA)
        (caadar . g$5621$UGjMA)
        (caaadr . g$5620$UGjMA)
        (caaaar . g$5619$UGjMA)
        (cdddr . g$5618$UGjMA)
        (cddar . g$5617$UGjMA)
        (cdadr . g$5616$UGjMA)
        (cdaar . g$5615$UGjMA)
        (caddr . g$5614$UGjMA)
        (cadar . g$5613$UGjMA)
        (caadr . g$5612$UGjMA)
        (caaar . g$5611$UGjMA)
        (cddr . g$5610$UGjMA)
        (cdar . g$5609$UGjMA)
        (cadr . g$5608$UGjMA)
        (caar . g$5607$UGjMA)
        (cdr . g$11497$UGjMA)
        (car . g$11496$UGjMA)
        (boolean? . g$11495$UGjMA)
        (boolean=? . g$11494$UGjMA)
        (atan . g$11493$UGjMA)
        (assertion-violation . g$11492$UGjMA)
        (asin . g$11491$UGjMA)
        (apply . g$11490$UGjMA)
        (append . g$11489$UGjMA)
        (angle . g$11488$UGjMA)
        (acos . g$11487$UGjMA)
        (abs . g$11486$UGjMA)
        (/ . g$11485$UGjMA)
        (* . g$11484$UGjMA)
        (- . g$11483$UGjMA)
        (+ . g$11482$UGjMA)
        (>= . g$11481$UGjMA)
        (> . g$11480$UGjMA)
        (= . g$11479$UGjMA)
        (<= . g$11478$UGjMA)
        (< . g$11477$UGjMA)
        (&no-nans . g$11451$UGjMA)
        (&no-infinities . g$11450$UGjMA)
        (&i/o-encoding . g$11449$UGjMA)
        (&i/o-decoding . g$11448$UGjMA)
        (&i/o-port . g$11447$UGjMA)
        (&i/o-file-does-not-exist . g$11446$UGjMA)
        (&i/o-file-already-exists . g$11445$UGjMA)
        (&i/o-file-is-read-only . g$11444$UGjMA)
        (&i/o-file-protection . g$11443$UGjMA)
        (&i/o-filename . g$11442$UGjMA)
        (&i/o-invalid-position . g$11441$UGjMA)
        (&i/o-write . g$11440$UGjMA)
        (&i/o-read . g$11439$UGjMA)
        (&i/o . g$11438$UGjMA)
        (&non-continuable . g$11437$UGjMA)
        (&undefined . g$11436$UGjMA)
        (&syntax . g$11435$UGjMA)
        (&lexical . g$11434$UGjMA)
        (&implementation-restriction . g$11433$UGjMA)
        (&who . g$11431$UGjMA)
        (&irritants . g$11430$UGjMA)
        (&assertion . g$11429$UGjMA)
        (&violation . g$11428$UGjMA)
        (&error . g$11427$UGjMA)
        (&serious . g$11426$UGjMA)
        (&warning . g$11425$UGjMA)
        (&message . g$11424$UGjMA)
        (&condition . g$11423$UGjMA)
        (define-condition-type . g$11422$UGjMA)
        (define-enumeration . g$11421$UGjMA)
        (define-record-type . g$11420$UGjMA)
        (parent-rtd . g$11419$UGjMA)
        (nongenerative . g$11418$UGjMA)
        (opaque . g$11417$UGjMA)
        (sealed . g$11416$UGjMA)
        (protocol . g$11415$UGjMA)
        (parent . g$11414$UGjMA)
        (immutable . g$11413$UGjMA)
        (mutable . g$11412$UGjMA)
        (fields . g$11411$UGjMA)
        (error-handling-mode . g$11410$UGjMA)
        (file-options . g$11409$UGjMA)
        (buffer-mode . g$11408$UGjMA)
        (eol-style . g$11407$UGjMA)
        (guard . g$11406$UGjMA)
        (unsyntax-splicing . g$11400$UGjMA)
        (unsyntax . g$11399$UGjMA)
        (unquote-splicing . g$11398$UGjMA)
        (unquote . g$11397$UGjMA)
        (_ . g$11396$UGjMA)
        (else . g$11395$UGjMA)
        (=> . g$11394$UGjMA)
        (... . g$11393$UGjMA)
        (assert . g$11392$UGjMA)
        (endianness . g$11391$UGjMA)
        (or . g$11388$UGjMA)
        (and . g$11387$UGjMA)
        (do . g$11386$UGjMA)
        (cond . g$11385$UGjMA)
        (let* . g$11384$UGjMA)
        (let . g$11383$UGjMA)
        (identifier-syntax . g$11382$UGjMA)
        (with-syntax . g$11381$UGjMA)
        (quasisyntax . g$11380$UGjMA)
        (quasiquote . g$11379$UGjMA)
        (syntax-rules . g$11378$UGjMA)
        (let-values . g$11374$UGjMA)
        (let*-values . g$11373$UGjMA)
        (record-constructor-descriptor . g$11372$UGjMA)
        (record-type-descriptor . g$11371$UGjMA)
        (case . g$11369$UGjMA)
        (unless . g$11367$UGjMA)
        (when . g$11366$UGjMA)
        (if . g$11365$UGjMA)
        (letrec* . g$11364$UGjMA)
        (letrec . g$11363$UGjMA)
        (case-lambda . g$11361$UGjMA)
        (lambda . g$11360$UGjMA)
        (syntax . g$11359$UGjMA)
        (syntax-case . g$11358$UGjMA)
        (quote . g$11357$UGjMA)
        (letrec-syntax . g$11355$UGjMA)
        (let-syntax . g$11354$UGjMA)
        (set! . g$11353$UGjMA)
        (import . g$11352$UGjMA)
        (library . g$11351$UGjMA)
        (begin . g$11350$UGjMA)
        (define-syntax . g$11348$UGjMA)
        (define . g$11347$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12001$UGjMA
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((interaction-environment . g$8385$UGjMA)
        (scheme-report-environment . g$8363$UGjMA)
        (quotient . g$6511$UGjMA)
        (null-environment . g$8362$UGjMA)
        (remainder . g$6512$UGjMA)
        (modulo . g$6513$UGjMA)
        (inexact->exact . g$11752$UGjMA)
        (force . g$11751$UGjMA)
        (exact->inexact . g$11750$UGjMA)
        (delay . g$11390$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12002$UGjMA
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$11386$UGjMA)
        (unless . g$11367$UGjMA)
        (when . g$11366$UGjMA)
        (case-lambda . g$11361$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12003$UGjMA
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$8365$UGjMA) (environment . g$8361$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12004$UGjMA
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$11746$UGjMA) (set-car! . g$11745$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12005$UGjMA
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$11748$UGjMA) (string-set! . g$11747$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12006$UGjMA
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$11749$UGjMA) (command-line . g$11313$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12007$UGjMA
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$7987$UGjMA)
        (identifier? . g$8380$UGjMA)
        (generate-temporaries . g$8372$UGjMA)
        (free-identifier=? . g$8373$UGjMA)
        (syntax->datum . g$8382$UGjMA)
        (datum->syntax . g$8381$UGjMA)
        (bound-identifier=? . g$8374$UGjMA)
        (syntax-violation . g$8379$UGjMA)
        (unsyntax-splicing . g$11400$UGjMA)
        (unsyntax . g$11399$UGjMA)
        (_ . g$11396$UGjMA)
        (... . g$11393$UGjMA)
        (with-syntax . g$11381$UGjMA)
        (quasisyntax . g$11380$UGjMA)
        (syntax . g$11359$UGjMA)
        (syntax-case . g$11358$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12008$UGjMA
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$6018$UGjMA)
        (file-exists? . g$6017$UGjMA)
        (make-i/o-write-error . g$6772$UGjMA)
        (make-i/o-read-error . g$6758$UGjMA)
        (make-i/o-port-error . g$6877$UGjMA)
        (make-i/o-invalid-position-error . g$6787$UGjMA)
        (make-i/o-filename-error . g$6804$UGjMA)
        (make-i/o-file-protection-error . g$6820$UGjMA)
        (make-i/o-file-is-read-only-error . g$6834$UGjMA)
        (make-i/o-file-does-not-exist-error . g$6862$UGjMA)
        (make-i/o-file-already-exists-error . g$6848$UGjMA)
        (make-i/o-error . g$6744$UGjMA)
        (i/o-write-error? . g$6773$UGjMA)
        (i/o-read-error? . g$6759$UGjMA)
        (i/o-port-error? . g$6879$UGjMA)
        (i/o-invalid-position-error? . g$6789$UGjMA)
        (i/o-filename-error? . g$6806$UGjMA)
        (i/o-file-protection-error? . g$6821$UGjMA)
        (i/o-file-is-read-only-error? . g$6835$UGjMA)
        (i/o-file-does-not-exist-error? . g$6863$UGjMA)
        (i/o-file-already-exists-error? . g$6849$UGjMA)
        (i/o-error? . g$6745$UGjMA)
        (i/o-error-port . g$6880$UGjMA)
        (i/o-error-filename . g$6807$UGjMA)
        (&i/o-port . g$11447$UGjMA)
        (&i/o-file-does-not-exist . g$11446$UGjMA)
        (&i/o-file-already-exists . g$11445$UGjMA)
        (&i/o-file-is-read-only . g$11444$UGjMA)
        (&i/o-file-protection . g$11443$UGjMA)
        (&i/o-filename . g$11442$UGjMA)
        (&i/o-invalid-position . g$11441$UGjMA)
        (&i/o-write . g$11440$UGjMA)
        (&i/o-read . g$11439$UGjMA)
        (&i/o . g$11438$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12009$UGjMA
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$11850$UGjMA)
        (vector-sort . g$11849$UGjMA)
        (list-sort . g$6524$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12010$UGjMA
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$11609$UGjMA)
        (vector? . g$11608$UGjMA)
        (vector-set! . g$11607$UGjMA)
        (vector-ref . g$11606$UGjMA)
        (vector-map . g$11605$UGjMA)
        (vector-length . g$11604$UGjMA)
        (vector-for-each . g$11603$UGjMA)
        (vector-fill! . g$11602$UGjMA)
        (vector->list . g$11601$UGjMA)
        (vector . g$11600$UGjMA)
        (values . g$11599$UGjMA)
        (truncate . g$11598$UGjMA)
        (tan . g$11597$UGjMA)
        (symbol? . g$11596$UGjMA)
        (symbol=? . g$11595$UGjMA)
        (symbol->string . g$11594$UGjMA)
        (substring . g$11593$UGjMA)
        (string? . g$11592$UGjMA)
        (string>? . g$11591$UGjMA)
        (string>=? . g$11590$UGjMA)
        (string=? . g$11589$UGjMA)
        (string<? . g$11588$UGjMA)
        (string<=? . g$11587$UGjMA)
        (string-ref . g$11586$UGjMA)
        (string-length . g$11585$UGjMA)
        (string-for-each . g$11584$UGjMA)
        (string-copy . g$11583$UGjMA)
        (string-append . g$11582$UGjMA)
        (string->symbol . g$11581$UGjMA)
        (string->number . g$11580$UGjMA)
        (string->list . g$11579$UGjMA)
        (string . g$11578$UGjMA)
        (sqrt . g$11577$UGjMA)
        (sin . g$11576$UGjMA)
        (round . g$11575$UGjMA)
        (reverse . g$11574$UGjMA)
        (real? . g$11573$UGjMA)
        (real-valued? . g$11572$UGjMA)
        (real-part . g$11571$UGjMA)
        (rationalize . g$5635$UGjMA)
        (rational? . g$11570$UGjMA)
        (rational-valued? . g$11569$UGjMA)
        (procedure? . g$11568$UGjMA)
        (positive? . g$11567$UGjMA)
        (pair? . g$11566$UGjMA)
        (odd? . g$11565$UGjMA)
        (numerator . g$11564$UGjMA)
        (number? . g$11563$UGjMA)
        (number->string . g$11562$UGjMA)
        (null? . g$11561$UGjMA)
        (not . g$11560$UGjMA)
        (negative? . g$11559$UGjMA)
        (nan? . g$11558$UGjMA)
        (min . g$11557$UGjMA)
        (max . g$11556$UGjMA)
        (map . g$11555$UGjMA)
        (make-vector . g$11554$UGjMA)
        (make-string . g$11553$UGjMA)
        (make-rectangular . g$11552$UGjMA)
        (make-polar . g$11551$UGjMA)
        (magnitude . g$11550$UGjMA)
        (log . g$11549$UGjMA)
        (list? . g$11548$UGjMA)
        (list-tail . g$11547$UGjMA)
        (list-ref . g$11546$UGjMA)
        (list->vector . g$11545$UGjMA)
        (list->string . g$11544$UGjMA)
        (list . g$11543$UGjMA)
        (length . g$11542$UGjMA)
        (lcm . g$11541$UGjMA)
        (integer? . g$11540$UGjMA)
        (integer-valued? . g$11539$UGjMA)
        (integer->char . g$11538$UGjMA)
        (infinite? . g$11537$UGjMA)
        (inexact? . g$11536$UGjMA)
        (inexact . g$11535$UGjMA)
        (imag-part . g$11534$UGjMA)
        (gcd . g$11533$UGjMA)
        (for-each . g$11532$UGjMA)
        (floor . g$11531$UGjMA)
        (finite? . g$11530$UGjMA)
        (expt . g$11529$UGjMA)
        (exp . g$11528$UGjMA)
        (exact? . g$11527$UGjMA)
        (exact-integer-sqrt . g$11526$UGjMA)
        (exact . g$11525$UGjMA)
        (even? . g$11524$UGjMA)
        (error . g$11523$UGjMA)
        (eqv? . g$11522$UGjMA)
        (equal? . g$11521$UGjMA)
        (eq? . g$11520$UGjMA)
        (dynamic-wind . g$11519$UGjMA)
        (div0-and-mod0 . g$11518$UGjMA)
        (mod0 . g$11517$UGjMA)
        (div0 . g$11516$UGjMA)
        (div-and-mod . g$11515$UGjMA)
        (mod . g$11514$UGjMA)
        (div . g$11513$UGjMA)
        (denominator . g$11512$UGjMA)
        (cos . g$11511$UGjMA)
        (cons . g$11510$UGjMA)
        (complex? . g$11509$UGjMA)
        (char? . g$11508$UGjMA)
        (char>? . g$11507$UGjMA)
        (char>=? . g$11506$UGjMA)
        (char=? . g$11505$UGjMA)
        (char<? . g$11504$UGjMA)
        (char<=? . g$11503$UGjMA)
        (char->integer . g$11502$UGjMA)
        (ceiling . g$11501$UGjMA)
        (call-with-values . g$11500$UGjMA)
        (call/cc . g$11499$UGjMA)
        (call-with-current-continuation . g$11498$UGjMA)
        (cddddr . g$5634$UGjMA)
        (cdddar . g$5633$UGjMA)
        (cddadr . g$5632$UGjMA)
        (cddaar . g$5631$UGjMA)
        (cdaddr . g$5630$UGjMA)
        (cdadar . g$5629$UGjMA)
        (cdaadr . g$5628$UGjMA)
        (cdaaar . g$5627$UGjMA)
        (cadddr . g$5626$UGjMA)
        (caddar . g$5625$UGjMA)
        (cadadr . g$5624$UGjMA)
        (cadaar . g$5623$UGjMA)
        (caaddr . g$5622$UGjMA)
        (caadar . g$5621$UGjMA)
        (caaadr . g$5620$UGjMA)
        (caaaar . g$5619$UGjMA)
        (cdddr . g$5618$UGjMA)
        (cddar . g$5617$UGjMA)
        (cdadr . g$5616$UGjMA)
        (cdaar . g$5615$UGjMA)
        (caddr . g$5614$UGjMA)
        (cadar . g$5613$UGjMA)
        (caadr . g$5612$UGjMA)
        (caaar . g$5611$UGjMA)
        (cddr . g$5610$UGjMA)
        (cdar . g$5609$UGjMA)
        (cadr . g$5608$UGjMA)
        (caar . g$5607$UGjMA)
        (cdr . g$11497$UGjMA)
        (car . g$11496$UGjMA)
        (boolean? . g$11495$UGjMA)
        (boolean=? . g$11494$UGjMA)
        (atan . g$11493$UGjMA)
        (assertion-violation . g$11492$UGjMA)
        (asin . g$11491$UGjMA)
        (apply . g$11490$UGjMA)
        (append . g$11489$UGjMA)
        (angle . g$11488$UGjMA)
        (acos . g$11487$UGjMA)
        (abs . g$11486$UGjMA)
        (/ . g$11485$UGjMA)
        (* . g$11484$UGjMA)
        (- . g$11483$UGjMA)
        (+ . g$11482$UGjMA)
        (>= . g$11481$UGjMA)
        (> . g$11480$UGjMA)
        (= . g$11479$UGjMA)
        (<= . g$11478$UGjMA)
        (< . g$11477$UGjMA)
        (unquote-splicing . g$11398$UGjMA)
        (unquote . g$11397$UGjMA)
        (_ . g$11396$UGjMA)
        (else . g$11395$UGjMA)
        (=> . g$11394$UGjMA)
        (... . g$11393$UGjMA)
        (assert . g$11392$UGjMA)
        (or . g$11388$UGjMA)
        (and . g$11387$UGjMA)
        (cond . g$11385$UGjMA)
        (let* . g$11384$UGjMA)
        (let . g$11383$UGjMA)
        (identifier-syntax . g$11382$UGjMA)
        (quasiquote . g$11379$UGjMA)
        (syntax-rules . g$11378$UGjMA)
        (let-values . g$11374$UGjMA)
        (let*-values . g$11373$UGjMA)
        (case . g$11369$UGjMA)
        (if . g$11365$UGjMA)
        (letrec* . g$11364$UGjMA)
        (letrec . g$11363$UGjMA)
        (lambda . g$11360$UGjMA)
        (quote . g$11357$UGjMA)
        (letrec-syntax . g$11355$UGjMA)
        (let-syntax . g$11354$UGjMA)
        (set! . g$11353$UGjMA)
        (begin . g$11350$UGjMA)
        (define-syntax . g$11348$UGjMA)
        (define . g$11347$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12011$UGjMA
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$6098$UGjMA)
        (remv . g$6099$UGjMA)
        (remp . g$6084$UGjMA)
        (remq . g$6100$UGjMA)
        (partition . g$6083$UGjMA)
        (memv . g$11744$UGjMA)
        (memq . g$11743$UGjMA)
        (memp . g$6090$UGjMA)
        (member . g$6089$UGjMA)
        (exists . g$6094$UGjMA)
        (for-all . g$6093$UGjMA)
        (fold-right . g$6097$UGjMA)
        (fold-left . g$6096$UGjMA)
        (find . g$6082$UGjMA)
        (filter . g$6085$UGjMA)
        (cons* . g$6095$UGjMA)
        (assv . g$6086$UGjMA)
        (assq . g$11742$UGjMA)
        (assp . g$6088$UGjMA)
        (assoc . g$6087$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12012$UGjMA
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$11836$UGjMA)
        (call-with-input-file . g$11835$UGjMA)
        (write-char . g$11834$UGjMA)
        (write . g$11833$UGjMA)
        (with-output-to-file . g$11832$UGjMA)
        (with-input-from-file . g$11831$UGjMA)
        (read-char . g$11830$UGjMA)
        (read . g$11829$UGjMA)
        (peek-char . g$11828$UGjMA)
        (open-output-file . g$11827$UGjMA)
        (open-input-file . g$11826$UGjMA)
        (newline . g$11825$UGjMA)
        (display . g$11824$UGjMA)
        (close-output-port . g$11823$UGjMA)
        (close-input-port . g$11822$UGjMA)
        (eof-object? . g$11821$UGjMA)
        (eof-object . g$11820$UGjMA)
        (current-error-port . g$11819$UGjMA)
        (current-output-port . g$11818$UGjMA)
        (current-input-port . g$11817$UGjMA)
        (output-port? . g$11816$UGjMA)
        (input-port? . g$11815$UGjMA)
        (make-i/o-write-error . g$6772$UGjMA)
        (make-i/o-read-error . g$6758$UGjMA)
        (make-i/o-port-error . g$6877$UGjMA)
        (make-i/o-invalid-position-error . g$6787$UGjMA)
        (make-i/o-filename-error . g$6804$UGjMA)
        (make-i/o-file-protection-error . g$6820$UGjMA)
        (make-i/o-file-is-read-only-error . g$6834$UGjMA)
        (make-i/o-file-does-not-exist-error . g$6862$UGjMA)
        (make-i/o-file-already-exists-error . g$6848$UGjMA)
        (make-i/o-error . g$6744$UGjMA)
        (i/o-write-error? . g$6773$UGjMA)
        (i/o-read-error? . g$6759$UGjMA)
        (i/o-port-error? . g$6879$UGjMA)
        (i/o-invalid-position-error? . g$6789$UGjMA)
        (i/o-filename-error? . g$6806$UGjMA)
        (i/o-file-protection-error? . g$6821$UGjMA)
        (i/o-file-is-read-only-error? . g$6835$UGjMA)
        (i/o-file-does-not-exist-error? . g$6863$UGjMA)
        (i/o-file-already-exists-error? . g$6849$UGjMA)
        (i/o-error? . g$6745$UGjMA)
        (i/o-error-port . g$6880$UGjMA)
        (i/o-error-filename . g$6807$UGjMA)
        (&i/o-port . g$11447$UGjMA)
        (&i/o-file-does-not-exist . g$11446$UGjMA)
        (&i/o-file-already-exists . g$11445$UGjMA)
        (&i/o-file-is-read-only . g$11444$UGjMA)
        (&i/o-file-protection . g$11443$UGjMA)
        (&i/o-filename . g$11442$UGjMA)
        (&i/o-invalid-position . g$11441$UGjMA)
        (&i/o-write . g$11440$UGjMA)
        (&i/o-read . g$11439$UGjMA)
        (&i/o . g$11438$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12013$UGjMA
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$11774$UGjMA)
        (utf32->string . g$11733$UGjMA)
        (utf16->string . g$11732$UGjMA)
        (utf8->string . g$11731$UGjMA)
        (uint-list->bytevector . g$11730$UGjMA)
        (u8-list->bytevector . g$11729$UGjMA)
        (string->utf8 . g$11728$UGjMA)
        (string->utf32 . g$11727$UGjMA)
        (string->utf16 . g$11726$UGjMA)
        (sint-list->bytevector . g$11725$UGjMA)
        (native-endianness . g$6174$UGjMA)
        (bytevector? . g$11724$UGjMA)
        (bytevector=? . g$11723$UGjMA)
        (bytevector-uint-set! . g$11722$UGjMA)
        (bytevector-uint-ref . g$11721$UGjMA)
        (bytevector-u8-set! . g$11720$UGjMA)
        (bytevector-u8-ref . g$11719$UGjMA)
        (bytevector-u64-set! . g$6195$UGjMA)
        (bytevector-u64-ref . g$6191$UGjMA)
        (bytevector-u64-native-set! . g$6197$UGjMA)
        (bytevector-u64-native-ref . g$6193$UGjMA)
        (bytevector-u32-set! . g$6187$UGjMA)
        (bytevector-u32-ref . g$6183$UGjMA)
        (bytevector-u32-native-set! . g$6189$UGjMA)
        (bytevector-u32-native-ref . g$6185$UGjMA)
        (bytevector-u16-set! . g$6179$UGjMA)
        (bytevector-u16-ref . g$6175$UGjMA)
        (bytevector-u16-native-set! . g$6181$UGjMA)
        (bytevector-u16-native-ref . g$6177$UGjMA)
        (bytevector-sint-set! . g$11718$UGjMA)
        (bytevector-sint-ref . g$11717$UGjMA)
        (bytevector-s8-set! . g$11716$UGjMA)
        (bytevector-s8-ref . g$11715$UGjMA)
        (bytevector-s64-set! . g$6196$UGjMA)
        (bytevector-s64-ref . g$6192$UGjMA)
        (bytevector-s64-native-set! . g$6198$UGjMA)
        (bytevector-s64-native-ref . g$6194$UGjMA)
        (bytevector-s32-set! . g$6188$UGjMA)
        (bytevector-s32-ref . g$6184$UGjMA)
        (bytevector-s32-native-set! . g$6190$UGjMA)
        (bytevector-s32-native-ref . g$6186$UGjMA)
        (bytevector-s16-set! . g$6180$UGjMA)
        (bytevector-s16-ref . g$6176$UGjMA)
        (bytevector-s16-native-set! . g$6182$UGjMA)
        (bytevector-s16-native-ref . g$6178$UGjMA)
        (bytevector-length . g$11714$UGjMA)
        (bytevector-ieee-single-set! . g$11713$UGjMA)
        (bytevector-ieee-single-ref . g$11712$UGjMA)
        (bytevector-ieee-single-native-set! . g$6201$UGjMA)
        (bytevector-ieee-single-native-ref . g$6199$UGjMA)
        (bytevector-ieee-double-set! . g$11711$UGjMA)
        (bytevector-ieee-double-ref . g$11710$UGjMA)
        (bytevector-ieee-double-native-set! . g$6202$UGjMA)
        (bytevector-ieee-double-native-ref . g$6200$UGjMA)
        (bytevector-fill! . g$11709$UGjMA)
        (bytevector-copy! . g$11708$UGjMA)
        (bytevector-copy . g$11707$UGjMA)
        (bytevector->uint-list . g$11706$UGjMA)
        (bytevector->u8-list . g$11705$UGjMA)
        (bytevector->sint-list . g$11704$UGjMA)
        (endianness . g$11391$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12014$UGjMA
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$11896$UGjMA)
        (string-titlecase . g$11895$UGjMA)
        (string-normalize-nfkd . g$11894$UGjMA)
        (string-normalize-nfkc . g$11893$UGjMA)
        (string-normalize-nfd . g$11892$UGjMA)
        (string-normalize-nfc . g$11891$UGjMA)
        (string-foldcase . g$11890$UGjMA)
        (string-downcase . g$11889$UGjMA)
        (string-ci>? . g$11888$UGjMA)
        (string-ci>=? . g$11887$UGjMA)
        (string-ci=? . g$11886$UGjMA)
        (string-ci<? . g$11885$UGjMA)
        (string-ci<=? . g$11884$UGjMA)
        (char-whitespace? . g$11883$UGjMA)
        (char-upper-case? . g$11882$UGjMA)
        (char-title-case? . g$11881$UGjMA)
        (char-numeric? . g$11880$UGjMA)
        (char-lower-case? . g$11879$UGjMA)
        (char-general-category . g$11878$UGjMA)
        (char-upcase . g$11877$UGjMA)
        (char-titlecase . g$11876$UGjMA)
        (char-foldcase . g$11875$UGjMA)
        (char-downcase . g$11874$UGjMA)
        (char-ci>? . g$11873$UGjMA)
        (char-ci>=? . g$11872$UGjMA)
        (char-ci=? . g$11871$UGjMA)
        (char-ci<? . g$11870$UGjMA)
        (char-ci<=? . g$11869$UGjMA)
        (char-alphabetic? . g$11868$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12015$UGjMA
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$11741$UGjMA)
        (raise-continuable . g$11740$UGjMA)
        (raise . g$11739$UGjMA)
        (guard . g$11406$UGjMA)
        (else . g$11395$UGjMA)
        (=> . g$11394$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12016$UGjMA
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$6609$UGjMA)
        (bitwise-reverse-bit-field . g$6610$UGjMA)
        (bitwise-length . g$11619$UGjMA)
        (bitwise-if . g$6603$UGjMA)
        (bitwise-first-bit-set . g$11618$UGjMA)
        (bitwise-copy-bit-field . g$6606$UGjMA)
        (bitwise-copy-bit . g$6604$UGjMA)
        (bitwise-bit-set? . g$11617$UGjMA)
        (bitwise-bit-field . g$11616$UGjMA)
        (bitwise-bit-count . g$11615$UGjMA)
        (bitwise-xor . g$11614$UGjMA)
        (bitwise-ior . g$11613$UGjMA)
        (bitwise-and . g$11612$UGjMA)
        (bitwise-not . g$11611$UGjMA)
        (bitwise-arithmetic-shift-right . g$6608$UGjMA)
        (bitwise-arithmetic-shift-left . g$6607$UGjMA)
        (bitwise-arithmetic-shift . g$11610$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12017$UGjMA
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$11657$UGjMA)
        (fxxor . g$11656$UGjMA)
        (fxrotate-bit-field . g$6661$UGjMA)
        (fxreverse-bit-field . g$11655$UGjMA)
        (fxpositive? . g$11654$UGjMA)
        (fxodd? . g$11653$UGjMA)
        (fxnot . g$11652$UGjMA)
        (fxnegative? . g$11651$UGjMA)
        (fxmod0 . g$11650$UGjMA)
        (fxmod . g$11649$UGjMA)
        (fxmin . g$11648$UGjMA)
        (fxmax . g$11647$UGjMA)
        (fxlength . g$11646$UGjMA)
        (fxior . g$11645$UGjMA)
        (fxif . g$6655$UGjMA)
        (fxfirst-bit-set . g$11644$UGjMA)
        (fxeven? . g$11643$UGjMA)
        (fxdiv0-and-mod0 . g$11642$UGjMA)
        (fxdiv0 . g$11641$UGjMA)
        (fxdiv-and-mod . g$11640$UGjMA)
        (fxdiv . g$11639$UGjMA)
        (fxcopy-bit-field . g$6658$UGjMA)
        (fxcopy-bit . g$6656$UGjMA)
        (fxbit-set? . g$11638$UGjMA)
        (fxbit-field . g$6657$UGjMA)
        (fxbit-count . g$11637$UGjMA)
        (fxarithmetic-shift-right . g$6660$UGjMA)
        (fxarithmetic-shift-left . g$6659$UGjMA)
        (fxarithmetic-shift . g$11636$UGjMA)
        (fxand . g$11635$UGjMA)
        (fx>? . g$11634$UGjMA)
        (fx>=? . g$11633$UGjMA)
        (fx=? . g$11632$UGjMA)
        (fx<? . g$11631$UGjMA)
        (fx<=? . g$11630$UGjMA)
        (fx-/carry . g$11629$UGjMA)
        (fx- . g$11628$UGjMA)
        (fx+/carry . g$11627$UGjMA)
        (fx+ . g$11626$UGjMA)
        (fx*/carry . g$11625$UGjMA)
        (fx* . g$11624$UGjMA)
        (greatest-fixnum . g$11623$UGjMA)
        (least-fixnum . g$11622$UGjMA)
        (fixnum-width . g$11621$UGjMA)
        (fixnum? . g$11620$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12018$UGjMA
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$6730$UGjMA)
        (no-infinities-violation? . g$6716$UGjMA)
        (make-no-nans-violation . g$6729$UGjMA)
        (make-no-infinities-violation . g$6715$UGjMA)
        (real->flonum . g$11703$UGjMA)
        (flzero? . g$11702$UGjMA)
        (fltruncate . g$11701$UGjMA)
        (fltan . g$11700$UGjMA)
        (flsqrt . g$11699$UGjMA)
        (flsin . g$11698$UGjMA)
        (flround . g$11697$UGjMA)
        (flpositive? . g$11696$UGjMA)
        (flonum? . g$11695$UGjMA)
        (flodd? . g$11694$UGjMA)
        (flnumerator . g$11693$UGjMA)
        (flnegative? . g$11692$UGjMA)
        (flnan? . g$11691$UGjMA)
        (flmod0 . g$11690$UGjMA)
        (flmod . g$11689$UGjMA)
        (flmin . g$11688$UGjMA)
        (flmax . g$11687$UGjMA)
        (fllog . g$11686$UGjMA)
        (flinteger? . g$11685$UGjMA)
        (flinfinite? . g$11684$UGjMA)
        (flfloor . g$11683$UGjMA)
        (flfinite? . g$11682$UGjMA)
        (flexpt . g$11681$UGjMA)
        (flexp . g$11680$UGjMA)
        (fleven? . g$11679$UGjMA)
        (fldiv0-and-mod0 . g$11678$UGjMA)
        (fldiv0 . g$11677$UGjMA)
        (fldiv-and-mod . g$11676$UGjMA)
        (fldiv . g$11675$UGjMA)
        (fldenominator . g$11674$UGjMA)
        (flcos . g$11673$UGjMA)
        (flceiling . g$11672$UGjMA)
        (flatan . g$11671$UGjMA)
        (flasin . g$11670$UGjMA)
        (flacos . g$11669$UGjMA)
        (flabs . g$11668$UGjMA)
        (fl>? . g$11667$UGjMA)
        (fl>=? . g$11666$UGjMA)
        (fl=? . g$11665$UGjMA)
        (fl<? . g$11664$UGjMA)
        (fl<=? . g$11663$UGjMA)
        (fl/ . g$11662$UGjMA)
        (fl- . g$11661$UGjMA)
        (fl+ . g$11660$UGjMA)
        (fl* . g$11659$UGjMA)
        (fixnum->flonum . g$11658$UGjMA)
        (&no-nans . g$11451$UGjMA)
        (&no-infinities . g$11450$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12019$UGjMA
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$11848$UGjMA)
        (string-ci-hash . g$11847$UGjMA)
        (string-hash . g$11846$UGjMA)
        (equal-hash . g$11845$UGjMA)
        (hashtable-equivalence-function . g$11844$UGjMA)
        (make-hashtable . g$11843$UGjMA)
        (hashtable-hash-function . g$11842$UGjMA)
        (make-eqv-hashtable . g$5985$UGjMA)
        (make-eq-hashtable . g$5984$UGjMA)
        (hashtable? . g$11841$UGjMA)
        (hashtable-update! . g$5991$UGjMA)
        (hashtable-size . g$5986$UGjMA)
        (hashtable-set! . g$5988$UGjMA)
        (hashtable-ref . g$5987$UGjMA)
        (hashtable-mutable? . g$11840$UGjMA)
        (hashtable-keys . g$11839$UGjMA)
        (hashtable-entries . g$11838$UGjMA)
        (hashtable-delete! . g$5989$UGjMA)
        (hashtable-copy . g$11837$UGjMA)
        (hashtable-contains? . g$5990$UGjMA)
        (hashtable-clear! . g$5992$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12020$UGjMA
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$11821$UGjMA)
        (eof-object . g$11820$UGjMA)
        (current-error-port . g$11819$UGjMA)
        (current-output-port . g$11818$UGjMA)
        (current-input-port . g$11817$UGjMA)
        (output-port? . g$11816$UGjMA)
        (input-port? . g$11815$UGjMA)
        (utf-8-codec . g$11814$UGjMA)
        (utf-16-codec . g$11813$UGjMA)
        (transcoder-error-handling-mode . g$11812$UGjMA)
        (transcoder-eol-style . g$11811$UGjMA)
        (transcoder-codec . g$11810$UGjMA)
        (transcoded-port . g$11809$UGjMA)
        (textual-port? . g$11808$UGjMA)
        (string->bytevector . g$11807$UGjMA)
        (standard-output-port . g$11806$UGjMA)
        (standard-input-port . g$11805$UGjMA)
        (standard-error-port . g$11804$UGjMA)
        (set-port-position! . g$11803$UGjMA)
        (put-u8 . g$11802$UGjMA)
        (put-string . g$11801$UGjMA)
        (put-datum . g$11800$UGjMA)
        (put-char . g$11799$UGjMA)
        (put-bytevector . g$11798$UGjMA)
        (port? . g$11797$UGjMA)
        (port-transcoder . g$11796$UGjMA)
        (port-position . g$11795$UGjMA)
        (port-has-set-port-position!? . g$11794$UGjMA)
        (port-has-port-position? . g$11793$UGjMA)
        (port-eof? . g$11792$UGjMA)
        (output-port-buffer-mode . g$11791$UGjMA)
        (open-string-output-port . g$6915$UGjMA)
        (open-string-input-port . g$11790$UGjMA)
        (open-file-output-port . g$11789$UGjMA)
        (open-file-input/output-port . g$11788$UGjMA)
        (open-file-input-port . g$11787$UGjMA)
        (open-bytevector-output-port . g$11786$UGjMA)
        (open-bytevector-input-port . g$11785$UGjMA)
        (native-transcoder . g$11784$UGjMA)
        (native-eol-style . g$11783$UGjMA)
        (make-transcoder . g$11782$UGjMA)
        (latin-1-codec . g$11781$UGjMA)
        (make-i/o-write-error . g$6772$UGjMA)
        (make-i/o-read-error . g$6758$UGjMA)
        (make-i/o-port-error . g$6877$UGjMA)
        (make-i/o-invalid-position-error . g$6787$UGjMA)
        (make-i/o-filename-error . g$6804$UGjMA)
        (make-i/o-file-protection-error . g$6820$UGjMA)
        (make-i/o-file-is-read-only-error . g$6834$UGjMA)
        (make-i/o-file-does-not-exist-error . g$6862$UGjMA)
        (make-i/o-file-already-exists-error . g$6848$UGjMA)
        (make-i/o-error . g$6744$UGjMA)
        (make-i/o-encoding-error . g$6908$UGjMA)
        (make-i/o-decoding-error . g$6893$UGjMA)
        (make-custom-textual-output-port . g$11780$UGjMA)
        (make-custom-textual-input/output-port . g$11779$UGjMA)
        (make-custom-textual-input-port . g$11778$UGjMA)
        (make-custom-binary-output-port . g$11777$UGjMA)
        (make-custom-binary-input/output-port . g$11776$UGjMA)
        (make-custom-binary-input-port . g$11775$UGjMA)
        (lookahead-u8 . g$11773$UGjMA)
        (lookahead-char . g$11772$UGjMA)
        (i/o-write-error? . g$6773$UGjMA)
        (i/o-read-error? . g$6759$UGjMA)
        (i/o-port-error? . g$6879$UGjMA)
        (i/o-invalid-position-error? . g$6789$UGjMA)
        (i/o-filename-error? . g$6806$UGjMA)
        (i/o-file-protection-error? . g$6821$UGjMA)
        (i/o-file-is-read-only-error? . g$6835$UGjMA)
        (i/o-file-does-not-exist-error? . g$6863$UGjMA)
        (i/o-file-already-exists-error? . g$6849$UGjMA)
        (i/o-error? . g$6745$UGjMA)
        (i/o-error-port . g$6880$UGjMA)
        (i/o-error-filename . g$6807$UGjMA)
        (i/o-encoding-error? . g$6910$UGjMA)
        (i/o-encoding-error-char . g$6911$UGjMA)
        (i/o-decoding-error? . g$6894$UGjMA)
        (get-u8 . g$11771$UGjMA)
        (get-string-n! . g$11770$UGjMA)
        (get-string-n . g$11769$UGjMA)
        (get-string-all . g$11768$UGjMA)
        (get-line . g$11767$UGjMA)
        (get-datum . g$11766$UGjMA)
        (get-char . g$11765$UGjMA)
        (get-bytevector-some . g$11764$UGjMA)
        (get-bytevector-n! . g$11763$UGjMA)
        (get-bytevector-n . g$11762$UGjMA)
        (get-bytevector-all . g$11761$UGjMA)
        (flush-output-port . g$11760$UGjMA)
        (close-port . g$11759$UGjMA)
        (call-with-string-output-port . g$11758$UGjMA)
        (call-with-port . g$11757$UGjMA)
        (call-with-bytevector-output-port . g$11756$UGjMA)
        (bytevector->string . g$11755$UGjMA)
        (buffer-mode? . g$11754$UGjMA)
        (binary-port? . g$11753$UGjMA)
        (&i/o-encoding . g$11449$UGjMA)
        (&i/o-decoding . g$11448$UGjMA)
        (&i/o-port . g$11447$UGjMA)
        (&i/o-file-does-not-exist . g$11446$UGjMA)
        (&i/o-file-already-exists . g$11445$UGjMA)
        (&i/o-file-is-read-only . g$11444$UGjMA)
        (&i/o-file-protection . g$11443$UGjMA)
        (&i/o-filename . g$11442$UGjMA)
        (&i/o-invalid-position . g$11441$UGjMA)
        (&i/o-write . g$11440$UGjMA)
        (&i/o-read . g$11439$UGjMA)
        (&i/o . g$11438$UGjMA)
        (error-handling-mode . g$11410$UGjMA)
        (file-options . g$11409$UGjMA)
        (buffer-mode . g$11408$UGjMA)
        (eol-style . g$11407$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12021$UGjMA
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$6964$UGjMA)
        (enum-set=? . g$6971$UGjMA)
        (enum-set-universe . g$6965$UGjMA)
        (enum-set-union . g$6972$UGjMA)
        (enum-set-subset? . g$6970$UGjMA)
        (enum-set-projection . g$6976$UGjMA)
        (enum-set-member? . g$6969$UGjMA)
        (enum-set-intersection . g$6973$UGjMA)
        (enum-set-indexer . g$6966$UGjMA)
        (enum-set-difference . g$6974$UGjMA)
        (enum-set-constructor . g$6967$UGjMA)
        (enum-set-complement . g$6975$UGjMA)
        (enum-set->list . g$6968$UGjMA)
        (define-enumeration . g$11421$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12022$UGjMA
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$6422$UGjMA)
        (warning? . g$6333$UGjMA)
        (violation? . g$6375$UGjMA)
        (undefined-violation? . g$6499$UGjMA)
        (syntax-violation? . g$6483$UGjMA)
        (syntax-violation-subform . g$6485$UGjMA)
        (syntax-violation-form . g$6484$UGjMA)
        (syntax-violation . g$8379$UGjMA)
        (simple-conditions . g$11738$UGjMA)
        (serious-condition? . g$6347$UGjMA)
        (non-continuable-violation? . g$6437$UGjMA)
        (message-condition? . g$6318$UGjMA)
        (make-who-condition . g$6420$UGjMA)
        (make-warning . g$6332$UGjMA)
        (make-violation . g$6374$UGjMA)
        (make-undefined-violation . g$6498$UGjMA)
        (make-syntax-violation . g$6480$UGjMA)
        (make-serious-condition . g$6346$UGjMA)
        (make-non-continuable-violation . g$6436$UGjMA)
        (make-message-condition . g$6316$UGjMA)
        (make-lexical-violation . g$6464$UGjMA)
        (make-irritants-condition . g$6403$UGjMA)
        (make-implementation-restriction-violation . g$6450$UGjMA)
        (make-error . g$6360$UGjMA)
        (make-assertion-violation . g$6388$UGjMA)
        (lexical-violation? . g$6465$UGjMA)
        (irritants-condition? . g$6405$UGjMA)
        (implementation-restriction-violation? . g$6451$UGjMA)
        (error? . g$6361$UGjMA)
        (condition-who . g$6423$UGjMA)
        (condition-predicate . g$11737$UGjMA)
        (condition-message . g$6319$UGjMA)
        (condition-irritants . g$6406$UGjMA)
        (condition-accessor . g$11736$UGjMA)
        (condition . g$11735$UGjMA)
        (assertion-violation? . g$6389$UGjMA)
        (condition? . g$11734$UGjMA)
        (&non-continuable . g$11437$UGjMA)
        (&undefined . g$11436$UGjMA)
        (&syntax . g$11435$UGjMA)
        (&lexical . g$11434$UGjMA)
        (&implementation-restriction . g$11433$UGjMA)
        (&who . g$11431$UGjMA)
        (&irritants . g$11430$UGjMA)
        (&assertion . g$11429$UGjMA)
        (&violation . g$11428$UGjMA)
        (&error . g$11427$UGjMA)
        (&serious . g$11426$UGjMA)
        (&warning . g$11425$UGjMA)
        (&message . g$11424$UGjMA)
        (&condition . g$11423$UGjMA)
        (define-condition-type . g$11422$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12023$UGjMA
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$11860$UGjMA)
        (record-type-uid . g$11859$UGjMA)
        (record-type-sealed? . g$11858$UGjMA)
        (record-type-parent . g$11857$UGjMA)
        (record-type-opaque? . g$11856$UGjMA)
        (record-type-name . g$11855$UGjMA)
        (record-type-generative? . g$11854$UGjMA)
        (record-type-field-names . g$11853$UGjMA)
        (record-rtd . g$11852$UGjMA)
        (record-field-mutable? . g$11851$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12024$UGjMA
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$11867$UGjMA)
        (record-predicate . g$11866$UGjMA)
        (record-mutator . g$11865$UGjMA)
        (record-constructor . g$11864$UGjMA)
        (record-accessor . g$11863$UGjMA)
        (make-record-type-descriptor . g$11862$UGjMA)
        (make-record-constructor-descriptor . g$11861$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12025$UGjMA
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$11420$UGjMA)
        (parent-rtd . g$11419$UGjMA)
        (nongenerative . g$11418$UGjMA)
        (opaque . g$11417$UGjMA)
        (sealed . g$11416$UGjMA)
        (protocol . g$11415$UGjMA)
        (parent . g$11414$UGjMA)
        (immutable . g$11413$UGjMA)
        (mutable . g$11412$UGjMA)
        (fields . g$11411$UGjMA)
        (record-constructor-descriptor . g$11372$UGjMA)
        (record-type-descriptor . g$11371$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6902$UGjMA
      'g$12026$UGjMA
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$8257$UGjMA)
        (&no-nans-rcd . g$11990$UGjMA)
        (&no-nans-rtd . g$11989$UGjMA)
        (&no-infinities-rcd . g$11988$UGjMA)
        (&no-infinities-rtd . g$11987$UGjMA)
        (&i/o-encoding-rcd . g$11986$UGjMA)
        (&i/o-encoding-rtd . g$11985$UGjMA)
        (&i/o-decoding-rcd . g$11984$UGjMA)
        (&i/o-decoding-rtd . g$11983$UGjMA)
        (&i/o-port-rcd . g$11982$UGjMA)
        (&i/o-port-rtd . g$11981$UGjMA)
        (&i/o-file-does-not-exist-rcd . g$11980$UGjMA)
        (&i/o-file-does-not-exist-rtd . g$11979$UGjMA)
        (&i/o-file-already-exists-rcd . g$11978$UGjMA)
        (&i/o-file-already-exists-rtd . g$11977$UGjMA)
        (&i/o-fie-is-read-only-rcd . g$11976$UGjMA)
        (&i/o-fie-is-read-only-rtd . g$11975$UGjMA)
        (&i/o-file-protection-rcd . g$11974$UGjMA)
        (&i/o-file-protection-rtd . g$11973$UGjMA)
        (&i/o-filename-rcd . g$11972$UGjMA)
        (&i/o-filename-rtd . g$11971$UGjMA)
        (&i/o-invalid-position-rcd . g$11970$UGjMA)
        (&i/o-invalid-position-rtd . g$11969$UGjMA)
        (&i/o-write-rcd . g$11968$UGjMA)
        (&i/o-write-rtd . g$11967$UGjMA)
        (&i/o-read-rcd . g$11966$UGjMA)
        (&i/o-read-rtd . g$11965$UGjMA)
        (&i/o-rcd . g$11964$UGjMA)
        (&i/o-rtd . g$11963$UGjMA)
        (&undefined-rcd . g$11962$UGjMA)
        (&undefined-rtd . g$11961$UGjMA)
        (&syntax-rcd . g$11960$UGjMA)
        (&syntax-rtd . g$11959$UGjMA)
        (&lexical-rcd . g$11958$UGjMA)
        (&lexical-rtd . g$11957$UGjMA)
        (&implementation-restriction-rcd . g$11956$UGjMA)
        (&implementation-restriction-rtd . g$11955$UGjMA)
        (&non-continuable-rcd . g$11954$UGjMA)
        (&non-continuable-rtd . g$11953$UGjMA)
        (&who-rcd . g$11952$UGjMA)
        (&who-rtd . g$11951$UGjMA)
        (&irritants-rcd . g$11950$UGjMA)
        (&irritants-rtd . g$11949$UGjMA)
        (&assertion-rcd . g$11948$UGjMA)
        (&assertion-rtd . g$11947$UGjMA)
        (&violation-rcd . g$11946$UGjMA)
        (&violation-rtd . g$11945$UGjMA)
        (&error-rcd . g$11944$UGjMA)
        (&error-rtd . g$11943$UGjMA)
        (&serious-rcd . g$11942$UGjMA)
        (&serious-rtd . g$11941$UGjMA)
        (&warning-rcd . g$11940$UGjMA)
        (&warning-rtd . g$11939$UGjMA)
        (&message-rcd . g$11938$UGjMA)
        (&message-rtd . g$11937$UGjMA)
        (&condition-rcd . g$11936$UGjMA)
        (&condition-rtd . g$11935$UGjMA)
        (library-letrec* . g$11934$UGjMA)
        (annotation-stripped . g$11933$UGjMA)
        (annotation-source . g$11932$UGjMA)
        (annotation-expression . g$11931$UGjMA)
        (annotation? . g$11930$UGjMA)
        (read-annotated . g$11929$UGjMA)
        (tanh . g$11928$UGjMA)
        (cosh . g$11927$UGjMA)
        (sinh . g$11926$UGjMA)
        (make-guid . g$11925$UGjMA)
        (unspecified? . g$11924$UGjMA)
        (make-trace . g$11923$UGjMA)
        (make-list . g$11922$UGjMA)
        (last-pair . g$11921$UGjMA)
        (load-r5rs . g$11920$UGjMA)
        (license . g$11919$UGjMA)
        (stacktrace . g$11918$UGjMA)
        (ironscheme-build . g$11317$UGjMA)
        (define-clr-class-internal . g$11917$UGjMA)
        (clr-field-set!-internal . g$11916$UGjMA)
        (clr-field-get-internal . g$11915$UGjMA)
        (clr-cast-internal . g$11914$UGjMA)
        (clr-call-internal . g$11913$UGjMA)
        (clr-new-internal . g$11912$UGjMA)
        (clr-new-array-internal . g$11911$UGjMA)
        (clr-is-internal . g$11910$UGjMA)
        (clr-reference-internal . g$11909$UGjMA)
        (clr-using-internal . g$11908$UGjMA)
        (clr-clear-usings-internal . g$11907$UGjMA)
        (syntax-error . g$8376$UGjMA)
        (syntax-dispatch . g$8252$UGjMA)
        (compile-core . g$11906$UGjMA)
        (eval-core . g$11905$UGjMA)
        (set-symbol-value! . g$11904$UGjMA)
        (symbol-value . g$11903$UGjMA)
        (ungensym . g$11902$UGjMA)
        (gensym . g$11901$UGjMA)
        (void . g$11900$UGjMA)
        (load-serialized-library . g$11899$UGjMA)
        (serialize-library . g$11898$UGjMA)
        (compile-system-libraries . g$11319$UGjMA)
        (compile->closure . g$11321$UGjMA)
        (compile . g$11320$UGjMA)
        (load . g$11316$UGjMA)
        (interaction-environment . g$8385$UGjMA)
        (char-ready? . g$11897$UGjMA)
        (string-upcase . g$11896$UGjMA)
        (string-titlecase . g$11895$UGjMA)
        (string-normalize-nfkd . g$11894$UGjMA)
        (string-normalize-nfkc . g$11893$UGjMA)
        (string-normalize-nfd . g$11892$UGjMA)
        (string-normalize-nfc . g$11891$UGjMA)
        (string-foldcase . g$11890$UGjMA)
        (string-downcase . g$11889$UGjMA)
        (string-ci>? . g$11888$UGjMA)
        (string-ci>=? . g$11887$UGjMA)
        (string-ci=? . g$11886$UGjMA)
        (string-ci<? . g$11885$UGjMA)
        (string-ci<=? . g$11884$UGjMA)
        (char-whitespace? . g$11883$UGjMA)
        (char-upper-case? . g$11882$UGjMA)
        (char-title-case? . g$11881$UGjMA)
        (char-numeric? . g$11880$UGjMA)
        (char-lower-case? . g$11879$UGjMA)
        (char-general-category . g$11878$UGjMA)
        (char-upcase . g$11877$UGjMA)
        (char-titlecase . g$11876$UGjMA)
        (char-foldcase . g$11875$UGjMA)
        (char-downcase . g$11874$UGjMA)
        (char-ci>? . g$11873$UGjMA)
        (char-ci>=? . g$11872$UGjMA)
        (char-ci=? . g$11871$UGjMA)
        (char-ci<? . g$11870$UGjMA)
        (char-ci<=? . g$11869$UGjMA)
        (char-alphabetic? . g$11868$UGjMA)
        (variable-transformer-procedure . g$7989$UGjMA)
        (variable-transformer? . g$7988$UGjMA)
        (make-variable-transformer . g$7987$UGjMA)
        (identifier? . g$8380$UGjMA)
        (generate-temporaries . g$8372$UGjMA)
        (free-identifier=? . g$8373$UGjMA)
        (syntax->datum . g$8382$UGjMA)
        (datum->syntax . g$8381$UGjMA)
        (bound-identifier=? . g$8374$UGjMA)
        (record-type-descriptor? . g$11867$UGjMA)
        (record-predicate . g$11866$UGjMA)
        (record-mutator . g$11865$UGjMA)
        (record-constructor . g$11864$UGjMA)
        (record-accessor . g$11863$UGjMA)
        (make-record-type-descriptor . g$11862$UGjMA)
        (make-record-constructor-descriptor . g$11861$UGjMA)
        (record? . g$11860$UGjMA)
        (record-type-uid . g$11859$UGjMA)
        (record-type-sealed? . g$11858$UGjMA)
        (record-type-parent . g$11857$UGjMA)
        (record-type-opaque? . g$11856$UGjMA)
        (record-type-name . g$11855$UGjMA)
        (record-type-generative? . g$11854$UGjMA)
        (record-type-field-names . g$11853$UGjMA)
        (record-rtd . g$11852$UGjMA)
        (record-field-mutable? . g$11851$UGjMA)
        (delete-file . g$6018$UGjMA)
        (file-exists? . g$6017$UGjMA)
        (vector-sort! . g$11850$UGjMA)
        (vector-sort . g$11849$UGjMA)
        (list-sort . g$6524$UGjMA)
        (symbol-hash . g$11848$UGjMA)
        (string-ci-hash . g$11847$UGjMA)
        (string-hash . g$11846$UGjMA)
        (equal-hash . g$11845$UGjMA)
        (hashtable-equivalence-function . g$11844$UGjMA)
        (make-hashtable . g$11843$UGjMA)
        (hashtable-hash-function . g$11842$UGjMA)
        (make-eqv-hashtable . g$5985$UGjMA)
        (make-eq-hashtable . g$5984$UGjMA)
        (hashtable? . g$11841$UGjMA)
        (hashtable-update! . g$5991$UGjMA)
        (hashtable-size . g$5986$UGjMA)
        (hashtable-set! . g$5988$UGjMA)
        (hashtable-ref . g$5987$UGjMA)
        (hashtable-mutable? . g$11840$UGjMA)
        (hashtable-keys . g$11839$UGjMA)
        (hashtable-entries . g$11838$UGjMA)
        (hashtable-delete! . g$5989$UGjMA)
        (hashtable-copy . g$11837$UGjMA)
        (hashtable-contains? . g$5990$UGjMA)
        (hashtable-clear! . g$5992$UGjMA)
        (call-with-output-file . g$11836$UGjMA)
        (call-with-input-file . g$11835$UGjMA)
        (write-char . g$11834$UGjMA)
        (write . g$11833$UGjMA)
        (with-output-to-file . g$11832$UGjMA)
        (with-input-from-file . g$11831$UGjMA)
        (read-char . g$11830$UGjMA)
        (read . g$11829$UGjMA)
        (peek-char . g$11828$UGjMA)
        (open-output-file . g$11827$UGjMA)
        (open-input-file . g$11826$UGjMA)
        (newline . g$11825$UGjMA)
        (display . g$11824$UGjMA)
        (close-output-port . g$11823$UGjMA)
        (close-input-port . g$11822$UGjMA)
        (eof-object? . g$11821$UGjMA)
        (eof-object . g$11820$UGjMA)
        (current-error-port . g$11819$UGjMA)
        (current-output-port . g$11818$UGjMA)
        (current-input-port . g$11817$UGjMA)
        (output-port? . g$11816$UGjMA)
        (input-port? . g$11815$UGjMA)
        (utf-8-codec . g$11814$UGjMA)
        (utf-16-codec . g$11813$UGjMA)
        (transcoder-error-handling-mode . g$11812$UGjMA)
        (transcoder-eol-style . g$11811$UGjMA)
        (transcoder-codec . g$11810$UGjMA)
        (transcoded-port . g$11809$UGjMA)
        (textual-port? . g$11808$UGjMA)
        (string->bytevector . g$11807$UGjMA)
        (standard-output-port . g$11806$UGjMA)
        (standard-input-port . g$11805$UGjMA)
        (standard-error-port . g$11804$UGjMA)
        (set-port-position! . g$11803$UGjMA)
        (put-u8 . g$11802$UGjMA)
        (put-string . g$11801$UGjMA)
        (put-datum . g$11800$UGjMA)
        (put-char . g$11799$UGjMA)
        (put-bytevector . g$11798$UGjMA)
        (port? . g$11797$UGjMA)
        (port-transcoder . g$11796$UGjMA)
        (port-position . g$11795$UGjMA)
        (port-has-set-port-position!? . g$11794$UGjMA)
        (port-has-port-position? . g$11793$UGjMA)
        (port-eof? . g$11792$UGjMA)
        (output-port-buffer-mode . g$11791$UGjMA)
        (open-string-output-port . g$6915$UGjMA)
        (open-string-input-port . g$11790$UGjMA)
        (open-file-output-port . g$11789$UGjMA)
        (open-file-input/output-port . g$11788$UGjMA)
        (open-file-input-port . g$11787$UGjMA)
        (open-bytevector-output-port . g$11786$UGjMA)
        (open-bytevector-input-port . g$11785$UGjMA)
        (native-transcoder . g$11784$UGjMA)
        (native-eol-style . g$11783$UGjMA)
        (make-transcoder . g$11782$UGjMA)
        (latin-1-codec . g$11781$UGjMA)
        (make-i/o-write-error . g$6772$UGjMA)
        (make-i/o-read-error . g$6758$UGjMA)
        (make-i/o-port-error . g$6877$UGjMA)
        (make-i/o-invalid-position-error . g$6787$UGjMA)
        (make-i/o-filename-error . g$6804$UGjMA)
        (make-i/o-file-protection-error . g$6820$UGjMA)
        (make-i/o-file-is-read-only-error . g$6834$UGjMA)
        (make-i/o-file-does-not-exist-error . g$6862$UGjMA)
        (make-i/o-file-already-exists-error . g$6848$UGjMA)
        (make-i/o-error . g$6744$UGjMA)
        (make-i/o-encoding-error . g$6908$UGjMA)
        (make-i/o-decoding-error . g$6893$UGjMA)
        (make-custom-textual-output-port . g$11780$UGjMA)
        (make-custom-textual-input/output-port . g$11779$UGjMA)
        (make-custom-textual-input-port . g$11778$UGjMA)
        (make-custom-binary-output-port . g$11777$UGjMA)
        (make-custom-binary-input/output-port . g$11776$UGjMA)
        (make-custom-binary-input-port . g$11775$UGjMA)
        (make-bytevector . g$11774$UGjMA)
        (lookahead-u8 . g$11773$UGjMA)
        (lookahead-char . g$11772$UGjMA)
        (i/o-write-error? . g$6773$UGjMA)
        (i/o-read-error? . g$6759$UGjMA)
        (i/o-port-error? . g$6879$UGjMA)
        (i/o-invalid-position-error? . g$6789$UGjMA)
        (i/o-filename-error? . g$6806$UGjMA)
        (i/o-file-protection-error? . g$6821$UGjMA)
        (i/o-file-is-read-only-error? . g$6835$UGjMA)
        (i/o-file-does-not-exist-error? . g$6863$UGjMA)
        (i/o-file-already-exists-error? . g$6849$UGjMA)
        (i/o-error? . g$6745$UGjMA)
        (i/o-error-port . g$6880$UGjMA)
        (i/o-error-filename . g$6807$UGjMA)
        (i/o-encoding-error? . g$6910$UGjMA)
        (i/o-encoding-error-char . g$6911$UGjMA)
        (i/o-decoding-error? . g$6894$UGjMA)
        (get-u8 . g$11771$UGjMA)
        (get-string-n! . g$11770$UGjMA)
        (get-string-n . g$11769$UGjMA)
        (get-string-all . g$11768$UGjMA)
        (get-line . g$11767$UGjMA)
        (get-datum . g$11766$UGjMA)
        (get-char . g$11765$UGjMA)
        (get-bytevector-some . g$11764$UGjMA)
        (get-bytevector-n! . g$11763$UGjMA)
        (get-bytevector-n . g$11762$UGjMA)
        (get-bytevector-all . g$11761$UGjMA)
        (flush-output-port . g$11760$UGjMA)
        (close-port . g$11759$UGjMA)
        (call-with-string-output-port . g$11758$UGjMA)
        (call-with-port . g$11757$UGjMA)
        (call-with-bytevector-output-port . g$11756$UGjMA)
        (bytevector->string . g$11755$UGjMA)
        (buffer-mode? . g$11754$UGjMA)
        (binary-port? . g$11753$UGjMA)
        (scheme-report-environment . g$8363$UGjMA)
        (quotient . g$6511$UGjMA)
        (null-environment . g$8362$UGjMA)
        (remainder . g$6512$UGjMA)
        (modulo . g$6513$UGjMA)
        (inexact->exact . g$11752$UGjMA)
        (force . g$11751$UGjMA)
        (exact->inexact . g$11750$UGjMA)
        (exit . g$11749$UGjMA)
        (command-line . g$11313$UGjMA)
        (string-fill! . g$11748$UGjMA)
        (string-set! . g$11747$UGjMA)
        (set-cdr! . g$11746$UGjMA)
        (set-car! . g$11745$UGjMA)
        (remove . g$6098$UGjMA)
        (remv . g$6099$UGjMA)
        (remp . g$6084$UGjMA)
        (remq . g$6100$UGjMA)
        (partition . g$6083$UGjMA)
        (memv . g$11744$UGjMA)
        (memq . g$11743$UGjMA)
        (memp . g$6090$UGjMA)
        (member . g$6089$UGjMA)
        (exists . g$6094$UGjMA)
        (for-all . g$6093$UGjMA)
        (fold-right . g$6097$UGjMA)
        (fold-left . g$6096$UGjMA)
        (find . g$6082$UGjMA)
        (filter . g$6085$UGjMA)
        (cons* . g$6095$UGjMA)
        (assv . g$6086$UGjMA)
        (assq . g$11742$UGjMA)
        (assp . g$6088$UGjMA)
        (assoc . g$6087$UGjMA)
        (with-exception-handler . g$11741$UGjMA)
        (raise-continuable . g$11740$UGjMA)
        (raise . g$11739$UGjMA)
        (eval . g$8365$UGjMA)
        (environment . g$8361$UGjMA)
        (make-enumeration . g$6964$UGjMA)
        (enum-set=? . g$6971$UGjMA)
        (enum-set-universe . g$6965$UGjMA)
        (enum-set-union . g$6972$UGjMA)
        (enum-set-subset? . g$6970$UGjMA)
        (enum-set-projection . g$6976$UGjMA)
        (enum-set-member? . g$6969$UGjMA)
        (enum-set-intersection . g$6973$UGjMA)
        (enum-set-indexer . g$6966$UGjMA)
        (enum-set-difference . g$6974$UGjMA)
        (enum-set-constructor . g$6967$UGjMA)
        (enum-set-complement . g$6975$UGjMA)
        (enum-set->list . g$6968$UGjMA)
        (who-condition? . g$6422$UGjMA)
        (warning? . g$6333$UGjMA)
        (violation? . g$6375$UGjMA)
        (undefined-violation? . g$6499$UGjMA)
        (syntax-violation? . g$6483$UGjMA)
        (syntax-violation-subform . g$6485$UGjMA)
        (syntax-violation-form . g$6484$UGjMA)
        (syntax-violation . g$8379$UGjMA)
        (simple-conditions . g$11738$UGjMA)
        (serious-condition? . g$6347$UGjMA)
        (non-continuable-violation? . g$6437$UGjMA)
        (message-condition? . g$6318$UGjMA)
        (make-who-condition . g$6420$UGjMA)
        (make-warning . g$6332$UGjMA)
        (make-violation . g$6374$UGjMA)
        (make-undefined-violation . g$6498$UGjMA)
        (make-syntax-violation . g$6480$UGjMA)
        (make-serious-condition . g$6346$UGjMA)
        (make-non-continuable-violation . g$6436$UGjMA)
        (make-message-condition . g$6316$UGjMA)
        (make-lexical-violation . g$6464$UGjMA)
        (make-irritants-condition . g$6403$UGjMA)
        (make-implementation-restriction-violation . g$6450$UGjMA)
        (make-error . g$6360$UGjMA)
        (make-assertion-violation . g$6388$UGjMA)
        (lexical-violation? . g$6465$UGjMA)
        (irritants-condition? . g$6405$UGjMA)
        (implementation-restriction-violation? . g$6451$UGjMA)
        (error? . g$6361$UGjMA)
        (condition-who . g$6423$UGjMA)
        (condition-predicate . g$11737$UGjMA)
        (condition-message . g$6319$UGjMA)
        (condition-irritants . g$6406$UGjMA)
        (condition-accessor . g$11736$UGjMA)
        (condition . g$11735$UGjMA)
        (assertion-violation? . g$6389$UGjMA)
        (condition? . g$11734$UGjMA)
        (utf32->string . g$11733$UGjMA)
        (utf16->string . g$11732$UGjMA)
        (utf8->string . g$11731$UGjMA)
        (uint-list->bytevector . g$11730$UGjMA)
        (u8-list->bytevector . g$11729$UGjMA)
        (string->utf8 . g$11728$UGjMA)
        (string->utf32 . g$11727$UGjMA)
        (string->utf16 . g$11726$UGjMA)
        (sint-list->bytevector . g$11725$UGjMA)
        (native-endianness . g$6174$UGjMA)
        (bytevector? . g$11724$UGjMA)
        (bytevector=? . g$11723$UGjMA)
        (bytevector-uint-set! . g$11722$UGjMA)
        (bytevector-uint-ref . g$11721$UGjMA)
        (bytevector-u8-set! . g$11720$UGjMA)
        (bytevector-u8-ref . g$11719$UGjMA)
        (bytevector-u64-set! . g$6195$UGjMA)
        (bytevector-u64-ref . g$6191$UGjMA)
        (bytevector-u64-native-set! . g$6197$UGjMA)
        (bytevector-u64-native-ref . g$6193$UGjMA)
        (bytevector-u32-set! . g$6187$UGjMA)
        (bytevector-u32-ref . g$6183$UGjMA)
        (bytevector-u32-native-set! . g$6189$UGjMA)
        (bytevector-u32-native-ref . g$6185$UGjMA)
        (bytevector-u16-set! . g$6179$UGjMA)
        (bytevector-u16-ref . g$6175$UGjMA)
        (bytevector-u16-native-set! . g$6181$UGjMA)
        (bytevector-u16-native-ref . g$6177$UGjMA)
        (bytevector-sint-set! . g$11718$UGjMA)
        (bytevector-sint-ref . g$11717$UGjMA)
        (bytevector-s8-set! . g$11716$UGjMA)
        (bytevector-s8-ref . g$11715$UGjMA)
        (bytevector-s64-set! . g$6196$UGjMA)
        (bytevector-s64-ref . g$6192$UGjMA)
        (bytevector-s64-native-set! . g$6198$UGjMA)
        (bytevector-s64-native-ref . g$6194$UGjMA)
        (bytevector-s32-set! . g$6188$UGjMA)
        (bytevector-s32-ref . g$6184$UGjMA)
        (bytevector-s32-native-set! . g$6190$UGjMA)
        (bytevector-s32-native-ref . g$6186$UGjMA)
        (bytevector-s16-set! . g$6180$UGjMA)
        (bytevector-s16-ref . g$6176$UGjMA)
        (bytevector-s16-native-set! . g$6182$UGjMA)
        (bytevector-s16-native-ref . g$6178$UGjMA)
        (bytevector-length . g$11714$UGjMA)
        (bytevector-ieee-single-set! . g$11713$UGjMA)
        (bytevector-ieee-single-ref . g$11712$UGjMA)
        (bytevector-ieee-single-native-set! . g$6201$UGjMA)
        (bytevector-ieee-single-native-ref . g$6199$UGjMA)
        (bytevector-ieee-double-set! . g$11711$UGjMA)
        (bytevector-ieee-double-ref . g$11710$UGjMA)
        (bytevector-ieee-double-native-set! . g$6202$UGjMA)
        (bytevector-ieee-double-native-ref . g$6200$UGjMA)
        (bytevector-fill! . g$11709$UGjMA)
        (bytevector-copy! . g$11708$UGjMA)
        (bytevector-copy . g$11707$UGjMA)
        (bytevector->uint-list . g$11706$UGjMA)
        (bytevector->u8-list . g$11705$UGjMA)
        (bytevector->sint-list . g$11704$UGjMA)
        (no-nans-violation? . g$6730$UGjMA)
        (no-infinities-violation? . g$6716$UGjMA)
        (make-no-nans-violation . g$6729$UGjMA)
        (make-no-infinities-violation . g$6715$UGjMA)
        (real->flonum . g$11703$UGjMA)
        (flzero? . g$11702$UGjMA)
        (fltruncate . g$11701$UGjMA)
        (fltan . g$11700$UGjMA)
        (flsqrt . g$11699$UGjMA)
        (flsin . g$11698$UGjMA)
        (flround . g$11697$UGjMA)
        (flpositive? . g$11696$UGjMA)
        (flonum? . g$11695$UGjMA)
        (flodd? . g$11694$UGjMA)
        (flnumerator . g$11693$UGjMA)
        (flnegative? . g$11692$UGjMA)
        (flnan? . g$11691$UGjMA)
        (flmod0 . g$11690$UGjMA)
        (flmod . g$11689$UGjMA)
        (flmin . g$11688$UGjMA)
        (flmax . g$11687$UGjMA)
        (fllog . g$11686$UGjMA)
        (flinteger? . g$11685$UGjMA)
        (flinfinite? . g$11684$UGjMA)
        (flfloor . g$11683$UGjMA)
        (flfinite? . g$11682$UGjMA)
        (flexpt . g$11681$UGjMA)
        (flexp . g$11680$UGjMA)
        (fleven? . g$11679$UGjMA)
        (fldiv0-and-mod0 . g$11678$UGjMA)
        (fldiv0 . g$11677$UGjMA)
        (fldiv-and-mod . g$11676$UGjMA)
        (fldiv . g$11675$UGjMA)
        (fldenominator . g$11674$UGjMA)
        (flcos . g$11673$UGjMA)
        (flceiling . g$11672$UGjMA)
        (flatan . g$11671$UGjMA)
        (flasin . g$11670$UGjMA)
        (flacos . g$11669$UGjMA)
        (flabs . g$11668$UGjMA)
        (fl>? . g$11667$UGjMA)
        (fl>=? . g$11666$UGjMA)
        (fl=? . g$11665$UGjMA)
        (fl<? . g$11664$UGjMA)
        (fl<=? . g$11663$UGjMA)
        (fl/ . g$11662$UGjMA)
        (fl- . g$11661$UGjMA)
        (fl+ . g$11660$UGjMA)
        (fl* . g$11659$UGjMA)
        (fixnum->flonum . g$11658$UGjMA)
        (fxzero? . g$11657$UGjMA)
        (fxxor . g$11656$UGjMA)
        (fxrotate-bit-field . g$6661$UGjMA)
        (fxreverse-bit-field . g$11655$UGjMA)
        (fxpositive? . g$11654$UGjMA)
        (fxodd? . g$11653$UGjMA)
        (fxnot . g$11652$UGjMA)
        (fxnegative? . g$11651$UGjMA)
        (fxmod0 . g$11650$UGjMA)
        (fxmod . g$11649$UGjMA)
        (fxmin . g$11648$UGjMA)
        (fxmax . g$11647$UGjMA)
        (fxlength . g$11646$UGjMA)
        (fxior . g$11645$UGjMA)
        (fxif . g$6655$UGjMA)
        (fxfirst-bit-set . g$11644$UGjMA)
        (fxeven? . g$11643$UGjMA)
        (fxdiv0-and-mod0 . g$11642$UGjMA)
        (fxdiv0 . g$11641$UGjMA)
        (fxdiv-and-mod . g$11640$UGjMA)
        (fxdiv . g$11639$UGjMA)
        (fxcopy-bit-field . g$6658$UGjMA)
        (fxcopy-bit . g$6656$UGjMA)
        (fxbit-set? . g$11638$UGjMA)
        (fxbit-field . g$6657$UGjMA)
        (fxbit-count . g$11637$UGjMA)
        (fxarithmetic-shift-right . g$6660$UGjMA)
        (fxarithmetic-shift-left . g$6659$UGjMA)
        (fxarithmetic-shift . g$11636$UGjMA)
        (fxand . g$11635$UGjMA)
        (fx>? . g$11634$UGjMA)
        (fx>=? . g$11633$UGjMA)
        (fx=? . g$11632$UGjMA)
        (fx<? . g$11631$UGjMA)
        (fx<=? . g$11630$UGjMA)
        (fx-/carry . g$11629$UGjMA)
        (fx- . g$11628$UGjMA)
        (fx+/carry . g$11627$UGjMA)
        (fx+ . g$11626$UGjMA)
        (fx*/carry . g$11625$UGjMA)
        (fx* . g$11624$UGjMA)
        (greatest-fixnum . g$11623$UGjMA)
        (least-fixnum . g$11622$UGjMA)
        (fixnum-width . g$11621$UGjMA)
        (fixnum? . g$11620$UGjMA)
        (bitwise-rotate-bit-field . g$6609$UGjMA)
        (bitwise-reverse-bit-field . g$6610$UGjMA)
        (bitwise-length . g$11619$UGjMA)
        (bitwise-if . g$6603$UGjMA)
        (bitwise-first-bit-set . g$11618$UGjMA)
        (bitwise-copy-bit-field . g$6606$UGjMA)
        (bitwise-copy-bit . g$6604$UGjMA)
        (bitwise-bit-set? . g$11617$UGjMA)
        (bitwise-bit-field . g$11616$UGjMA)
        (bitwise-bit-count . g$11615$UGjMA)
        (bitwise-xor . g$11614$UGjMA)
        (bitwise-ior . g$11613$UGjMA)
        (bitwise-and . g$11612$UGjMA)
        (bitwise-not . g$11611$UGjMA)
        (bitwise-arithmetic-shift-right . g$6608$UGjMA)
        (bitwise-arithmetic-shift-left . g$6607$UGjMA)
        (bitwise-arithmetic-shift . g$11610$UGjMA)
        (zero? . g$11609$UGjMA)
        (vector? . g$11608$UGjMA)
        (vector-set! . g$11607$UGjMA)
        (vector-ref . g$11606$UGjMA)
        (vector-map . g$11605$UGjMA)
        (vector-length . g$11604$UGjMA)
        (vector-for-each . g$11603$UGjMA)
        (vector-fill! . g$11602$UGjMA)
        (vector->list . g$11601$UGjMA)
        (vector . g$11600$UGjMA)
        (values . g$11599$UGjMA)
        (truncate . g$11598$UGjMA)
        (tan . g$11597$UGjMA)
        (symbol? . g$11596$UGjMA)
        (symbol=? . g$11595$UGjMA)
        (symbol->string . g$11594$UGjMA)
        (substring . g$11593$UGjMA)
        (string? . g$11592$UGjMA)
        (string>? . g$11591$UGjMA)
        (string>=? . g$11590$UGjMA)
        (string=? . g$11589$UGjMA)
        (string<? . g$11588$UGjMA)
        (string<=? . g$11587$UGjMA)
        (string-ref . g$11586$UGjMA)
        (string-length . g$11585$UGjMA)
        (string-for-each . g$11584$UGjMA)
        (string-copy . g$11583$UGjMA)
        (string-append . g$11582$UGjMA)
        (string->symbol . g$11581$UGjMA)
        (string->number . g$11580$UGjMA)
        (string->list . g$11579$UGjMA)
        (string . g$11578$UGjMA)
        (sqrt . g$11577$UGjMA)
        (sin . g$11576$UGjMA)
        (round . g$11575$UGjMA)
        (reverse . g$11574$UGjMA)
        (real? . g$11573$UGjMA)
        (real-valued? . g$11572$UGjMA)
        (real-part . g$11571$UGjMA)
        (rationalize . g$5635$UGjMA)
        (rational? . g$11570$UGjMA)
        (rational-valued? . g$11569$UGjMA)
        (procedure? . g$11568$UGjMA)
        (positive? . g$11567$UGjMA)
        (pair? . g$11566$UGjMA)
        (odd? . g$11565$UGjMA)
        (numerator . g$11564$UGjMA)
        (number? . g$11563$UGjMA)
        (number->string . g$11562$UGjMA)
        (null? . g$11561$UGjMA)
        (not . g$11560$UGjMA)
        (negative? . g$11559$UGjMA)
        (nan? . g$11558$UGjMA)
        (min . g$11557$UGjMA)
        (max . g$11556$UGjMA)
        (map . g$11555$UGjMA)
        (make-vector . g$11554$UGjMA)
        (make-string . g$11553$UGjMA)
        (make-rectangular . g$11552$UGjMA)
        (make-polar . g$11551$UGjMA)
        (magnitude . g$11550$UGjMA)
        (log . g$11549$UGjMA)
        (list? . g$11548$UGjMA)
        (list-tail . g$11547$UGjMA)
        (list-ref . g$11546$UGjMA)
        (list->vector . g$11545$UGjMA)
        (list->string . g$11544$UGjMA)
        (list . g$11543$UGjMA)
        (length . g$11542$UGjMA)
        (lcm . g$11541$UGjMA)
        (integer? . g$11540$UGjMA)
        (integer-valued? . g$11539$UGjMA)
        (integer->char . g$11538$UGjMA)
        (infinite? . g$11537$UGjMA)
        (inexact? . g$11536$UGjMA)
        (inexact . g$11535$UGjMA)
        (imag-part . g$11534$UGjMA)
        (gcd . g$11533$UGjMA)
        (for-each . g$11532$UGjMA)
        (floor . g$11531$UGjMA)
        (finite? . g$11530$UGjMA)
        (expt . g$11529$UGjMA)
        (exp . g$11528$UGjMA)
        (exact? . g$11527$UGjMA)
        (exact-integer-sqrt . g$11526$UGjMA)
        (exact . g$11525$UGjMA)
        (even? . g$11524$UGjMA)
        (error . g$11523$UGjMA)
        (eqv? . g$11522$UGjMA)
        (equal? . g$11521$UGjMA)
        (eq? . g$11520$UGjMA)
        (dynamic-wind . g$11519$UGjMA)
        (div0-and-mod0 . g$11518$UGjMA)
        (mod0 . g$11517$UGjMA)
        (div0 . g$11516$UGjMA)
        (div-and-mod . g$11515$UGjMA)
        (mod . g$11514$UGjMA)
        (div . g$11513$UGjMA)
        (denominator . g$11512$UGjMA)
        (cos . g$11511$UGjMA)
        (cons . g$11510$UGjMA)
        (complex? . g$11509$UGjMA)
        (char? . g$11508$UGjMA)
        (char>? . g$11507$UGjMA)
        (char>=? . g$11506$UGjMA)
        (char=? . g$11505$UGjMA)
        (char<? . g$11504$UGjMA)
        (char<=? . g$11503$UGjMA)
        (char->integer . g$11502$UGjMA)
        (ceiling . g$11501$UGjMA)
        (call-with-values . g$11500$UGjMA)
        (call/cc . g$11499$UGjMA)
        (call-with-current-continuation . g$11498$UGjMA)
        (cddddr . g$5634$UGjMA)
        (cdddar . g$5633$UGjMA)
        (cddadr . g$5632$UGjMA)
        (cddaar . g$5631$UGjMA)
        (cdaddr . g$5630$UGjMA)
        (cdadar . g$5629$UGjMA)
        (cdaadr . g$5628$UGjMA)
        (cdaaar . g$5627$UGjMA)
        (cadddr . g$5626$UGjMA)
        (caddar . g$5625$UGjMA)
        (cadadr . g$5624$UGjMA)
        (cadaar . g$5623$UGjMA)
        (caaddr . g$5622$UGjMA)
        (caadar . g$5621$UGjMA)
        (caaadr . g$5620$UGjMA)
        (caaaar . g$5619$UGjMA)
        (cdddr . g$5618$UGjMA)
        (cddar . g$5617$UGjMA)
        (cdadr . g$5616$UGjMA)
        (cdaar . g$5615$UGjMA)
        (caddr . g$5614$UGjMA)
        (cadar . g$5613$UGjMA)
        (caadr . g$5612$UGjMA)
        (caaar . g$5611$UGjMA)
        (cddr . g$5610$UGjMA)
        (cdar . g$5609$UGjMA)
        (cadr . g$5608$UGjMA)
        (caar . g$5607$UGjMA)
        (cdr . g$11497$UGjMA)
        (car . g$11496$UGjMA)
        (boolean? . g$11495$UGjMA)
        (boolean=? . g$11494$UGjMA)
        (atan . g$11493$UGjMA)
        (assertion-violation . g$11492$UGjMA)
        (asin . g$11491$UGjMA)
        (apply . g$11490$UGjMA)
        (append . g$11489$UGjMA)
        (angle . g$11488$UGjMA)
        (acos . g$11487$UGjMA)
        (abs . g$11486$UGjMA)
        (/ . g$11485$UGjMA)
        (* . g$11484$UGjMA)
        (- . g$11483$UGjMA)
        (+ . g$11482$UGjMA)
        (>= . g$11481$UGjMA)
        (> . g$11480$UGjMA)
        (= . g$11479$UGjMA)
        (<= . g$11478$UGjMA)
        (< . g$11477$UGjMA)
        (make-record-printer . g$11476$UGjMA)
        (eqv-hash . g$11475$UGjMA)
        (eq-hash . g$11474$UGjMA)
        (reverse! . g$11473$UGjMA)
        (load/args . g$11315$UGjMA)
        (printf . g$7077$UGjMA)
        (fprintf . g$7078$UGjMA)
        (format . g$7079$UGjMA)
        (get-arity . g$11472$UGjMA)
        (gc-collect . g$11471$UGjMA)
        (clr-type? . g$11470$UGjMA)
        (get-clr-type . g$11469$UGjMA)
        (get-command-line . g$11468$UGjMA)
        (vector-append . g$11467$UGjMA)
        (vector-filter . g$11466$UGjMA)
        (vector-reverse! . g$11465$UGjMA)
        (vector-contains? . g$11464$UGjMA)
        (vector-index-of . g$11463$UGjMA)
        (vector-copy . g$11462$UGjMA)
        (vector-binary-search . g$11461$UGjMA)
        (get-output-string . g$11460$UGjMA)
        (open-output-string . g$11459$UGjMA)
        (open-input-string . g$11458$UGjMA)
        (string-format . g$11457$UGjMA)
        (trace-printer . g$11312$UGjMA)
        (make-traced-procedure . g$11456$UGjMA)
        (make-traced-macro . g$7098$UGjMA)
        (pmap . g$11455$UGjMA)
        (time-it . g$11454$UGjMA)
        (make-parameter . g$7103$UGjMA)
        (library-locator . g$11453$UGjMA)
        (get-library-paths . g$11452$UGjMA)
        (environment-symbols . g$8359$UGjMA)
        (interaction-environment-symbols . g$8358$UGjMA)
        (library-path . g$7528$UGjMA)
        (library-extensions . g$7529$UGjMA)
        (installed-libraries . g$7549$UGjMA)
        (expand . g$8364$UGjMA)
        (&no-nans . g$11451$UGjMA)
        (&no-infinities . g$11450$UGjMA)
        (&i/o-encoding . g$11449$UGjMA)
        (&i/o-decoding . g$11448$UGjMA)
        (&i/o-port . g$11447$UGjMA)
        (&i/o-file-does-not-exist . g$11446$UGjMA)
        (&i/o-file-already-exists . g$11445$UGjMA)
        (&i/o-file-is-read-only . g$11444$UGjMA)
        (&i/o-file-protection . g$11443$UGjMA)
        (&i/o-filename . g$11442$UGjMA)
        (&i/o-invalid-position . g$11441$UGjMA)
        (&i/o-write . g$11440$UGjMA)
        (&i/o-read . g$11439$UGjMA)
        (&i/o . g$11438$UGjMA)
        (&non-continuable . g$11437$UGjMA)
        (&undefined . g$11436$UGjMA)
        (&syntax . g$11435$UGjMA)
        (&lexical . g$11434$UGjMA)
        (&implementation-restriction . g$11433$UGjMA)
        (&non . g$11432$UGjMA)
        (&who . g$11431$UGjMA)
        (&irritants . g$11430$UGjMA)
        (&assertion . g$11429$UGjMA)
        (&violation . g$11428$UGjMA)
        (&error . g$11427$UGjMA)
        (&serious . g$11426$UGjMA)
        (&warning . g$11425$UGjMA)
        (&message . g$11424$UGjMA)
        (&condition . g$11423$UGjMA)
        (define-condition-type . g$11422$UGjMA)
        (define-enumeration . g$11421$UGjMA)
        (define-record-type . g$11420$UGjMA)
        (parent-rtd . g$11419$UGjMA)
        (nongenerative . g$11418$UGjMA)
        (opaque . g$11417$UGjMA)
        (sealed . g$11416$UGjMA)
        (protocol . g$11415$UGjMA)
        (parent . g$11414$UGjMA)
        (immutable . g$11413$UGjMA)
        (mutable . g$11412$UGjMA)
        (fields . g$11411$UGjMA)
        (error-handling-mode . g$11410$UGjMA)
        (file-options . g$11409$UGjMA)
        (buffer-mode . g$11408$UGjMA)
        (eol-style . g$11407$UGjMA)
        (guard . g$11406$UGjMA)
        (trace-letrec-syntax . g$11405$UGjMA)
        (trace-let-syntax . g$11404$UGjMA)
        (trace-define-syntax . g$11403$UGjMA)
        (trace-define . g$11402$UGjMA)
        (trace-lambda . g$11401$UGjMA)
        (unsyntax-splicing . g$11400$UGjMA)
        (unsyntax . g$11399$UGjMA)
        (unquote-splicing . g$11398$UGjMA)
        (unquote . g$11397$UGjMA)
        (_ . g$11396$UGjMA)
        (else . g$11395$UGjMA)
        (=> . g$11394$UGjMA)
        (... . g$11393$UGjMA)
        (assert . g$11392$UGjMA)
        (endianness . g$11391$UGjMA)
        (delay . g$11390$UGjMA)
        (time . g$11389$UGjMA)
        (or . g$11388$UGjMA)
        (and . g$11387$UGjMA)
        (do . g$11386$UGjMA)
        (cond . g$11385$UGjMA)
        (let* . g$11384$UGjMA)
        (let . g$11383$UGjMA)
        (identifier-syntax . g$11382$UGjMA)
        (with-syntax . g$11381$UGjMA)
        (quasisyntax . g$11380$UGjMA)
        (quasiquote . g$11379$UGjMA)
        (syntax-rules . g$11378$UGjMA)
        (include-into . g$11377$UGjMA)
        (include . g$11376$UGjMA)
        (define-struct . g$11375$UGjMA)
        (let-values . g$11374$UGjMA)
        (let*-values . g$11373$UGjMA)
        (record-constructor-descriptor . g$11372$UGjMA)
        (record-type-descriptor . g$11371$UGjMA)
        (fluid-let-syntax . g$11370$UGjMA)
        (case . g$11369$UGjMA)
        (parameterize . g$11368$UGjMA)
        (unless . g$11367$UGjMA)
        (when . g$11366$UGjMA)
        (if . g$11365$UGjMA)
        (letrec* . g$11364$UGjMA)
        (letrec . g$11363$UGjMA)
        (type-descriptor . g$11362$UGjMA)
        (case-lambda . g$11361$UGjMA)
        (lambda . g$11360$UGjMA)
        (syntax . g$11359$UGjMA)
        (syntax-case . g$11358$UGjMA)
        (quote . g$11357$UGjMA)
        (foreign-call . g$11356$UGjMA)
        (letrec-syntax . g$11355$UGjMA)
        (let-syntax . g$11354$UGjMA)
        (set! . g$11353$UGjMA)
        (import . g$11352$UGjMA)
        (library . g$11351$UGjMA)
        (begin . g$11350$UGjMA)
        (module . g$11349$UGjMA)
        (define-syntax . g$11348$UGjMA)
        (define . g$11347$UGjMA))
      '((g$8257$UGjMA core-prim . ellipsis-map)
        (g$11990$UGjMA core-prim . &no-nans-rcd)
        (g$11989$UGjMA core-prim . &no-nans-rtd)
        (g$11988$UGjMA core-prim . &no-infinities-rcd)
        (g$11987$UGjMA core-prim . &no-infinities-rtd)
        (g$11986$UGjMA core-prim . &i/o-encoding-rcd)
        (g$11985$UGjMA core-prim . &i/o-encoding-rtd)
        (g$11984$UGjMA core-prim . &i/o-decoding-rcd)
        (g$11983$UGjMA core-prim . &i/o-decoding-rtd)
        (g$11982$UGjMA core-prim . &i/o-port-rcd)
        (g$11981$UGjMA core-prim . &i/o-port-rtd)
        (g$11980$UGjMA core-prim . &i/o-file-does-not-exist-rcd)
        (g$11979$UGjMA core-prim . &i/o-file-does-not-exist-rtd)
        (g$11978$UGjMA core-prim . &i/o-file-already-exists-rcd)
        (g$11977$UGjMA core-prim . &i/o-file-already-exists-rtd)
        (g$11976$UGjMA core-prim . &i/o-fie-is-read-only-rcd)
        (g$11975$UGjMA core-prim . &i/o-fie-is-read-only-rtd)
        (g$11974$UGjMA core-prim . &i/o-file-protection-rcd)
        (g$11973$UGjMA core-prim . &i/o-file-protection-rtd)
        (g$11972$UGjMA core-prim . &i/o-filename-rcd)
        (g$11971$UGjMA core-prim . &i/o-filename-rtd)
        (g$11970$UGjMA core-prim . &i/o-invalid-position-rcd)
        (g$11969$UGjMA core-prim . &i/o-invalid-position-rtd)
        (g$11968$UGjMA core-prim . &i/o-write-rcd)
        (g$11967$UGjMA core-prim . &i/o-write-rtd)
        (g$11966$UGjMA core-prim . &i/o-read-rcd)
        (g$11965$UGjMA core-prim . &i/o-read-rtd)
        (g$11964$UGjMA core-prim . &i/o-rcd)
        (g$11963$UGjMA core-prim . &i/o-rtd)
        (g$11962$UGjMA core-prim . &undefined-rcd)
        (g$11961$UGjMA core-prim . &undefined-rtd)
        (g$11960$UGjMA core-prim . &syntax-rcd)
        (g$11959$UGjMA core-prim . &syntax-rtd)
        (g$11958$UGjMA core-prim . &lexical-rcd)
        (g$11957$UGjMA core-prim . &lexical-rtd)
        (g$11956$UGjMA core-prim . &implementation-restriction-rcd)
        (g$11955$UGjMA core-prim . &implementation-restriction-rtd)
        (g$11954$UGjMA core-prim . &non-continuable-rcd)
        (g$11953$UGjMA core-prim . &non-continuable-rtd)
        (g$11952$UGjMA core-prim . &who-rcd)
        (g$11951$UGjMA core-prim . &who-rtd)
        (g$11950$UGjMA core-prim . &irritants-rcd)
        (g$11949$UGjMA core-prim . &irritants-rtd)
        (g$11948$UGjMA core-prim . &assertion-rcd)
        (g$11947$UGjMA core-prim . &assertion-rtd)
        (g$11946$UGjMA core-prim . &violation-rcd)
        (g$11945$UGjMA core-prim . &violation-rtd)
        (g$11944$UGjMA core-prim . &error-rcd)
        (g$11943$UGjMA core-prim . &error-rtd)
        (g$11942$UGjMA core-prim . &serious-rcd)
        (g$11941$UGjMA core-prim . &serious-rtd)
        (g$11940$UGjMA core-prim . &warning-rcd)
        (g$11939$UGjMA core-prim . &warning-rtd)
        (g$11938$UGjMA core-prim . &message-rcd)
        (g$11937$UGjMA core-prim . &message-rtd)
        (g$11936$UGjMA core-prim . &condition-rcd)
        (g$11935$UGjMA core-prim . &condition-rtd)
        (g$11934$UGjMA core-prim . library-letrec*)
        (g$11933$UGjMA core-prim . annotation-stripped)
        (g$11932$UGjMA core-prim . annotation-source)
        (g$11931$UGjMA core-prim . annotation-expression)
        (g$11930$UGjMA core-prim . annotation?)
        (g$11929$UGjMA core-prim . read-annotated)
        (g$11928$UGjMA core-prim . tanh)
        (g$11927$UGjMA core-prim . cosh)
        (g$11926$UGjMA core-prim . sinh)
        (g$11925$UGjMA core-prim . make-guid)
        (g$11924$UGjMA core-prim . unspecified?)
        (g$11923$UGjMA core-prim . make-trace)
        (g$11922$UGjMA core-prim . make-list)
        (g$11921$UGjMA core-prim . last-pair)
        (g$11920$UGjMA core-prim . load-r5rs)
        (g$11919$UGjMA core-prim . license)
        (g$11918$UGjMA core-prim . stacktrace)
        (g$11317$UGjMA core-prim . ironscheme-build)
        (g$11917$UGjMA core-prim . define-clr-class-internal)
        (g$11916$UGjMA core-prim . clr-field-set!-internal)
        (g$11915$UGjMA core-prim . clr-field-get-internal)
        (g$11914$UGjMA core-prim . clr-cast-internal)
        (g$11913$UGjMA core-prim . clr-call-internal)
        (g$11912$UGjMA core-prim . clr-new-internal)
        (g$11911$UGjMA core-prim . clr-new-array-internal)
        (g$11910$UGjMA core-prim . clr-is-internal)
        (g$11909$UGjMA core-prim . clr-reference-internal)
        (g$11908$UGjMA core-prim . clr-using-internal)
        (g$11907$UGjMA core-prim . clr-clear-usings-internal)
        (g$8376$UGjMA core-prim . syntax-error)
        (g$8252$UGjMA core-prim . syntax-dispatch)
        (g$11906$UGjMA core-prim . compile-core)
        (g$11905$UGjMA core-prim . eval-core)
        (g$11904$UGjMA core-prim . set-symbol-value!)
        (g$11903$UGjMA core-prim . symbol-value)
        (g$11902$UGjMA core-prim . ungensym)
        (g$11901$UGjMA core-prim . gensym)
        (g$11900$UGjMA core-prim . void)
        (g$11899$UGjMA core-prim . load-serialized-library)
        (g$11898$UGjMA core-prim . serialize-library)
        (g$11319$UGjMA core-prim . compile-system-libraries)
        (g$11321$UGjMA core-prim . compile->closure)
        (g$11320$UGjMA core-prim . compile)
        (g$11316$UGjMA core-prim . load)
        (g$8385$UGjMA core-prim . interaction-environment)
        (g$11897$UGjMA core-prim . char-ready?)
        (g$11896$UGjMA core-prim . string-upcase)
        (g$11895$UGjMA core-prim . string-titlecase)
        (g$11894$UGjMA core-prim . string-normalize-nfkd)
        (g$11893$UGjMA core-prim . string-normalize-nfkc)
        (g$11892$UGjMA core-prim . string-normalize-nfd)
        (g$11891$UGjMA core-prim . string-normalize-nfc)
        (g$11890$UGjMA core-prim . string-foldcase)
        (g$11889$UGjMA core-prim . string-downcase)
        (g$11888$UGjMA core-prim . string-ci>?)
        (g$11887$UGjMA core-prim . string-ci>=?)
        (g$11886$UGjMA core-prim . string-ci=?)
        (g$11885$UGjMA core-prim . string-ci<?)
        (g$11884$UGjMA core-prim . string-ci<=?)
        (g$11883$UGjMA core-prim . char-whitespace?)
        (g$11882$UGjMA core-prim . char-upper-case?)
        (g$11881$UGjMA core-prim . char-title-case?)
        (g$11880$UGjMA core-prim . char-numeric?)
        (g$11879$UGjMA core-prim . char-lower-case?)
        (g$11878$UGjMA core-prim . char-general-category)
        (g$11877$UGjMA core-prim . char-upcase)
        (g$11876$UGjMA core-prim . char-titlecase)
        (g$11875$UGjMA core-prim . char-foldcase)
        (g$11874$UGjMA core-prim . char-downcase)
        (g$11873$UGjMA core-prim . char-ci>?)
        (g$11872$UGjMA core-prim . char-ci>=?)
        (g$11871$UGjMA core-prim . char-ci=?)
        (g$11870$UGjMA core-prim . char-ci<?)
        (g$11869$UGjMA core-prim . char-ci<=?)
        (g$11868$UGjMA core-prim . char-alphabetic?)
        (g$7989$UGjMA core-prim . variable-transformer-procedure)
        (g$7988$UGjMA core-prim . variable-transformer?)
        (g$7987$UGjMA core-prim . make-variable-transformer)
        (g$8380$UGjMA core-prim . identifier?)
        (g$8372$UGjMA core-prim . generate-temporaries)
        (g$8373$UGjMA core-prim . free-identifier=?)
        (g$8382$UGjMA core-prim . syntax->datum)
        (g$8381$UGjMA core-prim . datum->syntax)
        (g$8374$UGjMA core-prim . bound-identifier=?)
        (g$11867$UGjMA core-prim . record-type-descriptor?)
        (g$11866$UGjMA core-prim . record-predicate)
        (g$11865$UGjMA core-prim . record-mutator)
        (g$11864$UGjMA core-prim . record-constructor)
        (g$11863$UGjMA core-prim . record-accessor)
        (g$11862$UGjMA core-prim . make-record-type-descriptor)
        (g$11861$UGjMA core-prim . make-record-constructor-descriptor)
        (g$11860$UGjMA core-prim . record?)
        (g$11859$UGjMA core-prim . record-type-uid)
        (g$11858$UGjMA core-prim . record-type-sealed?)
        (g$11857$UGjMA core-prim . record-type-parent)
        (g$11856$UGjMA core-prim . record-type-opaque?)
        (g$11855$UGjMA core-prim . record-type-name)
        (g$11854$UGjMA core-prim . record-type-generative?)
        (g$11853$UGjMA core-prim . record-type-field-names)
        (g$11852$UGjMA core-prim . record-rtd)
        (g$11851$UGjMA core-prim . record-field-mutable?)
        (g$6018$UGjMA core-prim . delete-file)
        (g$6017$UGjMA core-prim . file-exists?)
        (g$11850$UGjMA core-prim . vector-sort!)
        (g$11849$UGjMA core-prim . vector-sort)
        (g$6524$UGjMA core-prim . list-sort)
        (g$11848$UGjMA core-prim . symbol-hash)
        (g$11847$UGjMA core-prim . string-ci-hash)
        (g$11846$UGjMA core-prim . string-hash)
        (g$11845$UGjMA core-prim . equal-hash)
        (g$11844$UGjMA core-prim . hashtable-equivalence-function)
        (g$11843$UGjMA core-prim . make-hashtable)
        (g$11842$UGjMA core-prim . hashtable-hash-function)
        (g$5985$UGjMA core-prim . make-eqv-hashtable)
        (g$5984$UGjMA core-prim . make-eq-hashtable)
        (g$11841$UGjMA core-prim . hashtable?)
        (g$5991$UGjMA core-prim . hashtable-update!)
        (g$5986$UGjMA core-prim . hashtable-size)
        (g$5988$UGjMA core-prim . hashtable-set!)
        (g$5987$UGjMA core-prim . hashtable-ref)
        (g$11840$UGjMA core-prim . hashtable-mutable?)
        (g$11839$UGjMA core-prim . hashtable-keys)
        (g$11838$UGjMA core-prim . hashtable-entries)
        (g$5989$UGjMA core-prim . hashtable-delete!)
        (g$11837$UGjMA core-prim . hashtable-copy)
        (g$5990$UGjMA core-prim . hashtable-contains?)
        (g$5992$UGjMA core-prim . hashtable-clear!)
        (g$11836$UGjMA core-prim . call-with-output-file)
        (g$11835$UGjMA core-prim . call-with-input-file)
        (g$11834$UGjMA core-prim . write-char)
        (g$11833$UGjMA core-prim . write)
        (g$11832$UGjMA core-prim . with-output-to-file)
        (g$11831$UGjMA core-prim . with-input-from-file)
        (g$11830$UGjMA core-prim . read-char)
        (g$11829$UGjMA core-prim . read)
        (g$11828$UGjMA core-prim . peek-char)
        (g$11827$UGjMA core-prim . open-output-file)
        (g$11826$UGjMA core-prim . open-input-file)
        (g$11825$UGjMA core-prim . newline)
        (g$11824$UGjMA core-prim . display)
        (g$11823$UGjMA core-prim . close-output-port)
        (g$11822$UGjMA core-prim . close-input-port)
        (g$11821$UGjMA core-prim . eof-object?)
        (g$11820$UGjMA core-prim . eof-object)
        (g$11819$UGjMA core-prim . current-error-port)
        (g$11818$UGjMA core-prim . current-output-port)
        (g$11817$UGjMA core-prim . current-input-port)
        (g$11816$UGjMA core-prim . output-port?)
        (g$11815$UGjMA core-prim . input-port?)
        (g$11814$UGjMA core-prim . utf-8-codec)
        (g$11813$UGjMA core-prim . utf-16-codec)
        (g$11812$UGjMA core-prim . transcoder-error-handling-mode)
        (g$11811$UGjMA core-prim . transcoder-eol-style)
        (g$11810$UGjMA core-prim . transcoder-codec)
        (g$11809$UGjMA core-prim . transcoded-port)
        (g$11808$UGjMA core-prim . textual-port?)
        (g$11807$UGjMA core-prim . string->bytevector)
        (g$11806$UGjMA core-prim . standard-output-port)
        (g$11805$UGjMA core-prim . standard-input-port)
        (g$11804$UGjMA core-prim . standard-error-port)
        (g$11803$UGjMA core-prim . set-port-position!)
        (g$11802$UGjMA core-prim . put-u8)
        (g$11801$UGjMA core-prim . put-string)
        (g$11800$UGjMA core-prim . put-datum)
        (g$11799$UGjMA core-prim . put-char)
        (g$11798$UGjMA core-prim . put-bytevector)
        (g$11797$UGjMA core-prim . port?)
        (g$11796$UGjMA core-prim . port-transcoder)
        (g$11795$UGjMA core-prim . port-position)
        (g$11794$UGjMA core-prim . port-has-set-port-position!?)
        (g$11793$UGjMA core-prim . port-has-port-position?)
        (g$11792$UGjMA core-prim . port-eof?)
        (g$11791$UGjMA core-prim . output-port-buffer-mode)
        (g$6915$UGjMA core-prim . open-string-output-port)
        (g$11790$UGjMA core-prim . open-string-input-port)
        (g$11789$UGjMA core-prim . open-file-output-port)
        (g$11788$UGjMA core-prim . open-file-input/output-port)
        (g$11787$UGjMA core-prim . open-file-input-port)
        (g$11786$UGjMA core-prim . open-bytevector-output-port)
        (g$11785$UGjMA core-prim . open-bytevector-input-port)
        (g$11784$UGjMA core-prim . native-transcoder)
        (g$11783$UGjMA core-prim . native-eol-style)
        (g$11782$UGjMA core-prim . make-transcoder)
        (g$11781$UGjMA core-prim . latin-1-codec)
        (g$6772$UGjMA core-prim . make-i/o-write-error)
        (g$6758$UGjMA core-prim . make-i/o-read-error)
        (g$6877$UGjMA core-prim . make-i/o-port-error)
        (g$6787$UGjMA core-prim . make-i/o-invalid-position-error)
        (g$6804$UGjMA core-prim . make-i/o-filename-error)
        (g$6820$UGjMA core-prim . make-i/o-file-protection-error)
        (g$6834$UGjMA core-prim . make-i/o-file-is-read-only-error)
        (g$6862$UGjMA core-prim . make-i/o-file-does-not-exist-error)
        (g$6848$UGjMA core-prim . make-i/o-file-already-exists-error)
        (g$6744$UGjMA core-prim . make-i/o-error)
        (g$6908$UGjMA core-prim . make-i/o-encoding-error)
        (g$6893$UGjMA core-prim . make-i/o-decoding-error)
        (g$11780$UGjMA core-prim . make-custom-textual-output-port)
        (g$11779$UGjMA core-prim . make-custom-textual-input/output-port)
        (g$11778$UGjMA core-prim . make-custom-textual-input-port)
        (g$11777$UGjMA core-prim . make-custom-binary-output-port)
        (g$11776$UGjMA core-prim . make-custom-binary-input/output-port)
        (g$11775$UGjMA core-prim . make-custom-binary-input-port)
        (g$11774$UGjMA core-prim . make-bytevector)
        (g$11773$UGjMA core-prim . lookahead-u8)
        (g$11772$UGjMA core-prim . lookahead-char)
        (g$6773$UGjMA core-prim . i/o-write-error?)
        (g$6759$UGjMA core-prim . i/o-read-error?)
        (g$6879$UGjMA core-prim . i/o-port-error?)
        (g$6789$UGjMA core-prim . i/o-invalid-position-error?)
        (g$6806$UGjMA core-prim . i/o-filename-error?)
        (g$6821$UGjMA core-prim . i/o-file-protection-error?)
        (g$6835$UGjMA core-prim . i/o-file-is-read-only-error?)
        (g$6863$UGjMA core-prim . i/o-file-does-not-exist-error?)
        (g$6849$UGjMA core-prim . i/o-file-already-exists-error?)
        (g$6745$UGjMA core-prim . i/o-error?)
        (g$6880$UGjMA core-prim . i/o-error-port)
        (g$6807$UGjMA core-prim . i/o-error-filename)
        (g$6910$UGjMA core-prim . i/o-encoding-error?)
        (g$6911$UGjMA core-prim . i/o-encoding-error-char)
        (g$6894$UGjMA core-prim . i/o-decoding-error?)
        (g$11771$UGjMA core-prim . get-u8)
        (g$11770$UGjMA core-prim . get-string-n!)
        (g$11769$UGjMA core-prim . get-string-n)
        (g$11768$UGjMA core-prim . get-string-all)
        (g$11767$UGjMA core-prim . get-line)
        (g$11766$UGjMA core-prim . get-datum)
        (g$11765$UGjMA core-prim . get-char)
        (g$11764$UGjMA core-prim . get-bytevector-some)
        (g$11763$UGjMA core-prim . get-bytevector-n!)
        (g$11762$UGjMA core-prim . get-bytevector-n)
        (g$11761$UGjMA core-prim . get-bytevector-all)
        (g$11760$UGjMA core-prim . flush-output-port)
        (g$11759$UGjMA core-prim . close-port)
        (g$11758$UGjMA core-prim . call-with-string-output-port)
        (g$11757$UGjMA core-prim . call-with-port)
        (g$11756$UGjMA core-prim . call-with-bytevector-output-port)
        (g$11755$UGjMA core-prim . bytevector->string)
        (g$11754$UGjMA core-prim . buffer-mode?)
        (g$11753$UGjMA core-prim . binary-port?)
        (g$8363$UGjMA core-prim . scheme-report-environment)
        (g$6511$UGjMA core-prim . quotient)
        (g$8362$UGjMA core-prim . null-environment)
        (g$6512$UGjMA core-prim . remainder)
        (g$6513$UGjMA core-prim . modulo)
        (g$11752$UGjMA core-prim . inexact->exact)
        (g$11751$UGjMA core-prim . force)
        (g$11750$UGjMA core-prim . exact->inexact)
        (g$11749$UGjMA core-prim . exit)
        (g$11313$UGjMA core-prim . command-line)
        (g$11748$UGjMA core-prim . string-fill!)
        (g$11747$UGjMA core-prim . string-set!)
        (g$11746$UGjMA core-prim . set-cdr!)
        (g$11745$UGjMA core-prim . set-car!)
        (g$6098$UGjMA core-prim . remove)
        (g$6099$UGjMA core-prim . remv)
        (g$6084$UGjMA core-prim . remp)
        (g$6100$UGjMA core-prim . remq)
        (g$6083$UGjMA core-prim . partition)
        (g$11744$UGjMA core-prim . memv)
        (g$11743$UGjMA core-prim . memq)
        (g$6090$UGjMA core-prim . memp)
        (g$6089$UGjMA core-prim . member)
        (g$6094$UGjMA core-prim . exists)
        (g$6093$UGjMA core-prim . for-all)
        (g$6097$UGjMA core-prim . fold-right)
        (g$6096$UGjMA core-prim . fold-left)
        (g$6082$UGjMA core-prim . find)
        (g$6085$UGjMA core-prim . filter)
        (g$6095$UGjMA core-prim . cons*)
        (g$6086$UGjMA core-prim . assv)
        (g$11742$UGjMA core-prim . assq)
        (g$6088$UGjMA core-prim . assp)
        (g$6087$UGjMA core-prim . assoc)
        (g$11741$UGjMA core-prim . with-exception-handler)
        (g$11740$UGjMA core-prim . raise-continuable)
        (g$11739$UGjMA core-prim . raise)
        (g$8365$UGjMA core-prim . eval)
        (g$8361$UGjMA core-prim . environment)
        (g$6964$UGjMA core-prim . make-enumeration)
        (g$6971$UGjMA core-prim . enum-set=?)
        (g$6965$UGjMA core-prim . enum-set-universe)
        (g$6972$UGjMA core-prim . enum-set-union)
        (g$6970$UGjMA core-prim . enum-set-subset?)
        (g$6976$UGjMA core-prim . enum-set-projection)
        (g$6969$UGjMA core-prim . enum-set-member?)
        (g$6973$UGjMA core-prim . enum-set-intersection)
        (g$6966$UGjMA core-prim . enum-set-indexer)
        (g$6974$UGjMA core-prim . enum-set-difference)
        (g$6967$UGjMA core-prim . enum-set-constructor)
        (g$6975$UGjMA core-prim . enum-set-complement)
        (g$6968$UGjMA core-prim . enum-set->list)
        (g$6422$UGjMA core-prim . who-condition?)
        (g$6333$UGjMA core-prim . warning?)
        (g$6375$UGjMA core-prim . violation?)
        (g$6499$UGjMA core-prim . undefined-violation?)
        (g$6483$UGjMA core-prim . syntax-violation?)
        (g$6485$UGjMA core-prim . syntax-violation-subform)
        (g$6484$UGjMA core-prim . syntax-violation-form)
        (g$8379$UGjMA core-prim . syntax-violation)
        (g$11738$UGjMA core-prim . simple-conditions)
        (g$6347$UGjMA core-prim . serious-condition?)
        (g$6437$UGjMA core-prim . non-continuable-violation?)
        (g$6318$UGjMA core-prim . message-condition?)
        (g$6420$UGjMA core-prim . make-who-condition)
        (g$6332$UGjMA core-prim . make-warning)
        (g$6374$UGjMA core-prim . make-violation)
        (g$6498$UGjMA core-prim . make-undefined-violation)
        (g$6480$UGjMA core-prim . make-syntax-violation)
        (g$6346$UGjMA core-prim . make-serious-condition)
        (g$6436$UGjMA core-prim . make-non-continuable-violation)
        (g$6316$UGjMA core-prim . make-message-condition)
        (g$6464$UGjMA core-prim . make-lexical-violation)
        (g$6403$UGjMA core-prim . make-irritants-condition)
        (g$6450$UGjMA core-prim . make-implementation-restriction-violation)
        (g$6360$UGjMA core-prim . make-error)
        (g$6388$UGjMA core-prim . make-assertion-violation)
        (g$6465$UGjMA core-prim . lexical-violation?)
        (g$6405$UGjMA core-prim . irritants-condition?)
        (g$6451$UGjMA core-prim . implementation-restriction-violation?)
        (g$6361$UGjMA core-prim . error?)
        (g$6423$UGjMA core-prim . condition-who)
        (g$11737$UGjMA core-prim . condition-predicate)
        (g$6319$UGjMA core-prim . condition-message)
        (g$6406$UGjMA core-prim . condition-irritants)
        (g$11736$UGjMA core-prim . condition-accessor)
        (g$11735$UGjMA core-prim . condition)
        (g$6389$UGjMA core-prim . assertion-violation?)
        (g$11734$UGjMA core-prim . condition?)
        (g$11733$UGjMA core-prim . utf32->string)
        (g$11732$UGjMA core-prim . utf16->string)
        (g$11731$UGjMA core-prim . utf8->string)
        (g$11730$UGjMA core-prim . uint-list->bytevector)
        (g$11729$UGjMA core-prim . u8-list->bytevector)
        (g$11728$UGjMA core-prim . string->utf8)
        (g$11727$UGjMA core-prim . string->utf32)
        (g$11726$UGjMA core-prim . string->utf16)
        (g$11725$UGjMA core-prim . sint-list->bytevector)
        (g$6174$UGjMA core-prim . native-endianness)
        (g$11724$UGjMA core-prim . bytevector?)
        (g$11723$UGjMA core-prim . bytevector=?)
        (g$11722$UGjMA core-prim . bytevector-uint-set!)
        (g$11721$UGjMA core-prim . bytevector-uint-ref)
        (g$11720$UGjMA core-prim . bytevector-u8-set!)
        (g$11719$UGjMA core-prim . bytevector-u8-ref)
        (g$6195$UGjMA core-prim . bytevector-u64-set!)
        (g$6191$UGjMA core-prim . bytevector-u64-ref)
        (g$6197$UGjMA core-prim . bytevector-u64-native-set!)
        (g$6193$UGjMA core-prim . bytevector-u64-native-ref)
        (g$6187$UGjMA core-prim . bytevector-u32-set!)
        (g$6183$UGjMA core-prim . bytevector-u32-ref)
        (g$6189$UGjMA core-prim . bytevector-u32-native-set!)
        (g$6185$UGjMA core-prim . bytevector-u32-native-ref)
        (g$6179$UGjMA core-prim . bytevector-u16-set!)
        (g$6175$UGjMA core-prim . bytevector-u16-ref)
        (g$6181$UGjMA core-prim . bytevector-u16-native-set!)
        (g$6177$UGjMA core-prim . bytevector-u16-native-ref)
        (g$11718$UGjMA core-prim . bytevector-sint-set!)
        (g$11717$UGjMA core-prim . bytevector-sint-ref)
        (g$11716$UGjMA core-prim . bytevector-s8-set!)
        (g$11715$UGjMA core-prim . bytevector-s8-ref)
        (g$6196$UGjMA core-prim . bytevector-s64-set!)
        (g$6192$UGjMA core-prim . bytevector-s64-ref)
        (g$6198$UGjMA core-prim . bytevector-s64-native-set!)
        (g$6194$UGjMA core-prim . bytevector-s64-native-ref)
        (g$6188$UGjMA core-prim . bytevector-s32-set!)
        (g$6184$UGjMA core-prim . bytevector-s32-ref)
        (g$6190$UGjMA core-prim . bytevector-s32-native-set!)
        (g$6186$UGjMA core-prim . bytevector-s32-native-ref)
        (g$6180$UGjMA core-prim . bytevector-s16-set!)
        (g$6176$UGjMA core-prim . bytevector-s16-ref)
        (g$6182$UGjMA core-prim . bytevector-s16-native-set!)
        (g$6178$UGjMA core-prim . bytevector-s16-native-ref)
        (g$11714$UGjMA core-prim . bytevector-length)
        (g$11713$UGjMA core-prim . bytevector-ieee-single-set!)
        (g$11712$UGjMA core-prim . bytevector-ieee-single-ref)
        (g$6201$UGjMA core-prim . bytevector-ieee-single-native-set!)
        (g$6199$UGjMA core-prim . bytevector-ieee-single-native-ref)
        (g$11711$UGjMA core-prim . bytevector-ieee-double-set!)
        (g$11710$UGjMA core-prim . bytevector-ieee-double-ref)
        (g$6202$UGjMA core-prim . bytevector-ieee-double-native-set!)
        (g$6200$UGjMA core-prim . bytevector-ieee-double-native-ref)
        (g$11709$UGjMA core-prim . bytevector-fill!)
        (g$11708$UGjMA core-prim . bytevector-copy!)
        (g$11707$UGjMA core-prim . bytevector-copy)
        (g$11706$UGjMA core-prim . bytevector->uint-list)
        (g$11705$UGjMA core-prim . bytevector->u8-list)
        (g$11704$UGjMA core-prim . bytevector->sint-list)
        (g$6730$UGjMA core-prim . no-nans-violation?)
        (g$6716$UGjMA core-prim . no-infinities-violation?)
        (g$6729$UGjMA core-prim . make-no-nans-violation)
        (g$6715$UGjMA core-prim . make-no-infinities-violation)
        (g$11703$UGjMA core-prim . real->flonum)
        (g$11702$UGjMA core-prim . flzero?)
        (g$11701$UGjMA core-prim . fltruncate)
        (g$11700$UGjMA core-prim . fltan)
        (g$11699$UGjMA core-prim . flsqrt)
        (g$11698$UGjMA core-prim . flsin)
        (g$11697$UGjMA core-prim . flround)
        (g$11696$UGjMA core-prim . flpositive?)
        (g$11695$UGjMA core-prim . flonum?)
        (g$11694$UGjMA core-prim . flodd?)
        (g$11693$UGjMA core-prim . flnumerator)
        (g$11692$UGjMA core-prim . flnegative?)
        (g$11691$UGjMA core-prim . flnan?)
        (g$11690$UGjMA core-prim . flmod0)
        (g$11689$UGjMA core-prim . flmod)
        (g$11688$UGjMA core-prim . flmin)
        (g$11687$UGjMA core-prim . flmax)
        (g$11686$UGjMA core-prim . fllog)
        (g$11685$UGjMA core-prim . flinteger?)
        (g$11684$UGjMA core-prim . flinfinite?)
        (g$11683$UGjMA core-prim . flfloor)
        (g$11682$UGjMA core-prim . flfinite?)
        (g$11681$UGjMA core-prim . flexpt)
        (g$11680$UGjMA core-prim . flexp)
        (g$11679$UGjMA core-prim . fleven?)
        (g$11678$UGjMA core-prim . fldiv0-and-mod0)
        (g$11677$UGjMA core-prim . fldiv0)
        (g$11676$UGjMA core-prim . fldiv-and-mod)
        (g$11675$UGjMA core-prim . fldiv)
        (g$11674$UGjMA core-prim . fldenominator)
        (g$11673$UGjMA core-prim . flcos)
        (g$11672$UGjMA core-prim . flceiling)
        (g$11671$UGjMA core-prim . flatan)
        (g$11670$UGjMA core-prim . flasin)
        (g$11669$UGjMA core-prim . flacos)
        (g$11668$UGjMA core-prim . flabs)
        (g$11667$UGjMA core-prim . fl>?)
        (g$11666$UGjMA core-prim . fl>=?)
        (g$11665$UGjMA core-prim . fl=?)
        (g$11664$UGjMA core-prim . fl<?)
        (g$11663$UGjMA core-prim . fl<=?)
        (g$11662$UGjMA core-prim . fl/)
        (g$11661$UGjMA core-prim . fl-)
        (g$11660$UGjMA core-prim . fl+)
        (g$11659$UGjMA core-prim . fl*)
        (g$11658$UGjMA core-prim . fixnum->flonum)
        (g$11657$UGjMA core-prim . fxzero?)
        (g$11656$UGjMA core-prim . fxxor)
        (g$6661$UGjMA core-prim . fxrotate-bit-field)
        (g$11655$UGjMA core-prim . fxreverse-bit-field)
        (g$11654$UGjMA core-prim . fxpositive?)
        (g$11653$UGjMA core-prim . fxodd?)
        (g$11652$UGjMA core-prim . fxnot)
        (g$11651$UGjMA core-prim . fxnegative?)
        (g$11650$UGjMA core-prim . fxmod0)
        (g$11649$UGjMA core-prim . fxmod)
        (g$11648$UGjMA core-prim . fxmin)
        (g$11647$UGjMA core-prim . fxmax)
        (g$11646$UGjMA core-prim . fxlength)
        (g$11645$UGjMA core-prim . fxior)
        (g$6655$UGjMA core-prim . fxif)
        (g$11644$UGjMA core-prim . fxfirst-bit-set)
        (g$11643$UGjMA core-prim . fxeven?)
        (g$11642$UGjMA core-prim . fxdiv0-and-mod0)
        (g$11641$UGjMA core-prim . fxdiv0)
        (g$11640$UGjMA core-prim . fxdiv-and-mod)
        (g$11639$UGjMA core-prim . fxdiv)
        (g$6658$UGjMA core-prim . fxcopy-bit-field)
        (g$6656$UGjMA core-prim . fxcopy-bit)
        (g$11638$UGjMA core-prim . fxbit-set?)
        (g$6657$UGjMA core-prim . fxbit-field)
        (g$11637$UGjMA core-prim . fxbit-count)
        (g$6660$UGjMA core-prim . fxarithmetic-shift-right)
        (g$6659$UGjMA core-prim . fxarithmetic-shift-left)
        (g$11636$UGjMA core-prim . fxarithmetic-shift)
        (g$11635$UGjMA core-prim . fxand)
        (g$11634$UGjMA core-prim . fx>?)
        (g$11633$UGjMA core-prim . fx>=?)
        (g$11632$UGjMA core-prim . fx=?)
        (g$11631$UGjMA core-prim . fx<?)
        (g$11630$UGjMA core-prim . fx<=?)
        (g$11629$UGjMA core-prim . fx-/carry)
        (g$11628$UGjMA core-prim . fx-)
        (g$11627$UGjMA core-prim . fx+/carry)
        (g$11626$UGjMA core-prim . fx+)
        (g$11625$UGjMA core-prim . fx*/carry)
        (g$11624$UGjMA core-prim . fx*)
        (g$11623$UGjMA core-prim . greatest-fixnum)
        (g$11622$UGjMA core-prim . least-fixnum)
        (g$11621$UGjMA core-prim . fixnum-width)
        (g$11620$UGjMA core-prim . fixnum?)
        (g$6609$UGjMA core-prim . bitwise-rotate-bit-field)
        (g$6610$UGjMA core-prim . bitwise-reverse-bit-field)
        (g$11619$UGjMA core-prim . bitwise-length)
        (g$6603$UGjMA core-prim . bitwise-if)
        (g$11618$UGjMA core-prim . bitwise-first-bit-set)
        (g$6606$UGjMA core-prim . bitwise-copy-bit-field)
        (g$6604$UGjMA core-prim . bitwise-copy-bit)
        (g$11617$UGjMA core-prim . bitwise-bit-set?)
        (g$11616$UGjMA core-prim . bitwise-bit-field)
        (g$11615$UGjMA core-prim . bitwise-bit-count)
        (g$11614$UGjMA core-prim . bitwise-xor)
        (g$11613$UGjMA core-prim . bitwise-ior)
        (g$11612$UGjMA core-prim . bitwise-and)
        (g$11611$UGjMA core-prim . bitwise-not)
        (g$6608$UGjMA core-prim . bitwise-arithmetic-shift-right)
        (g$6607$UGjMA core-prim . bitwise-arithmetic-shift-left)
        (g$11610$UGjMA core-prim . bitwise-arithmetic-shift)
        (g$11609$UGjMA core-prim . zero?)
        (g$11608$UGjMA core-prim . vector?)
        (g$11607$UGjMA core-prim . vector-set!)
        (g$11606$UGjMA core-prim . vector-ref)
        (g$11605$UGjMA core-prim . vector-map)
        (g$11604$UGjMA core-prim . vector-length)
        (g$11603$UGjMA core-prim . vector-for-each)
        (g$11602$UGjMA core-prim . vector-fill!)
        (g$11601$UGjMA core-prim . vector->list)
        (g$11600$UGjMA core-prim . vector)
        (g$11599$UGjMA core-prim . values)
        (g$11598$UGjMA core-prim . truncate)
        (g$11597$UGjMA core-prim . tan)
        (g$11596$UGjMA core-prim . symbol?)
        (g$11595$UGjMA core-prim . symbol=?)
        (g$11594$UGjMA core-prim . symbol->string)
        (g$11593$UGjMA core-prim . substring)
        (g$11592$UGjMA core-prim . string?)
        (g$11591$UGjMA core-prim . string>?)
        (g$11590$UGjMA core-prim . string>=?)
        (g$11589$UGjMA core-prim . string=?)
        (g$11588$UGjMA core-prim . string<?)
        (g$11587$UGjMA core-prim . string<=?)
        (g$11586$UGjMA core-prim . string-ref)
        (g$11585$UGjMA core-prim . string-length)
        (g$11584$UGjMA core-prim . string-for-each)
        (g$11583$UGjMA core-prim . string-copy)
        (g$11582$UGjMA core-prim . string-append)
        (g$11581$UGjMA core-prim . string->symbol)
        (g$11580$UGjMA core-prim . string->number)
        (g$11579$UGjMA core-prim . string->list)
        (g$11578$UGjMA core-prim . string)
        (g$11577$UGjMA core-prim . sqrt)
        (g$11576$UGjMA core-prim . sin)
        (g$11575$UGjMA core-prim . round)
        (g$11574$UGjMA core-prim . reverse)
        (g$11573$UGjMA core-prim . real?)
        (g$11572$UGjMA core-prim . real-valued?)
        (g$11571$UGjMA core-prim . real-part)
        (g$5635$UGjMA core-prim . rationalize)
        (g$11570$UGjMA core-prim . rational?)
        (g$11569$UGjMA core-prim . rational-valued?)
        (g$11568$UGjMA core-prim . procedure?)
        (g$11567$UGjMA core-prim . positive?)
        (g$11566$UGjMA core-prim . pair?)
        (g$11565$UGjMA core-prim . odd?)
        (g$11564$UGjMA core-prim . numerator)
        (g$11563$UGjMA core-prim . number?)
        (g$11562$UGjMA core-prim . number->string)
        (g$11561$UGjMA core-prim . null?)
        (g$11560$UGjMA core-prim . not)
        (g$11559$UGjMA core-prim . negative?)
        (g$11558$UGjMA core-prim . nan?)
        (g$11557$UGjMA core-prim . min)
        (g$11556$UGjMA core-prim . max)
        (g$11555$UGjMA core-prim . map)
        (g$11554$UGjMA core-prim . make-vector)
        (g$11553$UGjMA core-prim . make-string)
        (g$11552$UGjMA core-prim . make-rectangular)
        (g$11551$UGjMA core-prim . make-polar)
        (g$11550$UGjMA core-prim . magnitude)
        (g$11549$UGjMA core-prim . log)
        (g$11548$UGjMA core-prim . list?)
        (g$11547$UGjMA core-prim . list-tail)
        (g$11546$UGjMA core-prim . list-ref)
        (g$11545$UGjMA core-prim . list->vector)
        (g$11544$UGjMA core-prim . list->string)
        (g$11543$UGjMA core-prim . list)
        (g$11542$UGjMA core-prim . length)
        (g$11541$UGjMA core-prim . lcm)
        (g$11540$UGjMA core-prim . integer?)
        (g$11539$UGjMA core-prim . integer-valued?)
        (g$11538$UGjMA core-prim . integer->char)
        (g$11537$UGjMA core-prim . infinite?)
        (g$11536$UGjMA core-prim . inexact?)
        (g$11535$UGjMA core-prim . inexact)
        (g$11534$UGjMA core-prim . imag-part)
        (g$11533$UGjMA core-prim . gcd)
        (g$11532$UGjMA core-prim . for-each)
        (g$11531$UGjMA core-prim . floor)
        (g$11530$UGjMA core-prim . finite?)
        (g$11529$UGjMA core-prim . expt)
        (g$11528$UGjMA core-prim . exp)
        (g$11527$UGjMA core-prim . exact?)
        (g$11526$UGjMA core-prim . exact-integer-sqrt)
        (g$11525$UGjMA core-prim . exact)
        (g$11524$UGjMA core-prim . even?)
        (g$11523$UGjMA core-prim . error)
        (g$11522$UGjMA core-prim . eqv?)
        (g$11521$UGjMA core-prim . equal?)
        (g$11520$UGjMA core-prim . eq?)
        (g$11519$UGjMA core-prim . dynamic-wind)
        (g$11518$UGjMA core-prim . div0-and-mod0)
        (g$11517$UGjMA core-prim . mod0)
        (g$11516$UGjMA core-prim . div0)
        (g$11515$UGjMA core-prim . div-and-mod)
        (g$11514$UGjMA core-prim . mod)
        (g$11513$UGjMA core-prim . div)
        (g$11512$UGjMA core-prim . denominator)
        (g$11511$UGjMA core-prim . cos)
        (g$11510$UGjMA core-prim . cons)
        (g$11509$UGjMA core-prim . complex?)
        (g$11508$UGjMA core-prim . char?)
        (g$11507$UGjMA core-prim . char>?)
        (g$11506$UGjMA core-prim . char>=?)
        (g$11505$UGjMA core-prim . char=?)
        (g$11504$UGjMA core-prim . char<?)
        (g$11503$UGjMA core-prim . char<=?)
        (g$11502$UGjMA core-prim . char->integer)
        (g$11501$UGjMA core-prim . ceiling)
        (g$11500$UGjMA core-prim . call-with-values)
        (g$11499$UGjMA core-prim . call/cc)
        (g$11498$UGjMA core-prim . call-with-current-continuation)
        (g$5634$UGjMA core-prim . cddddr)
        (g$5633$UGjMA core-prim . cdddar)
        (g$5632$UGjMA core-prim . cddadr)
        (g$5631$UGjMA core-prim . cddaar)
        (g$5630$UGjMA core-prim . cdaddr)
        (g$5629$UGjMA core-prim . cdadar)
        (g$5628$UGjMA core-prim . cdaadr)
        (g$5627$UGjMA core-prim . cdaaar)
        (g$5626$UGjMA core-prim . cadddr)
        (g$5625$UGjMA core-prim . caddar)
        (g$5624$UGjMA core-prim . cadadr)
        (g$5623$UGjMA core-prim . cadaar)
        (g$5622$UGjMA core-prim . caaddr)
        (g$5621$UGjMA core-prim . caadar)
        (g$5620$UGjMA core-prim . caaadr)
        (g$5619$UGjMA core-prim . caaaar)
        (g$5618$UGjMA core-prim . cdddr)
        (g$5617$UGjMA core-prim . cddar)
        (g$5616$UGjMA core-prim . cdadr)
        (g$5615$UGjMA core-prim . cdaar)
        (g$5614$UGjMA core-prim . caddr)
        (g$5613$UGjMA core-prim . cadar)
        (g$5612$UGjMA core-prim . caadr)
        (g$5611$UGjMA core-prim . caaar)
        (g$5610$UGjMA core-prim . cddr)
        (g$5609$UGjMA core-prim . cdar)
        (g$5608$UGjMA core-prim . cadr)
        (g$5607$UGjMA core-prim . caar)
        (g$11497$UGjMA core-prim . cdr)
        (g$11496$UGjMA core-prim . car)
        (g$11495$UGjMA core-prim . boolean?)
        (g$11494$UGjMA core-prim . boolean=?)
        (g$11493$UGjMA core-prim . atan)
        (g$11492$UGjMA core-prim . assertion-violation)
        (g$11491$UGjMA core-prim . asin)
        (g$11490$UGjMA core-prim . apply)
        (g$11489$UGjMA core-prim . append)
        (g$11488$UGjMA core-prim . angle)
        (g$11487$UGjMA core-prim . acos)
        (g$11486$UGjMA core-prim . abs)
        (g$11485$UGjMA core-prim . /)
        (g$11484$UGjMA core-prim . *)
        (g$11483$UGjMA core-prim . -)
        (g$11482$UGjMA core-prim . +)
        (g$11481$UGjMA core-prim . >=)
        (g$11480$UGjMA core-prim . >)
        (g$11479$UGjMA core-prim . =)
        (g$11478$UGjMA core-prim . <=)
        (g$11477$UGjMA core-prim . <)
        (g$11476$UGjMA core-prim . make-record-printer)
        (g$11475$UGjMA core-prim . eqv-hash)
        (g$11474$UGjMA core-prim . eq-hash)
        (g$11473$UGjMA core-prim . reverse!)
        (g$11315$UGjMA core-prim . load/args)
        (g$7077$UGjMA core-prim . printf)
        (g$7078$UGjMA core-prim . fprintf)
        (g$7079$UGjMA core-prim . format)
        (g$11472$UGjMA core-prim . get-arity)
        (g$11471$UGjMA core-prim . gc-collect)
        (g$11470$UGjMA core-prim . clr-type?)
        (g$11469$UGjMA core-prim . get-clr-type)
        (g$11468$UGjMA core-prim . get-command-line)
        (g$11467$UGjMA core-prim . vector-append)
        (g$11466$UGjMA core-prim . vector-filter)
        (g$11465$UGjMA core-prim . vector-reverse!)
        (g$11464$UGjMA core-prim . vector-contains?)
        (g$11463$UGjMA core-prim . vector-index-of)
        (g$11462$UGjMA core-prim . vector-copy)
        (g$11461$UGjMA core-prim . vector-binary-search)
        (g$11460$UGjMA core-prim . get-output-string)
        (g$11459$UGjMA core-prim . open-output-string)
        (g$11458$UGjMA core-prim . open-input-string)
        (g$11457$UGjMA core-prim . string-format)
        (g$11312$UGjMA core-prim . trace-printer)
        (g$11456$UGjMA core-prim . make-traced-procedure)
        (g$7098$UGjMA core-prim . make-traced-macro)
        (g$11455$UGjMA core-prim . pmap)
        (g$11454$UGjMA core-prim . time-it)
        (g$7103$UGjMA core-prim . make-parameter)
        (g$11453$UGjMA core-prim . library-locator)
        (g$11452$UGjMA core-prim . get-library-paths)
        (g$8359$UGjMA core-prim . environment-symbols)
        (g$8358$UGjMA core-prim . interaction-environment-symbols)
        (g$7528$UGjMA core-prim . library-path)
        (g$7529$UGjMA core-prim . library-extensions)
        (g$7549$UGjMA core-prim . installed-libraries)
        (g$8364$UGjMA core-prim . expand)
        (g$11451$UGjMA $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$11450$UGjMA $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$11449$UGjMA $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$11448$UGjMA $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$11447$UGjMA $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$11446$UGjMA
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$11445$UGjMA
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$11444$UGjMA
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$11443$UGjMA
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$11442$UGjMA $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$11441$UGjMA
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$11440$UGjMA $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$11439$UGjMA $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$11438$UGjMA $core-rtd &i/o-rtd &i/o-rcd)
        (g$11437$UGjMA $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$11436$UGjMA $core-rtd &undefined-rtd &undefined-rcd)
        (g$11435$UGjMA $core-rtd &syntax-rtd &syntax-rcd)
        (g$11434$UGjMA $core-rtd &lexical-rtd &lexical-rcd)
        (g$11433$UGjMA
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$11432$UGjMA $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$11431$UGjMA $core-rtd &who-rtd &who-rcd)
        (g$11430$UGjMA $core-rtd &irritants-rtd &irritants-rcd)
        (g$11429$UGjMA $core-rtd &assertion-rtd &assertion-rcd)
        (g$11428$UGjMA $core-rtd &violation-rtd &violation-rcd)
        (g$11427$UGjMA $core-rtd &error-rtd &error-rcd)
        (g$11426$UGjMA $core-rtd &serious-rtd &serious-rcd)
        (g$11425$UGjMA $core-rtd &warning-rtd &warning-rcd)
        (g$11424$UGjMA $core-rtd &message-rtd &message-rcd)
        (g$11423$UGjMA $core-rtd &condition-rtd &condition-rcd)
        (g$11422$UGjMA macro . define-condition-type)
        (g$11421$UGjMA macro . define-enumeration)
        (g$11420$UGjMA macro . define-record-type)
        (g$11419$UGjMA macro . parent-rtd)
        (g$11418$UGjMA macro . nongenerative)
        (g$11417$UGjMA macro . opaque)
        (g$11416$UGjMA macro . sealed)
        (g$11415$UGjMA macro . protocol)
        (g$11414$UGjMA macro . parent)
        (g$11413$UGjMA macro . immutable)
        (g$11412$UGjMA macro . mutable)
        (g$11411$UGjMA macro . fields)
        (g$11410$UGjMA macro . error-handling-mode)
        (g$11409$UGjMA macro . file-options)
        (g$11408$UGjMA macro . buffer-mode)
        (g$11407$UGjMA macro . eol-style)
        (g$11406$UGjMA macro . guard)
        (g$11405$UGjMA macro . trace-letrec-syntax)
        (g$11404$UGjMA macro . trace-let-syntax)
        (g$11403$UGjMA macro . trace-define-syntax)
        (g$11402$UGjMA macro . trace-define)
        (g$11401$UGjMA macro . trace-lambda)
        (g$11400$UGjMA macro . unsyntax-splicing)
        (g$11399$UGjMA macro . unsyntax)
        (g$11398$UGjMA macro . unquote-splicing)
        (g$11397$UGjMA macro . unquote)
        (g$11396$UGjMA macro . _)
        (g$11395$UGjMA macro . else)
        (g$11394$UGjMA macro . =>)
        (g$11393$UGjMA macro . ...)
        (g$11392$UGjMA macro . assert)
        (g$11391$UGjMA macro . endianness)
        (g$11390$UGjMA macro . delay)
        (g$11389$UGjMA macro . time)
        (g$11388$UGjMA macro . or)
        (g$11387$UGjMA macro . and)
        (g$11386$UGjMA macro . do)
        (g$11385$UGjMA macro . cond)
        (g$11384$UGjMA macro . let*)
        (g$11383$UGjMA macro . let)
        (g$11382$UGjMA macro . identifier-syntax)
        (g$11381$UGjMA macro . with-syntax)
        (g$11380$UGjMA macro . quasisyntax)
        (g$11379$UGjMA macro . quasiquote)
        (g$11378$UGjMA macro . syntax-rules)
        (g$11377$UGjMA macro . include-into)
        (g$11376$UGjMA macro . include)
        (g$11375$UGjMA macro . define-struct)
        (g$11374$UGjMA macro . let-values)
        (g$11373$UGjMA macro . let*-values)
        (g$11372$UGjMA core-macro . record-constructor-descriptor)
        (g$11371$UGjMA core-macro . record-type-descriptor)
        (g$11370$UGjMA core-macro . fluid-let-syntax)
        (g$11369$UGjMA core-macro . case)
        (g$11368$UGjMA core-macro . parameterize)
        (g$11367$UGjMA core-macro . unless)
        (g$11366$UGjMA core-macro . when)
        (g$11365$UGjMA core-macro . if)
        (g$11364$UGjMA core-macro . letrec*)
        (g$11363$UGjMA core-macro . letrec)
        (g$11362$UGjMA core-macro . type-descriptor)
        (g$11361$UGjMA core-macro . case-lambda)
        (g$11360$UGjMA core-macro . lambda)
        (g$11359$UGjMA core-macro . syntax)
        (g$11358$UGjMA core-macro . syntax-case)
        (g$11357$UGjMA core-macro . quote)
        (g$11356$UGjMA core-macro . foreign-call)
        (g$11355$UGjMA letrec-syntax)
        (g$11354$UGjMA let-syntax)
        (g$11353$UGjMA set!)
        (g$11352$UGjMA import)
        (g$11351$UGjMA library)
        (g$11350$UGjMA begin)
        (g$11349$UGjMA module)
        (g$11348$UGjMA define-syntax)
        (g$11347$UGjMA define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6902$UGjMA
      'g$12027$UGjMA
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$11906$UGjMA)
        (eval-core . g$11905$UGjMA)
        (set-symbol-value! . g$11904$UGjMA)
        (symbol-value . g$11903$UGjMA)
        (gensym . g$11901$UGjMA)
        (void . g$11900$UGjMA))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$10931$UGjMA
     g$trace-printer$10970$UGjMA
     (g$make-parameter$6357$UGjMA write))
   (g$command-line$10932$UGjMA
     g$command-line$10971$UGjMA
     (g$make-parameter$6357$UGjMA (get-command-line)))
   (g$local-library-path$10933$UGjMA
     g$local-library-path$10972$UGjMA
     (case-lambda
       ((g$filename$10943$UGjMA)
        (cons
          (g$get-directory-name$5251$UGjMA g$filename$10943$UGjMA)
          (g$library-path$6886$UGjMA)))))
   (g$load/args$10934$UGjMA
     g$load/args$10973$UGjMA
     (case-lambda
       ((g$filename$10944$UGjMA . g$args$10945$UGjMA)
        (begin
          (apply
            g$load-r6rs-top-level$10941$UGjMA
            g$filename$10944$UGjMA
            'load
            g$args$10945$UGjMA)
          (void)))))
   (g$load$10935$UGjMA
     g$load$10974$UGjMA
     (case-lambda
       ((g$filename$10946$UGjMA)
        (begin
          (apply
            g$load-r6rs-top-level$10941$UGjMA
            g$filename$10946$UGjMA
            'load
            (cdr (g$command-line$10932$UGjMA)))
          (void)))))
   (g$ironscheme-build$10936$UGjMA
     g$ironscheme-build$10975$UGjMA
     (case-lambda (() (g$load$10935$UGjMA '"ironscheme-buildscript.ss"))))
   (g$eval-top-level$10937$UGjMA
     g$eval-top-level$10976$UGjMA
     (case-lambda
       ((g$x$10947$UGjMA)
        (g$eval$10909$UGjMA
          g$x$10947$UGjMA
          (g$interaction-environment$10929$UGjMA)))))
   (g$compile-system-libraries$10938$UGjMA
     g$compile-system-libraries$10977$UGjMA
     (case-lambda
       (()
        (g$eval-top-level$10937$UGjMA
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$10939$UGjMA
     g$compile$10978$UGjMA
     (case-lambda
       ((g$filename$10948$UGjMA)
        (g$load-r6rs-top-level$10941$UGjMA g$filename$10948$UGjMA 'compile))))
   (g$compile->closure$10940$UGjMA
     g$compile->closure$10979$UGjMA
     (case-lambda
       ((g$filename$10949$UGjMA)
        (g$load-r6rs-top-level$10941$UGjMA g$filename$10949$UGjMA 'closure))))
   (g$load-r6rs-top-level$10941$UGjMA
     g$load-r6rs-top-level$10980$UGjMA
     (case-lambda
       ((g$filename$10950$UGjMA g$how$10951$UGjMA . g$args$10952$UGjMA)
        ((case-lambda
           ((g$library-path$10955$UGjMA g$library-path$10956$UGjMA)
            ((case-lambda
               ((g$swap$10957$UGjMA)
                (dynamic-wind
                  g$swap$10957$UGjMA
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$10958$UGjMA)
                         ((case-lambda
                            ((g$t$10959$UGjMA)
                             (if (eqv? g$t$10959$UGjMA 'closure)
                               (g$pre-compile-r6rs-top-level$10928$UGjMA
                                 g$x*$10958$UGjMA)
                               (if (eqv? g$t$10959$UGjMA 'load)
                                 ((case-lambda
                                    ((g$command-line$10962$UGjMA
                                       g$command-line$10963$UGjMA)
                                     ((case-lambda
                                        ((g$swap$10964$UGjMA)
                                         (dynamic-wind
                                           g$swap$10964$UGjMA
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$10927$UGjMA
                                                 g$x*$10958$UGjMA))))
                                           g$swap$10964$UGjMA)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$10965$UGjMA)
                                             (begin
                                               (g$command-line$10962$UGjMA
                                                 g$command-line$10963$UGjMA)
                                               (set! g$command-line$10963$UGjMA
                                                 g$t$10965$UGjMA))))
                                          (g$command-line$10962$UGjMA)))))))
                                  g$command-line$10932$UGjMA
                                  (cons
                                    g$filename$10950$UGjMA
                                    (map (case-lambda
                                           ((g$x$10966$UGjMA)
                                            (g$format$6273$UGjMA
                                              '"~a"
                                              g$x$10966$UGjMA)))
                                         g$args$10952$UGjMA)))
                                 (if (eqv? g$t$10959$UGjMA 'compile)
                                   (begin
                                     (g$compile-r6rs-top-level$10927$UGjMA
                                       g$x*$10958$UGjMA)
                                     (g$serialize-all$6890$UGjMA
                                       serialize-library
                                       g$compile-core-expr$6604$UGjMA))
                                   (void))))))
                          g$how$10951$UGjMA)))
                      (with-input-from-file
                        g$filename$10950$UGjMA
                        (case-lambda
                          (()
                           ((letrec ((g$f$10967$UGjMA
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$10968$UGjMA)
                                              (if (eof-object? g$x$10968$UGjMA)
                                                '()
                                                (cons
                                                  g$x$10968$UGjMA
                                                  (g$f$10967$UGjMA)))))
                                           (read-annotated))))))
                              g$f$10967$UGjMA))))))))
                  g$swap$10957$UGjMA)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$10969$UGjMA)
                    (begin
                      (g$library-path$10955$UGjMA g$library-path$10956$UGjMA)
                      (set! g$library-path$10956$UGjMA g$t$10969$UGjMA))))
                 (g$library-path$10955$UGjMA)))))))
         g$library-path$6886$UGjMA
         (g$local-library-path$10933$UGjMA g$filename$10950$UGjMA))))))
  (begin
    (g$current-precompiled-library-loader$6891$UGjMA
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$10942$UGjMA)
         (if (g$serious-condition?$5634$UGjMA g$ex$10942$UGjMA)
           (raise g$ex$10942$UGjMA)
           (begin (display g$ex$10942$UGjMA) (newline))))))
    (set-symbol-value! 'load g$load$10935$UGjMA)
    (set-symbol-value! 'compile g$compile$10939$UGjMA)
    (set-symbol-value! 'compile->closure g$compile->closure$10940$UGjMA)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$10937$UGjMA)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$10902$UGjMA)
    (set-symbol-value! 'expanded2core g$expanded->core$6603$UGjMA)
    (set-symbol-value! 'trace-printer g$trace-printer$10931$UGjMA)
    (g$library-path$6886$UGjMA (get-library-paths))))

