;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (psyntax config) () (void))

(library-letrec* (ironscheme lists)
  ((g$list-tail$4993$tVUFT
     g$list-tail$5137$tVUFT
     (case-lambda
       ((g$lst$5021$tVUFT g$index$5022$tVUFT)
        (if ((case-lambda
               ((g$t$5023$tVUFT)
                (if g$t$5023$tVUFT
                  g$t$5023$tVUFT
                  (begin '#f (g$negative?$5682$tVUFT g$index$5022$tVUFT)))))
             (null? g$lst$5021$tVUFT))
          (assertion-violation
            'list-tail
            '"index out of range"
            g$lst$5021$tVUFT
            g$index$5022$tVUFT)
          (if (g$zero?$5683$tVUFT g$index$5022$tVUFT)
            g$lst$5021$tVUFT
            (g$list-tail$4993$tVUFT
              (cdr g$lst$5021$tVUFT)
              (- g$index$5022$tVUFT '1)))))))
   (g$list-ref$4994$tVUFT
     g$list-ref$5138$tVUFT
     (case-lambda
       ((g$lst$5024$tVUFT g$index$5025$tVUFT)
        (car (g$list-tail$4993$tVUFT g$lst$5024$tVUFT g$index$5025$tVUFT)))))
   (g$last-pair$4995$tVUFT
     g$last-pair$5139$tVUFT
     (case-lambda
       ((g$lst$5026$tVUFT)
        (if (null? g$lst$5026$tVUFT)
          g$lst$5026$tVUFT
          (if (null? (cdr g$lst$5026$tVUFT))
            g$lst$5026$tVUFT
            (g$last-pair$4995$tVUFT (cdr g$lst$5026$tVUFT)))))))
   (g$make-list$4996$tVUFT
     g$make-list$5140$tVUFT
     (case-lambda
       ((g$n$5027$tVUFT) (vector->list (make-vector g$n$5027$tVUFT)))
       ((g$n$5028$tVUFT g$fill$5029$tVUFT)
        (vector->list (make-vector g$n$5028$tVUFT g$fill$5029$tVUFT)))))
   (g$find$4997$tVUFT
     g$find$5141$tVUFT
     (case-lambda
       ((g$proc$5030$tVUFT g$l$5031$tVUFT)
        (if (null? g$l$5031$tVUFT)
          '#f
          ((case-lambda
             ((g$e$5032$tVUFT g$r$5033$tVUFT g$proc$5034$tVUFT)
              (if (g$proc$5034$tVUFT g$e$5032$tVUFT)
                g$e$5032$tVUFT
                (g$find$4997$tVUFT g$proc$5034$tVUFT g$r$5033$tVUFT))))
           (car g$l$5031$tVUFT)
           (cdr g$l$5031$tVUFT)
           g$proc$5030$tVUFT)))))
   (g$partition$4998$tVUFT
     g$partition$5142$tVUFT
     (case-lambda
       ((g$proc$5035$tVUFT g$l$5036$tVUFT)
        ((letrec ((g$f$5037$tVUFT
                    (case-lambda
                      ((g$l$5038$tVUFT g$a$5039$tVUFT g$b$5040$tVUFT)
                       (if (null? g$l$5038$tVUFT)
                         (values
                           (reverse! g$a$5039$tVUFT)
                           (reverse! g$b$5040$tVUFT))
                         ((case-lambda
                            ((g$e$5041$tVUFT)
                             (if (g$proc$5035$tVUFT g$e$5041$tVUFT)
                               (g$f$5037$tVUFT
                                 (cdr g$l$5038$tVUFT)
                                 (cons g$e$5041$tVUFT g$a$5039$tVUFT)
                                 g$b$5040$tVUFT)
                               (g$f$5037$tVUFT
                                 (cdr g$l$5038$tVUFT)
                                 g$a$5039$tVUFT
                                 (cons g$e$5041$tVUFT g$b$5040$tVUFT)))))
                          (car g$l$5038$tVUFT)))))))
           g$f$5037$tVUFT)
         g$l$5036$tVUFT
         '()
         '()))))
   (g$remp$4999$tVUFT
     g$remp$5143$tVUFT
     (case-lambda
       ((g$proc$5042$tVUFT g$l$5043$tVUFT)
        ((letrec ((g$f$5044$tVUFT
                    (case-lambda
                      ((g$l$5045$tVUFT g$a$5046$tVUFT)
                       (if (null? g$l$5045$tVUFT)
                         (reverse! g$a$5046$tVUFT)
                         ((case-lambda
                            ((g$e$5047$tVUFT)
                             (if (g$proc$5042$tVUFT g$e$5047$tVUFT)
                               (g$f$5044$tVUFT
                                 (cdr g$l$5045$tVUFT)
                                 g$a$5046$tVUFT)
                               (g$f$5044$tVUFT
                                 (cdr g$l$5045$tVUFT)
                                 (cons g$e$5047$tVUFT g$a$5046$tVUFT)))))
                          (car g$l$5045$tVUFT)))))))
           g$f$5044$tVUFT)
         g$l$5043$tVUFT
         '()))))
   (g$filter$5000$tVUFT
     g$filter$5144$tVUFT
     (case-lambda
       ((g$proc$5048$tVUFT g$l$5049$tVUFT)
        ((letrec ((g$f$5050$tVUFT
                    (case-lambda
                      ((g$l$5051$tVUFT g$a$5052$tVUFT)
                       (if (null? g$l$5051$tVUFT)
                         (reverse! g$a$5052$tVUFT)
                         ((case-lambda
                            ((g$e$5053$tVUFT)
                             (if (g$proc$5048$tVUFT g$e$5053$tVUFT)
                               (g$f$5050$tVUFT
                                 (cdr g$l$5051$tVUFT)
                                 (cons g$e$5053$tVUFT g$a$5052$tVUFT))
                               (g$f$5050$tVUFT
                                 (cdr g$l$5051$tVUFT)
                                 g$a$5052$tVUFT))))
                          (car g$l$5051$tVUFT)))))))
           g$f$5050$tVUFT)
         g$l$5049$tVUFT
         '()))))
   (g$assq$5001$tVUFT
     g$assq$5145$tVUFT
     (case-lambda
       ((g$obj$5054$tVUFT g$lst$5055$tVUFT)
        (if (null? g$lst$5055$tVUFT)
          '#f
          ((case-lambda
             ((g$obj$5056$tVUFT g$t$5057$tVUFT g$r$5058$tVUFT)
              (if (eq? g$obj$5056$tVUFT (car g$t$5057$tVUFT))
                g$t$5057$tVUFT
                (g$assq$5001$tVUFT g$obj$5056$tVUFT g$r$5058$tVUFT))))
           g$obj$5054$tVUFT
           (car g$lst$5055$tVUFT)
           (cdr g$lst$5055$tVUFT))))))
   (g$assv$5002$tVUFT
     g$assv$5146$tVUFT
     (case-lambda
       ((g$obj$5059$tVUFT g$lst$5060$tVUFT)
        (if (null? g$lst$5060$tVUFT)
          '#f
          ((case-lambda
             ((g$obj$5061$tVUFT g$t$5062$tVUFT g$r$5063$tVUFT)
              (if (eqv? g$obj$5061$tVUFT (car g$t$5062$tVUFT))
                g$t$5062$tVUFT
                (g$assv$5002$tVUFT g$obj$5061$tVUFT g$r$5063$tVUFT))))
           g$obj$5059$tVUFT
           (car g$lst$5060$tVUFT)
           (cdr g$lst$5060$tVUFT))))))
   (g$assoc$5003$tVUFT
     g$assoc$5147$tVUFT
     (case-lambda
       ((g$obj$5064$tVUFT g$lst$5065$tVUFT)
        (if (null? g$lst$5065$tVUFT)
          '#f
          ((case-lambda
             ((g$obj$5066$tVUFT g$t$5067$tVUFT g$r$5068$tVUFT)
              (if (equal? g$obj$5066$tVUFT (car g$t$5067$tVUFT))
                g$t$5067$tVUFT
                (g$assoc$5003$tVUFT g$obj$5066$tVUFT g$r$5068$tVUFT))))
           g$obj$5064$tVUFT
           (car g$lst$5065$tVUFT)
           (cdr g$lst$5065$tVUFT))))))
   (g$assp$5004$tVUFT
     g$assp$5148$tVUFT
     (case-lambda
       ((g$p?$5069$tVUFT g$lst$5070$tVUFT)
        (if (null? g$lst$5070$tVUFT)
          '#f
          ((case-lambda
             ((g$p?$5071$tVUFT g$t$5072$tVUFT g$r$5073$tVUFT)
              (if (g$p?$5071$tVUFT (car g$t$5072$tVUFT))
                g$t$5072$tVUFT
                (g$assp$5004$tVUFT g$p?$5071$tVUFT g$r$5073$tVUFT))))
           g$p?$5069$tVUFT
           (car g$lst$5070$tVUFT)
           (cdr g$lst$5070$tVUFT))))))
   (g$memq$5005$tVUFT
     g$memq$5149$tVUFT
     (case-lambda
       ((g$obj$5074$tVUFT g$lst$5075$tVUFT)
        (if (null? g$lst$5075$tVUFT)
          '#f
          (if (eq? g$obj$5074$tVUFT (car g$lst$5075$tVUFT))
            g$lst$5075$tVUFT
            (g$memq$5005$tVUFT g$obj$5074$tVUFT (cdr g$lst$5075$tVUFT)))))))
   (g$memv$5006$tVUFT
     g$memv$5150$tVUFT
     (case-lambda
       ((g$obj$5076$tVUFT g$lst$5077$tVUFT)
        (if (null? g$lst$5077$tVUFT)
          '#f
          (if (eqv? g$obj$5076$tVUFT (car g$lst$5077$tVUFT))
            g$lst$5077$tVUFT
            (g$memv$5006$tVUFT g$obj$5076$tVUFT (cdr g$lst$5077$tVUFT)))))))
   (g$member$5007$tVUFT
     g$member$5151$tVUFT
     (case-lambda
       ((g$obj$5078$tVUFT g$lst$5079$tVUFT)
        (if (null? g$lst$5079$tVUFT)
          '#f
          (if (equal? g$obj$5078$tVUFT (car g$lst$5079$tVUFT))
            g$lst$5079$tVUFT
            (g$member$5007$tVUFT g$obj$5078$tVUFT (cdr g$lst$5079$tVUFT)))))))
   (g$memp$5008$tVUFT
     g$memp$5152$tVUFT
     (case-lambda
       ((g$p?$5080$tVUFT g$lst$5081$tVUFT)
        (if (null? g$lst$5081$tVUFT)
          '#f
          (if (g$p?$5080$tVUFT (car g$lst$5081$tVUFT))
            g$lst$5081$tVUFT
            (g$memp$5008$tVUFT g$p?$5080$tVUFT (cdr g$lst$5081$tVUFT)))))))
   (g$all-empty?$5009$tVUFT
     g$all-empty?$5153$tVUFT
     (case-lambda
       ((g$ls$5082$tVUFT)
        ((case-lambda
           ((g$t$5083$tVUFT)
            (if g$t$5083$tVUFT
              g$t$5083$tVUFT
              (begin
                '#f
                (if (null? (car g$ls$5082$tVUFT))
                  (begin '#f (g$all-empty?$5009$tVUFT (cdr g$ls$5082$tVUFT)))
                  '#f)))))
         (null? g$ls$5082$tVUFT)))))
   (g$split$5010$tVUFT
     g$split$5154$tVUFT
     (case-lambda
       ((g$ls$5084$tVUFT)
        (if (null? g$ls$5084$tVUFT)
          (values '() '())
          (call-with-values
            (case-lambda (() (g$split$5010$tVUFT (cdr g$ls$5084$tVUFT))))
            (case-lambda
              ((g$cars$5085$tVUFT g$cdrs$5086$tVUFT)
               ((case-lambda
                  ((g$a$5087$tVUFT)
                   (values
                     (cons (car g$a$5087$tVUFT) g$cars$5085$tVUFT)
                     (cons (cdr g$a$5087$tVUFT) g$cdrs$5086$tVUFT))))
                (car g$ls$5084$tVUFT)))))))))
   (g$for-all$5011$tVUFT
     g$for-all$5155$tVUFT
     (case-lambda
       ((g$f$5088$tVUFT g$arg1$5089$tVUFT . g$args$5090$tVUFT)
        ((case-lambda
           ((g$args$5091$tVUFT)
            (if (g$all-empty?$5009$tVUFT g$args$5091$tVUFT)
              '#t
              (call-with-values
                (case-lambda (() (g$split$5010$tVUFT g$args$5091$tVUFT)))
                (case-lambda
                  ((g$cars$5092$tVUFT g$cdrs$5093$tVUFT)
                   (if (g$all-empty?$5009$tVUFT g$cdrs$5093$tVUFT)
                     (apply g$f$5088$tVUFT g$cars$5092$tVUFT)
                     (if (apply g$f$5088$tVUFT g$cars$5092$tVUFT)
                       (begin
                         '#f
                         (apply
                           g$for-all$5011$tVUFT
                           g$f$5088$tVUFT
                           g$cdrs$5093$tVUFT))
                       '#f))))))))
         (cons g$arg1$5089$tVUFT g$args$5090$tVUFT)))))
   (g$exists$5012$tVUFT
     g$exists$5156$tVUFT
     (case-lambda
       ((g$f$5094$tVUFT g$arg1$5095$tVUFT . g$args$5096$tVUFT)
        ((case-lambda
           ((g$args$5097$tVUFT)
            (if (g$all-empty?$5009$tVUFT g$args$5097$tVUFT)
              '#f
              (call-with-values
                (case-lambda (() (g$split$5010$tVUFT g$args$5097$tVUFT)))
                (case-lambda
                  ((g$cars$5098$tVUFT g$cdrs$5099$tVUFT)
                   ((case-lambda
                      ((g$t$5100$tVUFT)
                       (if g$t$5100$tVUFT
                         g$t$5100$tVUFT
                         (begin
                           '#f
                           (apply
                             g$exists$5012$tVUFT
                             g$f$5094$tVUFT
                             g$cdrs$5099$tVUFT)))))
                    (apply g$f$5094$tVUFT g$cars$5098$tVUFT))))))))
         (cons g$arg1$5095$tVUFT g$args$5096$tVUFT)))))
   (g$map$5013$tVUFT
     g$map$5157$tVUFT
     (case-lambda
       ((g$proc$5101$tVUFT g$list1$5102$tVUFT . g$lists$5103$tVUFT)
        ((letrec ((g$f$5104$tVUFT
                    (case-lambda
                      ((g$lists$5105$tVUFT g$a$5106$tVUFT)
                       (if (g$all-empty?$5009$tVUFT g$lists$5105$tVUFT)
                         (reverse! g$a$5106$tVUFT)
                         (call-with-values
                           (case-lambda
                             (() (g$split$5010$tVUFT g$lists$5105$tVUFT)))
                           (case-lambda
                             ((g$cars$5107$tVUFT g$cdrs$5108$tVUFT)
                              (g$f$5104$tVUFT
                                g$cdrs$5108$tVUFT
                                (cons
                                  (apply g$proc$5101$tVUFT g$cars$5107$tVUFT)
                                  g$a$5106$tVUFT))))))))))
           g$f$5104$tVUFT)
         (cons g$list1$5102$tVUFT g$lists$5103$tVUFT)
         '()))))
   (g$for-each$5014$tVUFT
     g$for-each$5158$tVUFT
     (case-lambda
       ((g$f$5109$tVUFT g$arg1$5110$tVUFT . g$args$5111$tVUFT)
        ((case-lambda
           ((g$args$5112$tVUFT)
            (if (not (g$all-empty?$5009$tVUFT g$args$5112$tVUFT))
              (call-with-values
                (case-lambda (() (g$split$5010$tVUFT g$args$5112$tVUFT)))
                (case-lambda
                  ((g$cars$5113$tVUFT g$cdrs$5114$tVUFT)
                   (begin
                     (apply g$f$5109$tVUFT g$cars$5113$tVUFT)
                     (apply
                       g$for-each$5014$tVUFT
                       g$f$5109$tVUFT
                       g$cdrs$5114$tVUFT)))))
              (void))))
         (cons g$arg1$5110$tVUFT g$args$5111$tVUFT)))))
   (g$cons*$5015$tVUFT
     g$cons*$5159$tVUFT
     (case-lambda
       ((g$a$5115$tVUFT . g$rest$5116$tVUFT)
        ((letrec ((g$f$5117$tVUFT
                    (case-lambda
                      ((g$a$5118$tVUFT g$rest$5119$tVUFT)
                       (if (null? g$rest$5119$tVUFT)
                         g$a$5118$tVUFT
                         (cons
                           g$a$5118$tVUFT
                           (g$f$5117$tVUFT
                             (car g$rest$5119$tVUFT)
                             (cdr g$rest$5119$tVUFT))))))))
           g$f$5117$tVUFT)
         g$a$5115$tVUFT
         g$rest$5116$tVUFT))))
   (g$fold-left$5016$tVUFT
     g$fold-left$5160$tVUFT
     (case-lambda
       ((g$combine$5120$tVUFT
          g$nil$5121$tVUFT
          g$list1$5122$tVUFT
          .
          g$lists$5123$tVUFT)
        (if (null? g$list1$5122$tVUFT)
          g$nil$5121$tVUFT
          (apply
            g$fold-left$5016$tVUFT
            (g$cons*$5015$tVUFT
              g$combine$5120$tVUFT
              (apply
                g$combine$5120$tVUFT
                (g$cons*$5015$tVUFT
                  g$nil$5121$tVUFT
                  (car g$list1$5122$tVUFT)
                  (g$map$5013$tVUFT car g$lists$5123$tVUFT)))
              (cdr g$list1$5122$tVUFT)
              (g$map$5013$tVUFT cdr g$lists$5123$tVUFT)))))))
   (g$fold-right$5017$tVUFT
     g$fold-right$5161$tVUFT
     (case-lambda
       ((g$combine$5124$tVUFT
          g$nil$5125$tVUFT
          g$list1$5126$tVUFT
          .
          g$lists$5127$tVUFT)
        (if (null? g$list1$5126$tVUFT)
          g$nil$5125$tVUFT
          (apply
            g$combine$5124$tVUFT
            (append
              (list (car g$list1$5126$tVUFT))
              (g$map$5013$tVUFT car g$lists$5127$tVUFT)
              (list
                (apply
                  g$fold-right$5017$tVUFT
                  (g$cons*$5015$tVUFT
                    g$combine$5124$tVUFT
                    g$nil$5125$tVUFT
                    (cdr g$list1$5126$tVUFT)
                    (g$map$5013$tVUFT cdr g$lists$5127$tVUFT))))))))))
   (g$remove$5018$tVUFT
     g$remove$5162$tVUFT
     (case-lambda
       ((g$obj$5128$tVUFT g$list$5129$tVUFT)
        (g$remp$4999$tVUFT
          (case-lambda
            ((g$x$5130$tVUFT) (equal? g$obj$5128$tVUFT g$x$5130$tVUFT)))
          g$list$5129$tVUFT))))
   (g$remv$5019$tVUFT
     g$remv$5163$tVUFT
     (case-lambda
       ((g$obj$5131$tVUFT g$list$5132$tVUFT)
        (g$remp$4999$tVUFT
          (case-lambda
            ((g$x$5133$tVUFT) (eqv? g$obj$5131$tVUFT g$x$5133$tVUFT)))
          g$list$5132$tVUFT))))
   (g$remq$5020$tVUFT
     g$remq$5164$tVUFT
     (case-lambda
       ((g$obj$5134$tVUFT g$list$5135$tVUFT)
        (g$remp$4999$tVUFT
          (case-lambda ((g$x$5136$tVUFT) (eq? g$obj$5134$tVUFT g$x$5136$tVUFT)))
          g$list$5135$tVUFT)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$div$5352$tVUFT
     g$div$5636$tVUFT
     (case-lambda
       ((g$x1$5436$tVUFT g$x2$5437$tVUFT)
        (call-with-values
          (case-lambda (() (div-and-mod g$x1$5436$tVUFT g$x2$5437$tVUFT)))
          (case-lambda
            ((g$n$5440$tVUFT g$d$5441$tVUFT)
             ((case-lambda ((g$d$5442$tVUFT g$n$5443$tVUFT) g$n$5443$tVUFT))
              g$d$5441$tVUFT
              g$n$5440$tVUFT)))))))
   (g$div0$5353$tVUFT
     g$div0$5637$tVUFT
     (case-lambda
       ((g$x1$5444$tVUFT g$x2$5445$tVUFT)
        (call-with-values
          (case-lambda (() (div0-and-mod0 g$x1$5444$tVUFT g$x2$5445$tVUFT)))
          (case-lambda
            ((g$n$5448$tVUFT g$d$5449$tVUFT)
             ((case-lambda ((g$d$5450$tVUFT g$n$5451$tVUFT) g$n$5451$tVUFT))
              g$d$5449$tVUFT
              g$n$5448$tVUFT)))))))
   (g$mod$5354$tVUFT
     g$mod$5638$tVUFT
     (case-lambda
       ((g$x1$5452$tVUFT g$x2$5453$tVUFT)
        (call-with-values
          (case-lambda (() (div-and-mod g$x1$5452$tVUFT g$x2$5453$tVUFT)))
          (case-lambda
            ((g$n$5456$tVUFT g$d$5457$tVUFT)
             ((case-lambda ((g$d$5458$tVUFT g$n$5459$tVUFT) g$d$5458$tVUFT))
              g$d$5457$tVUFT
              g$n$5456$tVUFT)))))))
   (g$mod0$5355$tVUFT
     g$mod0$5639$tVUFT
     (case-lambda
       ((g$x1$5460$tVUFT g$x2$5461$tVUFT)
        (call-with-values
          (case-lambda (() (div0-and-mod0 g$x1$5460$tVUFT g$x2$5461$tVUFT)))
          (case-lambda
            ((g$n$5464$tVUFT g$d$5465$tVUFT)
             ((case-lambda ((g$d$5466$tVUFT g$n$5467$tVUFT) g$d$5466$tVUFT))
              g$d$5465$tVUFT
              g$n$5464$tVUFT)))))))
   (g$list->vector$5356$tVUFT
     g$list->vector$5640$tVUFT
     (case-lambda ((g$lst$5468$tVUFT) (apply vector g$lst$5468$tVUFT))))
   (g$list->string$5357$tVUFT
     g$list->string$5641$tVUFT
     (case-lambda ((g$lst$5469$tVUFT) (apply string g$lst$5469$tVUFT))))
   (g$char?$5358$tVUFT
     g$char?$5642$tVUFT
     (case-lambda
       ((g$obj$5470$tVUFT) (clr-is-internal 'system.char g$obj$5470$tVUFT))))
   (g$vector?$5359$tVUFT
     g$vector?$5643$tVUFT
     (case-lambda
       ((g$obj$5471$tVUFT)
        (clr-is-internal 'system.object[] g$obj$5471$tVUFT))))
   (g$bytevector?$5360$tVUFT
     g$bytevector?$5644$tVUFT
     (case-lambda
       ((g$obj$5472$tVUFT) (clr-is-internal 'system.byte[] g$obj$5472$tVUFT))))
   (g$symbol?$5361$tVUFT
     g$symbol?$5645$tVUFT
     (case-lambda
       ((g$obj$5473$tVUFT)
        (clr-is-internal 'microsoft.scripting.symbolid g$obj$5473$tVUFT))))
   (g$boolean?$5362$tVUFT
     g$boolean?$5646$tVUFT
     (case-lambda
       ((g$obj$5474$tVUFT) (clr-is-internal 'system.boolean g$obj$5474$tVUFT))))
   (g$procedure?$5363$tVUFT
     g$procedure?$5647$tVUFT
     (case-lambda
       ((g$obj$5475$tVUFT)
        (clr-is-internal 'ironscheme.runtime.icallable g$obj$5475$tVUFT))))
   (g$fixnum?$5364$tVUFT
     g$fixnum?$5648$tVUFT
     (case-lambda
       ((g$obj$5476$tVUFT) (clr-is-internal 'system.int32 g$obj$5476$tVUFT))))
   (g$flonum?$5365$tVUFT
     g$flonum?$5649$tVUFT
     (case-lambda
       ((g$obj$5477$tVUFT) (clr-is-internal 'system.double g$obj$5477$tVUFT))))
   (g$fixnum-width$5366$tVUFT
     g$fixnum-width$5650$tVUFT
     (case-lambda (() '32)))
   (g$vector-fill!$5367$tVUFT
     g$vector-fill!$5651$tVUFT
     (case-lambda
       ((g$vec$5478$tVUFT g$val$5479$tVUFT)
        ((case-lambda
           ((g$len$5480$tVUFT)
            (letrec ((g$loop$5481$tVUFT
                       (case-lambda
                         ((g$i$5482$tVUFT)
                          (if (fx=? g$i$5482$tVUFT g$len$5480$tVUFT)
                            (if '#f '#f (void))
                            (begin
                              (vector-set!
                                g$vec$5478$tVUFT
                                g$i$5482$tVUFT
                                g$val$5479$tVUFT)
                              (g$loop$5481$tVUFT (fx+ g$i$5482$tVUFT '1))))))))
              (g$loop$5481$tVUFT '0))))
         (vector-length g$vec$5478$tVUFT)))))
   (g$reverse$5368$tVUFT
     g$reverse$5652$tVUFT
     (case-lambda
       ((g$lst$5483$tVUFT)
        (g$fold-left$5160$tVUFT
          (case-lambda
            ((g$x$5484$tVUFT g$y$5485$tVUFT)
             (cons g$y$5485$tVUFT g$x$5484$tVUFT)))
          '()
          g$lst$5483$tVUFT))))
   (g$caar$5369$tVUFT
     g$caar$5653$tVUFT
     (case-lambda ((g$x$5486$tVUFT) (car (car g$x$5486$tVUFT)))))
   (g$cadr$5370$tVUFT
     g$cadr$5654$tVUFT
     (case-lambda ((g$x$5487$tVUFT) (car (cdr g$x$5487$tVUFT)))))
   (g$cdar$5371$tVUFT
     g$cdar$5655$tVUFT
     (case-lambda ((g$x$5488$tVUFT) (cdr (car g$x$5488$tVUFT)))))
   (g$cddr$5372$tVUFT
     g$cddr$5656$tVUFT
     (case-lambda ((g$x$5489$tVUFT) (cdr (cdr g$x$5489$tVUFT)))))
   (g$caaar$5373$tVUFT
     g$caaar$5657$tVUFT
     (case-lambda
       ((g$x$5490$tVUFT) (g$caar$5369$tVUFT (car g$x$5490$tVUFT)))))
   (g$caadr$5374$tVUFT
     g$caadr$5658$tVUFT
     (case-lambda
       ((g$x$5491$tVUFT) (g$caar$5369$tVUFT (cdr g$x$5491$tVUFT)))))
   (g$cadar$5375$tVUFT
     g$cadar$5659$tVUFT
     (case-lambda
       ((g$x$5492$tVUFT) (g$cadr$5370$tVUFT (car g$x$5492$tVUFT)))))
   (g$caddr$5376$tVUFT
     g$caddr$5660$tVUFT
     (case-lambda
       ((g$x$5493$tVUFT) (g$cadr$5370$tVUFT (cdr g$x$5493$tVUFT)))))
   (g$cdaar$5377$tVUFT
     g$cdaar$5661$tVUFT
     (case-lambda
       ((g$x$5494$tVUFT) (g$cdar$5371$tVUFT (car g$x$5494$tVUFT)))))
   (g$cdadr$5378$tVUFT
     g$cdadr$5662$tVUFT
     (case-lambda
       ((g$x$5495$tVUFT) (g$cdar$5371$tVUFT (cdr g$x$5495$tVUFT)))))
   (g$cddar$5379$tVUFT
     g$cddar$5663$tVUFT
     (case-lambda
       ((g$x$5496$tVUFT) (g$cddr$5372$tVUFT (car g$x$5496$tVUFT)))))
   (g$cdddr$5380$tVUFT
     g$cdddr$5664$tVUFT
     (case-lambda
       ((g$x$5497$tVUFT) (g$cddr$5372$tVUFT (cdr g$x$5497$tVUFT)))))
   (g$caaaar$5381$tVUFT
     g$caaaar$5665$tVUFT
     (case-lambda
       ((g$x$5498$tVUFT) (g$caaar$5373$tVUFT (car g$x$5498$tVUFT)))))
   (g$caaadr$5382$tVUFT
     g$caaadr$5666$tVUFT
     (case-lambda
       ((g$x$5499$tVUFT) (g$caaar$5373$tVUFT (cdr g$x$5499$tVUFT)))))
   (g$caadar$5383$tVUFT
     g$caadar$5667$tVUFT
     (case-lambda
       ((g$x$5500$tVUFT) (g$caadr$5374$tVUFT (car g$x$5500$tVUFT)))))
   (g$caaddr$5384$tVUFT
     g$caaddr$5668$tVUFT
     (case-lambda
       ((g$x$5501$tVUFT) (g$caadr$5374$tVUFT (cdr g$x$5501$tVUFT)))))
   (g$cadaar$5385$tVUFT
     g$cadaar$5669$tVUFT
     (case-lambda
       ((g$x$5502$tVUFT) (g$cadar$5375$tVUFT (car g$x$5502$tVUFT)))))
   (g$cadadr$5386$tVUFT
     g$cadadr$5670$tVUFT
     (case-lambda
       ((g$x$5503$tVUFT) (g$cadar$5375$tVUFT (cdr g$x$5503$tVUFT)))))
   (g$caddar$5387$tVUFT
     g$caddar$5671$tVUFT
     (case-lambda
       ((g$x$5504$tVUFT) (g$caddr$5376$tVUFT (car g$x$5504$tVUFT)))))
   (g$cadddr$5388$tVUFT
     g$cadddr$5672$tVUFT
     (case-lambda
       ((g$x$5505$tVUFT) (g$caddr$5376$tVUFT (cdr g$x$5505$tVUFT)))))
   (g$cdaaar$5389$tVUFT
     g$cdaaar$5673$tVUFT
     (case-lambda
       ((g$x$5506$tVUFT) (g$cdaar$5377$tVUFT (car g$x$5506$tVUFT)))))
   (g$cdaadr$5390$tVUFT
     g$cdaadr$5674$tVUFT
     (case-lambda
       ((g$x$5507$tVUFT) (g$cdaar$5377$tVUFT (cdr g$x$5507$tVUFT)))))
   (g$cdadar$5391$tVUFT
     g$cdadar$5675$tVUFT
     (case-lambda
       ((g$x$5508$tVUFT) (g$cdadr$5378$tVUFT (car g$x$5508$tVUFT)))))
   (g$cdaddr$5392$tVUFT
     g$cdaddr$5676$tVUFT
     (case-lambda
       ((g$x$5509$tVUFT) (g$cdadr$5378$tVUFT (cdr g$x$5509$tVUFT)))))
   (g$cddaar$5393$tVUFT
     g$cddaar$5677$tVUFT
     (case-lambda
       ((g$x$5510$tVUFT) (g$cddar$5379$tVUFT (car g$x$5510$tVUFT)))))
   (g$cddadr$5394$tVUFT
     g$cddadr$5678$tVUFT
     (case-lambda
       ((g$x$5511$tVUFT) (g$cddar$5379$tVUFT (cdr g$x$5511$tVUFT)))))
   (g$cdddar$5395$tVUFT
     g$cdddar$5679$tVUFT
     (case-lambda
       ((g$x$5512$tVUFT) (g$cdddr$5380$tVUFT (car g$x$5512$tVUFT)))))
   (g$cddddr$5396$tVUFT
     g$cddddr$5680$tVUFT
     (case-lambda
       ((g$x$5513$tVUFT) (g$cdddr$5380$tVUFT (cdr g$x$5513$tVUFT)))))
   (g$positive?$5397$tVUFT
     g$positive?$5681$tVUFT
     (case-lambda
       ((g$r$5514$tVUFT)
        (begin
          (if (not (real-valued? g$r$5514$tVUFT))
            (assertion-violation 'positive? '"not a real" g$r$5514$tVUFT)
            (void))
          (< '0 g$r$5514$tVUFT)))))
   (g$negative?$5398$tVUFT
     g$negative?$5682$tVUFT
     (case-lambda
       ((g$r$5515$tVUFT)
        (begin
          (if (not (real-valued? g$r$5515$tVUFT))
            (assertion-violation 'negative? '"not a real" g$r$5515$tVUFT)
            (void))
          (> '0 g$r$5515$tVUFT)))))
   (g$zero?$5399$tVUFT
     g$zero?$5683$tVUFT
     (case-lambda
       ((g$r$5516$tVUFT)
        (begin
          (if (not (real-valued? g$r$5516$tVUFT))
            (assertion-violation 'zero? '"not a real" g$r$5516$tVUFT)
            (void))
          (= '0 g$r$5516$tVUFT)))))
   (g$even?$5400$tVUFT
     g$even?$5684$tVUFT
     (case-lambda
       ((g$n$5517$tVUFT)
        (begin
          (if (not (integer-valued? g$n$5517$tVUFT))
            (assertion-violation 'even? '"not a integer" g$n$5517$tVUFT)
            (void))
          (= '0 (g$mod$5354$tVUFT g$n$5517$tVUFT '2))))))
   (g$odd?$5401$tVUFT
     g$odd?$5685$tVUFT
     (case-lambda
       ((g$n$5518$tVUFT)
        (begin
          (if (not (integer-valued? g$n$5518$tVUFT))
            (assertion-violation 'odd? '"not a integer" g$n$5518$tVUFT)
            (void))
          (= '1 (g$mod$5354$tVUFT g$n$5518$tVUFT '2))))))
   (g$max$5402$tVUFT
     g$max$5686$tVUFT
     (case-lambda
       ((g$a$5519$tVUFT . g$rest$5520$tVUFT)
        (g$fold-left$5160$tVUFT
          (case-lambda
            ((g$a$5521$tVUFT g$b$5522$tVUFT)
             ((case-lambda
                ((g$r$5523$tVUFT)
                 (if ((case-lambda
                        ((g$t$5524$tVUFT)
                         (if g$t$5524$tVUFT
                           g$t$5524$tVUFT
                           (begin '#f (inexact? g$b$5522$tVUFT)))))
                      (inexact? g$a$5521$tVUFT))
                   (inexact g$r$5523$tVUFT)
                   g$r$5523$tVUFT)))
              (if (< g$a$5521$tVUFT g$b$5522$tVUFT)
                g$b$5522$tVUFT
                g$a$5521$tVUFT))))
          g$a$5519$tVUFT
          g$rest$5520$tVUFT))))
   (g$min$5403$tVUFT
     g$min$5687$tVUFT
     (case-lambda
       ((g$a$5525$tVUFT . g$rest$5526$tVUFT)
        (g$fold-left$5160$tVUFT
          (case-lambda
            ((g$a$5527$tVUFT g$b$5528$tVUFT)
             ((case-lambda
                ((g$r$5529$tVUFT)
                 (if ((case-lambda
                        ((g$t$5530$tVUFT)
                         (if g$t$5530$tVUFT
                           g$t$5530$tVUFT
                           (begin '#f (inexact? g$b$5528$tVUFT)))))
                      (inexact? g$a$5527$tVUFT))
                   (inexact g$r$5529$tVUFT)
                   g$r$5529$tVUFT)))
              (if (> g$a$5527$tVUFT g$b$5528$tVUFT)
                g$b$5528$tVUFT
                g$a$5527$tVUFT))))
          g$a$5525$tVUFT
          g$rest$5526$tVUFT))))
   (g$gcd$5404$tVUFT
     g$gcd$5688$tVUFT
     (case-lambda
       (g$nums$5531$tVUFT
        ((case-lambda
           ((g$t$5532$tVUFT)
            (if (g$memv$5150$tVUFT g$t$5532$tVUFT '(0))
              '0
              (if (g$memv$5150$tVUFT g$t$5532$tVUFT '(1))
                ((case-lambda
                   ((g$n$5533$tVUFT)
                    (begin
                      (if (not (integer-valued? g$n$5533$tVUFT))
                        (assertion-violation
                          'gcd
                          '"not an integer"
                          g$n$5533$tVUFT)
                        (void))
                      (abs g$n$5533$tVUFT))))
                 (car g$nums$5531$tVUFT))
                (if (g$memv$5150$tVUFT g$t$5532$tVUFT '(2))
                  ((case-lambda
                     ((g$a$5534$tVUFT g$b$5535$tVUFT)
                      (begin
                        (if (not (integer-valued? g$a$5534$tVUFT))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$a$5534$tVUFT)
                          (void))
                        (if (not (integer-valued? g$b$5535$tVUFT))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$b$5535$tVUFT)
                          (void))
                        (if (g$zero?$5399$tVUFT g$b$5535$tVUFT)
                          (abs g$a$5534$tVUFT)
                          (abs (g$gcd$5404$tVUFT
                                 g$b$5535$tVUFT
                                 (g$mod$5354$tVUFT
                                   g$a$5534$tVUFT
                                   g$b$5535$tVUFT)))))))
                   (car g$nums$5531$tVUFT)
                   (g$cadr$5370$tVUFT g$nums$5531$tVUFT))
                  (g$fold-left$5160$tVUFT
                    g$gcd$5404$tVUFT
                    (abs (car g$nums$5531$tVUFT))
                    (cdr g$nums$5531$tVUFT)))))))
         (length g$nums$5531$tVUFT)))))
   (g$lcm$5405$tVUFT
     g$lcm$5689$tVUFT
     (case-lambda
       (g$nums$5536$tVUFT
        ((case-lambda
           ((g$t$5537$tVUFT)
            (if (g$memv$5150$tVUFT g$t$5537$tVUFT '(0))
              '1
              (if (g$memv$5150$tVUFT g$t$5537$tVUFT '(1))
                ((case-lambda
                   ((g$n$5538$tVUFT)
                    (begin
                      (if (not (integer-valued? g$n$5538$tVUFT))
                        (assertion-violation
                          'lcm
                          '"not an integer"
                          g$n$5538$tVUFT)
                        (void))
                      (abs g$n$5538$tVUFT))))
                 (car g$nums$5536$tVUFT))
                (if (g$memv$5150$tVUFT g$t$5537$tVUFT '(2))
                  ((case-lambda
                     ((g$a$5539$tVUFT g$b$5540$tVUFT)
                      (begin
                        (if (not (integer-valued? g$a$5539$tVUFT))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$a$5539$tVUFT)
                          (void))
                        (if (not (integer-valued? g$b$5540$tVUFT))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$b$5540$tVUFT)
                          (void))
                        (if ((case-lambda
                               ((g$t$5541$tVUFT)
                                (if g$t$5541$tVUFT
                                  g$t$5541$tVUFT
                                  (begin
                                    '#f
                                    (g$zero?$5399$tVUFT g$b$5540$tVUFT)))))
                             (g$zero?$5399$tVUFT g$a$5539$tVUFT))
                          '0
                          (abs (* (/ g$a$5539$tVUFT
                                     (g$gcd$5404$tVUFT
                                       g$a$5539$tVUFT
                                       g$b$5540$tVUFT))
                                  g$b$5540$tVUFT))))))
                   (car g$nums$5536$tVUFT)
                   (g$cadr$5370$tVUFT g$nums$5536$tVUFT))
                  (g$fold-left$5160$tVUFT
                    g$lcm$5405$tVUFT
                    (abs (car g$nums$5536$tVUFT))
                    (cdr g$nums$5536$tVUFT)))))))
         (length g$nums$5536$tVUFT)))))
   (g$string=?$5412$tVUFT
     g$string=?$5690$tVUFT
     (case-lambda
       ((g$a$5542$tVUFT g$b$5543$tVUFT . g$rest$5544$tVUFT)
        (begin
          (if (not (string? g$a$5542$tVUFT))
            (assertion-violation 'string=? '"not a string" g$a$5542$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$5545$tVUFT)
               (begin
                 (if (not (string? g$x$5545$tVUFT))
                   (assertion-violation
                     'string=?
                     '"not a string"
                     g$x$5545$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$5546$tVUFT)
                     (begin
                       (set! g$a$5542$tVUFT g$x$5545$tVUFT)
                       g$r$5546$tVUFT)))
                  (fx=? (string-compare g$a$5542$tVUFT g$x$5545$tVUFT) '0)))))
            (cons g$b$5543$tVUFT g$rest$5544$tVUFT))))))
   (g$string<?$5413$tVUFT
     g$string<?$5691$tVUFT
     (case-lambda
       ((g$a$5547$tVUFT g$b$5548$tVUFT . g$rest$5549$tVUFT)
        (begin
          (if (not (string? g$a$5547$tVUFT))
            (assertion-violation 'string<? '"not a string" g$a$5547$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$5550$tVUFT)
               (begin
                 (if (not (string? g$x$5550$tVUFT))
                   (assertion-violation
                     'string<?
                     '"not a string"
                     g$x$5550$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$5551$tVUFT)
                     (begin
                       (set! g$a$5547$tVUFT g$x$5550$tVUFT)
                       g$r$5551$tVUFT)))
                  (fx<? (string-compare g$a$5547$tVUFT g$x$5550$tVUFT) '0)))))
            (cons g$b$5548$tVUFT g$rest$5549$tVUFT))))))
   (g$string>?$5414$tVUFT
     g$string>?$5692$tVUFT
     (case-lambda
       ((g$a$5552$tVUFT g$b$5553$tVUFT . g$rest$5554$tVUFT)
        (begin
          (if (not (string? g$a$5552$tVUFT))
            (assertion-violation 'string>? '"not a string" g$a$5552$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$5555$tVUFT)
               (begin
                 (if (not (string? g$x$5555$tVUFT))
                   (assertion-violation
                     'string>?
                     '"not a string"
                     g$x$5555$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$5556$tVUFT)
                     (begin
                       (set! g$a$5552$tVUFT g$x$5555$tVUFT)
                       g$r$5556$tVUFT)))
                  (fx>? (string-compare g$a$5552$tVUFT g$x$5555$tVUFT) '0)))))
            (cons g$b$5553$tVUFT g$rest$5554$tVUFT))))))
   (g$string<=?$5415$tVUFT
     g$string<=?$5693$tVUFT
     (case-lambda
       ((g$a$5557$tVUFT g$b$5558$tVUFT . g$rest$5559$tVUFT)
        (begin
          (if (not (string? g$a$5557$tVUFT))
            (assertion-violation 'string<=? '"not a string" g$a$5557$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$5560$tVUFT)
               (begin
                 (if (not (string? g$x$5560$tVUFT))
                   (assertion-violation
                     'string<=?
                     '"not a string"
                     g$x$5560$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$5561$tVUFT)
                     (begin
                       (set! g$a$5557$tVUFT g$x$5560$tVUFT)
                       g$r$5561$tVUFT)))
                  (fx<=? (string-compare g$a$5557$tVUFT g$x$5560$tVUFT) '0)))))
            (cons g$b$5558$tVUFT g$rest$5559$tVUFT))))))
   (g$string>=?$5416$tVUFT
     g$string>=?$5694$tVUFT
     (case-lambda
       ((g$a$5562$tVUFT g$b$5563$tVUFT . g$rest$5564$tVUFT)
        (begin
          (if (not (string? g$a$5562$tVUFT))
            (assertion-violation 'string>=? '"not a string" g$a$5562$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$5565$tVUFT)
               (begin
                 (if (not (string? g$x$5565$tVUFT))
                   (assertion-violation
                     'string>=?
                     '"not a string"
                     g$x$5565$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$5566$tVUFT)
                     (begin
                       (set! g$a$5562$tVUFT g$x$5565$tVUFT)
                       g$r$5566$tVUFT)))
                  (fx>=? (string-compare g$a$5562$tVUFT g$x$5565$tVUFT) '0)))))
            (cons g$b$5563$tVUFT g$rest$5564$tVUFT))))))
   (g$symbol=?$5417$tVUFT
     g$symbol=?$5695$tVUFT
     (case-lambda
       ((g$a$5567$tVUFT g$b$5568$tVUFT . g$rest$5569$tVUFT)
        (begin
          (if (not (g$symbol?$5361$tVUFT g$a$5567$tVUFT))
            (assertion-violation 'symbol=? '"not a symbol" g$a$5567$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$5570$tVUFT)
               (begin
                 (if (not (g$symbol?$5361$tVUFT g$x$5570$tVUFT))
                   (assertion-violation
                     'symbol=?
                     '"not a symbol"
                     g$x$5570$tVUFT)
                   (void))
                 (eq? g$a$5567$tVUFT g$x$5570$tVUFT))))
            (cons g$b$5568$tVUFT g$rest$5569$tVUFT))))))
   (g$boolean=?$5418$tVUFT
     g$boolean=?$5696$tVUFT
     (case-lambda
       ((g$a$5571$tVUFT g$b$5572$tVUFT . g$rest$5573$tVUFT)
        (begin
          (if (not (g$boolean?$5362$tVUFT g$a$5571$tVUFT))
            (assertion-violation 'boolean=? '"not a boolean" g$a$5571$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$5574$tVUFT)
               (begin
                 (if (not (g$boolean?$5362$tVUFT g$x$5574$tVUFT))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$5574$tVUFT)
                   (void))
                 (eq? g$a$5571$tVUFT g$x$5574$tVUFT))))
            (cons g$b$5572$tVUFT g$rest$5573$tVUFT))))))
   (g$char=?$5425$tVUFT
     g$char=?$5697$tVUFT
     (case-lambda
       ((g$a$5575$tVUFT g$b$5576$tVUFT . g$rest$5577$tVUFT)
        (begin
          (if (not (g$char?$5358$tVUFT g$a$5575$tVUFT))
            (assertion-violation 'char=? '"not a char" g$a$5575$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$5578$tVUFT)
               (begin
                 (if (not (g$char?$5358$tVUFT g$x$5578$tVUFT))
                   (assertion-violation 'char=? '"not a char" g$x$5578$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$5579$tVUFT)
                     (begin
                       (set! g$a$5575$tVUFT g$x$5578$tVUFT)
                       g$r$5579$tVUFT)))
                  (fx=?
                    (char->integer g$a$5575$tVUFT)
                    (char->integer g$x$5578$tVUFT))))))
            (cons g$b$5576$tVUFT g$rest$5577$tVUFT))))))
   (g$char<?$5426$tVUFT
     g$char<?$5698$tVUFT
     (case-lambda
       ((g$a$5580$tVUFT g$b$5581$tVUFT . g$rest$5582$tVUFT)
        (begin
          (if (not (g$char?$5358$tVUFT g$a$5580$tVUFT))
            (assertion-violation 'char<? '"not a char" g$a$5580$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$5583$tVUFT)
               (begin
                 (if (not (g$char?$5358$tVUFT g$x$5583$tVUFT))
                   (assertion-violation 'char<? '"not a char" g$x$5583$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$5584$tVUFT)
                     (begin
                       (set! g$a$5580$tVUFT g$x$5583$tVUFT)
                       g$r$5584$tVUFT)))
                  (fx<?
                    (char->integer g$a$5580$tVUFT)
                    (char->integer g$x$5583$tVUFT))))))
            (cons g$b$5581$tVUFT g$rest$5582$tVUFT))))))
   (g$char>?$5427$tVUFT
     g$char>?$5699$tVUFT
     (case-lambda
       ((g$a$5585$tVUFT g$b$5586$tVUFT . g$rest$5587$tVUFT)
        (begin
          (if (not (g$char?$5358$tVUFT g$a$5585$tVUFT))
            (assertion-violation 'char>? '"not a char" g$a$5585$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$5588$tVUFT)
               (begin
                 (if (not (g$char?$5358$tVUFT g$x$5588$tVUFT))
                   (assertion-violation 'char>? '"not a char" g$x$5588$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$5589$tVUFT)
                     (begin
                       (set! g$a$5585$tVUFT g$x$5588$tVUFT)
                       g$r$5589$tVUFT)))
                  (fx>?
                    (char->integer g$a$5585$tVUFT)
                    (char->integer g$x$5588$tVUFT))))))
            (cons g$b$5586$tVUFT g$rest$5587$tVUFT))))))
   (g$char<=?$5428$tVUFT
     g$char<=?$5700$tVUFT
     (case-lambda
       ((g$a$5590$tVUFT g$b$5591$tVUFT . g$rest$5592$tVUFT)
        (begin
          (if (not (g$char?$5358$tVUFT g$a$5590$tVUFT))
            (assertion-violation 'char<=? '"not a char" g$a$5590$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$5593$tVUFT)
               (begin
                 (if (not (g$char?$5358$tVUFT g$x$5593$tVUFT))
                   (assertion-violation 'char<=? '"not a char" g$x$5593$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$5594$tVUFT)
                     (begin
                       (set! g$a$5590$tVUFT g$x$5593$tVUFT)
                       g$r$5594$tVUFT)))
                  (fx<=?
                    (char->integer g$a$5590$tVUFT)
                    (char->integer g$x$5593$tVUFT))))))
            (cons g$b$5591$tVUFT g$rest$5592$tVUFT))))))
   (g$char>=?$5429$tVUFT
     g$char>=?$5701$tVUFT
     (case-lambda
       ((g$a$5595$tVUFT g$b$5596$tVUFT . g$rest$5597$tVUFT)
        (begin
          (if (not (g$char?$5358$tVUFT g$a$5595$tVUFT))
            (assertion-violation 'char>=? '"not a char" g$a$5595$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$5598$tVUFT)
               (begin
                 (if (not (g$char?$5358$tVUFT g$x$5598$tVUFT))
                   (assertion-violation 'char>=? '"not a char" g$x$5598$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$5599$tVUFT)
                     (begin
                       (set! g$a$5595$tVUFT g$x$5598$tVUFT)
                       g$r$5599$tVUFT)))
                  (fx>=?
                    (char->integer g$a$5595$tVUFT)
                    (char->integer g$x$5598$tVUFT))))))
            (cons g$b$5596$tVUFT g$rest$5597$tVUFT))))))
   (g$rationalize$5430$tVUFT
     g$rationalize$5702$tVUFT
     (case-lambda
       ((g$x$5600$tVUFT g$e$5601$tVUFT)
        (if (if (infinite? g$x$5600$tVUFT)
              (begin '#f (infinite? g$e$5601$tVUFT))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$5602$tVUFT)
              (if (if (exact? g$x$5600$tVUFT)
                    (begin '#f (exact? g$e$5601$tVUFT))
                    '#f)
                g$r$5602$tVUFT
                (inexact g$r$5602$tVUFT))))
           (apply
             /
             (g$find-ratio$5431$tVUFT g$x$5600$tVUFT g$e$5601$tVUFT)))))))
   (g$find-ratio$5431$tVUFT
     g$find-ratio$5703$tVUFT
     (case-lambda
       ((g$x$5603$tVUFT g$e$5604$tVUFT)
        (g$find-ratio-between$5432$tVUFT
          (- g$x$5603$tVUFT g$e$5604$tVUFT)
          (+ g$x$5603$tVUFT g$e$5604$tVUFT)))))
   (g$find-ratio-between$5432$tVUFT
     g$find-ratio-between$5704$tVUFT
     (case-lambda
       ((g$x$5605$tVUFT g$y$5606$tVUFT)
        (letrec* ((g$sr$5607$tVUFT
                    (case-lambda
                      ((g$x$5609$tVUFT g$y$5610$tVUFT)
                       ((case-lambda
                          ((g$fx$5611$tVUFT g$fy$5612$tVUFT)
                           (if (>= g$fx$5611$tVUFT g$x$5609$tVUFT)
                             (list g$fx$5611$tVUFT '1)
                             (if (= g$fx$5611$tVUFT g$fy$5612$tVUFT)
                               ((case-lambda
                                  ((g$rat$5613$tVUFT)
                                   (list
                                     (+ (g$cadr$5370$tVUFT g$rat$5613$tVUFT)
                                        (* g$fx$5611$tVUFT
                                           (car g$rat$5613$tVUFT)))
                                     (car g$rat$5613$tVUFT))))
                                (g$sr$5607$tVUFT
                                  (/ (- g$y$5610$tVUFT g$fy$5612$tVUFT))
                                  (/ (- g$x$5609$tVUFT g$fx$5611$tVUFT))))
                               (list (+ '1 g$fx$5611$tVUFT) '1)))))
                        (exact (floor g$x$5609$tVUFT))
                        (exact (floor g$y$5610$tVUFT)))))))
          (if (< g$y$5606$tVUFT g$x$5605$tVUFT)
            (g$find-ratio-between$5432$tVUFT g$y$5606$tVUFT g$x$5605$tVUFT)
            (if (>= g$x$5605$tVUFT g$y$5606$tVUFT)
              (list g$x$5605$tVUFT '1)
              (if (g$positive?$5397$tVUFT g$x$5605$tVUFT)
                (g$sr$5607$tVUFT g$x$5605$tVUFT g$y$5606$tVUFT)
                (if (g$negative?$5398$tVUFT g$y$5606$tVUFT)
                  ((case-lambda
                     ((g$rat$5608$tVUFT)
                      (list
                        (- (car g$rat$5608$tVUFT))
                        (g$cadr$5370$tVUFT g$rat$5608$tVUFT))))
                   (g$sr$5607$tVUFT (- g$y$5606$tVUFT) (- g$x$5605$tVUFT)))
                  '(0 1)))))))))
   (g$vector-map$5433$tVUFT
     g$vector-map$5705$tVUFT
     (case-lambda
       ((g$p$5614$tVUFT g$vec1$5615$tVUFT . g$vecs$5616$tVUFT)
        ((case-lambda
           ((g$len$5617$tVUFT)
            ((case-lambda
               ((g$res$5618$tVUFT)
                (letrec ((g$loop$5619$tVUFT
                           (case-lambda
                             ((g$i$5620$tVUFT)
                              (if (fx=? g$i$5620$tVUFT g$len$5617$tVUFT)
                                (begin (if '#f '#f (void)) g$res$5618$tVUFT)
                                (begin
                                  (vector-set!
                                    g$res$5618$tVUFT
                                    g$i$5620$tVUFT
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (apply
                                           values
                                           (g$map$5157$tVUFT
                                             (case-lambda
                                               ((g$x$5621$tVUFT)
                                                (vector-ref
                                                  g$x$5621$tVUFT
                                                  g$i$5620$tVUFT)))
                                             (cons
                                               g$vec1$5615$tVUFT
                                               g$vecs$5616$tVUFT)))))
                                      g$p$5614$tVUFT))
                                  (g$loop$5619$tVUFT
                                    (fx+ g$i$5620$tVUFT '1))))))))
                  (g$loop$5619$tVUFT '0))))
             (make-vector g$len$5617$tVUFT))))
         (vector-length g$vec1$5615$tVUFT)))))
   (g$vector-for-each$5434$tVUFT
     g$vector-for-each$5706$tVUFT
     (case-lambda
       ((g$p$5622$tVUFT g$vec1$5623$tVUFT . g$vecs$5624$tVUFT)
        ((case-lambda
           ((g$len$5625$tVUFT)
            (letrec ((g$loop$5626$tVUFT
                       (case-lambda
                         ((g$i$5627$tVUFT)
                          (if (fx=? g$i$5627$tVUFT g$len$5625$tVUFT)
                            (if '#f '#f (void))
                            (begin
                              (call-with-values
                                (case-lambda
                                  (()
                                   (apply
                                     values
                                     (g$map$5157$tVUFT
                                       (case-lambda
                                         ((g$x$5628$tVUFT)
                                          (vector-ref
                                            g$x$5628$tVUFT
                                            g$i$5627$tVUFT)))
                                       (cons
                                         g$vec1$5623$tVUFT
                                         g$vecs$5624$tVUFT)))))
                                g$p$5622$tVUFT)
                              (g$loop$5626$tVUFT (fx+ g$i$5627$tVUFT '1))))))))
              (g$loop$5626$tVUFT '0))))
         (vector-length g$vec1$5623$tVUFT)))))
   (g$string-for-each$5435$tVUFT
     g$string-for-each$5707$tVUFT
     (case-lambda
       ((g$p$5629$tVUFT g$str1$5630$tVUFT . g$strs$5631$tVUFT)
        ((case-lambda
           ((g$len$5632$tVUFT)
            (letrec ((g$loop$5633$tVUFT
                       (case-lambda
                         ((g$i$5634$tVUFT)
                          (if (fx=? g$i$5634$tVUFT g$len$5632$tVUFT)
                            (if '#f '#f (void))
                            (begin
                              (call-with-values
                                (case-lambda
                                  (()
                                   (apply
                                     values
                                     (g$map$5157$tVUFT
                                       (case-lambda
                                         ((g$x$5635$tVUFT)
                                          (string-ref
                                            g$x$5635$tVUFT
                                            g$i$5634$tVUFT)))
                                       (cons
                                         g$str1$5630$tVUFT
                                         g$strs$5631$tVUFT)))))
                                g$p$5629$tVUFT)
                              (g$loop$5633$tVUFT (fx+ g$i$5634$tVUFT '1))))))))
              (g$loop$5633$tVUFT '0))))
         (string-length g$str1$5630$tVUFT))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$5709$tVUFT g$using$5742$tVUFT (clr-using-internal 'system))
   (g$using$5711$tVUFT
     g$using$5743$tVUFT
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$5712$tVUFT
     g$make-eq-hashtable$5744$tVUFT
     (case-lambda
       (() (g$make-eq-hashtable$5712$tVUFT '32))
       ((g$k$5721$tVUFT)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$5721$tVUFT)))))
   (g$make-eqv-hashtable$5713$tVUFT
     g$make-eqv-hashtable$5745$tVUFT
     (case-lambda
       (() (g$make-eqv-hashtable$5713$tVUFT '32))
       ((g$k$5722$tVUFT) (make-hashtable eqv-hash eqv? g$k$5722$tVUFT))))
   (g$hashtable-size$5714$tVUFT
     g$hashtable-size$5746$tVUFT
     (case-lambda
       ((g$ht$5723$tVUFT)
        (clr-call-internal 'hashtable 'get_count g$ht$5723$tVUFT))))
   (g$hashtable-ref$5715$tVUFT
     g$hashtable-ref$5747$tVUFT
     (case-lambda
       ((g$ht$5724$tVUFT g$key$5725$tVUFT g$default$5726$tVUFT)
        (letrec* ((g$r$5727$tVUFT
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$5724$tVUFT
                      g$key$5725$tVUFT)))
          (if (not (null? g$r$5727$tVUFT))
            g$r$5727$tVUFT
            g$default$5726$tVUFT)))))
   (g$hashtable-set!$5716$tVUFT
     g$hashtable-set!$5748$tVUFT
     (case-lambda
       ((g$ht$5728$tVUFT g$key$5729$tVUFT g$obj$5730$tVUFT)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$5728$tVUFT
          g$key$5729$tVUFT
          g$obj$5730$tVUFT))))
   (g$hashtable-delete!$5717$tVUFT
     g$hashtable-delete!$5749$tVUFT
     (case-lambda
       ((g$ht$5731$tVUFT g$key$5732$tVUFT)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$5731$tVUFT
          g$key$5732$tVUFT))))
   (g$hashtable-contains?$5718$tVUFT
     g$hashtable-contains?$5750$tVUFT
     (case-lambda
       ((g$ht$5733$tVUFT g$key$5734$tVUFT)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$5733$tVUFT
          g$key$5734$tVUFT))))
   (g$hashtable-update!$5719$tVUFT
     g$hashtable-update!$5751$tVUFT
     (case-lambda
       ((g$ht$5735$tVUFT
          g$key$5736$tVUFT
          g$proc$5737$tVUFT
          g$default$5738$tVUFT)
        (g$hashtable-set!$5716$tVUFT
          g$ht$5735$tVUFT
          g$key$5736$tVUFT
          (g$proc$5737$tVUFT
            (g$hashtable-ref$5715$tVUFT
              g$ht$5735$tVUFT
              g$key$5736$tVUFT
              g$default$5738$tVUFT))))))
   (g$hashtable-clear!$5720$tVUFT
     g$hashtable-clear!$5752$tVUFT
     (case-lambda
       ((g$ht$5739$tVUFT) (g$hashtable-clear!$5720$tVUFT g$ht$5739$tVUFT '32))
       ((g$ht$5740$tVUFT g$k$5741$tVUFT)
        (clr-call-internal 'hashtable 'clear g$ht$5740$tVUFT)))))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$5754$tVUFT g$using$5761$tVUFT (clr-using-internal 'system.io))
   (g$file-exists?$5755$tVUFT
     g$file-exists?$5762$tVUFT
     (case-lambda
       ((g$fn$5758$tVUFT)
        (clr-call-internal 'file 'exists '() g$fn$5758$tVUFT))))
   (g$delete-file$5756$tVUFT
     g$delete-file$5763$tVUFT
     (case-lambda
       ((g$fn$5759$tVUFT)
        (clr-call-internal 'file 'delete '() g$fn$5759$tVUFT))))
   (g$get-directory-name$5757$tVUFT
     g$get-directory-name$5764$tVUFT
     (case-lambda
       ((g$path$5760$tVUFT)
        (clr-call-internal 'path 'getdirectoryname '() g$path$5760$tVUFT)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$5765$tVUFT
     g$native-endianness$5876$tVUFT
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$5766$tVUFT
     g$bytevector-u16-ref$5877$tVUFT
     (case-lambda
       ((g$bytevector$5794$tVUFT g$k$5795$tVUFT g$endianness$5796$tVUFT)
        (bytevector-uint-ref
          g$bytevector$5794$tVUFT
          g$k$5795$tVUFT
          g$endianness$5796$tVUFT
          '2))))
   (g$bytevector-s16-ref$5767$tVUFT
     g$bytevector-s16-ref$5878$tVUFT
     (case-lambda
       ((g$bytevector$5797$tVUFT g$k$5798$tVUFT g$endianness$5799$tVUFT)
        (bytevector-sint-ref
          g$bytevector$5797$tVUFT
          g$k$5798$tVUFT
          g$endianness$5799$tVUFT
          '2))))
   (g$bytevector-u16-native-ref$5768$tVUFT
     g$bytevector-u16-native-ref$5879$tVUFT
     (case-lambda
       ((g$bytevector$5800$tVUFT g$k$5801$tVUFT)
        (bytevector-uint-ref
          g$bytevector$5800$tVUFT
          g$k$5801$tVUFT
          (g$native-endianness$5765$tVUFT)
          '2))))
   (g$bytevector-s16-native-ref$5769$tVUFT
     g$bytevector-s16-native-ref$5880$tVUFT
     (case-lambda
       ((g$bytevector$5802$tVUFT g$k$5803$tVUFT)
        (bytevector-sint-ref
          g$bytevector$5802$tVUFT
          g$k$5803$tVUFT
          (g$native-endianness$5765$tVUFT)
          '2))))
   (g$bytevector-u16-set!$5770$tVUFT
     g$bytevector-u16-set!$5881$tVUFT
     (case-lambda
       ((g$bytevector$5804$tVUFT
          g$k$5805$tVUFT
          g$n$5806$tVUFT
          g$endianness$5807$tVUFT)
        (bytevector-uint-set!
          g$bytevector$5804$tVUFT
          g$k$5805$tVUFT
          g$n$5806$tVUFT
          g$endianness$5807$tVUFT
          '2))))
   (g$bytevector-s16-set!$5771$tVUFT
     g$bytevector-s16-set!$5882$tVUFT
     (case-lambda
       ((g$bytevector$5808$tVUFT
          g$k$5809$tVUFT
          g$n$5810$tVUFT
          g$endianness$5811$tVUFT)
        (bytevector-sint-set!
          g$bytevector$5808$tVUFT
          g$k$5809$tVUFT
          g$n$5810$tVUFT
          g$endianness$5811$tVUFT
          '2))))
   (g$bytevector-u16-native-set!$5772$tVUFT
     g$bytevector-u16-native-set!$5883$tVUFT
     (case-lambda
       ((g$bytevector$5812$tVUFT g$k$5813$tVUFT g$n$5814$tVUFT)
        (bytevector-uint-set!
          g$bytevector$5812$tVUFT
          g$k$5813$tVUFT
          g$n$5814$tVUFT
          (g$native-endianness$5765$tVUFT)
          '2))))
   (g$bytevector-s16-native-set!$5773$tVUFT
     g$bytevector-s16-native-set!$5884$tVUFT
     (case-lambda
       ((g$bytevector$5815$tVUFT g$k$5816$tVUFT g$n$5817$tVUFT)
        (bytevector-sint-set!
          g$bytevector$5815$tVUFT
          g$k$5816$tVUFT
          g$n$5817$tVUFT
          (g$native-endianness$5765$tVUFT)
          '2))))
   (g$bytevector-u32-ref$5774$tVUFT
     g$bytevector-u32-ref$5885$tVUFT
     (case-lambda
       ((g$bytevector$5818$tVUFT g$k$5819$tVUFT g$endianness$5820$tVUFT)
        (bytevector-uint-ref
          g$bytevector$5818$tVUFT
          g$k$5819$tVUFT
          g$endianness$5820$tVUFT
          '4))))
   (g$bytevector-s32-ref$5775$tVUFT
     g$bytevector-s32-ref$5886$tVUFT
     (case-lambda
       ((g$bytevector$5821$tVUFT g$k$5822$tVUFT g$endianness$5823$tVUFT)
        (bytevector-sint-ref
          g$bytevector$5821$tVUFT
          g$k$5822$tVUFT
          g$endianness$5823$tVUFT
          '4))))
   (g$bytevector-u32-native-ref$5776$tVUFT
     g$bytevector-u32-native-ref$5887$tVUFT
     (case-lambda
       ((g$bytevector$5824$tVUFT g$k$5825$tVUFT)
        (bytevector-uint-ref
          g$bytevector$5824$tVUFT
          g$k$5825$tVUFT
          (g$native-endianness$5765$tVUFT)
          '4))))
   (g$bytevector-s32-native-ref$5777$tVUFT
     g$bytevector-s32-native-ref$5888$tVUFT
     (case-lambda
       ((g$bytevector$5826$tVUFT g$k$5827$tVUFT)
        (bytevector-sint-ref
          g$bytevector$5826$tVUFT
          g$k$5827$tVUFT
          (g$native-endianness$5765$tVUFT)
          '4))))
   (g$bytevector-u32-set!$5778$tVUFT
     g$bytevector-u32-set!$5889$tVUFT
     (case-lambda
       ((g$bytevector$5828$tVUFT
          g$k$5829$tVUFT
          g$n$5830$tVUFT
          g$endianness$5831$tVUFT)
        (bytevector-uint-set!
          g$bytevector$5828$tVUFT
          g$k$5829$tVUFT
          g$n$5830$tVUFT
          g$endianness$5831$tVUFT
          '4))))
   (g$bytevector-s32-set!$5779$tVUFT
     g$bytevector-s32-set!$5890$tVUFT
     (case-lambda
       ((g$bytevector$5832$tVUFT
          g$k$5833$tVUFT
          g$n$5834$tVUFT
          g$endianness$5835$tVUFT)
        (bytevector-sint-set!
          g$bytevector$5832$tVUFT
          g$k$5833$tVUFT
          g$n$5834$tVUFT
          g$endianness$5835$tVUFT
          '4))))
   (g$bytevector-u32-native-set!$5780$tVUFT
     g$bytevector-u32-native-set!$5891$tVUFT
     (case-lambda
       ((g$bytevector$5836$tVUFT g$k$5837$tVUFT g$n$5838$tVUFT)
        (bytevector-uint-set!
          g$bytevector$5836$tVUFT
          g$k$5837$tVUFT
          g$n$5838$tVUFT
          (g$native-endianness$5765$tVUFT)
          '4))))
   (g$bytevector-s32-native-set!$5781$tVUFT
     g$bytevector-s32-native-set!$5892$tVUFT
     (case-lambda
       ((g$bytevector$5839$tVUFT g$k$5840$tVUFT g$n$5841$tVUFT)
        (bytevector-sint-set!
          g$bytevector$5839$tVUFT
          g$k$5840$tVUFT
          g$n$5841$tVUFT
          (g$native-endianness$5765$tVUFT)
          '4))))
   (g$bytevector-u64-ref$5782$tVUFT
     g$bytevector-u64-ref$5893$tVUFT
     (case-lambda
       ((g$bytevector$5842$tVUFT g$k$5843$tVUFT g$endianness$5844$tVUFT)
        (bytevector-uint-ref
          g$bytevector$5842$tVUFT
          g$k$5843$tVUFT
          g$endianness$5844$tVUFT
          '8))))
   (g$bytevector-s64-ref$5783$tVUFT
     g$bytevector-s64-ref$5894$tVUFT
     (case-lambda
       ((g$bytevector$5845$tVUFT g$k$5846$tVUFT g$endianness$5847$tVUFT)
        (bytevector-sint-ref
          g$bytevector$5845$tVUFT
          g$k$5846$tVUFT
          g$endianness$5847$tVUFT
          '8))))
   (g$bytevector-u64-native-ref$5784$tVUFT
     g$bytevector-u64-native-ref$5895$tVUFT
     (case-lambda
       ((g$bytevector$5848$tVUFT g$k$5849$tVUFT)
        (bytevector-uint-ref
          g$bytevector$5848$tVUFT
          g$k$5849$tVUFT
          (g$native-endianness$5765$tVUFT)
          '8))))
   (g$bytevector-s64-native-ref$5785$tVUFT
     g$bytevector-s64-native-ref$5896$tVUFT
     (case-lambda
       ((g$bytevector$5850$tVUFT g$k$5851$tVUFT)
        (bytevector-sint-ref
          g$bytevector$5850$tVUFT
          g$k$5851$tVUFT
          (g$native-endianness$5765$tVUFT)
          '8))))
   (g$bytevector-u64-set!$5786$tVUFT
     g$bytevector-u64-set!$5897$tVUFT
     (case-lambda
       ((g$bytevector$5852$tVUFT
          g$k$5853$tVUFT
          g$n$5854$tVUFT
          g$endianness$5855$tVUFT)
        (bytevector-uint-set!
          g$bytevector$5852$tVUFT
          g$k$5853$tVUFT
          g$n$5854$tVUFT
          g$endianness$5855$tVUFT
          '8))))
   (g$bytevector-s64-set!$5787$tVUFT
     g$bytevector-s64-set!$5898$tVUFT
     (case-lambda
       ((g$bytevector$5856$tVUFT
          g$k$5857$tVUFT
          g$n$5858$tVUFT
          g$endianness$5859$tVUFT)
        (bytevector-sint-set!
          g$bytevector$5856$tVUFT
          g$k$5857$tVUFT
          g$n$5858$tVUFT
          g$endianness$5859$tVUFT
          '8))))
   (g$bytevector-u64-native-set!$5788$tVUFT
     g$bytevector-u64-native-set!$5899$tVUFT
     (case-lambda
       ((g$bytevector$5860$tVUFT g$k$5861$tVUFT g$n$5862$tVUFT)
        (bytevector-uint-set!
          g$bytevector$5860$tVUFT
          g$k$5861$tVUFT
          g$n$5862$tVUFT
          (g$native-endianness$5765$tVUFT)
          '8))))
   (g$bytevector-s64-native-set!$5789$tVUFT
     g$bytevector-s64-native-set!$5900$tVUFT
     (case-lambda
       ((g$bytevector$5863$tVUFT g$k$5864$tVUFT g$n$5865$tVUFT)
        (bytevector-sint-set!
          g$bytevector$5863$tVUFT
          g$k$5864$tVUFT
          g$n$5865$tVUFT
          (g$native-endianness$5765$tVUFT)
          '8))))
   (g$bytevector-ieee-single-native-ref$5790$tVUFT
     g$bytevector-ieee-single-native-ref$5901$tVUFT
     (case-lambda
       ((g$bytevector$5866$tVUFT g$k$5867$tVUFT)
        (if (not (g$zero?$5683$tVUFT (g$mod$5638$tVUFT g$k$5867$tVUFT '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$5867$tVUFT)
          (bytevector-ieee-single-ref
            g$bytevector$5866$tVUFT
            g$k$5867$tVUFT
            (g$native-endianness$5765$tVUFT))))))
   (g$bytevector-ieee-double-native-ref$5791$tVUFT
     g$bytevector-ieee-double-native-ref$5902$tVUFT
     (case-lambda
       ((g$bytevector$5868$tVUFT g$k$5869$tVUFT)
        (if (not (g$zero?$5683$tVUFT (g$mod$5638$tVUFT g$k$5869$tVUFT '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$5869$tVUFT)
          (bytevector-ieee-double-ref
            g$bytevector$5868$tVUFT
            g$k$5869$tVUFT
            (g$native-endianness$5765$tVUFT))))))
   (g$bytevector-ieee-single-native-set!$5792$tVUFT
     g$bytevector-ieee-single-native-set!$5903$tVUFT
     (case-lambda
       ((g$bytevector$5870$tVUFT g$k$5871$tVUFT g$x$5872$tVUFT)
        (if (not (g$zero?$5683$tVUFT (g$mod$5638$tVUFT g$k$5871$tVUFT '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$5871$tVUFT)
          (bytevector-ieee-single-set!
            g$bytevector$5870$tVUFT
            g$k$5871$tVUFT
            g$x$5872$tVUFT
            (g$native-endianness$5765$tVUFT))))))
   (g$bytevector-ieee-double-native-set!$5793$tVUFT
     g$bytevector-ieee-double-native-set!$5904$tVUFT
     (case-lambda
       ((g$bytevector$5873$tVUFT g$k$5874$tVUFT g$x$5875$tVUFT)
        (if (not (g$zero?$5683$tVUFT (g$mod$5638$tVUFT g$k$5874$tVUFT '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$5874$tVUFT)
          (bytevector-ieee-double-set!
            g$bytevector$5873$tVUFT
            g$k$5874$tVUFT
            g$x$5875$tVUFT
            (g$native-endianness$5765$tVUFT)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$6887$5905$tVUFT
     g$6887$6195$tVUFT
     (make-record-type-descriptor
       '&condition
       '#f
       'g$6890$tVUFT
       '#f
       '#f
       '#()))
   (g$6889$5906$tVUFT g$6889$6196$tVUFT '#f)
   (g$6888$5907$tVUFT
     g$6888$6197$tVUFT
     (make-record-constructor-descriptor
       g$6887$5905$tVUFT
       '#f
       g$6889$5906$tVUFT))
   (g$&condition?$5908$tVUFT
     g$&condition?$6198$tVUFT
     (record-predicate g$6887$5905$tVUFT))
   (g$make-&condition$5909$tVUFT
     g$make-&condition$6199$tVUFT
     (record-constructor g$6888$5907$tVUFT))
   (g$&condition-rtd$5910$tVUFT
     g$&condition-rtd$6200$tVUFT
     g$6887$5905$tVUFT)
   (g$&condition-rcd$5911$tVUFT
     g$&condition-rcd$6201$tVUFT
     g$6888$5907$tVUFT)
   (g$6958$5953$tVUFT
     g$6958$6202$tVUFT
     (make-record-type-descriptor
       '&message
       g$6887$5905$tVUFT
       'g$6961$tVUFT
       '#f
       '#f
       '#((immutable message))))
   (g$6960$5954$tVUFT g$6960$6203$tVUFT '#f)
   (g$6959$5955$tVUFT
     g$6959$6204$tVUFT
     (make-record-constructor-descriptor
       g$6958$5953$tVUFT
       g$6888$5907$tVUFT
       g$6960$5954$tVUFT))
   (g$p?$5956$tVUFT g$p?$6205$tVUFT (record-predicate g$6958$5953$tVUFT))
   (g$make-message-condition$5957$tVUFT
     g$make-message-condition$6206$tVUFT
     (record-constructor g$6959$5955$tVUFT))
   (g$condition-message$5958$tVUFT
     g$condition-message$6207$tVUFT
     (record-accessor g$6958$5953$tVUFT '0))
   (g$message-condition?$5959$tVUFT
     g$message-condition?$6208$tVUFT
     (condition-predicate g$6958$5953$tVUFT))
   (g$condition-message$5960$tVUFT
     g$condition-message$6209$tVUFT
     (condition-accessor g$6958$5953$tVUFT g$condition-message$5958$tVUFT))
   (g$&message-rtd$5961$tVUFT g$&message-rtd$6210$tVUFT g$6958$5953$tVUFT)
   (g$&message-rcd$5962$tVUFT g$&message-rcd$6211$tVUFT g$6959$5955$tVUFT)
   (g$6975$5963$tVUFT
     g$6975$6212$tVUFT
     (make-record-type-descriptor
       '&warning
       g$6887$5905$tVUFT
       'g$6978$tVUFT
       '#f
       '#f
       '#()))
   (g$6977$5964$tVUFT g$6977$6213$tVUFT '#f)
   (g$6976$5965$tVUFT
     g$6976$6214$tVUFT
     (make-record-constructor-descriptor
       g$6975$5963$tVUFT
       g$6888$5907$tVUFT
       g$6977$5964$tVUFT))
   (g$p?$5966$tVUFT g$p?$6215$tVUFT (record-predicate g$6975$5963$tVUFT))
   (g$make-warning$5967$tVUFT
     g$make-warning$6216$tVUFT
     (record-constructor g$6976$5965$tVUFT))
   (g$warning?$5968$tVUFT
     g$warning?$6217$tVUFT
     (condition-predicate g$6975$5963$tVUFT))
   (g$&warning-rtd$5969$tVUFT g$&warning-rtd$6218$tVUFT g$6975$5963$tVUFT)
   (g$&warning-rcd$5970$tVUFT g$&warning-rcd$6219$tVUFT g$6976$5965$tVUFT)
   (g$6990$5971$tVUFT
     g$6990$6220$tVUFT
     (make-record-type-descriptor
       '&serious
       g$6887$5905$tVUFT
       'g$6993$tVUFT
       '#f
       '#f
       '#()))
   (g$6992$5972$tVUFT g$6992$6221$tVUFT '#f)
   (g$6991$5973$tVUFT
     g$6991$6222$tVUFT
     (make-record-constructor-descriptor
       g$6990$5971$tVUFT
       g$6888$5907$tVUFT
       g$6992$5972$tVUFT))
   (g$p?$5974$tVUFT g$p?$6223$tVUFT (record-predicate g$6990$5971$tVUFT))
   (g$make-serious-condition$5975$tVUFT
     g$make-serious-condition$6224$tVUFT
     (record-constructor g$6991$5973$tVUFT))
   (g$serious-condition?$5976$tVUFT
     g$serious-condition?$6225$tVUFT
     (condition-predicate g$6990$5971$tVUFT))
   (g$&serious-rtd$5977$tVUFT g$&serious-rtd$6226$tVUFT g$6990$5971$tVUFT)
   (g$&serious-rcd$5978$tVUFT g$&serious-rcd$6227$tVUFT g$6991$5973$tVUFT)
   (g$7005$5979$tVUFT
     g$7005$6228$tVUFT
     (make-record-type-descriptor
       '&error
       g$6990$5971$tVUFT
       'g$7008$tVUFT
       '#f
       '#f
       '#()))
   (g$7007$5980$tVUFT g$7007$6229$tVUFT '#f)
   (g$7006$5981$tVUFT
     g$7006$6230$tVUFT
     (make-record-constructor-descriptor
       g$7005$5979$tVUFT
       g$6991$5973$tVUFT
       g$7007$5980$tVUFT))
   (g$p?$5982$tVUFT g$p?$6231$tVUFT (record-predicate g$7005$5979$tVUFT))
   (g$make-error$5983$tVUFT
     g$make-error$6232$tVUFT
     (record-constructor g$7006$5981$tVUFT))
   (g$error?$5984$tVUFT
     g$error?$6233$tVUFT
     (condition-predicate g$7005$5979$tVUFT))
   (g$&error-rtd$5985$tVUFT g$&error-rtd$6234$tVUFT g$7005$5979$tVUFT)
   (g$&error-rcd$5986$tVUFT g$&error-rcd$6235$tVUFT g$7006$5981$tVUFT)
   (g$7020$5987$tVUFT
     g$7020$6236$tVUFT
     (make-record-type-descriptor
       '&violation
       g$6990$5971$tVUFT
       'g$7023$tVUFT
       '#f
       '#f
       '#()))
   (g$7022$5988$tVUFT g$7022$6237$tVUFT '#f)
   (g$7021$5989$tVUFT
     g$7021$6238$tVUFT
     (make-record-constructor-descriptor
       g$7020$5987$tVUFT
       g$6991$5973$tVUFT
       g$7022$5988$tVUFT))
   (g$p?$5990$tVUFT g$p?$6239$tVUFT (record-predicate g$7020$5987$tVUFT))
   (g$make-violation$5991$tVUFT
     g$make-violation$6240$tVUFT
     (record-constructor g$7021$5989$tVUFT))
   (g$violation?$5992$tVUFT
     g$violation?$6241$tVUFT
     (condition-predicate g$7020$5987$tVUFT))
   (g$&violation-rtd$5993$tVUFT
     g$&violation-rtd$6242$tVUFT
     g$7020$5987$tVUFT)
   (g$&violation-rcd$5994$tVUFT
     g$&violation-rcd$6243$tVUFT
     g$7021$5989$tVUFT)
   (g$7035$5995$tVUFT
     g$7035$6244$tVUFT
     (make-record-type-descriptor
       '&assertion
       g$7020$5987$tVUFT
       'g$7038$tVUFT
       '#f
       '#f
       '#()))
   (g$7037$5996$tVUFT g$7037$6245$tVUFT '#f)
   (g$7036$5997$tVUFT
     g$7036$6246$tVUFT
     (make-record-constructor-descriptor
       g$7035$5995$tVUFT
       g$7021$5989$tVUFT
       g$7037$5996$tVUFT))
   (g$p?$5998$tVUFT g$p?$6247$tVUFT (record-predicate g$7035$5995$tVUFT))
   (g$make-assertion-violation$5999$tVUFT
     g$make-assertion-violation$6248$tVUFT
     (record-constructor g$7036$5997$tVUFT))
   (g$assertion-violation?$6000$tVUFT
     g$assertion-violation?$6249$tVUFT
     (condition-predicate g$7035$5995$tVUFT))
   (g$&assertion-rtd$6001$tVUFT
     g$&assertion-rtd$6250$tVUFT
     g$7035$5995$tVUFT)
   (g$&assertion-rcd$6002$tVUFT
     g$&assertion-rcd$6251$tVUFT
     g$7036$5997$tVUFT)
   (g$7050$6004$tVUFT
     g$7050$6252$tVUFT
     (make-record-type-descriptor
       '&irritants
       g$6887$5905$tVUFT
       'g$7053$tVUFT
       '#f
       '#f
       '#((immutable irritants))))
   (g$7052$6005$tVUFT g$7052$6253$tVUFT '#f)
   (g$7051$6006$tVUFT
     g$7051$6254$tVUFT
     (make-record-constructor-descriptor
       g$7050$6004$tVUFT
       g$6888$5907$tVUFT
       g$7052$6005$tVUFT))
   (g$p?$6007$tVUFT g$p?$6255$tVUFT (record-predicate g$7050$6004$tVUFT))
   (g$make-irritants-condition$6008$tVUFT
     g$make-irritants-condition$6256$tVUFT
     (record-constructor g$7051$6006$tVUFT))
   (g$condition-irritants$6009$tVUFT
     g$condition-irritants$6257$tVUFT
     (record-accessor g$7050$6004$tVUFT '0))
   (g$irritants-condition?$6010$tVUFT
     g$irritants-condition?$6258$tVUFT
     (condition-predicate g$7050$6004$tVUFT))
   (g$condition-irritants$6011$tVUFT
     g$condition-irritants$6259$tVUFT
     (condition-accessor g$7050$6004$tVUFT g$condition-irritants$6009$tVUFT))
   (g$&irritants-rtd$6012$tVUFT
     g$&irritants-rtd$6260$tVUFT
     g$7050$6004$tVUFT)
   (g$&irritants-rcd$6013$tVUFT
     g$&irritants-rcd$6261$tVUFT
     g$7051$6006$tVUFT)
   (g$7067$6015$tVUFT
     g$7067$6262$tVUFT
     (make-record-type-descriptor
       '&who
       g$6887$5905$tVUFT
       'g$7070$tVUFT
       '#f
       '#f
       '#((immutable who))))
   (g$7069$6016$tVUFT g$7069$6263$tVUFT '#f)
   (g$7068$6017$tVUFT
     g$7068$6264$tVUFT
     (make-record-constructor-descriptor
       g$7067$6015$tVUFT
       g$6888$5907$tVUFT
       g$7069$6016$tVUFT))
   (g$p?$6018$tVUFT g$p?$6265$tVUFT (record-predicate g$7067$6015$tVUFT))
   (g$make-who-condition$6019$tVUFT
     g$make-who-condition$6266$tVUFT
     (record-constructor g$7068$6017$tVUFT))
   (g$condition-who$6020$tVUFT
     g$condition-who$6267$tVUFT
     (record-accessor g$7067$6015$tVUFT '0))
   (g$who-condition?$6021$tVUFT
     g$who-condition?$6268$tVUFT
     (condition-predicate g$7067$6015$tVUFT))
   (g$condition-who$6022$tVUFT
     g$condition-who$6269$tVUFT
     (condition-accessor g$7067$6015$tVUFT g$condition-who$6020$tVUFT))
   (g$&who-rtd$6023$tVUFT g$&who-rtd$6270$tVUFT g$7067$6015$tVUFT)
   (g$&who-rcd$6024$tVUFT g$&who-rcd$6271$tVUFT g$7068$6017$tVUFT)
   (g$7084$6025$tVUFT
     g$7084$6272$tVUFT
     (make-record-type-descriptor
       '&non-continuable
       g$7020$5987$tVUFT
       'g$7087$tVUFT
       '#f
       '#f
       '#()))
   (g$7086$6026$tVUFT g$7086$6273$tVUFT '#f)
   (g$7085$6027$tVUFT
     g$7085$6274$tVUFT
     (make-record-constructor-descriptor
       g$7084$6025$tVUFT
       g$7021$5989$tVUFT
       g$7086$6026$tVUFT))
   (g$p?$6028$tVUFT g$p?$6275$tVUFT (record-predicate g$7084$6025$tVUFT))
   (g$make-non-continuable-violation$6029$tVUFT
     g$make-non-continuable-violation$6276$tVUFT
     (record-constructor g$7085$6027$tVUFT))
   (g$non-continuable-violation?$6030$tVUFT
     g$non-continuable-violation?$6277$tVUFT
     (condition-predicate g$7084$6025$tVUFT))
   (g$&non-continuable-rtd$6031$tVUFT
     g$&non-continuable-rtd$6278$tVUFT
     g$7084$6025$tVUFT)
   (g$&non-continuable-rcd$6032$tVUFT
     g$&non-continuable-rcd$6279$tVUFT
     g$7085$6027$tVUFT)
   (g$7099$6033$tVUFT
     g$7099$6280$tVUFT
     (make-record-type-descriptor
       '&implementation-restriction
       g$7020$5987$tVUFT
       'g$7102$tVUFT
       '#f
       '#f
       '#()))
   (g$7101$6034$tVUFT g$7101$6281$tVUFT '#f)
   (g$7100$6035$tVUFT
     g$7100$6282$tVUFT
     (make-record-constructor-descriptor
       g$7099$6033$tVUFT
       g$7021$5989$tVUFT
       g$7101$6034$tVUFT))
   (g$p?$6036$tVUFT g$p?$6283$tVUFT (record-predicate g$7099$6033$tVUFT))
   (g$make-implementation-restriction-violation$6037$tVUFT
     g$make-implementation-restriction-violation$6284$tVUFT
     (record-constructor g$7100$6035$tVUFT))
   (g$implementation-restriction-violation?$6038$tVUFT
     g$implementation-restriction-violation?$6285$tVUFT
     (condition-predicate g$7099$6033$tVUFT))
   (g$&implementation-restriction-rtd$6039$tVUFT
     g$&implementation-restriction-rtd$6286$tVUFT
     g$7099$6033$tVUFT)
   (g$&implementation-restriction-rcd$6040$tVUFT
     g$&implementation-restriction-rcd$6287$tVUFT
     g$7100$6035$tVUFT)
   (g$7114$6041$tVUFT
     g$7114$6288$tVUFT
     (make-record-type-descriptor
       '&lexical
       g$7020$5987$tVUFT
       'g$7117$tVUFT
       '#f
       '#f
       '#()))
   (g$7116$6042$tVUFT g$7116$6289$tVUFT '#f)
   (g$7115$6043$tVUFT
     g$7115$6290$tVUFT
     (make-record-constructor-descriptor
       g$7114$6041$tVUFT
       g$7021$5989$tVUFT
       g$7116$6042$tVUFT))
   (g$p?$6044$tVUFT g$p?$6291$tVUFT (record-predicate g$7114$6041$tVUFT))
   (g$make-lexical-violation$6045$tVUFT
     g$make-lexical-violation$6292$tVUFT
     (record-constructor g$7115$6043$tVUFT))
   (g$lexical-violation?$6046$tVUFT
     g$lexical-violation?$6293$tVUFT
     (condition-predicate g$7114$6041$tVUFT))
   (g$&lexical-rtd$6047$tVUFT g$&lexical-rtd$6294$tVUFT g$7114$6041$tVUFT)
   (g$&lexical-rcd$6048$tVUFT g$&lexical-rcd$6295$tVUFT g$7115$6043$tVUFT)
   (g$7129$6051$tVUFT
     g$7129$6296$tVUFT
     (make-record-type-descriptor
       '&syntax
       g$7020$5987$tVUFT
       'g$7132$tVUFT
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$7131$6052$tVUFT g$7131$6297$tVUFT '#f)
   (g$7130$6053$tVUFT
     g$7130$6298$tVUFT
     (make-record-constructor-descriptor
       g$7129$6051$tVUFT
       g$7021$5989$tVUFT
       g$7131$6052$tVUFT))
   (g$p?$6054$tVUFT g$p?$6299$tVUFT (record-predicate g$7129$6051$tVUFT))
   (g$make-syntax-violation$6055$tVUFT
     g$make-syntax-violation$6300$tVUFT
     (record-constructor g$7130$6053$tVUFT))
   (g$syntax-violation-form$6056$tVUFT
     g$syntax-violation-form$6301$tVUFT
     (record-accessor g$7129$6051$tVUFT '0))
   (g$syntax-violation-subform$6057$tVUFT
     g$syntax-violation-subform$6302$tVUFT
     (record-accessor g$7129$6051$tVUFT '1))
   (g$syntax-violation?$6058$tVUFT
     g$syntax-violation?$6303$tVUFT
     (condition-predicate g$7129$6051$tVUFT))
   (g$syntax-violation-form$6059$tVUFT
     g$syntax-violation-form$6304$tVUFT
     (condition-accessor
       g$7129$6051$tVUFT
       g$syntax-violation-form$6056$tVUFT))
   (g$syntax-violation-subform$6060$tVUFT
     g$syntax-violation-subform$6305$tVUFT
     (condition-accessor
       g$7129$6051$tVUFT
       g$syntax-violation-subform$6057$tVUFT))
   (g$&syntax-rtd$6061$tVUFT g$&syntax-rtd$6306$tVUFT g$7129$6051$tVUFT)
   (g$&syntax-rcd$6062$tVUFT g$&syntax-rcd$6307$tVUFT g$7130$6053$tVUFT)
   (g$7148$6063$tVUFT
     g$7148$6308$tVUFT
     (make-record-type-descriptor
       '&undefined
       g$7020$5987$tVUFT
       'g$7151$tVUFT
       '#f
       '#f
       '#()))
   (g$7150$6064$tVUFT g$7150$6309$tVUFT '#f)
   (g$7149$6065$tVUFT
     g$7149$6310$tVUFT
     (make-record-constructor-descriptor
       g$7148$6063$tVUFT
       g$7021$5989$tVUFT
       g$7150$6064$tVUFT))
   (g$p?$6066$tVUFT g$p?$6311$tVUFT (record-predicate g$7148$6063$tVUFT))
   (g$make-undefined-violation$6067$tVUFT
     g$make-undefined-violation$6312$tVUFT
     (record-constructor g$7149$6065$tVUFT))
   (g$undefined-violation?$6068$tVUFT
     g$undefined-violation?$6313$tVUFT
     (condition-predicate g$7148$6063$tVUFT))
   (g$&undefined-rtd$6069$tVUFT
     g$&undefined-rtd$6314$tVUFT
     g$7148$6063$tVUFT)
   (g$&undefined-rcd$6070$tVUFT
     g$&undefined-rcd$6315$tVUFT
     g$7149$6065$tVUFT)
   (g$7163$6071$tVUFT
     g$7163$6316$tVUFT
     (make-record-type-descriptor
       '&i/o
       g$7005$5979$tVUFT
       'g$7166$tVUFT
       '#f
       '#f
       '#()))
   (g$7165$6072$tVUFT g$7165$6317$tVUFT '#f)
   (g$7164$6073$tVUFT
     g$7164$6318$tVUFT
     (make-record-constructor-descriptor
       g$7163$6071$tVUFT
       g$7006$5981$tVUFT
       g$7165$6072$tVUFT))
   (g$p?$6074$tVUFT g$p?$6319$tVUFT (record-predicate g$7163$6071$tVUFT))
   (g$make-i/o-error$6075$tVUFT
     g$make-i/o-error$6320$tVUFT
     (record-constructor g$7164$6073$tVUFT))
   (g$i/o-error?$6076$tVUFT
     g$i/o-error?$6321$tVUFT
     (condition-predicate g$7163$6071$tVUFT))
   (g$&i/o-rtd$6077$tVUFT g$&i/o-rtd$6322$tVUFT g$7163$6071$tVUFT)
   (g$&i/o-rcd$6078$tVUFT g$&i/o-rcd$6323$tVUFT g$7164$6073$tVUFT)
   (g$7178$6079$tVUFT
     g$7178$6324$tVUFT
     (make-record-type-descriptor
       '&i/o-read
       g$7163$6071$tVUFT
       'g$7181$tVUFT
       '#f
       '#f
       '#()))
   (g$7180$6080$tVUFT g$7180$6325$tVUFT '#f)
   (g$7179$6081$tVUFT
     g$7179$6326$tVUFT
     (make-record-constructor-descriptor
       g$7178$6079$tVUFT
       g$7164$6073$tVUFT
       g$7180$6080$tVUFT))
   (g$p?$6082$tVUFT g$p?$6327$tVUFT (record-predicate g$7178$6079$tVUFT))
   (g$make-i/o-read-error$6083$tVUFT
     g$make-i/o-read-error$6328$tVUFT
     (record-constructor g$7179$6081$tVUFT))
   (g$i/o-read-error?$6084$tVUFT
     g$i/o-read-error?$6329$tVUFT
     (condition-predicate g$7178$6079$tVUFT))
   (g$&i/o-read-rtd$6085$tVUFT
     g$&i/o-read-rtd$6330$tVUFT
     g$7178$6079$tVUFT)
   (g$&i/o-read-rcd$6086$tVUFT
     g$&i/o-read-rcd$6331$tVUFT
     g$7179$6081$tVUFT)
   (g$7193$6087$tVUFT
     g$7193$6332$tVUFT
     (make-record-type-descriptor
       '&i/o-write
       g$7163$6071$tVUFT
       'g$7196$tVUFT
       '#f
       '#f
       '#()))
   (g$7195$6088$tVUFT g$7195$6333$tVUFT '#f)
   (g$7194$6089$tVUFT
     g$7194$6334$tVUFT
     (make-record-constructor-descriptor
       g$7193$6087$tVUFT
       g$7164$6073$tVUFT
       g$7195$6088$tVUFT))
   (g$p?$6090$tVUFT g$p?$6335$tVUFT (record-predicate g$7193$6087$tVUFT))
   (g$make-i/o-write-error$6091$tVUFT
     g$make-i/o-write-error$6336$tVUFT
     (record-constructor g$7194$6089$tVUFT))
   (g$i/o-write-error?$6092$tVUFT
     g$i/o-write-error?$6337$tVUFT
     (condition-predicate g$7193$6087$tVUFT))
   (g$&i/o-write-rtd$6093$tVUFT
     g$&i/o-write-rtd$6338$tVUFT
     g$7193$6087$tVUFT)
   (g$&i/o-write-rcd$6094$tVUFT
     g$&i/o-write-rcd$6339$tVUFT
     g$7194$6089$tVUFT)
   (g$7208$6096$tVUFT
     g$7208$6340$tVUFT
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$7163$6071$tVUFT
       'g$7211$tVUFT
       '#f
       '#f
       '#((immutable position))))
   (g$7210$6097$tVUFT g$7210$6341$tVUFT '#f)
   (g$7209$6098$tVUFT
     g$7209$6342$tVUFT
     (make-record-constructor-descriptor
       g$7208$6096$tVUFT
       g$7164$6073$tVUFT
       g$7210$6097$tVUFT))
   (g$p?$6099$tVUFT g$p?$6343$tVUFT (record-predicate g$7208$6096$tVUFT))
   (g$make-i/o-invalid-position-error$6100$tVUFT
     g$make-i/o-invalid-position-error$6344$tVUFT
     (record-constructor g$7209$6098$tVUFT))
   (g$i/o-error-position$6101$tVUFT
     g$i/o-error-position$6345$tVUFT
     (record-accessor g$7208$6096$tVUFT '0))
   (g$i/o-invalid-position-error?$6102$tVUFT
     g$i/o-invalid-position-error?$6346$tVUFT
     (condition-predicate g$7208$6096$tVUFT))
   (g$i/o-error-position$6103$tVUFT
     g$i/o-error-position$6347$tVUFT
     (condition-accessor g$7208$6096$tVUFT g$i/o-error-position$6101$tVUFT))
   (g$&i/o-invalid-position-rtd$6104$tVUFT
     g$&i/o-invalid-position-rtd$6348$tVUFT
     g$7208$6096$tVUFT)
   (g$&i/o-invalid-position-rcd$6105$tVUFT
     g$&i/o-invalid-position-rcd$6349$tVUFT
     g$7209$6098$tVUFT)
   (g$7225$6107$tVUFT
     g$7225$6350$tVUFT
     (make-record-type-descriptor
       '&i/o-filename
       g$7163$6071$tVUFT
       'g$7228$tVUFT
       '#f
       '#f
       '#((immutable filename))))
   (g$7227$6108$tVUFT g$7227$6351$tVUFT '#f)
   (g$7226$6109$tVUFT
     g$7226$6352$tVUFT
     (make-record-constructor-descriptor
       g$7225$6107$tVUFT
       g$7164$6073$tVUFT
       g$7227$6108$tVUFT))
   (g$p?$6110$tVUFT g$p?$6353$tVUFT (record-predicate g$7225$6107$tVUFT))
   (g$make-i/o-filename-error$6111$tVUFT
     g$make-i/o-filename-error$6354$tVUFT
     (record-constructor g$7226$6109$tVUFT))
   (g$i/o-error-filename$6112$tVUFT
     g$i/o-error-filename$6355$tVUFT
     (record-accessor g$7225$6107$tVUFT '0))
   (g$i/o-filename-error?$6113$tVUFT
     g$i/o-filename-error?$6356$tVUFT
     (condition-predicate g$7225$6107$tVUFT))
   (g$i/o-error-filename$6114$tVUFT
     g$i/o-error-filename$6357$tVUFT
     (condition-accessor g$7225$6107$tVUFT g$i/o-error-filename$6112$tVUFT))
   (g$&i/o-filename-rtd$6115$tVUFT
     g$&i/o-filename-rtd$6358$tVUFT
     g$7225$6107$tVUFT)
   (g$&i/o-filename-rcd$6116$tVUFT
     g$&i/o-filename-rcd$6359$tVUFT
     g$7226$6109$tVUFT)
   (g$7242$6117$tVUFT
     g$7242$6360$tVUFT
     (make-record-type-descriptor
       '&i/o-file-protection
       g$7225$6107$tVUFT
       'g$7245$tVUFT
       '#f
       '#f
       '#()))
   (g$7244$6118$tVUFT g$7244$6361$tVUFT '#f)
   (g$7243$6119$tVUFT
     g$7243$6362$tVUFT
     (make-record-constructor-descriptor
       g$7242$6117$tVUFT
       g$7226$6109$tVUFT
       g$7244$6118$tVUFT))
   (g$p?$6120$tVUFT g$p?$6363$tVUFT (record-predicate g$7242$6117$tVUFT))
   (g$make-i/o-file-protection-error$6121$tVUFT
     g$make-i/o-file-protection-error$6364$tVUFT
     (record-constructor g$7243$6119$tVUFT))
   (g$i/o-file-protection-error?$6122$tVUFT
     g$i/o-file-protection-error?$6365$tVUFT
     (condition-predicate g$7242$6117$tVUFT))
   (g$&i/o-file-protection-rtd$6123$tVUFT
     g$&i/o-file-protection-rtd$6366$tVUFT
     g$7242$6117$tVUFT)
   (g$&i/o-file-protection-rcd$6124$tVUFT
     g$&i/o-file-protection-rcd$6367$tVUFT
     g$7243$6119$tVUFT)
   (g$7257$6125$tVUFT
     g$7257$6368$tVUFT
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$7242$6117$tVUFT
       'g$7260$tVUFT
       '#f
       '#f
       '#()))
   (g$7259$6126$tVUFT g$7259$6369$tVUFT '#f)
   (g$7258$6127$tVUFT
     g$7258$6370$tVUFT
     (make-record-constructor-descriptor
       g$7257$6125$tVUFT
       g$7243$6119$tVUFT
       g$7259$6126$tVUFT))
   (g$p?$6128$tVUFT g$p?$6371$tVUFT (record-predicate g$7257$6125$tVUFT))
   (g$make-i/o-file-is-read-only-error$6129$tVUFT
     g$make-i/o-file-is-read-only-error$6372$tVUFT
     (record-constructor g$7258$6127$tVUFT))
   (g$i/o-file-is-read-only-error?$6130$tVUFT
     g$i/o-file-is-read-only-error?$6373$tVUFT
     (condition-predicate g$7257$6125$tVUFT))
   (g$&i/o-file-is-read-only-rtd$6131$tVUFT
     g$&i/o-file-is-read-only-rtd$6374$tVUFT
     g$7257$6125$tVUFT)
   (g$&i/o-file-is-read-only-rcd$6132$tVUFT
     g$&i/o-file-is-read-only-rcd$6375$tVUFT
     g$7258$6127$tVUFT)
   (g$7272$6133$tVUFT
     g$7272$6376$tVUFT
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$7225$6107$tVUFT
       'g$7275$tVUFT
       '#f
       '#f
       '#()))
   (g$7274$6134$tVUFT g$7274$6377$tVUFT '#f)
   (g$7273$6135$tVUFT
     g$7273$6378$tVUFT
     (make-record-constructor-descriptor
       g$7272$6133$tVUFT
       g$7226$6109$tVUFT
       g$7274$6134$tVUFT))
   (g$p?$6136$tVUFT g$p?$6379$tVUFT (record-predicate g$7272$6133$tVUFT))
   (g$make-i/o-file-already-exists-error$6137$tVUFT
     g$make-i/o-file-already-exists-error$6380$tVUFT
     (record-constructor g$7273$6135$tVUFT))
   (g$i/o-file-already-exists-error?$6138$tVUFT
     g$i/o-file-already-exists-error?$6381$tVUFT
     (condition-predicate g$7272$6133$tVUFT))
   (g$&i/o-file-already-exists-rtd$6139$tVUFT
     g$&i/o-file-already-exists-rtd$6382$tVUFT
     g$7272$6133$tVUFT)
   (g$&i/o-file-already-exists-rcd$6140$tVUFT
     g$&i/o-file-already-exists-rcd$6383$tVUFT
     g$7273$6135$tVUFT)
   (g$7287$6141$tVUFT
     g$7287$6384$tVUFT
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$7225$6107$tVUFT
       'g$7290$tVUFT
       '#f
       '#f
       '#()))
   (g$7289$6142$tVUFT g$7289$6385$tVUFT '#f)
   (g$7288$6143$tVUFT
     g$7288$6386$tVUFT
     (make-record-constructor-descriptor
       g$7287$6141$tVUFT
       g$7226$6109$tVUFT
       g$7289$6142$tVUFT))
   (g$p?$6144$tVUFT g$p?$6387$tVUFT (record-predicate g$7287$6141$tVUFT))
   (g$make-i/o-file-does-not-exist-error$6145$tVUFT
     g$make-i/o-file-does-not-exist-error$6388$tVUFT
     (record-constructor g$7288$6143$tVUFT))
   (g$i/o-file-does-not-exist-error?$6146$tVUFT
     g$i/o-file-does-not-exist-error?$6389$tVUFT
     (condition-predicate g$7287$6141$tVUFT))
   (g$&i/o-file-does-not-exist-rtd$6147$tVUFT
     g$&i/o-file-does-not-exist-rtd$6390$tVUFT
     g$7287$6141$tVUFT)
   (g$&i/o-file-does-not-exist-rcd$6148$tVUFT
     g$&i/o-file-does-not-exist-rcd$6391$tVUFT
     g$7288$6143$tVUFT)
   (g$7302$6150$tVUFT
     g$7302$6392$tVUFT
     (make-record-type-descriptor
       '&i/o-port
       g$7163$6071$tVUFT
       'g$7305$tVUFT
       '#f
       '#f
       '#((immutable port))))
   (g$7304$6151$tVUFT g$7304$6393$tVUFT '#f)
   (g$7303$6152$tVUFT
     g$7303$6394$tVUFT
     (make-record-constructor-descriptor
       g$7302$6150$tVUFT
       g$7164$6073$tVUFT
       g$7304$6151$tVUFT))
   (g$p?$6153$tVUFT g$p?$6395$tVUFT (record-predicate g$7302$6150$tVUFT))
   (g$make-i/o-port-error$6154$tVUFT
     g$make-i/o-port-error$6396$tVUFT
     (record-constructor g$7303$6152$tVUFT))
   (g$i/o-error-port$6155$tVUFT
     g$i/o-error-port$6397$tVUFT
     (record-accessor g$7302$6150$tVUFT '0))
   (g$i/o-port-error?$6156$tVUFT
     g$i/o-port-error?$6398$tVUFT
     (condition-predicate g$7302$6150$tVUFT))
   (g$i/o-error-port$6157$tVUFT
     g$i/o-error-port$6399$tVUFT
     (condition-accessor g$7302$6150$tVUFT g$i/o-error-port$6155$tVUFT))
   (g$&i/o-port-rtd$6158$tVUFT
     g$&i/o-port-rtd$6400$tVUFT
     g$7302$6150$tVUFT)
   (g$&i/o-port-rcd$6159$tVUFT
     g$&i/o-port-rcd$6401$tVUFT
     g$7303$6152$tVUFT)
   (g$7319$6160$tVUFT
     g$7319$6402$tVUFT
     (make-record-type-descriptor
       '&i/o-decoding
       g$7302$6150$tVUFT
       'g$7322$tVUFT
       '#f
       '#f
       '#()))
   (g$7321$6161$tVUFT g$7321$6403$tVUFT '#f)
   (g$7320$6162$tVUFT
     g$7320$6404$tVUFT
     (make-record-constructor-descriptor
       g$7319$6160$tVUFT
       g$7303$6152$tVUFT
       g$7321$6161$tVUFT))
   (g$p?$6163$tVUFT g$p?$6405$tVUFT (record-predicate g$7319$6160$tVUFT))
   (g$make-i/o-decoding-error$6164$tVUFT
     g$make-i/o-decoding-error$6406$tVUFT
     (record-constructor g$7320$6162$tVUFT))
   (g$i/o-decoding-error?$6165$tVUFT
     g$i/o-decoding-error?$6407$tVUFT
     (condition-predicate g$7319$6160$tVUFT))
   (g$&i/o-decoding-rtd$6166$tVUFT
     g$&i/o-decoding-rtd$6408$tVUFT
     g$7319$6160$tVUFT)
   (g$&i/o-decoding-rcd$6167$tVUFT
     g$&i/o-decoding-rcd$6409$tVUFT
     g$7320$6162$tVUFT)
   (g$7334$6169$tVUFT
     g$7334$6410$tVUFT
     (make-record-type-descriptor
       '&i/o-encoding
       g$7302$6150$tVUFT
       'g$7337$tVUFT
       '#f
       '#f
       '#((immutable char))))
   (g$7336$6170$tVUFT g$7336$6411$tVUFT '#f)
   (g$7335$6171$tVUFT
     g$7335$6412$tVUFT
     (make-record-constructor-descriptor
       g$7334$6169$tVUFT
       g$7303$6152$tVUFT
       g$7336$6170$tVUFT))
   (g$p?$6172$tVUFT g$p?$6413$tVUFT (record-predicate g$7334$6169$tVUFT))
   (g$make-i/o-encoding-error$6173$tVUFT
     g$make-i/o-encoding-error$6414$tVUFT
     (record-constructor g$7335$6171$tVUFT))
   (g$i/o-encoding-error-char$6174$tVUFT
     g$i/o-encoding-error-char$6415$tVUFT
     (record-accessor g$7334$6169$tVUFT '0))
   (g$i/o-encoding-error?$6175$tVUFT
     g$i/o-encoding-error?$6416$tVUFT
     (condition-predicate g$7334$6169$tVUFT))
   (g$i/o-encoding-error-char$6176$tVUFT
     g$i/o-encoding-error-char$6417$tVUFT
     (condition-accessor
       g$7334$6169$tVUFT
       g$i/o-encoding-error-char$6174$tVUFT))
   (g$&i/o-encoding-rtd$6177$tVUFT
     g$&i/o-encoding-rtd$6418$tVUFT
     g$7334$6169$tVUFT)
   (g$&i/o-encoding-rcd$6178$tVUFT
     g$&i/o-encoding-rcd$6419$tVUFT
     g$7335$6171$tVUFT)
   (g$7351$6179$tVUFT
     g$7351$6420$tVUFT
     (make-record-type-descriptor
       '&no-infinities
       g$7099$6033$tVUFT
       'g$7354$tVUFT
       '#f
       '#f
       '#()))
   (g$7353$6180$tVUFT g$7353$6421$tVUFT '#f)
   (g$7352$6181$tVUFT
     g$7352$6422$tVUFT
     (make-record-constructor-descriptor
       g$7351$6179$tVUFT
       g$7100$6035$tVUFT
       g$7353$6180$tVUFT))
   (g$p?$6182$tVUFT g$p?$6423$tVUFT (record-predicate g$7351$6179$tVUFT))
   (g$make-no-infinities-violation$6183$tVUFT
     g$make-no-infinities-violation$6424$tVUFT
     (record-constructor g$7352$6181$tVUFT))
   (g$no-infinities-violation?$6184$tVUFT
     g$no-infinities-violation?$6425$tVUFT
     (condition-predicate g$7351$6179$tVUFT))
   (g$&no-infinities-rtd$6185$tVUFT
     g$&no-infinities-rtd$6426$tVUFT
     g$7351$6179$tVUFT)
   (g$&no-infinities-rcd$6186$tVUFT
     g$&no-infinities-rcd$6427$tVUFT
     g$7352$6181$tVUFT)
   (g$7366$6187$tVUFT
     g$7366$6428$tVUFT
     (make-record-type-descriptor
       '&no-nans
       g$7099$6033$tVUFT
       'g$7369$tVUFT
       '#f
       '#f
       '#()))
   (g$7368$6188$tVUFT g$7368$6429$tVUFT '#f)
   (g$7367$6189$tVUFT
     g$7367$6430$tVUFT
     (make-record-constructor-descriptor
       g$7366$6187$tVUFT
       g$7100$6035$tVUFT
       g$7368$6188$tVUFT))
   (g$p?$6190$tVUFT g$p?$6431$tVUFT (record-predicate g$7366$6187$tVUFT))
   (g$make-no-nans-violation$6191$tVUFT
     g$make-no-nans-violation$6432$tVUFT
     (record-constructor g$7367$6189$tVUFT))
   (g$no-nans-violation?$6192$tVUFT
     g$no-nans-violation?$6433$tVUFT
     (condition-predicate g$7366$6187$tVUFT))
   (g$&no-nans-rtd$6193$tVUFT g$&no-nans-rtd$6434$tVUFT g$7366$6187$tVUFT)
   (g$&no-nans-rcd$6194$tVUFT g$&no-nans-rcd$6435$tVUFT g$7367$6189$tVUFT))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$6436$tVUFT
     g$append!$6442$tVUFT
     (case-lambda
       ((g$a$6437$tVUFT . g$b$6438$tVUFT)
        (if (null? g$a$6437$tVUFT)
          g$b$6438$tVUFT
          (if (null? g$b$6438$tVUFT)
            g$a$6437$tVUFT
            (begin
              ((letrec ((g$f$6439$tVUFT
                          (case-lambda
                            ((g$a$6440$tVUFT)
                             ((case-lambda
                                ((g$n$6441$tVUFT)
                                 (if (null? g$n$6441$tVUFT)
                                   (set-cdr! g$a$6440$tVUFT g$b$6438$tVUFT)
                                   (g$f$6439$tVUFT g$n$6441$tVUFT))))
                              (cdr g$a$6440$tVUFT))))))
                 g$f$6439$tVUFT)
               g$a$6437$tVUFT)
              g$a$6437$tVUFT)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$inexact->exact$6443$tVUFT g$inexact->exact$6463$tVUFT exact)
   (g$exact->inexact$6444$tVUFT g$exact->inexact$6464$tVUFT inexact)
   (g$sign$6445$tVUFT
     g$sign$6465$tVUFT
     (case-lambda
       ((g$n$6451$tVUFT)
        (if (> g$n$6451$tVUFT '0) '1 (if (< g$n$6451$tVUFT '0) '-1 '0)))))
   (g$quotient$6446$tVUFT
     g$quotient$6466$tVUFT
     (case-lambda
       ((g$n1$6452$tVUFT g$n2$6453$tVUFT)
        (begin
          (if (not (integer-valued? g$n1$6452$tVUFT))
            (assertion-violation 'quotient '"not an integer" g$n1$6452$tVUFT)
            (void))
          (if (not (integer-valued? g$n2$6453$tVUFT))
            (assertion-violation 'quotient '"not an integer" g$n2$6453$tVUFT)
            (void))
          (* (g$sign$6445$tVUFT g$n1$6452$tVUFT)
             (g$sign$6445$tVUFT g$n2$6453$tVUFT)
             (g$div$5636$tVUFT (abs g$n1$6452$tVUFT) (abs g$n2$6453$tVUFT)))))))
   (g$remainder$6447$tVUFT
     g$remainder$6467$tVUFT
     (case-lambda
       ((g$n1$6454$tVUFT g$n2$6455$tVUFT)
        (begin
          (if (not (integer-valued? g$n1$6454$tVUFT))
            (assertion-violation 'remainder '"not an integer" g$n1$6454$tVUFT)
            (void))
          (if (not (integer-valued? g$n2$6455$tVUFT))
            (assertion-violation 'remainder '"not an integer" g$n2$6455$tVUFT)
            (void))
          (* (g$sign$6445$tVUFT g$n1$6454$tVUFT)
             (g$mod$5638$tVUFT (abs g$n1$6454$tVUFT) (abs g$n2$6455$tVUFT)))))))
   (g$modulo$6448$tVUFT
     g$modulo$6468$tVUFT
     (case-lambda
       ((g$n1$6456$tVUFT g$n2$6457$tVUFT)
        (begin
          (if (not (integer-valued? g$n1$6456$tVUFT))
            (assertion-violation 'modulo '"not an integer" g$n1$6456$tVUFT)
            (void))
          (if (not (integer-valued? g$n2$6457$tVUFT))
            (assertion-violation 'modulo '"not an integer" g$n2$6457$tVUFT)
            (void))
          (* (g$sign$6445$tVUFT g$n2$6457$tVUFT)
             (g$mod$5638$tVUFT
               (* (g$sign$6445$tVUFT g$n2$6457$tVUFT) g$n1$6456$tVUFT)
               (abs g$n2$6457$tVUFT)))))))
   (g$make-promise$6449$tVUFT
     g$make-promise$6469$tVUFT
     (case-lambda
       ((g$proc$6458$tVUFT)
        ((case-lambda
           ((g$result-ready?$6459$tVUFT g$result$6460$tVUFT)
            (case-lambda
              (()
               (if g$result-ready?$6459$tVUFT
                 g$result$6460$tVUFT
                 ((case-lambda
                    ((g$x$6461$tVUFT)
                     (if g$result-ready?$6459$tVUFT
                       g$result$6460$tVUFT
                       (begin
                         (set! g$result-ready?$6459$tVUFT '#t)
                         (set! g$result$6460$tVUFT g$x$6461$tVUFT)
                         g$result$6460$tVUFT))))
                  (g$proc$6458$tVUFT)))))))
         '#f
         '#f))))
   (g$force$6450$tVUFT
     g$force$6470$tVUFT
     (case-lambda ((g$object$6462$tVUFT) (g$object$6462$tVUFT)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$6471$tVUFT
     g$split$6496$tVUFT
     (case-lambda
       ((g$ls$6475$tVUFT)
        ((letrec ((g$loop$6476$tVUFT
                    (case-lambda
                      ((g$rest$6477$tVUFT g$left$6478$tVUFT g$right$6479$tVUFT)
                       (if (null? g$rest$6477$tVUFT)
                         (cons g$left$6478$tVUFT g$right$6479$tVUFT)
                         (if (null? (cdr g$rest$6477$tVUFT))
                           (cons
                             (cons (car g$rest$6477$tVUFT) g$left$6478$tVUFT)
                             g$right$6479$tVUFT)
                           (g$loop$6476$tVUFT
                             (g$cddr$5656$tVUFT g$rest$6477$tVUFT)
                             (cons (car g$rest$6477$tVUFT) g$left$6478$tVUFT)
                             (cons
                               (g$cadr$5654$tVUFT g$rest$6477$tVUFT)
                               g$right$6479$tVUFT))))))))
           g$loop$6476$tVUFT)
         g$ls$6475$tVUFT
         '()
         '()))))
   (g$reverse-it$6472$tVUFT
     g$reverse-it$6497$tVUFT
     (case-lambda
       ((g$head$6480$tVUFT g$tail$6481$tVUFT)
        (if (null? g$head$6480$tVUFT)
          g$tail$6481$tVUFT
          (g$reverse-it$6472$tVUFT
            (cdr g$head$6480$tVUFT)
            (cons (car g$head$6480$tVUFT) g$tail$6481$tVUFT))))))
   (g$merge$6473$tVUFT
     g$merge$6498$tVUFT
     (case-lambda
       ((g$list-1$6482$tVUFT g$list-2$6483$tVUFT g$precedes?$6484$tVUFT)
        ((letrec ((g$loop$6485$tVUFT
                    (case-lambda
                      ((g$source-1$6486$tVUFT
                         g$source-2$6487$tVUFT
                         g$so-far$6488$tVUFT)
                       (if (null? g$source-1$6486$tVUFT)
                         (g$reverse-it$6472$tVUFT
                           g$so-far$6488$tVUFT
                           g$source-2$6487$tVUFT)
                         (if (null? g$source-2$6487$tVUFT)
                           (g$reverse-it$6472$tVUFT
                             g$so-far$6488$tVUFT
                             g$source-1$6486$tVUFT)
                           ((case-lambda
                              ((g$car-1$6489$tVUFT g$car-2$6490$tVUFT)
                               (if (g$precedes?$6484$tVUFT
                                     g$car-2$6490$tVUFT
                                     g$car-1$6489$tVUFT)
                                 (g$loop$6485$tVUFT
                                   g$source-1$6486$tVUFT
                                   (cdr g$source-2$6487$tVUFT)
                                   (cons
                                     g$car-2$6490$tVUFT
                                     g$so-far$6488$tVUFT))
                                 (g$loop$6485$tVUFT
                                   g$source-2$6487$tVUFT
                                   (cdr g$source-1$6486$tVUFT)
                                   (cons
                                     g$car-1$6489$tVUFT
                                     g$so-far$6488$tVUFT)))))
                            (car g$source-1$6486$tVUFT)
                            (car g$source-2$6487$tVUFT))))))))
           g$loop$6485$tVUFT)
         g$list-1$6482$tVUFT
         g$list-2$6483$tVUFT
         '()))))
   (g$list-sort$6474$tVUFT
     g$list-sort$6499$tVUFT
     (case-lambda
       ((g$precedes?$6491$tVUFT g$ls$6492$tVUFT)
        (if (null? g$ls$6492$tVUFT)
          '()
          ((letrec ((g$helper$6493$tVUFT
                      (case-lambda
                        ((g$piece$6494$tVUFT)
                         (if (null? (cdr g$piece$6494$tVUFT))
                           g$piece$6494$tVUFT
                           ((case-lambda
                              ((g$parts$6495$tVUFT)
                               (g$merge$6473$tVUFT
                                 (g$helper$6493$tVUFT (car g$parts$6495$tVUFT))
                                 (g$helper$6493$tVUFT (cdr g$parts$6495$tVUFT))
                                 g$precedes?$6491$tVUFT)))
                            (g$split$6471$tVUFT g$piece$6494$tVUFT)))))))
             g$helper$6493$tVUFT)
           g$ls$6492$tVUFT))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$6506$tVUFT
     g$string-ci=?$6580$tVUFT
     (case-lambda
       ((g$a$6526$tVUFT g$b$6527$tVUFT . g$rest$6528$tVUFT)
        (begin
          (if (not (string? g$a$6526$tVUFT))
            (assertion-violation 'string-ci=? '"not a string" g$a$6526$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$6529$tVUFT)
               (begin
                 (if (not (string? g$x$6529$tVUFT))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$6529$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$6530$tVUFT)
                     (begin
                       (set! g$a$6526$tVUFT g$x$6529$tVUFT)
                       g$r$6530$tVUFT)))
                  (= (string-ci-compare g$a$6526$tVUFT g$x$6529$tVUFT) '0)))))
            (cons g$b$6527$tVUFT g$rest$6528$tVUFT))))))
   (g$string-ci<?$6507$tVUFT
     g$string-ci<?$6581$tVUFT
     (case-lambda
       ((g$a$6531$tVUFT g$b$6532$tVUFT . g$rest$6533$tVUFT)
        (begin
          (if (not (string? g$a$6531$tVUFT))
            (assertion-violation 'string-ci<? '"not a string" g$a$6531$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$6534$tVUFT)
               (begin
                 (if (not (string? g$x$6534$tVUFT))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$6534$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$6535$tVUFT)
                     (begin
                       (set! g$a$6531$tVUFT g$x$6534$tVUFT)
                       g$r$6535$tVUFT)))
                  (< (string-ci-compare g$a$6531$tVUFT g$x$6534$tVUFT) '0)))))
            (cons g$b$6532$tVUFT g$rest$6533$tVUFT))))))
   (g$string-ci>?$6508$tVUFT
     g$string-ci>?$6582$tVUFT
     (case-lambda
       ((g$a$6536$tVUFT g$b$6537$tVUFT . g$rest$6538$tVUFT)
        (begin
          (if (not (string? g$a$6536$tVUFT))
            (assertion-violation 'string-ci>? '"not a string" g$a$6536$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$6539$tVUFT)
               (begin
                 (if (not (string? g$x$6539$tVUFT))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$6539$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$6540$tVUFT)
                     (begin
                       (set! g$a$6536$tVUFT g$x$6539$tVUFT)
                       g$r$6540$tVUFT)))
                  (> (string-ci-compare g$a$6536$tVUFT g$x$6539$tVUFT) '0)))))
            (cons g$b$6537$tVUFT g$rest$6538$tVUFT))))))
   (g$string-ci<=?$6509$tVUFT
     g$string-ci<=?$6583$tVUFT
     (case-lambda
       ((g$a$6541$tVUFT g$b$6542$tVUFT . g$rest$6543$tVUFT)
        (begin
          (if (not (string? g$a$6541$tVUFT))
            (assertion-violation 'string-ci<=? '"not a string" g$a$6541$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$6544$tVUFT)
               (begin
                 (if (not (string? g$x$6544$tVUFT))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$6544$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$6545$tVUFT)
                     (begin
                       (set! g$a$6541$tVUFT g$x$6544$tVUFT)
                       g$r$6545$tVUFT)))
                  (<= (string-ci-compare g$a$6541$tVUFT g$x$6544$tVUFT) '0)))))
            (cons g$b$6542$tVUFT g$rest$6543$tVUFT))))))
   (g$string-ci>=?$6510$tVUFT
     g$string-ci>=?$6584$tVUFT
     (case-lambda
       ((g$a$6546$tVUFT g$b$6547$tVUFT . g$rest$6548$tVUFT)
        (begin
          (if (not (string? g$a$6546$tVUFT))
            (assertion-violation 'string-ci>=? '"not a string" g$a$6546$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$6549$tVUFT)
               (begin
                 (if (not (string? g$x$6549$tVUFT))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$6549$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$6550$tVUFT)
                     (begin
                       (set! g$a$6546$tVUFT g$x$6549$tVUFT)
                       g$r$6550$tVUFT)))
                  (>= (string-ci-compare g$a$6546$tVUFT g$x$6549$tVUFT) '0)))))
            (cons g$b$6547$tVUFT g$rest$6548$tVUFT))))))
   (g$char-ci=?$6517$tVUFT
     g$char-ci=?$6585$tVUFT
     (case-lambda
       ((g$a$6551$tVUFT g$b$6552$tVUFT . g$rest$6553$tVUFT)
        (begin
          (if (not (g$char?$5642$tVUFT g$a$6551$tVUFT))
            (assertion-violation 'char-ci=? '"not a char" g$a$6551$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$6554$tVUFT)
               (begin
                 (if (not (g$char?$5642$tVUFT g$x$6554$tVUFT))
                   (assertion-violation 'char-ci=? '"not a char" g$x$6554$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$6555$tVUFT)
                     (begin
                       (set! g$a$6551$tVUFT g$x$6554$tVUFT)
                       g$r$6555$tVUFT)))
                  (= (char->integer (char-upcase g$a$6551$tVUFT))
                     (char->integer (char-upcase g$x$6554$tVUFT)))))))
            (cons g$b$6552$tVUFT g$rest$6553$tVUFT))))))
   (g$char-ci<?$6518$tVUFT
     g$char-ci<?$6586$tVUFT
     (case-lambda
       ((g$a$6556$tVUFT g$b$6557$tVUFT . g$rest$6558$tVUFT)
        (begin
          (if (not (g$char?$5642$tVUFT g$a$6556$tVUFT))
            (assertion-violation 'char-ci<? '"not a char" g$a$6556$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$6559$tVUFT)
               (begin
                 (if (not (g$char?$5642$tVUFT g$x$6559$tVUFT))
                   (assertion-violation 'char-ci<? '"not a char" g$x$6559$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$6560$tVUFT)
                     (begin
                       (set! g$a$6556$tVUFT g$x$6559$tVUFT)
                       g$r$6560$tVUFT)))
                  (< (char->integer (char-upcase g$a$6556$tVUFT))
                     (char->integer (char-upcase g$x$6559$tVUFT)))))))
            (cons g$b$6557$tVUFT g$rest$6558$tVUFT))))))
   (g$char-ci>?$6519$tVUFT
     g$char-ci>?$6587$tVUFT
     (case-lambda
       ((g$a$6561$tVUFT g$b$6562$tVUFT . g$rest$6563$tVUFT)
        (begin
          (if (not (g$char?$5642$tVUFT g$a$6561$tVUFT))
            (assertion-violation 'char-ci>? '"not a char" g$a$6561$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$6564$tVUFT)
               (begin
                 (if (not (g$char?$5642$tVUFT g$x$6564$tVUFT))
                   (assertion-violation 'char-ci>? '"not a char" g$x$6564$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$6565$tVUFT)
                     (begin
                       (set! g$a$6561$tVUFT g$x$6564$tVUFT)
                       g$r$6565$tVUFT)))
                  (> (char->integer (char-upcase g$a$6561$tVUFT))
                     (char->integer (char-upcase g$x$6564$tVUFT)))))))
            (cons g$b$6562$tVUFT g$rest$6563$tVUFT))))))
   (g$char-ci<=?$6520$tVUFT
     g$char-ci<=?$6588$tVUFT
     (case-lambda
       ((g$a$6566$tVUFT g$b$6567$tVUFT . g$rest$6568$tVUFT)
        (begin
          (if (not (g$char?$5642$tVUFT g$a$6566$tVUFT))
            (assertion-violation 'char-ci<=? '"not a char" g$a$6566$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$6569$tVUFT)
               (begin
                 (if (not (g$char?$5642$tVUFT g$x$6569$tVUFT))
                   (assertion-violation
                     'char-ci<=?
                     '"not a char"
                     g$x$6569$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$6570$tVUFT)
                     (begin
                       (set! g$a$6566$tVUFT g$x$6569$tVUFT)
                       g$r$6570$tVUFT)))
                  (<= (char->integer (char-upcase g$a$6566$tVUFT))
                      (char->integer (char-upcase g$x$6569$tVUFT)))))))
            (cons g$b$6567$tVUFT g$rest$6568$tVUFT))))))
   (g$char-ci>=?$6521$tVUFT
     g$char-ci>=?$6589$tVUFT
     (case-lambda
       ((g$a$6571$tVUFT g$b$6572$tVUFT . g$rest$6573$tVUFT)
        (begin
          (if (not (g$char?$5642$tVUFT g$a$6571$tVUFT))
            (assertion-violation 'char-ci>=? '"not a char" g$a$6571$tVUFT)
            (void))
          (g$for-all$5155$tVUFT
            (case-lambda
              ((g$x$6574$tVUFT)
               (begin
                 (if (not (g$char?$5642$tVUFT g$x$6574$tVUFT))
                   (assertion-violation
                     'char-ci>=?
                     '"not a char"
                     g$x$6574$tVUFT)
                   (void))
                 ((case-lambda
                    ((g$r$6575$tVUFT)
                     (begin
                       (set! g$a$6571$tVUFT g$x$6574$tVUFT)
                       g$r$6575$tVUFT)))
                  (>= (char->integer (char-upcase g$a$6571$tVUFT))
                      (char->integer (char-upcase g$x$6574$tVUFT)))))))
            (cons g$b$6572$tVUFT g$rest$6573$tVUFT))))))
   (g$string-normalize-nfc$6522$tVUFT
     g$string-normalize-nfc$6590$tVUFT
     (case-lambda
       ((g$s$6576$tVUFT) (string-normalize g$s$6576$tVUFT 'formc))))
   (g$string-normalize-nfd$6523$tVUFT
     g$string-normalize-nfd$6591$tVUFT
     (case-lambda
       ((g$s$6577$tVUFT) (string-normalize g$s$6577$tVUFT 'formd))))
   (g$string-normalize-nfkc$6524$tVUFT
     g$string-normalize-nfkc$6592$tVUFT
     (case-lambda
       ((g$s$6578$tVUFT) (string-normalize g$s$6578$tVUFT 'formkc))))
   (g$string-normalize-nfkd$6525$tVUFT
     g$string-normalize-nfkd$6593$tVUFT
     (case-lambda
       ((g$s$6579$tVUFT) (string-normalize g$s$6579$tVUFT 'formkd)))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$6594$tVUFT
     g$bitwise-if$6625$tVUFT
     (case-lambda
       ((g$ei1$6601$tVUFT g$ei2$6602$tVUFT g$ei3$6603$tVUFT)
        (bitwise-ior
          (bitwise-and g$ei1$6601$tVUFT g$ei2$6602$tVUFT)
          (bitwise-and (bitwise-not g$ei1$6601$tVUFT) g$ei3$6603$tVUFT)))))
   (g$bitwise-copy-bit$6595$tVUFT
     g$bitwise-copy-bit$6626$tVUFT
     (case-lambda
       ((g$ei1$6604$tVUFT g$ei2$6605$tVUFT g$ei3$6606$tVUFT)
        (g$bitwise-if$6594$tVUFT
          (g$bitwise-arithmetic-shift-left$6598$tVUFT '1 g$ei2$6605$tVUFT)
          (g$bitwise-arithmetic-shift-left$6598$tVUFT
            g$ei3$6606$tVUFT
            g$ei2$6605$tVUFT)
          g$ei1$6604$tVUFT))))
   (g$bitwise-bit-field$6596$tVUFT
     g$bitwise-bit-field$6627$tVUFT
     (case-lambda
       ((g$ei1$6607$tVUFT g$ei2$6608$tVUFT g$ei3$6609$tVUFT)
        (g$bitwise-arithmetic-shift-right$6599$tVUFT
          (bitwise-and
            g$ei1$6607$tVUFT
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$6598$tVUFT
                '-1
                g$ei3$6609$tVUFT)))
          g$ei2$6608$tVUFT))))
   (g$bitwise-copy-bit-field$6597$tVUFT
     g$bitwise-copy-bit-field$6628$tVUFT
     (case-lambda
       ((g$to$6610$tVUFT g$start$6611$tVUFT g$end$6612$tVUFT g$from$6613$tVUFT)
        (g$bitwise-if$6594$tVUFT
          (bitwise-and
            (g$bitwise-arithmetic-shift-left$6598$tVUFT '-1 g$start$6611$tVUFT)
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$6598$tVUFT
                '-1
                g$end$6612$tVUFT)))
          (g$bitwise-arithmetic-shift-left$6598$tVUFT
            g$from$6613$tVUFT
            g$start$6611$tVUFT)
          g$to$6610$tVUFT))))
   (g$bitwise-arithmetic-shift-left$6598$tVUFT
     g$bitwise-arithmetic-shift-left$6629$tVUFT
     (case-lambda
       ((g$ei1$6614$tVUFT g$ei2$6615$tVUFT)
        (bitwise-arithmetic-shift g$ei1$6614$tVUFT g$ei2$6615$tVUFT))))
   (g$bitwise-arithmetic-shift-right$6599$tVUFT
     g$bitwise-arithmetic-shift-right$6630$tVUFT
     (case-lambda
       ((g$ei1$6616$tVUFT g$ei2$6617$tVUFT)
        (bitwise-arithmetic-shift g$ei1$6616$tVUFT (- g$ei2$6617$tVUFT)))))
   (g$bitwise-rotate-bit-field$6600$tVUFT
     g$bitwise-rotate-bit-field$6631$tVUFT
     (case-lambda
       ((g$n$6618$tVUFT g$start$6619$tVUFT g$end$6620$tVUFT g$count$6621$tVUFT)
        ((case-lambda
           ((g$width$6622$tVUFT)
            (if (g$positive?$5681$tVUFT g$width$6622$tVUFT)
              ((case-lambda
                 ((g$count$6623$tVUFT g$field$6624$tVUFT)
                  (g$bitwise-copy-bit-field$6597$tVUFT
                    g$n$6618$tVUFT
                    g$start$6619$tVUFT
                    g$end$6620$tVUFT
                    (bitwise-ior
                      (g$bitwise-arithmetic-shift-left$6598$tVUFT
                        g$field$6624$tVUFT
                        g$count$6623$tVUFT)
                      (g$bitwise-arithmetic-shift-right$6599$tVUFT
                        g$field$6624$tVUFT
                        (- g$width$6622$tVUFT g$count$6623$tVUFT))))))
               (g$mod$5638$tVUFT g$count$6621$tVUFT g$width$6622$tVUFT)
               (g$bitwise-bit-field$6596$tVUFT
                 g$n$6618$tVUFT
                 g$start$6619$tVUFT
                 g$end$6620$tVUFT))
              g$n$6618$tVUFT)))
         (- g$end$6620$tVUFT g$start$6619$tVUFT))))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fxdiv$6632$tVUFT
     g$fxdiv$6737$tVUFT
     (case-lambda
       ((g$fx1$6653$tVUFT g$fx2$6654$tVUFT)
        (call-with-values
          (case-lambda (() (fxdiv-and-mod g$fx1$6653$tVUFT g$fx2$6654$tVUFT)))
          (case-lambda
            ((g$n$6657$tVUFT g$d$6658$tVUFT)
             ((case-lambda ((g$d$6659$tVUFT g$n$6660$tVUFT) g$n$6660$tVUFT))
              g$d$6658$tVUFT
              g$n$6657$tVUFT)))))))
   (g$fxdiv0$6633$tVUFT
     g$fxdiv0$6738$tVUFT
     (case-lambda
       ((g$fx1$6661$tVUFT g$fx2$6662$tVUFT)
        (call-with-values
          (case-lambda (() (fxdiv0-and-mod0 g$fx1$6661$tVUFT g$fx2$6662$tVUFT)))
          (case-lambda
            ((g$n$6665$tVUFT g$d$6666$tVUFT)
             ((case-lambda ((g$d$6667$tVUFT g$n$6668$tVUFT) g$n$6668$tVUFT))
              g$d$6666$tVUFT
              g$n$6665$tVUFT)))))))
   (g$fxmod$6634$tVUFT
     g$fxmod$6739$tVUFT
     (case-lambda
       ((g$fx1$6669$tVUFT g$fx2$6670$tVUFT)
        (call-with-values
          (case-lambda (() (fxdiv-and-mod g$fx1$6669$tVUFT g$fx2$6670$tVUFT)))
          (case-lambda
            ((g$n$6673$tVUFT g$d$6674$tVUFT)
             ((case-lambda ((g$d$6675$tVUFT g$n$6676$tVUFT) g$d$6675$tVUFT))
              g$d$6674$tVUFT
              g$n$6673$tVUFT)))))))
   (g$fxmod0$6635$tVUFT
     g$fxmod0$6740$tVUFT
     (case-lambda
       ((g$fx1$6677$tVUFT g$fx2$6678$tVUFT)
        (call-with-values
          (case-lambda (() (fxdiv0-and-mod0 g$fx1$6677$tVUFT g$fx2$6678$tVUFT)))
          (case-lambda
            ((g$n$6681$tVUFT g$d$6682$tVUFT)
             ((case-lambda ((g$d$6683$tVUFT g$n$6684$tVUFT) g$d$6683$tVUFT))
              g$d$6682$tVUFT
              g$n$6681$tVUFT)))))))
   (g$fxpositive?$6636$tVUFT
     g$fxpositive?$6741$tVUFT
     (case-lambda
       ((g$r$6685$tVUFT)
        (begin
          (if (not (g$fixnum?$5648$tVUFT g$r$6685$tVUFT))
            (assertion-violation 'fxpositive? '"not a fixnum" g$r$6685$tVUFT)
            (void))
          (fx<? '0 g$r$6685$tVUFT)))))
   (g$fxnegative?$6637$tVUFT
     g$fxnegative?$6742$tVUFT
     (case-lambda
       ((g$r$6686$tVUFT)
        (begin
          (if (not (g$fixnum?$5648$tVUFT g$r$6686$tVUFT))
            (assertion-violation 'fxnegative? '"not a fixnum" g$r$6686$tVUFT)
            (void))
          (fx>? '0 g$r$6686$tVUFT)))))
   (g$fxzero?$6638$tVUFT
     g$fxzero?$6743$tVUFT
     (case-lambda
       ((g$r$6687$tVUFT)
        (begin
          (if (not (g$fixnum?$5648$tVUFT g$r$6687$tVUFT))
            (assertion-violation 'fxzero? '"not a fixnum" g$r$6687$tVUFT)
            (void))
          (fx=? '0 g$r$6687$tVUFT)))))
   (g$fxeven?$6639$tVUFT
     g$fxeven?$6744$tVUFT
     (case-lambda
       ((g$n$6688$tVUFT)
        (begin
          (if (not (g$fixnum?$5648$tVUFT g$n$6688$tVUFT))
            (assertion-violation 'fxeven? '"not a fixnum" g$n$6688$tVUFT)
            (void))
          (fx=? '0 (g$fxmod$6634$tVUFT g$n$6688$tVUFT '2))))))
   (g$fxodd?$6640$tVUFT
     g$fxodd?$6745$tVUFT
     (case-lambda
       ((g$n$6689$tVUFT)
        (begin
          (if (not (g$fixnum?$5648$tVUFT g$n$6689$tVUFT))
            (assertion-violation 'fxodd? '"not a fixnum" g$n$6689$tVUFT)
            (void))
          (fx=? '1 (g$fxmod$6634$tVUFT g$n$6689$tVUFT '2))))))
   (g$fxmax$6641$tVUFT
     g$fxmax$6746$tVUFT
     (case-lambda
       ((g$a$6690$tVUFT . g$rest$6691$tVUFT)
        (begin
          (if (not (g$fixnum?$5648$tVUFT g$a$6690$tVUFT))
            (assertion-violation 'fxmax '"not a fixnum" g$a$6690$tVUFT)
            (void))
          (g$fold-left$5160$tVUFT
            (case-lambda
              ((g$a$6692$tVUFT g$b$6693$tVUFT)
               (if (fx<? g$a$6692$tVUFT g$b$6693$tVUFT)
                 g$b$6693$tVUFT
                 g$a$6692$tVUFT)))
            g$a$6690$tVUFT
            g$rest$6691$tVUFT)))))
   (g$fxmin$6642$tVUFT
     g$fxmin$6747$tVUFT
     (case-lambda
       ((g$a$6694$tVUFT . g$rest$6695$tVUFT)
        (begin
          (if (not (g$fixnum?$5648$tVUFT g$a$6694$tVUFT))
            (assertion-violation 'fxmin '"not a fixnum" g$a$6694$tVUFT)
            (void))
          (g$fold-left$5160$tVUFT
            (case-lambda
              ((g$a$6696$tVUFT g$b$6697$tVUFT)
               (if (fx>? g$a$6696$tVUFT g$b$6697$tVUFT)
                 g$b$6697$tVUFT
                 g$a$6696$tVUFT)))
            g$a$6694$tVUFT
            g$rest$6695$tVUFT)))))
   (g$fx*/carry$6643$tVUFT
     g$fx*/carry$6748$tVUFT
     (case-lambda
       ((g$fx1$6698$tVUFT g$fx2$6699$tVUFT g$fx3$6700$tVUFT)
        ((case-lambda
           ((g$s$6701$tVUFT g$e$6702$tVUFT)
            (values
              (g$mod0$5639$tVUFT g$s$6701$tVUFT g$e$6702$tVUFT)
              (g$div0$5637$tVUFT g$s$6701$tVUFT g$e$6702$tVUFT))))
         (+ (* g$fx1$6698$tVUFT g$fx2$6699$tVUFT) g$fx3$6700$tVUFT)
         (expt '2 (g$fixnum-width$5650$tVUFT))))))
   (g$fx-/carry$6644$tVUFT
     g$fx-/carry$6749$tVUFT
     (case-lambda
       ((g$fx1$6703$tVUFT g$fx2$6704$tVUFT g$fx3$6705$tVUFT)
        ((case-lambda
           ((g$s$6706$tVUFT g$e$6707$tVUFT)
            (values
              (g$mod0$5639$tVUFT g$s$6706$tVUFT g$e$6707$tVUFT)
              (g$div0$5637$tVUFT g$s$6706$tVUFT g$e$6707$tVUFT))))
         (- g$fx1$6703$tVUFT g$fx2$6704$tVUFT g$fx3$6705$tVUFT)
         (expt '2 (g$fixnum-width$5650$tVUFT))))))
   (g$fx+/carry$6645$tVUFT
     g$fx+/carry$6750$tVUFT
     (case-lambda
       ((g$fx1$6708$tVUFT g$fx2$6709$tVUFT g$fx3$6710$tVUFT)
        ((case-lambda
           ((g$s$6711$tVUFT g$e$6712$tVUFT)
            (values
              (g$mod0$5639$tVUFT g$s$6711$tVUFT g$e$6712$tVUFT)
              (g$div0$5637$tVUFT g$s$6711$tVUFT g$e$6712$tVUFT))))
         (+ g$fx1$6708$tVUFT g$fx2$6709$tVUFT g$fx3$6710$tVUFT)
         (expt '2 (g$fixnum-width$5650$tVUFT))))))
   (g$fxif$6646$tVUFT
     g$fxif$6751$tVUFT
     (case-lambda
       ((g$fx1$6713$tVUFT g$fx2$6714$tVUFT g$fx3$6715$tVUFT)
        (fxior
          (fxand g$fx1$6713$tVUFT g$fx2$6714$tVUFT)
          (fxand (fxnot g$fx1$6713$tVUFT) g$fx3$6715$tVUFT)))))
   (g$fxcopy-bit$6647$tVUFT
     g$fxcopy-bit$6752$tVUFT
     (case-lambda
       ((g$fx1$6716$tVUFT g$fx2$6717$tVUFT g$fx3$6718$tVUFT)
        (g$fxif$6646$tVUFT
          (g$fxarithmetic-shift-left$6650$tVUFT '1 g$fx2$6717$tVUFT)
          (g$fxarithmetic-shift-left$6650$tVUFT
            g$fx3$6718$tVUFT
            g$fx2$6717$tVUFT)
          g$fx1$6716$tVUFT))))
   (g$fxbit-field$6648$tVUFT
     g$fxbit-field$6753$tVUFT
     (case-lambda
       ((g$fx1$6719$tVUFT g$fx2$6720$tVUFT g$fx3$6721$tVUFT)
        (g$fxarithmetic-shift-right$6651$tVUFT
          (fxand
            g$fx1$6719$tVUFT
            (fxnot (g$fxarithmetic-shift-left$6650$tVUFT '-1 g$fx3$6721$tVUFT)))
          g$fx2$6720$tVUFT))))
   (g$fxcopy-bit-field$6649$tVUFT
     g$fxcopy-bit-field$6754$tVUFT
     (case-lambda
       ((g$to$6722$tVUFT g$start$6723$tVUFT g$end$6724$tVUFT g$from$6725$tVUFT)
        (g$fxif$6646$tVUFT
          (fxand
            (g$fxarithmetic-shift-left$6650$tVUFT '-1 g$start$6723$tVUFT)
            (fxnot (g$fxarithmetic-shift-left$6650$tVUFT '-1 g$end$6724$tVUFT)))
          (g$fxarithmetic-shift-left$6650$tVUFT
            g$from$6725$tVUFT
            g$start$6723$tVUFT)
          g$to$6722$tVUFT))))
   (g$fxarithmetic-shift-left$6650$tVUFT
     g$fxarithmetic-shift-left$6755$tVUFT
     (case-lambda
       ((g$fx1$6726$tVUFT g$fx2$6727$tVUFT)
        (fxarithmetic-shift g$fx1$6726$tVUFT g$fx2$6727$tVUFT))))
   (g$fxarithmetic-shift-right$6651$tVUFT
     g$fxarithmetic-shift-right$6756$tVUFT
     (case-lambda
       ((g$fx1$6728$tVUFT g$fx2$6729$tVUFT)
        (fxarithmetic-shift g$fx1$6728$tVUFT (fx- g$fx2$6729$tVUFT)))))
   (g$fxrotate-bit-field$6652$tVUFT
     g$fxrotate-bit-field$6757$tVUFT
     (case-lambda
       ((g$n$6730$tVUFT g$start$6731$tVUFT g$end$6732$tVUFT g$count$6733$tVUFT)
        ((case-lambda
           ((g$width$6734$tVUFT)
            (if (g$fxpositive?$6636$tVUFT g$width$6734$tVUFT)
              ((case-lambda
                 ((g$count$6735$tVUFT g$field$6736$tVUFT)
                  (g$fxcopy-bit-field$6649$tVUFT
                    g$n$6730$tVUFT
                    g$start$6731$tVUFT
                    g$end$6732$tVUFT
                    (fxior
                      (g$fxarithmetic-shift-left$6650$tVUFT
                        g$field$6736$tVUFT
                        g$count$6735$tVUFT)
                      (g$fxarithmetic-shift-right$6651$tVUFT
                        g$field$6736$tVUFT
                        (fx- g$width$6734$tVUFT g$count$6735$tVUFT))))))
               (g$fxmod$6634$tVUFT g$count$6733$tVUFT g$width$6734$tVUFT)
               (g$fxbit-field$6648$tVUFT
                 g$n$6730$tVUFT
                 g$start$6731$tVUFT
                 g$end$6732$tVUFT))
              g$n$6730$tVUFT)))
         (fx- g$end$6732$tVUFT g$start$6731$tVUFT))))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$fldiv-and-mod$6758$tVUFT
     g$fldiv-and-mod$6875$tVUFT
     (case-lambda
       ((g$fl1$6790$tVUFT g$fl2$6791$tVUFT)
        (call-with-values
          (case-lambda (() (div-and-mod g$fl1$6790$tVUFT g$fl2$6791$tVUFT)))
          (case-lambda
            ((g$n$6794$tVUFT g$d$6795$tVUFT)
             ((case-lambda
                ((g$d$6796$tVUFT g$n$6797$tVUFT)
                 (values (real->flonum g$n$6797$tVUFT) g$d$6796$tVUFT)))
              g$d$6795$tVUFT
              g$n$6794$tVUFT)))))))
   (g$fldiv0-and-mod0$6759$tVUFT
     g$fldiv0-and-mod0$6876$tVUFT
     (case-lambda
       ((g$fl1$6798$tVUFT g$fl2$6799$tVUFT)
        (call-with-values
          (case-lambda (() (div0-and-mod0 g$fl1$6798$tVUFT g$fl2$6799$tVUFT)))
          (case-lambda
            ((g$n$6802$tVUFT g$d$6803$tVUFT)
             ((case-lambda
                ((g$d$6804$tVUFT g$n$6805$tVUFT)
                 (values (real->flonum g$n$6805$tVUFT) g$d$6804$tVUFT)))
              g$d$6803$tVUFT
              g$n$6802$tVUFT)))))))
   (g$fldiv$6760$tVUFT
     g$fldiv$6877$tVUFT
     (case-lambda
       ((g$fl1$6806$tVUFT g$fl2$6807$tVUFT)
        (call-with-values
          (case-lambda
            (() (g$fldiv-and-mod$6758$tVUFT g$fl1$6806$tVUFT g$fl2$6807$tVUFT)))
          (case-lambda
            ((g$n$6810$tVUFT g$d$6811$tVUFT)
             ((case-lambda ((g$d$6812$tVUFT g$n$6813$tVUFT) g$n$6813$tVUFT))
              g$d$6811$tVUFT
              g$n$6810$tVUFT)))))))
   (g$fldiv0$6761$tVUFT
     g$fldiv0$6878$tVUFT
     (case-lambda
       ((g$fl1$6814$tVUFT g$fl2$6815$tVUFT)
        (call-with-values
          (case-lambda
            (()
             (g$fldiv0-and-mod0$6759$tVUFT g$fl1$6814$tVUFT g$fl2$6815$tVUFT)))
          (case-lambda
            ((g$n$6818$tVUFT g$d$6819$tVUFT)
             ((case-lambda ((g$d$6820$tVUFT g$n$6821$tVUFT) g$n$6821$tVUFT))
              g$d$6819$tVUFT
              g$n$6818$tVUFT)))))))
   (g$flmod$6762$tVUFT
     g$flmod$6879$tVUFT
     (case-lambda
       ((g$fl1$6822$tVUFT g$fl2$6823$tVUFT)
        (call-with-values
          (case-lambda
            (() (g$fldiv-and-mod$6758$tVUFT g$fl1$6822$tVUFT g$fl2$6823$tVUFT)))
          (case-lambda
            ((g$n$6826$tVUFT g$d$6827$tVUFT)
             ((case-lambda ((g$d$6828$tVUFT g$n$6829$tVUFT) g$d$6828$tVUFT))
              g$d$6827$tVUFT
              g$n$6826$tVUFT)))))))
   (g$flmod0$6763$tVUFT
     g$flmod0$6880$tVUFT
     (case-lambda
       ((g$fl1$6830$tVUFT g$fl2$6831$tVUFT)
        (call-with-values
          (case-lambda
            (()
             (g$fldiv0-and-mod0$6759$tVUFT g$fl1$6830$tVUFT g$fl2$6831$tVUFT)))
          (case-lambda
            ((g$n$6834$tVUFT g$d$6835$tVUFT)
             ((case-lambda ((g$d$6836$tVUFT g$n$6837$tVUFT) g$d$6836$tVUFT))
              g$d$6835$tVUFT
              g$n$6834$tVUFT)))))))
   (g$flinteger?$6764$tVUFT
     g$flinteger?$6881$tVUFT
     (case-lambda
       ((g$fl$6838$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$fl$6838$tVUFT))
            (assertion-violation 'flinteger? '"not a flonum" g$fl$6838$tVUFT)
            (void))
          (fl=? '0.0 (g$flmod$6762$tVUFT g$fl$6838$tVUFT '1.0))))))
   (g$flfinite?$6765$tVUFT
     g$flfinite?$6882$tVUFT
     (case-lambda
       ((g$fl$6839$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$fl$6839$tVUFT))
            (assertion-violation 'flfinite? '"not a flonum" g$fl$6839$tVUFT)
            (void))
          (not (g$flinfinite?$6766$tVUFT g$fl$6839$tVUFT))))))
   (g$flinfinite?$6766$tVUFT
     g$flinfinite?$6883$tVUFT
     (case-lambda
       ((g$fl$6840$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$fl$6840$tVUFT))
            (assertion-violation 'flinfinite? '"not a flonum" g$fl$6840$tVUFT)
            (void))
          (clr-call-internal 'system.double 'isinfinity '() g$fl$6840$tVUFT)))))
   (g$flnan?$6767$tVUFT
     g$flnan?$6884$tVUFT
     (case-lambda
       ((g$fl$6841$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$fl$6841$tVUFT))
            (assertion-violation 'flnan? '"not a flonum" g$fl$6841$tVUFT)
            (void))
          (clr-call-internal 'system.double 'isnan '() g$fl$6841$tVUFT)))))
   (g$flsin$6768$tVUFT
     g$flsin$6885$tVUFT
     (case-lambda
       ((g$fl$6842$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$fl$6842$tVUFT))
            (assertion-violation 'flsin '"not a flonum" g$fl$6842$tVUFT)
            (void))
          (clr-call-internal 'system.math 'sin '() g$fl$6842$tVUFT)))))
   (g$flcos$6769$tVUFT
     g$flcos$6886$tVUFT
     (case-lambda
       ((g$fl$6843$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$fl$6843$tVUFT))
            (assertion-violation 'flcos '"not a flonum" g$fl$6843$tVUFT)
            (void))
          (clr-call-internal 'system.math 'cos '() g$fl$6843$tVUFT)))))
   (g$fltan$6770$tVUFT
     g$fltan$6887$tVUFT
     (case-lambda
       ((g$fl$6844$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$fl$6844$tVUFT))
            (assertion-violation 'fltan '"not a flonum" g$fl$6844$tVUFT)
            (void))
          (clr-call-internal 'system.math 'tan '() g$fl$6844$tVUFT)))))
   (g$flasin$6771$tVUFT
     g$flasin$6888$tVUFT
     (case-lambda
       ((g$fl$6845$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$fl$6845$tVUFT))
            (assertion-violation 'flasin '"not a flonum" g$fl$6845$tVUFT)
            (void))
          (clr-call-internal 'system.math 'asin '() g$fl$6845$tVUFT)))))
   (g$flacos$6772$tVUFT
     g$flacos$6889$tVUFT
     (case-lambda
       ((g$fl$6846$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$fl$6846$tVUFT))
            (assertion-violation 'flacos '"not a flonum" g$fl$6846$tVUFT)
            (void))
          (clr-call-internal 'system.math 'acos '() g$fl$6846$tVUFT)))))
   (g$flatan$6773$tVUFT
     g$flatan$6890$tVUFT
     (case-lambda
       ((g$fl$6847$tVUFT)
        (clr-call-internal 'system.math 'atan '() g$fl$6847$tVUFT))
       ((g$fl1$6848$tVUFT g$fl2$6849$tVUFT)
        (clr-call-internal
          'system.math
          'atan2
          '()
          g$fl1$6848$tVUFT
          g$fl2$6849$tVUFT))))
   (g$fllog$6774$tVUFT
     g$fllog$6891$tVUFT
     (case-lambda
       ((g$fl$6850$tVUFT)
        (clr-call-internal 'system.math 'log '() g$fl$6850$tVUFT))
       ((g$fl1$6851$tVUFT g$fl2$6852$tVUFT)
        (clr-call-internal
          'system.math
          'log
          '()
          g$fl1$6851$tVUFT
          g$fl2$6852$tVUFT))))
   (g$flsqrt$6775$tVUFT
     g$flsqrt$6892$tVUFT
     (case-lambda
       ((g$fl$6853$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$fl$6853$tVUFT))
            (assertion-violation 'flsqrt '"not a flonum" g$fl$6853$tVUFT)
            (void))
          (clr-call-internal 'system.math 'sqrt '() g$fl$6853$tVUFT)))))
   (g$flexp$6776$tVUFT
     g$flexp$6893$tVUFT
     (case-lambda
       ((g$fl$6854$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$fl$6854$tVUFT))
            (assertion-violation 'flexp '"not a flonum" g$fl$6854$tVUFT)
            (void))
          (clr-call-internal 'system.math 'exp '() g$fl$6854$tVUFT)))))
   (g$flexpt$6777$tVUFT
     g$flexpt$6894$tVUFT
     (case-lambda
       ((g$fl$6855$tVUFT g$n$6856$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$fl$6855$tVUFT))
            (assertion-violation 'flexpt '"not a flonum" g$fl$6855$tVUFT)
            (void))
          (clr-call-internal
            'system.math
            'pow
            '()
            g$fl$6855$tVUFT
            g$n$6856$tVUFT)))))
   (g$flceiling$6778$tVUFT
     g$flceiling$6895$tVUFT
     (case-lambda
       ((g$fl$6857$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$fl$6857$tVUFT))
            (assertion-violation 'flceiling '"not a flonum" g$fl$6857$tVUFT)
            (void))
          (clr-call-internal
            'system.math
            '"ceiling(double)"
            '()
            g$fl$6857$tVUFT)))))
   (g$flfloor$6779$tVUFT
     g$flfloor$6896$tVUFT
     (case-lambda
       ((g$fl$6858$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$fl$6858$tVUFT))
            (assertion-violation 'flfloor '"not a flonum" g$fl$6858$tVUFT)
            (void))
          (clr-call-internal
            'system.math
            '"floor(double)"
            '()
            g$fl$6858$tVUFT)))))
   (g$fltruncate$6780$tVUFT
     g$fltruncate$6897$tVUFT
     (case-lambda
       ((g$fl$6859$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$fl$6859$tVUFT))
            (assertion-violation 'fltruncate '"not a flonum" g$fl$6859$tVUFT)
            (void))
          (clr-call-internal
            'system.math
            '"truncate(double)"
            '()
            g$fl$6859$tVUFT)))))
   (g$flround$6781$tVUFT
     g$flround$6898$tVUFT
     (case-lambda
       ((g$fl$6860$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$fl$6860$tVUFT))
            (assertion-violation 'flround '"not a flonum" g$fl$6860$tVUFT)
            (void))
          (clr-call-internal
            'system.math
            '"round(double)"
            '()
            g$fl$6860$tVUFT)))))
   (g$flabs$6782$tVUFT
     g$flabs$6899$tVUFT
     (case-lambda
       ((g$fl$6861$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$fl$6861$tVUFT))
            (assertion-violation 'flabs '"not a flonum" g$fl$6861$tVUFT)
            (void))
          (clr-call-internal
            'system.math
            '"abs(double)"
            '()
            g$fl$6861$tVUFT)))))
   (g$flpositive?$6783$tVUFT
     g$flpositive?$6900$tVUFT
     (case-lambda
       ((g$r$6862$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$r$6862$tVUFT))
            (assertion-violation 'flpositive? '"not a flonum" g$r$6862$tVUFT)
            (void))
          (fl<? '0.0 g$r$6862$tVUFT)))))
   (g$flnegative?$6784$tVUFT
     g$flnegative?$6901$tVUFT
     (case-lambda
       ((g$r$6863$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$r$6863$tVUFT))
            (assertion-violation 'flnegative? '"not a flonum" g$r$6863$tVUFT)
            (void))
          (fl>? '0.0 g$r$6863$tVUFT)))))
   (g$flzero?$6785$tVUFT
     g$flzero?$6902$tVUFT
     (case-lambda
       ((g$r$6864$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$r$6864$tVUFT))
            (assertion-violation 'flzero? '"not a flonum" g$r$6864$tVUFT)
            (void))
          (fl=? '0.0 g$r$6864$tVUFT)))))
   (g$fleven?$6786$tVUFT
     g$fleven?$6903$tVUFT
     (case-lambda
       ((g$n$6865$tVUFT)
        (begin
          (if (not (integer-valued? g$n$6865$tVUFT))
            (assertion-violation 'fleven? '"not integer valued" g$n$6865$tVUFT)
            (void))
          (fl=? '0.0 (g$flmod$6762$tVUFT g$n$6865$tVUFT '2.0))))))
   (g$flodd?$6787$tVUFT
     g$flodd?$6904$tVUFT
     (case-lambda
       ((g$n$6866$tVUFT)
        (begin
          (if (not (integer-valued? g$n$6866$tVUFT))
            (assertion-violation 'flodd? '"not integer valued" g$n$6866$tVUFT)
            (void))
          (fl=? '1.0 (g$flmod$6762$tVUFT g$n$6866$tVUFT '2.0))))))
   (g$flmax$6788$tVUFT
     g$flmax$6905$tVUFT
     (case-lambda
       ((g$a$6867$tVUFT . g$rest$6868$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$a$6867$tVUFT))
            (assertion-violation 'flmax '"not a flonum" g$a$6867$tVUFT)
            (void))
          (g$fold-left$5160$tVUFT
            (case-lambda
              ((g$a$6869$tVUFT g$b$6870$tVUFT)
               (if (fl<? g$a$6869$tVUFT g$b$6870$tVUFT)
                 g$b$6870$tVUFT
                 g$a$6869$tVUFT)))
            g$a$6867$tVUFT
            g$rest$6868$tVUFT)))))
   (g$flmin$6789$tVUFT
     g$flmin$6906$tVUFT
     (case-lambda
       ((g$a$6871$tVUFT . g$rest$6872$tVUFT)
        (begin
          (if (not (g$flonum?$5649$tVUFT g$a$6871$tVUFT))
            (assertion-violation 'flmin '"not a flonum" g$a$6871$tVUFT)
            (void))
          (g$fold-left$5160$tVUFT
            (case-lambda
              ((g$a$6873$tVUFT g$b$6874$tVUFT)
               (if (fl>? g$a$6873$tVUFT g$b$6874$tVUFT)
                 g$b$6874$tVUFT
                 g$a$6873$tVUFT)))
            g$a$6871$tVUFT
            g$rest$6872$tVUFT))))))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$using$6908$tVUFT
     g$using$6928$tVUFT
     (clr-using-internal 'ironscheme.runtime))
   (g$put-datum$6909$tVUFT
     g$put-datum$6929$tVUFT
     (case-lambda
       ((g$p$6917$tVUFT g$datum$6918$tVUFT)
        (write g$datum$6918$tVUFT g$p$6917$tVUFT))))
   (g$get-datum$6910$tVUFT g$get-datum$6930$tVUFT read)
   (g$get-output-string$6911$tVUFT
     g$get-output-string$6931$tVUFT
     (case-lambda
       ((g$port$6919$tVUFT)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$6919$tVUFT))))
   (g$open-output-string$6912$tVUFT
     g$open-output-string$6932$tVUFT
     (case-lambda (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$6913$tVUFT
     g$open-string-output-port$6933$tVUFT
     (case-lambda
       (()
        ((case-lambda
           ((g$p$6920$tVUFT)
            (values
              g$p$6920$tVUFT
              (case-lambda
                (() (g$get-output-string$6911$tVUFT g$p$6920$tVUFT))))))
         (g$open-output-string$6912$tVUFT)))))
   (g$port?$6914$tVUFT
     g$port?$6934$tVUFT
     (case-lambda
       ((g$obj$6921$tVUFT)
        ((case-lambda
           ((g$t$6922$tVUFT)
            (if g$t$6922$tVUFT
              g$t$6922$tVUFT
              (begin '#f (binary-port? g$obj$6921$tVUFT)))))
         (textual-port? g$obj$6921$tVUFT)))))
   (g$call-with-string-output-port$6915$tVUFT
     g$call-with-string-output-port$6935$tVUFT
     (case-lambda
       ((g$proc$6923$tVUFT)
        ((case-lambda
           ((g$p$6924$tVUFT)
            (begin
              (g$call-with-port$6916$tVUFT g$p$6924$tVUFT g$proc$6923$tVUFT)
              (g$get-output-string$6911$tVUFT g$p$6924$tVUFT))))
         (g$open-output-string$6912$tVUFT)))))
   (g$call-with-port$6916$tVUFT
     g$call-with-port$6936$tVUFT
     (case-lambda
       ((g$port$6925$tVUFT g$proc$6926$tVUFT)
        ((case-lambda
           ((g$r$6927$tVUFT)
            (begin (close-port g$port$6925$tVUFT) g$r$6927$tVUFT)))
         (g$proc$6926$tVUFT g$port$6925$tVUFT))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$peek-char$6937$tVUFT
     g$peek-char$6979$tVUFT
     (case-lambda
       (() (g$peek-char$6937$tVUFT (current-input-port)))
       ((g$port$6951$tVUFT) (lookahead-char g$port$6951$tVUFT))))
   (g$read-char$6938$tVUFT
     g$read-char$6980$tVUFT
     (case-lambda
       (() (g$read-char$6938$tVUFT (current-input-port)))
       ((g$port$6952$tVUFT) (get-char g$port$6952$tVUFT))))
   (g$write-char$6939$tVUFT
     g$write-char$6981$tVUFT
     (case-lambda
       ((g$chr$6953$tVUFT)
        (g$write-char$6939$tVUFT g$chr$6953$tVUFT (current-output-port)))
       ((g$chr$6954$tVUFT g$port$6955$tVUFT)
        (put-char g$port$6955$tVUFT g$chr$6954$tVUFT))))
   (g$with-input-from-file$6946$tVUFT
     g$with-input-from-file$6982$tVUFT
     (case-lambda
       ((g$filename$6956$tVUFT g$thunk$6957$tVUFT)
        ((case-lambda
           ((g$current-input-port$6960$tVUFT g$t$6961$tVUFT)
            ((case-lambda
               ((g$swap$6962$tVUFT)
                (dynamic-wind
                  g$swap$6962$tVUFT
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6957$tVUFT)))
                       (case-lambda
                         (() (close-input-port (current-input-port)))))))
                  g$swap$6962$tVUFT)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6963$tVUFT)
                    (begin
                      (g$current-input-port$6960$tVUFT g$t$6961$tVUFT)
                      (set! g$t$6961$tVUFT g$t$6963$tVUFT))))
                 (g$current-input-port$6960$tVUFT)))))))
         current-input-port
         (open-input-file g$filename$6956$tVUFT)))))
   (g$with-output-to-file$6947$tVUFT
     g$with-output-to-file$6983$tVUFT
     (case-lambda
       ((g$filename$6964$tVUFT g$thunk$6965$tVUFT)
        ((case-lambda
           ((g$current-output-port$6968$tVUFT g$t$6969$tVUFT)
            ((case-lambda
               ((g$swap$6970$tVUFT)
                (dynamic-wind
                  g$swap$6970$tVUFT
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6965$tVUFT)))
                       (case-lambda
                         (() (close-output-port (current-output-port)))))))
                  g$swap$6970$tVUFT)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6971$tVUFT)
                    (begin
                      (g$current-output-port$6968$tVUFT g$t$6969$tVUFT)
                      (set! g$t$6969$tVUFT g$t$6971$tVUFT))))
                 (g$current-output-port$6968$tVUFT)))))))
         current-output-port
         (open-output-file g$filename$6964$tVUFT)))))
   (g$call-with-input-file$6948$tVUFT
     g$call-with-input-file$6984$tVUFT
     (case-lambda
       ((g$filename$6972$tVUFT g$proc$6973$tVUFT)
        ((case-lambda
           ((g$p$6974$tVUFT)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6973$tVUFT g$p$6974$tVUFT)))
              (case-lambda (() (close-input-port g$p$6974$tVUFT))))))
         (open-input-file g$filename$6972$tVUFT)))))
   (g$call-with-output-file$6949$tVUFT
     g$call-with-output-file$6985$tVUFT
     (case-lambda
       ((g$filename$6975$tVUFT g$proc$6976$tVUFT)
        ((case-lambda
           ((g$p$6977$tVUFT)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6976$tVUFT g$p$6977$tVUFT)))
              (case-lambda (() (close-output-port g$p$6977$tVUFT))))))
         (open-output-file g$filename$6975$tVUFT)))))
   (g$newline$6950$tVUFT
     g$newline$6986$tVUFT
     (case-lambda
       (() (g$newline$6950$tVUFT (current-output-port)))
       ((g$port$6978$tVUFT) (display '"
" g$port$6978$tVUFT)))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$7888$6987$tVUFT
     g$7888$7096$tVUFT
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$7890$6988$tVUFT g$7890$7097$tVUFT '#f)
   (g$7889$6989$tVUFT
     g$7889$7098$tVUFT
     (make-record-constructor-descriptor
       g$7888$6987$tVUFT
       '#f
       g$7890$6988$tVUFT))
   (g$enum?$6990$tVUFT
     g$enum?$7099$tVUFT
     (record-predicate g$7888$6987$tVUFT))
   (g$make-enum$6991$tVUFT
     g$make-enum$7100$tVUFT
     (record-constructor g$7889$6989$tVUFT))
   (g$enum-value$6992$tVUFT
     g$enum-value$7101$tVUFT
     (record-accessor g$7888$6987$tVUFT '0))
   (g$enum-info$6993$tVUFT
     g$enum-info$7102$tVUFT
     (record-accessor g$7888$6987$tVUFT '1))
   (g$7901$6994$tVUFT
     g$7901$7103$tVUFT
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$7903$6995$tVUFT g$7903$7104$tVUFT '#f)
   (g$7902$6996$tVUFT
     g$7902$7105$tVUFT
     (make-record-constructor-descriptor
       g$7901$6994$tVUFT
       '#f
       g$7903$6995$tVUFT))
   (g$enum-universe?$6997$tVUFT
     g$enum-universe?$7106$tVUFT
     (record-predicate g$7901$6994$tVUFT))
   (g$make-enum-universe$6998$tVUFT
     g$make-enum-universe$7107$tVUFT
     (record-constructor g$7902$6996$tVUFT))
   (g$enum-universe-id$6999$tVUFT
     g$enum-universe-id$7108$tVUFT
     (record-accessor g$7901$6994$tVUFT '0))
   (g$enum-universe-symbols$7000$tVUFT
     g$enum-universe-symbols$7109$tVUFT
     (record-accessor g$7901$6994$tVUFT '1))
   (g$enum-universe-mapping$7001$tVUFT
     g$enum-universe-mapping$7110$tVUFT
     (record-accessor g$7901$6994$tVUFT '2))
   (g$enum-universe-value$7002$tVUFT
     g$enum-universe-value$7111$tVUFT
     (record-accessor g$7901$6994$tVUFT '3))
   (g$enum-type=?$7003$tVUFT
     g$enum-type=?$7112$tVUFT
     (case-lambda
       ((g$enumset1$7025$tVUFT g$enumset2$7026$tVUFT)
        (eq? (g$enum-universe-id$6999$tVUFT
               (g$enum-info$6993$tVUFT g$enumset1$7025$tVUFT))
             (g$enum-universe-id$6999$tVUFT
               (g$enum-info$6993$tVUFT g$enumset2$7026$tVUFT))))))
   (g$get-symbols$7004$tVUFT
     g$get-symbols$7113$tVUFT
     (case-lambda
       ((g$enumset$7027$tVUFT)
        (g$enum-universe-symbols$7000$tVUFT
          (g$enum-info$6993$tVUFT g$enumset$7027$tVUFT)))))
   (g$get-value$7005$tVUFT
     g$get-value$7114$tVUFT
     (case-lambda
       ((g$enumset$7028$tVUFT g$s$7029$tVUFT)
        (g$hashtable-ref$5747$tVUFT
          (g$enum-universe-mapping$7001$tVUFT
            (g$enum-info$6993$tVUFT g$enumset$7028$tVUFT))
          g$s$7029$tVUFT
          '#f))))
   (g$assert-enum$7006$tVUFT
     g$assert-enum$7115$tVUFT
     (case-lambda
       ((g$who$7030$tVUFT g$enumset$7031$tVUFT)
        (if (not (g$enum?$6990$tVUFT g$enumset$7031$tVUFT))
          (assertion-violation
            g$who$7030$tVUFT
            '"not an enumeration"
            g$enumset$7031$tVUFT)
          (void)))))
   (g$make-info$7007$tVUFT
     g$make-info$7116$tVUFT
     (case-lambda
       ((g$symbols$7032$tVUFT)
        ((case-lambda
           ((g$ht$7033$tVUFT)
            ((letrec ((g$f$7034$tVUFT
                        (case-lambda
                          ((g$s$7035$tVUFT g$a$7036$tVUFT g$mask$7037$tVUFT)
                           (if (null? g$s$7035$tVUFT)
                             (values
                               (reverse! g$a$7036$tVUFT)
                               g$ht$7033$tVUFT
                               (- g$mask$7037$tVUFT '1))
                             ((case-lambda
                                ((g$n$7038$tVUFT)
                                 (if (g$symbol?$5645$tVUFT g$n$7038$tVUFT)
                                   (if (g$hashtable-contains?$5750$tVUFT
                                         g$ht$7033$tVUFT
                                         g$n$7038$tVUFT)
                                     (g$f$7034$tVUFT
                                       (cdr g$s$7035$tVUFT)
                                       g$a$7036$tVUFT
                                       g$mask$7037$tVUFT)
                                     (begin
                                       (g$hashtable-set!$5748$tVUFT
                                         g$ht$7033$tVUFT
                                         g$n$7038$tVUFT
                                         g$mask$7037$tVUFT)
                                       (g$f$7034$tVUFT
                                         (cdr g$s$7035$tVUFT)
                                         (cons g$n$7038$tVUFT g$a$7036$tVUFT)
                                         (g$bitwise-arithmetic-shift-left$6629$tVUFT
                                           g$mask$7037$tVUFT
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$7038$tVUFT))))
                              (car g$s$7035$tVUFT)))))))
               g$f$7034$tVUFT)
             g$symbols$7032$tVUFT
             '()
             '1)))
         (g$make-eq-hashtable$5744$tVUFT)))))
   (g$make-name$7008$tVUFT
     g$make-name$7117$tVUFT
     (case-lambda
       ((g$symbols$7039$tVUFT)
        (string->symbol (g$format$7156$tVUFT '"~a" g$symbols$7039$tVUFT)))))
   (g$make-enumeration$7009$tVUFT
     g$make-enumeration$7118$tVUFT
     (case-lambda
       ((g$symbols$7040$tVUFT)
        (call-with-values
          (case-lambda (() (g$make-info$7007$tVUFT g$symbols$7040$tVUFT)))
          (case-lambda
            ((g$s$7044$tVUFT g$mapping$7045$tVUFT g$mask$7046$tVUFT)
             ((case-lambda
                ((g$mask$7047$tVUFT g$mapping$7048$tVUFT g$s$7049$tVUFT)
                 (g$make-enum$6991$tVUFT
                   g$mask$7047$tVUFT
                   (g$make-enum-universe$6998$tVUFT
                     (g$make-name$7008$tVUFT g$s$7049$tVUFT)
                     g$s$7049$tVUFT
                     g$mapping$7048$tVUFT
                     g$mask$7047$tVUFT))))
              g$mask$7046$tVUFT
              g$mapping$7045$tVUFT
              g$s$7044$tVUFT)))))))
   (g$enum-set-universe$7010$tVUFT
     g$enum-set-universe$7119$tVUFT
     (case-lambda
       ((g$enumset$7050$tVUFT)
        (begin
          (g$assert-enum$7006$tVUFT 'enum-set-universe g$enumset$7050$tVUFT)
          ((case-lambda
             ((g$ei$7051$tVUFT)
              (g$make-enum$6991$tVUFT
                (g$enum-universe-value$7002$tVUFT g$ei$7051$tVUFT)
                g$ei$7051$tVUFT)))
           (g$enum-info$6993$tVUFT g$enumset$7050$tVUFT))))))
   (g$enum-set-indexer$7011$tVUFT
     g$enum-set-indexer$7120$tVUFT
     (case-lambda
       ((g$enumset$7052$tVUFT)
        (begin
          (g$assert-enum$7006$tVUFT 'enum-set-indexer g$enumset$7052$tVUFT)
          (case-lambda
            ((g$symbol$7053$tVUFT)
             (begin
               (if (not (g$symbol?$5645$tVUFT g$symbol$7053$tVUFT))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$7053$tVUFT)
                 (void))
               ((case-lambda
                  ((g$v$7054$tVUFT)
                   (if g$v$7054$tVUFT
                     (- (bitwise-length g$v$7054$tVUFT) '1)
                     '#f)))
                (g$get-value$7005$tVUFT
                  g$enumset$7052$tVUFT
                  g$symbol$7053$tVUFT)))))))))
   (g$enum-set-constructor$7012$tVUFT
     g$enum-set-constructor$7121$tVUFT
     (case-lambda
       ((g$enumset$7055$tVUFT)
        (begin
          (g$assert-enum$7006$tVUFT 'enum-set-constructor g$enumset$7055$tVUFT)
          (case-lambda
            ((g$symbols$7056$tVUFT)
             ((letrec ((g$f$7057$tVUFT
                         (case-lambda
                           ((g$v$7058$tVUFT g$s$7059$tVUFT)
                            (if (null? g$s$7059$tVUFT)
                              (g$make-enum$6991$tVUFT
                                g$v$7058$tVUFT
                                (g$enum-info$6993$tVUFT g$enumset$7055$tVUFT))
                              ((case-lambda
                                 ((g$n$7060$tVUFT)
                                  (if (g$symbol?$5645$tVUFT g$n$7060$tVUFT)
                                    ((case-lambda
                                       ((g$v*$7061$tVUFT)
                                        (if g$v*$7061$tVUFT
                                          (g$f$7057$tVUFT
                                            (bitwise-ior
                                              g$v$7058$tVUFT
                                              g$v*$7061$tVUFT)
                                            (cdr g$s$7059$tVUFT))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$7060$tVUFT))))
                                     (g$get-value$7005$tVUFT
                                       g$enumset$7055$tVUFT
                                       g$n$7060$tVUFT))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$7060$tVUFT))))
                               (car g$s$7059$tVUFT)))))))
                g$f$7057$tVUFT)
              '0
              g$symbols$7056$tVUFT)))))))
   (g$enum-set->list$7013$tVUFT
     g$enum-set->list$7122$tVUFT
     (case-lambda
       ((g$enumset$7062$tVUFT)
        (begin
          (g$assert-enum$7006$tVUFT 'enum-set->list g$enumset$7062$tVUFT)
          ((case-lambda
             ((g$value$7063$tVUFT)
              ((letrec ((g$f$7064$tVUFT
                          (case-lambda
                            ((g$s$7065$tVUFT g$l$7066$tVUFT)
                             (if (null? g$s$7065$tVUFT)
                               (reverse! g$l$7066$tVUFT)
                               (if (g$zero?$5683$tVUFT
                                     (bitwise-and
                                       (g$get-value$7005$tVUFT
                                         g$enumset$7062$tVUFT
                                         (car g$s$7065$tVUFT))
                                       g$value$7063$tVUFT))
                                 (g$f$7064$tVUFT
                                   (cdr g$s$7065$tVUFT)
                                   g$l$7066$tVUFT)
                                 (g$f$7064$tVUFT
                                   (cdr g$s$7065$tVUFT)
                                   (cons
                                     (car g$s$7065$tVUFT)
                                     g$l$7066$tVUFT))))))))
                 g$f$7064$tVUFT)
               (g$get-symbols$7004$tVUFT g$enumset$7062$tVUFT)
               '())))
           (g$enum-value$6992$tVUFT g$enumset$7062$tVUFT))))))
   (g$enum-set-member?$7014$tVUFT
     g$enum-set-member?$7123$tVUFT
     (case-lambda
       ((g$symbol$7067$tVUFT g$enumset$7068$tVUFT)
        (begin
          (if (not (g$symbol?$5645$tVUFT g$symbol$7067$tVUFT))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$7067$tVUFT)
            (void))
          (g$assert-enum$7006$tVUFT 'enum-set-member? g$enumset$7068$tVUFT)
          ((case-lambda
             ((g$v$7069$tVUFT)
              (if g$v$7069$tVUFT
                (not (g$zero?$5683$tVUFT
                       (bitwise-and
                         g$v$7069$tVUFT
                         (g$enum-value$6992$tVUFT g$enumset$7068$tVUFT))))
                '#f)))
           (g$get-value$7005$tVUFT
             g$enumset$7068$tVUFT
             g$symbol$7067$tVUFT))))))
   (g$enum-set-subset?$7015$tVUFT
     g$enum-set-subset?$7124$tVUFT
     (case-lambda
       ((g$enumset1$7070$tVUFT g$enumset2$7071$tVUFT)
        (begin
          (g$assert-enum$7006$tVUFT 'enum-set-subset? g$enumset1$7070$tVUFT)
          (g$assert-enum$7006$tVUFT 'enum-set-subset? g$enumset2$7071$tVUFT)
          ((case-lambda
             ((g$v1$7072$tVUFT g$v2$7073$tVUFT)
              (if (g$enum-type=?$7003$tVUFT
                    g$enumset1$7070$tVUFT
                    g$enumset2$7071$tVUFT)
                (= (bitwise-and g$v1$7072$tVUFT g$v2$7073$tVUFT)
                   g$v1$7072$tVUFT)
                ((letrec ((g$f$7074$tVUFT
                            (case-lambda
                              ((g$s$7075$tVUFT)
                               (if (null? g$s$7075$tVUFT)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$7076$tVUFT g$v2*$7077$tVUFT)
                                     (if g$v2*$7077$tVUFT
                                       ((case-lambda
                                          ((g$has1$7078$tVUFT g$has2$7079$tVUFT)
                                           (if (if g$has1$7078$tVUFT
                                                 (begin
                                                   '#f
                                                   (not g$has2$7079$tVUFT))
                                                 '#f)
                                             '#f
                                             (g$f$7074$tVUFT
                                               (cdr g$s$7075$tVUFT)))))
                                        (not (g$zero?$5683$tVUFT
                                               (bitwise-and
                                                 g$v1$7072$tVUFT
                                                 g$v1*$7076$tVUFT)))
                                        (not (g$zero?$5683$tVUFT
                                               (bitwise-and
                                                 g$v2$7073$tVUFT
                                                 g$v2*$7077$tVUFT))))
                                       '#f)))
                                  (g$get-value$7005$tVUFT
                                    g$enumset1$7070$tVUFT
                                    (car g$s$7075$tVUFT))
                                  (g$get-value$7005$tVUFT
                                    g$enumset2$7071$tVUFT
                                    (car g$s$7075$tVUFT))))))))
                   g$f$7074$tVUFT)
                 (g$get-symbols$7004$tVUFT g$enumset1$7070$tVUFT)))))
           (g$enum-value$6992$tVUFT g$enumset1$7070$tVUFT)
           (g$enum-value$6992$tVUFT g$enumset2$7071$tVUFT))))))
   (g$enum-set=?$7016$tVUFT
     g$enum-set=?$7125$tVUFT
     (case-lambda
       ((g$enumset1$7080$tVUFT g$enumset2$7081$tVUFT)
        (begin
          (g$assert-enum$7006$tVUFT 'enum-set=? g$enumset1$7080$tVUFT)
          (g$assert-enum$7006$tVUFT 'enum-set=? g$enumset2$7081$tVUFT)
          (if (g$enum-set-subset?$7015$tVUFT
                g$enumset1$7080$tVUFT
                g$enumset2$7081$tVUFT)
            (begin
              '#f
              (g$enum-set-subset?$7015$tVUFT
                g$enumset2$7081$tVUFT
                g$enumset1$7080$tVUFT))
            '#f)))))
   (g$enum-set-union$7017$tVUFT
     g$enum-set-union$7126$tVUFT
     (case-lambda
       ((g$enumset1$7082$tVUFT g$enumset2$7083$tVUFT)
        (begin
          (g$assert-enum$7006$tVUFT 'enum-set-union g$enumset1$7082$tVUFT)
          (g$assert-enum$7006$tVUFT 'enum-set-union g$enumset2$7083$tVUFT)
          (if (g$enum-type=?$7003$tVUFT
                g$enumset1$7082$tVUFT
                g$enumset2$7083$tVUFT)
            (g$make-enum$6991$tVUFT
              (bitwise-ior
                (g$enum-value$6992$tVUFT g$enumset1$7082$tVUFT)
                (g$enum-value$6992$tVUFT g$enumset2$7083$tVUFT))
              (g$enum-info$6993$tVUFT g$enumset1$7082$tVUFT))
            '#f)))))
   (g$enum-set-intersection$7018$tVUFT
     g$enum-set-intersection$7127$tVUFT
     (case-lambda
       ((g$enumset1$7084$tVUFT g$enumset2$7085$tVUFT)
        (begin
          (g$assert-enum$7006$tVUFT
            'enum-set-intersection
            g$enumset1$7084$tVUFT)
          (g$assert-enum$7006$tVUFT
            'enum-set-intersection
            g$enumset2$7085$tVUFT)
          (if (g$enum-type=?$7003$tVUFT
                g$enumset1$7084$tVUFT
                g$enumset2$7085$tVUFT)
            (g$make-enum$6991$tVUFT
              (bitwise-and
                (g$enum-value$6992$tVUFT g$enumset1$7084$tVUFT)
                (g$enum-value$6992$tVUFT g$enumset2$7085$tVUFT))
              (g$enum-info$6993$tVUFT g$enumset1$7084$tVUFT))
            '#f)))))
   (g$enum-set-difference$7019$tVUFT
     g$enum-set-difference$7128$tVUFT
     (case-lambda
       ((g$enumset1$7086$tVUFT g$enumset2$7087$tVUFT)
        (begin
          (g$assert-enum$7006$tVUFT 'enum-set-difference g$enumset1$7086$tVUFT)
          (g$assert-enum$7006$tVUFT 'enum-set-difference g$enumset2$7087$tVUFT)
          (if (g$enum-type=?$7003$tVUFT
                g$enumset1$7086$tVUFT
                g$enumset2$7087$tVUFT)
            (g$make-enum$6991$tVUFT
              (bitwise-and
                (g$enum-value$6992$tVUFT g$enumset1$7086$tVUFT)
                (bitwise-not (g$enum-value$6992$tVUFT g$enumset2$7087$tVUFT)))
              (g$enum-info$6993$tVUFT g$enumset1$7086$tVUFT))
            '#f)))))
   (g$enum-set-complement$7020$tVUFT
     g$enum-set-complement$7129$tVUFT
     (case-lambda
       ((g$enumset$7088$tVUFT)
        (begin
          (g$assert-enum$7006$tVUFT 'enum-set-complement g$enumset$7088$tVUFT)
          (g$make-enum$6991$tVUFT
            (bitwise-not (g$enum-value$6992$tVUFT g$enumset$7088$tVUFT))
            (g$enum-info$6993$tVUFT g$enumset$7088$tVUFT))))))
   (g$enum-set-projection$7021$tVUFT
     g$enum-set-projection$7130$tVUFT
     (case-lambda
       ((g$enumset1$7089$tVUFT g$enumset2$7090$tVUFT)
        (begin
          (g$assert-enum$7006$tVUFT 'enum-set-projection g$enumset1$7089$tVUFT)
          (g$assert-enum$7006$tVUFT 'enum-set-projection g$enumset2$7090$tVUFT)
          ((case-lambda
             ((g$v1$7091$tVUFT)
              ((letrec ((g$f$7092$tVUFT
                          (case-lambda
                            ((g$s$7093$tVUFT g$v$7094$tVUFT)
                             (if (null? g$s$7093$tVUFT)
                               (g$make-enum$6991$tVUFT
                                 g$v$7094$tVUFT
                                 (g$enum-info$6993$tVUFT g$enumset2$7090$tVUFT))
                               (if (g$zero?$5683$tVUFT
                                     (bitwise-and
                                       g$v1$7091$tVUFT
                                       (g$get-value$7005$tVUFT
                                         g$enumset1$7089$tVUFT
                                         (car g$s$7093$tVUFT))))
                                 (g$f$7092$tVUFT
                                   (cdr g$s$7093$tVUFT)
                                   g$v$7094$tVUFT)
                                 ((case-lambda
                                    ((g$v2$7095$tVUFT)
                                     (if g$v2$7095$tVUFT
                                       (g$f$7092$tVUFT
                                         (cdr g$s$7093$tVUFT)
                                         (bitwise-ior
                                           g$v$7094$tVUFT
                                           g$v2$7095$tVUFT))
                                       (g$f$7092$tVUFT
                                         (cdr g$s$7093$tVUFT)
                                         g$v$7094$tVUFT))))
                                  (g$get-value$7005$tVUFT
                                    g$enumset2$7090$tVUFT
                                    (car g$s$7093$tVUFT)))))))))
                 g$f$7092$tVUFT)
               (g$get-symbols$7004$tVUFT g$enumset1$7089$tVUFT)
               '0)))
           (g$enum-value$6992$tVUFT g$enumset1$7089$tVUFT)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$7022$tVUFT g$p$7023$tVUFT g$wr$7024$tVUFT)
       (g$fprintf$7155$tVUFT
         g$p$7023$tVUFT
         '"#[enum-set ~a]"
         (g$enum-set->list$7013$tVUFT g$x$7022$tVUFT))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$7131$tVUFT
     g$dofmt$7153$tVUFT
     (case-lambda
       ((g$p$7135$tVUFT g$cntl$7136$tVUFT g$args$7137$tVUFT)
        ((case-lambda
           ((g$nmax$7138$tVUFT)
            ((letrec ((g$loop$7139$tVUFT
                        (case-lambda
                          ((g$n$7140$tVUFT g$a$7141$tVUFT)
                           (if (fx<=? g$n$7140$tVUFT g$nmax$7138$tVUFT)
                             ((case-lambda
                                ((g$c$7142$tVUFT)
                                 (if (if (g$char=?$5697$tVUFT
                                           g$c$7142$tVUFT
                                           '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$7140$tVUFT
                                           g$nmax$7138$tVUFT))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$7143$tVUFT)
                                       (if (g$memv$5150$tVUFT
                                             g$t$7143$tVUFT
                                             '(#\a))
                                         (begin
                                           (display
                                             (car g$a$7141$tVUFT)
                                             g$p$7135$tVUFT)
                                           (g$loop$7139$tVUFT
                                             (fx+ g$n$7140$tVUFT '2)
                                             (cdr g$a$7141$tVUFT)))
                                         (if (g$memv$5150$tVUFT
                                               g$t$7143$tVUFT
                                               '(#\s))
                                           (begin
                                             (write
                                               (car g$a$7141$tVUFT)
                                               g$p$7135$tVUFT)
                                             (g$loop$7139$tVUFT
                                               (fx+ g$n$7140$tVUFT '2)
                                               (cdr g$a$7141$tVUFT)))
                                           (if (g$memv$5150$tVUFT
                                                 g$t$7143$tVUFT
                                                 '(#\b))
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$7141$tVUFT)
                                                   '2)
                                                 g$p$7135$tVUFT)
                                               (g$loop$7139$tVUFT
                                                 (fx+ g$n$7140$tVUFT '2)
                                                 (cdr g$a$7141$tVUFT)))
                                             (if (g$memv$5150$tVUFT
                                                   g$t$7143$tVUFT
                                                   '(#\o))
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$7141$tVUFT)
                                                     '8)
                                                   g$p$7135$tVUFT)
                                                 (g$loop$7139$tVUFT
                                                   (fx+ g$n$7140$tVUFT '2)
                                                   (cdr g$a$7141$tVUFT)))
                                               (if (g$memv$5150$tVUFT
                                                     g$t$7143$tVUFT
                                                     '(#\x))
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$7141$tVUFT)
                                                       '16)
                                                     g$p$7135$tVUFT)
                                                   (g$loop$7139$tVUFT
                                                     (fx+ g$n$7140$tVUFT '2)
                                                     (cdr g$a$7141$tVUFT)))
                                                 (if (g$memv$5150$tVUFT
                                                       g$t$7143$tVUFT
                                                       '(#\d))
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$7141$tVUFT)
                                                         '10)
                                                       g$p$7135$tVUFT)
                                                     (g$loop$7139$tVUFT
                                                       (fx+ g$n$7140$tVUFT '2)
                                                       (cdr g$a$7141$tVUFT)))
                                                   (if (g$memv$5150$tVUFT
                                                         g$t$7143$tVUFT
                                                         '(#\~))
                                                     (begin
                                                       (g$write-char$6981$tVUFT
                                                         '#\~
                                                         g$p$7135$tVUFT)
                                                       (g$loop$7139$tVUFT
                                                         (fx+ g$n$7140$tVUFT '2)
                                                         g$a$7141$tVUFT))
                                                     (begin
                                                       (g$write-char$6981$tVUFT
                                                         g$c$7142$tVUFT
                                                         g$p$7135$tVUFT)
                                                       (g$loop$7139$tVUFT
                                                         (fx+ g$n$7140$tVUFT '1)
                                                         g$a$7141$tVUFT)))))))))))
                                    (string-ref
                                      g$cntl$7136$tVUFT
                                      (fx+ g$n$7140$tVUFT '1)))
                                   (begin
                                     (g$write-char$6981$tVUFT
                                       g$c$7142$tVUFT
                                       g$p$7135$tVUFT)
                                     (g$loop$7139$tVUFT
                                       (fx+ g$n$7140$tVUFT '1)
                                       g$a$7141$tVUFT)))))
                              (string-ref g$cntl$7136$tVUFT g$n$7140$tVUFT))
                             (void))))))
               g$loop$7139$tVUFT)
             '0
             g$args$7137$tVUFT)))
         (fx- (string-length g$cntl$7136$tVUFT) '1)))))
   (g$printf$7132$tVUFT
     g$printf$7154$tVUFT
     (case-lambda
       ((g$control$7144$tVUFT . g$args$7145$tVUFT)
        (g$dofmt$7131$tVUFT
          (current-output-port)
          g$control$7144$tVUFT
          g$args$7145$tVUFT))))
   (g$fprintf$7133$tVUFT
     g$fprintf$7155$tVUFT
     (case-lambda
       ((g$p$7146$tVUFT g$control$7147$tVUFT . g$args$7148$tVUFT)
        (g$dofmt$7131$tVUFT
          g$p$7146$tVUFT
          g$control$7147$tVUFT
          g$args$7148$tVUFT))))
   (g$format$7134$tVUFT
     g$format$7156$tVUFT
     (case-lambda
       ((g$control$7149$tVUFT . g$args$7150$tVUFT)
        (call-with-values
          g$open-string-output-port$6933$tVUFT
          (case-lambda
            ((g$p$7151$tVUFT g$c$7152$tVUFT)
             (begin
               (g$dofmt$7131$tVUFT
                 g$p$7151$tVUFT
                 g$control$7149$tVUFT
                 g$args$7150$tVUFT)
               (g$c$7152$tVUFT)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$7157$tVUFT
     g$make-traced-macro$7160$tVUFT
     (case-lambda
       ((g$name$7158$tVUFT g$x$7159$tVUFT)
        (if (g$procedure?$5647$tVUFT g$x$7159$tVUFT)
          (make-traced-procedure
            g$name$7158$tVUFT
            g$x$7159$tVUFT
            g$syntax->datum$12195$tVUFT)
          (if (g$variable-transformer?$12017$tVUFT g$x$7159$tVUFT)
            (g$make-variable-transformer$12015$tVUFT
              (make-traced-procedure
                g$name$7158$tVUFT
                (g$variable-transformer-procedure$12018$tVUFT g$x$7159$tVUFT)
                g$syntax->datum$12195$tVUFT))
            g$x$7159$tVUFT))))))
  (void))

(library-letrec* (ironscheme cps)
  ((g$cps/generate-reference$7161$tVUFT
     g$cps/generate-reference$7426$tVUFT
     (case-lambda
       ((g$variable$7214$tVUFT)
        (g$cps/generate-operand$7165$tVUFT
          (g$make-reference$7191$tVUFT g$variable$7214$tVUFT)))))
   (g$cps/generate-literal$7162$tVUFT
     g$cps/generate-literal$7427$tVUFT
     (case-lambda
       ((g$datum$7215$tVUFT)
        (g$cps/generate-operand$7165$tVUFT
          (g$make-literal$7190$tVUFT g$datum$7215$tVUFT)))))
   (g$cps/generate-abstraction$7163$tVUFT
     g$cps/generate-abstraction$7428$tVUFT
     (case-lambda
       ((g$bvl$7216$tVUFT g$body-generator$7217$tVUFT)
        (g$cps/generate-operand$7165$tVUFT
          (g$make-user-abstraction$7192$tVUFT
            g$bvl$7216$tVUFT
            (case-lambda
              ((g$continuation-variable$7218$tVUFT)
               (g$body-generator$7217$tVUFT
                 (g$variable-continuator$7178$tVUFT
                   g$continuation-variable$7218$tVUFT)))))))))
   (g$cps/generate-abstractions$7164$tVUFT
     g$cps/generate-abstractions$7429$tVUFT
     (case-lambda
       ((g$bvls$7219$tVUFT g$body-generators$7220$tVUFT)
        (g$cps/generate-operand$7165$tVUFT
          (g$make-user-abstractions$7193$tVUFT
            g$bvls$7219$tVUFT
            (g$map$5157$tVUFT
              (case-lambda
                ((g$body-generator$7221$tVUFT)
                 (case-lambda
                   ((g$continuation-variable$7222$tVUFT)
                    (g$body-generator$7221$tVUFT
                      (g$variable-continuator$7178$tVUFT
                        g$continuation-variable$7222$tVUFT))))))
              g$body-generators$7220$tVUFT))))))
   (g$cps/generate-operand$7165$tVUFT
     g$cps/generate-operand$7430$tVUFT
     (case-lambda
       ((g$operand$7223$tVUFT)
        (case-lambda
          ((g$continuator$7224$tVUFT)
           (g$continue-with-operand$7181$tVUFT
             g$continuator$7224$tVUFT
             g$operand$7223$tVUFT))))))
   (g$cps/generate-conditional$7166$tVUFT
     g$cps/generate-conditional$7431$tVUFT
     (case-lambda
       ((g$condition-generator$7225$tVUFT
          g$consequent-generator$7226$tVUFT
          g$alternative-generator$7227$tVUFT)
        (case-lambda
          ((g$continuator$7228$tVUFT)
           (letrec* ((g$if-variable$7229$tVUFT
                       (case-lambda
                         ((g$continuation-variable$7231$tVUFT)
                          ((case-lambda
                             ((g$continuator*$7232$tVUFT)
                              (g$condition-generator$7225$tVUFT
                                (g$conditional-continuator$7177$tVUFT
                                  (case-lambda
                                    ((g$condition$7233$tVUFT)
                                     (g$make-conditional$7200$tVUFT
                                       g$condition$7233$tVUFT
                                       (g$consequent-generator$7226$tVUFT
                                         g$continuator*$7232$tVUFT)
                                       (g$alternative-generator$7227$tVUFT
                                         g$continuator*$7232$tVUFT))))))))
                           (g$variable-continuator$7178$tVUFT
                             g$continuation-variable$7231$tVUFT))))))
             (g$reify-continuation*$7183$tVUFT
               g$continuator$7228$tVUFT
               g$if-variable$7229$tVUFT
               (case-lambda
                 ((g$continuation-abstraction$7230$tVUFT)
                  (g$make-conditional-join$7201$tVUFT
                    g$continuation-abstraction$7230$tVUFT
                    g$if-variable$7229$tVUFT))))))))))
   (g$cps/generate-recursive-bind$7167$tVUFT
     g$cps/generate-recursive-bind$7432$tVUFT
     (case-lambda
       ((g$variables$7234$tVUFT
          g$generators$7235$tVUFT
          g$body-generator$7236$tVUFT)
        (case-lambda
          ((g$continuator$7237$tVUFT)
           (g$make-recursive-bind$7195$tVUFT
             g$variables$7234$tVUFT
             (g$map$5157$tVUFT
               (case-lambda
                 ((g$generator$7238$tVUFT)
                  (case-lambda
                    ((g$continuation-variable$7239$tVUFT)
                     (g$generator$7238$tVUFT
                       (g$variable-continuator$7178$tVUFT
                         g$continuation-variable$7239$tVUFT))))))
               g$generators$7235$tVUFT)
             (g$body-generator$7236$tVUFT
               (g$reified-continuator$7180$tVUFT
                 g$continuator$7237$tVUFT))))))))
   (g$cps/generate-recursive*-bind$7168$tVUFT
     g$cps/generate-recursive*-bind$7433$tVUFT
     (case-lambda
       ((g$variables$7240$tVUFT
          g$generators$7241$tVUFT
          g$body-generator$7242$tVUFT)
        (case-lambda
          ((g$continuator$7243$tVUFT)
           (g$make-recursive*-bind$7196$tVUFT
             g$variables$7240$tVUFT
             (g$map$5157$tVUFT
               (case-lambda
                 ((g$generator$7244$tVUFT)
                  (case-lambda
                    ((g$continuation-variable$7245$tVUFT)
                     (g$generator$7244$tVUFT
                       (g$variable-continuator$7178$tVUFT
                         g$continuation-variable$7245$tVUFT))))))
               g$generators$7241$tVUFT)
             (g$body-generator$7242$tVUFT
               (g$reified-continuator$7180$tVUFT
                 g$continuator$7243$tVUFT))))))))
   (g$cps/generate-recursive*-library-bind$7169$tVUFT
     g$cps/generate-recursive*-library-bind$7434$tVUFT
     (case-lambda
       ((g$name$7246$tVUFT
          g$variables$7247$tVUFT
          g$variables*$7248$tVUFT
          g$generators$7249$tVUFT
          g$body-generator$7250$tVUFT)
        (case-lambda
          ((g$continuator$7251$tVUFT)
           (g$make-recursive*-library-bind$7197$tVUFT
             g$name$7246$tVUFT
             g$variables$7247$tVUFT
             g$variables*$7248$tVUFT
             (g$map$5157$tVUFT
               (case-lambda
                 ((g$generator$7252$tVUFT)
                  (case-lambda
                    ((g$continuation-variable$7253$tVUFT)
                     (g$generator$7252$tVUFT
                       (g$variable-continuator$7178$tVUFT
                         g$continuation-variable$7253$tVUFT))))))
               g$generators$7249$tVUFT)
             (g$body-generator$7250$tVUFT
               (g$reified-continuator$7180$tVUFT
                 g$continuator$7251$tVUFT))))))))
   (g$cps/generate-sequence$7170$tVUFT
     g$cps/generate-sequence$7435$tVUFT
     (case-lambda
       ((g$generators$7254$tVUFT)
        (case-lambda
          ((g$continuator$7255$tVUFT)
           ((letrec ((g$recur$7256$tVUFT
                       (case-lambda
                         ((g$generators$7257$tVUFT)
                          ((car g$generators$7257$tVUFT)
                           ((case-lambda
                              ((g$generators$7258$tVUFT)
                               (if (pair? g$generators$7258$tVUFT)
                                 (g$effect-continuator$7176$tVUFT
                                   (case-lambda
                                     (()
                                      (g$recur$7256$tVUFT
                                        g$generators$7258$tVUFT))))
                                 g$continuator$7255$tVUFT)))
                            (cdr g$generators$7257$tVUFT)))))))
              g$recur$7256$tVUFT)
            g$generators$7254$tVUFT))))))
   (g$cps/generate-assignment$7171$tVUFT
     g$cps/generate-assignment$7436$tVUFT
     (case-lambda
       ((g$location$7259$tVUFT g$expression-generator$7260$tVUFT)
        (case-lambda
          ((g$continuator$7261$tVUFT)
           (g$expression-generator$7260$tVUFT
             (g$operand-continuator$7175$tVUFT
               (case-lambda
                 ((g$operand$7262$tVUFT)
                  (g$make-assignment$7203$tVUFT
                    g$location$7259$tVUFT
                    g$operand$7262$tVUFT
                    (g$continue-with-operand$7181$tVUFT
                      g$continuator$7261$tVUFT
                      '(cps-void))))))))))))
   (g$cps/generate-declaration$7172$tVUFT
     g$cps/generate-declaration$7437$tVUFT
     (case-lambda
       ((g$location$7263$tVUFT g$expression-generator$7264$tVUFT)
        (case-lambda
          ((g$continuator$7265$tVUFT)
           (g$expression-generator$7264$tVUFT
             (g$operand-continuator$7175$tVUFT
               (case-lambda
                 ((g$operand$7266$tVUFT)
                  (g$make-declaration$7204$tVUFT
                    g$location$7263$tVUFT
                    g$operand$7266$tVUFT
                    (g$continue-with-operand$7181$tVUFT
                      g$continuator$7265$tVUFT
                      '(cps-void))))))))))))
   (g$cps/generate-combination$7173$tVUFT
     g$cps/generate-combination$7438$tVUFT
     (case-lambda
       ((g$operator-generator$7267$tVUFT g$operand-generators$7268$tVUFT)
        (g$cps/generate-subproblems$7174$tVUFT
          (g$reverse$5652$tVUFT
            (cons
              g$operator-generator$7267$tVUFT
              g$operand-generators$7268$tVUFT))
          (case-lambda
            ((g$operands$7269$tVUFT g$continuator$7270$tVUFT)
             (g$make-combination$7198$tVUFT
               (car g$operands$7269$tVUFT)
               (g$reify-continuation$7182$tVUFT g$continuator$7270$tVUFT)
               (cdr g$operands$7269$tVUFT))))))))
   (g$cps/generate-subproblems$7174$tVUFT
     g$cps/generate-subproblems$7439$tVUFT
     (case-lambda
       ((g$generators$7271$tVUFT g$combiner$7272$tVUFT)
        (case-lambda
          ((g$continuator$7273$tVUFT)
           ((letrec ((g$recur$7274$tVUFT
                       (case-lambda
                         ((g$generators$7275$tVUFT g$operands$7276$tVUFT)
                          (if (pair? g$generators$7275$tVUFT)
                            ((car g$generators$7275$tVUFT)
                             ((case-lambda
                                ((g$generators$7277$tVUFT)
                                 (g$operand-continuator$7175$tVUFT
                                   (case-lambda
                                     ((g$operand$7278$tVUFT)
                                      (g$recur$7274$tVUFT
                                        g$generators$7277$tVUFT
                                        (cons
                                          g$operand$7278$tVUFT
                                          g$operands$7276$tVUFT)))))))
                              (cdr g$generators$7275$tVUFT)))
                            (g$combiner$7272$tVUFT
                              g$operands$7276$tVUFT
                              g$continuator$7273$tVUFT))))))
              g$recur$7274$tVUFT)
            g$generators$7271$tVUFT
            '()))))))
   (g$operand-continuator$7175$tVUFT
     g$operand-continuator$7440$tVUFT
     (case-lambda
       ((g$generator$7279$tVUFT)
        (case-lambda
          ((g$if-operand$7280$tVUFT
             g$if-effect$7281$tVUFT
             g$if-conditional$7282$tVUFT
             g$if-variable$7283$tVUFT
             g$if-inline$7284$tVUFT)
           (begin
             g$if-effect$7281$tVUFT
             g$if-conditional$7282$tVUFT
             g$if-variable$7283$tVUFT
             g$if-inline$7284$tVUFT
             (g$if-operand$7280$tVUFT g$generator$7279$tVUFT)))))))
   (g$effect-continuator$7176$tVUFT
     g$effect-continuator$7441$tVUFT
     (case-lambda
       ((g$generator$7285$tVUFT)
        (case-lambda
          ((g$if-operand$7286$tVUFT
             g$if-effect$7287$tVUFT
             g$if-conditional$7288$tVUFT
             g$if-variable$7289$tVUFT
             g$if-inline$7290$tVUFT)
           (begin
             g$if-operand$7286$tVUFT
             g$if-conditional$7288$tVUFT
             g$if-variable$7289$tVUFT
             g$if-inline$7290$tVUFT
             (g$if-effect$7287$tVUFT g$generator$7285$tVUFT)))))))
   (g$conditional-continuator$7177$tVUFT
     g$conditional-continuator$7442$tVUFT
     (case-lambda
       ((g$generator$7291$tVUFT)
        (case-lambda
          ((g$if-operand$7292$tVUFT
             g$if-effect$7293$tVUFT
             g$if-conditional$7294$tVUFT
             g$if-variable$7295$tVUFT
             g$if-inline$7296$tVUFT)
           (begin
             g$if-operand$7292$tVUFT
             g$if-effect$7293$tVUFT
             g$if-variable$7295$tVUFT
             g$if-inline$7296$tVUFT
             (g$if-conditional$7294$tVUFT g$generator$7291$tVUFT)))))))
   (g$variable-continuator$7178$tVUFT
     g$variable-continuator$7443$tVUFT
     (case-lambda
       ((g$variable$7297$tVUFT)
        (case-lambda
          ((g$if-operand$7298$tVUFT
             g$if-effect$7299$tVUFT
             g$if-conditional$7300$tVUFT
             g$if-variable$7301$tVUFT
             g$if-inline$7302$tVUFT)
           (begin
             g$if-operand$7298$tVUFT
             g$if-effect$7299$tVUFT
             g$if-variable$7301$tVUFT
             g$if-inline$7302$tVUFT
             (g$if-variable$7301$tVUFT g$variable$7297$tVUFT)))))))
   (g$inline-continuator$7179$tVUFT
     g$inline-continuator$7444$tVUFT
     (case-lambda
       ((g$continuation$7303$tVUFT)
        (case-lambda
          ((g$if-operand$7304$tVUFT
             g$if-effect$7305$tVUFT
             g$if-conditional$7306$tVUFT
             g$if-variable$7307$tVUFT
             g$if-inline$7308$tVUFT)
           (begin
             g$if-operand$7304$tVUFT
             g$if-effect$7305$tVUFT
             g$if-conditional$7306$tVUFT
             g$if-variable$7307$tVUFT
             (g$if-inline$7308$tVUFT g$continuation$7303$tVUFT)))))))
   (g$reified-continuator$7180$tVUFT
     g$reified-continuator$7445$tVUFT
     (case-lambda
       ((g$continuator$7309$tVUFT)
        (case-lambda
          ((g$if-operand$7310$tVUFT
             g$if-effect$7311$tVUFT
             g$if-conditional$7312$tVUFT
             g$if-variable$7313$tVUFT
             g$if-inline$7314$tVUFT)
           (begin
             g$if-operand$7310$tVUFT
             g$if-effect$7311$tVUFT
             g$if-conditional$7312$tVUFT
             (g$reify-continuation*$7183$tVUFT
               g$continuator$7309$tVUFT
               g$if-variable$7313$tVUFT
               g$if-inline$7314$tVUFT)))))))
   (g$continue-with-operand$7181$tVUFT
     g$continue-with-operand$7446$tVUFT
     (case-lambda
       ((g$continuator$7315$tVUFT g$operand$7316$tVUFT)
        (g$continuator$7315$tVUFT
          (case-lambda
            ((g$generator$7317$tVUFT)
             (g$generator$7317$tVUFT g$operand$7316$tVUFT)))
          (case-lambda ((g$generator$7318$tVUFT) (g$generator$7318$tVUFT)))
          (case-lambda
            ((g$generator$7319$tVUFT)
             (g$generator$7319$tVUFT
               (g$make-truth-test$7205$tVUFT g$operand$7316$tVUFT))))
          (case-lambda
            ((g$continuation-variable$7320$tVUFT)
             (g$make-return$7199$tVUFT
               (g$make-reference$7191$tVUFT g$continuation-variable$7320$tVUFT)
               (list g$operand$7316$tVUFT))))
          (case-lambda
            ((g$continuation-abstraction$7321$tVUFT)
             (g$make-return$7199$tVUFT
               g$continuation-abstraction$7321$tVUFT
               (list g$operand$7316$tVUFT))))))))
   (g$reify-continuation$7182$tVUFT
     g$reify-continuation$7447$tVUFT
     (case-lambda
       ((g$continuator$7322$tVUFT)
        (g$continuator$7322$tVUFT
          g$operand-continuation-reifier$7185$tVUFT
          g$effect-continuation-reifier$7187$tVUFT
          g$conditional-continuation-reifier$7189$tVUFT
          (case-lambda
            ((g$variable$7323$tVUFT)
             (g$make-reference$7191$tVUFT g$variable$7323$tVUFT)))
          (case-lambda
            ((g$continuation$7324$tVUFT) g$continuation$7324$tVUFT))))))
   (g$reify-continuation*$7183$tVUFT
     g$reify-continuation*$7448$tVUFT
     (case-lambda
       ((g$continuator$7325$tVUFT
          g$if-variable$7326$tVUFT
          g$if-inline$7327$tVUFT)
        (g$continuator$7325$tVUFT
          (g$operand-continuation-reifier*$7184$tVUFT g$if-inline$7327$tVUFT)
          (g$effect-continuation-reifier*$7186$tVUFT g$if-inline$7327$tVUFT)
          (g$conditional-continuation-reifier*$7188$tVUFT
            g$if-inline$7327$tVUFT)
          g$if-variable$7326$tVUFT
          g$if-inline$7327$tVUFT))))
   (g$operand-continuation-reifier*$7184$tVUFT
     g$operand-continuation-reifier*$7449$tVUFT
     (case-lambda
       ((g$receiver$7328$tVUFT)
        (case-lambda
          ((g$generator$7329$tVUFT)
           (g$receiver$7328$tVUFT
             ((case-lambda
                ((g$variable$7330$tVUFT)
                 (g$make-continuation-abstraction$7194$tVUFT
                   (list g$variable$7330$tVUFT)
                   (g$generator$7329$tVUFT
                     (g$make-reference$7191$tVUFT g$variable$7330$tVUFT)))))
              (g$generate-variable$7206$tVUFT 'V))))))))
   (g$operand-continuation-reifier$7185$tVUFT
     g$operand-continuation-reifier$7450$tVUFT
     (g$operand-continuation-reifier*$7184$tVUFT values))
   (g$effect-continuation-reifier*$7186$tVUFT
     g$effect-continuation-reifier*$7451$tVUFT
     (case-lambda
       ((g$receiver$7331$tVUFT)
        (case-lambda
          ((g$generator$7332$tVUFT)
           (g$receiver$7331$tVUFT
             ((case-lambda
                ((g$variable$7333$tVUFT)
                 (g$make-continuation-abstraction$7194$tVUFT
                   g$variable$7333$tVUFT
                   (g$generator$7332$tVUFT))))
              (g$generate-variable$7206$tVUFT 'IGNORE))))))))
   (g$effect-continuation-reifier$7187$tVUFT
     g$effect-continuation-reifier$7452$tVUFT
     (g$effect-continuation-reifier*$7186$tVUFT values))
   (g$conditional-continuation-reifier*$7188$tVUFT
     g$conditional-continuation-reifier*$7453$tVUFT
     (case-lambda
       ((g$receiver$7334$tVUFT)
        (case-lambda
          ((g$generator$7335$tVUFT)
           (g$receiver$7334$tVUFT
             ((case-lambda
                ((g$variable$7336$tVUFT)
                 (g$make-continuation-abstraction$7194$tVUFT
                   (list g$variable$7336$tVUFT)
                   (g$generator$7335$tVUFT
                     (g$make-truth-test$7205$tVUFT
                       (g$make-reference$7191$tVUFT g$variable$7336$tVUFT))))))
              (g$generate-variable$7206$tVUFT 'T))))))))
   (g$conditional-continuation-reifier$7189$tVUFT
     g$conditional-continuation-reifier$7454$tVUFT
     (g$conditional-continuation-reifier*$7188$tVUFT values))
   (g$make-literal$7190$tVUFT
     g$make-literal$7455$tVUFT
     (case-lambda ((g$datum$7337$tVUFT) (list 'quote g$datum$7337$tVUFT))))
   (g$make-reference$7191$tVUFT
     g$make-reference$7456$tVUFT
     (case-lambda ((g$variable$7338$tVUFT) g$variable$7338$tVUFT)))
   (g$make-user-abstraction$7192$tVUFT
     g$make-user-abstraction$7457$tVUFT
     (case-lambda
       ((g$bvl$7339$tVUFT g$body-constructor$7340$tVUFT)
        ((case-lambda
           ((g$continuation$7341$tVUFT)
            (list
              'case-lambda
              (list
                (cons g$continuation$7341$tVUFT g$bvl$7339$tVUFT)
                (g$body-constructor$7340$tVUFT g$continuation$7341$tVUFT)))))
         (g$generate-variable$7206$tVUFT 'C)))))
   (g$make-user-abstractions$7193$tVUFT
     g$make-user-abstractions$7458$tVUFT
     (case-lambda
       ((g$bvls$7342$tVUFT g$body-constructors$7343$tVUFT)
        ((case-lambda
           ((g$continuation$7344$tVUFT)
            (cons
              'case-lambda
              (g$map$5157$tVUFT
                (case-lambda
                  ((g$bvl$7345$tVUFT g$body-constructor$7346$tVUFT)
                   (list
                     (cons g$continuation$7344$tVUFT g$bvl$7345$tVUFT)
                     (g$body-constructor$7346$tVUFT
                       g$continuation$7344$tVUFT))))
                g$bvls$7342$tVUFT
                g$body-constructors$7343$tVUFT))))
         (g$generate-variable$7206$tVUFT 'C)))))
   (g$make-continuation-abstraction$7194$tVUFT
     g$make-continuation-abstraction$7459$tVUFT
     (case-lambda
       ((g$bvl$7347$tVUFT g$body$7348$tVUFT)
        (list 'case-lambda (list g$bvl$7347$tVUFT g$body$7348$tVUFT)))))
   (g$make-recursive-bind$7195$tVUFT
     g$make-recursive-bind$7460$tVUFT
     (case-lambda
       ((g$variables$7349$tVUFT g$constructors$7350$tVUFT g$body$7351$tVUFT)
        (list
          'letrec
          (g$map$5157$tVUFT
            (case-lambda
              ((g$variable$7352$tVUFT g$constructor$7353$tVUFT)
               (list
                 g$variable$7352$tVUFT
                 (list
                   (g$make-user-abstraction$7192$tVUFT
                     '()
                     g$constructor$7353$tVUFT)
                   (list
                     'letrec-identity
                     (list 'quote g$variable$7352$tVUFT))))))
            g$variables$7349$tVUFT
            g$constructors$7350$tVUFT)
          g$body$7351$tVUFT))))
   (g$make-recursive*-bind$7196$tVUFT
     g$make-recursive*-bind$7461$tVUFT
     (case-lambda
       ((g$variables$7354$tVUFT g$constructors$7355$tVUFT g$body$7356$tVUFT)
        (list
          'letrec*
          (g$map$5157$tVUFT
            (case-lambda
              ((g$variable$7357$tVUFT g$constructor$7358$tVUFT)
               (list
                 g$variable$7357$tVUFT
                 (list
                   (g$make-user-abstraction$7192$tVUFT
                     '()
                     g$constructor$7358$tVUFT)
                   (list
                     'letrec*-identity
                     (list 'quote g$variable$7357$tVUFT))))))
            g$variables$7354$tVUFT
            g$constructors$7355$tVUFT)
          g$body$7356$tVUFT))))
   (g$make-recursive*-library-bind$7197$tVUFT
     g$make-recursive*-library-bind$7462$tVUFT
     (case-lambda
       ((g$name$7359$tVUFT
          g$variables$7360$tVUFT
          g$variables*$7361$tVUFT
          g$constructors$7362$tVUFT
          g$body$7363$tVUFT)
        (list
          'library-letrec*
          g$name$7359$tVUFT
          (g$map$5157$tVUFT
            (case-lambda
              ((g$variable$7364$tVUFT
                 g$variable*$7365$tVUFT
                 g$constructor$7366$tVUFT)
               (list
                 g$variable$7364$tVUFT
                 g$variable*$7365$tVUFT
                 (list
                   (g$make-user-abstraction$7192$tVUFT
                     '()
                     g$constructor$7366$tVUFT)
                   (list
                     'library-letrec*-identity
                     (list 'quote g$variable$7364$tVUFT))))))
            g$variables$7360$tVUFT
            g$variables*$7361$tVUFT
            g$constructors$7362$tVUFT)
          g$body$7363$tVUFT))))
   (g$make-combination$7198$tVUFT
     g$make-combination$7463$tVUFT
     (case-lambda
       ((g$operator$7367$tVUFT g$continuation$7368$tVUFT g$operands$7369$tVUFT)
        (cons
          g$operator$7367$tVUFT
          (cons g$continuation$7368$tVUFT g$operands$7369$tVUFT)))))
   (g$make-return$7199$tVUFT
     g$make-return$7464$tVUFT
     (case-lambda
       ((g$continuation$7370$tVUFT g$operands$7371$tVUFT)
        (cons g$continuation$7370$tVUFT g$operands$7371$tVUFT))))
   (g$make-conditional$7200$tVUFT
     g$make-conditional$7465$tVUFT
     (case-lambda
       ((g$condition$7372$tVUFT
          g$consequent$7373$tVUFT
          g$alternative$7374$tVUFT)
        (list
          'if
          g$condition$7372$tVUFT
          g$consequent$7373$tVUFT
          g$alternative$7374$tVUFT))))
   (g$make-conditional-join$7201$tVUFT
     g$make-conditional-join$7466$tVUFT
     (case-lambda
       ((g$continuation$7375$tVUFT g$constructor$7376$tVUFT)
        ((case-lambda
           ((g$variable$7377$tVUFT)
            (g$make-let$7202$tVUFT
              (list g$variable$7377$tVUFT)
              (list g$continuation$7375$tVUFT)
              (g$constructor$7376$tVUFT g$variable$7377$tVUFT))))
         (g$generate-variable$7206$tVUFT 'J)))))
   (g$make-let$7202$tVUFT
     g$make-let$7467$tVUFT
     (case-lambda
       ((g$variables$7378$tVUFT g$expressions$7379$tVUFT g$body$7380$tVUFT)
        (cons
          (list 'case-lambda (list g$variables$7378$tVUFT g$body$7380$tVUFT))
          g$expressions$7379$tVUFT))))
   (g$make-assignment$7203$tVUFT
     g$make-assignment$7468$tVUFT
     (case-lambda
       ((g$location$7381$tVUFT g$operand$7382$tVUFT g$expression$7383$tVUFT)
        (list
          'begin
          (list 'set! g$location$7381$tVUFT g$operand$7382$tVUFT)
          g$expression$7383$tVUFT))))
   (g$make-declaration$7204$tVUFT
     g$make-declaration$7469$tVUFT
     (case-lambda
       ((g$location$7384$tVUFT g$operand$7385$tVUFT g$expression$7386$tVUFT)
        (list
          'begin
          (list 'define g$location$7384$tVUFT g$operand$7385$tVUFT)
          g$expression$7386$tVUFT))))
   (g$make-truth-test$7205$tVUFT
     g$make-truth-test$7470$tVUFT
     (case-lambda ((g$operand$7387$tVUFT) g$operand$7387$tVUFT)))
   (g$generate-variable$7206$tVUFT
     g$generate-variable$7471$tVUFT
     (case-lambda ((g$name$7388$tVUFT) (gensym g$name$7388$tVUFT))))
   (g$parse$7207$tVUFT
     g$parse$7472$tVUFT
     (case-lambda
       ((g$x$7389$tVUFT)
        (if (pair? g$x$7389$tVUFT)
          ((case-lambda
             ((g$t$7390$tVUFT)
              (if (g$memv$5150$tVUFT g$t$7390$tVUFT '(quote))
                (g$cps/generate-literal$7162$tVUFT
                  (g$cadr$5654$tVUFT g$x$7389$tVUFT))
                (if (g$memv$5150$tVUFT g$t$7390$tVUFT '(if))
                  (g$cps/generate-conditional$7166$tVUFT
                    (g$parse$7207$tVUFT (g$cadr$5654$tVUFT g$x$7389$tVUFT))
                    (g$parse$7207$tVUFT (g$caddr$5660$tVUFT g$x$7389$tVUFT))
                    (g$parse$7207$tVUFT (g$cadddr$5672$tVUFT g$x$7389$tVUFT)))
                  (if (g$memv$5150$tVUFT g$t$7390$tVUFT '(case-lambda))
                    ((case-lambda
                       ((g$d$7391$tVUFT)
                        (g$cps/generate-abstractions$7164$tVUFT
                          (g$map$5157$tVUFT car g$d$7391$tVUFT)
                          (g$map$5157$tVUFT
                            (case-lambda
                              ((g$e$7392$tVUFT)
                               (g$cps/generate-sequence$7170$tVUFT
                                 (g$map$5157$tVUFT
                                   g$parse$7207$tVUFT
                                   (cdr g$e$7392$tVUFT)))))
                            g$d$7391$tVUFT))))
                     (cdr g$x$7389$tVUFT))
                    (if (g$memv$5150$tVUFT g$t$7390$tVUFT '(letrec))
                      ((case-lambda
                         ((g$bindings$7393$tVUFT g$body*$7394$tVUFT)
                          ((case-lambda
                             ((g$lhs*$7395$tVUFT g$rhs*$7396$tVUFT)
                              ((case-lambda
                                 ((g$t*$7397$tVUFT g$tmps$7398$tVUFT)
                                  ((case-lambda
                                     ((g$s*$7399$tVUFT)
                                      (g$parse$7207$tVUFT
                                        (cons
                                          (list
                                            'case-lambda
                                            (list
                                              g$lhs*$7395$tVUFT
                                              (cons
                                                (list
                                                  'case-lambda
                                                  (cons
                                                    g$t*$7397$tVUFT
                                                    (append
                                                      g$s*$7399$tVUFT
                                                      g$body*$7394$tVUFT)))
                                                g$rhs*$7396$tVUFT)))
                                          g$tmps$7398$tVUFT))))
                                   (g$map$5157$tVUFT
                                     (case-lambda
                                       ((g$i$7400$tVUFT g$t$7401$tVUFT)
                                        (list
                                          'set!
                                          g$i$7400$tVUFT
                                          g$t$7401$tVUFT)))
                                     g$lhs*$7395$tVUFT
                                     g$t*$7397$tVUFT))))
                               (g$map$5157$tVUFT gensym g$lhs*$7395$tVUFT)
                               (g$map$5157$tVUFT
                                 (case-lambda ((g$x$7402$tVUFT) 'uninitialized))
                                 g$lhs*$7395$tVUFT))))
                           (g$map$5157$tVUFT car g$bindings$7393$tVUFT)
                           (g$map$5157$tVUFT
                             g$cadr$5654$tVUFT
                             g$bindings$7393$tVUFT))))
                       (g$cadr$5654$tVUFT g$x$7389$tVUFT)
                       (g$cddr$5656$tVUFT g$x$7389$tVUFT))
                      (if (g$memv$5150$tVUFT g$t$7390$tVUFT '(letrec*))
                        ((case-lambda
                           ((g$bindings$7403$tVUFT g$body*$7404$tVUFT)
                            ((case-lambda
                               ((g$lhs*$7405$tVUFT g$rhs*$7406$tVUFT)
                                (g$cps/generate-recursive*-bind$7168$tVUFT
                                  g$lhs*$7405$tVUFT
                                  (g$map$5157$tVUFT
                                    g$parse$7207$tVUFT
                                    g$rhs*$7406$tVUFT)
                                  (g$parse$7207$tVUFT
                                    (cons 'begin g$body*$7404$tVUFT)))))
                             (g$map$5157$tVUFT car g$bindings$7403$tVUFT)
                             (g$map$5157$tVUFT
                               g$cadr$5654$tVUFT
                               g$bindings$7403$tVUFT))))
                         (g$cadr$5654$tVUFT g$x$7389$tVUFT)
                         (g$cddr$5656$tVUFT g$x$7389$tVUFT))
                        (if (g$memv$5150$tVUFT
                              g$t$7390$tVUFT
                              '(library-letrec*))
                          ((case-lambda
                             ((g$name$7407$tVUFT g$x$7408$tVUFT)
                              ((case-lambda
                                 ((g$bindings$7409$tVUFT g$body*$7410$tVUFT)
                                  ((case-lambda
                                     ((g$lhs*$7411$tVUFT
                                        g$lhs**$7412$tVUFT
                                        g$rhs*$7413$tVUFT)
                                      (g$cps/generate-recursive*-library-bind$7169$tVUFT
                                        g$name$7407$tVUFT
                                        g$lhs*$7411$tVUFT
                                        g$lhs**$7412$tVUFT
                                        (g$map$5157$tVUFT
                                          g$parse$7207$tVUFT
                                          g$rhs*$7413$tVUFT)
                                        (g$parse$7207$tVUFT
                                          (cons 'begin g$body*$7410$tVUFT)))))
                                   (g$map$5157$tVUFT car g$bindings$7409$tVUFT)
                                   (g$map$5157$tVUFT
                                     g$cadr$5654$tVUFT
                                     g$bindings$7409$tVUFT)
                                   (g$map$5157$tVUFT
                                     g$caddr$5660$tVUFT
                                     g$bindings$7409$tVUFT))))
                               (g$cadr$5654$tVUFT g$x$7408$tVUFT)
                               (g$cddr$5656$tVUFT g$x$7408$tVUFT))))
                           (g$cadr$5654$tVUFT g$x$7389$tVUFT)
                           (cdr g$x$7389$tVUFT))
                          (if (g$memv$5150$tVUFT g$t$7390$tVUFT '(begin))
                            (g$cps/generate-sequence$7170$tVUFT
                              (g$map$5157$tVUFT
                                g$parse$7207$tVUFT
                                (cdr g$x$7389$tVUFT)))
                            (if (g$memv$5150$tVUFT g$t$7390$tVUFT '(set!))
                              (g$cps/generate-assignment$7171$tVUFT
                                (g$cadr$5654$tVUFT g$x$7389$tVUFT)
                                (g$parse$7207$tVUFT
                                  (g$caddr$5660$tVUFT g$x$7389$tVUFT)))
                              (if (g$memv$5150$tVUFT g$t$7390$tVUFT '(define))
                                (g$cps/generate-declaration$7172$tVUFT
                                  (g$cadr$5654$tVUFT g$x$7389$tVUFT)
                                  (g$parse$7207$tVUFT
                                    (g$caddr$5660$tVUFT g$x$7389$tVUFT)))
                                (if (list? g$x$7389$tVUFT)
                                  (g$cps/generate-combination$7173$tVUFT
                                    (g$parse$7207$tVUFT (car g$x$7389$tVUFT))
                                    (g$map$5157$tVUFT
                                      g$parse$7207$tVUFT
                                      (cdr g$x$7389$tVUFT)))
                                  (error
                                    'rewrite
                                    '"invalid form ~s ~s"
                                    g$x$7389$tVUFT
                                    (list? g$x$7389$tVUFT))))))))))))))
           (car g$x$7389$tVUFT))
          (if (g$symbol?$5645$tVUFT g$x$7389$tVUFT)
            (g$cps/generate-reference$7161$tVUFT g$x$7389$tVUFT)
            (g$cps/generate-literal$7162$tVUFT g$x$7389$tVUFT))))))
   (g$starts-with?$7208$tVUFT
     g$starts-with?$7473$tVUFT
     (case-lambda
       ((g$str$7414$tVUFT g$sub$7415$tVUFT)
        (clr-call-internal
          'system.string
          'startswith
          g$str$7414$tVUFT
          g$sub$7415$tVUFT))))
   (g$ends-with?$7209$tVUFT
     g$ends-with?$7474$tVUFT
     (case-lambda
       ((g$str$7416$tVUFT g$sub$7417$tVUFT)
        (clr-call-internal
          'system.string
          'endswith
          g$str$7416$tVUFT
          g$sub$7417$tVUFT))))
   (g$clr-generator?$7210$tVUFT
     g$clr-generator?$7475$tVUFT
     (case-lambda
       ((g$o$7418$tVUFT)
        (if (g$symbol?$5645$tVUFT g$o$7418$tVUFT)
          (begin
            '#f
            ((case-lambda
               ((g$o$7419$tVUFT)
                (if (g$starts-with?$7208$tVUFT g$o$7419$tVUFT '"clr-")
                  (begin
                    '#f
                    (g$ends-with?$7209$tVUFT g$o$7419$tVUFT '"-internal"))
                  '#f)))
             (symbol->string g$o$7418$tVUFT)))
          '#f))))
   (g$fix-primitives$7211$tVUFT
     g$fix-primitives$7476$tVUFT
     (case-lambda
       ((g$e$7420$tVUFT)
        (if (if (pair? g$e$7420$tVUFT) (begin '#f (list? g$e$7420$tVUFT)) '#f)
          ((case-lambda
             ((g$o$7421$tVUFT)
              (if (eq? g$o$7421$tVUFT 'quote)
                g$e$7420$tVUFT
                (if (begin '#f (g$clr-generator?$7210$tVUFT g$o$7421$tVUFT))
                  (if (pair? (cdr g$e$7420$tVUFT))
                    (list
                      (g$fix-primitives$7211$tVUFT
                        (g$cadr$5654$tVUFT g$e$7420$tVUFT))
                      (cons
                        g$o$7421$tVUFT
                        (g$map$5157$tVUFT
                          g$fix-primitives$7211$tVUFT
                          (g$cddr$5656$tVUFT g$e$7420$tVUFT))))
                    g$e$7420$tVUFT)
                  (cons
                    (g$fix-primitives$7211$tVUFT g$o$7421$tVUFT)
                    (g$map$5157$tVUFT
                      g$fix-primitives$7211$tVUFT
                      (cdr g$e$7420$tVUFT)))))))
           (car g$e$7420$tVUFT))
          g$e$7420$tVUFT))))
   (g$parse->cps$7212$tVUFT
     g$parse->cps$7477$tVUFT
     (case-lambda
       ((g$e$7422$tVUFT g$var$7423$tVUFT)
        ((g$parse$7207$tVUFT g$e$7422$tVUFT)
         (g$variable-continuator$7178$tVUFT g$var$7423$tVUFT)))))
   (g$convert->cps$7213$tVUFT
     g$convert->cps$7478$tVUFT
     (case-lambda
       ((g$e$7424$tVUFT g$var$7425$tVUFT)
        (g$fix-primitives$7211$tVUFT
          (g$parse->cps$7212$tVUFT g$e$7424$tVUFT g$var$7425$tVUFT))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$library-version-mismatch-warning$7479$tVUFT
     g$library-version-mismatch-warning$7580$tVUFT
     (case-lambda
       ((g$name$7554$tVUFT g$depname$7555$tVUFT g$filename$7556$tVUFT)
        (g$fprintf$7155$tVUFT
          (current-error-port)
          '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
          g$name$7554$tVUFT
          g$depname$7555$tVUFT
          g$filename$7556$tVUFT))))
   (g$file-locator-resolution-error$7480$tVUFT
     g$file-locator-resolution-error$7581$tVUFT
     (case-lambda
       ((g$libname$7557$tVUFT g$failed-list$7558$tVUFT)
        (letrec* ((g$8401$7559$tVUFT
                    (make-record-type-descriptor
                      '&library-resolution
                      g$&condition-rtd$6200$tVUFT
                      'g$8404$tVUFT
                      '#f
                      '#f
                      '#((immutable library) (immutable files))))
                  (g$8403$7560$tVUFT '#f)
                  (g$8402$7561$tVUFT
                    (make-record-constructor-descriptor
                      g$8401$7559$tVUFT
                      g$&condition-rcd$6201$tVUFT
                      g$8403$7560$tVUFT))
                  (g$8400$7562$tVUFT (record-predicate g$8401$7559$tVUFT))
                  (g$make-library-resolution-condition$7563$tVUFT
                    (record-constructor g$8402$7561$tVUFT))
                  (g$8398$7564$tVUFT (record-accessor g$8401$7559$tVUFT '0))
                  (g$8399$7565$tVUFT (record-accessor g$8401$7559$tVUFT '1))
                  (g$library-resolution-condition?$7566$tVUFT
                    (condition-predicate g$8401$7559$tVUFT))
                  (g$condition-library$7567$tVUFT
                    (condition-accessor g$8401$7559$tVUFT g$8398$7564$tVUFT))
                  (g$condition-files$7568$tVUFT
                    (condition-accessor g$8401$7559$tVUFT g$8399$7565$tVUFT)))
          (raise
            (condition
              (g$make-error$6232$tVUFT)
              (g$make-who-condition$6266$tVUFT 'expander)
              (g$make-message-condition$6206$tVUFT
                '"cannot locate library in library-path")
              (g$make-library-resolution-condition$7563$tVUFT
                g$libname$7557$tVUFT
                g$failed-list$7558$tVUFT)))))))
   (g$read-library-source-file$7481$tVUFT
     g$read-library-source-file$7582$tVUFT
     (case-lambda
       ((g$file-name$7569$tVUFT)
        (g$with-input-from-file$6982$tVUFT
          g$file-name$7569$tVUFT
          read-annotated))))
   (g$make-parameter$7482$tVUFT
     g$make-parameter$7583$tVUFT
     (case-lambda
       ((g$x$7570$tVUFT)
        (g$make-parameter$7482$tVUFT
          g$x$7570$tVUFT
          (case-lambda ((g$x$7571$tVUFT) g$x$7571$tVUFT))))
       ((g$x$7572$tVUFT g$fender$7573$tVUFT)
        (begin
          (if (not (g$procedure?$5647$tVUFT g$fender$7573$tVUFT))
            (g$assertion-error$12188$tVUFT
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(90,8) - (90,36)"))
            (void))
          ((case-lambda
             ((g$x$7574$tVUFT)
              (case-lambda
                (() g$x$7574$tVUFT)
                ((g$v$7575$tVUFT)
                 (set! g$x$7574$tVUFT (g$fender$7573$tVUFT g$v$7575$tVUFT))))))
           (g$fender$7573$tVUFT g$x$7572$tVUFT))))))
   (g$file-options-constructor$7550$tVUFT
     g$file-options-constructor$7584$tVUFT
     (g$make-parameter$7482$tVUFT '#f))
   (g$file-options-spec$7551$tVUFT
     g$file-options-spec$7585$tVUFT
     (case-lambda
       ((g$x$7576$tVUFT)
        ((g$file-options-constructor$7550$tVUFT) g$x$7576$tVUFT))))
   (g$set-label-binding!$7552$tVUFT
     g$set-label-binding!$7586$tVUFT
     (case-lambda
       ((g$label$7577$tVUFT g$binding$7578$tVUFT)
        (set-symbol-value! g$label$7577$tVUFT g$binding$7578$tVUFT))))
   (g$label-binding$7553$tVUFT
     g$label-binding$7587$tVUFT
     (case-lambda
       ((g$label$7579$tVUFT)
        (if (symbol-bound? g$label$7579$tVUFT)
          (begin '#f (symbol-value g$label$7579$tVUFT))
          '#f)))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$7783$tVUFT
     g$current-primitive-locations$7828$tVUFT
     (g$make-parameter$7583$tVUFT
       (case-lambda ((g$x$7789$tVUFT) '#f))
       (case-lambda
         ((g$p$7790$tVUFT)
          (begin
            (if (not (g$procedure?$5647$tVUFT g$p$7790$tVUFT))
              (g$assertion-error$12188$tVUFT
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$7790$tVUFT)))))
   (g$mutable?$7784$tVUFT
     g$mutable?$7829$tVUFT
     (case-lambda
       ((g$x$7791$tVUFT)
        (letrec* ((g$simple?$7792$tVUFT
                    (case-lambda
                      ((g$x$7793$tVUFT)
                       ((case-lambda
                          ((g$t$7794$tVUFT)
                           (if g$t$7794$tVUFT
                             g$t$7794$tVUFT
                             ((case-lambda
                                ((g$t$7795$tVUFT)
                                 (if g$t$7795$tVUFT
                                   g$t$7795$tVUFT
                                   ((case-lambda
                                      ((g$t$7796$tVUFT)
                                       (if g$t$7796$tVUFT
                                         g$t$7796$tVUFT
                                         ((case-lambda
                                            ((g$t$7797$tVUFT)
                                             (if g$t$7797$tVUFT
                                               g$t$7797$tVUFT
                                               ((case-lambda
                                                  ((g$t$7798$tVUFT)
                                                   (if g$t$7798$tVUFT
                                                     g$t$7798$tVUFT
                                                     ((case-lambda
                                                        ((g$t$7799$tVUFT)
                                                         (if g$t$7799$tVUFT
                                                           g$t$7799$tVUFT
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$7793$tVUFT)))))
                                                      (g$bytevector?$5644$tVUFT
                                                        g$x$7793$tVUFT)))))
                                                (string? g$x$7793$tVUFT)))))
                                          (g$boolean?$5646$tVUFT
                                            g$x$7793$tVUFT)))))
                                    (g$symbol?$5645$tVUFT g$x$7793$tVUFT)))))
                              (g$char?$5642$tVUFT g$x$7793$tVUFT)))))
                        (null? g$x$7793$tVUFT))))))
          (not (g$simple?$7792$tVUFT g$x$7791$tVUFT))))))
   (g$rewriter$7785$tVUFT
     g$rewriter$7830$tVUFT
     (case-lambda
       ((g$quote-hack?$7800$tVUFT)
        (letrec* ((g$f$7801$tVUFT
                    (case-lambda
                      ((g$x$7802$tVUFT)
                       (if (pair? g$x$7802$tVUFT)
                         ((case-lambda
                            ((g$t$7803$tVUFT)
                             (if (g$memv$5150$tVUFT g$t$7803$tVUFT '(quote))
                               (if (if g$quote-hack?$7800$tVUFT
                                     (begin
                                       '#f
                                       (g$mutable?$7784$tVUFT
                                         (g$cadr$5654$tVUFT g$x$7802$tVUFT)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$7804$tVUFT)
                                     (begin
                                       (set-symbol-value!
                                         g$g$7804$tVUFT
                                         (g$cadr$5654$tVUFT g$x$7802$tVUFT))
                                       g$g$7804$tVUFT)))
                                  (gensym))
                                 g$x$7802$tVUFT)
                               (if (g$memv$5150$tVUFT
                                     g$t$7803$tVUFT
                                     '(case-lambda))
                                 (cons
                                   'case-lambda
                                   (g$map$5157$tVUFT
                                     (case-lambda
                                       ((g$x$7805$tVUFT)
                                        (cons
                                          (car g$x$7805$tVUFT)
                                          (g$map$5157$tVUFT
                                            g$f$7801$tVUFT
                                            (cdr g$x$7805$tVUFT)))))
                                     (cdr g$x$7802$tVUFT)))
                                 (if (g$memv$5150$tVUFT
                                       g$t$7803$tVUFT
                                       '(lambda))
                                   (g$cons*$5159$tVUFT
                                     'lambda
                                     (g$cadr$5654$tVUFT g$x$7802$tVUFT)
                                     (g$map$5157$tVUFT
                                       g$f$7801$tVUFT
                                       (g$cddr$5656$tVUFT g$x$7802$tVUFT)))
                                   (if (g$memv$5150$tVUFT
                                         g$t$7803$tVUFT
                                         '(letrec))
                                     ((case-lambda
                                        ((g$bindings$7806$tVUFT
                                           g$body*$7807$tVUFT)
                                         ((case-lambda
                                            ((g$lhs*$7808$tVUFT
                                               g$rhs*$7809$tVUFT)
                                             (g$cons*$5159$tVUFT
                                               'letrec
                                               (g$map$5157$tVUFT
                                                 list
                                                 g$lhs*$7808$tVUFT
                                                 (g$map$5157$tVUFT
                                                   g$f$7801$tVUFT
                                                   g$rhs*$7809$tVUFT))
                                               (g$map$5157$tVUFT
                                                 g$f$7801$tVUFT
                                                 g$body*$7807$tVUFT))))
                                          (g$map$5157$tVUFT
                                            car
                                            g$bindings$7806$tVUFT)
                                          (g$map$5157$tVUFT
                                            g$cadr$5654$tVUFT
                                            g$bindings$7806$tVUFT))))
                                      (g$cadr$5654$tVUFT g$x$7802$tVUFT)
                                      (g$cddr$5656$tVUFT g$x$7802$tVUFT))
                                     (if (g$memv$5150$tVUFT
                                           g$t$7803$tVUFT
                                           '(letrec*))
                                       ((case-lambda
                                          ((g$bindings$7810$tVUFT
                                             g$body*$7811$tVUFT)
                                           ((case-lambda
                                              ((g$lhs*$7812$tVUFT
                                                 g$rhs*$7813$tVUFT)
                                               (g$cons*$5159$tVUFT
                                                 'letrec*
                                                 (g$map$5157$tVUFT
                                                   list
                                                   g$lhs*$7812$tVUFT
                                                   (g$map$5157$tVUFT
                                                     g$f$7801$tVUFT
                                                     g$rhs*$7813$tVUFT))
                                                 (g$map$5157$tVUFT
                                                   g$f$7801$tVUFT
                                                   g$body*$7811$tVUFT))))
                                            (g$map$5157$tVUFT
                                              car
                                              g$bindings$7810$tVUFT)
                                            (g$map$5157$tVUFT
                                              g$cadr$5654$tVUFT
                                              g$bindings$7810$tVUFT))))
                                        (g$cadr$5654$tVUFT g$x$7802$tVUFT)
                                        (g$cddr$5656$tVUFT g$x$7802$tVUFT))
                                       (if (g$memv$5150$tVUFT
                                             g$t$7803$tVUFT
                                             '(library-letrec*))
                                         ((case-lambda
                                            ((g$name$7814$tVUFT g$x$7815$tVUFT)
                                             ((case-lambda
                                                ((g$bindings$7816$tVUFT
                                                   g$body*$7817$tVUFT)
                                                 ((case-lambda
                                                    ((g$lhs*$7818$tVUFT
                                                       g$lhs**$7819$tVUFT
                                                       g$rhs*$7820$tVUFT)
                                                     (g$cons*$5159$tVUFT
                                                       'library-letrec*
                                                       g$name$7814$tVUFT
                                                       (g$map$5157$tVUFT
                                                         list
                                                         g$lhs*$7818$tVUFT
                                                         g$lhs**$7819$tVUFT
                                                         (g$map$5157$tVUFT
                                                           g$f$7801$tVUFT
                                                           g$rhs*$7820$tVUFT))
                                                       (g$map$5157$tVUFT
                                                         g$f$7801$tVUFT
                                                         g$body*$7817$tVUFT))))
                                                  (g$map$5157$tVUFT
                                                    car
                                                    g$bindings$7816$tVUFT)
                                                  (g$map$5157$tVUFT
                                                    g$cadr$5654$tVUFT
                                                    g$bindings$7816$tVUFT)
                                                  (g$map$5157$tVUFT
                                                    g$caddr$5660$tVUFT
                                                    g$bindings$7816$tVUFT))))
                                              (g$cadr$5654$tVUFT g$x$7815$tVUFT)
                                              (g$cddr$5656$tVUFT
                                                g$x$7815$tVUFT))))
                                          (g$cadr$5654$tVUFT g$x$7802$tVUFT)
                                          (cdr g$x$7802$tVUFT))
                                         (if (g$memv$5150$tVUFT
                                               g$t$7803$tVUFT
                                               '(begin))
                                           (cons
                                             'begin
                                             (g$map$5157$tVUFT
                                               g$f$7801$tVUFT
                                               (cdr g$x$7802$tVUFT)))
                                           (if (g$memv$5150$tVUFT
                                                 g$t$7803$tVUFT
                                                 '(set!))
                                             (list
                                               'set!
                                               (g$cadr$5654$tVUFT
                                                 g$x$7802$tVUFT)
                                               (g$f$7801$tVUFT
                                                 (g$caddr$5660$tVUFT
                                                   g$x$7802$tVUFT)))
                                             (if (g$memv$5150$tVUFT
                                                   g$t$7803$tVUFT
                                                   '(primitive))
                                               ((case-lambda
                                                  ((g$op$7821$tVUFT)
                                                   ((case-lambda
                                                      ((g$t$7822$tVUFT)
                                                       (if g$t$7822$tVUFT
                                                         ((case-lambda
                                                            ((g$loc$7823$tVUFT)
                                                             g$loc$7823$tVUFT))
                                                          g$t$7822$tVUFT)
                                                         g$op$7821$tVUFT)))
                                                    ((g$current-primitive-locations$7783$tVUFT)
                                                     g$op$7821$tVUFT))))
                                                (g$cadr$5654$tVUFT
                                                  g$x$7802$tVUFT))
                                               (if (g$memv$5150$tVUFT
                                                     g$t$7803$tVUFT
                                                     '(define))
                                                 g$x$7802$tVUFT
                                                 (if (list? g$x$7802$tVUFT)
                                                   (g$map$5157$tVUFT
                                                     g$f$7801$tVUFT
                                                     g$x$7802$tVUFT)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$7802$tVUFT
                                                     (list?
                                                       g$x$7802$tVUFT)))))))))))))))
                          (car g$x$7802$tVUFT))
                         g$x$7802$tVUFT)))))
          g$f$7801$tVUFT))))
   (g$expanded->core$7786$tVUFT
     g$expanded->core$7831$tVUFT
     (case-lambda
       ((g$x$7824$tVUFT) ((g$rewriter$7785$tVUFT '#t) g$x$7824$tVUFT))))
   (g$compile-core-expr$7787$tVUFT
     g$compile-core-expr$7832$tVUFT
     (case-lambda
       ((g$x$7825$tVUFT) ((g$rewriter$7785$tVUFT '#f) g$x$7825$tVUFT))))
   (g$compile-core-expr-to-port$7788$tVUFT
     g$compile-core-expr-to-port$7833$tVUFT
     (case-lambda
       ((g$x$7826$tVUFT g$p$7827$tVUFT)
        (g$pretty-print$7782$tVUFT
          ((g$rewriter$7785$tVUFT '#f) g$x$7826$tVUFT)
          g$p$7827$tVUFT)))))
  (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$7834$tVUFT
     g$make-collection$8037$tVUFT
     (case-lambda
       (()
        ((case-lambda
           ((g$set$7895$tVUFT)
            (letrec* ((g$set-cons$7896$tVUFT
                        (case-lambda
                          ((g$x$7900$tVUFT g$ls$7901$tVUFT)
                           (if (g$memq$5149$tVUFT
                                 g$x$7900$tVUFT
                                 g$ls$7901$tVUFT)
                             g$ls$7901$tVUFT
                             (cons g$x$7900$tVUFT g$ls$7901$tVUFT))))))
              (case-lambda
                (() g$set$7895$tVUFT)
                ((g$x$7897$tVUFT)
                 (set! g$set$7895$tVUFT
                   (g$set-cons$7896$tVUFT g$x$7897$tVUFT g$set$7895$tVUFT)))
                ((g$x$7898$tVUFT g$del?$7899$tVUFT)
                 (if g$del?$7899$tVUFT
                   (set! g$set$7895$tVUFT
                     (g$remq$5164$tVUFT g$x$7898$tVUFT g$set$7895$tVUFT))
                   (set! g$set$7895$tVUFT
                     (g$set-cons$7896$tVUFT
                       g$x$7898$tVUFT
                       g$set$7895$tVUFT))))))))
         '()))))
   (g$current-library-collection$7835$tVUFT
     g$current-library-collection$8038$tVUFT
     (g$make-parameter$7583$tVUFT
       (g$make-collection$7834$tVUFT)
       (case-lambda
         ((g$x$7902$tVUFT)
          (begin
            (if (not (g$procedure?$5647$tVUFT g$x$7902$tVUFT))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$7902$tVUFT)
              (void))
            g$x$7902$tVUFT)))))
   (g$8671$7836$tVUFT
     g$8671$8039$tVUFT
     (make-record-type-descriptor
       'library
       '#f
       'g$8674$tVUFT
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$8673$7837$tVUFT g$8673$8040$tVUFT '#f)
   (g$8672$7838$tVUFT
     g$8672$8041$tVUFT
     (make-record-constructor-descriptor
       g$8671$7836$tVUFT
       '#f
       g$8673$7837$tVUFT))
   (g$library?$7839$tVUFT
     g$library?$8042$tVUFT
     (record-predicate g$8671$7836$tVUFT))
   (g$make-library$7840$tVUFT
     g$make-library$8043$tVUFT
     (record-constructor g$8672$7838$tVUFT))
   (g$library-id$7841$tVUFT
     g$library-id$8044$tVUFT
     (record-accessor g$8671$7836$tVUFT '0))
   (g$library-name$7842$tVUFT
     g$library-name$8045$tVUFT
     (record-accessor g$8671$7836$tVUFT '1))
   (g$library-version$7843$tVUFT
     g$library-version$8046$tVUFT
     (record-accessor g$8671$7836$tVUFT '2))
   (g$library-imp*$7844$tVUFT
     g$library-imp*$8047$tVUFT
     (record-accessor g$8671$7836$tVUFT '3))
   (g$library-vis*$7845$tVUFT
     g$library-vis*$8048$tVUFT
     (record-accessor g$8671$7836$tVUFT '4))
   (g$library-inv*$7846$tVUFT
     g$library-inv*$8049$tVUFT
     (record-accessor g$8671$7836$tVUFT '5))
   (g$library-subst$7847$tVUFT
     g$library-subst$8050$tVUFT
     (record-accessor g$8671$7836$tVUFT '6))
   (g$library-env$7848$tVUFT
     g$library-env$8051$tVUFT
     (record-accessor g$8671$7836$tVUFT '7))
   (g$library-visit-state$7849$tVUFT
     g$library-visit-state$8052$tVUFT
     (record-accessor g$8671$7836$tVUFT '8))
   (g$library-invoke-state$7850$tVUFT
     g$library-invoke-state$8053$tVUFT
     (record-accessor g$8671$7836$tVUFT '9))
   (g$library-visit-code$7851$tVUFT
     g$library-visit-code$8054$tVUFT
     (record-accessor g$8671$7836$tVUFT '10))
   (g$library-invoke-code$7852$tVUFT
     g$library-invoke-code$8055$tVUFT
     (record-accessor g$8671$7836$tVUFT '11))
   (g$library-visible?$7853$tVUFT
     g$library-visible?$8056$tVUFT
     (record-accessor g$8671$7836$tVUFT '12))
   (g$library-source-file-name$7854$tVUFT
     g$library-source-file-name$8057$tVUFT
     (record-accessor g$8671$7836$tVUFT '13))
   (g$set-library-id!$7855$tVUFT
     g$set-library-id!$8058$tVUFT
     (record-mutator g$8671$7836$tVUFT '0))
   (g$set-library-name!$7856$tVUFT
     g$set-library-name!$8059$tVUFT
     (record-mutator g$8671$7836$tVUFT '1))
   (g$set-library-version!$7857$tVUFT
     g$set-library-version!$8060$tVUFT
     (record-mutator g$8671$7836$tVUFT '2))
   (g$set-library-imp*!$7858$tVUFT
     g$set-library-imp*!$8061$tVUFT
     (record-mutator g$8671$7836$tVUFT '3))
   (g$set-library-vis*!$7859$tVUFT
     g$set-library-vis*!$8062$tVUFT
     (record-mutator g$8671$7836$tVUFT '4))
   (g$set-library-inv*!$7860$tVUFT
     g$set-library-inv*!$8063$tVUFT
     (record-mutator g$8671$7836$tVUFT '5))
   (g$set-library-subst!$7861$tVUFT
     g$set-library-subst!$8064$tVUFT
     (record-mutator g$8671$7836$tVUFT '6))
   (g$set-library-env!$7862$tVUFT
     g$set-library-env!$8065$tVUFT
     (record-mutator g$8671$7836$tVUFT '7))
   (g$set-library-visit-state!$7863$tVUFT
     g$set-library-visit-state!$8066$tVUFT
     (record-mutator g$8671$7836$tVUFT '8))
   (g$set-library-invoke-state!$7864$tVUFT
     g$set-library-invoke-state!$8067$tVUFT
     (record-mutator g$8671$7836$tVUFT '9))
   (g$set-library-visit-code!$7865$tVUFT
     g$set-library-visit-code!$8068$tVUFT
     (record-mutator g$8671$7836$tVUFT '10))
   (g$set-library-invoke-code!$7866$tVUFT
     g$set-library-invoke-code!$8069$tVUFT
     (record-mutator g$8671$7836$tVUFT '11))
   (g$set-library-visible?!$7867$tVUFT
     g$set-library-visible?!$8070$tVUFT
     (record-mutator g$8671$7836$tVUFT '12))
   (g$set-library-source-file-name!$7868$tVUFT
     g$set-library-source-file-name!$8071$tVUFT
     (record-mutator g$8671$7836$tVUFT '13))
   (g$rp$7869$tVUFT
     g$rp$8072$tVUFT
     (make-record-printer
       'library
       (case-lambda
         ((g$x$7903$tVUFT g$p$7904$tVUFT g$wr$7905$tVUFT)
          (begin
            (if (not (g$library?$7839$tVUFT g$x$7903$tVUFT))
              (assertion-violation 'record-type-printer '"not a library")
              (void))
            (display
              (g$format$7156$tVUFT
                '"#<library ~s>"
                (if (null? (g$library-version$7843$tVUFT g$x$7903$tVUFT))
                  (g$library-name$7842$tVUFT g$x$7903$tVUFT)
                  (append
                    (g$library-name$7842$tVUFT g$x$7903$tVUFT)
                    (list (g$library-version$7843$tVUFT g$x$7903$tVUFT)))))
              g$p$7904$tVUFT))))))
   (g$find-dependencies$7870$tVUFT
     g$find-dependencies$8073$tVUFT
     (case-lambda
       ((g$ls$7906$tVUFT)
        (if (null? g$ls$7906$tVUFT)
          '()
          (assertion-violation 'find-dependencies '"cannot handle deps yet")))))
   (g$find-library-by$7871$tVUFT
     g$find-library-by$8074$tVUFT
     (case-lambda
       ((g$pred$7907$tVUFT)
        ((letrec ((g$f$7908$tVUFT
                    (case-lambda
                      ((g$ls$7909$tVUFT)
                       (if (null? g$ls$7909$tVUFT)
                         '#f
                         (if (g$pred$7907$tVUFT (car g$ls$7909$tVUFT))
                           (car g$ls$7909$tVUFT)
                           (g$f$7908$tVUFT (cdr g$ls$7909$tVUFT))))))))
           g$f$7908$tVUFT)
         ((g$current-library-collection$7835$tVUFT))))))
   (g$library-path$7872$tVUFT
     g$library-path$8075$tVUFT
     (g$make-parameter$7583$tVUFT
       '(".")
       (case-lambda
         ((g$x$7910$tVUFT)
          (if (if (list? g$x$7910$tVUFT)
                (begin '#f (g$for-all$5155$tVUFT string? g$x$7910$tVUFT))
                '#f)
            (g$map$5157$tVUFT
              (case-lambda ((g$x$7911$tVUFT) g$x$7911$tVUFT))
              g$x$7910$tVUFT)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$7910$tVUFT))))))
   (g$library-extensions$7873$tVUFT
     g$library-extensions$8076$tVUFT
     (g$make-parameter$7583$tVUFT
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$7912$tVUFT)
          (if (if (list? g$x$7912$tVUFT)
                (begin '#f (g$for-all$5155$tVUFT string? g$x$7912$tVUFT))
                '#f)
            (g$map$5157$tVUFT
              (case-lambda ((g$x$7913$tVUFT) g$x$7913$tVUFT))
              g$x$7912$tVUFT)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$7912$tVUFT))))))
   (g$library-name->file-name$7874$tVUFT
     g$library-name->file-name$8077$tVUFT
     (case-lambda
       ((g$x$7914$tVUFT)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$6933$tVUFT)))
          (case-lambda
            ((g$p$7917$tVUFT g$extract$7918$tVUFT)
             ((case-lambda
                ((g$extract$7919$tVUFT g$p$7920$tVUFT)
                 (letrec* ((g$display-hex$7921$tVUFT
                             (case-lambda
                               ((g$n$7929$tVUFT)
                                (if (<= '0 g$n$7929$tVUFT '9)
                                  (display g$n$7929$tVUFT g$p$7920$tVUFT)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$7929$tVUFT '10)))
                                    g$p$7920$tVUFT))))))
                   (begin
                     ((letrec ((g$f$7922$tVUFT
                                 (case-lambda
                                   ((g$ls$7923$tVUFT)
                                    (if (not (null? g$ls$7923$tVUFT))
                                      (begin
                                        (display '"/" g$p$7920$tVUFT)
                                        (g$for-each$5158$tVUFT
                                          (case-lambda
                                            ((g$c$7924$tVUFT)
                                             (if ((case-lambda
                                                    ((g$t$7925$tVUFT)
                                                     (if g$t$7925$tVUFT
                                                       g$t$7925$tVUFT
                                                       ((case-lambda
                                                          ((g$t$7926$tVUFT)
                                                           (if g$t$7926$tVUFT
                                                             g$t$7926$tVUFT
                                                             ((case-lambda
                                                                ((g$t$7927$tVUFT)
                                                                 (if g$t$7927$tVUFT
                                                                   g$t$7927$tVUFT
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$5150$tVUFT
                                                                       g$c$7924$tVUFT
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$5700$tVUFT
                                                                '#\0
                                                                g$c$7924$tVUFT
                                                                '#\9)))))
                                                        (g$char<=?$5700$tVUFT
                                                          '#\A
                                                          g$c$7924$tVUFT
                                                          '#\Z)))))
                                                  (g$char<=?$5700$tVUFT
                                                    '#\a
                                                    g$c$7924$tVUFT
                                                    '#\z))
                                               (display
                                                 g$c$7924$tVUFT
                                                 g$p$7920$tVUFT)
                                               (begin
                                                 (display '"%" g$p$7920$tVUFT)
                                                 ((case-lambda
                                                    ((g$n$7928$tVUFT)
                                                     (begin
                                                       (g$display-hex$7921$tVUFT
                                                         (g$quotient$6466$tVUFT
                                                           g$n$7928$tVUFT
                                                           '16))
                                                       (g$display-hex$7921$tVUFT
                                                         (g$remainder$6467$tVUFT
                                                           g$n$7928$tVUFT
                                                           '16)))))
                                                  (char->integer
                                                    g$c$7924$tVUFT))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$7923$tVUFT))))
                                        (g$f$7922$tVUFT (cdr g$ls$7923$tVUFT)))
                                      (void))))))
                        g$f$7922$tVUFT)
                      g$x$7914$tVUFT)
                     (g$extract$7919$tVUFT)))))
              g$extract$7918$tVUFT
              g$p$7917$tVUFT)))))))
   (g$file-locator$7875$tVUFT
     g$file-locator$8078$tVUFT
     (g$make-parameter$7583$tVUFT
       (case-lambda
         ((g$x$7930$tVUFT)
          ((case-lambda
             ((g$str$7931$tVUFT)
              ((letrec ((g$f$7932$tVUFT
                          (case-lambda
                            ((g$ls$7933$tVUFT
                               g$exts$7934$tVUFT
                               g$failed-list$7935$tVUFT)
                             (if (null? g$ls$7933$tVUFT)
                               (g$file-locator-resolution-error$7581$tVUFT
                                 g$x$7930$tVUFT
                                 (g$reverse$5652$tVUFT
                                   g$failed-list$7935$tVUFT))
                               (if (null? g$exts$7934$tVUFT)
                                 (g$f$7932$tVUFT
                                   (cdr g$ls$7933$tVUFT)
                                   (g$library-extensions$7873$tVUFT)
                                   g$failed-list$7935$tVUFT)
                                 ((case-lambda
                                    ((g$name$7936$tVUFT)
                                     (if (g$file-exists?$5762$tVUFT
                                           g$name$7936$tVUFT)
                                       g$name$7936$tVUFT
                                       (g$f$7932$tVUFT
                                         g$ls$7933$tVUFT
                                         (cdr g$exts$7934$tVUFT)
                                         (cons
                                           g$name$7936$tVUFT
                                           g$failed-list$7935$tVUFT)))))
                                  (string-append
                                    (car g$ls$7933$tVUFT)
                                    g$str$7931$tVUFT
                                    (car g$exts$7934$tVUFT)))))))))
                 g$f$7932$tVUFT)
               (g$library-path$7872$tVUFT)
               (g$library-extensions$7873$tVUFT)
               '())))
           (g$library-name->file-name$7874$tVUFT g$x$7930$tVUFT))))
       (case-lambda
         ((g$f$7937$tVUFT)
          (if (g$procedure?$5647$tVUFT g$f$7937$tVUFT)
            g$f$7937$tVUFT
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$7937$tVUFT))))))
   (g$serialize-all$7876$tVUFT
     g$serialize-all$8079$tVUFT
     (case-lambda
       ((g$serialize$7938$tVUFT g$compile$7939$tVUFT)
        (letrec* ((g$library-desc$7940$tVUFT
                    (case-lambda
                      ((g$x$7942$tVUFT)
                       (list
                         (g$library-id$7841$tVUFT g$x$7942$tVUFT)
                         (g$library-name$7842$tVUFT g$x$7942$tVUFT))))))
          (g$for-each$5158$tVUFT
            (case-lambda
              ((g$x$7941$tVUFT)
               (if (g$library-source-file-name$7854$tVUFT g$x$7941$tVUFT)
                 (g$serialize$7938$tVUFT
                   (g$library-source-file-name$7854$tVUFT g$x$7941$tVUFT)
                   (list
                     (g$library-id$7841$tVUFT g$x$7941$tVUFT)
                     (g$library-name$7842$tVUFT g$x$7941$tVUFT)
                     (g$library-version$7843$tVUFT g$x$7941$tVUFT)
                     (g$map$5157$tVUFT
                       g$library-desc$7940$tVUFT
                       (g$library-imp*$7844$tVUFT g$x$7941$tVUFT))
                     (g$map$5157$tVUFT
                       g$library-desc$7940$tVUFT
                       (g$library-vis*$7845$tVUFT g$x$7941$tVUFT))
                     (g$map$5157$tVUFT
                       g$library-desc$7940$tVUFT
                       (g$library-inv*$7846$tVUFT g$x$7941$tVUFT))
                     (g$library-subst$7847$tVUFT g$x$7941$tVUFT)
                     (g$library-env$7848$tVUFT g$x$7941$tVUFT)
                     (g$compile$7939$tVUFT
                       (g$library-visit-code$7851$tVUFT g$x$7941$tVUFT))
                     (g$compile$7939$tVUFT
                       (g$library-invoke-code$7852$tVUFT g$x$7941$tVUFT))
                     (g$library-visible?$7853$tVUFT g$x$7941$tVUFT)))
                 (void))))
            ((g$current-library-collection$7835$tVUFT)))))))
   (g$current-precompiled-library-loader$7877$tVUFT
     g$current-precompiled-library-loader$8080$tVUFT
     (g$make-parameter$7583$tVUFT
       (case-lambda ((g$filename$7943$tVUFT g$sk$7944$tVUFT) '#f))))
   (g$try-load-from-file$7878$tVUFT
     g$try-load-from-file$8081$tVUFT
     (case-lambda
       ((g$filename$7945$tVUFT)
        ((g$current-precompiled-library-loader$7877$tVUFT)
         g$filename$7945$tVUFT
         (case-lambda
           ((g$id$7946$tVUFT
              g$name$7947$tVUFT
              g$ver$7948$tVUFT
              g$imp*$7949$tVUFT
              g$vis*$7950$tVUFT
              g$inv*$7951$tVUFT
              g$exp-subst$7952$tVUFT
              g$exp-env$7953$tVUFT
              g$visit-proc$7954$tVUFT
              g$invoke-proc$7955$tVUFT
              g$visible?$7956$tVUFT)
            ((letrec ((g$f$7957$tVUFT
                        (case-lambda
                          ((g$deps$7958$tVUFT)
                           (if (null? g$deps$7958$tVUFT)
                             (begin
                               (g$install-library$7888$tVUFT
                                 g$id$7946$tVUFT
                                 g$name$7947$tVUFT
                                 g$ver$7948$tVUFT
                                 g$imp*$7949$tVUFT
                                 g$vis*$7950$tVUFT
                                 g$inv*$7951$tVUFT
                                 g$exp-subst$7952$tVUFT
                                 g$exp-env$7953$tVUFT
                                 g$visit-proc$7954$tVUFT
                                 g$invoke-proc$7955$tVUFT
                                 '#f
                                 '#f
                                 g$visible?$7956$tVUFT
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$7959$tVUFT)
                                 ((case-lambda
                                    ((g$label$7960$tVUFT g$dname$7961$tVUFT)
                                     ((case-lambda
                                        ((g$l$7962$tVUFT)
                                         (if (if (g$library?$7839$tVUFT
                                                   g$l$7962$tVUFT)
                                               (begin
                                                 '#f
                                                 (eq? g$label$7960$tVUFT
                                                      (g$library-id$7841$tVUFT
                                                        g$l$7962$tVUFT)))
                                               '#f)
                                           (g$f$7957$tVUFT
                                             (cdr g$deps$7958$tVUFT))
                                           (begin
                                             (g$library-version-mismatch-warning$7580$tVUFT
                                               g$name$7947$tVUFT
                                               g$dname$7961$tVUFT
                                               g$filename$7945$tVUFT)
                                             '#f))))
                                      (g$find-library-by-name$7883$tVUFT
                                        g$dname$7961$tVUFT))))
                                  (car g$d$7959$tVUFT)
                                  (g$cadr$5654$tVUFT g$d$7959$tVUFT))))
                              (car g$deps$7958$tVUFT)))))))
               g$f$7957$tVUFT)
             (append g$imp*$7949$tVUFT g$vis*$7950$tVUFT g$inv*$7951$tVUFT)))
           (g$others$7963$tVUFT '#f))))))
   (g$library-loader$7879$tVUFT
     g$library-loader$8082$tVUFT
     (g$make-parameter$7583$tVUFT
       (case-lambda
         ((g$x$7964$tVUFT)
          ((case-lambda
             ((g$file-name$7965$tVUFT)
              (if (not g$file-name$7965$tVUFT)
                (assertion-violation '#f '"cannot file library" g$x$7964$tVUFT)
                ((case-lambda
                   ((g$t$7966$tVUFT)
                    (if g$t$7966$tVUFT
                      g$t$7966$tVUFT
                      (begin
                        '#f
                        ((g$current-library-expander$7880$tVUFT)
                         (g$read-library-source-file$7582$tVUFT
                           g$file-name$7965$tVUFT)
                         g$file-name$7965$tVUFT
                         (case-lambda
                           ((g$name$7967$tVUFT)
                            (if (not (equal? g$name$7967$tVUFT g$x$7964$tVUFT))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (() (g$open-string-output-port$6933$tVUFT)))
                                  (case-lambda
                                    ((g$p$7970$tVUFT g$e$7971$tVUFT)
                                     ((case-lambda
                                        ((g$e$7972$tVUFT g$p$7973$tVUFT)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$7973$tVUFT)
                                           (write g$x$7964$tVUFT g$p$7973$tVUFT)
                                           (display '" in file " g$p$7973$tVUFT)
                                           (display
                                             g$file-name$7965$tVUFT
                                             g$p$7973$tVUFT)
                                           (display '", found " g$p$7973$tVUFT)
                                           (write
                                             g$name$7967$tVUFT
                                             g$p$7973$tVUFT)
                                           (display '" instead" g$p$7973$tVUFT)
                                           (g$e$7972$tVUFT))))
                                      g$e$7971$tVUFT
                                      g$p$7970$tVUFT)))))
                              (void)))))))))
                 (g$try-load-from-file$7878$tVUFT g$file-name$7965$tVUFT)))))
           ((g$file-locator$7875$tVUFT) g$x$7964$tVUFT))))
       (case-lambda
         ((g$f$7974$tVUFT)
          (if (g$procedure?$5647$tVUFT g$f$7974$tVUFT)
            g$f$7974$tVUFT
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$7974$tVUFT))))))
   (g$current-library-expander$7880$tVUFT
     g$current-library-expander$8083$tVUFT
     (g$make-parameter$7583$tVUFT
       (case-lambda
         ((g$x$7975$tVUFT)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$7976$tVUFT)
          (if (g$procedure?$5647$tVUFT g$f$7976$tVUFT)
            g$f$7976$tVUFT
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$7976$tVUFT))))))
   (g$external-pending-libraries$7881$tVUFT
     g$external-pending-libraries$8084$tVUFT
     (g$make-parameter$7583$tVUFT '()))
   (g$find-external-library$7882$tVUFT
     g$find-external-library$8085$tVUFT
     (case-lambda
       ((g$name$7977$tVUFT)
        (begin
          (if (g$member$5151$tVUFT
                g$name$7977$tVUFT
                (g$external-pending-libraries$7881$tVUFT))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$7977$tVUFT)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$7980$tVUFT
                g$external-pending-libraries$7981$tVUFT)
              ((case-lambda
                 ((g$swap$7982$tVUFT)
                  (dynamic-wind
                    g$swap$7982$tVUFT
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$7879$tVUFT) g$name$7977$tVUFT)
                         ((case-lambda
                            ((g$t$7983$tVUFT)
                             (if g$t$7983$tVUFT
                               g$t$7983$tVUFT
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$7977$tVUFT)))))
                          (g$find-library-by$7871$tVUFT
                            (case-lambda
                              ((g$x$7984$tVUFT)
                               (equal?
                                 (g$library-name$7842$tVUFT g$x$7984$tVUFT)
                                 g$name$7977$tVUFT))))))))
                    g$swap$7982$tVUFT)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$7985$tVUFT)
                      (begin
                        (g$external-pending-libraries$7980$tVUFT
                          g$external-pending-libraries$7981$tVUFT)
                        (set! g$external-pending-libraries$7981$tVUFT
                          g$t$7985$tVUFT))))
                   (g$external-pending-libraries$7980$tVUFT)))))))
           g$external-pending-libraries$7881$tVUFT
           (cons
             g$name$7977$tVUFT
             (g$external-pending-libraries$7881$tVUFT)))))))
   (g$find-library-by-name$7883$tVUFT
     g$find-library-by-name$8086$tVUFT
     (case-lambda
       ((g$name$7986$tVUFT)
        ((case-lambda
           ((g$t$7987$tVUFT)
            (if g$t$7987$tVUFT
              g$t$7987$tVUFT
              (begin
                '#f
                (g$find-external-library$7882$tVUFT g$name$7986$tVUFT)))))
         (g$find-library-by$7871$tVUFT
           (case-lambda
             ((g$x$7988$tVUFT)
              (equal?
                (g$library-name$7842$tVUFT g$x$7988$tVUFT)
                g$name$7986$tVUFT))))))))
   (g$uninstall-library$7884$tVUFT
     g$uninstall-library$8087$tVUFT
     (case-lambda
       ((g$name$7989$tVUFT g$err?$7990$tVUFT)
        (letrec* ((g$who$7991$tVUFT 'uninstall-library))
          ((case-lambda
             ((g$lib$7992$tVUFT)
              (begin
                (if (if g$err?$7990$tVUFT
                      (begin '#f (not g$lib$7992$tVUFT))
                      '#f)
                  (assertion-violation
                    g$who$7991$tVUFT
                    '"library not installed"
                    g$name$7989$tVUFT)
                  (void))
                ((g$current-library-collection$7835$tVUFT)
                 g$lib$7992$tVUFT
                 '#t))))
           (g$find-library-by$7871$tVUFT
             (case-lambda
               ((g$x$7993$tVUFT)
                (equal?
                  (g$library-name$7842$tVUFT g$x$7993$tVUFT)
                  g$name$7989$tVUFT)))))))
       ((g$name$7994$tVUFT)
        (g$uninstall-library$7884$tVUFT g$name$7994$tVUFT '#t))))
   (g$library-exists?$7885$tVUFT
     g$library-exists?$8088$tVUFT
     (case-lambda
       ((g$name$7995$tVUFT)
        (if (g$find-library-by$7871$tVUFT
              (case-lambda
                ((g$x$7996$tVUFT)
                 (equal?
                   (g$library-name$7842$tVUFT g$x$7996$tVUFT)
                   g$name$7995$tVUFT))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$7886$tVUFT
     g$find-library-by-spec/die$8089$tVUFT
     (case-lambda
       ((g$spec$7997$tVUFT)
        ((case-lambda
           ((g$id$7998$tVUFT)
            ((case-lambda
               ((g$t$7999$tVUFT)
                (if g$t$7999$tVUFT
                  g$t$7999$tVUFT
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$7997$tVUFT)))))
             (g$find-library-by$7871$tVUFT
               (case-lambda
                 ((g$x$8000$tVUFT)
                  (eq? g$id$7998$tVUFT
                       (g$library-id$7841$tVUFT g$x$8000$tVUFT))))))))
         (car g$spec$7997$tVUFT)))))
   (g$install-library-record$7887$tVUFT
     g$install-library-record$8090$tVUFT
     (case-lambda
       ((g$lib$8001$tVUFT)
        (begin
          ((case-lambda
             ((g$exp-env$8002$tVUFT)
              (g$for-each$5158$tVUFT
                (case-lambda
                  ((g$x$8003$tVUFT)
                   ((case-lambda
                      ((g$label$8004$tVUFT g$binding$8005$tVUFT)
                       ((case-lambda
                          ((g$binding$8006$tVUFT)
                           (g$set-label-binding!$7586$tVUFT
                             g$label$8004$tVUFT
                             g$binding$8006$tVUFT)))
                        ((case-lambda
                           ((g$t$8007$tVUFT)
                            (if (g$memv$5150$tVUFT g$t$8007$tVUFT '(global))
                              (cons
                                'global
                                (cons
                                  g$lib$8001$tVUFT
                                  (cdr g$binding$8005$tVUFT)))
                              (if (g$memv$5150$tVUFT
                                    g$t$8007$tVUFT
                                    '(global-macro))
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$8001$tVUFT
                                    (cdr g$binding$8005$tVUFT)))
                                (if (g$memv$5150$tVUFT
                                      g$t$8007$tVUFT
                                      '(global-macro!))
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$8001$tVUFT
                                      (cdr g$binding$8005$tVUFT)))
                                  (if (g$memv$5150$tVUFT
                                        g$t$8007$tVUFT
                                        '(global-ctv))
                                    (cons
                                      'global-ctv
                                      (cons
                                        g$lib$8001$tVUFT
                                        (cdr g$binding$8005$tVUFT)))
                                    g$binding$8005$tVUFT))))))
                         (car g$binding$8005$tVUFT)))))
                    (car g$x$8003$tVUFT)
                    (cdr g$x$8003$tVUFT))))
                g$exp-env$8002$tVUFT)))
           (g$library-env$7848$tVUFT g$lib$8001$tVUFT))
          ((g$current-library-collection$7835$tVUFT) g$lib$8001$tVUFT)))))
   (g$install-library$7888$tVUFT
     g$install-library$8091$tVUFT
     (case-lambda
       ((g$id$8008$tVUFT
          g$name$8009$tVUFT
          g$ver$8010$tVUFT
          g$imp*$8011$tVUFT
          g$vis*$8012$tVUFT
          g$inv*$8013$tVUFT
          g$exp-subst$8014$tVUFT
          g$exp-env$8015$tVUFT
          g$visit-proc$8016$tVUFT
          g$invoke-proc$8017$tVUFT
          g$visit-code$8018$tVUFT
          g$invoke-code$8019$tVUFT
          g$visible?$8020$tVUFT
          g$source-file-name$8021$tVUFT)
        ((case-lambda
           ((g$imp-lib*$8022$tVUFT g$vis-lib*$8023$tVUFT g$inv-lib*$8024$tVUFT)
            (begin
              (if (not (if (g$symbol?$5645$tVUFT g$id$8008$tVUFT)
                         (if (list? g$name$8009$tVUFT)
                           (begin '#f (list? g$ver$8010$tVUFT))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$8008$tVUFT
                  g$name$8009$tVUFT
                  g$ver$8010$tVUFT)
                (void))
              (if (g$library-exists?$7885$tVUFT g$name$8009$tVUFT)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$8009$tVUFT)
                (void))
              ((case-lambda
                 ((g$lib$8025$tVUFT)
                  (g$install-library-record$7887$tVUFT g$lib$8025$tVUFT)))
               (g$make-library$7840$tVUFT
                 g$id$8008$tVUFT
                 g$name$8009$tVUFT
                 g$ver$8010$tVUFT
                 g$imp-lib*$8022$tVUFT
                 g$vis-lib*$8023$tVUFT
                 g$inv-lib*$8024$tVUFT
                 g$exp-subst$8014$tVUFT
                 g$exp-env$8015$tVUFT
                 g$visit-proc$8016$tVUFT
                 g$invoke-proc$8017$tVUFT
                 g$visit-code$8018$tVUFT
                 g$invoke-code$8019$tVUFT
                 g$visible?$8020$tVUFT
                 g$source-file-name$8021$tVUFT)))))
         (g$map$5157$tVUFT
           g$find-library-by-spec/die$7886$tVUFT
           g$imp*$8011$tVUFT)
         (g$map$5157$tVUFT
           g$find-library-by-spec/die$7886$tVUFT
           g$vis*$8012$tVUFT)
         (g$map$5157$tVUFT
           g$find-library-by-spec/die$7886$tVUFT
           g$inv*$8013$tVUFT)))))
   (g$imported-label->binding$7889$tVUFT
     g$imported-label->binding$8092$tVUFT
     (case-lambda
       ((g$lab$8026$tVUFT) (g$label-binding$7587$tVUFT g$lab$8026$tVUFT))))
   (g$invoke-library$7890$tVUFT
     g$invoke-library$8093$tVUFT
     (case-lambda
       ((g$lib$8027$tVUFT)
        ((case-lambda
           ((g$invoke$8028$tVUFT)
            (if (g$procedure?$5647$tVUFT g$invoke$8028$tVUFT)
              (begin
                (g$set-library-invoke-state!$7864$tVUFT
                  g$lib$8027$tVUFT
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$8027$tVUFT))))
                (g$for-each$5158$tVUFT
                  g$invoke-library$7890$tVUFT
                  (g$library-inv*$7846$tVUFT g$lib$8027$tVUFT))
                (g$set-library-invoke-state!$7864$tVUFT
                  g$lib$8027$tVUFT
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$8027$tVUFT))))
                (g$invoke$8028$tVUFT)
                (g$set-library-invoke-state!$7864$tVUFT g$lib$8027$tVUFT '#t))
              (void))))
         (g$library-invoke-state$7850$tVUFT g$lib$8027$tVUFT)))))
   (g$visit-library$7891$tVUFT
     g$visit-library$8094$tVUFT
     (case-lambda
       ((g$lib$8029$tVUFT)
        ((case-lambda
           ((g$visit$8030$tVUFT)
            (if (g$procedure?$5647$tVUFT g$visit$8030$tVUFT)
              (begin
                (g$set-library-visit-state!$7863$tVUFT
                  g$lib$8029$tVUFT
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$8029$tVUFT))))
                (g$for-each$5158$tVUFT
                  g$invoke-library$7890$tVUFT
                  (g$library-vis*$7845$tVUFT g$lib$8029$tVUFT))
                (g$set-library-visit-state!$7863$tVUFT
                  g$lib$8029$tVUFT
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$8029$tVUFT))))
                (g$visit$8030$tVUFT)
                (g$set-library-visit-state!$7863$tVUFT g$lib$8029$tVUFT '#t))
              (void))))
         (g$library-visit-state$7849$tVUFT g$lib$8029$tVUFT)))))
   (g$invoke-library-by-spec$7892$tVUFT
     g$invoke-library-by-spec$8095$tVUFT
     (case-lambda
       ((g$spec$8031$tVUFT)
        (g$invoke-library$7890$tVUFT
          (g$find-library-by-spec/die$7886$tVUFT g$spec$8031$tVUFT)))))
   (g$installed-libraries$7893$tVUFT
     g$installed-libraries$8096$tVUFT
     (case-lambda
       ((g$all?$8032$tVUFT)
        ((letrec ((g$f$8033$tVUFT
                    (case-lambda
                      ((g$ls$8034$tVUFT)
                       (if (null? g$ls$8034$tVUFT)
                         '()
                         (if ((case-lambda
                                ((g$t$8035$tVUFT)
                                 (if g$t$8035$tVUFT
                                   g$t$8035$tVUFT
                                   (begin
                                     '#f
                                     (g$library-visible?$7853$tVUFT
                                       (car g$ls$8034$tVUFT))))))
                              g$all?$8032$tVUFT)
                           (cons
                             (g$library-name$7842$tVUFT (car g$ls$8034$tVUFT))
                             (g$f$8033$tVUFT (cdr g$ls$8034$tVUFT)))
                           (g$f$8033$tVUFT (cdr g$ls$8034$tVUFT))))))))
           g$f$8033$tVUFT)
         ((g$current-library-collection$7835$tVUFT))))
       (() (g$installed-libraries$7893$tVUFT '#f))))
   (g$library-spec$7894$tVUFT
     g$library-spec$8097$tVUFT
     (case-lambda
       ((g$x$8036$tVUFT)
        (begin
          (if (not (g$library?$7839$tVUFT g$x$8036$tVUFT))
            (assertion-violation 'library-spec '"not a library" g$x$8036$tVUFT)
            (void))
          (list
            (g$library-id$7841$tVUFT g$x$8036$tVUFT)
            (g$library-name$7842$tVUFT g$x$8036$tVUFT)
            (g$library-version$7843$tVUFT g$x$8036$tVUFT)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$8098$tVUFT
     g$build-global-define$8208$tVUFT
     (case-lambda ((g$x$8179$tVUFT) (g$build-void$8175$tVUFT))))
   (g$build-lambda$8147$tVUFT
     g$build-lambda$8209$tVUFT
     (case-lambda
       ((g$ae$8180$tVUFT g$vars$8181$tVUFT g$exp$8182$tVUFT)
        (list 'case-lambda (list g$vars$8181$tVUFT g$exp$8182$tVUFT)))))
   (g$build-case-lambda$8148$tVUFT
     g$build-case-lambda$8210$tVUFT
     (case-lambda
       ((g$ae$8183$tVUFT g$vars*$8184$tVUFT g$exp*$8185$tVUFT)
        (cons
          'case-lambda
          (g$map$5157$tVUFT list g$vars*$8184$tVUFT g$exp*$8185$tVUFT)))))
   (g$build-let$8149$tVUFT
     g$build-let$8211$tVUFT
     (case-lambda
       ((g$ae$8186$tVUFT g$lhs*$8187$tVUFT g$rhs*$8188$tVUFT g$body$8189$tVUFT)
        (cons
          (g$build-lambda$8147$tVUFT
            g$ae$8186$tVUFT
            g$lhs*$8187$tVUFT
            g$body$8189$tVUFT)
          g$rhs*$8188$tVUFT))))
   (g$build-sequence$8174$tVUFT
     g$build-sequence$8212$tVUFT
     (case-lambda
       ((g$ae$8190$tVUFT g$exps$8191$tVUFT)
        ((letrec ((g$loop$8192$tVUFT
                    (case-lambda
                      ((g$exps$8193$tVUFT)
                       (if (null? (cdr g$exps$8193$tVUFT))
                         (car g$exps$8193$tVUFT)
                         (if (equal?
                               (car g$exps$8193$tVUFT)
                               (g$build-void$8175$tVUFT))
                           (g$loop$8192$tVUFT (cdr g$exps$8193$tVUFT))
                           (cons 'begin g$exps$8193$tVUFT)))))))
           g$loop$8192$tVUFT)
         g$exps$8191$tVUFT))))
   (g$build-void$8175$tVUFT
     g$build-void$8213$tVUFT
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$8176$tVUFT
     g$build-letrec$8214$tVUFT
     (case-lambda
       ((g$ae$8194$tVUFT
          g$vars$8195$tVUFT
          g$val-exps$8196$tVUFT
          g$body-exp$8197$tVUFT)
        (if (null? g$vars$8195$tVUFT)
          g$body-exp$8197$tVUFT
          (list
            'letrec
            (g$map$5157$tVUFT list g$vars$8195$tVUFT g$val-exps$8196$tVUFT)
            g$body-exp$8197$tVUFT)))))
   (g$build-letrec*$8177$tVUFT
     g$build-letrec*$8215$tVUFT
     (case-lambda
       ((g$ae$8198$tVUFT
          g$vars$8199$tVUFT
          g$val-exps$8200$tVUFT
          g$body-exp$8201$tVUFT)
        (if (null? g$vars$8199$tVUFT)
          g$body-exp$8201$tVUFT
          (list
            'letrec*
            (g$map$5157$tVUFT list g$vars$8199$tVUFT g$val-exps$8200$tVUFT)
            g$body-exp$8201$tVUFT)))))
   (g$build-library-letrec*$8178$tVUFT
     g$build-library-letrec*$8216$tVUFT
     (case-lambda
       ((g$ae$8202$tVUFT
          g$name$8203$tVUFT
          g$vars$8204$tVUFT
          g$locs$8205$tVUFT
          g$val-exps$8206$tVUFT
          g$body-exp$8207$tVUFT)
        (list
          'library-letrec*
          g$name$8203$tVUFT
          (g$map$5157$tVUFT
            list
            g$vars$8204$tVUFT
            g$locs$8205$tVUFT
            g$val-exps$8206$tVUFT)
          g$body-exp$8207$tVUFT)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$8217$tVUFT
     g$set-cons$11928$tVUFT
     (case-lambda
       ((g$x$8683$tVUFT g$ls$8684$tVUFT)
        (if (g$memq$5149$tVUFT g$x$8683$tVUFT g$ls$8684$tVUFT)
          g$ls$8684$tVUFT
          (cons g$x$8683$tVUFT g$ls$8684$tVUFT)))))
   (g$set-union$8218$tVUFT
     g$set-union$11929$tVUFT
     (case-lambda
       ((g$ls1$8685$tVUFT g$ls2$8686$tVUFT)
        (if (null? g$ls1$8685$tVUFT)
          g$ls2$8686$tVUFT
          (if (g$memq$5149$tVUFT (car g$ls1$8685$tVUFT) g$ls2$8686$tVUFT)
            (g$set-union$8218$tVUFT (cdr g$ls1$8685$tVUFT) g$ls2$8686$tVUFT)
            (cons
              (car g$ls1$8685$tVUFT)
              (g$set-union$8218$tVUFT
                (cdr g$ls1$8685$tVUFT)
                g$ls2$8686$tVUFT)))))))
   (g$top-mark*$8220$tVUFT g$top-mark*$11930$tVUFT '(top))
   (g$top-marked?$8221$tVUFT
     g$top-marked?$11931$tVUFT
     (case-lambda
       ((g$m*$8687$tVUFT) (g$memq$5149$tVUFT 'top g$m*$8687$tVUFT))))
   (g$gen-lexical$8222$tVUFT
     g$gen-lexical$11932$tVUFT
     (case-lambda
       ((g$sym$8688$tVUFT)
        (if (g$symbol?$5645$tVUFT g$sym$8688$tVUFT)
          (gensym g$sym$8688$tVUFT)
          (if (g$stx?$8255$tVUFT g$sym$8688$tVUFT)
            (g$gen-lexical$8222$tVUFT (g$id->sym$8284$tVUFT g$sym$8688$tVUFT))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$8688$tVUFT))))))
   (g$gen-global$8223$tVUFT
     g$gen-global$11933$tVUFT
     (case-lambda
       ((g$x$8689$tVUFT) (g$gen-lexical$8222$tVUFT g$x$8689$tVUFT))))
   (g$gen-label$8224$tVUFT
     g$gen-label$11934$tVUFT
     (case-lambda ((g$_$8690$tVUFT) (gensym))))
   (g$gen-top-level-label$8225$tVUFT
     g$gen-top-level-label$11935$tVUFT
     (case-lambda
       ((g$id$8691$tVUFT g$rib$8692$tVUFT)
        (letrec* ((g$find$8693$tVUFT
                    (case-lambda
                      ((g$sym$8699$tVUFT
                         g$mark*$8700$tVUFT
                         g$sym*$8701$tVUFT
                         g$mark**$8702$tVUFT
                         g$label*$8703$tVUFT)
                       (if (pair? g$sym*$8701$tVUFT)
                         (begin
                           '#f
                           (if (if (eq? g$sym$8699$tVUFT
                                        (car g$sym*$8701$tVUFT))
                                 (begin
                                   '#f
                                   (g$same-marks?$8285$tVUFT
                                     g$mark*$8700$tVUFT
                                     (car g$mark**$8702$tVUFT)))
                                 '#f)
                             (car g$label*$8703$tVUFT)
                             (g$find$8693$tVUFT
                               g$sym$8699$tVUFT
                               g$mark*$8700$tVUFT
                               (cdr g$sym*$8701$tVUFT)
                               (cdr g$mark**$8702$tVUFT)
                               (cdr g$label*$8703$tVUFT))))
                         '#f)))))
          ((case-lambda
             ((g$sym$8694$tVUFT g$mark*$8695$tVUFT)
              ((case-lambda
                 ((g$sym*$8696$tVUFT)
                  ((case-lambda
                     ((g$t$8697$tVUFT)
                      (if g$t$8697$tVUFT
                        ((case-lambda
                           ((g$label$8698$tVUFT)
                            (if (g$imported-label->binding$8092$tVUFT
                                  g$label$8698$tVUFT)
                              (gensym)
                              g$label$8698$tVUFT)))
                         g$t$8697$tVUFT)
                        (gensym))))
                   (if (g$memq$5149$tVUFT
                         g$sym$8694$tVUFT
                         (g$rib-sym*$8233$tVUFT g$rib$8692$tVUFT))
                     (begin
                       '#f
                       (g$find$8693$tVUFT
                         g$sym$8694$tVUFT
                         g$mark*$8695$tVUFT
                         g$sym*$8696$tVUFT
                         (g$rib-mark**$8234$tVUFT g$rib$8692$tVUFT)
                         (g$rib-label*$8235$tVUFT g$rib$8692$tVUFT)))
                     '#f))))
               (g$rib-sym*$8233$tVUFT g$rib$8692$tVUFT))))
           (g$id->sym$8284$tVUFT g$id$8691$tVUFT)
           (g$stx-mark*$8258$tVUFT g$id$8691$tVUFT))))))
   (g$gen-define-label+loc$8226$tVUFT
     g$gen-define-label+loc$11936$tVUFT
     (case-lambda
       ((g$id$8704$tVUFT g$rib$8705$tVUFT g$sd?$8706$tVUFT)
        (if g$sd?$8706$tVUFT
          (values (gensym) (g$gen-lexical$8222$tVUFT g$id$8704$tVUFT))
          ((case-lambda
             ((g$env$8707$tVUFT)
              ((case-lambda
                 ((g$label$8708$tVUFT g$locs$8709$tVUFT)
                  (values
                    g$label$8708$tVUFT
                    ((case-lambda
                       ((g$t$8710$tVUFT)
                        (if g$t$8710$tVUFT
                          (cdr g$t$8710$tVUFT)
                          ((case-lambda
                             ((g$loc$8711$tVUFT)
                              (begin
                                (g$set-interaction-env-locs!$8645$tVUFT
                                  g$env$8707$tVUFT
                                  (cons
                                    (cons g$label$8708$tVUFT g$loc$8711$tVUFT)
                                    g$locs$8709$tVUFT))
                                g$loc$8711$tVUFT)))
                           (g$gen-lexical$8222$tVUFT g$id$8704$tVUFT)))))
                     (g$assq$5145$tVUFT
                       g$label$8708$tVUFT
                       g$locs$8709$tVUFT)))))
               (g$gen-top-level-label$8225$tVUFT
                 g$id$8704$tVUFT
                 g$rib$8705$tVUFT)
               (g$interaction-env-locs$8642$tVUFT g$env$8707$tVUFT))))
           (g$top-level-context$8682$tVUFT))))))
   (g$gen-define-label$8227$tVUFT
     g$gen-define-label$11937$tVUFT
     (case-lambda
       ((g$id$8712$tVUFT g$rib$8713$tVUFT g$sd?$8714$tVUFT)
        (if g$sd?$8714$tVUFT
          (gensym)
          (g$gen-top-level-label$8225$tVUFT
            g$id$8712$tVUFT
            g$rib$8713$tVUFT)))))
   (g$9063$8228$tVUFT
     g$9063$11938$tVUFT
     (make-record-type-descriptor
       'rib
       '#f
       'g$9066$tVUFT
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq)
          (mutable cache))))
   (g$9065$8229$tVUFT g$9065$11939$tVUFT '#f)
   (g$9064$8230$tVUFT
     g$9064$11940$tVUFT
     (make-record-constructor-descriptor
       g$9063$8228$tVUFT
       '#f
       g$9065$8229$tVUFT))
   (g$rib?$8231$tVUFT
     g$rib?$11941$tVUFT
     (record-predicate g$9063$8228$tVUFT))
   (g$make-rib$8232$tVUFT
     g$make-rib$11942$tVUFT
     (record-constructor g$9064$8230$tVUFT))
   (g$rib-sym*$8233$tVUFT
     g$rib-sym*$11943$tVUFT
     (record-accessor g$9063$8228$tVUFT '0))
   (g$rib-mark**$8234$tVUFT
     g$rib-mark**$11944$tVUFT
     (record-accessor g$9063$8228$tVUFT '1))
   (g$rib-label*$8235$tVUFT
     g$rib-label*$11945$tVUFT
     (record-accessor g$9063$8228$tVUFT '2))
   (g$rib-sealed/freq$8236$tVUFT
     g$rib-sealed/freq$11946$tVUFT
     (record-accessor g$9063$8228$tVUFT '3))
   (g$rib-cache$8237$tVUFT
     g$rib-cache$11947$tVUFT
     (record-accessor g$9063$8228$tVUFT '4))
   (g$set-rib-sym*!$8238$tVUFT
     g$set-rib-sym*!$11948$tVUFT
     (record-mutator g$9063$8228$tVUFT '0))
   (g$set-rib-mark**!$8239$tVUFT
     g$set-rib-mark**!$11949$tVUFT
     (record-mutator g$9063$8228$tVUFT '1))
   (g$set-rib-label*!$8240$tVUFT
     g$set-rib-label*!$11950$tVUFT
     (record-mutator g$9063$8228$tVUFT '2))
   (g$set-rib-sealed/freq!$8241$tVUFT
     g$set-rib-sealed/freq!$11951$tVUFT
     (record-mutator g$9063$8228$tVUFT '3))
   (g$set-rib-cache!$8242$tVUFT
     g$set-rib-cache!$11952$tVUFT
     (record-mutator g$9063$8228$tVUFT '4))
   (g$make-empty-rib$8243$tVUFT
     g$make-empty-rib$11953$tVUFT
     (case-lambda (() (g$make-rib$8232$tVUFT '() '() '() '#f '#f))))
   (g$make-cache-rib$8244$tVUFT
     g$make-cache-rib$11954$tVUFT
     (case-lambda
       (()
        (g$make-rib$8232$tVUFT
          '()
          '()
          '()
          '#f
          (g$make-eq-hashtable$5744$tVUFT)))))
   (g$find-label$8245$tVUFT
     g$find-label$11955$tVUFT
     (case-lambda
       ((g$rib$8715$tVUFT g$sym$8716$tVUFT g$mark*$8717$tVUFT)
        ((case-lambda
           ((g$ht$8718$tVUFT)
            (if g$ht$8718$tVUFT
              (begin
                '#f
                ((case-lambda
                   ((g$cv$8719$tVUFT)
                    ((case-lambda
                       ((g$t$8720$tVUFT)
                        (if g$t$8720$tVUFT (cdr g$t$8720$tVUFT) '#f)))
                     (if g$cv$8719$tVUFT
                       (begin
                         '#f
                         (g$assp$5148$tVUFT
                           (case-lambda
                             ((g$m$8721$tVUFT)
                              (g$same-marks?$8285$tVUFT
                                g$mark*$8717$tVUFT
                                g$m$8721$tVUFT)))
                           g$cv$8719$tVUFT))
                       '#f))))
                 (g$hashtable-ref$5747$tVUFT
                   g$ht$8718$tVUFT
                   g$sym$8716$tVUFT
                   '#f)))
              '#f)))
         (g$rib-cache$8237$tVUFT g$rib$8715$tVUFT)))))
   (g$extend-rib!$8246$tVUFT
     g$extend-rib!$11956$tVUFT
     (case-lambda
       ((g$rib$8722$tVUFT g$id$8723$tVUFT g$label$8724$tVUFT g$sd?$8725$tVUFT)
        (letrec* ((g$find$8726$tVUFT
                    (case-lambda
                      ((g$sym$8735$tVUFT
                         g$mark*$8736$tVUFT
                         g$sym*$8737$tVUFT
                         g$mark**$8738$tVUFT
                         g$label*$8739$tVUFT)
                       (if (pair? g$sym*$8737$tVUFT)
                         (begin
                           '#f
                           (if (if (eq? g$sym$8735$tVUFT
                                        (car g$sym*$8737$tVUFT))
                                 (begin
                                   '#f
                                   (g$same-marks?$8285$tVUFT
                                     g$mark*$8736$tVUFT
                                     (car g$mark**$8738$tVUFT)))
                                 '#f)
                             g$label*$8739$tVUFT
                             (g$find$8726$tVUFT
                               g$sym$8735$tVUFT
                               g$mark*$8736$tVUFT
                               (cdr g$sym*$8737$tVUFT)
                               (cdr g$mark**$8738$tVUFT)
                               (cdr g$label*$8739$tVUFT))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$8236$tVUFT g$rib$8722$tVUFT)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$8722$tVUFT)
              (void))
            ((case-lambda
               ((g$sym$8727$tVUFT g$mark*$8728$tVUFT)
                ((case-lambda
                   ((g$sym*$8729$tVUFT)
                    ((case-lambda
                       ((g$t$8730$tVUFT)
                        (if g$t$8730$tVUFT
                          ((case-lambda
                             ((g$p$8731$tVUFT)
                              (if (not (eq? g$label$8724$tVUFT g$p$8731$tVUFT))
                                (g$syntax-violation$8674$tVUFT
                                  '#f
                                  '"multiple definitions of identifier"
                                  g$id$8723$tVUFT)
                                (void))))
                           g$t$8730$tVUFT)
                          ((case-lambda
                             ((g$t$8732$tVUFT)
                              (if g$t$8732$tVUFT
                                ((case-lambda
                                   ((g$p$8733$tVUFT)
                                    (if (not (eq? g$label$8724$tVUFT
                                                  (car g$p$8733$tVUFT)))
                                      (if (not g$sd?$8725$tVUFT)
                                        (set-car!
                                          g$p$8733$tVUFT
                                          g$label$8724$tVUFT)
                                        (g$syntax-violation$8674$tVUFT
                                          '#f
                                          '"multiple definitions of identifier"
                                          g$id$8723$tVUFT))
                                      (void))))
                                 g$t$8732$tVUFT)
                                (begin
                                  (if (g$rib-cache$8237$tVUFT g$rib$8722$tVUFT)
                                    (g$hashtable-update!$5751$tVUFT
                                      (g$rib-cache$8237$tVUFT g$rib$8722$tVUFT)
                                      g$sym$8727$tVUFT
                                      (case-lambda
                                        ((g$e$8734$tVUFT)
                                         (cons
                                           (cons
                                             g$mark*$8728$tVUFT
                                             g$label$8724$tVUFT)
                                           g$e$8734$tVUFT)))
                                      '())
                                    (void))
                                  (g$set-rib-sym*!$8238$tVUFT
                                    g$rib$8722$tVUFT
                                    (cons g$sym$8727$tVUFT g$sym*$8729$tVUFT))
                                  (g$set-rib-mark**!$8239$tVUFT
                                    g$rib$8722$tVUFT
                                    (cons
                                      g$mark*$8728$tVUFT
                                      (g$rib-mark**$8234$tVUFT
                                        g$rib$8722$tVUFT)))
                                  (g$set-rib-label*!$8240$tVUFT
                                    g$rib$8722$tVUFT
                                    (cons
                                      g$label$8724$tVUFT
                                      (g$rib-label*$8235$tVUFT
                                        g$rib$8722$tVUFT)))))))
                           (if (g$memq$5149$tVUFT
                                 g$sym$8727$tVUFT
                                 (g$rib-sym*$8233$tVUFT g$rib$8722$tVUFT))
                             (begin
                               '#f
                               (g$find$8726$tVUFT
                                 g$sym$8727$tVUFT
                                 g$mark*$8728$tVUFT
                                 g$sym*$8729$tVUFT
                                 (g$rib-mark**$8234$tVUFT g$rib$8722$tVUFT)
                                 (g$rib-label*$8235$tVUFT g$rib$8722$tVUFT)))
                             '#f)))))
                     (g$find-label$8245$tVUFT
                       g$rib$8722$tVUFT
                       g$sym$8727$tVUFT
                       g$mark*$8728$tVUFT))))
                 (g$rib-sym*$8233$tVUFT g$rib$8722$tVUFT))))
             (g$id->sym$8284$tVUFT g$id$8723$tVUFT)
             (g$stx-mark*$8258$tVUFT g$id$8723$tVUFT)))))))
   (g$extend-rib/nc!$8247$tVUFT
     g$extend-rib/nc!$11957$tVUFT
     (case-lambda
       ((g$rib$8740$tVUFT g$id$8741$tVUFT g$label$8742$tVUFT)
        ((case-lambda
           ((g$sym$8743$tVUFT g$mark*$8744$tVUFT)
            ((case-lambda
               ((g$sym*$8745$tVUFT)
                (begin
                  (if (g$rib-cache$8237$tVUFT g$rib$8740$tVUFT)
                    (g$hashtable-update!$5751$tVUFT
                      (g$rib-cache$8237$tVUFT g$rib$8740$tVUFT)
                      g$sym$8743$tVUFT
                      (case-lambda
                        ((g$e$8746$tVUFT)
                         (cons
                           (cons g$mark*$8744$tVUFT g$label$8742$tVUFT)
                           g$e$8746$tVUFT)))
                      '())
                    (void))
                  (g$set-rib-sym*!$8238$tVUFT
                    g$rib$8740$tVUFT
                    (cons g$sym$8743$tVUFT g$sym*$8745$tVUFT))
                  (g$set-rib-mark**!$8239$tVUFT
                    g$rib$8740$tVUFT
                    (cons
                      g$mark*$8744$tVUFT
                      (g$rib-mark**$8234$tVUFT g$rib$8740$tVUFT)))
                  (g$set-rib-label*!$8240$tVUFT
                    g$rib$8740$tVUFT
                    (cons
                      g$label$8742$tVUFT
                      (g$rib-label*$8235$tVUFT g$rib$8740$tVUFT))))))
             (g$rib-sym*$8233$tVUFT g$rib$8740$tVUFT))))
         (g$id->sym$8284$tVUFT g$id$8741$tVUFT)
         (g$stx-mark*$8258$tVUFT g$id$8741$tVUFT)))))
   (g$make-rib-map$8248$tVUFT
     g$make-rib-map$11958$tVUFT
     (case-lambda
       ((g$sym*$8747$tVUFT)
        ((case-lambda
           ((g$ht$8748$tVUFT)
            ((letrec ((g$f$8749$tVUFT
                        (case-lambda
                          ((g$i$8750$tVUFT g$sym*$8751$tVUFT)
                           (if (null? g$sym*$8751$tVUFT)
                             g$ht$8748$tVUFT
                             (begin
                               (g$hashtable-update!$5751$tVUFT
                                 g$ht$8748$tVUFT
                                 (car g$sym*$8751$tVUFT)
                                 (case-lambda
                                   ((g$x$8752$tVUFT)
                                    (cons g$i$8750$tVUFT g$x$8752$tVUFT)))
                                 '())
                               (g$f$8749$tVUFT
                                 (+ g$i$8750$tVUFT '1)
                                 (cdr g$sym*$8751$tVUFT))))))))
               g$f$8749$tVUFT)
             '0
             g$sym*$8747$tVUFT)))
         (g$make-eq-hashtable$5744$tVUFT)))))
   (g$seal-rib!$8249$tVUFT
     g$seal-rib!$11959$tVUFT
     (case-lambda
       ((g$rib$8753$tVUFT)
        ((case-lambda
           ((g$sym*$8754$tVUFT)
            (if (not (null? g$sym*$8754$tVUFT))
              (begin
                (g$set-rib-sym*!$8238$tVUFT
                  g$rib$8753$tVUFT
                  (g$list->vector$5640$tVUFT g$sym*$8754$tVUFT))
                (g$set-rib-mark**!$8239$tVUFT
                  g$rib$8753$tVUFT
                  (g$list->vector$5640$tVUFT
                    (g$rib-mark**$8234$tVUFT g$rib$8753$tVUFT)))
                (g$set-rib-label*!$8240$tVUFT
                  g$rib$8753$tVUFT
                  (g$list->vector$5640$tVUFT
                    (g$rib-label*$8235$tVUFT g$rib$8753$tVUFT)))
                (g$set-rib-sealed/freq!$8241$tVUFT
                  g$rib$8753$tVUFT
                  (g$make-rib-map$8248$tVUFT g$sym*$8754$tVUFT)))
              (void))))
         (g$rib-sym*$8233$tVUFT g$rib$8753$tVUFT)))))
   (g$unseal-rib!$8250$tVUFT
     g$unseal-rib!$11960$tVUFT
     (case-lambda
       ((g$rib$8755$tVUFT)
        (if (g$rib-sealed/freq$8236$tVUFT g$rib$8755$tVUFT)
          (begin
            (g$set-rib-sealed/freq!$8241$tVUFT g$rib$8755$tVUFT '#f)
            (g$set-rib-sym*!$8238$tVUFT
              g$rib$8755$tVUFT
              (vector->list (g$rib-sym*$8233$tVUFT g$rib$8755$tVUFT)))
            (g$set-rib-mark**!$8239$tVUFT
              g$rib$8755$tVUFT
              (vector->list (g$rib-mark**$8234$tVUFT g$rib$8755$tVUFT)))
            (g$set-rib-label*!$8240$tVUFT
              g$rib$8755$tVUFT
              (vector->list (g$rib-label*$8235$tVUFT g$rib$8755$tVUFT))))
          (void)))))
   (g$make-full-rib$8251$tVUFT
     g$make-full-rib$11961$tVUFT
     (case-lambda
       ((g$id*$8756$tVUFT g$label*$8757$tVUFT)
        ((case-lambda
           ((g$r$8758$tVUFT)
            (begin (g$seal-rib!$8249$tVUFT g$r$8758$tVUFT) g$r$8758$tVUFT)))
         (g$make-rib$8232$tVUFT
           (g$map$5157$tVUFT g$id->sym$8284$tVUFT g$id*$8756$tVUFT)
           (g$map$5157$tVUFT g$stx-mark*$8258$tVUFT g$id*$8756$tVUFT)
           g$label*$8757$tVUFT
           '#f
           '#f)))))
   (g$9094$8252$tVUFT
     g$9094$11962$tVUFT
     (make-record-type-descriptor
       'stx
       '#f
       'g$9097$tVUFT
       '#t
       '#t
       '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*))))
   (g$9096$8253$tVUFT g$9096$11963$tVUFT '#f)
   (g$9095$8254$tVUFT
     g$9095$11964$tVUFT
     (make-record-constructor-descriptor
       g$9094$8252$tVUFT
       '#f
       g$9096$8253$tVUFT))
   (g$stx?$8255$tVUFT
     g$stx?$11965$tVUFT
     (record-predicate g$9094$8252$tVUFT))
   (g$make-stx$8256$tVUFT
     g$make-stx$11966$tVUFT
     (record-constructor g$9095$8254$tVUFT))
   (g$stx-expr$8257$tVUFT
     g$stx-expr$11967$tVUFT
     (record-accessor g$9094$8252$tVUFT '0))
   (g$stx-mark*$8258$tVUFT
     g$stx-mark*$11968$tVUFT
     (record-accessor g$9094$8252$tVUFT '1))
   (g$stx-subst*$8259$tVUFT
     g$stx-subst*$11969$tVUFT
     (record-accessor g$9094$8252$tVUFT '2))
   (g$stx-ae*$8260$tVUFT
     g$stx-ae*$11970$tVUFT
     (record-accessor g$9094$8252$tVUFT '3))
   (g$set-stx-expr!$8261$tVUFT
     g$set-stx-expr!$11971$tVUFT
     (record-mutator g$9094$8252$tVUFT '0))
   (g$set-stx-mark*!$8262$tVUFT
     g$set-stx-mark*!$11972$tVUFT
     (record-mutator g$9094$8252$tVUFT '1))
   (g$set-stx-subst*!$8263$tVUFT
     g$set-stx-subst*!$11973$tVUFT
     (record-mutator g$9094$8252$tVUFT '2))
   (g$set-stx-ae*!$8264$tVUFT
     g$set-stx-ae*!$11974$tVUFT
     (record-mutator g$9094$8252$tVUFT '3))
   (g$rp$8265$tVUFT
     g$rp$11975$tVUFT
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$8759$tVUFT g$p$8760$tVUFT g$wr$8761$tVUFT)
          (begin
            (display '"#<syntax " g$p$8760$tVUFT)
            (write (g$stx->datum$8294$tVUFT g$x$8759$tVUFT) g$p$8760$tVUFT)
            ((case-lambda
               ((g$expr$8762$tVUFT)
                (if (annotation? g$expr$8762$tVUFT)
                  ((case-lambda
                     ((g$src$8763$tVUFT)
                      (if (pair? g$src$8763$tVUFT)
                        (begin
                          (display '" (" g$p$8760$tVUFT)
                          (display (cdr g$src$8763$tVUFT) g$p$8760$tVUFT)
                          (display '" of " g$p$8760$tVUFT)
                          (display (car g$src$8763$tVUFT) g$p$8760$tVUFT)
                          (display '")" g$p$8760$tVUFT))
                        (void))))
                   (annotation-source g$expr$8762$tVUFT))
                  (void))))
             (g$stx-expr$8257$tVUFT g$x$8759$tVUFT))
            (display '">" g$p$8760$tVUFT))))))
   (g$datum->stx$8266$tVUFT
     g$datum->stx$11976$tVUFT
     (case-lambda
       ((g$id$8764$tVUFT g$datum$8765$tVUFT)
        (g$make-stx$8256$tVUFT
          g$datum$8765$tVUFT
          (g$stx-mark*$8258$tVUFT g$id$8764$tVUFT)
          (g$stx-subst*$8259$tVUFT g$id$8764$tVUFT)
          (g$stx-ae*$8260$tVUFT g$id$8764$tVUFT)))))
   (g$gen-mark$8267$tVUFT
     g$gen-mark$11977$tVUFT
     (case-lambda (() (string '#\m))))
   (g$anti-mark$8268$tVUFT g$anti-mark$11978$tVUFT '#f)
   (g$anti-mark?$8269$tVUFT g$anti-mark?$11979$tVUFT not)
   (g$join-wraps$8270$tVUFT
     g$join-wraps$11980$tVUFT
     (case-lambda
       ((g$m1*$8766$tVUFT g$s1*$8767$tVUFT g$ae1*$8768$tVUFT g$e$8769$tVUFT)
        (letrec* ((g$cancel$8770$tVUFT
                    (case-lambda
                      ((g$ls1$8774$tVUFT g$ls2$8775$tVUFT)
                       ((letrec ((g$f$8776$tVUFT
                                   (case-lambda
                                     ((g$x$8777$tVUFT g$ls1$8778$tVUFT)
                                      (if (null? g$ls1$8778$tVUFT)
                                        (cdr g$ls2$8775$tVUFT)
                                        (cons
                                          g$x$8777$tVUFT
                                          (g$f$8776$tVUFT
                                            (car g$ls1$8778$tVUFT)
                                            (cdr g$ls1$8778$tVUFT))))))))
                          g$f$8776$tVUFT)
                        (car g$ls1$8774$tVUFT)
                        (cdr g$ls1$8774$tVUFT))))))
          ((case-lambda
             ((g$m2*$8771$tVUFT g$s2*$8772$tVUFT g$ae2*$8773$tVUFT)
              (if (if (not (null? g$m1*$8766$tVUFT))
                    (if (not (null? g$m2*$8771$tVUFT))
                      (begin
                        '#f
                        (g$anti-mark?$8269$tVUFT (car g$m2*$8771$tVUFT)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$8770$tVUFT g$m1*$8766$tVUFT g$m2*$8771$tVUFT)
                  (g$cancel$8770$tVUFT g$s1*$8767$tVUFT g$s2*$8772$tVUFT)
                  (g$cancel$8770$tVUFT g$ae1*$8768$tVUFT g$ae2*$8773$tVUFT))
                (values
                  (append g$m1*$8766$tVUFT g$m2*$8771$tVUFT)
                  (append g$s1*$8767$tVUFT g$s2*$8772$tVUFT)
                  (append g$ae1*$8768$tVUFT g$ae2*$8773$tVUFT)))))
           (g$stx-mark*$8258$tVUFT g$e$8769$tVUFT)
           (g$stx-subst*$8259$tVUFT g$e$8769$tVUFT)
           (g$stx-ae*$8260$tVUFT g$e$8769$tVUFT))))))
   (g$mkstx$8271$tVUFT
     g$mkstx$11981$tVUFT
     (case-lambda
       ((g$e$8779$tVUFT g$m*$8780$tVUFT g$s*$8781$tVUFT g$ae*$8782$tVUFT)
        (if (if (g$stx?$8255$tVUFT g$e$8779$tVUFT)
              (begin '#f (not (g$top-marked?$8221$tVUFT g$m*$8780$tVUFT)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$8270$tVUFT
                 g$m*$8780$tVUFT
                 g$s*$8781$tVUFT
                 g$ae*$8782$tVUFT
                 g$e$8779$tVUFT)))
            (case-lambda
              ((g$m*$8786$tVUFT g$s*$8787$tVUFT g$ae*$8788$tVUFT)
               ((case-lambda
                  ((g$ae*$8789$tVUFT g$s*$8790$tVUFT g$m*$8791$tVUFT)
                   (g$make-stx$8256$tVUFT
                     (g$stx-expr$8257$tVUFT g$e$8779$tVUFT)
                     g$m*$8791$tVUFT
                     g$s*$8790$tVUFT
                     g$ae*$8789$tVUFT)))
                g$ae*$8788$tVUFT
                g$s*$8787$tVUFT
                g$m*$8786$tVUFT))))
          (g$make-stx$8256$tVUFT
            g$e$8779$tVUFT
            g$m*$8780$tVUFT
            g$s*$8781$tVUFT
            g$ae*$8782$tVUFT)))))
   (g$add-mark$8272$tVUFT
     g$add-mark$11982$tVUFT
     (case-lambda
       ((g$m$8792$tVUFT g$e$8793$tVUFT g$ae$8794$tVUFT)
        (g$mkstx$8271$tVUFT
          g$e$8793$tVUFT
          (list g$m$8792$tVUFT)
          '(shift)
          (list g$ae$8794$tVUFT)))))
   (g$add-subst$8273$tVUFT
     g$add-subst$11983$tVUFT
     (case-lambda
       ((g$subst$8795$tVUFT g$e$8796$tVUFT)
        (g$mkstx$8271$tVUFT g$e$8796$tVUFT '() (list g$subst$8795$tVUFT) '()))))
   (g$syntax-kind?$8274$tVUFT
     g$syntax-kind?$11984$tVUFT
     (case-lambda
       ((g$x$8797$tVUFT g$p?$8798$tVUFT)
        (if (g$stx?$8255$tVUFT g$x$8797$tVUFT)
          (g$syntax-kind?$8274$tVUFT
            (g$stx-expr$8257$tVUFT g$x$8797$tVUFT)
            g$p?$8798$tVUFT)
          (if (annotation? g$x$8797$tVUFT)
            (g$syntax-kind?$8274$tVUFT
              (annotation-expression g$x$8797$tVUFT)
              g$p?$8798$tVUFT)
            (g$p?$8798$tVUFT g$x$8797$tVUFT))))))
   (g$syntax-vector->list$8275$tVUFT
     g$syntax-vector->list$11985$tVUFT
     (case-lambda
       ((g$x$8799$tVUFT)
        (if (g$stx?$8255$tVUFT g$x$8799$tVUFT)
          ((case-lambda
             ((g$ls$8800$tVUFT g$m*$8801$tVUFT g$s*$8802$tVUFT g$ae*$8803$tVUFT)
              (g$map$5157$tVUFT
                (case-lambda
                  ((g$x$8804$tVUFT)
                   (g$mkstx$8271$tVUFT
                     g$x$8804$tVUFT
                     g$m*$8801$tVUFT
                     g$s*$8802$tVUFT
                     g$ae*$8803$tVUFT)))
                g$ls$8800$tVUFT)))
           (g$syntax-vector->list$8275$tVUFT
             (g$stx-expr$8257$tVUFT g$x$8799$tVUFT))
           (g$stx-mark*$8258$tVUFT g$x$8799$tVUFT)
           (g$stx-subst*$8259$tVUFT g$x$8799$tVUFT)
           (g$stx-ae*$8260$tVUFT g$x$8799$tVUFT))
          (if (annotation? g$x$8799$tVUFT)
            (g$syntax-vector->list$8275$tVUFT
              (annotation-expression g$x$8799$tVUFT))
            (if (g$vector?$5643$tVUFT g$x$8799$tVUFT)
              (vector->list g$x$8799$tVUFT)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$8799$tVUFT)))))))
   (g$syntax-pair?$8276$tVUFT
     g$syntax-pair?$11986$tVUFT
     (case-lambda
       ((g$x$8805$tVUFT) (g$syntax-kind?$8274$tVUFT g$x$8805$tVUFT pair?))))
   (g$syntax-vector?$8277$tVUFT
     g$syntax-vector?$11987$tVUFT
     (case-lambda
       ((g$x$8806$tVUFT)
        (g$syntax-kind?$8274$tVUFT g$x$8806$tVUFT g$vector?$5643$tVUFT))))
   (g$syntax-null?$8278$tVUFT
     g$syntax-null?$11988$tVUFT
     (case-lambda
       ((g$x$8807$tVUFT) (g$syntax-kind?$8274$tVUFT g$x$8807$tVUFT null?))))
   (g$syntax-list?$8279$tVUFT
     g$syntax-list?$11989$tVUFT
     (case-lambda
       ((g$x$8808$tVUFT)
        ((case-lambda
           ((g$t$8809$tVUFT)
            (if g$t$8809$tVUFT
              g$t$8809$tVUFT
              (begin
                '#f
                (if (g$syntax-pair?$8276$tVUFT g$x$8808$tVUFT)
                  (begin
                    '#f
                    (g$syntax-list?$8279$tVUFT
                      (g$syntax-cdr$8281$tVUFT g$x$8808$tVUFT)))
                  '#f)))))
         (g$syntax-null?$8278$tVUFT g$x$8808$tVUFT)))))
   (g$syntax-car$8280$tVUFT
     g$syntax-car$11990$tVUFT
     (case-lambda
       ((g$x$8810$tVUFT)
        (if (g$stx?$8255$tVUFT g$x$8810$tVUFT)
          (g$mkstx$8271$tVUFT
            (g$syntax-car$8280$tVUFT (g$stx-expr$8257$tVUFT g$x$8810$tVUFT))
            (g$stx-mark*$8258$tVUFT g$x$8810$tVUFT)
            (g$stx-subst*$8259$tVUFT g$x$8810$tVUFT)
            (g$stx-ae*$8260$tVUFT g$x$8810$tVUFT))
          (if (annotation? g$x$8810$tVUFT)
            (g$syntax-car$8280$tVUFT (annotation-expression g$x$8810$tVUFT))
            (if (pair? g$x$8810$tVUFT)
              (car g$x$8810$tVUFT)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$8810$tVUFT)))))))
   (g$syntax-cdr$8281$tVUFT
     g$syntax-cdr$11991$tVUFT
     (case-lambda
       ((g$x$8811$tVUFT)
        (if (g$stx?$8255$tVUFT g$x$8811$tVUFT)
          (g$mkstx$8271$tVUFT
            (g$syntax-cdr$8281$tVUFT (g$stx-expr$8257$tVUFT g$x$8811$tVUFT))
            (g$stx-mark*$8258$tVUFT g$x$8811$tVUFT)
            (g$stx-subst*$8259$tVUFT g$x$8811$tVUFT)
            (g$stx-ae*$8260$tVUFT g$x$8811$tVUFT))
          (if (annotation? g$x$8811$tVUFT)
            (g$syntax-cdr$8281$tVUFT (annotation-expression g$x$8811$tVUFT))
            (if (pair? g$x$8811$tVUFT)
              (cdr g$x$8811$tVUFT)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$8811$tVUFT)))))))
   (g$syntax->list$8282$tVUFT
     g$syntax->list$11992$tVUFT
     (case-lambda
       ((g$x$8812$tVUFT)
        (if (g$syntax-pair?$8276$tVUFT g$x$8812$tVUFT)
          (cons
            (g$syntax-car$8280$tVUFT g$x$8812$tVUFT)
            (g$syntax->list$8282$tVUFT
              (g$syntax-cdr$8281$tVUFT g$x$8812$tVUFT)))
          (if (g$syntax-null?$8278$tVUFT g$x$8812$tVUFT)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$8812$tVUFT))))))
   (g$id?$8283$tVUFT
     g$id?$11993$tVUFT
     (case-lambda
       ((g$x$8813$tVUFT)
        (if (g$stx?$8255$tVUFT g$x$8813$tVUFT)
          (begin
            '#f
            ((case-lambda
               ((g$expr$8814$tVUFT)
                (g$symbol?$5645$tVUFT
                  (if (annotation? g$expr$8814$tVUFT)
                    (annotation-stripped g$expr$8814$tVUFT)
                    g$expr$8814$tVUFT))))
             (g$stx-expr$8257$tVUFT g$x$8813$tVUFT)))
          '#f))))
   (g$id->sym$8284$tVUFT
     g$id->sym$11994$tVUFT
     (case-lambda
       ((g$x$8815$tVUFT)
        (begin
          (if (not (g$stx?$8255$tVUFT g$x$8815$tVUFT))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$8815$tVUFT)
            (void))
          ((case-lambda
             ((g$expr$8816$tVUFT)
              ((case-lambda
                 ((g$sym$8817$tVUFT)
                  (if (g$symbol?$5645$tVUFT g$sym$8817$tVUFT)
                    g$sym$8817$tVUFT
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$8815$tVUFT))))
               (if (annotation? g$expr$8816$tVUFT)
                 (annotation-stripped g$expr$8816$tVUFT)
                 g$expr$8816$tVUFT))))
           (g$stx-expr$8257$tVUFT g$x$8815$tVUFT))))))
   (g$same-marks?$8285$tVUFT
     g$same-marks?$11995$tVUFT
     (case-lambda
       ((g$x$8818$tVUFT g$y$8819$tVUFT)
        ((case-lambda
           ((g$t$8820$tVUFT)
            (if g$t$8820$tVUFT
              g$t$8820$tVUFT
              (begin
                '#f
                (if (pair? g$x$8818$tVUFT)
                  (if (pair? g$y$8819$tVUFT)
                    (if (eq? (car g$x$8818$tVUFT) (car g$y$8819$tVUFT))
                      (begin
                        '#f
                        (g$same-marks?$8285$tVUFT
                          (cdr g$x$8818$tVUFT)
                          (cdr g$y$8819$tVUFT)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$8818$tVUFT) (begin '#f (null? g$y$8819$tVUFT)) '#f)))))
   (g$bound-id=?$8286$tVUFT
     g$bound-id=?$11996$tVUFT
     (case-lambda
       ((g$x$8821$tVUFT g$y$8822$tVUFT)
        (if (eq? (g$id->sym$8284$tVUFT g$x$8821$tVUFT)
                 (g$id->sym$8284$tVUFT g$y$8822$tVUFT))
          (begin
            '#f
            (g$same-marks?$8285$tVUFT
              (g$stx-mark*$8258$tVUFT g$x$8821$tVUFT)
              (g$stx-mark*$8258$tVUFT g$y$8822$tVUFT)))
          '#f))))
   (g$free-id=?$8287$tVUFT
     g$free-id=?$11997$tVUFT
     (case-lambda
       ((g$i$8823$tVUFT g$j$8824$tVUFT)
        ((case-lambda
           ((g$t0$8825$tVUFT g$t1$8826$tVUFT)
            (if ((case-lambda
                   ((g$t$8827$tVUFT)
                    (if g$t$8827$tVUFT
                      g$t$8827$tVUFT
                      (begin '#f g$t1$8826$tVUFT))))
                 g$t0$8825$tVUFT)
              (eq? g$t0$8825$tVUFT g$t1$8826$tVUFT)
              (eq? (g$id->sym$8284$tVUFT g$i$8823$tVUFT)
                   (g$id->sym$8284$tVUFT g$j$8824$tVUFT)))))
         (g$id->real-label$8297$tVUFT g$i$8823$tVUFT)
         (g$id->real-label$8297$tVUFT g$j$8824$tVUFT)))))
   (g$valid-bound-ids?$8288$tVUFT
     g$valid-bound-ids?$11998$tVUFT
     (case-lambda
       ((g$id*$8828$tVUFT)
        (if (g$for-all$5155$tVUFT g$id?$8283$tVUFT g$id*$8828$tVUFT)
          (begin '#f (g$distinct-bound-ids?$8289$tVUFT g$id*$8828$tVUFT))
          '#f))))
   (g$distinct-bound-ids?$8289$tVUFT
     g$distinct-bound-ids?$11999$tVUFT
     (case-lambda
       ((g$id*$8829$tVUFT)
        ((case-lambda
           ((g$t$8830$tVUFT)
            (if g$t$8830$tVUFT
              g$t$8830$tVUFT
              (begin
                '#f
                (if (not (g$bound-id-member?$8290$tVUFT
                           (car g$id*$8829$tVUFT)
                           (cdr g$id*$8829$tVUFT)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$8289$tVUFT (cdr g$id*$8829$tVUFT)))
                  '#f)))))
         (null? g$id*$8829$tVUFT)))))
   (g$bound-id-member?$8290$tVUFT
     g$bound-id-member?$12000$tVUFT
     (case-lambda
       ((g$id$8831$tVUFT g$id*$8832$tVUFT)
        (if (pair? g$id*$8832$tVUFT)
          (begin
            '#f
            ((case-lambda
               ((g$t$8833$tVUFT)
                (if g$t$8833$tVUFT
                  g$t$8833$tVUFT
                  (begin
                    '#f
                    (g$bound-id-member?$8290$tVUFT
                      g$id$8831$tVUFT
                      (cdr g$id*$8832$tVUFT))))))
             (g$bound-id=?$8286$tVUFT g$id$8831$tVUFT (car g$id*$8832$tVUFT))))
          '#f))))
   (g$self-evaluating?$8291$tVUFT
     g$self-evaluating?$12001$tVUFT
     (case-lambda
       ((g$x$8834$tVUFT)
        ((case-lambda
           ((g$t$8835$tVUFT)
            (if g$t$8835$tVUFT
              g$t$8835$tVUFT
              ((case-lambda
                 ((g$t$8836$tVUFT)
                  (if g$t$8836$tVUFT
                    g$t$8836$tVUFT
                    ((case-lambda
                       ((g$t$8837$tVUFT)
                        (if g$t$8837$tVUFT
                          g$t$8837$tVUFT
                          ((case-lambda
                             ((g$t$8838$tVUFT)
                              (if g$t$8838$tVUFT
                                g$t$8838$tVUFT
                                (begin
                                  '#f
                                  (g$bytevector?$5644$tVUFT g$x$8834$tVUFT)))))
                           (g$boolean?$5646$tVUFT g$x$8834$tVUFT)))))
                     (g$char?$5642$tVUFT g$x$8834$tVUFT)))))
               (string? g$x$8834$tVUFT)))))
         (number? g$x$8834$tVUFT)))))
   (g$strip-annotations$8292$tVUFT
     g$strip-annotations$12002$tVUFT
     (case-lambda
       ((g$x$8839$tVUFT)
        (if (pair? g$x$8839$tVUFT)
          (cons
            (g$strip-annotations$8292$tVUFT (car g$x$8839$tVUFT))
            (g$strip-annotations$8292$tVUFT (cdr g$x$8839$tVUFT)))
          (if (g$vector?$5643$tVUFT g$x$8839$tVUFT)
            (g$vector-map$5705$tVUFT
              g$strip-annotations$8292$tVUFT
              g$x$8839$tVUFT)
            (if (annotation? g$x$8839$tVUFT)
              (annotation-stripped g$x$8839$tVUFT)
              g$x$8839$tVUFT))))))
   (g$strip$8293$tVUFT
     g$strip$12003$tVUFT
     (case-lambda
       ((g$x$8840$tVUFT g$m*$8841$tVUFT)
        (if (g$top-marked?$8221$tVUFT g$m*$8841$tVUFT)
          (if ((case-lambda
                 ((g$t$8842$tVUFT)
                  (if g$t$8842$tVUFT
                    g$t$8842$tVUFT
                    ((case-lambda
                       ((g$t$8843$tVUFT)
                        (if g$t$8843$tVUFT
                          g$t$8843$tVUFT
                          (begin
                            '#f
                            (if (g$vector?$5643$tVUFT g$x$8840$tVUFT)
                              (if (> (vector-length g$x$8840$tVUFT) '0)
                                (begin
                                  '#f
                                  (annotation? (vector-ref g$x$8840$tVUFT '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$8840$tVUFT)
                       (begin '#f (annotation? (car g$x$8840$tVUFT)))
                       '#f)))))
               (annotation? g$x$8840$tVUFT))
            (g$strip-annotations$8292$tVUFT g$x$8840$tVUFT)
            g$x$8840$tVUFT)
          ((letrec ((g$f$8844$tVUFT
                      (case-lambda
                        ((g$x$8845$tVUFT)
                         (if (g$stx?$8255$tVUFT g$x$8845$tVUFT)
                           (g$strip$8293$tVUFT
                             (g$stx-expr$8257$tVUFT g$x$8845$tVUFT)
                             (g$stx-mark*$8258$tVUFT g$x$8845$tVUFT))
                           (if (annotation? g$x$8845$tVUFT)
                             (annotation-stripped g$x$8845$tVUFT)
                             (if (pair? g$x$8845$tVUFT)
                               ((case-lambda
                                  ((g$a$8846$tVUFT g$d$8847$tVUFT)
                                   (if (if (eq? g$a$8846$tVUFT
                                                (car g$x$8845$tVUFT))
                                         (begin
                                           '#f
                                           (eq? g$d$8847$tVUFT
                                                (cdr g$x$8845$tVUFT)))
                                         '#f)
                                     g$x$8845$tVUFT
                                     (cons g$a$8846$tVUFT g$d$8847$tVUFT))))
                                (g$f$8844$tVUFT (car g$x$8845$tVUFT))
                                (g$f$8844$tVUFT (cdr g$x$8845$tVUFT)))
                               (if (g$vector?$5643$tVUFT g$x$8845$tVUFT)
                                 ((case-lambda
                                    ((g$old$8848$tVUFT)
                                     ((case-lambda
                                        ((g$new$8849$tVUFT)
                                         (if (g$for-all$5155$tVUFT
                                               eq?
                                               g$old$8848$tVUFT
                                               g$new$8849$tVUFT)
                                           g$x$8845$tVUFT
                                           (g$list->vector$5640$tVUFT
                                             g$new$8849$tVUFT))))
                                      (g$map$5157$tVUFT
                                        g$f$8844$tVUFT
                                        g$old$8848$tVUFT))))
                                  (vector->list g$x$8845$tVUFT))
                                 g$x$8845$tVUFT))))))))
             g$f$8844$tVUFT)
           g$x$8840$tVUFT)))))
   (g$stx->datum$8294$tVUFT
     g$stx->datum$12004$tVUFT
     (case-lambda
       ((g$x$8850$tVUFT) (g$strip$8293$tVUFT g$x$8850$tVUFT '()))))
   (g$same-marks*?$8295$tVUFT
     g$same-marks*?$12005$tVUFT
     (case-lambda
       ((g$mark*$8851$tVUFT g$mark**$8852$tVUFT g$si$8853$tVUFT)
        (if (null? g$si$8853$tVUFT)
          '#f
          (if (g$same-marks?$8285$tVUFT
                g$mark*$8851$tVUFT
                (vector-ref g$mark**$8852$tVUFT (car g$si$8853$tVUFT)))
            (car g$si$8853$tVUFT)
            (g$same-marks*?$8295$tVUFT
              g$mark*$8851$tVUFT
              g$mark**$8852$tVUFT
              (cdr g$si$8853$tVUFT)))))))
   (g$id->label$8296$tVUFT
     g$id->label$12006$tVUFT
     (case-lambda
       ((g$id$8854$tVUFT)
        ((case-lambda
           ((g$t$8855$tVUFT)
            (if g$t$8855$tVUFT
              g$t$8855$tVUFT
              (begin
                '#f
                ((case-lambda
                   ((g$t$8856$tVUFT)
                    (if g$t$8856$tVUFT
                      ((case-lambda
                         ((g$env$8857$tVUFT)
                          ((case-lambda
                             ((g$rib$8858$tVUFT)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$8226$tVUFT
                                     g$id$8854$tVUFT
                                     g$rib$8858$tVUFT
                                     '#f)))
                                (case-lambda
                                  ((g$lab$8861$tVUFT g$_loc$8862$tVUFT)
                                   ((case-lambda
                                      ((g$_loc$8863$tVUFT g$lab$8864$tVUFT)
                                       (begin
                                         (g$extend-rib!$8246$tVUFT
                                           g$rib$8858$tVUFT
                                           g$id$8854$tVUFT
                                           g$lab$8864$tVUFT
                                           '#t)
                                         g$lab$8864$tVUFT)))
                                    g$_loc$8862$tVUFT
                                    g$lab$8861$tVUFT))))))
                           (g$interaction-env-rib$8640$tVUFT
                             g$env$8857$tVUFT))))
                       g$t$8856$tVUFT)
                      '#f)))
                 (g$top-level-context$8682$tVUFT))))))
         (g$id->real-label$8297$tVUFT g$id$8854$tVUFT)))))
   (g$id->real-label$8297$tVUFT
     g$id->real-label$12007$tVUFT
     (case-lambda
       ((g$id$8865$tVUFT)
        ((case-lambda
           ((g$sym$8866$tVUFT)
            ((letrec ((g$search$8867$tVUFT
                        (case-lambda
                          ((g$subst*$8868$tVUFT g$mark*$8869$tVUFT)
                           (if (null? g$subst*$8868$tVUFT)
                             '#f
                             (if (eq? (car g$subst*$8868$tVUFT) 'shift)
                               (g$search$8867$tVUFT
                                 (cdr g$subst*$8868$tVUFT)
                                 (cdr g$mark*$8869$tVUFT))
                               ((case-lambda
                                  ((g$rib$8870$tVUFT)
                                   ((case-lambda
                                      ((g$t$8871$tVUFT)
                                       (if g$t$8871$tVUFT
                                         ((case-lambda
                                            ((g$ht$8872$tVUFT)
                                             ((case-lambda
                                                ((g$si$8873$tVUFT)
                                                 ((case-lambda
                                                    ((g$i$8874$tVUFT)
                                                     (if g$i$8874$tVUFT
                                                       (vector-ref
                                                         (g$rib-label*$8235$tVUFT
                                                           g$rib$8870$tVUFT)
                                                         g$i$8874$tVUFT)
                                                       (g$search$8867$tVUFT
                                                         (cdr g$subst*$8868$tVUFT)
                                                         g$mark*$8869$tVUFT))))
                                                  (if g$si$8873$tVUFT
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$8295$tVUFT
                                                        g$mark*$8869$tVUFT
                                                        (g$rib-mark**$8234$tVUFT
                                                          g$rib$8870$tVUFT)
                                                        (g$reverse$5652$tVUFT
                                                          g$si$8873$tVUFT)))
                                                    '#f))))
                                              (g$hashtable-ref$5747$tVUFT
                                                g$ht$8872$tVUFT
                                                g$sym$8866$tVUFT
                                                '#f))))
                                          g$t$8871$tVUFT)
                                         ((case-lambda
                                            ((g$t$8875$tVUFT)
                                             (if g$t$8875$tVUFT
                                               g$t$8875$tVUFT
                                               (begin
                                                 '#f
                                                 ((letrec ((g$f$8876$tVUFT
                                                             (case-lambda
                                                               ((g$sym*$8877$tVUFT
                                                                  g$mark**$8878$tVUFT
                                                                  g$label*$8879$tVUFT)
                                                                (if (null?
                                                                      g$sym*$8877$tVUFT)
                                                                  (g$search$8867$tVUFT
                                                                    (cdr g$subst*$8868$tVUFT)
                                                                    g$mark*$8869$tVUFT)
                                                                  (if (if (eq? (car g$sym*$8877$tVUFT)
                                                                               g$sym$8866$tVUFT)
                                                                        (begin
                                                                          '#f
                                                                          (g$same-marks?$8285$tVUFT
                                                                            (car g$mark**$8878$tVUFT)
                                                                            g$mark*$8869$tVUFT))
                                                                        '#f)
                                                                    (car g$label*$8879$tVUFT)
                                                                    (g$f$8876$tVUFT
                                                                      (cdr g$sym*$8877$tVUFT)
                                                                      (cdr g$mark**$8878$tVUFT)
                                                                      (cdr g$label*$8879$tVUFT))))))))
                                                    g$f$8876$tVUFT)
                                                  (g$rib-sym*$8233$tVUFT
                                                    g$rib$8870$tVUFT)
                                                  (g$rib-mark**$8234$tVUFT
                                                    g$rib$8870$tVUFT)
                                                  (g$rib-label*$8235$tVUFT
                                                    g$rib$8870$tVUFT))))))
                                          (g$find-label$8245$tVUFT
                                            g$rib$8870$tVUFT
                                            g$sym$8866$tVUFT
                                            g$mark*$8869$tVUFT)))))
                                    (g$rib-sealed/freq$8236$tVUFT
                                      g$rib$8870$tVUFT))))
                                (car g$subst*$8868$tVUFT))))))))
               g$search$8867$tVUFT)
             (g$stx-subst*$8259$tVUFT g$id$8865$tVUFT)
             (g$stx-mark*$8258$tVUFT g$id$8865$tVUFT))))
         (g$id->sym$8284$tVUFT g$id$8865$tVUFT)))))
   (g$label->binding$8298$tVUFT
     g$label->binding$12008$tVUFT
     (case-lambda
       ((g$x$8880$tVUFT g$r$8881$tVUFT)
        (if (not g$x$8880$tVUFT)
          '(displaced-lexical)
          ((case-lambda
             ((g$t$8882$tVUFT)
              (if g$t$8882$tVUFT
                ((case-lambda
                   ((g$b$8883$tVUFT)
                    (if (if (pair? g$b$8883$tVUFT)
                          (begin '#f (eq? (car g$b$8883$tVUFT) '$core-rtd))
                          '#f)
                      (cons
                        '$rtd
                        (g$map$5157$tVUFT
                          g$bless$8525$tVUFT
                          (cdr g$b$8883$tVUFT)))
                      (if (if (pair? g$b$8883$tVUFT)
                            (begin '#f (eq? (car g$b$8883$tVUFT) 'global-rtd))
                            '#f)
                        ((case-lambda
                           ((g$lib$8884$tVUFT g$loc$8885$tVUFT)
                            (cons '$rtd (symbol-value g$loc$8885$tVUFT))))
                         (g$cadr$5654$tVUFT g$b$8883$tVUFT)
                         (g$cddr$5656$tVUFT g$b$8883$tVUFT))
                        g$b$8883$tVUFT))))
                 g$t$8882$tVUFT)
                ((case-lambda
                   ((g$t$8886$tVUFT)
                    (if g$t$8886$tVUFT
                      (cdr g$t$8886$tVUFT)
                      ((case-lambda
                         ((g$t$8887$tVUFT)
                          (if g$t$8887$tVUFT
                            ((case-lambda
                               ((g$env$8888$tVUFT)
                                ((case-lambda
                                   ((g$t$8889$tVUFT)
                                    (if g$t$8889$tVUFT
                                      ((case-lambda
                                         ((g$p$8890$tVUFT)
                                          (g$cons*$5159$tVUFT
                                            'lexical
                                            (cdr g$p$8890$tVUFT)
                                            '#f)))
                                       g$t$8889$tVUFT)
                                      '(displaced-lexical . #f))))
                                 (g$assq$5145$tVUFT
                                   g$x$8880$tVUFT
                                   (g$interaction-env-locs$8642$tVUFT
                                     g$env$8888$tVUFT)))))
                             g$t$8887$tVUFT)
                            '(displaced-lexical . #f))))
                       (g$top-level-context$8682$tVUFT)))))
                 (g$assq$5145$tVUFT g$x$8880$tVUFT g$r$8881$tVUFT)))))
           (g$imported-label->binding$8092$tVUFT g$x$8880$tVUFT))))))
   (g$make-binding$8299$tVUFT g$make-binding$12009$tVUFT cons)
   (g$binding-type$8300$tVUFT g$binding-type$12010$tVUFT car)
   (g$binding-value$8301$tVUFT g$binding-value$12011$tVUFT cdr)
   (g$raise-unbound-error$8302$tVUFT
     g$raise-unbound-error$12012$tVUFT
     (case-lambda
       ((g$id$8891$tVUFT)
        (g$syntax-violation*$8673$tVUFT
          '#f
          '"unbound identifier"
          g$id$8891$tVUFT
          (g$make-undefined-violation$6312$tVUFT)))))
   (g$syntax-type$8303$tVUFT
     g$syntax-type$12013$tVUFT
     (case-lambda
       ((g$e$8892$tVUFT g$r$8893$tVUFT)
        (if (g$id?$8283$tVUFT g$e$8892$tVUFT)
          ((case-lambda
             ((g$id$8894$tVUFT)
              ((case-lambda
                 ((g$label$8895$tVUFT)
                  ((case-lambda
                     ((g$b$8896$tVUFT)
                      ((case-lambda
                         ((g$type$8897$tVUFT)
                          (begin
                            (if (not g$label$8895$tVUFT)
                              (g$raise-unbound-error$8302$tVUFT g$id$8894$tVUFT)
                              (void))
                            ((case-lambda
                               ((g$t$8898$tVUFT)
                                (if (g$memv$5150$tVUFT
                                      g$t$8898$tVUFT
                                      '(lexical
                                         core-prim
                                         macro
                                         macro!
                                         global
                                         local-macro
                                         local-macro!
                                         global-macro
                                         global-macro!
                                         displaced-lexical
                                         syntax
                                         import
                                         export
                                         $module
                                         $core-rtd
                                         library
                                         mutable
                                         ctv
                                         local-ctv
                                         global-ctv))
                                  (values
                                    g$type$8897$tVUFT
                                    (g$binding-value$8301$tVUFT g$b$8896$tVUFT)
                                    g$id$8894$tVUFT)
                                  (values 'other '#f '#f))))
                             g$type$8897$tVUFT))))
                       (g$binding-type$8300$tVUFT g$b$8896$tVUFT))))
                   (g$label->binding$8298$tVUFT
                     g$label$8895$tVUFT
                     g$r$8893$tVUFT))))
               (g$id->label$8296$tVUFT g$id$8894$tVUFT))))
           g$e$8892$tVUFT)
          (if (g$syntax-pair?$8276$tVUFT g$e$8892$tVUFT)
            ((case-lambda
               ((g$id$8899$tVUFT)
                (if (g$id?$8283$tVUFT g$id$8899$tVUFT)
                  ((case-lambda
                     ((g$label$8900$tVUFT)
                      ((case-lambda
                         ((g$b$8901$tVUFT)
                          ((case-lambda
                             ((g$type$8902$tVUFT)
                              (begin
                                (if (not g$label$8900$tVUFT)
                                  (g$raise-unbound-error$8302$tVUFT
                                    g$id$8899$tVUFT)
                                  (void))
                                ((case-lambda
                                   ((g$t$8903$tVUFT)
                                    (if (g$memv$5150$tVUFT
                                          g$t$8903$tVUFT
                                          '(define define-syntax
                                             core-macro
                                             begin
                                             macro
                                             macro!
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             module
                                             library
                                             set!
                                             let-syntax
                                             letrec-syntax
                                             import
                                             export
                                             $core-rtd
                                             ctv
                                             local-ctv
                                             global-ctv))
                                      (values
                                        g$type$8902$tVUFT
                                        (g$binding-value$8301$tVUFT
                                          g$b$8901$tVUFT)
                                        g$id$8899$tVUFT)
                                      (values 'call '#f '#f))))
                                 g$type$8902$tVUFT))))
                           (g$binding-type$8300$tVUFT g$b$8901$tVUFT))))
                       (g$label->binding$8298$tVUFT
                         g$label$8900$tVUFT
                         g$r$8893$tVUFT))))
                   (g$id->label$8296$tVUFT g$id$8899$tVUFT))
                  (values 'call '#f '#f))))
             (g$syntax-car$8280$tVUFT g$e$8892$tVUFT))
            ((case-lambda
               ((g$d$8904$tVUFT)
                (if (g$self-evaluating?$8291$tVUFT g$d$8904$tVUFT)
                  (values 'constant g$d$8904$tVUFT '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$8294$tVUFT g$e$8892$tVUFT)))))))
   (g$sanitize-binding$8311$tVUFT
     g$sanitize-binding$12014$tVUFT
     (case-lambda
       ((g$x$8905$tVUFT g$src$8906$tVUFT)
        (if (g$procedure?$5647$tVUFT g$x$8905$tVUFT)
          (g$cons*$5159$tVUFT 'local-macro g$x$8905$tVUFT g$src$8906$tVUFT)
          (if (if (pair? g$x$8905$tVUFT)
                (if (eq? (car g$x$8905$tVUFT) 'macro!)
                  (begin '#f (g$procedure?$5647$tVUFT (cdr g$x$8905$tVUFT)))
                  '#f)
                '#f)
            (g$cons*$5159$tVUFT
              'local-macro!
              (cdr g$x$8905$tVUFT)
              g$src$8906$tVUFT)
            (if (if (pair? g$x$8905$tVUFT)
                  (begin '#f (eq? (car g$x$8905$tVUFT) '$rtd))
                  '#f)
              g$x$8905$tVUFT
              (if (if (pair? g$x$8905$tVUFT)
                    (begin '#f (eq? (car g$x$8905$tVUFT) 'ctv))
                    '#f)
                (g$cons*$5159$tVUFT
                  'local-ctv
                  (cdr g$x$8905$tVUFT)
                  g$src$8906$tVUFT)
                (assertion-violation
                  'expand
                  '"invalid transformer"
                  g$x$8905$tVUFT))))))))
   (g$make-variable-transformer$8312$tVUFT
     g$make-variable-transformer$12015$tVUFT
     (case-lambda
       ((g$x$8907$tVUFT)
        (if (g$procedure?$5647$tVUFT g$x$8907$tVUFT)
          (cons 'macro! g$x$8907$tVUFT)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$8907$tVUFT)))))
   (g$make-compile-time-value$8313$tVUFT
     g$make-compile-time-value$12016$tVUFT
     (case-lambda ((g$x$8908$tVUFT) (cons 'ctv g$x$8908$tVUFT))))
   (g$variable-transformer?$8314$tVUFT
     g$variable-transformer?$12017$tVUFT
     (case-lambda
       ((g$x$8909$tVUFT)
        (if (pair? g$x$8909$tVUFT)
          (if (eq? (car g$x$8909$tVUFT) 'macro!)
            (begin '#f (g$procedure?$5647$tVUFT (cdr g$x$8909$tVUFT)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$8315$tVUFT
     g$variable-transformer-procedure$12018$tVUFT
     (case-lambda
       ((g$x$8910$tVUFT)
        (if (g$variable-transformer?$8314$tVUFT g$x$8910$tVUFT)
          (cdr g$x$8910$tVUFT)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$8910$tVUFT)))))
   (g$make-eval-transformer$8316$tVUFT
     g$make-eval-transformer$12019$tVUFT
     (case-lambda
       ((g$x$8911$tVUFT)
        (g$sanitize-binding$8311$tVUFT
          (eval-core (g$expanded->core$7831$tVUFT g$x$8911$tVUFT))
          g$x$8911$tVUFT))))
   (g$parse-define$8502$tVUFT
     g$parse-define$12020$tVUFT
     (case-lambda
       ((g$x$8912$tVUFT)
        ((case-lambda
           ((g$t$8913$tVUFT)
            ((case-lambda
               ((g$ls/false$8914$tVUFT)
                (if (if g$ls/false$8914$tVUFT
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8915$tVUFT
                               g$fmls$8916$tVUFT
                               g$b$8917$tVUFT
                               g$b*$8918$tVUFT)
                             (g$id?$8283$tVUFT g$id$8915$tVUFT)))
                          g$ls/false$8914$tVUFT))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8919$tVUFT
                         g$fmls$8920$tVUFT
                         g$b$8921$tVUFT
                         g$b*$8922$tVUFT)
                       (begin
                         (g$verify-formals$8582$tVUFT
                           g$fmls$8920$tVUFT
                           g$x$8912$tVUFT)
                         (values
                           g$id$8919$tVUFT
                           (cons
                             'defun
                             (cons
                               g$fmls$8920$tVUFT
                               (cons g$b$8921$tVUFT g$b*$8922$tVUFT)))))))
                    g$ls/false$8914$tVUFT)
                  ((case-lambda
                     ((g$t$8923$tVUFT)
                      ((case-lambda
                         ((g$ls/false$8924$tVUFT)
                          (if (if g$ls/false$8924$tVUFT
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$8925$tVUFT g$val$8926$tVUFT)
                                       (g$id?$8283$tVUFT g$id$8925$tVUFT)))
                                    g$ls/false$8924$tVUFT))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$8927$tVUFT g$val$8928$tVUFT)
                                 (values
                                   g$id$8927$tVUFT
                                   (cons 'expr g$val$8928$tVUFT))))
                              g$ls/false$8924$tVUFT)
                            ((case-lambda
                               ((g$t$8929$tVUFT)
                                ((case-lambda
                                   ((g$ls/false$8930$tVUFT)
                                    (if (if g$ls/false$8930$tVUFT
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$8931$tVUFT)
                                                 (g$id?$8283$tVUFT
                                                   g$id$8931$tVUFT)))
                                              g$ls/false$8930$tVUFT))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$8932$tVUFT)
                                           (values
                                             g$id$8932$tVUFT
                                             (cons
                                               'expr
                                               (g$bless$8525$tVUFT '(void))))))
                                        g$ls/false$8930$tVUFT)
                                      (g$syntax-violation$8674$tVUFT
                                        '#f
                                        '"invalid syntax"
                                        g$t$8929$tVUFT))))
                                 (g$syntax-dispatch$8562$tVUFT
                                   g$t$8929$tVUFT
                                   '(_ any)))))
                             g$t$8923$tVUFT))))
                       (g$syntax-dispatch$8562$tVUFT
                         g$t$8923$tVUFT
                         '(_ any any)))))
                   g$t$8913$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$8913$tVUFT
               '(_ (any . any) any . each-any)))))
         g$x$8912$tVUFT))))
   (g$parse-define-syntax$8503$tVUFT
     g$parse-define-syntax$12021$tVUFT
     (case-lambda
       ((g$x$8933$tVUFT)
        ((case-lambda
           ((g$t$8934$tVUFT)
            ((case-lambda
               ((g$ls/false$8935$tVUFT)
                (if (if g$ls/false$8935$tVUFT
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8936$tVUFT g$val$8937$tVUFT)
                             (g$id?$8283$tVUFT g$id$8936$tVUFT)))
                          g$ls/false$8935$tVUFT))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8938$tVUFT g$val$8939$tVUFT)
                       (values g$id$8938$tVUFT g$val$8939$tVUFT)))
                    g$ls/false$8935$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$8934$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$8934$tVUFT '(_ any any)))))
         g$x$8933$tVUFT))))
   (g$scheme-stx-hashtable$8504$tVUFT
     g$scheme-stx-hashtable$12022$tVUFT
     (g$make-eq-hashtable$5744$tVUFT))
   (g$scheme-stx$8505$tVUFT
     g$scheme-stx$12023$tVUFT
     (case-lambda
       ((g$sym$8940$tVUFT)
        ((case-lambda
           ((g$t$8941$tVUFT)
            (if g$t$8941$tVUFT
              g$t$8941$tVUFT
              (begin
                '#f
                ((case-lambda
                   ((g$subst$8942$tVUFT)
                    ((case-lambda
                       ((g$stx$8943$tVUFT)
                        ((case-lambda
                           ((g$stx$8944$tVUFT)
                            (begin
                              (g$hashtable-set!$5748$tVUFT
                                g$scheme-stx-hashtable$8504$tVUFT
                                g$sym$8940$tVUFT
                                g$stx$8944$tVUFT)
                              g$stx$8944$tVUFT)))
                         ((case-lambda
                            ((g$t$8945$tVUFT)
                             (if g$t$8945$tVUFT
                               ((case-lambda
                                  ((g$x$8946$tVUFT)
                                   ((case-lambda
                                      ((g$name$8947$tVUFT g$label$8948$tVUFT)
                                       (g$add-subst$8273$tVUFT
                                         (g$make-rib$8232$tVUFT
                                           (list g$name$8947$tVUFT)
                                           (list g$top-mark*$8220$tVUFT)
                                           (list g$label$8948$tVUFT)
                                           '#f
                                           '#f)
                                         g$stx$8943$tVUFT)))
                                    (car g$x$8946$tVUFT)
                                    (cdr g$x$8946$tVUFT))))
                                g$t$8945$tVUFT)
                               g$stx$8943$tVUFT)))
                          (g$assq$5145$tVUFT
                            g$sym$8940$tVUFT
                            g$subst$8942$tVUFT)))))
                     (g$make-stx$8256$tVUFT
                       g$sym$8940$tVUFT
                       g$top-mark*$8220$tVUFT
                       '()
                       '()))))
                 (g$library-subst$8050$tVUFT
                   (g$find-library-by-name$8086$tVUFT
                     '(psyntax system $all))))))))
         (g$hashtable-ref$5747$tVUFT
           g$scheme-stx-hashtable$8504$tVUFT
           g$sym$8940$tVUFT
           '#f)))))
   (g$lexical-var$8506$tVUFT g$lexical-var$12024$tVUFT car)
   (g$lexical-mutable?$8507$tVUFT g$lexical-mutable?$12025$tVUFT cdr)
   (g$set-lexical-mutable!$8508$tVUFT
     g$set-lexical-mutable!$12026$tVUFT
     set-cdr!)
   (g$add-lexical$8509$tVUFT
     g$add-lexical$12027$tVUFT
     (case-lambda
       ((g$lab$8949$tVUFT g$lex$8950$tVUFT g$r$8951$tVUFT)
        (cons
          (g$cons*$5159$tVUFT g$lab$8949$tVUFT 'lexical g$lex$8950$tVUFT '#f)
          g$r$8951$tVUFT))))
   (g$add-lexicals$8510$tVUFT
     g$add-lexicals$12028$tVUFT
     (case-lambda
       ((g$lab*$8952$tVUFT g$lex*$8953$tVUFT g$r$8954$tVUFT)
        (if (null? g$lab*$8952$tVUFT)
          g$r$8954$tVUFT
          (g$add-lexicals$8510$tVUFT
            (cdr g$lab*$8952$tVUFT)
            (cdr g$lex*$8953$tVUFT)
            (g$add-lexical$8509$tVUFT
              (car g$lab*$8952$tVUFT)
              (car g$lex*$8953$tVUFT)
              g$r$8954$tVUFT))))))
   (g$letrec-helper$8511$tVUFT
     g$letrec-helper$12029$tVUFT
     (case-lambda
       ((g$e$8955$tVUFT g$r$8956$tVUFT g$mr$8957$tVUFT g$build$8958$tVUFT)
        ((case-lambda
           ((g$t$8959$tVUFT)
            ((case-lambda
               ((g$ls/false$8960$tVUFT)
                (if g$ls/false$8960$tVUFT
                  (apply
                    (case-lambda
                      ((g$lhs*$8961$tVUFT
                         g$rhs*$8962$tVUFT
                         g$b$8963$tVUFT
                         g$b*$8964$tVUFT)
                       (if (not (g$valid-bound-ids?$8288$tVUFT
                                  g$lhs*$8961$tVUFT))
                         (g$invalid-fmls-error$8527$tVUFT
                           g$e$8955$tVUFT
                           g$lhs*$8961$tVUFT)
                         ((case-lambda
                            ((g$lex*$8965$tVUFT g$lab*$8966$tVUFT)
                             ((case-lambda
                                ((g$rib$8967$tVUFT g$r$8968$tVUFT)
                                 ((case-lambda
                                    ((g$body$8969$tVUFT g$rhs*$8970$tVUFT)
                                     (g$build$8958$tVUFT
                                       '#f
                                       g$lex*$8965$tVUFT
                                       g$rhs*$8970$tVUFT
                                       g$body$8969$tVUFT)))
                                  (g$chi-internal$8591$tVUFT
                                    (g$add-subst$8273$tVUFT
                                      g$rib$8967$tVUFT
                                      (cons g$b$8963$tVUFT g$b*$8964$tVUFT))
                                    g$r$8968$tVUFT
                                    g$mr$8957$tVUFT)
                                  (g$chi-expr*$8578$tVUFT
                                    (g$map$5157$tVUFT
                                      (case-lambda
                                        ((g$x$8971$tVUFT)
                                         (g$add-subst$8273$tVUFT
                                           g$rib$8967$tVUFT
                                           g$x$8971$tVUFT)))
                                      g$rhs*$8962$tVUFT)
                                    g$r$8968$tVUFT
                                    g$mr$8957$tVUFT))))
                              (g$make-full-rib$8251$tVUFT
                                g$lhs*$8961$tVUFT
                                g$lab*$8966$tVUFT)
                              (g$add-lexicals$8510$tVUFT
                                g$lab*$8966$tVUFT
                                g$lex*$8965$tVUFT
                                g$r$8956$tVUFT))))
                          (g$map$5157$tVUFT
                            g$gen-lexical$8222$tVUFT
                            g$lhs*$8961$tVUFT)
                          (g$map$5157$tVUFT
                            g$gen-label$8224$tVUFT
                            g$lhs*$8961$tVUFT)))))
                    g$ls/false$8960$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$8959$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$8959$tVUFT
               '(_ #(each (any any)) any . each-any)))))
         g$e$8955$tVUFT))))
   (g$letrec-transformer$8512$tVUFT
     g$letrec-transformer$12030$tVUFT
     (case-lambda
       ((g$e$8972$tVUFT g$r$8973$tVUFT g$mr$8974$tVUFT)
        (g$letrec-helper$8511$tVUFT
          g$e$8972$tVUFT
          g$r$8973$tVUFT
          g$mr$8974$tVUFT
          g$build-letrec$8214$tVUFT))))
   (g$letrec*-transformer$8513$tVUFT
     g$letrec*-transformer$12031$tVUFT
     (case-lambda
       ((g$e$8975$tVUFT g$r$8976$tVUFT g$mr$8977$tVUFT)
        (g$letrec-helper$8511$tVUFT
          g$e$8975$tVUFT
          g$r$8976$tVUFT
          g$mr$8977$tVUFT
          g$build-letrec*$8215$tVUFT))))
   (g$fluid-let-syntax-transformer$8514$tVUFT
     g$fluid-let-syntax-transformer$12032$tVUFT
     (case-lambda
       ((g$e$8978$tVUFT g$r$8979$tVUFT g$mr$8980$tVUFT)
        (letrec* ((g$lookup$8981$tVUFT
                    (case-lambda
                      ((g$x$8991$tVUFT)
                       ((case-lambda
                          ((g$t$8992$tVUFT)
                           (if g$t$8992$tVUFT
                             g$t$8992$tVUFT
                             (begin
                               '#f
                               (g$syntax-violation$8674$tVUFT
                                 '#f
                                 '"unbound identifier"
                                 g$e$8978$tVUFT
                                 g$x$8991$tVUFT)))))
                        (g$id->label$8296$tVUFT g$x$8991$tVUFT))))))
          ((case-lambda
             ((g$t$8982$tVUFT)
              ((case-lambda
                 ((g$ls/false$8983$tVUFT)
                  (if g$ls/false$8983$tVUFT
                    (apply
                      (case-lambda
                        ((g$lhs*$8984$tVUFT
                           g$rhs*$8985$tVUFT
                           g$b$8986$tVUFT
                           g$b*$8987$tVUFT)
                         (if (not (g$valid-bound-ids?$8288$tVUFT
                                    g$lhs*$8984$tVUFT))
                           (g$invalid-fmls-error$8527$tVUFT
                             g$e$8978$tVUFT
                             g$lhs*$8984$tVUFT)
                           ((case-lambda
                              ((g$lab*$8988$tVUFT g$rhs*$8989$tVUFT)
                               (g$chi-internal$8591$tVUFT
                                 (cons g$b$8986$tVUFT g$b*$8987$tVUFT)
                                 (append
                                   (g$map$5157$tVUFT
                                     cons
                                     g$lab*$8988$tVUFT
                                     g$rhs*$8989$tVUFT)
                                   g$r$8979$tVUFT)
                                 (append
                                   (g$map$5157$tVUFT
                                     cons
                                     g$lab*$8988$tVUFT
                                     g$rhs*$8989$tVUFT)
                                   g$mr$8980$tVUFT))))
                            (g$map$5157$tVUFT
                              g$lookup$8981$tVUFT
                              g$lhs*$8984$tVUFT)
                            (g$map$5157$tVUFT
                              (case-lambda
                                ((g$x$8990$tVUFT)
                                 (g$make-eval-transformer$8316$tVUFT
                                   (g$expand-transformer$8607$tVUFT
                                     g$x$8990$tVUFT
                                     g$mr$8980$tVUFT))))
                              g$rhs*$8985$tVUFT)))))
                      g$ls/false$8983$tVUFT)
                    (g$syntax-violation$8674$tVUFT
                      '#f
                      '"invalid syntax"
                      g$t$8982$tVUFT))))
               (g$syntax-dispatch$8562$tVUFT
                 g$t$8982$tVUFT
                 '(_ #(each (any any)) any . each-any)))))
           g$e$8978$tVUFT)))))
   (g$type-descriptor-transformer$8515$tVUFT
     g$type-descriptor-transformer$12033$tVUFT
     (case-lambda
       ((g$e$8993$tVUFT g$r$8994$tVUFT g$mr$8995$tVUFT)
        ((case-lambda
           ((g$t$8996$tVUFT)
            ((case-lambda
               ((g$ls/false$8997$tVUFT)
                (if (if g$ls/false$8997$tVUFT
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8998$tVUFT)
                             (g$id?$8283$tVUFT g$id$8998$tVUFT)))
                          g$ls/false$8997$tVUFT))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8999$tVUFT)
                       ((case-lambda
                          ((g$lab$9000$tVUFT)
                           ((case-lambda
                              ((g$b$9001$tVUFT)
                               ((case-lambda
                                  ((g$type$9002$tVUFT)
                                   (begin
                                     (if (not g$lab$9000$tVUFT)
                                       (g$raise-unbound-error$8302$tVUFT
                                         g$id$8999$tVUFT)
                                       (void))
                                     (if (not (if (eq? g$type$9002$tVUFT '$rtd)
                                                (begin
                                                  '#f
                                                  (not (list?
                                                         (g$binding-value$8301$tVUFT
                                                           g$b$9001$tVUFT))))
                                                '#f))
                                       (g$syntax-violation$8674$tVUFT
                                         '#f
                                         '"not a record type"
                                         g$e$8993$tVUFT)
                                       (void))
                                     (list
                                       'quote
                                       (g$binding-value$8301$tVUFT
                                         g$b$9001$tVUFT)))))
                                (g$binding-type$8300$tVUFT g$b$9001$tVUFT))))
                            (g$label->binding$8298$tVUFT
                              g$lab$9000$tVUFT
                              g$r$8994$tVUFT))))
                        (g$id->label$8296$tVUFT g$id$8999$tVUFT))))
                    g$ls/false$8997$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$8996$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$8996$tVUFT '(_ any)))))
         g$e$8993$tVUFT))))
   (g$record-type-descriptor-transformer$8516$tVUFT
     g$record-type-descriptor-transformer$12034$tVUFT
     (case-lambda
       ((g$e$9003$tVUFT g$r$9004$tVUFT g$mr$9005$tVUFT)
        ((case-lambda
           ((g$t$9006$tVUFT)
            ((case-lambda
               ((g$ls/false$9007$tVUFT)
                (if (if g$ls/false$9007$tVUFT
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$9008$tVUFT)
                             (g$id?$8283$tVUFT g$id$9008$tVUFT)))
                          g$ls/false$9007$tVUFT))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$9009$tVUFT)
                       ((case-lambda
                          ((g$lab$9010$tVUFT)
                           ((case-lambda
                              ((g$b$9011$tVUFT)
                               ((case-lambda
                                  ((g$type$9012$tVUFT)
                                   (begin
                                     (if (not g$lab$9010$tVUFT)
                                       (g$raise-unbound-error$8302$tVUFT
                                         g$id$9009$tVUFT)
                                       (void))
                                     (if (not (if (eq? g$type$9012$tVUFT '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$8301$tVUFT
                                                      g$b$9011$tVUFT)))
                                                '#f))
                                       (g$syntax-violation$8674$tVUFT
                                         '#f
                                         '"not a record type"
                                         g$e$9003$tVUFT)
                                       (void))
                                     (g$chi-expr$8580$tVUFT
                                       (car (g$binding-value$8301$tVUFT
                                              g$b$9011$tVUFT))
                                       g$r$9004$tVUFT
                                       g$mr$9005$tVUFT))))
                                (g$binding-type$8300$tVUFT g$b$9011$tVUFT))))
                            (g$label->binding$8298$tVUFT
                              g$lab$9010$tVUFT
                              g$r$9004$tVUFT))))
                        (g$id->label$8296$tVUFT g$id$9009$tVUFT))))
                    g$ls/false$9007$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9006$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$9006$tVUFT '(_ any)))))
         g$e$9003$tVUFT))))
   (g$record-constructor-descriptor-transformer$8517$tVUFT
     g$record-constructor-descriptor-transformer$12035$tVUFT
     (case-lambda
       ((g$e$9013$tVUFT g$r$9014$tVUFT g$mr$9015$tVUFT)
        ((case-lambda
           ((g$t$9016$tVUFT)
            ((case-lambda
               ((g$ls/false$9017$tVUFT)
                (if (if g$ls/false$9017$tVUFT
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$9018$tVUFT)
                             (g$id?$8283$tVUFT g$id$9018$tVUFT)))
                          g$ls/false$9017$tVUFT))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$9019$tVUFT)
                       ((case-lambda
                          ((g$lab$9020$tVUFT)
                           ((case-lambda
                              ((g$b$9021$tVUFT)
                               ((case-lambda
                                  ((g$type$9022$tVUFT)
                                   (begin
                                     (if (not g$lab$9020$tVUFT)
                                       (g$raise-unbound-error$8302$tVUFT
                                         g$id$9019$tVUFT)
                                       (void))
                                     (if (not (if (eq? g$type$9022$tVUFT '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$8301$tVUFT
                                                      g$b$9021$tVUFT)))
                                                '#f))
                                       (g$syntax-violation$8674$tVUFT
                                         '#f
                                         '"invalid type"
                                         g$e$9013$tVUFT)
                                       (void))
                                     (g$chi-expr$8580$tVUFT
                                       (g$cadr$5654$tVUFT
                                         (g$binding-value$8301$tVUFT
                                           g$b$9021$tVUFT))
                                       g$r$9014$tVUFT
                                       g$mr$9015$tVUFT))))
                                (g$binding-type$8300$tVUFT g$b$9021$tVUFT))))
                            (g$label->binding$8298$tVUFT
                              g$lab$9020$tVUFT
                              g$r$9014$tVUFT))))
                        (g$id->label$8296$tVUFT g$id$9019$tVUFT))))
                    g$ls/false$9017$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9016$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$9016$tVUFT '(_ any)))))
         g$e$9013$tVUFT))))
   (g$when-macro$8518$tVUFT
     g$when-macro$12036$tVUFT
     (case-lambda
       ((g$e$9023$tVUFT)
        ((case-lambda
           ((g$t$9024$tVUFT)
            ((case-lambda
               ((g$ls/false$9025$tVUFT)
                (if g$ls/false$9025$tVUFT
                  (apply
                    (case-lambda
                      ((g$test$9026$tVUFT g$e$9027$tVUFT g$e*$9028$tVUFT)
                       (g$bless$8525$tVUFT
                         (list
                           'if
                           g$test$9026$tVUFT
                           (cons
                             'begin
                             (cons g$e$9027$tVUFT g$e*$9028$tVUFT))))))
                    g$ls/false$9025$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9024$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$9024$tVUFT
               '(_ any any . each-any)))))
         g$e$9023$tVUFT))))
   (g$unless-macro$8519$tVUFT
     g$unless-macro$12037$tVUFT
     (case-lambda
       ((g$e$9029$tVUFT)
        ((case-lambda
           ((g$t$9030$tVUFT)
            ((case-lambda
               ((g$ls/false$9031$tVUFT)
                (if g$ls/false$9031$tVUFT
                  (apply
                    (case-lambda
                      ((g$test$9032$tVUFT g$e$9033$tVUFT g$e*$9034$tVUFT)
                       (g$bless$8525$tVUFT
                         (list
                           'if
                           (list 'not g$test$9032$tVUFT)
                           (cons
                             'begin
                             (cons g$e$9033$tVUFT g$e*$9034$tVUFT))))))
                    g$ls/false$9031$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9030$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$9030$tVUFT
               '(_ any any . each-any)))))
         g$e$9029$tVUFT))))
   (g$if-transformer$8520$tVUFT
     g$if-transformer$12038$tVUFT
     (case-lambda
       ((g$e$9035$tVUFT g$r$9036$tVUFT g$mr$9037$tVUFT)
        ((case-lambda
           ((g$t$9038$tVUFT)
            ((case-lambda
               ((g$ls/false$9039$tVUFT)
                (if g$ls/false$9039$tVUFT
                  (apply
                    (case-lambda
                      ((g$e0$9040$tVUFT g$e1$9041$tVUFT g$e2$9042$tVUFT)
                       (list
                         'if
                         (g$chi-expr$8580$tVUFT
                           g$e0$9040$tVUFT
                           g$r$9036$tVUFT
                           g$mr$9037$tVUFT)
                         (g$chi-expr$8580$tVUFT
                           g$e1$9041$tVUFT
                           g$r$9036$tVUFT
                           g$mr$9037$tVUFT)
                         (g$chi-expr$8580$tVUFT
                           g$e2$9042$tVUFT
                           g$r$9036$tVUFT
                           g$mr$9037$tVUFT))))
                    g$ls/false$9039$tVUFT)
                  ((case-lambda
                     ((g$t$9043$tVUFT)
                      ((case-lambda
                         ((g$ls/false$9044$tVUFT)
                          (if g$ls/false$9044$tVUFT
                            (apply
                              (case-lambda
                                ((g$e0$9045$tVUFT g$e1$9046$tVUFT)
                                 (list
                                   'if
                                   (g$chi-expr$8580$tVUFT
                                     g$e0$9045$tVUFT
                                     g$r$9036$tVUFT
                                     g$mr$9037$tVUFT)
                                   (g$chi-expr$8580$tVUFT
                                     g$e1$9046$tVUFT
                                     g$r$9036$tVUFT
                                     g$mr$9037$tVUFT)
                                   (g$build-void$8213$tVUFT))))
                              g$ls/false$9044$tVUFT)
                            (g$syntax-violation$8674$tVUFT
                              '#f
                              '"invalid syntax"
                              g$t$9043$tVUFT))))
                       (g$syntax-dispatch$8562$tVUFT
                         g$t$9043$tVUFT
                         '(_ any any)))))
                   g$t$9038$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$9038$tVUFT '(_ any any any)))))
         g$e$9035$tVUFT))))
   (g$case-macro$8521$tVUFT
     g$case-macro$12039$tVUFT
     (case-lambda
       ((g$e$9047$tVUFT)
        (letrec* ((g$build-last$9048$tVUFT
                    (case-lambda
                      ((g$cls$9068$tVUFT)
                       ((case-lambda
                          ((g$t$9069$tVUFT)
                           ((case-lambda
                              ((g$ls/false$9070$tVUFT)
                               (if g$ls/false$9070$tVUFT
                                 (apply
                                   (case-lambda
                                     ((g$e$9071$tVUFT g$e*$9072$tVUFT)
                                      (cons
                                        'begin
                                        (cons g$e$9071$tVUFT g$e*$9072$tVUFT))))
                                   g$ls/false$9070$tVUFT)
                                 ((case-lambda
                                    ((g$t$9073$tVUFT)
                                     ((case-lambda
                                        ((g$ls/false$9074$tVUFT)
                                         (if g$ls/false$9074$tVUFT
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$9049$tVUFT
                                                  g$cls$9068$tVUFT
                                                  '(if #f #f))))
                                             g$ls/false$9074$tVUFT)
                                           (g$syntax-violation$8674$tVUFT
                                             '#f
                                             '"invalid syntax"
                                             g$t$9073$tVUFT))))
                                      (g$syntax-dispatch$8562$tVUFT
                                        g$t$9073$tVUFT
                                        '_))))
                                  g$t$9069$tVUFT))))
                            (g$syntax-dispatch$8562$tVUFT
                              g$t$9069$tVUFT
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$9068$tVUFT))))
                  (g$build-one$9049$tVUFT
                    (case-lambda
                      ((g$cls$9061$tVUFT g$k$9062$tVUFT)
                       ((case-lambda
                          ((g$t$9063$tVUFT)
                           ((case-lambda
                              ((g$ls/false$9064$tVUFT)
                               (if g$ls/false$9064$tVUFT
                                 (apply
                                   (case-lambda
                                     ((g$d*$9065$tVUFT
                                        g$e$9066$tVUFT
                                        g$e*$9067$tVUFT)
                                      (list
                                        'if
                                        (list
                                          'memv
                                          't
                                          (list 'quote g$d*$9065$tVUFT))
                                        (cons
                                          'begin
                                          (cons g$e$9066$tVUFT g$e*$9067$tVUFT))
                                        g$k$9062$tVUFT)))
                                   g$ls/false$9064$tVUFT)
                                 (g$syntax-violation$8674$tVUFT
                                   '#f
                                   '"invalid syntax"
                                   g$t$9063$tVUFT))))
                            (g$syntax-dispatch$8562$tVUFT
                              g$t$9063$tVUFT
                              '(each-any any . each-any)))))
                        g$cls$9061$tVUFT)))))
          ((case-lambda
             ((g$t$9050$tVUFT)
              ((case-lambda
                 ((g$ls/false$9051$tVUFT)
                  (if g$ls/false$9051$tVUFT
                    (apply
                      (case-lambda
                        ((g$expr$9052$tVUFT)
                         (g$bless$8525$tVUFT
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$9052$tVUFT))
                               '((if #f #f)))))))
                      g$ls/false$9051$tVUFT)
                    ((case-lambda
                       ((g$t$9053$tVUFT)
                        ((case-lambda
                           ((g$ls/false$9054$tVUFT)
                            (if g$ls/false$9054$tVUFT
                              (apply
                                (case-lambda
                                  ((g$expr$9055$tVUFT
                                     g$cls$9056$tVUFT
                                     g$cls*$9057$tVUFT)
                                   (g$bless$8525$tVUFT
                                     (list
                                       'let
                                       (list (list 't g$expr$9055$tVUFT))
                                       ((letrec ((g$f$9058$tVUFT
                                                   (case-lambda
                                                     ((g$cls$9059$tVUFT
                                                        g$cls*$9060$tVUFT)
                                                      (if (null?
                                                            g$cls*$9060$tVUFT)
                                                        (g$build-last$9048$tVUFT
                                                          g$cls$9059$tVUFT)
                                                        (g$build-one$9049$tVUFT
                                                          g$cls$9059$tVUFT
                                                          (g$f$9058$tVUFT
                                                            (car g$cls*$9060$tVUFT)
                                                            (cdr g$cls*$9060$tVUFT))))))))
                                          g$f$9058$tVUFT)
                                        g$cls$9056$tVUFT
                                        g$cls*$9057$tVUFT)))))
                                g$ls/false$9054$tVUFT)
                              (g$syntax-violation$8674$tVUFT
                                '#f
                                '"invalid syntax"
                                g$t$9053$tVUFT))))
                         (g$syntax-dispatch$8562$tVUFT
                           g$t$9053$tVUFT
                           '(_ any any . each-any)))))
                     g$t$9050$tVUFT))))
               (g$syntax-dispatch$8562$tVUFT g$t$9050$tVUFT '(_ any)))))
           g$e$9047$tVUFT)))))
   (g$quote-transformer$8522$tVUFT
     g$quote-transformer$12040$tVUFT
     (case-lambda
       ((g$e$9075$tVUFT g$r$9076$tVUFT g$mr$9077$tVUFT)
        ((case-lambda
           ((g$t$9078$tVUFT)
            ((case-lambda
               ((g$ls/false$9079$tVUFT)
                (if g$ls/false$9079$tVUFT
                  (apply
                    (case-lambda
                      ((g$datum$9080$tVUFT)
                       (list
                         'quote
                         (g$stx->datum$8294$tVUFT g$datum$9080$tVUFT))))
                    g$ls/false$9079$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9078$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$9078$tVUFT '(_ any)))))
         g$e$9075$tVUFT))))
   (g$case-lambda-transformer$8523$tVUFT
     g$case-lambda-transformer$12041$tVUFT
     (case-lambda
       ((g$e$9081$tVUFT g$r$9082$tVUFT g$mr$9083$tVUFT)
        ((case-lambda
           ((g$t$9084$tVUFT)
            ((case-lambda
               ((g$ls/false$9085$tVUFT)
                (if g$ls/false$9085$tVUFT
                  (apply
                    (case-lambda
                      ((g$fmls*$9086$tVUFT g$b*$9087$tVUFT g$b**$9088$tVUFT)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$8584$tVUFT
                              g$e$9081$tVUFT
                              g$fmls*$9086$tVUFT
                              (g$map$5157$tVUFT
                                cons
                                g$b*$9087$tVUFT
                                g$b**$9088$tVUFT)
                              g$r$9082$tVUFT
                              g$mr$9083$tVUFT)))
                         (case-lambda
                           ((g$fmls*$9091$tVUFT g$body*$9092$tVUFT)
                            ((case-lambda
                               ((g$body*$9093$tVUFT g$fmls*$9094$tVUFT)
                                (g$build-case-lambda$8210$tVUFT
                                  '#f
                                  g$fmls*$9094$tVUFT
                                  g$body*$9093$tVUFT)))
                             g$body*$9092$tVUFT
                             g$fmls*$9091$tVUFT))))))
                    g$ls/false$9085$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9084$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$9084$tVUFT
               '(_ . #(each (any any . each-any)))))))
         g$e$9081$tVUFT))))
   (g$lambda-transformer$8524$tVUFT
     g$lambda-transformer$12042$tVUFT
     (case-lambda
       ((g$e$9095$tVUFT g$r$9096$tVUFT g$mr$9097$tVUFT)
        ((case-lambda
           ((g$t$9098$tVUFT)
            ((case-lambda
               ((g$ls/false$9099$tVUFT)
                (if g$ls/false$9099$tVUFT
                  (apply
                    (case-lambda
                      ((g$fmls$9100$tVUFT g$b$9101$tVUFT g$b*$9102$tVUFT)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$8583$tVUFT
                              g$e$9095$tVUFT
                              g$fmls$9100$tVUFT
                              (cons g$b$9101$tVUFT g$b*$9102$tVUFT)
                              g$r$9096$tVUFT
                              g$mr$9097$tVUFT)))
                         (case-lambda
                           ((g$fmls$9105$tVUFT g$body$9106$tVUFT)
                            ((case-lambda
                               ((g$body$9107$tVUFT g$fmls$9108$tVUFT)
                                (g$build-lambda$8209$tVUFT
                                  '#f
                                  g$fmls$9108$tVUFT
                                  g$body$9107$tVUFT)))
                             g$body$9106$tVUFT
                             g$fmls$9105$tVUFT))))))
                    g$ls/false$9099$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9098$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$9098$tVUFT
               '(_ any any . each-any)))))
         g$e$9095$tVUFT))))
   (g$bless$8525$tVUFT
     g$bless$12043$tVUFT
     (case-lambda
       ((g$x$9109$tVUFT)
        (g$mkstx$8271$tVUFT
          ((letrec ((g$f$9110$tVUFT
                      (case-lambda
                        ((g$x$9111$tVUFT)
                         (if (g$stx?$8255$tVUFT g$x$9111$tVUFT)
                           g$x$9111$tVUFT
                           (if (pair? g$x$9111$tVUFT)
                             (cons
                               (g$f$9110$tVUFT (car g$x$9111$tVUFT))
                               (g$f$9110$tVUFT (cdr g$x$9111$tVUFT)))
                             (if (g$symbol?$5645$tVUFT g$x$9111$tVUFT)
                               (g$scheme-stx$8505$tVUFT g$x$9111$tVUFT)
                               (if (g$vector?$5643$tVUFT g$x$9111$tVUFT)
                                 (g$vector-map$5705$tVUFT
                                   g$f$9110$tVUFT
                                   g$x$9111$tVUFT)
                                 g$x$9111$tVUFT))))))))
             g$f$9110$tVUFT)
           g$x$9109$tVUFT)
          '()
          '()
          '()))))
   (g$with-syntax-macro$8526$tVUFT
     g$with-syntax-macro$12044$tVUFT
     (case-lambda
       ((g$e$9112$tVUFT)
        ((case-lambda
           ((g$t$9113$tVUFT)
            ((case-lambda
               ((g$ls/false$9114$tVUFT)
                (if g$ls/false$9114$tVUFT
                  (apply
                    (case-lambda
                      ((g$pat*$9115$tVUFT
                         g$expr*$9116$tVUFT
                         g$b$9117$tVUFT
                         g$b*$9118$tVUFT)
                       ((case-lambda
                          ((g$idn*$9119$tVUFT)
                           (begin
                             (g$verify-formals$8582$tVUFT
                               (g$map$5157$tVUFT car g$idn*$9119$tVUFT)
                               g$e$9112$tVUFT)
                             ((case-lambda
                                ((g$t*$9120$tVUFT)
                                 (g$bless$8525$tVUFT
                                   (list
                                     'let
                                     (g$map$5157$tVUFT
                                       list
                                       g$t*$9120$tVUFT
                                       g$expr*$9116$tVUFT)
                                     ((letrec ((g$f$9121$tVUFT
                                                 (case-lambda
                                                   ((g$pat*$9122$tVUFT
                                                      g$t*$9123$tVUFT)
                                                    (if (null?
                                                          g$pat*$9122$tVUFT)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$9117$tVUFT
                                                            g$b*$9118$tVUFT)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$9123$tVUFT)
                                                        '()
                                                        (list
                                                          (car g$pat*$9122$tVUFT)
                                                          (g$f$9121$tVUFT
                                                            (cdr g$pat*$9122$tVUFT)
                                                            (cdr g$t*$9123$tVUFT)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$9122$tVUFT))
                                                            (car g$t*$9123$tVUFT)))))))))
                                        g$f$9121$tVUFT)
                                      g$pat*$9115$tVUFT
                                      g$t*$9120$tVUFT)))))
                              (g$generate-temporaries$8664$tVUFT
                                g$expr*$9116$tVUFT)))))
                        ((letrec ((g$f$9124$tVUFT
                                    (case-lambda
                                      ((g$pat*$9125$tVUFT)
                                       (if (null? g$pat*$9125$tVUFT)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$8561$tVUFT
                                                (car g$pat*$9125$tVUFT)
                                                '())))
                                           (case-lambda
                                             ((g$pat$9128$tVUFT
                                                g$idn*$9129$tVUFT)
                                              ((case-lambda
                                                 ((g$idn*$9130$tVUFT
                                                    g$pat$9131$tVUFT)
                                                  (append
                                                    g$idn*$9130$tVUFT
                                                    (g$f$9124$tVUFT
                                                      (cdr g$pat*$9125$tVUFT)))))
                                               g$idn*$9129$tVUFT
                                               g$pat$9128$tVUFT)))))))))
                           g$f$9124$tVUFT)
                         g$pat*$9115$tVUFT))))
                    g$ls/false$9114$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9113$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$9113$tVUFT
               '(_ #(each (any any)) any . each-any)))))
         g$e$9112$tVUFT))))
   (g$invalid-fmls-error$8527$tVUFT
     g$invalid-fmls-error$12045$tVUFT
     (case-lambda
       ((g$stx$9132$tVUFT g$fmls$9133$tVUFT)
        ((case-lambda
           ((g$t$9134$tVUFT)
            ((case-lambda
               ((g$ls/false$9135$tVUFT)
                (if g$ls/false$9135$tVUFT
                  (apply
                    (case-lambda
                      ((g$id*$9136$tVUFT g$last$9137$tVUFT)
                       ((letrec ((g$f$9138$tVUFT
                                   (case-lambda
                                     ((g$id*$9139$tVUFT)
                                      (if (null? g$id*$9139$tVUFT)
                                        (values)
                                        (if (not (g$id?$8283$tVUFT
                                                   (car g$id*$9139$tVUFT)))
                                          (g$syntax-violation$8674$tVUFT
                                            '#f
                                            '"not an identifier"
                                            g$stx$9132$tVUFT
                                            (car g$id*$9139$tVUFT))
                                          (begin
                                            (g$f$9138$tVUFT
                                              (cdr g$id*$9139$tVUFT))
                                            (if (g$bound-id-member?$8290$tVUFT
                                                  (car g$id*$9139$tVUFT)
                                                  (cdr g$id*$9139$tVUFT))
                                              (g$syntax-violation$8674$tVUFT
                                                '#f
                                                '"duplicate binding"
                                                g$stx$9132$tVUFT
                                                (car g$id*$9139$tVUFT))
                                              (void)))))))))
                          g$f$9138$tVUFT)
                        (if (g$id?$8283$tVUFT g$last$9137$tVUFT)
                          (cons g$last$9137$tVUFT g$id*$9136$tVUFT)
                          (if (g$syntax-null?$8278$tVUFT g$last$9137$tVUFT)
                            g$id*$9136$tVUFT
                            (g$syntax-violation$8674$tVUFT
                              '#f
                              '"not an identifier"
                              g$stx$9132$tVUFT
                              g$last$9137$tVUFT))))))
                    g$ls/false$9135$tVUFT)
                  ((case-lambda
                     ((g$t$9140$tVUFT)
                      ((case-lambda
                         ((g$ls/false$9141$tVUFT)
                          (if g$ls/false$9141$tVUFT
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$8674$tVUFT
                                   '#f
                                   '"malformed binding form"
                                   g$stx$9132$tVUFT
                                   g$fmls$9133$tVUFT)))
                              g$ls/false$9141$tVUFT)
                            (g$syntax-violation$8674$tVUFT
                              '#f
                              '"invalid syntax"
                              g$t$9140$tVUFT))))
                       (g$syntax-dispatch$8562$tVUFT g$t$9140$tVUFT '_))))
                   g$t$9134$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$9134$tVUFT
               '#(each+ any () any)))))
         g$fmls$9133$tVUFT))))
   (g$let-macro$8528$tVUFT
     g$let-macro$12046$tVUFT
     (case-lambda
       ((g$stx$9142$tVUFT)
        ((case-lambda
           ((g$t$9143$tVUFT)
            ((case-lambda
               ((g$ls/false$9144$tVUFT)
                (if g$ls/false$9144$tVUFT
                  (apply
                    (case-lambda
                      ((g$lhs*$9145$tVUFT
                         g$rhs*$9146$tVUFT
                         g$b$9147$tVUFT
                         g$b*$9148$tVUFT)
                       (if (g$valid-bound-ids?$8288$tVUFT g$lhs*$9145$tVUFT)
                         (g$bless$8525$tVUFT
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$9145$tVUFT
                                 (cons g$b$9147$tVUFT g$b*$9148$tVUFT)))
                             g$rhs*$9146$tVUFT))
                         (g$invalid-fmls-error$8527$tVUFT
                           g$stx$9142$tVUFT
                           g$lhs*$9145$tVUFT))))
                    g$ls/false$9144$tVUFT)
                  ((case-lambda
                     ((g$t$9149$tVUFT)
                      ((case-lambda
                         ((g$ls/false$9150$tVUFT)
                          (if (if g$ls/false$9150$tVUFT
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$9151$tVUFT
                                         g$lhs*$9152$tVUFT
                                         g$rhs*$9153$tVUFT
                                         g$b$9154$tVUFT
                                         g$b*$9155$tVUFT)
                                       (g$id?$8283$tVUFT g$f$9151$tVUFT)))
                                    g$ls/false$9150$tVUFT))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$9156$tVUFT
                                   g$lhs*$9157$tVUFT
                                   g$rhs*$9158$tVUFT
                                   g$b$9159$tVUFT
                                   g$b*$9160$tVUFT)
                                 (if (g$valid-bound-ids?$8288$tVUFT
                                       g$lhs*$9157$tVUFT)
                                   (g$bless$8525$tVUFT
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$9156$tVUFT
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$9157$tVUFT
                                                 (cons
                                                   g$b$9159$tVUFT
                                                   g$b*$9160$tVUFT)))))
                                         g$f$9156$tVUFT)
                                       g$rhs*$9158$tVUFT))
                                   (g$invalid-fmls-error$8527$tVUFT
                                     g$stx$9142$tVUFT
                                     g$lhs*$9157$tVUFT))))
                              g$ls/false$9150$tVUFT)
                            (g$syntax-violation$8674$tVUFT
                              '#f
                              '"invalid syntax"
                              g$t$9149$tVUFT))))
                       (g$syntax-dispatch$8562$tVUFT
                         g$t$9149$tVUFT
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$9143$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$9143$tVUFT
               '(_ #(each (any any)) any . each-any)))))
         g$stx$9142$tVUFT))))
   (g$let-values-macro$8529$tVUFT
     g$let-values-macro$12047$tVUFT
     (case-lambda
       ((g$stx$9161$tVUFT)
        (letrec* ((g$rename$9162$tVUFT
                    (case-lambda
                      ((g$x$9213$tVUFT g$old*$9214$tVUFT g$new*$9215$tVUFT)
                       (begin
                         (if (not (g$id?$8283$tVUFT g$x$9213$tVUFT))
                           (g$syntax-violation$8674$tVUFT
                             '#f
                             '"not an indentifier"
                             g$stx$9161$tVUFT
                             g$x$9213$tVUFT)
                           (void))
                         (if (g$bound-id-member?$8290$tVUFT
                               g$x$9213$tVUFT
                               g$old*$9214$tVUFT)
                           (g$syntax-violation$8674$tVUFT
                             '#f
                             '"duplicate binding"
                             g$stx$9161$tVUFT
                             g$x$9213$tVUFT)
                           (void))
                         ((case-lambda
                            ((g$y$9216$tVUFT)
                             (values
                               g$y$9216$tVUFT
                               (cons g$x$9213$tVUFT g$old*$9214$tVUFT)
                               (cons g$y$9216$tVUFT g$new*$9215$tVUFT))))
                          (gensym
                            (g$syntax->datum$8677$tVUFT g$x$9213$tVUFT)))))))
                  (g$rename*$9163$tVUFT
                    (case-lambda
                      ((g$x*$9204$tVUFT g$old*$9205$tVUFT g$new*$9206$tVUFT)
                       (if (null? g$x*$9204$tVUFT)
                         (values '() g$old*$9205$tVUFT g$new*$9206$tVUFT)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$9162$tVUFT
                                (car g$x*$9204$tVUFT)
                                g$old*$9205$tVUFT
                                g$new*$9206$tVUFT)))
                           (case-lambda
                             ((g$x$9207$tVUFT
                                g$old*$9208$tVUFT
                                g$new*$9209$tVUFT)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$9163$tVUFT
                                     (cdr g$x*$9204$tVUFT)
                                     g$old*$9208$tVUFT
                                     g$new*$9209$tVUFT)))
                                (case-lambda
                                  ((g$x*$9210$tVUFT
                                     g$old*$9211$tVUFT
                                     g$new*$9212$tVUFT)
                                   (values
                                     (cons g$x$9207$tVUFT g$x*$9210$tVUFT)
                                     g$old*$9211$tVUFT
                                     g$new*$9212$tVUFT))))))))))))
          ((case-lambda
             ((g$t$9164$tVUFT)
              ((case-lambda
                 ((g$ls/false$9165$tVUFT)
                  (if g$ls/false$9165$tVUFT
                    (apply
                      (case-lambda
                        ((g$b$9166$tVUFT g$b*$9167$tVUFT)
                         (g$cons*$5159$tVUFT
                           (g$bless$8525$tVUFT 'let)
                           '()
                           g$b$9166$tVUFT
                           g$b*$9167$tVUFT)))
                      g$ls/false$9165$tVUFT)
                    ((case-lambda
                       ((g$t$9168$tVUFT)
                        ((case-lambda
                           ((g$ls/false$9169$tVUFT)
                            (if g$ls/false$9169$tVUFT
                              (apply
                                (case-lambda
                                  ((g$lhs*$9170$tVUFT
                                     g$rhs*$9171$tVUFT
                                     g$b$9172$tVUFT
                                     g$b*$9173$tVUFT)
                                   (g$bless$8525$tVUFT
                                     ((letrec ((g$f$9174$tVUFT
                                                 (case-lambda
                                                   ((g$lhs*$9175$tVUFT
                                                      g$rhs*$9176$tVUFT
                                                      g$old*$9177$tVUFT
                                                      g$new*$9178$tVUFT)
                                                    (if (null?
                                                          g$lhs*$9175$tVUFT)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (g$map$5157$tVUFT
                                                            list
                                                            g$old*$9177$tVUFT
                                                            g$new*$9178$tVUFT)
                                                          (cons
                                                            g$b$9172$tVUFT
                                                            g$b*$9173$tVUFT)))
                                                      ((case-lambda
                                                         ((g$t$9179$tVUFT)
                                                          ((case-lambda
                                                             ((g$ls/false$9180$tVUFT)
                                                              (if g$ls/false$9180$tVUFT
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$9181$tVUFT)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$9163$tVUFT
                                                                            g$x*$9181$tVUFT
                                                                            g$old*$9177$tVUFT
                                                                            g$new*$9178$tVUFT)))
                                                                       (case-lambda
                                                                         ((g$y*$9185$tVUFT
                                                                            g$old*$9186$tVUFT
                                                                            g$new*$9187$tVUFT)
                                                                          ((case-lambda
                                                                             ((g$new*$9188$tVUFT
                                                                                g$old*$9189$tVUFT
                                                                                g$y*$9190$tVUFT)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$9176$tVUFT))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$9190$tVUFT
                                                                                  (g$f$9174$tVUFT
                                                                                    (cdr g$lhs*$9175$tVUFT)
                                                                                    (cdr g$rhs*$9176$tVUFT)
                                                                                    g$old*$9189$tVUFT
                                                                                    g$new*$9188$tVUFT)))))
                                                                           g$new*$9187$tVUFT
                                                                           g$old*$9186$tVUFT
                                                                           g$y*$9185$tVUFT))))))
                                                                  g$ls/false$9180$tVUFT)
                                                                ((case-lambda
                                                                   ((g$t$9191$tVUFT)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9192$tVUFT)
                                                                        (if g$ls/false$9192$tVUFT
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$9193$tVUFT
                                                                                 g$x$9194$tVUFT)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$9162$tVUFT
                                                                                      g$x$9194$tVUFT
                                                                                      g$old*$9177$tVUFT
                                                                                      g$new*$9178$tVUFT)))
                                                                                 (case-lambda
                                                                                   ((g$y$9195$tVUFT
                                                                                      g$old*$9196$tVUFT
                                                                                      g$new*$9197$tVUFT)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$9163$tVUFT
                                                                                           g$x*$9193$tVUFT
                                                                                           g$old*$9196$tVUFT
                                                                                           g$new*$9197$tVUFT)))
                                                                                      (case-lambda
                                                                                        ((g$y*$9198$tVUFT
                                                                                           g$old*$9199$tVUFT
                                                                                           g$new*$9200$tVUFT)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$9176$tVUFT))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$9198$tVUFT
                                                                                               g$y$9195$tVUFT)
                                                                                             (g$f$9174$tVUFT
                                                                                               (cdr g$lhs*$9175$tVUFT)
                                                                                               (cdr g$rhs*$9176$tVUFT)
                                                                                               g$old*$9199$tVUFT
                                                                                               g$new*$9200$tVUFT)))))))))))
                                                                            g$ls/false$9192$tVUFT)
                                                                          ((case-lambda
                                                                             ((g$t$9201$tVUFT)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9202$tVUFT)
                                                                                  (if g$ls/false$9202$tVUFT
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$9203$tVUFT)
                                                                                         (g$syntax-violation$8674$tVUFT
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$9161$tVUFT
                                                                                           g$others$9203$tVUFT)))
                                                                                      g$ls/false$9202$tVUFT)
                                                                                    (g$syntax-violation$8674$tVUFT
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$9201$tVUFT))))
                                                                               (g$syntax-dispatch$8562$tVUFT
                                                                                 g$t$9201$tVUFT
                                                                                 'any))))
                                                                           g$t$9191$tVUFT))))
                                                                     (g$syntax-dispatch$8562$tVUFT
                                                                       g$t$9191$tVUFT
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$9179$tVUFT))))
                                                           (g$syntax-dispatch$8562$tVUFT
                                                             g$t$9179$tVUFT
                                                             'each-any))))
                                                       (car g$lhs*$9175$tVUFT)))))))
                                        g$f$9174$tVUFT)
                                      g$lhs*$9170$tVUFT
                                      g$rhs*$9171$tVUFT
                                      '()
                                      '()))))
                                g$ls/false$9169$tVUFT)
                              (g$syntax-violation$8674$tVUFT
                                '#f
                                '"invalid syntax"
                                g$t$9168$tVUFT))))
                         (g$syntax-dispatch$8562$tVUFT
                           g$t$9168$tVUFT
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$9164$tVUFT))))
               (g$syntax-dispatch$8562$tVUFT
                 g$t$9164$tVUFT
                 '(_ () any . each-any)))))
           g$stx$9161$tVUFT)))))
   (g$let*-values-macro$8530$tVUFT
     g$let*-values-macro$12048$tVUFT
     (case-lambda
       ((g$stx$9217$tVUFT)
        (letrec* ((g$check$9218$tVUFT
                    (case-lambda
                      ((g$x*$9242$tVUFT)
                       (if (not (null? g$x*$9242$tVUFT))
                         ((case-lambda
                            ((g$x$9243$tVUFT)
                             (begin
                               (if (not (g$id?$8283$tVUFT g$x$9243$tVUFT))
                                 (g$syntax-violation$8674$tVUFT
                                   '#f
                                   '"not an identifier"
                                   g$stx$9217$tVUFT
                                   g$x$9243$tVUFT)
                                 (void))
                               (g$check$9218$tVUFT (cdr g$x*$9242$tVUFT))
                               (if (g$bound-id-member?$8290$tVUFT
                                     g$x$9243$tVUFT
                                     (cdr g$x*$9242$tVUFT))
                                 (g$syntax-violation$8674$tVUFT
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$9217$tVUFT
                                   g$x$9243$tVUFT)
                                 (void)))))
                          (car g$x*$9242$tVUFT))
                         (void))))))
          ((case-lambda
             ((g$t$9219$tVUFT)
              ((case-lambda
                 ((g$ls/false$9220$tVUFT)
                  (if g$ls/false$9220$tVUFT
                    (apply
                      (case-lambda
                        ((g$b$9221$tVUFT g$b*$9222$tVUFT)
                         (g$cons*$5159$tVUFT
                           (g$bless$8525$tVUFT 'let)
                           '()
                           g$b$9221$tVUFT
                           g$b*$9222$tVUFT)))
                      g$ls/false$9220$tVUFT)
                    ((case-lambda
                       ((g$t$9223$tVUFT)
                        ((case-lambda
                           ((g$ls/false$9224$tVUFT)
                            (if g$ls/false$9224$tVUFT
                              (apply
                                (case-lambda
                                  ((g$lhs*$9225$tVUFT
                                     g$rhs*$9226$tVUFT
                                     g$b$9227$tVUFT
                                     g$b*$9228$tVUFT)
                                   (g$bless$8525$tVUFT
                                     ((letrec ((g$f$9229$tVUFT
                                                 (case-lambda
                                                   ((g$lhs*$9230$tVUFT
                                                      g$rhs*$9231$tVUFT)
                                                    (if (null?
                                                          g$lhs*$9230$tVUFT)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$9227$tVUFT
                                                          g$b*$9228$tVUFT))
                                                      ((case-lambda
                                                         ((g$t$9232$tVUFT)
                                                          ((case-lambda
                                                             ((g$ls/false$9233$tVUFT)
                                                              (if g$ls/false$9233$tVUFT
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$9234$tVUFT)
                                                                     (begin
                                                                       (g$check$9218$tVUFT
                                                                         g$x*$9234$tVUFT)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$9231$tVUFT))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$9234$tVUFT
                                                                           (g$f$9229$tVUFT
                                                                             (cdr g$lhs*$9230$tVUFT)
                                                                             (cdr g$rhs*$9231$tVUFT)))))))
                                                                  g$ls/false$9233$tVUFT)
                                                                ((case-lambda
                                                                   ((g$t$9235$tVUFT)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9236$tVUFT)
                                                                        (if g$ls/false$9236$tVUFT
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$9237$tVUFT
                                                                                 g$x$9238$tVUFT)
                                                                               (begin
                                                                                 (g$check$9218$tVUFT
                                                                                   (cons
                                                                                     g$x$9238$tVUFT
                                                                                     g$x*$9237$tVUFT))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$9231$tVUFT))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$9237$tVUFT
                                                                                       g$x$9238$tVUFT)
                                                                                     (g$f$9229$tVUFT
                                                                                       (cdr g$lhs*$9230$tVUFT)
                                                                                       (cdr g$rhs*$9231$tVUFT)))))))
                                                                            g$ls/false$9236$tVUFT)
                                                                          ((case-lambda
                                                                             ((g$t$9239$tVUFT)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9240$tVUFT)
                                                                                  (if g$ls/false$9240$tVUFT
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$9241$tVUFT)
                                                                                         (g$syntax-violation$8674$tVUFT
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$9217$tVUFT
                                                                                           g$others$9241$tVUFT)))
                                                                                      g$ls/false$9240$tVUFT)
                                                                                    (g$syntax-violation$8674$tVUFT
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$9239$tVUFT))))
                                                                               (g$syntax-dispatch$8562$tVUFT
                                                                                 g$t$9239$tVUFT
                                                                                 'any))))
                                                                           g$t$9235$tVUFT))))
                                                                     (g$syntax-dispatch$8562$tVUFT
                                                                       g$t$9235$tVUFT
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$9232$tVUFT))))
                                                           (g$syntax-dispatch$8562$tVUFT
                                                             g$t$9232$tVUFT
                                                             'each-any))))
                                                       (car g$lhs*$9230$tVUFT)))))))
                                        g$f$9229$tVUFT)
                                      g$lhs*$9225$tVUFT
                                      g$rhs*$9226$tVUFT))))
                                g$ls/false$9224$tVUFT)
                              (g$syntax-violation$8674$tVUFT
                                '#f
                                '"invalid syntax"
                                g$t$9223$tVUFT))))
                         (g$syntax-dispatch$8562$tVUFT
                           g$t$9223$tVUFT
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$9219$tVUFT))))
               (g$syntax-dispatch$8562$tVUFT
                 g$t$9219$tVUFT
                 '(_ () any . each-any)))))
           g$stx$9217$tVUFT)))))
   (g$trace-lambda-macro$8531$tVUFT
     g$trace-lambda-macro$12049$tVUFT
     (case-lambda
       ((g$stx$9244$tVUFT)
        ((case-lambda
           ((g$t$9245$tVUFT)
            ((case-lambda
               ((g$ls/false$9246$tVUFT)
                (if g$ls/false$9246$tVUFT
                  (apply
                    (case-lambda
                      ((g$who$9247$tVUFT
                         g$fmls$9248$tVUFT
                         g$b$9249$tVUFT
                         g$b*$9250$tVUFT)
                       (if (g$valid-bound-ids?$8288$tVUFT g$fmls$9248$tVUFT)
                         (g$bless$8525$tVUFT
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$9247$tVUFT)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$9248$tVUFT
                                 (cons g$b$9249$tVUFT g$b*$9250$tVUFT)))))
                         (g$invalid-fmls-error$8527$tVUFT
                           g$stx$9244$tVUFT
                           g$fmls$9248$tVUFT))))
                    g$ls/false$9246$tVUFT)
                  ((case-lambda
                     ((g$t$9251$tVUFT)
                      ((case-lambda
                         ((g$ls/false$9252$tVUFT)
                          (if g$ls/false$9252$tVUFT
                            (apply
                              (case-lambda
                                ((g$who$9253$tVUFT
                                   g$fmls$9254$tVUFT
                                   g$last$9255$tVUFT
                                   g$b$9256$tVUFT
                                   g$b*$9257$tVUFT)
                                 (if (g$valid-bound-ids?$8288$tVUFT
                                       (cons
                                         g$last$9255$tVUFT
                                         g$fmls$9254$tVUFT))
                                   (g$bless$8525$tVUFT
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$9253$tVUFT)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$9254$tVUFT
                                             g$last$9255$tVUFT)
                                           (cons
                                             g$b$9256$tVUFT
                                             g$b*$9257$tVUFT)))))
                                   (g$invalid-fmls-error$8527$tVUFT
                                     g$stx$9244$tVUFT
                                     (append
                                       g$fmls$9254$tVUFT
                                       g$last$9255$tVUFT)))))
                              g$ls/false$9252$tVUFT)
                            (g$syntax-violation$8674$tVUFT
                              '#f
                              '"invalid syntax"
                              g$t$9251$tVUFT))))
                       (g$syntax-dispatch$8562$tVUFT
                         g$t$9251$tVUFT
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$9245$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$9245$tVUFT
               '(_ any each-any any . each-any)))))
         g$stx$9244$tVUFT))))
   (g$trace-define-macro$8532$tVUFT
     g$trace-define-macro$12050$tVUFT
     (case-lambda
       ((g$stx$9258$tVUFT)
        ((case-lambda
           ((g$t$9259$tVUFT)
            ((case-lambda
               ((g$ls/false$9260$tVUFT)
                (if g$ls/false$9260$tVUFT
                  (apply
                    (case-lambda
                      ((g$who$9261$tVUFT
                         g$fmls$9262$tVUFT
                         g$b$9263$tVUFT
                         g$b*$9264$tVUFT)
                       (if (g$valid-bound-ids?$8288$tVUFT g$fmls$9262$tVUFT)
                         (g$bless$8525$tVUFT
                           (list
                             'define
                             g$who$9261$tVUFT
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$9261$tVUFT)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$9262$tVUFT
                                   (cons g$b$9263$tVUFT g$b*$9264$tVUFT))))))
                         (g$invalid-fmls-error$8527$tVUFT
                           g$stx$9258$tVUFT
                           g$fmls$9262$tVUFT))))
                    g$ls/false$9260$tVUFT)
                  ((case-lambda
                     ((g$t$9265$tVUFT)
                      ((case-lambda
                         ((g$ls/false$9266$tVUFT)
                          (if g$ls/false$9266$tVUFT
                            (apply
                              (case-lambda
                                ((g$who$9267$tVUFT
                                   g$fmls$9268$tVUFT
                                   g$last$9269$tVUFT
                                   g$b$9270$tVUFT
                                   g$b*$9271$tVUFT)
                                 (if (g$valid-bound-ids?$8288$tVUFT
                                       (cons
                                         g$last$9269$tVUFT
                                         g$fmls$9268$tVUFT))
                                   (g$bless$8525$tVUFT
                                     (list
                                       'define
                                       g$who$9267$tVUFT
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$9267$tVUFT)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$9268$tVUFT
                                               g$last$9269$tVUFT)
                                             (cons
                                               g$b$9270$tVUFT
                                               g$b*$9271$tVUFT))))))
                                   (g$invalid-fmls-error$8527$tVUFT
                                     g$stx$9258$tVUFT
                                     (append
                                       g$fmls$9268$tVUFT
                                       g$last$9269$tVUFT)))))
                              g$ls/false$9266$tVUFT)
                            ((case-lambda
                               ((g$t$9272$tVUFT)
                                ((case-lambda
                                   ((g$ls/false$9273$tVUFT)
                                    (if g$ls/false$9273$tVUFT
                                      (apply
                                        (case-lambda
                                          ((g$who$9274$tVUFT g$expr$9275$tVUFT)
                                           (if (g$id?$8283$tVUFT
                                                 g$who$9274$tVUFT)
                                             (g$bless$8525$tVUFT
                                               (list
                                                 'define
                                                 g$who$9274$tVUFT
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$9275$tVUFT))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$9274$tVUFT)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$8674$tVUFT
                                               '#f
                                               '"invalid name"
                                               g$stx$9258$tVUFT))))
                                        g$ls/false$9273$tVUFT)
                                      (g$syntax-violation$8674$tVUFT
                                        '#f
                                        '"invalid syntax"
                                        g$t$9272$tVUFT))))
                                 (g$syntax-dispatch$8562$tVUFT
                                   g$t$9272$tVUFT
                                   '(_ any any)))))
                             g$t$9265$tVUFT))))
                       (g$syntax-dispatch$8562$tVUFT
                         g$t$9265$tVUFT
                         '(_ (any . #(each+ any () any)) any . each-any)))))
                   g$t$9259$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$9259$tVUFT
               '(_ (any . each-any) any . each-any)))))
         g$stx$9258$tVUFT))))
   (g$trace-define-syntax-macro$8533$tVUFT
     g$trace-define-syntax-macro$12051$tVUFT
     (case-lambda
       ((g$stx$9276$tVUFT)
        ((case-lambda
           ((g$t$9277$tVUFT)
            ((case-lambda
               ((g$ls/false$9278$tVUFT)
                (if g$ls/false$9278$tVUFT
                  (apply
                    (case-lambda
                      ((g$who$9279$tVUFT g$expr$9280$tVUFT)
                       (if (g$id?$8283$tVUFT g$who$9279$tVUFT)
                         (g$bless$8525$tVUFT
                           (list
                             'define-syntax
                             g$who$9279$tVUFT
                             (list
                               'make-traced-macro
                               (list 'quote g$who$9279$tVUFT)
                               g$expr$9280$tVUFT)))
                         (g$syntax-violation$8674$tVUFT
                           '#f
                           '"invalid name"
                           g$stx$9276$tVUFT))))
                    g$ls/false$9278$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9277$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$9277$tVUFT '(_ any any)))))
         g$stx$9276$tVUFT))))
   (g$trace-let/rec-syntax$8534$tVUFT
     g$trace-let/rec-syntax$12052$tVUFT
     (case-lambda
       ((g$who$9281$tVUFT)
        (case-lambda
          ((g$stx$9282$tVUFT)
           ((case-lambda
              ((g$t$9283$tVUFT)
               ((case-lambda
                  ((g$ls/false$9284$tVUFT)
                   (if g$ls/false$9284$tVUFT
                     (apply
                       (case-lambda
                         ((g$lhs*$9285$tVUFT
                            g$rhs*$9286$tVUFT
                            g$b$9287$tVUFT
                            g$b*$9288$tVUFT)
                          (if (g$valid-bound-ids?$8288$tVUFT g$lhs*$9285$tVUFT)
                            ((case-lambda
                               ((g$rhs*$9289$tVUFT)
                                (g$bless$8525$tVUFT
                                  (cons
                                    g$who$9281$tVUFT
                                    (cons
                                      (g$map$5157$tVUFT
                                        list
                                        g$lhs*$9285$tVUFT
                                        g$rhs*$9289$tVUFT)
                                      (cons g$b$9287$tVUFT g$b*$9288$tVUFT))))))
                             (g$map$5157$tVUFT
                               (case-lambda
                                 ((g$lhs$9290$tVUFT g$rhs$9291$tVUFT)
                                  (list
                                    'make-traced-macro
                                    (list 'quote g$lhs$9290$tVUFT)
                                    g$rhs$9291$tVUFT)))
                               g$lhs*$9285$tVUFT
                               g$rhs*$9286$tVUFT))
                            (g$invalid-fmls-error$8527$tVUFT
                              g$stx$9282$tVUFT
                              g$lhs*$9285$tVUFT))))
                       g$ls/false$9284$tVUFT)
                     (g$syntax-violation$8674$tVUFT
                       '#f
                       '"invalid syntax"
                       g$t$9283$tVUFT))))
                (g$syntax-dispatch$8562$tVUFT
                  g$t$9283$tVUFT
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$9282$tVUFT))))))
   (g$trace-let-syntax-macro$8535$tVUFT
     g$trace-let-syntax-macro$12053$tVUFT
     (g$trace-let/rec-syntax$8534$tVUFT 'let-syntax))
   (g$trace-letrec-syntax-macro$8536$tVUFT
     g$trace-letrec-syntax-macro$12054$tVUFT
     (g$trace-let/rec-syntax$8534$tVUFT 'letrec-syntax))
   (g$guard-macro$8537$tVUFT
     g$guard-macro$12055$tVUFT
     (case-lambda
       ((g$x$9292$tVUFT)
        (letrec* ((g$gen-clauses$9293$tVUFT
                    (case-lambda
                      ((g$con$9305$tVUFT
                         g$outerk$9306$tVUFT
                         g$clause*$9307$tVUFT)
                       (letrec* ((g$f$9308$tVUFT
                                   (case-lambda
                                     ((g$x$9336$tVUFT g$k$9337$tVUFT)
                                      ((case-lambda
                                         ((g$t$9338$tVUFT)
                                          ((case-lambda
                                             ((g$ls/false$9339$tVUFT)
                                              (if g$ls/false$9339$tVUFT
                                                (apply
                                                  (case-lambda
                                                    ((g$e$9340$tVUFT
                                                       g$p$9341$tVUFT)
                                                     ((case-lambda
                                                        ((g$t$9342$tVUFT)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$9342$tVUFT
                                                               g$e$9340$tVUFT))
                                                           (list
                                                             'if
                                                             g$t$9342$tVUFT
                                                             (list
                                                               g$p$9341$tVUFT
                                                               g$t$9342$tVUFT)
                                                             g$k$9337$tVUFT))))
                                                      (gensym))))
                                                  g$ls/false$9339$tVUFT)
                                                ((case-lambda
                                                   ((g$t$9343$tVUFT)
                                                    ((case-lambda
                                                       ((g$ls/false$9344$tVUFT)
                                                        (if g$ls/false$9344$tVUFT
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$9345$tVUFT)
                                                               ((case-lambda
                                                                  ((g$t$9346$tVUFT)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$9346$tVUFT
                                                                         g$e$9345$tVUFT))
                                                                     (list
                                                                       'if
                                                                       g$t$9346$tVUFT
                                                                       g$t$9346$tVUFT
                                                                       g$k$9337$tVUFT))))
                                                                (gensym))))
                                                            g$ls/false$9344$tVUFT)
                                                          ((case-lambda
                                                             ((g$t$9347$tVUFT)
                                                              ((case-lambda
                                                                 ((g$ls/false$9348$tVUFT)
                                                                  (if g$ls/false$9348$tVUFT
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$9349$tVUFT
                                                                           g$v$9350$tVUFT
                                                                           g$v*$9351$tVUFT)
                                                                         (list
                                                                           'if
                                                                           g$e$9349$tVUFT
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$9350$tVUFT
                                                                               g$v*$9351$tVUFT))
                                                                           g$k$9337$tVUFT)))
                                                                      g$ls/false$9348$tVUFT)
                                                                    ((case-lambda
                                                                       ((g$t$9352$tVUFT)
                                                                        ((case-lambda
                                                                           ((g$ls/false$9353$tVUFT)
                                                                            (if g$ls/false$9353$tVUFT
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$8674$tVUFT
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$9336$tVUFT)))
                                                                                g$ls/false$9353$tVUFT)
                                                                              (g$syntax-violation$8674$tVUFT
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$9352$tVUFT))))
                                                                         (g$syntax-dispatch$8562$tVUFT
                                                                           g$t$9352$tVUFT
                                                                           '_))))
                                                                     g$t$9347$tVUFT))))
                                                               (g$syntax-dispatch$8562$tVUFT
                                                                 g$t$9347$tVUFT
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$9343$tVUFT))))
                                                     (g$syntax-dispatch$8562$tVUFT
                                                       g$t$9343$tVUFT
                                                       '(any)))))
                                                 g$t$9338$tVUFT))))
                                           (g$syntax-dispatch$8562$tVUFT
                                             g$t$9338$tVUFT
                                             '(any #(scheme-id =>) any)))))
                                       g$x$9336$tVUFT))))
                                 (g$f*$9309$tVUFT
                                   (case-lambda
                                     ((g$x*$9316$tVUFT)
                                      ((case-lambda
                                         ((g$t$9317$tVUFT)
                                          ((case-lambda
                                             ((g$ls/false$9318$tVUFT)
                                              (if g$ls/false$9318$tVUFT
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$9305$tVUFT)
                                                       '#t)))
                                                  g$ls/false$9318$tVUFT)
                                                ((case-lambda
                                                   ((g$t$9319$tVUFT)
                                                    ((case-lambda
                                                       ((g$ls/false$9320$tVUFT)
                                                        (if g$ls/false$9320$tVUFT
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$9321$tVUFT
                                                                 g$e*$9322$tVUFT)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$9321$tVUFT
                                                                     g$e*$9322$tVUFT))
                                                                 '#f)))
                                                            g$ls/false$9320$tVUFT)
                                                          ((case-lambda
                                                             ((g$t$9323$tVUFT)
                                                              ((case-lambda
                                                                 ((g$ls/false$9324$tVUFT)
                                                                  (if g$ls/false$9324$tVUFT
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$9325$tVUFT
                                                                           g$cls*$9326$tVUFT)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$9309$tVUFT
                                                                                g$cls*$9326$tVUFT)))
                                                                           (case-lambda
                                                                             ((g$e$9329$tVUFT
                                                                                g$g$9330$tVUFT)
                                                                              ((case-lambda
                                                                                 ((g$g$9331$tVUFT
                                                                                    g$e$9332$tVUFT)
                                                                                  (values
                                                                                    (g$f$9308$tVUFT
                                                                                      g$cls$9325$tVUFT
                                                                                      g$e$9332$tVUFT)
                                                                                    g$g$9331$tVUFT)))
                                                                               g$g$9330$tVUFT
                                                                               g$e$9329$tVUFT))))))
                                                                      g$ls/false$9324$tVUFT)
                                                                    ((case-lambda
                                                                       ((g$t$9333$tVUFT)
                                                                        ((case-lambda
                                                                           ((g$ls/false$9334$tVUFT)
                                                                            (if g$ls/false$9334$tVUFT
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$9335$tVUFT)
                                                                                   (g$syntax-violation$8674$tVUFT
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$9335$tVUFT)))
                                                                                g$ls/false$9334$tVUFT)
                                                                              (g$syntax-violation$8674$tVUFT
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$9333$tVUFT))))
                                                                         (g$syntax-dispatch$8562$tVUFT
                                                                           g$t$9333$tVUFT
                                                                           'any))))
                                                                     g$t$9323$tVUFT))))
                                                               (g$syntax-dispatch$8562$tVUFT
                                                                 g$t$9323$tVUFT
                                                                 '(any .
                                                                       any)))))
                                                           g$t$9319$tVUFT))))
                                                     (g$syntax-dispatch$8562$tVUFT
                                                       g$t$9319$tVUFT
                                                       '((#(scheme-id else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$9317$tVUFT))))
                                           (g$syntax-dispatch$8562$tVUFT
                                             g$t$9317$tVUFT
                                             '()))))
                                       g$x*$9316$tVUFT)))))
                         (call-with-values
                           (case-lambda
                             (() (g$f*$9309$tVUFT g$clause*$9307$tVUFT)))
                           (case-lambda
                             ((g$code$9312$tVUFT g$raisek$9313$tVUFT)
                              ((case-lambda
                                 ((g$raisek$9314$tVUFT g$code$9315$tVUFT)
                                  (if g$raisek$9314$tVUFT
                                    (list g$outerk$9306$tVUFT g$code$9315$tVUFT)
                                    g$code$9315$tVUFT)))
                               g$raisek$9313$tVUFT
                               g$code$9312$tVUFT)))))))))
          ((case-lambda
             ((g$t$9294$tVUFT)
              ((case-lambda
                 ((g$ls/false$9295$tVUFT)
                  (if (if g$ls/false$9295$tVUFT
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$9296$tVUFT
                                 g$clause*$9297$tVUFT
                                 g$b$9298$tVUFT
                                 g$b*$9299$tVUFT)
                               (g$id?$8283$tVUFT g$con$9296$tVUFT)))
                            g$ls/false$9295$tVUFT))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$9300$tVUFT
                           g$clause*$9301$tVUFT
                           g$b$9302$tVUFT
                           g$b*$9303$tVUFT)
                         ((case-lambda
                            ((g$outerk$9304$tVUFT)
                             (g$bless$8525$tVUFT
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$9304$tVUFT)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$9300$tVUFT)
                                           (g$gen-clauses$9293$tVUFT
                                             g$con$9300$tVUFT
                                             g$outerk$9304$tVUFT
                                             g$clause*$9301$tVUFT))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$9302$tVUFT
                                                 g$b*$9303$tVUFT))))))))))))
                          (gensym))))
                      g$ls/false$9295$tVUFT)
                    (g$syntax-violation$8674$tVUFT
                      '#f
                      '"invalid syntax"
                      g$t$9294$tVUFT))))
               (g$syntax-dispatch$8562$tVUFT
                 g$t$9294$tVUFT
                 '(_ (any . each-any) any . each-any)))))
           g$x$9292$tVUFT)))))
   (g$define-enumeration-macro$8538$tVUFT
     g$define-enumeration-macro$12056$tVUFT
     (case-lambda
       ((g$stx$9354$tVUFT)
        (letrec* ((g$set?$9355$tVUFT
                    (case-lambda
                      ((g$x$9368$tVUFT)
                       ((case-lambda
                          ((g$t$9369$tVUFT)
                           (if g$t$9369$tVUFT
                             g$t$9369$tVUFT
                             (begin
                               '#f
                               (if (not (g$memq$5149$tVUFT
                                          (car g$x$9368$tVUFT)
                                          (cdr g$x$9368$tVUFT)))
                                 (begin
                                   '#f
                                   (g$set?$9355$tVUFT (cdr g$x$9368$tVUFT)))
                                 '#f)))))
                        (null? g$x$9368$tVUFT)))))
                  (g$remove-dups$9356$tVUFT
                    (case-lambda
                      ((g$ls$9367$tVUFT)
                       (if (null? g$ls$9367$tVUFT)
                         '()
                         (cons
                           (car g$ls$9367$tVUFT)
                           (g$remove-dups$9356$tVUFT
                             (g$remq$5164$tVUFT
                               (car g$ls$9367$tVUFT)
                               (cdr g$ls$9367$tVUFT)))))))))
          ((case-lambda
             ((g$t$9357$tVUFT)
              ((case-lambda
                 ((g$ls/false$9358$tVUFT)
                  (if (if g$ls/false$9358$tVUFT
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$9359$tVUFT
                                 g$id*$9360$tVUFT
                                 g$maker$9361$tVUFT)
                               (if (g$id?$8283$tVUFT g$name$9359$tVUFT)
                                 (if (g$id?$8283$tVUFT g$maker$9361$tVUFT)
                                   (begin
                                     '#f
                                     (g$for-all$5155$tVUFT
                                       g$id?$8283$tVUFT
                                       g$id*$9360$tVUFT))
                                   '#f)
                                 '#f)))
                            g$ls/false$9358$tVUFT))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$9362$tVUFT g$id*$9363$tVUFT g$maker$9364$tVUFT)
                         ((case-lambda
                            ((g$name*$9365$tVUFT g$mk$9366$tVUFT)
                             (g$bless$8525$tVUFT
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$9366$tVUFT
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list 'quote g$name*$9365$tVUFT))))
                                 (list
                                   'define-syntax
                                   g$name$9362$tVUFT
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list 'quote g$name*$9365$tVUFT))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list 'quote g$name$9362$tVUFT)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$9364$tVUFT
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$9364$tVUFT)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$9365$tVUFT))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$9364$tVUFT)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$9366$tVUFT
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$9356$tVUFT
                            (g$syntax->datum$8677$tVUFT g$id*$9363$tVUFT))
                          (gensym))))
                      g$ls/false$9358$tVUFT)
                    (g$syntax-violation$8674$tVUFT
                      '#f
                      '"invalid syntax"
                      g$t$9357$tVUFT))))
               (g$syntax-dispatch$8562$tVUFT
                 g$t$9357$tVUFT
                 '(_ any each-any any)))))
           g$stx$9354$tVUFT)))))
   (g$time-macro$8539$tVUFT
     g$time-macro$12057$tVUFT
     (case-lambda
       ((g$stx$9370$tVUFT)
        ((case-lambda
           ((g$t$9371$tVUFT)
            ((case-lambda
               ((g$ls/false$9372$tVUFT)
                (if g$ls/false$9372$tVUFT
                  (apply
                    (case-lambda
                      ((g$expr$9373$tVUFT)
                       ((case-lambda
                          ((g$str$9374$tVUFT)
                           (g$bless$8525$tVUFT
                             (list
                               'time-it
                               g$str$9374$tVUFT
                               (list 'lambda '() g$expr$9373$tVUFT)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$6933$tVUFT)))
                          (case-lambda
                            ((g$p$9377$tVUFT g$e$9378$tVUFT)
                             ((case-lambda
                                ((g$e$9379$tVUFT g$p$9380$tVUFT)
                                 (begin
                                   (write
                                     (g$syntax->datum$8677$tVUFT
                                       g$expr$9373$tVUFT)
                                     g$p$9380$tVUFT)
                                   (g$e$9379$tVUFT))))
                              g$e$9378$tVUFT
                              g$p$9377$tVUFT)))))))
                    g$ls/false$9372$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9371$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$9371$tVUFT '(_ any)))))
         g$stx$9370$tVUFT))))
   (g$delay-macro$8540$tVUFT
     g$delay-macro$12058$tVUFT
     (case-lambda
       ((g$stx$9381$tVUFT)
        ((case-lambda
           ((g$t$9382$tVUFT)
            ((case-lambda
               ((g$ls/false$9383$tVUFT)
                (if g$ls/false$9383$tVUFT
                  (apply
                    (case-lambda
                      ((g$expr$9384$tVUFT)
                       (g$bless$8525$tVUFT
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$9384$tVUFT)))))
                    g$ls/false$9383$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9382$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$9382$tVUFT '(_ any)))))
         g$stx$9381$tVUFT))))
   (g$assert-macro$8541$tVUFT
     g$assert-macro$12059$tVUFT
     (case-lambda
       ((g$stx$9385$tVUFT)
        ((case-lambda
           ((g$t$9386$tVUFT)
            ((case-lambda
               ((g$ls/false$9387$tVUFT)
                (if g$ls/false$9387$tVUFT
                  (apply
                    (case-lambda
                      ((g$expr$9388$tVUFT)
                       ((case-lambda
                          ((g$pos$9389$tVUFT)
                           (g$bless$8525$tVUFT
                             (list
                               'unless
                               g$expr$9388$tVUFT
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$9388$tVUFT)
                                 (list 'quote g$pos$9389$tVUFT))))))
                        ((case-lambda
                           ((g$t$9390$tVUFT)
                            (if g$t$9390$tVUFT
                              g$t$9390$tVUFT
                              (begin
                                '#f
                                (g$expression-position$8669$tVUFT
                                  g$expr$9388$tVUFT)))))
                         (g$expression-position$8669$tVUFT g$stx$9385$tVUFT)))))
                    g$ls/false$9387$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9386$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$9386$tVUFT '(_ any)))))
         g$stx$9385$tVUFT))))
   (g$endianness-macro$8542$tVUFT
     g$endianness-macro$12060$tVUFT
     (case-lambda
       ((g$stx$9391$tVUFT)
        ((case-lambda
           ((g$t$9392$tVUFT)
            ((case-lambda
               ((g$ls/false$9393$tVUFT)
                (if g$ls/false$9393$tVUFT
                  (apply
                    (case-lambda
                      ((g$e$9394$tVUFT)
                       ((case-lambda
                          ((g$t$9395$tVUFT)
                           (if (g$memv$5150$tVUFT g$t$9395$tVUFT '(little))
                             (g$bless$8525$tVUFT ''little)
                             (if (g$memv$5150$tVUFT g$t$9395$tVUFT '(big))
                               (g$bless$8525$tVUFT ''big)
                               (g$syntax-violation$8674$tVUFT
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$9391$tVUFT)))))
                        (g$syntax->datum$8677$tVUFT g$e$9394$tVUFT))))
                    g$ls/false$9393$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9392$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$9392$tVUFT '(_ any)))))
         g$stx$9391$tVUFT))))
   (g$identifier-syntax-macro$8543$tVUFT
     g$identifier-syntax-macro$12061$tVUFT
     (case-lambda
       ((g$stx$9396$tVUFT)
        ((case-lambda
           ((g$t$9397$tVUFT)
            ((case-lambda
               ((g$ls/false$9398$tVUFT)
                (if g$ls/false$9398$tVUFT
                  (apply
                    (case-lambda
                      ((g$expr$9399$tVUFT)
                       (g$bless$8525$tVUFT
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$9399$tVUFT))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$9399$tVUFT)
                                   '(#'(e* ...))))))))))
                    g$ls/false$9398$tVUFT)
                  ((case-lambda
                     ((g$t$9400$tVUFT)
                      ((case-lambda
                         ((g$ls/false$9401$tVUFT)
                          (if (if g$ls/false$9401$tVUFT
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$9402$tVUFT
                                         g$expr1$9403$tVUFT
                                         g$id2$9404$tVUFT
                                         g$expr2$9405$tVUFT
                                         g$expr3$9406$tVUFT)
                                       (if (g$id?$8283$tVUFT g$id1$9402$tVUFT)
                                         (if (g$id?$8283$tVUFT g$id2$9404$tVUFT)
                                           (begin
                                             '#f
                                             (g$id?$8283$tVUFT
                                               g$expr2$9405$tVUFT))
                                           '#f)
                                         '#f)))
                                    g$ls/false$9401$tVUFT))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$9407$tVUFT
                                   g$expr1$9408$tVUFT
                                   g$id2$9409$tVUFT
                                   g$expr2$9410$tVUFT
                                   g$expr3$9411$tVUFT)
                                 (g$bless$8525$tVUFT
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list 'syntax g$expr1$9408$tVUFT))
                                         (list
                                           (list 'set! 'id g$expr2$9410$tVUFT)
                                           (list 'syntax g$expr3$9411$tVUFT))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$9408$tVUFT
                                               '(e* ...))))))))))
                              g$ls/false$9401$tVUFT)
                            (g$syntax-violation$8674$tVUFT
                              '#f
                              '"invalid syntax"
                              g$t$9400$tVUFT))))
                       (g$syntax-dispatch$8562$tVUFT
                         g$t$9400$tVUFT
                         '(_ (any any) ((#(scheme-id set!) any any) any))))))
                   g$t$9397$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$9397$tVUFT '(_ any)))))
         g$stx$9396$tVUFT))))
   (g$do-macro$8544$tVUFT
     g$do-macro$12062$tVUFT
     (case-lambda
       ((g$stx$9412$tVUFT)
        (letrec* ((g$bind$9413$tVUFT
                    (case-lambda
                      ((g$x$9425$tVUFT)
                       ((case-lambda
                          ((g$t$9426$tVUFT)
                           ((case-lambda
                              ((g$ls/false$9427$tVUFT)
                               (if g$ls/false$9427$tVUFT
                                 (apply
                                   (case-lambda
                                     ((g$x$9428$tVUFT g$init$9429$tVUFT)
                                      (list
                                        g$x$9428$tVUFT
                                        g$init$9429$tVUFT
                                        g$x$9428$tVUFT)))
                                   g$ls/false$9427$tVUFT)
                                 ((case-lambda
                                    ((g$t$9430$tVUFT)
                                     ((case-lambda
                                        ((g$ls/false$9431$tVUFT)
                                         (if g$ls/false$9431$tVUFT
                                           (apply
                                             (case-lambda
                                               ((g$x$9432$tVUFT
                                                  g$init$9433$tVUFT
                                                  g$step$9434$tVUFT)
                                                (list
                                                  g$x$9432$tVUFT
                                                  g$init$9433$tVUFT
                                                  g$step$9434$tVUFT)))
                                             g$ls/false$9431$tVUFT)
                                           ((case-lambda
                                              ((g$t$9435$tVUFT)
                                               ((case-lambda
                                                  ((g$ls/false$9436$tVUFT)
                                                   (if g$ls/false$9436$tVUFT
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$8674$tVUFT
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$9412$tVUFT)))
                                                       g$ls/false$9436$tVUFT)
                                                     (g$syntax-violation$8674$tVUFT
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9435$tVUFT))))
                                                (g$syntax-dispatch$8562$tVUFT
                                                  g$t$9435$tVUFT
                                                  '_))))
                                            g$t$9430$tVUFT))))
                                      (g$syntax-dispatch$8562$tVUFT
                                        g$t$9430$tVUFT
                                        '(any any any)))))
                                  g$t$9426$tVUFT))))
                            (g$syntax-dispatch$8562$tVUFT
                              g$t$9426$tVUFT
                              '(any any)))))
                        g$x$9425$tVUFT)))))
          ((case-lambda
             ((g$t$9414$tVUFT)
              ((case-lambda
                 ((g$ls/false$9415$tVUFT)
                  (if g$ls/false$9415$tVUFT
                    (apply
                      (case-lambda
                        ((g$binding*$9416$tVUFT
                           g$test$9417$tVUFT
                           g$expr*$9418$tVUFT
                           g$command*$9419$tVUFT)
                         ((case-lambda
                            ((g$t$9420$tVUFT)
                             ((case-lambda
                                ((g$ls/false$9421$tVUFT)
                                 (if g$ls/false$9421$tVUFT
                                   (apply
                                     (case-lambda
                                       ((g$x*$9422$tVUFT
                                          g$init*$9423$tVUFT
                                          g$step*$9424$tVUFT)
                                        (if (g$valid-bound-ids?$8288$tVUFT
                                              g$x*$9422$tVUFT)
                                          (g$bless$8525$tVUFT
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$9422$tVUFT
                                                    (list
                                                      'if
                                                      g$test$9417$tVUFT
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$9418$tVUFT))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$9419$tVUFT
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$9424$tVUFT))))))))
                                              (cons 'loop g$init*$9423$tVUFT)))
                                          (g$syntax-violation$8674$tVUFT
                                            '#f
                                            '"invalid bindings"
                                            g$stx$9412$tVUFT))))
                                     g$ls/false$9421$tVUFT)
                                   (g$syntax-violation$8674$tVUFT
                                     '#f
                                     '"invalid syntax"
                                     g$t$9420$tVUFT))))
                              (g$syntax-dispatch$8562$tVUFT
                                g$t$9420$tVUFT
                                '#(each (any any any))))))
                          (g$map$5157$tVUFT
                            g$bind$9413$tVUFT
                            g$binding*$9416$tVUFT))))
                      g$ls/false$9415$tVUFT)
                    (g$syntax-violation$8674$tVUFT
                      '#f
                      '"invalid syntax"
                      g$t$9414$tVUFT))))
               (g$syntax-dispatch$8562$tVUFT
                 g$t$9414$tVUFT
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$9412$tVUFT)))))
   (g$let*-macro$8545$tVUFT
     g$let*-macro$12063$tVUFT
     (case-lambda
       ((g$stx$9437$tVUFT)
        ((case-lambda
           ((g$t$9438$tVUFT)
            ((case-lambda
               ((g$ls/false$9439$tVUFT)
                (if (if g$ls/false$9439$tVUFT
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$9440$tVUFT
                               g$rhs*$9441$tVUFT
                               g$b$9442$tVUFT
                               g$b*$9443$tVUFT)
                             (g$for-all$5155$tVUFT
                               g$id?$8283$tVUFT
                               g$lhs*$9440$tVUFT)))
                          g$ls/false$9439$tVUFT))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$9444$tVUFT
                         g$rhs*$9445$tVUFT
                         g$b$9446$tVUFT
                         g$b*$9447$tVUFT)
                       (g$bless$8525$tVUFT
                         ((letrec ((g$f$9448$tVUFT
                                     (case-lambda
                                       ((g$x*$9449$tVUFT)
                                        (if (null? g$x*$9449$tVUFT)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$9446$tVUFT
                                                g$b*$9447$tVUFT)))
                                          (if (null? (cdr g$x*$9449$tVUFT))
                                            (cons
                                              'let
                                              (cons
                                                (list (car g$x*$9449$tVUFT))
                                                (cons
                                                  g$b$9446$tVUFT
                                                  g$b*$9447$tVUFT)))
                                            (list
                                              'let
                                              (list (car g$x*$9449$tVUFT))
                                              (g$f$9448$tVUFT
                                                (cdr g$x*$9449$tVUFT)))))))))
                            g$f$9448$tVUFT)
                          (g$map$5157$tVUFT
                            list
                            g$lhs*$9444$tVUFT
                            g$rhs*$9445$tVUFT)))))
                    g$ls/false$9439$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9438$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$9438$tVUFT
               '(_ #(each (any any)) any . each-any)))))
         g$stx$9437$tVUFT))))
   (g$or-macro$8546$tVUFT
     g$or-macro$12064$tVUFT
     (case-lambda
       ((g$stx$9450$tVUFT)
        ((case-lambda
           ((g$t$9451$tVUFT)
            ((case-lambda
               ((g$ls/false$9452$tVUFT)
                (if g$ls/false$9452$tVUFT
                  (apply (case-lambda (() '#f)) g$ls/false$9452$tVUFT)
                  ((case-lambda
                     ((g$t$9453$tVUFT)
                      ((case-lambda
                         ((g$ls/false$9454$tVUFT)
                          (if g$ls/false$9454$tVUFT
                            (apply
                              (case-lambda
                                ((g$e$9455$tVUFT g$e*$9456$tVUFT)
                                 (g$bless$8525$tVUFT
                                   ((letrec ((g$f$9457$tVUFT
                                               (case-lambda
                                                 ((g$e$9458$tVUFT
                                                    g$e*$9459$tVUFT)
                                                  (if (null? g$e*$9459$tVUFT)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$9458$tVUFT)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$9458$tVUFT))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$9457$tVUFT
                                                          (car g$e*$9459$tVUFT)
                                                          (cdr g$e*$9459$tVUFT)))))))))
                                      g$f$9457$tVUFT)
                                    g$e$9455$tVUFT
                                    g$e*$9456$tVUFT))))
                              g$ls/false$9454$tVUFT)
                            (g$syntax-violation$8674$tVUFT
                              '#f
                              '"invalid syntax"
                              g$t$9453$tVUFT))))
                       (g$syntax-dispatch$8562$tVUFT
                         g$t$9453$tVUFT
                         '(_ any . each-any)))))
                   g$t$9451$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$9451$tVUFT '(_)))))
         g$stx$9450$tVUFT))))
   (g$and-macro$8547$tVUFT
     g$and-macro$12065$tVUFT
     (case-lambda
       ((g$stx$9460$tVUFT)
        ((case-lambda
           ((g$t$9461$tVUFT)
            ((case-lambda
               ((g$ls/false$9462$tVUFT)
                (if g$ls/false$9462$tVUFT
                  (apply (case-lambda (() '#t)) g$ls/false$9462$tVUFT)
                  ((case-lambda
                     ((g$t$9463$tVUFT)
                      ((case-lambda
                         ((g$ls/false$9464$tVUFT)
                          (if g$ls/false$9464$tVUFT
                            (apply
                              (case-lambda
                                ((g$e$9465$tVUFT g$e*$9466$tVUFT)
                                 (g$bless$8525$tVUFT
                                   ((letrec ((g$f$9467$tVUFT
                                               (case-lambda
                                                 ((g$e$9468$tVUFT
                                                    g$e*$9469$tVUFT)
                                                  (if (null? g$e*$9469$tVUFT)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$9468$tVUFT)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$9468$tVUFT
                                                        (cons
                                                          (g$f$9467$tVUFT
                                                            (car g$e*$9469$tVUFT)
                                                            (cdr g$e*$9469$tVUFT))
                                                          '(#f)))))))))
                                      g$f$9467$tVUFT)
                                    g$e$9465$tVUFT
                                    g$e*$9466$tVUFT))))
                              g$ls/false$9464$tVUFT)
                            (g$syntax-violation$8674$tVUFT
                              '#f
                              '"invalid syntax"
                              g$t$9463$tVUFT))))
                       (g$syntax-dispatch$8562$tVUFT
                         g$t$9463$tVUFT
                         '(_ any . each-any)))))
                   g$t$9461$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$9461$tVUFT '(_)))))
         g$stx$9460$tVUFT))))
   (g$cond-macro$8548$tVUFT
     g$cond-macro$12066$tVUFT
     (case-lambda
       ((g$stx$9470$tVUFT)
        ((case-lambda
           ((g$t$9471$tVUFT)
            ((case-lambda
               ((g$ls/false$9472$tVUFT)
                (if g$ls/false$9472$tVUFT
                  (apply
                    (case-lambda
                      ((g$cls$9473$tVUFT g$cls*$9474$tVUFT)
                       (g$bless$8525$tVUFT
                         ((letrec ((g$f$9475$tVUFT
                                     (case-lambda
                                       ((g$cls$9476$tVUFT g$cls*$9477$tVUFT)
                                        (if (null? g$cls*$9477$tVUFT)
                                          ((case-lambda
                                             ((g$t$9478$tVUFT)
                                              ((case-lambda
                                                 ((g$ls/false$9479$tVUFT)
                                                  (if g$ls/false$9479$tVUFT
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$9480$tVUFT
                                                           g$e*$9481$tVUFT)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$9480$tVUFT
                                                             g$e*$9481$tVUFT))))
                                                      g$ls/false$9479$tVUFT)
                                                    ((case-lambda
                                                       ((g$t$9482$tVUFT)
                                                        ((case-lambda
                                                           ((g$ls/false$9483$tVUFT)
                                                            (if g$ls/false$9483$tVUFT
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$9484$tVUFT
                                                                     g$p$9485$tVUFT)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$9484$tVUFT))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$9485$tVUFT
                                                                         '(t))))))
                                                                g$ls/false$9483$tVUFT)
                                                              ((case-lambda
                                                                 ((g$t$9486$tVUFT)
                                                                  ((case-lambda
                                                                     ((g$ls/false$9487$tVUFT)
                                                                      (if g$ls/false$9487$tVUFT
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$9488$tVUFT)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$9488$tVUFT
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$9487$tVUFT)
                                                                        ((case-lambda
                                                                           ((g$t$9489$tVUFT)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9490$tVUFT)
                                                                                (if g$ls/false$9490$tVUFT
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$9491$tVUFT
                                                                                         g$e*$9492$tVUFT)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$9491$tVUFT
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$9492$tVUFT))))
                                                                                    g$ls/false$9490$tVUFT)
                                                                                  ((case-lambda
                                                                                     ((g$t$9493$tVUFT)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$9494$tVUFT)
                                                                                          (if g$ls/false$9494$tVUFT
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8674$tVUFT
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$9470$tVUFT)))
                                                                                              g$ls/false$9494$tVUFT)
                                                                                            (g$syntax-violation$8674$tVUFT
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$9493$tVUFT))))
                                                                                       (g$syntax-dispatch$8562$tVUFT
                                                                                         g$t$9493$tVUFT
                                                                                         '_))))
                                                                                   g$t$9489$tVUFT))))
                                                                             (g$syntax-dispatch$8562$tVUFT
                                                                               g$t$9489$tVUFT
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$9486$tVUFT))))
                                                                   (g$syntax-dispatch$8562$tVUFT
                                                                     g$t$9486$tVUFT
                                                                     '(any)))))
                                                               g$t$9482$tVUFT))))
                                                         (g$syntax-dispatch$8562$tVUFT
                                                           g$t$9482$tVUFT
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$9478$tVUFT))))
                                               (g$syntax-dispatch$8562$tVUFT
                                                 g$t$9478$tVUFT
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$9476$tVUFT)
                                          ((case-lambda
                                             ((g$t$9495$tVUFT)
                                              ((case-lambda
                                                 ((g$ls/false$9496$tVUFT)
                                                  (if g$ls/false$9496$tVUFT
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$9497$tVUFT
                                                           g$e*$9498$tVUFT)
                                                         (g$syntax-violation$8674$tVUFT
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$9470$tVUFT)))
                                                      g$ls/false$9496$tVUFT)
                                                    ((case-lambda
                                                       ((g$t$9499$tVUFT)
                                                        ((case-lambda
                                                           ((g$ls/false$9500$tVUFT)
                                                            (if g$ls/false$9500$tVUFT
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$9501$tVUFT
                                                                     g$p$9502$tVUFT)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$9501$tVUFT))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$9502$tVUFT
                                                                         '(t))
                                                                       (g$f$9475$tVUFT
                                                                         (car g$cls*$9477$tVUFT)
                                                                         (cdr g$cls*$9477$tVUFT))))))
                                                                g$ls/false$9500$tVUFT)
                                                              ((case-lambda
                                                                 ((g$t$9503$tVUFT)
                                                                  ((case-lambda
                                                                     ((g$ls/false$9504$tVUFT)
                                                                      (if g$ls/false$9504$tVUFT
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$9505$tVUFT)
                                                                             (list
                                                                               'or
                                                                               g$e$9505$tVUFT
                                                                               (g$f$9475$tVUFT
                                                                                 (car g$cls*$9477$tVUFT)
                                                                                 (cdr g$cls*$9477$tVUFT)))))
                                                                          g$ls/false$9504$tVUFT)
                                                                        ((case-lambda
                                                                           ((g$t$9506$tVUFT)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9507$tVUFT)
                                                                                (if g$ls/false$9507$tVUFT
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$9508$tVUFT
                                                                                         g$e*$9509$tVUFT)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$9508$tVUFT
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$9509$tVUFT)
                                                                                         (g$f$9475$tVUFT
                                                                                           (car g$cls*$9477$tVUFT)
                                                                                           (cdr g$cls*$9477$tVUFT)))))
                                                                                    g$ls/false$9507$tVUFT)
                                                                                  ((case-lambda
                                                                                     ((g$t$9510$tVUFT)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$9511$tVUFT)
                                                                                          (if g$ls/false$9511$tVUFT
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8674$tVUFT
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$9470$tVUFT)))
                                                                                              g$ls/false$9511$tVUFT)
                                                                                            (g$syntax-violation$8674$tVUFT
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$9510$tVUFT))))
                                                                                       (g$syntax-dispatch$8562$tVUFT
                                                                                         g$t$9510$tVUFT
                                                                                         '_))))
                                                                                   g$t$9506$tVUFT))))
                                                                             (g$syntax-dispatch$8562$tVUFT
                                                                               g$t$9506$tVUFT
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$9503$tVUFT))))
                                                                   (g$syntax-dispatch$8562$tVUFT
                                                                     g$t$9503$tVUFT
                                                                     '(any)))))
                                                               g$t$9499$tVUFT))))
                                                         (g$syntax-dispatch$8562$tVUFT
                                                           g$t$9499$tVUFT
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$9495$tVUFT))))
                                               (g$syntax-dispatch$8562$tVUFT
                                                 g$t$9495$tVUFT
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$9476$tVUFT))))))
                            g$f$9475$tVUFT)
                          g$cls$9473$tVUFT
                          g$cls*$9474$tVUFT))))
                    g$ls/false$9472$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9471$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$9471$tVUFT
               '(_ any . each-any)))))
         g$stx$9470$tVUFT))))
   (g$do-include$8549$tVUFT
     g$do-include$12067$tVUFT
     (case-lambda
       ((g$stx$9512$tVUFT g$id$9513$tVUFT g$filename$9514$tVUFT)
        ((case-lambda
           ((g$filename$9515$tVUFT)
            (begin
              (if (not (if (string? g$filename$9515$tVUFT)
                         (begin '#f (g$id?$8283$tVUFT g$id$9513$tVUFT))
                         '#f))
                (g$syntax-violation$8674$tVUFT
                  '#f
                  '"invalid syntax"
                  g$stx$9512$tVUFT)
                (void))
              (cons
                (g$bless$8525$tVUFT 'begin)
                (g$with-input-from-file$6982$tVUFT
                  g$filename$9515$tVUFT
                  (case-lambda
                    (()
                     ((letrec ((g$f$9516$tVUFT
                                 (case-lambda
                                   ((g$ls$9517$tVUFT)
                                    ((case-lambda
                                       ((g$x$9518$tVUFT)
                                        (if (eof-object? g$x$9518$tVUFT)
                                          (g$reverse$5652$tVUFT g$ls$9517$tVUFT)
                                          (g$f$9516$tVUFT
                                            (cons
                                              (g$datum->stx$8266$tVUFT
                                                g$id$9513$tVUFT
                                                g$x$9518$tVUFT)
                                              g$ls$9517$tVUFT)))))
                                     (read-annotated))))))
                        g$f$9516$tVUFT)
                      '()))))))))
         (g$stx->datum$8294$tVUFT g$filename$9514$tVUFT)))))
   (g$include-macro$8550$tVUFT
     g$include-macro$12068$tVUFT
     (case-lambda
       ((g$e$9519$tVUFT)
        ((case-lambda
           ((g$t$9520$tVUFT)
            ((case-lambda
               ((g$ls/false$9521$tVUFT)
                (if g$ls/false$9521$tVUFT
                  (apply
                    (case-lambda
                      ((g$id$9522$tVUFT g$filename$9523$tVUFT)
                       (g$do-include$8549$tVUFT
                         g$e$9519$tVUFT
                         g$id$9522$tVUFT
                         g$filename$9523$tVUFT)))
                    g$ls/false$9521$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9520$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$9520$tVUFT '(any any)))))
         g$e$9519$tVUFT))))
   (g$include-into-macro$8551$tVUFT
     g$include-into-macro$12069$tVUFT
     (case-lambda
       ((g$e$9524$tVUFT)
        ((case-lambda
           ((g$t$9525$tVUFT)
            ((case-lambda
               ((g$ls/false$9526$tVUFT)
                (if g$ls/false$9526$tVUFT
                  (apply
                    (case-lambda
                      ((g$id$9527$tVUFT g$filename$9528$tVUFT)
                       (g$do-include$8549$tVUFT
                         g$e$9524$tVUFT
                         g$id$9527$tVUFT
                         g$filename$9528$tVUFT)))
                    g$ls/false$9526$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9525$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$9525$tVUFT '(_ any any)))))
         g$e$9524$tVUFT))))
   (g$syntax-rules-macro$8552$tVUFT
     g$syntax-rules-macro$12070$tVUFT
     (case-lambda
       ((g$e$9529$tVUFT)
        ((case-lambda
           ((g$t$9530$tVUFT)
            ((case-lambda
               ((g$ls/false$9531$tVUFT)
                (if g$ls/false$9531$tVUFT
                  (apply
                    (case-lambda
                      ((g$lits$9532$tVUFT g$pat*$9533$tVUFT g$tmp*$9534$tVUFT)
                       (begin
                         (g$verify-literals$8565$tVUFT
                           g$lits$9532$tVUFT
                           g$e$9529$tVUFT)
                         (g$bless$8525$tVUFT
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$9532$tVUFT
                                   (g$map$5157$tVUFT
                                     (case-lambda
                                       ((g$pat$9535$tVUFT g$tmp$9536$tVUFT)
                                        ((case-lambda
                                           ((g$t$9537$tVUFT)
                                            ((case-lambda
                                               ((g$ls/false$9538$tVUFT)
                                                (if g$ls/false$9538$tVUFT
                                                  (apply
                                                    (case-lambda
                                                      ((g$rest$9539$tVUFT)
                                                       (list
                                                         (cons
                                                           'g
                                                           g$rest$9539$tVUFT)
                                                         (list
                                                           'syntax
                                                           g$tmp$9536$tVUFT))))
                                                    g$ls/false$9538$tVUFT)
                                                  ((case-lambda
                                                     ((g$t$9540$tVUFT)
                                                      ((case-lambda
                                                         ((g$ls/false$9541$tVUFT)
                                                          (if g$ls/false$9541$tVUFT
                                                            (apply
                                                              (case-lambda
                                                                (()
                                                                 (g$syntax-violation$8674$tVUFT
                                                                   '#f
                                                                   '"invalid syntax-rules pattern"
                                                                   g$e$9529$tVUFT
                                                                   g$pat$9535$tVUFT)))
                                                              g$ls/false$9541$tVUFT)
                                                            (g$syntax-violation$8674$tVUFT
                                                              '#f
                                                              '"invalid syntax"
                                                              g$t$9540$tVUFT))))
                                                       (g$syntax-dispatch$8562$tVUFT
                                                         g$t$9540$tVUFT
                                                         '_))))
                                                   g$t$9537$tVUFT))))
                                             (g$syntax-dispatch$8562$tVUFT
                                               g$t$9537$tVUFT
                                               '(_ . any)))))
                                         g$pat$9535$tVUFT)))
                                     g$pat*$9533$tVUFT
                                     g$tmp*$9534$tVUFT)))))))))
                    g$ls/false$9531$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$9530$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$9530$tVUFT
               '(_ each-any . #(each (any any)))))))
         g$e$9529$tVUFT))))
   (g$quasiquote-macro$8553$tVUFT
     g$quasiquote-macro$12071$tVUFT
     ((case-lambda
        (()
         (letrec* ((g$datum$9542$tVUFT
                     (case-lambda
                       ((g$x$9673$tVUFT)
                        (list
                          (g$scheme-stx$8505$tVUFT 'quote)
                          (g$mkstx$8271$tVUFT g$x$9673$tVUFT '() '() '())))))
                   (g$quasicons*$9558$tVUFT
                     (case-lambda
                       ((g$x$9669$tVUFT g$y$9670$tVUFT)
                        ((letrec ((g$f$9671$tVUFT
                                    (case-lambda
                                      ((g$x$9672$tVUFT)
                                       (if (null? g$x$9672$tVUFT)
                                         g$y$9670$tVUFT
                                         (g$quasicons$9559$tVUFT
                                           (car g$x$9672$tVUFT)
                                           (g$f$9671$tVUFT
                                             (cdr g$x$9672$tVUFT))))))))
                           g$f$9671$tVUFT)
                         g$x$9669$tVUFT))))
                   (g$quasicons$9559$tVUFT
                     (case-lambda
                       ((g$x$9650$tVUFT g$y$9651$tVUFT)
                        ((case-lambda
                           ((g$t$9652$tVUFT)
                            ((case-lambda
                               ((g$ls/false$9653$tVUFT)
                                (if g$ls/false$9653$tVUFT
                                  (apply
                                    (case-lambda
                                      ((g$dy$9654$tVUFT)
                                       ((case-lambda
                                          ((g$t$9655$tVUFT)
                                           ((case-lambda
                                              ((g$ls/false$9656$tVUFT)
                                               (if g$ls/false$9656$tVUFT
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$9657$tVUFT)
                                                      (list
                                                        (g$scheme-stx$8505$tVUFT
                                                          'quote)
                                                        (cons
                                                          g$dx$9657$tVUFT
                                                          g$dy$9654$tVUFT))))
                                                   g$ls/false$9656$tVUFT)
                                                 ((case-lambda
                                                    ((g$t$9658$tVUFT)
                                                     ((case-lambda
                                                        ((g$ls/false$9659$tVUFT)
                                                         (if g$ls/false$9659$tVUFT
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$9660$tVUFT)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9661$tVUFT)
                                                                        (if g$ls/false$9661$tVUFT
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$8505$tVUFT
                                                                                   'list)
                                                                                 g$x$9650$tVUFT)))
                                                                            g$ls/false$9661$tVUFT)
                                                                          ((case-lambda
                                                                             ((g$t$9662$tVUFT)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9663$tVUFT)
                                                                                  (if g$ls/false$9663$tVUFT
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$8505$tVUFT
                                                                                             'cons)
                                                                                           g$x$9650$tVUFT
                                                                                           g$y$9651$tVUFT)))
                                                                                      g$ls/false$9663$tVUFT)
                                                                                    (g$syntax-violation$8674$tVUFT
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$9662$tVUFT))))
                                                                               (g$syntax-dispatch$8562$tVUFT
                                                                                 g$t$9662$tVUFT
                                                                                 '_))))
                                                                           g$t$9660$tVUFT))))
                                                                     (g$syntax-dispatch$8562$tVUFT
                                                                       g$t$9660$tVUFT
                                                                       '()))))
                                                                 g$dy$9654$tVUFT)))
                                                             g$ls/false$9659$tVUFT)
                                                           (g$syntax-violation$8674$tVUFT
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$9658$tVUFT))))
                                                      (g$syntax-dispatch$8562$tVUFT
                                                        g$t$9658$tVUFT
                                                        '_))))
                                                  g$t$9655$tVUFT))))
                                            (g$syntax-dispatch$8562$tVUFT
                                              g$t$9655$tVUFT
                                              '(#(scheme-id quote) any)))))
                                        g$x$9650$tVUFT)))
                                    g$ls/false$9653$tVUFT)
                                  ((case-lambda
                                     ((g$t$9664$tVUFT)
                                      ((case-lambda
                                         ((g$ls/false$9665$tVUFT)
                                          (if g$ls/false$9665$tVUFT
                                            (apply
                                              (case-lambda
                                                ((g$stuff$9666$tVUFT)
                                                 (g$cons*$5159$tVUFT
                                                   (g$scheme-stx$8505$tVUFT
                                                     'list)
                                                   g$x$9650$tVUFT
                                                   g$stuff$9666$tVUFT)))
                                              g$ls/false$9665$tVUFT)
                                            ((case-lambda
                                               ((g$t$9667$tVUFT)
                                                ((case-lambda
                                                   ((g$ls/false$9668$tVUFT)
                                                    (if g$ls/false$9668$tVUFT
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$8505$tVUFT
                                                               'cons)
                                                             g$x$9650$tVUFT
                                                             g$y$9651$tVUFT)))
                                                        g$ls/false$9668$tVUFT)
                                                      (g$syntax-violation$8674$tVUFT
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$9667$tVUFT))))
                                                 (g$syntax-dispatch$8562$tVUFT
                                                   g$t$9667$tVUFT
                                                   '_))))
                                             g$t$9664$tVUFT))))
                                       (g$syntax-dispatch$8562$tVUFT
                                         g$t$9664$tVUFT
                                         '(#(scheme-id list) . each-any)))))
                                   g$t$9652$tVUFT))))
                             (g$syntax-dispatch$8562$tVUFT
                               g$t$9652$tVUFT
                               '(#(scheme-id quote) any)))))
                         g$y$9651$tVUFT))))
                   (g$quasiappend$9560$tVUFT
                     (case-lambda
                       ((g$x$9637$tVUFT g$y$9638$tVUFT)
                        ((case-lambda
                           ((g$ls$9639$tVUFT)
                            (if (null? g$ls$9639$tVUFT)
                              (list (g$scheme-stx$8505$tVUFT 'quote) '())
                              (if (null? (cdr g$ls$9639$tVUFT))
                                (car g$ls$9639$tVUFT)
                                (g$cons*$5159$tVUFT
                                  (g$scheme-stx$8505$tVUFT 'append)
                                  g$ls$9639$tVUFT)))))
                         ((letrec ((g$f$9640$tVUFT
                                     (case-lambda
                                       ((g$x$9641$tVUFT)
                                        (if (null? g$x$9641$tVUFT)
                                          ((case-lambda
                                             ((g$t$9642$tVUFT)
                                              ((case-lambda
                                                 ((g$ls/false$9643$tVUFT)
                                                  (if g$ls/false$9643$tVUFT
                                                    (apply
                                                      (case-lambda (() '()))
                                                      g$ls/false$9643$tVUFT)
                                                    ((case-lambda
                                                       ((g$t$9644$tVUFT)
                                                        ((case-lambda
                                                           ((g$ls/false$9645$tVUFT)
                                                            (if g$ls/false$9645$tVUFT
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$9638$tVUFT)))
                                                                g$ls/false$9645$tVUFT)
                                                              (g$syntax-violation$8674$tVUFT
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9644$tVUFT))))
                                                         (g$syntax-dispatch$8562$tVUFT
                                                           g$t$9644$tVUFT
                                                           '_))))
                                                     g$t$9642$tVUFT))))
                                               (g$syntax-dispatch$8562$tVUFT
                                                 g$t$9642$tVUFT
                                                 '(#(scheme-id quote) ())))))
                                           g$y$9638$tVUFT)
                                          ((case-lambda
                                             ((g$t$9646$tVUFT)
                                              ((case-lambda
                                                 ((g$ls/false$9647$tVUFT)
                                                  (if g$ls/false$9647$tVUFT
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$9640$tVUFT
                                                           (cdr g$x$9641$tVUFT))))
                                                      g$ls/false$9647$tVUFT)
                                                    ((case-lambda
                                                       ((g$t$9648$tVUFT)
                                                        ((case-lambda
                                                           ((g$ls/false$9649$tVUFT)
                                                            (if g$ls/false$9649$tVUFT
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$9641$tVUFT)
                                                                     (g$f$9640$tVUFT
                                                                       (cdr g$x$9641$tVUFT)))))
                                                                g$ls/false$9649$tVUFT)
                                                              (g$syntax-violation$8674$tVUFT
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9648$tVUFT))))
                                                         (g$syntax-dispatch$8562$tVUFT
                                                           g$t$9648$tVUFT
                                                           '_))))
                                                     g$t$9646$tVUFT))))
                                               (g$syntax-dispatch$8562$tVUFT
                                                 g$t$9646$tVUFT
                                                 '(#(scheme-id quote) ())))))
                                           (car g$x$9641$tVUFT)))))))
                            g$f$9640$tVUFT)
                          g$x$9637$tVUFT)))))
                   (g$quasivector$9561$tVUFT
                     (case-lambda
                       ((g$x$9612$tVUFT)
                        ((case-lambda
                           ((g$pat-x$9613$tVUFT)
                            ((case-lambda
                               ((g$t$9614$tVUFT)
                                ((case-lambda
                                   ((g$ls/false$9615$tVUFT)
                                    (if g$ls/false$9615$tVUFT
                                      (apply
                                        (case-lambda
                                          ((g$x*$9616$tVUFT)
                                           (list
                                             (g$scheme-stx$8505$tVUFT 'quote)
                                             (g$list->vector$5640$tVUFT
                                               g$x*$9616$tVUFT))))
                                        g$ls/false$9615$tVUFT)
                                      ((case-lambda
                                         ((g$t$9617$tVUFT)
                                          ((case-lambda
                                             ((g$ls/false$9618$tVUFT)
                                              (if g$ls/false$9618$tVUFT
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$9619$tVUFT
                                                                 (case-lambda
                                                                   ((g$x$9620$tVUFT
                                                                      g$k$9621$tVUFT)
                                                                    ((case-lambda
                                                                       ((g$t$9622$tVUFT)
                                                                        ((case-lambda
                                                                           ((g$ls/false$9623$tVUFT)
                                                                            (if g$ls/false$9623$tVUFT
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$9624$tVUFT)
                                                                                   (g$k$9621$tVUFT
                                                                                     (g$map$5157$tVUFT
                                                                                       (case-lambda
                                                                                         ((g$x$9625$tVUFT)
                                                                                          (list
                                                                                            (g$scheme-stx$8505$tVUFT
                                                                                              'quote)
                                                                                            g$x$9625$tVUFT)))
                                                                                       g$x*$9624$tVUFT))))
                                                                                g$ls/false$9623$tVUFT)
                                                                              ((case-lambda
                                                                                 ((g$t$9626$tVUFT)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$9627$tVUFT)
                                                                                      (if g$ls/false$9627$tVUFT
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$9628$tVUFT)
                                                                                             (g$k$9621$tVUFT
                                                                                               g$x*$9628$tVUFT)))
                                                                                          g$ls/false$9627$tVUFT)
                                                                                        ((case-lambda
                                                                                           ((g$t$9629$tVUFT)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$9630$tVUFT)
                                                                                                (if g$ls/false$9630$tVUFT
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$9631$tVUFT
                                                                                                         g$y$9632$tVUFT)
                                                                                                       (g$f$9619$tVUFT
                                                                                                         g$y$9632$tVUFT
                                                                                                         (case-lambda
                                                                                                           ((g$ls$9633$tVUFT)
                                                                                                            (g$k$9621$tVUFT
                                                                                                              (cons
                                                                                                                g$x$9631$tVUFT
                                                                                                                g$ls$9633$tVUFT)))))))
                                                                                                    g$ls/false$9630$tVUFT)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$9634$tVUFT)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$9635$tVUFT)
                                                                                                          (if g$ls/false$9635$tVUFT
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$8505$tVUFT
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$9613$tVUFT)))
                                                                                                              g$ls/false$9635$tVUFT)
                                                                                                            (g$syntax-violation$8674$tVUFT
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$9634$tVUFT))))
                                                                                                       (g$syntax-dispatch$8562$tVUFT
                                                                                                         g$t$9634$tVUFT
                                                                                                         '_))))
                                                                                                   g$t$9629$tVUFT))))
                                                                                             (g$syntax-dispatch$8562$tVUFT
                                                                                               g$t$9629$tVUFT
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$9626$tVUFT))))
                                                                                   (g$syntax-dispatch$8562$tVUFT
                                                                                     g$t$9626$tVUFT
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$9622$tVUFT))))
                                                                         (g$syntax-dispatch$8562$tVUFT
                                                                           g$t$9622$tVUFT
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$9620$tVUFT)))))
                                                        g$f$9619$tVUFT)
                                                      g$x$9612$tVUFT
                                                      (case-lambda
                                                        ((g$ls$9636$tVUFT)
                                                         (g$cons*$5159$tVUFT
                                                           (g$scheme-stx$8505$tVUFT
                                                             'vector)
                                                           g$ls$9636$tVUFT))))))
                                                  g$ls/false$9618$tVUFT)
                                                (g$syntax-violation$8674$tVUFT
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$9617$tVUFT))))
                                           (g$syntax-dispatch$8562$tVUFT
                                             g$t$9617$tVUFT
                                             '_))))
                                       g$t$9614$tVUFT))))
                                 (g$syntax-dispatch$8562$tVUFT
                                   g$t$9614$tVUFT
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$9613$tVUFT)))
                         g$x$9612$tVUFT))))
                   (g$vquasi$9562$tVUFT
                     (case-lambda
                       ((g$p$9595$tVUFT g$lev$9596$tVUFT)
                        ((case-lambda
                           ((g$t$9597$tVUFT)
                            ((case-lambda
                               ((g$ls/false$9598$tVUFT)
                                (if g$ls/false$9598$tVUFT
                                  (apply
                                    (case-lambda
                                      ((g$p$9599$tVUFT g$q$9600$tVUFT)
                                       ((case-lambda
                                          ((g$t$9601$tVUFT)
                                           ((case-lambda
                                              ((g$ls/false$9602$tVUFT)
                                               (if g$ls/false$9602$tVUFT
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9603$tVUFT)
                                                      (if (= g$lev$9596$tVUFT
                                                             '0)
                                                        (g$quasicons*$9558$tVUFT
                                                          g$p$9603$tVUFT
                                                          (g$vquasi$9562$tVUFT
                                                            g$q$9600$tVUFT
                                                            g$lev$9596$tVUFT))
                                                        (g$quasicons$9559$tVUFT
                                                          (g$quasicons$9559$tVUFT
                                                            (g$datum$9542$tVUFT
                                                              'unquote)
                                                            (g$quasi$9563$tVUFT
                                                              g$p$9603$tVUFT
                                                              (- g$lev$9596$tVUFT
                                                                 '1)))
                                                          (g$vquasi$9562$tVUFT
                                                            g$q$9600$tVUFT
                                                            g$lev$9596$tVUFT)))))
                                                   g$ls/false$9602$tVUFT)
                                                 ((case-lambda
                                                    ((g$t$9604$tVUFT)
                                                     ((case-lambda
                                                        ((g$ls/false$9605$tVUFT)
                                                         (if g$ls/false$9605$tVUFT
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$9606$tVUFT)
                                                                (if (= g$lev$9596$tVUFT
                                                                       '0)
                                                                  (g$quasiappend$9560$tVUFT
                                                                    g$p$9606$tVUFT
                                                                    (g$vquasi$9562$tVUFT
                                                                      g$q$9600$tVUFT
                                                                      g$lev$9596$tVUFT))
                                                                  (g$quasicons$9559$tVUFT
                                                                    (g$quasicons$9559$tVUFT
                                                                      (g$datum$9542$tVUFT
                                                                        'unquote-splicing)
                                                                      (g$quasi$9563$tVUFT
                                                                        g$p$9606$tVUFT
                                                                        (- g$lev$9596$tVUFT
                                                                           '1)))
                                                                    (g$vquasi$9562$tVUFT
                                                                      g$q$9600$tVUFT
                                                                      g$lev$9596$tVUFT)))))
                                                             g$ls/false$9605$tVUFT)
                                                           ((case-lambda
                                                              ((g$t$9607$tVUFT)
                                                               ((case-lambda
                                                                  ((g$ls/false$9608$tVUFT)
                                                                   (if g$ls/false$9608$tVUFT
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$9609$tVUFT)
                                                                          (g$quasicons$9559$tVUFT
                                                                            (g$quasi$9563$tVUFT
                                                                              g$p$9609$tVUFT
                                                                              g$lev$9596$tVUFT)
                                                                            (g$vquasi$9562$tVUFT
                                                                              g$q$9600$tVUFT
                                                                              g$lev$9596$tVUFT))))
                                                                       g$ls/false$9608$tVUFT)
                                                                     (g$syntax-violation$8674$tVUFT
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$9607$tVUFT))))
                                                                (g$syntax-dispatch$8562$tVUFT
                                                                  g$t$9607$tVUFT
                                                                  'any))))
                                                            g$t$9604$tVUFT))))
                                                      (g$syntax-dispatch$8562$tVUFT
                                                        g$t$9604$tVUFT
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$9601$tVUFT))))
                                            (g$syntax-dispatch$8562$tVUFT
                                              g$t$9601$tVUFT
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$9599$tVUFT)))
                                    g$ls/false$9598$tVUFT)
                                  ((case-lambda
                                     ((g$t$9610$tVUFT)
                                      ((case-lambda
                                         ((g$ls/false$9611$tVUFT)
                                          (if g$ls/false$9611$tVUFT
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$8505$tVUFT
                                                     'quote)
                                                   '())))
                                              g$ls/false$9611$tVUFT)
                                            (g$syntax-violation$8674$tVUFT
                                              '#f
                                              '"invalid syntax"
                                              g$t$9610$tVUFT))))
                                       (g$syntax-dispatch$8562$tVUFT
                                         g$t$9610$tVUFT
                                         '()))))
                                   g$t$9597$tVUFT))))
                             (g$syntax-dispatch$8562$tVUFT
                               g$t$9597$tVUFT
                               '(any . any)))))
                         g$p$9595$tVUFT))))
                   (g$quasi$9563$tVUFT
                     (case-lambda
                       ((g$p$9568$tVUFT g$lev$9569$tVUFT)
                        ((case-lambda
                           ((g$t$9570$tVUFT)
                            ((case-lambda
                               ((g$ls/false$9571$tVUFT)
                                (if g$ls/false$9571$tVUFT
                                  (apply
                                    (case-lambda
                                      ((g$p$9572$tVUFT)
                                       (if (= g$lev$9569$tVUFT '0)
                                         g$p$9572$tVUFT
                                         (g$quasicons$9559$tVUFT
                                           (g$datum$9542$tVUFT 'unquote)
                                           (g$quasi$9563$tVUFT
                                             (list g$p$9572$tVUFT)
                                             (- g$lev$9569$tVUFT '1))))))
                                    g$ls/false$9571$tVUFT)
                                  ((case-lambda
                                     ((g$t$9573$tVUFT)
                                      ((case-lambda
                                         ((g$ls/false$9574$tVUFT)
                                          (if g$ls/false$9574$tVUFT
                                            (apply
                                              (case-lambda
                                                ((g$p$9575$tVUFT g$q$9576$tVUFT)
                                                 (if (= g$lev$9569$tVUFT '0)
                                                   (g$quasicons*$9558$tVUFT
                                                     g$p$9575$tVUFT
                                                     (g$quasi$9563$tVUFT
                                                       g$q$9576$tVUFT
                                                       g$lev$9569$tVUFT))
                                                   (g$quasicons$9559$tVUFT
                                                     (g$quasicons$9559$tVUFT
                                                       (g$datum$9542$tVUFT
                                                         'unquote)
                                                       (g$quasi$9563$tVUFT
                                                         g$p$9575$tVUFT
                                                         (- g$lev$9569$tVUFT
                                                            '1)))
                                                     (g$quasi$9563$tVUFT
                                                       g$q$9576$tVUFT
                                                       g$lev$9569$tVUFT)))))
                                              g$ls/false$9574$tVUFT)
                                            ((case-lambda
                                               ((g$t$9577$tVUFT)
                                                ((case-lambda
                                                   ((g$ls/false$9578$tVUFT)
                                                    (if g$ls/false$9578$tVUFT
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$9579$tVUFT
                                                             g$q$9580$tVUFT)
                                                           (if (= g$lev$9569$tVUFT
                                                                  '0)
                                                             (g$quasiappend$9560$tVUFT
                                                               g$p$9579$tVUFT
                                                               (g$quasi$9563$tVUFT
                                                                 g$q$9580$tVUFT
                                                                 g$lev$9569$tVUFT))
                                                             (g$quasicons$9559$tVUFT
                                                               (g$quasicons$9559$tVUFT
                                                                 (g$datum$9542$tVUFT
                                                                   'unquote-splicing)
                                                                 (g$quasi$9563$tVUFT
                                                                   g$p$9579$tVUFT
                                                                   (- g$lev$9569$tVUFT
                                                                      '1)))
                                                               (g$quasi$9563$tVUFT
                                                                 g$q$9580$tVUFT
                                                                 g$lev$9569$tVUFT)))))
                                                        g$ls/false$9578$tVUFT)
                                                      ((case-lambda
                                                         ((g$t$9581$tVUFT)
                                                          ((case-lambda
                                                             ((g$ls/false$9582$tVUFT)
                                                              (if g$ls/false$9582$tVUFT
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$9583$tVUFT)
                                                                     (g$quasicons$9559$tVUFT
                                                                       (g$datum$9542$tVUFT
                                                                         'quasiquote)
                                                                       (g$quasi$9563$tVUFT
                                                                         (list
                                                                           g$p$9583$tVUFT)
                                                                         (+ g$lev$9569$tVUFT
                                                                            '1)))))
                                                                  g$ls/false$9582$tVUFT)
                                                                ((case-lambda
                                                                   ((g$t$9584$tVUFT)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9585$tVUFT)
                                                                        (if g$ls/false$9585$tVUFT
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$9586$tVUFT
                                                                                 g$q$9587$tVUFT)
                                                                               (g$quasicons$9559$tVUFT
                                                                                 (g$quasi$9563$tVUFT
                                                                                   g$p$9586$tVUFT
                                                                                   g$lev$9569$tVUFT)
                                                                                 (g$quasi$9563$tVUFT
                                                                                   g$q$9587$tVUFT
                                                                                   g$lev$9569$tVUFT))))
                                                                            g$ls/false$9585$tVUFT)
                                                                          ((case-lambda
                                                                             ((g$t$9588$tVUFT)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9589$tVUFT)
                                                                                  (if (if g$ls/false$9589$tVUFT
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$9590$tVUFT)
                                                                                               (not (g$stx?$8255$tVUFT
                                                                                                      g$x$9590$tVUFT))))
                                                                                            g$ls/false$9589$tVUFT))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$9591$tVUFT)
                                                                                         (g$quasivector$9561$tVUFT
                                                                                           (g$vquasi$9562$tVUFT
                                                                                             g$x$9591$tVUFT
                                                                                             g$lev$9569$tVUFT))))
                                                                                      g$ls/false$9589$tVUFT)
                                                                                    ((case-lambda
                                                                                       ((g$t$9592$tVUFT)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9593$tVUFT)
                                                                                            (if g$ls/false$9593$tVUFT
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$9594$tVUFT)
                                                                                                   (list
                                                                                                     (g$scheme-stx$8505$tVUFT
                                                                                                       'quote)
                                                                                                     g$p$9594$tVUFT)))
                                                                                                g$ls/false$9593$tVUFT)
                                                                                              (g$syntax-violation$8674$tVUFT
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9592$tVUFT))))
                                                                                         (g$syntax-dispatch$8562$tVUFT
                                                                                           g$t$9592$tVUFT
                                                                                           'any))))
                                                                                     g$t$9588$tVUFT))))
                                                                               (g$syntax-dispatch$8562$tVUFT
                                                                                 g$t$9588$tVUFT
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9584$tVUFT))))
                                                                     (g$syntax-dispatch$8562$tVUFT
                                                                       g$t$9584$tVUFT
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9581$tVUFT))))
                                                           (g$syntax-dispatch$8562$tVUFT
                                                             g$t$9581$tVUFT
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$9577$tVUFT))))
                                                 (g$syntax-dispatch$8562$tVUFT
                                                   g$t$9577$tVUFT
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$9573$tVUFT))))
                                       (g$syntax-dispatch$8562$tVUFT
                                         g$t$9573$tVUFT
                                         '((#(scheme-id unquote) . each-any)
                                           .
                                           any)))))
                                   g$t$9570$tVUFT))))
                             (g$syntax-dispatch$8562$tVUFT
                               g$t$9570$tVUFT
                               '(#(scheme-id unquote) any)))))
                         g$p$9568$tVUFT)))))
           (case-lambda
             ((g$x$9564$tVUFT)
              ((case-lambda
                 ((g$t$9565$tVUFT)
                  ((case-lambda
                     ((g$ls/false$9566$tVUFT)
                      (if g$ls/false$9566$tVUFT
                        (apply
                          (case-lambda
                            ((g$e$9567$tVUFT)
                             (g$quasi$9563$tVUFT g$e$9567$tVUFT '0)))
                          g$ls/false$9566$tVUFT)
                        (g$syntax-violation$8674$tVUFT
                          '#f
                          '"invalid syntax"
                          g$t$9565$tVUFT))))
                   (g$syntax-dispatch$8562$tVUFT g$t$9565$tVUFT '(_ any)))))
               g$x$9564$tVUFT))))))))
   (g$quasisyntax-macro$8554$tVUFT
     g$quasisyntax-macro$12072$tVUFT
     ((case-lambda
        (()
         (letrec* ((g$quasi$9674$tVUFT
                     (case-lambda
                       ((g$p$9688$tVUFT g$lev$9689$tVUFT)
                        ((case-lambda
                           ((g$t$9690$tVUFT)
                            ((case-lambda
                               ((g$ls/false$9691$tVUFT)
                                (if g$ls/false$9691$tVUFT
                                  (apply
                                    (case-lambda
                                      ((g$p$9692$tVUFT)
                                       (if (= g$lev$9689$tVUFT '0)
                                         ((case-lambda
                                            ((g$g$9693$tVUFT)
                                             (values
                                               (list g$g$9693$tVUFT)
                                               (list g$p$9692$tVUFT)
                                               g$g$9693$tVUFT)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$9674$tVUFT
                                                g$p$9692$tVUFT
                                                (- g$lev$9689$tVUFT '1))))
                                           (case-lambda
                                             ((g$lhs*$9697$tVUFT
                                                g$rhs*$9698$tVUFT
                                                g$p$9699$tVUFT)
                                              ((case-lambda
                                                 ((g$p$9700$tVUFT
                                                    g$rhs*$9701$tVUFT
                                                    g$lhs*$9702$tVUFT)
                                                  (values
                                                    g$lhs*$9702$tVUFT
                                                    g$rhs*$9701$tVUFT
                                                    (list
                                                      'unsyntax
                                                      g$p$9700$tVUFT))))
                                               g$p$9699$tVUFT
                                               g$rhs*$9698$tVUFT
                                               g$lhs*$9697$tVUFT)))))))
                                    g$ls/false$9691$tVUFT)
                                  ((case-lambda
                                     ((g$t$9703$tVUFT)
                                      ((case-lambda
                                         ((g$ls/false$9704$tVUFT)
                                          (if (if g$ls/false$9704$tVUFT
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$9689$tVUFT '0)))
                                                    g$ls/false$9704$tVUFT))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$8674$tVUFT
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$9688$tVUFT)))
                                              g$ls/false$9704$tVUFT)
                                            ((case-lambda
                                               ((g$t$9705$tVUFT)
                                                ((case-lambda
                                                   ((g$ls/false$9706$tVUFT)
                                                    (if g$ls/false$9706$tVUFT
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$9707$tVUFT
                                                             g$q$9708$tVUFT)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$9674$tVUFT
                                                                  g$q$9708$tVUFT
                                                                  g$lev$9689$tVUFT)))
                                                             (case-lambda
                                                               ((g$lhs*$9712$tVUFT
                                                                  g$rhs*$9713$tVUFT
                                                                  g$q$9714$tVUFT)
                                                                ((case-lambda
                                                                   ((g$q$9715$tVUFT
                                                                      g$rhs*$9716$tVUFT
                                                                      g$lhs*$9717$tVUFT)
                                                                    (if (= g$lev$9689$tVUFT
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$9718$tVUFT)
                                                                          (values
                                                                            (append
                                                                              g$g*$9718$tVUFT
                                                                              g$lhs*$9717$tVUFT)
                                                                            (append
                                                                              g$p*$9707$tVUFT
                                                                              g$rhs*$9716$tVUFT)
                                                                            (append
                                                                              g$g*$9718$tVUFT
                                                                              g$q$9715$tVUFT))))
                                                                       (g$map$5157$tVUFT
                                                                         (case-lambda
                                                                           ((g$x$9719$tVUFT)
                                                                            (gensym)))
                                                                         g$p*$9707$tVUFT))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$9674$tVUFT
                                                                             g$p*$9707$tVUFT
                                                                             (- g$lev$9689$tVUFT
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$9723$tVUFT
                                                                             g$rhs2*$9724$tVUFT
                                                                             g$p*$9725$tVUFT)
                                                                           ((case-lambda
                                                                              ((g$p*$9726$tVUFT
                                                                                 g$rhs2*$9727$tVUFT
                                                                                 g$lhs2*$9728$tVUFT)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$9728$tVUFT
                                                                                   g$lhs*$9717$tVUFT)
                                                                                 (append
                                                                                   g$rhs2*$9727$tVUFT
                                                                                   g$rhs*$9716$tVUFT)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$9726$tVUFT)
                                                                                   g$q$9715$tVUFT))))
                                                                            g$p*$9725$tVUFT
                                                                            g$rhs2*$9724$tVUFT
                                                                            g$lhs2*$9723$tVUFT)))))))
                                                                 g$q$9714$tVUFT
                                                                 g$rhs*$9713$tVUFT
                                                                 g$lhs*$9712$tVUFT))))))
                                                        g$ls/false$9706$tVUFT)
                                                      ((case-lambda
                                                         ((g$t$9729$tVUFT)
                                                          ((case-lambda
                                                             ((g$ls/false$9730$tVUFT)
                                                              (if g$ls/false$9730$tVUFT
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$9731$tVUFT
                                                                       g$q$9732$tVUFT)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$9674$tVUFT
                                                                            g$q$9732$tVUFT
                                                                            g$lev$9689$tVUFT)))
                                                                       (case-lambda
                                                                         ((g$lhs*$9736$tVUFT
                                                                            g$rhs*$9737$tVUFT
                                                                            g$q$9738$tVUFT)
                                                                          ((case-lambda
                                                                             ((g$q$9739$tVUFT
                                                                                g$rhs*$9740$tVUFT
                                                                                g$lhs*$9741$tVUFT)
                                                                              (if (= g$lev$9689$tVUFT
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$9742$tVUFT)
                                                                                    (values
                                                                                      (append
                                                                                        (g$map$5157$tVUFT
                                                                                          (case-lambda
                                                                                            ((g$g$9743$tVUFT)
                                                                                             (cons
                                                                                               g$g$9743$tVUFT
                                                                                               '(...))))
                                                                                          g$g*$9742$tVUFT)
                                                                                        g$lhs*$9741$tVUFT)
                                                                                      (append
                                                                                        g$p*$9731$tVUFT
                                                                                        g$rhs*$9740$tVUFT)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (g$map$5157$tVUFT
                                                                                            (case-lambda
                                                                                              ((g$g$9744$tVUFT)
                                                                                               (cons
                                                                                                 g$g$9744$tVUFT
                                                                                                 '(...))))
                                                                                            g$g*$9742$tVUFT))
                                                                                        g$q$9739$tVUFT))))
                                                                                 (g$map$5157$tVUFT
                                                                                   (case-lambda
                                                                                     ((g$x$9745$tVUFT)
                                                                                      (gensym)))
                                                                                   g$p*$9731$tVUFT))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$9674$tVUFT
                                                                                       g$p*$9731$tVUFT
                                                                                       (- g$lev$9689$tVUFT
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$9749$tVUFT
                                                                                       g$rhs2*$9750$tVUFT
                                                                                       g$p*$9751$tVUFT)
                                                                                     ((case-lambda
                                                                                        ((g$p*$9752$tVUFT
                                                                                           g$rhs2*$9753$tVUFT
                                                                                           g$lhs2*$9754$tVUFT)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$9754$tVUFT
                                                                                             g$lhs*$9741$tVUFT)
                                                                                           (append
                                                                                             g$rhs2*$9753$tVUFT
                                                                                             g$rhs*$9740$tVUFT)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$9752$tVUFT)
                                                                                             g$q$9739$tVUFT))))
                                                                                      g$p*$9751$tVUFT
                                                                                      g$rhs2*$9750$tVUFT
                                                                                      g$lhs2*$9749$tVUFT)))))))
                                                                           g$q$9738$tVUFT
                                                                           g$rhs*$9737$tVUFT
                                                                           g$lhs*$9736$tVUFT))))))
                                                                  g$ls/false$9730$tVUFT)
                                                                ((case-lambda
                                                                   ((g$t$9755$tVUFT)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9756$tVUFT)
                                                                        (if (if g$ls/false$9756$tVUFT
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$9689$tVUFT
                                                                                        '0)))
                                                                                  g$ls/false$9756$tVUFT))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$8674$tVUFT
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$9688$tVUFT)))
                                                                            g$ls/false$9756$tVUFT)
                                                                          ((case-lambda
                                                                             ((g$t$9757$tVUFT)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9758$tVUFT)
                                                                                  (if g$ls/false$9758$tVUFT
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$9759$tVUFT)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$9674$tVUFT
                                                                                                g$p$9759$tVUFT
                                                                                                (+ g$lev$9689$tVUFT
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$9763$tVUFT
                                                                                                g$rhs*$9764$tVUFT
                                                                                                g$p$9765$tVUFT)
                                                                                              ((case-lambda
                                                                                                 ((g$p$9766$tVUFT
                                                                                                    g$rhs*$9767$tVUFT
                                                                                                    g$lhs*$9768$tVUFT)
                                                                                                  (values
                                                                                                    g$lhs*$9768$tVUFT
                                                                                                    g$rhs*$9767$tVUFT
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$9766$tVUFT))))
                                                                                               g$p$9765$tVUFT
                                                                                               g$rhs*$9764$tVUFT
                                                                                               g$lhs*$9763$tVUFT))))))
                                                                                      g$ls/false$9758$tVUFT)
                                                                                    ((case-lambda
                                                                                       ((g$t$9769$tVUFT)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9770$tVUFT)
                                                                                            (if g$ls/false$9770$tVUFT
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$9771$tVUFT
                                                                                                     g$q$9772$tVUFT)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$9674$tVUFT
                                                                                                          g$p$9771$tVUFT
                                                                                                          g$lev$9689$tVUFT)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$9779$tVUFT
                                                                                                          g$rhs*$9780$tVUFT
                                                                                                          g$p$9781$tVUFT)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$9674$tVUFT
                                                                                                               g$q$9772$tVUFT
                                                                                                               g$lev$9689$tVUFT)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$9782$tVUFT
                                                                                                               g$rhs2*$9783$tVUFT
                                                                                                               g$q$9784$tVUFT)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$9785$tVUFT
                                                                                                                   g$rhs2*$9786$tVUFT
                                                                                                                   g$lhs2*$9787$tVUFT
                                                                                                                   g$p$9788$tVUFT
                                                                                                                   g$rhs*$9789$tVUFT
                                                                                                                   g$lhs*$9790$tVUFT)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$9787$tVUFT
                                                                                                                     g$lhs*$9790$tVUFT)
                                                                                                                   (append
                                                                                                                     g$rhs2*$9786$tVUFT
                                                                                                                     g$rhs*$9789$tVUFT)
                                                                                                                   (cons
                                                                                                                     g$p$9788$tVUFT
                                                                                                                     g$q$9785$tVUFT))))
                                                                                                              g$q$9784$tVUFT
                                                                                                              g$rhs2*$9783$tVUFT
                                                                                                              g$lhs2*$9782$tVUFT
                                                                                                              g$p$9781$tVUFT
                                                                                                              g$rhs*$9780$tVUFT
                                                                                                              g$lhs*$9779$tVUFT)))))))))
                                                                                                g$ls/false$9770$tVUFT)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9791$tVUFT)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9792$tVUFT)
                                                                                                      (if g$ls/false$9792$tVUFT
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$9793$tVUFT)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$9674$tVUFT
                                                                                                                    g$x*$9793$tVUFT
                                                                                                                    g$lev$9689$tVUFT)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$9797$tVUFT
                                                                                                                    g$rhs*$9798$tVUFT
                                                                                                                    g$x*$9799$tVUFT)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$9800$tVUFT
                                                                                                                        g$rhs*$9801$tVUFT
                                                                                                                        g$lhs*$9802$tVUFT)
                                                                                                                      (values
                                                                                                                        g$lhs*$9802$tVUFT
                                                                                                                        g$rhs*$9801$tVUFT
                                                                                                                        (g$list->vector$5640$tVUFT
                                                                                                                          g$x*$9800$tVUFT))))
                                                                                                                   g$x*$9799$tVUFT
                                                                                                                   g$rhs*$9798$tVUFT
                                                                                                                   g$lhs*$9797$tVUFT))))))
                                                                                                          g$ls/false$9792$tVUFT)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9803$tVUFT)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9804$tVUFT)
                                                                                                                (if g$ls/false$9804$tVUFT
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$9688$tVUFT)))
                                                                                                                    g$ls/false$9804$tVUFT)
                                                                                                                  (g$syntax-violation$8674$tVUFT
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9803$tVUFT))))
                                                                                                             (g$syntax-dispatch$8562$tVUFT
                                                                                                               g$t$9803$tVUFT
                                                                                                               '_))))
                                                                                                         g$t$9791$tVUFT))))
                                                                                                   (g$syntax-dispatch$8562$tVUFT
                                                                                                     g$t$9791$tVUFT
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$9769$tVUFT))))
                                                                                         (g$syntax-dispatch$8562$tVUFT
                                                                                           g$t$9769$tVUFT
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$9757$tVUFT))))
                                                                               (g$syntax-dispatch$8562$tVUFT
                                                                                 g$t$9757$tVUFT
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$9755$tVUFT))))
                                                                     (g$syntax-dispatch$8562$tVUFT
                                                                       g$t$9755$tVUFT
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$9729$tVUFT))))
                                                           (g$syntax-dispatch$8562$tVUFT
                                                             g$t$9729$tVUFT
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$9705$tVUFT))))
                                                 (g$syntax-dispatch$8562$tVUFT
                                                   g$t$9705$tVUFT
                                                   '((#(scheme-id unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$9703$tVUFT))))
                                       (g$syntax-dispatch$8562$tVUFT
                                         g$t$9703$tVUFT
                                         '#(scheme-id unsyntax)))))
                                   g$t$9690$tVUFT))))
                             (g$syntax-dispatch$8562$tVUFT
                               g$t$9690$tVUFT
                               '(#(scheme-id unsyntax) any)))))
                         g$p$9688$tVUFT)))))
           (case-lambda
             ((g$x$9675$tVUFT)
              ((case-lambda
                 ((g$t$9676$tVUFT)
                  ((case-lambda
                     ((g$ls/false$9677$tVUFT)
                      (if g$ls/false$9677$tVUFT
                        (apply
                          (case-lambda
                            ((g$e$9678$tVUFT)
                             (call-with-values
                               (case-lambda
                                 (() (g$quasi$9674$tVUFT g$e$9678$tVUFT '0)))
                               (case-lambda
                                 ((g$lhs*$9682$tVUFT
                                    g$rhs*$9683$tVUFT
                                    g$v$9684$tVUFT)
                                  ((case-lambda
                                     ((g$v$9685$tVUFT
                                        g$rhs*$9686$tVUFT
                                        g$lhs*$9687$tVUFT)
                                      (g$bless$8525$tVUFT
                                        (list
                                          'syntax-case
                                          (cons 'list g$rhs*$9686$tVUFT)
                                          '()
                                          (list
                                            g$lhs*$9687$tVUFT
                                            (list 'syntax g$v$9685$tVUFT))))))
                                   g$v$9684$tVUFT
                                   g$rhs*$9683$tVUFT
                                   g$lhs*$9682$tVUFT))))))
                          g$ls/false$9677$tVUFT)
                        (g$syntax-violation$8674$tVUFT
                          '#f
                          '"invalid syntax"
                          g$t$9676$tVUFT))))
                   (g$syntax-dispatch$8562$tVUFT g$t$9676$tVUFT '(_ any)))))
               g$x$9675$tVUFT))))))))
   (g$define-struct-macro$8555$tVUFT
     g$define-struct-macro$12073$tVUFT
     (case-lambda
       ((g$stx$9805$tVUFT)
        (g$syntax-violation$8674$tVUFT
          '#f
          '"define-struct not supported"
          g$stx$9805$tVUFT))))
   (g$define-record-type-macro$8556$tVUFT
     g$define-record-type-macro$12074$tVUFT
     (case-lambda
       ((g$x$9806$tVUFT)
        (letrec* ((g$id$9807$tVUFT
                    (case-lambda
                      ((g$ctxt$10059$tVUFT . g$str*$10060$tVUFT)
                       (g$datum->syntax$8676$tVUFT
                         g$ctxt$10059$tVUFT
                         (string->symbol
                           (apply
                             string-append
                             (g$map$5157$tVUFT
                               (case-lambda
                                 ((g$x$10061$tVUFT)
                                  (if (g$symbol?$5645$tVUFT g$x$10061$tVUFT)
                                    (symbol->string g$x$10061$tVUFT)
                                    (if (string? g$x$10061$tVUFT)
                                      g$x$10061$tVUFT
                                      (assertion-violation
                                        'define-record-type
                                        '"BUG")))))
                               g$str*$10060$tVUFT)))))))
                  (g$get-record-name$9808$tVUFT
                    (case-lambda
                      ((g$spec$10050$tVUFT)
                       ((case-lambda
                          ((g$t$10051$tVUFT)
                           ((case-lambda
                              ((g$ls/false$10052$tVUFT)
                               (if g$ls/false$10052$tVUFT
                                 (apply
                                   (case-lambda
                                     ((g$foo$10053$tVUFT
                                        g$make-foo$10054$tVUFT
                                        g$foo?$10055$tVUFT)
                                      g$foo$10053$tVUFT))
                                   g$ls/false$10052$tVUFT)
                                 ((case-lambda
                                    ((g$t$10056$tVUFT)
                                     ((case-lambda
                                        ((g$ls/false$10057$tVUFT)
                                         (if g$ls/false$10057$tVUFT
                                           (apply
                                             (case-lambda
                                               ((g$foo$10058$tVUFT)
                                                g$foo$10058$tVUFT))
                                             g$ls/false$10057$tVUFT)
                                           (g$syntax-violation$8674$tVUFT
                                             '#f
                                             '"invalid syntax"
                                             g$t$10056$tVUFT))))
                                      (g$syntax-dispatch$8562$tVUFT
                                        g$t$10056$tVUFT
                                        'any))))
                                  g$t$10051$tVUFT))))
                            (g$syntax-dispatch$8562$tVUFT
                              g$t$10051$tVUFT
                              '(any any any)))))
                        g$spec$10050$tVUFT))))
                  (g$get-record-constructor-name$9809$tVUFT
                    (case-lambda
                      ((g$spec$10040$tVUFT)
                       ((case-lambda
                          ((g$t$10041$tVUFT)
                           ((case-lambda
                              ((g$ls/false$10042$tVUFT)
                               (if g$ls/false$10042$tVUFT
                                 (apply
                                   (case-lambda
                                     ((g$foo$10043$tVUFT
                                        g$make-foo$10044$tVUFT
                                        g$foo?$10045$tVUFT)
                                      g$make-foo$10044$tVUFT))
                                   g$ls/false$10042$tVUFT)
                                 ((case-lambda
                                    ((g$t$10046$tVUFT)
                                     ((case-lambda
                                        ((g$ls/false$10047$tVUFT)
                                         (if (if g$ls/false$10047$tVUFT
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$10048$tVUFT)
                                                      (g$id?$8283$tVUFT
                                                        g$foo$10048$tVUFT)))
                                                   g$ls/false$10047$tVUFT))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$10049$tVUFT)
                                                (g$id$9807$tVUFT
                                                  g$foo$10049$tVUFT
                                                  '"make-"
                                                  (g$stx->datum$8294$tVUFT
                                                    g$foo$10049$tVUFT))))
                                             g$ls/false$10047$tVUFT)
                                           (g$syntax-violation$8674$tVUFT
                                             '#f
                                             '"invalid syntax"
                                             g$t$10046$tVUFT))))
                                      (g$syntax-dispatch$8562$tVUFT
                                        g$t$10046$tVUFT
                                        'any))))
                                  g$t$10041$tVUFT))))
                            (g$syntax-dispatch$8562$tVUFT
                              g$t$10041$tVUFT
                              '(any any any)))))
                        g$spec$10040$tVUFT))))
                  (g$get-record-predicate-name$9810$tVUFT
                    (case-lambda
                      ((g$spec$10030$tVUFT)
                       ((case-lambda
                          ((g$t$10031$tVUFT)
                           ((case-lambda
                              ((g$ls/false$10032$tVUFT)
                               (if g$ls/false$10032$tVUFT
                                 (apply
                                   (case-lambda
                                     ((g$foo$10033$tVUFT
                                        g$make-foo$10034$tVUFT
                                        g$foo?$10035$tVUFT)
                                      g$foo?$10035$tVUFT))
                                   g$ls/false$10032$tVUFT)
                                 ((case-lambda
                                    ((g$t$10036$tVUFT)
                                     ((case-lambda
                                        ((g$ls/false$10037$tVUFT)
                                         (if (if g$ls/false$10037$tVUFT
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$10038$tVUFT)
                                                      (g$id?$8283$tVUFT
                                                        g$foo$10038$tVUFT)))
                                                   g$ls/false$10037$tVUFT))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$10039$tVUFT)
                                                (g$id$9807$tVUFT
                                                  g$foo$10039$tVUFT
                                                  (g$stx->datum$8294$tVUFT
                                                    g$foo$10039$tVUFT)
                                                  '"?")))
                                             g$ls/false$10037$tVUFT)
                                           (g$syntax-violation$8674$tVUFT
                                             '#f
                                             '"invalid syntax"
                                             g$t$10036$tVUFT))))
                                      (g$syntax-dispatch$8562$tVUFT
                                        g$t$10036$tVUFT
                                        'any))))
                                  g$t$10031$tVUFT))))
                            (g$syntax-dispatch$8562$tVUFT
                              g$t$10031$tVUFT
                              '(any any any)))))
                        g$spec$10030$tVUFT))))
                  (g$get-clause$9811$tVUFT
                    (case-lambda
                      ((g$id$10021$tVUFT g$ls$10022$tVUFT)
                       ((case-lambda
                          ((g$t$10023$tVUFT)
                           ((case-lambda
                              ((g$ls/false$10024$tVUFT)
                               (if g$ls/false$10024$tVUFT
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$10024$tVUFT)
                                 ((case-lambda
                                    ((g$t$10025$tVUFT)
                                     ((case-lambda
                                        ((g$ls/false$10026$tVUFT)
                                         (if g$ls/false$10026$tVUFT
                                           (apply
                                             (case-lambda
                                               ((g$x$10027$tVUFT
                                                  g$rest$10028$tVUFT
                                                  g$ls$10029$tVUFT)
                                                (if (g$free-id=?$8287$tVUFT
                                                      (g$bless$8525$tVUFT
                                                        g$id$10021$tVUFT)
                                                      g$x$10027$tVUFT)
                                                  (cons
                                                    g$x$10027$tVUFT
                                                    g$rest$10028$tVUFT)
                                                  (g$get-clause$9811$tVUFT
                                                    g$id$10021$tVUFT
                                                    g$ls$10029$tVUFT))))
                                             g$ls/false$10026$tVUFT)
                                           (g$syntax-violation$8674$tVUFT
                                             '#f
                                             '"invalid syntax"
                                             g$t$10025$tVUFT))))
                                      (g$syntax-dispatch$8562$tVUFT
                                        g$t$10025$tVUFT
                                        '((any . any) . any)))))
                                  g$t$10023$tVUFT))))
                            (g$syntax-dispatch$8562$tVUFT
                              g$t$10023$tVUFT
                              '()))))
                        g$ls$10022$tVUFT))))
                  (g$foo-rtd-code$9812$tVUFT
                    (case-lambda
                      ((g$name$9980$tVUFT
                         g$clause*$9981$tVUFT
                         g$parent-rtd-code$9982$tVUFT)
                       (letrec* ((g$convert-field-spec*$9983$tVUFT
                                   (case-lambda
                                     ((g$ls$10008$tVUFT)
                                      (g$list->vector$5640$tVUFT
                                        (g$map$5157$tVUFT
                                          (case-lambda
                                            ((g$x$10009$tVUFT)
                                             ((case-lambda
                                                ((g$t$10010$tVUFT)
                                                 ((case-lambda
                                                    ((g$ls/false$10011$tVUFT)
                                                     (if g$ls/false$10011$tVUFT
                                                       (apply
                                                         (case-lambda
                                                           ((g$name$10012$tVUFT
                                                              g$rest$10013$tVUFT)
                                                            (list
                                                              'mutable
                                                              g$name$10012$tVUFT)))
                                                         g$ls/false$10011$tVUFT)
                                                       ((case-lambda
                                                          ((g$t$10014$tVUFT)
                                                           ((case-lambda
                                                              ((g$ls/false$10015$tVUFT)
                                                               (if g$ls/false$10015$tVUFT
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$name$10016$tVUFT
                                                                        g$rest$10017$tVUFT)
                                                                      (list
                                                                        'immutable
                                                                        g$name$10016$tVUFT)))
                                                                   g$ls/false$10015$tVUFT)
                                                                 ((case-lambda
                                                                    ((g$t$10018$tVUFT)
                                                                     ((case-lambda
                                                                        ((g$ls/false$10019$tVUFT)
                                                                         (if g$ls/false$10019$tVUFT
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$name$10020$tVUFT)
                                                                                (list
                                                                                  'immutable
                                                                                  g$name$10020$tVUFT)))
                                                                             g$ls/false$10019$tVUFT)
                                                                           (g$syntax-violation$8674$tVUFT
                                                                             '#f
                                                                             '"invalid syntax"
                                                                             g$t$10018$tVUFT))))
                                                                      (g$syntax-dispatch$8562$tVUFT
                                                                        g$t$10018$tVUFT
                                                                        'any))))
                                                                  g$t$10014$tVUFT))))
                                                            (g$syntax-dispatch$8562$tVUFT
                                                              g$t$10014$tVUFT
                                                              '(#(scheme-id
                                                                  immutable)
                                                                any
                                                                .
                                                                any)))))
                                                        g$t$10010$tVUFT))))
                                                  (g$syntax-dispatch$8562$tVUFT
                                                    g$t$10010$tVUFT
                                                    '(#(scheme-id mutable)
                                                      any
                                                      .
                                                      any)))))
                                              g$x$10009$tVUFT)))
                                          g$ls$10008$tVUFT))))))
                         ((case-lambda
                            ((g$uid-code$9984$tVUFT
                               g$sealed?$9985$tVUFT
                               g$opaque?$9986$tVUFT
                               g$fields$9987$tVUFT)
                             (g$bless$8525$tVUFT
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$9980$tVUFT)
                                 g$parent-rtd-code$9982$tVUFT
                                 g$uid-code$9984$tVUFT
                                 g$sealed?$9985$tVUFT
                                 g$opaque?$9986$tVUFT
                                 g$fields$9987$tVUFT))))
                          ((case-lambda
                             ((g$t$9988$tVUFT)
                              ((case-lambda
                                 ((g$ls/false$9989$tVUFT)
                                  (if g$ls/false$9989$tVUFT
                                    (apply
                                      (case-lambda (() (list 'quote (gensym))))
                                      g$ls/false$9989$tVUFT)
                                    ((case-lambda
                                       ((g$t$9990$tVUFT)
                                        ((case-lambda
                                           ((g$ls/false$9991$tVUFT)
                                            (if g$ls/false$9991$tVUFT
                                              (apply
                                                (case-lambda
                                                  ((g$uid$9992$tVUFT)
                                                   (list
                                                     'quote
                                                     g$uid$9992$tVUFT)))
                                                g$ls/false$9991$tVUFT)
                                              ((case-lambda
                                                 ((g$t$9993$tVUFT)
                                                  ((case-lambda
                                                     ((g$ls/false$9994$tVUFT)
                                                      (if g$ls/false$9994$tVUFT
                                                        (apply
                                                          (case-lambda (() '#f))
                                                          g$ls/false$9994$tVUFT)
                                                        (g$syntax-violation$8674$tVUFT
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$9993$tVUFT))))
                                                   (g$syntax-dispatch$8562$tVUFT
                                                     g$t$9993$tVUFT
                                                     '_))))
                                               g$t$9990$tVUFT))))
                                         (g$syntax-dispatch$8562$tVUFT
                                           g$t$9990$tVUFT
                                           '(_ any)))))
                                     g$t$9988$tVUFT))))
                               (g$syntax-dispatch$8562$tVUFT
                                 g$t$9988$tVUFT
                                 '(_)))))
                           (g$get-clause$9811$tVUFT
                             'nongenerative
                             g$clause*$9981$tVUFT))
                          ((case-lambda
                             ((g$t$9995$tVUFT)
                              ((case-lambda
                                 ((g$ls/false$9996$tVUFT)
                                  (if g$ls/false$9996$tVUFT
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9996$tVUFT)
                                    ((case-lambda
                                       ((g$t$9997$tVUFT)
                                        ((case-lambda
                                           ((g$ls/false$9998$tVUFT)
                                            (if g$ls/false$9998$tVUFT
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9998$tVUFT)
                                              (g$syntax-violation$8674$tVUFT
                                                '#f
                                                '"invalid syntax"
                                                g$t$9997$tVUFT))))
                                         (g$syntax-dispatch$8562$tVUFT
                                           g$t$9997$tVUFT
                                           '_))))
                                     g$t$9995$tVUFT))))
                               (g$syntax-dispatch$8562$tVUFT
                                 g$t$9995$tVUFT
                                 '(_ #(atom #t))))))
                           (g$get-clause$9811$tVUFT
                             'sealed
                             g$clause*$9981$tVUFT))
                          ((case-lambda
                             ((g$t$9999$tVUFT)
                              ((case-lambda
                                 ((g$ls/false$10000$tVUFT)
                                  (if g$ls/false$10000$tVUFT
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$10000$tVUFT)
                                    ((case-lambda
                                       ((g$t$10001$tVUFT)
                                        ((case-lambda
                                           ((g$ls/false$10002$tVUFT)
                                            (if g$ls/false$10002$tVUFT
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$10002$tVUFT)
                                              (g$syntax-violation$8674$tVUFT
                                                '#f
                                                '"invalid syntax"
                                                g$t$10001$tVUFT))))
                                         (g$syntax-dispatch$8562$tVUFT
                                           g$t$10001$tVUFT
                                           '_))))
                                     g$t$9999$tVUFT))))
                               (g$syntax-dispatch$8562$tVUFT
                                 g$t$9999$tVUFT
                                 '(_ #(atom #t))))))
                           (g$get-clause$9811$tVUFT
                             'opaque
                             g$clause*$9981$tVUFT))
                          ((case-lambda
                             ((g$t$10003$tVUFT)
                              ((case-lambda
                                 ((g$ls/false$10004$tVUFT)
                                  (if g$ls/false$10004$tVUFT
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$10005$tVUFT)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$9983$tVUFT
                                             g$field-spec*$10005$tVUFT))))
                                      g$ls/false$10004$tVUFT)
                                    ((case-lambda
                                       ((g$t$10006$tVUFT)
                                        ((case-lambda
                                           ((g$ls/false$10007$tVUFT)
                                            (if g$ls/false$10007$tVUFT
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$10007$tVUFT)
                                              (g$syntax-violation$8674$tVUFT
                                                '#f
                                                '"invalid syntax"
                                                g$t$10006$tVUFT))))
                                         (g$syntax-dispatch$8562$tVUFT
                                           g$t$10006$tVUFT
                                           '_))))
                                     g$t$10003$tVUFT))))
                               (g$syntax-dispatch$8562$tVUFT
                                 g$t$10003$tVUFT
                                 '(_ . each-any)))))
                           (g$get-clause$9811$tVUFT
                             'fields
                             g$clause*$9981$tVUFT)))))))
                  (g$parent-rtd-code$9813$tVUFT
                    (case-lambda
                      ((g$clause*$9968$tVUFT)
                       ((case-lambda
                          ((g$t$9969$tVUFT)
                           ((case-lambda
                              ((g$ls/false$9970$tVUFT)
                               (if g$ls/false$9970$tVUFT
                                 (apply
                                   (case-lambda
                                     ((g$name$9971$tVUFT)
                                      (list
                                        'record-type-descriptor
                                        g$name$9971$tVUFT)))
                                   g$ls/false$9970$tVUFT)
                                 ((case-lambda
                                    ((g$t$9972$tVUFT)
                                     ((case-lambda
                                        ((g$ls/false$9973$tVUFT)
                                         (if g$ls/false$9973$tVUFT
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$9974$tVUFT)
                                                    ((case-lambda
                                                       ((g$ls/false$9975$tVUFT)
                                                        (if g$ls/false$9975$tVUFT
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$9976$tVUFT
                                                                 g$rcd$9977$tVUFT)
                                                               g$rtd$9976$tVUFT))
                                                            g$ls/false$9975$tVUFT)
                                                          ((case-lambda
                                                             ((g$t$9978$tVUFT)
                                                              ((case-lambda
                                                                 ((g$ls/false$9979$tVUFT)
                                                                  (if g$ls/false$9979$tVUFT
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$9979$tVUFT)
                                                                    (g$syntax-violation$8674$tVUFT
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9978$tVUFT))))
                                                               (g$syntax-dispatch$8562$tVUFT
                                                                 g$t$9978$tVUFT
                                                                 '#(atom #f)))))
                                                           g$t$9974$tVUFT))))
                                                     (g$syntax-dispatch$8562$tVUFT
                                                       g$t$9974$tVUFT
                                                       '(_ any any)))))
                                                 (g$get-clause$9811$tVUFT
                                                   'parent-rtd
                                                   g$clause*$9968$tVUFT))))
                                             g$ls/false$9973$tVUFT)
                                           (g$syntax-violation$8674$tVUFT
                                             '#f
                                             '"invalid syntax"
                                             g$t$9972$tVUFT))))
                                      (g$syntax-dispatch$8562$tVUFT
                                        g$t$9972$tVUFT
                                        '#(atom #f)))))
                                  g$t$9969$tVUFT))))
                            (g$syntax-dispatch$8562$tVUFT
                              g$t$9969$tVUFT
                              '(_ any)))))
                        (g$get-clause$9811$tVUFT
                          'parent
                          g$clause*$9968$tVUFT)))))
                  (g$parent-rcd-code$9814$tVUFT
                    (case-lambda
                      ((g$clause*$9956$tVUFT)
                       ((case-lambda
                          ((g$t$9957$tVUFT)
                           ((case-lambda
                              ((g$ls/false$9958$tVUFT)
                               (if g$ls/false$9958$tVUFT
                                 (apply
                                   (case-lambda
                                     ((g$name$9959$tVUFT)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$9959$tVUFT)))
                                   g$ls/false$9958$tVUFT)
                                 ((case-lambda
                                    ((g$t$9960$tVUFT)
                                     ((case-lambda
                                        ((g$ls/false$9961$tVUFT)
                                         (if g$ls/false$9961$tVUFT
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$9962$tVUFT)
                                                    ((case-lambda
                                                       ((g$ls/false$9963$tVUFT)
                                                        (if g$ls/false$9963$tVUFT
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$9964$tVUFT
                                                                 g$rcd$9965$tVUFT)
                                                               g$rcd$9965$tVUFT))
                                                            g$ls/false$9963$tVUFT)
                                                          ((case-lambda
                                                             ((g$t$9966$tVUFT)
                                                              ((case-lambda
                                                                 ((g$ls/false$9967$tVUFT)
                                                                  (if g$ls/false$9967$tVUFT
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$9967$tVUFT)
                                                                    (g$syntax-violation$8674$tVUFT
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9966$tVUFT))))
                                                               (g$syntax-dispatch$8562$tVUFT
                                                                 g$t$9966$tVUFT
                                                                 '#(atom #f)))))
                                                           g$t$9962$tVUFT))))
                                                     (g$syntax-dispatch$8562$tVUFT
                                                       g$t$9962$tVUFT
                                                       '(_ any any)))))
                                                 (g$get-clause$9811$tVUFT
                                                   'parent-rtd
                                                   g$clause*$9956$tVUFT))))
                                             g$ls/false$9961$tVUFT)
                                           (g$syntax-violation$8674$tVUFT
                                             '#f
                                             '"invalid syntax"
                                             g$t$9960$tVUFT))))
                                      (g$syntax-dispatch$8562$tVUFT
                                        g$t$9960$tVUFT
                                        '#(atom #f)))))
                                  g$t$9957$tVUFT))))
                            (g$syntax-dispatch$8562$tVUFT
                              g$t$9957$tVUFT
                              '(_ any)))))
                        (g$get-clause$9811$tVUFT
                          'parent
                          g$clause*$9956$tVUFT)))))
                  (g$foo-rcd-code$9815$tVUFT
                    (case-lambda
                      ((g$clause*$9952$tVUFT
                         g$foo-rtd$9953$tVUFT
                         g$protocol$9954$tVUFT
                         g$parent-rcd-code$9955$tVUFT)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$9953$tVUFT
                         g$parent-rcd-code$9955$tVUFT
                         g$protocol$9954$tVUFT))))
                  (g$get-protocol-code$9816$tVUFT
                    (case-lambda
                      ((g$clause*$9946$tVUFT)
                       ((case-lambda
                          ((g$t$9947$tVUFT)
                           ((case-lambda
                              ((g$ls/false$9948$tVUFT)
                               (if g$ls/false$9948$tVUFT
                                 (apply
                                   (case-lambda
                                     ((g$expr$9949$tVUFT) g$expr$9949$tVUFT))
                                   g$ls/false$9948$tVUFT)
                                 ((case-lambda
                                    ((g$t$9950$tVUFT)
                                     ((case-lambda
                                        ((g$ls/false$9951$tVUFT)
                                         (if g$ls/false$9951$tVUFT
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$9951$tVUFT)
                                           (g$syntax-violation$8674$tVUFT
                                             '#f
                                             '"invalid syntax"
                                             g$t$9950$tVUFT))))
                                      (g$syntax-dispatch$8562$tVUFT
                                        g$t$9950$tVUFT
                                        '_))))
                                  g$t$9947$tVUFT))))
                            (g$syntax-dispatch$8562$tVUFT
                              g$t$9947$tVUFT
                              '(_ any)))))
                        (g$get-clause$9811$tVUFT
                          'protocol
                          g$clause*$9946$tVUFT)))))
                  (g$get-fields$9817$tVUFT
                    (case-lambda
                      ((g$clause*$9937$tVUFT)
                       ((case-lambda
                          ((g$t$9938$tVUFT)
                           ((case-lambda
                              ((g$ls/false$9939$tVUFT)
                               (if g$ls/false$9939$tVUFT
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$9939$tVUFT)
                                 ((case-lambda
                                    ((g$t$9940$tVUFT)
                                     ((case-lambda
                                        ((g$ls/false$9941$tVUFT)
                                         (if g$ls/false$9941$tVUFT
                                           (apply
                                             (case-lambda
                                               ((g$f*$9942$tVUFT)
                                                g$f*$9942$tVUFT))
                                             g$ls/false$9941$tVUFT)
                                           ((case-lambda
                                              ((g$t$9943$tVUFT)
                                               ((case-lambda
                                                  ((g$ls/false$9944$tVUFT)
                                                   (if g$ls/false$9944$tVUFT
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$9945$tVUFT)
                                                          (g$get-fields$9817$tVUFT
                                                            g$rest$9945$tVUFT)))
                                                       g$ls/false$9944$tVUFT)
                                                     (g$syntax-violation$8674$tVUFT
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9943$tVUFT))))
                                                (g$syntax-dispatch$8562$tVUFT
                                                  g$t$9943$tVUFT
                                                  '(_ . any)))))
                                            g$t$9940$tVUFT))))
                                      (g$syntax-dispatch$8562$tVUFT
                                        g$t$9940$tVUFT
                                        '((#(scheme-id fields) . each-any)
                                          .
                                          _)))))
                                  g$t$9938$tVUFT))))
                            (g$syntax-dispatch$8562$tVUFT g$t$9938$tVUFT '()))))
                        g$clause*$9937$tVUFT))))
                  (g$get-mutator-indices$9818$tVUFT
                    (case-lambda
                      ((g$fields$9925$tVUFT)
                       ((letrec ((g$f$9926$tVUFT
                                   (case-lambda
                                     ((g$fields$9927$tVUFT g$i$9928$tVUFT)
                                      ((case-lambda
                                         ((g$t$9929$tVUFT)
                                          ((case-lambda
                                             ((g$ls/false$9930$tVUFT)
                                              (if g$ls/false$9930$tVUFT
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$9930$tVUFT)
                                                ((case-lambda
                                                   ((g$t$9931$tVUFT)
                                                    ((case-lambda
                                                       ((g$ls/false$9932$tVUFT)
                                                        (if g$ls/false$9932$tVUFT
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$9933$tVUFT)
                                                               (cons
                                                                 g$i$9928$tVUFT
                                                                 (g$f$9926$tVUFT
                                                                   g$rest$9933$tVUFT
                                                                   (+ g$i$9928$tVUFT
                                                                      '1)))))
                                                            g$ls/false$9932$tVUFT)
                                                          ((case-lambda
                                                             ((g$t$9934$tVUFT)
                                                              ((case-lambda
                                                                 ((g$ls/false$9935$tVUFT)
                                                                  (if g$ls/false$9935$tVUFT
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$9936$tVUFT)
                                                                         (g$f$9926$tVUFT
                                                                           g$rest$9936$tVUFT
                                                                           (+ g$i$9928$tVUFT
                                                                              '1))))
                                                                      g$ls/false$9935$tVUFT)
                                                                    (g$syntax-violation$8674$tVUFT
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9934$tVUFT))))
                                                               (g$syntax-dispatch$8562$tVUFT
                                                                 g$t$9934$tVUFT
                                                                 '(_ . any)))))
                                                           g$t$9931$tVUFT))))
                                                     (g$syntax-dispatch$8562$tVUFT
                                                       g$t$9931$tVUFT
                                                       '((#(scheme-id mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$9929$tVUFT))))
                                           (g$syntax-dispatch$8562$tVUFT
                                             g$t$9929$tVUFT
                                             '()))))
                                       g$fields$9927$tVUFT)))))
                          g$f$9926$tVUFT)
                        g$fields$9925$tVUFT
                        '0))))
                  (g$get-mutators$9819$tVUFT
                    (case-lambda
                      ((g$foo$9904$tVUFT g$fields$9905$tVUFT)
                       (letrec* ((g$gen-name$9906$tVUFT
                                   (case-lambda
                                     ((g$x$9924$tVUFT)
                                      (g$datum->syntax$8676$tVUFT
                                        g$foo$9904$tVUFT
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$8677$tVUFT
                                                g$foo$9904$tVUFT))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$8677$tVUFT
                                                g$x$9924$tVUFT))
                                            '"-set!")))))))
                         ((letrec ((g$f$9907$tVUFT
                                     (case-lambda
                                       ((g$fields$9908$tVUFT)
                                        ((case-lambda
                                           ((g$t$9909$tVUFT)
                                            ((case-lambda
                                               ((g$ls/false$9910$tVUFT)
                                                (if g$ls/false$9910$tVUFT
                                                  (apply
                                                    (case-lambda (() '()))
                                                    g$ls/false$9910$tVUFT)
                                                  ((case-lambda
                                                     ((g$t$9911$tVUFT)
                                                      ((case-lambda
                                                         ((g$ls/false$9912$tVUFT)
                                                          (if g$ls/false$9912$tVUFT
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$9913$tVUFT
                                                                   g$accessor$9914$tVUFT
                                                                   g$mutator$9915$tVUFT
                                                                   g$rest$9916$tVUFT)
                                                                 (cons
                                                                   g$mutator$9915$tVUFT
                                                                   (g$f$9907$tVUFT
                                                                     g$rest$9916$tVUFT))))
                                                              g$ls/false$9912$tVUFT)
                                                            ((case-lambda
                                                               ((g$t$9917$tVUFT)
                                                                ((case-lambda
                                                                   ((g$ls/false$9918$tVUFT)
                                                                    (if g$ls/false$9918$tVUFT
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$9919$tVUFT
                                                                             g$rest$9920$tVUFT)
                                                                           (cons
                                                                             (g$gen-name$9906$tVUFT
                                                                               g$name$9919$tVUFT)
                                                                             (g$f$9907$tVUFT
                                                                               g$rest$9920$tVUFT))))
                                                                        g$ls/false$9918$tVUFT)
                                                                      ((case-lambda
                                                                         ((g$t$9921$tVUFT)
                                                                          ((case-lambda
                                                                             ((g$ls/false$9922$tVUFT)
                                                                              (if g$ls/false$9922$tVUFT
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$9923$tVUFT)
                                                                                     (g$f$9907$tVUFT
                                                                                       g$rest$9923$tVUFT)))
                                                                                  g$ls/false$9922$tVUFT)
                                                                                (g$syntax-violation$8674$tVUFT
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$9921$tVUFT))))
                                                                           (g$syntax-dispatch$8562$tVUFT
                                                                             g$t$9921$tVUFT
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$9917$tVUFT))))
                                                                 (g$syntax-dispatch$8562$tVUFT
                                                                   g$t$9917$tVUFT
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$9911$tVUFT))))
                                                       (g$syntax-dispatch$8562$tVUFT
                                                         g$t$9911$tVUFT
                                                         '((#(scheme-id mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$9909$tVUFT))))
                                             (g$syntax-dispatch$8562$tVUFT
                                               g$t$9909$tVUFT
                                               '()))))
                                         g$fields$9908$tVUFT)))))
                            g$f$9907$tVUFT)
                          g$fields$9905$tVUFT)))))
                  (g$get-accessors$9820$tVUFT
                    (case-lambda
                      ((g$foo$9870$tVUFT g$fields$9871$tVUFT)
                       (letrec* ((g$gen-name$9872$tVUFT
                                   (case-lambda
                                     ((g$x$9903$tVUFT)
                                      (g$datum->syntax$8676$tVUFT
                                        g$foo$9870$tVUFT
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$8677$tVUFT
                                                g$foo$9870$tVUFT))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$8677$tVUFT
                                                g$x$9903$tVUFT)))))))))
                         (g$map$5157$tVUFT
                           (case-lambda
                             ((g$field$9873$tVUFT)
                              ((case-lambda
                                 ((g$t$9874$tVUFT)
                                  ((case-lambda
                                     ((g$ls/false$9875$tVUFT)
                                      (if (if g$ls/false$9875$tVUFT
                                            (begin
                                              '#f
                                              (apply
                                                (case-lambda
                                                  ((g$name$9876$tVUFT
                                                     g$accessor$9877$tVUFT
                                                     g$mutator$9878$tVUFT)
                                                   (g$id?$8283$tVUFT
                                                     g$accessor$9877$tVUFT)))
                                                g$ls/false$9875$tVUFT))
                                            '#f)
                                        (apply
                                          (case-lambda
                                            ((g$name$9879$tVUFT
                                               g$accessor$9880$tVUFT
                                               g$mutator$9881$tVUFT)
                                             g$accessor$9880$tVUFT))
                                          g$ls/false$9875$tVUFT)
                                        ((case-lambda
                                           ((g$t$9882$tVUFT)
                                            ((case-lambda
                                               ((g$ls/false$9883$tVUFT)
                                                (if (if g$ls/false$9883$tVUFT
                                                      (begin
                                                        '#f
                                                        (apply
                                                          (case-lambda
                                                            ((g$name$9884$tVUFT
                                                               g$accessor$9885$tVUFT)
                                                             (g$id?$8283$tVUFT
                                                               g$accessor$9885$tVUFT)))
                                                          g$ls/false$9883$tVUFT))
                                                      '#f)
                                                  (apply
                                                    (case-lambda
                                                      ((g$name$9886$tVUFT
                                                         g$accessor$9887$tVUFT)
                                                       g$accessor$9887$tVUFT))
                                                    g$ls/false$9883$tVUFT)
                                                  ((case-lambda
                                                     ((g$t$9888$tVUFT)
                                                      ((case-lambda
                                                         ((g$ls/false$9889$tVUFT)
                                                          (if (if g$ls/false$9889$tVUFT
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$name$9890$tVUFT)
                                                                       (g$id?$8283$tVUFT
                                                                         g$name$9890$tVUFT)))
                                                                    g$ls/false$9889$tVUFT))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$9891$tVUFT)
                                                                 (g$gen-name$9872$tVUFT
                                                                   g$name$9891$tVUFT)))
                                                              g$ls/false$9889$tVUFT)
                                                            ((case-lambda
                                                               ((g$t$9892$tVUFT)
                                                                ((case-lambda
                                                                   ((g$ls/false$9893$tVUFT)
                                                                    (if (if g$ls/false$9893$tVUFT
                                                                          (begin
                                                                            '#f
                                                                            (apply
                                                                              (case-lambda
                                                                                ((g$name$9894$tVUFT)
                                                                                 (g$id?$8283$tVUFT
                                                                                   g$name$9894$tVUFT)))
                                                                              g$ls/false$9893$tVUFT))
                                                                          '#f)
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$9895$tVUFT)
                                                                           (g$gen-name$9872$tVUFT
                                                                             g$name$9895$tVUFT)))
                                                                        g$ls/false$9893$tVUFT)
                                                                      ((case-lambda
                                                                         ((g$t$9896$tVUFT)
                                                                          ((case-lambda
                                                                             ((g$ls/false$9897$tVUFT)
                                                                              (if (if g$ls/false$9897$tVUFT
                                                                                    (begin
                                                                                      '#f
                                                                                      (apply
                                                                                        (case-lambda
                                                                                          ((g$name$9898$tVUFT)
                                                                                           (g$id?$8283$tVUFT
                                                                                             g$name$9898$tVUFT)))
                                                                                        g$ls/false$9897$tVUFT))
                                                                                    '#f)
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$name$9899$tVUFT)
                                                                                     (g$gen-name$9872$tVUFT
                                                                                       g$name$9899$tVUFT)))
                                                                                  g$ls/false$9897$tVUFT)
                                                                                ((case-lambda
                                                                                   ((g$t$9900$tVUFT)
                                                                                    ((case-lambda
                                                                                       ((g$ls/false$9901$tVUFT)
                                                                                        (if g$ls/false$9901$tVUFT
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$others$9902$tVUFT)
                                                                                               (g$syntax-violation$8674$tVUFT
                                                                                                 '#f
                                                                                                 '"invalid field spec"
                                                                                                 g$field$9873$tVUFT)))
                                                                                            g$ls/false$9901$tVUFT)
                                                                                          (g$syntax-violation$8674$tVUFT
                                                                                            '#f
                                                                                            '"invalid syntax"
                                                                                            g$t$9900$tVUFT))))
                                                                                     (g$syntax-dispatch$8562$tVUFT
                                                                                       g$t$9900$tVUFT
                                                                                       'any))))
                                                                                 g$t$9896$tVUFT))))
                                                                           (g$syntax-dispatch$8562$tVUFT
                                                                             g$t$9896$tVUFT
                                                                             'any))))
                                                                       g$t$9892$tVUFT))))
                                                                 (g$syntax-dispatch$8562$tVUFT
                                                                   g$t$9892$tVUFT
                                                                   '(#(scheme-id
                                                                       immutable)
                                                                     any)))))
                                                             g$t$9888$tVUFT))))
                                                       (g$syntax-dispatch$8562$tVUFT
                                                         g$t$9888$tVUFT
                                                         '(#(scheme-id mutable)
                                                           any)))))
                                                   g$t$9882$tVUFT))))
                                             (g$syntax-dispatch$8562$tVUFT
                                               g$t$9882$tVUFT
                                               '(#(scheme-id immutable)
                                                 any
                                                 any)))))
                                         g$t$9874$tVUFT))))
                                   (g$syntax-dispatch$8562$tVUFT
                                     g$t$9874$tVUFT
                                     '(#(scheme-id mutable) any any any)))))
                               g$field$9873$tVUFT)))
                           g$fields$9871$tVUFT)))))
                  (g$enumerate$9821$tVUFT
                    (case-lambda
                      ((g$ls$9866$tVUFT)
                       ((letrec ((g$f$9867$tVUFT
                                   (case-lambda
                                     ((g$ls$9868$tVUFT g$i$9869$tVUFT)
                                      (if (null? g$ls$9868$tVUFT)
                                        '()
                                        (cons
                                          g$i$9869$tVUFT
                                          (g$f$9867$tVUFT
                                            (cdr g$ls$9868$tVUFT)
                                            (+ g$i$9869$tVUFT '1))))))))
                          g$f$9867$tVUFT)
                        g$ls$9866$tVUFT
                        '0))))
                  (g$do-define-record$9822$tVUFT
                    (case-lambda
                      ((g$namespec$9846$tVUFT g$clause*$9847$tVUFT)
                       ((case-lambda
                          ((g$foo$9848$tVUFT)
                           ((case-lambda
                              ((g$foo-rtd$9849$tVUFT)
                               ((case-lambda
                                  ((g$foo-rcd$9850$tVUFT)
                                   ((case-lambda
                                      ((g$protocol$9851$tVUFT)
                                       ((case-lambda
                                          ((g$make-foo$9852$tVUFT)
                                           ((case-lambda
                                              ((g$fields$9853$tVUFT)
                                               ((case-lambda
                                                  ((g$idx*$9854$tVUFT)
                                                   ((case-lambda
                                                      ((g$foo-x*$9855$tVUFT)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$9856$tVUFT)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$9857$tVUFT)
                                                               ((case-lambda
                                                                  ((g$foo?$9858$tVUFT)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$9859$tVUFT)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$9860$tVUFT)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$9861$tVUFT)
                                                                               (g$bless$8525$tVUFT
                                                                                 (cons
                                                                                   'begin
                                                                                   (cons
                                                                                     (list
                                                                                       'define
                                                                                       g$foo-rtd$9849$tVUFT
                                                                                       g$foo-rtd-code$9859$tVUFT)
                                                                                     (cons
                                                                                       (list
                                                                                         'define
                                                                                         g$protocol$9851$tVUFT
                                                                                         g$protocol-code$9861$tVUFT)
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rcd$9850$tVUFT
                                                                                           g$foo-rcd-code$9860$tVUFT)
                                                                                         (cons
                                                                                           (list
                                                                                             'define-syntax
                                                                                             g$foo$9848$tVUFT
                                                                                             (list
                                                                                               'list
                                                                                               ''$rtd
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rtd$9849$tVUFT)
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rcd$9850$tVUFT)))
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo?$9858$tVUFT
                                                                                               (list
                                                                                                 'record-predicate
                                                                                                 g$foo-rtd$9849$tVUFT))
                                                                                             (cons
                                                                                               (list
                                                                                                 'define
                                                                                                 g$make-foo$9852$tVUFT
                                                                                                 (list
                                                                                                   'record-constructor
                                                                                                   g$foo-rcd$9850$tVUFT))
                                                                                               (append
                                                                                                 (g$map$5157$tVUFT
                                                                                                   (case-lambda
                                                                                                     ((g$foo-x$9862$tVUFT
                                                                                                        g$idx$9863$tVUFT)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$foo-x$9862$tVUFT
                                                                                                        (list
                                                                                                          'record-accessor
                                                                                                          g$foo-rtd$9849$tVUFT
                                                                                                          g$idx$9863$tVUFT))))
                                                                                                   g$foo-x*$9855$tVUFT
                                                                                                   g$idx*$9854$tVUFT)
                                                                                                 (g$map$5157$tVUFT
                                                                                                   (case-lambda
                                                                                                     ((g$set-foo-x!$9864$tVUFT
                                                                                                        g$idx$9865$tVUFT)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$set-foo-x!$9864$tVUFT
                                                                                                        (list
                                                                                                          'record-mutator
                                                                                                          g$foo-rtd$9849$tVUFT
                                                                                                          g$idx$9865$tVUFT))))
                                                                                                   g$set-foo-x!*$9856$tVUFT
                                                                                                   g$set-foo-idx*$9857$tVUFT))))))))))))
                                                                            (g$get-protocol-code$9816$tVUFT
                                                                              g$clause*$9847$tVUFT))))
                                                                        (g$foo-rcd-code$9815$tVUFT
                                                                          g$clause*$9847$tVUFT
                                                                          g$foo-rtd$9849$tVUFT
                                                                          g$protocol$9851$tVUFT
                                                                          (g$parent-rcd-code$9814$tVUFT
                                                                            g$clause*$9847$tVUFT)))))
                                                                    (g$foo-rtd-code$9812$tVUFT
                                                                      g$foo$9848$tVUFT
                                                                      g$clause*$9847$tVUFT
                                                                      (g$parent-rtd-code$9813$tVUFT
                                                                        g$clause*$9847$tVUFT)))))
                                                                (g$get-record-predicate-name$9810$tVUFT
                                                                  g$namespec$9846$tVUFT))))
                                                            (g$get-mutator-indices$9818$tVUFT
                                                              g$fields$9853$tVUFT))))
                                                        (g$get-mutators$9819$tVUFT
                                                          g$foo$9848$tVUFT
                                                          g$fields$9853$tVUFT))))
                                                    (g$get-accessors$9820$tVUFT
                                                      g$foo$9848$tVUFT
                                                      g$fields$9853$tVUFT))))
                                                (g$enumerate$9821$tVUFT
                                                  g$fields$9853$tVUFT))))
                                            (g$get-fields$9817$tVUFT
                                              g$clause*$9847$tVUFT))))
                                        (g$get-record-constructor-name$9809$tVUFT
                                          g$namespec$9846$tVUFT))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$9808$tVUFT g$namespec$9846$tVUFT)))))
                  (g$verify-clauses$9823$tVUFT
                    (case-lambda
                      ((g$x$9828$tVUFT g$cls*$9829$tVUFT)
                       (letrec* ((g$valid-kwds$9830$tVUFT
                                   (g$map$5157$tVUFT
                                     g$bless$8525$tVUFT
                                     '(fields
                                        parent
                                        parent-rtd
                                        protocol
                                        sealed
                                        opaque
                                        nongenerative)))
                                 (g$free-id-member?$9831$tVUFT
                                   (case-lambda
                                     ((g$x$9843$tVUFT g$ls$9844$tVUFT)
                                      (if (pair? g$ls$9844$tVUFT)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$9845$tVUFT)
                                              (if g$t$9845$tVUFT
                                                g$t$9845$tVUFT
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$9831$tVUFT
                                                    g$x$9843$tVUFT
                                                    (cdr g$ls$9844$tVUFT))))))
                                           (g$free-id=?$8287$tVUFT
                                             g$x$9843$tVUFT
                                             (car g$ls$9844$tVUFT))))
                                        '#f)))))
                         ((letrec ((g$f$9832$tVUFT
                                     (case-lambda
                                       ((g$cls*$9833$tVUFT g$seen*$9834$tVUFT)
                                        (if (not (null? g$cls*$9833$tVUFT))
                                          ((case-lambda
                                             ((g$t$9835$tVUFT)
                                              ((case-lambda
                                                 ((g$ls/false$9836$tVUFT)
                                                  (if g$ls/false$9836$tVUFT
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$9837$tVUFT
                                                           g$rest$9838$tVUFT)
                                                         (if ((case-lambda
                                                                ((g$t$9839$tVUFT)
                                                                 (if g$t$9839$tVUFT
                                                                   g$t$9839$tVUFT
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$9831$tVUFT
                                                                            g$kwd$9837$tVUFT
                                                                            g$valid-kwds$9830$tVUFT))))))
                                                              (not (g$id?$8283$tVUFT
                                                                     g$kwd$9837$tVUFT)))
                                                           (g$syntax-violation$8674$tVUFT
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$9837$tVUFT)
                                                           (if (g$bound-id-member?$8290$tVUFT
                                                                 g$kwd$9837$tVUFT
                                                                 g$seen*$9834$tVUFT)
                                                             (g$syntax-violation$8674$tVUFT
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$9828$tVUFT
                                                               g$kwd$9837$tVUFT)
                                                             (g$f$9832$tVUFT
                                                               (cdr g$cls*$9833$tVUFT)
                                                               (cons
                                                                 g$kwd$9837$tVUFT
                                                                 g$seen*$9834$tVUFT))))))
                                                      g$ls/false$9836$tVUFT)
                                                    ((case-lambda
                                                       ((g$t$9840$tVUFT)
                                                        ((case-lambda
                                                           ((g$ls/false$9841$tVUFT)
                                                            (if g$ls/false$9841$tVUFT
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$9842$tVUFT)
                                                                   (g$syntax-violation$8674$tVUFT
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$9842$tVUFT)))
                                                                g$ls/false$9841$tVUFT)
                                                              (g$syntax-violation$8674$tVUFT
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9840$tVUFT))))
                                                         (g$syntax-dispatch$8562$tVUFT
                                                           g$t$9840$tVUFT
                                                           'any))))
                                                     g$t$9835$tVUFT))))
                                               (g$syntax-dispatch$8562$tVUFT
                                                 g$t$9835$tVUFT
                                                 '(any . any)))))
                                           (car g$cls*$9833$tVUFT))
                                          (void))))))
                            g$f$9832$tVUFT)
                          g$cls*$9829$tVUFT
                          '()))))))
          ((case-lambda
             ((g$t$9824$tVUFT)
              ((case-lambda
                 ((g$ls/false$9825$tVUFT)
                  (if g$ls/false$9825$tVUFT
                    (apply
                      (case-lambda
                        ((g$namespec$9826$tVUFT g$clause*$9827$tVUFT)
                         (begin
                           (g$verify-clauses$9823$tVUFT
                             g$x$9806$tVUFT
                             g$clause*$9827$tVUFT)
                           (g$do-define-record$9822$tVUFT
                             g$namespec$9826$tVUFT
                             g$clause*$9827$tVUFT))))
                      g$ls/false$9825$tVUFT)
                    (g$syntax-violation$8674$tVUFT
                      '#f
                      '"invalid syntax"
                      g$t$9824$tVUFT))))
               (g$syntax-dispatch$8562$tVUFT
                 g$t$9824$tVUFT
                 '(_ any . each-any)))))
           g$x$9806$tVUFT)))))
   (g$define-condition-type-macro$8557$tVUFT
     g$define-condition-type-macro$12075$tVUFT
     (case-lambda
       ((g$x$10062$tVUFT)
        (letrec* ((g$mkname$10063$tVUFT
                    (case-lambda
                      ((g$name$10086$tVUFT g$suffix$10087$tVUFT)
                       (g$datum->syntax$8676$tVUFT
                         g$name$10086$tVUFT
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$8677$tVUFT g$name$10086$tVUFT))
                             g$suffix$10087$tVUFT)))))))
          ((case-lambda
             ((g$t$10064$tVUFT)
              ((case-lambda
                 ((g$ls/false$10065$tVUFT)
                  (if (if g$ls/false$10065$tVUFT
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$10066$tVUFT
                                 g$name$10067$tVUFT
                                 g$super$10068$tVUFT
                                 g$constructor$10069$tVUFT
                                 g$predicate$10070$tVUFT
                                 g$field*$10071$tVUFT
                                 g$accessor*$10072$tVUFT)
                               (if (g$id?$8283$tVUFT g$name$10067$tVUFT)
                                 (if (g$id?$8283$tVUFT g$super$10068$tVUFT)
                                   (if (g$id?$8283$tVUFT
                                         g$constructor$10069$tVUFT)
                                     (if (g$id?$8283$tVUFT
                                           g$predicate$10070$tVUFT)
                                       (if (g$for-all$5155$tVUFT
                                             g$id?$8283$tVUFT
                                             g$field*$10071$tVUFT)
                                         (begin
                                           '#f
                                           (g$for-all$5155$tVUFT
                                             g$id?$8283$tVUFT
                                             g$accessor*$10072$tVUFT))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$10065$tVUFT))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$10073$tVUFT
                           g$name$10074$tVUFT
                           g$super$10075$tVUFT
                           g$constructor$10076$tVUFT
                           g$predicate$10077$tVUFT
                           g$field*$10078$tVUFT
                           g$accessor*$10079$tVUFT)
                         ((case-lambda
                            ((g$aux-accessor*$10080$tVUFT)
                             (g$bless$8525$tVUFT
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$10074$tVUFT
                                         g$constructor$10076$tVUFT
                                         (gensym))
                                       (cons
                                         (list 'parent g$super$10075$tVUFT)
                                         (cons
                                           (cons
                                             'fields
                                             (g$map$5157$tVUFT
                                               (case-lambda
                                                 ((g$field$10081$tVUFT
                                                    g$aux$10082$tVUFT)
                                                  (list
                                                    'immutable
                                                    g$field$10081$tVUFT
                                                    g$aux$10082$tVUFT)))
                                               g$field*$10078$tVUFT
                                               g$aux-accessor*$10080$tVUFT))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$10077$tVUFT
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$10074$tVUFT)))
                                     (g$map$5157$tVUFT
                                       (case-lambda
                                         ((g$accessor$10083$tVUFT
                                            g$aux$10084$tVUFT)
                                          (list
                                            'define
                                            g$accessor$10083$tVUFT
                                            (list
                                              'condition-accessor
                                              (list
                                                'record-type-descriptor
                                                g$name$10074$tVUFT)
                                              g$aux$10084$tVUFT))))
                                       g$accessor*$10079$tVUFT
                                       g$aux-accessor*$10080$tVUFT)))))))
                          (g$map$5157$tVUFT
                            (case-lambda ((g$x$10085$tVUFT) (gensym)))
                            g$accessor*$10079$tVUFT))))
                      g$ls/false$10065$tVUFT)
                    (g$syntax-violation$8674$tVUFT
                      '#f
                      '"invalid syntax"
                      g$t$10064$tVUFT))))
               (g$syntax-dispatch$8562$tVUFT
                 g$t$10064$tVUFT
                 '(any any any any any . #(each (any any)))))))
           g$x$10062$tVUFT)))))
   (g$incorrect-usage-macro$8558$tVUFT
     g$incorrect-usage-macro$12076$tVUFT
     (case-lambda
       ((g$e$10088$tVUFT)
        (g$syntax-violation$8674$tVUFT
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$10088$tVUFT))))
   (g$parameterize-macro$8559$tVUFT
     g$parameterize-macro$12077$tVUFT
     (case-lambda
       ((g$e$10089$tVUFT)
        ((case-lambda
           ((g$t$10090$tVUFT)
            ((case-lambda
               ((g$ls/false$10091$tVUFT)
                (if g$ls/false$10091$tVUFT
                  (apply
                    (case-lambda
                      ((g$b$10092$tVUFT g$b*$10093$tVUFT)
                       (g$bless$8525$tVUFT
                         (cons
                           'let
                           (cons
                             '()
                             (cons g$b$10092$tVUFT g$b*$10093$tVUFT))))))
                    g$ls/false$10091$tVUFT)
                  ((case-lambda
                     ((g$t$10094$tVUFT)
                      ((case-lambda
                         ((g$ls/false$10095$tVUFT)
                          (if g$ls/false$10095$tVUFT
                            (apply
                              (case-lambda
                                ((g$olhs*$10096$tVUFT
                                   g$orhs*$10097$tVUFT
                                   g$b$10098$tVUFT
                                   g$b*$10099$tVUFT)
                                 ((case-lambda
                                    ((g$lhs*$10100$tVUFT g$rhs*$10101$tVUFT)
                                     (g$bless$8525$tVUFT
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$10100$tVUFT
                                             g$rhs*$10101$tVUFT)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (g$map$5157$tVUFT
                                                       (case-lambda
                                                         ((g$lhs$10102$tVUFT
                                                            g$rhs$10103$tVUFT)
                                                          (list
                                                            'let
                                                            (list
                                                              (list
                                                                't
                                                                (list
                                                                  g$lhs$10102$tVUFT)))
                                                            (list
                                                              g$lhs$10102$tVUFT
                                                              g$rhs$10103$tVUFT)
                                                            (cons
                                                              'set!
                                                              (cons
                                                                g$rhs$10103$tVUFT
                                                                '(t))))))
                                                       g$lhs*$10100$tVUFT
                                                       g$rhs*$10101$tVUFT)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$10098$tVUFT
                                                         g$b*$10099$tVUFT)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$10096$tVUFT
                                           g$orhs*$10097$tVUFT)))))
                                  (g$generate-temporaries$8664$tVUFT
                                    g$olhs*$10096$tVUFT)
                                  (g$generate-temporaries$8664$tVUFT
                                    g$orhs*$10097$tVUFT))))
                              g$ls/false$10095$tVUFT)
                            (g$syntax-violation$8674$tVUFT
                              '#f
                              '"invalid syntax"
                              g$t$10094$tVUFT))))
                       (g$syntax-dispatch$8562$tVUFT
                         g$t$10094$tVUFT
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$10090$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$10090$tVUFT
               '(_ () any . each-any)))))
         g$e$10089$tVUFT))))
   (g$foreign-call-transformer$8560$tVUFT
     g$foreign-call-transformer$12078$tVUFT
     (case-lambda
       ((g$e$10104$tVUFT g$r$10105$tVUFT g$mr$10106$tVUFT)
        ((case-lambda
           ((g$t$10107$tVUFT)
            ((case-lambda
               ((g$ls/false$10108$tVUFT)
                (if g$ls/false$10108$tVUFT
                  (apply
                    (case-lambda
                      ((g$name$10109$tVUFT g$arg*$10110$tVUFT)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$8580$tVUFT
                             g$name$10109$tVUFT
                             g$r$10105$tVUFT
                             g$mr$10106$tVUFT)
                           (g$chi-expr*$8578$tVUFT
                             g$arg*$10110$tVUFT
                             g$r$10105$tVUFT
                             g$mr$10106$tVUFT)))))
                    g$ls/false$10108$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$10107$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$10107$tVUFT
               '(_ any . each-any)))))
         g$e$10104$tVUFT))))
   (g$convert-pattern$8561$tVUFT
     g$convert-pattern$12079$tVUFT
     (case-lambda
       ((g$pattern$10111$tVUFT g$keys$10112$tVUFT)
        (letrec* ((g$cvt*$10113$tVUFT
                    (case-lambda
                      ((g$p*$10193$tVUFT g$n$10194$tVUFT g$ids$10195$tVUFT)
                       (if (null? g$p*$10193$tVUFT)
                         (values '() g$ids$10195$tVUFT)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$10113$tVUFT
                                (cdr g$p*$10193$tVUFT)
                                g$n$10194$tVUFT
                                g$ids$10195$tVUFT)))
                           (case-lambda
                             ((g$y$10198$tVUFT g$ids$10199$tVUFT)
                              ((case-lambda
                                 ((g$ids$10200$tVUFT g$y$10201$tVUFT)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$10114$tVUFT
                                         (car g$p*$10193$tVUFT)
                                         g$n$10194$tVUFT
                                         g$ids$10200$tVUFT)))
                                    (case-lambda
                                      ((g$x$10204$tVUFT g$ids$10205$tVUFT)
                                       ((case-lambda
                                          ((g$ids$10206$tVUFT g$x$10207$tVUFT)
                                           (values
                                             (cons
                                               g$x$10207$tVUFT
                                               g$y$10201$tVUFT)
                                             g$ids$10206$tVUFT)))
                                        g$ids$10205$tVUFT
                                        g$x$10204$tVUFT))))))
                               g$ids$10199$tVUFT
                               g$y$10198$tVUFT))))))))
                  (g$cvt$10114$tVUFT
                    (case-lambda
                      ((g$p$10115$tVUFT g$n$10116$tVUFT g$ids$10117$tVUFT)
                       ((case-lambda
                          ((g$t$10118$tVUFT)
                           ((case-lambda
                              ((g$ls/false$10119$tVUFT)
                               (if (if g$ls/false$10119$tVUFT
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$10120$tVUFT)
                                            (g$id?$8283$tVUFT
                                              g$id$10120$tVUFT)))
                                         g$ls/false$10119$tVUFT))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$10121$tVUFT)
                                      (if (g$bound-id-member?$8290$tVUFT
                                            g$p$10115$tVUFT
                                            g$keys$10112$tVUFT)
                                        (values
                                          (vector 'free-id g$p$10115$tVUFT)
                                          g$ids$10117$tVUFT)
                                        (if (g$free-id=?$8287$tVUFT
                                              g$p$10115$tVUFT
                                              (g$scheme-stx$8505$tVUFT '_))
                                          (values '_ g$ids$10117$tVUFT)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$10115$tVUFT
                                                g$n$10116$tVUFT)
                                              g$ids$10117$tVUFT))))))
                                   g$ls/false$10119$tVUFT)
                                 ((case-lambda
                                    ((g$t$10122$tVUFT)
                                     ((case-lambda
                                        ((g$ls/false$10123$tVUFT)
                                         (if (if g$ls/false$10123$tVUFT
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$10124$tVUFT
                                                        g$dots$10125$tVUFT)
                                                      (g$ellipsis?$8563$tVUFT
                                                        g$dots$10125$tVUFT)))
                                                   g$ls/false$10123$tVUFT))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$10126$tVUFT
                                                  g$dots$10127$tVUFT)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$10114$tVUFT
                                                       g$p$10126$tVUFT
                                                       (+ g$n$10116$tVUFT '1)
                                                       g$ids$10117$tVUFT)))
                                                  (case-lambda
                                                    ((g$p$10130$tVUFT
                                                       g$ids$10131$tVUFT)
                                                     ((case-lambda
                                                        ((g$ids$10132$tVUFT
                                                           g$p$10133$tVUFT)
                                                         (values
                                                           (if (eq? g$p$10133$tVUFT
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$10133$tVUFT))
                                                           g$ids$10132$tVUFT)))
                                                      g$ids$10131$tVUFT
                                                      g$p$10130$tVUFT))))))
                                             g$ls/false$10123$tVUFT)
                                           ((case-lambda
                                              ((g$t$10134$tVUFT)
                                               ((case-lambda
                                                  ((g$ls/false$10135$tVUFT)
                                                   (if (if g$ls/false$10135$tVUFT
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$10136$tVUFT
                                                                  g$dots$10137$tVUFT
                                                                  g$ys$10138$tVUFT
                                                                  g$z$10139$tVUFT)
                                                                (g$ellipsis?$8563$tVUFT
                                                                  g$dots$10137$tVUFT)))
                                                             g$ls/false$10135$tVUFT))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$10140$tVUFT
                                                            g$dots$10141$tVUFT
                                                            g$ys$10142$tVUFT
                                                            g$z$10143$tVUFT)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$10114$tVUFT
                                                                 g$z$10143$tVUFT
                                                                 g$n$10116$tVUFT
                                                                 g$ids$10117$tVUFT)))
                                                            (case-lambda
                                                              ((g$z$10146$tVUFT
                                                                 g$ids$10147$tVUFT)
                                                               ((case-lambda
                                                                  ((g$ids$10148$tVUFT
                                                                     g$z$10149$tVUFT)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$10113$tVUFT
                                                                          g$ys$10142$tVUFT
                                                                          g$n$10116$tVUFT
                                                                          g$ids$10148$tVUFT)))
                                                                     (case-lambda
                                                                       ((g$ys$10152$tVUFT
                                                                          g$ids$10153$tVUFT)
                                                                        ((case-lambda
                                                                           ((g$ids$10154$tVUFT
                                                                              g$ys$10155$tVUFT)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$10114$tVUFT
                                                                                   g$x$10140$tVUFT
                                                                                   (+ g$n$10116$tVUFT
                                                                                      '1)
                                                                                   g$ids$10154$tVUFT)))
                                                                              (case-lambda
                                                                                ((g$x$10158$tVUFT
                                                                                   g$ids$10159$tVUFT)
                                                                                 ((case-lambda
                                                                                    ((g$ids$10160$tVUFT
                                                                                       g$x$10161$tVUFT)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$10161$tVUFT
                                                                                         (g$reverse$5652$tVUFT
                                                                                           g$ys$10155$tVUFT)
                                                                                         g$z$10149$tVUFT)
                                                                                       g$ids$10160$tVUFT)))
                                                                                  g$ids$10159$tVUFT
                                                                                  g$x$10158$tVUFT))))))
                                                                         g$ids$10153$tVUFT
                                                                         g$ys$10152$tVUFT))))))
                                                                g$ids$10147$tVUFT
                                                                g$z$10146$tVUFT))))))
                                                       g$ls/false$10135$tVUFT)
                                                     ((case-lambda
                                                        ((g$t$10162$tVUFT)
                                                         ((case-lambda
                                                            ((g$ls/false$10163$tVUFT)
                                                             (if g$ls/false$10163$tVUFT
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$10164$tVUFT
                                                                      g$y$10165$tVUFT)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$10114$tVUFT
                                                                           g$y$10165$tVUFT
                                                                           g$n$10116$tVUFT
                                                                           g$ids$10117$tVUFT)))
                                                                      (case-lambda
                                                                        ((g$y$10168$tVUFT
                                                                           g$ids$10169$tVUFT)
                                                                         ((case-lambda
                                                                            ((g$ids$10170$tVUFT
                                                                               g$y$10171$tVUFT)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$10114$tVUFT
                                                                                    g$x$10164$tVUFT
                                                                                    g$n$10116$tVUFT
                                                                                    g$ids$10170$tVUFT)))
                                                                               (case-lambda
                                                                                 ((g$x$10174$tVUFT
                                                                                    g$ids$10175$tVUFT)
                                                                                  ((case-lambda
                                                                                     ((g$ids$10176$tVUFT
                                                                                        g$x$10177$tVUFT)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$10177$tVUFT
                                                                                          g$y$10171$tVUFT)
                                                                                        g$ids$10176$tVUFT)))
                                                                                   g$ids$10175$tVUFT
                                                                                   g$x$10174$tVUFT))))))
                                                                          g$ids$10169$tVUFT
                                                                          g$y$10168$tVUFT))))))
                                                                 g$ls/false$10163$tVUFT)
                                                               ((case-lambda
                                                                  ((g$t$10178$tVUFT)
                                                                   ((case-lambda
                                                                      ((g$ls/false$10179$tVUFT)
                                                                       (if g$ls/false$10179$tVUFT
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$10117$tVUFT)))
                                                                           g$ls/false$10179$tVUFT)
                                                                         ((case-lambda
                                                                            ((g$t$10180$tVUFT)
                                                                             ((case-lambda
                                                                                ((g$ls/false$10181$tVUFT)
                                                                                 (if (if g$ls/false$10181$tVUFT
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$10182$tVUFT)
                                                                                              (not (g$stx?$8255$tVUFT
                                                                                                     g$p$10182$tVUFT))))
                                                                                           g$ls/false$10181$tVUFT))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$10183$tVUFT)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$10114$tVUFT
                                                                                               g$p$10183$tVUFT
                                                                                               g$n$10116$tVUFT
                                                                                               g$ids$10117$tVUFT)))
                                                                                          (case-lambda
                                                                                            ((g$p$10186$tVUFT
                                                                                               g$ids$10187$tVUFT)
                                                                                             ((case-lambda
                                                                                                ((g$ids$10188$tVUFT
                                                                                                   g$p$10189$tVUFT)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$10189$tVUFT)
                                                                                                   g$ids$10188$tVUFT)))
                                                                                              g$ids$10187$tVUFT
                                                                                              g$p$10186$tVUFT))))))
                                                                                     g$ls/false$10181$tVUFT)
                                                                                   ((case-lambda
                                                                                      ((g$t$10190$tVUFT)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$10191$tVUFT)
                                                                                           (if g$ls/false$10191$tVUFT
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$10192$tVUFT)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$8294$tVUFT
                                                                                                        g$datum$10192$tVUFT))
                                                                                                    g$ids$10117$tVUFT)))
                                                                                               g$ls/false$10191$tVUFT)
                                                                                             (g$syntax-violation$8674$tVUFT
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$10190$tVUFT))))
                                                                                        (g$syntax-dispatch$8562$tVUFT
                                                                                          g$t$10190$tVUFT
                                                                                          'any))))
                                                                                    g$t$10180$tVUFT))))
                                                                              (g$syntax-dispatch$8562$tVUFT
                                                                                g$t$10180$tVUFT
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$10178$tVUFT))))
                                                                    (g$syntax-dispatch$8562$tVUFT
                                                                      g$t$10178$tVUFT
                                                                      '()))))
                                                                g$t$10162$tVUFT))))
                                                          (g$syntax-dispatch$8562$tVUFT
                                                            g$t$10162$tVUFT
                                                            '(any . any)))))
                                                      g$t$10134$tVUFT))))
                                                (g$syntax-dispatch$8562$tVUFT
                                                  g$t$10134$tVUFT
                                                  '(any any
                                                        .
                                                        #(each+ any () any))))))
                                            g$t$10122$tVUFT))))
                                      (g$syntax-dispatch$8562$tVUFT
                                        g$t$10122$tVUFT
                                        '(any any)))))
                                  g$t$10118$tVUFT))))
                            (g$syntax-dispatch$8562$tVUFT
                              g$t$10118$tVUFT
                              'any))))
                        g$p$10115$tVUFT)))))
          (g$cvt$10114$tVUFT g$pattern$10111$tVUFT '0 '())))))
   (g$syntax-dispatch$8562$tVUFT
     g$syntax-dispatch$12080$tVUFT
     ((case-lambda
        (()
         (letrec* ((g$stx^$10208$tVUFT
                     (case-lambda
                       ((g$e$10318$tVUFT
                          g$m*$10319$tVUFT
                          g$s*$10320$tVUFT
                          g$ae*$10321$tVUFT)
                        (if (if (null? g$m*$10319$tVUFT)
                              (if (null? g$s*$10320$tVUFT)
                                (begin '#f (null? g$ae*$10321$tVUFT))
                                '#f)
                              '#f)
                          g$e$10318$tVUFT
                          (g$mkstx$8271$tVUFT
                            g$e$10318$tVUFT
                            g$m*$10319$tVUFT
                            g$s*$10320$tVUFT
                            g$ae*$10321$tVUFT)))))
                   (g$match-each$10209$tVUFT
                     (case-lambda
                       ((g$e$10302$tVUFT
                          g$p$10303$tVUFT
                          g$m*$10304$tVUFT
                          g$s*$10305$tVUFT
                          g$ae*$10306$tVUFT)
                        (if (pair? g$e$10302$tVUFT)
                          ((case-lambda
                             ((g$first$10307$tVUFT)
                              (if g$first$10307$tVUFT
                                (begin
                                  '#f
                                  ((case-lambda
                                     ((g$rest$10308$tVUFT)
                                      (if g$rest$10308$tVUFT
                                        (begin
                                          '#f
                                          (cons
                                            g$first$10307$tVUFT
                                            g$rest$10308$tVUFT))
                                        '#f)))
                                   (g$match-each$10209$tVUFT
                                     (cdr g$e$10302$tVUFT)
                                     g$p$10303$tVUFT
                                     g$m*$10304$tVUFT
                                     g$s*$10305$tVUFT
                                     g$ae*$10306$tVUFT)))
                                '#f)))
                           (g$match$10215$tVUFT
                             (car g$e$10302$tVUFT)
                             g$p$10303$tVUFT
                             g$m*$10304$tVUFT
                             g$s*$10305$tVUFT
                             g$ae*$10306$tVUFT
                             '()))
                          (if (null? g$e$10302$tVUFT)
                            '()
                            (if (g$stx?$8255$tVUFT g$e$10302$tVUFT)
                              (if (not (g$top-marked?$8221$tVUFT
                                         g$m*$10304$tVUFT))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$8270$tVUFT
                                         g$m*$10304$tVUFT
                                         g$s*$10305$tVUFT
                                         g$ae*$10306$tVUFT
                                         g$e$10302$tVUFT)))
                                    (case-lambda
                                      ((g$m*$10312$tVUFT
                                         g$s*$10313$tVUFT
                                         g$ae*$10314$tVUFT)
                                       ((case-lambda
                                          ((g$ae*$10315$tVUFT
                                             g$s*$10316$tVUFT
                                             g$m*$10317$tVUFT)
                                           (g$match-each$10209$tVUFT
                                             (g$stx-expr$8257$tVUFT
                                               g$e$10302$tVUFT)
                                             g$p$10303$tVUFT
                                             g$m*$10317$tVUFT
                                             g$s*$10316$tVUFT
                                             g$ae*$10315$tVUFT)))
                                        g$ae*$10314$tVUFT
                                        g$s*$10313$tVUFT
                                        g$m*$10312$tVUFT)))))
                                '#f)
                              (if (annotation? g$e$10302$tVUFT)
                                (g$match-each$10209$tVUFT
                                  (annotation-expression g$e$10302$tVUFT)
                                  g$p$10303$tVUFT
                                  g$m*$10304$tVUFT
                                  g$s*$10305$tVUFT
                                  g$ae*$10306$tVUFT)
                                '#f)))))))
                   (g$match-each+$10210$tVUFT
                     (case-lambda
                       ((g$e$10270$tVUFT
                          g$x-pat$10271$tVUFT
                          g$y-pat$10272$tVUFT
                          g$z-pat$10273$tVUFT
                          g$m*$10274$tVUFT
                          g$s*$10275$tVUFT
                          g$ae*$10276$tVUFT
                          g$r$10277$tVUFT)
                        ((letrec ((g$f$10278$tVUFT
                                    (case-lambda
                                      ((g$e$10279$tVUFT
                                         g$m*$10280$tVUFT
                                         g$s*$10281$tVUFT
                                         g$ae*$10282$tVUFT)
                                       (if (pair? g$e$10279$tVUFT)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$f$10278$tVUFT
                                                (cdr g$e$10279$tVUFT)
                                                g$m*$10280$tVUFT
                                                g$s*$10281$tVUFT
                                                g$ae*$10282$tVUFT)))
                                           (case-lambda
                                             ((g$xr*$10286$tVUFT
                                                g$y-pat$10287$tVUFT
                                                g$r$10288$tVUFT)
                                              ((case-lambda
                                                 ((g$r$10289$tVUFT
                                                    g$y-pat$10290$tVUFT
                                                    g$xr*$10291$tVUFT)
                                                  (if g$r$10289$tVUFT
                                                    (if (null?
                                                          g$y-pat$10290$tVUFT)
                                                      ((case-lambda
                                                         ((g$xr$10292$tVUFT)
                                                          (if g$xr$10292$tVUFT
                                                            (values
                                                              (cons
                                                                g$xr$10292$tVUFT
                                                                g$xr*$10291$tVUFT)
                                                              g$y-pat$10290$tVUFT
                                                              g$r$10289$tVUFT)
                                                            (values
                                                              '#f
                                                              '#f
                                                              '#f))))
                                                       (g$match$10215$tVUFT
                                                         (car g$e$10279$tVUFT)
                                                         g$x-pat$10271$tVUFT
                                                         g$m*$10280$tVUFT
                                                         g$s*$10281$tVUFT
                                                         g$ae*$10282$tVUFT
                                                         '()))
                                                      (values
                                                        '()
                                                        (cdr g$y-pat$10290$tVUFT)
                                                        (g$match$10215$tVUFT
                                                          (car g$e$10279$tVUFT)
                                                          (car g$y-pat$10290$tVUFT)
                                                          g$m*$10280$tVUFT
                                                          g$s*$10281$tVUFT
                                                          g$ae*$10282$tVUFT
                                                          g$r$10289$tVUFT)))
                                                    (values '#f '#f '#f))))
                                               g$r$10288$tVUFT
                                               g$y-pat$10287$tVUFT
                                               g$xr*$10286$tVUFT))))
                                         (if (g$stx?$8255$tVUFT g$e$10279$tVUFT)
                                           (if (g$top-marked?$8221$tVUFT
                                                 g$m*$10280$tVUFT)
                                             (values
                                               '()
                                               g$y-pat$10272$tVUFT
                                               (g$match$10215$tVUFT
                                                 g$e$10279$tVUFT
                                                 g$z-pat$10273$tVUFT
                                                 g$m*$10280$tVUFT
                                                 g$s*$10281$tVUFT
                                                 g$ae*$10282$tVUFT
                                                 g$r$10277$tVUFT))
                                             (call-with-values
                                               (case-lambda
                                                 (()
                                                  (g$join-wraps$8270$tVUFT
                                                    g$m*$10280$tVUFT
                                                    g$s*$10281$tVUFT
                                                    g$ae*$10282$tVUFT
                                                    g$e$10279$tVUFT)))
                                               (case-lambda
                                                 ((g$m*$10296$tVUFT
                                                    g$s*$10297$tVUFT
                                                    g$ae*$10298$tVUFT)
                                                  ((case-lambda
                                                     ((g$ae*$10299$tVUFT
                                                        g$s*$10300$tVUFT
                                                        g$m*$10301$tVUFT)
                                                      (g$f$10278$tVUFT
                                                        (g$stx-expr$8257$tVUFT
                                                          g$e$10279$tVUFT)
                                                        g$m*$10301$tVUFT
                                                        g$s*$10300$tVUFT
                                                        g$ae*$10299$tVUFT)))
                                                   g$ae*$10298$tVUFT
                                                   g$s*$10297$tVUFT
                                                   g$m*$10296$tVUFT)))))
                                           (if (annotation? g$e$10279$tVUFT)
                                             (g$f$10278$tVUFT
                                               (annotation-expression
                                                 g$e$10279$tVUFT)
                                               g$m*$10280$tVUFT
                                               g$s*$10281$tVUFT
                                               g$ae*$10282$tVUFT)
                                             (values
                                               '()
                                               g$y-pat$10272$tVUFT
                                               (g$match$10215$tVUFT
                                                 g$e$10279$tVUFT
                                                 g$z-pat$10273$tVUFT
                                                 g$m*$10280$tVUFT
                                                 g$s*$10281$tVUFT
                                                 g$ae*$10282$tVUFT
                                                 g$r$10277$tVUFT)))))))))
                           g$f$10278$tVUFT)
                         g$e$10270$tVUFT
                         g$m*$10274$tVUFT
                         g$s*$10275$tVUFT
                         g$ae*$10276$tVUFT))))
                   (g$match-each-any$10211$tVUFT
                     (case-lambda
                       ((g$e$10256$tVUFT
                          g$m*$10257$tVUFT
                          g$s*$10258$tVUFT
                          g$ae*$10259$tVUFT)
                        (if (pair? g$e$10256$tVUFT)
                          ((case-lambda
                             ((g$l$10260$tVUFT)
                              (if g$l$10260$tVUFT
                                (begin
                                  '#f
                                  (cons
                                    (g$stx^$10208$tVUFT
                                      (car g$e$10256$tVUFT)
                                      g$m*$10257$tVUFT
                                      g$s*$10258$tVUFT
                                      g$ae*$10259$tVUFT)
                                    g$l$10260$tVUFT))
                                '#f)))
                           (g$match-each-any$10211$tVUFT
                             (cdr g$e$10256$tVUFT)
                             g$m*$10257$tVUFT
                             g$s*$10258$tVUFT
                             g$ae*$10259$tVUFT))
                          (if (null? g$e$10256$tVUFT)
                            '()
                            (if (g$stx?$8255$tVUFT g$e$10256$tVUFT)
                              (if (not (g$top-marked?$8221$tVUFT
                                         g$m*$10257$tVUFT))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$8270$tVUFT
                                         g$m*$10257$tVUFT
                                         g$s*$10258$tVUFT
                                         g$ae*$10259$tVUFT
                                         g$e$10256$tVUFT)))
                                    (case-lambda
                                      ((g$m*$10264$tVUFT
                                         g$s*$10265$tVUFT
                                         g$ae*$10266$tVUFT)
                                       ((case-lambda
                                          ((g$ae*$10267$tVUFT
                                             g$s*$10268$tVUFT
                                             g$m*$10269$tVUFT)
                                           (g$match-each-any$10211$tVUFT
                                             (g$stx-expr$8257$tVUFT
                                               g$e$10256$tVUFT)
                                             g$m*$10269$tVUFT
                                             g$s*$10268$tVUFT
                                             g$ae*$10267$tVUFT)))
                                        g$ae*$10266$tVUFT
                                        g$s*$10265$tVUFT
                                        g$m*$10264$tVUFT)))))
                                '#f)
                              (if (annotation? g$e$10256$tVUFT)
                                (g$match-each-any$10211$tVUFT
                                  (annotation-expression g$e$10256$tVUFT)
                                  g$m*$10257$tVUFT
                                  g$s*$10258$tVUFT
                                  g$ae*$10259$tVUFT)
                                '#f)))))))
                   (g$match-empty$10212$tVUFT
                     (case-lambda
                       ((g$p$10253$tVUFT g$r$10254$tVUFT)
                        (if (null? g$p$10253$tVUFT)
                          g$r$10254$tVUFT
                          (if (eq? g$p$10253$tVUFT '_)
                            g$r$10254$tVUFT
                            (if (eq? g$p$10253$tVUFT 'any)
                              (cons '() g$r$10254$tVUFT)
                              (if (pair? g$p$10253$tVUFT)
                                (g$match-empty$10212$tVUFT
                                  (car g$p$10253$tVUFT)
                                  (g$match-empty$10212$tVUFT
                                    (cdr g$p$10253$tVUFT)
                                    g$r$10254$tVUFT))
                                (if (eq? g$p$10253$tVUFT 'each-any)
                                  (cons '() g$r$10254$tVUFT)
                                  ((case-lambda
                                     ((g$t$10255$tVUFT)
                                      (if (g$memv$5150$tVUFT
                                            g$t$10255$tVUFT
                                            '(each))
                                        (g$match-empty$10212$tVUFT
                                          (vector-ref g$p$10253$tVUFT '1)
                                          g$r$10254$tVUFT)
                                        (if (g$memv$5150$tVUFT
                                              g$t$10255$tVUFT
                                              '(each+))
                                          (g$match-empty$10212$tVUFT
                                            (vector-ref g$p$10253$tVUFT '1)
                                            (g$match-empty$10212$tVUFT
                                              (g$reverse$5652$tVUFT
                                                (vector-ref g$p$10253$tVUFT '2))
                                              (g$match-empty$10212$tVUFT
                                                (vector-ref g$p$10253$tVUFT '3)
                                                g$r$10254$tVUFT)))
                                          (if (g$memv$5150$tVUFT
                                                g$t$10255$tVUFT
                                                '(free-id atom))
                                            g$r$10254$tVUFT
                                            (if (g$memv$5150$tVUFT
                                                  g$t$10255$tVUFT
                                                  '(scheme-id atom))
                                              g$r$10254$tVUFT
                                              (if (g$memv$5150$tVUFT
                                                    g$t$10255$tVUFT
                                                    '(vector))
                                                (g$match-empty$10212$tVUFT
                                                  (vector-ref
                                                    g$p$10253$tVUFT
                                                    '1)
                                                  g$r$10254$tVUFT)
                                                (assertion-violation
                                                  'syntax-dispatch
                                                  '"invalid pattern"
                                                  g$p$10253$tVUFT))))))))
                                   (vector-ref g$p$10253$tVUFT '0))))))))))
                   (g$combine$10213$tVUFT
                     (case-lambda
                       ((g$r*$10251$tVUFT g$r$10252$tVUFT)
                        (if (null? (car g$r*$10251$tVUFT))
                          g$r$10252$tVUFT
                          (cons
                            (g$map$5157$tVUFT car g$r*$10251$tVUFT)
                            (g$combine$10213$tVUFT
                              (g$map$5157$tVUFT cdr g$r*$10251$tVUFT)
                              g$r$10252$tVUFT))))))
                   (g$match*$10214$tVUFT
                     (case-lambda
                       ((g$e$10233$tVUFT
                          g$p$10234$tVUFT
                          g$m*$10235$tVUFT
                          g$s*$10236$tVUFT
                          g$ae*$10237$tVUFT
                          g$r$10238$tVUFT)
                        (if (null? g$p$10234$tVUFT)
                          (if (null? g$e$10233$tVUFT)
                            (begin '#f g$r$10238$tVUFT)
                            '#f)
                          (if (pair? g$p$10234$tVUFT)
                            (if (pair? g$e$10233$tVUFT)
                              (begin
                                '#f
                                (g$match$10215$tVUFT
                                  (car g$e$10233$tVUFT)
                                  (car g$p$10234$tVUFT)
                                  g$m*$10235$tVUFT
                                  g$s*$10236$tVUFT
                                  g$ae*$10237$tVUFT
                                  (g$match$10215$tVUFT
                                    (cdr g$e$10233$tVUFT)
                                    (cdr g$p$10234$tVUFT)
                                    g$m*$10235$tVUFT
                                    g$s*$10236$tVUFT
                                    g$ae*$10237$tVUFT
                                    g$r$10238$tVUFT)))
                              '#f)
                            (if (eq? g$p$10234$tVUFT 'each-any)
                              ((case-lambda
                                 ((g$l$10239$tVUFT)
                                  (if g$l$10239$tVUFT
                                    (begin
                                      '#f
                                      (cons g$l$10239$tVUFT g$r$10238$tVUFT))
                                    '#f)))
                               (g$match-each-any$10211$tVUFT
                                 g$e$10233$tVUFT
                                 g$m*$10235$tVUFT
                                 g$s*$10236$tVUFT
                                 g$ae*$10237$tVUFT))
                              ((case-lambda
                                 ((g$t$10240$tVUFT)
                                  (if (g$memv$5150$tVUFT
                                        g$t$10240$tVUFT
                                        '(each))
                                    (if (null? g$e$10233$tVUFT)
                                      (g$match-empty$10212$tVUFT
                                        (vector-ref g$p$10234$tVUFT '1)
                                        g$r$10238$tVUFT)
                                      ((case-lambda
                                         ((g$r*$10241$tVUFT)
                                          (if g$r*$10241$tVUFT
                                            (begin
                                              '#f
                                              (g$combine$10213$tVUFT
                                                g$r*$10241$tVUFT
                                                g$r$10238$tVUFT))
                                            '#f)))
                                       (g$match-each$10209$tVUFT
                                         g$e$10233$tVUFT
                                         (vector-ref g$p$10234$tVUFT '1)
                                         g$m*$10235$tVUFT
                                         g$s*$10236$tVUFT
                                         g$ae*$10237$tVUFT)))
                                    (if (g$memv$5150$tVUFT
                                          g$t$10240$tVUFT
                                          '(free-id))
                                      (if (g$symbol?$5645$tVUFT g$e$10233$tVUFT)
                                        (if (g$top-marked?$8221$tVUFT
                                              g$m*$10235$tVUFT)
                                          (if (g$free-id=?$8287$tVUFT
                                                (g$stx^$10208$tVUFT
                                                  g$e$10233$tVUFT
                                                  g$m*$10235$tVUFT
                                                  g$s*$10236$tVUFT
                                                  g$ae*$10237$tVUFT)
                                                (vector-ref g$p$10234$tVUFT '1))
                                            (begin '#f g$r$10238$tVUFT)
                                            '#f)
                                          '#f)
                                        '#f)
                                      (if (g$memv$5150$tVUFT
                                            g$t$10240$tVUFT
                                            '(scheme-id))
                                        (if (g$symbol?$5645$tVUFT
                                              g$e$10233$tVUFT)
                                          (if (g$top-marked?$8221$tVUFT
                                                g$m*$10235$tVUFT)
                                            (if (g$free-id=?$8287$tVUFT
                                                  (g$stx^$10208$tVUFT
                                                    g$e$10233$tVUFT
                                                    g$m*$10235$tVUFT
                                                    g$s*$10236$tVUFT
                                                    g$ae*$10237$tVUFT)
                                                  (g$scheme-stx$8505$tVUFT
                                                    (vector-ref
                                                      g$p$10234$tVUFT
                                                      '1)))
                                              (begin '#f g$r$10238$tVUFT)
                                              '#f)
                                            '#f)
                                          '#f)
                                        (if (g$memv$5150$tVUFT
                                              g$t$10240$tVUFT
                                              '(each+))
                                          (call-with-values
                                            (case-lambda
                                              (()
                                               (g$match-each+$10210$tVUFT
                                                 g$e$10233$tVUFT
                                                 (vector-ref g$p$10234$tVUFT '1)
                                                 (vector-ref g$p$10234$tVUFT '2)
                                                 (vector-ref g$p$10234$tVUFT '3)
                                                 g$m*$10235$tVUFT
                                                 g$s*$10236$tVUFT
                                                 g$ae*$10237$tVUFT
                                                 g$r$10238$tVUFT)))
                                            (case-lambda
                                              ((g$xr*$10245$tVUFT
                                                 g$y-pat$10246$tVUFT
                                                 g$r$10247$tVUFT)
                                               ((case-lambda
                                                  ((g$r$10248$tVUFT
                                                     g$y-pat$10249$tVUFT
                                                     g$xr*$10250$tVUFT)
                                                   (if g$r$10248$tVUFT
                                                     (if (null?
                                                           g$y-pat$10249$tVUFT)
                                                       (begin
                                                         '#f
                                                         (if (null?
                                                               g$xr*$10250$tVUFT)
                                                           (g$match-empty$10212$tVUFT
                                                             (vector-ref
                                                               g$p$10234$tVUFT
                                                               '1)
                                                             g$r$10248$tVUFT)
                                                           (g$combine$10213$tVUFT
                                                             g$xr*$10250$tVUFT
                                                             g$r$10248$tVUFT)))
                                                       '#f)
                                                     '#f)))
                                                g$r$10247$tVUFT
                                                g$y-pat$10246$tVUFT
                                                g$xr*$10245$tVUFT))))
                                          (if (g$memv$5150$tVUFT
                                                g$t$10240$tVUFT
                                                '(atom))
                                            (if (equal?
                                                  (vector-ref
                                                    g$p$10234$tVUFT
                                                    '1)
                                                  (g$strip$8293$tVUFT
                                                    g$e$10233$tVUFT
                                                    g$m*$10235$tVUFT))
                                              (begin '#f g$r$10238$tVUFT)
                                              '#f)
                                            (if (g$memv$5150$tVUFT
                                                  g$t$10240$tVUFT
                                                  '(vector))
                                              (if (g$vector?$5643$tVUFT
                                                    g$e$10233$tVUFT)
                                                (begin
                                                  '#f
                                                  (g$match$10215$tVUFT
                                                    (vector->list
                                                      g$e$10233$tVUFT)
                                                    (vector-ref
                                                      g$p$10234$tVUFT
                                                      '1)
                                                    g$m*$10235$tVUFT
                                                    g$s*$10236$tVUFT
                                                    g$ae*$10237$tVUFT
                                                    g$r$10238$tVUFT))
                                                '#f)
                                              (assertion-violation
                                                'syntax-dispatch
                                                '"invalid pattern"
                                                g$p$10234$tVUFT)))))))))
                               (vector-ref g$p$10234$tVUFT '0))))))))
                   (g$match$10215$tVUFT
                     (case-lambda
                       ((g$e$10218$tVUFT
                          g$p$10219$tVUFT
                          g$m*$10220$tVUFT
                          g$s*$10221$tVUFT
                          g$ae*$10222$tVUFT
                          g$r$10223$tVUFT)
                        (if (not g$r$10223$tVUFT)
                          '#f
                          (if (eq? g$p$10219$tVUFT '_)
                            g$r$10223$tVUFT
                            (if (eq? g$p$10219$tVUFT 'any)
                              (cons
                                (g$stx^$10208$tVUFT
                                  g$e$10218$tVUFT
                                  g$m*$10220$tVUFT
                                  g$s*$10221$tVUFT
                                  g$ae*$10222$tVUFT)
                                g$r$10223$tVUFT)
                              (if (g$stx?$8255$tVUFT g$e$10218$tVUFT)
                                (if (not (g$top-marked?$8221$tVUFT
                                           g$m*$10220$tVUFT))
                                  (begin
                                    '#f
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$join-wraps$8270$tVUFT
                                           g$m*$10220$tVUFT
                                           g$s*$10221$tVUFT
                                           g$ae*$10222$tVUFT
                                           g$e$10218$tVUFT)))
                                      (case-lambda
                                        ((g$m*$10227$tVUFT
                                           g$s*$10228$tVUFT
                                           g$ae*$10229$tVUFT)
                                         ((case-lambda
                                            ((g$ae*$10230$tVUFT
                                               g$s*$10231$tVUFT
                                               g$m*$10232$tVUFT)
                                             (g$match$10215$tVUFT
                                               (g$stx-expr$8257$tVUFT
                                                 g$e$10218$tVUFT)
                                               g$p$10219$tVUFT
                                               g$m*$10232$tVUFT
                                               g$s*$10231$tVUFT
                                               g$ae*$10230$tVUFT
                                               g$r$10223$tVUFT)))
                                          g$ae*$10229$tVUFT
                                          g$s*$10228$tVUFT
                                          g$m*$10227$tVUFT)))))
                                  '#f)
                                (if (annotation? g$e$10218$tVUFT)
                                  (g$match$10215$tVUFT
                                    (annotation-expression g$e$10218$tVUFT)
                                    g$p$10219$tVUFT
                                    g$m*$10220$tVUFT
                                    g$s*$10221$tVUFT
                                    g$ae*$10222$tVUFT
                                    g$r$10223$tVUFT)
                                  (g$match*$10214$tVUFT
                                    g$e$10218$tVUFT
                                    g$p$10219$tVUFT
                                    g$m*$10220$tVUFT
                                    g$s*$10221$tVUFT
                                    g$ae*$10222$tVUFT
                                    g$r$10223$tVUFT))))))))))
           (case-lambda
             ((g$e$10216$tVUFT g$p$10217$tVUFT)
              (g$match$10215$tVUFT
                g$e$10216$tVUFT
                g$p$10217$tVUFT
                '()
                '()
                '()
                '()))))))))
   (g$ellipsis?$8563$tVUFT
     g$ellipsis?$12081$tVUFT
     (case-lambda
       ((g$x$10322$tVUFT)
        (if (g$id?$8283$tVUFT g$x$10322$tVUFT)
          (begin
            '#f
            (g$free-id=?$8287$tVUFT
              g$x$10322$tVUFT
              (g$scheme-stx$8505$tVUFT '...)))
          '#f))))
   (g$underscore?$8564$tVUFT
     g$underscore?$12082$tVUFT
     (case-lambda
       ((g$x$10323$tVUFT)
        (if (g$id?$8283$tVUFT g$x$10323$tVUFT)
          (begin
            '#f
            (g$free-id=?$8287$tVUFT
              g$x$10323$tVUFT
              (g$scheme-stx$8505$tVUFT '_)))
          '#f))))
   (g$verify-literals$8565$tVUFT
     g$verify-literals$12083$tVUFT
     (case-lambda
       ((g$lits$10324$tVUFT g$expr$10325$tVUFT)
        (g$for-each$5158$tVUFT
          (case-lambda
            ((g$x$10326$tVUFT)
             (if ((case-lambda
                    ((g$t$10327$tVUFT)
                     (if g$t$10327$tVUFT
                       g$t$10327$tVUFT
                       ((case-lambda
                          ((g$t$10328$tVUFT)
                           (if g$t$10328$tVUFT
                             g$t$10328$tVUFT
                             (begin
                               '#f
                               (g$underscore?$8564$tVUFT g$x$10326$tVUFT)))))
                        (g$ellipsis?$8563$tVUFT g$x$10326$tVUFT)))))
                  (not (g$id?$8283$tVUFT g$x$10326$tVUFT)))
               (g$syntax-violation$8674$tVUFT
                 '#f
                 '"invalid literal"
                 g$expr$10325$tVUFT
                 g$x$10326$tVUFT)
               (void))))
          g$lits$10324$tVUFT))))
   (g$syntax-case-transformer$8566$tVUFT
     g$syntax-case-transformer$12084$tVUFT
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$10329$tVUFT
                     (case-lambda
                       ((g$pvars$10386$tVUFT
                          g$expr$10387$tVUFT
                          g$y$10388$tVUFT
                          g$r$10389$tVUFT
                          g$mr$10390$tVUFT)
                        ((case-lambda
                           ((g$ids$10391$tVUFT g$levels$10392$tVUFT)
                            ((case-lambda
                               ((g$labels$10393$tVUFT g$new-vars$10394$tVUFT)
                                ((case-lambda
                                   ((g$body$10395$tVUFT)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$8209$tVUFT
                                        '#f
                                        g$new-vars$10394$tVUFT
                                        g$body$10395$tVUFT)
                                      g$y$10388$tVUFT)))
                                 (g$chi-expr$8580$tVUFT
                                   (g$add-subst$8273$tVUFT
                                     (g$make-full-rib$8251$tVUFT
                                       g$ids$10391$tVUFT
                                       g$labels$10393$tVUFT)
                                     g$expr$10387$tVUFT)
                                   (append
                                     (g$map$5157$tVUFT
                                       (case-lambda
                                         ((g$label$10396$tVUFT
                                            g$var$10397$tVUFT
                                            g$level$10398$tVUFT)
                                          (cons
                                            g$label$10396$tVUFT
                                            (g$make-binding$8299$tVUFT
                                              'syntax
                                              (cons
                                                g$var$10397$tVUFT
                                                g$level$10398$tVUFT)))))
                                       g$labels$10393$tVUFT
                                       g$new-vars$10394$tVUFT
                                       (g$map$5157$tVUFT
                                         cdr
                                         g$pvars$10386$tVUFT))
                                     g$r$10389$tVUFT)
                                   g$mr$10390$tVUFT))))
                             (g$map$5157$tVUFT
                               g$gen-label$8224$tVUFT
                               g$ids$10391$tVUFT)
                             (g$map$5157$tVUFT
                               g$gen-lexical$8222$tVUFT
                               g$ids$10391$tVUFT))))
                         (g$map$5157$tVUFT car g$pvars$10386$tVUFT)
                         (g$map$5157$tVUFT cdr g$pvars$10386$tVUFT)))))
                   (g$invalid-ids-error$10330$tVUFT
                     (case-lambda
                       ((g$id*$10380$tVUFT g$e$10381$tVUFT g$class$10382$tVUFT)
                        ((letrec ((g$find$10383$tVUFT
                                    (case-lambda
                                      ((g$id*$10384$tVUFT g$ok*$10385$tVUFT)
                                       (if (null? g$id*$10384$tVUFT)
                                         (g$syntax-violation$8674$tVUFT
                                           '#f
                                           '"invalid syntax"
                                           g$e$10381$tVUFT)
                                         (if (g$id?$8283$tVUFT
                                               (car g$id*$10384$tVUFT))
                                           (if (g$bound-id-member?$8290$tVUFT
                                                 (car g$id*$10384$tVUFT)
                                                 g$ok*$10385$tVUFT)
                                             (g$syntax-error$8671$tVUFT
                                               (car g$id*$10384$tVUFT)
                                               '"duplicate "
                                               g$class$10382$tVUFT)
                                             (g$find$10383$tVUFT
                                               (cdr g$id*$10384$tVUFT)
                                               (cons
                                                 (car g$id*$10384$tVUFT)
                                                 g$ok*$10385$tVUFT)))
                                           (g$syntax-error$8671$tVUFT
                                             (car g$id*$10384$tVUFT)
                                             '"invalid "
                                             g$class$10382$tVUFT)))))))
                           g$find$10383$tVUFT)
                         g$id*$10380$tVUFT
                         '()))))
                   (g$gen-clause$10331$tVUFT
                     (case-lambda
                       ((g$x$10360$tVUFT
                          g$keys$10361$tVUFT
                          g$clauses$10362$tVUFT
                          g$r$10363$tVUFT
                          g$mr$10364$tVUFT
                          g$pat$10365$tVUFT
                          g$fender$10366$tVUFT
                          g$expr$10367$tVUFT)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$8561$tVUFT
                               g$pat$10365$tVUFT
                               g$keys$10361$tVUFT)))
                          (case-lambda
                            ((g$p$10370$tVUFT g$pvars$10371$tVUFT)
                             ((case-lambda
                                ((g$pvars$10372$tVUFT g$p$10373$tVUFT)
                                 (if (not (g$distinct-bound-ids?$8289$tVUFT
                                            (g$map$5157$tVUFT
                                              car
                                              g$pvars$10372$tVUFT)))
                                   (g$invalid-ids-error$10330$tVUFT
                                     (g$map$5157$tVUFT car g$pvars$10372$tVUFT)
                                     g$pat$10365$tVUFT
                                     '"pattern variable")
                                   (if (not (g$for-all$5155$tVUFT
                                              (case-lambda
                                                ((g$x$10374$tVUFT)
                                                 (not (g$ellipsis?$8563$tVUFT
                                                        (car g$x$10374$tVUFT)))))
                                              g$pvars$10372$tVUFT))
                                     (g$syntax-violation$8674$tVUFT
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$10365$tVUFT)
                                     ((case-lambda
                                        ((g$y$10375$tVUFT)
                                         ((case-lambda
                                            ((g$test$10376$tVUFT)
                                             ((case-lambda
                                                ((g$conseq$10377$tVUFT)
                                                 ((case-lambda
                                                    ((g$altern$10378$tVUFT)
                                                     (list
                                                       (g$build-lambda$8209$tVUFT
                                                         '#f
                                                         (list g$y$10375$tVUFT)
                                                         (list
                                                           'if
                                                           g$test$10376$tVUFT
                                                           g$conseq$10377$tVUFT
                                                           g$altern$10378$tVUFT))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$10360$tVUFT
                                                         (list
                                                           'quote
                                                           g$p$10373$tVUFT)))))
                                                  (g$gen-syntax-case$10332$tVUFT
                                                    g$x$10360$tVUFT
                                                    g$keys$10361$tVUFT
                                                    g$clauses$10362$tVUFT
                                                    g$r$10363$tVUFT
                                                    g$mr$10364$tVUFT))))
                                              (g$build-dispatch-call$10329$tVUFT
                                                g$pvars$10372$tVUFT
                                                g$expr$10367$tVUFT
                                                g$y$10375$tVUFT
                                                g$r$10363$tVUFT
                                                g$mr$10364$tVUFT))))
                                          (if (eq? g$fender$10366$tVUFT '#t)
                                            g$y$10375$tVUFT
                                            ((case-lambda
                                               ((g$call$10379$tVUFT)
                                                (list
                                                  'if
                                                  g$y$10375$tVUFT
                                                  g$call$10379$tVUFT
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$10329$tVUFT
                                               g$pvars$10372$tVUFT
                                               g$fender$10366$tVUFT
                                               g$y$10375$tVUFT
                                               g$r$10363$tVUFT
                                               g$mr$10364$tVUFT))))))
                                      (g$gen-lexical$8222$tVUFT 'tmp))))))
                              g$pvars$10371$tVUFT
                              g$p$10370$tVUFT)))))))
                   (g$gen-syntax-case$10332$tVUFT
                     (case-lambda
                       ((g$x$10343$tVUFT
                          g$keys$10344$tVUFT
                          g$clauses$10345$tVUFT
                          g$r$10346$tVUFT
                          g$mr$10347$tVUFT)
                        (if (null? g$clauses$10345$tVUFT)
                          (list '(primitive syntax-error) g$x$10343$tVUFT)
                          ((case-lambda
                             ((g$t$10348$tVUFT)
                              ((case-lambda
                                 ((g$ls/false$10349$tVUFT)
                                  (if g$ls/false$10349$tVUFT
                                    (apply
                                      (case-lambda
                                        ((g$pat$10350$tVUFT g$expr$10351$tVUFT)
                                         (if (if (g$id?$8283$tVUFT
                                                   g$pat$10350$tVUFT)
                                               (if (not (g$bound-id-member?$8290$tVUFT
                                                          g$pat$10350$tVUFT
                                                          g$keys$10344$tVUFT))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$8563$tVUFT
                                                          g$pat$10350$tVUFT)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$8287$tVUFT
                                                 g$pat$10350$tVUFT
                                                 (g$scheme-stx$8505$tVUFT '_))
                                             (g$chi-expr$8580$tVUFT
                                               g$expr$10351$tVUFT
                                               g$r$10346$tVUFT
                                               g$mr$10347$tVUFT)
                                             ((case-lambda
                                                ((g$lab$10352$tVUFT
                                                   g$lex$10353$tVUFT)
                                                 ((case-lambda
                                                    ((g$body$10354$tVUFT)
                                                     (list
                                                       (g$build-lambda$8209$tVUFT
                                                         '#f
                                                         (list
                                                           g$lex$10353$tVUFT)
                                                         g$body$10354$tVUFT)
                                                       g$x$10343$tVUFT)))
                                                  (g$chi-expr$8580$tVUFT
                                                    (g$add-subst$8273$tVUFT
                                                      (g$make-full-rib$8251$tVUFT
                                                        (list g$pat$10350$tVUFT)
                                                        (list
                                                          g$lab$10352$tVUFT))
                                                      g$expr$10351$tVUFT)
                                                    (cons
                                                      (cons
                                                        g$lab$10352$tVUFT
                                                        (g$make-binding$8299$tVUFT
                                                          'syntax
                                                          (cons
                                                            g$lex$10353$tVUFT
                                                            '0)))
                                                      g$r$10346$tVUFT)
                                                    g$mr$10347$tVUFT))))
                                              (g$gen-label$8224$tVUFT
                                                g$pat$10350$tVUFT)
                                              (g$gen-lexical$8222$tVUFT
                                                g$pat$10350$tVUFT)))
                                           (g$gen-clause$10331$tVUFT
                                             g$x$10343$tVUFT
                                             g$keys$10344$tVUFT
                                             (cdr g$clauses$10345$tVUFT)
                                             g$r$10346$tVUFT
                                             g$mr$10347$tVUFT
                                             g$pat$10350$tVUFT
                                             '#t
                                             g$expr$10351$tVUFT))))
                                      g$ls/false$10349$tVUFT)
                                    ((case-lambda
                                       ((g$t$10355$tVUFT)
                                        ((case-lambda
                                           ((g$ls/false$10356$tVUFT)
                                            (if g$ls/false$10356$tVUFT
                                              (apply
                                                (case-lambda
                                                  ((g$pat$10357$tVUFT
                                                     g$fender$10358$tVUFT
                                                     g$expr$10359$tVUFT)
                                                   (g$gen-clause$10331$tVUFT
                                                     g$x$10343$tVUFT
                                                     g$keys$10344$tVUFT
                                                     (cdr g$clauses$10345$tVUFT)
                                                     g$r$10346$tVUFT
                                                     g$mr$10347$tVUFT
                                                     g$pat$10357$tVUFT
                                                     g$fender$10358$tVUFT
                                                     g$expr$10359$tVUFT)))
                                                g$ls/false$10356$tVUFT)
                                              (g$syntax-violation$8674$tVUFT
                                                '#f
                                                '"invalid syntax"
                                                g$t$10355$tVUFT))))
                                         (g$syntax-dispatch$8562$tVUFT
                                           g$t$10355$tVUFT
                                           '(any any any)))))
                                     g$t$10348$tVUFT))))
                               (g$syntax-dispatch$8562$tVUFT
                                 g$t$10348$tVUFT
                                 '(any any)))))
                           (car g$clauses$10345$tVUFT)))))))
           (case-lambda
             ((g$e$10333$tVUFT g$r$10334$tVUFT g$mr$10335$tVUFT)
              ((case-lambda
                 ((g$t$10336$tVUFT)
                  ((case-lambda
                     ((g$ls/false$10337$tVUFT)
                      (if g$ls/false$10337$tVUFT
                        (apply
                          (case-lambda
                            ((g$expr$10338$tVUFT
                               g$keys$10339$tVUFT
                               g$clauses$10340$tVUFT)
                             (begin
                               (g$verify-literals$8565$tVUFT
                                 g$keys$10339$tVUFT
                                 g$e$10333$tVUFT)
                               ((case-lambda
                                  ((g$x$10341$tVUFT)
                                   ((case-lambda
                                      ((g$body$10342$tVUFT)
                                       (list
                                         (g$build-lambda$8209$tVUFT
                                           '#f
                                           (list g$x$10341$tVUFT)
                                           g$body$10342$tVUFT)
                                         (g$chi-expr$8580$tVUFT
                                           g$expr$10338$tVUFT
                                           g$r$10334$tVUFT
                                           g$mr$10335$tVUFT))))
                                    (g$gen-syntax-case$10332$tVUFT
                                      g$x$10341$tVUFT
                                      g$keys$10339$tVUFT
                                      g$clauses$10340$tVUFT
                                      g$r$10334$tVUFT
                                      g$mr$10335$tVUFT))))
                                (g$gen-lexical$8222$tVUFT 'tmp)))))
                          g$ls/false$10337$tVUFT)
                        (g$syntax-violation$8674$tVUFT
                          '#f
                          '"invalid syntax"
                          g$t$10336$tVUFT))))
                   (g$syntax-dispatch$8562$tVUFT
                     g$t$10336$tVUFT
                     '(_ any each-any . each-any)))))
               g$e$10333$tVUFT))))))))
   (g$ellipsis-map$8567$tVUFT
     g$ellipsis-map$12085$tVUFT
     (case-lambda
       ((g$proc$10399$tVUFT g$ls$10400$tVUFT . g$ls*$10401$tVUFT)
        (letrec* ((g$who$10402$tVUFT '...))
          (begin
            (if (not (list? g$ls$10400$tVUFT))
              (assertion-violation
                g$who$10402$tVUFT
                '"not a list"
                g$ls$10400$tVUFT)
              (void))
            (if (not (null? g$ls*$10401$tVUFT))
              ((case-lambda
                 ((g$n$10403$tVUFT)
                  (g$for-each$5158$tVUFT
                    (case-lambda
                      ((g$x$10404$tVUFT)
                       (begin
                         (if (not (list? g$x$10404$tVUFT))
                           (assertion-violation
                             g$who$10402$tVUFT
                             '"not a list"
                             g$x$10404$tVUFT)
                           (void))
                         (if (not (= (length g$x$10404$tVUFT) g$n$10403$tVUFT))
                           (assertion-violation
                             g$who$10402$tVUFT
                             '"length mismatch"
                             g$ls$10400$tVUFT
                             g$x$10404$tVUFT)
                           (void)))))
                    g$ls*$10401$tVUFT)))
               (length g$ls$10400$tVUFT))
              (void))
            (apply
              g$map$5157$tVUFT
              g$proc$10399$tVUFT
              g$ls$10400$tVUFT
              g$ls*$10401$tVUFT))))))
   (g$syntax-transformer$8568$tVUFT
     g$syntax-transformer$12086$tVUFT
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$10405$tVUFT
                     (case-lambda
                       ((g$src$10465$tVUFT
                          g$e$10466$tVUFT
                          g$r$10467$tVUFT
                          g$maps$10468$tVUFT
                          g$ellipsis?$10469$tVUFT
                          g$vec?$10470$tVUFT)
                        ((case-lambda
                           ((g$t$10471$tVUFT)
                            ((case-lambda
                               ((g$ls/false$10472$tVUFT)
                                (if (if g$ls/false$10472$tVUFT
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$10473$tVUFT)
                                             (g$ellipsis?$10469$tVUFT
                                               g$dots$10473$tVUFT)))
                                          g$ls/false$10472$tVUFT))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$10474$tVUFT)
                                       (g$syntax-violation$8674$tVUFT
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$10465$tVUFT)))
                                    g$ls/false$10472$tVUFT)
                                  ((case-lambda
                                     ((g$t$10475$tVUFT)
                                      ((case-lambda
                                         ((g$ls/false$10476$tVUFT)
                                          (if (if g$ls/false$10476$tVUFT
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$10477$tVUFT)
                                                       (g$id?$8283$tVUFT
                                                         g$id$10477$tVUFT)))
                                                    g$ls/false$10476$tVUFT))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$10478$tVUFT)
                                                 ((case-lambda
                                                    ((g$label$10479$tVUFT)
                                                     ((case-lambda
                                                        ((g$b$10480$tVUFT)
                                                         (if (eq? (g$binding-type$8300$tVUFT
                                                                    g$b$10480$tVUFT)
                                                                  'syntax)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$var.lev$10483$tVUFT)
                                                                    (g$gen-ref$10406$tVUFT
                                                                      g$src$10465$tVUFT
                                                                      (car g$var.lev$10483$tVUFT)
                                                                      (cdr g$var.lev$10483$tVUFT)
                                                                      g$maps$10468$tVUFT)))
                                                                 (g$binding-value$8301$tVUFT
                                                                   g$b$10480$tVUFT))))
                                                             (case-lambda
                                                               ((g$var$10484$tVUFT
                                                                  g$maps$10485$tVUFT)
                                                                ((case-lambda
                                                                   ((g$maps$10486$tVUFT
                                                                      g$var$10487$tVUFT)
                                                                    (values
                                                                      (list
                                                                        'ref
                                                                        g$var$10487$tVUFT)
                                                                      g$maps$10486$tVUFT)))
                                                                 g$maps$10485$tVUFT
                                                                 g$var$10484$tVUFT))))
                                                           (values
                                                             (list
                                                               'quote
                                                               g$e$10466$tVUFT)
                                                             g$maps$10468$tVUFT))))
                                                      (g$label->binding$8298$tVUFT
                                                        g$label$10479$tVUFT
                                                        g$r$10467$tVUFT))))
                                                  (g$id->label$8296$tVUFT
                                                    g$e$10466$tVUFT))))
                                              g$ls/false$10476$tVUFT)
                                            ((case-lambda
                                               ((g$t$10488$tVUFT)
                                                ((case-lambda
                                                   ((g$ls/false$10489$tVUFT)
                                                    (if (if g$ls/false$10489$tVUFT
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$10490$tVUFT
                                                                   g$e$10491$tVUFT)
                                                                 (g$ellipsis?$10469$tVUFT
                                                                   g$dots$10490$tVUFT)))
                                                              g$ls/false$10489$tVUFT))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$10492$tVUFT
                                                             g$e$10493$tVUFT)
                                                           (if g$vec?$10470$tVUFT
                                                             (g$syntax-violation$8674$tVUFT
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$10465$tVUFT)
                                                             (g$gen-syntax$10405$tVUFT
                                                               g$src$10465$tVUFT
                                                               g$e$10493$tVUFT
                                                               g$r$10467$tVUFT
                                                               g$maps$10468$tVUFT
                                                               (case-lambda
                                                                 ((g$x$10494$tVUFT)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$10489$tVUFT)
                                                      ((case-lambda
                                                         ((g$t$10495$tVUFT)
                                                          ((case-lambda
                                                             ((g$ls/false$10496$tVUFT)
                                                              (if (if g$ls/false$10496$tVUFT
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$10497$tVUFT
                                                                             g$dots$10498$tVUFT
                                                                             g$y$10499$tVUFT)
                                                                           (g$ellipsis?$10469$tVUFT
                                                                             g$dots$10498$tVUFT)))
                                                                        g$ls/false$10496$tVUFT))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$10500$tVUFT
                                                                       g$dots$10501$tVUFT
                                                                       g$y$10502$tVUFT)
                                                                     ((letrec ((g$f$10503$tVUFT
                                                                                 (case-lambda
                                                                                   ((g$y$10504$tVUFT
                                                                                      g$k$10505$tVUFT)
                                                                                    ((case-lambda
                                                                                       ((g$t$10506$tVUFT)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10507$tVUFT)
                                                                                            (if g$ls/false$10507$tVUFT
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$10505$tVUFT
                                                                                                     g$maps$10468$tVUFT)))
                                                                                                g$ls/false$10507$tVUFT)
                                                                                              ((case-lambda
                                                                                                 ((g$t$10508$tVUFT)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$10509$tVUFT)
                                                                                                      (if (if g$ls/false$10509$tVUFT
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$10510$tVUFT
                                                                                                                     g$y$10511$tVUFT)
                                                                                                                   (g$ellipsis?$10469$tVUFT
                                                                                                                     g$dots$10510$tVUFT)))
                                                                                                                g$ls/false$10509$tVUFT))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$10512$tVUFT
                                                                                                               g$y$10513$tVUFT)
                                                                                                             (g$f$10503$tVUFT
                                                                                                               g$y$10513$tVUFT
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$10514$tVUFT)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$10505$tVUFT
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$10514$tVUFT))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$10517$tVUFT
                                                                                                                         g$maps$10518$tVUFT)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$10519$tVUFT
                                                                                                                             g$x$10520$tVUFT)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$10519$tVUFT))
                                                                                                                             (g$syntax-violation$8674$tVUFT
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$10465$tVUFT)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$10408$tVUFT
                                                                                                                                 g$x$10520$tVUFT
                                                                                                                                 (car g$maps$10519$tVUFT))
                                                                                                                               (cdr g$maps$10519$tVUFT)))))
                                                                                                                        g$maps$10518$tVUFT
                                                                                                                        g$x$10517$tVUFT)))))))))
                                                                                                          g$ls/false$10509$tVUFT)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$10521$tVUFT)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$10522$tVUFT)
                                                                                                                (if g$ls/false$10522$tVUFT
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$10405$tVUFT
                                                                                                                              g$src$10465$tVUFT
                                                                                                                              g$y$10504$tVUFT
                                                                                                                              g$r$10467$tVUFT
                                                                                                                              g$maps$10468$tVUFT
                                                                                                                              g$ellipsis?$10469$tVUFT
                                                                                                                              g$vec?$10470$tVUFT)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$10525$tVUFT
                                                                                                                              g$maps$10526$tVUFT)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$10527$tVUFT
                                                                                                                                  g$y$10528$tVUFT)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$10505$tVUFT
                                                                                                                                       g$maps$10527$tVUFT)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$10531$tVUFT
                                                                                                                                       g$maps$10532$tVUFT)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$10533$tVUFT
                                                                                                                                           g$x$10534$tVUFT)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$10407$tVUFT
                                                                                                                                             g$x$10534$tVUFT
                                                                                                                                             g$y$10528$tVUFT)
                                                                                                                                           g$maps$10533$tVUFT)))
                                                                                                                                      g$maps$10532$tVUFT
                                                                                                                                      g$x$10531$tVUFT))))))
                                                                                                                             g$maps$10526$tVUFT
                                                                                                                             g$y$10525$tVUFT))))))
                                                                                                                    g$ls/false$10522$tVUFT)
                                                                                                                  (g$syntax-violation$8674$tVUFT
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$10521$tVUFT))))
                                                                                                             (g$syntax-dispatch$8562$tVUFT
                                                                                                               g$t$10521$tVUFT
                                                                                                               '_))))
                                                                                                         g$t$10508$tVUFT))))
                                                                                                   (g$syntax-dispatch$8562$tVUFT
                                                                                                     g$t$10508$tVUFT
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$10506$tVUFT))))
                                                                                         (g$syntax-dispatch$8562$tVUFT
                                                                                           g$t$10506$tVUFT
                                                                                           '()))))
                                                                                     g$y$10504$tVUFT)))))
                                                                        g$f$10503$tVUFT)
                                                                      g$y$10502$tVUFT
                                                                      (case-lambda
                                                                        ((g$maps$10535$tVUFT)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$10405$tVUFT
                                                                                g$src$10465$tVUFT
                                                                                g$x$10500$tVUFT
                                                                                g$r$10467$tVUFT
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$10535$tVUFT)
                                                                                g$ellipsis?$10469$tVUFT
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$10538$tVUFT
                                                                                g$maps$10539$tVUFT)
                                                                              ((case-lambda
                                                                                 ((g$maps$10540$tVUFT
                                                                                    g$x$10541$tVUFT)
                                                                                  (if (null?
                                                                                        (car g$maps$10540$tVUFT))
                                                                                    (g$syntax-violation$8674$tVUFT
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$10465$tVUFT)
                                                                                    (values
                                                                                      (g$gen-map$10409$tVUFT
                                                                                        g$x$10541$tVUFT
                                                                                        (car g$maps$10540$tVUFT))
                                                                                      (cdr g$maps$10540$tVUFT)))))
                                                                               g$maps$10539$tVUFT
                                                                               g$x$10538$tVUFT)))))))))
                                                                  g$ls/false$10496$tVUFT)
                                                                ((case-lambda
                                                                   ((g$t$10542$tVUFT)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10543$tVUFT)
                                                                        (if g$ls/false$10543$tVUFT
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$10544$tVUFT
                                                                                 g$y$10545$tVUFT)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$10405$tVUFT
                                                                                      g$src$10465$tVUFT
                                                                                      g$x$10544$tVUFT
                                                                                      g$r$10467$tVUFT
                                                                                      g$maps$10468$tVUFT
                                                                                      g$ellipsis?$10469$tVUFT
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$10548$tVUFT
                                                                                      g$maps$10549$tVUFT)
                                                                                    ((case-lambda
                                                                                       ((g$maps$10550$tVUFT
                                                                                          g$xnew$10551$tVUFT)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$10405$tVUFT
                                                                                               g$src$10465$tVUFT
                                                                                               g$y$10545$tVUFT
                                                                                               g$r$10467$tVUFT
                                                                                               g$maps$10550$tVUFT
                                                                                               g$ellipsis?$10469$tVUFT
                                                                                               g$vec?$10470$tVUFT)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$10554$tVUFT
                                                                                               g$maps$10555$tVUFT)
                                                                                             ((case-lambda
                                                                                                ((g$maps$10556$tVUFT
                                                                                                   g$ynew$10557$tVUFT)
                                                                                                 (values
                                                                                                   (g$gen-cons$10410$tVUFT
                                                                                                     g$e$10466$tVUFT
                                                                                                     g$x$10544$tVUFT
                                                                                                     g$y$10545$tVUFT
                                                                                                     g$xnew$10551$tVUFT
                                                                                                     g$ynew$10557$tVUFT)
                                                                                                   g$maps$10556$tVUFT)))
                                                                                              g$maps$10555$tVUFT
                                                                                              g$ynew$10554$tVUFT))))))
                                                                                     g$maps$10549$tVUFT
                                                                                     g$xnew$10548$tVUFT))))))
                                                                            g$ls/false$10543$tVUFT)
                                                                          ((case-lambda
                                                                             ((g$t$10558$tVUFT)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10559$tVUFT)
                                                                                  (if g$ls/false$10559$tVUFT
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$10560$tVUFT)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$10405$tVUFT
                                                                                                g$src$10465$tVUFT
                                                                                                g$ls$10560$tVUFT
                                                                                                g$r$10467$tVUFT
                                                                                                g$maps$10468$tVUFT
                                                                                                g$ellipsis?$10469$tVUFT
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$10563$tVUFT
                                                                                                g$maps$10564$tVUFT)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$10565$tVUFT
                                                                                                    g$lsnew$10566$tVUFT)
                                                                                                  (values
                                                                                                    (g$gen-vector$10411$tVUFT
                                                                                                      g$e$10466$tVUFT
                                                                                                      g$ls$10560$tVUFT
                                                                                                      g$lsnew$10566$tVUFT)
                                                                                                    g$maps$10565$tVUFT)))
                                                                                               g$maps$10564$tVUFT
                                                                                               g$lsnew$10563$tVUFT))))))
                                                                                      g$ls/false$10559$tVUFT)
                                                                                    ((case-lambda
                                                                                       ((g$t$10567$tVUFT)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10568$tVUFT)
                                                                                            (if g$ls/false$10568$tVUFT
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$10466$tVUFT)
                                                                                                     g$maps$10468$tVUFT)))
                                                                                                g$ls/false$10568$tVUFT)
                                                                                              (g$syntax-violation$8674$tVUFT
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$10567$tVUFT))))
                                                                                         (g$syntax-dispatch$8562$tVUFT
                                                                                           g$t$10567$tVUFT
                                                                                           '_))))
                                                                                     g$t$10558$tVUFT))))
                                                                               (g$syntax-dispatch$8562$tVUFT
                                                                                 g$t$10558$tVUFT
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$10542$tVUFT))))
                                                                     (g$syntax-dispatch$8562$tVUFT
                                                                       g$t$10542$tVUFT
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$10495$tVUFT))))
                                                           (g$syntax-dispatch$8562$tVUFT
                                                             g$t$10495$tVUFT
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$10488$tVUFT))))
                                                 (g$syntax-dispatch$8562$tVUFT
                                                   g$t$10488$tVUFT
                                                   '(any any)))))
                                             g$t$10475$tVUFT))))
                                       (g$syntax-dispatch$8562$tVUFT
                                         g$t$10475$tVUFT
                                         'any))))
                                   g$t$10471$tVUFT))))
                             (g$syntax-dispatch$8562$tVUFT
                               g$t$10471$tVUFT
                               'any))))
                         g$e$10466$tVUFT))))
                   (g$gen-ref$10406$tVUFT
                     (case-lambda
                       ((g$src$10452$tVUFT
                          g$var$10453$tVUFT
                          g$level$10454$tVUFT
                          g$maps$10455$tVUFT)
                        (if (= g$level$10454$tVUFT '0)
                          (values g$var$10453$tVUFT g$maps$10455$tVUFT)
                          (if (null? g$maps$10455$tVUFT)
                            (g$syntax-violation$8674$tVUFT
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$10452$tVUFT)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$10406$tVUFT
                                   g$src$10452$tVUFT
                                   g$var$10453$tVUFT
                                   (- g$level$10454$tVUFT '1)
                                   (cdr g$maps$10455$tVUFT))))
                              (case-lambda
                                ((g$outer-var$10458$tVUFT
                                   g$outer-maps$10459$tVUFT)
                                 ((case-lambda
                                    ((g$outer-maps$10460$tVUFT
                                       g$outer-var$10461$tVUFT)
                                     ((case-lambda
                                        ((g$t$10462$tVUFT)
                                         (if g$t$10462$tVUFT
                                           ((case-lambda
                                              ((g$b$10463$tVUFT)
                                               (values
                                                 (cdr g$b$10463$tVUFT)
                                                 g$maps$10455$tVUFT)))
                                            g$t$10462$tVUFT)
                                           ((case-lambda
                                              ((g$inner-var$10464$tVUFT)
                                               (values
                                                 g$inner-var$10464$tVUFT
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$10461$tVUFT
                                                       g$inner-var$10464$tVUFT)
                                                     (car g$maps$10455$tVUFT))
                                                   g$outer-maps$10460$tVUFT))))
                                            (g$gen-lexical$8222$tVUFT 'tmp)))))
                                      (g$assq$5145$tVUFT
                                        g$outer-var$10461$tVUFT
                                        (car g$maps$10455$tVUFT)))))
                                  g$outer-maps$10459$tVUFT
                                  g$outer-var$10458$tVUFT)))))))))
                   (g$gen-append$10407$tVUFT
                     (case-lambda
                       ((g$x$10450$tVUFT g$y$10451$tVUFT)
                        (if (equal? g$y$10451$tVUFT ''())
                          g$x$10450$tVUFT
                          (list 'append g$x$10450$tVUFT g$y$10451$tVUFT)))))
                   (g$gen-mappend$10408$tVUFT
                     (case-lambda
                       ((g$e$10448$tVUFT g$map-env$10449$tVUFT)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$10409$tVUFT
                            g$e$10448$tVUFT
                            g$map-env$10449$tVUFT)))))
                   (g$gen-map$10409$tVUFT
                     (case-lambda
                       ((g$e$10439$tVUFT g$map-env$10440$tVUFT)
                        ((case-lambda
                           ((g$formals$10441$tVUFT g$actuals$10442$tVUFT)
                            (if (eq? (car g$e$10439$tVUFT) 'ref)
                              (car g$actuals$10442$tVUFT)
                              (if (g$for-all$5155$tVUFT
                                    (case-lambda
                                      ((g$x$10443$tVUFT)
                                       (if (eq? (car g$x$10443$tVUFT) 'ref)
                                         (begin
                                           '#f
                                           (g$memq$5149$tVUFT
                                             (g$cadr$5654$tVUFT g$x$10443$tVUFT)
                                             g$formals$10441$tVUFT))
                                         '#f)))
                                    (cdr g$e$10439$tVUFT))
                                ((case-lambda
                                   ((g$args$10444$tVUFT)
                                    (cons
                                      'map
                                      (cons
                                        (list 'primitive (car g$e$10439$tVUFT))
                                        g$args$10444$tVUFT))))
                                 (g$map$5157$tVUFT
                                   ((case-lambda
                                      ((g$r$10445$tVUFT)
                                       (case-lambda
                                         ((g$x$10446$tVUFT)
                                          (cdr (g$assq$5145$tVUFT
                                                 (g$cadr$5654$tVUFT
                                                   g$x$10446$tVUFT)
                                                 g$r$10445$tVUFT))))))
                                    (g$map$5157$tVUFT
                                      cons
                                      g$formals$10441$tVUFT
                                      g$actuals$10442$tVUFT))
                                   (cdr g$e$10439$tVUFT)))
                                (g$cons*$5159$tVUFT
                                  'map
                                  (list
                                    'lambda
                                    g$formals$10441$tVUFT
                                    g$e$10439$tVUFT)
                                  g$actuals$10442$tVUFT)))))
                         (g$map$5157$tVUFT cdr g$map-env$10440$tVUFT)
                         (g$map$5157$tVUFT
                           (case-lambda
                             ((g$x$10447$tVUFT)
                              (list 'ref (car g$x$10447$tVUFT))))
                           g$map-env$10440$tVUFT)))))
                   (g$gen-cons$10410$tVUFT
                     (case-lambda
                       ((g$e$10431$tVUFT
                          g$x$10432$tVUFT
                          g$y$10433$tVUFT
                          g$xnew$10434$tVUFT
                          g$ynew$10435$tVUFT)
                        ((case-lambda
                           ((g$t$10436$tVUFT)
                            (if (g$memv$5150$tVUFT g$t$10436$tVUFT '(quote))
                              (if (eq? (car g$xnew$10434$tVUFT) 'quote)
                                ((case-lambda
                                   ((g$xnew$10437$tVUFT g$ynew$10438$tVUFT)
                                    (if (if (eq? g$xnew$10437$tVUFT
                                                 g$x$10432$tVUFT)
                                          (begin
                                            '#f
                                            (eq? g$ynew$10438$tVUFT
                                                 g$y$10433$tVUFT))
                                          '#f)
                                      (list 'quote g$e$10431$tVUFT)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$10437$tVUFT
                                          g$ynew$10438$tVUFT)))))
                                 (g$cadr$5654$tVUFT g$xnew$10434$tVUFT)
                                 (g$cadr$5654$tVUFT g$ynew$10435$tVUFT))
                                (if (null?
                                      (g$cadr$5654$tVUFT g$ynew$10435$tVUFT))
                                  (list 'list g$xnew$10434$tVUFT)
                                  (list
                                    'cons
                                    g$xnew$10434$tVUFT
                                    g$ynew$10435$tVUFT)))
                              (if (g$memv$5150$tVUFT g$t$10436$tVUFT '(list))
                                (cons
                                  'list
                                  (cons
                                    g$xnew$10434$tVUFT
                                    (cdr g$ynew$10435$tVUFT)))
                                (list
                                  'cons
                                  g$xnew$10434$tVUFT
                                  g$ynew$10435$tVUFT)))))
                         (car g$ynew$10435$tVUFT)))))
                   (g$gen-vector$10411$tVUFT
                     (case-lambda
                       ((g$e$10428$tVUFT g$ls$10429$tVUFT g$lsnew$10430$tVUFT)
                        (if (eq? (car g$lsnew$10430$tVUFT) 'quote)
                          (if (eq? (g$cadr$5654$tVUFT g$lsnew$10430$tVUFT)
                                   g$ls$10429$tVUFT)
                            (list 'quote g$e$10428$tVUFT)
                            (list
                              'quote
                              (g$list->vector$5640$tVUFT
                                (g$cadr$5654$tVUFT g$lsnew$10430$tVUFT))))
                          (if (eq? (car g$lsnew$10430$tVUFT) 'list)
                            (cons 'vector (cdr g$lsnew$10430$tVUFT))
                            (list 'list->vector g$lsnew$10430$tVUFT))))))
                   (g$regen$10412$tVUFT
                     (case-lambda
                       ((g$x$10425$tVUFT)
                        ((case-lambda
                           ((g$t$10426$tVUFT)
                            (if (g$memv$5150$tVUFT g$t$10426$tVUFT '(ref))
                              (g$cadr$5654$tVUFT g$x$10425$tVUFT)
                              (if (g$memv$5150$tVUFT
                                    g$t$10426$tVUFT
                                    '(primitive))
                                (list
                                  'primitive
                                  (g$cadr$5654$tVUFT g$x$10425$tVUFT))
                                (if (g$memv$5150$tVUFT g$t$10426$tVUFT '(quote))
                                  (list
                                    'quote
                                    (g$cadr$5654$tVUFT g$x$10425$tVUFT))
                                  (if (g$memv$5150$tVUFT
                                        g$t$10426$tVUFT
                                        '(lambda))
                                    (g$build-lambda$8209$tVUFT
                                      '#f
                                      (g$cadr$5654$tVUFT g$x$10425$tVUFT)
                                      (g$regen$10412$tVUFT
                                        (g$caddr$5660$tVUFT g$x$10425$tVUFT)))
                                    (if (g$memv$5150$tVUFT
                                          g$t$10426$tVUFT
                                          '(map))
                                      ((case-lambda
                                         ((g$ls$10427$tVUFT)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$10427$tVUFT)))
                                       (g$map$5157$tVUFT
                                         g$regen$10412$tVUFT
                                         (cdr g$x$10425$tVUFT)))
                                      (cons
                                        (list 'primitive (car g$x$10425$tVUFT))
                                        (g$map$5157$tVUFT
                                          g$regen$10412$tVUFT
                                          (cdr g$x$10425$tVUFT))))))))))
                         (car g$x$10425$tVUFT))))))
           (case-lambda
             ((g$e$10413$tVUFT g$r$10414$tVUFT g$mr$10415$tVUFT)
              ((case-lambda
                 ((g$t$10416$tVUFT)
                  ((case-lambda
                     ((g$ls/false$10417$tVUFT)
                      (if g$ls/false$10417$tVUFT
                        (apply
                          (case-lambda
                            ((g$x$10418$tVUFT)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$10405$tVUFT
                                    g$e$10413$tVUFT
                                    g$x$10418$tVUFT
                                    g$r$10414$tVUFT
                                    '()
                                    g$ellipsis?$8563$tVUFT
                                    '#f)))
                               (case-lambda
                                 ((g$e$10421$tVUFT g$maps$10422$tVUFT)
                                  ((case-lambda
                                     ((g$maps$10423$tVUFT g$e$10424$tVUFT)
                                      (g$regen$10412$tVUFT g$e$10424$tVUFT)))
                                   g$maps$10422$tVUFT
                                   g$e$10421$tVUFT))))))
                          g$ls/false$10417$tVUFT)
                        (g$syntax-violation$8674$tVUFT
                          '#f
                          '"invalid syntax"
                          g$t$10416$tVUFT))))
                   (g$syntax-dispatch$8562$tVUFT g$t$10416$tVUFT '(_ any)))))
               g$e$10413$tVUFT))))))))
   (g$core-macro-transformer$8569$tVUFT
     g$core-macro-transformer$12087$tVUFT
     (case-lambda
       ((g$name$10569$tVUFT)
        ((case-lambda
           ((g$t$10570$tVUFT)
            (if (g$memv$5150$tVUFT g$t$10570$tVUFT '(quote))
              g$quote-transformer$8522$tVUFT
              (if (g$memv$5150$tVUFT g$t$10570$tVUFT '(lambda))
                g$lambda-transformer$8524$tVUFT
                (if (g$memv$5150$tVUFT g$t$10570$tVUFT '(case-lambda))
                  g$case-lambda-transformer$8523$tVUFT
                  (if (g$memv$5150$tVUFT g$t$10570$tVUFT '(letrec))
                    g$letrec-transformer$8512$tVUFT
                    (if (g$memv$5150$tVUFT g$t$10570$tVUFT '(letrec*))
                      g$letrec*-transformer$8513$tVUFT
                      (if (g$memv$5150$tVUFT g$t$10570$tVUFT '(if))
                        g$if-transformer$8520$tVUFT
                        (if (g$memv$5150$tVUFT g$t$10570$tVUFT '(foreign-call))
                          g$foreign-call-transformer$8560$tVUFT
                          (if (g$memv$5150$tVUFT g$t$10570$tVUFT '(syntax-case))
                            g$syntax-case-transformer$8566$tVUFT
                            (if (g$memv$5150$tVUFT g$t$10570$tVUFT '(syntax))
                              g$syntax-transformer$8568$tVUFT
                              (if (g$memv$5150$tVUFT
                                    g$t$10570$tVUFT
                                    '(type-descriptor))
                                g$type-descriptor-transformer$8515$tVUFT
                                (if (g$memv$5150$tVUFT
                                      g$t$10570$tVUFT
                                      '(record-type-descriptor))
                                  g$record-type-descriptor-transformer$8516$tVUFT
                                  (if (g$memv$5150$tVUFT
                                        g$t$10570$tVUFT
                                        '(record-constructor-descriptor))
                                    g$record-constructor-descriptor-transformer$8517$tVUFT
                                    (if (g$memv$5150$tVUFT
                                          g$t$10570$tVUFT
                                          '(fluid-let-syntax))
                                      g$fluid-let-syntax-transformer$8514$tVUFT
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$10569$tVUFT))))))))))))))))
         g$name$10569$tVUFT))))
   (g$file-options-macro$8570$tVUFT
     g$file-options-macro$12088$tVUFT
     (case-lambda
       ((g$x$10571$tVUFT)
        (letrec* ((g$valid-option?$10572$tVUFT
                    (case-lambda
                      ((g$x$10577$tVUFT)
                       (if (g$id?$8283$tVUFT g$x$10577$tVUFT)
                         (begin
                           '#f
                           (g$memq$5149$tVUFT
                             (g$id->sym$8284$tVUFT g$x$10577$tVUFT)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$10573$tVUFT)
              ((case-lambda
                 ((g$ls/false$10574$tVUFT)
                  (if (if g$ls/false$10574$tVUFT
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$10575$tVUFT)
                               (if (g$for-all$5155$tVUFT
                                     g$valid-option?$10572$tVUFT
                                     g$opt*$10575$tVUFT)
                                 (begin
                                   '#f
                                   (g$file-options-spec$7585$tVUFT
                                     (g$map$5157$tVUFT
                                       g$id->sym$8284$tVUFT
                                       g$opt*$10575$tVUFT)))
                                 '#f)))
                            g$ls/false$10574$tVUFT))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$10576$tVUFT)
                         (g$bless$8525$tVUFT
                           (list
                             'quote
                             (g$file-options-spec$7585$tVUFT
                               (g$map$5157$tVUFT
                                 g$id->sym$8284$tVUFT
                                 g$opt*$10576$tVUFT))))))
                      g$ls/false$10574$tVUFT)
                    (g$syntax-violation$8674$tVUFT
                      '#f
                      '"invalid syntax"
                      g$t$10573$tVUFT))))
               (g$syntax-dispatch$8562$tVUFT g$t$10573$tVUFT '(_ . each-any)))))
           g$x$10571$tVUFT)))))
   (g$symbol-macro$8571$tVUFT
     g$symbol-macro$12089$tVUFT
     (case-lambda
       ((g$x$10578$tVUFT g$set$10579$tVUFT)
        ((case-lambda
           ((g$t$10580$tVUFT)
            ((case-lambda
               ((g$ls/false$10581$tVUFT)
                (if (if g$ls/false$10581$tVUFT
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$10582$tVUFT)
                             (if (g$id?$8283$tVUFT g$name$10582$tVUFT)
                               (begin
                                 '#f
                                 (g$memq$5149$tVUFT
                                   (g$id->sym$8284$tVUFT g$name$10582$tVUFT)
                                   g$set$10579$tVUFT))
                               '#f)))
                          g$ls/false$10581$tVUFT))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$10583$tVUFT)
                       (g$bless$8525$tVUFT (list 'quote g$name$10583$tVUFT))))
                    g$ls/false$10581$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$10580$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$10580$tVUFT '(_ any)))))
         g$x$10578$tVUFT))))
   (g$macro-transformer$8572$tVUFT
     g$macro-transformer$12090$tVUFT
     (case-lambda
       ((g$x$10584$tVUFT)
        (if (g$procedure?$5647$tVUFT g$x$10584$tVUFT)
          g$x$10584$tVUFT
          (if (g$symbol?$5645$tVUFT g$x$10584$tVUFT)
            ((case-lambda
               ((g$t$10585$tVUFT)
                (if (g$memv$5150$tVUFT g$t$10585$tVUFT '(define-record-type))
                  g$define-record-type-macro$8556$tVUFT
                  (if (g$memv$5150$tVUFT g$t$10585$tVUFT '(define-struct))
                    g$define-struct-macro$8555$tVUFT
                    (if (g$memv$5150$tVUFT g$t$10585$tVUFT '(include))
                      g$include-macro$8550$tVUFT
                      (if (g$memv$5150$tVUFT g$t$10585$tVUFT '(cond))
                        g$cond-macro$8548$tVUFT
                        (if (g$memv$5150$tVUFT g$t$10585$tVUFT '(let))
                          g$let-macro$8528$tVUFT
                          (if (g$memv$5150$tVUFT g$t$10585$tVUFT '(do))
                            g$do-macro$8544$tVUFT
                            (if (g$memv$5150$tVUFT g$t$10585$tVUFT '(or))
                              g$or-macro$8546$tVUFT
                              (if (g$memv$5150$tVUFT g$t$10585$tVUFT '(and))
                                g$and-macro$8547$tVUFT
                                (if (g$memv$5150$tVUFT g$t$10585$tVUFT '(let*))
                                  g$let*-macro$8545$tVUFT
                                  (if (g$memv$5150$tVUFT
                                        g$t$10585$tVUFT
                                        '(let-values))
                                    g$let-values-macro$8529$tVUFT
                                    (if (g$memv$5150$tVUFT
                                          g$t$10585$tVUFT
                                          '(let*-values))
                                      g$let*-values-macro$8530$tVUFT
                                      (if (g$memv$5150$tVUFT
                                            g$t$10585$tVUFT
                                            '(syntax-rules))
                                        g$syntax-rules-macro$8552$tVUFT
                                        (if (g$memv$5150$tVUFT
                                              g$t$10585$tVUFT
                                              '(quasiquote))
                                          g$quasiquote-macro$8553$tVUFT
                                          (if (g$memv$5150$tVUFT
                                                g$t$10585$tVUFT
                                                '(quasisyntax))
                                            g$quasisyntax-macro$8554$tVUFT
                                            (if (g$memv$5150$tVUFT
                                                  g$t$10585$tVUFT
                                                  '(with-syntax))
                                              g$with-syntax-macro$8526$tVUFT
                                              (if (g$memv$5150$tVUFT
                                                    g$t$10585$tVUFT
                                                    '(when))
                                                g$when-macro$8518$tVUFT
                                                (if (g$memv$5150$tVUFT
                                                      g$t$10585$tVUFT
                                                      '(unless))
                                                  g$unless-macro$8519$tVUFT
                                                  (if (g$memv$5150$tVUFT
                                                        g$t$10585$tVUFT
                                                        '(case))
                                                    g$case-macro$8521$tVUFT
                                                    (if (g$memv$5150$tVUFT
                                                          g$t$10585$tVUFT
                                                          '(identifier-syntax))
                                                      g$identifier-syntax-macro$8543$tVUFT
                                                      (if (g$memv$5150$tVUFT
                                                            g$t$10585$tVUFT
                                                            '(time))
                                                        g$time-macro$8539$tVUFT
                                                        (if (g$memv$5150$tVUFT
                                                              g$t$10585$tVUFT
                                                              '(delay))
                                                          g$delay-macro$8540$tVUFT
                                                          (if (g$memv$5150$tVUFT
                                                                g$t$10585$tVUFT
                                                                '(assert))
                                                            g$assert-macro$8541$tVUFT
                                                            (if (g$memv$5150$tVUFT
                                                                  g$t$10585$tVUFT
                                                                  '(endianness))
                                                              g$endianness-macro$8542$tVUFT
                                                              (if (g$memv$5150$tVUFT
                                                                    g$t$10585$tVUFT
                                                                    '(guard))
                                                                g$guard-macro$8537$tVUFT
                                                                (if (g$memv$5150$tVUFT
                                                                      g$t$10585$tVUFT
                                                                      '(define-enumeration))
                                                                  g$define-enumeration-macro$8538$tVUFT
                                                                  (if (g$memv$5150$tVUFT
                                                                        g$t$10585$tVUFT
                                                                        '(trace-lambda))
                                                                    g$trace-lambda-macro$8531$tVUFT
                                                                    (if (g$memv$5150$tVUFT
                                                                          g$t$10585$tVUFT
                                                                          '(trace-define))
                                                                      g$trace-define-macro$8532$tVUFT
                                                                      (if (g$memv$5150$tVUFT
                                                                            g$t$10585$tVUFT
                                                                            '(trace-define-syntax))
                                                                        g$trace-define-syntax-macro$8533$tVUFT
                                                                        (if (g$memv$5150$tVUFT
                                                                              g$t$10585$tVUFT
                                                                              '(trace-let-syntax))
                                                                          g$trace-let-syntax-macro$8535$tVUFT
                                                                          (if (g$memv$5150$tVUFT
                                                                                g$t$10585$tVUFT
                                                                                '(trace-letrec-syntax))
                                                                            g$trace-letrec-syntax-macro$8536$tVUFT
                                                                            (if (g$memv$5150$tVUFT
                                                                                  g$t$10585$tVUFT
                                                                                  '(define-condition-type))
                                                                              g$define-condition-type-macro$8557$tVUFT
                                                                              (if (g$memv$5150$tVUFT
                                                                                    g$t$10585$tVUFT
                                                                                    '(parameterize))
                                                                                g$parameterize-macro$8559$tVUFT
                                                                                (if (g$memv$5150$tVUFT
                                                                                      g$t$10585$tVUFT
                                                                                      '(include-into))
                                                                                  g$include-into-macro$8551$tVUFT
                                                                                  (if (g$memv$5150$tVUFT
                                                                                        g$t$10585$tVUFT
                                                                                        '(eol-style))
                                                                                    (case-lambda
                                                                                      ((g$x$10586$tVUFT)
                                                                                       (g$symbol-macro$8571$tVUFT
                                                                                         g$x$10586$tVUFT
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (g$memv$5150$tVUFT
                                                                                          g$t$10585$tVUFT
                                                                                          '(error-handling-mode))
                                                                                      (case-lambda
                                                                                        ((g$x$10587$tVUFT)
                                                                                         (g$symbol-macro$8571$tVUFT
                                                                                           g$x$10587$tVUFT
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (g$memv$5150$tVUFT
                                                                                            g$t$10585$tVUFT
                                                                                            '(buffer-mode))
                                                                                        (case-lambda
                                                                                          ((g$x$10588$tVUFT)
                                                                                           (g$symbol-macro$8571$tVUFT
                                                                                             g$x$10588$tVUFT
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (g$memv$5150$tVUFT
                                                                                              g$t$10585$tVUFT
                                                                                              '(file-options))
                                                                                          g$file-options-macro$8570$tVUFT
                                                                                          (if (g$memv$5150$tVUFT
                                                                                                g$t$10585$tVUFT
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$8558$tVUFT
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$10584$tVUFT)))))))))))))))))))))))))))))))))))))))))
             g$x$10584$tVUFT)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$10584$tVUFT))))))
   (g$local-macro-transformer$8573$tVUFT
     g$local-macro-transformer$12091$tVUFT
     (case-lambda ((g$x$10589$tVUFT) (car g$x$10589$tVUFT))))
   (g$do-macro-call$8574$tVUFT
     g$do-macro-call$12092$tVUFT
     (case-lambda
       ((g$transformer$10590$tVUFT g$expr$10591$tVUFT g$r$10592$tVUFT)
        (letrec* ((g$return$10593$tVUFT
                    (case-lambda
                      ((g$x$10601$tVUFT)
                       (begin
                         ((letrec ((g$f$10602$tVUFT
                                     (case-lambda
                                       ((g$x$10603$tVUFT)
                                        (if (not (g$stx?$8255$tVUFT
                                                   g$x$10603$tVUFT))
                                          (if (pair? g$x$10603$tVUFT)
                                            (begin
                                              (g$f$10602$tVUFT
                                                (car g$x$10603$tVUFT))
                                              (g$f$10602$tVUFT
                                                (cdr g$x$10603$tVUFT)))
                                            (if (g$vector?$5643$tVUFT
                                                  g$x$10603$tVUFT)
                                              (g$vector-for-each$5706$tVUFT
                                                g$f$10602$tVUFT
                                                g$x$10603$tVUFT)
                                              (if (g$symbol?$5645$tVUFT
                                                    g$x$10603$tVUFT)
                                                (g$syntax-violation$8674$tVUFT
                                                  '#f
                                                  '"raw symbol encountered in output of macro"
                                                  g$expr$10591$tVUFT
                                                  g$x$10603$tVUFT)
                                                (void))))
                                          (void))))))
                            g$f$10602$tVUFT)
                          g$x$10601$tVUFT)
                         (g$add-mark$8272$tVUFT
                           (g$gen-mark$8267$tVUFT)
                           g$x$10601$tVUFT
                           g$expr$10591$tVUFT))))))
          ((case-lambda
             ((g$x$10594$tVUFT)
              (if (g$procedure?$5647$tVUFT g$x$10594$tVUFT)
                (g$return$10593$tVUFT
                  (g$x$10594$tVUFT
                    (case-lambda
                      ((g$id$10595$tVUFT)
                       (begin
                         (if (not (g$id?$8283$tVUFT g$id$10595$tVUFT))
                           (assertion-violation
                             'rho
                             '"not an identifier"
                             g$id$10595$tVUFT)
                           (void))
                         ((case-lambda
                            ((g$label$10596$tVUFT)
                             ((case-lambda
                                ((g$binding$10597$tVUFT)
                                 ((case-lambda
                                    ((g$t$10598$tVUFT)
                                     (if (g$memv$5150$tVUFT
                                           g$t$10598$tVUFT
                                           '(local-ctv))
                                       (g$cadr$5654$tVUFT g$binding$10597$tVUFT)
                                       (if (g$memv$5150$tVUFT
                                             g$t$10598$tVUFT
                                             '(global-ctv))
                                         ((case-lambda
                                            ((g$lib$10599$tVUFT
                                               g$loc$10600$tVUFT)
                                             (begin
                                               (g$visit-library$8094$tVUFT
                                                 g$lib$10599$tVUFT)
                                               (symbol-value
                                                 g$loc$10600$tVUFT))))
                                          (g$cadr$5654$tVUFT
                                            g$binding$10597$tVUFT)
                                          (g$cddr$5656$tVUFT
                                            g$binding$10597$tVUFT))
                                         '#f))))
                                  (car g$binding$10597$tVUFT))))
                              (g$label->binding$8298$tVUFT
                                g$label$10596$tVUFT
                                g$r$10592$tVUFT))))
                          (g$id->label$8296$tVUFT g$id$10595$tVUFT)))))))
                (g$return$10593$tVUFT g$x$10594$tVUFT))))
           (g$transformer$10590$tVUFT
             (g$add-mark$8272$tVUFT
               g$anti-mark$8268$tVUFT
               g$expr$10591$tVUFT
               '#f)))))))
   (g$chi-macro$8575$tVUFT
     g$chi-macro$12093$tVUFT
     (case-lambda
       ((g$p$10604$tVUFT g$e$10605$tVUFT g$r$10606$tVUFT)
        (g$do-macro-call$8574$tVUFT
          (g$macro-transformer$8572$tVUFT g$p$10604$tVUFT)
          g$e$10605$tVUFT
          g$r$10606$tVUFT))))
   (g$chi-local-macro$8576$tVUFT
     g$chi-local-macro$12094$tVUFT
     (case-lambda
       ((g$p$10607$tVUFT g$e$10608$tVUFT g$r$10609$tVUFT)
        (g$do-macro-call$8574$tVUFT
          (g$local-macro-transformer$8573$tVUFT g$p$10607$tVUFT)
          g$e$10608$tVUFT
          g$r$10609$tVUFT))))
   (g$chi-global-macro$8577$tVUFT
     g$chi-global-macro$12095$tVUFT
     (case-lambda
       ((g$p$10610$tVUFT g$e$10611$tVUFT g$r$10612$tVUFT)
        ((case-lambda
           ((g$lib$10613$tVUFT g$loc$10614$tVUFT)
            (begin
              (g$visit-library$8094$tVUFT g$lib$10613$tVUFT)
              ((case-lambda
                 ((g$x$10615$tVUFT)
                  ((case-lambda
                     ((g$transformer$10616$tVUFT)
                      (g$do-macro-call$8574$tVUFT
                        g$transformer$10616$tVUFT
                        g$e$10611$tVUFT
                        g$r$10612$tVUFT)))
                   (if (g$procedure?$5647$tVUFT g$x$10615$tVUFT)
                     g$x$10615$tVUFT
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$10615$tVUFT)))))
               (symbol-value g$loc$10614$tVUFT)))))
         (car g$p$10610$tVUFT)
         (cdr g$p$10610$tVUFT)))))
   (g$chi-expr*$8578$tVUFT
     g$chi-expr*$12096$tVUFT
     (case-lambda
       ((g$e*$10617$tVUFT g$r$10618$tVUFT g$mr$10619$tVUFT)
        (if (null? g$e*$10617$tVUFT)
          '()
          ((case-lambda
             ((g$e$10620$tVUFT)
              (cons
                g$e$10620$tVUFT
                (g$chi-expr*$8578$tVUFT
                  (cdr g$e*$10617$tVUFT)
                  g$r$10618$tVUFT
                  g$mr$10619$tVUFT))))
           (g$chi-expr$8580$tVUFT
             (car g$e*$10617$tVUFT)
             g$r$10618$tVUFT
             g$mr$10619$tVUFT))))))
   (g$chi-application$8579$tVUFT
     g$chi-application$12097$tVUFT
     (case-lambda
       ((g$e$10621$tVUFT g$r$10622$tVUFT g$mr$10623$tVUFT)
        ((case-lambda
           ((g$t$10624$tVUFT)
            ((case-lambda
               ((g$ls/false$10625$tVUFT)
                (if g$ls/false$10625$tVUFT
                  (apply
                    (case-lambda
                      ((g$rator$10626$tVUFT g$rands$10627$tVUFT)
                       ((case-lambda
                          ((g$rator$10628$tVUFT)
                           (cons
                             g$rator$10628$tVUFT
                             (g$chi-expr*$8578$tVUFT
                               g$rands$10627$tVUFT
                               g$r$10622$tVUFT
                               g$mr$10623$tVUFT))))
                        (g$chi-expr$8580$tVUFT
                          g$rator$10626$tVUFT
                          g$r$10622$tVUFT
                          g$mr$10623$tVUFT))))
                    g$ls/false$10625$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$10624$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$10624$tVUFT '(any . each-any)))))
         g$e$10621$tVUFT))))
   (g$chi-expr$8580$tVUFT
     g$chi-expr$12098$tVUFT
     (case-lambda
       ((g$e$10629$tVUFT g$r$10630$tVUFT g$mr$10631$tVUFT)
        (call-with-values
          (case-lambda
            (() (g$syntax-type$8303$tVUFT g$e$10629$tVUFT g$r$10630$tVUFT)))
          (case-lambda
            ((g$type$10635$tVUFT g$value$10636$tVUFT g$kwd$10637$tVUFT)
             ((case-lambda
                ((g$kwd$10638$tVUFT g$value$10639$tVUFT g$type$10640$tVUFT)
                 ((case-lambda
                    ((g$t$10641$tVUFT)
                     (if (g$memv$5150$tVUFT g$t$10641$tVUFT '(core-macro))
                       ((case-lambda
                          ((g$transformer$10642$tVUFT)
                           (g$transformer$10642$tVUFT
                             g$e$10629$tVUFT
                             g$r$10630$tVUFT
                             g$mr$10631$tVUFT)))
                        (g$core-macro-transformer$8569$tVUFT
                          g$value$10639$tVUFT))
                       (if (g$memv$5150$tVUFT g$t$10641$tVUFT '(global))
                         ((case-lambda
                            ((g$lib$10643$tVUFT)
                             ((case-lambda
                                ((g$loc$10644$tVUFT)
                                 (begin
                                   ((g$inv-collector$8614$tVUFT)
                                    g$lib$10643$tVUFT)
                                   g$loc$10644$tVUFT)))
                              (cdr g$value$10639$tVUFT))))
                          (car g$value$10639$tVUFT))
                         (if (g$memv$5150$tVUFT g$t$10641$tVUFT '(core-prim))
                           ((case-lambda
                              ((g$name$10645$tVUFT)
                               (list 'primitive g$name$10645$tVUFT)))
                            g$value$10639$tVUFT)
                           (if (g$memv$5150$tVUFT g$t$10641$tVUFT '(call))
                             (g$chi-application$8579$tVUFT
                               g$e$10629$tVUFT
                               g$r$10630$tVUFT
                               g$mr$10631$tVUFT)
                             (if (g$memv$5150$tVUFT g$t$10641$tVUFT '(lexical))
                               ((case-lambda
                                  ((g$lex$10646$tVUFT) g$lex$10646$tVUFT))
                                (g$lexical-var$8506$tVUFT g$value$10639$tVUFT))
                               (if (g$memv$5150$tVUFT
                                     g$t$10641$tVUFT
                                     '(global-macro global-macro!))
                                 (g$chi-expr$8580$tVUFT
                                   (g$chi-global-macro$8577$tVUFT
                                     g$value$10639$tVUFT
                                     g$e$10629$tVUFT
                                     g$r$10630$tVUFT)
                                   g$r$10630$tVUFT
                                   g$mr$10631$tVUFT)
                                 (if (g$memv$5150$tVUFT
                                       g$t$10641$tVUFT
                                       '(local-macro local-macro!))
                                   (g$chi-expr$8580$tVUFT
                                     (g$chi-local-macro$8576$tVUFT
                                       g$value$10639$tVUFT
                                       g$e$10629$tVUFT
                                       g$r$10630$tVUFT)
                                     g$r$10630$tVUFT
                                     g$mr$10631$tVUFT)
                                   (if (g$memv$5150$tVUFT
                                         g$t$10641$tVUFT
                                         '(macro macro!))
                                     (g$chi-expr$8580$tVUFT
                                       (g$chi-macro$8575$tVUFT
                                         g$value$10639$tVUFT
                                         g$e$10629$tVUFT
                                         g$r$10630$tVUFT)
                                       g$r$10630$tVUFT
                                       g$mr$10631$tVUFT)
                                     (if (g$memv$5150$tVUFT
                                           g$t$10641$tVUFT
                                           '(constant))
                                       ((case-lambda
                                          ((g$datum$10647$tVUFT)
                                           (list 'quote g$datum$10647$tVUFT)))
                                        g$value$10639$tVUFT)
                                       (if (g$memv$5150$tVUFT
                                             g$t$10641$tVUFT
                                             '(set!))
                                         (g$chi-set!$8581$tVUFT
                                           g$e$10629$tVUFT
                                           g$r$10630$tVUFT
                                           g$mr$10631$tVUFT)
                                         (if (g$memv$5150$tVUFT
                                               g$t$10641$tVUFT
                                               '(begin))
                                           ((case-lambda
                                              ((g$t$10648$tVUFT)
                                               ((case-lambda
                                                  ((g$ls/false$10649$tVUFT)
                                                   (if g$ls/false$10649$tVUFT
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$10650$tVUFT
                                                            g$x*$10651$tVUFT)
                                                          (g$build-sequence$8212$tVUFT
                                                            '#f
                                                            (g$chi-expr*$8578$tVUFT
                                                              (cons
                                                                g$x$10650$tVUFT
                                                                g$x*$10651$tVUFT)
                                                              g$r$10630$tVUFT
                                                              g$mr$10631$tVUFT))))
                                                       g$ls/false$10649$tVUFT)
                                                     (g$syntax-violation$8674$tVUFT
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$10648$tVUFT))))
                                                (g$syntax-dispatch$8562$tVUFT
                                                  g$t$10648$tVUFT
                                                  '(_ any . each-any)))))
                                            g$e$10629$tVUFT)
                                           (if (g$memv$5150$tVUFT
                                                 g$t$10641$tVUFT
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$10652$tVUFT)
                                                 ((case-lambda
                                                    ((g$ls/false$10653$tVUFT)
                                                     (if (if g$ls/false$10653$tVUFT
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$10654$tVUFT
                                                                    g$xrhs*$10655$tVUFT
                                                                    g$xbody$10656$tVUFT
                                                                    g$xbody*$10657$tVUFT)
                                                                  (if (not (g$valid-bound-ids?$8288$tVUFT
                                                                             g$xlhs*$10654$tVUFT))
                                                                    (g$syntax-violation$8674$tVUFT
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$10629$tVUFT)
                                                                    (void))))
                                                               g$ls/false$10653$tVUFT))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$10658$tVUFT
                                                              g$xrhs*$10659$tVUFT
                                                              g$xbody$10660$tVUFT
                                                              g$xbody*$10661$tVUFT)
                                                            ((case-lambda
                                                               ((g$xlab*$10662$tVUFT)
                                                                ((case-lambda
                                                                   ((g$xrib$10663$tVUFT)
                                                                    ((case-lambda
                                                                       ((g$xb*$10664$tVUFT)
                                                                        (g$build-sequence$8212$tVUFT
                                                                          '#f
                                                                          (g$chi-expr*$8578$tVUFT
                                                                            (g$map$5157$tVUFT
                                                                              (case-lambda
                                                                                ((g$x$10665$tVUFT)
                                                                                 (g$add-subst$8273$tVUFT
                                                                                   g$xrib$10663$tVUFT
                                                                                   g$x$10665$tVUFT)))
                                                                              (cons
                                                                                g$xbody$10660$tVUFT
                                                                                g$xbody*$10661$tVUFT))
                                                                            (append
                                                                              (g$map$5157$tVUFT
                                                                                cons
                                                                                g$xlab*$10662$tVUFT
                                                                                g$xb*$10664$tVUFT)
                                                                              g$r$10630$tVUFT)
                                                                            (append
                                                                              (g$map$5157$tVUFT
                                                                                cons
                                                                                g$xlab*$10662$tVUFT
                                                                                g$xb*$10664$tVUFT)
                                                                              g$mr$10631$tVUFT)))))
                                                                     (g$map$5157$tVUFT
                                                                       (case-lambda
                                                                         ((g$x$10666$tVUFT)
                                                                          (g$make-eval-transformer$8316$tVUFT
                                                                            (g$expand-transformer$8607$tVUFT
                                                                              (if (eq? g$type$10640$tVUFT
                                                                                       'let-syntax)
                                                                                g$x$10666$tVUFT
                                                                                (g$add-subst$8273$tVUFT
                                                                                  g$xrib$10663$tVUFT
                                                                                  g$x$10666$tVUFT))
                                                                              g$mr$10631$tVUFT))))
                                                                       g$xrhs*$10659$tVUFT))))
                                                                 (g$make-full-rib$8251$tVUFT
                                                                   g$xlhs*$10658$tVUFT
                                                                   g$xlab*$10662$tVUFT))))
                                                             (g$map$5157$tVUFT
                                                               g$gen-label$8224$tVUFT
                                                               g$xlhs*$10658$tVUFT))))
                                                         g$ls/false$10653$tVUFT)
                                                       (g$syntax-violation$8674$tVUFT
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$10652$tVUFT))))
                                                  (g$syntax-dispatch$8562$tVUFT
                                                    g$t$10652$tVUFT
                                                    '(_ #(each (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$10629$tVUFT)
                                             (if (g$memv$5150$tVUFT
                                                   g$t$10641$tVUFT
                                                   '(displaced-lexical))
                                               (g$syntax-violation$8674$tVUFT
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$10629$tVUFT)
                                               (if (g$memv$5150$tVUFT
                                                     g$t$10641$tVUFT
                                                     '(syntax))
                                                 (g$syntax-violation$8674$tVUFT
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$10629$tVUFT)
                                                 (if (g$memv$5150$tVUFT
                                                       g$t$10641$tVUFT
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$8674$tVUFT
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$10667$tVUFT)
                                                           (if (g$memv$5150$tVUFT
                                                                 g$t$10667$tVUFT
                                                                 '(define))
                                                             '"a definition"
                                                             (if (g$memv$5150$tVUFT
                                                                   g$t$10667$tVUFT
                                                                   '(define-syntax))
                                                               '"a define-syntax"
                                                               (if (g$memv$5150$tVUFT
                                                                     g$t$10667$tVUFT
                                                                     '(module))
                                                                 '"a module definition"
                                                                 (if (g$memv$5150$tVUFT
                                                                       g$t$10667$tVUFT
                                                                       '(library))
                                                                   '"a library definition"
                                                                   (if (g$memv$5150$tVUFT
                                                                         g$t$10667$tVUFT
                                                                         '(import))
                                                                     '"an import declaration"
                                                                     (if (g$memv$5150$tVUFT
                                                                           g$t$10667$tVUFT
                                                                           '(export))
                                                                       '"an export declaration"
                                                                       '"a non-expression"))))))))
                                                        g$type$10640$tVUFT)
                                                       '" was found where an expression was expected")
                                                     g$e$10629$tVUFT)
                                                   (if (g$memv$5150$tVUFT
                                                         g$t$10641$tVUFT
                                                         '(mutable))
                                                     (g$syntax-violation$8674$tVUFT
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$10629$tVUFT)
                                                     (g$syntax-violation$8674$tVUFT
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$10629$tVUFT)))))))))))))))))))
                  g$type$10640$tVUFT)))
              g$kwd$10637$tVUFT
              g$value$10636$tVUFT
              g$type$10635$tVUFT)))))))
   (g$chi-set!$8581$tVUFT
     g$chi-set!$12099$tVUFT
     (case-lambda
       ((g$e$10668$tVUFT g$r$10669$tVUFT g$mr$10670$tVUFT)
        ((case-lambda
           ((g$t$10671$tVUFT)
            ((case-lambda
               ((g$ls/false$10672$tVUFT)
                (if (if g$ls/false$10672$tVUFT
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$10673$tVUFT g$v$10674$tVUFT)
                             (g$id?$8283$tVUFT g$x$10673$tVUFT)))
                          g$ls/false$10672$tVUFT))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$10675$tVUFT g$v$10676$tVUFT)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$8303$tVUFT
                              g$x$10675$tVUFT
                              g$r$10669$tVUFT)))
                         (case-lambda
                           ((g$type$10680$tVUFT
                              g$value$10681$tVUFT
                              g$kwd$10682$tVUFT)
                            ((case-lambda
                               ((g$kwd$10683$tVUFT
                                  g$value$10684$tVUFT
                                  g$type$10685$tVUFT)
                                ((case-lambda
                                   ((g$t$10686$tVUFT)
                                    (if (g$memv$5150$tVUFT
                                          g$t$10686$tVUFT
                                          '(lexical))
                                      (begin
                                        (g$set-lexical-mutable!$8508$tVUFT
                                          g$value$10684$tVUFT
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$8506$tVUFT
                                            g$value$10684$tVUFT)
                                          (g$chi-expr$8580$tVUFT
                                            g$v$10676$tVUFT
                                            g$r$10669$tVUFT
                                            g$mr$10670$tVUFT)))
                                      (if (g$memv$5150$tVUFT
                                            g$t$10686$tVUFT
                                            '(core-prim))
                                        (g$syntax-violation$8674$tVUFT
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$10668$tVUFT)
                                        (if (g$memv$5150$tVUFT
                                              g$t$10686$tVUFT
                                              '(global))
                                          (g$syntax-violation$8674$tVUFT
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$10668$tVUFT)
                                          (if (g$memv$5150$tVUFT
                                                g$t$10686$tVUFT
                                                '(global-macro!))
                                            (g$chi-expr$8580$tVUFT
                                              (g$chi-global-macro$8577$tVUFT
                                                g$value$10684$tVUFT
                                                g$e$10668$tVUFT
                                                g$r$10669$tVUFT)
                                              g$r$10669$tVUFT
                                              g$mr$10670$tVUFT)
                                            (if (g$memv$5150$tVUFT
                                                  g$t$10686$tVUFT
                                                  '(local-macro!))
                                              (g$chi-expr$8580$tVUFT
                                                (g$chi-local-macro$8576$tVUFT
                                                  g$value$10684$tVUFT
                                                  g$e$10668$tVUFT
                                                  g$r$10669$tVUFT)
                                                g$r$10669$tVUFT
                                                g$mr$10670$tVUFT)
                                              (if (g$memv$5150$tVUFT
                                                    g$t$10686$tVUFT
                                                    '(mutable))
                                                (g$syntax-violation$8674$tVUFT
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$10668$tVUFT)
                                                (g$syntax-violation$8674$tVUFT
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$10668$tVUFT)))))))))
                                 g$type$10685$tVUFT)))
                             g$kwd$10682$tVUFT
                             g$value$10681$tVUFT
                             g$type$10680$tVUFT))))))
                    g$ls/false$10672$tVUFT)
                  (g$syntax-violation$8674$tVUFT
                    '#f
                    '"invalid syntax"
                    g$t$10671$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$10671$tVUFT '(_ any any)))))
         g$e$10668$tVUFT))))
   (g$verify-formals$8582$tVUFT
     g$verify-formals$12100$tVUFT
     (case-lambda
       ((g$fmls$10687$tVUFT g$stx$10688$tVUFT)
        ((case-lambda
           ((g$t$10689$tVUFT)
            ((case-lambda
               ((g$ls/false$10690$tVUFT)
                (if g$ls/false$10690$tVUFT
                  (apply
                    (case-lambda
                      ((g$x*$10691$tVUFT)
                       (if (not (g$valid-bound-ids?$8288$tVUFT
                                  g$x*$10691$tVUFT))
                         (g$invalid-fmls-error$8527$tVUFT
                           g$stx$10688$tVUFT
                           g$fmls$10687$tVUFT)
                         (void))))
                    g$ls/false$10690$tVUFT)
                  ((case-lambda
                     ((g$t$10692$tVUFT)
                      ((case-lambda
                         ((g$ls/false$10693$tVUFT)
                          (if g$ls/false$10693$tVUFT
                            (apply
                              (case-lambda
                                ((g$x*$10694$tVUFT g$x$10695$tVUFT)
                                 (if (not (g$valid-bound-ids?$8288$tVUFT
                                            (cons
                                              g$x$10695$tVUFT
                                              g$x*$10694$tVUFT)))
                                   (g$invalid-fmls-error$8527$tVUFT
                                     g$stx$10688$tVUFT
                                     g$fmls$10687$tVUFT)
                                   (void))))
                              g$ls/false$10693$tVUFT)
                            ((case-lambda
                               ((g$t$10696$tVUFT)
                                ((case-lambda
                                   ((g$ls/false$10697$tVUFT)
                                    (if g$ls/false$10697$tVUFT
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$8674$tVUFT
                                             '#f
                                             '"invalid syntax"
                                             g$stx$10688$tVUFT)))
                                        g$ls/false$10697$tVUFT)
                                      (g$syntax-violation$8674$tVUFT
                                        '#f
                                        '"invalid syntax"
                                        g$t$10696$tVUFT))))
                                 (g$syntax-dispatch$8562$tVUFT
                                   g$t$10696$tVUFT
                                   '_))))
                             g$t$10692$tVUFT))))
                       (g$syntax-dispatch$8562$tVUFT
                         g$t$10692$tVUFT
                         '#(each+ any () any)))))
                   g$t$10689$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$10689$tVUFT 'each-any))))
         g$fmls$10687$tVUFT))))
   (g$chi-lambda-clause$8583$tVUFT
     g$chi-lambda-clause$12101$tVUFT
     (case-lambda
       ((g$stx$10698$tVUFT
          g$fmls$10699$tVUFT
          g$body*$10700$tVUFT
          g$r$10701$tVUFT
          g$mr$10702$tVUFT)
        ((case-lambda
           ((g$t$10703$tVUFT)
            ((case-lambda
               ((g$ls/false$10704$tVUFT)
                (if g$ls/false$10704$tVUFT
                  (apply
                    (case-lambda
                      ((g$x*$10705$tVUFT)
                       (begin
                         (g$verify-formals$8582$tVUFT
                           g$fmls$10699$tVUFT
                           g$stx$10698$tVUFT)
                         ((case-lambda
                            ((g$lex*$10706$tVUFT g$lab*$10707$tVUFT)
                             (values
                               g$lex*$10706$tVUFT
                               (g$chi-internal$8591$tVUFT
                                 (g$add-subst$8273$tVUFT
                                   (g$make-full-rib$8251$tVUFT
                                     g$x*$10705$tVUFT
                                     g$lab*$10707$tVUFT)
                                   g$body*$10700$tVUFT)
                                 (g$add-lexicals$8510$tVUFT
                                   g$lab*$10707$tVUFT
                                   g$lex*$10706$tVUFT
                                   g$r$10701$tVUFT)
                                 g$mr$10702$tVUFT))))
                          (g$map$5157$tVUFT
                            g$gen-lexical$8222$tVUFT
                            g$x*$10705$tVUFT)
                          (g$map$5157$tVUFT
                            g$gen-label$8224$tVUFT
                            g$x*$10705$tVUFT)))))
                    g$ls/false$10704$tVUFT)
                  ((case-lambda
                     ((g$t$10708$tVUFT)
                      ((case-lambda
                         ((g$ls/false$10709$tVUFT)
                          (if g$ls/false$10709$tVUFT
                            (apply
                              (case-lambda
                                ((g$x*$10710$tVUFT g$x$10711$tVUFT)
                                 (begin
                                   (g$verify-formals$8582$tVUFT
                                     g$fmls$10699$tVUFT
                                     g$stx$10698$tVUFT)
                                   ((case-lambda
                                      ((g$lex*$10712$tVUFT
                                         g$lab*$10713$tVUFT
                                         g$lex$10714$tVUFT
                                         g$lab$10715$tVUFT)
                                       (values
                                         (append
                                           g$lex*$10712$tVUFT
                                           g$lex$10714$tVUFT)
                                         (g$chi-internal$8591$tVUFT
                                           (g$add-subst$8273$tVUFT
                                             (g$make-full-rib$8251$tVUFT
                                               (cons
                                                 g$x$10711$tVUFT
                                                 g$x*$10710$tVUFT)
                                               (cons
                                                 g$lab$10715$tVUFT
                                                 g$lab*$10713$tVUFT))
                                             g$body*$10700$tVUFT)
                                           (g$add-lexicals$8510$tVUFT
                                             (cons
                                               g$lab$10715$tVUFT
                                               g$lab*$10713$tVUFT)
                                             (cons
                                               g$lex$10714$tVUFT
                                               g$lex*$10712$tVUFT)
                                             g$r$10701$tVUFT)
                                           g$mr$10702$tVUFT))))
                                    (g$map$5157$tVUFT
                                      g$gen-lexical$8222$tVUFT
                                      g$x*$10710$tVUFT)
                                    (g$map$5157$tVUFT
                                      g$gen-label$8224$tVUFT
                                      g$x*$10710$tVUFT)
                                    (g$gen-lexical$8222$tVUFT g$x$10711$tVUFT)
                                    (g$gen-label$8224$tVUFT g$x$10711$tVUFT)))))
                              g$ls/false$10709$tVUFT)
                            ((case-lambda
                               ((g$t$10716$tVUFT)
                                ((case-lambda
                                   ((g$ls/false$10717$tVUFT)
                                    (if g$ls/false$10717$tVUFT
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$8674$tVUFT
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$10699$tVUFT)))
                                        g$ls/false$10717$tVUFT)
                                      (g$syntax-violation$8674$tVUFT
                                        '#f
                                        '"invalid syntax"
                                        g$t$10716$tVUFT))))
                                 (g$syntax-dispatch$8562$tVUFT
                                   g$t$10716$tVUFT
                                   '_))))
                             g$t$10708$tVUFT))))
                       (g$syntax-dispatch$8562$tVUFT
                         g$t$10708$tVUFT
                         '#(each+ any () any)))))
                   g$t$10703$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$10703$tVUFT 'each-any))))
         g$fmls$10699$tVUFT))))
   (g$chi-lambda-clause*$8584$tVUFT
     g$chi-lambda-clause*$12102$tVUFT
     (case-lambda
       ((g$stx$10718$tVUFT
          g$fmls*$10719$tVUFT
          g$body**$10720$tVUFT
          g$r$10721$tVUFT
          g$mr$10722$tVUFT)
        (if (null? g$fmls*$10719$tVUFT)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$8583$tVUFT
                 g$stx$10718$tVUFT
                 (car g$fmls*$10719$tVUFT)
                 (car g$body**$10720$tVUFT)
                 g$r$10721$tVUFT
                 g$mr$10722$tVUFT)))
            (case-lambda
              ((g$a$10725$tVUFT g$b$10726$tVUFT)
               ((case-lambda
                  ((g$b$10727$tVUFT g$a$10728$tVUFT)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$8584$tVUFT
                          g$stx$10718$tVUFT
                          (cdr g$fmls*$10719$tVUFT)
                          (cdr g$body**$10720$tVUFT)
                          g$r$10721$tVUFT
                          g$mr$10722$tVUFT)))
                     (case-lambda
                       ((g$a*$10731$tVUFT g$b*$10732$tVUFT)
                        ((case-lambda
                           ((g$b*$10733$tVUFT g$a*$10734$tVUFT)
                            (values
                              (cons g$a$10728$tVUFT g$a*$10734$tVUFT)
                              (cons g$b$10727$tVUFT g$b*$10733$tVUFT))))
                         g$b*$10732$tVUFT
                         g$a*$10731$tVUFT))))))
                g$b$10726$tVUFT
                g$a$10725$tVUFT))))))))
   (g$chi-defun$8585$tVUFT
     g$chi-defun$12103$tVUFT
     (case-lambda
       ((g$x$10735$tVUFT g$r$10736$tVUFT g$mr$10737$tVUFT)
        ((case-lambda
           ((g$fmls$10738$tVUFT g$body*$10739$tVUFT)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$8583$tVUFT
                   g$fmls$10738$tVUFT
                   g$fmls$10738$tVUFT
                   g$body*$10739$tVUFT
                   g$r$10736$tVUFT
                   g$mr$10737$tVUFT)))
              (case-lambda
                ((g$fmls$10742$tVUFT g$body$10743$tVUFT)
                 ((case-lambda
                    ((g$body$10744$tVUFT g$fmls$10745$tVUFT)
                     (g$build-lambda$8209$tVUFT
                       '#f
                       g$fmls$10745$tVUFT
                       g$body$10744$tVUFT)))
                  g$body$10743$tVUFT
                  g$fmls$10742$tVUFT))))))
         (car g$x$10735$tVUFT)
         (cdr g$x$10735$tVUFT)))))
   (g$chi-rhs$8586$tVUFT
     g$chi-rhs$12104$tVUFT
     (case-lambda
       ((g$rhs$10746$tVUFT g$r$10747$tVUFT g$mr$10748$tVUFT)
        ((case-lambda
           ((g$t$10749$tVUFT)
            (if (g$memv$5150$tVUFT g$t$10749$tVUFT '(defun))
              (g$chi-defun$8585$tVUFT
                (cdr g$rhs$10746$tVUFT)
                g$r$10747$tVUFT
                g$mr$10748$tVUFT)
              (if (g$memv$5150$tVUFT g$t$10749$tVUFT '(expr))
                ((case-lambda
                   ((g$expr$10750$tVUFT)
                    (g$chi-expr$8580$tVUFT
                      g$expr$10750$tVUFT
                      g$r$10747$tVUFT
                      g$mr$10748$tVUFT)))
                 (cdr g$rhs$10746$tVUFT))
                (if (g$memv$5150$tVUFT g$t$10749$tVUFT '(top-expr))
                  ((case-lambda
                     ((g$expr$10751$tVUFT)
                      (g$build-sequence$8212$tVUFT
                        '#f
                        (list
                          (g$chi-expr$8580$tVUFT
                            g$expr$10751$tVUFT
                            g$r$10747$tVUFT
                            g$mr$10748$tVUFT)
                          (g$build-void$8213$tVUFT)))))
                   (cdr g$rhs$10746$tVUFT))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$10746$tVUFT))))))
         (car g$rhs$10746$tVUFT)))))
   (g$expand-interaction-rhs*/init*$8587$tVUFT
     g$expand-interaction-rhs*/init*$12105$tVUFT
     (case-lambda
       ((g$lhs*$10752$tVUFT
          g$rhs*$10753$tVUFT
          g$init*$10754$tVUFT
          g$r$10755$tVUFT
          g$mr$10756$tVUFT)
        ((letrec ((g$f$10757$tVUFT
                    (case-lambda
                      ((g$lhs*$10758$tVUFT g$rhs*$10759$tVUFT)
                       (if (null? g$lhs*$10758$tVUFT)
                         (g$map$5157$tVUFT
                           (case-lambda
                             ((g$x$10760$tVUFT)
                              (g$chi-expr$8580$tVUFT
                                g$x$10760$tVUFT
                                g$r$10755$tVUFT
                                g$mr$10756$tVUFT)))
                           g$init*$10754$tVUFT)
                         ((case-lambda
                            ((g$lhs$10761$tVUFT g$rhs$10762$tVUFT)
                             ((case-lambda
                                ((g$t$10763$tVUFT)
                                 (if (g$memv$5150$tVUFT
                                       g$t$10763$tVUFT
                                       '(defun))
                                   ((case-lambda
                                      ((g$rhs$10764$tVUFT)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$10761$tVUFT
                                           g$rhs$10764$tVUFT)
                                         (g$f$10757$tVUFT
                                           (cdr g$lhs*$10758$tVUFT)
                                           (cdr g$rhs*$10759$tVUFT)))))
                                    (g$chi-defun$8585$tVUFT
                                      (cdr g$rhs$10762$tVUFT)
                                      g$r$10755$tVUFT
                                      g$mr$10756$tVUFT))
                                   (if (g$memv$5150$tVUFT
                                         g$t$10763$tVUFT
                                         '(expr))
                                     ((case-lambda
                                        ((g$rhs$10765$tVUFT)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$10761$tVUFT
                                             g$rhs$10765$tVUFT)
                                           (g$f$10757$tVUFT
                                             (cdr g$lhs*$10758$tVUFT)
                                             (cdr g$rhs*$10759$tVUFT)))))
                                      (g$chi-expr$8580$tVUFT
                                        (cdr g$rhs$10762$tVUFT)
                                        g$r$10755$tVUFT
                                        g$mr$10756$tVUFT))
                                     (if (g$memv$5150$tVUFT
                                           g$t$10763$tVUFT
                                           '(top-expr))
                                       ((case-lambda
                                          ((g$e$10766$tVUFT)
                                           (cons
                                             g$e$10766$tVUFT
                                             (g$f$10757$tVUFT
                                               (cdr g$lhs*$10758$tVUFT)
                                               (cdr g$rhs*$10759$tVUFT)))))
                                        (g$chi-expr$8580$tVUFT
                                          (cdr g$rhs$10762$tVUFT)
                                          g$r$10755$tVUFT
                                          g$mr$10756$tVUFT))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$10762$tVUFT))))))
                              (car g$rhs$10762$tVUFT))))
                          (car g$lhs*$10758$tVUFT)
                          (car g$rhs*$10759$tVUFT)))))))
           g$f$10757$tVUFT)
         g$lhs*$10752$tVUFT
         g$rhs*$10753$tVUFT))))
   (g$chi-rhs*$8588$tVUFT
     g$chi-rhs*$12106$tVUFT
     (case-lambda
       ((g$rhs*$10767$tVUFT g$r$10768$tVUFT g$mr$10769$tVUFT)
        ((letrec ((g$f$10770$tVUFT
                    (case-lambda
                      ((g$ls$10771$tVUFT)
                       (if (null? g$ls$10771$tVUFT)
                         '()
                         ((case-lambda
                            ((g$a$10772$tVUFT)
                             (cons
                               g$a$10772$tVUFT
                               (g$f$10770$tVUFT (cdr g$ls$10771$tVUFT)))))
                          (g$chi-rhs$8586$tVUFT
                            (car g$ls$10771$tVUFT)
                            g$r$10768$tVUFT
                            g$mr$10769$tVUFT)))))))
           g$f$10770$tVUFT)
         g$rhs*$10767$tVUFT))))
   (g$find-bound=?$8589$tVUFT
     g$find-bound=?$12107$tVUFT
     (case-lambda
       ((g$x$10773$tVUFT g$lhs*$10774$tVUFT g$rhs*$10775$tVUFT)
        (if (null? g$lhs*$10774$tVUFT)
          '#f
          (if (g$bound-id=?$8286$tVUFT g$x$10773$tVUFT (car g$lhs*$10774$tVUFT))
            (car g$rhs*$10775$tVUFT)
            (g$find-bound=?$8589$tVUFT
              g$x$10773$tVUFT
              (cdr g$lhs*$10774$tVUFT)
              (cdr g$rhs*$10775$tVUFT)))))))
   (g$find-dups$8590$tVUFT
     g$find-dups$12108$tVUFT
     (case-lambda
       ((g$ls$10776$tVUFT)
        ((letrec ((g$f$10777$tVUFT
                    (case-lambda
                      ((g$ls$10778$tVUFT g$dups$10779$tVUFT)
                       (if (null? g$ls$10778$tVUFT)
                         g$dups$10779$tVUFT
                         ((case-lambda
                            ((g$t$10780$tVUFT)
                             (if g$t$10780$tVUFT
                               ((case-lambda
                                  ((g$x$10781$tVUFT)
                                   (g$f$10777$tVUFT
                                     (cdr g$ls$10778$tVUFT)
                                     (cons
                                       (list
                                         (car g$ls$10778$tVUFT)
                                         g$x$10781$tVUFT)
                                       g$dups$10779$tVUFT))))
                                g$t$10780$tVUFT)
                               (g$f$10777$tVUFT
                                 (cdr g$ls$10778$tVUFT)
                                 g$dups$10779$tVUFT))))
                          (g$find-bound=?$8589$tVUFT
                            (car g$ls$10778$tVUFT)
                            (cdr g$ls$10778$tVUFT)
                            (cdr g$ls$10778$tVUFT))))))))
           g$f$10777$tVUFT)
         g$ls$10776$tVUFT
         '()))))
   (g$chi-internal$8591$tVUFT
     g$chi-internal$12109$tVUFT
     (case-lambda
       ((g$e*$10782$tVUFT g$r$10783$tVUFT g$mr$10784$tVUFT)
        ((case-lambda
           ((g$rib$10785$tVUFT)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$8606$tVUFT
                   (g$map$5157$tVUFT
                     (case-lambda
                       ((g$x$10794$tVUFT)
                        (g$add-subst$8273$tVUFT
                          g$rib$10785$tVUFT
                          g$x$10794$tVUFT)))
                     (g$syntax->list$8282$tVUFT g$e*$10782$tVUFT))
                   g$r$10783$tVUFT
                   g$mr$10784$tVUFT
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$10785$tVUFT
                   '#f
                   '#t)))
              (case-lambda
                ((g$e*$10795$tVUFT
                   g$r$10796$tVUFT
                   g$mr$10797$tVUFT
                   g$lex*$10798$tVUFT
                   g$rhs*$10799$tVUFT
                   g$mod**$10800$tVUFT
                   g$kwd*$10801$tVUFT
                   g$_exp*$10802$tVUFT)
                 ((case-lambda
                    ((g$_exp*$10803$tVUFT
                       g$kwd*$10804$tVUFT
                       g$mod**$10805$tVUFT
                       g$rhs*$10806$tVUFT
                       g$lex*$10807$tVUFT
                       g$mr$10808$tVUFT
                       g$r$10809$tVUFT
                       g$e*$10810$tVUFT)
                     (begin
                       (if (null? g$e*$10810$tVUFT)
                         (g$syntax-violation$8674$tVUFT
                           '#f
                           '"no expression in body"
                           g$e*$10810$tVUFT)
                         (void))
                       ((case-lambda
                          ((g$init*$10811$tVUFT)
                           ((case-lambda
                              ((g$rhs*$10812$tVUFT)
                               (g$build-letrec*$8215$tVUFT
                                 '#f
                                 (g$reverse$5652$tVUFT g$lex*$10807$tVUFT)
                                 (g$reverse$5652$tVUFT g$rhs*$10812$tVUFT)
                                 (g$build-sequence$8212$tVUFT
                                   '#f
                                   g$init*$10811$tVUFT))))
                            (g$chi-rhs*$8588$tVUFT
                              g$rhs*$10806$tVUFT
                              g$r$10809$tVUFT
                              g$mr$10808$tVUFT))))
                        (g$chi-expr*$8578$tVUFT
                          (append
                            (apply
                              append
                              (g$reverse$5652$tVUFT g$mod**$10805$tVUFT))
                            g$e*$10810$tVUFT)
                          g$r$10809$tVUFT
                          g$mr$10808$tVUFT)))))
                  g$_exp*$10802$tVUFT
                  g$kwd*$10801$tVUFT
                  g$mod**$10800$tVUFT
                  g$rhs*$10799$tVUFT
                  g$lex*$10798$tVUFT
                  g$mr$10797$tVUFT
                  g$r$10796$tVUFT
                  g$e*$10795$tVUFT))))))
         (g$make-empty-rib$8243$tVUFT)))))
   (g$parse-module$8592$tVUFT
     g$parse-module$12110$tVUFT
     (case-lambda
       ((g$e$10813$tVUFT)
        ((case-lambda
           ((g$t$10814$tVUFT)
            ((case-lambda
               ((g$ls/false$10815$tVUFT)
                (if g$ls/false$10815$tVUFT
                  (apply
                    (case-lambda
                      ((g$export*$10816$tVUFT g$b*$10817$tVUFT)
                       (begin
                         (if (not (g$for-all$5155$tVUFT
                                    g$id?$8283$tVUFT
                                    g$export*$10816$tVUFT))
                           (g$syntax-violation$8674$tVUFT
                             '#f
                             '"module exports must be identifiers"
                             g$e$10813$tVUFT)
                           (void))
                         (values
                           '#f
                           (g$list->vector$5640$tVUFT g$export*$10816$tVUFT)
                           g$b*$10817$tVUFT))))
                    g$ls/false$10815$tVUFT)
                  ((case-lambda
                     ((g$t$10818$tVUFT)
                      ((case-lambda
                         ((g$ls/false$10819$tVUFT)
                          (if g$ls/false$10819$tVUFT
                            (apply
                              (case-lambda
                                ((g$name$10820$tVUFT
                                   g$export*$10821$tVUFT
                                   g$b*$10822$tVUFT)
                                 (begin
                                   (if (not (g$id?$8283$tVUFT
                                              g$name$10820$tVUFT))
                                     (g$syntax-violation$8674$tVUFT
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$10813$tVUFT)
                                     (void))
                                   (if (not (g$for-all$5155$tVUFT
                                              g$id?$8283$tVUFT
                                              g$export*$10821$tVUFT))
                                     (g$syntax-violation$8674$tVUFT
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$10813$tVUFT)
                                     (void))
                                   (values
                                     g$name$10820$tVUFT
                                     (g$list->vector$5640$tVUFT
                                       g$export*$10821$tVUFT)
                                     g$b*$10822$tVUFT))))
                              g$ls/false$10819$tVUFT)
                            (g$syntax-violation$8674$tVUFT
                              '#f
                              '"invalid syntax"
                              g$t$10818$tVUFT))))
                       (g$syntax-dispatch$8562$tVUFT
                         g$t$10818$tVUFT
                         '(_ any each-any . each-any)))))
                   g$t$10814$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$10814$tVUFT
               '(_ each-any . each-any)))))
         g$e$10813$tVUFT))))
   (g$9465$8593$tVUFT
     g$9465$12111$tVUFT
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$9468$tVUFT
       '#t
       '#t
       '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec))))
   (g$9467$8594$tVUFT g$9467$12112$tVUFT '#f)
   (g$9466$8595$tVUFT
     g$9466$12113$tVUFT
     (make-record-constructor-descriptor
       g$9465$8593$tVUFT
       '#f
       g$9467$8594$tVUFT))
   (g$module-interface?$8596$tVUFT
     g$module-interface?$12114$tVUFT
     (record-predicate g$9465$8593$tVUFT))
   (g$make-module-interface$8597$tVUFT
     g$make-module-interface$12115$tVUFT
     (record-constructor g$9466$8595$tVUFT))
   (g$module-interface-first-mark$8598$tVUFT
     g$module-interface-first-mark$12116$tVUFT
     (record-accessor g$9465$8593$tVUFT '0))
   (g$module-interface-exp-id-vec$8599$tVUFT
     g$module-interface-exp-id-vec$12117$tVUFT
     (record-accessor g$9465$8593$tVUFT '1))
   (g$module-interface-exp-lab-vec$8600$tVUFT
     g$module-interface-exp-lab-vec$12118$tVUFT
     (record-accessor g$9465$8593$tVUFT '2))
   (g$set-module-interface-first-mark!$8601$tVUFT
     g$set-module-interface-first-mark!$12119$tVUFT
     (record-mutator g$9465$8593$tVUFT '0))
   (g$set-module-interface-exp-id-vec!$8602$tVUFT
     g$set-module-interface-exp-id-vec!$12120$tVUFT
     (record-mutator g$9465$8593$tVUFT '1))
   (g$set-module-interface-exp-lab-vec!$8603$tVUFT
     g$set-module-interface-exp-lab-vec!$12121$tVUFT
     (record-mutator g$9465$8593$tVUFT '2))
   (g$module-interface-exp-id*$8604$tVUFT
     g$module-interface-exp-id*$12122$tVUFT
     (case-lambda
       ((g$iface$10823$tVUFT g$id$10824$tVUFT)
        (letrec* ((g$diff-marks$10825$tVUFT
                    (case-lambda
                      ((g$ls$10829$tVUFT g$x$10830$tVUFT)
                       (begin
                         (if (null? g$ls$10829$tVUFT)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$10831$tVUFT)
                             (if (eq? g$a$10831$tVUFT g$x$10830$tVUFT)
                               '()
                               (cons
                                 g$a$10831$tVUFT
                                 (g$diff-marks$10825$tVUFT
                                   (cdr g$ls$10829$tVUFT)
                                   g$x$10830$tVUFT)))))
                          (car g$ls$10829$tVUFT)))))))
          ((case-lambda
             ((g$diff$10826$tVUFT g$id-vec$10827$tVUFT)
              (if (null? g$diff$10826$tVUFT)
                g$id-vec$10827$tVUFT
                (g$vector-map$5705$tVUFT
                  (case-lambda
                    ((g$x$10828$tVUFT)
                     (g$make-stx$8256$tVUFT
                       (g$stx-expr$8257$tVUFT g$x$10828$tVUFT)
                       (append
                         g$diff$10826$tVUFT
                         (g$stx-mark*$8258$tVUFT g$x$10828$tVUFT))
                       '()
                       '())))
                  g$id-vec$10827$tVUFT))))
           (g$diff-marks$10825$tVUFT
             (g$stx-mark*$8258$tVUFT g$id$10824$tVUFT)
             (g$module-interface-first-mark$8598$tVUFT g$iface$10823$tVUFT))
           (g$module-interface-exp-id-vec$8599$tVUFT g$iface$10823$tVUFT))))))
   (g$chi-internal-module$8605$tVUFT
     g$chi-internal-module$12123$tVUFT
     (case-lambda
       ((g$e$10832$tVUFT
          g$r$10833$tVUFT
          g$mr$10834$tVUFT
          g$lex*$10835$tVUFT
          g$rhs*$10836$tVUFT
          g$mod**$10837$tVUFT
          g$kwd*$10838$tVUFT)
        (call-with-values
          (case-lambda (() (g$parse-module$8592$tVUFT g$e$10832$tVUFT)))
          (case-lambda
            ((g$name$10842$tVUFT g$exp-id*$10843$tVUFT g$e*$10844$tVUFT)
             ((case-lambda
                ((g$e*$10845$tVUFT g$exp-id*$10846$tVUFT g$name$10847$tVUFT)
                 ((case-lambda
                    ((g$rib$10848$tVUFT)
                     ((case-lambda
                        ((g$e*$10849$tVUFT)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$chi-body*$8606$tVUFT
                                g$e*$10849$tVUFT
                                g$r$10833$tVUFT
                                g$mr$10834$tVUFT
                                g$lex*$10835$tVUFT
                                g$rhs*$10836$tVUFT
                                g$mod**$10837$tVUFT
                                g$kwd*$10838$tVUFT
                                '()
                                g$rib$10848$tVUFT
                                '#f
                                '#t)))
                           (case-lambda
                             ((g$e*$10858$tVUFT
                                g$r$10859$tVUFT
                                g$mr$10860$tVUFT
                                g$lex*$10861$tVUFT
                                g$rhs*$10862$tVUFT
                                g$mod**$10863$tVUFT
                                g$kwd*$10864$tVUFT
                                g$_exp*$10865$tVUFT)
                              ((case-lambda
                                 ((g$_exp*$10866$tVUFT
                                    g$kwd*$10867$tVUFT
                                    g$mod**$10868$tVUFT
                                    g$rhs*$10869$tVUFT
                                    g$lex*$10870$tVUFT
                                    g$mr$10871$tVUFT
                                    g$r$10872$tVUFT
                                    g$e*$10873$tVUFT)
                                  ((case-lambda
                                     ((g$exp-lab*$10874$tVUFT
                                        g$mod**$10875$tVUFT)
                                      (if (not g$name$10847$tVUFT)
                                        (values
                                          g$lex*$10870$tVUFT
                                          g$rhs*$10869$tVUFT
                                          g$exp-id*$10846$tVUFT
                                          g$exp-lab*$10874$tVUFT
                                          g$r$10872$tVUFT
                                          g$mr$10871$tVUFT
                                          g$mod**$10875$tVUFT
                                          g$kwd*$10867$tVUFT)
                                        ((case-lambda
                                           ((g$lab$10876$tVUFT
                                              g$iface$10877$tVUFT)
                                            (values
                                              g$lex*$10870$tVUFT
                                              g$rhs*$10869$tVUFT
                                              (vector g$name$10847$tVUFT)
                                              (vector g$lab$10876$tVUFT)
                                              (cons
                                                (cons
                                                  g$lab$10876$tVUFT
                                                  (cons
                                                    '$module
                                                    g$iface$10877$tVUFT))
                                                g$r$10872$tVUFT)
                                              (cons
                                                (cons
                                                  g$lab$10876$tVUFT
                                                  (cons
                                                    '$module
                                                    g$iface$10877$tVUFT))
                                                g$mr$10871$tVUFT)
                                              g$mod**$10875$tVUFT
                                              g$kwd*$10867$tVUFT)))
                                         (g$gen-label$8224$tVUFT 'module)
                                         (g$make-module-interface$8597$tVUFT
                                           (car (g$stx-mark*$8258$tVUFT
                                                  g$name$10847$tVUFT))
                                           (g$vector-map$5705$tVUFT
                                             (case-lambda
                                               ((g$x$10878$tVUFT)
                                                (g$make-stx$8256$tVUFT
                                                  (g$stx-expr$8257$tVUFT
                                                    g$x$10878$tVUFT)
                                                  (g$stx-mark*$8258$tVUFT
                                                    g$x$10878$tVUFT)
                                                  '()
                                                  '())))
                                             g$exp-id*$10846$tVUFT)
                                           g$exp-lab*$10874$tVUFT)))))
                                   (g$vector-map$5705$tVUFT
                                     (case-lambda
                                       ((g$x$10879$tVUFT)
                                        ((case-lambda
                                           ((g$t$10880$tVUFT)
                                            (if g$t$10880$tVUFT
                                              g$t$10880$tVUFT
                                              (begin
                                                '#f
                                                (g$syntax-violation$8674$tVUFT
                                                  '#f
                                                  '"cannot find module export"
                                                  g$x$10879$tVUFT)))))
                                         (g$id->label$8296$tVUFT
                                           (g$make-stx$8256$tVUFT
                                             (g$id->sym$8284$tVUFT
                                               g$x$10879$tVUFT)
                                             (g$stx-mark*$8258$tVUFT
                                               g$x$10879$tVUFT)
                                             (list g$rib$10848$tVUFT)
                                             '())))))
                                     g$exp-id*$10846$tVUFT)
                                   (cons
                                     g$e*$10873$tVUFT
                                     g$mod**$10868$tVUFT))))
                               g$_exp*$10865$tVUFT
                               g$kwd*$10864$tVUFT
                               g$mod**$10863$tVUFT
                               g$rhs*$10862$tVUFT
                               g$lex*$10861$tVUFT
                               g$mr$10860$tVUFT
                               g$r$10859$tVUFT
                               g$e*$10858$tVUFT))))))
                      (g$map$5157$tVUFT
                        (case-lambda
                          ((g$x$10881$tVUFT)
                           (g$add-subst$8273$tVUFT
                             g$rib$10848$tVUFT
                             g$x$10881$tVUFT)))
                        (g$syntax->list$8282$tVUFT g$e*$10845$tVUFT)))))
                  (g$make-empty-rib$8243$tVUFT))))
              g$e*$10844$tVUFT
              g$exp-id*$10843$tVUFT
              g$name$10842$tVUFT)))))))
   (g$chi-body*$8606$tVUFT
     g$chi-body*$12124$tVUFT
     (case-lambda
       ((g$e*$10882$tVUFT
          g$r$10883$tVUFT
          g$mr$10884$tVUFT
          g$lex*$10885$tVUFT
          g$rhs*$10886$tVUFT
          g$mod**$10887$tVUFT
          g$kwd*$10888$tVUFT
          g$exp*$10889$tVUFT
          g$rib$10890$tVUFT
          g$mix?$10891$tVUFT
          g$sd?$10892$tVUFT)
        (if (null? g$e*$10882$tVUFT)
          (values
            g$e*$10882$tVUFT
            g$r$10883$tVUFT
            g$mr$10884$tVUFT
            g$lex*$10885$tVUFT
            g$rhs*$10886$tVUFT
            g$mod**$10887$tVUFT
            g$kwd*$10888$tVUFT
            g$exp*$10889$tVUFT)
          ((case-lambda
             ((g$e$10893$tVUFT)
              (call-with-values
                (case-lambda
                  (()
                   (g$syntax-type$8303$tVUFT g$e$10893$tVUFT g$r$10883$tVUFT)))
                (case-lambda
                  ((g$type$10897$tVUFT g$value$10898$tVUFT g$kwd$10899$tVUFT)
                   ((case-lambda
                      ((g$kwd$10900$tVUFT
                         g$value$10901$tVUFT
                         g$type$10902$tVUFT)
                       ((case-lambda
                          ((g$kwd*$10903$tVUFT)
                           ((case-lambda
                              ((g$t$10904$tVUFT)
                               (if (g$memv$5150$tVUFT g$t$10904$tVUFT '(define))
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$8502$tVUFT
                                        g$e$10893$tVUFT)))
                                   (case-lambda
                                     ((g$id$10907$tVUFT g$rhs$10908$tVUFT)
                                      ((case-lambda
                                         ((g$rhs$10909$tVUFT g$id$10910$tVUFT)
                                          (begin
                                            (if (g$bound-id-member?$8290$tVUFT
                                                  g$id$10910$tVUFT
                                                  g$kwd*$10903$tVUFT)
                                              (g$syntax-violation$8674$tVUFT
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$10893$tVUFT)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$8226$tVUFT
                                                   g$id$10910$tVUFT
                                                   g$rib$10890$tVUFT
                                                   g$sd?$10892$tVUFT)))
                                              (case-lambda
                                                ((g$lab$10913$tVUFT
                                                   g$lex$10914$tVUFT)
                                                 ((case-lambda
                                                    ((g$lex$10915$tVUFT
                                                       g$lab$10916$tVUFT)
                                                     (begin
                                                       (g$extend-rib!$8246$tVUFT
                                                         g$rib$10890$tVUFT
                                                         g$id$10910$tVUFT
                                                         g$lab$10916$tVUFT
                                                         g$sd?$10892$tVUFT)
                                                       (g$chi-body*$8606$tVUFT
                                                         (cdr g$e*$10882$tVUFT)
                                                         (g$add-lexical$8509$tVUFT
                                                           g$lab$10916$tVUFT
                                                           g$lex$10915$tVUFT
                                                           g$r$10883$tVUFT)
                                                         g$mr$10884$tVUFT
                                                         (cons
                                                           g$lex$10915$tVUFT
                                                           g$lex*$10885$tVUFT)
                                                         (cons
                                                           g$rhs$10909$tVUFT
                                                           g$rhs*$10886$tVUFT)
                                                         g$mod**$10887$tVUFT
                                                         g$kwd*$10903$tVUFT
                                                         g$exp*$10889$tVUFT
                                                         g$rib$10890$tVUFT
                                                         g$mix?$10891$tVUFT
                                                         g$sd?$10892$tVUFT))))
                                                  g$lex$10914$tVUFT
                                                  g$lab$10913$tVUFT)))))))
                                       g$rhs$10908$tVUFT
                                       g$id$10907$tVUFT))))
                                 (if (g$memv$5150$tVUFT
                                       g$t$10904$tVUFT
                                       '(define-syntax))
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$8503$tVUFT
                                          g$e$10893$tVUFT)))
                                     (case-lambda
                                       ((g$id$10919$tVUFT g$rhs$10920$tVUFT)
                                        ((case-lambda
                                           ((g$rhs$10921$tVUFT g$id$10922$tVUFT)
                                            (begin
                                              (if (g$bound-id-member?$8290$tVUFT
                                                    g$id$10922$tVUFT
                                                    g$kwd*$10903$tVUFT)
                                                (g$syntax-violation$8674$tVUFT
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$10893$tVUFT)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$10923$tVUFT)
                                                  ((case-lambda
                                                     ((g$expanded-rhs$10924$tVUFT)
                                                      (begin
                                                        (g$extend-rib!$8246$tVUFT
                                                          g$rib$10890$tVUFT
                                                          g$id$10922$tVUFT
                                                          g$lab$10923$tVUFT
                                                          g$sd?$10892$tVUFT)
                                                        ((case-lambda
                                                           ((g$b$10925$tVUFT)
                                                            (g$chi-body*$8606$tVUFT
                                                              (cdr g$e*$10882$tVUFT)
                                                              (cons
                                                                (cons
                                                                  g$lab$10923$tVUFT
                                                                  g$b$10925$tVUFT)
                                                                g$r$10883$tVUFT)
                                                              (cons
                                                                (cons
                                                                  g$lab$10923$tVUFT
                                                                  g$b$10925$tVUFT)
                                                                g$mr$10884$tVUFT)
                                                              g$lex*$10885$tVUFT
                                                              g$rhs*$10886$tVUFT
                                                              g$mod**$10887$tVUFT
                                                              g$kwd*$10903$tVUFT
                                                              g$exp*$10889$tVUFT
                                                              g$rib$10890$tVUFT
                                                              g$mix?$10891$tVUFT
                                                              g$sd?$10892$tVUFT)))
                                                         (g$make-eval-transformer$8316$tVUFT
                                                           g$expanded-rhs$10924$tVUFT)))))
                                                   (g$expand-transformer$8607$tVUFT
                                                     g$rhs$10921$tVUFT
                                                     g$mr$10884$tVUFT))))
                                               (g$gen-define-label$8227$tVUFT
                                                 g$id$10922$tVUFT
                                                 g$rib$10890$tVUFT
                                                 g$sd?$10892$tVUFT)))))
                                         g$rhs$10920$tVUFT
                                         g$id$10919$tVUFT))))
                                   (if (g$memv$5150$tVUFT
                                         g$t$10904$tVUFT
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$10926$tVUFT)
                                         ((case-lambda
                                            ((g$ls/false$10927$tVUFT)
                                             (if (if g$ls/false$10927$tVUFT
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$10928$tVUFT
                                                            g$xrhs*$10929$tVUFT
                                                            g$xbody*$10930$tVUFT)
                                                          (if (not (g$valid-bound-ids?$8288$tVUFT
                                                                     g$xlhs*$10928$tVUFT))
                                                            (g$syntax-violation$8674$tVUFT
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$10893$tVUFT)
                                                            (void))))
                                                       g$ls/false$10927$tVUFT))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$10931$tVUFT
                                                      g$xrhs*$10932$tVUFT
                                                      g$xbody*$10933$tVUFT)
                                                    ((case-lambda
                                                       ((g$xlab*$10934$tVUFT)
                                                        ((case-lambda
                                                           ((g$xrib$10935$tVUFT)
                                                            ((case-lambda
                                                               ((g$xb*$10936$tVUFT)
                                                                (g$chi-body*$8606$tVUFT
                                                                  (append
                                                                    (g$map$5157$tVUFT
                                                                      (case-lambda
                                                                        ((g$x$10937$tVUFT)
                                                                         (g$add-subst$8273$tVUFT
                                                                           g$xrib$10935$tVUFT
                                                                           g$x$10937$tVUFT)))
                                                                      g$xbody*$10933$tVUFT)
                                                                    (cdr g$e*$10882$tVUFT))
                                                                  (append
                                                                    (g$map$5157$tVUFT
                                                                      cons
                                                                      g$xlab*$10934$tVUFT
                                                                      g$xb*$10936$tVUFT)
                                                                    g$r$10883$tVUFT)
                                                                  (append
                                                                    (g$map$5157$tVUFT
                                                                      cons
                                                                      g$xlab*$10934$tVUFT
                                                                      g$xb*$10936$tVUFT)
                                                                    g$mr$10884$tVUFT)
                                                                  g$lex*$10885$tVUFT
                                                                  g$rhs*$10886$tVUFT
                                                                  g$mod**$10887$tVUFT
                                                                  g$kwd*$10903$tVUFT
                                                                  g$exp*$10889$tVUFT
                                                                  g$rib$10890$tVUFT
                                                                  g$mix?$10891$tVUFT
                                                                  g$sd?$10892$tVUFT)))
                                                             (g$map$5157$tVUFT
                                                               (case-lambda
                                                                 ((g$x$10938$tVUFT)
                                                                  (g$make-eval-transformer$8316$tVUFT
                                                                    (g$expand-transformer$8607$tVUFT
                                                                      (if (eq? g$type$10902$tVUFT
                                                                               'let-syntax)
                                                                        g$x$10938$tVUFT
                                                                        (g$add-subst$8273$tVUFT
                                                                          g$xrib$10935$tVUFT
                                                                          g$x$10938$tVUFT))
                                                                      g$mr$10884$tVUFT))))
                                                               g$xrhs*$10932$tVUFT))))
                                                         (g$make-full-rib$8251$tVUFT
                                                           g$xlhs*$10931$tVUFT
                                                           g$xlab*$10934$tVUFT))))
                                                     (g$map$5157$tVUFT
                                                       g$gen-label$8224$tVUFT
                                                       g$xlhs*$10931$tVUFT))))
                                                 g$ls/false$10927$tVUFT)
                                               (g$syntax-violation$8674$tVUFT
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$10926$tVUFT))))
                                          (g$syntax-dispatch$8562$tVUFT
                                            g$t$10926$tVUFT
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$10893$tVUFT)
                                     (if (g$memv$5150$tVUFT
                                           g$t$10904$tVUFT
                                           '(begin))
                                       ((case-lambda
                                          ((g$t$10939$tVUFT)
                                           ((case-lambda
                                              ((g$ls/false$10940$tVUFT)
                                               (if g$ls/false$10940$tVUFT
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$10941$tVUFT)
                                                      (g$chi-body*$8606$tVUFT
                                                        (append
                                                          g$x*$10941$tVUFT
                                                          (cdr g$e*$10882$tVUFT))
                                                        g$r$10883$tVUFT
                                                        g$mr$10884$tVUFT
                                                        g$lex*$10885$tVUFT
                                                        g$rhs*$10886$tVUFT
                                                        g$mod**$10887$tVUFT
                                                        g$kwd*$10903$tVUFT
                                                        g$exp*$10889$tVUFT
                                                        g$rib$10890$tVUFT
                                                        g$mix?$10891$tVUFT
                                                        g$sd?$10892$tVUFT)))
                                                   g$ls/false$10940$tVUFT)
                                                 (g$syntax-violation$8674$tVUFT
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$10939$tVUFT))))
                                            (g$syntax-dispatch$8562$tVUFT
                                              g$t$10939$tVUFT
                                              '(_ . each-any)))))
                                        g$e$10893$tVUFT)
                                       (if (g$memv$5150$tVUFT
                                             g$t$10904$tVUFT
                                             '(global-macro global-macro!))
                                         (g$chi-body*$8606$tVUFT
                                           (cons
                                             (g$add-subst$8273$tVUFT
                                               g$rib$10890$tVUFT
                                               (g$chi-global-macro$8577$tVUFT
                                                 g$value$10901$tVUFT
                                                 g$e$10893$tVUFT
                                                 g$r$10883$tVUFT))
                                             (cdr g$e*$10882$tVUFT))
                                           g$r$10883$tVUFT
                                           g$mr$10884$tVUFT
                                           g$lex*$10885$tVUFT
                                           g$rhs*$10886$tVUFT
                                           g$mod**$10887$tVUFT
                                           g$kwd*$10903$tVUFT
                                           g$exp*$10889$tVUFT
                                           g$rib$10890$tVUFT
                                           g$mix?$10891$tVUFT
                                           g$sd?$10892$tVUFT)
                                         (if (g$memv$5150$tVUFT
                                               g$t$10904$tVUFT
                                               '(local-macro local-macro!))
                                           (g$chi-body*$8606$tVUFT
                                             (cons
                                               (g$add-subst$8273$tVUFT
                                                 g$rib$10890$tVUFT
                                                 (g$chi-local-macro$8576$tVUFT
                                                   g$value$10901$tVUFT
                                                   g$e$10893$tVUFT
                                                   g$r$10883$tVUFT))
                                               (cdr g$e*$10882$tVUFT))
                                             g$r$10883$tVUFT
                                             g$mr$10884$tVUFT
                                             g$lex*$10885$tVUFT
                                             g$rhs*$10886$tVUFT
                                             g$mod**$10887$tVUFT
                                             g$kwd*$10903$tVUFT
                                             g$exp*$10889$tVUFT
                                             g$rib$10890$tVUFT
                                             g$mix?$10891$tVUFT
                                             g$sd?$10892$tVUFT)
                                           (if (g$memv$5150$tVUFT
                                                 g$t$10904$tVUFT
                                                 '(macro macro!))
                                             (g$chi-body*$8606$tVUFT
                                               (cons
                                                 (g$add-subst$8273$tVUFT
                                                   g$rib$10890$tVUFT
                                                   (g$chi-macro$8575$tVUFT
                                                     g$value$10901$tVUFT
                                                     g$e$10893$tVUFT
                                                     g$r$10883$tVUFT))
                                                 (cdr g$e*$10882$tVUFT))
                                               g$r$10883$tVUFT
                                               g$mr$10884$tVUFT
                                               g$lex*$10885$tVUFT
                                               g$rhs*$10886$tVUFT
                                               g$mod**$10887$tVUFT
                                               g$kwd*$10903$tVUFT
                                               g$exp*$10889$tVUFT
                                               g$rib$10890$tVUFT
                                               g$mix?$10891$tVUFT
                                               g$sd?$10892$tVUFT)
                                             (if (g$memv$5150$tVUFT
                                                   g$t$10904$tVUFT
                                                   '(module))
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$8605$tVUFT
                                                      g$e$10893$tVUFT
                                                      g$r$10883$tVUFT
                                                      g$mr$10884$tVUFT
                                                      g$lex*$10885$tVUFT
                                                      g$rhs*$10886$tVUFT
                                                      g$mod**$10887$tVUFT
                                                      g$kwd*$10903$tVUFT)))
                                                 (case-lambda
                                                   ((g$lex*$10950$tVUFT
                                                      g$rhs*$10951$tVUFT
                                                      g$m-exp-id*$10952$tVUFT
                                                      g$m-exp-lab*$10953$tVUFT
                                                      g$r$10954$tVUFT
                                                      g$mr$10955$tVUFT
                                                      g$mod**$10956$tVUFT
                                                      g$kwd*$10957$tVUFT)
                                                    ((case-lambda
                                                       ((g$kwd*$10958$tVUFT
                                                          g$mod**$10959$tVUFT
                                                          g$mr$10960$tVUFT
                                                          g$r$10961$tVUFT
                                                          g$m-exp-lab*$10962$tVUFT
                                                          g$m-exp-id*$10963$tVUFT
                                                          g$rhs*$10964$tVUFT
                                                          g$lex*$10965$tVUFT)
                                                        (begin
                                                          (g$vector-for-each$5706$tVUFT
                                                            (case-lambda
                                                              ((g$id$10966$tVUFT
                                                                 g$lab$10967$tVUFT)
                                                               (g$extend-rib!$8246$tVUFT
                                                                 g$rib$10890$tVUFT
                                                                 g$id$10966$tVUFT
                                                                 g$lab$10967$tVUFT
                                                                 g$sd?$10892$tVUFT)))
                                                            g$m-exp-id*$10963$tVUFT
                                                            g$m-exp-lab*$10962$tVUFT)
                                                          (g$chi-body*$8606$tVUFT
                                                            (cdr g$e*$10882$tVUFT)
                                                            g$r$10961$tVUFT
                                                            g$mr$10960$tVUFT
                                                            g$lex*$10965$tVUFT
                                                            g$rhs*$10964$tVUFT
                                                            g$mod**$10959$tVUFT
                                                            g$kwd*$10958$tVUFT
                                                            g$exp*$10889$tVUFT
                                                            g$rib$10890$tVUFT
                                                            g$mix?$10891$tVUFT
                                                            g$sd?$10892$tVUFT))))
                                                     g$kwd*$10957$tVUFT
                                                     g$mod**$10956$tVUFT
                                                     g$mr$10955$tVUFT
                                                     g$r$10954$tVUFT
                                                     g$m-exp-lab*$10953$tVUFT
                                                     g$m-exp-id*$10952$tVUFT
                                                     g$rhs*$10951$tVUFT
                                                     g$lex*$10950$tVUFT))))
                                               (if (g$memv$5150$tVUFT
                                                     g$t$10904$tVUFT
                                                     '(library))
                                                 (begin
                                                   (g$library-expander$8658$tVUFT
                                                     (g$stx->datum$8294$tVUFT
                                                       g$e$10893$tVUFT))
                                                   (g$chi-body*$8606$tVUFT
                                                     (cdr g$e*$10882$tVUFT)
                                                     g$r$10883$tVUFT
                                                     g$mr$10884$tVUFT
                                                     g$lex*$10885$tVUFT
                                                     g$rhs*$10886$tVUFT
                                                     g$mod**$10887$tVUFT
                                                     g$kwd*$10903$tVUFT
                                                     g$exp*$10889$tVUFT
                                                     g$rib$10890$tVUFT
                                                     g$mix?$10891$tVUFT
                                                     g$sd?$10892$tVUFT))
                                                 (if (g$memv$5150$tVUFT
                                                       g$t$10904$tVUFT
                                                       '(export))
                                                   ((case-lambda
                                                      ((g$t$10968$tVUFT)
                                                       ((case-lambda
                                                          ((g$ls/false$10969$tVUFT)
                                                           (if g$ls/false$10969$tVUFT
                                                             (apply
                                                               (case-lambda
                                                                 ((g$exp-decl*$10970$tVUFT)
                                                                  (g$chi-body*$8606$tVUFT
                                                                    (cdr g$e*$10882$tVUFT)
                                                                    g$r$10883$tVUFT
                                                                    g$mr$10884$tVUFT
                                                                    g$lex*$10885$tVUFT
                                                                    g$rhs*$10886$tVUFT
                                                                    g$mod**$10887$tVUFT
                                                                    g$kwd*$10903$tVUFT
                                                                    (append
                                                                      g$exp-decl*$10970$tVUFT
                                                                      g$exp*$10889$tVUFT)
                                                                    g$rib$10890$tVUFT
                                                                    g$mix?$10891$tVUFT
                                                                    g$sd?$10892$tVUFT)))
                                                               g$ls/false$10969$tVUFT)
                                                             (g$syntax-violation$8674$tVUFT
                                                               '#f
                                                               '"invalid syntax"
                                                               g$t$10968$tVUFT))))
                                                        (g$syntax-dispatch$8562$tVUFT
                                                          g$t$10968$tVUFT
                                                          '(_ . each-any)))))
                                                    g$e$10893$tVUFT)
                                                   (if (g$memv$5150$tVUFT
                                                         g$t$10904$tVUFT
                                                         '(import))
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$10971$tVUFT
                                                                     (case-lambda
                                                                       ((g$e$11013$tVUFT)
                                                                        ((case-lambda
                                                                           ((g$t$11014$tVUFT)
                                                                            ((case-lambda
                                                                               ((g$ls/false$11015$tVUFT)
                                                                                (if (if g$ls/false$11015$tVUFT
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$11016$tVUFT)
                                                                                             (g$id?$8283$tVUFT
                                                                                               g$id$11016$tVUFT)))
                                                                                          g$ls/false$11015$tVUFT))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$11017$tVUFT)
                                                                                       '#t))
                                                                                    g$ls/false$11015$tVUFT)
                                                                                  ((case-lambda
                                                                                     ((g$t$11018$tVUFT)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$11019$tVUFT)
                                                                                          (if g$ls/false$11019$tVUFT
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$11020$tVUFT)
                                                                                                 '#f))
                                                                                              g$ls/false$11019$tVUFT)
                                                                                            ((case-lambda
                                                                                               ((g$t$11021$tVUFT)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$11022$tVUFT)
                                                                                                    (if g$ls/false$11022$tVUFT
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$8674$tVUFT
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$11013$tVUFT)))
                                                                                                        g$ls/false$11022$tVUFT)
                                                                                                      (g$syntax-violation$8674$tVUFT
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$11021$tVUFT))))
                                                                                                 (g$syntax-dispatch$8562$tVUFT
                                                                                                   g$t$11021$tVUFT
                                                                                                   '_))))
                                                                                             g$t$11018$tVUFT))))
                                                                                       (g$syntax-dispatch$8562$tVUFT
                                                                                         g$t$11018$tVUFT
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$11014$tVUFT))))
                                                                             (g$syntax-dispatch$8562$tVUFT
                                                                               g$t$11014$tVUFT
                                                                               '(_ any)))))
                                                                         g$e$11013$tVUFT))))
                                                                   (g$module-import$10972$tVUFT
                                                                     (case-lambda
                                                                       ((g$e$10996$tVUFT
                                                                          g$r$10997$tVUFT)
                                                                        ((case-lambda
                                                                           ((g$t$10998$tVUFT)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10999$tVUFT)
                                                                                (if (if g$ls/false$10999$tVUFT
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$11000$tVUFT)
                                                                                             (g$id?$8283$tVUFT
                                                                                               g$id$11000$tVUFT)))
                                                                                          g$ls/false$10999$tVUFT))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$11001$tVUFT)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$8303$tVUFT
                                                                                              g$id$11001$tVUFT
                                                                                              g$r$10997$tVUFT)))
                                                                                         (case-lambda
                                                                                           ((g$type$11005$tVUFT
                                                                                              g$value$11006$tVUFT
                                                                                              g$kwd$11007$tVUFT)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$11008$tVUFT
                                                                                                  g$value$11009$tVUFT
                                                                                                  g$type$11010$tVUFT)
                                                                                                ((case-lambda
                                                                                                   ((g$t$11011$tVUFT)
                                                                                                    (if (g$memv$5150$tVUFT
                                                                                                          g$t$11011$tVUFT
                                                                                                          '($module))
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$11012$tVUFT)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$8604$tVUFT
                                                                                                              g$iface$11012$tVUFT
                                                                                                              g$id$11001$tVUFT)
                                                                                                            (g$module-interface-exp-lab-vec$8600$tVUFT
                                                                                                              g$iface$11012$tVUFT))))
                                                                                                       g$value$11009$tVUFT)
                                                                                                      (g$syntax-violation$8674$tVUFT
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$10996$tVUFT))))
                                                                                                 g$type$11010$tVUFT)))
                                                                                             g$kwd$11007$tVUFT
                                                                                             g$value$11006$tVUFT
                                                                                             g$type$11005$tVUFT))))))
                                                                                    g$ls/false$10999$tVUFT)
                                                                                  (g$syntax-violation$8674$tVUFT
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$10998$tVUFT))))
                                                                             (g$syntax-dispatch$8562$tVUFT
                                                                               g$t$10998$tVUFT
                                                                               '(_ any)))))
                                                                         g$e$10996$tVUFT))))
                                                                   (g$library-import$10973$tVUFT
                                                                     (case-lambda
                                                                       ((g$e$10982$tVUFT)
                                                                        ((case-lambda
                                                                           ((g$t$10983$tVUFT)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10984$tVUFT)
                                                                                (if g$ls/false$10984$tVUFT
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$10985$tVUFT
                                                                                         g$imp*$10986$tVUFT)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$8611$tVUFT
                                                                                              (g$syntax->datum$8677$tVUFT
                                                                                                g$imp*$10986$tVUFT))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$10989$tVUFT
                                                                                              g$subst-labels$10990$tVUFT)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$10991$tVUFT
                                                                                                  g$subst-names$10992$tVUFT)
                                                                                                (values
                                                                                                  (g$vector-map$5705$tVUFT
                                                                                                    (case-lambda
                                                                                                      ((g$name$10993$tVUFT)
                                                                                                       (g$datum->stx$8266$tVUFT
                                                                                                         g$ctxt$10985$tVUFT
                                                                                                         g$name$10993$tVUFT)))
                                                                                                    g$subst-names$10992$tVUFT)
                                                                                                  g$subst-labels$10991$tVUFT)))
                                                                                             g$subst-labels$10990$tVUFT
                                                                                             g$subst-names$10989$tVUFT))))))
                                                                                    g$ls/false$10984$tVUFT)
                                                                                  ((case-lambda
                                                                                     ((g$t$10994$tVUFT)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10995$tVUFT)
                                                                                          (if g$ls/false$10995$tVUFT
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8674$tVUFT
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$10982$tVUFT)))
                                                                                              g$ls/false$10995$tVUFT)
                                                                                            (g$syntax-violation$8674$tVUFT
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$10994$tVUFT))))
                                                                                       (g$syntax-dispatch$8562$tVUFT
                                                                                         g$t$10994$tVUFT
                                                                                         '_))))
                                                                                   g$t$10983$tVUFT))))
                                                                             (g$syntax-dispatch$8562$tVUFT
                                                                               g$t$10983$tVUFT
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$10982$tVUFT)))))
                                                           (begin
                                                             (call-with-values
                                                               (case-lambda
                                                                 (()
                                                                  (if (g$module-import?$10971$tVUFT
                                                                        g$e$10893$tVUFT)
                                                                    (g$module-import$10972$tVUFT
                                                                      g$e$10893$tVUFT
                                                                      g$r$10883$tVUFT)
                                                                    (g$library-import$10973$tVUFT
                                                                      g$e$10893$tVUFT))))
                                                               (case-lambda
                                                                 ((g$id*$10976$tVUFT
                                                                    g$lab*$10977$tVUFT)
                                                                  ((case-lambda
                                                                     ((g$lab*$10978$tVUFT
                                                                        g$id*$10979$tVUFT)
                                                                      (g$vector-for-each$5706$tVUFT
                                                                        (case-lambda
                                                                          ((g$id$10980$tVUFT
                                                                             g$lab$10981$tVUFT)
                                                                           (g$extend-rib!$8246$tVUFT
                                                                             g$rib$10890$tVUFT
                                                                             g$id$10980$tVUFT
                                                                             g$lab$10981$tVUFT
                                                                             g$sd?$10892$tVUFT)))
                                                                        g$id*$10979$tVUFT
                                                                        g$lab*$10978$tVUFT)))
                                                                   g$lab*$10977$tVUFT
                                                                   g$id*$10976$tVUFT))))
                                                             (g$chi-body*$8606$tVUFT
                                                               (cdr g$e*$10882$tVUFT)
                                                               g$r$10883$tVUFT
                                                               g$mr$10884$tVUFT
                                                               g$lex*$10885$tVUFT
                                                               g$rhs*$10886$tVUFT
                                                               g$mod**$10887$tVUFT
                                                               g$kwd*$10903$tVUFT
                                                               g$exp*$10889$tVUFT
                                                               g$rib$10890$tVUFT
                                                               g$mix?$10891$tVUFT
                                                               g$sd?$10892$tVUFT))))))
                                                     (if g$mix?$10891$tVUFT
                                                       (g$chi-body*$8606$tVUFT
                                                         (cdr g$e*$10882$tVUFT)
                                                         g$r$10883$tVUFT
                                                         g$mr$10884$tVUFT
                                                         (cons
                                                           (g$gen-lexical$8222$tVUFT
                                                             'dummy)
                                                           g$lex*$10885$tVUFT)
                                                         (cons
                                                           (cons
                                                             'top-expr
                                                             g$e$10893$tVUFT)
                                                           g$rhs*$10886$tVUFT)
                                                         g$mod**$10887$tVUFT
                                                         g$kwd*$10903$tVUFT
                                                         g$exp*$10889$tVUFT
                                                         g$rib$10890$tVUFT
                                                         '#t
                                                         g$sd?$10892$tVUFT)
                                                       (values
                                                         g$e*$10882$tVUFT
                                                         g$r$10883$tVUFT
                                                         g$mr$10884$tVUFT
                                                         g$lex*$10885$tVUFT
                                                         g$rhs*$10886$tVUFT
                                                         g$mod**$10887$tVUFT
                                                         g$kwd*$10903$tVUFT
                                                         g$exp*$10889$tVUFT)))))))))))))))
                            g$type$10902$tVUFT)))
                        (if (g$id?$8283$tVUFT g$kwd$10900$tVUFT)
                          (cons g$kwd$10900$tVUFT g$kwd*$10888$tVUFT)
                          g$kwd*$10888$tVUFT))))
                    g$kwd$10899$tVUFT
                    g$value$10898$tVUFT
                    g$type$10897$tVUFT))))))
           (car g$e*$10882$tVUFT))))))
   (g$expand-transformer$8607$tVUFT
     g$expand-transformer$12125$tVUFT
     (case-lambda
       ((g$expr$11023$tVUFT g$r$11024$tVUFT)
        ((case-lambda
           ((g$rtc$11025$tVUFT)
            ((case-lambda
               ((g$expanded-rhs$11026$tVUFT)
                (begin
                  (g$for-each$5158$tVUFT
                    ((case-lambda
                       ((g$mark-visit$11027$tVUFT)
                        (case-lambda
                          ((g$x$11028$tVUFT)
                           (begin
                             (g$invoke-library$8093$tVUFT g$x$11028$tVUFT)
                             (g$mark-visit$11027$tVUFT g$x$11028$tVUFT))))))
                     (g$vis-collector$8615$tVUFT))
                    (g$rtc$11025$tVUFT))
                  g$expanded-rhs$11026$tVUFT)))
             ((case-lambda
                ((g$inv-collector$11033$tVUFT
                   g$vis-collector$11034$tVUFT
                   g$inv-collector$11035$tVUFT
                   g$vis-collector$11036$tVUFT)
                 ((case-lambda
                    ((g$swap$11037$tVUFT)
                     (dynamic-wind
                       g$swap$11037$tVUFT
                       (case-lambda
                         (()
                          (g$chi-expr$8580$tVUFT
                            g$expr$11023$tVUFT
                            g$r$11024$tVUFT
                            g$r$11024$tVUFT)))
                       g$swap$11037$tVUFT)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$11038$tVUFT)
                           (begin
                             (g$inv-collector$11033$tVUFT
                               g$inv-collector$11035$tVUFT)
                             (set! g$inv-collector$11035$tVUFT
                               g$t$11038$tVUFT))))
                        (g$inv-collector$11033$tVUFT))
                       ((case-lambda
                          ((g$t$11039$tVUFT)
                           (begin
                             (g$vis-collector$11034$tVUFT
                               g$vis-collector$11036$tVUFT)
                             (set! g$vis-collector$11036$tVUFT
                               g$t$11039$tVUFT))))
                        (g$vis-collector$11034$tVUFT))))))))
              g$inv-collector$8614$tVUFT
              g$vis-collector$8615$tVUFT
              g$rtc$11025$tVUFT
              (case-lambda ((g$x$11040$tVUFT) (values)))))))
         (g$make-collector$8613$tVUFT)))))
   (g$parse-exports$8608$tVUFT
     g$parse-exports$12126$tVUFT
     (case-lambda
       ((g$exp*$11041$tVUFT)
        ((letrec ((g$f$11042$tVUFT
                    (case-lambda
                      ((g$exp*$11043$tVUFT
                         g$int*$11044$tVUFT
                         g$ext*$11045$tVUFT)
                       (if (null? g$exp*$11043$tVUFT)
                         (begin
                           (if (not (g$valid-bound-ids?$8288$tVUFT
                                      g$ext*$11045$tVUFT))
                             (g$syntax-violation$8674$tVUFT
                               'export
                               '"invalid exports"
                               (g$find-dups$8590$tVUFT g$ext*$11045$tVUFT))
                             (void))
                           (values
                             (g$map$5157$tVUFT
                               g$syntax->datum$8677$tVUFT
                               g$ext*$11045$tVUFT)
                             g$int*$11044$tVUFT))
                         ((case-lambda
                            ((g$t$11046$tVUFT)
                             ((case-lambda
                                ((g$ls/false$11047$tVUFT)
                                 (if g$ls/false$11047$tVUFT
                                   (apply
                                     (case-lambda
                                       ((g$rename$11048$tVUFT
                                          g$i*$11049$tVUFT
                                          g$e*$11050$tVUFT)
                                        (begin
                                          (if (not (if (eq? (g$syntax->datum$8677$tVUFT
                                                              g$rename$11048$tVUFT)
                                                            'rename)
                                                     (if (g$for-all$5155$tVUFT
                                                           g$id?$8283$tVUFT
                                                           g$i*$11049$tVUFT)
                                                       (begin
                                                         '#f
                                                         (g$for-all$5155$tVUFT
                                                           g$id?$8283$tVUFT
                                                           g$e*$11050$tVUFT))
                                                       '#f)
                                                     '#f))
                                            (g$syntax-violation$8674$tVUFT
                                              'export
                                              '"invalid export specifier"
                                              (car g$exp*$11043$tVUFT))
                                            (void))
                                          (g$f$11042$tVUFT
                                            (cdr g$exp*$11043$tVUFT)
                                            (append
                                              g$i*$11049$tVUFT
                                              g$int*$11044$tVUFT)
                                            (append
                                              g$e*$11050$tVUFT
                                              g$ext*$11045$tVUFT)))))
                                     g$ls/false$11047$tVUFT)
                                   ((case-lambda
                                      ((g$t$11051$tVUFT)
                                       ((case-lambda
                                          ((g$ls/false$11052$tVUFT)
                                           (if g$ls/false$11052$tVUFT
                                             (apply
                                               (case-lambda
                                                 ((g$ie$11053$tVUFT)
                                                  (begin
                                                    (if (not (g$id?$8283$tVUFT
                                                               g$ie$11053$tVUFT))
                                                      (g$syntax-violation$8674$tVUFT
                                                        'export
                                                        '"invalid export"
                                                        g$ie$11053$tVUFT)
                                                      (void))
                                                    (g$f$11042$tVUFT
                                                      (cdr g$exp*$11043$tVUFT)
                                                      (cons
                                                        g$ie$11053$tVUFT
                                                        g$int*$11044$tVUFT)
                                                      (cons
                                                        g$ie$11053$tVUFT
                                                        g$ext*$11045$tVUFT)))))
                                               g$ls/false$11052$tVUFT)
                                             (g$syntax-violation$8674$tVUFT
                                               '#f
                                               '"invalid syntax"
                                               g$t$11051$tVUFT))))
                                        (g$syntax-dispatch$8562$tVUFT
                                          g$t$11051$tVUFT
                                          'any))))
                                    g$t$11046$tVUFT))))
                              (g$syntax-dispatch$8562$tVUFT
                                g$t$11046$tVUFT
                                '(any . #(each (any any)))))))
                          (car g$exp*$11043$tVUFT)))))))
           g$f$11042$tVUFT)
         g$exp*$11041$tVUFT
         '()
         '()))))
   (g$parse-library-name$8609$tVUFT
     g$parse-library-name$12127$tVUFT
     (case-lambda
       ((g$spec$11054$tVUFT)
        (letrec* ((g$parse$11055$tVUFT
                    (case-lambda
                      ((g$x$11062$tVUFT)
                       ((case-lambda
                          ((g$t$11063$tVUFT)
                           ((case-lambda
                              ((g$ls/false$11064$tVUFT)
                               (if (if g$ls/false$11064$tVUFT
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$11065$tVUFT)
                                            (g$for-all$5155$tVUFT
                                              (case-lambda
                                                ((g$x$11066$tVUFT)
                                                 ((case-lambda
                                                    ((g$x$11067$tVUFT)
                                                     (if (integer?
                                                           g$x$11067$tVUFT)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$11067$tVUFT))
                                                       '#f)))
                                                  (g$syntax->datum$8677$tVUFT
                                                    g$x$11066$tVUFT))))
                                              g$v*$11065$tVUFT)))
                                         g$ls/false$11064$tVUFT))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$11068$tVUFT)
                                      (values
                                        '()
                                        (g$map$5157$tVUFT
                                          g$syntax->datum$8677$tVUFT
                                          g$v*$11068$tVUFT))))
                                   g$ls/false$11064$tVUFT)
                                 ((case-lambda
                                    ((g$t$11069$tVUFT)
                                     ((case-lambda
                                        ((g$ls/false$11070$tVUFT)
                                         (if (if g$ls/false$11070$tVUFT
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$11071$tVUFT
                                                        g$rest$11072$tVUFT)
                                                      (g$symbol?$5645$tVUFT
                                                        (g$syntax->datum$8677$tVUFT
                                                          g$x$11071$tVUFT))))
                                                   g$ls/false$11070$tVUFT))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$11073$tVUFT
                                                  g$rest$11074$tVUFT)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$11055$tVUFT
                                                       g$rest$11074$tVUFT)))
                                                  (case-lambda
                                                    ((g$x*$11077$tVUFT
                                                       g$v*$11078$tVUFT)
                                                     ((case-lambda
                                                        ((g$v*$11079$tVUFT
                                                           g$x*$11080$tVUFT)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$8677$tVUFT
                                                               g$x$11073$tVUFT)
                                                             g$x*$11080$tVUFT)
                                                           g$v*$11079$tVUFT)))
                                                      g$v*$11078$tVUFT
                                                      g$x*$11077$tVUFT))))))
                                             g$ls/false$11070$tVUFT)
                                           ((case-lambda
                                              ((g$t$11081$tVUFT)
                                               ((case-lambda
                                                  ((g$ls/false$11082$tVUFT)
                                                   (if g$ls/false$11082$tVUFT
                                                     (apply
                                                       (case-lambda
                                                         (() (values '() '())))
                                                       g$ls/false$11082$tVUFT)
                                                     ((case-lambda
                                                        ((g$t$11083$tVUFT)
                                                         ((case-lambda
                                                            ((g$ls/false$11084$tVUFT)
                                                             (if g$ls/false$11084$tVUFT
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$8674$tVUFT
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$11054$tVUFT)))
                                                                 g$ls/false$11084$tVUFT)
                                                               (g$syntax-violation$8674$tVUFT
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$11083$tVUFT))))
                                                          (g$syntax-dispatch$8562$tVUFT
                                                            g$t$11083$tVUFT
                                                            '_))))
                                                      g$t$11081$tVUFT))))
                                                (g$syntax-dispatch$8562$tVUFT
                                                  g$t$11081$tVUFT
                                                  '()))))
                                            g$t$11069$tVUFT))))
                                      (g$syntax-dispatch$8562$tVUFT
                                        g$t$11069$tVUFT
                                        '(any . any)))))
                                  g$t$11063$tVUFT))))
                            (g$syntax-dispatch$8562$tVUFT
                              g$t$11063$tVUFT
                              '(each-any)))))
                        g$x$11062$tVUFT)))))
          (call-with-values
            (case-lambda (() (g$parse$11055$tVUFT g$spec$11054$tVUFT)))
            (case-lambda
              ((g$name*$11058$tVUFT g$ver*$11059$tVUFT)
               ((case-lambda
                  ((g$ver*$11060$tVUFT g$name*$11061$tVUFT)
                   (begin
                     (if (null? g$name*$11061$tVUFT)
                       (g$syntax-violation$8674$tVUFT
                         '#f
                         '"empty library name"
                         g$spec$11054$tVUFT)
                       (void))
                     (values g$name*$11061$tVUFT g$ver*$11060$tVUFT))))
                g$ver*$11059$tVUFT
                g$name*$11058$tVUFT))))))))
   (g$parse-library$8610$tVUFT
     g$parse-library$12128$tVUFT
     (case-lambda
       ((g$e$11085$tVUFT)
        ((case-lambda
           ((g$t$11086$tVUFT)
            ((case-lambda
               ((g$ls/false$11087$tVUFT)
                (if (if g$ls/false$11087$tVUFT
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$11088$tVUFT
                               g$name*$11089$tVUFT
                               g$export$11090$tVUFT
                               g$exp*$11091$tVUFT
                               g$import$11092$tVUFT
                               g$imp*$11093$tVUFT
                               g$b*$11094$tVUFT)
                             (if (eq? (g$syntax->datum$8677$tVUFT
                                        g$export$11090$tVUFT)
                                      'export)
                               (if (eq? (g$syntax->datum$8677$tVUFT
                                          g$import$11092$tVUFT)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$8677$tVUFT
                                          g$library$11088$tVUFT)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$11087$tVUFT))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$11095$tVUFT
                         g$name*$11096$tVUFT
                         g$export$11097$tVUFT
                         g$exp*$11098$tVUFT
                         g$import$11099$tVUFT
                         g$imp*$11100$tVUFT
                         g$b*$11101$tVUFT)
                       (values
                         g$name*$11096$tVUFT
                         g$exp*$11098$tVUFT
                         g$imp*$11100$tVUFT
                         g$b*$11101$tVUFT)))
                    g$ls/false$11087$tVUFT)
                  ((case-lambda
                     ((g$t$11102$tVUFT)
                      ((case-lambda
                         ((g$ls/false$11103$tVUFT)
                          (if g$ls/false$11103$tVUFT
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$8674$tVUFT
                                   '#f
                                   '"malformed library"
                                   g$e$11085$tVUFT)))
                              g$ls/false$11103$tVUFT)
                            (g$syntax-violation$8674$tVUFT
                              '#f
                              '"invalid syntax"
                              g$t$11102$tVUFT))))
                       (g$syntax-dispatch$8562$tVUFT g$t$11102$tVUFT '_))))
                   g$t$11086$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$11086$tVUFT
               '(any each-any (any . each-any) (any . each-any) . each-any)))))
         g$e$11085$tVUFT))))
   (g$parse-import-spec*$8611$tVUFT
     g$parse-import-spec*$12129$tVUFT
     (case-lambda
       ((g$imp*$11104$tVUFT)
        (letrec* ((g$idsyn?$11105$tVUFT
                    (case-lambda
                      ((g$x$11365$tVUFT)
                       (g$symbol?$5645$tVUFT
                         (g$syntax->datum$8677$tVUFT g$x$11365$tVUFT)))))
                  (g$dup-error$11106$tVUFT
                    (case-lambda
                      ((g$name$11364$tVUFT)
                       (g$syntax-violation$8674$tVUFT
                         'import
                         '"two imports with different bindings"
                         g$name$11364$tVUFT))))
                  (g$merge-substs$11107$tVUFT
                    (case-lambda
                      ((g$s$11355$tVUFT g$subst$11356$tVUFT)
                       (letrec* ((g$insert-to-subst$11357$tVUFT
                                   (case-lambda
                                     ((g$a$11358$tVUFT g$subst$11359$tVUFT)
                                      ((case-lambda
                                         ((g$name$11360$tVUFT
                                            g$label$11361$tVUFT)
                                          ((case-lambda
                                             ((g$t$11362$tVUFT)
                                              (if g$t$11362$tVUFT
                                                ((case-lambda
                                                   ((g$x$11363$tVUFT)
                                                    (if (eq? (cdr g$x$11363$tVUFT)
                                                             g$label$11361$tVUFT)
                                                      g$subst$11359$tVUFT
                                                      (g$dup-error$11106$tVUFT
                                                        g$name$11360$tVUFT))))
                                                 g$t$11362$tVUFT)
                                                (cons
                                                  g$a$11358$tVUFT
                                                  g$subst$11359$tVUFT))))
                                           (g$assq$5145$tVUFT
                                             g$name$11360$tVUFT
                                             g$subst$11359$tVUFT))))
                                       (car g$a$11358$tVUFT)
                                       (cdr g$a$11358$tVUFT))))))
                         (if (null? g$s$11355$tVUFT)
                           g$subst$11356$tVUFT
                           (g$insert-to-subst$11357$tVUFT
                             (car g$s$11355$tVUFT)
                             (g$merge-substs$11107$tVUFT
                               (cdr g$s$11355$tVUFT)
                               g$subst$11356$tVUFT)))))))
                  (g$exclude*$11108$tVUFT
                    (case-lambda
                      ((g$sym*$11331$tVUFT g$subst$11332$tVUFT)
                       (letrec* ((g$exclude$11333$tVUFT
                                   (case-lambda
                                     ((g$sym$11346$tVUFT g$subst$11347$tVUFT)
                                      (if (null? g$subst$11347$tVUFT)
                                        (g$syntax-violation$8674$tVUFT
                                          'import
                                          '"cannot rename unbound identifier"
                                          g$sym$11346$tVUFT)
                                        (if (eq? g$sym$11346$tVUFT
                                                 (g$caar$5653$tVUFT
                                                   g$subst$11347$tVUFT))
                                          (values
                                            (g$cdar$5655$tVUFT
                                              g$subst$11347$tVUFT)
                                            (cdr g$subst$11347$tVUFT))
                                          ((case-lambda
                                             ((g$a$11348$tVUFT)
                                              (call-with-values
                                                (case-lambda
                                                  (()
                                                   (g$exclude$11333$tVUFT
                                                     g$sym$11346$tVUFT
                                                     (cdr g$subst$11347$tVUFT))))
                                                (case-lambda
                                                  ((g$old$11351$tVUFT
                                                     g$subst$11352$tVUFT)
                                                   ((case-lambda
                                                      ((g$subst$11353$tVUFT
                                                         g$old$11354$tVUFT)
                                                       (values
                                                         g$old$11354$tVUFT
                                                         (cons
                                                           g$a$11348$tVUFT
                                                           g$subst$11353$tVUFT))))
                                                    g$subst$11352$tVUFT
                                                    g$old$11351$tVUFT))))))
                                           (car g$subst$11347$tVUFT))))))))
                         (if (null? g$sym*$11331$tVUFT)
                           (values '() g$subst$11332$tVUFT)
                           (call-with-values
                             (case-lambda
                               (()
                                (g$exclude$11333$tVUFT
                                  (car g$sym*$11331$tVUFT)
                                  g$subst$11332$tVUFT)))
                             (case-lambda
                               ((g$old$11336$tVUFT g$subst$11337$tVUFT)
                                ((case-lambda
                                   ((g$subst$11338$tVUFT g$old$11339$tVUFT)
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$exclude*$11108$tVUFT
                                           (cdr g$sym*$11331$tVUFT)
                                           g$subst$11338$tVUFT)))
                                      (case-lambda
                                        ((g$old*$11342$tVUFT
                                           g$subst$11343$tVUFT)
                                         ((case-lambda
                                            ((g$subst$11344$tVUFT
                                               g$old*$11345$tVUFT)
                                             (values
                                               (cons
                                                 g$old$11339$tVUFT
                                                 g$old*$11345$tVUFT)
                                               g$subst$11344$tVUFT)))
                                          g$subst$11343$tVUFT
                                          g$old*$11342$tVUFT))))))
                                 g$subst$11337$tVUFT
                                 g$old$11336$tVUFT)))))))))
                  (g$find*$11109$tVUFT
                    (case-lambda
                      ((g$sym*$11327$tVUFT g$subst$11328$tVUFT)
                       (g$map$5157$tVUFT
                         (case-lambda
                           ((g$x$11329$tVUFT)
                            ((case-lambda
                               ((g$t$11330$tVUFT)
                                (if g$t$11330$tVUFT
                                  (cdr g$t$11330$tVUFT)
                                  (g$syntax-violation$8674$tVUFT
                                    'import
                                    '"cannot find identifier"
                                    g$x$11329$tVUFT))))
                             (g$assq$5145$tVUFT
                               g$x$11329$tVUFT
                               g$subst$11328$tVUFT))))
                         g$sym*$11327$tVUFT))))
                  (g$rem*$11110$tVUFT
                    (case-lambda
                      ((g$sym*$11323$tVUFT g$subst$11324$tVUFT)
                       ((letrec ((g$f$11325$tVUFT
                                   (case-lambda
                                     ((g$subst$11326$tVUFT)
                                      (if (null? g$subst$11326$tVUFT)
                                        '()
                                        (if (g$memq$5149$tVUFT
                                              (g$caar$5653$tVUFT
                                                g$subst$11326$tVUFT)
                                              g$sym*$11323$tVUFT)
                                          (g$f$11325$tVUFT
                                            (cdr g$subst$11326$tVUFT))
                                          (cons
                                            (car g$subst$11326$tVUFT)
                                            (g$f$11325$tVUFT
                                              (cdr g$subst$11326$tVUFT)))))))))
                          g$f$11325$tVUFT)
                        g$subst$11324$tVUFT))))
                  (g$remove-dups$11111$tVUFT
                    (case-lambda
                      ((g$ls$11322$tVUFT)
                       (if (null? g$ls$11322$tVUFT)
                         '()
                         (if (g$memq$5149$tVUFT
                               (car g$ls$11322$tVUFT)
                               (cdr g$ls$11322$tVUFT))
                           (g$remove-dups$11111$tVUFT (cdr g$ls$11322$tVUFT))
                           (cons
                             (car g$ls$11322$tVUFT)
                             (g$remove-dups$11111$tVUFT
                               (cdr g$ls$11322$tVUFT))))))))
                  (g$parse-library-name$11112$tVUFT
                    (case-lambda
                      ((g$spec$11206$tVUFT)
                       (letrec* ((g$subversion?$11207$tVUFT
                                   (case-lambda
                                     ((g$x$11320$tVUFT)
                                      ((case-lambda
                                         ((g$x$11321$tVUFT)
                                          (if (integer? g$x$11321$tVUFT)
                                            (if (exact? g$x$11321$tVUFT)
                                              (begin
                                                '#f
                                                (>= g$x$11321$tVUFT '0))
                                              '#f)
                                            '#f)))
                                       (g$syntax->datum$8677$tVUFT
                                         g$x$11320$tVUFT)))))
                                 (g$subversion-pred$11208$tVUFT
                                   (case-lambda
                                     ((g$x*$11272$tVUFT)
                                      ((case-lambda
                                         ((g$t$11273$tVUFT)
                                          ((case-lambda
                                             ((g$ls/false$11274$tVUFT)
                                              (if (if g$ls/false$11274$tVUFT
                                                    (begin
                                                      '#f
                                                      (apply
                                                        (case-lambda
                                                          ((g$n$11275$tVUFT)
                                                           (g$subversion?$11207$tVUFT
                                                             g$n$11275$tVUFT)))
                                                        g$ls/false$11274$tVUFT))
                                                    '#f)
                                                (apply
                                                  (case-lambda
                                                    ((g$n$11276$tVUFT)
                                                     (case-lambda
                                                       ((g$x$11277$tVUFT)
                                                        (= g$x$11277$tVUFT
                                                           (g$syntax->datum$8677$tVUFT
                                                             g$n$11276$tVUFT))))))
                                                  g$ls/false$11274$tVUFT)
                                                ((case-lambda
                                                   ((g$t$11278$tVUFT)
                                                    ((case-lambda
                                                       ((g$ls/false$11279$tVUFT)
                                                        (if (if g$ls/false$11279$tVUFT
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p?$11280$tVUFT
                                                                       g$sub*$11281$tVUFT)
                                                                     (eq? (g$syntax->datum$8677$tVUFT
                                                                            g$p?$11280$tVUFT)
                                                                          'and)))
                                                                  g$ls/false$11279$tVUFT))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$p?$11282$tVUFT
                                                                 g$sub*$11283$tVUFT)
                                                               ((case-lambda
                                                                  ((g$p*$11284$tVUFT)
                                                                   (case-lambda
                                                                     ((g$x$11285$tVUFT)
                                                                      (g$for-all$5155$tVUFT
                                                                        (case-lambda
                                                                          ((g$p$11286$tVUFT)
                                                                           (g$p$11286$tVUFT
                                                                             g$x$11285$tVUFT)))
                                                                        g$p*$11284$tVUFT)))))
                                                                (g$map$5157$tVUFT
                                                                  g$subversion-pred$11208$tVUFT
                                                                  g$sub*$11283$tVUFT))))
                                                            g$ls/false$11279$tVUFT)
                                                          ((case-lambda
                                                             ((g$t$11287$tVUFT)
                                                              ((case-lambda
                                                                 ((g$ls/false$11288$tVUFT)
                                                                  (if (if g$ls/false$11288$tVUFT
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p?$11289$tVUFT
                                                                                 g$sub*$11290$tVUFT)
                                                                               (eq? (g$syntax->datum$8677$tVUFT
                                                                                      g$p?$11289$tVUFT)
                                                                                    'or)))
                                                                            g$ls/false$11288$tVUFT))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$p?$11291$tVUFT
                                                                           g$sub*$11292$tVUFT)
                                                                         ((case-lambda
                                                                            ((g$p*$11293$tVUFT)
                                                                             (case-lambda
                                                                               ((g$x$11294$tVUFT)
                                                                                (g$exists$5156$tVUFT
                                                                                  (case-lambda
                                                                                    ((g$p$11295$tVUFT)
                                                                                     (g$p$11295$tVUFT
                                                                                       g$x$11294$tVUFT)))
                                                                                  g$p*$11293$tVUFT)))))
                                                                          (g$map$5157$tVUFT
                                                                            g$subversion-pred$11208$tVUFT
                                                                            g$sub*$11292$tVUFT))))
                                                                      g$ls/false$11288$tVUFT)
                                                                    ((case-lambda
                                                                       ((g$t$11296$tVUFT)
                                                                        ((case-lambda
                                                                           ((g$ls/false$11297$tVUFT)
                                                                            (if (if g$ls/false$11297$tVUFT
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p?$11298$tVUFT
                                                                                           g$sub$11299$tVUFT)
                                                                                         (eq? (g$syntax->datum$8677$tVUFT
                                                                                                g$p?$11298$tVUFT)
                                                                                              'not)))
                                                                                      g$ls/false$11297$tVUFT))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$p?$11300$tVUFT
                                                                                     g$sub$11301$tVUFT)
                                                                                   ((case-lambda
                                                                                      ((g$p$11302$tVUFT)
                                                                                       (case-lambda
                                                                                         ((g$x$11303$tVUFT)
                                                                                          (not (g$p$11302$tVUFT
                                                                                                 g$x$11303$tVUFT))))))
                                                                                    (g$subversion-pred$11208$tVUFT
                                                                                      g$sub$11301$tVUFT))))
                                                                                g$ls/false$11297$tVUFT)
                                                                              ((case-lambda
                                                                                 ((g$t$11304$tVUFT)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$11305$tVUFT)
                                                                                      (if (if g$ls/false$11305$tVUFT
                                                                                            (begin
                                                                                              '#f
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p?$11306$tVUFT
                                                                                                     g$n$11307$tVUFT)
                                                                                                   (if (eq? (g$syntax->datum$8677$tVUFT
                                                                                                              g$p?$11306$tVUFT)
                                                                                                            '<=)
                                                                                                     (begin
                                                                                                       '#f
                                                                                                       (g$subversion?$11207$tVUFT
                                                                                                         g$n$11307$tVUFT))
                                                                                                     '#f)))
                                                                                                g$ls/false$11305$tVUFT))
                                                                                            '#f)
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$p?$11308$tVUFT
                                                                                               g$n$11309$tVUFT)
                                                                                             (case-lambda
                                                                                               ((g$x$11310$tVUFT)
                                                                                                (<= g$x$11310$tVUFT
                                                                                                    (g$syntax->datum$8677$tVUFT
                                                                                                      g$n$11309$tVUFT))))))
                                                                                          g$ls/false$11305$tVUFT)
                                                                                        ((case-lambda
                                                                                           ((g$t$11311$tVUFT)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$11312$tVUFT)
                                                                                                (if (if g$ls/false$11312$tVUFT
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$p?$11313$tVUFT
                                                                                                               g$n$11314$tVUFT)
                                                                                                             (if (eq? (g$syntax->datum$8677$tVUFT
                                                                                                                        g$p?$11313$tVUFT)
                                                                                                                      '>=)
                                                                                                               (begin
                                                                                                                 '#f
                                                                                                                 (g$subversion?$11207$tVUFT
                                                                                                                   g$n$11314$tVUFT))
                                                                                                               '#f)))
                                                                                                          g$ls/false$11312$tVUFT))
                                                                                                      '#f)
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$p?$11315$tVUFT
                                                                                                         g$n$11316$tVUFT)
                                                                                                       (case-lambda
                                                                                                         ((g$x$11317$tVUFT)
                                                                                                          (>= g$x$11317$tVUFT
                                                                                                              (g$syntax->datum$8677$tVUFT
                                                                                                                g$n$11316$tVUFT))))))
                                                                                                    g$ls/false$11312$tVUFT)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$11318$tVUFT)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$11319$tVUFT)
                                                                                                          (if g$ls/false$11319$tVUFT
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (g$syntax-violation$8674$tVUFT
                                                                                                                   'import
                                                                                                                   '"invalid sub-version spec"
                                                                                                                   g$spec$11206$tVUFT
                                                                                                                   g$x*$11272$tVUFT)))
                                                                                                              g$ls/false$11319$tVUFT)
                                                                                                            (g$syntax-violation$8674$tVUFT
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$11318$tVUFT))))
                                                                                                       (g$syntax-dispatch$8562$tVUFT
                                                                                                         g$t$11318$tVUFT
                                                                                                         '_))))
                                                                                                   g$t$11311$tVUFT))))
                                                                                             (g$syntax-dispatch$8562$tVUFT
                                                                                               g$t$11311$tVUFT
                                                                                               '(any any)))))
                                                                                         g$t$11304$tVUFT))))
                                                                                   (g$syntax-dispatch$8562$tVUFT
                                                                                     g$t$11304$tVUFT
                                                                                     '(any any)))))
                                                                               g$t$11296$tVUFT))))
                                                                         (g$syntax-dispatch$8562$tVUFT
                                                                           g$t$11296$tVUFT
                                                                           '(any any)))))
                                                                     g$t$11287$tVUFT))))
                                                               (g$syntax-dispatch$8562$tVUFT
                                                                 g$t$11287$tVUFT
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$11278$tVUFT))))
                                                     (g$syntax-dispatch$8562$tVUFT
                                                       g$t$11278$tVUFT
                                                       '(any . each-any)))))
                                                 g$t$11273$tVUFT))))
                                           (g$syntax-dispatch$8562$tVUFT
                                             g$t$11273$tVUFT
                                             'any))))
                                       g$x*$11272$tVUFT))))
                                 (g$version-pred$11209$tVUFT
                                   (case-lambda
                                     ((g$x*$11232$tVUFT)
                                      ((case-lambda
                                         ((g$t$11233$tVUFT)
                                          ((case-lambda
                                             ((g$ls/false$11234$tVUFT)
                                              (if g$ls/false$11234$tVUFT
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (case-lambda
                                                       ((g$x$11235$tVUFT)
                                                        '#t))))
                                                  g$ls/false$11234$tVUFT)
                                                ((case-lambda
                                                   ((g$t$11236$tVUFT)
                                                    ((case-lambda
                                                       ((g$ls/false$11237$tVUFT)
                                                        (if (if g$ls/false$11237$tVUFT
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$c$11238$tVUFT
                                                                       g$ver*$11239$tVUFT)
                                                                     (eq? (g$syntax->datum$8677$tVUFT
                                                                            g$c$11238$tVUFT)
                                                                          'and)))
                                                                  g$ls/false$11237$tVUFT))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$c$11240$tVUFT
                                                                 g$ver*$11241$tVUFT)
                                                               ((case-lambda
                                                                  ((g$p*$11242$tVUFT)
                                                                   (case-lambda
                                                                     ((g$x$11243$tVUFT)
                                                                      (g$for-all$5155$tVUFT
                                                                        (case-lambda
                                                                          ((g$p$11244$tVUFT)
                                                                           (g$p$11244$tVUFT
                                                                             g$x$11243$tVUFT)))
                                                                        g$p*$11242$tVUFT)))))
                                                                (g$map$5157$tVUFT
                                                                  g$version-pred$11209$tVUFT
                                                                  g$ver*$11241$tVUFT))))
                                                            g$ls/false$11237$tVUFT)
                                                          ((case-lambda
                                                             ((g$t$11245$tVUFT)
                                                              ((case-lambda
                                                                 ((g$ls/false$11246$tVUFT)
                                                                  (if (if g$ls/false$11246$tVUFT
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$c$11247$tVUFT
                                                                                 g$ver*$11248$tVUFT)
                                                                               (eq? (g$syntax->datum$8677$tVUFT
                                                                                      g$c$11247$tVUFT)
                                                                                    'or)))
                                                                            g$ls/false$11246$tVUFT))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$c$11249$tVUFT
                                                                           g$ver*$11250$tVUFT)
                                                                         ((case-lambda
                                                                            ((g$p*$11251$tVUFT)
                                                                             (case-lambda
                                                                               ((g$x$11252$tVUFT)
                                                                                (g$exists$5156$tVUFT
                                                                                  (case-lambda
                                                                                    ((g$p$11253$tVUFT)
                                                                                     (g$p$11253$tVUFT
                                                                                       g$x$11252$tVUFT)))
                                                                                  g$p*$11251$tVUFT)))))
                                                                          (g$map$5157$tVUFT
                                                                            g$version-pred$11209$tVUFT
                                                                            g$ver*$11250$tVUFT))))
                                                                      g$ls/false$11246$tVUFT)
                                                                    ((case-lambda
                                                                       ((g$t$11254$tVUFT)
                                                                        ((case-lambda
                                                                           ((g$ls/false$11255$tVUFT)
                                                                            (if (if g$ls/false$11255$tVUFT
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$c$11256$tVUFT
                                                                                           g$ver$11257$tVUFT)
                                                                                         (eq? (g$syntax->datum$8677$tVUFT
                                                                                                g$c$11256$tVUFT)
                                                                                              'not)))
                                                                                      g$ls/false$11255$tVUFT))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$c$11258$tVUFT
                                                                                     g$ver$11259$tVUFT)
                                                                                   ((case-lambda
                                                                                      ((g$p$11260$tVUFT)
                                                                                       (case-lambda
                                                                                         ((g$x$11261$tVUFT)
                                                                                          (not (g$p$11260$tVUFT
                                                                                                 g$x$11261$tVUFT))))))
                                                                                    (g$version-pred$11209$tVUFT
                                                                                      g$ver$11259$tVUFT))))
                                                                                g$ls/false$11255$tVUFT)
                                                                              ((case-lambda
                                                                                 ((g$t$11262$tVUFT)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$11263$tVUFT)
                                                                                      (if g$ls/false$11263$tVUFT
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$sub*$11264$tVUFT)
                                                                                             ((case-lambda
                                                                                                ((g$p*$11265$tVUFT)
                                                                                                 (case-lambda
                                                                                                   ((g$x$11266$tVUFT)
                                                                                                    ((letrec ((g$f$11267$tVUFT
                                                                                                                (case-lambda
                                                                                                                  ((g$p*$11268$tVUFT
                                                                                                                     g$x$11269$tVUFT)
                                                                                                                   (if (null?
                                                                                                                         g$p*$11268$tVUFT)
                                                                                                                     '#t
                                                                                                                     (if (null?
                                                                                                                           g$x$11269$tVUFT)
                                                                                                                       '#f
                                                                                                                       (if ((car g$p*$11268$tVUFT)
                                                                                                                            (car g$x$11269$tVUFT))
                                                                                                                         (begin
                                                                                                                           '#f
                                                                                                                           (g$f$11267$tVUFT
                                                                                                                             (cdr g$p*$11268$tVUFT)
                                                                                                                             (cdr g$x$11269$tVUFT)))
                                                                                                                         '#f)))))))
                                                                                                       g$f$11267$tVUFT)
                                                                                                     g$p*$11265$tVUFT
                                                                                                     g$x$11266$tVUFT)))))
                                                                                              (g$map$5157$tVUFT
                                                                                                g$subversion-pred$11208$tVUFT
                                                                                                g$sub*$11264$tVUFT))))
                                                                                          g$ls/false$11263$tVUFT)
                                                                                        ((case-lambda
                                                                                           ((g$t$11270$tVUFT)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$11271$tVUFT)
                                                                                                (if g$ls/false$11271$tVUFT
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      (()
                                                                                                       (g$syntax-violation$8674$tVUFT
                                                                                                         'import
                                                                                                         '"invalid version spec"
                                                                                                         g$spec$11206$tVUFT
                                                                                                         g$x*$11232$tVUFT)))
                                                                                                    g$ls/false$11271$tVUFT)
                                                                                                  (g$syntax-violation$8674$tVUFT
                                                                                                    '#f
                                                                                                    '"invalid syntax"
                                                                                                    g$t$11270$tVUFT))))
                                                                                             (g$syntax-dispatch$8562$tVUFT
                                                                                               g$t$11270$tVUFT
                                                                                               '_))))
                                                                                         g$t$11262$tVUFT))))
                                                                                   (g$syntax-dispatch$8562$tVUFT
                                                                                     g$t$11262$tVUFT
                                                                                     'each-any))))
                                                                               g$t$11254$tVUFT))))
                                                                         (g$syntax-dispatch$8562$tVUFT
                                                                           g$t$11254$tVUFT
                                                                           '(any any)))))
                                                                     g$t$11245$tVUFT))))
                                                               (g$syntax-dispatch$8562$tVUFT
                                                                 g$t$11245$tVUFT
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$11236$tVUFT))))
                                                     (g$syntax-dispatch$8562$tVUFT
                                                       g$t$11236$tVUFT
                                                       '(any . each-any)))))
                                                 g$t$11233$tVUFT))))
                                           (g$syntax-dispatch$8562$tVUFT
                                             g$t$11233$tVUFT
                                             '()))))
                                       g$x*$11232$tVUFT)))))
                         ((letrec ((g$f$11210$tVUFT
                                     (case-lambda
                                       ((g$x$11211$tVUFT)
                                        ((case-lambda
                                           ((g$t$11212$tVUFT)
                                            ((case-lambda
                                               ((g$ls/false$11213$tVUFT)
                                                (if g$ls/false$11213$tVUFT
                                                  (apply
                                                    (case-lambda
                                                      ((g$version-spec*$11214$tVUFT)
                                                       (values
                                                         '()
                                                         (g$version-pred$11209$tVUFT
                                                           g$version-spec*$11214$tVUFT))))
                                                    g$ls/false$11213$tVUFT)
                                                  ((case-lambda
                                                     ((g$t$11215$tVUFT)
                                                      ((case-lambda
                                                         ((g$ls/false$11216$tVUFT)
                                                          (if (if g$ls/false$11216$tVUFT
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$x$11217$tVUFT
                                                                         g$x*$11218$tVUFT)
                                                                       (g$idsyn?$11105$tVUFT
                                                                         g$x$11217$tVUFT)))
                                                                    g$ls/false$11216$tVUFT))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$x$11219$tVUFT
                                                                   g$x*$11220$tVUFT)
                                                                 (call-with-values
                                                                   (case-lambda
                                                                     (()
                                                                      (g$f$11210$tVUFT
                                                                        g$x*$11220$tVUFT)))
                                                                   (case-lambda
                                                                     ((g$name$11223$tVUFT
                                                                        g$pred$11224$tVUFT)
                                                                      ((case-lambda
                                                                         ((g$pred$11225$tVUFT
                                                                            g$name$11226$tVUFT)
                                                                          (values
                                                                            (cons
                                                                              (g$syntax->datum$8677$tVUFT
                                                                                g$x$11219$tVUFT)
                                                                              g$name$11226$tVUFT)
                                                                            g$pred$11225$tVUFT)))
                                                                       g$pred$11224$tVUFT
                                                                       g$name$11223$tVUFT))))))
                                                              g$ls/false$11216$tVUFT)
                                                            ((case-lambda
                                                               ((g$t$11227$tVUFT)
                                                                ((case-lambda
                                                                   ((g$ls/false$11228$tVUFT)
                                                                    (if g$ls/false$11228$tVUFT
                                                                      (apply
                                                                        (case-lambda
                                                                          (()
                                                                           (values
                                                                             '()
                                                                             (case-lambda
                                                                               ((g$x$11229$tVUFT)
                                                                                '#t)))))
                                                                        g$ls/false$11228$tVUFT)
                                                                      ((case-lambda
                                                                         ((g$t$11230$tVUFT)
                                                                          ((case-lambda
                                                                             ((g$ls/false$11231$tVUFT)
                                                                              (if g$ls/false$11231$tVUFT
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$syntax-violation$8674$tVUFT
                                                                                       '#f
                                                                                       '"invalid import spec"
                                                                                       g$spec$11206$tVUFT)))
                                                                                  g$ls/false$11231$tVUFT)
                                                                                (g$syntax-violation$8674$tVUFT
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$11230$tVUFT))))
                                                                           (g$syntax-dispatch$8562$tVUFT
                                                                             g$t$11230$tVUFT
                                                                             '_))))
                                                                       g$t$11227$tVUFT))))
                                                                 (g$syntax-dispatch$8562$tVUFT
                                                                   g$t$11227$tVUFT
                                                                   '()))))
                                                             g$t$11215$tVUFT))))
                                                       (g$syntax-dispatch$8562$tVUFT
                                                         g$t$11215$tVUFT
                                                         '(any . any)))))
                                                   g$t$11212$tVUFT))))
                                             (g$syntax-dispatch$8562$tVUFT
                                               g$t$11212$tVUFT
                                               '(each-any)))))
                                         g$x$11211$tVUFT)))))
                            g$f$11210$tVUFT)
                          g$spec$11206$tVUFT)))))
                  (g$import-library$11113$tVUFT
                    (case-lambda
                      ((g$spec*$11198$tVUFT)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-library-name$11112$tVUFT
                              g$spec*$11198$tVUFT)))
                         (case-lambda
                           ((g$name$11201$tVUFT g$pred$11202$tVUFT)
                            ((case-lambda
                               ((g$pred$11203$tVUFT g$name$11204$tVUFT)
                                (begin
                                  (if (null? g$name$11204$tVUFT)
                                    (g$syntax-violation$8674$tVUFT
                                      'import
                                      '"empty library name"
                                      g$spec*$11198$tVUFT)
                                    (void))
                                  ((case-lambda
                                     ((g$lib$11205$tVUFT)
                                      (begin
                                        (if (not g$lib$11205$tVUFT)
                                          (g$syntax-violation$8674$tVUFT
                                            'import
                                            '"cannot find library with required name"
                                            g$name$11204$tVUFT)
                                          (void))
                                        (if (not (g$pred$11203$tVUFT
                                                   (g$library-version$8046$tVUFT
                                                     g$lib$11205$tVUFT)))
                                          (g$syntax-violation$8674$tVUFT
                                            'import
                                            '"library does not satisfy version specification"
                                            g$spec*$11198$tVUFT
                                            g$lib$11205$tVUFT)
                                          (void))
                                        ((g$imp-collector$8616$tVUFT)
                                         g$lib$11205$tVUFT)
                                        (g$library-subst$8050$tVUFT
                                          g$lib$11205$tVUFT))))
                                   (g$find-library-by-name$8086$tVUFT
                                     g$name$11204$tVUFT)))))
                             g$pred$11202$tVUFT
                             g$name$11201$tVUFT)))))))
                  (g$get-import$11114$tVUFT
                    (case-lambda
                      ((g$spec$11127$tVUFT)
                       ((case-lambda
                          ((g$t$11128$tVUFT)
                           ((case-lambda
                              ((g$ls/false$11129$tVUFT)
                               (if (if g$ls/false$11129$tVUFT
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$x$11130$tVUFT g$x*$11131$tVUFT)
                                            (not (g$memq$5149$tVUFT
                                                   (g$syntax->datum$8677$tVUFT
                                                     g$x$11130$tVUFT)
                                                   '(for rename
                                                         except
                                                         only
                                                         prefix
                                                         library)))))
                                         g$ls/false$11129$tVUFT))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$x$11132$tVUFT g$x*$11133$tVUFT)
                                      (g$import-library$11113$tVUFT
                                        (cons
                                          g$x$11132$tVUFT
                                          g$x*$11133$tVUFT))))
                                   g$ls/false$11129$tVUFT)
                                 ((case-lambda
                                    ((g$t$11134$tVUFT)
                                     ((case-lambda
                                        ((g$ls/false$11135$tVUFT)
                                         (if (if g$ls/false$11135$tVUFT
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$rename$11136$tVUFT
                                                        g$isp$11137$tVUFT
                                                        g$old*$11138$tVUFT
                                                        g$new*$11139$tVUFT)
                                                      (if (eq? (g$syntax->datum$8677$tVUFT
                                                                 g$rename$11136$tVUFT)
                                                               'rename)
                                                        (if (g$for-all$5155$tVUFT
                                                              g$idsyn?$11105$tVUFT
                                                              g$old*$11138$tVUFT)
                                                          (begin
                                                            '#f
                                                            (g$for-all$5155$tVUFT
                                                              g$idsyn?$11105$tVUFT
                                                              g$new*$11139$tVUFT))
                                                          '#f)
                                                        '#f)))
                                                   g$ls/false$11135$tVUFT))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$rename$11140$tVUFT
                                                  g$isp$11141$tVUFT
                                                  g$old*$11142$tVUFT
                                                  g$new*$11143$tVUFT)
                                                ((case-lambda
                                                   ((g$subst$11144$tVUFT
                                                      g$old*$11145$tVUFT
                                                      g$new*$11146$tVUFT)
                                                    ((case-lambda
                                                       ((g$old-label*$11147$tVUFT)
                                                        ((case-lambda
                                                           ((g$subst$11148$tVUFT)
                                                            (g$merge-substs$11107$tVUFT
                                                              (g$map$5157$tVUFT
                                                                cons
                                                                g$new*$11146$tVUFT
                                                                g$old-label*$11147$tVUFT)
                                                              g$subst$11148$tVUFT)))
                                                         (g$rem*$11110$tVUFT
                                                           g$old*$11145$tVUFT
                                                           g$subst$11144$tVUFT))))
                                                     (g$find*$11109$tVUFT
                                                       g$old*$11145$tVUFT
                                                       g$subst$11144$tVUFT))))
                                                 (g$get-import$11114$tVUFT
                                                   g$isp$11141$tVUFT)
                                                 (g$map$5157$tVUFT
                                                   g$syntax->datum$8677$tVUFT
                                                   g$old*$11142$tVUFT)
                                                 (g$map$5157$tVUFT
                                                   g$syntax->datum$8677$tVUFT
                                                   g$new*$11143$tVUFT))))
                                             g$ls/false$11135$tVUFT)
                                           ((case-lambda
                                              ((g$t$11149$tVUFT)
                                               ((case-lambda
                                                  ((g$ls/false$11150$tVUFT)
                                                   (if (if g$ls/false$11150$tVUFT
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$except$11151$tVUFT
                                                                  g$isp$11152$tVUFT
                                                                  g$sym*$11153$tVUFT)
                                                                (if (eq? (g$syntax->datum$8677$tVUFT
                                                                           g$except$11151$tVUFT)
                                                                         'except)
                                                                  (begin
                                                                    '#f
                                                                    (g$for-all$5155$tVUFT
                                                                      g$idsyn?$11105$tVUFT
                                                                      g$sym*$11153$tVUFT))
                                                                  '#f)))
                                                             g$ls/false$11150$tVUFT))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$except$11154$tVUFT
                                                            g$isp$11155$tVUFT
                                                            g$sym*$11156$tVUFT)
                                                          ((case-lambda
                                                             ((g$subst$11157$tVUFT)
                                                              (g$rem*$11110$tVUFT
                                                                (g$map$5157$tVUFT
                                                                  g$syntax->datum$8677$tVUFT
                                                                  g$sym*$11156$tVUFT)
                                                                g$subst$11157$tVUFT)))
                                                           (g$get-import$11114$tVUFT
                                                             g$isp$11155$tVUFT))))
                                                       g$ls/false$11150$tVUFT)
                                                     ((case-lambda
                                                        ((g$t$11158$tVUFT)
                                                         ((case-lambda
                                                            ((g$ls/false$11159$tVUFT)
                                                             (if (if g$ls/false$11159$tVUFT
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$only$11160$tVUFT
                                                                            g$isp$11161$tVUFT
                                                                            g$sym*$11162$tVUFT)
                                                                          (if (eq? (g$syntax->datum$8677$tVUFT
                                                                                     g$only$11160$tVUFT)
                                                                                   'only)
                                                                            (begin
                                                                              '#f
                                                                              (g$for-all$5155$tVUFT
                                                                                g$idsyn?$11105$tVUFT
                                                                                g$sym*$11162$tVUFT))
                                                                            '#f)))
                                                                       g$ls/false$11159$tVUFT))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$only$11163$tVUFT
                                                                      g$isp$11164$tVUFT
                                                                      g$sym*$11165$tVUFT)
                                                                    ((case-lambda
                                                                       ((g$subst$11166$tVUFT
                                                                          g$sym*$11167$tVUFT)
                                                                        ((case-lambda
                                                                           ((g$sym*$11168$tVUFT)
                                                                            ((case-lambda
                                                                               ((g$lab*$11169$tVUFT)
                                                                                (g$map$5157$tVUFT
                                                                                  cons
                                                                                  g$sym*$11168$tVUFT
                                                                                  g$lab*$11169$tVUFT)))
                                                                             (g$find*$11109$tVUFT
                                                                               g$sym*$11168$tVUFT
                                                                               g$subst$11166$tVUFT))))
                                                                         (g$remove-dups$11111$tVUFT
                                                                           g$sym*$11167$tVUFT))))
                                                                     (g$get-import$11114$tVUFT
                                                                       g$isp$11164$tVUFT)
                                                                     (g$map$5157$tVUFT
                                                                       g$syntax->datum$8677$tVUFT
                                                                       g$sym*$11165$tVUFT))))
                                                                 g$ls/false$11159$tVUFT)
                                                               ((case-lambda
                                                                  ((g$t$11170$tVUFT)
                                                                   ((case-lambda
                                                                      ((g$ls/false$11171$tVUFT)
                                                                       (if (if g$ls/false$11171$tVUFT
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$prefix$11172$tVUFT
                                                                                      g$isp$11173$tVUFT
                                                                                      g$p$11174$tVUFT)
                                                                                    (if (eq? (g$syntax->datum$8677$tVUFT
                                                                                               g$prefix$11172$tVUFT)
                                                                                             'prefix)
                                                                                      (begin
                                                                                        '#f
                                                                                        (g$idsyn?$11105$tVUFT
                                                                                          g$p$11174$tVUFT))
                                                                                      '#f)))
                                                                                 g$ls/false$11171$tVUFT))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$prefix$11175$tVUFT
                                                                                g$isp$11176$tVUFT
                                                                                g$p$11177$tVUFT)
                                                                              ((case-lambda
                                                                                 ((g$subst$11178$tVUFT
                                                                                    g$prefix$11179$tVUFT)
                                                                                  (g$map$5157$tVUFT
                                                                                    (case-lambda
                                                                                      ((g$x$11180$tVUFT)
                                                                                       (cons
                                                                                         (string->symbol
                                                                                           (string-append
                                                                                             g$prefix$11179$tVUFT
                                                                                             (symbol->string
                                                                                               (car g$x$11180$tVUFT))))
                                                                                         (cdr g$x$11180$tVUFT))))
                                                                                    g$subst$11178$tVUFT)))
                                                                               (g$get-import$11114$tVUFT
                                                                                 g$isp$11176$tVUFT)
                                                                               (symbol->string
                                                                                 (g$syntax->datum$8677$tVUFT
                                                                                   g$p$11177$tVUFT)))))
                                                                           g$ls/false$11171$tVUFT)
                                                                         ((case-lambda
                                                                            ((g$t$11181$tVUFT)
                                                                             ((case-lambda
                                                                                ((g$ls/false$11182$tVUFT)
                                                                                 (if (if g$ls/false$11182$tVUFT
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$library$11183$tVUFT
                                                                                                g$spec*$11184$tVUFT)
                                                                                              (eq? (g$syntax->datum$8677$tVUFT
                                                                                                     g$library$11183$tVUFT)
                                                                                                   'library)))
                                                                                           g$ls/false$11182$tVUFT))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$library$11185$tVUFT
                                                                                          g$spec*$11186$tVUFT)
                                                                                        (g$import-library$11113$tVUFT
                                                                                          g$spec*$11186$tVUFT)))
                                                                                     g$ls/false$11182$tVUFT)
                                                                                   ((case-lambda
                                                                                      ((g$t$11187$tVUFT)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$11188$tVUFT)
                                                                                           (if (if g$ls/false$11188$tVUFT
                                                                                                 (begin
                                                                                                   '#f
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$for$11189$tVUFT
                                                                                                          g$isp$11190$tVUFT
                                                                                                          g$rest$11191$tVUFT)
                                                                                                        (eq? (g$syntax->datum$8677$tVUFT
                                                                                                               g$for$11189$tVUFT)
                                                                                                             'for)))
                                                                                                     g$ls/false$11188$tVUFT))
                                                                                                 '#f)
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$for$11192$tVUFT
                                                                                                    g$isp$11193$tVUFT
                                                                                                    g$rest$11194$tVUFT)
                                                                                                  (g$get-import$11114$tVUFT
                                                                                                    g$isp$11193$tVUFT)))
                                                                                               g$ls/false$11188$tVUFT)
                                                                                             ((case-lambda
                                                                                                ((g$t$11195$tVUFT)
                                                                                                 ((case-lambda
                                                                                                    ((g$ls/false$11196$tVUFT)
                                                                                                     (if g$ls/false$11196$tVUFT
                                                                                                       (apply
                                                                                                         (case-lambda
                                                                                                           ((g$spec$11197$tVUFT)
                                                                                                            (g$syntax-violation$8674$tVUFT
                                                                                                              'import
                                                                                                              '"invalid import spec"
                                                                                                              g$spec$11197$tVUFT)))
                                                                                                         g$ls/false$11196$tVUFT)
                                                                                                       (g$syntax-violation$8674$tVUFT
                                                                                                         '#f
                                                                                                         '"invalid syntax"
                                                                                                         g$t$11195$tVUFT))))
                                                                                                  (g$syntax-dispatch$8562$tVUFT
                                                                                                    g$t$11195$tVUFT
                                                                                                    'any))))
                                                                                              g$t$11187$tVUFT))))
                                                                                        (g$syntax-dispatch$8562$tVUFT
                                                                                          g$t$11187$tVUFT
                                                                                          '(any any
                                                                                                .
                                                                                                any)))))
                                                                                    g$t$11181$tVUFT))))
                                                                              (g$syntax-dispatch$8562$tVUFT
                                                                                g$t$11181$tVUFT
                                                                                '(any each-any)))))
                                                                          g$t$11170$tVUFT))))
                                                                    (g$syntax-dispatch$8562$tVUFT
                                                                      g$t$11170$tVUFT
                                                                      '(any any
                                                                            any)))))
                                                                g$t$11158$tVUFT))))
                                                          (g$syntax-dispatch$8562$tVUFT
                                                            g$t$11158$tVUFT
                                                            '(any any
                                                                  .
                                                                  each-any)))))
                                                      g$t$11149$tVUFT))))
                                                (g$syntax-dispatch$8562$tVUFT
                                                  g$t$11149$tVUFT
                                                  '(any any . each-any)))))
                                            g$t$11134$tVUFT))))
                                      (g$syntax-dispatch$8562$tVUFT
                                        g$t$11134$tVUFT
                                        '(any any . #(each (any any)))))))
                                  g$t$11128$tVUFT))))
                            (g$syntax-dispatch$8562$tVUFT
                              g$t$11128$tVUFT
                              '(any . each-any)))))
                        g$spec$11127$tVUFT))))
                  (g$add-imports!$11115$tVUFT
                    (case-lambda
                      ((g$imp$11119$tVUFT g$h$11120$tVUFT)
                       ((case-lambda
                          ((g$subst$11121$tVUFT)
                           (g$for-each$5158$tVUFT
                             (case-lambda
                               ((g$x$11122$tVUFT)
                                ((case-lambda
                                   ((g$name$11123$tVUFT g$label$11124$tVUFT)
                                    ((case-lambda
                                       ((g$t$11125$tVUFT)
                                        (if g$t$11125$tVUFT
                                          ((case-lambda
                                             ((g$l$11126$tVUFT)
                                              (if (not (eq? g$l$11126$tVUFT
                                                            g$label$11124$tVUFT))
                                                (g$dup-error$11106$tVUFT
                                                  g$name$11123$tVUFT)
                                                (void))))
                                           g$t$11125$tVUFT)
                                          (g$hashtable-set!$5748$tVUFT
                                            g$h$11120$tVUFT
                                            g$name$11123$tVUFT
                                            g$label$11124$tVUFT))))
                                     (g$hashtable-ref$5747$tVUFT
                                       g$h$11120$tVUFT
                                       g$name$11123$tVUFT
                                       '#f))))
                                 (car g$x$11122$tVUFT)
                                 (cdr g$x$11122$tVUFT))))
                             g$subst$11121$tVUFT)))
                        (g$get-import$11114$tVUFT g$imp$11119$tVUFT))))))
          ((letrec ((g$f$11116$tVUFT
                      (case-lambda
                        ((g$imp*$11117$tVUFT g$h$11118$tVUFT)
                         (if (null? g$imp*$11117$tVUFT)
                           (hashtable-entries g$h$11118$tVUFT)
                           (begin
                             (g$add-imports!$11115$tVUFT
                               (car g$imp*$11117$tVUFT)
                               g$h$11118$tVUFT)
                             (g$f$11116$tVUFT
                               (cdr g$imp*$11117$tVUFT)
                               g$h$11118$tVUFT)))))))
             g$f$11116$tVUFT)
           g$imp*$11104$tVUFT
           (g$make-eq-hashtable$5744$tVUFT))))))
   (g$make-top-rib$8612$tVUFT
     g$make-top-rib$12130$tVUFT
     (case-lambda
       ((g$names$11366$tVUFT g$labels$11367$tVUFT)
        ((case-lambda
           ((g$rib$11368$tVUFT)
            (begin
              (g$vector-for-each$5706$tVUFT
                (case-lambda
                  ((g$name$11369$tVUFT g$label$11370$tVUFT)
                   (begin
                     (if (not (g$symbol?$5645$tVUFT g$name$11369$tVUFT))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$11369$tVUFT)
                       (void))
                     (g$extend-rib/nc!$8247$tVUFT
                       g$rib$11368$tVUFT
                       (g$make-stx$8256$tVUFT
                         g$name$11369$tVUFT
                         g$top-mark*$8220$tVUFT
                         '()
                         '())
                       g$label$11370$tVUFT))))
                g$names$11366$tVUFT
                g$labels$11367$tVUFT)
              g$rib$11368$tVUFT)))
         (g$make-cache-rib$8244$tVUFT)))))
   (g$make-collector$8613$tVUFT
     g$make-collector$12131$tVUFT
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$11371$tVUFT)
            (case-lambda
              (() g$ls$11371$tVUFT)
              ((g$x$11372$tVUFT)
               (set! g$ls$11371$tVUFT
                 (g$set-cons$8217$tVUFT g$x$11372$tVUFT g$ls$11371$tVUFT))))))
         '()))))
   (g$inv-collector$8614$tVUFT
     g$inv-collector$12132$tVUFT
     (g$make-parameter$7583$tVUFT
       (case-lambda
         (g$args$11373$tVUFT
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$11374$tVUFT)
          (begin
            (if (not (g$procedure?$5647$tVUFT g$x$11374$tVUFT))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$11374$tVUFT)
              (void))
            g$x$11374$tVUFT)))))
   (g$vis-collector$8615$tVUFT
     g$vis-collector$12133$tVUFT
     (g$make-parameter$7583$tVUFT
       (case-lambda
         (g$args$11375$tVUFT
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$11376$tVUFT)
          (begin
            (if (not (g$procedure?$5647$tVUFT g$x$11376$tVUFT))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$11376$tVUFT)
              (void))
            g$x$11376$tVUFT)))))
   (g$imp-collector$8616$tVUFT
     g$imp-collector$12134$tVUFT
     (g$make-parameter$7583$tVUFT
       (case-lambda
         (g$args$11377$tVUFT
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$11378$tVUFT)
          (begin
            (if (not (g$procedure?$5647$tVUFT g$x$11378$tVUFT))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$11378$tVUFT)
              (void))
            g$x$11378$tVUFT)))))
   (g$chi-library-internal$8617$tVUFT
     g$chi-library-internal$12135$tVUFT
     (case-lambda
       ((g$e*$11379$tVUFT g$rib$11380$tVUFT g$mix?$11381$tVUFT)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$8606$tVUFT
               g$e*$11379$tVUFT
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$11380$tVUFT
               g$mix?$11381$tVUFT
               '#t)))
          (case-lambda
            ((g$e*$11390$tVUFT
               g$r$11391$tVUFT
               g$mr$11392$tVUFT
               g$lex*$11393$tVUFT
               g$rhs*$11394$tVUFT
               g$mod**$11395$tVUFT
               g$_kwd*$11396$tVUFT
               g$exp*$11397$tVUFT)
             ((case-lambda
                ((g$exp*$11398$tVUFT
                   g$_kwd*$11399$tVUFT
                   g$mod**$11400$tVUFT
                   g$rhs*$11401$tVUFT
                   g$lex*$11402$tVUFT
                   g$mr$11403$tVUFT
                   g$r$11404$tVUFT
                   g$e*$11405$tVUFT)
                 (values
                   (append
                     (apply append (g$reverse$5652$tVUFT g$mod**$11400$tVUFT))
                     g$e*$11405$tVUFT)
                   g$r$11404$tVUFT
                   g$mr$11403$tVUFT
                   (g$reverse$5652$tVUFT g$lex*$11402$tVUFT)
                   (g$reverse$5652$tVUFT g$rhs*$11401$tVUFT)
                   g$exp*$11398$tVUFT)))
              g$exp*$11397$tVUFT
              g$_kwd*$11396$tVUFT
              g$mod**$11395$tVUFT
              g$rhs*$11394$tVUFT
              g$lex*$11393$tVUFT
              g$mr$11392$tVUFT
              g$r$11391$tVUFT
              g$e*$11390$tVUFT)))))))
   (g$chi-interaction-expr$8618$tVUFT
     g$chi-interaction-expr$12136$tVUFT
     (case-lambda
       ((g$e$11406$tVUFT g$rib$11407$tVUFT g$r$11408$tVUFT)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$8606$tVUFT
               (list g$e$11406$tVUFT)
               g$r$11408$tVUFT
               g$r$11408$tVUFT
               '()
               '()
               '()
               '()
               '()
               g$rib$11407$tVUFT
               '#t
               '#f)))
          (case-lambda
            ((g$e*$11417$tVUFT
               g$r$11418$tVUFT
               g$mr$11419$tVUFT
               g$lex*$11420$tVUFT
               g$rhs*$11421$tVUFT
               g$mod**$11422$tVUFT
               g$_kwd*$11423$tVUFT
               g$_exp*$11424$tVUFT)
             ((case-lambda
                ((g$_exp*$11425$tVUFT
                   g$_kwd*$11426$tVUFT
                   g$mod**$11427$tVUFT
                   g$rhs*$11428$tVUFT
                   g$lex*$11429$tVUFT
                   g$mr$11430$tVUFT
                   g$r$11431$tVUFT
                   g$e*$11432$tVUFT)
                 ((case-lambda
                    ((g$e*$11433$tVUFT)
                     ((case-lambda
                        ((g$e$11434$tVUFT)
                         (values g$e$11434$tVUFT g$r$11431$tVUFT)))
                      (if (null? g$e*$11433$tVUFT)
                        (g$build-void$8213$tVUFT)
                        (if (null? (cdr g$e*$11433$tVUFT))
                          (car g$e*$11433$tVUFT)
                          (g$build-sequence$8212$tVUFT
                            '#f
                            g$e*$11433$tVUFT))))))
                  (g$expand-interaction-rhs*/init*$8587$tVUFT
                    (g$reverse$5652$tVUFT g$lex*$11429$tVUFT)
                    (g$reverse$5652$tVUFT g$rhs*$11428$tVUFT)
                    (append
                      (apply append (g$reverse$5652$tVUFT g$mod**$11427$tVUFT))
                      g$e*$11432$tVUFT)
                    g$r$11431$tVUFT
                    g$mr$11430$tVUFT))))
              g$_exp*$11424$tVUFT
              g$_kwd*$11423$tVUFT
              g$mod**$11422$tVUFT
              g$rhs*$11421$tVUFT
              g$lex*$11420$tVUFT
              g$mr$11419$tVUFT
              g$r$11418$tVUFT
              g$e*$11417$tVUFT)))))))
   (g$library-body-expander$8619$tVUFT
     g$library-body-expander$12137$tVUFT
     (case-lambda
       ((g$name$11435$tVUFT
          g$main-exp*$11436$tVUFT
          g$imp*$11437$tVUFT
          g$b*$11438$tVUFT
          g$mix?$11439$tVUFT)
        (letrec* ((g$itc$11440$tVUFT (g$make-collector$8613$tVUFT)))
          ((case-lambda
             ((g$imp-collector$11445$tVUFT
                g$top-level-context$11446$tVUFT
                g$imp-collector$11447$tVUFT
                g$top-level-context$11448$tVUFT)
              ((case-lambda
                 ((g$swap$11449$tVUFT)
                  (dynamic-wind
                    g$swap$11449$tVUFT
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$8611$tVUFT
                              g$imp*$11437$tVUFT)))
                         (case-lambda
                           ((g$subst-names$11452$tVUFT
                              g$subst-labels$11453$tVUFT)
                            ((case-lambda
                               ((g$subst-labels$11454$tVUFT
                                  g$subst-names$11455$tVUFT)
                                ((case-lambda
                                   ((g$rib$11456$tVUFT)
                                    (letrec* ((g$wrap$11457$tVUFT
                                                (case-lambda
                                                  ((g$x$11519$tVUFT)
                                                   (g$make-stx$8256$tVUFT
                                                     g$x$11519$tVUFT
                                                     g$top-mark*$8220$tVUFT
                                                     (list g$rib$11456$tVUFT)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$11458$tVUFT
                                            g$main-exp*$11459$tVUFT
                                            g$rtc$11460$tVUFT
                                            g$vtc$11461$tVUFT)
                                          ((case-lambda
                                             ((g$inv-collector$11466$tVUFT
                                                g$vis-collector$11467$tVUFT
                                                g$inv-collector$11468$tVUFT
                                                g$vis-collector$11469$tVUFT)
                                              ((case-lambda
                                                 ((g$swap$11470$tVUFT)
                                                  (dynamic-wind
                                                    g$swap$11470$tVUFT
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$8617$tVUFT
                                                              g$b*$11458$tVUFT
                                                              g$rib$11456$tVUFT
                                                              g$mix?$11439$tVUFT)))
                                                         (case-lambda
                                                           ((g$init*$11477$tVUFT
                                                              g$r$11478$tVUFT
                                                              g$mr$11479$tVUFT
                                                              g$lex*$11480$tVUFT
                                                              g$rhs*$11481$tVUFT
                                                              g$internal-exp*$11482$tVUFT)
                                                            ((case-lambda
                                                               ((g$internal-exp*$11483$tVUFT
                                                                  g$rhs*$11484$tVUFT
                                                                  g$lex*$11485$tVUFT
                                                                  g$mr$11486$tVUFT
                                                                  g$r$11487$tVUFT
                                                                  g$init*$11488$tVUFT)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$8608$tVUFT
                                                                       (append
                                                                         g$main-exp*$11459$tVUFT
                                                                         g$internal-exp*$11483$tVUFT))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$11491$tVUFT
                                                                       g$exp-id*$11492$tVUFT)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$11493$tVUFT
                                                                           g$exp-name*$11494$tVUFT)
                                                                         (begin
                                                                           (g$seal-rib!$8249$tVUFT
                                                                             g$rib$11456$tVUFT)
                                                                           ((case-lambda
                                                                              ((g$init*$11495$tVUFT)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$11496$tVUFT)
                                                                                   (begin
                                                                                     (g$unseal-rib!$8250$tVUFT
                                                                                       g$rib$11456$tVUFT)
                                                                                     ((case-lambda
                                                                                        ((g$loc*$11497$tVUFT
                                                                                           g$export-subst$11498$tVUFT)
                                                                                         (letrec* ((g$errstr$11499$tVUFT
                                                                                                     '"attempt to export mutated variable"))
                                                                                           (call-with-values
                                                                                             (case-lambda
                                                                                               (()
                                                                                                (g$make-export-env/macros$8663$tVUFT
                                                                                                  g$lex*$11485$tVUFT
                                                                                                  g$loc*$11497$tVUFT
                                                                                                  g$r$11487$tVUFT)))
                                                                                             (case-lambda
                                                                                               ((g$export-env$11503$tVUFT
                                                                                                  g$global*$11504$tVUFT
                                                                                                  g$macro*$11505$tVUFT)
                                                                                                ((case-lambda
                                                                                                   ((g$macro*$11506$tVUFT
                                                                                                      g$global*$11507$tVUFT
                                                                                                      g$export-env$11508$tVUFT)
                                                                                                    (begin
                                                                                                      (g$for-each$5158$tVUFT
                                                                                                        (case-lambda
                                                                                                          ((g$s$11509$tVUFT)
                                                                                                           ((case-lambda
                                                                                                              ((g$name$11510$tVUFT
                                                                                                                 g$label$11511$tVUFT)
                                                                                                               ((case-lambda
                                                                                                                  ((g$p$11512$tVUFT)
                                                                                                                   (if g$p$11512$tVUFT
                                                                                                                     ((case-lambda
                                                                                                                        ((g$b$11513$tVUFT)
                                                                                                                         ((case-lambda
                                                                                                                            ((g$type$11514$tVUFT)
                                                                                                                             (if (eq? g$type$11514$tVUFT
                                                                                                                                      'mutable)
                                                                                                                               (g$syntax-violation$8674$tVUFT
                                                                                                                                 'export
                                                                                                                                 g$errstr$11499$tVUFT
                                                                                                                                 g$name$11510$tVUFT)
                                                                                                                               (void))))
                                                                                                                          (car g$b$11513$tVUFT))))
                                                                                                                      (cdr g$p$11512$tVUFT))
                                                                                                                     (void))))
                                                                                                                (g$assq$5145$tVUFT
                                                                                                                  g$label$11511$tVUFT
                                                                                                                  g$export-env$11508$tVUFT))))
                                                                                                            (car g$s$11509$tVUFT)
                                                                                                            (cdr g$s$11509$tVUFT))))
                                                                                                        g$export-subst$11498$tVUFT)
                                                                                                      ((case-lambda
                                                                                                         ((g$invoke-body$11515$tVUFT
                                                                                                            g$invoke-definitions$11516$tVUFT)
                                                                                                          (values
                                                                                                            (g$itc$11440$tVUFT)
                                                                                                            (g$rtc$11460$tVUFT)
                                                                                                            (g$vtc$11461$tVUFT)
                                                                                                            (g$build-sequence$8212$tVUFT
                                                                                                              '#f
                                                                                                              (append
                                                                                                                g$invoke-definitions$11516$tVUFT
                                                                                                                (list
                                                                                                                  g$invoke-body$11515$tVUFT)))
                                                                                                            g$macro*$11506$tVUFT
                                                                                                            g$export-subst$11498$tVUFT
                                                                                                            g$export-env$11508$tVUFT)))
                                                                                                       (g$build-library-letrec*$8216$tVUFT
                                                                                                         '#f
                                                                                                         g$name$11435$tVUFT
                                                                                                         g$lex*$11485$tVUFT
                                                                                                         g$loc*$11497$tVUFT
                                                                                                         g$rhs*$11496$tVUFT
                                                                                                         (if (null?
                                                                                                               g$init*$11495$tVUFT)
                                                                                                           (g$build-void$8213$tVUFT)
                                                                                                           (g$build-sequence$8212$tVUFT
                                                                                                             '#f
                                                                                                             g$init*$11495$tVUFT)))
                                                                                                       (g$map$5157$tVUFT
                                                                                                         g$build-global-define$8208$tVUFT
                                                                                                         (g$map$5157$tVUFT
                                                                                                           cdr
                                                                                                           g$global*$11507$tVUFT))))))
                                                                                                 g$macro*$11505$tVUFT
                                                                                                 g$global*$11504$tVUFT
                                                                                                 g$export-env$11503$tVUFT)))))))
                                                                                      (g$map$5157$tVUFT
                                                                                        g$gen-global$8223$tVUFT
                                                                                        g$lex*$11485$tVUFT)
                                                                                      (g$make-export-subst$8662$tVUFT
                                                                                        g$exp-name*$11494$tVUFT
                                                                                        g$exp-id*$11493$tVUFT)))))
                                                                                (g$chi-rhs*$8588$tVUFT
                                                                                  g$rhs*$11484$tVUFT
                                                                                  g$r$11487$tVUFT
                                                                                  g$mr$11486$tVUFT))))
                                                                            (g$chi-expr*$8578$tVUFT
                                                                              g$init*$11488$tVUFT
                                                                              g$r$11487$tVUFT
                                                                              g$mr$11486$tVUFT)))))
                                                                      g$exp-id*$11492$tVUFT
                                                                      g$exp-name*$11491$tVUFT))))))
                                                             g$internal-exp*$11482$tVUFT
                                                             g$rhs*$11481$tVUFT
                                                             g$lex*$11480$tVUFT
                                                             g$mr$11479$tVUFT
                                                             g$r$11478$tVUFT
                                                             g$init*$11477$tVUFT))))))
                                                    g$swap$11470$tVUFT)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$11517$tVUFT)
                                                        (begin
                                                          (g$inv-collector$11466$tVUFT
                                                            g$inv-collector$11468$tVUFT)
                                                          (set! g$inv-collector$11468$tVUFT
                                                            g$t$11517$tVUFT))))
                                                     (g$inv-collector$11466$tVUFT))
                                                    ((case-lambda
                                                       ((g$t$11518$tVUFT)
                                                        (begin
                                                          (g$vis-collector$11467$tVUFT
                                                            g$vis-collector$11469$tVUFT)
                                                          (set! g$vis-collector$11469$tVUFT
                                                            g$t$11518$tVUFT))))
                                                     (g$vis-collector$11467$tVUFT))))))))
                                           g$inv-collector$8614$tVUFT
                                           g$vis-collector$8615$tVUFT
                                           g$rtc$11460$tVUFT
                                           g$vtc$11461$tVUFT)))
                                       (g$map$5157$tVUFT
                                         g$wrap$11457$tVUFT
                                         g$b*$11438$tVUFT)
                                       (g$map$5157$tVUFT
                                         g$wrap$11457$tVUFT
                                         g$main-exp*$11436$tVUFT)
                                       (g$make-collector$8613$tVUFT)
                                       (g$make-collector$8613$tVUFT)))))
                                 (g$make-top-rib$8612$tVUFT
                                   g$subst-names$11455$tVUFT
                                   g$subst-labels$11454$tVUFT))))
                             g$subst-labels$11453$tVUFT
                             g$subst-names$11452$tVUFT))))))
                    g$swap$11449$tVUFT)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$11520$tVUFT)
                        (begin
                          (g$imp-collector$11445$tVUFT
                            g$imp-collector$11447$tVUFT)
                          (set! g$imp-collector$11447$tVUFT g$t$11520$tVUFT))))
                     (g$imp-collector$11445$tVUFT))
                    ((case-lambda
                       ((g$t$11521$tVUFT)
                        (begin
                          (g$top-level-context$11446$tVUFT
                            g$top-level-context$11448$tVUFT)
                          (set! g$top-level-context$11448$tVUFT
                            g$t$11521$tVUFT))))
                     (g$top-level-context$11446$tVUFT))))))))
           g$imp-collector$8616$tVUFT
           g$top-level-context$8682$tVUFT
           g$itc$11440$tVUFT
           '#f)))))
   (g$core-library-expander$8620$tVUFT
     g$core-library-expander$12138$tVUFT
     (case-lambda
       ((g$e$11522$tVUFT g$verify-name$11523$tVUFT)
        (call-with-values
          (case-lambda (() (g$parse-library$8610$tVUFT g$e$11522$tVUFT)))
          (case-lambda
            ((g$name*$11528$tVUFT
               g$exp*$11529$tVUFT
               g$imp*$11530$tVUFT
               g$b*$11531$tVUFT)
             ((case-lambda
                ((g$b*$11532$tVUFT
                   g$imp*$11533$tVUFT
                   g$exp*$11534$tVUFT
                   g$name*$11535$tVUFT)
                 (call-with-values
                   (case-lambda
                     (() (g$parse-library-name$8609$tVUFT g$name*$11535$tVUFT)))
                   (case-lambda
                     ((g$name$11538$tVUFT g$ver$11539$tVUFT)
                      ((case-lambda
                         ((g$ver$11540$tVUFT g$name$11541$tVUFT)
                          (begin
                            (g$verify-name$11523$tVUFT g$name$11541$tVUFT)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$8619$tVUFT
                                   g$name$11541$tVUFT
                                   g$exp*$11534$tVUFT
                                   g$imp*$11533$tVUFT
                                   g$b*$11532$tVUFT
                                   '#f)))
                              (case-lambda
                                ((g$imp*$11549$tVUFT
                                   g$invoke-req*$11550$tVUFT
                                   g$visit-req*$11551$tVUFT
                                   g$invoke-code$11552$tVUFT
                                   g$visit-code$11553$tVUFT
                                   g$export-subst$11554$tVUFT
                                   g$export-env$11555$tVUFT)
                                 ((case-lambda
                                    ((g$export-env$11556$tVUFT
                                       g$export-subst$11557$tVUFT
                                       g$visit-code$11558$tVUFT
                                       g$invoke-code$11559$tVUFT
                                       g$visit-req*$11560$tVUFT
                                       g$invoke-req*$11561$tVUFT
                                       g$imp*$11562$tVUFT)
                                     (values
                                       g$name$11541$tVUFT
                                       g$ver$11540$tVUFT
                                       g$imp*$11562$tVUFT
                                       g$invoke-req*$11561$tVUFT
                                       g$visit-req*$11560$tVUFT
                                       g$invoke-code$11559$tVUFT
                                       g$visit-code$11558$tVUFT
                                       g$export-subst$11557$tVUFT
                                       g$export-env$11556$tVUFT)))
                                  g$export-env$11555$tVUFT
                                  g$export-subst$11554$tVUFT
                                  g$visit-code$11553$tVUFT
                                  g$invoke-code$11552$tVUFT
                                  g$visit-req*$11551$tVUFT
                                  g$invoke-req*$11550$tVUFT
                                  g$imp*$11549$tVUFT)))))))
                       g$ver$11539$tVUFT
                       g$name$11538$tVUFT))))))
              g$b*$11531$tVUFT
              g$imp*$11530$tVUFT
              g$exp*$11529$tVUFT
              g$name*$11528$tVUFT)))))))
   (g$parse-top-level-program$8621$tVUFT
     g$parse-top-level-program$12139$tVUFT
     (case-lambda
       ((g$e*$11563$tVUFT)
        ((case-lambda
           ((g$t$11564$tVUFT)
            ((case-lambda
               ((g$ls/false$11565$tVUFT)
                (if (if g$ls/false$11565$tVUFT
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$11566$tVUFT
                               g$imp*$11567$tVUFT
                               g$b*$11568$tVUFT)
                             (eq? (g$syntax->datum$8677$tVUFT
                                    g$import$11566$tVUFT)
                                  'import)))
                          g$ls/false$11565$tVUFT))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$11569$tVUFT
                         g$imp*$11570$tVUFT
                         g$b*$11571$tVUFT)
                       (values g$imp*$11570$tVUFT g$b*$11571$tVUFT)))
                    g$ls/false$11565$tVUFT)
                  ((case-lambda
                     ((g$t$11572$tVUFT)
                      ((case-lambda
                         ((g$ls/false$11573$tVUFT)
                          (if (if g$ls/false$11573$tVUFT
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$11574$tVUFT
                                         g$x$11575$tVUFT
                                         g$y$11576$tVUFT)
                                       (eq? (g$syntax->datum$8677$tVUFT
                                              g$import$11574$tVUFT)
                                            'import)))
                                    g$ls/false$11573$tVUFT))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$11577$tVUFT
                                   g$x$11578$tVUFT
                                   g$y$11579$tVUFT)
                                 (g$syntax-violation$8674$tVUFT
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$8280$tVUFT g$e*$11563$tVUFT))))
                              g$ls/false$11573$tVUFT)
                            ((case-lambda
                               ((g$t$11580$tVUFT)
                                ((case-lambda
                                   ((g$ls/false$11581$tVUFT)
                                    (if g$ls/false$11581$tVUFT
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$11581$tVUFT)
                                      (g$syntax-violation$8674$tVUFT
                                        '#f
                                        '"invalid syntax"
                                        g$t$11580$tVUFT))))
                                 (g$syntax-dispatch$8562$tVUFT
                                   g$t$11580$tVUFT
                                   '_))))
                             g$t$11572$tVUFT))))
                       (g$syntax-dispatch$8562$tVUFT
                         g$t$11572$tVUFT
                         '((any . any) . any)))))
                   g$t$11564$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT
               g$t$11564$tVUFT
               '((any . each-any) . each-any)))))
         g$e*$11563$tVUFT))))
   (g$top-level-expander$8622$tVUFT
     g$top-level-expander$12140$tVUFT
     (case-lambda
       ((g$e*$11582$tVUFT)
        (call-with-values
          (case-lambda
            (() (g$parse-top-level-program$8621$tVUFT g$e*$11582$tVUFT)))
          (case-lambda
            ((g$imp*$11585$tVUFT g$b*$11586$tVUFT)
             ((case-lambda
                ((g$b*$11587$tVUFT g$imp*$11588$tVUFT)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$8619$tVUFT
                        '()
                        '()
                        g$imp*$11588$tVUFT
                        g$b*$11587$tVUFT
                        '#t)))
                   (case-lambda
                     ((g$imp*$11596$tVUFT
                        g$invoke-req*$11597$tVUFT
                        g$visit-req*$11598$tVUFT
                        g$invoke-code$11599$tVUFT
                        g$visit-code$11600$tVUFT
                        g$export-subst$11601$tVUFT
                        g$export-env$11602$tVUFT)
                      ((case-lambda
                         ((g$export-env$11603$tVUFT
                            g$export-subst$11604$tVUFT
                            g$visit-code$11605$tVUFT
                            g$invoke-code$11606$tVUFT
                            g$visit-req*$11607$tVUFT
                            g$invoke-req*$11608$tVUFT
                            g$imp*$11609$tVUFT)
                          (values
                            g$invoke-req*$11608$tVUFT
                            g$invoke-code$11606$tVUFT)))
                       g$export-env$11602$tVUFT
                       g$export-subst$11601$tVUFT
                       g$visit-code$11600$tVUFT
                       g$invoke-code$11599$tVUFT
                       g$visit-req*$11598$tVUFT
                       g$invoke-req*$11597$tVUFT
                       g$imp*$11596$tVUFT))))))
              g$b*$11586$tVUFT
              g$imp*$11585$tVUFT)))))))
   (g$9502$8623$tVUFT
     g$9502$12141$tVUFT
     (make-record-type-descriptor
       'env
       '#f
       'g$9505$tVUFT
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$9504$8624$tVUFT g$9504$12142$tVUFT '#f)
   (g$9503$8625$tVUFT
     g$9503$12143$tVUFT
     (make-record-constructor-descriptor
       g$9502$8623$tVUFT
       '#f
       g$9504$8624$tVUFT))
   (g$env?$8626$tVUFT
     g$env?$12144$tVUFT
     (record-predicate g$9502$8623$tVUFT))
   (g$make-env$8627$tVUFT
     g$make-env$12145$tVUFT
     (record-constructor g$9503$8625$tVUFT))
   (g$env-names$8628$tVUFT
     g$env-names$12146$tVUFT
     (record-accessor g$9502$8623$tVUFT '0))
   (g$env-labels$8629$tVUFT
     g$env-labels$12147$tVUFT
     (record-accessor g$9502$8623$tVUFT '1))
   (g$env-itc$8630$tVUFT
     g$env-itc$12148$tVUFT
     (record-accessor g$9502$8623$tVUFT '2))
   (g$set-env-names!$8631$tVUFT
     g$set-env-names!$12149$tVUFT
     (record-mutator g$9502$8623$tVUFT '0))
   (g$set-env-labels!$8632$tVUFT
     g$set-env-labels!$12150$tVUFT
     (record-mutator g$9502$8623$tVUFT '1))
   (g$set-env-itc!$8633$tVUFT
     g$set-env-itc!$12151$tVUFT
     (record-mutator g$9502$8623$tVUFT '2))
   (g$rp$8634$tVUFT
     g$rp$12152$tVUFT
     (make-record-printer
       'env
       (case-lambda
         ((g$x$11610$tVUFT g$p$11611$tVUFT g$wr$11612$tVUFT)
          (display '"#<environment>" g$p$11611$tVUFT)))))
   (g$9521$8635$tVUFT
     g$9521$12153$tVUFT
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$9524$tVUFT
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$9523$8636$tVUFT g$9523$12154$tVUFT '#f)
   (g$9522$8637$tVUFT
     g$9522$12155$tVUFT
     (make-record-constructor-descriptor
       g$9521$8635$tVUFT
       '#f
       g$9523$8636$tVUFT))
   (g$interaction-env?$8638$tVUFT
     g$interaction-env?$12156$tVUFT
     (record-predicate g$9521$8635$tVUFT))
   (g$make-interaction-env$8639$tVUFT
     g$make-interaction-env$12157$tVUFT
     (record-constructor g$9522$8637$tVUFT))
   (g$interaction-env-rib$8640$tVUFT
     g$interaction-env-rib$12158$tVUFT
     (record-accessor g$9521$8635$tVUFT '0))
   (g$interaction-env-r$8641$tVUFT
     g$interaction-env-r$12159$tVUFT
     (record-accessor g$9521$8635$tVUFT '1))
   (g$interaction-env-locs$8642$tVUFT
     g$interaction-env-locs$12160$tVUFT
     (record-accessor g$9521$8635$tVUFT '2))
   (g$set-interaction-env-rib!$8643$tVUFT
     g$set-interaction-env-rib!$12161$tVUFT
     (record-mutator g$9521$8635$tVUFT '0))
   (g$set-interaction-env-r!$8644$tVUFT
     g$set-interaction-env-r!$12162$tVUFT
     (record-mutator g$9521$8635$tVUFT '1))
   (g$set-interaction-env-locs!$8645$tVUFT
     g$set-interaction-env-locs!$12163$tVUFT
     (record-mutator g$9521$8635$tVUFT '2))
   (g$rp$8646$tVUFT
     g$rp$12164$tVUFT
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$11613$tVUFT g$p$11614$tVUFT g$wr$11615$tVUFT)
          (display '"#<environment>" g$p$11614$tVUFT)))))
   (g$interaction-environment-symbols$8647$tVUFT
     g$interaction-environment-symbols$12165$tVUFT
     (case-lambda
       (()
        (g$environment-symbols$8651$tVUFT
          (g$interaction-environment$8681$tVUFT)))))
   (g$environment-bindings$8648$tVUFT
     g$environment-bindings$12166$tVUFT
     (case-lambda
       ((g$e$11616$tVUFT)
        (vector->list
          (g$vector-map$5705$tVUFT
            (case-lambda
              ((g$name$11617$tVUFT g$label$11618$tVUFT)
               (g$parse-binding$8649$tVUFT
                 (cons
                   g$name$11617$tVUFT
                   (g$imported-label->binding$8092$tVUFT
                     g$label$11618$tVUFT)))))
            (g$env-names$8628$tVUFT g$e$11616$tVUFT)
            (g$env-labels$8629$tVUFT g$e$11616$tVUFT))))))
   (g$parse-binding$8649$tVUFT
     g$parse-binding$12167$tVUFT
     (case-lambda
       ((g$b$11619$tVUFT)
        (cons
          (car g$b$11619$tVUFT)
          ((case-lambda
             ((g$t$11620$tVUFT)
              (if (g$memv$5150$tVUFT g$t$11620$tVUFT '(core-prim global))
                'procedure
                (if (g$memv$5150$tVUFT
                      g$t$11620$tVUFT
                      '(core-macro macro global-macro))
                  'syntax
                  (if (g$memv$5150$tVUFT g$t$11620$tVUFT '($core-rtd))
                    'record
                    (if (eq? (car g$b$11619$tVUFT)
                             (g$cadr$5654$tVUFT g$b$11619$tVUFT))
                      'syntax
                      'unknown))))))
           (g$cadr$5654$tVUFT g$b$11619$tVUFT))))))
   (g$environment?$8650$tVUFT
     g$environment?$12168$tVUFT
     (case-lambda
       ((g$x$11621$tVUFT)
        ((case-lambda
           ((g$t$11622$tVUFT)
            (if g$t$11622$tVUFT
              g$t$11622$tVUFT
              (begin '#f (g$interaction-env?$8638$tVUFT g$x$11621$tVUFT)))))
         (g$env?$8626$tVUFT g$x$11621$tVUFT)))))
   (g$environment-symbols$8651$tVUFT
     g$environment-symbols$12169$tVUFT
     (case-lambda
       ((g$x$11623$tVUFT)
        (if (g$env?$8626$tVUFT g$x$11623$tVUFT)
          (vector->list (g$env-names$8628$tVUFT g$x$11623$tVUFT))
          (if (g$interaction-env?$8638$tVUFT g$x$11623$tVUFT)
            (g$map$5157$tVUFT
              values
              (g$rib-sym*$8233$tVUFT
                (g$interaction-env-rib$8640$tVUFT g$x$11623$tVUFT)))
            (assertion-violation
              'environment-symbols
              '"not an environment"
              g$x$11623$tVUFT))))))
   (g$environment$8652$tVUFT
     g$environment$12170$tVUFT
     (case-lambda
       (g$imp*$11624$tVUFT
        ((case-lambda
           ((g$itc$11625$tVUFT)
            ((case-lambda
               ((g$imp-collector$11628$tVUFT g$imp-collector$11629$tVUFT)
                ((case-lambda
                   ((g$swap$11630$tVUFT)
                    (dynamic-wind
                      g$swap$11630$tVUFT
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$8611$tVUFT
                                g$imp*$11624$tVUFT)))
                           (case-lambda
                             ((g$subst-names$11633$tVUFT
                                g$subst-labels$11634$tVUFT)
                              ((case-lambda
                                 ((g$subst-labels$11635$tVUFT
                                    g$subst-names$11636$tVUFT)
                                  (g$make-env$8627$tVUFT
                                    g$subst-names$11636$tVUFT
                                    g$subst-labels$11635$tVUFT
                                    g$itc$11625$tVUFT)))
                               g$subst-labels$11634$tVUFT
                               g$subst-names$11633$tVUFT))))))
                      g$swap$11630$tVUFT)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$11637$tVUFT)
                        (begin
                          (g$imp-collector$11628$tVUFT
                            g$imp-collector$11629$tVUFT)
                          (set! g$imp-collector$11629$tVUFT g$t$11637$tVUFT))))
                     (g$imp-collector$11628$tVUFT)))))))
             g$imp-collector$8616$tVUFT
             g$itc$11625$tVUFT)))
         (g$make-collector$8613$tVUFT)))))
   (g$null-environment$8653$tVUFT
     g$null-environment$12171$tVUFT
     (case-lambda
       ((g$n$11638$tVUFT)
        (begin
          (if (not (eqv? g$n$11638$tVUFT '5))
            (assertion-violation 'null-environment '"not 5" g$n$11638$tVUFT)
            (void))
          (g$environment$8652$tVUFT '(psyntax null-environment-5))))))
   (g$scheme-report-environment$8654$tVUFT
     g$scheme-report-environment$12172$tVUFT
     (case-lambda
       ((g$n$11639$tVUFT)
        (begin
          (if (not (eqv? g$n$11639$tVUFT '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$11639$tVUFT)
            (void))
          (g$environment$8652$tVUFT '(psyntax scheme-report-environment-5))))))
   (g$expand$8655$tVUFT
     g$expand$12173$tVUFT
     (case-lambda
       ((g$x$11640$tVUFT g$env$11641$tVUFT)
        (if (g$env?$8626$tVUFT g$env$11641$tVUFT)
          ((case-lambda
             ((g$rib$11642$tVUFT)
              ((case-lambda
                 ((g$x$11643$tVUFT
                    g$itc$11644$tVUFT
                    g$rtc$11645$tVUFT
                    g$vtc$11646$tVUFT)
                  ((case-lambda
                     ((g$x$11647$tVUFT)
                      (begin
                        (g$seal-rib!$8249$tVUFT g$rib$11642$tVUFT)
                        (values g$x$11647$tVUFT (g$rtc$11645$tVUFT)))))
                   ((case-lambda
                      ((g$top-level-context$11656$tVUFT
                         g$inv-collector$11657$tVUFT
                         g$vis-collector$11658$tVUFT
                         g$imp-collector$11659$tVUFT
                         g$top-level-context$11660$tVUFT
                         g$inv-collector$11661$tVUFT
                         g$vis-collector$11662$tVUFT
                         g$imp-collector$11663$tVUFT)
                       ((case-lambda
                          ((g$swap$11664$tVUFT)
                           (dynamic-wind
                             g$swap$11664$tVUFT
                             (case-lambda
                               (()
                                (g$chi-expr$8580$tVUFT
                                  g$x$11643$tVUFT
                                  '()
                                  '())))
                             g$swap$11664$tVUFT)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$11665$tVUFT)
                                 (begin
                                   (g$top-level-context$11656$tVUFT
                                     g$top-level-context$11660$tVUFT)
                                   (set! g$top-level-context$11660$tVUFT
                                     g$t$11665$tVUFT))))
                              (g$top-level-context$11656$tVUFT))
                             ((case-lambda
                                ((g$t$11666$tVUFT)
                                 (begin
                                   (g$inv-collector$11657$tVUFT
                                     g$inv-collector$11661$tVUFT)
                                   (set! g$inv-collector$11661$tVUFT
                                     g$t$11666$tVUFT))))
                              (g$inv-collector$11657$tVUFT))
                             ((case-lambda
                                ((g$t$11667$tVUFT)
                                 (begin
                                   (g$vis-collector$11658$tVUFT
                                     g$vis-collector$11662$tVUFT)
                                   (set! g$vis-collector$11662$tVUFT
                                     g$t$11667$tVUFT))))
                              (g$vis-collector$11658$tVUFT))
                             ((case-lambda
                                ((g$t$11668$tVUFT)
                                 (begin
                                   (g$imp-collector$11659$tVUFT
                                     g$imp-collector$11663$tVUFT)
                                   (set! g$imp-collector$11663$tVUFT
                                     g$t$11668$tVUFT))))
                              (g$imp-collector$11659$tVUFT))))))))
                    g$top-level-context$8682$tVUFT
                    g$inv-collector$8614$tVUFT
                    g$vis-collector$8615$tVUFT
                    g$imp-collector$8616$tVUFT
                    '#f
                    g$rtc$11645$tVUFT
                    g$vtc$11646$tVUFT
                    g$itc$11644$tVUFT))))
               (g$make-stx$8256$tVUFT
                 g$x$11640$tVUFT
                 g$top-mark*$8220$tVUFT
                 (list g$rib$11642$tVUFT)
                 '())
               (g$env-itc$8630$tVUFT g$env$11641$tVUFT)
               (g$make-collector$8613$tVUFT)
               (g$make-collector$8613$tVUFT))))
           (g$make-top-rib$8612$tVUFT
             (g$env-names$8628$tVUFT g$env$11641$tVUFT)
             (g$env-labels$8629$tVUFT g$env$11641$tVUFT)))
          (if (g$interaction-env?$8638$tVUFT g$env$11641$tVUFT)
            ((case-lambda
               ((g$rib$11669$tVUFT g$r$11670$tVUFT g$rtc$11671$tVUFT)
                ((case-lambda
                   ((g$x$11672$tVUFT)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$11683$tVUFT
                               g$inv-collector$11684$tVUFT
                               g$vis-collector$11685$tVUFT
                               g$imp-collector$11686$tVUFT
                               g$top-level-context$11687$tVUFT
                               g$inv-collector$11688$tVUFT
                               g$vis-collector$11689$tVUFT
                               g$imp-collector$11690$tVUFT)
                             ((case-lambda
                                ((g$swap$11691$tVUFT)
                                 (dynamic-wind
                                   g$swap$11691$tVUFT
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$8618$tVUFT
                                        g$x$11672$tVUFT
                                        g$rib$11669$tVUFT
                                        g$r$11670$tVUFT)))
                                   g$swap$11691$tVUFT)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$11692$tVUFT)
                                       (begin
                                         (g$top-level-context$11683$tVUFT
                                           g$top-level-context$11687$tVUFT)
                                         (set! g$top-level-context$11687$tVUFT
                                           g$t$11692$tVUFT))))
                                    (g$top-level-context$11683$tVUFT))
                                   ((case-lambda
                                      ((g$t$11693$tVUFT)
                                       (begin
                                         (g$inv-collector$11684$tVUFT
                                           g$inv-collector$11688$tVUFT)
                                         (set! g$inv-collector$11688$tVUFT
                                           g$t$11693$tVUFT))))
                                    (g$inv-collector$11684$tVUFT))
                                   ((case-lambda
                                      ((g$t$11694$tVUFT)
                                       (begin
                                         (g$vis-collector$11685$tVUFT
                                           g$vis-collector$11689$tVUFT)
                                         (set! g$vis-collector$11689$tVUFT
                                           g$t$11694$tVUFT))))
                                    (g$vis-collector$11685$tVUFT))
                                   ((case-lambda
                                      ((g$t$11695$tVUFT)
                                       (begin
                                         (g$imp-collector$11686$tVUFT
                                           g$imp-collector$11690$tVUFT)
                                         (set! g$imp-collector$11690$tVUFT
                                           g$t$11695$tVUFT))))
                                    (g$imp-collector$11686$tVUFT))))))))
                          g$top-level-context$8682$tVUFT
                          g$inv-collector$8614$tVUFT
                          g$vis-collector$8615$tVUFT
                          g$imp-collector$8616$tVUFT
                          g$env$11641$tVUFT
                          g$rtc$11671$tVUFT
                          (g$make-collector$8613$tVUFT)
                          (g$make-collector$8613$tVUFT))))
                      (case-lambda
                        ((g$e$11696$tVUFT g$r^$11697$tVUFT)
                         ((case-lambda
                            ((g$r^$11698$tVUFT g$e$11699$tVUFT)
                             (begin
                               (g$set-interaction-env-r!$8644$tVUFT
                                 g$env$11641$tVUFT
                                 g$r^$11698$tVUFT)
                               (values g$e$11699$tVUFT (g$rtc$11671$tVUFT)))))
                          g$r^$11697$tVUFT
                          g$e$11696$tVUFT))))))
                 (g$make-stx$8256$tVUFT
                   g$x$11640$tVUFT
                   g$top-mark*$8220$tVUFT
                   (list g$rib$11669$tVUFT)
                   '()))))
             (g$interaction-env-rib$8640$tVUFT g$env$11641$tVUFT)
             (g$interaction-env-r$8641$tVUFT g$env$11641$tVUFT)
             (g$make-collector$8613$tVUFT))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$11641$tVUFT))))))
   (g$eval$8656$tVUFT
     g$eval$12174$tVUFT
     (case-lambda
       ((g$x$11700$tVUFT g$env$11701$tVUFT)
        (begin
          (if (not (g$environment?$8650$tVUFT g$env$11701$tVUFT))
            (error 'eval '"not an environment" g$env$11701$tVUFT)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$8655$tVUFT g$x$11700$tVUFT g$env$11701$tVUFT)))
            (case-lambda
              ((g$x$11704$tVUFT g$invoke-req*$11705$tVUFT)
               ((case-lambda
                  ((g$invoke-req*$11706$tVUFT g$x$11707$tVUFT)
                   (begin
                     (g$for-each$5158$tVUFT
                       g$invoke-library$8093$tVUFT
                       g$invoke-req*$11706$tVUFT)
                     (eval-core
                       (g$expanded->core$7831$tVUFT g$x$11707$tVUFT)))))
                g$invoke-req*$11705$tVUFT
                g$x$11704$tVUFT))))))))
   (g$expand->core$8657$tVUFT
     g$expand->core$12175$tVUFT
     (case-lambda
       ((g$x$11708$tVUFT g$env$11709$tVUFT)
        (begin
          (if (not (g$environment?$8650$tVUFT g$env$11709$tVUFT))
            (error 'eval '"not an environment" g$env$11709$tVUFT)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$8655$tVUFT g$x$11708$tVUFT g$env$11709$tVUFT)))
            (case-lambda
              ((g$x$11712$tVUFT g$invoke-req*$11713$tVUFT)
               ((case-lambda
                  ((g$invoke-req*$11714$tVUFT g$x$11715$tVUFT)
                   (begin
                     (g$for-each$5158$tVUFT
                       g$invoke-library$8093$tVUFT
                       g$invoke-req*$11714$tVUFT)
                     (g$expanded->core$7831$tVUFT g$x$11715$tVUFT))))
                g$invoke-req*$11713$tVUFT
                g$x$11712$tVUFT))))))))
   (g$library-expander$8658$tVUFT
     g$library-expander$12176$tVUFT
     (case-lambda
       ((g$x$11716$tVUFT g$filename$11717$tVUFT g$verify-name$11718$tVUFT)
        (letrec* ((g$build-visit-code$11719$tVUFT
                    (case-lambda
                      ((g$macro*$11762$tVUFT)
                       (if (null? g$macro*$11762$tVUFT)
                         (g$build-void$8213$tVUFT)
                         (g$build-sequence$8212$tVUFT
                           '#f
                           (g$map$5157$tVUFT
                             (case-lambda
                               ((g$x$11763$tVUFT)
                                ((case-lambda
                                   ((g$loc$11764$tVUFT g$src$11765$tVUFT)
                                    (list
                                      'set!
                                      g$loc$11764$tVUFT
                                      g$src$11765$tVUFT)))
                                 (car g$x$11763$tVUFT)
                                 (g$cddr$5656$tVUFT g$x$11763$tVUFT))))
                             g$macro*$11762$tVUFT))))))
                  (g$visit!$11720$tVUFT
                    (case-lambda
                      ((g$macro*$11758$tVUFT)
                       (g$for-each$5158$tVUFT
                         (case-lambda
                           ((g$x$11759$tVUFT)
                            ((case-lambda
                               ((g$loc$11760$tVUFT g$proc$11761$tVUFT)
                                (set-symbol-value!
                                  g$loc$11760$tVUFT
                                  g$proc$11761$tVUFT)))
                             (car g$x$11759$tVUFT)
                             (g$cadr$5654$tVUFT g$x$11759$tVUFT))))
                         g$macro*$11758$tVUFT)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$8620$tVUFT
                 g$x$11716$tVUFT
                 g$verify-name$11718$tVUFT)))
            (case-lambda
              ((g$name$11730$tVUFT
                 g$ver$11731$tVUFT
                 g$imp*$11732$tVUFT
                 g$inv*$11733$tVUFT
                 g$vis*$11734$tVUFT
                 g$invoke-code$11735$tVUFT
                 g$macro*$11736$tVUFT
                 g$export-subst$11737$tVUFT
                 g$export-env$11738$tVUFT)
               ((case-lambda
                  ((g$export-env$11739$tVUFT
                     g$export-subst$11740$tVUFT
                     g$macro*$11741$tVUFT
                     g$invoke-code$11742$tVUFT
                     g$vis*$11743$tVUFT
                     g$inv*$11744$tVUFT
                     g$imp*$11745$tVUFT
                     g$ver$11746$tVUFT
                     g$name$11747$tVUFT)
                   ((case-lambda
                      ((g$id$11748$tVUFT
                         g$name$11749$tVUFT
                         g$ver$11750$tVUFT
                         g$imp*$11751$tVUFT
                         g$vis*$11752$tVUFT
                         g$inv*$11753$tVUFT
                         g$visit-proc$11754$tVUFT
                         g$invoke-proc$11755$tVUFT
                         g$visit-code$11756$tVUFT
                         g$invoke-code$11757$tVUFT)
                       (begin
                         (g$install-library$8091$tVUFT
                           g$id$11748$tVUFT
                           g$name$11749$tVUFT
                           g$ver$11750$tVUFT
                           g$imp*$11751$tVUFT
                           g$vis*$11752$tVUFT
                           g$inv*$11753$tVUFT
                           g$export-subst$11740$tVUFT
                           g$export-env$11739$tVUFT
                           g$visit-proc$11754$tVUFT
                           g$invoke-proc$11755$tVUFT
                           g$visit-code$11756$tVUFT
                           g$invoke-code$11757$tVUFT
                           '#t
                           g$filename$11717$tVUFT)
                         (values
                           g$id$11748$tVUFT
                           g$name$11749$tVUFT
                           g$ver$11750$tVUFT
                           g$imp*$11751$tVUFT
                           g$vis*$11752$tVUFT
                           g$inv*$11753$tVUFT
                           g$invoke-code$11757$tVUFT
                           g$visit-code$11756$tVUFT
                           g$export-subst$11740$tVUFT
                           g$export-env$11739$tVUFT))))
                    (gensym)
                    g$name$11747$tVUFT
                    g$ver$11746$tVUFT
                    (g$map$5157$tVUFT
                      g$library-spec$8097$tVUFT
                      g$imp*$11745$tVUFT)
                    (g$map$5157$tVUFT
                      g$library-spec$8097$tVUFT
                      g$vis*$11743$tVUFT)
                    (g$map$5157$tVUFT
                      g$library-spec$8097$tVUFT
                      g$inv*$11744$tVUFT)
                    (case-lambda
                      (() (g$visit!$11720$tVUFT g$macro*$11741$tVUFT)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$7831$tVUFT
                           g$invoke-code$11742$tVUFT))))
                    (g$build-visit-code$11719$tVUFT g$macro*$11741$tVUFT)
                    g$invoke-code$11742$tVUFT)))
                g$export-env$11738$tVUFT
                g$export-subst$11737$tVUFT
                g$macro*$11736$tVUFT
                g$invoke-code$11735$tVUFT
                g$vis*$11734$tVUFT
                g$inv*$11733$tVUFT
                g$imp*$11732$tVUFT
                g$ver$11731$tVUFT
                g$name$11730$tVUFT))))))
       ((g$x$11766$tVUFT g$filename$11767$tVUFT)
        (g$library-expander$8658$tVUFT
          g$x$11766$tVUFT
          g$filename$11767$tVUFT
          (case-lambda ((g$x$11768$tVUFT) (values)))))
       ((g$x$11769$tVUFT)
        (g$library-expander$8658$tVUFT
          g$x$11769$tVUFT
          '#f
          (case-lambda ((g$x$11770$tVUFT) (values)))))))
   (g$boot-library-expand$8659$tVUFT
     g$boot-library-expand$12177$tVUFT
     (case-lambda
       ((g$x$11771$tVUFT)
        (call-with-values
          (case-lambda (() (g$library-expander$8658$tVUFT g$x$11771$tVUFT)))
          (case-lambda
            ((g$id$11782$tVUFT
               g$name$11783$tVUFT
               g$ver$11784$tVUFT
               g$imp*$11785$tVUFT
               g$vis*$11786$tVUFT
               g$inv*$11787$tVUFT
               g$invoke-code$11788$tVUFT
               g$visit-code$11789$tVUFT
               g$export-subst$11790$tVUFT
               g$export-env$11791$tVUFT)
             ((case-lambda
                ((g$export-env$11792$tVUFT
                   g$export-subst$11793$tVUFT
                   g$visit-code$11794$tVUFT
                   g$invoke-code$11795$tVUFT
                   g$inv*$11796$tVUFT
                   g$vis*$11797$tVUFT
                   g$imp*$11798$tVUFT
                   g$ver$11799$tVUFT
                   g$name$11800$tVUFT
                   g$id$11801$tVUFT)
                 (values
                   g$name$11800$tVUFT
                   g$invoke-code$11795$tVUFT
                   g$export-subst$11793$tVUFT
                   g$export-env$11792$tVUFT)))
              g$export-env$11791$tVUFT
              g$export-subst$11790$tVUFT
              g$visit-code$11789$tVUFT
              g$invoke-code$11788$tVUFT
              g$inv*$11787$tVUFT
              g$vis*$11786$tVUFT
              g$imp*$11785$tVUFT
              g$ver$11784$tVUFT
              g$name$11783$tVUFT
              g$id$11782$tVUFT)))))))
   (g$rev-map-append$8660$tVUFT
     g$rev-map-append$12178$tVUFT
     (case-lambda
       ((g$f$11802$tVUFT g$ls$11803$tVUFT g$ac$11804$tVUFT)
        (if (null? g$ls$11803$tVUFT)
          g$ac$11804$tVUFT
          (g$rev-map-append$8660$tVUFT
            g$f$11802$tVUFT
            (cdr g$ls$11803$tVUFT)
            (cons
              (g$f$11802$tVUFT (car g$ls$11803$tVUFT))
              g$ac$11804$tVUFT))))))
   (g$build-exports$8661$tVUFT
     g$build-exports$12179$tVUFT
     (case-lambda
       ((g$lex*+loc*$11805$tVUFT g$init*$11806$tVUFT)
        (g$build-sequence$8212$tVUFT
          '#f
          (cons
            (g$build-void$8213$tVUFT)
            (g$rev-map-append$8660$tVUFT
              (case-lambda
                ((g$x$11807$tVUFT)
                 (list 'set! (cdr g$x$11807$tVUFT) (car g$x$11807$tVUFT))))
              g$lex*+loc*$11805$tVUFT
              g$init*$11806$tVUFT))))))
   (g$make-export-subst$8662$tVUFT
     g$make-export-subst$12180$tVUFT
     (case-lambda
       ((g$name*$11808$tVUFT g$id*$11809$tVUFT)
        (g$map$5157$tVUFT
          (case-lambda
            ((g$name$11810$tVUFT g$id$11811$tVUFT)
             ((case-lambda
                ((g$label$11812$tVUFT)
                 (begin
                   (if (not g$label$11812$tVUFT)
                     (g$syntax-violation$8674$tVUFT
                       '#f
                       '"cannot export unbound identifier"
                       g$id$11811$tVUFT)
                     (void))
                   (cons g$name$11810$tVUFT g$label$11812$tVUFT))))
              (g$id->label$8296$tVUFT g$id$11811$tVUFT))))
          g$name*$11808$tVUFT
          g$id*$11809$tVUFT))))
   (g$make-export-env/macros$8663$tVUFT
     g$make-export-env/macros$12181$tVUFT
     (case-lambda
       ((g$lex*$11813$tVUFT g$loc*$11814$tVUFT g$r$11815$tVUFT)
        (letrec* ((g$lookup$11816$tVUFT
                    (case-lambda
                      ((g$x$11832$tVUFT)
                       ((letrec ((g$f$11833$tVUFT
                                   (case-lambda
                                     ((g$x$11834$tVUFT
                                        g$lex*$11835$tVUFT
                                        g$loc*$11836$tVUFT)
                                      (if (pair? g$lex*$11835$tVUFT)
                                        (if (eq? g$x$11834$tVUFT
                                                 (car g$lex*$11835$tVUFT))
                                          (car g$loc*$11836$tVUFT)
                                          (g$f$11833$tVUFT
                                            g$x$11834$tVUFT
                                            (cdr g$lex*$11835$tVUFT)
                                            (cdr g$loc*$11836$tVUFT)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$11833$tVUFT)
                        g$x$11832$tVUFT
                        g$lex*$11813$tVUFT
                        g$loc*$11814$tVUFT)))))
          ((letrec ((g$f$11817$tVUFT
                      (case-lambda
                        ((g$r$11818$tVUFT
                           g$env$11819$tVUFT
                           g$global*$11820$tVUFT
                           g$macro*$11821$tVUFT)
                         (if (null? g$r$11818$tVUFT)
                           (values
                             g$env$11819$tVUFT
                             g$global*$11820$tVUFT
                             g$macro*$11821$tVUFT)
                           ((case-lambda
                              ((g$x$11822$tVUFT)
                               ((case-lambda
                                  ((g$label$11823$tVUFT g$b$11824$tVUFT)
                                   ((case-lambda
                                      ((g$t$11825$tVUFT)
                                       (if (g$memv$5150$tVUFT
                                             g$t$11825$tVUFT
                                             '(lexical))
                                         ((case-lambda
                                            ((g$v$11826$tVUFT)
                                             ((case-lambda
                                                ((g$loc$11827$tVUFT
                                                   g$type$11828$tVUFT)
                                                 (g$f$11817$tVUFT
                                                   (cdr g$r$11818$tVUFT)
                                                   (cons
                                                     (g$cons*$5159$tVUFT
                                                       g$label$11823$tVUFT
                                                       g$type$11828$tVUFT
                                                       g$loc$11827$tVUFT)
                                                     g$env$11819$tVUFT)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$8506$tVUFT
                                                         g$v$11826$tVUFT)
                                                       g$loc$11827$tVUFT)
                                                     g$global*$11820$tVUFT)
                                                   g$macro*$11821$tVUFT)))
                                              (g$lookup$11816$tVUFT
                                                (g$lexical-var$8506$tVUFT
                                                  g$v$11826$tVUFT))
                                              (if (g$lexical-mutable?$8507$tVUFT
                                                    g$v$11826$tVUFT)
                                                'mutable
                                                'global))))
                                          (g$binding-value$8301$tVUFT
                                            g$b$11824$tVUFT))
                                         (if (g$memv$5150$tVUFT
                                               g$t$11825$tVUFT
                                               '(local-macro))
                                           ((case-lambda
                                              ((g$loc$11829$tVUFT)
                                               (g$f$11817$tVUFT
                                                 (cdr g$r$11818$tVUFT)
                                                 (cons
                                                   (g$cons*$5159$tVUFT
                                                     g$label$11823$tVUFT
                                                     'global-macro
                                                     g$loc$11829$tVUFT)
                                                   g$env$11819$tVUFT)
                                                 g$global*$11820$tVUFT
                                                 (cons
                                                   (cons
                                                     g$loc$11829$tVUFT
                                                     (g$binding-value$8301$tVUFT
                                                       g$b$11824$tVUFT))
                                                   g$macro*$11821$tVUFT))))
                                            (gensym))
                                           (if (g$memv$5150$tVUFT
                                                 g$t$11825$tVUFT
                                                 '(local-macro!))
                                             ((case-lambda
                                                ((g$loc$11830$tVUFT)
                                                 (g$f$11817$tVUFT
                                                   (cdr g$r$11818$tVUFT)
                                                   (cons
                                                     (g$cons*$5159$tVUFT
                                                       g$label$11823$tVUFT
                                                       'global-macro!
                                                       g$loc$11830$tVUFT)
                                                     g$env$11819$tVUFT)
                                                   g$global*$11820$tVUFT
                                                   (cons
                                                     (cons
                                                       g$loc$11830$tVUFT
                                                       (g$binding-value$8301$tVUFT
                                                         g$b$11824$tVUFT))
                                                     g$macro*$11821$tVUFT))))
                                              (gensym))
                                             (if (g$memv$5150$tVUFT
                                                   g$t$11825$tVUFT
                                                   '(local-ctv))
                                               ((case-lambda
                                                  ((g$loc$11831$tVUFT)
                                                   (g$f$11817$tVUFT
                                                     (cdr g$r$11818$tVUFT)
                                                     (cons
                                                       (g$cons*$5159$tVUFT
                                                         g$label$11823$tVUFT
                                                         'global-ctv
                                                         g$loc$11831$tVUFT)
                                                       g$env$11819$tVUFT)
                                                     g$global*$11820$tVUFT
                                                     (cons
                                                       (cons
                                                         g$loc$11831$tVUFT
                                                         (g$binding-value$8301$tVUFT
                                                           g$b$11824$tVUFT))
                                                       g$macro*$11821$tVUFT))))
                                                (gensym))
                                               (if (g$memv$5150$tVUFT
                                                     g$t$11825$tVUFT
                                                     '($rtd $module))
                                                 (g$f$11817$tVUFT
                                                   (cdr g$r$11818$tVUFT)
                                                   (cons
                                                     g$x$11822$tVUFT
                                                     g$env$11819$tVUFT)
                                                   g$global*$11820$tVUFT
                                                   g$macro*$11821$tVUFT)
                                                 (assertion-violation
                                                   'expander
                                                   '"BUG: do not know how to export"
                                                   (g$binding-type$8300$tVUFT
                                                     g$b$11824$tVUFT)
                                                   (g$binding-value$8301$tVUFT
                                                     g$b$11824$tVUFT)))))))))
                                    (g$binding-type$8300$tVUFT
                                      g$b$11824$tVUFT))))
                                (car g$x$11822$tVUFT)
                                (cdr g$x$11822$tVUFT))))
                            (car g$r$11818$tVUFT)))))))
             g$f$11817$tVUFT)
           g$r$11815$tVUFT
           '()
           '()
           '())))))
   (g$generate-temporaries$8664$tVUFT
     g$generate-temporaries$12182$tVUFT
     (case-lambda
       ((g$ls$11837$tVUFT)
        ((case-lambda
           ((g$t$11838$tVUFT)
            ((case-lambda
               ((g$ls/false$11839$tVUFT)
                (if g$ls/false$11839$tVUFT
                  (apply
                    (case-lambda
                      ((g$ls$11840$tVUFT)
                       (g$map$5157$tVUFT
                         (case-lambda
                           ((g$x$11841$tVUFT)
                            (g$make-stx$8256$tVUFT
                              ((case-lambda
                                 ((g$x$11842$tVUFT)
                                  (if ((case-lambda
                                         ((g$t$11843$tVUFT)
                                          (if g$t$11843$tVUFT
                                            g$t$11843$tVUFT
                                            (begin
                                              '#f
                                              (string? g$x$11842$tVUFT)))))
                                       (g$symbol?$5645$tVUFT g$x$11842$tVUFT))
                                    (gensym g$x$11842$tVUFT)
                                    (gensym 't))))
                               (g$syntax->datum$8677$tVUFT g$x$11841$tVUFT))
                              g$top-mark*$8220$tVUFT
                              '()
                              '())))
                         g$ls$11840$tVUFT)))
                    g$ls/false$11839$tVUFT)
                  ((case-lambda
                     ((g$t$11844$tVUFT)
                      ((case-lambda
                         ((g$ls/false$11845$tVUFT)
                          (if g$ls/false$11845$tVUFT
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$11845$tVUFT)
                            (g$syntax-violation$8674$tVUFT
                              '#f
                              '"invalid syntax"
                              g$t$11844$tVUFT))))
                       (g$syntax-dispatch$8562$tVUFT g$t$11844$tVUFT '_))))
                   g$t$11838$tVUFT))))
             (g$syntax-dispatch$8562$tVUFT g$t$11838$tVUFT 'each-any))))
         g$ls$11837$tVUFT))))
   (g$free-identifier=?$8665$tVUFT
     g$free-identifier=?$12183$tVUFT
     (case-lambda
       ((g$x$11846$tVUFT g$y$11847$tVUFT)
        (if (g$id?$8283$tVUFT g$x$11846$tVUFT)
          (if (g$id?$8283$tVUFT g$y$11847$tVUFT)
            (g$free-id=?$8287$tVUFT g$x$11846$tVUFT g$y$11847$tVUFT)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$11847$tVUFT))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$11846$tVUFT)))))
   (g$bound-identifier=?$8666$tVUFT
     g$bound-identifier=?$12184$tVUFT
     (case-lambda
       ((g$x$11848$tVUFT g$y$11849$tVUFT)
        (if (g$id?$8283$tVUFT g$x$11848$tVUFT)
          (if (g$id?$8283$tVUFT g$y$11849$tVUFT)
            (g$bound-id=?$8286$tVUFT g$x$11848$tVUFT g$y$11849$tVUFT)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$11849$tVUFT))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$11848$tVUFT)))))
   (g$make-source-condition$8667$tVUFT
     g$make-source-condition$12185$tVUFT
     (case-lambda
       ((g$x$11850$tVUFT)
        (letrec* ((g$12471$11851$tVUFT
                    (make-record-type-descriptor
                      '&source-information
                      g$&condition-rtd$6200$tVUFT
                      'g$12474$tVUFT
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$12473$11852$tVUFT '#f)
                  (g$12472$11853$tVUFT
                    (make-record-constructor-descriptor
                      g$12471$11851$tVUFT
                      g$&condition-rcd$6201$tVUFT
                      g$12473$11852$tVUFT))
                  (g$12470$11854$tVUFT (record-predicate g$12471$11851$tVUFT))
                  (g$make-source-condition$11855$tVUFT
                    (record-constructor g$12472$11853$tVUFT))
                  (g$12468$11856$tVUFT (record-accessor g$12471$11851$tVUFT '0))
                  (g$12469$11857$tVUFT (record-accessor g$12471$11851$tVUFT '1))
                  (g$source-condition?$11858$tVUFT
                    (condition-predicate g$12471$11851$tVUFT))
                  (g$source-filename$11859$tVUFT
                    (condition-accessor
                      g$12471$11851$tVUFT
                      g$12468$11856$tVUFT))
                  (g$source-character$11860$tVUFT
                    (condition-accessor
                      g$12471$11851$tVUFT
                      g$12469$11857$tVUFT)))
          (if (pair? g$x$11850$tVUFT)
            (g$make-source-condition$11855$tVUFT
              (car g$x$11850$tVUFT)
              (cdr g$x$11850$tVUFT))
            (condition))))))
   (g$extract-position-condition$8668$tVUFT
     g$extract-position-condition$12186$tVUFT
     (case-lambda
       ((g$x$11861$tVUFT)
        (g$make-source-condition$8667$tVUFT
          (g$expression-position$8669$tVUFT g$x$11861$tVUFT)))))
   (g$expression-position$8669$tVUFT
     g$expression-position$12187$tVUFT
     (case-lambda
       ((g$x$11862$tVUFT)
        (if (g$stx?$8255$tVUFT g$x$11862$tVUFT)
          (begin
            '#f
            ((case-lambda
               ((g$x$11863$tVUFT)
                (if (annotation? g$x$11863$tVUFT)
                  (begin '#f (annotation-source g$x$11863$tVUFT))
                  '#f)))
             (g$stx-expr$8257$tVUFT g$x$11862$tVUFT)))
          '#f))))
   (g$assertion-error$8670$tVUFT
     g$assertion-error$12188$tVUFT
     (case-lambda
       ((g$expr$11864$tVUFT g$pos$11865$tVUFT)
        (raise
          (condition
            (g$make-assertion-violation$6248$tVUFT)
            (g$make-who-condition$6266$tVUFT 'assert)
            (g$make-message-condition$6206$tVUFT '"assertion failed")
            (g$make-irritants-condition$6256$tVUFT (list g$expr$11864$tVUFT))
            (g$make-source-condition$8667$tVUFT g$pos$11865$tVUFT))))))
   (g$syntax-error$8671$tVUFT
     g$syntax-error$12189$tVUFT
     (case-lambda
       ((g$x$11866$tVUFT . g$args$11867$tVUFT)
        (begin
          (if (not (g$for-all$5155$tVUFT string? g$args$11867$tVUFT))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$11867$tVUFT)
            (void))
          (raise
            (condition
              (g$make-message-condition$6206$tVUFT
                (if (null? g$args$11867$tVUFT)
                  '"invalid syntax"
                  (apply string-append g$args$11867$tVUFT)))
              (g$make-syntax-violation$6300$tVUFT
                (g$syntax->datum$8677$tVUFT g$x$11866$tVUFT)
                '#f)
              (g$extract-position-condition$8668$tVUFT g$x$11866$tVUFT)
              (g$extract-trace$8672$tVUFT g$x$11866$tVUFT)))))))
   (g$extract-trace$8672$tVUFT
     g$extract-trace$12190$tVUFT
     (case-lambda
       ((g$x$11868$tVUFT)
        (letrec* ((g$12498$11869$tVUFT
                    (make-record-type-descriptor
                      '&trace
                      g$&condition-rtd$6200$tVUFT
                      'g$12501$tVUFT
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$12500$11870$tVUFT '#f)
                  (g$12499$11871$tVUFT
                    (make-record-constructor-descriptor
                      g$12498$11869$tVUFT
                      g$&condition-rcd$6201$tVUFT
                      g$12500$11870$tVUFT))
                  (g$12497$11872$tVUFT (record-predicate g$12498$11869$tVUFT))
                  (g$make-trace$11873$tVUFT
                    (record-constructor g$12499$11871$tVUFT))
                  (g$12496$11874$tVUFT (record-accessor g$12498$11869$tVUFT '0))
                  (g$trace?$11875$tVUFT
                    (condition-predicate g$12498$11869$tVUFT))
                  (g$trace-form$11876$tVUFT
                    (condition-accessor
                      g$12498$11869$tVUFT
                      g$12496$11874$tVUFT)))
          ((letrec ((g$f$11877$tVUFT
                      (case-lambda
                        ((g$x$11878$tVUFT)
                         (if (g$stx?$8255$tVUFT g$x$11878$tVUFT)
                           (apply
                             condition
                             (g$make-trace$11873$tVUFT g$x$11878$tVUFT)
                             (g$map$5157$tVUFT
                               g$f$11877$tVUFT
                               (g$stx-ae*$8260$tVUFT g$x$11878$tVUFT)))
                           (if (annotation? g$x$11878$tVUFT)
                             (g$make-trace$11873$tVUFT
                               (g$make-stx$8256$tVUFT
                                 g$x$11878$tVUFT
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$11877$tVUFT)
           g$x$11868$tVUFT)))))
   (g$syntax-violation*$8673$tVUFT
     g$syntax-violation*$12191$tVUFT
     (case-lambda
       ((g$who$11879$tVUFT
          g$msg$11880$tVUFT
          g$form$11881$tVUFT
          g$condition-object$11882$tVUFT)
        (begin
          (if (not (string? g$msg$11880$tVUFT))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$11880$tVUFT)
            (void))
          ((case-lambda
             ((g$who$11883$tVUFT)
              (raise
                (condition
                  (if g$who$11883$tVUFT
                    (g$make-who-condition$6266$tVUFT g$who$11883$tVUFT)
                    (condition))
                  (g$make-message-condition$6206$tVUFT g$msg$11880$tVUFT)
                  g$condition-object$11882$tVUFT
                  (g$extract-position-condition$8668$tVUFT g$form$11881$tVUFT)
                  (g$extract-trace$8672$tVUFT g$form$11881$tVUFT)))))
           (if ((case-lambda
                  ((g$t$11884$tVUFT)
                   (if g$t$11884$tVUFT
                     g$t$11884$tVUFT
                     (begin '#f (g$symbol?$5645$tVUFT g$who$11879$tVUFT)))))
                (string? g$who$11879$tVUFT))
             g$who$11879$tVUFT
             (if (not g$who$11879$tVUFT)
               ((case-lambda
                  ((g$t$11885$tVUFT)
                   ((case-lambda
                      ((g$ls/false$11886$tVUFT)
                       (if (if g$ls/false$11886$tVUFT
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$11887$tVUFT)
                                    (g$id?$8283$tVUFT g$id$11887$tVUFT)))
                                 g$ls/false$11886$tVUFT))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$11888$tVUFT)
                              (g$syntax->datum$8677$tVUFT g$id$11888$tVUFT)))
                           g$ls/false$11886$tVUFT)
                         ((case-lambda
                            ((g$t$11889$tVUFT)
                             ((case-lambda
                                ((g$ls/false$11890$tVUFT)
                                 (if (if g$ls/false$11890$tVUFT
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$11891$tVUFT
                                                g$rest$11892$tVUFT)
                                              (g$id?$8283$tVUFT
                                                g$id$11891$tVUFT)))
                                           g$ls/false$11890$tVUFT))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$11893$tVUFT g$rest$11894$tVUFT)
                                        (g$syntax->datum$8677$tVUFT
                                          g$id$11893$tVUFT)))
                                     g$ls/false$11890$tVUFT)
                                   ((case-lambda
                                      ((g$t$11895$tVUFT)
                                       ((case-lambda
                                          ((g$ls/false$11896$tVUFT)
                                           (if g$ls/false$11896$tVUFT
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$11896$tVUFT)
                                             (g$syntax-violation$8674$tVUFT
                                               '#f
                                               '"invalid syntax"
                                               g$t$11895$tVUFT))))
                                        (g$syntax-dispatch$8562$tVUFT
                                          g$t$11895$tVUFT
                                          '_))))
                                    g$t$11889$tVUFT))))
                              (g$syntax-dispatch$8562$tVUFT
                                g$t$11889$tVUFT
                                '(any . any)))))
                          g$t$11885$tVUFT))))
                    (g$syntax-dispatch$8562$tVUFT g$t$11885$tVUFT 'any))))
                g$form$11881$tVUFT)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$11879$tVUFT))))))))
   (g$syntax-violation$8674$tVUFT
     g$syntax-violation$12192$tVUFT
     (case-lambda
       ((g$who$11897$tVUFT g$msg$11898$tVUFT g$form$11899$tVUFT)
        (g$syntax-violation$8674$tVUFT
          g$who$11897$tVUFT
          g$msg$11898$tVUFT
          g$form$11899$tVUFT
          '#f))
       ((g$who$11900$tVUFT
          g$msg$11901$tVUFT
          g$form$11902$tVUFT
          g$subform$11903$tVUFT)
        (g$syntax-violation*$8673$tVUFT
          g$who$11900$tVUFT
          g$msg$11901$tVUFT
          g$form$11902$tVUFT
          (g$make-syntax-violation$6300$tVUFT
            (g$syntax->datum$8677$tVUFT g$form$11902$tVUFT)
            (g$syntax->datum$8677$tVUFT g$subform$11903$tVUFT))))))
   (g$identifier?$8675$tVUFT
     g$identifier?$12193$tVUFT
     (case-lambda ((g$x$11904$tVUFT) (g$id?$8283$tVUFT g$x$11904$tVUFT))))
   (g$datum->syntax$8676$tVUFT
     g$datum->syntax$12194$tVUFT
     (case-lambda
       ((g$id$11905$tVUFT g$datum$11906$tVUFT)
        (if (g$id?$8283$tVUFT g$id$11905$tVUFT)
          (g$datum->stx$8266$tVUFT g$id$11905$tVUFT g$datum$11906$tVUFT)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$11905$tVUFT)))))
   (g$syntax->datum$8677$tVUFT
     g$syntax->datum$12195$tVUFT
     (case-lambda
       ((g$x$11907$tVUFT) (g$stx->datum$8294$tVUFT g$x$11907$tVUFT))))
   (g$compile-r6rs-top-level$8678$tVUFT
     g$compile-r6rs-top-level$12196$tVUFT
     (case-lambda
       ((g$x*$11908$tVUFT)
        (call-with-values
          (case-lambda (() (g$top-level-expander$8622$tVUFT g$x*$11908$tVUFT)))
          (case-lambda
            ((g$lib*$11911$tVUFT g$invoke-code$11912$tVUFT)
             ((case-lambda
                ((g$invoke-code$11913$tVUFT g$lib*$11914$tVUFT)
                 (case-lambda
                   (()
                    (begin
                      (g$for-each$5158$tVUFT
                        g$invoke-library$8093$tVUFT
                        g$lib*$11914$tVUFT)
                      (eval-core
                        (g$expanded->core$7831$tVUFT
                          g$invoke-code$11913$tVUFT)))))))
              g$invoke-code$11912$tVUFT
              g$lib*$11911$tVUFT)))))))
   (g$pre-compile-r6rs-top-level$8679$tVUFT
     g$pre-compile-r6rs-top-level$12197$tVUFT
     (case-lambda
       ((g$x*$11915$tVUFT)
        (call-with-values
          (case-lambda (() (g$top-level-expander$8622$tVUFT g$x*$11915$tVUFT)))
          (case-lambda
            ((g$lib*$11918$tVUFT g$invoke-code$11919$tVUFT)
             ((case-lambda
                ((g$invoke-code$11920$tVUFT g$lib*$11921$tVUFT)
                 (begin
                   (g$for-each$5158$tVUFT
                     g$invoke-library$8093$tVUFT
                     g$lib*$11921$tVUFT)
                   (compile-core
                     (g$expanded->core$7831$tVUFT g$invoke-code$11920$tVUFT)))))
              g$invoke-code$11919$tVUFT
              g$lib*$11918$tVUFT)))))))
   (g$new-interaction-environment$8680$tVUFT
     g$new-interaction-environment$12198$tVUFT
     (case-lambda
       (()
        ((case-lambda
           ((g$lib$11922$tVUFT g$rib$11923$tVUFT)
            (begin
              ((case-lambda
                 ((g$subst$11924$tVUFT)
                  (begin
                    (g$set-rib-sym*!$8238$tVUFT
                      g$rib$11923$tVUFT
                      (g$map$5157$tVUFT car g$subst$11924$tVUFT))
                    (g$set-rib-mark**!$8239$tVUFT
                      g$rib$11923$tVUFT
                      (g$map$5157$tVUFT
                        (case-lambda ((g$x$11925$tVUFT) g$top-mark*$8220$tVUFT))
                        g$subst$11924$tVUFT))
                    (g$set-rib-label*!$8240$tVUFT
                      g$rib$11923$tVUFT
                      (g$map$5157$tVUFT cdr g$subst$11924$tVUFT)))))
               (g$library-subst$8050$tVUFT g$lib$11922$tVUFT))
              (g$make-interaction-env$8639$tVUFT g$rib$11923$tVUFT '() '()))))
         (g$find-library-by-name$8086$tVUFT '(ironscheme))
         (g$make-empty-rib$8243$tVUFT)))))
   (g$interaction-environment$8681$tVUFT
     g$interaction-environment$12199$tVUFT
     ((case-lambda
        ((g$e$11926$tVUFT)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$11927$tVUFT)
                (if g$t$11927$tVUFT
                  g$t$11927$tVUFT
                  (begin
                    '#f
                    (begin
                      (set! g$e$11926$tVUFT
                        (g$new-interaction-environment$8680$tVUFT))
                      g$e$11926$tVUFT)))))
             g$e$11926$tVUFT)))))
      '#f))
   (g$top-level-context$8682$tVUFT
     g$top-level-context$12200$tVUFT
     (g$make-parameter$7583$tVUFT '#f)))
  (g$current-library-expander$8083$tVUFT g$library-expander$8658$tVUFT))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$7828$tVUFT
      (case-lambda
        ((g$x$12271$tVUFT)
         ((case-lambda
            ((g$t$12272$tVUFT) (if g$t$12272$tVUFT (cdr g$t$12272$tVUFT) '#f)))
          (g$assq$5145$tVUFT
            g$x$12271$tVUFT
            '((ellipsis-map . g$ellipsis-map$12085$tVUFT)
              (&no-nans-rcd . g$&no-nans-rcd$6435$tVUFT)
              (&no-nans-rtd . g$&no-nans-rtd$6434$tVUFT)
              (&no-infinities-rcd . g$&no-infinities-rcd$6427$tVUFT)
              (&no-infinities-rtd . g$&no-infinities-rtd$6426$tVUFT)
              (&i/o-encoding-rcd . g$&i/o-encoding-rcd$6419$tVUFT)
              (&i/o-encoding-rtd . g$&i/o-encoding-rtd$6418$tVUFT)
              (&i/o-decoding-rcd . g$&i/o-decoding-rcd$6409$tVUFT)
              (&i/o-decoding-rtd . g$&i/o-decoding-rtd$6408$tVUFT)
              (&i/o-port-rcd . g$&i/o-port-rcd$6401$tVUFT)
              (&i/o-port-rtd . g$&i/o-port-rtd$6400$tVUFT)
              (&i/o-file-does-not-exist-rcd
                .
                g$&i/o-file-does-not-exist-rcd$6391$tVUFT)
              (&i/o-file-does-not-exist-rtd
                .
                g$&i/o-file-does-not-exist-rtd$6390$tVUFT)
              (&i/o-file-already-exists-rcd
                .
                g$&i/o-file-already-exists-rcd$6383$tVUFT)
              (&i/o-file-already-exists-rtd
                .
                g$&i/o-file-already-exists-rtd$6382$tVUFT)
              (&i/o-file-is-read-only-rcd
                .
                g$&i/o-file-is-read-only-rcd$6375$tVUFT)
              (&i/o-file-is-read-only-rtd
                .
                g$&i/o-file-is-read-only-rtd$6374$tVUFT)
              (&i/o-file-protection-rcd . g$&i/o-file-protection-rcd$6367$tVUFT)
              (&i/o-file-protection-rtd . g$&i/o-file-protection-rtd$6366$tVUFT)
              (&i/o-filename-rcd . g$&i/o-filename-rcd$6359$tVUFT)
              (&i/o-filename-rtd . g$&i/o-filename-rtd$6358$tVUFT)
              (&i/o-invalid-position-rcd
                .
                g$&i/o-invalid-position-rcd$6349$tVUFT)
              (&i/o-invalid-position-rtd
                .
                g$&i/o-invalid-position-rtd$6348$tVUFT)
              (&i/o-write-rcd . g$&i/o-write-rcd$6339$tVUFT)
              (&i/o-write-rtd . g$&i/o-write-rtd$6338$tVUFT)
              (&i/o-read-rcd . g$&i/o-read-rcd$6331$tVUFT)
              (&i/o-read-rtd . g$&i/o-read-rtd$6330$tVUFT)
              (&i/o-rcd . g$&i/o-rcd$6323$tVUFT)
              (&i/o-rtd . g$&i/o-rtd$6322$tVUFT)
              (&undefined-rcd . g$&undefined-rcd$6315$tVUFT)
              (&undefined-rtd . g$&undefined-rtd$6314$tVUFT)
              (&syntax-rcd . g$&syntax-rcd$6307$tVUFT)
              (&syntax-rtd . g$&syntax-rtd$6306$tVUFT)
              (&lexical-rcd . g$&lexical-rcd$6295$tVUFT)
              (&lexical-rtd . g$&lexical-rtd$6294$tVUFT)
              (&implementation-restriction-rcd
                .
                g$&implementation-restriction-rcd$6287$tVUFT)
              (&implementation-restriction-rtd
                .
                g$&implementation-restriction-rtd$6286$tVUFT)
              (&non-continuable-rcd . g$&non-continuable-rcd$6279$tVUFT)
              (&non-continuable-rtd . g$&non-continuable-rtd$6278$tVUFT)
              (&who-rcd . g$&who-rcd$6271$tVUFT)
              (&who-rtd . g$&who-rtd$6270$tVUFT)
              (&irritants-rcd . g$&irritants-rcd$6261$tVUFT)
              (&irritants-rtd . g$&irritants-rtd$6260$tVUFT)
              (&assertion-rcd . g$&assertion-rcd$6251$tVUFT)
              (&assertion-rtd . g$&assertion-rtd$6250$tVUFT)
              (&violation-rcd . g$&violation-rcd$6243$tVUFT)
              (&violation-rtd . g$&violation-rtd$6242$tVUFT)
              (&error-rcd . g$&error-rcd$6235$tVUFT)
              (&error-rtd . g$&error-rtd$6234$tVUFT)
              (&serious-rcd . g$&serious-rcd$6227$tVUFT)
              (&serious-rtd . g$&serious-rtd$6226$tVUFT)
              (&warning-rcd . g$&warning-rcd$6219$tVUFT)
              (&warning-rtd . g$&warning-rtd$6218$tVUFT)
              (&message-rcd . g$&message-rcd$6211$tVUFT)
              (&message-rtd . g$&message-rtd$6210$tVUFT)
              (&condition-rcd . g$&condition-rcd$6201$tVUFT)
              (&condition-rtd . g$&condition-rtd$6200$tVUFT)
              (make-list . g$make-list$5140$tVUFT)
              (last-pair . g$last-pair$5139$tVUFT)
              (ironscheme-build . g$ironscheme-build$12263$tVUFT)
              (syntax-error . g$syntax-error$12189$tVUFT)
              (syntax-dispatch . g$syntax-dispatch$12080$tVUFT)
              (compile-system-libraries
                .
                g$compile-system-libraries$12266$tVUFT)
              (compile->closure . g$compile->closure$12268$tVUFT)
              (compile . g$compile$12267$tVUFT)
              (load . g$load$12262$tVUFT)
              (interaction-environment . g$interaction-environment$12199$tVUFT)
              (string-normalize-nfkd . g$string-normalize-nfkd$6593$tVUFT)
              (string-normalize-nfkc . g$string-normalize-nfkc$6592$tVUFT)
              (string-normalize-nfd . g$string-normalize-nfd$6591$tVUFT)
              (string-normalize-nfc . g$string-normalize-nfc$6590$tVUFT)
              (string-ci>? . g$string-ci>?$6582$tVUFT)
              (string-ci>=? . g$string-ci>=?$6584$tVUFT)
              (string-ci=? . g$string-ci=?$6580$tVUFT)
              (string-ci<? . g$string-ci<?$6581$tVUFT)
              (string-ci<=? . g$string-ci<=?$6583$tVUFT)
              (char-ci>? . g$char-ci>?$6587$tVUFT)
              (char-ci>=? . g$char-ci>=?$6589$tVUFT)
              (char-ci=? . g$char-ci=?$6585$tVUFT)
              (char-ci<? . g$char-ci<?$6586$tVUFT)
              (char-ci<=? . g$char-ci<=?$6588$tVUFT)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$12018$tVUFT)
              (variable-transformer? . g$variable-transformer?$12017$tVUFT)
              (make-variable-transformer
                .
                g$make-variable-transformer$12015$tVUFT)
              (identifier? . g$identifier?$12193$tVUFT)
              (generate-temporaries . g$generate-temporaries$12182$tVUFT)
              (free-identifier=? . g$free-identifier=?$12183$tVUFT)
              (syntax->datum . g$syntax->datum$12195$tVUFT)
              (datum->syntax . g$datum->syntax$12194$tVUFT)
              (bound-identifier=? . g$bound-identifier=?$12184$tVUFT)
              (delete-file . g$delete-file$5763$tVUFT)
              (file-exists? . g$file-exists?$5762$tVUFT)
              (list-sort . g$list-sort$6499$tVUFT)
              (make-eqv-hashtable . g$make-eqv-hashtable$5745$tVUFT)
              (make-eq-hashtable . g$make-eq-hashtable$5744$tVUFT)
              (hashtable-update! . g$hashtable-update!$5751$tVUFT)
              (hashtable-size . g$hashtable-size$5746$tVUFT)
              (hashtable-set! . g$hashtable-set!$5748$tVUFT)
              (hashtable-ref . g$hashtable-ref$5747$tVUFT)
              (hashtable-delete! . g$hashtable-delete!$5749$tVUFT)
              (hashtable-contains? . g$hashtable-contains?$5750$tVUFT)
              (hashtable-clear! . g$hashtable-clear!$5752$tVUFT)
              (call-with-output-file . g$call-with-output-file$6985$tVUFT)
              (call-with-input-file . g$call-with-input-file$6984$tVUFT)
              (write-char . g$write-char$6981$tVUFT)
              (with-output-to-file . g$with-output-to-file$6983$tVUFT)
              (with-input-from-file . g$with-input-from-file$6982$tVUFT)
              (read-char . g$read-char$6980$tVUFT)
              (peek-char . g$peek-char$6979$tVUFT)
              (newline . g$newline$6986$tVUFT)
              (put-datum . g$put-datum$6929$tVUFT)
              (port? . g$port?$6934$tVUFT)
              (open-string-output-port . g$open-string-output-port$6933$tVUFT)
              (make-i/o-write-error . g$make-i/o-write-error$6336$tVUFT)
              (make-i/o-read-error . g$make-i/o-read-error$6328$tVUFT)
              (make-i/o-port-error . g$make-i/o-port-error$6396$tVUFT)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$6344$tVUFT)
              (make-i/o-filename-error . g$make-i/o-filename-error$6354$tVUFT)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$6364$tVUFT)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$6372$tVUFT)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$6388$tVUFT)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$6380$tVUFT)
              (make-i/o-error . g$make-i/o-error$6320$tVUFT)
              (make-i/o-encoding-error . g$make-i/o-encoding-error$6414$tVUFT)
              (make-i/o-decoding-error . g$make-i/o-decoding-error$6406$tVUFT)
              (i/o-write-error? . g$i/o-write-error?$6337$tVUFT)
              (i/o-read-error? . g$i/o-read-error?$6329$tVUFT)
              (i/o-port-error? . g$i/o-port-error?$6398$tVUFT)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$6346$tVUFT)
              (i/o-error-position . g$i/o-error-position$6347$tVUFT)
              (i/o-filename-error? . g$i/o-filename-error?$6356$tVUFT)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$6365$tVUFT)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$6373$tVUFT)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$6389$tVUFT)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$6381$tVUFT)
              (i/o-error? . g$i/o-error?$6321$tVUFT)
              (i/o-error-port . g$i/o-error-port$6399$tVUFT)
              (i/o-error-filename . g$i/o-error-filename$6357$tVUFT)
              (i/o-encoding-error? . g$i/o-encoding-error?$6416$tVUFT)
              (i/o-encoding-error-char . g$i/o-encoding-error-char$6417$tVUFT)
              (i/o-decoding-error? . g$i/o-decoding-error?$6407$tVUFT)
              (get-datum . g$get-datum$6930$tVUFT)
              (call-with-string-output-port
                .
                g$call-with-string-output-port$6935$tVUFT)
              (call-with-port . g$call-with-port$6936$tVUFT)
              (scheme-report-environment
                .
                g$scheme-report-environment$12172$tVUFT)
              (quotient . g$quotient$6466$tVUFT)
              (null-environment . g$null-environment$12171$tVUFT)
              (remainder . g$remainder$6467$tVUFT)
              (modulo . g$modulo$6468$tVUFT)
              (inexact->exact . g$inexact->exact$6463$tVUFT)
              (force . g$force$6470$tVUFT)
              (exact->inexact . g$exact->inexact$6464$tVUFT)
              (command-line . g$command-line$12259$tVUFT)
              (remove . g$remove$5162$tVUFT)
              (remv . g$remv$5163$tVUFT)
              (remp . g$remp$5143$tVUFT)
              (remq . g$remq$5164$tVUFT)
              (partition . g$partition$5142$tVUFT)
              (memv . g$memv$5150$tVUFT)
              (memq . g$memq$5149$tVUFT)
              (memp . g$memp$5152$tVUFT)
              (member . g$member$5151$tVUFT)
              (exists . g$exists$5156$tVUFT)
              (for-all . g$for-all$5155$tVUFT)
              (fold-right . g$fold-right$5161$tVUFT)
              (fold-left . g$fold-left$5160$tVUFT)
              (find . g$find$5141$tVUFT)
              (filter . g$filter$5144$tVUFT)
              (cons* . g$cons*$5159$tVUFT)
              (assv . g$assv$5146$tVUFT)
              (assq . g$assq$5145$tVUFT)
              (assp . g$assp$5148$tVUFT)
              (assoc . g$assoc$5147$tVUFT)
              (eval . g$eval$12174$tVUFT)
              (environment . g$environment$12170$tVUFT)
              (make-enumeration . g$make-enumeration$7118$tVUFT)
              (enum-set=? . g$enum-set=?$7125$tVUFT)
              (enum-set-universe . g$enum-set-universe$7119$tVUFT)
              (enum-set-union . g$enum-set-union$7126$tVUFT)
              (enum-set-subset? . g$enum-set-subset?$7124$tVUFT)
              (enum-set-projection . g$enum-set-projection$7130$tVUFT)
              (enum-set-member? . g$enum-set-member?$7123$tVUFT)
              (enum-set-intersection . g$enum-set-intersection$7127$tVUFT)
              (enum-set-indexer . g$enum-set-indexer$7120$tVUFT)
              (enum-set-difference . g$enum-set-difference$7128$tVUFT)
              (enum-set-constructor . g$enum-set-constructor$7121$tVUFT)
              (enum-set-complement . g$enum-set-complement$7129$tVUFT)
              (enum-set->list . g$enum-set->list$7122$tVUFT)
              (who-condition? . g$who-condition?$6268$tVUFT)
              (warning? . g$warning?$6217$tVUFT)
              (violation? . g$violation?$6241$tVUFT)
              (undefined-violation? . g$undefined-violation?$6313$tVUFT)
              (syntax-violation? . g$syntax-violation?$6303$tVUFT)
              (syntax-violation-subform . g$syntax-violation-subform$6305$tVUFT)
              (syntax-violation-form . g$syntax-violation-form$6304$tVUFT)
              (syntax-violation . g$syntax-violation$12192$tVUFT)
              (serious-condition? . g$serious-condition?$6225$tVUFT)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$6277$tVUFT)
              (message-condition? . g$message-condition?$6208$tVUFT)
              (make-who-condition . g$make-who-condition$6266$tVUFT)
              (make-warning . g$make-warning$6216$tVUFT)
              (make-violation . g$make-violation$6240$tVUFT)
              (make-undefined-violation . g$make-undefined-violation$6312$tVUFT)
              (make-syntax-violation . g$make-syntax-violation$6300$tVUFT)
              (make-serious-condition . g$make-serious-condition$6224$tVUFT)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$6276$tVUFT)
              (make-message-condition . g$make-message-condition$6206$tVUFT)
              (make-lexical-violation . g$make-lexical-violation$6292$tVUFT)
              (make-irritants-condition . g$make-irritants-condition$6256$tVUFT)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$6284$tVUFT)
              (make-error . g$make-error$6232$tVUFT)
              (make-assertion-violation . g$make-assertion-violation$6248$tVUFT)
              (lexical-violation? . g$lexical-violation?$6293$tVUFT)
              (irritants-condition? . g$irritants-condition?$6258$tVUFT)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$6285$tVUFT)
              (error? . g$error?$6233$tVUFT)
              (condition-who . g$condition-who$6269$tVUFT)
              (condition-message . g$condition-message$6209$tVUFT)
              (condition-irritants . g$condition-irritants$6259$tVUFT)
              (assertion-violation? . g$assertion-violation?$6249$tVUFT)
              (native-endianness . g$native-endianness$5876$tVUFT)
              (bytevector? . g$bytevector?$5644$tVUFT)
              (bytevector-u64-set! . g$bytevector-u64-set!$5897$tVUFT)
              (bytevector-u64-ref . g$bytevector-u64-ref$5893$tVUFT)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$5899$tVUFT)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$5895$tVUFT)
              (bytevector-u32-set! . g$bytevector-u32-set!$5889$tVUFT)
              (bytevector-u32-ref . g$bytevector-u32-ref$5885$tVUFT)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$5891$tVUFT)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$5887$tVUFT)
              (bytevector-u16-set! . g$bytevector-u16-set!$5881$tVUFT)
              (bytevector-u16-ref . g$bytevector-u16-ref$5877$tVUFT)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$5883$tVUFT)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$5879$tVUFT)
              (bytevector-s64-set! . g$bytevector-s64-set!$5898$tVUFT)
              (bytevector-s64-ref . g$bytevector-s64-ref$5894$tVUFT)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$5900$tVUFT)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$5896$tVUFT)
              (bytevector-s32-set! . g$bytevector-s32-set!$5890$tVUFT)
              (bytevector-s32-ref . g$bytevector-s32-ref$5886$tVUFT)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$5892$tVUFT)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$5888$tVUFT)
              (bytevector-s16-set! . g$bytevector-s16-set!$5882$tVUFT)
              (bytevector-s16-ref . g$bytevector-s16-ref$5878$tVUFT)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$5884$tVUFT)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$5880$tVUFT)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$5903$tVUFT)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$5901$tVUFT)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$5904$tVUFT)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$5902$tVUFT)
              (no-nans-violation? . g$no-nans-violation?$6433$tVUFT)
              (no-infinities-violation? . g$no-infinities-violation?$6425$tVUFT)
              (make-no-nans-violation . g$make-no-nans-violation$6432$tVUFT)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$6424$tVUFT)
              (flzero? . g$flzero?$6902$tVUFT)
              (fltruncate . g$fltruncate$6897$tVUFT)
              (fltan . g$fltan$6887$tVUFT)
              (flsqrt . g$flsqrt$6892$tVUFT)
              (flsin . g$flsin$6885$tVUFT)
              (flround . g$flround$6898$tVUFT)
              (flpositive? . g$flpositive?$6900$tVUFT)
              (flonum? . g$flonum?$5649$tVUFT)
              (flodd? . g$flodd?$6904$tVUFT)
              (flnegative? . g$flnegative?$6901$tVUFT)
              (flnan? . g$flnan?$6884$tVUFT)
              (flmod0 . g$flmod0$6880$tVUFT)
              (flmod . g$flmod$6879$tVUFT)
              (flmin . g$flmin$6906$tVUFT)
              (flmax . g$flmax$6905$tVUFT)
              (fllog . g$fllog$6891$tVUFT)
              (flinteger? . g$flinteger?$6881$tVUFT)
              (flinfinite? . g$flinfinite?$6883$tVUFT)
              (flfloor . g$flfloor$6896$tVUFT)
              (flfinite? . g$flfinite?$6882$tVUFT)
              (flexpt . g$flexpt$6894$tVUFT)
              (flexp . g$flexp$6893$tVUFT)
              (fleven? . g$fleven?$6903$tVUFT)
              (fldiv0-and-mod0 . g$fldiv0-and-mod0$6876$tVUFT)
              (fldiv0 . g$fldiv0$6878$tVUFT)
              (fldiv-and-mod . g$fldiv-and-mod$6875$tVUFT)
              (fldiv . g$fldiv$6877$tVUFT)
              (flcos . g$flcos$6886$tVUFT)
              (flceiling . g$flceiling$6895$tVUFT)
              (flatan . g$flatan$6890$tVUFT)
              (flasin . g$flasin$6888$tVUFT)
              (flacos . g$flacos$6889$tVUFT)
              (flabs . g$flabs$6899$tVUFT)
              (fxzero? . g$fxzero?$6743$tVUFT)
              (fxrotate-bit-field . g$fxrotate-bit-field$6757$tVUFT)
              (fxpositive? . g$fxpositive?$6741$tVUFT)
              (fxodd? . g$fxodd?$6745$tVUFT)
              (fxnegative? . g$fxnegative?$6742$tVUFT)
              (fxmod0 . g$fxmod0$6740$tVUFT)
              (fxmod . g$fxmod$6739$tVUFT)
              (fxmin . g$fxmin$6747$tVUFT)
              (fxmax . g$fxmax$6746$tVUFT)
              (fxif . g$fxif$6751$tVUFT)
              (fxeven? . g$fxeven?$6744$tVUFT)
              (fxdiv0 . g$fxdiv0$6738$tVUFT)
              (fxdiv . g$fxdiv$6737$tVUFT)
              (fxcopy-bit-field . g$fxcopy-bit-field$6754$tVUFT)
              (fxcopy-bit . g$fxcopy-bit$6752$tVUFT)
              (fxbit-field . g$fxbit-field$6753$tVUFT)
              (fxarithmetic-shift-right . g$fxarithmetic-shift-right$6756$tVUFT)
              (fxarithmetic-shift-left . g$fxarithmetic-shift-left$6755$tVUFT)
              (fx-/carry . g$fx-/carry$6749$tVUFT)
              (fx+/carry . g$fx+/carry$6750$tVUFT)
              (fx*/carry . g$fx*/carry$6748$tVUFT)
              (fixnum-width . g$fixnum-width$5650$tVUFT)
              (fixnum? . g$fixnum?$5648$tVUFT)
              (bitwise-rotate-bit-field . g$bitwise-rotate-bit-field$6631$tVUFT)
              (bitwise-if . g$bitwise-if$6625$tVUFT)
              (bitwise-copy-bit-field . g$bitwise-copy-bit-field$6628$tVUFT)
              (bitwise-copy-bit . g$bitwise-copy-bit$6626$tVUFT)
              (bitwise-bit-field . g$bitwise-bit-field$6627$tVUFT)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$6630$tVUFT)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$6629$tVUFT)
              (zero? . g$zero?$5683$tVUFT)
              (vector? . g$vector?$5643$tVUFT)
              (vector-map . g$vector-map$5705$tVUFT)
              (vector-for-each . g$vector-for-each$5706$tVUFT)
              (vector-fill! . g$vector-fill!$5651$tVUFT)
              (symbol? . g$symbol?$5645$tVUFT)
              (symbol=? . g$symbol=?$5695$tVUFT)
              (string>? . g$string>?$5692$tVUFT)
              (string>=? . g$string>=?$5694$tVUFT)
              (string=? . g$string=?$5690$tVUFT)
              (string<? . g$string<?$5691$tVUFT)
              (string<=? . g$string<=?$5693$tVUFT)
              (string-for-each . g$string-for-each$5707$tVUFT)
              (reverse . g$reverse$5652$tVUFT)
              (rationalize . g$rationalize$5702$tVUFT)
              (procedure? . g$procedure?$5647$tVUFT)
              (positive? . g$positive?$5681$tVUFT)
              (odd? . g$odd?$5685$tVUFT)
              (negative? . g$negative?$5682$tVUFT)
              (min . g$min$5687$tVUFT)
              (max . g$max$5686$tVUFT)
              (map . g$map$5157$tVUFT)
              (list-tail . g$list-tail$5137$tVUFT)
              (list-ref . g$list-ref$5138$tVUFT)
              (list->vector . g$list->vector$5640$tVUFT)
              (list->string . g$list->string$5641$tVUFT)
              (lcm . g$lcm$5689$tVUFT)
              (gcd . g$gcd$5688$tVUFT)
              (for-each . g$for-each$5158$tVUFT)
              (even? . g$even?$5684$tVUFT)
              (mod0 . g$mod0$5639$tVUFT)
              (div0 . g$div0$5637$tVUFT)
              (mod . g$mod$5638$tVUFT)
              (div . g$div$5636$tVUFT)
              (char? . g$char?$5642$tVUFT)
              (char>? . g$char>?$5699$tVUFT)
              (char>=? . g$char>=?$5701$tVUFT)
              (char=? . g$char=?$5697$tVUFT)
              (char<? . g$char<?$5698$tVUFT)
              (char<=? . g$char<=?$5700$tVUFT)
              (cddddr . g$cddddr$5680$tVUFT)
              (cdddar . g$cdddar$5679$tVUFT)
              (cddadr . g$cddadr$5678$tVUFT)
              (cddaar . g$cddaar$5677$tVUFT)
              (cdaddr . g$cdaddr$5676$tVUFT)
              (cdadar . g$cdadar$5675$tVUFT)
              (cdaadr . g$cdaadr$5674$tVUFT)
              (cdaaar . g$cdaaar$5673$tVUFT)
              (cadddr . g$cadddr$5672$tVUFT)
              (caddar . g$caddar$5671$tVUFT)
              (cadadr . g$cadadr$5670$tVUFT)
              (cadaar . g$cadaar$5669$tVUFT)
              (caaddr . g$caaddr$5668$tVUFT)
              (caadar . g$caadar$5667$tVUFT)
              (caaadr . g$caaadr$5666$tVUFT)
              (caaaar . g$caaaar$5665$tVUFT)
              (cdddr . g$cdddr$5664$tVUFT)
              (cddar . g$cddar$5663$tVUFT)
              (cdadr . g$cdadr$5662$tVUFT)
              (cdaar . g$cdaar$5661$tVUFT)
              (caddr . g$caddr$5660$tVUFT)
              (cadar . g$cadar$5659$tVUFT)
              (caadr . g$caadr$5658$tVUFT)
              (caaar . g$caaar$5657$tVUFT)
              (cddr . g$cddr$5656$tVUFT)
              (cdar . g$cdar$5655$tVUFT)
              (cadr . g$cadr$5654$tVUFT)
              (caar . g$caar$5653$tVUFT)
              (boolean? . g$boolean?$5646$tVUFT)
              (boolean=? . g$boolean=?$5696$tVUFT)
              (enum-set? . g$enum?$7099$tVUFT)
              (make-promise . g$make-promise$6469$tVUFT)
              (load/args . g$load/args$12261$tVUFT)
              (printf . g$printf$7154$tVUFT)
              (fprintf . g$fprintf$7155$tVUFT)
              (format . g$format$7156$tVUFT)
              (trace-printer . g$trace-printer$12258$tVUFT)
              (make-traced-macro . g$make-traced-macro$7160$tVUFT)
              (assertion-error . g$assertion-error$12188$tVUFT)
              (make-parameter . g$make-parameter$7583$tVUFT)
              (environment-bindings . g$environment-bindings$12166$tVUFT)
              (environment-symbols . g$environment-symbols$12169$tVUFT)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$12165$tVUFT)
              (library-path . g$library-path$8075$tVUFT)
              (make-compile-time-value . g$make-compile-time-value$12016$tVUFT)
              (expand->core . g$expand->core$12175$tVUFT)
              (expand . g$expand$12173$tVUFT)
              (convert->cps . g$convert->cps$7478$tVUFT)
              (installed-libraries . g$installed-libraries$8096$tVUFT)
              (uninstall-library . g$uninstall-library$8087$tVUFT)))))))
    (g$install-library$8091$tVUFT
      'g$13082$tVUFT
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$13075$tVUFT)
        (cosh . g$13074$tVUFT)
        (sinh . g$13073$tVUFT)
        (make-guid . g$13072$tVUFT)
        (unspecified? . g$13071$tVUFT)
        (make-list . g$5958$tVUFT)
        (last-pair . g$5957$tVUFT)
        (load-r5rs . g$13070$tVUFT)
        (license . g$13069$tVUFT)
        (stacktrace . g$13068$tVUFT)
        (ironscheme-build . g$12569$tVUFT)
        (set-symbol-value! . g$13055$tVUFT)
        (symbol-value . g$13054$tVUFT)
        (symbol-bound? . g$13053$tVUFT)
        (ungensym . g$13052$tVUFT)
        (gensym . g$13051$tVUFT)
        (void . g$13050$tVUFT)
        (compile-system-libraries . g$12572$tVUFT)
        (compile->closure . g$12574$tVUFT)
        (compile . g$12573$tVUFT)
        (load . g$12568$tVUFT)
        (interaction-environment . g$9574$tVUFT)
        (string-upcase . g$13045$tVUFT)
        (string-titlecase . g$13044$tVUFT)
        (string-normalize-nfkd . g$7521$tVUFT)
        (string-normalize-nfkc . g$7520$tVUFT)
        (string-normalize-nfd . g$7519$tVUFT)
        (string-normalize-nfc . g$7518$tVUFT)
        (string-foldcase . g$13043$tVUFT)
        (string-downcase . g$13042$tVUFT)
        (string-ci>? . g$7476$tVUFT)
        (string-ci>=? . g$7478$tVUFT)
        (string-ci=? . g$7474$tVUFT)
        (string-ci<? . g$7475$tVUFT)
        (string-ci<=? . g$7477$tVUFT)
        (char-whitespace? . g$13041$tVUFT)
        (char-upper-case? . g$13040$tVUFT)
        (char-title-case? . g$13039$tVUFT)
        (char-numeric? . g$13038$tVUFT)
        (char-lower-case? . g$13037$tVUFT)
        (char-general-category . g$13036$tVUFT)
        (char-upcase . g$13035$tVUFT)
        (char-titlecase . g$13034$tVUFT)
        (char-foldcase . g$13033$tVUFT)
        (char-downcase . g$13032$tVUFT)
        (char-ci>? . g$7515$tVUFT)
        (char-ci>=? . g$7517$tVUFT)
        (char-ci=? . g$7513$tVUFT)
        (char-ci<? . g$7514$tVUFT)
        (char-ci<=? . g$7516$tVUFT)
        (char-alphabetic? . g$13031$tVUFT)
        (make-variable-transformer . g$9168$tVUFT)
        (identifier? . g$9568$tVUFT)
        (generate-temporaries . g$9557$tVUFT)
        (free-identifier=? . g$9558$tVUFT)
        (syntax->datum . g$9570$tVUFT)
        (datum->syntax . g$9569$tVUFT)
        (bound-identifier=? . g$9559$tVUFT)
        (record-type-descriptor? . g$13030$tVUFT)
        (record-predicate . g$13029$tVUFT)
        (record-mutator . g$13028$tVUFT)
        (record-constructor . g$13027$tVUFT)
        (record-accessor . g$13026$tVUFT)
        (make-record-type-descriptor . g$13025$tVUFT)
        (make-record-constructor-descriptor . g$13024$tVUFT)
        (record? . g$13023$tVUFT)
        (record-type-uid . g$13022$tVUFT)
        (record-type-sealed? . g$13021$tVUFT)
        (record-type-parent . g$13020$tVUFT)
        (record-type-opaque? . g$13019$tVUFT)
        (record-type-name . g$13018$tVUFT)
        (record-type-generative? . g$13017$tVUFT)
        (record-type-field-names . g$13016$tVUFT)
        (record-rtd . g$13015$tVUFT)
        (record-field-mutable? . g$13014$tVUFT)
        (delete-file . g$6766$tVUFT)
        (file-exists? . g$6765$tVUFT)
        (vector-sort! . g$13013$tVUFT)
        (vector-sort . g$13012$tVUFT)
        (list-sort . g$7416$tVUFT)
        (symbol-hash . g$13011$tVUFT)
        (string-ci-hash . g$13010$tVUFT)
        (string-hash . g$13009$tVUFT)
        (equal-hash . g$13008$tVUFT)
        (hashtable-equivalence-function . g$13007$tVUFT)
        (make-hashtable . g$13006$tVUFT)
        (hashtable-hash-function . g$13005$tVUFT)
        (make-eqv-hashtable . g$6734$tVUFT)
        (make-eq-hashtable . g$6733$tVUFT)
        (hashtable? . g$13004$tVUFT)
        (hashtable-update! . g$6740$tVUFT)
        (hashtable-size . g$6735$tVUFT)
        (hashtable-set! . g$6737$tVUFT)
        (hashtable-ref . g$6736$tVUFT)
        (hashtable-mutable? . g$13003$tVUFT)
        (hashtable-keys . g$13002$tVUFT)
        (hashtable-entries . g$13001$tVUFT)
        (hashtable-delete! . g$6738$tVUFT)
        (hashtable-copy . g$13000$tVUFT)
        (hashtable-contains? . g$6739$tVUFT)
        (hashtable-clear! . g$6741$tVUFT)
        (call-with-output-file . g$7857$tVUFT)
        (call-with-input-file . g$7856$tVUFT)
        (write-char . g$7838$tVUFT)
        (write . g$12999$tVUFT)
        (with-output-to-file . g$7855$tVUFT)
        (with-input-from-file . g$7854$tVUFT)
        (read-char . g$7837$tVUFT)
        (read . g$12998$tVUFT)
        (peek-char . g$7836$tVUFT)
        (open-output-file . g$12997$tVUFT)
        (open-input-file . g$12996$tVUFT)
        (newline . g$7858$tVUFT)
        (display . g$12995$tVUFT)
        (close-output-port . g$12994$tVUFT)
        (close-input-port . g$12993$tVUFT)
        (eof-object? . g$12992$tVUFT)
        (eof-object . g$12991$tVUFT)
        (current-error-port . g$12990$tVUFT)
        (current-output-port . g$12989$tVUFT)
        (current-input-port . g$12988$tVUFT)
        (output-port? . g$12987$tVUFT)
        (input-port? . g$12986$tVUFT)
        (utf-8-codec . g$12985$tVUFT)
        (utf-16-codec . g$12984$tVUFT)
        (transcoder-error-handling-mode . g$12983$tVUFT)
        (transcoder-eol-style . g$12982$tVUFT)
        (transcoder-codec . g$12981$tVUFT)
        (transcoded-port . g$12980$tVUFT)
        (textual-port? . g$12979$tVUFT)
        (string->bytevector . g$12978$tVUFT)
        (standard-output-port . g$12977$tVUFT)
        (standard-input-port . g$12976$tVUFT)
        (standard-error-port . g$12975$tVUFT)
        (set-port-position! . g$12974$tVUFT)
        (put-u8 . g$12973$tVUFT)
        (put-string . g$12972$tVUFT)
        (put-datum . g$7816$tVUFT)
        (put-char . g$12971$tVUFT)
        (put-bytevector . g$12970$tVUFT)
        (port? . g$7821$tVUFT)
        (port-transcoder . g$12969$tVUFT)
        (port-position . g$12968$tVUFT)
        (port-has-set-port-position!? . g$12967$tVUFT)
        (port-has-port-position? . g$12966$tVUFT)
        (port-eof? . g$12965$tVUFT)
        (output-port-buffer-mode . g$12964$tVUFT)
        (open-string-output-port . g$7820$tVUFT)
        (open-string-input-port . g$12963$tVUFT)
        (open-file-output-port . g$12962$tVUFT)
        (open-file-input/output-port . g$12961$tVUFT)
        (open-file-input-port . g$12960$tVUFT)
        (open-bytevector-output-port . g$12959$tVUFT)
        (open-bytevector-input-port . g$12958$tVUFT)
        (native-transcoder . g$12957$tVUFT)
        (native-eol-style . g$12956$tVUFT)
        (make-transcoder . g$12955$tVUFT)
        (latin-1-codec . g$12954$tVUFT)
        (make-i/o-write-error . g$7204$tVUFT)
        (make-i/o-read-error . g$7189$tVUFT)
        (make-i/o-port-error . g$7313$tVUFT)
        (make-i/o-invalid-position-error . g$7219$tVUFT)
        (make-i/o-filename-error . g$7236$tVUFT)
        (make-i/o-file-protection-error . g$7253$tVUFT)
        (make-i/o-file-is-read-only-error . g$7268$tVUFT)
        (make-i/o-file-does-not-exist-error . g$7298$tVUFT)
        (make-i/o-file-already-exists-error . g$7283$tVUFT)
        (make-i/o-error . g$7174$tVUFT)
        (make-i/o-encoding-error . g$7345$tVUFT)
        (make-i/o-decoding-error . g$7330$tVUFT)
        (make-custom-textual-output-port . g$12953$tVUFT)
        (make-custom-textual-input/output-port . g$12952$tVUFT)
        (make-custom-textual-input-port . g$12951$tVUFT)
        (make-custom-binary-output-port . g$12950$tVUFT)
        (make-custom-binary-input/output-port . g$12949$tVUFT)
        (make-custom-binary-input-port . g$12948$tVUFT)
        (make-bytevector . g$12947$tVUFT)
        (lookahead-u8 . g$12946$tVUFT)
        (lookahead-char . g$12945$tVUFT)
        (i/o-write-error? . g$7205$tVUFT)
        (i/o-read-error? . g$7190$tVUFT)
        (i/o-port-error? . g$7315$tVUFT)
        (i/o-invalid-position-error? . g$7221$tVUFT)
        (i/o-error-position . g$7222$tVUFT)
        (i/o-filename-error? . g$7238$tVUFT)
        (i/o-file-protection-error? . g$7254$tVUFT)
        (i/o-file-is-read-only-error? . g$7269$tVUFT)
        (i/o-file-does-not-exist-error? . g$7299$tVUFT)
        (i/o-file-already-exists-error? . g$7284$tVUFT)
        (i/o-error? . g$7175$tVUFT)
        (i/o-error-port . g$7316$tVUFT)
        (i/o-error-filename . g$7239$tVUFT)
        (i/o-encoding-error? . g$7347$tVUFT)
        (i/o-encoding-error-char . g$7348$tVUFT)
        (i/o-decoding-error? . g$7331$tVUFT)
        (get-u8 . g$12944$tVUFT)
        (get-string-n! . g$12943$tVUFT)
        (get-string-n . g$12942$tVUFT)
        (get-string-all . g$12941$tVUFT)
        (get-line . g$12940$tVUFT)
        (get-datum . g$7817$tVUFT)
        (get-char . g$12939$tVUFT)
        (get-bytevector-some . g$12938$tVUFT)
        (get-bytevector-n! . g$12937$tVUFT)
        (get-bytevector-n . g$12936$tVUFT)
        (get-bytevector-all . g$12935$tVUFT)
        (flush-output-port . g$12934$tVUFT)
        (close-port . g$12933$tVUFT)
        (call-with-string-output-port . g$7822$tVUFT)
        (call-with-port . g$7823$tVUFT)
        (call-with-bytevector-output-port . g$12932$tVUFT)
        (bytevector->string . g$12931$tVUFT)
        (buffer-mode? . g$12930$tVUFT)
        (binary-port? . g$12929$tVUFT)
        (scheme-report-environment . g$9547$tVUFT)
        (quotient . g$7395$tVUFT)
        (null-environment . g$9546$tVUFT)
        (remainder . g$7396$tVUFT)
        (modulo . g$7397$tVUFT)
        (inexact->exact . g$7392$tVUFT)
        (force . g$7399$tVUFT)
        (exact->inexact . g$7393$tVUFT)
        (exit . g$12928$tVUFT)
        (command-line . g$12565$tVUFT)
        (string-fill! . g$12927$tVUFT)
        (string-set! . g$12926$tVUFT)
        (set-cdr! . g$12925$tVUFT)
        (set-car! . g$12924$tVUFT)
        (remove . g$5980$tVUFT)
        (remv . g$5981$tVUFT)
        (remp . g$5961$tVUFT)
        (remq . g$5982$tVUFT)
        (partition . g$5960$tVUFT)
        (memv . g$5968$tVUFT)
        (memq . g$5967$tVUFT)
        (memp . g$5970$tVUFT)
        (member . g$5969$tVUFT)
        (exists . g$5974$tVUFT)
        (for-all . g$5973$tVUFT)
        (fold-right . g$5979$tVUFT)
        (fold-left . g$5978$tVUFT)
        (find . g$5959$tVUFT)
        (filter . g$5962$tVUFT)
        (cons* . g$5977$tVUFT)
        (assv . g$5964$tVUFT)
        (assq . g$5963$tVUFT)
        (assp . g$5966$tVUFT)
        (assoc . g$5965$tVUFT)
        (with-exception-handler . g$12923$tVUFT)
        (raise-continuable . g$12922$tVUFT)
        (raise . g$12921$tVUFT)
        (eval . g$9549$tVUFT)
        (environment . g$9545$tVUFT)
        (make-enumeration . g$7922$tVUFT)
        (enum-set=? . g$7929$tVUFT)
        (enum-set-universe . g$7923$tVUFT)
        (enum-set-union . g$7930$tVUFT)
        (enum-set-subset? . g$7928$tVUFT)
        (enum-set-projection . g$7934$tVUFT)
        (enum-set-member? . g$7927$tVUFT)
        (enum-set-intersection . g$7931$tVUFT)
        (enum-set-indexer . g$7924$tVUFT)
        (enum-set-difference . g$7932$tVUFT)
        (enum-set-constructor . g$7925$tVUFT)
        (enum-set-complement . g$7933$tVUFT)
        (enum-set->list . g$7926$tVUFT)
        (who-condition? . g$7080$tVUFT)
        (warning? . g$6987$tVUFT)
        (violation? . g$7032$tVUFT)
        (undefined-violation? . g$7160$tVUFT)
        (syntax-violation? . g$7143$tVUFT)
        (syntax-violation-subform . g$7145$tVUFT)
        (syntax-violation-form . g$7144$tVUFT)
        (syntax-violation . g$9567$tVUFT)
        (simple-conditions . g$12920$tVUFT)
        (serious-condition? . g$7002$tVUFT)
        (non-continuable-violation? . g$7096$tVUFT)
        (message-condition? . g$6971$tVUFT)
        (make-who-condition . g$7078$tVUFT)
        (make-warning . g$6986$tVUFT)
        (make-violation . g$7031$tVUFT)
        (make-undefined-violation . g$7159$tVUFT)
        (make-syntax-violation . g$7140$tVUFT)
        (make-serious-condition . g$7001$tVUFT)
        (make-non-continuable-violation . g$7095$tVUFT)
        (make-message-condition . g$6969$tVUFT)
        (make-lexical-violation . g$7125$tVUFT)
        (make-irritants-condition . g$7061$tVUFT)
        (make-implementation-restriction-violation . g$7110$tVUFT)
        (make-error . g$7016$tVUFT)
        (make-assertion-violation . g$7046$tVUFT)
        (lexical-violation? . g$7126$tVUFT)
        (irritants-condition? . g$7063$tVUFT)
        (implementation-restriction-violation? . g$7111$tVUFT)
        (error? . g$7017$tVUFT)
        (condition-who . g$7081$tVUFT)
        (condition-predicate . g$12919$tVUFT)
        (condition-message . g$6972$tVUFT)
        (condition-irritants . g$7064$tVUFT)
        (condition-accessor . g$12918$tVUFT)
        (condition . g$12917$tVUFT)
        (assertion-violation? . g$7047$tVUFT)
        (condition? . g$12916$tVUFT)
        (utf32->string . g$12915$tVUFT)
        (utf16->string . g$12914$tVUFT)
        (utf8->string . g$12913$tVUFT)
        (uint-list->bytevector . g$12912$tVUFT)
        (u8-list->bytevector . g$12911$tVUFT)
        (string->utf8 . g$12910$tVUFT)
        (string->utf32 . g$12909$tVUFT)
        (string->utf16 . g$12908$tVUFT)
        (sint-list->bytevector . g$12907$tVUFT)
        (native-endianness . g$6772$tVUFT)
        (bytevector? . g$6400$tVUFT)
        (bytevector=? . g$12906$tVUFT)
        (bytevector-uint-set! . g$12905$tVUFT)
        (bytevector-uint-ref . g$12904$tVUFT)
        (bytevector-u8-set! . g$12903$tVUFT)
        (bytevector-u8-ref . g$12902$tVUFT)
        (bytevector-u64-set! . g$6793$tVUFT)
        (bytevector-u64-ref . g$6789$tVUFT)
        (bytevector-u64-native-set! . g$6795$tVUFT)
        (bytevector-u64-native-ref . g$6791$tVUFT)
        (bytevector-u32-set! . g$6785$tVUFT)
        (bytevector-u32-ref . g$6781$tVUFT)
        (bytevector-u32-native-set! . g$6787$tVUFT)
        (bytevector-u32-native-ref . g$6783$tVUFT)
        (bytevector-u16-set! . g$6777$tVUFT)
        (bytevector-u16-ref . g$6773$tVUFT)
        (bytevector-u16-native-set! . g$6779$tVUFT)
        (bytevector-u16-native-ref . g$6775$tVUFT)
        (bytevector-sint-set! . g$12901$tVUFT)
        (bytevector-sint-ref . g$12900$tVUFT)
        (bytevector-s8-set! . g$12899$tVUFT)
        (bytevector-s8-ref . g$12898$tVUFT)
        (bytevector-s64-set! . g$6794$tVUFT)
        (bytevector-s64-ref . g$6790$tVUFT)
        (bytevector-s64-native-set! . g$6796$tVUFT)
        (bytevector-s64-native-ref . g$6792$tVUFT)
        (bytevector-s32-set! . g$6786$tVUFT)
        (bytevector-s32-ref . g$6782$tVUFT)
        (bytevector-s32-native-set! . g$6788$tVUFT)
        (bytevector-s32-native-ref . g$6784$tVUFT)
        (bytevector-s16-set! . g$6778$tVUFT)
        (bytevector-s16-ref . g$6774$tVUFT)
        (bytevector-s16-native-set! . g$6780$tVUFT)
        (bytevector-s16-native-ref . g$6776$tVUFT)
        (bytevector-length . g$12897$tVUFT)
        (bytevector-ieee-single-set! . g$12896$tVUFT)
        (bytevector-ieee-single-ref . g$12895$tVUFT)
        (bytevector-ieee-single-native-set! . g$6799$tVUFT)
        (bytevector-ieee-single-native-ref . g$6797$tVUFT)
        (bytevector-ieee-double-set! . g$12894$tVUFT)
        (bytevector-ieee-double-ref . g$12893$tVUFT)
        (bytevector-ieee-double-native-set! . g$6800$tVUFT)
        (bytevector-ieee-double-native-ref . g$6798$tVUFT)
        (bytevector-fill! . g$12892$tVUFT)
        (bytevector-copy! . g$12891$tVUFT)
        (bytevector-copy . g$12890$tVUFT)
        (bytevector->uint-list . g$12889$tVUFT)
        (bytevector->u8-list . g$12888$tVUFT)
        (bytevector->sint-list . g$12887$tVUFT)
        (no-nans-violation? . g$7378$tVUFT)
        (no-infinities-violation? . g$7363$tVUFT)
        (make-no-nans-violation . g$7377$tVUFT)
        (make-no-infinities-violation . g$7362$tVUFT)
        (real->flonum . g$12886$tVUFT)
        (flzero? . g$7736$tVUFT)
        (fltruncate . g$7731$tVUFT)
        (fltan . g$7721$tVUFT)
        (flsqrt . g$7726$tVUFT)
        (flsin . g$7719$tVUFT)
        (flround . g$7732$tVUFT)
        (flpositive? . g$7734$tVUFT)
        (flonum? . g$6405$tVUFT)
        (flodd? . g$7738$tVUFT)
        (flnumerator . g$12885$tVUFT)
        (flnegative? . g$7735$tVUFT)
        (flnan? . g$7718$tVUFT)
        (flmod0 . g$7714$tVUFT)
        (flmod . g$7713$tVUFT)
        (flmin . g$7740$tVUFT)
        (flmax . g$7739$tVUFT)
        (fllog . g$7725$tVUFT)
        (flinteger? . g$7715$tVUFT)
        (flinfinite? . g$7717$tVUFT)
        (flfloor . g$7730$tVUFT)
        (flfinite? . g$7716$tVUFT)
        (flexpt . g$7728$tVUFT)
        (flexp . g$7727$tVUFT)
        (fleven? . g$7737$tVUFT)
        (fldiv0-and-mod0 . g$7710$tVUFT)
        (fldiv0 . g$7712$tVUFT)
        (fldiv-and-mod . g$7709$tVUFT)
        (fldiv . g$7711$tVUFT)
        (fldenominator . g$12884$tVUFT)
        (flcos . g$7720$tVUFT)
        (flceiling . g$7729$tVUFT)
        (flatan . g$7724$tVUFT)
        (flasin . g$7722$tVUFT)
        (flacos . g$7723$tVUFT)
        (flabs . g$7733$tVUFT)
        (fl>? . g$12883$tVUFT)
        (fl>=? . g$12882$tVUFT)
        (fl=? . g$12881$tVUFT)
        (fl<? . g$12880$tVUFT)
        (fl<=? . g$12879$tVUFT)
        (fl/ . g$12878$tVUFT)
        (fl- . g$12877$tVUFT)
        (fl+ . g$12876$tVUFT)
        (fl* . g$12875$tVUFT)
        (fixnum->flonum . g$12874$tVUFT)
        (fxzero? . g$7617$tVUFT)
        (fxxor . g$12873$tVUFT)
        (fxrotate-bit-field . g$7631$tVUFT)
        (fxreverse-bit-field . g$12872$tVUFT)
        (fxpositive? . g$7615$tVUFT)
        (fxodd? . g$7619$tVUFT)
        (fxnot . g$12871$tVUFT)
        (fxnegative? . g$7616$tVUFT)
        (fxmod0 . g$7614$tVUFT)
        (fxmod . g$7613$tVUFT)
        (fxmin . g$7621$tVUFT)
        (fxmax . g$7620$tVUFT)
        (fxlength . g$12870$tVUFT)
        (fxior . g$12869$tVUFT)
        (fxif . g$7625$tVUFT)
        (fxfirst-bit-set . g$12868$tVUFT)
        (fxeven? . g$7618$tVUFT)
        (fxdiv0-and-mod0 . g$12867$tVUFT)
        (fxdiv0 . g$7612$tVUFT)
        (fxdiv-and-mod . g$12866$tVUFT)
        (fxdiv . g$7611$tVUFT)
        (fxcopy-bit-field . g$7628$tVUFT)
        (fxcopy-bit . g$7626$tVUFT)
        (fxbit-set? . g$12865$tVUFT)
        (fxbit-field . g$7627$tVUFT)
        (fxbit-count . g$12864$tVUFT)
        (fxarithmetic-shift-right . g$7630$tVUFT)
        (fxarithmetic-shift-left . g$7629$tVUFT)
        (fxarithmetic-shift . g$12863$tVUFT)
        (fxand . g$12862$tVUFT)
        (fx>? . g$12861$tVUFT)
        (fx>=? . g$12860$tVUFT)
        (fx=? . g$12859$tVUFT)
        (fx<? . g$12858$tVUFT)
        (fx<=? . g$12857$tVUFT)
        (fx-/carry . g$7623$tVUFT)
        (fx- . g$12856$tVUFT)
        (fx+/carry . g$7624$tVUFT)
        (fx+ . g$12855$tVUFT)
        (fx*/carry . g$7622$tVUFT)
        (fx* . g$12854$tVUFT)
        (greatest-fixnum . g$12853$tVUFT)
        (least-fixnum . g$12852$tVUFT)
        (fixnum-width . g$6406$tVUFT)
        (fixnum? . g$6404$tVUFT)
        (bitwise-rotate-bit-field . g$7585$tVUFT)
        (bitwise-reverse-bit-field . g$12851$tVUFT)
        (bitwise-length . g$12850$tVUFT)
        (bitwise-if . g$7579$tVUFT)
        (bitwise-first-bit-set . g$12849$tVUFT)
        (bitwise-copy-bit-field . g$7582$tVUFT)
        (bitwise-copy-bit . g$7580$tVUFT)
        (bitwise-bit-set? . g$12848$tVUFT)
        (bitwise-bit-field . g$7581$tVUFT)
        (bitwise-bit-count . g$12847$tVUFT)
        (bitwise-xor . g$12846$tVUFT)
        (bitwise-ior . g$12845$tVUFT)
        (bitwise-and . g$12844$tVUFT)
        (bitwise-not . g$12843$tVUFT)
        (bitwise-arithmetic-shift-right . g$7584$tVUFT)
        (bitwise-arithmetic-shift-left . g$7583$tVUFT)
        (bitwise-arithmetic-shift . g$12842$tVUFT)
        (zero? . g$6439$tVUFT)
        (vector? . g$6399$tVUFT)
        (vector-set! . g$12841$tVUFT)
        (vector-ref . g$12840$tVUFT)
        (vector-map . g$6533$tVUFT)
        (vector-length . g$12839$tVUFT)
        (vector-for-each . g$6534$tVUFT)
        (vector-fill! . g$6407$tVUFT)
        (vector->list . g$12838$tVUFT)
        (vector . g$12837$tVUFT)
        (values . g$12836$tVUFT)
        (truncate . g$12835$tVUFT)
        (tan . g$12834$tVUFT)
        (symbol? . g$6401$tVUFT)
        (symbol=? . g$6487$tVUFT)
        (symbol->string . g$12833$tVUFT)
        (substring . g$12832$tVUFT)
        (string? . g$12831$tVUFT)
        (string>? . g$6484$tVUFT)
        (string>=? . g$6486$tVUFT)
        (string=? . g$6482$tVUFT)
        (string<? . g$6483$tVUFT)
        (string<=? . g$6485$tVUFT)
        (string-ref . g$12830$tVUFT)
        (string-length . g$12829$tVUFT)
        (string-for-each . g$6535$tVUFT)
        (string-copy . g$12828$tVUFT)
        (string-append . g$12827$tVUFT)
        (string->symbol . g$12826$tVUFT)
        (string->number . g$12825$tVUFT)
        (string->list . g$12824$tVUFT)
        (string . g$12823$tVUFT)
        (sqrt . g$12822$tVUFT)
        (sin . g$12821$tVUFT)
        (round . g$12820$tVUFT)
        (reverse . g$6408$tVUFT)
        (real? . g$12819$tVUFT)
        (real-valued? . g$12818$tVUFT)
        (real-part . g$12817$tVUFT)
        (rationalize . g$6530$tVUFT)
        (rational? . g$12816$tVUFT)
        (rational-valued? . g$12815$tVUFT)
        (procedure? . g$6403$tVUFT)
        (positive? . g$6437$tVUFT)
        (pair? . g$12814$tVUFT)
        (odd? . g$6441$tVUFT)
        (numerator . g$12813$tVUFT)
        (number? . g$12812$tVUFT)
        (number->string . g$12811$tVUFT)
        (null? . g$12810$tVUFT)
        (not . g$12809$tVUFT)
        (negative? . g$6438$tVUFT)
        (nan? . g$12808$tVUFT)
        (min . g$6443$tVUFT)
        (max . g$6442$tVUFT)
        (map . g$5975$tVUFT)
        (make-vector . g$12807$tVUFT)
        (make-string . g$12806$tVUFT)
        (make-rectangular . g$12805$tVUFT)
        (make-polar . g$12804$tVUFT)
        (magnitude . g$12803$tVUFT)
        (log . g$12802$tVUFT)
        (list? . g$12801$tVUFT)
        (list-tail . g$5955$tVUFT)
        (list-ref . g$5956$tVUFT)
        (list->vector . g$6396$tVUFT)
        (list->string . g$6397$tVUFT)
        (list . g$12800$tVUFT)
        (length . g$12799$tVUFT)
        (lcm . g$6445$tVUFT)
        (integer? . g$12798$tVUFT)
        (integer-valued? . g$12797$tVUFT)
        (integer->char . g$12796$tVUFT)
        (infinite? . g$12795$tVUFT)
        (inexact? . g$12794$tVUFT)
        (inexact . g$12793$tVUFT)
        (imag-part . g$12792$tVUFT)
        (gcd . g$6444$tVUFT)
        (for-each . g$5976$tVUFT)
        (floor . g$12791$tVUFT)
        (finite? . g$12790$tVUFT)
        (expt . g$12789$tVUFT)
        (exp . g$12788$tVUFT)
        (exact? . g$12787$tVUFT)
        (exact-integer-sqrt . g$12786$tVUFT)
        (exact . g$12785$tVUFT)
        (even? . g$6440$tVUFT)
        (error . g$12784$tVUFT)
        (eqv? . g$12783$tVUFT)
        (equal? . g$12782$tVUFT)
        (eq? . g$12781$tVUFT)
        (dynamic-wind . g$12780$tVUFT)
        (div0-and-mod0 . g$12779$tVUFT)
        (mod0 . g$6395$tVUFT)
        (div0 . g$6393$tVUFT)
        (div-and-mod . g$12778$tVUFT)
        (mod . g$6394$tVUFT)
        (div . g$6392$tVUFT)
        (denominator . g$12777$tVUFT)
        (cos . g$12776$tVUFT)
        (cons . g$12775$tVUFT)
        (complex? . g$12774$tVUFT)
        (char? . g$6398$tVUFT)
        (char>? . g$6527$tVUFT)
        (char>=? . g$6529$tVUFT)
        (char=? . g$6525$tVUFT)
        (char<? . g$6526$tVUFT)
        (char<=? . g$6528$tVUFT)
        (char->integer . g$12773$tVUFT)
        (ceiling . g$12772$tVUFT)
        (call-with-values . g$12771$tVUFT)
        (call/cc . g$12770$tVUFT)
        (call-with-current-continuation . g$12769$tVUFT)
        (cddddr . g$6436$tVUFT)
        (cdddar . g$6435$tVUFT)
        (cddadr . g$6434$tVUFT)
        (cddaar . g$6433$tVUFT)
        (cdaddr . g$6432$tVUFT)
        (cdadar . g$6431$tVUFT)
        (cdaadr . g$6430$tVUFT)
        (cdaaar . g$6429$tVUFT)
        (cadddr . g$6428$tVUFT)
        (caddar . g$6427$tVUFT)
        (cadadr . g$6426$tVUFT)
        (cadaar . g$6425$tVUFT)
        (caaddr . g$6424$tVUFT)
        (caadar . g$6423$tVUFT)
        (caaadr . g$6422$tVUFT)
        (caaaar . g$6421$tVUFT)
        (cdddr . g$6420$tVUFT)
        (cddar . g$6419$tVUFT)
        (cdadr . g$6418$tVUFT)
        (cdaar . g$6417$tVUFT)
        (caddr . g$6416$tVUFT)
        (cadar . g$6415$tVUFT)
        (caadr . g$6414$tVUFT)
        (caaar . g$6413$tVUFT)
        (cddr . g$6412$tVUFT)
        (cdar . g$6411$tVUFT)
        (cadr . g$6410$tVUFT)
        (caar . g$6409$tVUFT)
        (cdr . g$12768$tVUFT)
        (car . g$12767$tVUFT)
        (boolean? . g$6402$tVUFT)
        (boolean=? . g$6488$tVUFT)
        (atan . g$12766$tVUFT)
        (assertion-violation . g$12765$tVUFT)
        (asin . g$12764$tVUFT)
        (apply . g$12763$tVUFT)
        (append . g$12762$tVUFT)
        (angle . g$12761$tVUFT)
        (acos . g$12760$tVUFT)
        (abs . g$12759$tVUFT)
        (/ . g$12758$tVUFT)
        (* . g$12757$tVUFT)
        (- . g$12756$tVUFT)
        (+ . g$12755$tVUFT)
        (>= . g$12754$tVUFT)
        (> . g$12753$tVUFT)
        (= . g$12752$tVUFT)
        (<= . g$12751$tVUFT)
        (< . g$12750$tVUFT)
        (deserialize-port . g$12746$tVUFT)
        (serialize-port . g$12745$tVUFT)
        (enum-set? . g$7897$tVUFT)
        (load/args . g$12567$tVUFT)
        (printf . g$8008$tVUFT)
        (fprintf . g$8009$tVUFT)
        (format . g$8010$tVUFT)
        (procedure-form . g$12744$tVUFT)
        (procedure-environment . g$12743$tVUFT)
        (procedure-name . g$12742$tVUFT)
        (procedure-arity . g$12741$tVUFT)
        (gc-collect . g$12740$tVUFT)
        (clr-type? . g$12739$tVUFT)
        (get-clr-type . g$12738$tVUFT)
        (vector-append . g$12736$tVUFT)
        (vector-filter . g$12735$tVUFT)
        (vector-reverse! . g$12734$tVUFT)
        (vector-contains? . g$12733$tVUFT)
        (vector-index-of . g$12732$tVUFT)
        (vector-copy . g$12731$tVUFT)
        (vector-binary-search . g$12730$tVUFT)
        (string-ci-compare . g$12729$tVUFT)
        (string-compare . g$12728$tVUFT)
        (string-format . g$12727$tVUFT)
        (trace-printer . g$12564$tVUFT)
        (time-it . g$12725$tVUFT)
        (make-parameter . g$8303$tVUFT)
        (open-tcp-input/output-port . g$12722$tVUFT)
        (hashtable-for-each . g$12721$tVUFT)
        (hashtable-map . g$12720$tVUFT)
        (environment-bindings . g$9541$tVUFT)
        (environment-symbols . g$9544$tVUFT)
        (interaction-environment-symbols . g$9540$tVUFT)
        (optimization-level . g$12719$tVUFT)
        (library-path . g$8714$tVUFT)
        (make-compile-time-value . g$9169$tVUFT)
        (expand->core . g$9550$tVUFT)
        (expand . g$9548$tVUFT)
        (convert->cps . g$8086$tVUFT)
        (installed-libraries . g$8735$tVUFT)
        (uninstall-library . g$8726$tVUFT)
        (&no-nans . g$12718$tVUFT)
        (&no-infinities . g$12717$tVUFT)
        (&i/o-encoding . g$12716$tVUFT)
        (&i/o-decoding . g$12715$tVUFT)
        (&i/o-port . g$12714$tVUFT)
        (&i/o-file-does-not-exist . g$12713$tVUFT)
        (&i/o-file-already-exists . g$12712$tVUFT)
        (&i/o-file-is-read-only . g$12711$tVUFT)
        (&i/o-file-protection . g$12710$tVUFT)
        (&i/o-filename . g$12709$tVUFT)
        (&i/o-invalid-position . g$12708$tVUFT)
        (&i/o-write . g$12707$tVUFT)
        (&i/o-read . g$12706$tVUFT)
        (&i/o . g$12705$tVUFT)
        (&non-continuable . g$12704$tVUFT)
        (&undefined . g$12703$tVUFT)
        (&syntax . g$12702$tVUFT)
        (&lexical . g$12701$tVUFT)
        (&implementation-restriction . g$12700$tVUFT)
        (&who . g$12699$tVUFT)
        (&irritants . g$12698$tVUFT)
        (&assertion . g$12697$tVUFT)
        (&violation . g$12696$tVUFT)
        (&error . g$12695$tVUFT)
        (&serious . g$12694$tVUFT)
        (&warning . g$12693$tVUFT)
        (&message . g$12692$tVUFT)
        (&condition . g$12691$tVUFT)
        (define-condition-type . g$12690$tVUFT)
        (define-enumeration . g$12689$tVUFT)
        (define-record-type . g$12688$tVUFT)
        (parent-rtd . g$12687$tVUFT)
        (nongenerative . g$12686$tVUFT)
        (opaque . g$12685$tVUFT)
        (sealed . g$12684$tVUFT)
        (protocol . g$12683$tVUFT)
        (parent . g$12682$tVUFT)
        (immutable . g$12681$tVUFT)
        (mutable . g$12680$tVUFT)
        (fields . g$12679$tVUFT)
        (error-handling-mode . g$12678$tVUFT)
        (file-options . g$12677$tVUFT)
        (buffer-mode . g$12676$tVUFT)
        (eol-style . g$12675$tVUFT)
        (guard . g$12674$tVUFT)
        (trace-letrec-syntax . g$12673$tVUFT)
        (trace-let-syntax . g$12672$tVUFT)
        (trace-define-syntax . g$12671$tVUFT)
        (trace-define . g$12670$tVUFT)
        (trace-lambda . g$12669$tVUFT)
        (unsyntax-splicing . g$12668$tVUFT)
        (unsyntax . g$12667$tVUFT)
        (unquote-splicing . g$12666$tVUFT)
        (unquote . g$12665$tVUFT)
        (_ . g$12664$tVUFT)
        (else . g$12663$tVUFT)
        (=> . g$12662$tVUFT)
        (... . g$12661$tVUFT)
        (assert . g$12660$tVUFT)
        (endianness . g$12659$tVUFT)
        (delay . g$12658$tVUFT)
        (time . g$12657$tVUFT)
        (or . g$12656$tVUFT)
        (and . g$12655$tVUFT)
        (do . g$12654$tVUFT)
        (cond . g$12653$tVUFT)
        (let* . g$12652$tVUFT)
        (let . g$12651$tVUFT)
        (identifier-syntax . g$12650$tVUFT)
        (with-syntax . g$12649$tVUFT)
        (quasisyntax . g$12648$tVUFT)
        (quasiquote . g$12647$tVUFT)
        (syntax-rules . g$12646$tVUFT)
        (include-into . g$12645$tVUFT)
        (include . g$12644$tVUFT)
        (let-values . g$12642$tVUFT)
        (let*-values . g$12641$tVUFT)
        (record-constructor-descriptor . g$12640$tVUFT)
        (record-type-descriptor . g$12639$tVUFT)
        (fluid-let-syntax . g$12638$tVUFT)
        (case . g$12637$tVUFT)
        (parameterize . g$12636$tVUFT)
        (unless . g$12635$tVUFT)
        (when . g$12634$tVUFT)
        (if . g$12633$tVUFT)
        (letrec* . g$12632$tVUFT)
        (letrec . g$12631$tVUFT)
        (case-lambda . g$12629$tVUFT)
        (lambda . g$12628$tVUFT)
        (syntax . g$12627$tVUFT)
        (syntax-case . g$12626$tVUFT)
        (quote . g$12625$tVUFT)
        (letrec-syntax . g$12623$tVUFT)
        (let-syntax . g$12622$tVUFT)
        (set! . g$12621$tVUFT)
        (export . g$12620$tVUFT)
        (import . g$12619$tVUFT)
        (library . g$12618$tVUFT)
        (begin . g$12617$tVUFT)
        (module . g$12616$tVUFT)
        (define-syntax . g$12615$tVUFT)
        (define . g$12614$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13083$tVUFT
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$12723$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$8091$tVUFT
      'g$13084$tVUFT
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$13080$tVUFT)
        (annotation-source . g$13079$tVUFT)
        (annotation-expression . g$13078$tVUFT)
        (annotation? . g$13077$tVUFT)
        (read-annotated . g$13076$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$8091$tVUFT
      'g$13085$tVUFT
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$13049$tVUFT)
        (serialize-library . g$13048$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$8091$tVUFT
      'g$13086$tVUFT
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((string-normalize . g$13047$tVUFT)
        (variable-transformer-procedure . g$9171$tVUFT)
        (variable-transformer? . g$9170$tVUFT)
        (eqv-hash . g$12748$tVUFT)
        (reverse! . g$12747$tVUFT)
        (make-promise . g$7398$tVUFT)
        (format . g$8010$tVUFT)
        (get-command-line . g$12737$tVUFT)
        (make-traced-procedure . g$12726$tVUFT)
        (make-traced-macro . g$8030$tVUFT)
        (assertion-error . g$9563$tVUFT)
        (library-locator . g$12724$tVUFT)
        (get-library-paths . g$12723$tVUFT)
        (library-path . g$8714$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$8091$tVUFT
      'g$13087$tVUFT
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$12749$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13088$tVUFT
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$13067$tVUFT)
        (clr-field-set!-internal . g$13066$tVUFT)
        (clr-field-get-internal . g$13065$tVUFT)
        (clr-cast-internal . g$13064$tVUFT)
        (clr-call-internal . g$13063$tVUFT)
        (clr-new-internal . g$13062$tVUFT)
        (clr-new-array-internal . g$13061$tVUFT)
        (clr-is-internal . g$13060$tVUFT)
        (clr-reference-internal . g$13059$tVUFT)
        (clr-using-internal . g$13058$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13089$tVUFT
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$12666$tVUFT)
        (unquote . g$12665$tVUFT)
        (else . g$12663$tVUFT)
        (=> . g$12662$tVUFT)
        (delay . g$12658$tVUFT)
        (or . g$12656$tVUFT)
        (and . g$12655$tVUFT)
        (do . g$12654$tVUFT)
        (cond . g$12653$tVUFT)
        (let* . g$12652$tVUFT)
        (let . g$12651$tVUFT)
        (quasiquote . g$12647$tVUFT)
        (syntax-rules . g$12646$tVUFT)
        (case . g$12637$tVUFT)
        (if . g$12633$tVUFT)
        (letrec . g$12631$tVUFT)
        (lambda . g$12628$tVUFT)
        (quote . g$12625$tVUFT)
        (letrec-syntax . g$12623$tVUFT)
        (let-syntax . g$12622$tVUFT)
        (set! . g$12621$tVUFT)
        (begin . g$12617$tVUFT)
        (define-syntax . g$12615$tVUFT)
        (define . g$12614$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$8091$tVUFT
      'g$13090$tVUFT
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((char-ready? . g$13046$tVUFT)
        (string-ci>? . g$7476$tVUFT)
        (string-ci>=? . g$7478$tVUFT)
        (string-ci=? . g$7474$tVUFT)
        (string-ci<? . g$7475$tVUFT)
        (string-ci<=? . g$7477$tVUFT)
        (char-whitespace? . g$13041$tVUFT)
        (char-upper-case? . g$13040$tVUFT)
        (char-numeric? . g$13038$tVUFT)
        (char-lower-case? . g$13037$tVUFT)
        (char-upcase . g$13035$tVUFT)
        (char-downcase . g$13032$tVUFT)
        (char-ci>? . g$7515$tVUFT)
        (char-ci>=? . g$7517$tVUFT)
        (char-ci=? . g$7513$tVUFT)
        (char-ci<? . g$7514$tVUFT)
        (char-ci<=? . g$7516$tVUFT)
        (char-alphabetic? . g$13031$tVUFT)
        (call-with-output-file . g$7857$tVUFT)
        (call-with-input-file . g$7856$tVUFT)
        (write-char . g$7838$tVUFT)
        (write . g$12999$tVUFT)
        (with-output-to-file . g$7855$tVUFT)
        (with-input-from-file . g$7854$tVUFT)
        (read-char . g$7837$tVUFT)
        (read . g$12998$tVUFT)
        (peek-char . g$7836$tVUFT)
        (open-output-file . g$12997$tVUFT)
        (open-input-file . g$12996$tVUFT)
        (newline . g$7858$tVUFT)
        (display . g$12995$tVUFT)
        (close-output-port . g$12994$tVUFT)
        (close-input-port . g$12993$tVUFT)
        (eof-object? . g$12992$tVUFT)
        (current-error-port . g$12990$tVUFT)
        (current-output-port . g$12989$tVUFT)
        (current-input-port . g$12988$tVUFT)
        (output-port? . g$12987$tVUFT)
        (input-port? . g$12986$tVUFT)
        (scheme-report-environment . g$9547$tVUFT)
        (quotient . g$7395$tVUFT)
        (null-environment . g$9546$tVUFT)
        (remainder . g$7396$tVUFT)
        (modulo . g$7397$tVUFT)
        (inexact->exact . g$7392$tVUFT)
        (force . g$7399$tVUFT)
        (exact->inexact . g$7393$tVUFT)
        (string-fill! . g$12927$tVUFT)
        (string-set! . g$12926$tVUFT)
        (set-cdr! . g$12925$tVUFT)
        (set-car! . g$12924$tVUFT)
        (memv . g$5968$tVUFT)
        (memq . g$5967$tVUFT)
        (member . g$5969$tVUFT)
        (assv . g$5964$tVUFT)
        (assq . g$5963$tVUFT)
        (assoc . g$5965$tVUFT)
        (eval . g$9549$tVUFT)
        (zero? . g$6439$tVUFT)
        (vector? . g$6399$tVUFT)
        (vector-set! . g$12841$tVUFT)
        (vector-ref . g$12840$tVUFT)
        (vector-length . g$12839$tVUFT)
        (vector-fill! . g$6407$tVUFT)
        (vector->list . g$12838$tVUFT)
        (vector . g$12837$tVUFT)
        (values . g$12836$tVUFT)
        (truncate . g$12835$tVUFT)
        (tan . g$12834$tVUFT)
        (symbol? . g$6401$tVUFT)
        (symbol->string . g$12833$tVUFT)
        (substring . g$12832$tVUFT)
        (string? . g$12831$tVUFT)
        (string>? . g$6484$tVUFT)
        (string>=? . g$6486$tVUFT)
        (string=? . g$6482$tVUFT)
        (string<? . g$6483$tVUFT)
        (string<=? . g$6485$tVUFT)
        (string-ref . g$12830$tVUFT)
        (string-length . g$12829$tVUFT)
        (string-copy . g$12828$tVUFT)
        (string-append . g$12827$tVUFT)
        (string->symbol . g$12826$tVUFT)
        (string->number . g$12825$tVUFT)
        (string->list . g$12824$tVUFT)
        (string . g$12823$tVUFT)
        (sqrt . g$12822$tVUFT)
        (sin . g$12821$tVUFT)
        (round . g$12820$tVUFT)
        (reverse . g$6408$tVUFT)
        (real? . g$12819$tVUFT)
        (real-part . g$12817$tVUFT)
        (rationalize . g$6530$tVUFT)
        (rational? . g$12816$tVUFT)
        (procedure? . g$6403$tVUFT)
        (positive? . g$6437$tVUFT)
        (pair? . g$12814$tVUFT)
        (odd? . g$6441$tVUFT)
        (numerator . g$12813$tVUFT)
        (number? . g$12812$tVUFT)
        (number->string . g$12811$tVUFT)
        (null? . g$12810$tVUFT)
        (not . g$12809$tVUFT)
        (negative? . g$6438$tVUFT)
        (min . g$6443$tVUFT)
        (max . g$6442$tVUFT)
        (map . g$5975$tVUFT)
        (make-vector . g$12807$tVUFT)
        (make-string . g$12806$tVUFT)
        (make-rectangular . g$12805$tVUFT)
        (make-polar . g$12804$tVUFT)
        (magnitude . g$12803$tVUFT)
        (log . g$12802$tVUFT)
        (list? . g$12801$tVUFT)
        (list-tail . g$5955$tVUFT)
        (list-ref . g$5956$tVUFT)
        (list->vector . g$6396$tVUFT)
        (list->string . g$6397$tVUFT)
        (list . g$12800$tVUFT)
        (length . g$12799$tVUFT)
        (lcm . g$6445$tVUFT)
        (integer? . g$12798$tVUFT)
        (integer->char . g$12796$tVUFT)
        (inexact? . g$12794$tVUFT)
        (imag-part . g$12792$tVUFT)
        (gcd . g$6444$tVUFT)
        (for-each . g$5976$tVUFT)
        (floor . g$12791$tVUFT)
        (expt . g$12789$tVUFT)
        (exp . g$12788$tVUFT)
        (exact? . g$12787$tVUFT)
        (even? . g$6440$tVUFT)
        (eqv? . g$12783$tVUFT)
        (equal? . g$12782$tVUFT)
        (eq? . g$12781$tVUFT)
        (dynamic-wind . g$12780$tVUFT)
        (denominator . g$12777$tVUFT)
        (cos . g$12776$tVUFT)
        (cons . g$12775$tVUFT)
        (complex? . g$12774$tVUFT)
        (char? . g$6398$tVUFT)
        (char>? . g$6527$tVUFT)
        (char>=? . g$6529$tVUFT)
        (char=? . g$6525$tVUFT)
        (char<? . g$6526$tVUFT)
        (char<=? . g$6528$tVUFT)
        (char->integer . g$12773$tVUFT)
        (ceiling . g$12772$tVUFT)
        (call-with-values . g$12771$tVUFT)
        (call-with-current-continuation . g$12769$tVUFT)
        (cddddr . g$6436$tVUFT)
        (cdddar . g$6435$tVUFT)
        (cddadr . g$6434$tVUFT)
        (cddaar . g$6433$tVUFT)
        (cdaddr . g$6432$tVUFT)
        (cdadar . g$6431$tVUFT)
        (cdaadr . g$6430$tVUFT)
        (cdaaar . g$6429$tVUFT)
        (cadddr . g$6428$tVUFT)
        (caddar . g$6427$tVUFT)
        (cadadr . g$6426$tVUFT)
        (cadaar . g$6425$tVUFT)
        (caaddr . g$6424$tVUFT)
        (caadar . g$6423$tVUFT)
        (caaadr . g$6422$tVUFT)
        (caaaar . g$6421$tVUFT)
        (cdddr . g$6420$tVUFT)
        (cddar . g$6419$tVUFT)
        (cdadr . g$6418$tVUFT)
        (cdaar . g$6417$tVUFT)
        (caddr . g$6416$tVUFT)
        (cadar . g$6415$tVUFT)
        (caadr . g$6414$tVUFT)
        (caaar . g$6413$tVUFT)
        (cddr . g$6412$tVUFT)
        (cdar . g$6411$tVUFT)
        (cadr . g$6410$tVUFT)
        (caar . g$6409$tVUFT)
        (cdr . g$12768$tVUFT)
        (car . g$12767$tVUFT)
        (boolean? . g$6402$tVUFT)
        (atan . g$12766$tVUFT)
        (asin . g$12764$tVUFT)
        (apply . g$12763$tVUFT)
        (append . g$12762$tVUFT)
        (angle . g$12761$tVUFT)
        (acos . g$12760$tVUFT)
        (abs . g$12759$tVUFT)
        (/ . g$12758$tVUFT)
        (* . g$12757$tVUFT)
        (- . g$12756$tVUFT)
        (+ . g$12755$tVUFT)
        (>= . g$12754$tVUFT)
        (> . g$12753$tVUFT)
        (= . g$12752$tVUFT)
        (<= . g$12751$tVUFT)
        (< . g$12750$tVUFT)
        (unquote-splicing . g$12666$tVUFT)
        (unquote . g$12665$tVUFT)
        (else . g$12663$tVUFT)
        (=> . g$12662$tVUFT)
        (... . g$12661$tVUFT)
        (delay . g$12658$tVUFT)
        (or . g$12656$tVUFT)
        (and . g$12655$tVUFT)
        (do . g$12654$tVUFT)
        (cond . g$12653$tVUFT)
        (let* . g$12652$tVUFT)
        (let . g$12651$tVUFT)
        (quasiquote . g$12647$tVUFT)
        (syntax-rules . g$12646$tVUFT)
        (case . g$12637$tVUFT)
        (if . g$12633$tVUFT)
        (letrec . g$12631$tVUFT)
        (lambda . g$12628$tVUFT)
        (quote . g$12625$tVUFT)
        (letrec-syntax . g$12623$tVUFT)
        (let-syntax . g$12622$tVUFT)
        (set! . g$12621$tVUFT)
        (begin . g$12617$tVUFT)
        (define-syntax . g$12615$tVUFT)
        (define . g$12614$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$8091$tVUFT
      'g$13091$tVUFT
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$13045$tVUFT)
        (string-titlecase . g$13044$tVUFT)
        (string-normalize-nfkd . g$7521$tVUFT)
        (string-normalize-nfkc . g$7520$tVUFT)
        (string-normalize-nfd . g$7519$tVUFT)
        (string-normalize-nfc . g$7518$tVUFT)
        (string-foldcase . g$13043$tVUFT)
        (string-downcase . g$13042$tVUFT)
        (string-ci>? . g$7476$tVUFT)
        (string-ci>=? . g$7478$tVUFT)
        (string-ci=? . g$7474$tVUFT)
        (string-ci<? . g$7475$tVUFT)
        (string-ci<=? . g$7477$tVUFT)
        (char-whitespace? . g$13041$tVUFT)
        (char-upper-case? . g$13040$tVUFT)
        (char-title-case? . g$13039$tVUFT)
        (char-numeric? . g$13038$tVUFT)
        (char-lower-case? . g$13037$tVUFT)
        (char-general-category . g$13036$tVUFT)
        (char-upcase . g$13035$tVUFT)
        (char-titlecase . g$13034$tVUFT)
        (char-foldcase . g$13033$tVUFT)
        (char-downcase . g$13032$tVUFT)
        (char-ci>? . g$7515$tVUFT)
        (char-ci>=? . g$7517$tVUFT)
        (char-ci=? . g$7513$tVUFT)
        (char-ci<? . g$7514$tVUFT)
        (char-ci<=? . g$7516$tVUFT)
        (char-alphabetic? . g$13031$tVUFT)
        (make-variable-transformer . g$9168$tVUFT)
        (identifier? . g$9568$tVUFT)
        (generate-temporaries . g$9557$tVUFT)
        (free-identifier=? . g$9558$tVUFT)
        (syntax->datum . g$9570$tVUFT)
        (datum->syntax . g$9569$tVUFT)
        (bound-identifier=? . g$9559$tVUFT)
        (record-type-descriptor? . g$13030$tVUFT)
        (record-predicate . g$13029$tVUFT)
        (record-mutator . g$13028$tVUFT)
        (record-constructor . g$13027$tVUFT)
        (record-accessor . g$13026$tVUFT)
        (make-record-type-descriptor . g$13025$tVUFT)
        (make-record-constructor-descriptor . g$13024$tVUFT)
        (record? . g$13023$tVUFT)
        (record-type-uid . g$13022$tVUFT)
        (record-type-sealed? . g$13021$tVUFT)
        (record-type-parent . g$13020$tVUFT)
        (record-type-opaque? . g$13019$tVUFT)
        (record-type-name . g$13018$tVUFT)
        (record-type-generative? . g$13017$tVUFT)
        (record-type-field-names . g$13016$tVUFT)
        (record-rtd . g$13015$tVUFT)
        (record-field-mutable? . g$13014$tVUFT)
        (delete-file . g$6766$tVUFT)
        (file-exists? . g$6765$tVUFT)
        (vector-sort! . g$13013$tVUFT)
        (vector-sort . g$13012$tVUFT)
        (list-sort . g$7416$tVUFT)
        (symbol-hash . g$13011$tVUFT)
        (string-ci-hash . g$13010$tVUFT)
        (string-hash . g$13009$tVUFT)
        (equal-hash . g$13008$tVUFT)
        (hashtable-equivalence-function . g$13007$tVUFT)
        (make-hashtable . g$13006$tVUFT)
        (hashtable-hash-function . g$13005$tVUFT)
        (make-eqv-hashtable . g$6734$tVUFT)
        (make-eq-hashtable . g$6733$tVUFT)
        (hashtable? . g$13004$tVUFT)
        (hashtable-update! . g$6740$tVUFT)
        (hashtable-size . g$6735$tVUFT)
        (hashtable-set! . g$6737$tVUFT)
        (hashtable-ref . g$6736$tVUFT)
        (hashtable-mutable? . g$13003$tVUFT)
        (hashtable-keys . g$13002$tVUFT)
        (hashtable-entries . g$13001$tVUFT)
        (hashtable-delete! . g$6738$tVUFT)
        (hashtable-copy . g$13000$tVUFT)
        (hashtable-contains? . g$6739$tVUFT)
        (hashtable-clear! . g$6741$tVUFT)
        (call-with-output-file . g$7857$tVUFT)
        (call-with-input-file . g$7856$tVUFT)
        (write-char . g$7838$tVUFT)
        (write . g$12999$tVUFT)
        (with-output-to-file . g$7855$tVUFT)
        (with-input-from-file . g$7854$tVUFT)
        (read-char . g$7837$tVUFT)
        (read . g$12998$tVUFT)
        (peek-char . g$7836$tVUFT)
        (open-output-file . g$12997$tVUFT)
        (open-input-file . g$12996$tVUFT)
        (newline . g$7858$tVUFT)
        (display . g$12995$tVUFT)
        (close-output-port . g$12994$tVUFT)
        (close-input-port . g$12993$tVUFT)
        (eof-object? . g$12992$tVUFT)
        (eof-object . g$12991$tVUFT)
        (current-error-port . g$12990$tVUFT)
        (current-output-port . g$12989$tVUFT)
        (current-input-port . g$12988$tVUFT)
        (output-port? . g$12987$tVUFT)
        (input-port? . g$12986$tVUFT)
        (utf-8-codec . g$12985$tVUFT)
        (utf-16-codec . g$12984$tVUFT)
        (transcoder-error-handling-mode . g$12983$tVUFT)
        (transcoder-eol-style . g$12982$tVUFT)
        (transcoder-codec . g$12981$tVUFT)
        (transcoded-port . g$12980$tVUFT)
        (textual-port? . g$12979$tVUFT)
        (string->bytevector . g$12978$tVUFT)
        (standard-output-port . g$12977$tVUFT)
        (standard-input-port . g$12976$tVUFT)
        (standard-error-port . g$12975$tVUFT)
        (set-port-position! . g$12974$tVUFT)
        (put-u8 . g$12973$tVUFT)
        (put-string . g$12972$tVUFT)
        (put-datum . g$7816$tVUFT)
        (put-char . g$12971$tVUFT)
        (put-bytevector . g$12970$tVUFT)
        (port? . g$7821$tVUFT)
        (port-transcoder . g$12969$tVUFT)
        (port-position . g$12968$tVUFT)
        (port-has-set-port-position!? . g$12967$tVUFT)
        (port-has-port-position? . g$12966$tVUFT)
        (port-eof? . g$12965$tVUFT)
        (output-port-buffer-mode . g$12964$tVUFT)
        (open-string-output-port . g$7820$tVUFT)
        (open-string-input-port . g$12963$tVUFT)
        (open-file-output-port . g$12962$tVUFT)
        (open-file-input/output-port . g$12961$tVUFT)
        (open-file-input-port . g$12960$tVUFT)
        (open-bytevector-output-port . g$12959$tVUFT)
        (open-bytevector-input-port . g$12958$tVUFT)
        (native-transcoder . g$12957$tVUFT)
        (native-eol-style . g$12956$tVUFT)
        (make-transcoder . g$12955$tVUFT)
        (latin-1-codec . g$12954$tVUFT)
        (make-i/o-write-error . g$7204$tVUFT)
        (make-i/o-read-error . g$7189$tVUFT)
        (make-i/o-port-error . g$7313$tVUFT)
        (make-i/o-invalid-position-error . g$7219$tVUFT)
        (make-i/o-filename-error . g$7236$tVUFT)
        (make-i/o-file-protection-error . g$7253$tVUFT)
        (make-i/o-file-is-read-only-error . g$7268$tVUFT)
        (make-i/o-file-does-not-exist-error . g$7298$tVUFT)
        (make-i/o-file-already-exists-error . g$7283$tVUFT)
        (make-i/o-error . g$7174$tVUFT)
        (make-i/o-encoding-error . g$7345$tVUFT)
        (make-i/o-decoding-error . g$7330$tVUFT)
        (make-custom-textual-output-port . g$12953$tVUFT)
        (make-custom-textual-input/output-port . g$12952$tVUFT)
        (make-custom-textual-input-port . g$12951$tVUFT)
        (make-custom-binary-output-port . g$12950$tVUFT)
        (make-custom-binary-input/output-port . g$12949$tVUFT)
        (make-custom-binary-input-port . g$12948$tVUFT)
        (make-bytevector . g$12947$tVUFT)
        (lookahead-u8 . g$12946$tVUFT)
        (lookahead-char . g$12945$tVUFT)
        (i/o-write-error? . g$7205$tVUFT)
        (i/o-read-error? . g$7190$tVUFT)
        (i/o-port-error? . g$7315$tVUFT)
        (i/o-invalid-position-error? . g$7221$tVUFT)
        (i/o-error-position . g$7222$tVUFT)
        (i/o-filename-error? . g$7238$tVUFT)
        (i/o-file-protection-error? . g$7254$tVUFT)
        (i/o-file-is-read-only-error? . g$7269$tVUFT)
        (i/o-file-does-not-exist-error? . g$7299$tVUFT)
        (i/o-file-already-exists-error? . g$7284$tVUFT)
        (i/o-error? . g$7175$tVUFT)
        (i/o-error-port . g$7316$tVUFT)
        (i/o-error-filename . g$7239$tVUFT)
        (i/o-encoding-error? . g$7347$tVUFT)
        (i/o-encoding-error-char . g$7348$tVUFT)
        (i/o-decoding-error? . g$7331$tVUFT)
        (get-u8 . g$12944$tVUFT)
        (get-string-n! . g$12943$tVUFT)
        (get-string-n . g$12942$tVUFT)
        (get-string-all . g$12941$tVUFT)
        (get-line . g$12940$tVUFT)
        (get-datum . g$7817$tVUFT)
        (get-char . g$12939$tVUFT)
        (get-bytevector-some . g$12938$tVUFT)
        (get-bytevector-n! . g$12937$tVUFT)
        (get-bytevector-n . g$12936$tVUFT)
        (get-bytevector-all . g$12935$tVUFT)
        (flush-output-port . g$12934$tVUFT)
        (close-port . g$12933$tVUFT)
        (call-with-string-output-port . g$7822$tVUFT)
        (call-with-port . g$7823$tVUFT)
        (call-with-bytevector-output-port . g$12932$tVUFT)
        (bytevector->string . g$12931$tVUFT)
        (buffer-mode? . g$12930$tVUFT)
        (binary-port? . g$12929$tVUFT)
        (exit . g$12928$tVUFT)
        (command-line . g$12565$tVUFT)
        (remove . g$5980$tVUFT)
        (remv . g$5981$tVUFT)
        (remp . g$5961$tVUFT)
        (remq . g$5982$tVUFT)
        (partition . g$5960$tVUFT)
        (memv . g$5968$tVUFT)
        (memq . g$5967$tVUFT)
        (memp . g$5970$tVUFT)
        (member . g$5969$tVUFT)
        (exists . g$5974$tVUFT)
        (for-all . g$5973$tVUFT)
        (fold-right . g$5979$tVUFT)
        (fold-left . g$5978$tVUFT)
        (find . g$5959$tVUFT)
        (filter . g$5962$tVUFT)
        (cons* . g$5977$tVUFT)
        (assv . g$5964$tVUFT)
        (assq . g$5963$tVUFT)
        (assp . g$5966$tVUFT)
        (assoc . g$5965$tVUFT)
        (with-exception-handler . g$12923$tVUFT)
        (raise-continuable . g$12922$tVUFT)
        (raise . g$12921$tVUFT)
        (make-enumeration . g$7922$tVUFT)
        (enum-set=? . g$7929$tVUFT)
        (enum-set-universe . g$7923$tVUFT)
        (enum-set-union . g$7930$tVUFT)
        (enum-set-subset? . g$7928$tVUFT)
        (enum-set-projection . g$7934$tVUFT)
        (enum-set-member? . g$7927$tVUFT)
        (enum-set-intersection . g$7931$tVUFT)
        (enum-set-indexer . g$7924$tVUFT)
        (enum-set-difference . g$7932$tVUFT)
        (enum-set-constructor . g$7925$tVUFT)
        (enum-set-complement . g$7933$tVUFT)
        (enum-set->list . g$7926$tVUFT)
        (who-condition? . g$7080$tVUFT)
        (warning? . g$6987$tVUFT)
        (violation? . g$7032$tVUFT)
        (undefined-violation? . g$7160$tVUFT)
        (syntax-violation? . g$7143$tVUFT)
        (syntax-violation-subform . g$7145$tVUFT)
        (syntax-violation-form . g$7144$tVUFT)
        (syntax-violation . g$9567$tVUFT)
        (simple-conditions . g$12920$tVUFT)
        (serious-condition? . g$7002$tVUFT)
        (non-continuable-violation? . g$7096$tVUFT)
        (message-condition? . g$6971$tVUFT)
        (make-who-condition . g$7078$tVUFT)
        (make-warning . g$6986$tVUFT)
        (make-violation . g$7031$tVUFT)
        (make-undefined-violation . g$7159$tVUFT)
        (make-syntax-violation . g$7140$tVUFT)
        (make-serious-condition . g$7001$tVUFT)
        (make-non-continuable-violation . g$7095$tVUFT)
        (make-message-condition . g$6969$tVUFT)
        (make-lexical-violation . g$7125$tVUFT)
        (make-irritants-condition . g$7061$tVUFT)
        (make-implementation-restriction-violation . g$7110$tVUFT)
        (make-error . g$7016$tVUFT)
        (make-assertion-violation . g$7046$tVUFT)
        (lexical-violation? . g$7126$tVUFT)
        (irritants-condition? . g$7063$tVUFT)
        (implementation-restriction-violation? . g$7111$tVUFT)
        (error? . g$7017$tVUFT)
        (condition-who . g$7081$tVUFT)
        (condition-predicate . g$12919$tVUFT)
        (condition-message . g$6972$tVUFT)
        (condition-irritants . g$7064$tVUFT)
        (condition-accessor . g$12918$tVUFT)
        (condition . g$12917$tVUFT)
        (assertion-violation? . g$7047$tVUFT)
        (condition? . g$12916$tVUFT)
        (utf32->string . g$12915$tVUFT)
        (utf16->string . g$12914$tVUFT)
        (utf8->string . g$12913$tVUFT)
        (uint-list->bytevector . g$12912$tVUFT)
        (u8-list->bytevector . g$12911$tVUFT)
        (string->utf8 . g$12910$tVUFT)
        (string->utf32 . g$12909$tVUFT)
        (string->utf16 . g$12908$tVUFT)
        (sint-list->bytevector . g$12907$tVUFT)
        (native-endianness . g$6772$tVUFT)
        (bytevector? . g$6400$tVUFT)
        (bytevector=? . g$12906$tVUFT)
        (bytevector-uint-set! . g$12905$tVUFT)
        (bytevector-uint-ref . g$12904$tVUFT)
        (bytevector-u8-set! . g$12903$tVUFT)
        (bytevector-u8-ref . g$12902$tVUFT)
        (bytevector-u64-set! . g$6793$tVUFT)
        (bytevector-u64-ref . g$6789$tVUFT)
        (bytevector-u64-native-set! . g$6795$tVUFT)
        (bytevector-u64-native-ref . g$6791$tVUFT)
        (bytevector-u32-set! . g$6785$tVUFT)
        (bytevector-u32-ref . g$6781$tVUFT)
        (bytevector-u32-native-set! . g$6787$tVUFT)
        (bytevector-u32-native-ref . g$6783$tVUFT)
        (bytevector-u16-set! . g$6777$tVUFT)
        (bytevector-u16-ref . g$6773$tVUFT)
        (bytevector-u16-native-set! . g$6779$tVUFT)
        (bytevector-u16-native-ref . g$6775$tVUFT)
        (bytevector-sint-set! . g$12901$tVUFT)
        (bytevector-sint-ref . g$12900$tVUFT)
        (bytevector-s8-set! . g$12899$tVUFT)
        (bytevector-s8-ref . g$12898$tVUFT)
        (bytevector-s64-set! . g$6794$tVUFT)
        (bytevector-s64-ref . g$6790$tVUFT)
        (bytevector-s64-native-set! . g$6796$tVUFT)
        (bytevector-s64-native-ref . g$6792$tVUFT)
        (bytevector-s32-set! . g$6786$tVUFT)
        (bytevector-s32-ref . g$6782$tVUFT)
        (bytevector-s32-native-set! . g$6788$tVUFT)
        (bytevector-s32-native-ref . g$6784$tVUFT)
        (bytevector-s16-set! . g$6778$tVUFT)
        (bytevector-s16-ref . g$6774$tVUFT)
        (bytevector-s16-native-set! . g$6780$tVUFT)
        (bytevector-s16-native-ref . g$6776$tVUFT)
        (bytevector-length . g$12897$tVUFT)
        (bytevector-ieee-single-set! . g$12896$tVUFT)
        (bytevector-ieee-single-ref . g$12895$tVUFT)
        (bytevector-ieee-single-native-set! . g$6799$tVUFT)
        (bytevector-ieee-single-native-ref . g$6797$tVUFT)
        (bytevector-ieee-double-set! . g$12894$tVUFT)
        (bytevector-ieee-double-ref . g$12893$tVUFT)
        (bytevector-ieee-double-native-set! . g$6800$tVUFT)
        (bytevector-ieee-double-native-ref . g$6798$tVUFT)
        (bytevector-fill! . g$12892$tVUFT)
        (bytevector-copy! . g$12891$tVUFT)
        (bytevector-copy . g$12890$tVUFT)
        (bytevector->uint-list . g$12889$tVUFT)
        (bytevector->u8-list . g$12888$tVUFT)
        (bytevector->sint-list . g$12887$tVUFT)
        (no-nans-violation? . g$7378$tVUFT)
        (no-infinities-violation? . g$7363$tVUFT)
        (make-no-nans-violation . g$7377$tVUFT)
        (make-no-infinities-violation . g$7362$tVUFT)
        (real->flonum . g$12886$tVUFT)
        (flzero? . g$7736$tVUFT)
        (fltruncate . g$7731$tVUFT)
        (fltan . g$7721$tVUFT)
        (flsqrt . g$7726$tVUFT)
        (flsin . g$7719$tVUFT)
        (flround . g$7732$tVUFT)
        (flpositive? . g$7734$tVUFT)
        (flonum? . g$6405$tVUFT)
        (flodd? . g$7738$tVUFT)
        (flnumerator . g$12885$tVUFT)
        (flnegative? . g$7735$tVUFT)
        (flnan? . g$7718$tVUFT)
        (flmod0 . g$7714$tVUFT)
        (flmod . g$7713$tVUFT)
        (flmin . g$7740$tVUFT)
        (flmax . g$7739$tVUFT)
        (fllog . g$7725$tVUFT)
        (flinteger? . g$7715$tVUFT)
        (flinfinite? . g$7717$tVUFT)
        (flfloor . g$7730$tVUFT)
        (flfinite? . g$7716$tVUFT)
        (flexpt . g$7728$tVUFT)
        (flexp . g$7727$tVUFT)
        (fleven? . g$7737$tVUFT)
        (fldiv0-and-mod0 . g$7710$tVUFT)
        (fldiv0 . g$7712$tVUFT)
        (fldiv-and-mod . g$7709$tVUFT)
        (fldiv . g$7711$tVUFT)
        (fldenominator . g$12884$tVUFT)
        (flcos . g$7720$tVUFT)
        (flceiling . g$7729$tVUFT)
        (flatan . g$7724$tVUFT)
        (flasin . g$7722$tVUFT)
        (flacos . g$7723$tVUFT)
        (flabs . g$7733$tVUFT)
        (fl>? . g$12883$tVUFT)
        (fl>=? . g$12882$tVUFT)
        (fl=? . g$12881$tVUFT)
        (fl<? . g$12880$tVUFT)
        (fl<=? . g$12879$tVUFT)
        (fl/ . g$12878$tVUFT)
        (fl- . g$12877$tVUFT)
        (fl+ . g$12876$tVUFT)
        (fl* . g$12875$tVUFT)
        (fixnum->flonum . g$12874$tVUFT)
        (fxzero? . g$7617$tVUFT)
        (fxxor . g$12873$tVUFT)
        (fxrotate-bit-field . g$7631$tVUFT)
        (fxreverse-bit-field . g$12872$tVUFT)
        (fxpositive? . g$7615$tVUFT)
        (fxodd? . g$7619$tVUFT)
        (fxnot . g$12871$tVUFT)
        (fxnegative? . g$7616$tVUFT)
        (fxmod0 . g$7614$tVUFT)
        (fxmod . g$7613$tVUFT)
        (fxmin . g$7621$tVUFT)
        (fxmax . g$7620$tVUFT)
        (fxlength . g$12870$tVUFT)
        (fxior . g$12869$tVUFT)
        (fxif . g$7625$tVUFT)
        (fxfirst-bit-set . g$12868$tVUFT)
        (fxeven? . g$7618$tVUFT)
        (fxdiv0-and-mod0 . g$12867$tVUFT)
        (fxdiv0 . g$7612$tVUFT)
        (fxdiv-and-mod . g$12866$tVUFT)
        (fxdiv . g$7611$tVUFT)
        (fxcopy-bit-field . g$7628$tVUFT)
        (fxcopy-bit . g$7626$tVUFT)
        (fxbit-set? . g$12865$tVUFT)
        (fxbit-field . g$7627$tVUFT)
        (fxbit-count . g$12864$tVUFT)
        (fxarithmetic-shift-right . g$7630$tVUFT)
        (fxarithmetic-shift-left . g$7629$tVUFT)
        (fxarithmetic-shift . g$12863$tVUFT)
        (fxand . g$12862$tVUFT)
        (fx>? . g$12861$tVUFT)
        (fx>=? . g$12860$tVUFT)
        (fx=? . g$12859$tVUFT)
        (fx<? . g$12858$tVUFT)
        (fx<=? . g$12857$tVUFT)
        (fx-/carry . g$7623$tVUFT)
        (fx- . g$12856$tVUFT)
        (fx+/carry . g$7624$tVUFT)
        (fx+ . g$12855$tVUFT)
        (fx*/carry . g$7622$tVUFT)
        (fx* . g$12854$tVUFT)
        (greatest-fixnum . g$12853$tVUFT)
        (least-fixnum . g$12852$tVUFT)
        (fixnum-width . g$6406$tVUFT)
        (fixnum? . g$6404$tVUFT)
        (bitwise-rotate-bit-field . g$7585$tVUFT)
        (bitwise-reverse-bit-field . g$12851$tVUFT)
        (bitwise-length . g$12850$tVUFT)
        (bitwise-if . g$7579$tVUFT)
        (bitwise-first-bit-set . g$12849$tVUFT)
        (bitwise-copy-bit-field . g$7582$tVUFT)
        (bitwise-copy-bit . g$7580$tVUFT)
        (bitwise-bit-set? . g$12848$tVUFT)
        (bitwise-bit-field . g$7581$tVUFT)
        (bitwise-bit-count . g$12847$tVUFT)
        (bitwise-xor . g$12846$tVUFT)
        (bitwise-ior . g$12845$tVUFT)
        (bitwise-and . g$12844$tVUFT)
        (bitwise-not . g$12843$tVUFT)
        (bitwise-arithmetic-shift-right . g$7584$tVUFT)
        (bitwise-arithmetic-shift-left . g$7583$tVUFT)
        (bitwise-arithmetic-shift . g$12842$tVUFT)
        (zero? . g$6439$tVUFT)
        (vector? . g$6399$tVUFT)
        (vector-set! . g$12841$tVUFT)
        (vector-ref . g$12840$tVUFT)
        (vector-map . g$6533$tVUFT)
        (vector-length . g$12839$tVUFT)
        (vector-for-each . g$6534$tVUFT)
        (vector-fill! . g$6407$tVUFT)
        (vector->list . g$12838$tVUFT)
        (vector . g$12837$tVUFT)
        (values . g$12836$tVUFT)
        (truncate . g$12835$tVUFT)
        (tan . g$12834$tVUFT)
        (symbol? . g$6401$tVUFT)
        (symbol=? . g$6487$tVUFT)
        (symbol->string . g$12833$tVUFT)
        (substring . g$12832$tVUFT)
        (string? . g$12831$tVUFT)
        (string>? . g$6484$tVUFT)
        (string>=? . g$6486$tVUFT)
        (string=? . g$6482$tVUFT)
        (string<? . g$6483$tVUFT)
        (string<=? . g$6485$tVUFT)
        (string-ref . g$12830$tVUFT)
        (string-length . g$12829$tVUFT)
        (string-for-each . g$6535$tVUFT)
        (string-copy . g$12828$tVUFT)
        (string-append . g$12827$tVUFT)
        (string->symbol . g$12826$tVUFT)
        (string->number . g$12825$tVUFT)
        (string->list . g$12824$tVUFT)
        (string . g$12823$tVUFT)
        (sqrt . g$12822$tVUFT)
        (sin . g$12821$tVUFT)
        (round . g$12820$tVUFT)
        (reverse . g$6408$tVUFT)
        (real? . g$12819$tVUFT)
        (real-valued? . g$12818$tVUFT)
        (real-part . g$12817$tVUFT)
        (rationalize . g$6530$tVUFT)
        (rational? . g$12816$tVUFT)
        (rational-valued? . g$12815$tVUFT)
        (procedure? . g$6403$tVUFT)
        (positive? . g$6437$tVUFT)
        (pair? . g$12814$tVUFT)
        (odd? . g$6441$tVUFT)
        (numerator . g$12813$tVUFT)
        (number? . g$12812$tVUFT)
        (number->string . g$12811$tVUFT)
        (null? . g$12810$tVUFT)
        (not . g$12809$tVUFT)
        (negative? . g$6438$tVUFT)
        (nan? . g$12808$tVUFT)
        (min . g$6443$tVUFT)
        (max . g$6442$tVUFT)
        (map . g$5975$tVUFT)
        (make-vector . g$12807$tVUFT)
        (make-string . g$12806$tVUFT)
        (make-rectangular . g$12805$tVUFT)
        (make-polar . g$12804$tVUFT)
        (magnitude . g$12803$tVUFT)
        (log . g$12802$tVUFT)
        (list? . g$12801$tVUFT)
        (list-tail . g$5955$tVUFT)
        (list-ref . g$5956$tVUFT)
        (list->vector . g$6396$tVUFT)
        (list->string . g$6397$tVUFT)
        (list . g$12800$tVUFT)
        (length . g$12799$tVUFT)
        (lcm . g$6445$tVUFT)
        (integer? . g$12798$tVUFT)
        (integer-valued? . g$12797$tVUFT)
        (integer->char . g$12796$tVUFT)
        (infinite? . g$12795$tVUFT)
        (inexact? . g$12794$tVUFT)
        (inexact . g$12793$tVUFT)
        (imag-part . g$12792$tVUFT)
        (gcd . g$6444$tVUFT)
        (for-each . g$5976$tVUFT)
        (floor . g$12791$tVUFT)
        (finite? . g$12790$tVUFT)
        (expt . g$12789$tVUFT)
        (exp . g$12788$tVUFT)
        (exact? . g$12787$tVUFT)
        (exact-integer-sqrt . g$12786$tVUFT)
        (exact . g$12785$tVUFT)
        (even? . g$6440$tVUFT)
        (error . g$12784$tVUFT)
        (eqv? . g$12783$tVUFT)
        (equal? . g$12782$tVUFT)
        (eq? . g$12781$tVUFT)
        (dynamic-wind . g$12780$tVUFT)
        (div0-and-mod0 . g$12779$tVUFT)
        (mod0 . g$6395$tVUFT)
        (div0 . g$6393$tVUFT)
        (div-and-mod . g$12778$tVUFT)
        (mod . g$6394$tVUFT)
        (div . g$6392$tVUFT)
        (denominator . g$12777$tVUFT)
        (cos . g$12776$tVUFT)
        (cons . g$12775$tVUFT)
        (complex? . g$12774$tVUFT)
        (char? . g$6398$tVUFT)
        (char>? . g$6527$tVUFT)
        (char>=? . g$6529$tVUFT)
        (char=? . g$6525$tVUFT)
        (char<? . g$6526$tVUFT)
        (char<=? . g$6528$tVUFT)
        (char->integer . g$12773$tVUFT)
        (ceiling . g$12772$tVUFT)
        (call-with-values . g$12771$tVUFT)
        (call/cc . g$12770$tVUFT)
        (call-with-current-continuation . g$12769$tVUFT)
        (cddddr . g$6436$tVUFT)
        (cdddar . g$6435$tVUFT)
        (cddadr . g$6434$tVUFT)
        (cddaar . g$6433$tVUFT)
        (cdaddr . g$6432$tVUFT)
        (cdadar . g$6431$tVUFT)
        (cdaadr . g$6430$tVUFT)
        (cdaaar . g$6429$tVUFT)
        (cadddr . g$6428$tVUFT)
        (caddar . g$6427$tVUFT)
        (cadadr . g$6426$tVUFT)
        (cadaar . g$6425$tVUFT)
        (caaddr . g$6424$tVUFT)
        (caadar . g$6423$tVUFT)
        (caaadr . g$6422$tVUFT)
        (caaaar . g$6421$tVUFT)
        (cdddr . g$6420$tVUFT)
        (cddar . g$6419$tVUFT)
        (cdadr . g$6418$tVUFT)
        (cdaar . g$6417$tVUFT)
        (caddr . g$6416$tVUFT)
        (cadar . g$6415$tVUFT)
        (caadr . g$6414$tVUFT)
        (caaar . g$6413$tVUFT)
        (cddr . g$6412$tVUFT)
        (cdar . g$6411$tVUFT)
        (cadr . g$6410$tVUFT)
        (caar . g$6409$tVUFT)
        (cdr . g$12768$tVUFT)
        (car . g$12767$tVUFT)
        (boolean? . g$6402$tVUFT)
        (boolean=? . g$6488$tVUFT)
        (atan . g$12766$tVUFT)
        (assertion-violation . g$12765$tVUFT)
        (asin . g$12764$tVUFT)
        (apply . g$12763$tVUFT)
        (append . g$12762$tVUFT)
        (angle . g$12761$tVUFT)
        (acos . g$12760$tVUFT)
        (abs . g$12759$tVUFT)
        (/ . g$12758$tVUFT)
        (* . g$12757$tVUFT)
        (- . g$12756$tVUFT)
        (+ . g$12755$tVUFT)
        (>= . g$12754$tVUFT)
        (> . g$12753$tVUFT)
        (= . g$12752$tVUFT)
        (<= . g$12751$tVUFT)
        (< . g$12750$tVUFT)
        (&no-nans . g$12718$tVUFT)
        (&no-infinities . g$12717$tVUFT)
        (&i/o-encoding . g$12716$tVUFT)
        (&i/o-decoding . g$12715$tVUFT)
        (&i/o-port . g$12714$tVUFT)
        (&i/o-file-does-not-exist . g$12713$tVUFT)
        (&i/o-file-already-exists . g$12712$tVUFT)
        (&i/o-file-is-read-only . g$12711$tVUFT)
        (&i/o-file-protection . g$12710$tVUFT)
        (&i/o-filename . g$12709$tVUFT)
        (&i/o-invalid-position . g$12708$tVUFT)
        (&i/o-write . g$12707$tVUFT)
        (&i/o-read . g$12706$tVUFT)
        (&i/o . g$12705$tVUFT)
        (&non-continuable . g$12704$tVUFT)
        (&undefined . g$12703$tVUFT)
        (&syntax . g$12702$tVUFT)
        (&lexical . g$12701$tVUFT)
        (&implementation-restriction . g$12700$tVUFT)
        (&who . g$12699$tVUFT)
        (&irritants . g$12698$tVUFT)
        (&assertion . g$12697$tVUFT)
        (&violation . g$12696$tVUFT)
        (&error . g$12695$tVUFT)
        (&serious . g$12694$tVUFT)
        (&warning . g$12693$tVUFT)
        (&message . g$12692$tVUFT)
        (&condition . g$12691$tVUFT)
        (define-condition-type . g$12690$tVUFT)
        (define-enumeration . g$12689$tVUFT)
        (define-record-type . g$12688$tVUFT)
        (parent-rtd . g$12687$tVUFT)
        (nongenerative . g$12686$tVUFT)
        (opaque . g$12685$tVUFT)
        (sealed . g$12684$tVUFT)
        (protocol . g$12683$tVUFT)
        (parent . g$12682$tVUFT)
        (immutable . g$12681$tVUFT)
        (mutable . g$12680$tVUFT)
        (fields . g$12679$tVUFT)
        (error-handling-mode . g$12678$tVUFT)
        (file-options . g$12677$tVUFT)
        (buffer-mode . g$12676$tVUFT)
        (eol-style . g$12675$tVUFT)
        (guard . g$12674$tVUFT)
        (unsyntax-splicing . g$12668$tVUFT)
        (unsyntax . g$12667$tVUFT)
        (unquote-splicing . g$12666$tVUFT)
        (unquote . g$12665$tVUFT)
        (_ . g$12664$tVUFT)
        (else . g$12663$tVUFT)
        (=> . g$12662$tVUFT)
        (... . g$12661$tVUFT)
        (assert . g$12660$tVUFT)
        (endianness . g$12659$tVUFT)
        (or . g$12656$tVUFT)
        (and . g$12655$tVUFT)
        (do . g$12654$tVUFT)
        (cond . g$12653$tVUFT)
        (let* . g$12652$tVUFT)
        (let . g$12651$tVUFT)
        (identifier-syntax . g$12650$tVUFT)
        (with-syntax . g$12649$tVUFT)
        (quasisyntax . g$12648$tVUFT)
        (quasiquote . g$12647$tVUFT)
        (syntax-rules . g$12646$tVUFT)
        (let-values . g$12642$tVUFT)
        (let*-values . g$12641$tVUFT)
        (record-constructor-descriptor . g$12640$tVUFT)
        (record-type-descriptor . g$12639$tVUFT)
        (case . g$12637$tVUFT)
        (unless . g$12635$tVUFT)
        (when . g$12634$tVUFT)
        (if . g$12633$tVUFT)
        (letrec* . g$12632$tVUFT)
        (letrec . g$12631$tVUFT)
        (case-lambda . g$12629$tVUFT)
        (lambda . g$12628$tVUFT)
        (syntax . g$12627$tVUFT)
        (syntax-case . g$12626$tVUFT)
        (quote . g$12625$tVUFT)
        (letrec-syntax . g$12623$tVUFT)
        (let-syntax . g$12622$tVUFT)
        (set! . g$12621$tVUFT)
        (begin . g$12617$tVUFT)
        (define-syntax . g$12615$tVUFT)
        (define . g$12614$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13092$tVUFT
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((scheme-report-environment . g$9547$tVUFT)
        (quotient . g$7395$tVUFT)
        (null-environment . g$9546$tVUFT)
        (remainder . g$7396$tVUFT)
        (modulo . g$7397$tVUFT)
        (inexact->exact . g$7392$tVUFT)
        (force . g$7399$tVUFT)
        (exact->inexact . g$7393$tVUFT)
        (delay . g$12658$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13093$tVUFT
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$12654$tVUFT)
        (unless . g$12635$tVUFT)
        (when . g$12634$tVUFT)
        (case-lambda . g$12629$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13094$tVUFT
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$9549$tVUFT) (environment . g$9545$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13095$tVUFT
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$12925$tVUFT) (set-car! . g$12924$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13096$tVUFT
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$12927$tVUFT) (string-set! . g$12926$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13097$tVUFT
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$12928$tVUFT) (command-line . g$12565$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13098$tVUFT
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$9168$tVUFT)
        (identifier? . g$9568$tVUFT)
        (generate-temporaries . g$9557$tVUFT)
        (free-identifier=? . g$9558$tVUFT)
        (syntax->datum . g$9570$tVUFT)
        (datum->syntax . g$9569$tVUFT)
        (bound-identifier=? . g$9559$tVUFT)
        (syntax-violation . g$9567$tVUFT)
        (unsyntax-splicing . g$12668$tVUFT)
        (unsyntax . g$12667$tVUFT)
        (_ . g$12664$tVUFT)
        (... . g$12661$tVUFT)
        (with-syntax . g$12649$tVUFT)
        (quasisyntax . g$12648$tVUFT)
        (syntax . g$12627$tVUFT)
        (syntax-case . g$12626$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13099$tVUFT
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$6766$tVUFT)
        (file-exists? . g$6765$tVUFT)
        (make-i/o-write-error . g$7204$tVUFT)
        (make-i/o-read-error . g$7189$tVUFT)
        (make-i/o-port-error . g$7313$tVUFT)
        (make-i/o-invalid-position-error . g$7219$tVUFT)
        (make-i/o-filename-error . g$7236$tVUFT)
        (make-i/o-file-protection-error . g$7253$tVUFT)
        (make-i/o-file-is-read-only-error . g$7268$tVUFT)
        (make-i/o-file-does-not-exist-error . g$7298$tVUFT)
        (make-i/o-file-already-exists-error . g$7283$tVUFT)
        (make-i/o-error . g$7174$tVUFT)
        (i/o-write-error? . g$7205$tVUFT)
        (i/o-read-error? . g$7190$tVUFT)
        (i/o-port-error? . g$7315$tVUFT)
        (i/o-invalid-position-error? . g$7221$tVUFT)
        (i/o-error-position . g$7222$tVUFT)
        (i/o-filename-error? . g$7238$tVUFT)
        (i/o-file-protection-error? . g$7254$tVUFT)
        (i/o-file-is-read-only-error? . g$7269$tVUFT)
        (i/o-file-does-not-exist-error? . g$7299$tVUFT)
        (i/o-file-already-exists-error? . g$7284$tVUFT)
        (i/o-error? . g$7175$tVUFT)
        (i/o-error-port . g$7316$tVUFT)
        (i/o-error-filename . g$7239$tVUFT)
        (&i/o-port . g$12714$tVUFT)
        (&i/o-file-does-not-exist . g$12713$tVUFT)
        (&i/o-file-already-exists . g$12712$tVUFT)
        (&i/o-file-is-read-only . g$12711$tVUFT)
        (&i/o-file-protection . g$12710$tVUFT)
        (&i/o-filename . g$12709$tVUFT)
        (&i/o-invalid-position . g$12708$tVUFT)
        (&i/o-write . g$12707$tVUFT)
        (&i/o-read . g$12706$tVUFT)
        (&i/o . g$12705$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13100$tVUFT
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$13013$tVUFT)
        (vector-sort . g$13012$tVUFT)
        (list-sort . g$7416$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13101$tVUFT
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$6439$tVUFT)
        (vector? . g$6399$tVUFT)
        (vector-set! . g$12841$tVUFT)
        (vector-ref . g$12840$tVUFT)
        (vector-map . g$6533$tVUFT)
        (vector-length . g$12839$tVUFT)
        (vector-for-each . g$6534$tVUFT)
        (vector-fill! . g$6407$tVUFT)
        (vector->list . g$12838$tVUFT)
        (vector . g$12837$tVUFT)
        (values . g$12836$tVUFT)
        (truncate . g$12835$tVUFT)
        (tan . g$12834$tVUFT)
        (symbol? . g$6401$tVUFT)
        (symbol=? . g$6487$tVUFT)
        (symbol->string . g$12833$tVUFT)
        (substring . g$12832$tVUFT)
        (string? . g$12831$tVUFT)
        (string>? . g$6484$tVUFT)
        (string>=? . g$6486$tVUFT)
        (string=? . g$6482$tVUFT)
        (string<? . g$6483$tVUFT)
        (string<=? . g$6485$tVUFT)
        (string-ref . g$12830$tVUFT)
        (string-length . g$12829$tVUFT)
        (string-for-each . g$6535$tVUFT)
        (string-copy . g$12828$tVUFT)
        (string-append . g$12827$tVUFT)
        (string->symbol . g$12826$tVUFT)
        (string->number . g$12825$tVUFT)
        (string->list . g$12824$tVUFT)
        (string . g$12823$tVUFT)
        (sqrt . g$12822$tVUFT)
        (sin . g$12821$tVUFT)
        (round . g$12820$tVUFT)
        (reverse . g$6408$tVUFT)
        (real? . g$12819$tVUFT)
        (real-valued? . g$12818$tVUFT)
        (real-part . g$12817$tVUFT)
        (rationalize . g$6530$tVUFT)
        (rational? . g$12816$tVUFT)
        (rational-valued? . g$12815$tVUFT)
        (procedure? . g$6403$tVUFT)
        (positive? . g$6437$tVUFT)
        (pair? . g$12814$tVUFT)
        (odd? . g$6441$tVUFT)
        (numerator . g$12813$tVUFT)
        (number? . g$12812$tVUFT)
        (number->string . g$12811$tVUFT)
        (null? . g$12810$tVUFT)
        (not . g$12809$tVUFT)
        (negative? . g$6438$tVUFT)
        (nan? . g$12808$tVUFT)
        (min . g$6443$tVUFT)
        (max . g$6442$tVUFT)
        (map . g$5975$tVUFT)
        (make-vector . g$12807$tVUFT)
        (make-string . g$12806$tVUFT)
        (make-rectangular . g$12805$tVUFT)
        (make-polar . g$12804$tVUFT)
        (magnitude . g$12803$tVUFT)
        (log . g$12802$tVUFT)
        (list? . g$12801$tVUFT)
        (list-tail . g$5955$tVUFT)
        (list-ref . g$5956$tVUFT)
        (list->vector . g$6396$tVUFT)
        (list->string . g$6397$tVUFT)
        (list . g$12800$tVUFT)
        (length . g$12799$tVUFT)
        (lcm . g$6445$tVUFT)
        (integer? . g$12798$tVUFT)
        (integer-valued? . g$12797$tVUFT)
        (integer->char . g$12796$tVUFT)
        (infinite? . g$12795$tVUFT)
        (inexact? . g$12794$tVUFT)
        (inexact . g$12793$tVUFT)
        (imag-part . g$12792$tVUFT)
        (gcd . g$6444$tVUFT)
        (for-each . g$5976$tVUFT)
        (floor . g$12791$tVUFT)
        (finite? . g$12790$tVUFT)
        (expt . g$12789$tVUFT)
        (exp . g$12788$tVUFT)
        (exact? . g$12787$tVUFT)
        (exact-integer-sqrt . g$12786$tVUFT)
        (exact . g$12785$tVUFT)
        (even? . g$6440$tVUFT)
        (error . g$12784$tVUFT)
        (eqv? . g$12783$tVUFT)
        (equal? . g$12782$tVUFT)
        (eq? . g$12781$tVUFT)
        (dynamic-wind . g$12780$tVUFT)
        (div0-and-mod0 . g$12779$tVUFT)
        (mod0 . g$6395$tVUFT)
        (div0 . g$6393$tVUFT)
        (div-and-mod . g$12778$tVUFT)
        (mod . g$6394$tVUFT)
        (div . g$6392$tVUFT)
        (denominator . g$12777$tVUFT)
        (cos . g$12776$tVUFT)
        (cons . g$12775$tVUFT)
        (complex? . g$12774$tVUFT)
        (char? . g$6398$tVUFT)
        (char>? . g$6527$tVUFT)
        (char>=? . g$6529$tVUFT)
        (char=? . g$6525$tVUFT)
        (char<? . g$6526$tVUFT)
        (char<=? . g$6528$tVUFT)
        (char->integer . g$12773$tVUFT)
        (ceiling . g$12772$tVUFT)
        (call-with-values . g$12771$tVUFT)
        (call/cc . g$12770$tVUFT)
        (call-with-current-continuation . g$12769$tVUFT)
        (cddddr . g$6436$tVUFT)
        (cdddar . g$6435$tVUFT)
        (cddadr . g$6434$tVUFT)
        (cddaar . g$6433$tVUFT)
        (cdaddr . g$6432$tVUFT)
        (cdadar . g$6431$tVUFT)
        (cdaadr . g$6430$tVUFT)
        (cdaaar . g$6429$tVUFT)
        (cadddr . g$6428$tVUFT)
        (caddar . g$6427$tVUFT)
        (cadadr . g$6426$tVUFT)
        (cadaar . g$6425$tVUFT)
        (caaddr . g$6424$tVUFT)
        (caadar . g$6423$tVUFT)
        (caaadr . g$6422$tVUFT)
        (caaaar . g$6421$tVUFT)
        (cdddr . g$6420$tVUFT)
        (cddar . g$6419$tVUFT)
        (cdadr . g$6418$tVUFT)
        (cdaar . g$6417$tVUFT)
        (caddr . g$6416$tVUFT)
        (cadar . g$6415$tVUFT)
        (caadr . g$6414$tVUFT)
        (caaar . g$6413$tVUFT)
        (cddr . g$6412$tVUFT)
        (cdar . g$6411$tVUFT)
        (cadr . g$6410$tVUFT)
        (caar . g$6409$tVUFT)
        (cdr . g$12768$tVUFT)
        (car . g$12767$tVUFT)
        (boolean? . g$6402$tVUFT)
        (boolean=? . g$6488$tVUFT)
        (atan . g$12766$tVUFT)
        (assertion-violation . g$12765$tVUFT)
        (asin . g$12764$tVUFT)
        (apply . g$12763$tVUFT)
        (append . g$12762$tVUFT)
        (angle . g$12761$tVUFT)
        (acos . g$12760$tVUFT)
        (abs . g$12759$tVUFT)
        (/ . g$12758$tVUFT)
        (* . g$12757$tVUFT)
        (- . g$12756$tVUFT)
        (+ . g$12755$tVUFT)
        (>= . g$12754$tVUFT)
        (> . g$12753$tVUFT)
        (= . g$12752$tVUFT)
        (<= . g$12751$tVUFT)
        (< . g$12750$tVUFT)
        (unquote-splicing . g$12666$tVUFT)
        (unquote . g$12665$tVUFT)
        (_ . g$12664$tVUFT)
        (else . g$12663$tVUFT)
        (=> . g$12662$tVUFT)
        (... . g$12661$tVUFT)
        (assert . g$12660$tVUFT)
        (or . g$12656$tVUFT)
        (and . g$12655$tVUFT)
        (cond . g$12653$tVUFT)
        (let* . g$12652$tVUFT)
        (let . g$12651$tVUFT)
        (identifier-syntax . g$12650$tVUFT)
        (quasiquote . g$12647$tVUFT)
        (syntax-rules . g$12646$tVUFT)
        (let-values . g$12642$tVUFT)
        (let*-values . g$12641$tVUFT)
        (case . g$12637$tVUFT)
        (if . g$12633$tVUFT)
        (letrec* . g$12632$tVUFT)
        (letrec . g$12631$tVUFT)
        (lambda . g$12628$tVUFT)
        (quote . g$12625$tVUFT)
        (letrec-syntax . g$12623$tVUFT)
        (let-syntax . g$12622$tVUFT)
        (set! . g$12621$tVUFT)
        (begin . g$12617$tVUFT)
        (define-syntax . g$12615$tVUFT)
        (define . g$12614$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13102$tVUFT
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$5980$tVUFT)
        (remv . g$5981$tVUFT)
        (remp . g$5961$tVUFT)
        (remq . g$5982$tVUFT)
        (partition . g$5960$tVUFT)
        (memv . g$5968$tVUFT)
        (memq . g$5967$tVUFT)
        (memp . g$5970$tVUFT)
        (member . g$5969$tVUFT)
        (exists . g$5974$tVUFT)
        (for-all . g$5973$tVUFT)
        (fold-right . g$5979$tVUFT)
        (fold-left . g$5978$tVUFT)
        (find . g$5959$tVUFT)
        (filter . g$5962$tVUFT)
        (cons* . g$5977$tVUFT)
        (assv . g$5964$tVUFT)
        (assq . g$5963$tVUFT)
        (assp . g$5966$tVUFT)
        (assoc . g$5965$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13103$tVUFT
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$7857$tVUFT)
        (call-with-input-file . g$7856$tVUFT)
        (write-char . g$7838$tVUFT)
        (write . g$12999$tVUFT)
        (with-output-to-file . g$7855$tVUFT)
        (with-input-from-file . g$7854$tVUFT)
        (read-char . g$7837$tVUFT)
        (read . g$12998$tVUFT)
        (peek-char . g$7836$tVUFT)
        (open-output-file . g$12997$tVUFT)
        (open-input-file . g$12996$tVUFT)
        (newline . g$7858$tVUFT)
        (display . g$12995$tVUFT)
        (close-output-port . g$12994$tVUFT)
        (close-input-port . g$12993$tVUFT)
        (eof-object? . g$12992$tVUFT)
        (eof-object . g$12991$tVUFT)
        (current-error-port . g$12990$tVUFT)
        (current-output-port . g$12989$tVUFT)
        (current-input-port . g$12988$tVUFT)
        (output-port? . g$12987$tVUFT)
        (input-port? . g$12986$tVUFT)
        (make-i/o-write-error . g$7204$tVUFT)
        (make-i/o-read-error . g$7189$tVUFT)
        (make-i/o-port-error . g$7313$tVUFT)
        (make-i/o-invalid-position-error . g$7219$tVUFT)
        (make-i/o-filename-error . g$7236$tVUFT)
        (make-i/o-file-protection-error . g$7253$tVUFT)
        (make-i/o-file-is-read-only-error . g$7268$tVUFT)
        (make-i/o-file-does-not-exist-error . g$7298$tVUFT)
        (make-i/o-file-already-exists-error . g$7283$tVUFT)
        (make-i/o-error . g$7174$tVUFT)
        (i/o-write-error? . g$7205$tVUFT)
        (i/o-read-error? . g$7190$tVUFT)
        (i/o-port-error? . g$7315$tVUFT)
        (i/o-invalid-position-error? . g$7221$tVUFT)
        (i/o-error-position . g$7222$tVUFT)
        (i/o-filename-error? . g$7238$tVUFT)
        (i/o-file-protection-error? . g$7254$tVUFT)
        (i/o-file-is-read-only-error? . g$7269$tVUFT)
        (i/o-file-does-not-exist-error? . g$7299$tVUFT)
        (i/o-file-already-exists-error? . g$7284$tVUFT)
        (i/o-error? . g$7175$tVUFT)
        (i/o-error-port . g$7316$tVUFT)
        (i/o-error-filename . g$7239$tVUFT)
        (&i/o-port . g$12714$tVUFT)
        (&i/o-file-does-not-exist . g$12713$tVUFT)
        (&i/o-file-already-exists . g$12712$tVUFT)
        (&i/o-file-is-read-only . g$12711$tVUFT)
        (&i/o-file-protection . g$12710$tVUFT)
        (&i/o-filename . g$12709$tVUFT)
        (&i/o-invalid-position . g$12708$tVUFT)
        (&i/o-write . g$12707$tVUFT)
        (&i/o-read . g$12706$tVUFT)
        (&i/o . g$12705$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13104$tVUFT
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$12947$tVUFT)
        (utf32->string . g$12915$tVUFT)
        (utf16->string . g$12914$tVUFT)
        (utf8->string . g$12913$tVUFT)
        (uint-list->bytevector . g$12912$tVUFT)
        (u8-list->bytevector . g$12911$tVUFT)
        (string->utf8 . g$12910$tVUFT)
        (string->utf32 . g$12909$tVUFT)
        (string->utf16 . g$12908$tVUFT)
        (sint-list->bytevector . g$12907$tVUFT)
        (native-endianness . g$6772$tVUFT)
        (bytevector? . g$6400$tVUFT)
        (bytevector=? . g$12906$tVUFT)
        (bytevector-uint-set! . g$12905$tVUFT)
        (bytevector-uint-ref . g$12904$tVUFT)
        (bytevector-u8-set! . g$12903$tVUFT)
        (bytevector-u8-ref . g$12902$tVUFT)
        (bytevector-u64-set! . g$6793$tVUFT)
        (bytevector-u64-ref . g$6789$tVUFT)
        (bytevector-u64-native-set! . g$6795$tVUFT)
        (bytevector-u64-native-ref . g$6791$tVUFT)
        (bytevector-u32-set! . g$6785$tVUFT)
        (bytevector-u32-ref . g$6781$tVUFT)
        (bytevector-u32-native-set! . g$6787$tVUFT)
        (bytevector-u32-native-ref . g$6783$tVUFT)
        (bytevector-u16-set! . g$6777$tVUFT)
        (bytevector-u16-ref . g$6773$tVUFT)
        (bytevector-u16-native-set! . g$6779$tVUFT)
        (bytevector-u16-native-ref . g$6775$tVUFT)
        (bytevector-sint-set! . g$12901$tVUFT)
        (bytevector-sint-ref . g$12900$tVUFT)
        (bytevector-s8-set! . g$12899$tVUFT)
        (bytevector-s8-ref . g$12898$tVUFT)
        (bytevector-s64-set! . g$6794$tVUFT)
        (bytevector-s64-ref . g$6790$tVUFT)
        (bytevector-s64-native-set! . g$6796$tVUFT)
        (bytevector-s64-native-ref . g$6792$tVUFT)
        (bytevector-s32-set! . g$6786$tVUFT)
        (bytevector-s32-ref . g$6782$tVUFT)
        (bytevector-s32-native-set! . g$6788$tVUFT)
        (bytevector-s32-native-ref . g$6784$tVUFT)
        (bytevector-s16-set! . g$6778$tVUFT)
        (bytevector-s16-ref . g$6774$tVUFT)
        (bytevector-s16-native-set! . g$6780$tVUFT)
        (bytevector-s16-native-ref . g$6776$tVUFT)
        (bytevector-length . g$12897$tVUFT)
        (bytevector-ieee-single-set! . g$12896$tVUFT)
        (bytevector-ieee-single-ref . g$12895$tVUFT)
        (bytevector-ieee-single-native-set! . g$6799$tVUFT)
        (bytevector-ieee-single-native-ref . g$6797$tVUFT)
        (bytevector-ieee-double-set! . g$12894$tVUFT)
        (bytevector-ieee-double-ref . g$12893$tVUFT)
        (bytevector-ieee-double-native-set! . g$6800$tVUFT)
        (bytevector-ieee-double-native-ref . g$6798$tVUFT)
        (bytevector-fill! . g$12892$tVUFT)
        (bytevector-copy! . g$12891$tVUFT)
        (bytevector-copy . g$12890$tVUFT)
        (bytevector->uint-list . g$12889$tVUFT)
        (bytevector->u8-list . g$12888$tVUFT)
        (bytevector->sint-list . g$12887$tVUFT)
        (endianness . g$12659$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13105$tVUFT
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$13045$tVUFT)
        (string-titlecase . g$13044$tVUFT)
        (string-normalize-nfkd . g$7521$tVUFT)
        (string-normalize-nfkc . g$7520$tVUFT)
        (string-normalize-nfd . g$7519$tVUFT)
        (string-normalize-nfc . g$7518$tVUFT)
        (string-foldcase . g$13043$tVUFT)
        (string-downcase . g$13042$tVUFT)
        (string-ci>? . g$7476$tVUFT)
        (string-ci>=? . g$7478$tVUFT)
        (string-ci=? . g$7474$tVUFT)
        (string-ci<? . g$7475$tVUFT)
        (string-ci<=? . g$7477$tVUFT)
        (char-whitespace? . g$13041$tVUFT)
        (char-upper-case? . g$13040$tVUFT)
        (char-title-case? . g$13039$tVUFT)
        (char-numeric? . g$13038$tVUFT)
        (char-lower-case? . g$13037$tVUFT)
        (char-general-category . g$13036$tVUFT)
        (char-upcase . g$13035$tVUFT)
        (char-titlecase . g$13034$tVUFT)
        (char-foldcase . g$13033$tVUFT)
        (char-downcase . g$13032$tVUFT)
        (char-ci>? . g$7515$tVUFT)
        (char-ci>=? . g$7517$tVUFT)
        (char-ci=? . g$7513$tVUFT)
        (char-ci<? . g$7514$tVUFT)
        (char-ci<=? . g$7516$tVUFT)
        (char-alphabetic? . g$13031$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13106$tVUFT
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$12923$tVUFT)
        (raise-continuable . g$12922$tVUFT)
        (raise . g$12921$tVUFT)
        (guard . g$12674$tVUFT)
        (else . g$12663$tVUFT)
        (=> . g$12662$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13107$tVUFT
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$7585$tVUFT)
        (bitwise-reverse-bit-field . g$12851$tVUFT)
        (bitwise-length . g$12850$tVUFT)
        (bitwise-if . g$7579$tVUFT)
        (bitwise-first-bit-set . g$12849$tVUFT)
        (bitwise-copy-bit-field . g$7582$tVUFT)
        (bitwise-copy-bit . g$7580$tVUFT)
        (bitwise-bit-set? . g$12848$tVUFT)
        (bitwise-bit-field . g$7581$tVUFT)
        (bitwise-bit-count . g$12847$tVUFT)
        (bitwise-xor . g$12846$tVUFT)
        (bitwise-ior . g$12845$tVUFT)
        (bitwise-and . g$12844$tVUFT)
        (bitwise-not . g$12843$tVUFT)
        (bitwise-arithmetic-shift-right . g$7584$tVUFT)
        (bitwise-arithmetic-shift-left . g$7583$tVUFT)
        (bitwise-arithmetic-shift . g$12842$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13108$tVUFT
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$7617$tVUFT)
        (fxxor . g$12873$tVUFT)
        (fxrotate-bit-field . g$7631$tVUFT)
        (fxreverse-bit-field . g$12872$tVUFT)
        (fxpositive? . g$7615$tVUFT)
        (fxodd? . g$7619$tVUFT)
        (fxnot . g$12871$tVUFT)
        (fxnegative? . g$7616$tVUFT)
        (fxmod0 . g$7614$tVUFT)
        (fxmod . g$7613$tVUFT)
        (fxmin . g$7621$tVUFT)
        (fxmax . g$7620$tVUFT)
        (fxlength . g$12870$tVUFT)
        (fxior . g$12869$tVUFT)
        (fxif . g$7625$tVUFT)
        (fxfirst-bit-set . g$12868$tVUFT)
        (fxeven? . g$7618$tVUFT)
        (fxdiv0-and-mod0 . g$12867$tVUFT)
        (fxdiv0 . g$7612$tVUFT)
        (fxdiv-and-mod . g$12866$tVUFT)
        (fxdiv . g$7611$tVUFT)
        (fxcopy-bit-field . g$7628$tVUFT)
        (fxcopy-bit . g$7626$tVUFT)
        (fxbit-set? . g$12865$tVUFT)
        (fxbit-field . g$7627$tVUFT)
        (fxbit-count . g$12864$tVUFT)
        (fxarithmetic-shift-right . g$7630$tVUFT)
        (fxarithmetic-shift-left . g$7629$tVUFT)
        (fxarithmetic-shift . g$12863$tVUFT)
        (fxand . g$12862$tVUFT)
        (fx>? . g$12861$tVUFT)
        (fx>=? . g$12860$tVUFT)
        (fx=? . g$12859$tVUFT)
        (fx<? . g$12858$tVUFT)
        (fx<=? . g$12857$tVUFT)
        (fx-/carry . g$7623$tVUFT)
        (fx- . g$12856$tVUFT)
        (fx+/carry . g$7624$tVUFT)
        (fx+ . g$12855$tVUFT)
        (fx*/carry . g$7622$tVUFT)
        (fx* . g$12854$tVUFT)
        (greatest-fixnum . g$12853$tVUFT)
        (least-fixnum . g$12852$tVUFT)
        (fixnum-width . g$6406$tVUFT)
        (fixnum? . g$6404$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13109$tVUFT
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$7378$tVUFT)
        (no-infinities-violation? . g$7363$tVUFT)
        (make-no-nans-violation . g$7377$tVUFT)
        (make-no-infinities-violation . g$7362$tVUFT)
        (real->flonum . g$12886$tVUFT)
        (flzero? . g$7736$tVUFT)
        (fltruncate . g$7731$tVUFT)
        (fltan . g$7721$tVUFT)
        (flsqrt . g$7726$tVUFT)
        (flsin . g$7719$tVUFT)
        (flround . g$7732$tVUFT)
        (flpositive? . g$7734$tVUFT)
        (flonum? . g$6405$tVUFT)
        (flodd? . g$7738$tVUFT)
        (flnumerator . g$12885$tVUFT)
        (flnegative? . g$7735$tVUFT)
        (flnan? . g$7718$tVUFT)
        (flmod0 . g$7714$tVUFT)
        (flmod . g$7713$tVUFT)
        (flmin . g$7740$tVUFT)
        (flmax . g$7739$tVUFT)
        (fllog . g$7725$tVUFT)
        (flinteger? . g$7715$tVUFT)
        (flinfinite? . g$7717$tVUFT)
        (flfloor . g$7730$tVUFT)
        (flfinite? . g$7716$tVUFT)
        (flexpt . g$7728$tVUFT)
        (flexp . g$7727$tVUFT)
        (fleven? . g$7737$tVUFT)
        (fldiv0-and-mod0 . g$7710$tVUFT)
        (fldiv0 . g$7712$tVUFT)
        (fldiv-and-mod . g$7709$tVUFT)
        (fldiv . g$7711$tVUFT)
        (fldenominator . g$12884$tVUFT)
        (flcos . g$7720$tVUFT)
        (flceiling . g$7729$tVUFT)
        (flatan . g$7724$tVUFT)
        (flasin . g$7722$tVUFT)
        (flacos . g$7723$tVUFT)
        (flabs . g$7733$tVUFT)
        (fl>? . g$12883$tVUFT)
        (fl>=? . g$12882$tVUFT)
        (fl=? . g$12881$tVUFT)
        (fl<? . g$12880$tVUFT)
        (fl<=? . g$12879$tVUFT)
        (fl/ . g$12878$tVUFT)
        (fl- . g$12877$tVUFT)
        (fl+ . g$12876$tVUFT)
        (fl* . g$12875$tVUFT)
        (fixnum->flonum . g$12874$tVUFT)
        (&no-nans . g$12718$tVUFT)
        (&no-infinities . g$12717$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13110$tVUFT
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$13011$tVUFT)
        (string-ci-hash . g$13010$tVUFT)
        (string-hash . g$13009$tVUFT)
        (equal-hash . g$13008$tVUFT)
        (hashtable-equivalence-function . g$13007$tVUFT)
        (make-hashtable . g$13006$tVUFT)
        (hashtable-hash-function . g$13005$tVUFT)
        (make-eqv-hashtable . g$6734$tVUFT)
        (make-eq-hashtable . g$6733$tVUFT)
        (hashtable? . g$13004$tVUFT)
        (hashtable-update! . g$6740$tVUFT)
        (hashtable-size . g$6735$tVUFT)
        (hashtable-set! . g$6737$tVUFT)
        (hashtable-ref . g$6736$tVUFT)
        (hashtable-mutable? . g$13003$tVUFT)
        (hashtable-keys . g$13002$tVUFT)
        (hashtable-entries . g$13001$tVUFT)
        (hashtable-delete! . g$6738$tVUFT)
        (hashtable-copy . g$13000$tVUFT)
        (hashtable-contains? . g$6739$tVUFT)
        (hashtable-clear! . g$6741$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13111$tVUFT
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$12992$tVUFT)
        (eof-object . g$12991$tVUFT)
        (current-error-port . g$12990$tVUFT)
        (current-output-port . g$12989$tVUFT)
        (current-input-port . g$12988$tVUFT)
        (output-port? . g$12987$tVUFT)
        (input-port? . g$12986$tVUFT)
        (utf-8-codec . g$12985$tVUFT)
        (utf-16-codec . g$12984$tVUFT)
        (transcoder-error-handling-mode . g$12983$tVUFT)
        (transcoder-eol-style . g$12982$tVUFT)
        (transcoder-codec . g$12981$tVUFT)
        (transcoded-port . g$12980$tVUFT)
        (textual-port? . g$12979$tVUFT)
        (string->bytevector . g$12978$tVUFT)
        (standard-output-port . g$12977$tVUFT)
        (standard-input-port . g$12976$tVUFT)
        (standard-error-port . g$12975$tVUFT)
        (set-port-position! . g$12974$tVUFT)
        (put-u8 . g$12973$tVUFT)
        (put-string . g$12972$tVUFT)
        (put-datum . g$7816$tVUFT)
        (put-char . g$12971$tVUFT)
        (put-bytevector . g$12970$tVUFT)
        (port? . g$7821$tVUFT)
        (port-transcoder . g$12969$tVUFT)
        (port-position . g$12968$tVUFT)
        (port-has-set-port-position!? . g$12967$tVUFT)
        (port-has-port-position? . g$12966$tVUFT)
        (port-eof? . g$12965$tVUFT)
        (output-port-buffer-mode . g$12964$tVUFT)
        (open-string-output-port . g$7820$tVUFT)
        (open-string-input-port . g$12963$tVUFT)
        (open-file-output-port . g$12962$tVUFT)
        (open-file-input/output-port . g$12961$tVUFT)
        (open-file-input-port . g$12960$tVUFT)
        (open-bytevector-output-port . g$12959$tVUFT)
        (open-bytevector-input-port . g$12958$tVUFT)
        (native-transcoder . g$12957$tVUFT)
        (native-eol-style . g$12956$tVUFT)
        (make-transcoder . g$12955$tVUFT)
        (latin-1-codec . g$12954$tVUFT)
        (make-i/o-write-error . g$7204$tVUFT)
        (make-i/o-read-error . g$7189$tVUFT)
        (make-i/o-port-error . g$7313$tVUFT)
        (make-i/o-invalid-position-error . g$7219$tVUFT)
        (make-i/o-filename-error . g$7236$tVUFT)
        (make-i/o-file-protection-error . g$7253$tVUFT)
        (make-i/o-file-is-read-only-error . g$7268$tVUFT)
        (make-i/o-file-does-not-exist-error . g$7298$tVUFT)
        (make-i/o-file-already-exists-error . g$7283$tVUFT)
        (make-i/o-error . g$7174$tVUFT)
        (make-i/o-encoding-error . g$7345$tVUFT)
        (make-i/o-decoding-error . g$7330$tVUFT)
        (make-custom-textual-output-port . g$12953$tVUFT)
        (make-custom-textual-input/output-port . g$12952$tVUFT)
        (make-custom-textual-input-port . g$12951$tVUFT)
        (make-custom-binary-output-port . g$12950$tVUFT)
        (make-custom-binary-input/output-port . g$12949$tVUFT)
        (make-custom-binary-input-port . g$12948$tVUFT)
        (lookahead-u8 . g$12946$tVUFT)
        (lookahead-char . g$12945$tVUFT)
        (i/o-write-error? . g$7205$tVUFT)
        (i/o-read-error? . g$7190$tVUFT)
        (i/o-port-error? . g$7315$tVUFT)
        (i/o-invalid-position-error? . g$7221$tVUFT)
        (i/o-error-position . g$7222$tVUFT)
        (i/o-filename-error? . g$7238$tVUFT)
        (i/o-file-protection-error? . g$7254$tVUFT)
        (i/o-file-is-read-only-error? . g$7269$tVUFT)
        (i/o-file-does-not-exist-error? . g$7299$tVUFT)
        (i/o-file-already-exists-error? . g$7284$tVUFT)
        (i/o-error? . g$7175$tVUFT)
        (i/o-error-port . g$7316$tVUFT)
        (i/o-error-filename . g$7239$tVUFT)
        (i/o-encoding-error? . g$7347$tVUFT)
        (i/o-encoding-error-char . g$7348$tVUFT)
        (i/o-decoding-error? . g$7331$tVUFT)
        (get-u8 . g$12944$tVUFT)
        (get-string-n! . g$12943$tVUFT)
        (get-string-n . g$12942$tVUFT)
        (get-string-all . g$12941$tVUFT)
        (get-line . g$12940$tVUFT)
        (get-datum . g$7817$tVUFT)
        (get-char . g$12939$tVUFT)
        (get-bytevector-some . g$12938$tVUFT)
        (get-bytevector-n! . g$12937$tVUFT)
        (get-bytevector-n . g$12936$tVUFT)
        (get-bytevector-all . g$12935$tVUFT)
        (flush-output-port . g$12934$tVUFT)
        (close-port . g$12933$tVUFT)
        (call-with-string-output-port . g$7822$tVUFT)
        (call-with-port . g$7823$tVUFT)
        (call-with-bytevector-output-port . g$12932$tVUFT)
        (bytevector->string . g$12931$tVUFT)
        (buffer-mode? . g$12930$tVUFT)
        (binary-port? . g$12929$tVUFT)
        (&i/o-encoding . g$12716$tVUFT)
        (&i/o-decoding . g$12715$tVUFT)
        (&i/o-port . g$12714$tVUFT)
        (&i/o-file-does-not-exist . g$12713$tVUFT)
        (&i/o-file-already-exists . g$12712$tVUFT)
        (&i/o-file-is-read-only . g$12711$tVUFT)
        (&i/o-file-protection . g$12710$tVUFT)
        (&i/o-filename . g$12709$tVUFT)
        (&i/o-invalid-position . g$12708$tVUFT)
        (&i/o-write . g$12707$tVUFT)
        (&i/o-read . g$12706$tVUFT)
        (&i/o . g$12705$tVUFT)
        (error-handling-mode . g$12678$tVUFT)
        (file-options . g$12677$tVUFT)
        (buffer-mode . g$12676$tVUFT)
        (eol-style . g$12675$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13112$tVUFT
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$7922$tVUFT)
        (enum-set=? . g$7929$tVUFT)
        (enum-set-universe . g$7923$tVUFT)
        (enum-set-union . g$7930$tVUFT)
        (enum-set-subset? . g$7928$tVUFT)
        (enum-set-projection . g$7934$tVUFT)
        (enum-set-member? . g$7927$tVUFT)
        (enum-set-intersection . g$7931$tVUFT)
        (enum-set-indexer . g$7924$tVUFT)
        (enum-set-difference . g$7932$tVUFT)
        (enum-set-constructor . g$7925$tVUFT)
        (enum-set-complement . g$7933$tVUFT)
        (enum-set->list . g$7926$tVUFT)
        (define-enumeration . g$12689$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13113$tVUFT
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$7080$tVUFT)
        (warning? . g$6987$tVUFT)
        (violation? . g$7032$tVUFT)
        (undefined-violation? . g$7160$tVUFT)
        (syntax-violation? . g$7143$tVUFT)
        (syntax-violation-subform . g$7145$tVUFT)
        (syntax-violation-form . g$7144$tVUFT)
        (simple-conditions . g$12920$tVUFT)
        (serious-condition? . g$7002$tVUFT)
        (non-continuable-violation? . g$7096$tVUFT)
        (message-condition? . g$6971$tVUFT)
        (make-who-condition . g$7078$tVUFT)
        (make-warning . g$6986$tVUFT)
        (make-violation . g$7031$tVUFT)
        (make-undefined-violation . g$7159$tVUFT)
        (make-syntax-violation . g$7140$tVUFT)
        (make-serious-condition . g$7001$tVUFT)
        (make-non-continuable-violation . g$7095$tVUFT)
        (make-message-condition . g$6969$tVUFT)
        (make-lexical-violation . g$7125$tVUFT)
        (make-irritants-condition . g$7061$tVUFT)
        (make-implementation-restriction-violation . g$7110$tVUFT)
        (make-error . g$7016$tVUFT)
        (make-assertion-violation . g$7046$tVUFT)
        (lexical-violation? . g$7126$tVUFT)
        (irritants-condition? . g$7063$tVUFT)
        (implementation-restriction-violation? . g$7111$tVUFT)
        (error? . g$7017$tVUFT)
        (condition-who . g$7081$tVUFT)
        (condition-predicate . g$12919$tVUFT)
        (condition-message . g$6972$tVUFT)
        (condition-irritants . g$7064$tVUFT)
        (condition-accessor . g$12918$tVUFT)
        (condition . g$12917$tVUFT)
        (assertion-violation? . g$7047$tVUFT)
        (condition? . g$12916$tVUFT)
        (&non-continuable . g$12704$tVUFT)
        (&undefined . g$12703$tVUFT)
        (&syntax . g$12702$tVUFT)
        (&lexical . g$12701$tVUFT)
        (&implementation-restriction . g$12700$tVUFT)
        (&who . g$12699$tVUFT)
        (&irritants . g$12698$tVUFT)
        (&assertion . g$12697$tVUFT)
        (&violation . g$12696$tVUFT)
        (&error . g$12695$tVUFT)
        (&serious . g$12694$tVUFT)
        (&warning . g$12693$tVUFT)
        (&message . g$12692$tVUFT)
        (&condition . g$12691$tVUFT)
        (define-condition-type . g$12690$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13114$tVUFT
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$13023$tVUFT)
        (record-type-uid . g$13022$tVUFT)
        (record-type-sealed? . g$13021$tVUFT)
        (record-type-parent . g$13020$tVUFT)
        (record-type-opaque? . g$13019$tVUFT)
        (record-type-name . g$13018$tVUFT)
        (record-type-generative? . g$13017$tVUFT)
        (record-type-field-names . g$13016$tVUFT)
        (record-rtd . g$13015$tVUFT)
        (record-field-mutable? . g$13014$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13115$tVUFT
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$13030$tVUFT)
        (record-predicate . g$13029$tVUFT)
        (record-mutator . g$13028$tVUFT)
        (record-constructor . g$13027$tVUFT)
        (record-accessor . g$13026$tVUFT)
        (make-record-type-descriptor . g$13025$tVUFT)
        (make-record-constructor-descriptor . g$13024$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13116$tVUFT
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$12688$tVUFT)
        (parent-rtd . g$12687$tVUFT)
        (nongenerative . g$12686$tVUFT)
        (opaque . g$12685$tVUFT)
        (sealed . g$12684$tVUFT)
        (protocol . g$12683$tVUFT)
        (parent . g$12682$tVUFT)
        (immutable . g$12681$tVUFT)
        (mutable . g$12680$tVUFT)
        (fields . g$12679$tVUFT)
        (record-constructor-descriptor . g$12640$tVUFT)
        (record-type-descriptor . g$12639$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$8091$tVUFT
      'g$13117$tVUFT
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$9439$tVUFT)
        (&no-nans-rcd . g$7380$tVUFT)
        (&no-nans-rtd . g$7379$tVUFT)
        (&no-infinities-rcd . g$7365$tVUFT)
        (&no-infinities-rtd . g$7364$tVUFT)
        (&i/o-encoding-rcd . g$7350$tVUFT)
        (&i/o-encoding-rtd . g$7349$tVUFT)
        (&i/o-decoding-rcd . g$7333$tVUFT)
        (&i/o-decoding-rtd . g$7332$tVUFT)
        (&i/o-port-rcd . g$7318$tVUFT)
        (&i/o-port-rtd . g$7317$tVUFT)
        (&i/o-file-does-not-exist-rcd . g$7301$tVUFT)
        (&i/o-file-does-not-exist-rtd . g$7300$tVUFT)
        (&i/o-file-already-exists-rcd . g$7286$tVUFT)
        (&i/o-file-already-exists-rtd . g$7285$tVUFT)
        (&i/o-file-is-read-only-rcd . g$7271$tVUFT)
        (&i/o-file-is-read-only-rtd . g$7270$tVUFT)
        (&i/o-file-protection-rcd . g$7256$tVUFT)
        (&i/o-file-protection-rtd . g$7255$tVUFT)
        (&i/o-filename-rcd . g$7241$tVUFT)
        (&i/o-filename-rtd . g$7240$tVUFT)
        (&i/o-invalid-position-rcd . g$7224$tVUFT)
        (&i/o-invalid-position-rtd . g$7223$tVUFT)
        (&i/o-write-rcd . g$7207$tVUFT)
        (&i/o-write-rtd . g$7206$tVUFT)
        (&i/o-read-rcd . g$7192$tVUFT)
        (&i/o-read-rtd . g$7191$tVUFT)
        (&i/o-rcd . g$7177$tVUFT)
        (&i/o-rtd . g$7176$tVUFT)
        (&undefined-rcd . g$7162$tVUFT)
        (&undefined-rtd . g$7161$tVUFT)
        (&syntax-rcd . g$7147$tVUFT)
        (&syntax-rtd . g$7146$tVUFT)
        (&lexical-rcd . g$7128$tVUFT)
        (&lexical-rtd . g$7127$tVUFT)
        (&implementation-restriction-rcd . g$7113$tVUFT)
        (&implementation-restriction-rtd . g$7112$tVUFT)
        (&non-continuable-rcd . g$7098$tVUFT)
        (&non-continuable-rtd . g$7097$tVUFT)
        (&who-rcd . g$7083$tVUFT)
        (&who-rtd . g$7082$tVUFT)
        (&irritants-rcd . g$7066$tVUFT)
        (&irritants-rtd . g$7065$tVUFT)
        (&assertion-rcd . g$7049$tVUFT)
        (&assertion-rtd . g$7048$tVUFT)
        (&violation-rcd . g$7034$tVUFT)
        (&violation-rtd . g$7033$tVUFT)
        (&error-rcd . g$7019$tVUFT)
        (&error-rtd . g$7018$tVUFT)
        (&serious-rcd . g$7004$tVUFT)
        (&serious-rtd . g$7003$tVUFT)
        (&warning-rcd . g$6989$tVUFT)
        (&warning-rtd . g$6988$tVUFT)
        (&message-rcd . g$6974$tVUFT)
        (&message-rtd . g$6973$tVUFT)
        (&condition-rcd . g$6900$tVUFT)
        (&condition-rtd . g$6899$tVUFT)
        (library-letrec* . g$13081$tVUFT)
        (annotation-stripped . g$13080$tVUFT)
        (annotation-source . g$13079$tVUFT)
        (annotation-expression . g$13078$tVUFT)
        (annotation? . g$13077$tVUFT)
        (read-annotated . g$13076$tVUFT)
        (tanh . g$13075$tVUFT)
        (cosh . g$13074$tVUFT)
        (sinh . g$13073$tVUFT)
        (make-guid . g$13072$tVUFT)
        (unspecified? . g$13071$tVUFT)
        (make-list . g$5958$tVUFT)
        (last-pair . g$5957$tVUFT)
        (load-r5rs . g$13070$tVUFT)
        (license . g$13069$tVUFT)
        (stacktrace . g$13068$tVUFT)
        (ironscheme-build . g$12569$tVUFT)
        (define-clr-class-internal . g$13067$tVUFT)
        (clr-field-set!-internal . g$13066$tVUFT)
        (clr-field-get-internal . g$13065$tVUFT)
        (clr-cast-internal . g$13064$tVUFT)
        (clr-call-internal . g$13063$tVUFT)
        (clr-new-internal . g$13062$tVUFT)
        (clr-new-array-internal . g$13061$tVUFT)
        (clr-is-internal . g$13060$tVUFT)
        (clr-reference-internal . g$13059$tVUFT)
        (clr-using-internal . g$13058$tVUFT)
        (syntax-error . g$9564$tVUFT)
        (syntax-dispatch . g$9434$tVUFT)
        (compile-core . g$13057$tVUFT)
        (eval-core . g$13056$tVUFT)
        (set-symbol-value! . g$13055$tVUFT)
        (symbol-value . g$13054$tVUFT)
        (symbol-bound? . g$13053$tVUFT)
        (ungensym . g$13052$tVUFT)
        (gensym . g$13051$tVUFT)
        (void . g$13050$tVUFT)
        (load-serialized-library . g$13049$tVUFT)
        (serialize-library . g$13048$tVUFT)
        (compile-system-libraries . g$12572$tVUFT)
        (compile->closure . g$12574$tVUFT)
        (compile . g$12573$tVUFT)
        (load . g$12568$tVUFT)
        (string-normalize . g$13047$tVUFT)
        (interaction-environment . g$9574$tVUFT)
        (char-ready? . g$13046$tVUFT)
        (string-upcase . g$13045$tVUFT)
        (string-titlecase . g$13044$tVUFT)
        (string-normalize-nfkd . g$7521$tVUFT)
        (string-normalize-nfkc . g$7520$tVUFT)
        (string-normalize-nfd . g$7519$tVUFT)
        (string-normalize-nfc . g$7518$tVUFT)
        (string-foldcase . g$13043$tVUFT)
        (string-downcase . g$13042$tVUFT)
        (string-ci>? . g$7476$tVUFT)
        (string-ci>=? . g$7478$tVUFT)
        (string-ci=? . g$7474$tVUFT)
        (string-ci<? . g$7475$tVUFT)
        (string-ci<=? . g$7477$tVUFT)
        (char-whitespace? . g$13041$tVUFT)
        (char-upper-case? . g$13040$tVUFT)
        (char-title-case? . g$13039$tVUFT)
        (char-numeric? . g$13038$tVUFT)
        (char-lower-case? . g$13037$tVUFT)
        (char-general-category . g$13036$tVUFT)
        (char-upcase . g$13035$tVUFT)
        (char-titlecase . g$13034$tVUFT)
        (char-foldcase . g$13033$tVUFT)
        (char-downcase . g$13032$tVUFT)
        (char-ci>? . g$7515$tVUFT)
        (char-ci>=? . g$7517$tVUFT)
        (char-ci=? . g$7513$tVUFT)
        (char-ci<? . g$7514$tVUFT)
        (char-ci<=? . g$7516$tVUFT)
        (char-alphabetic? . g$13031$tVUFT)
        (variable-transformer-procedure . g$9171$tVUFT)
        (variable-transformer? . g$9170$tVUFT)
        (make-variable-transformer . g$9168$tVUFT)
        (identifier? . g$9568$tVUFT)
        (generate-temporaries . g$9557$tVUFT)
        (free-identifier=? . g$9558$tVUFT)
        (syntax->datum . g$9570$tVUFT)
        (datum->syntax . g$9569$tVUFT)
        (bound-identifier=? . g$9559$tVUFT)
        (record-type-descriptor? . g$13030$tVUFT)
        (record-predicate . g$13029$tVUFT)
        (record-mutator . g$13028$tVUFT)
        (record-constructor . g$13027$tVUFT)
        (record-accessor . g$13026$tVUFT)
        (make-record-type-descriptor . g$13025$tVUFT)
        (make-record-constructor-descriptor . g$13024$tVUFT)
        (record? . g$13023$tVUFT)
        (record-type-uid . g$13022$tVUFT)
        (record-type-sealed? . g$13021$tVUFT)
        (record-type-parent . g$13020$tVUFT)
        (record-type-opaque? . g$13019$tVUFT)
        (record-type-name . g$13018$tVUFT)
        (record-type-generative? . g$13017$tVUFT)
        (record-type-field-names . g$13016$tVUFT)
        (record-rtd . g$13015$tVUFT)
        (record-field-mutable? . g$13014$tVUFT)
        (delete-file . g$6766$tVUFT)
        (file-exists? . g$6765$tVUFT)
        (vector-sort! . g$13013$tVUFT)
        (vector-sort . g$13012$tVUFT)
        (list-sort . g$7416$tVUFT)
        (symbol-hash . g$13011$tVUFT)
        (string-ci-hash . g$13010$tVUFT)
        (string-hash . g$13009$tVUFT)
        (equal-hash . g$13008$tVUFT)
        (hashtable-equivalence-function . g$13007$tVUFT)
        (make-hashtable . g$13006$tVUFT)
        (hashtable-hash-function . g$13005$tVUFT)
        (make-eqv-hashtable . g$6734$tVUFT)
        (make-eq-hashtable . g$6733$tVUFT)
        (hashtable? . g$13004$tVUFT)
        (hashtable-update! . g$6740$tVUFT)
        (hashtable-size . g$6735$tVUFT)
        (hashtable-set! . g$6737$tVUFT)
        (hashtable-ref . g$6736$tVUFT)
        (hashtable-mutable? . g$13003$tVUFT)
        (hashtable-keys . g$13002$tVUFT)
        (hashtable-entries . g$13001$tVUFT)
        (hashtable-delete! . g$6738$tVUFT)
        (hashtable-copy . g$13000$tVUFT)
        (hashtable-contains? . g$6739$tVUFT)
        (hashtable-clear! . g$6741$tVUFT)
        (call-with-output-file . g$7857$tVUFT)
        (call-with-input-file . g$7856$tVUFT)
        (write-char . g$7838$tVUFT)
        (write . g$12999$tVUFT)
        (with-output-to-file . g$7855$tVUFT)
        (with-input-from-file . g$7854$tVUFT)
        (read-char . g$7837$tVUFT)
        (read . g$12998$tVUFT)
        (peek-char . g$7836$tVUFT)
        (open-output-file . g$12997$tVUFT)
        (open-input-file . g$12996$tVUFT)
        (newline . g$7858$tVUFT)
        (display . g$12995$tVUFT)
        (close-output-port . g$12994$tVUFT)
        (close-input-port . g$12993$tVUFT)
        (eof-object? . g$12992$tVUFT)
        (eof-object . g$12991$tVUFT)
        (current-error-port . g$12990$tVUFT)
        (current-output-port . g$12989$tVUFT)
        (current-input-port . g$12988$tVUFT)
        (output-port? . g$12987$tVUFT)
        (input-port? . g$12986$tVUFT)
        (utf-8-codec . g$12985$tVUFT)
        (utf-16-codec . g$12984$tVUFT)
        (transcoder-error-handling-mode . g$12983$tVUFT)
        (transcoder-eol-style . g$12982$tVUFT)
        (transcoder-codec . g$12981$tVUFT)
        (transcoded-port . g$12980$tVUFT)
        (textual-port? . g$12979$tVUFT)
        (string->bytevector . g$12978$tVUFT)
        (standard-output-port . g$12977$tVUFT)
        (standard-input-port . g$12976$tVUFT)
        (standard-error-port . g$12975$tVUFT)
        (set-port-position! . g$12974$tVUFT)
        (put-u8 . g$12973$tVUFT)
        (put-string . g$12972$tVUFT)
        (put-datum . g$7816$tVUFT)
        (put-char . g$12971$tVUFT)
        (put-bytevector . g$12970$tVUFT)
        (port? . g$7821$tVUFT)
        (port-transcoder . g$12969$tVUFT)
        (port-position . g$12968$tVUFT)
        (port-has-set-port-position!? . g$12967$tVUFT)
        (port-has-port-position? . g$12966$tVUFT)
        (port-eof? . g$12965$tVUFT)
        (output-port-buffer-mode . g$12964$tVUFT)
        (open-string-output-port . g$7820$tVUFT)
        (open-string-input-port . g$12963$tVUFT)
        (open-file-output-port . g$12962$tVUFT)
        (open-file-input/output-port . g$12961$tVUFT)
        (open-file-input-port . g$12960$tVUFT)
        (open-bytevector-output-port . g$12959$tVUFT)
        (open-bytevector-input-port . g$12958$tVUFT)
        (native-transcoder . g$12957$tVUFT)
        (native-eol-style . g$12956$tVUFT)
        (make-transcoder . g$12955$tVUFT)
        (latin-1-codec . g$12954$tVUFT)
        (make-i/o-write-error . g$7204$tVUFT)
        (make-i/o-read-error . g$7189$tVUFT)
        (make-i/o-port-error . g$7313$tVUFT)
        (make-i/o-invalid-position-error . g$7219$tVUFT)
        (make-i/o-filename-error . g$7236$tVUFT)
        (make-i/o-file-protection-error . g$7253$tVUFT)
        (make-i/o-file-is-read-only-error . g$7268$tVUFT)
        (make-i/o-file-does-not-exist-error . g$7298$tVUFT)
        (make-i/o-file-already-exists-error . g$7283$tVUFT)
        (make-i/o-error . g$7174$tVUFT)
        (make-i/o-encoding-error . g$7345$tVUFT)
        (make-i/o-decoding-error . g$7330$tVUFT)
        (make-custom-textual-output-port . g$12953$tVUFT)
        (make-custom-textual-input/output-port . g$12952$tVUFT)
        (make-custom-textual-input-port . g$12951$tVUFT)
        (make-custom-binary-output-port . g$12950$tVUFT)
        (make-custom-binary-input/output-port . g$12949$tVUFT)
        (make-custom-binary-input-port . g$12948$tVUFT)
        (make-bytevector . g$12947$tVUFT)
        (lookahead-u8 . g$12946$tVUFT)
        (lookahead-char . g$12945$tVUFT)
        (i/o-write-error? . g$7205$tVUFT)
        (i/o-read-error? . g$7190$tVUFT)
        (i/o-port-error? . g$7315$tVUFT)
        (i/o-invalid-position-error? . g$7221$tVUFT)
        (i/o-error-position . g$7222$tVUFT)
        (i/o-filename-error? . g$7238$tVUFT)
        (i/o-file-protection-error? . g$7254$tVUFT)
        (i/o-file-is-read-only-error? . g$7269$tVUFT)
        (i/o-file-does-not-exist-error? . g$7299$tVUFT)
        (i/o-file-already-exists-error? . g$7284$tVUFT)
        (i/o-error? . g$7175$tVUFT)
        (i/o-error-port . g$7316$tVUFT)
        (i/o-error-filename . g$7239$tVUFT)
        (i/o-encoding-error? . g$7347$tVUFT)
        (i/o-encoding-error-char . g$7348$tVUFT)
        (i/o-decoding-error? . g$7331$tVUFT)
        (get-u8 . g$12944$tVUFT)
        (get-string-n! . g$12943$tVUFT)
        (get-string-n . g$12942$tVUFT)
        (get-string-all . g$12941$tVUFT)
        (get-line . g$12940$tVUFT)
        (get-datum . g$7817$tVUFT)
        (get-char . g$12939$tVUFT)
        (get-bytevector-some . g$12938$tVUFT)
        (get-bytevector-n! . g$12937$tVUFT)
        (get-bytevector-n . g$12936$tVUFT)
        (get-bytevector-all . g$12935$tVUFT)
        (flush-output-port . g$12934$tVUFT)
        (close-port . g$12933$tVUFT)
        (call-with-string-output-port . g$7822$tVUFT)
        (call-with-port . g$7823$tVUFT)
        (call-with-bytevector-output-port . g$12932$tVUFT)
        (bytevector->string . g$12931$tVUFT)
        (buffer-mode? . g$12930$tVUFT)
        (binary-port? . g$12929$tVUFT)
        (scheme-report-environment . g$9547$tVUFT)
        (quotient . g$7395$tVUFT)
        (null-environment . g$9546$tVUFT)
        (remainder . g$7396$tVUFT)
        (modulo . g$7397$tVUFT)
        (inexact->exact . g$7392$tVUFT)
        (force . g$7399$tVUFT)
        (exact->inexact . g$7393$tVUFT)
        (exit . g$12928$tVUFT)
        (command-line . g$12565$tVUFT)
        (string-fill! . g$12927$tVUFT)
        (string-set! . g$12926$tVUFT)
        (set-cdr! . g$12925$tVUFT)
        (set-car! . g$12924$tVUFT)
        (remove . g$5980$tVUFT)
        (remv . g$5981$tVUFT)
        (remp . g$5961$tVUFT)
        (remq . g$5982$tVUFT)
        (partition . g$5960$tVUFT)
        (memv . g$5968$tVUFT)
        (memq . g$5967$tVUFT)
        (memp . g$5970$tVUFT)
        (member . g$5969$tVUFT)
        (exists . g$5974$tVUFT)
        (for-all . g$5973$tVUFT)
        (fold-right . g$5979$tVUFT)
        (fold-left . g$5978$tVUFT)
        (find . g$5959$tVUFT)
        (filter . g$5962$tVUFT)
        (cons* . g$5977$tVUFT)
        (assv . g$5964$tVUFT)
        (assq . g$5963$tVUFT)
        (assp . g$5966$tVUFT)
        (assoc . g$5965$tVUFT)
        (with-exception-handler . g$12923$tVUFT)
        (raise-continuable . g$12922$tVUFT)
        (raise . g$12921$tVUFT)
        (eval . g$9549$tVUFT)
        (environment . g$9545$tVUFT)
        (make-enumeration . g$7922$tVUFT)
        (enum-set=? . g$7929$tVUFT)
        (enum-set-universe . g$7923$tVUFT)
        (enum-set-union . g$7930$tVUFT)
        (enum-set-subset? . g$7928$tVUFT)
        (enum-set-projection . g$7934$tVUFT)
        (enum-set-member? . g$7927$tVUFT)
        (enum-set-intersection . g$7931$tVUFT)
        (enum-set-indexer . g$7924$tVUFT)
        (enum-set-difference . g$7932$tVUFT)
        (enum-set-constructor . g$7925$tVUFT)
        (enum-set-complement . g$7933$tVUFT)
        (enum-set->list . g$7926$tVUFT)
        (who-condition? . g$7080$tVUFT)
        (warning? . g$6987$tVUFT)
        (violation? . g$7032$tVUFT)
        (undefined-violation? . g$7160$tVUFT)
        (syntax-violation? . g$7143$tVUFT)
        (syntax-violation-subform . g$7145$tVUFT)
        (syntax-violation-form . g$7144$tVUFT)
        (syntax-violation . g$9567$tVUFT)
        (simple-conditions . g$12920$tVUFT)
        (serious-condition? . g$7002$tVUFT)
        (non-continuable-violation? . g$7096$tVUFT)
        (message-condition? . g$6971$tVUFT)
        (make-who-condition . g$7078$tVUFT)
        (make-warning . g$6986$tVUFT)
        (make-violation . g$7031$tVUFT)
        (make-undefined-violation . g$7159$tVUFT)
        (make-syntax-violation . g$7140$tVUFT)
        (make-serious-condition . g$7001$tVUFT)
        (make-non-continuable-violation . g$7095$tVUFT)
        (make-message-condition . g$6969$tVUFT)
        (make-lexical-violation . g$7125$tVUFT)
        (make-irritants-condition . g$7061$tVUFT)
        (make-implementation-restriction-violation . g$7110$tVUFT)
        (make-error . g$7016$tVUFT)
        (make-assertion-violation . g$7046$tVUFT)
        (lexical-violation? . g$7126$tVUFT)
        (irritants-condition? . g$7063$tVUFT)
        (implementation-restriction-violation? . g$7111$tVUFT)
        (error? . g$7017$tVUFT)
        (condition-who . g$7081$tVUFT)
        (condition-predicate . g$12919$tVUFT)
        (condition-message . g$6972$tVUFT)
        (condition-irritants . g$7064$tVUFT)
        (condition-accessor . g$12918$tVUFT)
        (condition . g$12917$tVUFT)
        (assertion-violation? . g$7047$tVUFT)
        (condition? . g$12916$tVUFT)
        (utf32->string . g$12915$tVUFT)
        (utf16->string . g$12914$tVUFT)
        (utf8->string . g$12913$tVUFT)
        (uint-list->bytevector . g$12912$tVUFT)
        (u8-list->bytevector . g$12911$tVUFT)
        (string->utf8 . g$12910$tVUFT)
        (string->utf32 . g$12909$tVUFT)
        (string->utf16 . g$12908$tVUFT)
        (sint-list->bytevector . g$12907$tVUFT)
        (native-endianness . g$6772$tVUFT)
        (bytevector? . g$6400$tVUFT)
        (bytevector=? . g$12906$tVUFT)
        (bytevector-uint-set! . g$12905$tVUFT)
        (bytevector-uint-ref . g$12904$tVUFT)
        (bytevector-u8-set! . g$12903$tVUFT)
        (bytevector-u8-ref . g$12902$tVUFT)
        (bytevector-u64-set! . g$6793$tVUFT)
        (bytevector-u64-ref . g$6789$tVUFT)
        (bytevector-u64-native-set! . g$6795$tVUFT)
        (bytevector-u64-native-ref . g$6791$tVUFT)
        (bytevector-u32-set! . g$6785$tVUFT)
        (bytevector-u32-ref . g$6781$tVUFT)
        (bytevector-u32-native-set! . g$6787$tVUFT)
        (bytevector-u32-native-ref . g$6783$tVUFT)
        (bytevector-u16-set! . g$6777$tVUFT)
        (bytevector-u16-ref . g$6773$tVUFT)
        (bytevector-u16-native-set! . g$6779$tVUFT)
        (bytevector-u16-native-ref . g$6775$tVUFT)
        (bytevector-sint-set! . g$12901$tVUFT)
        (bytevector-sint-ref . g$12900$tVUFT)
        (bytevector-s8-set! . g$12899$tVUFT)
        (bytevector-s8-ref . g$12898$tVUFT)
        (bytevector-s64-set! . g$6794$tVUFT)
        (bytevector-s64-ref . g$6790$tVUFT)
        (bytevector-s64-native-set! . g$6796$tVUFT)
        (bytevector-s64-native-ref . g$6792$tVUFT)
        (bytevector-s32-set! . g$6786$tVUFT)
        (bytevector-s32-ref . g$6782$tVUFT)
        (bytevector-s32-native-set! . g$6788$tVUFT)
        (bytevector-s32-native-ref . g$6784$tVUFT)
        (bytevector-s16-set! . g$6778$tVUFT)
        (bytevector-s16-ref . g$6774$tVUFT)
        (bytevector-s16-native-set! . g$6780$tVUFT)
        (bytevector-s16-native-ref . g$6776$tVUFT)
        (bytevector-length . g$12897$tVUFT)
        (bytevector-ieee-single-set! . g$12896$tVUFT)
        (bytevector-ieee-single-ref . g$12895$tVUFT)
        (bytevector-ieee-single-native-set! . g$6799$tVUFT)
        (bytevector-ieee-single-native-ref . g$6797$tVUFT)
        (bytevector-ieee-double-set! . g$12894$tVUFT)
        (bytevector-ieee-double-ref . g$12893$tVUFT)
        (bytevector-ieee-double-native-set! . g$6800$tVUFT)
        (bytevector-ieee-double-native-ref . g$6798$tVUFT)
        (bytevector-fill! . g$12892$tVUFT)
        (bytevector-copy! . g$12891$tVUFT)
        (bytevector-copy . g$12890$tVUFT)
        (bytevector->uint-list . g$12889$tVUFT)
        (bytevector->u8-list . g$12888$tVUFT)
        (bytevector->sint-list . g$12887$tVUFT)
        (no-nans-violation? . g$7378$tVUFT)
        (no-infinities-violation? . g$7363$tVUFT)
        (make-no-nans-violation . g$7377$tVUFT)
        (make-no-infinities-violation . g$7362$tVUFT)
        (real->flonum . g$12886$tVUFT)
        (flzero? . g$7736$tVUFT)
        (fltruncate . g$7731$tVUFT)
        (fltan . g$7721$tVUFT)
        (flsqrt . g$7726$tVUFT)
        (flsin . g$7719$tVUFT)
        (flround . g$7732$tVUFT)
        (flpositive? . g$7734$tVUFT)
        (flonum? . g$6405$tVUFT)
        (flodd? . g$7738$tVUFT)
        (flnumerator . g$12885$tVUFT)
        (flnegative? . g$7735$tVUFT)
        (flnan? . g$7718$tVUFT)
        (flmod0 . g$7714$tVUFT)
        (flmod . g$7713$tVUFT)
        (flmin . g$7740$tVUFT)
        (flmax . g$7739$tVUFT)
        (fllog . g$7725$tVUFT)
        (flinteger? . g$7715$tVUFT)
        (flinfinite? . g$7717$tVUFT)
        (flfloor . g$7730$tVUFT)
        (flfinite? . g$7716$tVUFT)
        (flexpt . g$7728$tVUFT)
        (flexp . g$7727$tVUFT)
        (fleven? . g$7737$tVUFT)
        (fldiv0-and-mod0 . g$7710$tVUFT)
        (fldiv0 . g$7712$tVUFT)
        (fldiv-and-mod . g$7709$tVUFT)
        (fldiv . g$7711$tVUFT)
        (fldenominator . g$12884$tVUFT)
        (flcos . g$7720$tVUFT)
        (flceiling . g$7729$tVUFT)
        (flatan . g$7724$tVUFT)
        (flasin . g$7722$tVUFT)
        (flacos . g$7723$tVUFT)
        (flabs . g$7733$tVUFT)
        (fl>? . g$12883$tVUFT)
        (fl>=? . g$12882$tVUFT)
        (fl=? . g$12881$tVUFT)
        (fl<? . g$12880$tVUFT)
        (fl<=? . g$12879$tVUFT)
        (fl/ . g$12878$tVUFT)
        (fl- . g$12877$tVUFT)
        (fl+ . g$12876$tVUFT)
        (fl* . g$12875$tVUFT)
        (fixnum->flonum . g$12874$tVUFT)
        (fxzero? . g$7617$tVUFT)
        (fxxor . g$12873$tVUFT)
        (fxrotate-bit-field . g$7631$tVUFT)
        (fxreverse-bit-field . g$12872$tVUFT)
        (fxpositive? . g$7615$tVUFT)
        (fxodd? . g$7619$tVUFT)
        (fxnot . g$12871$tVUFT)
        (fxnegative? . g$7616$tVUFT)
        (fxmod0 . g$7614$tVUFT)
        (fxmod . g$7613$tVUFT)
        (fxmin . g$7621$tVUFT)
        (fxmax . g$7620$tVUFT)
        (fxlength . g$12870$tVUFT)
        (fxior . g$12869$tVUFT)
        (fxif . g$7625$tVUFT)
        (fxfirst-bit-set . g$12868$tVUFT)
        (fxeven? . g$7618$tVUFT)
        (fxdiv0-and-mod0 . g$12867$tVUFT)
        (fxdiv0 . g$7612$tVUFT)
        (fxdiv-and-mod . g$12866$tVUFT)
        (fxdiv . g$7611$tVUFT)
        (fxcopy-bit-field . g$7628$tVUFT)
        (fxcopy-bit . g$7626$tVUFT)
        (fxbit-set? . g$12865$tVUFT)
        (fxbit-field . g$7627$tVUFT)
        (fxbit-count . g$12864$tVUFT)
        (fxarithmetic-shift-right . g$7630$tVUFT)
        (fxarithmetic-shift-left . g$7629$tVUFT)
        (fxarithmetic-shift . g$12863$tVUFT)
        (fxand . g$12862$tVUFT)
        (fx>? . g$12861$tVUFT)
        (fx>=? . g$12860$tVUFT)
        (fx=? . g$12859$tVUFT)
        (fx<? . g$12858$tVUFT)
        (fx<=? . g$12857$tVUFT)
        (fx-/carry . g$7623$tVUFT)
        (fx- . g$12856$tVUFT)
        (fx+/carry . g$7624$tVUFT)
        (fx+ . g$12855$tVUFT)
        (fx*/carry . g$7622$tVUFT)
        (fx* . g$12854$tVUFT)
        (greatest-fixnum . g$12853$tVUFT)
        (least-fixnum . g$12852$tVUFT)
        (fixnum-width . g$6406$tVUFT)
        (fixnum? . g$6404$tVUFT)
        (bitwise-rotate-bit-field . g$7585$tVUFT)
        (bitwise-reverse-bit-field . g$12851$tVUFT)
        (bitwise-length . g$12850$tVUFT)
        (bitwise-if . g$7579$tVUFT)
        (bitwise-first-bit-set . g$12849$tVUFT)
        (bitwise-copy-bit-field . g$7582$tVUFT)
        (bitwise-copy-bit . g$7580$tVUFT)
        (bitwise-bit-set? . g$12848$tVUFT)
        (bitwise-bit-field . g$7581$tVUFT)
        (bitwise-bit-count . g$12847$tVUFT)
        (bitwise-xor . g$12846$tVUFT)
        (bitwise-ior . g$12845$tVUFT)
        (bitwise-and . g$12844$tVUFT)
        (bitwise-not . g$12843$tVUFT)
        (bitwise-arithmetic-shift-right . g$7584$tVUFT)
        (bitwise-arithmetic-shift-left . g$7583$tVUFT)
        (bitwise-arithmetic-shift . g$12842$tVUFT)
        (zero? . g$6439$tVUFT)
        (vector? . g$6399$tVUFT)
        (vector-set! . g$12841$tVUFT)
        (vector-ref . g$12840$tVUFT)
        (vector-map . g$6533$tVUFT)
        (vector-length . g$12839$tVUFT)
        (vector-for-each . g$6534$tVUFT)
        (vector-fill! . g$6407$tVUFT)
        (vector->list . g$12838$tVUFT)
        (vector . g$12837$tVUFT)
        (values . g$12836$tVUFT)
        (truncate . g$12835$tVUFT)
        (tan . g$12834$tVUFT)
        (symbol? . g$6401$tVUFT)
        (symbol=? . g$6487$tVUFT)
        (symbol->string . g$12833$tVUFT)
        (substring . g$12832$tVUFT)
        (string? . g$12831$tVUFT)
        (string>? . g$6484$tVUFT)
        (string>=? . g$6486$tVUFT)
        (string=? . g$6482$tVUFT)
        (string<? . g$6483$tVUFT)
        (string<=? . g$6485$tVUFT)
        (string-ref . g$12830$tVUFT)
        (string-length . g$12829$tVUFT)
        (string-for-each . g$6535$tVUFT)
        (string-copy . g$12828$tVUFT)
        (string-append . g$12827$tVUFT)
        (string->symbol . g$12826$tVUFT)
        (string->number . g$12825$tVUFT)
        (string->list . g$12824$tVUFT)
        (string . g$12823$tVUFT)
        (sqrt . g$12822$tVUFT)
        (sin . g$12821$tVUFT)
        (round . g$12820$tVUFT)
        (reverse . g$6408$tVUFT)
        (real? . g$12819$tVUFT)
        (real-valued? . g$12818$tVUFT)
        (real-part . g$12817$tVUFT)
        (rationalize . g$6530$tVUFT)
        (rational? . g$12816$tVUFT)
        (rational-valued? . g$12815$tVUFT)
        (procedure? . g$6403$tVUFT)
        (positive? . g$6437$tVUFT)
        (pair? . g$12814$tVUFT)
        (odd? . g$6441$tVUFT)
        (numerator . g$12813$tVUFT)
        (number? . g$12812$tVUFT)
        (number->string . g$12811$tVUFT)
        (null? . g$12810$tVUFT)
        (not . g$12809$tVUFT)
        (negative? . g$6438$tVUFT)
        (nan? . g$12808$tVUFT)
        (min . g$6443$tVUFT)
        (max . g$6442$tVUFT)
        (map . g$5975$tVUFT)
        (make-vector . g$12807$tVUFT)
        (make-string . g$12806$tVUFT)
        (make-rectangular . g$12805$tVUFT)
        (make-polar . g$12804$tVUFT)
        (magnitude . g$12803$tVUFT)
        (log . g$12802$tVUFT)
        (list? . g$12801$tVUFT)
        (list-tail . g$5955$tVUFT)
        (list-ref . g$5956$tVUFT)
        (list->vector . g$6396$tVUFT)
        (list->string . g$6397$tVUFT)
        (list . g$12800$tVUFT)
        (length . g$12799$tVUFT)
        (lcm . g$6445$tVUFT)
        (integer? . g$12798$tVUFT)
        (integer-valued? . g$12797$tVUFT)
        (integer->char . g$12796$tVUFT)
        (infinite? . g$12795$tVUFT)
        (inexact? . g$12794$tVUFT)
        (inexact . g$12793$tVUFT)
        (imag-part . g$12792$tVUFT)
        (gcd . g$6444$tVUFT)
        (for-each . g$5976$tVUFT)
        (floor . g$12791$tVUFT)
        (finite? . g$12790$tVUFT)
        (expt . g$12789$tVUFT)
        (exp . g$12788$tVUFT)
        (exact? . g$12787$tVUFT)
        (exact-integer-sqrt . g$12786$tVUFT)
        (exact . g$12785$tVUFT)
        (even? . g$6440$tVUFT)
        (error . g$12784$tVUFT)
        (eqv? . g$12783$tVUFT)
        (equal? . g$12782$tVUFT)
        (eq? . g$12781$tVUFT)
        (dynamic-wind . g$12780$tVUFT)
        (div0-and-mod0 . g$12779$tVUFT)
        (mod0 . g$6395$tVUFT)
        (div0 . g$6393$tVUFT)
        (div-and-mod . g$12778$tVUFT)
        (mod . g$6394$tVUFT)
        (div . g$6392$tVUFT)
        (denominator . g$12777$tVUFT)
        (cos . g$12776$tVUFT)
        (cons . g$12775$tVUFT)
        (complex? . g$12774$tVUFT)
        (char? . g$6398$tVUFT)
        (char>? . g$6527$tVUFT)
        (char>=? . g$6529$tVUFT)
        (char=? . g$6525$tVUFT)
        (char<? . g$6526$tVUFT)
        (char<=? . g$6528$tVUFT)
        (char->integer . g$12773$tVUFT)
        (ceiling . g$12772$tVUFT)
        (call-with-values . g$12771$tVUFT)
        (call/cc . g$12770$tVUFT)
        (call-with-current-continuation . g$12769$tVUFT)
        (cddddr . g$6436$tVUFT)
        (cdddar . g$6435$tVUFT)
        (cddadr . g$6434$tVUFT)
        (cddaar . g$6433$tVUFT)
        (cdaddr . g$6432$tVUFT)
        (cdadar . g$6431$tVUFT)
        (cdaadr . g$6430$tVUFT)
        (cdaaar . g$6429$tVUFT)
        (cadddr . g$6428$tVUFT)
        (caddar . g$6427$tVUFT)
        (cadadr . g$6426$tVUFT)
        (cadaar . g$6425$tVUFT)
        (caaddr . g$6424$tVUFT)
        (caadar . g$6423$tVUFT)
        (caaadr . g$6422$tVUFT)
        (caaaar . g$6421$tVUFT)
        (cdddr . g$6420$tVUFT)
        (cddar . g$6419$tVUFT)
        (cdadr . g$6418$tVUFT)
        (cdaar . g$6417$tVUFT)
        (caddr . g$6416$tVUFT)
        (cadar . g$6415$tVUFT)
        (caadr . g$6414$tVUFT)
        (caaar . g$6413$tVUFT)
        (cddr . g$6412$tVUFT)
        (cdar . g$6411$tVUFT)
        (cadr . g$6410$tVUFT)
        (caar . g$6409$tVUFT)
        (cdr . g$12768$tVUFT)
        (car . g$12767$tVUFT)
        (boolean? . g$6402$tVUFT)
        (boolean=? . g$6488$tVUFT)
        (atan . g$12766$tVUFT)
        (assertion-violation . g$12765$tVUFT)
        (asin . g$12764$tVUFT)
        (apply . g$12763$tVUFT)
        (append . g$12762$tVUFT)
        (angle . g$12761$tVUFT)
        (acos . g$12760$tVUFT)
        (abs . g$12759$tVUFT)
        (/ . g$12758$tVUFT)
        (* . g$12757$tVUFT)
        (- . g$12756$tVUFT)
        (+ . g$12755$tVUFT)
        (>= . g$12754$tVUFT)
        (> . g$12753$tVUFT)
        (= . g$12752$tVUFT)
        (<= . g$12751$tVUFT)
        (< . g$12750$tVUFT)
        (make-record-printer . g$12749$tVUFT)
        (eqv-hash . g$12748$tVUFT)
        (reverse! . g$12747$tVUFT)
        (deserialize-port . g$12746$tVUFT)
        (serialize-port . g$12745$tVUFT)
        (enum-set? . g$7897$tVUFT)
        (make-promise . g$7398$tVUFT)
        (load/args . g$12567$tVUFT)
        (printf . g$8008$tVUFT)
        (fprintf . g$8009$tVUFT)
        (format . g$8010$tVUFT)
        (procedure-form . g$12744$tVUFT)
        (procedure-environment . g$12743$tVUFT)
        (procedure-name . g$12742$tVUFT)
        (procedure-arity . g$12741$tVUFT)
        (gc-collect . g$12740$tVUFT)
        (clr-type? . g$12739$tVUFT)
        (get-clr-type . g$12738$tVUFT)
        (get-command-line . g$12737$tVUFT)
        (vector-append . g$12736$tVUFT)
        (vector-filter . g$12735$tVUFT)
        (vector-reverse! . g$12734$tVUFT)
        (vector-contains? . g$12733$tVUFT)
        (vector-index-of . g$12732$tVUFT)
        (vector-copy . g$12731$tVUFT)
        (vector-binary-search . g$12730$tVUFT)
        (string-ci-compare . g$12729$tVUFT)
        (string-compare . g$12728$tVUFT)
        (string-format . g$12727$tVUFT)
        (trace-printer . g$12564$tVUFT)
        (make-traced-procedure . g$12726$tVUFT)
        (make-traced-macro . g$8030$tVUFT)
        (assertion-error . g$9563$tVUFT)
        (time-it . g$12725$tVUFT)
        (make-parameter . g$8303$tVUFT)
        (library-locator . g$12724$tVUFT)
        (get-library-paths . g$12723$tVUFT)
        (open-tcp-input/output-port . g$12722$tVUFT)
        (hashtable-for-each . g$12721$tVUFT)
        (hashtable-map . g$12720$tVUFT)
        (environment-bindings . g$9541$tVUFT)
        (environment-symbols . g$9544$tVUFT)
        (interaction-environment-symbols . g$9540$tVUFT)
        (optimization-level . g$12719$tVUFT)
        (library-path . g$8714$tVUFT)
        (make-compile-time-value . g$9169$tVUFT)
        (expand->core . g$9550$tVUFT)
        (expand . g$9548$tVUFT)
        (convert->cps . g$8086$tVUFT)
        (installed-libraries . g$8735$tVUFT)
        (uninstall-library . g$8726$tVUFT)
        (&no-nans . g$12718$tVUFT)
        (&no-infinities . g$12717$tVUFT)
        (&i/o-encoding . g$12716$tVUFT)
        (&i/o-decoding . g$12715$tVUFT)
        (&i/o-port . g$12714$tVUFT)
        (&i/o-file-does-not-exist . g$12713$tVUFT)
        (&i/o-file-already-exists . g$12712$tVUFT)
        (&i/o-file-is-read-only . g$12711$tVUFT)
        (&i/o-file-protection . g$12710$tVUFT)
        (&i/o-filename . g$12709$tVUFT)
        (&i/o-invalid-position . g$12708$tVUFT)
        (&i/o-write . g$12707$tVUFT)
        (&i/o-read . g$12706$tVUFT)
        (&i/o . g$12705$tVUFT)
        (&non-continuable . g$12704$tVUFT)
        (&undefined . g$12703$tVUFT)
        (&syntax . g$12702$tVUFT)
        (&lexical . g$12701$tVUFT)
        (&implementation-restriction . g$12700$tVUFT)
        (&who . g$12699$tVUFT)
        (&irritants . g$12698$tVUFT)
        (&assertion . g$12697$tVUFT)
        (&violation . g$12696$tVUFT)
        (&error . g$12695$tVUFT)
        (&serious . g$12694$tVUFT)
        (&warning . g$12693$tVUFT)
        (&message . g$12692$tVUFT)
        (&condition . g$12691$tVUFT)
        (define-condition-type . g$12690$tVUFT)
        (define-enumeration . g$12689$tVUFT)
        (define-record-type . g$12688$tVUFT)
        (parent-rtd . g$12687$tVUFT)
        (nongenerative . g$12686$tVUFT)
        (opaque . g$12685$tVUFT)
        (sealed . g$12684$tVUFT)
        (protocol . g$12683$tVUFT)
        (parent . g$12682$tVUFT)
        (immutable . g$12681$tVUFT)
        (mutable . g$12680$tVUFT)
        (fields . g$12679$tVUFT)
        (error-handling-mode . g$12678$tVUFT)
        (file-options . g$12677$tVUFT)
        (buffer-mode . g$12676$tVUFT)
        (eol-style . g$12675$tVUFT)
        (guard . g$12674$tVUFT)
        (trace-letrec-syntax . g$12673$tVUFT)
        (trace-let-syntax . g$12672$tVUFT)
        (trace-define-syntax . g$12671$tVUFT)
        (trace-define . g$12670$tVUFT)
        (trace-lambda . g$12669$tVUFT)
        (unsyntax-splicing . g$12668$tVUFT)
        (unsyntax . g$12667$tVUFT)
        (unquote-splicing . g$12666$tVUFT)
        (unquote . g$12665$tVUFT)
        (_ . g$12664$tVUFT)
        (else . g$12663$tVUFT)
        (=> . g$12662$tVUFT)
        (... . g$12661$tVUFT)
        (assert . g$12660$tVUFT)
        (endianness . g$12659$tVUFT)
        (delay . g$12658$tVUFT)
        (time . g$12657$tVUFT)
        (or . g$12656$tVUFT)
        (and . g$12655$tVUFT)
        (do . g$12654$tVUFT)
        (cond . g$12653$tVUFT)
        (let* . g$12652$tVUFT)
        (let . g$12651$tVUFT)
        (identifier-syntax . g$12650$tVUFT)
        (with-syntax . g$12649$tVUFT)
        (quasisyntax . g$12648$tVUFT)
        (quasiquote . g$12647$tVUFT)
        (syntax-rules . g$12646$tVUFT)
        (include-into . g$12645$tVUFT)
        (include . g$12644$tVUFT)
        (define-struct . g$12643$tVUFT)
        (let-values . g$12642$tVUFT)
        (let*-values . g$12641$tVUFT)
        (record-constructor-descriptor . g$12640$tVUFT)
        (record-type-descriptor . g$12639$tVUFT)
        (fluid-let-syntax . g$12638$tVUFT)
        (case . g$12637$tVUFT)
        (parameterize . g$12636$tVUFT)
        (unless . g$12635$tVUFT)
        (when . g$12634$tVUFT)
        (if . g$12633$tVUFT)
        (letrec* . g$12632$tVUFT)
        (letrec . g$12631$tVUFT)
        (type-descriptor . g$12630$tVUFT)
        (case-lambda . g$12629$tVUFT)
        (lambda . g$12628$tVUFT)
        (syntax . g$12627$tVUFT)
        (syntax-case . g$12626$tVUFT)
        (quote . g$12625$tVUFT)
        (foreign-call . g$12624$tVUFT)
        (letrec-syntax . g$12623$tVUFT)
        (let-syntax . g$12622$tVUFT)
        (set! . g$12621$tVUFT)
        (export . g$12620$tVUFT)
        (import . g$12619$tVUFT)
        (library . g$12618$tVUFT)
        (begin . g$12617$tVUFT)
        (module . g$12616$tVUFT)
        (define-syntax . g$12615$tVUFT)
        (define . g$12614$tVUFT))
      '((g$9439$tVUFT core-prim . ellipsis-map)
        (g$7380$tVUFT core-prim . &no-nans-rcd)
        (g$7379$tVUFT core-prim . &no-nans-rtd)
        (g$7365$tVUFT core-prim . &no-infinities-rcd)
        (g$7364$tVUFT core-prim . &no-infinities-rtd)
        (g$7350$tVUFT core-prim . &i/o-encoding-rcd)
        (g$7349$tVUFT core-prim . &i/o-encoding-rtd)
        (g$7333$tVUFT core-prim . &i/o-decoding-rcd)
        (g$7332$tVUFT core-prim . &i/o-decoding-rtd)
        (g$7318$tVUFT core-prim . &i/o-port-rcd)
        (g$7317$tVUFT core-prim . &i/o-port-rtd)
        (g$7301$tVUFT core-prim . &i/o-file-does-not-exist-rcd)
        (g$7300$tVUFT core-prim . &i/o-file-does-not-exist-rtd)
        (g$7286$tVUFT core-prim . &i/o-file-already-exists-rcd)
        (g$7285$tVUFT core-prim . &i/o-file-already-exists-rtd)
        (g$7271$tVUFT core-prim . &i/o-file-is-read-only-rcd)
        (g$7270$tVUFT core-prim . &i/o-file-is-read-only-rtd)
        (g$7256$tVUFT core-prim . &i/o-file-protection-rcd)
        (g$7255$tVUFT core-prim . &i/o-file-protection-rtd)
        (g$7241$tVUFT core-prim . &i/o-filename-rcd)
        (g$7240$tVUFT core-prim . &i/o-filename-rtd)
        (g$7224$tVUFT core-prim . &i/o-invalid-position-rcd)
        (g$7223$tVUFT core-prim . &i/o-invalid-position-rtd)
        (g$7207$tVUFT core-prim . &i/o-write-rcd)
        (g$7206$tVUFT core-prim . &i/o-write-rtd)
        (g$7192$tVUFT core-prim . &i/o-read-rcd)
        (g$7191$tVUFT core-prim . &i/o-read-rtd)
        (g$7177$tVUFT core-prim . &i/o-rcd)
        (g$7176$tVUFT core-prim . &i/o-rtd)
        (g$7162$tVUFT core-prim . &undefined-rcd)
        (g$7161$tVUFT core-prim . &undefined-rtd)
        (g$7147$tVUFT core-prim . &syntax-rcd)
        (g$7146$tVUFT core-prim . &syntax-rtd)
        (g$7128$tVUFT core-prim . &lexical-rcd)
        (g$7127$tVUFT core-prim . &lexical-rtd)
        (g$7113$tVUFT core-prim . &implementation-restriction-rcd)
        (g$7112$tVUFT core-prim . &implementation-restriction-rtd)
        (g$7098$tVUFT core-prim . &non-continuable-rcd)
        (g$7097$tVUFT core-prim . &non-continuable-rtd)
        (g$7083$tVUFT core-prim . &who-rcd)
        (g$7082$tVUFT core-prim . &who-rtd)
        (g$7066$tVUFT core-prim . &irritants-rcd)
        (g$7065$tVUFT core-prim . &irritants-rtd)
        (g$7049$tVUFT core-prim . &assertion-rcd)
        (g$7048$tVUFT core-prim . &assertion-rtd)
        (g$7034$tVUFT core-prim . &violation-rcd)
        (g$7033$tVUFT core-prim . &violation-rtd)
        (g$7019$tVUFT core-prim . &error-rcd)
        (g$7018$tVUFT core-prim . &error-rtd)
        (g$7004$tVUFT core-prim . &serious-rcd)
        (g$7003$tVUFT core-prim . &serious-rtd)
        (g$6989$tVUFT core-prim . &warning-rcd)
        (g$6988$tVUFT core-prim . &warning-rtd)
        (g$6974$tVUFT core-prim . &message-rcd)
        (g$6973$tVUFT core-prim . &message-rtd)
        (g$6900$tVUFT core-prim . &condition-rcd)
        (g$6899$tVUFT core-prim . &condition-rtd)
        (g$13081$tVUFT core-prim . library-letrec*)
        (g$13080$tVUFT core-prim . annotation-stripped)
        (g$13079$tVUFT core-prim . annotation-source)
        (g$13078$tVUFT core-prim . annotation-expression)
        (g$13077$tVUFT core-prim . annotation?)
        (g$13076$tVUFT core-prim . read-annotated)
        (g$13075$tVUFT core-prim . tanh)
        (g$13074$tVUFT core-prim . cosh)
        (g$13073$tVUFT core-prim . sinh)
        (g$13072$tVUFT core-prim . make-guid)
        (g$13071$tVUFT core-prim . unspecified?)
        (g$5958$tVUFT core-prim . make-list)
        (g$5957$tVUFT core-prim . last-pair)
        (g$13070$tVUFT core-prim . load-r5rs)
        (g$13069$tVUFT core-prim . license)
        (g$13068$tVUFT core-prim . stacktrace)
        (g$12569$tVUFT core-prim . ironscheme-build)
        (g$13067$tVUFT core-prim . define-clr-class-internal)
        (g$13066$tVUFT core-prim . clr-field-set!-internal)
        (g$13065$tVUFT core-prim . clr-field-get-internal)
        (g$13064$tVUFT core-prim . clr-cast-internal)
        (g$13063$tVUFT core-prim . clr-call-internal)
        (g$13062$tVUFT core-prim . clr-new-internal)
        (g$13061$tVUFT core-prim . clr-new-array-internal)
        (g$13060$tVUFT core-prim . clr-is-internal)
        (g$13059$tVUFT core-prim . clr-reference-internal)
        (g$13058$tVUFT core-prim . clr-using-internal)
        (g$9564$tVUFT core-prim . syntax-error)
        (g$9434$tVUFT core-prim . syntax-dispatch)
        (g$13057$tVUFT core-prim . compile-core)
        (g$13056$tVUFT core-prim . eval-core)
        (g$13055$tVUFT core-prim . set-symbol-value!)
        (g$13054$tVUFT core-prim . symbol-value)
        (g$13053$tVUFT core-prim . symbol-bound?)
        (g$13052$tVUFT core-prim . ungensym)
        (g$13051$tVUFT core-prim . gensym)
        (g$13050$tVUFT core-prim . void)
        (g$13049$tVUFT core-prim . load-serialized-library)
        (g$13048$tVUFT core-prim . serialize-library)
        (g$12572$tVUFT core-prim . compile-system-libraries)
        (g$12574$tVUFT core-prim . compile->closure)
        (g$12573$tVUFT core-prim . compile)
        (g$12568$tVUFT core-prim . load)
        (g$13047$tVUFT core-prim . string-normalize)
        (g$9574$tVUFT core-prim . interaction-environment)
        (g$13046$tVUFT core-prim . char-ready?)
        (g$13045$tVUFT core-prim . string-upcase)
        (g$13044$tVUFT core-prim . string-titlecase)
        (g$7521$tVUFT core-prim . string-normalize-nfkd)
        (g$7520$tVUFT core-prim . string-normalize-nfkc)
        (g$7519$tVUFT core-prim . string-normalize-nfd)
        (g$7518$tVUFT core-prim . string-normalize-nfc)
        (g$13043$tVUFT core-prim . string-foldcase)
        (g$13042$tVUFT core-prim . string-downcase)
        (g$7476$tVUFT core-prim . string-ci>?)
        (g$7478$tVUFT core-prim . string-ci>=?)
        (g$7474$tVUFT core-prim . string-ci=?)
        (g$7475$tVUFT core-prim . string-ci<?)
        (g$7477$tVUFT core-prim . string-ci<=?)
        (g$13041$tVUFT core-prim . char-whitespace?)
        (g$13040$tVUFT core-prim . char-upper-case?)
        (g$13039$tVUFT core-prim . char-title-case?)
        (g$13038$tVUFT core-prim . char-numeric?)
        (g$13037$tVUFT core-prim . char-lower-case?)
        (g$13036$tVUFT core-prim . char-general-category)
        (g$13035$tVUFT core-prim . char-upcase)
        (g$13034$tVUFT core-prim . char-titlecase)
        (g$13033$tVUFT core-prim . char-foldcase)
        (g$13032$tVUFT core-prim . char-downcase)
        (g$7515$tVUFT core-prim . char-ci>?)
        (g$7517$tVUFT core-prim . char-ci>=?)
        (g$7513$tVUFT core-prim . char-ci=?)
        (g$7514$tVUFT core-prim . char-ci<?)
        (g$7516$tVUFT core-prim . char-ci<=?)
        (g$13031$tVUFT core-prim . char-alphabetic?)
        (g$9171$tVUFT core-prim . variable-transformer-procedure)
        (g$9170$tVUFT core-prim . variable-transformer?)
        (g$9168$tVUFT core-prim . make-variable-transformer)
        (g$9568$tVUFT core-prim . identifier?)
        (g$9557$tVUFT core-prim . generate-temporaries)
        (g$9558$tVUFT core-prim . free-identifier=?)
        (g$9570$tVUFT core-prim . syntax->datum)
        (g$9569$tVUFT core-prim . datum->syntax)
        (g$9559$tVUFT core-prim . bound-identifier=?)
        (g$13030$tVUFT core-prim . record-type-descriptor?)
        (g$13029$tVUFT core-prim . record-predicate)
        (g$13028$tVUFT core-prim . record-mutator)
        (g$13027$tVUFT core-prim . record-constructor)
        (g$13026$tVUFT core-prim . record-accessor)
        (g$13025$tVUFT core-prim . make-record-type-descriptor)
        (g$13024$tVUFT core-prim . make-record-constructor-descriptor)
        (g$13023$tVUFT core-prim . record?)
        (g$13022$tVUFT core-prim . record-type-uid)
        (g$13021$tVUFT core-prim . record-type-sealed?)
        (g$13020$tVUFT core-prim . record-type-parent)
        (g$13019$tVUFT core-prim . record-type-opaque?)
        (g$13018$tVUFT core-prim . record-type-name)
        (g$13017$tVUFT core-prim . record-type-generative?)
        (g$13016$tVUFT core-prim . record-type-field-names)
        (g$13015$tVUFT core-prim . record-rtd)
        (g$13014$tVUFT core-prim . record-field-mutable?)
        (g$6766$tVUFT core-prim . delete-file)
        (g$6765$tVUFT core-prim . file-exists?)
        (g$13013$tVUFT core-prim . vector-sort!)
        (g$13012$tVUFT core-prim . vector-sort)
        (g$7416$tVUFT core-prim . list-sort)
        (g$13011$tVUFT core-prim . symbol-hash)
        (g$13010$tVUFT core-prim . string-ci-hash)
        (g$13009$tVUFT core-prim . string-hash)
        (g$13008$tVUFT core-prim . equal-hash)
        (g$13007$tVUFT core-prim . hashtable-equivalence-function)
        (g$13006$tVUFT core-prim . make-hashtable)
        (g$13005$tVUFT core-prim . hashtable-hash-function)
        (g$6734$tVUFT core-prim . make-eqv-hashtable)
        (g$6733$tVUFT core-prim . make-eq-hashtable)
        (g$13004$tVUFT core-prim . hashtable?)
        (g$6740$tVUFT core-prim . hashtable-update!)
        (g$6735$tVUFT core-prim . hashtable-size)
        (g$6737$tVUFT core-prim . hashtable-set!)
        (g$6736$tVUFT core-prim . hashtable-ref)
        (g$13003$tVUFT core-prim . hashtable-mutable?)
        (g$13002$tVUFT core-prim . hashtable-keys)
        (g$13001$tVUFT core-prim . hashtable-entries)
        (g$6738$tVUFT core-prim . hashtable-delete!)
        (g$13000$tVUFT core-prim . hashtable-copy)
        (g$6739$tVUFT core-prim . hashtable-contains?)
        (g$6741$tVUFT core-prim . hashtable-clear!)
        (g$7857$tVUFT core-prim . call-with-output-file)
        (g$7856$tVUFT core-prim . call-with-input-file)
        (g$7838$tVUFT core-prim . write-char)
        (g$12999$tVUFT core-prim . write)
        (g$7855$tVUFT core-prim . with-output-to-file)
        (g$7854$tVUFT core-prim . with-input-from-file)
        (g$7837$tVUFT core-prim . read-char)
        (g$12998$tVUFT core-prim . read)
        (g$7836$tVUFT core-prim . peek-char)
        (g$12997$tVUFT core-prim . open-output-file)
        (g$12996$tVUFT core-prim . open-input-file)
        (g$7858$tVUFT core-prim . newline)
        (g$12995$tVUFT core-prim . display)
        (g$12994$tVUFT core-prim . close-output-port)
        (g$12993$tVUFT core-prim . close-input-port)
        (g$12992$tVUFT core-prim . eof-object?)
        (g$12991$tVUFT core-prim . eof-object)
        (g$12990$tVUFT core-prim . current-error-port)
        (g$12989$tVUFT core-prim . current-output-port)
        (g$12988$tVUFT core-prim . current-input-port)
        (g$12987$tVUFT core-prim . output-port?)
        (g$12986$tVUFT core-prim . input-port?)
        (g$12985$tVUFT core-prim . utf-8-codec)
        (g$12984$tVUFT core-prim . utf-16-codec)
        (g$12983$tVUFT core-prim . transcoder-error-handling-mode)
        (g$12982$tVUFT core-prim . transcoder-eol-style)
        (g$12981$tVUFT core-prim . transcoder-codec)
        (g$12980$tVUFT core-prim . transcoded-port)
        (g$12979$tVUFT core-prim . textual-port?)
        (g$12978$tVUFT core-prim . string->bytevector)
        (g$12977$tVUFT core-prim . standard-output-port)
        (g$12976$tVUFT core-prim . standard-input-port)
        (g$12975$tVUFT core-prim . standard-error-port)
        (g$12974$tVUFT core-prim . set-port-position!)
        (g$12973$tVUFT core-prim . put-u8)
        (g$12972$tVUFT core-prim . put-string)
        (g$7816$tVUFT core-prim . put-datum)
        (g$12971$tVUFT core-prim . put-char)
        (g$12970$tVUFT core-prim . put-bytevector)
        (g$7821$tVUFT core-prim . port?)
        (g$12969$tVUFT core-prim . port-transcoder)
        (g$12968$tVUFT core-prim . port-position)
        (g$12967$tVUFT core-prim . port-has-set-port-position!?)
        (g$12966$tVUFT core-prim . port-has-port-position?)
        (g$12965$tVUFT core-prim . port-eof?)
        (g$12964$tVUFT core-prim . output-port-buffer-mode)
        (g$7820$tVUFT core-prim . open-string-output-port)
        (g$12963$tVUFT core-prim . open-string-input-port)
        (g$12962$tVUFT core-prim . open-file-output-port)
        (g$12961$tVUFT core-prim . open-file-input/output-port)
        (g$12960$tVUFT core-prim . open-file-input-port)
        (g$12959$tVUFT core-prim . open-bytevector-output-port)
        (g$12958$tVUFT core-prim . open-bytevector-input-port)
        (g$12957$tVUFT core-prim . native-transcoder)
        (g$12956$tVUFT core-prim . native-eol-style)
        (g$12955$tVUFT core-prim . make-transcoder)
        (g$12954$tVUFT core-prim . latin-1-codec)
        (g$7204$tVUFT core-prim . make-i/o-write-error)
        (g$7189$tVUFT core-prim . make-i/o-read-error)
        (g$7313$tVUFT core-prim . make-i/o-port-error)
        (g$7219$tVUFT core-prim . make-i/o-invalid-position-error)
        (g$7236$tVUFT core-prim . make-i/o-filename-error)
        (g$7253$tVUFT core-prim . make-i/o-file-protection-error)
        (g$7268$tVUFT core-prim . make-i/o-file-is-read-only-error)
        (g$7298$tVUFT core-prim . make-i/o-file-does-not-exist-error)
        (g$7283$tVUFT core-prim . make-i/o-file-already-exists-error)
        (g$7174$tVUFT core-prim . make-i/o-error)
        (g$7345$tVUFT core-prim . make-i/o-encoding-error)
        (g$7330$tVUFT core-prim . make-i/o-decoding-error)
        (g$12953$tVUFT core-prim . make-custom-textual-output-port)
        (g$12952$tVUFT core-prim . make-custom-textual-input/output-port)
        (g$12951$tVUFT core-prim . make-custom-textual-input-port)
        (g$12950$tVUFT core-prim . make-custom-binary-output-port)
        (g$12949$tVUFT core-prim . make-custom-binary-input/output-port)
        (g$12948$tVUFT core-prim . make-custom-binary-input-port)
        (g$12947$tVUFT core-prim . make-bytevector)
        (g$12946$tVUFT core-prim . lookahead-u8)
        (g$12945$tVUFT core-prim . lookahead-char)
        (g$7205$tVUFT core-prim . i/o-write-error?)
        (g$7190$tVUFT core-prim . i/o-read-error?)
        (g$7315$tVUFT core-prim . i/o-port-error?)
        (g$7221$tVUFT core-prim . i/o-invalid-position-error?)
        (g$7222$tVUFT core-prim . i/o-error-position)
        (g$7238$tVUFT core-prim . i/o-filename-error?)
        (g$7254$tVUFT core-prim . i/o-file-protection-error?)
        (g$7269$tVUFT core-prim . i/o-file-is-read-only-error?)
        (g$7299$tVUFT core-prim . i/o-file-does-not-exist-error?)
        (g$7284$tVUFT core-prim . i/o-file-already-exists-error?)
        (g$7175$tVUFT core-prim . i/o-error?)
        (g$7316$tVUFT core-prim . i/o-error-port)
        (g$7239$tVUFT core-prim . i/o-error-filename)
        (g$7347$tVUFT core-prim . i/o-encoding-error?)
        (g$7348$tVUFT core-prim . i/o-encoding-error-char)
        (g$7331$tVUFT core-prim . i/o-decoding-error?)
        (g$12944$tVUFT core-prim . get-u8)
        (g$12943$tVUFT core-prim . get-string-n!)
        (g$12942$tVUFT core-prim . get-string-n)
        (g$12941$tVUFT core-prim . get-string-all)
        (g$12940$tVUFT core-prim . get-line)
        (g$7817$tVUFT core-prim . get-datum)
        (g$12939$tVUFT core-prim . get-char)
        (g$12938$tVUFT core-prim . get-bytevector-some)
        (g$12937$tVUFT core-prim . get-bytevector-n!)
        (g$12936$tVUFT core-prim . get-bytevector-n)
        (g$12935$tVUFT core-prim . get-bytevector-all)
        (g$12934$tVUFT core-prim . flush-output-port)
        (g$12933$tVUFT core-prim . close-port)
        (g$7822$tVUFT core-prim . call-with-string-output-port)
        (g$7823$tVUFT core-prim . call-with-port)
        (g$12932$tVUFT core-prim . call-with-bytevector-output-port)
        (g$12931$tVUFT core-prim . bytevector->string)
        (g$12930$tVUFT core-prim . buffer-mode?)
        (g$12929$tVUFT core-prim . binary-port?)
        (g$9547$tVUFT core-prim . scheme-report-environment)
        (g$7395$tVUFT core-prim . quotient)
        (g$9546$tVUFT core-prim . null-environment)
        (g$7396$tVUFT core-prim . remainder)
        (g$7397$tVUFT core-prim . modulo)
        (g$7392$tVUFT core-prim . inexact->exact)
        (g$7399$tVUFT core-prim . force)
        (g$7393$tVUFT core-prim . exact->inexact)
        (g$12928$tVUFT core-prim . exit)
        (g$12565$tVUFT core-prim . command-line)
        (g$12927$tVUFT core-prim . string-fill!)
        (g$12926$tVUFT core-prim . string-set!)
        (g$12925$tVUFT core-prim . set-cdr!)
        (g$12924$tVUFT core-prim . set-car!)
        (g$5980$tVUFT core-prim . remove)
        (g$5981$tVUFT core-prim . remv)
        (g$5961$tVUFT core-prim . remp)
        (g$5982$tVUFT core-prim . remq)
        (g$5960$tVUFT core-prim . partition)
        (g$5968$tVUFT core-prim . memv)
        (g$5967$tVUFT core-prim . memq)
        (g$5970$tVUFT core-prim . memp)
        (g$5969$tVUFT core-prim . member)
        (g$5974$tVUFT core-prim . exists)
        (g$5973$tVUFT core-prim . for-all)
        (g$5979$tVUFT core-prim . fold-right)
        (g$5978$tVUFT core-prim . fold-left)
        (g$5959$tVUFT core-prim . find)
        (g$5962$tVUFT core-prim . filter)
        (g$5977$tVUFT core-prim . cons*)
        (g$5964$tVUFT core-prim . assv)
        (g$5963$tVUFT core-prim . assq)
        (g$5966$tVUFT core-prim . assp)
        (g$5965$tVUFT core-prim . assoc)
        (g$12923$tVUFT core-prim . with-exception-handler)
        (g$12922$tVUFT core-prim . raise-continuable)
        (g$12921$tVUFT core-prim . raise)
        (g$9549$tVUFT core-prim . eval)
        (g$9545$tVUFT core-prim . environment)
        (g$7922$tVUFT core-prim . make-enumeration)
        (g$7929$tVUFT core-prim . enum-set=?)
        (g$7923$tVUFT core-prim . enum-set-universe)
        (g$7930$tVUFT core-prim . enum-set-union)
        (g$7928$tVUFT core-prim . enum-set-subset?)
        (g$7934$tVUFT core-prim . enum-set-projection)
        (g$7927$tVUFT core-prim . enum-set-member?)
        (g$7931$tVUFT core-prim . enum-set-intersection)
        (g$7924$tVUFT core-prim . enum-set-indexer)
        (g$7932$tVUFT core-prim . enum-set-difference)
        (g$7925$tVUFT core-prim . enum-set-constructor)
        (g$7933$tVUFT core-prim . enum-set-complement)
        (g$7926$tVUFT core-prim . enum-set->list)
        (g$7080$tVUFT core-prim . who-condition?)
        (g$6987$tVUFT core-prim . warning?)
        (g$7032$tVUFT core-prim . violation?)
        (g$7160$tVUFT core-prim . undefined-violation?)
        (g$7143$tVUFT core-prim . syntax-violation?)
        (g$7145$tVUFT core-prim . syntax-violation-subform)
        (g$7144$tVUFT core-prim . syntax-violation-form)
        (g$9567$tVUFT core-prim . syntax-violation)
        (g$12920$tVUFT core-prim . simple-conditions)
        (g$7002$tVUFT core-prim . serious-condition?)
        (g$7096$tVUFT core-prim . non-continuable-violation?)
        (g$6971$tVUFT core-prim . message-condition?)
        (g$7078$tVUFT core-prim . make-who-condition)
        (g$6986$tVUFT core-prim . make-warning)
        (g$7031$tVUFT core-prim . make-violation)
        (g$7159$tVUFT core-prim . make-undefined-violation)
        (g$7140$tVUFT core-prim . make-syntax-violation)
        (g$7001$tVUFT core-prim . make-serious-condition)
        (g$7095$tVUFT core-prim . make-non-continuable-violation)
        (g$6969$tVUFT core-prim . make-message-condition)
        (g$7125$tVUFT core-prim . make-lexical-violation)
        (g$7061$tVUFT core-prim . make-irritants-condition)
        (g$7110$tVUFT core-prim . make-implementation-restriction-violation)
        (g$7016$tVUFT core-prim . make-error)
        (g$7046$tVUFT core-prim . make-assertion-violation)
        (g$7126$tVUFT core-prim . lexical-violation?)
        (g$7063$tVUFT core-prim . irritants-condition?)
        (g$7111$tVUFT core-prim . implementation-restriction-violation?)
        (g$7017$tVUFT core-prim . error?)
        (g$7081$tVUFT core-prim . condition-who)
        (g$12919$tVUFT core-prim . condition-predicate)
        (g$6972$tVUFT core-prim . condition-message)
        (g$7064$tVUFT core-prim . condition-irritants)
        (g$12918$tVUFT core-prim . condition-accessor)
        (g$12917$tVUFT core-prim . condition)
        (g$7047$tVUFT core-prim . assertion-violation?)
        (g$12916$tVUFT core-prim . condition?)
        (g$12915$tVUFT core-prim . utf32->string)
        (g$12914$tVUFT core-prim . utf16->string)
        (g$12913$tVUFT core-prim . utf8->string)
        (g$12912$tVUFT core-prim . uint-list->bytevector)
        (g$12911$tVUFT core-prim . u8-list->bytevector)
        (g$12910$tVUFT core-prim . string->utf8)
        (g$12909$tVUFT core-prim . string->utf32)
        (g$12908$tVUFT core-prim . string->utf16)
        (g$12907$tVUFT core-prim . sint-list->bytevector)
        (g$6772$tVUFT core-prim . native-endianness)
        (g$6400$tVUFT core-prim . bytevector?)
        (g$12906$tVUFT core-prim . bytevector=?)
        (g$12905$tVUFT core-prim . bytevector-uint-set!)
        (g$12904$tVUFT core-prim . bytevector-uint-ref)
        (g$12903$tVUFT core-prim . bytevector-u8-set!)
        (g$12902$tVUFT core-prim . bytevector-u8-ref)
        (g$6793$tVUFT core-prim . bytevector-u64-set!)
        (g$6789$tVUFT core-prim . bytevector-u64-ref)
        (g$6795$tVUFT core-prim . bytevector-u64-native-set!)
        (g$6791$tVUFT core-prim . bytevector-u64-native-ref)
        (g$6785$tVUFT core-prim . bytevector-u32-set!)
        (g$6781$tVUFT core-prim . bytevector-u32-ref)
        (g$6787$tVUFT core-prim . bytevector-u32-native-set!)
        (g$6783$tVUFT core-prim . bytevector-u32-native-ref)
        (g$6777$tVUFT core-prim . bytevector-u16-set!)
        (g$6773$tVUFT core-prim . bytevector-u16-ref)
        (g$6779$tVUFT core-prim . bytevector-u16-native-set!)
        (g$6775$tVUFT core-prim . bytevector-u16-native-ref)
        (g$12901$tVUFT core-prim . bytevector-sint-set!)
        (g$12900$tVUFT core-prim . bytevector-sint-ref)
        (g$12899$tVUFT core-prim . bytevector-s8-set!)
        (g$12898$tVUFT core-prim . bytevector-s8-ref)
        (g$6794$tVUFT core-prim . bytevector-s64-set!)
        (g$6790$tVUFT core-prim . bytevector-s64-ref)
        (g$6796$tVUFT core-prim . bytevector-s64-native-set!)
        (g$6792$tVUFT core-prim . bytevector-s64-native-ref)
        (g$6786$tVUFT core-prim . bytevector-s32-set!)
        (g$6782$tVUFT core-prim . bytevector-s32-ref)
        (g$6788$tVUFT core-prim . bytevector-s32-native-set!)
        (g$6784$tVUFT core-prim . bytevector-s32-native-ref)
        (g$6778$tVUFT core-prim . bytevector-s16-set!)
        (g$6774$tVUFT core-prim . bytevector-s16-ref)
        (g$6780$tVUFT core-prim . bytevector-s16-native-set!)
        (g$6776$tVUFT core-prim . bytevector-s16-native-ref)
        (g$12897$tVUFT core-prim . bytevector-length)
        (g$12896$tVUFT core-prim . bytevector-ieee-single-set!)
        (g$12895$tVUFT core-prim . bytevector-ieee-single-ref)
        (g$6799$tVUFT core-prim . bytevector-ieee-single-native-set!)
        (g$6797$tVUFT core-prim . bytevector-ieee-single-native-ref)
        (g$12894$tVUFT core-prim . bytevector-ieee-double-set!)
        (g$12893$tVUFT core-prim . bytevector-ieee-double-ref)
        (g$6800$tVUFT core-prim . bytevector-ieee-double-native-set!)
        (g$6798$tVUFT core-prim . bytevector-ieee-double-native-ref)
        (g$12892$tVUFT core-prim . bytevector-fill!)
        (g$12891$tVUFT core-prim . bytevector-copy!)
        (g$12890$tVUFT core-prim . bytevector-copy)
        (g$12889$tVUFT core-prim . bytevector->uint-list)
        (g$12888$tVUFT core-prim . bytevector->u8-list)
        (g$12887$tVUFT core-prim . bytevector->sint-list)
        (g$7378$tVUFT core-prim . no-nans-violation?)
        (g$7363$tVUFT core-prim . no-infinities-violation?)
        (g$7377$tVUFT core-prim . make-no-nans-violation)
        (g$7362$tVUFT core-prim . make-no-infinities-violation)
        (g$12886$tVUFT core-prim . real->flonum)
        (g$7736$tVUFT core-prim . flzero?)
        (g$7731$tVUFT core-prim . fltruncate)
        (g$7721$tVUFT core-prim . fltan)
        (g$7726$tVUFT core-prim . flsqrt)
        (g$7719$tVUFT core-prim . flsin)
        (g$7732$tVUFT core-prim . flround)
        (g$7734$tVUFT core-prim . flpositive?)
        (g$6405$tVUFT core-prim . flonum?)
        (g$7738$tVUFT core-prim . flodd?)
        (g$12885$tVUFT core-prim . flnumerator)
        (g$7735$tVUFT core-prim . flnegative?)
        (g$7718$tVUFT core-prim . flnan?)
        (g$7714$tVUFT core-prim . flmod0)
        (g$7713$tVUFT core-prim . flmod)
        (g$7740$tVUFT core-prim . flmin)
        (g$7739$tVUFT core-prim . flmax)
        (g$7725$tVUFT core-prim . fllog)
        (g$7715$tVUFT core-prim . flinteger?)
        (g$7717$tVUFT core-prim . flinfinite?)
        (g$7730$tVUFT core-prim . flfloor)
        (g$7716$tVUFT core-prim . flfinite?)
        (g$7728$tVUFT core-prim . flexpt)
        (g$7727$tVUFT core-prim . flexp)
        (g$7737$tVUFT core-prim . fleven?)
        (g$7710$tVUFT core-prim . fldiv0-and-mod0)
        (g$7712$tVUFT core-prim . fldiv0)
        (g$7709$tVUFT core-prim . fldiv-and-mod)
        (g$7711$tVUFT core-prim . fldiv)
        (g$12884$tVUFT core-prim . fldenominator)
        (g$7720$tVUFT core-prim . flcos)
        (g$7729$tVUFT core-prim . flceiling)
        (g$7724$tVUFT core-prim . flatan)
        (g$7722$tVUFT core-prim . flasin)
        (g$7723$tVUFT core-prim . flacos)
        (g$7733$tVUFT core-prim . flabs)
        (g$12883$tVUFT core-prim . fl>?)
        (g$12882$tVUFT core-prim . fl>=?)
        (g$12881$tVUFT core-prim . fl=?)
        (g$12880$tVUFT core-prim . fl<?)
        (g$12879$tVUFT core-prim . fl<=?)
        (g$12878$tVUFT core-prim . fl/)
        (g$12877$tVUFT core-prim . fl-)
        (g$12876$tVUFT core-prim . fl+)
        (g$12875$tVUFT core-prim . fl*)
        (g$12874$tVUFT core-prim . fixnum->flonum)
        (g$7617$tVUFT core-prim . fxzero?)
        (g$12873$tVUFT core-prim . fxxor)
        (g$7631$tVUFT core-prim . fxrotate-bit-field)
        (g$12872$tVUFT core-prim . fxreverse-bit-field)
        (g$7615$tVUFT core-prim . fxpositive?)
        (g$7619$tVUFT core-prim . fxodd?)
        (g$12871$tVUFT core-prim . fxnot)
        (g$7616$tVUFT core-prim . fxnegative?)
        (g$7614$tVUFT core-prim . fxmod0)
        (g$7613$tVUFT core-prim . fxmod)
        (g$7621$tVUFT core-prim . fxmin)
        (g$7620$tVUFT core-prim . fxmax)
        (g$12870$tVUFT core-prim . fxlength)
        (g$12869$tVUFT core-prim . fxior)
        (g$7625$tVUFT core-prim . fxif)
        (g$12868$tVUFT core-prim . fxfirst-bit-set)
        (g$7618$tVUFT core-prim . fxeven?)
        (g$12867$tVUFT core-prim . fxdiv0-and-mod0)
        (g$7612$tVUFT core-prim . fxdiv0)
        (g$12866$tVUFT core-prim . fxdiv-and-mod)
        (g$7611$tVUFT core-prim . fxdiv)
        (g$7628$tVUFT core-prim . fxcopy-bit-field)
        (g$7626$tVUFT core-prim . fxcopy-bit)
        (g$12865$tVUFT core-prim . fxbit-set?)
        (g$7627$tVUFT core-prim . fxbit-field)
        (g$12864$tVUFT core-prim . fxbit-count)
        (g$7630$tVUFT core-prim . fxarithmetic-shift-right)
        (g$7629$tVUFT core-prim . fxarithmetic-shift-left)
        (g$12863$tVUFT core-prim . fxarithmetic-shift)
        (g$12862$tVUFT core-prim . fxand)
        (g$12861$tVUFT core-prim . fx>?)
        (g$12860$tVUFT core-prim . fx>=?)
        (g$12859$tVUFT core-prim . fx=?)
        (g$12858$tVUFT core-prim . fx<?)
        (g$12857$tVUFT core-prim . fx<=?)
        (g$7623$tVUFT core-prim . fx-/carry)
        (g$12856$tVUFT core-prim . fx-)
        (g$7624$tVUFT core-prim . fx+/carry)
        (g$12855$tVUFT core-prim . fx+)
        (g$7622$tVUFT core-prim . fx*/carry)
        (g$12854$tVUFT core-prim . fx*)
        (g$12853$tVUFT core-prim . greatest-fixnum)
        (g$12852$tVUFT core-prim . least-fixnum)
        (g$6406$tVUFT core-prim . fixnum-width)
        (g$6404$tVUFT core-prim . fixnum?)
        (g$7585$tVUFT core-prim . bitwise-rotate-bit-field)
        (g$12851$tVUFT core-prim . bitwise-reverse-bit-field)
        (g$12850$tVUFT core-prim . bitwise-length)
        (g$7579$tVUFT core-prim . bitwise-if)
        (g$12849$tVUFT core-prim . bitwise-first-bit-set)
        (g$7582$tVUFT core-prim . bitwise-copy-bit-field)
        (g$7580$tVUFT core-prim . bitwise-copy-bit)
        (g$12848$tVUFT core-prim . bitwise-bit-set?)
        (g$7581$tVUFT core-prim . bitwise-bit-field)
        (g$12847$tVUFT core-prim . bitwise-bit-count)
        (g$12846$tVUFT core-prim . bitwise-xor)
        (g$12845$tVUFT core-prim . bitwise-ior)
        (g$12844$tVUFT core-prim . bitwise-and)
        (g$12843$tVUFT core-prim . bitwise-not)
        (g$7584$tVUFT core-prim . bitwise-arithmetic-shift-right)
        (g$7583$tVUFT core-prim . bitwise-arithmetic-shift-left)
        (g$12842$tVUFT core-prim . bitwise-arithmetic-shift)
        (g$6439$tVUFT core-prim . zero?)
        (g$6399$tVUFT core-prim . vector?)
        (g$12841$tVUFT core-prim . vector-set!)
        (g$12840$tVUFT core-prim . vector-ref)
        (g$6533$tVUFT core-prim . vector-map)
        (g$12839$tVUFT core-prim . vector-length)
        (g$6534$tVUFT core-prim . vector-for-each)
        (g$6407$tVUFT core-prim . vector-fill!)
        (g$12838$tVUFT core-prim . vector->list)
        (g$12837$tVUFT core-prim . vector)
        (g$12836$tVUFT core-prim . values)
        (g$12835$tVUFT core-prim . truncate)
        (g$12834$tVUFT core-prim . tan)
        (g$6401$tVUFT core-prim . symbol?)
        (g$6487$tVUFT core-prim . symbol=?)
        (g$12833$tVUFT core-prim . symbol->string)
        (g$12832$tVUFT core-prim . substring)
        (g$12831$tVUFT core-prim . string?)
        (g$6484$tVUFT core-prim . string>?)
        (g$6486$tVUFT core-prim . string>=?)
        (g$6482$tVUFT core-prim . string=?)
        (g$6483$tVUFT core-prim . string<?)
        (g$6485$tVUFT core-prim . string<=?)
        (g$12830$tVUFT core-prim . string-ref)
        (g$12829$tVUFT core-prim . string-length)
        (g$6535$tVUFT core-prim . string-for-each)
        (g$12828$tVUFT core-prim . string-copy)
        (g$12827$tVUFT core-prim . string-append)
        (g$12826$tVUFT core-prim . string->symbol)
        (g$12825$tVUFT core-prim . string->number)
        (g$12824$tVUFT core-prim . string->list)
        (g$12823$tVUFT core-prim . string)
        (g$12822$tVUFT core-prim . sqrt)
        (g$12821$tVUFT core-prim . sin)
        (g$12820$tVUFT core-prim . round)
        (g$6408$tVUFT core-prim . reverse)
        (g$12819$tVUFT core-prim . real?)
        (g$12818$tVUFT core-prim . real-valued?)
        (g$12817$tVUFT core-prim . real-part)
        (g$6530$tVUFT core-prim . rationalize)
        (g$12816$tVUFT core-prim . rational?)
        (g$12815$tVUFT core-prim . rational-valued?)
        (g$6403$tVUFT core-prim . procedure?)
        (g$6437$tVUFT core-prim . positive?)
        (g$12814$tVUFT core-prim . pair?)
        (g$6441$tVUFT core-prim . odd?)
        (g$12813$tVUFT core-prim . numerator)
        (g$12812$tVUFT core-prim . number?)
        (g$12811$tVUFT core-prim . number->string)
        (g$12810$tVUFT core-prim . null?)
        (g$12809$tVUFT core-prim . not)
        (g$6438$tVUFT core-prim . negative?)
        (g$12808$tVUFT core-prim . nan?)
        (g$6443$tVUFT core-prim . min)
        (g$6442$tVUFT core-prim . max)
        (g$5975$tVUFT core-prim . map)
        (g$12807$tVUFT core-prim . make-vector)
        (g$12806$tVUFT core-prim . make-string)
        (g$12805$tVUFT core-prim . make-rectangular)
        (g$12804$tVUFT core-prim . make-polar)
        (g$12803$tVUFT core-prim . magnitude)
        (g$12802$tVUFT core-prim . log)
        (g$12801$tVUFT core-prim . list?)
        (g$5955$tVUFT core-prim . list-tail)
        (g$5956$tVUFT core-prim . list-ref)
        (g$6396$tVUFT core-prim . list->vector)
        (g$6397$tVUFT core-prim . list->string)
        (g$12800$tVUFT core-prim . list)
        (g$12799$tVUFT core-prim . length)
        (g$6445$tVUFT core-prim . lcm)
        (g$12798$tVUFT core-prim . integer?)
        (g$12797$tVUFT core-prim . integer-valued?)
        (g$12796$tVUFT core-prim . integer->char)
        (g$12795$tVUFT core-prim . infinite?)
        (g$12794$tVUFT core-prim . inexact?)
        (g$12793$tVUFT core-prim . inexact)
        (g$12792$tVUFT core-prim . imag-part)
        (g$6444$tVUFT core-prim . gcd)
        (g$5976$tVUFT core-prim . for-each)
        (g$12791$tVUFT core-prim . floor)
        (g$12790$tVUFT core-prim . finite?)
        (g$12789$tVUFT core-prim . expt)
        (g$12788$tVUFT core-prim . exp)
        (g$12787$tVUFT core-prim . exact?)
        (g$12786$tVUFT core-prim . exact-integer-sqrt)
        (g$12785$tVUFT core-prim . exact)
        (g$6440$tVUFT core-prim . even?)
        (g$12784$tVUFT core-prim . error)
        (g$12783$tVUFT core-prim . eqv?)
        (g$12782$tVUFT core-prim . equal?)
        (g$12781$tVUFT core-prim . eq?)
        (g$12780$tVUFT core-prim . dynamic-wind)
        (g$12779$tVUFT core-prim . div0-and-mod0)
        (g$6395$tVUFT core-prim . mod0)
        (g$6393$tVUFT core-prim . div0)
        (g$12778$tVUFT core-prim . div-and-mod)
        (g$6394$tVUFT core-prim . mod)
        (g$6392$tVUFT core-prim . div)
        (g$12777$tVUFT core-prim . denominator)
        (g$12776$tVUFT core-prim . cos)
        (g$12775$tVUFT core-prim . cons)
        (g$12774$tVUFT core-prim . complex?)
        (g$6398$tVUFT core-prim . char?)
        (g$6527$tVUFT core-prim . char>?)
        (g$6529$tVUFT core-prim . char>=?)
        (g$6525$tVUFT core-prim . char=?)
        (g$6526$tVUFT core-prim . char<?)
        (g$6528$tVUFT core-prim . char<=?)
        (g$12773$tVUFT core-prim . char->integer)
        (g$12772$tVUFT core-prim . ceiling)
        (g$12771$tVUFT core-prim . call-with-values)
        (g$12770$tVUFT core-prim . call/cc)
        (g$12769$tVUFT core-prim . call-with-current-continuation)
        (g$6436$tVUFT core-prim . cddddr)
        (g$6435$tVUFT core-prim . cdddar)
        (g$6434$tVUFT core-prim . cddadr)
        (g$6433$tVUFT core-prim . cddaar)
        (g$6432$tVUFT core-prim . cdaddr)
        (g$6431$tVUFT core-prim . cdadar)
        (g$6430$tVUFT core-prim . cdaadr)
        (g$6429$tVUFT core-prim . cdaaar)
        (g$6428$tVUFT core-prim . cadddr)
        (g$6427$tVUFT core-prim . caddar)
        (g$6426$tVUFT core-prim . cadadr)
        (g$6425$tVUFT core-prim . cadaar)
        (g$6424$tVUFT core-prim . caaddr)
        (g$6423$tVUFT core-prim . caadar)
        (g$6422$tVUFT core-prim . caaadr)
        (g$6421$tVUFT core-prim . caaaar)
        (g$6420$tVUFT core-prim . cdddr)
        (g$6419$tVUFT core-prim . cddar)
        (g$6418$tVUFT core-prim . cdadr)
        (g$6417$tVUFT core-prim . cdaar)
        (g$6416$tVUFT core-prim . caddr)
        (g$6415$tVUFT core-prim . cadar)
        (g$6414$tVUFT core-prim . caadr)
        (g$6413$tVUFT core-prim . caaar)
        (g$6412$tVUFT core-prim . cddr)
        (g$6411$tVUFT core-prim . cdar)
        (g$6410$tVUFT core-prim . cadr)
        (g$6409$tVUFT core-prim . caar)
        (g$12768$tVUFT core-prim . cdr)
        (g$12767$tVUFT core-prim . car)
        (g$6402$tVUFT core-prim . boolean?)
        (g$6488$tVUFT core-prim . boolean=?)
        (g$12766$tVUFT core-prim . atan)
        (g$12765$tVUFT core-prim . assertion-violation)
        (g$12764$tVUFT core-prim . asin)
        (g$12763$tVUFT core-prim . apply)
        (g$12762$tVUFT core-prim . append)
        (g$12761$tVUFT core-prim . angle)
        (g$12760$tVUFT core-prim . acos)
        (g$12759$tVUFT core-prim . abs)
        (g$12758$tVUFT core-prim . /)
        (g$12757$tVUFT core-prim . *)
        (g$12756$tVUFT core-prim . -)
        (g$12755$tVUFT core-prim . +)
        (g$12754$tVUFT core-prim . >=)
        (g$12753$tVUFT core-prim . >)
        (g$12752$tVUFT core-prim . =)
        (g$12751$tVUFT core-prim . <=)
        (g$12750$tVUFT core-prim . <)
        (g$12749$tVUFT core-prim . make-record-printer)
        (g$12748$tVUFT core-prim . eqv-hash)
        (g$12747$tVUFT core-prim . reverse!)
        (g$12746$tVUFT core-prim . deserialize-port)
        (g$12745$tVUFT core-prim . serialize-port)
        (g$7897$tVUFT core-prim . enum-set?)
        (g$7398$tVUFT core-prim . make-promise)
        (g$12567$tVUFT core-prim . load/args)
        (g$8008$tVUFT core-prim . printf)
        (g$8009$tVUFT core-prim . fprintf)
        (g$8010$tVUFT core-prim . format)
        (g$12744$tVUFT core-prim . procedure-form)
        (g$12743$tVUFT core-prim . procedure-environment)
        (g$12742$tVUFT core-prim . procedure-name)
        (g$12741$tVUFT core-prim . procedure-arity)
        (g$12740$tVUFT core-prim . gc-collect)
        (g$12739$tVUFT core-prim . clr-type?)
        (g$12738$tVUFT core-prim . get-clr-type)
        (g$12737$tVUFT core-prim . get-command-line)
        (g$12736$tVUFT core-prim . vector-append)
        (g$12735$tVUFT core-prim . vector-filter)
        (g$12734$tVUFT core-prim . vector-reverse!)
        (g$12733$tVUFT core-prim . vector-contains?)
        (g$12732$tVUFT core-prim . vector-index-of)
        (g$12731$tVUFT core-prim . vector-copy)
        (g$12730$tVUFT core-prim . vector-binary-search)
        (g$12729$tVUFT core-prim . string-ci-compare)
        (g$12728$tVUFT core-prim . string-compare)
        (g$12727$tVUFT core-prim . string-format)
        (g$12564$tVUFT core-prim . trace-printer)
        (g$12726$tVUFT core-prim . make-traced-procedure)
        (g$8030$tVUFT core-prim . make-traced-macro)
        (g$9563$tVUFT core-prim . assertion-error)
        (g$12725$tVUFT core-prim . time-it)
        (g$8303$tVUFT core-prim . make-parameter)
        (g$12724$tVUFT core-prim . library-locator)
        (g$12723$tVUFT core-prim . get-library-paths)
        (g$12722$tVUFT core-prim . open-tcp-input/output-port)
        (g$12721$tVUFT core-prim . hashtable-for-each)
        (g$12720$tVUFT core-prim . hashtable-map)
        (g$9541$tVUFT core-prim . environment-bindings)
        (g$9544$tVUFT core-prim . environment-symbols)
        (g$9540$tVUFT core-prim . interaction-environment-symbols)
        (g$12719$tVUFT core-prim . optimization-level)
        (g$8714$tVUFT core-prim . library-path)
        (g$9169$tVUFT core-prim . make-compile-time-value)
        (g$9550$tVUFT core-prim . expand->core)
        (g$9548$tVUFT core-prim . expand)
        (g$8086$tVUFT core-prim . convert->cps)
        (g$8735$tVUFT core-prim . installed-libraries)
        (g$8726$tVUFT core-prim . uninstall-library)
        (g$12718$tVUFT $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$12717$tVUFT $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$12716$tVUFT $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$12715$tVUFT $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$12714$tVUFT $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$12713$tVUFT
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$12712$tVUFT
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$12711$tVUFT
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$12710$tVUFT
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$12709$tVUFT $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$12708$tVUFT
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$12707$tVUFT $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$12706$tVUFT $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$12705$tVUFT $core-rtd &i/o-rtd &i/o-rcd)
        (g$12704$tVUFT $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$12703$tVUFT $core-rtd &undefined-rtd &undefined-rcd)
        (g$12702$tVUFT $core-rtd &syntax-rtd &syntax-rcd)
        (g$12701$tVUFT $core-rtd &lexical-rtd &lexical-rcd)
        (g$12700$tVUFT
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$12699$tVUFT $core-rtd &who-rtd &who-rcd)
        (g$12698$tVUFT $core-rtd &irritants-rtd &irritants-rcd)
        (g$12697$tVUFT $core-rtd &assertion-rtd &assertion-rcd)
        (g$12696$tVUFT $core-rtd &violation-rtd &violation-rcd)
        (g$12695$tVUFT $core-rtd &error-rtd &error-rcd)
        (g$12694$tVUFT $core-rtd &serious-rtd &serious-rcd)
        (g$12693$tVUFT $core-rtd &warning-rtd &warning-rcd)
        (g$12692$tVUFT $core-rtd &message-rtd &message-rcd)
        (g$12691$tVUFT $core-rtd &condition-rtd &condition-rcd)
        (g$12690$tVUFT macro . define-condition-type)
        (g$12689$tVUFT macro . define-enumeration)
        (g$12688$tVUFT macro . define-record-type)
        (g$12687$tVUFT macro . parent-rtd)
        (g$12686$tVUFT macro . nongenerative)
        (g$12685$tVUFT macro . opaque)
        (g$12684$tVUFT macro . sealed)
        (g$12683$tVUFT macro . protocol)
        (g$12682$tVUFT macro . parent)
        (g$12681$tVUFT macro . immutable)
        (g$12680$tVUFT macro . mutable)
        (g$12679$tVUFT macro . fields)
        (g$12678$tVUFT macro . error-handling-mode)
        (g$12677$tVUFT macro . file-options)
        (g$12676$tVUFT macro . buffer-mode)
        (g$12675$tVUFT macro . eol-style)
        (g$12674$tVUFT macro . guard)
        (g$12673$tVUFT macro . trace-letrec-syntax)
        (g$12672$tVUFT macro . trace-let-syntax)
        (g$12671$tVUFT macro . trace-define-syntax)
        (g$12670$tVUFT macro . trace-define)
        (g$12669$tVUFT macro . trace-lambda)
        (g$12668$tVUFT macro . unsyntax-splicing)
        (g$12667$tVUFT macro . unsyntax)
        (g$12666$tVUFT macro . unquote-splicing)
        (g$12665$tVUFT macro . unquote)
        (g$12664$tVUFT macro . _)
        (g$12663$tVUFT macro . else)
        (g$12662$tVUFT macro . =>)
        (g$12661$tVUFT macro . ...)
        (g$12660$tVUFT macro . assert)
        (g$12659$tVUFT macro . endianness)
        (g$12658$tVUFT macro . delay)
        (g$12657$tVUFT macro . time)
        (g$12656$tVUFT macro . or)
        (g$12655$tVUFT macro . and)
        (g$12654$tVUFT macro . do)
        (g$12653$tVUFT macro . cond)
        (g$12652$tVUFT macro . let*)
        (g$12651$tVUFT macro . let)
        (g$12650$tVUFT macro . identifier-syntax)
        (g$12649$tVUFT macro . with-syntax)
        (g$12648$tVUFT macro . quasisyntax)
        (g$12647$tVUFT macro . quasiquote)
        (g$12646$tVUFT macro . syntax-rules)
        (g$12645$tVUFT macro . include-into)
        (g$12644$tVUFT macro . include)
        (g$12643$tVUFT macro . define-struct)
        (g$12642$tVUFT macro . let-values)
        (g$12641$tVUFT macro . let*-values)
        (g$12640$tVUFT core-macro . record-constructor-descriptor)
        (g$12639$tVUFT core-macro . record-type-descriptor)
        (g$12638$tVUFT core-macro . fluid-let-syntax)
        (g$12637$tVUFT macro . case)
        (g$12636$tVUFT macro . parameterize)
        (g$12635$tVUFT macro . unless)
        (g$12634$tVUFT macro . when)
        (g$12633$tVUFT core-macro . if)
        (g$12632$tVUFT core-macro . letrec*)
        (g$12631$tVUFT core-macro . letrec)
        (g$12630$tVUFT core-macro . type-descriptor)
        (g$12629$tVUFT core-macro . case-lambda)
        (g$12628$tVUFT core-macro . lambda)
        (g$12627$tVUFT core-macro . syntax)
        (g$12626$tVUFT core-macro . syntax-case)
        (g$12625$tVUFT core-macro . quote)
        (g$12624$tVUFT core-macro . foreign-call)
        (g$12623$tVUFT letrec-syntax)
        (g$12622$tVUFT let-syntax)
        (g$12621$tVUFT set!)
        (g$12620$tVUFT export)
        (g$12619$tVUFT import)
        (g$12618$tVUFT library)
        (g$12617$tVUFT begin)
        (g$12616$tVUFT module)
        (g$12615$tVUFT define-syntax)
        (g$12614$tVUFT define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$8091$tVUFT
      'g$13118$tVUFT
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$13057$tVUFT)
        (eval-core . g$13056$tVUFT)
        (set-symbol-value! . g$13055$tVUFT)
        (symbol-value . g$13054$tVUFT)
        (gensym . g$13051$tVUFT)
        (void . g$13050$tVUFT))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$12201$tVUFT
     g$trace-printer$12258$tVUFT
     (g$make-parameter$7583$tVUFT write))
   (g$command-line$12202$tVUFT
     g$command-line$12259$tVUFT
     (g$make-parameter$7583$tVUFT (get-command-line)))
   (g$local-library-path$12203$tVUFT
     g$local-library-path$12260$tVUFT
     (case-lambda
       ((g$filename$12215$tVUFT)
        (cons
          (g$get-directory-name$5764$tVUFT g$filename$12215$tVUFT)
          (g$library-path$8075$tVUFT)))))
   (g$load/args$12204$tVUFT
     g$load/args$12261$tVUFT
     (case-lambda
       ((g$filename$12216$tVUFT . g$args$12217$tVUFT)
        (begin
          (apply
            g$load-r6rs-top-level$12212$tVUFT
            g$filename$12216$tVUFT
            'load
            g$args$12217$tVUFT)
          (void)))))
   (g$load$12205$tVUFT
     g$load$12262$tVUFT
     (case-lambda
       ((g$filename$12218$tVUFT)
        (begin
          (apply
            g$load-r6rs-top-level$12212$tVUFT
            g$filename$12218$tVUFT
            'load
            (cdr (g$command-line$12202$tVUFT)))
          (void)))))
   (g$ironscheme-build$12206$tVUFT
     g$ironscheme-build$12263$tVUFT
     (case-lambda
       (() (g$ironscheme-build$12206$tVUFT '#f))
       ((g$cps?$12219$tVUFT)
        (begin
          (g$call-with-output-file$6985$tVUFT
            '"build-options.ss"
            (case-lambda
              ((g$p$12220$tVUFT)
               (begin
                 (write
                   (list 'define-option 'cps-mode g$cps?$12219$tVUFT)
                   g$p$12220$tVUFT)
                 (write
                   (list
                     'define-option
                     'if-wants-letrec*
                     (not g$cps?$12219$tVUFT))
                   g$p$12220$tVUFT)
                 (g$newline$6986$tVUFT g$p$12220$tVUFT)))))
          (g$load$12205$tVUFT '"ironscheme-buildscript.ss")))))
   (g$foreground-color$12207$tVUFT
     g$foreground-color$12264$tVUFT
     (case-lambda
       (() (clr-call-internal 'console 'get_foregroundcolor '()))
       ((g$color$12221$tVUFT)
        (clr-call-internal
          'console
          'set_foregroundcolor
          '()
          g$color$12221$tVUFT))))
   (g$eval-top-level$12208$tVUFT
     g$eval-top-level$12265$tVUFT
     (case-lambda
       ((g$x$12222$tVUFT)
        (call/cc
          (case-lambda
            ((g$k$12223$tVUFT)
             (with-exception-handler
               (case-lambda
                 ((g$e$12224$tVUFT)
                  (begin
                    ((case-lambda
                       ((g$foreground-color$12229$tVUFT
                          g$current-output-port$12230$tVUFT
                          g$foreground-color$12231$tVUFT
                          g$current-output-port$12232$tVUFT)
                        ((case-lambda
                           ((g$swap$12233$tVUFT)
                            (dynamic-wind
                              g$swap$12233$tVUFT
                              (case-lambda
                                (()
                                 (begin
                                   (display
                                     '"Unhandled exception during evaluation:
")
                                   (display g$e$12224$tVUFT)
                                   (g$newline$6986$tVUFT))))
                              g$swap$12233$tVUFT)))
                         (case-lambda
                           (()
                            (begin
                              ((case-lambda
                                 ((g$t$12234$tVUFT)
                                  (begin
                                    (g$foreground-color$12229$tVUFT
                                      g$foreground-color$12231$tVUFT)
                                    (set! g$foreground-color$12231$tVUFT
                                      g$t$12234$tVUFT))))
                               (g$foreground-color$12229$tVUFT))
                              ((case-lambda
                                 ((g$t$12235$tVUFT)
                                  (begin
                                    (g$current-output-port$12230$tVUFT
                                      g$current-output-port$12232$tVUFT)
                                    (set! g$current-output-port$12232$tVUFT
                                      g$t$12235$tVUFT))))
                               (g$current-output-port$12230$tVUFT))))))))
                     g$foreground-color$12207$tVUFT
                     current-output-port
                     'red
                     (current-error-port))
                    (g$k$12223$tVUFT))))
               (case-lambda
                 (()
                  (g$eval$12174$tVUFT
                    g$x$12222$tVUFT
                    (g$interaction-environment$12199$tVUFT)))))))))))
   (g$compile-system-libraries$12209$tVUFT
     g$compile-system-libraries$12266$tVUFT
     (case-lambda
       (()
        (g$eval-top-level$12208$tVUFT
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$12210$tVUFT
     g$compile$12267$tVUFT
     (case-lambda
       ((g$filename$12236$tVUFT)
        (g$load-r6rs-top-level$12212$tVUFT g$filename$12236$tVUFT 'compile))))
   (g$compile->closure$12211$tVUFT
     g$compile->closure$12268$tVUFT
     (case-lambda
       ((g$filename$12237$tVUFT)
        (g$load-r6rs-top-level$12212$tVUFT g$filename$12237$tVUFT 'closure))))
   (g$load-r6rs-top-level$12212$tVUFT
     g$load-r6rs-top-level$12269$tVUFT
     (case-lambda
       ((g$filename$12238$tVUFT g$how$12239$tVUFT . g$args$12240$tVUFT)
        ((case-lambda
           ((g$library-path$12243$tVUFT g$library-path$12244$tVUFT)
            ((case-lambda
               ((g$swap$12245$tVUFT)
                (dynamic-wind
                  g$swap$12245$tVUFT
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$12246$tVUFT)
                         ((case-lambda
                            ((g$t$12247$tVUFT)
                             (if (g$memv$5150$tVUFT g$t$12247$tVUFT '(closure))
                               (g$pre-compile-r6rs-top-level$12197$tVUFT
                                 g$x*$12246$tVUFT)
                               (if (g$memv$5150$tVUFT g$t$12247$tVUFT '(load))
                                 ((case-lambda
                                    ((g$command-line$12250$tVUFT
                                       g$command-line$12251$tVUFT)
                                     ((case-lambda
                                        ((g$swap$12252$tVUFT)
                                         (dynamic-wind
                                           g$swap$12252$tVUFT
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$12196$tVUFT
                                                 g$x*$12246$tVUFT))))
                                           g$swap$12252$tVUFT)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$12253$tVUFT)
                                             (begin
                                               (g$command-line$12250$tVUFT
                                                 g$command-line$12251$tVUFT)
                                               (set! g$command-line$12251$tVUFT
                                                 g$t$12253$tVUFT))))
                                          (g$command-line$12250$tVUFT)))))))
                                  g$command-line$12202$tVUFT
                                  (cons
                                    g$filename$12238$tVUFT
                                    (g$map$5157$tVUFT
                                      (case-lambda
                                        ((g$x$12254$tVUFT)
                                         (g$format$7156$tVUFT
                                           '"~a"
                                           g$x$12254$tVUFT)))
                                      g$args$12240$tVUFT)))
                                 (if (g$memv$5150$tVUFT
                                       g$t$12247$tVUFT
                                       '(compile))
                                   (begin
                                     (g$compile-r6rs-top-level$12196$tVUFT
                                       g$x*$12246$tVUFT)
                                     (g$serialize-all$8079$tVUFT
                                       serialize-library
                                       g$compile-core-expr$7832$tVUFT))
                                   (if '#f '#f (void)))))))
                          g$how$12239$tVUFT)))
                      (g$with-input-from-file$6982$tVUFT
                        g$filename$12238$tVUFT
                        (case-lambda
                          (()
                           ((letrec ((g$f$12255$tVUFT
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$12256$tVUFT)
                                              (if (eof-object? g$x$12256$tVUFT)
                                                '()
                                                (cons
                                                  g$x$12256$tVUFT
                                                  (g$f$12255$tVUFT)))))
                                           (read-annotated))))))
                              g$f$12255$tVUFT))))))))
                  g$swap$12245$tVUFT)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$12257$tVUFT)
                    (begin
                      (g$library-path$12243$tVUFT g$library-path$12244$tVUFT)
                      (set! g$library-path$12244$tVUFT g$t$12257$tVUFT))))
                 (g$library-path$12243$tVUFT)))))))
         g$library-path$8075$tVUFT
         (g$local-library-path$12203$tVUFT g$filename$12238$tVUFT)))))
   (g$fo$12213$tVUFT
     g$fo$12270$tVUFT
     (g$make-enumeration$7118$tVUFT '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$8080$tVUFT
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$12214$tVUFT)
         (if (g$serious-condition?$6225$tVUFT g$ex$12214$tVUFT)
           (raise g$ex$12214$tVUFT)
           (begin (display g$ex$12214$tVUFT) (g$newline$6986$tVUFT))))))
    (set-symbol-value! 'load g$load$12205$tVUFT)
    (set-symbol-value! 'compile g$compile$12210$tVUFT)
    (set-symbol-value! 'compile->closure g$compile->closure$12211$tVUFT)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$12208$tVUFT)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$12165$tVUFT)
    (set-symbol-value! 'expanded2core g$expanded->core$7831$tVUFT)
    (set-symbol-value! 'trace-printer g$trace-printer$12201$tVUFT)
    (set-symbol-value! 'convert->cps g$convert->cps$7478$tVUFT)
    (set-symbol-value! 'assertion-violation assertion-violation)
    (set-symbol-value! 'raise raise)
    (g$file-options-constructor$7584$tVUFT
      (g$enum-set-constructor$7121$tVUFT g$fo$12213$tVUFT))
    (g$library-path$8075$tVUFT (get-library-paths))))

