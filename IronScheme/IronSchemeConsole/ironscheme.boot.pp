;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (psyntax config) () (void))

(library-letrec* (ironscheme lists)
  ((g$list-tail$11558$Uaprr
     g$list-tail$11702$Uaprr
     (case-lambda
       ((g$lst$11586$Uaprr g$index$11587$Uaprr)
        (if ((case-lambda
               ((g$t$11588$Uaprr)
                (if g$t$11588$Uaprr
                  g$t$11588$Uaprr
                  (begin
                    '#f
                    (g$negative?$12503$Uaprr g$index$11587$Uaprr)))))
             (null? g$lst$11586$Uaprr))
          (assertion-violation
            'list-tail
            '"index out of range"
            g$lst$11586$Uaprr
            g$index$11587$Uaprr)
          (if (g$zero?$12504$Uaprr g$index$11587$Uaprr)
            g$lst$11586$Uaprr
            (g$list-tail$11558$Uaprr
              (cdr g$lst$11586$Uaprr)
              (- g$index$11587$Uaprr '1)))))))
   (g$list-ref$11559$Uaprr
     g$list-ref$11703$Uaprr
     (case-lambda
       ((g$lst$11589$Uaprr g$index$11590$Uaprr)
        (car (g$list-tail$11558$Uaprr
               g$lst$11589$Uaprr
               g$index$11590$Uaprr)))))
   (g$last-pair$11560$Uaprr
     g$last-pair$11704$Uaprr
     (case-lambda
       ((g$lst$11591$Uaprr)
        (if (null? g$lst$11591$Uaprr)
          g$lst$11591$Uaprr
          (if (null? (cdr g$lst$11591$Uaprr))
            g$lst$11591$Uaprr
            (g$last-pair$11560$Uaprr (cdr g$lst$11591$Uaprr)))))))
   (g$make-list$11561$Uaprr
     g$make-list$11705$Uaprr
     (case-lambda
       ((g$n$11592$Uaprr) (vector->list (make-vector g$n$11592$Uaprr)))
       ((g$n$11593$Uaprr g$fill$11594$Uaprr)
        (vector->list
          (make-vector g$n$11593$Uaprr g$fill$11594$Uaprr)))))
   (g$find$11562$Uaprr
     g$find$11706$Uaprr
     (case-lambda
       ((g$proc$11595$Uaprr g$l$11596$Uaprr)
        (if (null? g$l$11596$Uaprr)
          '#f
          ((case-lambda
             ((g$e$11597$Uaprr g$r$11598$Uaprr g$proc$11599$Uaprr)
              (if (g$proc$11599$Uaprr g$e$11597$Uaprr)
                g$e$11597$Uaprr
                (g$find$11562$Uaprr
                  g$proc$11599$Uaprr
                  g$r$11598$Uaprr))))
           (car g$l$11596$Uaprr)
           (cdr g$l$11596$Uaprr)
           g$proc$11595$Uaprr)))))
   (g$partition$11563$Uaprr
     g$partition$11707$Uaprr
     (case-lambda
       ((g$proc$11600$Uaprr g$l$11601$Uaprr)
        ((letrec ((g$f$11602$Uaprr
                    (case-lambda
                      ((g$l$11603$Uaprr g$a$11604$Uaprr g$b$11605$Uaprr)
                       (if (null? g$l$11603$Uaprr)
                         (values
                           (reverse! g$a$11604$Uaprr)
                           (reverse! g$b$11605$Uaprr))
                         ((case-lambda
                            ((g$e$11606$Uaprr)
                             (if (g$proc$11600$Uaprr g$e$11606$Uaprr)
                               (g$f$11602$Uaprr
                                 (cdr g$l$11603$Uaprr)
                                 (cons g$e$11606$Uaprr g$a$11604$Uaprr)
                                 g$b$11605$Uaprr)
                               (g$f$11602$Uaprr
                                 (cdr g$l$11603$Uaprr)
                                 g$a$11604$Uaprr
                                 (cons
                                   g$e$11606$Uaprr
                                   g$b$11605$Uaprr)))))
                          (car g$l$11603$Uaprr)))))))
           g$f$11602$Uaprr)
         g$l$11601$Uaprr
         '()
         '()))))
   (g$remp$11564$Uaprr
     g$remp$11708$Uaprr
     (case-lambda
       ((g$proc$11607$Uaprr g$l$11608$Uaprr)
        ((letrec ((g$f$11609$Uaprr
                    (case-lambda
                      ((g$l$11610$Uaprr g$a$11611$Uaprr)
                       (if (null? g$l$11610$Uaprr)
                         (reverse! g$a$11611$Uaprr)
                         ((case-lambda
                            ((g$e$11612$Uaprr)
                             (if (g$proc$11607$Uaprr g$e$11612$Uaprr)
                               (g$f$11609$Uaprr
                                 (cdr g$l$11610$Uaprr)
                                 g$a$11611$Uaprr)
                               (g$f$11609$Uaprr
                                 (cdr g$l$11610$Uaprr)
                                 (cons
                                   g$e$11612$Uaprr
                                   g$a$11611$Uaprr)))))
                          (car g$l$11610$Uaprr)))))))
           g$f$11609$Uaprr)
         g$l$11608$Uaprr
         '()))))
   (g$filter$11565$Uaprr
     g$filter$11709$Uaprr
     (case-lambda
       ((g$proc$11613$Uaprr g$l$11614$Uaprr)
        ((letrec ((g$f$11615$Uaprr
                    (case-lambda
                      ((g$l$11616$Uaprr g$a$11617$Uaprr)
                       (if (null? g$l$11616$Uaprr)
                         (reverse! g$a$11617$Uaprr)
                         ((case-lambda
                            ((g$e$11618$Uaprr)
                             (if (g$proc$11613$Uaprr g$e$11618$Uaprr)
                               (g$f$11615$Uaprr
                                 (cdr g$l$11616$Uaprr)
                                 (cons g$e$11618$Uaprr g$a$11617$Uaprr))
                               (g$f$11615$Uaprr
                                 (cdr g$l$11616$Uaprr)
                                 g$a$11617$Uaprr))))
                          (car g$l$11616$Uaprr)))))))
           g$f$11615$Uaprr)
         g$l$11614$Uaprr
         '()))))
   (g$assq$11566$Uaprr
     g$assq$11710$Uaprr
     (case-lambda
       ((g$obj$11619$Uaprr g$lst$11620$Uaprr)
        (if (null? g$lst$11620$Uaprr)
          '#f
          ((case-lambda
             ((g$obj$11621$Uaprr g$t$11622$Uaprr g$r$11623$Uaprr)
              (if (eq? g$obj$11621$Uaprr (car g$t$11622$Uaprr))
                g$t$11622$Uaprr
                (g$assq$11566$Uaprr
                  g$obj$11621$Uaprr
                  g$r$11623$Uaprr))))
           g$obj$11619$Uaprr
           (car g$lst$11620$Uaprr)
           (cdr g$lst$11620$Uaprr))))))
   (g$assv$11567$Uaprr
     g$assv$11711$Uaprr
     (case-lambda
       ((g$obj$11624$Uaprr g$lst$11625$Uaprr)
        (if (null? g$lst$11625$Uaprr)
          '#f
          ((case-lambda
             ((g$obj$11626$Uaprr g$t$11627$Uaprr g$r$11628$Uaprr)
              (if (eqv? g$obj$11626$Uaprr (car g$t$11627$Uaprr))
                g$t$11627$Uaprr
                (g$assv$11567$Uaprr
                  g$obj$11626$Uaprr
                  g$r$11628$Uaprr))))
           g$obj$11624$Uaprr
           (car g$lst$11625$Uaprr)
           (cdr g$lst$11625$Uaprr))))))
   (g$assoc$11568$Uaprr
     g$assoc$11712$Uaprr
     (case-lambda
       ((g$obj$11629$Uaprr g$lst$11630$Uaprr)
        (if (null? g$lst$11630$Uaprr)
          '#f
          ((case-lambda
             ((g$obj$11631$Uaprr g$t$11632$Uaprr g$r$11633$Uaprr)
              (if (equal? g$obj$11631$Uaprr (car g$t$11632$Uaprr))
                g$t$11632$Uaprr
                (g$assoc$11568$Uaprr
                  g$obj$11631$Uaprr
                  g$r$11633$Uaprr))))
           g$obj$11629$Uaprr
           (car g$lst$11630$Uaprr)
           (cdr g$lst$11630$Uaprr))))))
   (g$assp$11569$Uaprr
     g$assp$11713$Uaprr
     (case-lambda
       ((g$p?$11634$Uaprr g$lst$11635$Uaprr)
        (if (null? g$lst$11635$Uaprr)
          '#f
          ((case-lambda
             ((g$p?$11636$Uaprr g$t$11637$Uaprr g$r$11638$Uaprr)
              (if (g$p?$11636$Uaprr (car g$t$11637$Uaprr))
                g$t$11637$Uaprr
                (g$assp$11569$Uaprr g$p?$11636$Uaprr g$r$11638$Uaprr))))
           g$p?$11634$Uaprr
           (car g$lst$11635$Uaprr)
           (cdr g$lst$11635$Uaprr))))))
   (g$memq$11570$Uaprr
     g$memq$11714$Uaprr
     (case-lambda
       ((g$obj$11639$Uaprr g$lst$11640$Uaprr)
        (if (null? g$lst$11640$Uaprr)
          '#f
          (if (eq? g$obj$11639$Uaprr (car g$lst$11640$Uaprr))
            g$lst$11640$Uaprr
            (g$memq$11570$Uaprr
              g$obj$11639$Uaprr
              (cdr g$lst$11640$Uaprr)))))))
   (g$memv$11571$Uaprr
     g$memv$11715$Uaprr
     (case-lambda
       ((g$obj$11641$Uaprr g$lst$11642$Uaprr)
        (if (null? g$lst$11642$Uaprr)
          '#f
          (if (eqv? g$obj$11641$Uaprr (car g$lst$11642$Uaprr))
            g$lst$11642$Uaprr
            (g$memv$11571$Uaprr
              g$obj$11641$Uaprr
              (cdr g$lst$11642$Uaprr)))))))
   (g$member$11572$Uaprr
     g$member$11716$Uaprr
     (case-lambda
       ((g$obj$11643$Uaprr g$lst$11644$Uaprr)
        (if (null? g$lst$11644$Uaprr)
          '#f
          (if (equal? g$obj$11643$Uaprr (car g$lst$11644$Uaprr))
            g$lst$11644$Uaprr
            (g$member$11572$Uaprr
              g$obj$11643$Uaprr
              (cdr g$lst$11644$Uaprr)))))))
   (g$memp$11573$Uaprr
     g$memp$11717$Uaprr
     (case-lambda
       ((g$p?$11645$Uaprr g$lst$11646$Uaprr)
        (if (null? g$lst$11646$Uaprr)
          '#f
          (if (g$p?$11645$Uaprr (car g$lst$11646$Uaprr))
            g$lst$11646$Uaprr
            (g$memp$11573$Uaprr
              g$p?$11645$Uaprr
              (cdr g$lst$11646$Uaprr)))))))
   (g$all-empty?$11574$Uaprr
     g$all-empty?$11718$Uaprr
     (case-lambda
       ((g$ls$11647$Uaprr)
        ((case-lambda
           ((g$t$11648$Uaprr)
            (if g$t$11648$Uaprr
              g$t$11648$Uaprr
              (begin
                '#f
                (if (null? (car g$ls$11647$Uaprr))
                  (begin
                    '#f
                    (g$all-empty?$11574$Uaprr (cdr g$ls$11647$Uaprr)))
                  '#f)))))
         (null? g$ls$11647$Uaprr)))))
   (g$split$11575$Uaprr
     g$split$11719$Uaprr
     (case-lambda
       ((g$ls$11649$Uaprr)
        (if (null? g$ls$11649$Uaprr)
          (values '() '())
          (call-with-values
            (case-lambda
              (() (g$split$11575$Uaprr (cdr g$ls$11649$Uaprr))))
            (case-lambda
              ((g$cars$11650$Uaprr g$cdrs$11651$Uaprr)
               ((case-lambda
                  ((g$a$11652$Uaprr)
                   (values
                     (cons (car g$a$11652$Uaprr) g$cars$11650$Uaprr)
                     (cons (cdr g$a$11652$Uaprr) g$cdrs$11651$Uaprr))))
                (car g$ls$11649$Uaprr)))))))))
   (g$for-all$11576$Uaprr
     g$for-all$11720$Uaprr
     (case-lambda
       ((g$f$11653$Uaprr g$arg1$11654$Uaprr . g$args$11655$Uaprr)
        ((case-lambda
           ((g$args$11656$Uaprr)
            (if (g$all-empty?$11574$Uaprr g$args$11656$Uaprr)
              '#t
              (call-with-values
                (case-lambda
                  (() (g$split$11575$Uaprr g$args$11656$Uaprr)))
                (case-lambda
                  ((g$cars$11657$Uaprr g$cdrs$11658$Uaprr)
                   (if (g$all-empty?$11574$Uaprr g$cdrs$11658$Uaprr)
                     (apply g$f$11653$Uaprr g$cars$11657$Uaprr)
                     (if (apply g$f$11653$Uaprr g$cars$11657$Uaprr)
                       (begin
                         '#f
                         (apply
                           g$for-all$11576$Uaprr
                           g$f$11653$Uaprr
                           g$cdrs$11658$Uaprr))
                       '#f))))))))
         (cons g$arg1$11654$Uaprr g$args$11655$Uaprr)))))
   (g$exists$11577$Uaprr
     g$exists$11721$Uaprr
     (case-lambda
       ((g$f$11659$Uaprr g$arg1$11660$Uaprr . g$args$11661$Uaprr)
        ((case-lambda
           ((g$args$11662$Uaprr)
            (if (g$all-empty?$11574$Uaprr g$args$11662$Uaprr)
              '#f
              (call-with-values
                (case-lambda
                  (() (g$split$11575$Uaprr g$args$11662$Uaprr)))
                (case-lambda
                  ((g$cars$11663$Uaprr g$cdrs$11664$Uaprr)
                   ((case-lambda
                      ((g$t$11665$Uaprr)
                       (if g$t$11665$Uaprr
                         g$t$11665$Uaprr
                         (begin
                           '#f
                           (apply
                             g$exists$11577$Uaprr
                             g$f$11659$Uaprr
                             g$cdrs$11664$Uaprr)))))
                    (apply g$f$11659$Uaprr g$cars$11663$Uaprr))))))))
         (cons g$arg1$11660$Uaprr g$args$11661$Uaprr)))))
   (g$map$11578$Uaprr
     g$map$11722$Uaprr
     (case-lambda
       ((g$proc$11666$Uaprr g$list1$11667$Uaprr . g$lists$11668$Uaprr)
        ((letrec ((g$f$11669$Uaprr
                    (case-lambda
                      ((g$lists$11670$Uaprr g$a$11671$Uaprr)
                       (if (g$all-empty?$11574$Uaprr
                             g$lists$11670$Uaprr)
                         (reverse! g$a$11671$Uaprr)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$split$11575$Uaprr
                                g$lists$11670$Uaprr)))
                           (case-lambda
                             ((g$cars$11672$Uaprr g$cdrs$11673$Uaprr)
                              (g$f$11669$Uaprr
                                g$cdrs$11673$Uaprr
                                (cons
                                  (apply
                                    g$proc$11666$Uaprr
                                    g$cars$11672$Uaprr)
                                  g$a$11671$Uaprr))))))))))
           g$f$11669$Uaprr)
         (cons g$list1$11667$Uaprr g$lists$11668$Uaprr)
         '()))))
   (g$for-each$11579$Uaprr
     g$for-each$11723$Uaprr
     (case-lambda
       ((g$f$11674$Uaprr g$arg1$11675$Uaprr . g$args$11676$Uaprr)
        ((case-lambda
           ((g$args$11677$Uaprr)
            (if (not (g$all-empty?$11574$Uaprr g$args$11677$Uaprr))
              (call-with-values
                (case-lambda
                  (() (g$split$11575$Uaprr g$args$11677$Uaprr)))
                (case-lambda
                  ((g$cars$11678$Uaprr g$cdrs$11679$Uaprr)
                   (begin
                     (apply g$f$11674$Uaprr g$cars$11678$Uaprr)
                     (apply
                       g$for-each$11579$Uaprr
                       g$f$11674$Uaprr
                       g$cdrs$11679$Uaprr)))))
              (void))))
         (cons g$arg1$11675$Uaprr g$args$11676$Uaprr)))))
   (g$cons*$11580$Uaprr
     g$cons*$11724$Uaprr
     (case-lambda
       ((g$a$11680$Uaprr . g$rest$11681$Uaprr)
        ((letrec ((g$f$11682$Uaprr
                    (case-lambda
                      ((g$a$11683$Uaprr g$rest$11684$Uaprr)
                       (if (null? g$rest$11684$Uaprr)
                         g$a$11683$Uaprr
                         (cons
                           g$a$11683$Uaprr
                           (g$f$11682$Uaprr
                             (car g$rest$11684$Uaprr)
                             (cdr g$rest$11684$Uaprr))))))))
           g$f$11682$Uaprr)
         g$a$11680$Uaprr
         g$rest$11681$Uaprr))))
   (g$fold-left$11581$Uaprr
     g$fold-left$11725$Uaprr
     (case-lambda
       ((g$combine$11685$Uaprr
          g$nil$11686$Uaprr
          g$list1$11687$Uaprr
          .
          g$lists$11688$Uaprr)
        (if (null? g$list1$11687$Uaprr)
          g$nil$11686$Uaprr
          (apply
            g$fold-left$11581$Uaprr
            (g$cons*$11580$Uaprr
              g$combine$11685$Uaprr
              (apply
                g$combine$11685$Uaprr
                (g$cons*$11580$Uaprr
                  g$nil$11686$Uaprr
                  (car g$list1$11687$Uaprr)
                  (g$map$11578$Uaprr car g$lists$11688$Uaprr)))
              (cdr g$list1$11687$Uaprr)
              (g$map$11578$Uaprr cdr g$lists$11688$Uaprr)))))))
   (g$fold-right$11582$Uaprr
     g$fold-right$11726$Uaprr
     (case-lambda
       ((g$combine$11689$Uaprr
          g$nil$11690$Uaprr
          g$list1$11691$Uaprr
          .
          g$lists$11692$Uaprr)
        (if (null? g$list1$11691$Uaprr)
          g$nil$11690$Uaprr
          (apply
            g$combine$11689$Uaprr
            (append
              (list (car g$list1$11691$Uaprr))
              (g$map$11578$Uaprr car g$lists$11692$Uaprr)
              (list
                (apply
                  g$fold-right$11582$Uaprr
                  (g$cons*$11580$Uaprr
                    g$combine$11689$Uaprr
                    g$nil$11690$Uaprr
                    (cdr g$list1$11691$Uaprr)
                    (g$map$11578$Uaprr cdr g$lists$11692$Uaprr))))))))))
   (g$remove$11583$Uaprr
     g$remove$11727$Uaprr
     (case-lambda
       ((g$obj$11693$Uaprr g$list$11694$Uaprr)
        (g$remp$11564$Uaprr
          (case-lambda
            ((g$x$11695$Uaprr)
             (equal? g$obj$11693$Uaprr g$x$11695$Uaprr)))
          g$list$11694$Uaprr))))
   (g$remv$11584$Uaprr
     g$remv$11728$Uaprr
     (case-lambda
       ((g$obj$11696$Uaprr g$list$11697$Uaprr)
        (g$remp$11564$Uaprr
          (case-lambda
            ((g$x$11698$Uaprr)
             (eqv? g$obj$11696$Uaprr g$x$11698$Uaprr)))
          g$list$11697$Uaprr))))
   (g$remq$11585$Uaprr
     g$remq$11729$Uaprr
     (case-lambda
       ((g$obj$11699$Uaprr g$list$11700$Uaprr)
        (g$remp$11564$Uaprr
          (case-lambda
            ((g$x$11701$Uaprr) (eq? g$obj$11699$Uaprr g$x$11701$Uaprr)))
          g$list$11700$Uaprr)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$mod$12125$Uaprr
     g$mod$12456$Uaprr
     (case-lambda
       ((g$x1$12278$Uaprr g$x2$12279$Uaprr)
        (- g$x1$12278$Uaprr
           (* (div g$x1$12278$Uaprr g$x2$12279$Uaprr)
              g$x2$12279$Uaprr)))))
   (g$mod0$12126$Uaprr
     g$mod0$12457$Uaprr
     (case-lambda
       ((g$x1$12280$Uaprr g$x2$12281$Uaprr)
        (- g$x1$12280$Uaprr
           (* (div0 g$x1$12280$Uaprr g$x2$12281$Uaprr)
              g$x2$12281$Uaprr)))))
   (g$div-and-mod$12127$Uaprr
     g$div-and-mod$12458$Uaprr
     (case-lambda
       ((g$x1$12282$Uaprr g$x2$12283$Uaprr)
        ((case-lambda
           ((g$d$12284$Uaprr)
            (values
              g$d$12284$Uaprr
              (- g$x1$12282$Uaprr
                 (* g$d$12284$Uaprr g$x2$12283$Uaprr)))))
         (div g$x1$12282$Uaprr g$x2$12283$Uaprr)))))
   (g$div0-and-mod0$12128$Uaprr
     g$div0-and-mod0$12459$Uaprr
     (case-lambda
       ((g$x1$12285$Uaprr g$x2$12286$Uaprr)
        ((case-lambda
           ((g$d$12287$Uaprr)
            (values
              g$d$12287$Uaprr
              (- g$x1$12285$Uaprr
                 (* g$d$12287$Uaprr g$x2$12286$Uaprr)))))
         (div0 g$x1$12285$Uaprr g$x2$12286$Uaprr)))))
   (g$list->vector$12129$Uaprr
     g$list->vector$12460$Uaprr
     (case-lambda
       ((g$lst$12288$Uaprr) (apply vector g$lst$12288$Uaprr))))
   (g$list->string$12130$Uaprr
     g$list->string$12461$Uaprr
     (case-lambda
       ((g$lst$12289$Uaprr) (apply string g$lst$12289$Uaprr))))
   (g$char?$12131$Uaprr
     g$char?$12462$Uaprr
     (case-lambda
       ((g$obj$12290$Uaprr)
        (clr-is-internal 'system.char g$obj$12290$Uaprr))))
   (g$vector?$12132$Uaprr
     g$vector?$12463$Uaprr
     (case-lambda
       ((g$obj$12291$Uaprr)
        (clr-is-internal 'system.object[] g$obj$12291$Uaprr))))
   (g$bytevector?$12133$Uaprr
     g$bytevector?$12464$Uaprr
     (case-lambda
       ((g$obj$12292$Uaprr)
        (clr-is-internal 'system.byte[] g$obj$12292$Uaprr))))
   (g$symbol?$12134$Uaprr
     g$symbol?$12465$Uaprr
     (case-lambda
       ((g$obj$12293$Uaprr)
        (clr-is-internal
          'microsoft.scripting.symbolid
          g$obj$12293$Uaprr))))
   (g$boolean?$12135$Uaprr
     g$boolean?$12466$Uaprr
     (case-lambda
       ((g$obj$12294$Uaprr)
        (clr-is-internal 'system.boolean g$obj$12294$Uaprr))))
   (g$procedure?$12136$Uaprr
     g$procedure?$12467$Uaprr
     (case-lambda
       ((g$obj$12295$Uaprr)
        (clr-is-internal
          'ironscheme.runtime.icallable
          g$obj$12295$Uaprr))))
   (g$fixnum?$12137$Uaprr
     g$fixnum?$12468$Uaprr
     (case-lambda
       ((g$obj$12296$Uaprr)
        (clr-is-internal 'system.int32 g$obj$12296$Uaprr))))
   (g$flonum?$12138$Uaprr
     g$flonum?$12469$Uaprr
     (case-lambda
       ((g$obj$12297$Uaprr)
        (clr-is-internal 'system.double g$obj$12297$Uaprr))))
   (g$fixnum-width$12139$Uaprr
     g$fixnum-width$12470$Uaprr
     (case-lambda (() '32)))
   (g$vector-fill!$12140$Uaprr
     g$vector-fill!$12471$Uaprr
     (case-lambda
       ((g$vec$12298$Uaprr g$val$12299$Uaprr)
        ((case-lambda
           ((g$len$12300$Uaprr)
            (letrec ((g$loop$12301$Uaprr
                       (case-lambda
                         ((g$i$12302$Uaprr)
                          (if (g$fx=?$13961$Uaprr
                                g$i$12302$Uaprr
                                g$len$12300$Uaprr)
                            (if '#f '#f (void))
                            (begin
                              (vector-set!
                                g$vec$12298$Uaprr
                                g$i$12302$Uaprr
                                g$val$12299$Uaprr)
                              (g$loop$12301$Uaprr
                                (fx+ g$i$12302$Uaprr '1))))))))
              (g$loop$12301$Uaprr '0))))
         (vector-length g$vec$12298$Uaprr)))))
   (g$xcons$12141$Uaprr
     g$xcons$12472$Uaprr
     (case-lambda
       ((g$x$12303$Uaprr g$y$12304$Uaprr)
        (cons g$y$12304$Uaprr g$x$12303$Uaprr))))
   (g$reverse$12142$Uaprr
     g$reverse$12473$Uaprr
     (case-lambda
       ((g$lst$12305$Uaprr)
        (g$fold-left$11725$Uaprr
          g$xcons$12141$Uaprr
          '()
          g$lst$12305$Uaprr))))
   (g$caar$12143$Uaprr
     g$caar$12474$Uaprr
     (case-lambda ((g$x$12306$Uaprr) (car (car g$x$12306$Uaprr)))))
   (g$cadr$12144$Uaprr
     g$cadr$12475$Uaprr
     (case-lambda ((g$x$12307$Uaprr) (car (cdr g$x$12307$Uaprr)))))
   (g$cdar$12145$Uaprr
     g$cdar$12476$Uaprr
     (case-lambda ((g$x$12308$Uaprr) (cdr (car g$x$12308$Uaprr)))))
   (g$cddr$12146$Uaprr
     g$cddr$12477$Uaprr
     (case-lambda ((g$x$12309$Uaprr) (cdr (cdr g$x$12309$Uaprr)))))
   (g$caaar$12147$Uaprr
     g$caaar$12478$Uaprr
     (case-lambda
       ((g$x$12310$Uaprr) (g$caar$12143$Uaprr (car g$x$12310$Uaprr)))))
   (g$caadr$12148$Uaprr
     g$caadr$12479$Uaprr
     (case-lambda
       ((g$x$12311$Uaprr) (g$caar$12143$Uaprr (cdr g$x$12311$Uaprr)))))
   (g$cadar$12149$Uaprr
     g$cadar$12480$Uaprr
     (case-lambda
       ((g$x$12312$Uaprr) (g$cadr$12144$Uaprr (car g$x$12312$Uaprr)))))
   (g$caddr$12150$Uaprr
     g$caddr$12481$Uaprr
     (case-lambda
       ((g$x$12313$Uaprr) (g$cadr$12144$Uaprr (cdr g$x$12313$Uaprr)))))
   (g$cdaar$12151$Uaprr
     g$cdaar$12482$Uaprr
     (case-lambda
       ((g$x$12314$Uaprr) (g$cdar$12145$Uaprr (car g$x$12314$Uaprr)))))
   (g$cdadr$12152$Uaprr
     g$cdadr$12483$Uaprr
     (case-lambda
       ((g$x$12315$Uaprr) (g$cdar$12145$Uaprr (cdr g$x$12315$Uaprr)))))
   (g$cddar$12153$Uaprr
     g$cddar$12484$Uaprr
     (case-lambda
       ((g$x$12316$Uaprr) (g$cddr$12146$Uaprr (car g$x$12316$Uaprr)))))
   (g$cdddr$12154$Uaprr
     g$cdddr$12485$Uaprr
     (case-lambda
       ((g$x$12317$Uaprr) (g$cddr$12146$Uaprr (cdr g$x$12317$Uaprr)))))
   (g$caaaar$12155$Uaprr
     g$caaaar$12486$Uaprr
     (case-lambda
       ((g$x$12318$Uaprr) (g$caaar$12147$Uaprr (car g$x$12318$Uaprr)))))
   (g$caaadr$12156$Uaprr
     g$caaadr$12487$Uaprr
     (case-lambda
       ((g$x$12319$Uaprr) (g$caaar$12147$Uaprr (cdr g$x$12319$Uaprr)))))
   (g$caadar$12157$Uaprr
     g$caadar$12488$Uaprr
     (case-lambda
       ((g$x$12320$Uaprr) (g$caadr$12148$Uaprr (car g$x$12320$Uaprr)))))
   (g$caaddr$12158$Uaprr
     g$caaddr$12489$Uaprr
     (case-lambda
       ((g$x$12321$Uaprr) (g$caadr$12148$Uaprr (cdr g$x$12321$Uaprr)))))
   (g$cadaar$12159$Uaprr
     g$cadaar$12490$Uaprr
     (case-lambda
       ((g$x$12322$Uaprr) (g$cadar$12149$Uaprr (car g$x$12322$Uaprr)))))
   (g$cadadr$12160$Uaprr
     g$cadadr$12491$Uaprr
     (case-lambda
       ((g$x$12323$Uaprr) (g$cadar$12149$Uaprr (cdr g$x$12323$Uaprr)))))
   (g$caddar$12161$Uaprr
     g$caddar$12492$Uaprr
     (case-lambda
       ((g$x$12324$Uaprr) (g$caddr$12150$Uaprr (car g$x$12324$Uaprr)))))
   (g$cadddr$12162$Uaprr
     g$cadddr$12493$Uaprr
     (case-lambda
       ((g$x$12325$Uaprr) (g$caddr$12150$Uaprr (cdr g$x$12325$Uaprr)))))
   (g$cdaaar$12163$Uaprr
     g$cdaaar$12494$Uaprr
     (case-lambda
       ((g$x$12326$Uaprr) (g$cdaar$12151$Uaprr (car g$x$12326$Uaprr)))))
   (g$cdaadr$12164$Uaprr
     g$cdaadr$12495$Uaprr
     (case-lambda
       ((g$x$12327$Uaprr) (g$cdaar$12151$Uaprr (cdr g$x$12327$Uaprr)))))
   (g$cdadar$12165$Uaprr
     g$cdadar$12496$Uaprr
     (case-lambda
       ((g$x$12328$Uaprr) (g$cdadr$12152$Uaprr (car g$x$12328$Uaprr)))))
   (g$cdaddr$12166$Uaprr
     g$cdaddr$12497$Uaprr
     (case-lambda
       ((g$x$12329$Uaprr) (g$cdadr$12152$Uaprr (cdr g$x$12329$Uaprr)))))
   (g$cddaar$12167$Uaprr
     g$cddaar$12498$Uaprr
     (case-lambda
       ((g$x$12330$Uaprr) (g$cddar$12153$Uaprr (car g$x$12330$Uaprr)))))
   (g$cddadr$12168$Uaprr
     g$cddadr$12499$Uaprr
     (case-lambda
       ((g$x$12331$Uaprr) (g$cddar$12153$Uaprr (cdr g$x$12331$Uaprr)))))
   (g$cdddar$12169$Uaprr
     g$cdddar$12500$Uaprr
     (case-lambda
       ((g$x$12332$Uaprr) (g$cdddr$12154$Uaprr (car g$x$12332$Uaprr)))))
   (g$cddddr$12170$Uaprr
     g$cddddr$12501$Uaprr
     (case-lambda
       ((g$x$12333$Uaprr) (g$cdddr$12154$Uaprr (cdr g$x$12333$Uaprr)))))
   (g$positive?$12171$Uaprr
     g$positive?$12502$Uaprr
     (case-lambda
       ((g$r$12334$Uaprr)
        (begin
          (if (not (real-valued? g$r$12334$Uaprr))
            (assertion-violation
              'positive?
              '"not a real"
              g$r$12334$Uaprr)
            (void))
          (< '0 g$r$12334$Uaprr)))))
   (g$negative?$12172$Uaprr
     g$negative?$12503$Uaprr
     (case-lambda
       ((g$r$12335$Uaprr)
        (begin
          (if (not (real-valued? g$r$12335$Uaprr))
            (assertion-violation
              'negative?
              '"not a real"
              g$r$12335$Uaprr)
            (void))
          (> '0 g$r$12335$Uaprr)))))
   (g$zero?$12173$Uaprr
     g$zero?$12504$Uaprr
     (case-lambda
       ((g$z$12336$Uaprr)
        (begin
          (if (not (number? g$z$12336$Uaprr))
            (assertion-violation 'zero? '"not a number" g$z$12336$Uaprr)
            (void))
          (= '0 g$z$12336$Uaprr)))))
   (g$even?$12174$Uaprr
     g$even?$12505$Uaprr
     (case-lambda
       ((g$n$12337$Uaprr)
        (begin
          (if (not (integer-valued? g$n$12337$Uaprr))
            (assertion-violation
              'even?
              '"not a integer"
              g$n$12337$Uaprr)
            (void))
          (= '0 (g$mod$12125$Uaprr g$n$12337$Uaprr '2))))))
   (g$odd?$12175$Uaprr
     g$odd?$12506$Uaprr
     (case-lambda
       ((g$n$12338$Uaprr)
        (begin
          (if (not (integer-valued? g$n$12338$Uaprr))
            (assertion-violation 'odd? '"not a integer" g$n$12338$Uaprr)
            (void))
          (= '1 (g$mod$12125$Uaprr g$n$12338$Uaprr '2))))))
   (g$max$12176$Uaprr
     g$max$12507$Uaprr
     (case-lambda
       ((g$a$12339$Uaprr . g$rest$12340$Uaprr)
        (begin
          (if (not (real-valued? g$a$12339$Uaprr))
            (assertion-violation 'max '"not a real" g$a$12339$Uaprr)
            (void))
          (g$fold-left$11725$Uaprr
            (case-lambda
              ((g$a$12341$Uaprr g$b$12342$Uaprr)
               ((case-lambda
                  ((g$r$12343$Uaprr)
                   (if ((case-lambda
                          ((g$t$12344$Uaprr)
                           (if g$t$12344$Uaprr
                             g$t$12344$Uaprr
                             (begin '#f (inexact? g$b$12342$Uaprr)))))
                        (inexact? g$a$12341$Uaprr))
                     (inexact g$r$12343$Uaprr)
                     g$r$12343$Uaprr)))
                (if (< g$a$12341$Uaprr g$b$12342$Uaprr)
                  g$b$12342$Uaprr
                  g$a$12341$Uaprr))))
            g$a$12339$Uaprr
            g$rest$12340$Uaprr)))))
   (g$min$12177$Uaprr
     g$min$12508$Uaprr
     (case-lambda
       ((g$a$12345$Uaprr . g$rest$12346$Uaprr)
        (begin
          (if (not (real-valued? g$a$12345$Uaprr))
            (assertion-violation 'min '"not a real" g$a$12345$Uaprr)
            (void))
          (g$fold-left$11725$Uaprr
            (case-lambda
              ((g$a$12347$Uaprr g$b$12348$Uaprr)
               ((case-lambda
                  ((g$r$12349$Uaprr)
                   (if ((case-lambda
                          ((g$t$12350$Uaprr)
                           (if g$t$12350$Uaprr
                             g$t$12350$Uaprr
                             (begin '#f (inexact? g$b$12348$Uaprr)))))
                        (inexact? g$a$12347$Uaprr))
                     (inexact g$r$12349$Uaprr)
                     g$r$12349$Uaprr)))
                (if (> g$a$12347$Uaprr g$b$12348$Uaprr)
                  g$b$12348$Uaprr
                  g$a$12347$Uaprr))))
            g$a$12345$Uaprr
            g$rest$12346$Uaprr)))))
   (g$gcd$12178$Uaprr
     g$gcd$12509$Uaprr
     (case-lambda
       (g$nums$12351$Uaprr
        ((case-lambda
           ((g$t$12352$Uaprr)
            (if (eqv? g$t$12352$Uaprr '0)
              '0
              (if (eqv? g$t$12352$Uaprr '1)
                ((case-lambda
                   ((g$n$12353$Uaprr)
                    (begin
                      (if (not (integer-valued? g$n$12353$Uaprr))
                        (assertion-violation
                          'gcd
                          '"not an integer"
                          g$n$12353$Uaprr)
                        (void))
                      (abs g$n$12353$Uaprr))))
                 (car g$nums$12351$Uaprr))
                (if (eqv? g$t$12352$Uaprr '2)
                  ((case-lambda
                     ((g$a$12354$Uaprr g$b$12355$Uaprr)
                      (begin
                        (if (not (integer-valued? g$a$12354$Uaprr))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$a$12354$Uaprr)
                          (void))
                        (if (not (integer-valued? g$b$12355$Uaprr))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$b$12355$Uaprr)
                          (void))
                        (if (g$zero?$12173$Uaprr g$b$12355$Uaprr)
                          (abs g$a$12354$Uaprr)
                          (abs (g$gcd$12178$Uaprr
                                 g$b$12355$Uaprr
                                 (g$mod$12125$Uaprr
                                   g$a$12354$Uaprr
                                   g$b$12355$Uaprr)))))))
                   (car g$nums$12351$Uaprr)
                   (g$cadr$12144$Uaprr g$nums$12351$Uaprr))
                  (g$fold-left$11725$Uaprr
                    g$gcd$12178$Uaprr
                    (abs (car g$nums$12351$Uaprr))
                    (cdr g$nums$12351$Uaprr)))))))
         (length g$nums$12351$Uaprr)))))
   (g$lcm$12179$Uaprr
     g$lcm$12510$Uaprr
     (case-lambda
       (g$nums$12356$Uaprr
        ((case-lambda
           ((g$t$12357$Uaprr)
            (if (eqv? g$t$12357$Uaprr '0)
              '1
              (if (eqv? g$t$12357$Uaprr '1)
                ((case-lambda
                   ((g$n$12358$Uaprr)
                    (begin
                      (if (not (integer-valued? g$n$12358$Uaprr))
                        (assertion-violation
                          'lcm
                          '"not an integer"
                          g$n$12358$Uaprr)
                        (void))
                      (abs g$n$12358$Uaprr))))
                 (car g$nums$12356$Uaprr))
                (if (eqv? g$t$12357$Uaprr '2)
                  ((case-lambda
                     ((g$a$12359$Uaprr g$b$12360$Uaprr)
                      (begin
                        (if (not (integer-valued? g$a$12359$Uaprr))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$a$12359$Uaprr)
                          (void))
                        (if (not (integer-valued? g$b$12360$Uaprr))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$b$12360$Uaprr)
                          (void))
                        (if ((case-lambda
                               ((g$t$12361$Uaprr)
                                (if g$t$12361$Uaprr
                                  g$t$12361$Uaprr
                                  (begin
                                    '#f
                                    (g$zero?$12173$Uaprr
                                      g$b$12360$Uaprr)))))
                             (g$zero?$12173$Uaprr g$a$12359$Uaprr))
                          '0
                          (abs (* (/ g$a$12359$Uaprr
                                     (g$gcd$12178$Uaprr
                                       g$a$12359$Uaprr
                                       g$b$12360$Uaprr))
                                  g$b$12360$Uaprr))))))
                   (car g$nums$12356$Uaprr)
                   (g$cadr$12144$Uaprr g$nums$12356$Uaprr))
                  (g$fold-left$11725$Uaprr
                    g$lcm$12179$Uaprr
                    (abs (car g$nums$12356$Uaprr))
                    (cdr g$nums$12356$Uaprr)))))))
         (length g$nums$12356$Uaprr)))))
   (g$string=?$12220$Uaprr
     g$string=?$12511$Uaprr
     (case-lambda
       ((g$a$12362$Uaprr g$b$12363$Uaprr . g$rest$12364$Uaprr)
        (begin
          (if (not (string? g$a$12362$Uaprr))
            (assertion-violation
              'string=?
              '"not a string"
              g$a$12362$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$12365$Uaprr)
               (begin
                 (if (not (string? g$x$12365$Uaprr))
                   (assertion-violation
                     'string=?
                     '"not a string"
                     g$x$12365$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$12366$Uaprr)
                     (begin
                       (set! g$a$12362$Uaprr g$x$12365$Uaprr)
                       g$r$12366$Uaprr)))
                  (g$fx=?$13961$Uaprr
                    (string-compare g$a$12362$Uaprr g$x$12365$Uaprr)
                    '0)))))
            (cons g$b$12363$Uaprr g$rest$12364$Uaprr))))))
   (g$string<?$12221$Uaprr
     g$string<?$12512$Uaprr
     (case-lambda
       ((g$a$12367$Uaprr g$b$12368$Uaprr . g$rest$12369$Uaprr)
        (begin
          (if (not (string? g$a$12367$Uaprr))
            (assertion-violation
              'string<?
              '"not a string"
              g$a$12367$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$12370$Uaprr)
               (begin
                 (if (not (string? g$x$12370$Uaprr))
                   (assertion-violation
                     'string<?
                     '"not a string"
                     g$x$12370$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$12371$Uaprr)
                     (begin
                       (set! g$a$12367$Uaprr g$x$12370$Uaprr)
                       g$r$12371$Uaprr)))
                  (g$fx<?$13962$Uaprr
                    (string-compare g$a$12367$Uaprr g$x$12370$Uaprr)
                    '0)))))
            (cons g$b$12368$Uaprr g$rest$12369$Uaprr))))))
   (g$string>?$12222$Uaprr
     g$string>?$12513$Uaprr
     (case-lambda
       ((g$a$12372$Uaprr g$b$12373$Uaprr . g$rest$12374$Uaprr)
        (begin
          (if (not (string? g$a$12372$Uaprr))
            (assertion-violation
              'string>?
              '"not a string"
              g$a$12372$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$12375$Uaprr)
               (begin
                 (if (not (string? g$x$12375$Uaprr))
                   (assertion-violation
                     'string>?
                     '"not a string"
                     g$x$12375$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$12376$Uaprr)
                     (begin
                       (set! g$a$12372$Uaprr g$x$12375$Uaprr)
                       g$r$12376$Uaprr)))
                  (g$fx>?$13964$Uaprr
                    (string-compare g$a$12372$Uaprr g$x$12375$Uaprr)
                    '0)))))
            (cons g$b$12373$Uaprr g$rest$12374$Uaprr))))))
   (g$string<=?$12223$Uaprr
     g$string<=?$12514$Uaprr
     (case-lambda
       ((g$a$12377$Uaprr g$b$12378$Uaprr . g$rest$12379$Uaprr)
        (begin
          (if (not (string? g$a$12377$Uaprr))
            (assertion-violation
              'string<=?
              '"not a string"
              g$a$12377$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$12380$Uaprr)
               (begin
                 (if (not (string? g$x$12380$Uaprr))
                   (assertion-violation
                     'string<=?
                     '"not a string"
                     g$x$12380$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$12381$Uaprr)
                     (begin
                       (set! g$a$12377$Uaprr g$x$12380$Uaprr)
                       g$r$12381$Uaprr)))
                  (g$fx<=?$13963$Uaprr
                    (string-compare g$a$12377$Uaprr g$x$12380$Uaprr)
                    '0)))))
            (cons g$b$12378$Uaprr g$rest$12379$Uaprr))))))
   (g$string>=?$12224$Uaprr
     g$string>=?$12515$Uaprr
     (case-lambda
       ((g$a$12382$Uaprr g$b$12383$Uaprr . g$rest$12384$Uaprr)
        (begin
          (if (not (string? g$a$12382$Uaprr))
            (assertion-violation
              'string>=?
              '"not a string"
              g$a$12382$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$12385$Uaprr)
               (begin
                 (if (not (string? g$x$12385$Uaprr))
                   (assertion-violation
                     'string>=?
                     '"not a string"
                     g$x$12385$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$12386$Uaprr)
                     (begin
                       (set! g$a$12382$Uaprr g$x$12385$Uaprr)
                       g$r$12386$Uaprr)))
                  (g$fx>=?$13965$Uaprr
                    (string-compare g$a$12382$Uaprr g$x$12385$Uaprr)
                    '0)))))
            (cons g$b$12383$Uaprr g$rest$12384$Uaprr))))))
   (g$symbol=?$12225$Uaprr
     g$symbol=?$12516$Uaprr
     (case-lambda
       ((g$a$12387$Uaprr g$b$12388$Uaprr . g$rest$12389$Uaprr)
        (begin
          (if (not (g$symbol?$12134$Uaprr g$a$12387$Uaprr))
            (assertion-violation
              'symbol=?
              '"not a symbol"
              g$a$12387$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$12390$Uaprr)
               (begin
                 (if (not (g$symbol?$12134$Uaprr g$x$12390$Uaprr))
                   (assertion-violation
                     'symbol=?
                     '"not a symbol"
                     g$x$12390$Uaprr)
                   (void))
                 (eq? g$a$12387$Uaprr g$x$12390$Uaprr))))
            (cons g$b$12388$Uaprr g$rest$12389$Uaprr))))))
   (g$boolean=?$12226$Uaprr
     g$boolean=?$12517$Uaprr
     (case-lambda
       ((g$a$12391$Uaprr g$b$12392$Uaprr . g$rest$12393$Uaprr)
        (begin
          (if (not (g$boolean?$12135$Uaprr g$a$12391$Uaprr))
            (assertion-violation
              'boolean=?
              '"not a boolean"
              g$a$12391$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$12394$Uaprr)
               (begin
                 (if (not (g$boolean?$12135$Uaprr g$x$12394$Uaprr))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$12394$Uaprr)
                   (void))
                 (eq? g$a$12391$Uaprr g$x$12394$Uaprr))))
            (cons g$b$12392$Uaprr g$rest$12393$Uaprr))))))
   (g$char=?$12267$Uaprr
     g$char=?$12518$Uaprr
     (case-lambda
       ((g$a$12395$Uaprr g$b$12396$Uaprr . g$rest$12397$Uaprr)
        (begin
          (if (not (g$char?$12131$Uaprr g$a$12395$Uaprr))
            (assertion-violation 'char=? '"not a char" g$a$12395$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$12398$Uaprr)
               (begin
                 (if (not (g$char?$12131$Uaprr g$x$12398$Uaprr))
                   (assertion-violation
                     'char=?
                     '"not a char"
                     g$x$12398$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$12399$Uaprr)
                     (begin
                       (set! g$a$12395$Uaprr g$x$12398$Uaprr)
                       g$r$12399$Uaprr)))
                  (g$fx=?$13961$Uaprr
                    (char->integer g$a$12395$Uaprr)
                    (char->integer g$x$12398$Uaprr))))))
            (cons g$b$12396$Uaprr g$rest$12397$Uaprr))))))
   (g$char<?$12268$Uaprr
     g$char<?$12519$Uaprr
     (case-lambda
       ((g$a$12400$Uaprr g$b$12401$Uaprr . g$rest$12402$Uaprr)
        (begin
          (if (not (g$char?$12131$Uaprr g$a$12400$Uaprr))
            (assertion-violation 'char<? '"not a char" g$a$12400$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$12403$Uaprr)
               (begin
                 (if (not (g$char?$12131$Uaprr g$x$12403$Uaprr))
                   (assertion-violation
                     'char<?
                     '"not a char"
                     g$x$12403$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$12404$Uaprr)
                     (begin
                       (set! g$a$12400$Uaprr g$x$12403$Uaprr)
                       g$r$12404$Uaprr)))
                  (g$fx<?$13962$Uaprr
                    (char->integer g$a$12400$Uaprr)
                    (char->integer g$x$12403$Uaprr))))))
            (cons g$b$12401$Uaprr g$rest$12402$Uaprr))))))
   (g$char>?$12269$Uaprr
     g$char>?$12520$Uaprr
     (case-lambda
       ((g$a$12405$Uaprr g$b$12406$Uaprr . g$rest$12407$Uaprr)
        (begin
          (if (not (g$char?$12131$Uaprr g$a$12405$Uaprr))
            (assertion-violation 'char>? '"not a char" g$a$12405$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$12408$Uaprr)
               (begin
                 (if (not (g$char?$12131$Uaprr g$x$12408$Uaprr))
                   (assertion-violation
                     'char>?
                     '"not a char"
                     g$x$12408$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$12409$Uaprr)
                     (begin
                       (set! g$a$12405$Uaprr g$x$12408$Uaprr)
                       g$r$12409$Uaprr)))
                  (g$fx>?$13964$Uaprr
                    (char->integer g$a$12405$Uaprr)
                    (char->integer g$x$12408$Uaprr))))))
            (cons g$b$12406$Uaprr g$rest$12407$Uaprr))))))
   (g$char<=?$12270$Uaprr
     g$char<=?$12521$Uaprr
     (case-lambda
       ((g$a$12410$Uaprr g$b$12411$Uaprr . g$rest$12412$Uaprr)
        (begin
          (if (not (g$char?$12131$Uaprr g$a$12410$Uaprr))
            (assertion-violation 'char<=? '"not a char" g$a$12410$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$12413$Uaprr)
               (begin
                 (if (not (g$char?$12131$Uaprr g$x$12413$Uaprr))
                   (assertion-violation
                     'char<=?
                     '"not a char"
                     g$x$12413$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$12414$Uaprr)
                     (begin
                       (set! g$a$12410$Uaprr g$x$12413$Uaprr)
                       g$r$12414$Uaprr)))
                  (g$fx<=?$13963$Uaprr
                    (char->integer g$a$12410$Uaprr)
                    (char->integer g$x$12413$Uaprr))))))
            (cons g$b$12411$Uaprr g$rest$12412$Uaprr))))))
   (g$char>=?$12271$Uaprr
     g$char>=?$12522$Uaprr
     (case-lambda
       ((g$a$12415$Uaprr g$b$12416$Uaprr . g$rest$12417$Uaprr)
        (begin
          (if (not (g$char?$12131$Uaprr g$a$12415$Uaprr))
            (assertion-violation 'char>=? '"not a char" g$a$12415$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$12418$Uaprr)
               (begin
                 (if (not (g$char?$12131$Uaprr g$x$12418$Uaprr))
                   (assertion-violation
                     'char>=?
                     '"not a char"
                     g$x$12418$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$12419$Uaprr)
                     (begin
                       (set! g$a$12415$Uaprr g$x$12418$Uaprr)
                       g$r$12419$Uaprr)))
                  (g$fx>=?$13965$Uaprr
                    (char->integer g$a$12415$Uaprr)
                    (char->integer g$x$12418$Uaprr))))))
            (cons g$b$12416$Uaprr g$rest$12417$Uaprr))))))
   (g$rationalize$12272$Uaprr
     g$rationalize$12523$Uaprr
     (case-lambda
       ((g$x$12420$Uaprr g$e$12421$Uaprr)
        (if (if (infinite? g$x$12420$Uaprr)
              (begin '#f (infinite? g$e$12421$Uaprr))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$12422$Uaprr)
              (if (if (exact? g$x$12420$Uaprr)
                    (begin '#f (exact? g$e$12421$Uaprr))
                    '#f)
                g$r$12422$Uaprr
                (inexact g$r$12422$Uaprr))))
           (apply
             /
             (g$find-ratio$12273$Uaprr
               g$x$12420$Uaprr
               g$e$12421$Uaprr)))))))
   (g$find-ratio$12273$Uaprr
     g$find-ratio$12524$Uaprr
     (case-lambda
       ((g$x$12423$Uaprr g$e$12424$Uaprr)
        (g$find-ratio-between$12274$Uaprr
          (- g$x$12423$Uaprr g$e$12424$Uaprr)
          (+ g$x$12423$Uaprr g$e$12424$Uaprr)))))
   (g$find-ratio-between$12274$Uaprr
     g$find-ratio-between$12525$Uaprr
     (case-lambda
       ((g$x$12425$Uaprr g$y$12426$Uaprr)
        (letrec* ((g$sr$12427$Uaprr
                    (case-lambda
                      ((g$x$12429$Uaprr g$y$12430$Uaprr)
                       ((case-lambda
                          ((g$fx$12431$Uaprr g$fy$12432$Uaprr)
                           (if (>= g$fx$12431$Uaprr g$x$12429$Uaprr)
                             (list g$fx$12431$Uaprr '1)
                             (if (= g$fx$12431$Uaprr g$fy$12432$Uaprr)
                               ((case-lambda
                                  ((g$rat$12433$Uaprr)
                                   (list
                                     (+ (g$cadr$12144$Uaprr
                                          g$rat$12433$Uaprr)
                                        (* g$fx$12431$Uaprr
                                           (car g$rat$12433$Uaprr)))
                                     (car g$rat$12433$Uaprr))))
                                (g$sr$12427$Uaprr
                                  (/ (- g$y$12430$Uaprr
                                        g$fy$12432$Uaprr))
                                  (/ (- g$x$12429$Uaprr
                                        g$fx$12431$Uaprr))))
                               (list (+ '1 g$fx$12431$Uaprr) '1)))))
                        (exact (floor g$x$12429$Uaprr))
                        (exact (floor g$y$12430$Uaprr)))))))
          (if (< g$y$12426$Uaprr g$x$12425$Uaprr)
            (g$find-ratio-between$12274$Uaprr
              g$y$12426$Uaprr
              g$x$12425$Uaprr)
            (if (>= g$x$12425$Uaprr g$y$12426$Uaprr)
              (list g$x$12425$Uaprr '1)
              (if (g$positive?$12171$Uaprr g$x$12425$Uaprr)
                (g$sr$12427$Uaprr g$x$12425$Uaprr g$y$12426$Uaprr)
                (if (g$negative?$12172$Uaprr g$y$12426$Uaprr)
                  ((case-lambda
                     ((g$rat$12428$Uaprr)
                      (list
                        (- (car g$rat$12428$Uaprr))
                        (g$cadr$12144$Uaprr g$rat$12428$Uaprr))))
                   (g$sr$12427$Uaprr
                     (- g$y$12426$Uaprr)
                     (- g$x$12425$Uaprr)))
                  '(0 1)))))))))
   (g$vector-map$12275$Uaprr
     g$vector-map$12526$Uaprr
     (case-lambda
       ((g$p$12434$Uaprr g$vec1$12435$Uaprr . g$vecs$12436$Uaprr)
        ((case-lambda
           ((g$len$12437$Uaprr)
            ((case-lambda
               ((g$res$12438$Uaprr)
                (letrec ((g$loop$12439$Uaprr
                           (case-lambda
                             ((g$i$12440$Uaprr)
                              (if (g$fx=?$13961$Uaprr
                                    g$i$12440$Uaprr
                                    g$len$12437$Uaprr)
                                (begin
                                  (if '#f '#f (void))
                                  g$res$12438$Uaprr)
                                (begin
                                  (vector-set!
                                    g$res$12438$Uaprr
                                    g$i$12440$Uaprr
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (apply
                                           values
                                           (g$map$11722$Uaprr
                                             (case-lambda
                                               ((g$x$12441$Uaprr)
                                                (vector-ref
                                                  g$x$12441$Uaprr
                                                  g$i$12440$Uaprr)))
                                             (cons
                                               g$vec1$12435$Uaprr
                                               g$vecs$12436$Uaprr)))))
                                      g$p$12434$Uaprr))
                                  (g$loop$12439$Uaprr
                                    (fx+ g$i$12440$Uaprr '1))))))))
                  (g$loop$12439$Uaprr '0))))
             (make-vector g$len$12437$Uaprr))))
         (vector-length g$vec1$12435$Uaprr)))))
   (g$vector-for-each$12276$Uaprr
     g$vector-for-each$12527$Uaprr
     (case-lambda
       ((g$p$12442$Uaprr g$vec1$12443$Uaprr . g$vecs$12444$Uaprr)
        ((case-lambda
           ((g$len$12445$Uaprr)
            (letrec ((g$loop$12446$Uaprr
                       (case-lambda
                         ((g$i$12447$Uaprr)
                          (if (g$fx=?$13961$Uaprr
                                g$i$12447$Uaprr
                                g$len$12445$Uaprr)
                            (if '#f '#f (void))
                            (begin
                              (call-with-values
                                (case-lambda
                                  (()
                                   (apply
                                     values
                                     (g$map$11722$Uaprr
                                       (case-lambda
                                         ((g$x$12448$Uaprr)
                                          (vector-ref
                                            g$x$12448$Uaprr
                                            g$i$12447$Uaprr)))
                                       (cons
                                         g$vec1$12443$Uaprr
                                         g$vecs$12444$Uaprr)))))
                                g$p$12442$Uaprr)
                              (g$loop$12446$Uaprr
                                (fx+ g$i$12447$Uaprr '1))))))))
              (g$loop$12446$Uaprr '0))))
         (vector-length g$vec1$12443$Uaprr)))))
   (g$string-for-each$12277$Uaprr
     g$string-for-each$12528$Uaprr
     (case-lambda
       ((g$p$12449$Uaprr g$str1$12450$Uaprr . g$strs$12451$Uaprr)
        ((case-lambda
           ((g$len$12452$Uaprr)
            (letrec ((g$loop$12453$Uaprr
                       (case-lambda
                         ((g$i$12454$Uaprr)
                          (if (g$fx=?$13961$Uaprr
                                g$i$12454$Uaprr
                                g$len$12452$Uaprr)
                            (if '#f '#f (void))
                            (begin
                              (call-with-values
                                (case-lambda
                                  (()
                                   (apply
                                     values
                                     (g$map$11722$Uaprr
                                       (case-lambda
                                         ((g$x$12455$Uaprr)
                                          (string-ref
                                            g$x$12455$Uaprr
                                            g$i$12454$Uaprr)))
                                       (cons
                                         g$str1$12450$Uaprr
                                         g$strs$12451$Uaprr)))))
                                g$p$12449$Uaprr)
                              (g$loop$12453$Uaprr
                                (fx+ g$i$12454$Uaprr '1))))))))
              (g$loop$12453$Uaprr '0))))
         (string-length g$str1$12450$Uaprr))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$12530$Uaprr
     g$using$12564$Uaprr
     (clr-using-internal 'system))
   (g$using$12532$Uaprr
     g$using$12565$Uaprr
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$12533$Uaprr
     g$make-eq-hashtable$12566$Uaprr
     (case-lambda
       (() (g$make-eq-hashtable$12533$Uaprr '32))
       ((g$k$12542$Uaprr)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$12542$Uaprr)))))
   (g$make-eqv-hashtable$12534$Uaprr
     g$make-eqv-hashtable$12567$Uaprr
     (case-lambda
       (() (g$make-eqv-hashtable$12534$Uaprr '32))
       ((g$k$12543$Uaprr)
        (make-hashtable eqv-hash eqv? g$k$12543$Uaprr))))
   (g$hashtable-size$12535$Uaprr
     g$hashtable-size$12568$Uaprr
     (case-lambda
       ((g$ht$12544$Uaprr)
        (clr-call-internal 'hashtable 'get_count g$ht$12544$Uaprr))))
   (g$hashtable-ref$12536$Uaprr
     g$hashtable-ref$12569$Uaprr
     (case-lambda
       ((g$ht$12545$Uaprr g$key$12546$Uaprr g$default$12547$Uaprr)
        (letrec* ((g$r$12548$Uaprr
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$12545$Uaprr
                      g$key$12546$Uaprr)))
          (if ((case-lambda
                 ((g$t$12549$Uaprr)
                  (if g$t$12549$Uaprr
                    g$t$12549$Uaprr
                    (begin
                      '#f
                      (g$hashtable-contains?$12539$Uaprr
                        g$ht$12545$Uaprr
                        g$key$12546$Uaprr)))))
               (not (null? g$r$12548$Uaprr)))
            g$r$12548$Uaprr
            g$default$12547$Uaprr)))))
   (g$hashtable-set!$12537$Uaprr
     g$hashtable-set!$12570$Uaprr
     (case-lambda
       ((g$ht$12550$Uaprr g$key$12551$Uaprr g$obj$12552$Uaprr)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$12550$Uaprr
          g$key$12551$Uaprr
          g$obj$12552$Uaprr))))
   (g$hashtable-delete!$12538$Uaprr
     g$hashtable-delete!$12571$Uaprr
     (case-lambda
       ((g$ht$12553$Uaprr g$key$12554$Uaprr)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$12553$Uaprr
          g$key$12554$Uaprr))))
   (g$hashtable-contains?$12539$Uaprr
     g$hashtable-contains?$12572$Uaprr
     (case-lambda
       ((g$ht$12555$Uaprr g$key$12556$Uaprr)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$12555$Uaprr
          g$key$12556$Uaprr))))
   (g$hashtable-update!$12540$Uaprr
     g$hashtable-update!$12573$Uaprr
     (case-lambda
       ((g$ht$12557$Uaprr
          g$key$12558$Uaprr
          g$proc$12559$Uaprr
          g$default$12560$Uaprr)
        (g$hashtable-set!$12537$Uaprr
          g$ht$12557$Uaprr
          g$key$12558$Uaprr
          (g$proc$12559$Uaprr
            (g$hashtable-ref$12536$Uaprr
              g$ht$12557$Uaprr
              g$key$12558$Uaprr
              g$default$12560$Uaprr))))))
   (g$hashtable-clear!$12541$Uaprr
     g$hashtable-clear!$12574$Uaprr
     (case-lambda
       ((g$ht$12561$Uaprr)
        (g$hashtable-clear!$12541$Uaprr g$ht$12561$Uaprr '32))
       ((g$ht$12562$Uaprr g$k$12563$Uaprr)
        (clr-call-internal 'hashtable 'clear g$ht$12562$Uaprr)))))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$12576$Uaprr
     g$using$12583$Uaprr
     (clr-using-internal 'system.io))
   (g$file-exists?$12577$Uaprr
     g$file-exists?$12584$Uaprr
     (case-lambda
       ((g$fn$12580$Uaprr)
        (clr-call-internal 'file 'exists '() g$fn$12580$Uaprr))))
   (g$delete-file$12578$Uaprr
     g$delete-file$12585$Uaprr
     (case-lambda
       ((g$fn$12581$Uaprr)
        (clr-call-internal 'file 'delete '() g$fn$12581$Uaprr))))
   (g$get-directory-name$12579$Uaprr
     g$get-directory-name$12586$Uaprr
     (case-lambda
       ((g$path$12582$Uaprr)
        (clr-call-internal
          'path
          'getdirectoryname
          '()
          g$path$12582$Uaprr)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$12587$Uaprr
     g$native-endianness$12698$Uaprr
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$12588$Uaprr
     g$bytevector-u16-ref$12699$Uaprr
     (case-lambda
       ((g$bytevector$12616$Uaprr
          g$k$12617$Uaprr
          g$endianness$12618$Uaprr)
        (bytevector-uint-ref
          g$bytevector$12616$Uaprr
          g$k$12617$Uaprr
          g$endianness$12618$Uaprr
          '2))))
   (g$bytevector-s16-ref$12589$Uaprr
     g$bytevector-s16-ref$12700$Uaprr
     (case-lambda
       ((g$bytevector$12619$Uaprr
          g$k$12620$Uaprr
          g$endianness$12621$Uaprr)
        (bytevector-sint-ref
          g$bytevector$12619$Uaprr
          g$k$12620$Uaprr
          g$endianness$12621$Uaprr
          '2))))
   (g$bytevector-u16-native-ref$12590$Uaprr
     g$bytevector-u16-native-ref$12701$Uaprr
     (case-lambda
       ((g$bytevector$12622$Uaprr g$k$12623$Uaprr)
        (bytevector-uint-ref
          g$bytevector$12622$Uaprr
          g$k$12623$Uaprr
          (g$native-endianness$12587$Uaprr)
          '2))))
   (g$bytevector-s16-native-ref$12591$Uaprr
     g$bytevector-s16-native-ref$12702$Uaprr
     (case-lambda
       ((g$bytevector$12624$Uaprr g$k$12625$Uaprr)
        (bytevector-sint-ref
          g$bytevector$12624$Uaprr
          g$k$12625$Uaprr
          (g$native-endianness$12587$Uaprr)
          '2))))
   (g$bytevector-u16-set!$12592$Uaprr
     g$bytevector-u16-set!$12703$Uaprr
     (case-lambda
       ((g$bytevector$12626$Uaprr
          g$k$12627$Uaprr
          g$n$12628$Uaprr
          g$endianness$12629$Uaprr)
        (bytevector-uint-set!
          g$bytevector$12626$Uaprr
          g$k$12627$Uaprr
          g$n$12628$Uaprr
          g$endianness$12629$Uaprr
          '2))))
   (g$bytevector-s16-set!$12593$Uaprr
     g$bytevector-s16-set!$12704$Uaprr
     (case-lambda
       ((g$bytevector$12630$Uaprr
          g$k$12631$Uaprr
          g$n$12632$Uaprr
          g$endianness$12633$Uaprr)
        (bytevector-sint-set!
          g$bytevector$12630$Uaprr
          g$k$12631$Uaprr
          g$n$12632$Uaprr
          g$endianness$12633$Uaprr
          '2))))
   (g$bytevector-u16-native-set!$12594$Uaprr
     g$bytevector-u16-native-set!$12705$Uaprr
     (case-lambda
       ((g$bytevector$12634$Uaprr g$k$12635$Uaprr g$n$12636$Uaprr)
        (bytevector-uint-set!
          g$bytevector$12634$Uaprr
          g$k$12635$Uaprr
          g$n$12636$Uaprr
          (g$native-endianness$12587$Uaprr)
          '2))))
   (g$bytevector-s16-native-set!$12595$Uaprr
     g$bytevector-s16-native-set!$12706$Uaprr
     (case-lambda
       ((g$bytevector$12637$Uaprr g$k$12638$Uaprr g$n$12639$Uaprr)
        (bytevector-sint-set!
          g$bytevector$12637$Uaprr
          g$k$12638$Uaprr
          g$n$12639$Uaprr
          (g$native-endianness$12587$Uaprr)
          '2))))
   (g$bytevector-u32-ref$12596$Uaprr
     g$bytevector-u32-ref$12707$Uaprr
     (case-lambda
       ((g$bytevector$12640$Uaprr
          g$k$12641$Uaprr
          g$endianness$12642$Uaprr)
        (bytevector-uint-ref
          g$bytevector$12640$Uaprr
          g$k$12641$Uaprr
          g$endianness$12642$Uaprr
          '4))))
   (g$bytevector-s32-ref$12597$Uaprr
     g$bytevector-s32-ref$12708$Uaprr
     (case-lambda
       ((g$bytevector$12643$Uaprr
          g$k$12644$Uaprr
          g$endianness$12645$Uaprr)
        (bytevector-sint-ref
          g$bytevector$12643$Uaprr
          g$k$12644$Uaprr
          g$endianness$12645$Uaprr
          '4))))
   (g$bytevector-u32-native-ref$12598$Uaprr
     g$bytevector-u32-native-ref$12709$Uaprr
     (case-lambda
       ((g$bytevector$12646$Uaprr g$k$12647$Uaprr)
        (bytevector-uint-ref
          g$bytevector$12646$Uaprr
          g$k$12647$Uaprr
          (g$native-endianness$12587$Uaprr)
          '4))))
   (g$bytevector-s32-native-ref$12599$Uaprr
     g$bytevector-s32-native-ref$12710$Uaprr
     (case-lambda
       ((g$bytevector$12648$Uaprr g$k$12649$Uaprr)
        (bytevector-sint-ref
          g$bytevector$12648$Uaprr
          g$k$12649$Uaprr
          (g$native-endianness$12587$Uaprr)
          '4))))
   (g$bytevector-u32-set!$12600$Uaprr
     g$bytevector-u32-set!$12711$Uaprr
     (case-lambda
       ((g$bytevector$12650$Uaprr
          g$k$12651$Uaprr
          g$n$12652$Uaprr
          g$endianness$12653$Uaprr)
        (bytevector-uint-set!
          g$bytevector$12650$Uaprr
          g$k$12651$Uaprr
          g$n$12652$Uaprr
          g$endianness$12653$Uaprr
          '4))))
   (g$bytevector-s32-set!$12601$Uaprr
     g$bytevector-s32-set!$12712$Uaprr
     (case-lambda
       ((g$bytevector$12654$Uaprr
          g$k$12655$Uaprr
          g$n$12656$Uaprr
          g$endianness$12657$Uaprr)
        (bytevector-sint-set!
          g$bytevector$12654$Uaprr
          g$k$12655$Uaprr
          g$n$12656$Uaprr
          g$endianness$12657$Uaprr
          '4))))
   (g$bytevector-u32-native-set!$12602$Uaprr
     g$bytevector-u32-native-set!$12713$Uaprr
     (case-lambda
       ((g$bytevector$12658$Uaprr g$k$12659$Uaprr g$n$12660$Uaprr)
        (bytevector-uint-set!
          g$bytevector$12658$Uaprr
          g$k$12659$Uaprr
          g$n$12660$Uaprr
          (g$native-endianness$12587$Uaprr)
          '4))))
   (g$bytevector-s32-native-set!$12603$Uaprr
     g$bytevector-s32-native-set!$12714$Uaprr
     (case-lambda
       ((g$bytevector$12661$Uaprr g$k$12662$Uaprr g$n$12663$Uaprr)
        (bytevector-sint-set!
          g$bytevector$12661$Uaprr
          g$k$12662$Uaprr
          g$n$12663$Uaprr
          (g$native-endianness$12587$Uaprr)
          '4))))
   (g$bytevector-u64-ref$12604$Uaprr
     g$bytevector-u64-ref$12715$Uaprr
     (case-lambda
       ((g$bytevector$12664$Uaprr
          g$k$12665$Uaprr
          g$endianness$12666$Uaprr)
        (bytevector-uint-ref
          g$bytevector$12664$Uaprr
          g$k$12665$Uaprr
          g$endianness$12666$Uaprr
          '8))))
   (g$bytevector-s64-ref$12605$Uaprr
     g$bytevector-s64-ref$12716$Uaprr
     (case-lambda
       ((g$bytevector$12667$Uaprr
          g$k$12668$Uaprr
          g$endianness$12669$Uaprr)
        (bytevector-sint-ref
          g$bytevector$12667$Uaprr
          g$k$12668$Uaprr
          g$endianness$12669$Uaprr
          '8))))
   (g$bytevector-u64-native-ref$12606$Uaprr
     g$bytevector-u64-native-ref$12717$Uaprr
     (case-lambda
       ((g$bytevector$12670$Uaprr g$k$12671$Uaprr)
        (bytevector-uint-ref
          g$bytevector$12670$Uaprr
          g$k$12671$Uaprr
          (g$native-endianness$12587$Uaprr)
          '8))))
   (g$bytevector-s64-native-ref$12607$Uaprr
     g$bytevector-s64-native-ref$12718$Uaprr
     (case-lambda
       ((g$bytevector$12672$Uaprr g$k$12673$Uaprr)
        (bytevector-sint-ref
          g$bytevector$12672$Uaprr
          g$k$12673$Uaprr
          (g$native-endianness$12587$Uaprr)
          '8))))
   (g$bytevector-u64-set!$12608$Uaprr
     g$bytevector-u64-set!$12719$Uaprr
     (case-lambda
       ((g$bytevector$12674$Uaprr
          g$k$12675$Uaprr
          g$n$12676$Uaprr
          g$endianness$12677$Uaprr)
        (bytevector-uint-set!
          g$bytevector$12674$Uaprr
          g$k$12675$Uaprr
          g$n$12676$Uaprr
          g$endianness$12677$Uaprr
          '8))))
   (g$bytevector-s64-set!$12609$Uaprr
     g$bytevector-s64-set!$12720$Uaprr
     (case-lambda
       ((g$bytevector$12678$Uaprr
          g$k$12679$Uaprr
          g$n$12680$Uaprr
          g$endianness$12681$Uaprr)
        (bytevector-sint-set!
          g$bytevector$12678$Uaprr
          g$k$12679$Uaprr
          g$n$12680$Uaprr
          g$endianness$12681$Uaprr
          '8))))
   (g$bytevector-u64-native-set!$12610$Uaprr
     g$bytevector-u64-native-set!$12721$Uaprr
     (case-lambda
       ((g$bytevector$12682$Uaprr g$k$12683$Uaprr g$n$12684$Uaprr)
        (bytevector-uint-set!
          g$bytevector$12682$Uaprr
          g$k$12683$Uaprr
          g$n$12684$Uaprr
          (g$native-endianness$12587$Uaprr)
          '8))))
   (g$bytevector-s64-native-set!$12611$Uaprr
     g$bytevector-s64-native-set!$12722$Uaprr
     (case-lambda
       ((g$bytevector$12685$Uaprr g$k$12686$Uaprr g$n$12687$Uaprr)
        (bytevector-sint-set!
          g$bytevector$12685$Uaprr
          g$k$12686$Uaprr
          g$n$12687$Uaprr
          (g$native-endianness$12587$Uaprr)
          '8))))
   (g$bytevector-ieee-single-native-ref$12612$Uaprr
     g$bytevector-ieee-single-native-ref$12723$Uaprr
     (case-lambda
       ((g$bytevector$12688$Uaprr g$k$12689$Uaprr)
        (if (not (g$zero?$12504$Uaprr
                   (g$mod$12456$Uaprr g$k$12689$Uaprr '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$12689$Uaprr)
          (bytevector-ieee-single-ref
            g$bytevector$12688$Uaprr
            g$k$12689$Uaprr
            (g$native-endianness$12587$Uaprr))))))
   (g$bytevector-ieee-double-native-ref$12613$Uaprr
     g$bytevector-ieee-double-native-ref$12724$Uaprr
     (case-lambda
       ((g$bytevector$12690$Uaprr g$k$12691$Uaprr)
        (if (not (g$zero?$12504$Uaprr
                   (g$mod$12456$Uaprr g$k$12691$Uaprr '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$12691$Uaprr)
          (bytevector-ieee-double-ref
            g$bytevector$12690$Uaprr
            g$k$12691$Uaprr
            (g$native-endianness$12587$Uaprr))))))
   (g$bytevector-ieee-single-native-set!$12614$Uaprr
     g$bytevector-ieee-single-native-set!$12725$Uaprr
     (case-lambda
       ((g$bytevector$12692$Uaprr g$k$12693$Uaprr g$x$12694$Uaprr)
        (if (not (g$zero?$12504$Uaprr
                   (g$mod$12456$Uaprr g$k$12693$Uaprr '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$12693$Uaprr)
          (bytevector-ieee-single-set!
            g$bytevector$12692$Uaprr
            g$k$12693$Uaprr
            g$x$12694$Uaprr
            (g$native-endianness$12587$Uaprr))))))
   (g$bytevector-ieee-double-native-set!$12615$Uaprr
     g$bytevector-ieee-double-native-set!$12726$Uaprr
     (case-lambda
       ((g$bytevector$12695$Uaprr g$k$12696$Uaprr g$x$12697$Uaprr)
        (if (not (g$zero?$12504$Uaprr
                   (g$mod$12456$Uaprr g$k$12696$Uaprr '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$12696$Uaprr)
          (bytevector-ieee-double-set!
            g$bytevector$12695$Uaprr
            g$k$12696$Uaprr
            g$x$12697$Uaprr
            (g$native-endianness$12587$Uaprr)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$5841$12727$Uaprr
     g$5841$13129$Uaprr
     (make-record-type-descriptor
       '&condition
       '#f
       'g$5844$Uaprr
       '#f
       '#f
       '#()))
   (g$5843$12728$Uaprr g$5843$13130$Uaprr '#f)
   (g$5842$12729$Uaprr
     g$5842$13131$Uaprr
     (make-record-constructor-descriptor
       g$5841$12727$Uaprr
       '#f
       g$5843$12728$Uaprr))
   (g$&condition?$12732$Uaprr
     g$&condition?$13132$Uaprr
     (record-predicate g$5841$12727$Uaprr))
   (g$make-&condition$12733$Uaprr
     g$make-&condition$13133$Uaprr
     (record-constructor g$5842$12729$Uaprr))
   (g$&condition-rtd$12734$Uaprr
     g$&condition-rtd$13134$Uaprr
     g$5841$12727$Uaprr)
   (g$&condition-rcd$12735$Uaprr
     g$&condition-rcd$13135$Uaprr
     g$5842$12729$Uaprr)
   (g$5878$12833$Uaprr
     g$5878$13136$Uaprr
     (make-record-type-descriptor
       '&message
       g$5841$12727$Uaprr
       'g$5881$Uaprr
       '#f
       '#f
       '#((immutable message))))
   (g$5880$12834$Uaprr g$5880$13137$Uaprr '#f)
   (g$5879$12835$Uaprr
     g$5879$13138$Uaprr
     (make-record-constructor-descriptor
       g$5878$12833$Uaprr
       g$5842$12729$Uaprr
       g$5880$12834$Uaprr))
   (g$p?$12838$Uaprr
     g$p?$13139$Uaprr
     (record-predicate g$5878$12833$Uaprr))
   (g$make-message-condition$12839$Uaprr
     g$make-message-condition$13140$Uaprr
     (record-constructor g$5879$12835$Uaprr))
   (g$condition-message$12840$Uaprr
     g$condition-message$13141$Uaprr
     (record-accessor g$5878$12833$Uaprr '0))
   (g$message-condition?$12841$Uaprr
     g$message-condition?$13142$Uaprr
     (condition-predicate g$5878$12833$Uaprr))
   (g$condition-message$12842$Uaprr
     g$condition-message$13143$Uaprr
     (condition-accessor
       g$5878$12833$Uaprr
       g$condition-message$12840$Uaprr))
   (g$&message-rtd$12843$Uaprr
     g$&message-rtd$13144$Uaprr
     g$5878$12833$Uaprr)
   (g$&message-rcd$12844$Uaprr
     g$&message-rcd$13145$Uaprr
     g$5879$12835$Uaprr)
   (g$5893$12845$Uaprr
     g$5893$13146$Uaprr
     (make-record-type-descriptor
       '&warning
       g$5841$12727$Uaprr
       'g$5896$Uaprr
       '#f
       '#f
       '#()))
   (g$5895$12846$Uaprr g$5895$13147$Uaprr '#f)
   (g$5894$12847$Uaprr
     g$5894$13148$Uaprr
     (make-record-constructor-descriptor
       g$5893$12845$Uaprr
       g$5842$12729$Uaprr
       g$5895$12846$Uaprr))
   (g$p?$12850$Uaprr
     g$p?$13149$Uaprr
     (record-predicate g$5893$12845$Uaprr))
   (g$make-warning$12851$Uaprr
     g$make-warning$13150$Uaprr
     (record-constructor g$5894$12847$Uaprr))
   (g$warning?$12852$Uaprr
     g$warning?$13151$Uaprr
     (condition-predicate g$5893$12845$Uaprr))
   (g$&warning-rtd$12853$Uaprr
     g$&warning-rtd$13152$Uaprr
     g$5893$12845$Uaprr)
   (g$&warning-rcd$12854$Uaprr
     g$&warning-rcd$13153$Uaprr
     g$5894$12847$Uaprr)
   (g$5906$12855$Uaprr
     g$5906$13154$Uaprr
     (make-record-type-descriptor
       '&serious
       g$5841$12727$Uaprr
       'g$5909$Uaprr
       '#f
       '#f
       '#()))
   (g$5908$12856$Uaprr g$5908$13155$Uaprr '#f)
   (g$5907$12857$Uaprr
     g$5907$13156$Uaprr
     (make-record-constructor-descriptor
       g$5906$12855$Uaprr
       g$5842$12729$Uaprr
       g$5908$12856$Uaprr))
   (g$p?$12860$Uaprr
     g$p?$13157$Uaprr
     (record-predicate g$5906$12855$Uaprr))
   (g$make-serious-condition$12861$Uaprr
     g$make-serious-condition$13158$Uaprr
     (record-constructor g$5907$12857$Uaprr))
   (g$serious-condition?$12862$Uaprr
     g$serious-condition?$13159$Uaprr
     (condition-predicate g$5906$12855$Uaprr))
   (g$&serious-rtd$12863$Uaprr
     g$&serious-rtd$13160$Uaprr
     g$5906$12855$Uaprr)
   (g$&serious-rcd$12864$Uaprr
     g$&serious-rcd$13161$Uaprr
     g$5907$12857$Uaprr)
   (g$5919$12865$Uaprr
     g$5919$13162$Uaprr
     (make-record-type-descriptor
       '&error
       g$5906$12855$Uaprr
       'g$5922$Uaprr
       '#f
       '#f
       '#()))
   (g$5921$12866$Uaprr g$5921$13163$Uaprr '#f)
   (g$5920$12867$Uaprr
     g$5920$13164$Uaprr
     (make-record-constructor-descriptor
       g$5919$12865$Uaprr
       g$5907$12857$Uaprr
       g$5921$12866$Uaprr))
   (g$p?$12870$Uaprr
     g$p?$13165$Uaprr
     (record-predicate g$5919$12865$Uaprr))
   (g$make-error$12871$Uaprr
     g$make-error$13166$Uaprr
     (record-constructor g$5920$12867$Uaprr))
   (g$error?$12872$Uaprr
     g$error?$13167$Uaprr
     (condition-predicate g$5919$12865$Uaprr))
   (g$&error-rtd$12873$Uaprr
     g$&error-rtd$13168$Uaprr
     g$5919$12865$Uaprr)
   (g$&error-rcd$12874$Uaprr
     g$&error-rcd$13169$Uaprr
     g$5920$12867$Uaprr)
   (g$5932$12875$Uaprr
     g$5932$13170$Uaprr
     (make-record-type-descriptor
       '&violation
       g$5906$12855$Uaprr
       'g$5935$Uaprr
       '#f
       '#f
       '#()))
   (g$5934$12876$Uaprr g$5934$13171$Uaprr '#f)
   (g$5933$12877$Uaprr
     g$5933$13172$Uaprr
     (make-record-constructor-descriptor
       g$5932$12875$Uaprr
       g$5907$12857$Uaprr
       g$5934$12876$Uaprr))
   (g$p?$12880$Uaprr
     g$p?$13173$Uaprr
     (record-predicate g$5932$12875$Uaprr))
   (g$make-violation$12881$Uaprr
     g$make-violation$13174$Uaprr
     (record-constructor g$5933$12877$Uaprr))
   (g$violation?$12882$Uaprr
     g$violation?$13175$Uaprr
     (condition-predicate g$5932$12875$Uaprr))
   (g$&violation-rtd$12883$Uaprr
     g$&violation-rtd$13176$Uaprr
     g$5932$12875$Uaprr)
   (g$&violation-rcd$12884$Uaprr
     g$&violation-rcd$13177$Uaprr
     g$5933$12877$Uaprr)
   (g$5945$12885$Uaprr
     g$5945$13178$Uaprr
     (make-record-type-descriptor
       '&assertion
       g$5932$12875$Uaprr
       'g$5948$Uaprr
       '#f
       '#f
       '#()))
   (g$5947$12886$Uaprr g$5947$13179$Uaprr '#f)
   (g$5946$12887$Uaprr
     g$5946$13180$Uaprr
     (make-record-constructor-descriptor
       g$5945$12885$Uaprr
       g$5933$12877$Uaprr
       g$5947$12886$Uaprr))
   (g$p?$12890$Uaprr
     g$p?$13181$Uaprr
     (record-predicate g$5945$12885$Uaprr))
   (g$make-assertion-violation$12891$Uaprr
     g$make-assertion-violation$13182$Uaprr
     (record-constructor g$5946$12887$Uaprr))
   (g$assertion-violation?$12892$Uaprr
     g$assertion-violation?$13183$Uaprr
     (condition-predicate g$5945$12885$Uaprr))
   (g$&assertion-rtd$12893$Uaprr
     g$&assertion-rtd$13184$Uaprr
     g$5945$12885$Uaprr)
   (g$&assertion-rcd$12894$Uaprr
     g$&assertion-rcd$13185$Uaprr
     g$5946$12887$Uaprr)
   (g$5958$12896$Uaprr
     g$5958$13186$Uaprr
     (make-record-type-descriptor
       '&irritants
       g$5841$12727$Uaprr
       'g$5961$Uaprr
       '#f
       '#f
       '#((immutable irritants))))
   (g$5960$12897$Uaprr g$5960$13187$Uaprr '#f)
   (g$5959$12898$Uaprr
     g$5959$13188$Uaprr
     (make-record-constructor-descriptor
       g$5958$12896$Uaprr
       g$5842$12729$Uaprr
       g$5960$12897$Uaprr))
   (g$p?$12901$Uaprr
     g$p?$13189$Uaprr
     (record-predicate g$5958$12896$Uaprr))
   (g$make-irritants-condition$12902$Uaprr
     g$make-irritants-condition$13190$Uaprr
     (record-constructor g$5959$12898$Uaprr))
   (g$condition-irritants$12903$Uaprr
     g$condition-irritants$13191$Uaprr
     (record-accessor g$5958$12896$Uaprr '0))
   (g$irritants-condition?$12904$Uaprr
     g$irritants-condition?$13192$Uaprr
     (condition-predicate g$5958$12896$Uaprr))
   (g$condition-irritants$12905$Uaprr
     g$condition-irritants$13193$Uaprr
     (condition-accessor
       g$5958$12896$Uaprr
       g$condition-irritants$12903$Uaprr))
   (g$&irritants-rtd$12906$Uaprr
     g$&irritants-rtd$13194$Uaprr
     g$5958$12896$Uaprr)
   (g$&irritants-rcd$12907$Uaprr
     g$&irritants-rcd$13195$Uaprr
     g$5959$12898$Uaprr)
   (g$5973$12909$Uaprr
     g$5973$13196$Uaprr
     (make-record-type-descriptor
       '&who
       g$5841$12727$Uaprr
       'g$5976$Uaprr
       '#f
       '#f
       '#((immutable who))))
   (g$5975$12910$Uaprr g$5975$13197$Uaprr '#f)
   (g$5974$12911$Uaprr
     g$5974$13198$Uaprr
     (make-record-constructor-descriptor
       g$5973$12909$Uaprr
       g$5842$12729$Uaprr
       g$5975$12910$Uaprr))
   (g$p?$12914$Uaprr
     g$p?$13199$Uaprr
     (record-predicate g$5973$12909$Uaprr))
   (g$make-who-condition$12915$Uaprr
     g$make-who-condition$13200$Uaprr
     (record-constructor g$5974$12911$Uaprr))
   (g$condition-who$12916$Uaprr
     g$condition-who$13201$Uaprr
     (record-accessor g$5973$12909$Uaprr '0))
   (g$who-condition?$12917$Uaprr
     g$who-condition?$13202$Uaprr
     (condition-predicate g$5973$12909$Uaprr))
   (g$condition-who$12918$Uaprr
     g$condition-who$13203$Uaprr
     (condition-accessor
       g$5973$12909$Uaprr
       g$condition-who$12916$Uaprr))
   (g$&who-rtd$12919$Uaprr g$&who-rtd$13204$Uaprr g$5973$12909$Uaprr)
   (g$&who-rcd$12920$Uaprr g$&who-rcd$13205$Uaprr g$5974$12911$Uaprr)
   (g$5988$12921$Uaprr
     g$5988$13206$Uaprr
     (make-record-type-descriptor
       '&non-continuable
       g$5932$12875$Uaprr
       'g$5991$Uaprr
       '#f
       '#f
       '#()))
   (g$5990$12922$Uaprr g$5990$13207$Uaprr '#f)
   (g$5989$12923$Uaprr
     g$5989$13208$Uaprr
     (make-record-constructor-descriptor
       g$5988$12921$Uaprr
       g$5933$12877$Uaprr
       g$5990$12922$Uaprr))
   (g$p?$12926$Uaprr
     g$p?$13209$Uaprr
     (record-predicate g$5988$12921$Uaprr))
   (g$make-non-continuable-violation$12927$Uaprr
     g$make-non-continuable-violation$13210$Uaprr
     (record-constructor g$5989$12923$Uaprr))
   (g$non-continuable-violation?$12928$Uaprr
     g$non-continuable-violation?$13211$Uaprr
     (condition-predicate g$5988$12921$Uaprr))
   (g$&non-continuable-rtd$12929$Uaprr
     g$&non-continuable-rtd$13212$Uaprr
     g$5988$12921$Uaprr)
   (g$&non-continuable-rcd$12930$Uaprr
     g$&non-continuable-rcd$13213$Uaprr
     g$5989$12923$Uaprr)
   (g$6001$12931$Uaprr
     g$6001$13214$Uaprr
     (make-record-type-descriptor
       '&implementation-restriction
       g$5932$12875$Uaprr
       'g$6004$Uaprr
       '#f
       '#f
       '#()))
   (g$6003$12932$Uaprr g$6003$13215$Uaprr '#f)
   (g$6002$12933$Uaprr
     g$6002$13216$Uaprr
     (make-record-constructor-descriptor
       g$6001$12931$Uaprr
       g$5933$12877$Uaprr
       g$6003$12932$Uaprr))
   (g$p?$12936$Uaprr
     g$p?$13217$Uaprr
     (record-predicate g$6001$12931$Uaprr))
   (g$make-implementation-restriction-violation$12937$Uaprr
     g$make-implementation-restriction-violation$13218$Uaprr
     (record-constructor g$6002$12933$Uaprr))
   (g$implementation-restriction-violation?$12938$Uaprr
     g$implementation-restriction-violation?$13219$Uaprr
     (condition-predicate g$6001$12931$Uaprr))
   (g$&implementation-restriction-rtd$12939$Uaprr
     g$&implementation-restriction-rtd$13220$Uaprr
     g$6001$12931$Uaprr)
   (g$&implementation-restriction-rcd$12940$Uaprr
     g$&implementation-restriction-rcd$13221$Uaprr
     g$6002$12933$Uaprr)
   (g$6014$12941$Uaprr
     g$6014$13222$Uaprr
     (make-record-type-descriptor
       '&lexical
       g$5932$12875$Uaprr
       'g$6017$Uaprr
       '#f
       '#f
       '#()))
   (g$6016$12942$Uaprr g$6016$13223$Uaprr '#f)
   (g$6015$12943$Uaprr
     g$6015$13224$Uaprr
     (make-record-constructor-descriptor
       g$6014$12941$Uaprr
       g$5933$12877$Uaprr
       g$6016$12942$Uaprr))
   (g$p?$12946$Uaprr
     g$p?$13225$Uaprr
     (record-predicate g$6014$12941$Uaprr))
   (g$make-lexical-violation$12947$Uaprr
     g$make-lexical-violation$13226$Uaprr
     (record-constructor g$6015$12943$Uaprr))
   (g$lexical-violation?$12948$Uaprr
     g$lexical-violation?$13227$Uaprr
     (condition-predicate g$6014$12941$Uaprr))
   (g$&lexical-rtd$12949$Uaprr
     g$&lexical-rtd$13228$Uaprr
     g$6014$12941$Uaprr)
   (g$&lexical-rcd$12950$Uaprr
     g$&lexical-rcd$13229$Uaprr
     g$6015$12943$Uaprr)
   (g$6027$12953$Uaprr
     g$6027$13230$Uaprr
     (make-record-type-descriptor
       '&syntax
       g$5932$12875$Uaprr
       'g$6030$Uaprr
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6029$12954$Uaprr g$6029$13231$Uaprr '#f)
   (g$6028$12955$Uaprr
     g$6028$13232$Uaprr
     (make-record-constructor-descriptor
       g$6027$12953$Uaprr
       g$5933$12877$Uaprr
       g$6029$12954$Uaprr))
   (g$p?$12958$Uaprr
     g$p?$13233$Uaprr
     (record-predicate g$6027$12953$Uaprr))
   (g$make-syntax-violation$12959$Uaprr
     g$make-syntax-violation$13234$Uaprr
     (record-constructor g$6028$12955$Uaprr))
   (g$syntax-violation-form$12960$Uaprr
     g$syntax-violation-form$13235$Uaprr
     (record-accessor g$6027$12953$Uaprr '0))
   (g$syntax-violation-subform$12961$Uaprr
     g$syntax-violation-subform$13236$Uaprr
     (record-accessor g$6027$12953$Uaprr '1))
   (g$syntax-violation?$12962$Uaprr
     g$syntax-violation?$13237$Uaprr
     (condition-predicate g$6027$12953$Uaprr))
   (g$syntax-violation-form$12963$Uaprr
     g$syntax-violation-form$13238$Uaprr
     (condition-accessor
       g$6027$12953$Uaprr
       g$syntax-violation-form$12960$Uaprr))
   (g$syntax-violation-subform$12964$Uaprr
     g$syntax-violation-subform$13239$Uaprr
     (condition-accessor
       g$6027$12953$Uaprr
       g$syntax-violation-subform$12961$Uaprr))
   (g$&syntax-rtd$12965$Uaprr
     g$&syntax-rtd$13240$Uaprr
     g$6027$12953$Uaprr)
   (g$&syntax-rcd$12966$Uaprr
     g$&syntax-rcd$13241$Uaprr
     g$6028$12955$Uaprr)
   (g$6044$12967$Uaprr
     g$6044$13242$Uaprr
     (make-record-type-descriptor
       '&undefined
       g$5932$12875$Uaprr
       'g$6047$Uaprr
       '#f
       '#f
       '#()))
   (g$6046$12968$Uaprr g$6046$13243$Uaprr '#f)
   (g$6045$12969$Uaprr
     g$6045$13244$Uaprr
     (make-record-constructor-descriptor
       g$6044$12967$Uaprr
       g$5933$12877$Uaprr
       g$6046$12968$Uaprr))
   (g$p?$12972$Uaprr
     g$p?$13245$Uaprr
     (record-predicate g$6044$12967$Uaprr))
   (g$make-undefined-violation$12973$Uaprr
     g$make-undefined-violation$13246$Uaprr
     (record-constructor g$6045$12969$Uaprr))
   (g$undefined-violation?$12974$Uaprr
     g$undefined-violation?$13247$Uaprr
     (condition-predicate g$6044$12967$Uaprr))
   (g$&undefined-rtd$12975$Uaprr
     g$&undefined-rtd$13248$Uaprr
     g$6044$12967$Uaprr)
   (g$&undefined-rcd$12976$Uaprr
     g$&undefined-rcd$13249$Uaprr
     g$6045$12969$Uaprr)
   (g$6057$12977$Uaprr
     g$6057$13250$Uaprr
     (make-record-type-descriptor
       '&i/o
       g$5919$12865$Uaprr
       'g$6060$Uaprr
       '#f
       '#f
       '#()))
   (g$6059$12978$Uaprr g$6059$13251$Uaprr '#f)
   (g$6058$12979$Uaprr
     g$6058$13252$Uaprr
     (make-record-constructor-descriptor
       g$6057$12977$Uaprr
       g$5920$12867$Uaprr
       g$6059$12978$Uaprr))
   (g$p?$12982$Uaprr
     g$p?$13253$Uaprr
     (record-predicate g$6057$12977$Uaprr))
   (g$make-i/o-error$12983$Uaprr
     g$make-i/o-error$13254$Uaprr
     (record-constructor g$6058$12979$Uaprr))
   (g$i/o-error?$12984$Uaprr
     g$i/o-error?$13255$Uaprr
     (condition-predicate g$6057$12977$Uaprr))
   (g$&i/o-rtd$12985$Uaprr g$&i/o-rtd$13256$Uaprr g$6057$12977$Uaprr)
   (g$&i/o-rcd$12986$Uaprr g$&i/o-rcd$13257$Uaprr g$6058$12979$Uaprr)
   (g$6070$12987$Uaprr
     g$6070$13258$Uaprr
     (make-record-type-descriptor
       '&i/o-read
       g$6057$12977$Uaprr
       'g$6073$Uaprr
       '#f
       '#f
       '#()))
   (g$6072$12988$Uaprr g$6072$13259$Uaprr '#f)
   (g$6071$12989$Uaprr
     g$6071$13260$Uaprr
     (make-record-constructor-descriptor
       g$6070$12987$Uaprr
       g$6058$12979$Uaprr
       g$6072$12988$Uaprr))
   (g$p?$12992$Uaprr
     g$p?$13261$Uaprr
     (record-predicate g$6070$12987$Uaprr))
   (g$make-i/o-read-error$12993$Uaprr
     g$make-i/o-read-error$13262$Uaprr
     (record-constructor g$6071$12989$Uaprr))
   (g$i/o-read-error?$12994$Uaprr
     g$i/o-read-error?$13263$Uaprr
     (condition-predicate g$6070$12987$Uaprr))
   (g$&i/o-read-rtd$12995$Uaprr
     g$&i/o-read-rtd$13264$Uaprr
     g$6070$12987$Uaprr)
   (g$&i/o-read-rcd$12996$Uaprr
     g$&i/o-read-rcd$13265$Uaprr
     g$6071$12989$Uaprr)
   (g$6083$12997$Uaprr
     g$6083$13266$Uaprr
     (make-record-type-descriptor
       '&i/o-write
       g$6057$12977$Uaprr
       'g$6086$Uaprr
       '#f
       '#f
       '#()))
   (g$6085$12998$Uaprr g$6085$13267$Uaprr '#f)
   (g$6084$12999$Uaprr
     g$6084$13268$Uaprr
     (make-record-constructor-descriptor
       g$6083$12997$Uaprr
       g$6058$12979$Uaprr
       g$6085$12998$Uaprr))
   (g$p?$13002$Uaprr
     g$p?$13269$Uaprr
     (record-predicate g$6083$12997$Uaprr))
   (g$make-i/o-write-error$13003$Uaprr
     g$make-i/o-write-error$13270$Uaprr
     (record-constructor g$6084$12999$Uaprr))
   (g$i/o-write-error?$13004$Uaprr
     g$i/o-write-error?$13271$Uaprr
     (condition-predicate g$6083$12997$Uaprr))
   (g$&i/o-write-rtd$13005$Uaprr
     g$&i/o-write-rtd$13272$Uaprr
     g$6083$12997$Uaprr)
   (g$&i/o-write-rcd$13006$Uaprr
     g$&i/o-write-rcd$13273$Uaprr
     g$6084$12999$Uaprr)
   (g$6096$13008$Uaprr
     g$6096$13274$Uaprr
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$6057$12977$Uaprr
       'g$6099$Uaprr
       '#f
       '#f
       '#((immutable position))))
   (g$6098$13009$Uaprr g$6098$13275$Uaprr '#f)
   (g$6097$13010$Uaprr
     g$6097$13276$Uaprr
     (make-record-constructor-descriptor
       g$6096$13008$Uaprr
       g$6058$12979$Uaprr
       g$6098$13009$Uaprr))
   (g$p?$13013$Uaprr
     g$p?$13277$Uaprr
     (record-predicate g$6096$13008$Uaprr))
   (g$make-i/o-invalid-position-error$13014$Uaprr
     g$make-i/o-invalid-position-error$13278$Uaprr
     (record-constructor g$6097$13010$Uaprr))
   (g$i/o-error-position$13015$Uaprr
     g$i/o-error-position$13279$Uaprr
     (record-accessor g$6096$13008$Uaprr '0))
   (g$i/o-invalid-position-error?$13016$Uaprr
     g$i/o-invalid-position-error?$13280$Uaprr
     (condition-predicate g$6096$13008$Uaprr))
   (g$i/o-error-position$13017$Uaprr
     g$i/o-error-position$13281$Uaprr
     (condition-accessor
       g$6096$13008$Uaprr
       g$i/o-error-position$13015$Uaprr))
   (g$&i/o-invalid-position-rtd$13018$Uaprr
     g$&i/o-invalid-position-rtd$13282$Uaprr
     g$6096$13008$Uaprr)
   (g$&i/o-invalid-position-rcd$13019$Uaprr
     g$&i/o-invalid-position-rcd$13283$Uaprr
     g$6097$13010$Uaprr)
   (g$6111$13021$Uaprr
     g$6111$13284$Uaprr
     (make-record-type-descriptor
       '&i/o-filename
       g$6057$12977$Uaprr
       'g$6114$Uaprr
       '#f
       '#f
       '#((immutable filename))))
   (g$6113$13022$Uaprr g$6113$13285$Uaprr '#f)
   (g$6112$13023$Uaprr
     g$6112$13286$Uaprr
     (make-record-constructor-descriptor
       g$6111$13021$Uaprr
       g$6058$12979$Uaprr
       g$6113$13022$Uaprr))
   (g$p?$13026$Uaprr
     g$p?$13287$Uaprr
     (record-predicate g$6111$13021$Uaprr))
   (g$make-i/o-filename-error$13027$Uaprr
     g$make-i/o-filename-error$13288$Uaprr
     (record-constructor g$6112$13023$Uaprr))
   (g$i/o-error-filename$13028$Uaprr
     g$i/o-error-filename$13289$Uaprr
     (record-accessor g$6111$13021$Uaprr '0))
   (g$i/o-filename-error?$13029$Uaprr
     g$i/o-filename-error?$13290$Uaprr
     (condition-predicate g$6111$13021$Uaprr))
   (g$i/o-error-filename$13030$Uaprr
     g$i/o-error-filename$13291$Uaprr
     (condition-accessor
       g$6111$13021$Uaprr
       g$i/o-error-filename$13028$Uaprr))
   (g$&i/o-filename-rtd$13031$Uaprr
     g$&i/o-filename-rtd$13292$Uaprr
     g$6111$13021$Uaprr)
   (g$&i/o-filename-rcd$13032$Uaprr
     g$&i/o-filename-rcd$13293$Uaprr
     g$6112$13023$Uaprr)
   (g$6126$13033$Uaprr
     g$6126$13294$Uaprr
     (make-record-type-descriptor
       '&i/o-file-protection
       g$6111$13021$Uaprr
       'g$6129$Uaprr
       '#f
       '#f
       '#()))
   (g$6128$13034$Uaprr g$6128$13295$Uaprr '#f)
   (g$6127$13035$Uaprr
     g$6127$13296$Uaprr
     (make-record-constructor-descriptor
       g$6126$13033$Uaprr
       g$6112$13023$Uaprr
       g$6128$13034$Uaprr))
   (g$p?$13038$Uaprr
     g$p?$13297$Uaprr
     (record-predicate g$6126$13033$Uaprr))
   (g$make-i/o-file-protection-error$13039$Uaprr
     g$make-i/o-file-protection-error$13298$Uaprr
     (record-constructor g$6127$13035$Uaprr))
   (g$i/o-file-protection-error?$13040$Uaprr
     g$i/o-file-protection-error?$13299$Uaprr
     (condition-predicate g$6126$13033$Uaprr))
   (g$&i/o-file-protection-rtd$13041$Uaprr
     g$&i/o-file-protection-rtd$13300$Uaprr
     g$6126$13033$Uaprr)
   (g$&i/o-file-protection-rcd$13042$Uaprr
     g$&i/o-file-protection-rcd$13301$Uaprr
     g$6127$13035$Uaprr)
   (g$6139$13043$Uaprr
     g$6139$13302$Uaprr
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$6126$13033$Uaprr
       'g$6142$Uaprr
       '#f
       '#f
       '#()))
   (g$6141$13044$Uaprr g$6141$13303$Uaprr '#f)
   (g$6140$13045$Uaprr
     g$6140$13304$Uaprr
     (make-record-constructor-descriptor
       g$6139$13043$Uaprr
       g$6127$13035$Uaprr
       g$6141$13044$Uaprr))
   (g$p?$13048$Uaprr
     g$p?$13305$Uaprr
     (record-predicate g$6139$13043$Uaprr))
   (g$make-i/o-file-is-read-only-error$13049$Uaprr
     g$make-i/o-file-is-read-only-error$13306$Uaprr
     (record-constructor g$6140$13045$Uaprr))
   (g$i/o-file-is-read-only-error?$13050$Uaprr
     g$i/o-file-is-read-only-error?$13307$Uaprr
     (condition-predicate g$6139$13043$Uaprr))
   (g$&i/o-file-is-read-only-rtd$13051$Uaprr
     g$&i/o-file-is-read-only-rtd$13308$Uaprr
     g$6139$13043$Uaprr)
   (g$&i/o-file-is-read-only-rcd$13052$Uaprr
     g$&i/o-file-is-read-only-rcd$13309$Uaprr
     g$6140$13045$Uaprr)
   (g$6152$13053$Uaprr
     g$6152$13310$Uaprr
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$6111$13021$Uaprr
       'g$6155$Uaprr
       '#f
       '#f
       '#()))
   (g$6154$13054$Uaprr g$6154$13311$Uaprr '#f)
   (g$6153$13055$Uaprr
     g$6153$13312$Uaprr
     (make-record-constructor-descriptor
       g$6152$13053$Uaprr
       g$6112$13023$Uaprr
       g$6154$13054$Uaprr))
   (g$p?$13058$Uaprr
     g$p?$13313$Uaprr
     (record-predicate g$6152$13053$Uaprr))
   (g$make-i/o-file-already-exists-error$13059$Uaprr
     g$make-i/o-file-already-exists-error$13314$Uaprr
     (record-constructor g$6153$13055$Uaprr))
   (g$i/o-file-already-exists-error?$13060$Uaprr
     g$i/o-file-already-exists-error?$13315$Uaprr
     (condition-predicate g$6152$13053$Uaprr))
   (g$&i/o-file-already-exists-rtd$13061$Uaprr
     g$&i/o-file-already-exists-rtd$13316$Uaprr
     g$6152$13053$Uaprr)
   (g$&i/o-file-already-exists-rcd$13062$Uaprr
     g$&i/o-file-already-exists-rcd$13317$Uaprr
     g$6153$13055$Uaprr)
   (g$6165$13063$Uaprr
     g$6165$13318$Uaprr
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$6111$13021$Uaprr
       'g$6168$Uaprr
       '#f
       '#f
       '#()))
   (g$6167$13064$Uaprr g$6167$13319$Uaprr '#f)
   (g$6166$13065$Uaprr
     g$6166$13320$Uaprr
     (make-record-constructor-descriptor
       g$6165$13063$Uaprr
       g$6112$13023$Uaprr
       g$6167$13064$Uaprr))
   (g$p?$13068$Uaprr
     g$p?$13321$Uaprr
     (record-predicate g$6165$13063$Uaprr))
   (g$make-i/o-file-does-not-exist-error$13069$Uaprr
     g$make-i/o-file-does-not-exist-error$13322$Uaprr
     (record-constructor g$6166$13065$Uaprr))
   (g$i/o-file-does-not-exist-error?$13070$Uaprr
     g$i/o-file-does-not-exist-error?$13323$Uaprr
     (condition-predicate g$6165$13063$Uaprr))
   (g$&i/o-file-does-not-exist-rtd$13071$Uaprr
     g$&i/o-file-does-not-exist-rtd$13324$Uaprr
     g$6165$13063$Uaprr)
   (g$&i/o-file-does-not-exist-rcd$13072$Uaprr
     g$&i/o-file-does-not-exist-rcd$13325$Uaprr
     g$6166$13065$Uaprr)
   (g$6178$13074$Uaprr
     g$6178$13326$Uaprr
     (make-record-type-descriptor
       '&i/o-port
       g$6057$12977$Uaprr
       'g$6181$Uaprr
       '#f
       '#f
       '#((immutable port))))
   (g$6180$13075$Uaprr g$6180$13327$Uaprr '#f)
   (g$6179$13076$Uaprr
     g$6179$13328$Uaprr
     (make-record-constructor-descriptor
       g$6178$13074$Uaprr
       g$6058$12979$Uaprr
       g$6180$13075$Uaprr))
   (g$p?$13079$Uaprr
     g$p?$13329$Uaprr
     (record-predicate g$6178$13074$Uaprr))
   (g$make-i/o-port-error$13080$Uaprr
     g$make-i/o-port-error$13330$Uaprr
     (record-constructor g$6179$13076$Uaprr))
   (g$i/o-error-port$13081$Uaprr
     g$i/o-error-port$13331$Uaprr
     (record-accessor g$6178$13074$Uaprr '0))
   (g$i/o-port-error?$13082$Uaprr
     g$i/o-port-error?$13332$Uaprr
     (condition-predicate g$6178$13074$Uaprr))
   (g$i/o-error-port$13083$Uaprr
     g$i/o-error-port$13333$Uaprr
     (condition-accessor
       g$6178$13074$Uaprr
       g$i/o-error-port$13081$Uaprr))
   (g$&i/o-port-rtd$13084$Uaprr
     g$&i/o-port-rtd$13334$Uaprr
     g$6178$13074$Uaprr)
   (g$&i/o-port-rcd$13085$Uaprr
     g$&i/o-port-rcd$13335$Uaprr
     g$6179$13076$Uaprr)
   (g$6193$13086$Uaprr
     g$6193$13336$Uaprr
     (make-record-type-descriptor
       '&i/o-decoding
       g$6178$13074$Uaprr
       'g$6196$Uaprr
       '#f
       '#f
       '#()))
   (g$6195$13087$Uaprr g$6195$13337$Uaprr '#f)
   (g$6194$13088$Uaprr
     g$6194$13338$Uaprr
     (make-record-constructor-descriptor
       g$6193$13086$Uaprr
       g$6179$13076$Uaprr
       g$6195$13087$Uaprr))
   (g$p?$13091$Uaprr
     g$p?$13339$Uaprr
     (record-predicate g$6193$13086$Uaprr))
   (g$make-i/o-decoding-error$13092$Uaprr
     g$make-i/o-decoding-error$13340$Uaprr
     (record-constructor g$6194$13088$Uaprr))
   (g$i/o-decoding-error?$13093$Uaprr
     g$i/o-decoding-error?$13341$Uaprr
     (condition-predicate g$6193$13086$Uaprr))
   (g$&i/o-decoding-rtd$13094$Uaprr
     g$&i/o-decoding-rtd$13342$Uaprr
     g$6193$13086$Uaprr)
   (g$&i/o-decoding-rcd$13095$Uaprr
     g$&i/o-decoding-rcd$13343$Uaprr
     g$6194$13088$Uaprr)
   (g$6206$13097$Uaprr
     g$6206$13344$Uaprr
     (make-record-type-descriptor
       '&i/o-encoding
       g$6178$13074$Uaprr
       'g$6209$Uaprr
       '#f
       '#f
       '#((immutable char))))
   (g$6208$13098$Uaprr g$6208$13345$Uaprr '#f)
   (g$6207$13099$Uaprr
     g$6207$13346$Uaprr
     (make-record-constructor-descriptor
       g$6206$13097$Uaprr
       g$6179$13076$Uaprr
       g$6208$13098$Uaprr))
   (g$p?$13102$Uaprr
     g$p?$13347$Uaprr
     (record-predicate g$6206$13097$Uaprr))
   (g$make-i/o-encoding-error$13103$Uaprr
     g$make-i/o-encoding-error$13348$Uaprr
     (record-constructor g$6207$13099$Uaprr))
   (g$i/o-encoding-error-char$13104$Uaprr
     g$i/o-encoding-error-char$13349$Uaprr
     (record-accessor g$6206$13097$Uaprr '0))
   (g$i/o-encoding-error?$13105$Uaprr
     g$i/o-encoding-error?$13350$Uaprr
     (condition-predicate g$6206$13097$Uaprr))
   (g$i/o-encoding-error-char$13106$Uaprr
     g$i/o-encoding-error-char$13351$Uaprr
     (condition-accessor
       g$6206$13097$Uaprr
       g$i/o-encoding-error-char$13104$Uaprr))
   (g$&i/o-encoding-rtd$13107$Uaprr
     g$&i/o-encoding-rtd$13352$Uaprr
     g$6206$13097$Uaprr)
   (g$&i/o-encoding-rcd$13108$Uaprr
     g$&i/o-encoding-rcd$13353$Uaprr
     g$6207$13099$Uaprr)
   (g$6221$13109$Uaprr
     g$6221$13354$Uaprr
     (make-record-type-descriptor
       '&no-infinities
       g$6001$12931$Uaprr
       'g$6224$Uaprr
       '#f
       '#f
       '#()))
   (g$6223$13110$Uaprr g$6223$13355$Uaprr '#f)
   (g$6222$13111$Uaprr
     g$6222$13356$Uaprr
     (make-record-constructor-descriptor
       g$6221$13109$Uaprr
       g$6002$12933$Uaprr
       g$6223$13110$Uaprr))
   (g$p?$13114$Uaprr
     g$p?$13357$Uaprr
     (record-predicate g$6221$13109$Uaprr))
   (g$make-no-infinities-violation$13115$Uaprr
     g$make-no-infinities-violation$13358$Uaprr
     (record-constructor g$6222$13111$Uaprr))
   (g$no-infinities-violation?$13116$Uaprr
     g$no-infinities-violation?$13359$Uaprr
     (condition-predicate g$6221$13109$Uaprr))
   (g$&no-infinities-rtd$13117$Uaprr
     g$&no-infinities-rtd$13360$Uaprr
     g$6221$13109$Uaprr)
   (g$&no-infinities-rcd$13118$Uaprr
     g$&no-infinities-rcd$13361$Uaprr
     g$6222$13111$Uaprr)
   (g$6234$13119$Uaprr
     g$6234$13362$Uaprr
     (make-record-type-descriptor
       '&no-nans
       g$6001$12931$Uaprr
       'g$6237$Uaprr
       '#f
       '#f
       '#()))
   (g$6236$13120$Uaprr g$6236$13363$Uaprr '#f)
   (g$6235$13121$Uaprr
     g$6235$13364$Uaprr
     (make-record-constructor-descriptor
       g$6234$13119$Uaprr
       g$6002$12933$Uaprr
       g$6236$13120$Uaprr))
   (g$p?$13124$Uaprr
     g$p?$13365$Uaprr
     (record-predicate g$6234$13119$Uaprr))
   (g$make-no-nans-violation$13125$Uaprr
     g$make-no-nans-violation$13366$Uaprr
     (record-constructor g$6235$13121$Uaprr))
   (g$no-nans-violation?$13126$Uaprr
     g$no-nans-violation?$13367$Uaprr
     (condition-predicate g$6234$13119$Uaprr))
   (g$&no-nans-rtd$13127$Uaprr
     g$&no-nans-rtd$13368$Uaprr
     g$6234$13119$Uaprr)
   (g$&no-nans-rcd$13128$Uaprr
     g$&no-nans-rcd$13369$Uaprr
     g$6235$13121$Uaprr))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$13370$Uaprr
     g$append!$13376$Uaprr
     (case-lambda
       ((g$a$13371$Uaprr . g$b$13372$Uaprr)
        (if (null? g$a$13371$Uaprr)
          g$b$13372$Uaprr
          (if (null? g$b$13372$Uaprr)
            g$a$13371$Uaprr
            (begin
              ((letrec ((g$f$13373$Uaprr
                          (case-lambda
                            ((g$a$13374$Uaprr)
                             ((case-lambda
                                ((g$n$13375$Uaprr)
                                 (if (null? g$n$13375$Uaprr)
                                   (set-cdr!
                                     g$a$13374$Uaprr
                                     g$b$13372$Uaprr)
                                   (g$f$13373$Uaprr g$n$13375$Uaprr))))
                              (cdr g$a$13374$Uaprr))))))
                 g$f$13373$Uaprr)
               g$a$13371$Uaprr)
              g$a$13371$Uaprr)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$inexact->exact$13377$Uaprr g$inexact->exact$13397$Uaprr exact)
   (g$exact->inexact$13378$Uaprr g$exact->inexact$13398$Uaprr inexact)
   (g$sign$13379$Uaprr
     g$sign$13399$Uaprr
     (case-lambda
       ((g$n$13385$Uaprr)
        (if (> g$n$13385$Uaprr '0)
          '1
          (if (< g$n$13385$Uaprr '0) '-1 '0)))))
   (g$quotient$13380$Uaprr
     g$quotient$13400$Uaprr
     (case-lambda
       ((g$n1$13386$Uaprr g$n2$13387$Uaprr)
        (begin
          (if (not (integer-valued? g$n1$13386$Uaprr))
            (assertion-violation
              'quotient
              '"not an integer"
              g$n1$13386$Uaprr)
            (void))
          (if (not (integer-valued? g$n2$13387$Uaprr))
            (assertion-violation
              'quotient
              '"not an integer"
              g$n2$13387$Uaprr)
            (void))
          (* (g$sign$13379$Uaprr g$n1$13386$Uaprr)
             (g$sign$13379$Uaprr g$n2$13387$Uaprr)
             (div (abs g$n1$13386$Uaprr) (abs g$n2$13387$Uaprr)))))))
   (g$remainder$13381$Uaprr
     g$remainder$13401$Uaprr
     (case-lambda
       ((g$n1$13388$Uaprr g$n2$13389$Uaprr)
        (begin
          (if (not (integer-valued? g$n1$13388$Uaprr))
            (assertion-violation
              'remainder
              '"not an integer"
              g$n1$13388$Uaprr)
            (void))
          (if (not (integer-valued? g$n2$13389$Uaprr))
            (assertion-violation
              'remainder
              '"not an integer"
              g$n2$13389$Uaprr)
            (void))
          (* (g$sign$13379$Uaprr g$n1$13388$Uaprr)
             (g$mod$12456$Uaprr
               (abs g$n1$13388$Uaprr)
               (abs g$n2$13389$Uaprr)))))))
   (g$modulo$13382$Uaprr
     g$modulo$13402$Uaprr
     (case-lambda
       ((g$n1$13390$Uaprr g$n2$13391$Uaprr)
        (begin
          (if (not (integer-valued? g$n1$13390$Uaprr))
            (assertion-violation
              'modulo
              '"not an integer"
              g$n1$13390$Uaprr)
            (void))
          (if (not (integer-valued? g$n2$13391$Uaprr))
            (assertion-violation
              'modulo
              '"not an integer"
              g$n2$13391$Uaprr)
            (void))
          (* (g$sign$13379$Uaprr g$n2$13391$Uaprr)
             (g$mod$12456$Uaprr
               (* (g$sign$13379$Uaprr g$n2$13391$Uaprr)
                  g$n1$13390$Uaprr)
               (abs g$n2$13391$Uaprr)))))))
   (g$make-promise$13383$Uaprr
     g$make-promise$13403$Uaprr
     (case-lambda
       ((g$proc$13392$Uaprr)
        ((case-lambda
           ((g$result-ready?$13393$Uaprr g$result$13394$Uaprr)
            (case-lambda
              (()
               (if g$result-ready?$13393$Uaprr
                 g$result$13394$Uaprr
                 ((case-lambda
                    ((g$x$13395$Uaprr)
                     (if g$result-ready?$13393$Uaprr
                       g$result$13394$Uaprr
                       (begin
                         (set! g$result-ready?$13393$Uaprr '#t)
                         (set! g$result$13394$Uaprr g$x$13395$Uaprr)
                         g$result$13394$Uaprr))))
                  (g$proc$13392$Uaprr)))))))
         '#f
         '#f))))
   (g$force$13384$Uaprr
     g$force$13404$Uaprr
     (case-lambda ((g$object$13396$Uaprr) (g$object$13396$Uaprr)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$13405$Uaprr
     g$split$13430$Uaprr
     (case-lambda
       ((g$ls$13409$Uaprr)
        ((letrec ((g$loop$13410$Uaprr
                    (case-lambda
                      ((g$rest$13411$Uaprr
                         g$left$13412$Uaprr
                         g$right$13413$Uaprr)
                       (if (null? g$rest$13411$Uaprr)
                         (cons g$left$13412$Uaprr g$right$13413$Uaprr)
                         (if (null? (cdr g$rest$13411$Uaprr))
                           (cons
                             (cons
                               (car g$rest$13411$Uaprr)
                               g$left$13412$Uaprr)
                             g$right$13413$Uaprr)
                           (g$loop$13410$Uaprr
                             (g$cddr$12477$Uaprr g$rest$13411$Uaprr)
                             (cons
                               (car g$rest$13411$Uaprr)
                               g$left$13412$Uaprr)
                             (cons
                               (g$cadr$12475$Uaprr g$rest$13411$Uaprr)
                               g$right$13413$Uaprr))))))))
           g$loop$13410$Uaprr)
         g$ls$13409$Uaprr
         '()
         '()))))
   (g$reverse-it$13406$Uaprr
     g$reverse-it$13431$Uaprr
     (case-lambda
       ((g$head$13414$Uaprr g$tail$13415$Uaprr)
        (if (null? g$head$13414$Uaprr)
          g$tail$13415$Uaprr
          (g$reverse-it$13406$Uaprr
            (cdr g$head$13414$Uaprr)
            (cons (car g$head$13414$Uaprr) g$tail$13415$Uaprr))))))
   (g$merge$13407$Uaprr
     g$merge$13432$Uaprr
     (case-lambda
       ((g$list-1$13416$Uaprr
          g$list-2$13417$Uaprr
          g$precedes?$13418$Uaprr)
        ((letrec ((g$loop$13419$Uaprr
                    (case-lambda
                      ((g$source-1$13420$Uaprr
                         g$source-2$13421$Uaprr
                         g$so-far$13422$Uaprr)
                       (if (null? g$source-1$13420$Uaprr)
                         (g$reverse-it$13406$Uaprr
                           g$so-far$13422$Uaprr
                           g$source-2$13421$Uaprr)
                         (if (null? g$source-2$13421$Uaprr)
                           (g$reverse-it$13406$Uaprr
                             g$so-far$13422$Uaprr
                             g$source-1$13420$Uaprr)
                           ((case-lambda
                              ((g$car-1$13423$Uaprr g$car-2$13424$Uaprr)
                               (if (g$precedes?$13418$Uaprr
                                     g$car-2$13424$Uaprr
                                     g$car-1$13423$Uaprr)
                                 (g$loop$13419$Uaprr
                                   g$source-1$13420$Uaprr
                                   (cdr g$source-2$13421$Uaprr)
                                   (cons
                                     g$car-2$13424$Uaprr
                                     g$so-far$13422$Uaprr))
                                 (g$loop$13419$Uaprr
                                   g$source-2$13421$Uaprr
                                   (cdr g$source-1$13420$Uaprr)
                                   (cons
                                     g$car-1$13423$Uaprr
                                     g$so-far$13422$Uaprr)))))
                            (car g$source-1$13420$Uaprr)
                            (car g$source-2$13421$Uaprr))))))))
           g$loop$13419$Uaprr)
         g$list-1$13416$Uaprr
         g$list-2$13417$Uaprr
         '()))))
   (g$list-sort$13408$Uaprr
     g$list-sort$13433$Uaprr
     (case-lambda
       ((g$precedes?$13425$Uaprr g$ls$13426$Uaprr)
        (if (null? g$ls$13426$Uaprr)
          '()
          ((letrec ((g$helper$13427$Uaprr
                      (case-lambda
                        ((g$piece$13428$Uaprr)
                         (if (null? (cdr g$piece$13428$Uaprr))
                           g$piece$13428$Uaprr
                           ((case-lambda
                              ((g$parts$13429$Uaprr)
                               (g$merge$13407$Uaprr
                                 (g$helper$13427$Uaprr
                                   (car g$parts$13429$Uaprr))
                                 (g$helper$13427$Uaprr
                                   (cdr g$parts$13429$Uaprr))
                                 g$precedes?$13425$Uaprr)))
                            (g$split$13405$Uaprr
                              g$piece$13428$Uaprr)))))))
             g$helper$13427$Uaprr)
           g$ls$13426$Uaprr))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$13472$Uaprr
     g$string-ci=?$13578$Uaprr
     (case-lambda
       ((g$a$13524$Uaprr g$b$13525$Uaprr . g$rest$13526$Uaprr)
        (begin
          (if (not (string? g$a$13524$Uaprr))
            (assertion-violation
              'string-ci=?
              '"not a string"
              g$a$13524$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$13527$Uaprr)
               (begin
                 (if (not (string? g$x$13527$Uaprr))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$13527$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$13528$Uaprr)
                     (begin
                       (set! g$a$13524$Uaprr g$x$13527$Uaprr)
                       g$r$13528$Uaprr)))
                  (= (string-ci-compare g$a$13524$Uaprr g$x$13527$Uaprr)
                     '0)))))
            (cons g$b$13525$Uaprr g$rest$13526$Uaprr))))))
   (g$string-ci<?$13473$Uaprr
     g$string-ci<?$13579$Uaprr
     (case-lambda
       ((g$a$13529$Uaprr g$b$13530$Uaprr . g$rest$13531$Uaprr)
        (begin
          (if (not (string? g$a$13529$Uaprr))
            (assertion-violation
              'string-ci<?
              '"not a string"
              g$a$13529$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$13532$Uaprr)
               (begin
                 (if (not (string? g$x$13532$Uaprr))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$13532$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$13533$Uaprr)
                     (begin
                       (set! g$a$13529$Uaprr g$x$13532$Uaprr)
                       g$r$13533$Uaprr)))
                  (< (string-ci-compare g$a$13529$Uaprr g$x$13532$Uaprr)
                     '0)))))
            (cons g$b$13530$Uaprr g$rest$13531$Uaprr))))))
   (g$string-ci>?$13474$Uaprr
     g$string-ci>?$13580$Uaprr
     (case-lambda
       ((g$a$13534$Uaprr g$b$13535$Uaprr . g$rest$13536$Uaprr)
        (begin
          (if (not (string? g$a$13534$Uaprr))
            (assertion-violation
              'string-ci>?
              '"not a string"
              g$a$13534$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$13537$Uaprr)
               (begin
                 (if (not (string? g$x$13537$Uaprr))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$13537$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$13538$Uaprr)
                     (begin
                       (set! g$a$13534$Uaprr g$x$13537$Uaprr)
                       g$r$13538$Uaprr)))
                  (> (string-ci-compare g$a$13534$Uaprr g$x$13537$Uaprr)
                     '0)))))
            (cons g$b$13535$Uaprr g$rest$13536$Uaprr))))))
   (g$string-ci<=?$13475$Uaprr
     g$string-ci<=?$13581$Uaprr
     (case-lambda
       ((g$a$13539$Uaprr g$b$13540$Uaprr . g$rest$13541$Uaprr)
        (begin
          (if (not (string? g$a$13539$Uaprr))
            (assertion-violation
              'string-ci<=?
              '"not a string"
              g$a$13539$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$13542$Uaprr)
               (begin
                 (if (not (string? g$x$13542$Uaprr))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$13542$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$13543$Uaprr)
                     (begin
                       (set! g$a$13539$Uaprr g$x$13542$Uaprr)
                       g$r$13543$Uaprr)))
                  (<= (string-ci-compare
                        g$a$13539$Uaprr
                        g$x$13542$Uaprr)
                      '0)))))
            (cons g$b$13540$Uaprr g$rest$13541$Uaprr))))))
   (g$string-ci>=?$13476$Uaprr
     g$string-ci>=?$13582$Uaprr
     (case-lambda
       ((g$a$13544$Uaprr g$b$13545$Uaprr . g$rest$13546$Uaprr)
        (begin
          (if (not (string? g$a$13544$Uaprr))
            (assertion-violation
              'string-ci>=?
              '"not a string"
              g$a$13544$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$13547$Uaprr)
               (begin
                 (if (not (string? g$x$13547$Uaprr))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$13547$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$13548$Uaprr)
                     (begin
                       (set! g$a$13544$Uaprr g$x$13547$Uaprr)
                       g$r$13548$Uaprr)))
                  (>= (string-ci-compare
                        g$a$13544$Uaprr
                        g$x$13547$Uaprr)
                      '0)))))
            (cons g$b$13545$Uaprr g$rest$13546$Uaprr))))))
   (g$char-ci=?$13515$Uaprr
     g$char-ci=?$13583$Uaprr
     (case-lambda
       ((g$a$13549$Uaprr g$b$13550$Uaprr . g$rest$13551$Uaprr)
        (begin
          (if (not (g$char?$12462$Uaprr g$a$13549$Uaprr))
            (assertion-violation
              'char-ci=?
              '"not a char"
              g$a$13549$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$13552$Uaprr)
               (begin
                 (if (not (g$char?$12462$Uaprr g$x$13552$Uaprr))
                   (assertion-violation
                     'char-ci=?
                     '"not a char"
                     g$x$13552$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$13553$Uaprr)
                     (begin
                       (set! g$a$13549$Uaprr g$x$13552$Uaprr)
                       g$r$13553$Uaprr)))
                  (= (char->integer (char-upcase g$a$13549$Uaprr))
                     (char->integer (char-upcase g$x$13552$Uaprr)))))))
            (cons g$b$13550$Uaprr g$rest$13551$Uaprr))))))
   (g$char-ci<?$13516$Uaprr
     g$char-ci<?$13584$Uaprr
     (case-lambda
       ((g$a$13554$Uaprr g$b$13555$Uaprr . g$rest$13556$Uaprr)
        (begin
          (if (not (g$char?$12462$Uaprr g$a$13554$Uaprr))
            (assertion-violation
              'char-ci<?
              '"not a char"
              g$a$13554$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$13557$Uaprr)
               (begin
                 (if (not (g$char?$12462$Uaprr g$x$13557$Uaprr))
                   (assertion-violation
                     'char-ci<?
                     '"not a char"
                     g$x$13557$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$13558$Uaprr)
                     (begin
                       (set! g$a$13554$Uaprr g$x$13557$Uaprr)
                       g$r$13558$Uaprr)))
                  (< (char->integer (char-upcase g$a$13554$Uaprr))
                     (char->integer (char-upcase g$x$13557$Uaprr)))))))
            (cons g$b$13555$Uaprr g$rest$13556$Uaprr))))))
   (g$char-ci>?$13517$Uaprr
     g$char-ci>?$13585$Uaprr
     (case-lambda
       ((g$a$13559$Uaprr g$b$13560$Uaprr . g$rest$13561$Uaprr)
        (begin
          (if (not (g$char?$12462$Uaprr g$a$13559$Uaprr))
            (assertion-violation
              'char-ci>?
              '"not a char"
              g$a$13559$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$13562$Uaprr)
               (begin
                 (if (not (g$char?$12462$Uaprr g$x$13562$Uaprr))
                   (assertion-violation
                     'char-ci>?
                     '"not a char"
                     g$x$13562$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$13563$Uaprr)
                     (begin
                       (set! g$a$13559$Uaprr g$x$13562$Uaprr)
                       g$r$13563$Uaprr)))
                  (> (char->integer (char-upcase g$a$13559$Uaprr))
                     (char->integer (char-upcase g$x$13562$Uaprr)))))))
            (cons g$b$13560$Uaprr g$rest$13561$Uaprr))))))
   (g$char-ci<=?$13518$Uaprr
     g$char-ci<=?$13586$Uaprr
     (case-lambda
       ((g$a$13564$Uaprr g$b$13565$Uaprr . g$rest$13566$Uaprr)
        (begin
          (if (not (g$char?$12462$Uaprr g$a$13564$Uaprr))
            (assertion-violation
              'char-ci<=?
              '"not a char"
              g$a$13564$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$13567$Uaprr)
               (begin
                 (if (not (g$char?$12462$Uaprr g$x$13567$Uaprr))
                   (assertion-violation
                     'char-ci<=?
                     '"not a char"
                     g$x$13567$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$13568$Uaprr)
                     (begin
                       (set! g$a$13564$Uaprr g$x$13567$Uaprr)
                       g$r$13568$Uaprr)))
                  (<= (char->integer (char-upcase g$a$13564$Uaprr))
                      (char->integer (char-upcase g$x$13567$Uaprr)))))))
            (cons g$b$13565$Uaprr g$rest$13566$Uaprr))))))
   (g$char-ci>=?$13519$Uaprr
     g$char-ci>=?$13587$Uaprr
     (case-lambda
       ((g$a$13569$Uaprr g$b$13570$Uaprr . g$rest$13571$Uaprr)
        (begin
          (if (not (g$char?$12462$Uaprr g$a$13569$Uaprr))
            (assertion-violation
              'char-ci>=?
              '"not a char"
              g$a$13569$Uaprr)
            (void))
          (g$for-all$11720$Uaprr
            (case-lambda
              ((g$x$13572$Uaprr)
               (begin
                 (if (not (g$char?$12462$Uaprr g$x$13572$Uaprr))
                   (assertion-violation
                     'char-ci>=?
                     '"not a char"
                     g$x$13572$Uaprr)
                   (void))
                 ((case-lambda
                    ((g$r$13573$Uaprr)
                     (begin
                       (set! g$a$13569$Uaprr g$x$13572$Uaprr)
                       g$r$13573$Uaprr)))
                  (>= (char->integer (char-upcase g$a$13569$Uaprr))
                      (char->integer (char-upcase g$x$13572$Uaprr)))))))
            (cons g$b$13570$Uaprr g$rest$13571$Uaprr))))))
   (g$string-normalize-nfc$13520$Uaprr
     g$string-normalize-nfc$13588$Uaprr
     (case-lambda
       ((g$s$13574$Uaprr) (string-normalize g$s$13574$Uaprr 'formc))))
   (g$string-normalize-nfd$13521$Uaprr
     g$string-normalize-nfd$13589$Uaprr
     (case-lambda
       ((g$s$13575$Uaprr) (string-normalize g$s$13575$Uaprr 'formd))))
   (g$string-normalize-nfkc$13522$Uaprr
     g$string-normalize-nfkc$13590$Uaprr
     (case-lambda
       ((g$s$13576$Uaprr) (string-normalize g$s$13576$Uaprr 'formkc))))
   (g$string-normalize-nfkd$13523$Uaprr
     g$string-normalize-nfkd$13591$Uaprr
     (case-lambda
       ((g$s$13577$Uaprr) (string-normalize g$s$13577$Uaprr 'formkd)))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$13592$Uaprr
     g$bitwise-if$13623$Uaprr
     (case-lambda
       ((g$ei1$13599$Uaprr g$ei2$13600$Uaprr g$ei3$13601$Uaprr)
        (bitwise-ior
          (bitwise-and g$ei1$13599$Uaprr g$ei2$13600$Uaprr)
          (bitwise-and
            (bitwise-not g$ei1$13599$Uaprr)
            g$ei3$13601$Uaprr)))))
   (g$bitwise-copy-bit$13593$Uaprr
     g$bitwise-copy-bit$13624$Uaprr
     (case-lambda
       ((g$ei1$13602$Uaprr g$ei2$13603$Uaprr g$ei3$13604$Uaprr)
        (g$bitwise-if$13592$Uaprr
          (g$bitwise-arithmetic-shift-left$13596$Uaprr
            '1
            g$ei2$13603$Uaprr)
          (g$bitwise-arithmetic-shift-left$13596$Uaprr
            g$ei3$13604$Uaprr
            g$ei2$13603$Uaprr)
          g$ei1$13602$Uaprr))))
   (g$bitwise-bit-field$13594$Uaprr
     g$bitwise-bit-field$13625$Uaprr
     (case-lambda
       ((g$ei1$13605$Uaprr g$ei2$13606$Uaprr g$ei3$13607$Uaprr)
        (g$bitwise-arithmetic-shift-right$13597$Uaprr
          (bitwise-and
            g$ei1$13605$Uaprr
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$13596$Uaprr
                '-1
                g$ei3$13607$Uaprr)))
          g$ei2$13606$Uaprr))))
   (g$bitwise-copy-bit-field$13595$Uaprr
     g$bitwise-copy-bit-field$13626$Uaprr
     (case-lambda
       ((g$to$13608$Uaprr
          g$start$13609$Uaprr
          g$end$13610$Uaprr
          g$from$13611$Uaprr)
        (g$bitwise-if$13592$Uaprr
          (bitwise-and
            (g$bitwise-arithmetic-shift-left$13596$Uaprr
              '-1
              g$start$13609$Uaprr)
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$13596$Uaprr
                '-1
                g$end$13610$Uaprr)))
          (g$bitwise-arithmetic-shift-left$13596$Uaprr
            g$from$13611$Uaprr
            g$start$13609$Uaprr)
          g$to$13608$Uaprr))))
   (g$bitwise-arithmetic-shift-left$13596$Uaprr
     g$bitwise-arithmetic-shift-left$13627$Uaprr
     (case-lambda
       ((g$ei1$13612$Uaprr g$ei2$13613$Uaprr)
        (bitwise-arithmetic-shift
          g$ei1$13612$Uaprr
          g$ei2$13613$Uaprr))))
   (g$bitwise-arithmetic-shift-right$13597$Uaprr
     g$bitwise-arithmetic-shift-right$13628$Uaprr
     (case-lambda
       ((g$ei1$13614$Uaprr g$ei2$13615$Uaprr)
        (bitwise-arithmetic-shift
          g$ei1$13614$Uaprr
          (- g$ei2$13615$Uaprr)))))
   (g$bitwise-rotate-bit-field$13598$Uaprr
     g$bitwise-rotate-bit-field$13629$Uaprr
     (case-lambda
       ((g$n$13616$Uaprr
          g$start$13617$Uaprr
          g$end$13618$Uaprr
          g$count$13619$Uaprr)
        ((case-lambda
           ((g$width$13620$Uaprr)
            (if (g$positive?$12502$Uaprr g$width$13620$Uaprr)
              ((case-lambda
                 ((g$count$13621$Uaprr g$field$13622$Uaprr)
                  (g$bitwise-copy-bit-field$13595$Uaprr
                    g$n$13616$Uaprr
                    g$start$13617$Uaprr
                    g$end$13618$Uaprr
                    (bitwise-ior
                      (g$bitwise-arithmetic-shift-left$13596$Uaprr
                        g$field$13622$Uaprr
                        g$count$13621$Uaprr)
                      (g$bitwise-arithmetic-shift-right$13597$Uaprr
                        g$field$13622$Uaprr
                        (- g$width$13620$Uaprr g$count$13621$Uaprr))))))
               (g$mod$12456$Uaprr
                 g$count$13619$Uaprr
                 g$width$13620$Uaprr)
               (g$bitwise-bit-field$13594$Uaprr
                 g$n$13616$Uaprr
                 g$start$13617$Uaprr
                 g$end$13618$Uaprr))
              g$n$13616$Uaprr)))
         (- g$end$13618$Uaprr g$start$13617$Uaprr))))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$greatest-fixnum$13681$Uaprr
     g$greatest-fixnum$13953$Uaprr
     (case-lambda (() '2147483647)))
   (g$least-fixnum$13682$Uaprr
     g$least-fixnum$13954$Uaprr
     (case-lambda (() '-2147483648)))
   (g$fxarithmetic-shift$13683$Uaprr
     g$fxarithmetic-shift$13955$Uaprr
     (case-lambda
       ((g$x$13817$Uaprr g$k$13818$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x$13817$Uaprr))
            (assertion-violation
              'fxarithmetic-shift
              '"not a fixnum"
              g$x$13817$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$k$13818$Uaprr))
            (assertion-violation
              'fxarithmetic-shift
              '"not a fixnum"
              g$k$13818$Uaprr)
            (void))
          ((case-lambda
             (()
              (if ($fx=? g$k$13818$Uaprr '0)
                g$x$13817$Uaprr
                (if ($fx<? g$k$13818$Uaprr '0)
                  ($fxarithmetic-shift-right
                    g$x$13817$Uaprr
                    ($$fx- g$k$13818$Uaprr))
                  ((case-lambda
                     ((g$i$13819$Uaprr)
                      (begin
                        (if ($fx>?
                              (abs g$x$13817$Uaprr)
                              (abs g$i$13819$Uaprr))
                          (raise
                            (condition
                              (g$make-implementation-restriction-violation$13218$Uaprr)
                              (g$make-who-condition$13200$Uaprr
                                'fxarithmetic-shift)
                              (g$make-message-condition$13140$Uaprr
                                '"arithmetic overflow")
                              (g$make-irritants-condition$13190$Uaprr
                                g$x$13817$Uaprr
                                g$k$13818$Uaprr)))
                          (void))
                        g$i$13819$Uaprr)))
                   ($fxarithmetic-shift-left
                     g$x$13817$Uaprr
                     g$k$13818$Uaprr)))))))))))
   (g$fxbit-count$13684$Uaprr
     g$fxbit-count$13956$Uaprr
     (case-lambda
       ((g$x$13820$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x$13820$Uaprr))
            (assertion-violation
              'fxbit-count
              '"not a fixnum"
              g$x$13820$Uaprr)
            (void))
          ((case-lambda
             (()
              (if ($fx<=? g$x$13820$Uaprr '0)
                ($fxnot
                  (g$fxbit-count$13684$Uaprr ($fxnot g$x$13820$Uaprr)))
                ((letrec ((g$f$13821$Uaprr
                            (case-lambda
                              ((g$count$13822$Uaprr g$x$13823$Uaprr)
                               (if ($fx<? '0 g$x$13823$Uaprr)
                                 (g$f$13821$Uaprr
                                   ($$fx+
                                     g$count$13822$Uaprr
                                     ($fxand g$x$13823$Uaprr '1))
                                   ($fxarithmetic-shift-right
                                     g$x$13823$Uaprr
                                     '1))
                                 g$count$13822$Uaprr)))))
                   g$f$13821$Uaprr)
                 '0
                 g$x$13820$Uaprr)))))))))
   (g$fxlength$13685$Uaprr
     g$fxlength$13957$Uaprr
     (case-lambda
       ((g$x$13824$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x$13824$Uaprr))
            (assertion-violation
              'fxlength
              '"not a fixnum"
              g$x$13824$Uaprr)
            (void))
          ((case-lambda
             (()
              (if ($fx<? g$x$13824$Uaprr '0)
                (g$fxlength$13685$Uaprr ($fxnot g$x$13824$Uaprr))
                ((letrec ((g$f$13825$Uaprr
                            (case-lambda
                              ((g$count$13826$Uaprr g$x$13827$Uaprr)
                               (if ($fx<? '0 g$x$13827$Uaprr)
                                 (g$f$13825$Uaprr
                                   ($$fx+ g$count$13826$Uaprr '1)
                                   ($fxarithmetic-shift-right
                                     g$x$13827$Uaprr
                                     '1))
                                 g$count$13826$Uaprr)))))
                   g$f$13825$Uaprr)
                 '0
                 g$x$13824$Uaprr)))))))))
   (g$fxfirst-bit-set$13686$Uaprr
     g$fxfirst-bit-set$13958$Uaprr
     (case-lambda
       ((g$x$13828$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x$13828$Uaprr))
            (assertion-violation
              'fxfirst-bit-set
              '"not a fixnum"
              g$x$13828$Uaprr)
            (void))
          ((case-lambda
             (()
              (if ($fx=? g$x$13828$Uaprr '0)
                '-1
                ((letrec ((g$f$13829$Uaprr
                            (case-lambda
                              ((g$count$13830$Uaprr g$x$13831$Uaprr)
                               (if (not ($fx=? '0 g$x$13831$Uaprr))
                                 (if ($fx=?
                                       '1
                                       ($fxand '1 g$x$13831$Uaprr))
                                   g$count$13830$Uaprr
                                   (g$f$13829$Uaprr
                                     ($$fx+ g$count$13830$Uaprr '1)
                                     ($fxarithmetic-shift-right
                                       g$x$13831$Uaprr
                                       '1)))
                                 g$count$13830$Uaprr)))))
                   g$f$13829$Uaprr)
                 '0
                 g$x$13828$Uaprr)))))))))
   (g$fxbit-set?$13687$Uaprr
     g$fxbit-set?$13959$Uaprr
     (case-lambda
       ((g$x$13832$Uaprr g$k$13833$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x$13832$Uaprr))
            (assertion-violation
              'fxbit-set?
              '"not a fixnum"
              g$x$13832$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$k$13833$Uaprr))
            (assertion-violation
              'fxbit-set?
              '"not a fixnum"
              g$k$13833$Uaprr)
            (void))
          ((case-lambda
             (()
              (begin
                (if ($fx<? g$k$13833$Uaprr '0)
                  (assertion-violation
                    'fxbit-set?
                    '"cannot be negative"
                    g$k$13833$Uaprr)
                  (void))
                (if ($fx>=? g$k$13833$Uaprr '32)
                  (assertion-violation
                    'fxbit-set?
                    '"cannot be larger than 31"
                    g$k$13833$Uaprr)
                  (void))
                (if ($fx=? '0 g$x$13832$Uaprr)
                  '#f
                  ((letrec ((g$f$13834$Uaprr
                              (case-lambda
                                ((g$count$13835$Uaprr g$x$13836$Uaprr)
                                 (if (not ($fx=? '0 g$x$13836$Uaprr))
                                   (if (if ($fx=?
                                             g$count$13835$Uaprr
                                             g$k$13833$Uaprr)
                                         (begin
                                           '#f
                                           ($fx=?
                                             '1
                                             ($fxand
                                               '1
                                               g$x$13836$Uaprr)))
                                         '#f)
                                     '#t
                                     (g$f$13834$Uaprr
                                       ($$fx+ g$count$13835$Uaprr '1)
                                       ($fxarithmetic-shift-right
                                         g$x$13836$Uaprr
                                         '1)))
                                   '#f)))))
                     g$f$13834$Uaprr)
                   '0
                   g$x$13832$Uaprr))))))))))
   (g$fxnot$13688$Uaprr
     g$fxnot$13960$Uaprr
     (case-lambda
       ((g$x1$13837$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x1$13837$Uaprr))
            (assertion-violation
              'fxnot
              '"not a fixnum"
              g$x1$13837$Uaprr)
            (void))
          ((case-lambda (() ($fxnot g$x1$13837$Uaprr))))))))
   (g$fx=?$13739$Uaprr
     g$fx=?$13961$Uaprr
     (case-lambda
       ((g$x1$13838$Uaprr g$x2$13839$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x1$13838$Uaprr))
            (assertion-violation 'fx=? '"not a fixnum" g$x1$13838$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$x2$13839$Uaprr))
            (assertion-violation 'fx=? '"not a fixnum" g$x2$13839$Uaprr)
            (void))
          ($fx=? g$x1$13838$Uaprr g$x2$13839$Uaprr)))
       ((g$x1$13840$Uaprr g$x2$13841$Uaprr . g$rest$13842$Uaprr)
        ((letrec ((g$f$13843$Uaprr
                    (case-lambda
                      ((g$a$13844$Uaprr g$b$13845$Uaprr)
                       (if (null? g$b$13845$Uaprr)
                         '#t
                         (if (g$fx=?$13739$Uaprr
                               g$a$13844$Uaprr
                               ($car g$b$13845$Uaprr))
                           (g$f$13843$Uaprr
                             ($car g$b$13845$Uaprr)
                             ($cdr g$b$13845$Uaprr))
                           '#f))))))
           g$f$13843$Uaprr)
         g$x1$13840$Uaprr
         (cons g$x2$13841$Uaprr g$rest$13842$Uaprr)))))
   (g$fx<?$13740$Uaprr
     g$fx<?$13962$Uaprr
     (case-lambda
       ((g$x1$13846$Uaprr g$x2$13847$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x1$13846$Uaprr))
            (assertion-violation 'fx<? '"not a fixnum" g$x1$13846$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$x2$13847$Uaprr))
            (assertion-violation 'fx<? '"not a fixnum" g$x2$13847$Uaprr)
            (void))
          ($fx<? g$x1$13846$Uaprr g$x2$13847$Uaprr)))
       ((g$x1$13848$Uaprr g$x2$13849$Uaprr . g$rest$13850$Uaprr)
        ((letrec ((g$f$13851$Uaprr
                    (case-lambda
                      ((g$a$13852$Uaprr g$b$13853$Uaprr)
                       (if (null? g$b$13853$Uaprr)
                         '#t
                         (if (g$fx<?$13740$Uaprr
                               g$a$13852$Uaprr
                               ($car g$b$13853$Uaprr))
                           (g$f$13851$Uaprr
                             ($car g$b$13853$Uaprr)
                             ($cdr g$b$13853$Uaprr))
                           '#f))))))
           g$f$13851$Uaprr)
         g$x1$13848$Uaprr
         (cons g$x2$13849$Uaprr g$rest$13850$Uaprr)))))
   (g$fx<=?$13741$Uaprr
     g$fx<=?$13963$Uaprr
     (case-lambda
       ((g$x1$13854$Uaprr g$x2$13855$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x1$13854$Uaprr))
            (assertion-violation
              'fx<=?
              '"not a fixnum"
              g$x1$13854$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$x2$13855$Uaprr))
            (assertion-violation
              'fx<=?
              '"not a fixnum"
              g$x2$13855$Uaprr)
            (void))
          ($fx<=? g$x1$13854$Uaprr g$x2$13855$Uaprr)))
       ((g$x1$13856$Uaprr g$x2$13857$Uaprr . g$rest$13858$Uaprr)
        ((letrec ((g$f$13859$Uaprr
                    (case-lambda
                      ((g$a$13860$Uaprr g$b$13861$Uaprr)
                       (if (null? g$b$13861$Uaprr)
                         '#t
                         (if (g$fx<=?$13741$Uaprr
                               g$a$13860$Uaprr
                               ($car g$b$13861$Uaprr))
                           (g$f$13859$Uaprr
                             ($car g$b$13861$Uaprr)
                             ($cdr g$b$13861$Uaprr))
                           '#f))))))
           g$f$13859$Uaprr)
         g$x1$13856$Uaprr
         (cons g$x2$13857$Uaprr g$rest$13858$Uaprr)))))
   (g$fx>?$13742$Uaprr
     g$fx>?$13964$Uaprr
     (case-lambda
       ((g$x1$13862$Uaprr g$x2$13863$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x1$13862$Uaprr))
            (assertion-violation 'fx>? '"not a fixnum" g$x1$13862$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$x2$13863$Uaprr))
            (assertion-violation 'fx>? '"not a fixnum" g$x2$13863$Uaprr)
            (void))
          ($fx>? g$x1$13862$Uaprr g$x2$13863$Uaprr)))
       ((g$x1$13864$Uaprr g$x2$13865$Uaprr . g$rest$13866$Uaprr)
        ((letrec ((g$f$13867$Uaprr
                    (case-lambda
                      ((g$a$13868$Uaprr g$b$13869$Uaprr)
                       (if (null? g$b$13869$Uaprr)
                         '#t
                         (if (g$fx>?$13742$Uaprr
                               g$a$13868$Uaprr
                               ($car g$b$13869$Uaprr))
                           (g$f$13867$Uaprr
                             ($car g$b$13869$Uaprr)
                             ($cdr g$b$13869$Uaprr))
                           '#f))))))
           g$f$13867$Uaprr)
         g$x1$13864$Uaprr
         (cons g$x2$13865$Uaprr g$rest$13866$Uaprr)))))
   (g$fx>=?$13743$Uaprr
     g$fx>=?$13965$Uaprr
     (case-lambda
       ((g$x1$13870$Uaprr g$x2$13871$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x1$13870$Uaprr))
            (assertion-violation
              'fx>=?
              '"not a fixnum"
              g$x1$13870$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$x2$13871$Uaprr))
            (assertion-violation
              'fx>=?
              '"not a fixnum"
              g$x2$13871$Uaprr)
            (void))
          ($fx>=? g$x1$13870$Uaprr g$x2$13871$Uaprr)))
       ((g$x1$13872$Uaprr g$x2$13873$Uaprr . g$rest$13874$Uaprr)
        ((letrec ((g$f$13875$Uaprr
                    (case-lambda
                      ((g$a$13876$Uaprr g$b$13877$Uaprr)
                       (if (null? g$b$13877$Uaprr)
                         '#t
                         (if (g$fx>=?$13743$Uaprr
                               g$a$13876$Uaprr
                               ($car g$b$13877$Uaprr))
                           (g$f$13875$Uaprr
                             ($car g$b$13877$Uaprr)
                             ($cdr g$b$13877$Uaprr))
                           '#f))))))
           g$f$13875$Uaprr)
         g$x1$13872$Uaprr
         (cons g$x2$13873$Uaprr g$rest$13874$Uaprr)))))
   (g$fxand$13791$Uaprr
     g$fxand$13966$Uaprr
     (case-lambda
       (() '-1)
       ((g$x1$13878$Uaprr g$x2$13879$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x1$13878$Uaprr))
            (assertion-violation
              'fxand
              '"not a fixnum"
              g$x1$13878$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$x2$13879$Uaprr))
            (assertion-violation
              'fxand
              '"not a fixnum"
              g$x2$13879$Uaprr)
            (void))
          ($fxand g$x1$13878$Uaprr g$x2$13879$Uaprr)))
       (g$args$13880$Uaprr
        (g$fold-left$11725$Uaprr
          g$fxand$13791$Uaprr
          (g$fxand$13791$Uaprr)
          g$args$13880$Uaprr))))
   (g$fxior$13792$Uaprr
     g$fxior$13967$Uaprr
     (case-lambda
       (() '0)
       ((g$x1$13881$Uaprr g$x2$13882$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x1$13881$Uaprr))
            (assertion-violation
              'fxior
              '"not a fixnum"
              g$x1$13881$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$x2$13882$Uaprr))
            (assertion-violation
              'fxior
              '"not a fixnum"
              g$x2$13882$Uaprr)
            (void))
          ($fxior g$x1$13881$Uaprr g$x2$13882$Uaprr)))
       (g$args$13883$Uaprr
        (g$fold-left$11725$Uaprr
          g$fxior$13792$Uaprr
          (g$fxior$13792$Uaprr)
          g$args$13883$Uaprr))))
   (g$fxxor$13793$Uaprr
     g$fxxor$13968$Uaprr
     (case-lambda
       (() '0)
       ((g$x1$13884$Uaprr g$x2$13885$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x1$13884$Uaprr))
            (assertion-violation
              'fxxor
              '"not a fixnum"
              g$x1$13884$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$x2$13885$Uaprr))
            (assertion-violation
              'fxxor
              '"not a fixnum"
              g$x2$13885$Uaprr)
            (void))
          ($fxxor g$x1$13884$Uaprr g$x2$13885$Uaprr)))
       (g$args$13886$Uaprr
        (g$fold-left$11725$Uaprr
          g$fxxor$13793$Uaprr
          (g$fxxor$13793$Uaprr)
          g$args$13886$Uaprr))))
   (g$fxdiv$13794$Uaprr
     g$fxdiv$13969$Uaprr
     (case-lambda
       ((g$x1$13887$Uaprr g$x2$13888$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x1$13887$Uaprr))
            (assertion-violation
              'fxdiv
              '"not a fixnum"
              g$x1$13887$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$x2$13888$Uaprr))
            (assertion-violation
              'fxdiv
              '"not a fixnum"
              g$x2$13888$Uaprr)
            (void))
          ((case-lambda
             (()
              (begin
                (if ($fx=? '0 g$x2$13888$Uaprr)
                  (assertion-violation
                    'fxdiv
                    '"divide by zero"
                    g$x1$13887$Uaprr
                    g$x2$13888$Uaprr)
                  (void))
                (if (if ($fx=? '-1 g$x2$13888$Uaprr)
                      (begin
                        '#f
                        ($fx=?
                          (g$least-fixnum$13682$Uaprr)
                          g$x1$13887$Uaprr))
                      '#f)
                  (assertion-violation
                    'fxdiv
                    '"integer overflow"
                    g$x1$13887$Uaprr
                    g$x2$13888$Uaprr)
                  (void))
                (if ($fx=? '0 g$x1$13887$Uaprr)
                  '0
                  (if ($fx<? '0 g$x1$13887$Uaprr)
                    ($fxdiv0 g$x1$13887$Uaprr g$x2$13888$Uaprr)
                    (if ($fx<? '0 g$x2$13888$Uaprr)
                      ($fxdiv0
                        ($$fx-
                          g$x1$13887$Uaprr
                          ($$fx- g$x2$13888$Uaprr '1))
                        g$x2$13888$Uaprr)
                      ($fxdiv0
                        ($$fx+
                          g$x1$13887$Uaprr
                          ($$fx+ g$x2$13888$Uaprr '1))
                        g$x2$13888$Uaprr))))))))))))
   (g$fxmod$13795$Uaprr
     g$fxmod$13970$Uaprr
     (case-lambda
       ((g$x1$13889$Uaprr g$x2$13890$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x1$13889$Uaprr))
            (assertion-violation
              'fxmod
              '"not a fixnum"
              g$x1$13889$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$x2$13890$Uaprr))
            (assertion-violation
              'fxmod
              '"not a fixnum"
              g$x2$13890$Uaprr)
            (void))
          ((case-lambda
             (()
              ($$fx-
                g$x1$13889$Uaprr
                ($$fx*
                  (g$fxdiv$13794$Uaprr
                    g$x1$13889$Uaprr
                    g$x2$13890$Uaprr)
                  g$x2$13890$Uaprr)))))))))
   (g$fxmod0$13796$Uaprr
     g$fxmod0$13971$Uaprr
     (case-lambda
       ((g$x1$13891$Uaprr g$x2$13892$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x1$13891$Uaprr))
            (assertion-violation
              'fxmod0
              '"not a fixnum"
              g$x1$13891$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$x2$13892$Uaprr))
            (assertion-violation
              'fxmod0
              '"not a fixnum"
              g$x2$13892$Uaprr)
            (void))
          ((case-lambda
             (()
              (begin
                (if ($fx=? '0 g$x2$13892$Uaprr)
                  (assertion-violation
                    'fxmod0
                    '"divide by zero"
                    g$x1$13891$Uaprr
                    g$x2$13892$Uaprr)
                  (void))
                (if (if ($fx=? '-1 g$x2$13892$Uaprr)
                      (begin
                        '#f
                        ($fx=?
                          (g$least-fixnum$13682$Uaprr)
                          g$x1$13891$Uaprr))
                      '#f)
                  (assertion-violation
                    'fxmod0
                    '"integer overflow"
                    g$x1$13891$Uaprr
                    g$x2$13892$Uaprr)
                  (void))
                ($fxmod0 g$x1$13891$Uaprr g$x2$13892$Uaprr)))))))))
   (g$fxdiv-and-mod$13797$Uaprr
     g$fxdiv-and-mod$13972$Uaprr
     (case-lambda
       ((g$x1$13893$Uaprr g$x2$13894$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x1$13893$Uaprr))
            (assertion-violation
              'fxdiv-and-mod
              '"not a fixnum"
              g$x1$13893$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$x2$13894$Uaprr))
            (assertion-violation
              'fxdiv-and-mod
              '"not a fixnum"
              g$x2$13894$Uaprr)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$d$13895$Uaprr)
                  (values
                    g$d$13895$Uaprr
                    ($$fx-
                      g$x1$13893$Uaprr
                      ($$fx* g$d$13895$Uaprr g$x2$13894$Uaprr)))))
               (g$fxdiv$13794$Uaprr
                 g$x1$13893$Uaprr
                 g$x2$13894$Uaprr)))))))))
   (g$fxdiv0$13798$Uaprr
     g$fxdiv0$13973$Uaprr
     (case-lambda
       ((g$x1$13896$Uaprr g$x2$13897$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x1$13896$Uaprr))
            (assertion-violation
              'fxdiv0
              '"not a fixnum"
              g$x1$13896$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$x2$13897$Uaprr))
            (assertion-violation
              'fxdiv0
              '"not a fixnum"
              g$x2$13897$Uaprr)
            (void))
          ((case-lambda
             (()
              (begin
                (if ($fx=? '0 g$x2$13897$Uaprr)
                  (assertion-violation
                    'fxdiv0
                    '"divide by zero"
                    g$x1$13896$Uaprr
                    g$x2$13897$Uaprr)
                  (void))
                (if (if ($fx=? '-1 g$x2$13897$Uaprr)
                      (begin
                        '#f
                        ($fx=?
                          (g$least-fixnum$13682$Uaprr)
                          g$x1$13896$Uaprr))
                      '#f)
                  (assertion-violation
                    'fxdiv0
                    '"integer overflow"
                    g$x1$13896$Uaprr
                    g$x2$13897$Uaprr)
                  (void))
                ($fxdiv0 g$x1$13896$Uaprr g$x2$13897$Uaprr)))))))))
   (g$fxdiv0-and-mod0$13799$Uaprr
     g$fxdiv0-and-mod0$13974$Uaprr
     (case-lambda
       ((g$x1$13898$Uaprr g$x2$13899$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$x1$13898$Uaprr))
            (assertion-violation
              'fxdiv0-and-mod0
              '"not a fixnum"
              g$x1$13898$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$x2$13899$Uaprr))
            (assertion-violation
              'fxdiv0-and-mod0
              '"not a fixnum"
              g$x2$13899$Uaprr)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$d$13900$Uaprr)
                  (values
                    g$d$13900$Uaprr
                    ($$fx-
                      g$x1$13898$Uaprr
                      ($$fx* g$d$13900$Uaprr g$x2$13899$Uaprr)))))
               (g$fxdiv0$13798$Uaprr
                 g$x1$13898$Uaprr
                 g$x2$13899$Uaprr)))))))))
   (g$fxpositive?$13800$Uaprr
     g$fxpositive?$13975$Uaprr
     (case-lambda
       ((g$r$13901$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$r$13901$Uaprr))
            (assertion-violation
              'fxpositive?
              '"not a fixnum"
              g$r$13901$Uaprr)
            (void))
          ((case-lambda (() ($fx<? '0 g$r$13901$Uaprr))))))))
   (g$fxnegative?$13801$Uaprr
     g$fxnegative?$13976$Uaprr
     (case-lambda
       ((g$r$13902$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$r$13902$Uaprr))
            (assertion-violation
              'fxnegative?
              '"not a fixnum"
              g$r$13902$Uaprr)
            (void))
          ((case-lambda (() ($fx>? '0 g$r$13902$Uaprr))))))))
   (g$fxzero?$13802$Uaprr
     g$fxzero?$13977$Uaprr
     (case-lambda
       ((g$r$13903$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$r$13903$Uaprr))
            (assertion-violation
              'fxzero?
              '"not a fixnum"
              g$r$13903$Uaprr)
            (void))
          ((case-lambda (() ($fx=? '0 g$r$13903$Uaprr))))))))
   (g$fxeven?$13803$Uaprr
     g$fxeven?$13978$Uaprr
     (case-lambda
       ((g$n$13904$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$n$13904$Uaprr))
            (assertion-violation
              'fxeven?
              '"not a fixnum"
              g$n$13904$Uaprr)
            (void))
          ((case-lambda
             (() ($fx=? '0 ($fxand g$n$13904$Uaprr '1)))))))))
   (g$fxodd?$13804$Uaprr
     g$fxodd?$13979$Uaprr
     (case-lambda
       ((g$n$13905$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$n$13905$Uaprr))
            (assertion-violation
              'fxodd?
              '"not a fixnum"
              g$n$13905$Uaprr)
            (void))
          ((case-lambda
             (() ($fx=? '1 ($fxand g$n$13905$Uaprr '1)))))))))
   (g$fxmax$13805$Uaprr
     g$fxmax$13980$Uaprr
     (case-lambda
       ((g$a$13906$Uaprr . g$rest$13907$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$a$13906$Uaprr))
            (assertion-violation 'fxmax '"not a fixnum" g$a$13906$Uaprr)
            (void))
          (g$fold-left$11725$Uaprr
            (case-lambda
              ((g$a$13908$Uaprr g$b$13909$Uaprr)
               (if (g$fx<?$13740$Uaprr g$a$13908$Uaprr g$b$13909$Uaprr)
                 g$b$13909$Uaprr
                 g$a$13908$Uaprr)))
            g$a$13906$Uaprr
            g$rest$13907$Uaprr)))))
   (g$fxmin$13806$Uaprr
     g$fxmin$13981$Uaprr
     (case-lambda
       ((g$a$13910$Uaprr . g$rest$13911$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$a$13910$Uaprr))
            (assertion-violation 'fxmin '"not a fixnum" g$a$13910$Uaprr)
            (void))
          (g$fold-left$11725$Uaprr
            (case-lambda
              ((g$a$13912$Uaprr g$b$13913$Uaprr)
               (if (g$fx>?$13742$Uaprr g$a$13912$Uaprr g$b$13913$Uaprr)
                 g$b$13913$Uaprr
                 g$a$13912$Uaprr)))
            g$a$13910$Uaprr
            g$rest$13911$Uaprr)))))
   (g$fx*/carry$13807$Uaprr
     g$fx*/carry$13982$Uaprr
     (case-lambda
       ((g$fx1$13914$Uaprr g$fx2$13915$Uaprr g$fx3$13916$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$fx1$13914$Uaprr))
            (assertion-violation
              'fx*/carry
              '"not a fixnum"
              g$fx1$13914$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$fx2$13915$Uaprr))
            (assertion-violation
              'fx*/carry
              '"not a fixnum"
              g$fx2$13915$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$fx3$13916$Uaprr))
            (assertion-violation
              'fx*/carry
              '"not a fixnum"
              g$fx3$13916$Uaprr)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$s$13917$Uaprr g$e$13918$Uaprr)
                  (values
                    (g$mod0$12457$Uaprr g$s$13917$Uaprr g$e$13918$Uaprr)
                    (div0 g$s$13917$Uaprr g$e$13918$Uaprr))))
               (+ (* g$fx1$13914$Uaprr g$fx2$13915$Uaprr)
                  g$fx3$13916$Uaprr)
               (expt '2 (g$fixnum-width$12470$Uaprr))))))))))
   (g$fx-/carry$13808$Uaprr
     g$fx-/carry$13983$Uaprr
     (case-lambda
       ((g$fx1$13919$Uaprr g$fx2$13920$Uaprr g$fx3$13921$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$fx1$13919$Uaprr))
            (assertion-violation
              'fx-/carry
              '"not a fixnum"
              g$fx1$13919$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$fx2$13920$Uaprr))
            (assertion-violation
              'fx-/carry
              '"not a fixnum"
              g$fx2$13920$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$fx3$13921$Uaprr))
            (assertion-violation
              'fx-/carry
              '"not a fixnum"
              g$fx3$13921$Uaprr)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$s$13922$Uaprr g$e$13923$Uaprr)
                  (values
                    (g$mod0$12457$Uaprr g$s$13922$Uaprr g$e$13923$Uaprr)
                    (div0 g$s$13922$Uaprr g$e$13923$Uaprr))))
               (- g$fx1$13919$Uaprr g$fx2$13920$Uaprr g$fx3$13921$Uaprr)
               (expt '2 (g$fixnum-width$12470$Uaprr))))))))))
   (g$fx+/carry$13809$Uaprr
     g$fx+/carry$13984$Uaprr
     (case-lambda
       ((g$fx1$13924$Uaprr g$fx2$13925$Uaprr g$fx3$13926$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$fx1$13924$Uaprr))
            (assertion-violation
              'fx+/carry
              '"not a fixnum"
              g$fx1$13924$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$fx2$13925$Uaprr))
            (assertion-violation
              'fx+/carry
              '"not a fixnum"
              g$fx2$13925$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$fx3$13926$Uaprr))
            (assertion-violation
              'fx+/carry
              '"not a fixnum"
              g$fx3$13926$Uaprr)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$s$13927$Uaprr g$e$13928$Uaprr)
                  (values
                    (g$mod0$12457$Uaprr g$s$13927$Uaprr g$e$13928$Uaprr)
                    (div0 g$s$13927$Uaprr g$e$13928$Uaprr))))
               (+ g$fx1$13924$Uaprr g$fx2$13925$Uaprr g$fx3$13926$Uaprr)
               (expt '2 (g$fixnum-width$12470$Uaprr))))))))))
   (g$fxif$13810$Uaprr
     g$fxif$13985$Uaprr
     (case-lambda
       ((g$fx1$13929$Uaprr g$fx2$13930$Uaprr g$fx3$13931$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$fx1$13929$Uaprr))
            (assertion-violation
              'fxif
              '"not a fixnum"
              g$fx1$13929$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$fx2$13930$Uaprr))
            (assertion-violation
              'fxif
              '"not a fixnum"
              g$fx2$13930$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$fx3$13931$Uaprr))
            (assertion-violation
              'fxif
              '"not a fixnum"
              g$fx3$13931$Uaprr)
            (void))
          ((case-lambda
             (()
              ($fxior
                ($fxand g$fx1$13929$Uaprr g$fx2$13930$Uaprr)
                ($fxand
                  ($fxnot g$fx1$13929$Uaprr)
                  g$fx3$13931$Uaprr)))))))))
   (g$fxcopy-bit$13811$Uaprr
     g$fxcopy-bit$13986$Uaprr
     (case-lambda
       ((g$fx1$13932$Uaprr g$fx2$13933$Uaprr g$fx3$13934$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$fx1$13932$Uaprr))
            (assertion-violation
              'fxcopy-bit
              '"not a fixnum"
              g$fx1$13932$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$fx2$13933$Uaprr))
            (assertion-violation
              'fxcopy-bit
              '"not a fixnum"
              g$fx2$13933$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$fx3$13934$Uaprr))
            (assertion-violation
              'fxcopy-bit
              '"not a fixnum"
              g$fx3$13934$Uaprr)
            (void))
          ((case-lambda
             (()
              (g$fxif$13810$Uaprr
                (g$fxarithmetic-shift-left$13814$Uaprr
                  '1
                  g$fx2$13933$Uaprr)
                (g$fxarithmetic-shift-left$13814$Uaprr
                  g$fx3$13934$Uaprr
                  g$fx2$13933$Uaprr)
                g$fx1$13932$Uaprr))))))))
   (g$fxbit-field$13812$Uaprr
     g$fxbit-field$13987$Uaprr
     (case-lambda
       ((g$fx1$13935$Uaprr g$fx2$13936$Uaprr g$fx3$13937$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$fx1$13935$Uaprr))
            (assertion-violation
              'fxbit-field
              '"not a fixnum"
              g$fx1$13935$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$fx2$13936$Uaprr))
            (assertion-violation
              'fxbit-field
              '"not a fixnum"
              g$fx2$13936$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$fx3$13937$Uaprr))
            (assertion-violation
              'fxbit-field
              '"not a fixnum"
              g$fx3$13937$Uaprr)
            (void))
          ((case-lambda
             (()
              (g$fxarithmetic-shift-right$13815$Uaprr
                ($fxand
                  g$fx1$13935$Uaprr
                  (g$fxnot$13688$Uaprr
                    (g$fxarithmetic-shift-left$13814$Uaprr
                      '-1
                      g$fx3$13937$Uaprr)))
                g$fx2$13936$Uaprr))))))))
   (g$fxcopy-bit-field$13813$Uaprr
     g$fxcopy-bit-field$13988$Uaprr
     (case-lambda
       ((g$to$13938$Uaprr
          g$start$13939$Uaprr
          g$end$13940$Uaprr
          g$from$13941$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$to$13938$Uaprr))
            (assertion-violation
              'fxcopy-bit-field
              '"not a fixnum"
              g$to$13938$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$start$13939$Uaprr))
            (assertion-violation
              'fxcopy-bit-field
              '"not a fixnum"
              g$start$13939$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$end$13940$Uaprr))
            (assertion-violation
              'fxcopy-bit-field
              '"not a fixnum"
              g$end$13940$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$from$13941$Uaprr))
            (assertion-violation
              'fxcopy-bit-field
              '"not a fixnum"
              g$from$13941$Uaprr)
            (void))
          ((case-lambda
             (()
              (g$fxif$13810$Uaprr
                ($fxand
                  (g$fxarithmetic-shift-left$13814$Uaprr
                    '-1
                    g$start$13939$Uaprr)
                  ($fxnot
                    (g$fxarithmetic-shift-left$13814$Uaprr
                      '-1
                      g$end$13940$Uaprr)))
                (g$fxarithmetic-shift-left$13814$Uaprr
                  g$from$13941$Uaprr
                  g$start$13939$Uaprr)
                g$to$13938$Uaprr))))))))
   (g$fxarithmetic-shift-left$13814$Uaprr
     g$fxarithmetic-shift-left$13989$Uaprr
     (case-lambda
       ((g$fx1$13942$Uaprr g$fx2$13943$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$fx1$13942$Uaprr))
            (assertion-violation
              'fxarithmetic-shift-left
              '"not a fixnum"
              g$fx1$13942$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$fx2$13943$Uaprr))
            (assertion-violation
              'fxarithmetic-shift-left
              '"not a fixnum"
              g$fx2$13943$Uaprr)
            (void))
          ((case-lambda
             (()
              (g$fxarithmetic-shift$13683$Uaprr
                g$fx1$13942$Uaprr
                g$fx2$13943$Uaprr))))))))
   (g$fxarithmetic-shift-right$13815$Uaprr
     g$fxarithmetic-shift-right$13990$Uaprr
     (case-lambda
       ((g$fx1$13944$Uaprr g$fx2$13945$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$fx1$13944$Uaprr))
            (assertion-violation
              'fxarithmetic-shift-right
              '"not a fixnum"
              g$fx1$13944$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$fx2$13945$Uaprr))
            (assertion-violation
              'fxarithmetic-shift-right
              '"not a fixnum"
              g$fx2$13945$Uaprr)
            (void))
          ((case-lambda
             (()
              (g$fxarithmetic-shift$13683$Uaprr
                g$fx1$13944$Uaprr
                ($$fx- g$fx2$13945$Uaprr)))))))))
   (g$fxrotate-bit-field$13816$Uaprr
     g$fxrotate-bit-field$13991$Uaprr
     (case-lambda
       ((g$n$13946$Uaprr
          g$start$13947$Uaprr
          g$end$13948$Uaprr
          g$count$13949$Uaprr)
        (begin
          (if (not (g$fixnum?$12468$Uaprr g$n$13946$Uaprr))
            (assertion-violation
              'fxrotate-bit-field
              '"not a fixnum"
              g$n$13946$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$start$13947$Uaprr))
            (assertion-violation
              'fxrotate-bit-field
              '"not a fixnum"
              g$start$13947$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$end$13948$Uaprr))
            (assertion-violation
              'fxrotate-bit-field
              '"not a fixnum"
              g$end$13948$Uaprr)
            (void))
          (if (not (g$fixnum?$12468$Uaprr g$count$13949$Uaprr))
            (assertion-violation
              'fxrotate-bit-field
              '"not a fixnum"
              g$count$13949$Uaprr)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$width$13950$Uaprr)
                  (if (g$fxpositive?$13800$Uaprr g$width$13950$Uaprr)
                    ((case-lambda
                       ((g$count$13951$Uaprr g$field$13952$Uaprr)
                        (g$fxcopy-bit-field$13813$Uaprr
                          g$n$13946$Uaprr
                          g$start$13947$Uaprr
                          g$end$13948$Uaprr
                          ($fxior
                            (g$fxarithmetic-shift-left$13814$Uaprr
                              g$field$13952$Uaprr
                              g$count$13951$Uaprr)
                            (g$fxarithmetic-shift-right$13815$Uaprr
                              g$field$13952$Uaprr
                              ($$fx-
                                g$width$13950$Uaprr
                                g$count$13951$Uaprr))))))
                     (g$fxmod$13795$Uaprr
                       g$count$13949$Uaprr
                       g$width$13950$Uaprr)
                     (g$fxbit-field$13812$Uaprr
                       g$n$13946$Uaprr
                       g$start$13947$Uaprr
                       g$end$13948$Uaprr))
                    g$n$13946$Uaprr)))
               ($$fx- g$end$13948$Uaprr g$start$13947$Uaprr))))))))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$flmod$13992$Uaprr
     g$flmod$14069$Uaprr
     (case-lambda
       ((g$x1$14022$Uaprr g$x2$14023$Uaprr)
        (fl- g$x1$14022$Uaprr
             (fl* (fldiv g$x1$14022$Uaprr g$x2$14023$Uaprr)
                  g$x2$14023$Uaprr)))))
   (g$flmod0$13993$Uaprr
     g$flmod0$14070$Uaprr
     (case-lambda
       ((g$x1$14024$Uaprr g$x2$14025$Uaprr)
        (fl- g$x1$14024$Uaprr
             (fl* (fldiv0 g$x1$14024$Uaprr g$x2$14025$Uaprr)
                  g$x2$14025$Uaprr)))))
   (g$fldiv-and-mod$13994$Uaprr
     g$fldiv-and-mod$14071$Uaprr
     (case-lambda
       ((g$x1$14026$Uaprr g$x2$14027$Uaprr)
        ((case-lambda
           ((g$d$14028$Uaprr)
            (values
              g$d$14028$Uaprr
              (fl- g$x1$14026$Uaprr
                   (fl* g$d$14028$Uaprr g$x2$14027$Uaprr)))))
         (fldiv g$x1$14026$Uaprr g$x2$14027$Uaprr)))))
   (g$fldiv0-and-mod0$13995$Uaprr
     g$fldiv0-and-mod0$14072$Uaprr
     (case-lambda
       ((g$x1$14029$Uaprr g$x2$14030$Uaprr)
        ((case-lambda
           ((g$d$14031$Uaprr)
            (values
              g$d$14031$Uaprr
              (fl- g$x1$14029$Uaprr
                   (fl* g$d$14031$Uaprr g$x2$14030$Uaprr)))))
         (fldiv0 g$x1$14029$Uaprr g$x2$14030$Uaprr)))))
   (g$flinteger?$13996$Uaprr
     g$flinteger?$14073$Uaprr
     (case-lambda
       ((g$fl$14032$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$fl$14032$Uaprr))
            (assertion-violation
              'flinteger?
              '"not a flonum"
              g$fl$14032$Uaprr)
            (void))
          (fl=? '0.0 (g$flmod$13992$Uaprr g$fl$14032$Uaprr '1.0))))))
   (g$flfinite?$13997$Uaprr
     g$flfinite?$14074$Uaprr
     (case-lambda
       ((g$fl$14033$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$fl$14033$Uaprr))
            (assertion-violation
              'flfinite?
              '"not a flonum"
              g$fl$14033$Uaprr)
            (void))
          (not (g$flinfinite?$13998$Uaprr g$fl$14033$Uaprr))))))
   (g$flinfinite?$13998$Uaprr
     g$flinfinite?$14075$Uaprr
     (case-lambda
       ((g$fl$14034$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$fl$14034$Uaprr))
            (assertion-violation
              'flinfinite?
              '"not a flonum"
              g$fl$14034$Uaprr)
            (void))
          (clr-call-internal
            'system.double
            'isinfinity
            '()
            g$fl$14034$Uaprr)))))
   (g$flnan?$13999$Uaprr
     g$flnan?$14076$Uaprr
     (case-lambda
       ((g$fl$14035$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$fl$14035$Uaprr))
            (assertion-violation
              'flnan?
              '"not a flonum"
              g$fl$14035$Uaprr)
            (void))
          (clr-call-internal
            'system.double
            'isnan
            '()
            g$fl$14035$Uaprr)))))
   (g$flsin$14000$Uaprr
     g$flsin$14077$Uaprr
     (case-lambda
       ((g$fl$14036$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$fl$14036$Uaprr))
            (assertion-violation
              'flsin
              '"not a flonum"
              g$fl$14036$Uaprr)
            (void))
          (clr-call-internal 'system.math 'sin '() g$fl$14036$Uaprr)))))
   (g$flcos$14001$Uaprr
     g$flcos$14078$Uaprr
     (case-lambda
       ((g$fl$14037$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$fl$14037$Uaprr))
            (assertion-violation
              'flcos
              '"not a flonum"
              g$fl$14037$Uaprr)
            (void))
          (clr-call-internal 'system.math 'cos '() g$fl$14037$Uaprr)))))
   (g$fltan$14002$Uaprr
     g$fltan$14079$Uaprr
     (case-lambda
       ((g$fl$14038$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$fl$14038$Uaprr))
            (assertion-violation
              'fltan
              '"not a flonum"
              g$fl$14038$Uaprr)
            (void))
          (clr-call-internal 'system.math 'tan '() g$fl$14038$Uaprr)))))
   (g$flasin$14003$Uaprr
     g$flasin$14080$Uaprr
     (case-lambda
       ((g$fl$14039$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$fl$14039$Uaprr))
            (assertion-violation
              'flasin
              '"not a flonum"
              g$fl$14039$Uaprr)
            (void))
          (clr-call-internal
            'system.math
            'asin
            '()
            g$fl$14039$Uaprr)))))
   (g$flacos$14004$Uaprr
     g$flacos$14081$Uaprr
     (case-lambda
       ((g$fl$14040$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$fl$14040$Uaprr))
            (assertion-violation
              'flacos
              '"not a flonum"
              g$fl$14040$Uaprr)
            (void))
          (clr-call-internal
            'system.math
            'acos
            '()
            g$fl$14040$Uaprr)))))
   (g$flatan$14005$Uaprr
     g$flatan$14082$Uaprr
     (case-lambda
       ((g$fl$14041$Uaprr)
        (clr-call-internal 'system.math 'atan '() g$fl$14041$Uaprr))
       ((g$fl1$14042$Uaprr g$fl2$14043$Uaprr)
        (clr-call-internal
          'system.math
          'atan2
          '()
          g$fl1$14042$Uaprr
          g$fl2$14043$Uaprr))))
   (g$fllog$14006$Uaprr
     g$fllog$14083$Uaprr
     (case-lambda
       ((g$fl$14044$Uaprr)
        (clr-call-internal 'system.math 'log '() g$fl$14044$Uaprr))
       ((g$fl1$14045$Uaprr g$fl2$14046$Uaprr)
        (clr-call-internal
          'system.math
          'log
          '()
          g$fl1$14045$Uaprr
          g$fl2$14046$Uaprr))))
   (g$flsqrt$14007$Uaprr
     g$flsqrt$14084$Uaprr
     (case-lambda
       ((g$fl$14047$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$fl$14047$Uaprr))
            (assertion-violation
              'flsqrt
              '"not a flonum"
              g$fl$14047$Uaprr)
            (void))
          (clr-call-internal
            'system.math
            'sqrt
            '()
            g$fl$14047$Uaprr)))))
   (g$flexp$14008$Uaprr
     g$flexp$14085$Uaprr
     (case-lambda
       ((g$fl$14048$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$fl$14048$Uaprr))
            (assertion-violation
              'flexp
              '"not a flonum"
              g$fl$14048$Uaprr)
            (void))
          (clr-call-internal 'system.math 'exp '() g$fl$14048$Uaprr)))))
   (g$flexpt$14009$Uaprr
     g$flexpt$14086$Uaprr
     (case-lambda
       ((g$fl$14049$Uaprr g$n$14050$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$fl$14049$Uaprr))
            (assertion-violation
              'flexpt
              '"not a flonum"
              g$fl$14049$Uaprr)
            (void))
          (clr-call-internal
            'system.math
            'pow
            '()
            g$fl$14049$Uaprr
            g$n$14050$Uaprr)))))
   (g$flceiling$14010$Uaprr
     g$flceiling$14087$Uaprr
     (case-lambda
       ((g$fl$14051$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$fl$14051$Uaprr))
            (assertion-violation
              'flceiling
              '"not a flonum"
              g$fl$14051$Uaprr)
            (void))
          (clr-call-internal
            'system.math
            '"ceiling(double)"
            '()
            g$fl$14051$Uaprr)))))
   (g$flfloor$14011$Uaprr
     g$flfloor$14088$Uaprr
     (case-lambda
       ((g$fl$14052$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$fl$14052$Uaprr))
            (assertion-violation
              'flfloor
              '"not a flonum"
              g$fl$14052$Uaprr)
            (void))
          (clr-call-internal
            'system.math
            '"floor(double)"
            '()
            g$fl$14052$Uaprr)))))
   (g$fltruncate$14012$Uaprr
     g$fltruncate$14089$Uaprr
     (case-lambda
       ((g$fl$14053$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$fl$14053$Uaprr))
            (assertion-violation
              'fltruncate
              '"not a flonum"
              g$fl$14053$Uaprr)
            (void))
          (clr-call-internal
            'system.math
            '"truncate(double)"
            '()
            g$fl$14053$Uaprr)))))
   (g$flround$14013$Uaprr
     g$flround$14090$Uaprr
     (case-lambda
       ((g$fl$14054$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$fl$14054$Uaprr))
            (assertion-violation
              'flround
              '"not a flonum"
              g$fl$14054$Uaprr)
            (void))
          (clr-call-internal
            'system.math
            '"round(double)"
            '()
            g$fl$14054$Uaprr)))))
   (g$flabs$14014$Uaprr
     g$flabs$14091$Uaprr
     (case-lambda
       ((g$fl$14055$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$fl$14055$Uaprr))
            (assertion-violation
              'flabs
              '"not a flonum"
              g$fl$14055$Uaprr)
            (void))
          (clr-call-internal
            'system.math
            '"abs(double)"
            '()
            g$fl$14055$Uaprr)))))
   (g$flpositive?$14015$Uaprr
     g$flpositive?$14092$Uaprr
     (case-lambda
       ((g$r$14056$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$r$14056$Uaprr))
            (assertion-violation
              'flpositive?
              '"not a flonum"
              g$r$14056$Uaprr)
            (void))
          (fl<? '0.0 g$r$14056$Uaprr)))))
   (g$flnegative?$14016$Uaprr
     g$flnegative?$14093$Uaprr
     (case-lambda
       ((g$r$14057$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$r$14057$Uaprr))
            (assertion-violation
              'flnegative?
              '"not a flonum"
              g$r$14057$Uaprr)
            (void))
          (fl>? '0.0 g$r$14057$Uaprr)))))
   (g$flzero?$14017$Uaprr
     g$flzero?$14094$Uaprr
     (case-lambda
       ((g$r$14058$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$r$14058$Uaprr))
            (assertion-violation
              'flzero?
              '"not a flonum"
              g$r$14058$Uaprr)
            (void))
          (fl=? '0.0 g$r$14058$Uaprr)))))
   (g$fleven?$14018$Uaprr
     g$fleven?$14095$Uaprr
     (case-lambda
       ((g$n$14059$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$n$14059$Uaprr))
            (assertion-violation
              'fleven?
              '"not a flonum"
              g$n$14059$Uaprr)
            (void))
          (if (not (integer-valued? g$n$14059$Uaprr))
            (assertion-violation
              'fleven?
              '"not integer valued"
              g$n$14059$Uaprr)
            (void))
          (fl=? '0.0 (g$flmod$13992$Uaprr g$n$14059$Uaprr '2.0))))))
   (g$flodd?$14019$Uaprr
     g$flodd?$14096$Uaprr
     (case-lambda
       ((g$n$14060$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$n$14060$Uaprr))
            (assertion-violation
              'flodd?
              '"not a flonum"
              g$n$14060$Uaprr)
            (void))
          (if (not (integer-valued? g$n$14060$Uaprr))
            (assertion-violation
              'flodd?
              '"not integer valued"
              g$n$14060$Uaprr)
            (void))
          (fl=? '1.0 (g$flmod$13992$Uaprr g$n$14060$Uaprr '2.0))))))
   (g$flmax$14020$Uaprr
     g$flmax$14097$Uaprr
     (case-lambda
       ((g$a$14061$Uaprr . g$rest$14062$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$a$14061$Uaprr))
            (assertion-violation 'flmax '"not a flonum" g$a$14061$Uaprr)
            (void))
          (g$fold-left$11725$Uaprr
            (case-lambda
              ((g$a$14063$Uaprr g$b$14064$Uaprr)
               (if (fl<? g$a$14063$Uaprr g$b$14064$Uaprr)
                 g$b$14064$Uaprr
                 g$a$14063$Uaprr)))
            g$a$14061$Uaprr
            g$rest$14062$Uaprr)))))
   (g$flmin$14021$Uaprr
     g$flmin$14098$Uaprr
     (case-lambda
       ((g$a$14065$Uaprr . g$rest$14066$Uaprr)
        (begin
          (if (not (g$flonum?$12469$Uaprr g$a$14065$Uaprr))
            (assertion-violation 'flmin '"not a flonum" g$a$14065$Uaprr)
            (void))
          (g$fold-left$11725$Uaprr
            (case-lambda
              ((g$a$14067$Uaprr g$b$14068$Uaprr)
               (if (fl>? g$a$14067$Uaprr g$b$14068$Uaprr)
                 g$b$14068$Uaprr
                 g$a$14067$Uaprr)))
            g$a$14065$Uaprr
            g$rest$14066$Uaprr))))))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$using$14100$Uaprr
     g$using$14120$Uaprr
     (clr-using-internal 'ironscheme.runtime))
   (g$put-datum$14101$Uaprr
     g$put-datum$14121$Uaprr
     (case-lambda
       ((g$p$14109$Uaprr g$datum$14110$Uaprr)
        (write g$datum$14110$Uaprr g$p$14109$Uaprr))))
   (g$get-datum$14102$Uaprr g$get-datum$14122$Uaprr read)
   (g$get-output-string$14103$Uaprr
     g$get-output-string$14123$Uaprr
     (case-lambda
       ((g$port$14111$Uaprr)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$14111$Uaprr))))
   (g$open-output-string$14104$Uaprr
     g$open-output-string$14124$Uaprr
     (case-lambda
       (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$14105$Uaprr
     g$open-string-output-port$14125$Uaprr
     (case-lambda
       (()
        ((case-lambda
           ((g$p$14112$Uaprr)
            (values
              g$p$14112$Uaprr
              (case-lambda
                (()
                 (g$get-output-string$14103$Uaprr g$p$14112$Uaprr))))))
         (g$open-output-string$14104$Uaprr)))))
   (g$port?$14106$Uaprr
     g$port?$14126$Uaprr
     (case-lambda
       ((g$obj$14113$Uaprr)
        ((case-lambda
           ((g$t$14114$Uaprr)
            (if g$t$14114$Uaprr
              g$t$14114$Uaprr
              (begin '#f (binary-port? g$obj$14113$Uaprr)))))
         (textual-port? g$obj$14113$Uaprr)))))
   (g$call-with-string-output-port$14107$Uaprr
     g$call-with-string-output-port$14127$Uaprr
     (case-lambda
       ((g$proc$14115$Uaprr)
        ((case-lambda
           ((g$p$14116$Uaprr)
            (begin
              (g$call-with-port$14108$Uaprr
                g$p$14116$Uaprr
                g$proc$14115$Uaprr)
              (g$get-output-string$14103$Uaprr g$p$14116$Uaprr))))
         (g$open-output-string$14104$Uaprr)))))
   (g$call-with-port$14108$Uaprr
     g$call-with-port$14128$Uaprr
     (case-lambda
       ((g$port$14117$Uaprr g$proc$14118$Uaprr)
        ((case-lambda
           ((g$r$14119$Uaprr)
            (begin (close-port g$port$14117$Uaprr) g$r$14119$Uaprr)))
         (g$proc$14118$Uaprr g$port$14117$Uaprr))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$peek-char$14129$Uaprr
     g$peek-char$14184$Uaprr
     (case-lambda
       (() (g$peek-char$14129$Uaprr (current-input-port)))
       ((g$port$14156$Uaprr) (lookahead-char g$port$14156$Uaprr))))
   (g$read-char$14130$Uaprr
     g$read-char$14185$Uaprr
     (case-lambda
       (() (g$read-char$14130$Uaprr (current-input-port)))
       ((g$port$14157$Uaprr) (get-char g$port$14157$Uaprr))))
   (g$write-char$14131$Uaprr
     g$write-char$14186$Uaprr
     (case-lambda
       ((g$chr$14158$Uaprr)
        (g$write-char$14131$Uaprr
          g$chr$14158$Uaprr
          (current-output-port)))
       ((g$chr$14159$Uaprr g$port$14160$Uaprr)
        (put-char g$port$14160$Uaprr g$chr$14159$Uaprr))))
   (g$with-input-from-file$14151$Uaprr
     g$with-input-from-file$14187$Uaprr
     (case-lambda
       ((g$filename$14161$Uaprr g$thunk$14162$Uaprr)
        ((case-lambda
           ((g$current-input-port$14165$Uaprr g$t$14166$Uaprr)
            ((case-lambda
               ((g$swap$14167$Uaprr)
                (dynamic-wind
                  g$swap$14167$Uaprr
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$14162$Uaprr)))
                       (case-lambda
                         (()
                          (close-input-port (current-input-port)))))))
                  g$swap$14167$Uaprr)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$14168$Uaprr)
                    (begin
                      (g$current-input-port$14165$Uaprr g$t$14166$Uaprr)
                      (set! g$t$14166$Uaprr g$t$14168$Uaprr))))
                 (g$current-input-port$14165$Uaprr)))))))
         current-input-port
         (open-input-file g$filename$14161$Uaprr)))))
   (g$with-output-to-file$14152$Uaprr
     g$with-output-to-file$14188$Uaprr
     (case-lambda
       ((g$filename$14169$Uaprr g$thunk$14170$Uaprr)
        ((case-lambda
           ((g$current-output-port$14173$Uaprr g$t$14174$Uaprr)
            ((case-lambda
               ((g$swap$14175$Uaprr)
                (dynamic-wind
                  g$swap$14175$Uaprr
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$14170$Uaprr)))
                       (case-lambda
                         (()
                          (close-output-port (current-output-port)))))))
                  g$swap$14175$Uaprr)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$14176$Uaprr)
                    (begin
                      (g$current-output-port$14173$Uaprr
                        g$t$14174$Uaprr)
                      (set! g$t$14174$Uaprr g$t$14176$Uaprr))))
                 (g$current-output-port$14173$Uaprr)))))))
         current-output-port
         (open-output-file g$filename$14169$Uaprr)))))
   (g$call-with-input-file$14153$Uaprr
     g$call-with-input-file$14189$Uaprr
     (case-lambda
       ((g$filename$14177$Uaprr g$proc$14178$Uaprr)
        ((case-lambda
           ((g$p$14179$Uaprr)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$14178$Uaprr g$p$14179$Uaprr)))
              (case-lambda (() (close-input-port g$p$14179$Uaprr))))))
         (open-input-file g$filename$14177$Uaprr)))))
   (g$call-with-output-file$14154$Uaprr
     g$call-with-output-file$14190$Uaprr
     (case-lambda
       ((g$filename$14180$Uaprr g$proc$14181$Uaprr)
        ((case-lambda
           ((g$p$14182$Uaprr)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$14181$Uaprr g$p$14182$Uaprr)))
              (case-lambda (() (close-output-port g$p$14182$Uaprr))))))
         (open-output-file g$filename$14180$Uaprr)))))
   (g$newline$14155$Uaprr
     g$newline$14191$Uaprr
     (case-lambda
       (() (g$newline$14155$Uaprr (current-output-port)))
       ((g$port$14183$Uaprr) (display '"
" g$port$14183$Uaprr)))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$6761$14192$Uaprr
     g$6761$14305$Uaprr
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$6763$14193$Uaprr g$6763$14306$Uaprr '#f)
   (g$6762$14194$Uaprr
     g$6762$14307$Uaprr
     (make-record-constructor-descriptor
       g$6761$14192$Uaprr
       '#f
       g$6763$14193$Uaprr))
   (g$enum?$14197$Uaprr
     g$enum?$14308$Uaprr
     (record-predicate g$6761$14192$Uaprr))
   (g$make-enum$14198$Uaprr
     g$make-enum$14309$Uaprr
     (record-constructor g$6762$14194$Uaprr))
   (g$enum-value$14199$Uaprr
     g$enum-value$14310$Uaprr
     (record-accessor g$6761$14192$Uaprr '0))
   (g$enum-info$14200$Uaprr
     g$enum-info$14311$Uaprr
     (record-accessor g$6761$14192$Uaprr '1))
   (g$6772$14201$Uaprr
     g$6772$14312$Uaprr
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$6774$14202$Uaprr g$6774$14313$Uaprr '#f)
   (g$6773$14203$Uaprr
     g$6773$14314$Uaprr
     (make-record-constructor-descriptor
       g$6772$14201$Uaprr
       '#f
       g$6774$14202$Uaprr))
   (g$enum-universe?$14206$Uaprr
     g$enum-universe?$14315$Uaprr
     (record-predicate g$6772$14201$Uaprr))
   (g$make-enum-universe$14207$Uaprr
     g$make-enum-universe$14316$Uaprr
     (record-constructor g$6773$14203$Uaprr))
   (g$enum-universe-id$14208$Uaprr
     g$enum-universe-id$14317$Uaprr
     (record-accessor g$6772$14201$Uaprr '0))
   (g$enum-universe-symbols$14209$Uaprr
     g$enum-universe-symbols$14318$Uaprr
     (record-accessor g$6772$14201$Uaprr '1))
   (g$enum-universe-mapping$14210$Uaprr
     g$enum-universe-mapping$14319$Uaprr
     (record-accessor g$6772$14201$Uaprr '2))
   (g$enum-universe-value$14211$Uaprr
     g$enum-universe-value$14320$Uaprr
     (record-accessor g$6772$14201$Uaprr '3))
   (g$enum-type=?$14212$Uaprr
     g$enum-type=?$14321$Uaprr
     (case-lambda
       ((g$enumset1$14234$Uaprr g$enumset2$14235$Uaprr)
        (eq? (g$enum-universe-id$14208$Uaprr
               (g$enum-info$14200$Uaprr g$enumset1$14234$Uaprr))
             (g$enum-universe-id$14208$Uaprr
               (g$enum-info$14200$Uaprr g$enumset2$14235$Uaprr))))))
   (g$get-symbols$14213$Uaprr
     g$get-symbols$14322$Uaprr
     (case-lambda
       ((g$enumset$14236$Uaprr)
        (g$enum-universe-symbols$14209$Uaprr
          (g$enum-info$14200$Uaprr g$enumset$14236$Uaprr)))))
   (g$get-value$14214$Uaprr
     g$get-value$14323$Uaprr
     (case-lambda
       ((g$enumset$14237$Uaprr g$s$14238$Uaprr)
        (g$hashtable-ref$12569$Uaprr
          (g$enum-universe-mapping$14210$Uaprr
            (g$enum-info$14200$Uaprr g$enumset$14237$Uaprr))
          g$s$14238$Uaprr
          '#f))))
   (g$assert-enum$14215$Uaprr
     g$assert-enum$14324$Uaprr
     (case-lambda
       ((g$who$14239$Uaprr g$enumset$14240$Uaprr)
        (if (not (g$enum?$14197$Uaprr g$enumset$14240$Uaprr))
          (assertion-violation
            g$who$14239$Uaprr
            '"not an enumeration"
            g$enumset$14240$Uaprr)
          (void)))))
   (g$make-info$14216$Uaprr
     g$make-info$14325$Uaprr
     (case-lambda
       ((g$symbols$14241$Uaprr)
        ((case-lambda
           ((g$ht$14242$Uaprr)
            ((letrec ((g$f$14243$Uaprr
                        (case-lambda
                          ((g$s$14244$Uaprr
                             g$a$14245$Uaprr
                             g$mask$14246$Uaprr)
                           (if (null? g$s$14244$Uaprr)
                             (values
                               (reverse! g$a$14245$Uaprr)
                               g$ht$14242$Uaprr
                               (- g$mask$14246$Uaprr '1))
                             ((case-lambda
                                ((g$n$14247$Uaprr)
                                 (if (g$symbol?$12465$Uaprr
                                       g$n$14247$Uaprr)
                                   (if (g$hashtable-contains?$12572$Uaprr
                                         g$ht$14242$Uaprr
                                         g$n$14247$Uaprr)
                                     (g$f$14243$Uaprr
                                       (cdr g$s$14244$Uaprr)
                                       g$a$14245$Uaprr
                                       g$mask$14246$Uaprr)
                                     (begin
                                       (g$hashtable-set!$12570$Uaprr
                                         g$ht$14242$Uaprr
                                         g$n$14247$Uaprr
                                         g$mask$14246$Uaprr)
                                       (g$f$14243$Uaprr
                                         (cdr g$s$14244$Uaprr)
                                         (cons
                                           g$n$14247$Uaprr
                                           g$a$14245$Uaprr)
                                         (g$bitwise-arithmetic-shift-left$13627$Uaprr
                                           g$mask$14246$Uaprr
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$14247$Uaprr))))
                              (car g$s$14244$Uaprr)))))))
               g$f$14243$Uaprr)
             g$symbols$14241$Uaprr
             '()
             '1)))
         (g$make-eq-hashtable$12566$Uaprr)))))
   (g$make-name$14217$Uaprr
     g$make-name$14326$Uaprr
     (case-lambda
       ((g$symbols$14248$Uaprr)
        (string->symbol
          (g$format$14365$Uaprr '"~a" g$symbols$14248$Uaprr)))))
   (g$make-enumeration$14218$Uaprr
     g$make-enumeration$14327$Uaprr
     (case-lambda
       ((g$symbols$14249$Uaprr)
        (call-with-values
          (case-lambda
            (() (g$make-info$14216$Uaprr g$symbols$14249$Uaprr)))
          (case-lambda
            ((g$s$14253$Uaprr g$mapping$14254$Uaprr g$mask$14255$Uaprr)
             ((case-lambda
                ((g$mask$14256$Uaprr
                   g$mapping$14257$Uaprr
                   g$s$14258$Uaprr)
                 (g$make-enum$14198$Uaprr
                   g$mask$14256$Uaprr
                   (g$make-enum-universe$14207$Uaprr
                     (g$make-name$14217$Uaprr g$s$14258$Uaprr)
                     g$s$14258$Uaprr
                     g$mapping$14257$Uaprr
                     g$mask$14256$Uaprr))))
              g$mask$14255$Uaprr
              g$mapping$14254$Uaprr
              g$s$14253$Uaprr)))))))
   (g$enum-set-universe$14219$Uaprr
     g$enum-set-universe$14328$Uaprr
     (case-lambda
       ((g$enumset$14259$Uaprr)
        (begin
          (g$assert-enum$14215$Uaprr
            'enum-set-universe
            g$enumset$14259$Uaprr)
          ((case-lambda
             ((g$ei$14260$Uaprr)
              (g$make-enum$14198$Uaprr
                (g$enum-universe-value$14211$Uaprr g$ei$14260$Uaprr)
                g$ei$14260$Uaprr)))
           (g$enum-info$14200$Uaprr g$enumset$14259$Uaprr))))))
   (g$enum-set-indexer$14220$Uaprr
     g$enum-set-indexer$14329$Uaprr
     (case-lambda
       ((g$enumset$14261$Uaprr)
        (begin
          (g$assert-enum$14215$Uaprr
            'enum-set-indexer
            g$enumset$14261$Uaprr)
          (case-lambda
            ((g$symbol$14262$Uaprr)
             (begin
               (if (not (g$symbol?$12465$Uaprr g$symbol$14262$Uaprr))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$14262$Uaprr)
                 (void))
               ((case-lambda
                  ((g$v$14263$Uaprr)
                   (if g$v$14263$Uaprr
                     (- (bitwise-length g$v$14263$Uaprr) '1)
                     '#f)))
                (g$get-value$14214$Uaprr
                  g$enumset$14261$Uaprr
                  g$symbol$14262$Uaprr)))))))))
   (g$enum-set-constructor$14221$Uaprr
     g$enum-set-constructor$14330$Uaprr
     (case-lambda
       ((g$enumset$14264$Uaprr)
        (begin
          (g$assert-enum$14215$Uaprr
            'enum-set-constructor
            g$enumset$14264$Uaprr)
          (case-lambda
            ((g$symbols$14265$Uaprr)
             ((letrec ((g$f$14266$Uaprr
                         (case-lambda
                           ((g$v$14267$Uaprr g$s$14268$Uaprr)
                            (if (null? g$s$14268$Uaprr)
                              (g$make-enum$14198$Uaprr
                                g$v$14267$Uaprr
                                (g$enum-info$14200$Uaprr
                                  g$enumset$14264$Uaprr))
                              ((case-lambda
                                 ((g$n$14269$Uaprr)
                                  (if (g$symbol?$12465$Uaprr
                                        g$n$14269$Uaprr)
                                    ((case-lambda
                                       ((g$v*$14270$Uaprr)
                                        (if g$v*$14270$Uaprr
                                          (g$f$14266$Uaprr
                                            (bitwise-ior
                                              g$v$14267$Uaprr
                                              g$v*$14270$Uaprr)
                                            (cdr g$s$14268$Uaprr))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$14269$Uaprr))))
                                     (g$get-value$14214$Uaprr
                                       g$enumset$14264$Uaprr
                                       g$n$14269$Uaprr))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$14269$Uaprr))))
                               (car g$s$14268$Uaprr)))))))
                g$f$14266$Uaprr)
              '0
              g$symbols$14265$Uaprr)))))))
   (g$enum-set->list$14222$Uaprr
     g$enum-set->list$14331$Uaprr
     (case-lambda
       ((g$enumset$14271$Uaprr)
        (begin
          (g$assert-enum$14215$Uaprr
            'enum-set->list
            g$enumset$14271$Uaprr)
          ((case-lambda
             ((g$value$14272$Uaprr)
              ((letrec ((g$f$14273$Uaprr
                          (case-lambda
                            ((g$s$14274$Uaprr g$l$14275$Uaprr)
                             (if (null? g$s$14274$Uaprr)
                               (reverse! g$l$14275$Uaprr)
                               (if (g$zero?$12504$Uaprr
                                     (bitwise-and
                                       (g$get-value$14214$Uaprr
                                         g$enumset$14271$Uaprr
                                         (car g$s$14274$Uaprr))
                                       g$value$14272$Uaprr))
                                 (g$f$14273$Uaprr
                                   (cdr g$s$14274$Uaprr)
                                   g$l$14275$Uaprr)
                                 (g$f$14273$Uaprr
                                   (cdr g$s$14274$Uaprr)
                                   (cons
                                     (car g$s$14274$Uaprr)
                                     g$l$14275$Uaprr))))))))
                 g$f$14273$Uaprr)
               (g$get-symbols$14213$Uaprr g$enumset$14271$Uaprr)
               '())))
           (g$enum-value$14199$Uaprr g$enumset$14271$Uaprr))))))
   (g$enum-set-member?$14223$Uaprr
     g$enum-set-member?$14332$Uaprr
     (case-lambda
       ((g$symbol$14276$Uaprr g$enumset$14277$Uaprr)
        (begin
          (if (not (g$symbol?$12465$Uaprr g$symbol$14276$Uaprr))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$14276$Uaprr)
            (void))
          (g$assert-enum$14215$Uaprr
            'enum-set-member?
            g$enumset$14277$Uaprr)
          ((case-lambda
             ((g$v$14278$Uaprr)
              (if g$v$14278$Uaprr
                (not (g$zero?$12504$Uaprr
                       (bitwise-and
                         g$v$14278$Uaprr
                         (g$enum-value$14199$Uaprr
                           g$enumset$14277$Uaprr))))
                '#f)))
           (g$get-value$14214$Uaprr
             g$enumset$14277$Uaprr
             g$symbol$14276$Uaprr))))))
   (g$enum-set-subset?$14224$Uaprr
     g$enum-set-subset?$14333$Uaprr
     (case-lambda
       ((g$enumset1$14279$Uaprr g$enumset2$14280$Uaprr)
        (begin
          (g$assert-enum$14215$Uaprr
            'enum-set-subset?
            g$enumset1$14279$Uaprr)
          (g$assert-enum$14215$Uaprr
            'enum-set-subset?
            g$enumset2$14280$Uaprr)
          ((case-lambda
             ((g$v1$14281$Uaprr g$v2$14282$Uaprr)
              (if (g$enum-type=?$14212$Uaprr
                    g$enumset1$14279$Uaprr
                    g$enumset2$14280$Uaprr)
                (= (bitwise-and g$v1$14281$Uaprr g$v2$14282$Uaprr)
                   g$v1$14281$Uaprr)
                ((letrec ((g$f$14283$Uaprr
                            (case-lambda
                              ((g$s$14284$Uaprr)
                               (if (null? g$s$14284$Uaprr)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$14285$Uaprr
                                       g$v2*$14286$Uaprr)
                                     (if g$v2*$14286$Uaprr
                                       ((case-lambda
                                          ((g$has1$14287$Uaprr
                                             g$has2$14288$Uaprr)
                                           (if (if g$has1$14287$Uaprr
                                                 (begin
                                                   '#f
                                                   (not g$has2$14288$Uaprr))
                                                 '#f)
                                             '#f
                                             (g$f$14283$Uaprr
                                               (cdr g$s$14284$Uaprr)))))
                                        (not (g$zero?$12504$Uaprr
                                               (bitwise-and
                                                 g$v1$14281$Uaprr
                                                 g$v1*$14285$Uaprr)))
                                        (not (g$zero?$12504$Uaprr
                                               (bitwise-and
                                                 g$v2$14282$Uaprr
                                                 g$v2*$14286$Uaprr))))
                                       '#f)))
                                  (g$get-value$14214$Uaprr
                                    g$enumset1$14279$Uaprr
                                    (car g$s$14284$Uaprr))
                                  (g$get-value$14214$Uaprr
                                    g$enumset2$14280$Uaprr
                                    (car g$s$14284$Uaprr))))))))
                   g$f$14283$Uaprr)
                 (g$get-symbols$14213$Uaprr g$enumset1$14279$Uaprr)))))
           (g$enum-value$14199$Uaprr g$enumset1$14279$Uaprr)
           (g$enum-value$14199$Uaprr g$enumset2$14280$Uaprr))))))
   (g$enum-set=?$14225$Uaprr
     g$enum-set=?$14334$Uaprr
     (case-lambda
       ((g$enumset1$14289$Uaprr g$enumset2$14290$Uaprr)
        (begin
          (g$assert-enum$14215$Uaprr 'enum-set=? g$enumset1$14289$Uaprr)
          (g$assert-enum$14215$Uaprr 'enum-set=? g$enumset2$14290$Uaprr)
          (if (g$enum-set-subset?$14224$Uaprr
                g$enumset1$14289$Uaprr
                g$enumset2$14290$Uaprr)
            (begin
              '#f
              (g$enum-set-subset?$14224$Uaprr
                g$enumset2$14290$Uaprr
                g$enumset1$14289$Uaprr))
            '#f)))))
   (g$enum-set-union$14226$Uaprr
     g$enum-set-union$14335$Uaprr
     (case-lambda
       ((g$enumset1$14291$Uaprr g$enumset2$14292$Uaprr)
        (begin
          (g$assert-enum$14215$Uaprr
            'enum-set-union
            g$enumset1$14291$Uaprr)
          (g$assert-enum$14215$Uaprr
            'enum-set-union
            g$enumset2$14292$Uaprr)
          (if (g$enum-type=?$14212$Uaprr
                g$enumset1$14291$Uaprr
                g$enumset2$14292$Uaprr)
            (g$make-enum$14198$Uaprr
              (bitwise-ior
                (g$enum-value$14199$Uaprr g$enumset1$14291$Uaprr)
                (g$enum-value$14199$Uaprr g$enumset2$14292$Uaprr))
              (g$enum-info$14200$Uaprr g$enumset1$14291$Uaprr))
            '#f)))))
   (g$enum-set-intersection$14227$Uaprr
     g$enum-set-intersection$14336$Uaprr
     (case-lambda
       ((g$enumset1$14293$Uaprr g$enumset2$14294$Uaprr)
        (begin
          (g$assert-enum$14215$Uaprr
            'enum-set-intersection
            g$enumset1$14293$Uaprr)
          (g$assert-enum$14215$Uaprr
            'enum-set-intersection
            g$enumset2$14294$Uaprr)
          (if (g$enum-type=?$14212$Uaprr
                g$enumset1$14293$Uaprr
                g$enumset2$14294$Uaprr)
            (g$make-enum$14198$Uaprr
              (bitwise-and
                (g$enum-value$14199$Uaprr g$enumset1$14293$Uaprr)
                (g$enum-value$14199$Uaprr g$enumset2$14294$Uaprr))
              (g$enum-info$14200$Uaprr g$enumset1$14293$Uaprr))
            '#f)))))
   (g$enum-set-difference$14228$Uaprr
     g$enum-set-difference$14337$Uaprr
     (case-lambda
       ((g$enumset1$14295$Uaprr g$enumset2$14296$Uaprr)
        (begin
          (g$assert-enum$14215$Uaprr
            'enum-set-difference
            g$enumset1$14295$Uaprr)
          (g$assert-enum$14215$Uaprr
            'enum-set-difference
            g$enumset2$14296$Uaprr)
          (if (g$enum-type=?$14212$Uaprr
                g$enumset1$14295$Uaprr
                g$enumset2$14296$Uaprr)
            (g$make-enum$14198$Uaprr
              (bitwise-and
                (g$enum-value$14199$Uaprr g$enumset1$14295$Uaprr)
                (bitwise-not
                  (g$enum-value$14199$Uaprr g$enumset2$14296$Uaprr)))
              (g$enum-info$14200$Uaprr g$enumset1$14295$Uaprr))
            '#f)))))
   (g$enum-set-complement$14229$Uaprr
     g$enum-set-complement$14338$Uaprr
     (case-lambda
       ((g$enumset$14297$Uaprr)
        (begin
          (g$assert-enum$14215$Uaprr
            'enum-set-complement
            g$enumset$14297$Uaprr)
          (g$make-enum$14198$Uaprr
            (bitwise-not
              (g$enum-value$14199$Uaprr g$enumset$14297$Uaprr))
            (g$enum-info$14200$Uaprr g$enumset$14297$Uaprr))))))
   (g$enum-set-projection$14230$Uaprr
     g$enum-set-projection$14339$Uaprr
     (case-lambda
       ((g$enumset1$14298$Uaprr g$enumset2$14299$Uaprr)
        (begin
          (g$assert-enum$14215$Uaprr
            'enum-set-projection
            g$enumset1$14298$Uaprr)
          (g$assert-enum$14215$Uaprr
            'enum-set-projection
            g$enumset2$14299$Uaprr)
          ((case-lambda
             ((g$v1$14300$Uaprr)
              ((letrec ((g$f$14301$Uaprr
                          (case-lambda
                            ((g$s$14302$Uaprr g$v$14303$Uaprr)
                             (if (null? g$s$14302$Uaprr)
                               (g$make-enum$14198$Uaprr
                                 g$v$14303$Uaprr
                                 (g$enum-info$14200$Uaprr
                                   g$enumset2$14299$Uaprr))
                               (if (g$zero?$12504$Uaprr
                                     (bitwise-and
                                       g$v1$14300$Uaprr
                                       (g$get-value$14214$Uaprr
                                         g$enumset1$14298$Uaprr
                                         (car g$s$14302$Uaprr))))
                                 (g$f$14301$Uaprr
                                   (cdr g$s$14302$Uaprr)
                                   g$v$14303$Uaprr)
                                 ((case-lambda
                                    ((g$v2$14304$Uaprr)
                                     (if g$v2$14304$Uaprr
                                       (g$f$14301$Uaprr
                                         (cdr g$s$14302$Uaprr)
                                         (bitwise-ior
                                           g$v$14303$Uaprr
                                           g$v2$14304$Uaprr))
                                       (g$f$14301$Uaprr
                                         (cdr g$s$14302$Uaprr)
                                         g$v$14303$Uaprr))))
                                  (g$get-value$14214$Uaprr
                                    g$enumset2$14299$Uaprr
                                    (car g$s$14302$Uaprr)))))))))
                 g$f$14301$Uaprr)
               (g$get-symbols$14213$Uaprr g$enumset1$14298$Uaprr)
               '0)))
           (g$enum-value$14199$Uaprr g$enumset1$14298$Uaprr)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$14231$Uaprr g$p$14232$Uaprr g$wr$14233$Uaprr)
       (g$fprintf$14364$Uaprr
         g$p$14232$Uaprr
         '"#[enum-set ~a]"
         (g$enum-set->list$14222$Uaprr g$x$14231$Uaprr))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$14340$Uaprr
     g$dofmt$14362$Uaprr
     (case-lambda
       ((g$p$14344$Uaprr g$cntl$14345$Uaprr g$args$14346$Uaprr)
        ((case-lambda
           ((g$nmax$14347$Uaprr)
            ((letrec ((g$loop$14348$Uaprr
                        (case-lambda
                          ((g$n$14349$Uaprr g$a$14350$Uaprr)
                           (if (g$fx<=?$13963$Uaprr
                                 g$n$14349$Uaprr
                                 g$nmax$14347$Uaprr)
                             ((case-lambda
                                ((g$c$14351$Uaprr)
                                 (if (if (g$char=?$12518$Uaprr
                                           g$c$14351$Uaprr
                                           '#\~)
                                       (begin
                                         '#f
                                         (g$fx<?$13962$Uaprr
                                           g$n$14349$Uaprr
                                           g$nmax$14347$Uaprr))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$14352$Uaprr)
                                       (if (eqv? g$t$14352$Uaprr '#\a)
                                         (begin
                                           (display
                                             (car g$a$14350$Uaprr)
                                             g$p$14344$Uaprr)
                                           (g$loop$14348$Uaprr
                                             (fx+ g$n$14349$Uaprr '2)
                                             (cdr g$a$14350$Uaprr)))
                                         (if (eqv? g$t$14352$Uaprr '#\s)
                                           (begin
                                             (write
                                               (car g$a$14350$Uaprr)
                                               g$p$14344$Uaprr)
                                             (g$loop$14348$Uaprr
                                               (fx+ g$n$14349$Uaprr '2)
                                               (cdr g$a$14350$Uaprr)))
                                           (if (eqv?
                                                 g$t$14352$Uaprr
                                                 '#\b)
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$14350$Uaprr)
                                                   '2)
                                                 g$p$14344$Uaprr)
                                               (g$loop$14348$Uaprr
                                                 (fx+ g$n$14349$Uaprr
                                                      '2)
                                                 (cdr g$a$14350$Uaprr)))
                                             (if (eqv?
                                                   g$t$14352$Uaprr
                                                   '#\o)
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$14350$Uaprr)
                                                     '8)
                                                   g$p$14344$Uaprr)
                                                 (g$loop$14348$Uaprr
                                                   (fx+ g$n$14349$Uaprr
                                                        '2)
                                                   (cdr g$a$14350$Uaprr)))
                                               (if (eqv?
                                                     g$t$14352$Uaprr
                                                     '#\x)
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$14350$Uaprr)
                                                       '16)
                                                     g$p$14344$Uaprr)
                                                   (g$loop$14348$Uaprr
                                                     (fx+ g$n$14349$Uaprr
                                                          '2)
                                                     (cdr g$a$14350$Uaprr)))
                                                 (if (eqv?
                                                       g$t$14352$Uaprr
                                                       '#\d)
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$14350$Uaprr)
                                                         '10)
                                                       g$p$14344$Uaprr)
                                                     (g$loop$14348$Uaprr
                                                       (fx+ g$n$14349$Uaprr
                                                            '2)
                                                       (cdr g$a$14350$Uaprr)))
                                                   (if (eqv?
                                                         g$t$14352$Uaprr
                                                         '#\~)
                                                     (begin
                                                       (g$write-char$14186$Uaprr
                                                         '#\~
                                                         g$p$14344$Uaprr)
                                                       (g$loop$14348$Uaprr
                                                         (fx+ g$n$14349$Uaprr
                                                              '2)
                                                         g$a$14350$Uaprr))
                                                     (begin
                                                       (g$write-char$14186$Uaprr
                                                         g$c$14351$Uaprr
                                                         g$p$14344$Uaprr)
                                                       (g$loop$14348$Uaprr
                                                         (fx+ g$n$14349$Uaprr
                                                              '1)
                                                         g$a$14350$Uaprr)))))))))))
                                    (string-ref
                                      g$cntl$14345$Uaprr
                                      (fx+ g$n$14349$Uaprr '1)))
                                   (begin
                                     (g$write-char$14186$Uaprr
                                       g$c$14351$Uaprr
                                       g$p$14344$Uaprr)
                                     (g$loop$14348$Uaprr
                                       (fx+ g$n$14349$Uaprr '1)
                                       g$a$14350$Uaprr)))))
                              (string-ref
                                g$cntl$14345$Uaprr
                                g$n$14349$Uaprr))
                             (void))))))
               g$loop$14348$Uaprr)
             '0
             g$args$14346$Uaprr)))
         (fx- (string-length g$cntl$14345$Uaprr) '1)))))
   (g$printf$14341$Uaprr
     g$printf$14363$Uaprr
     (case-lambda
       ((g$control$14353$Uaprr . g$args$14354$Uaprr)
        (g$dofmt$14340$Uaprr
          (current-output-port)
          g$control$14353$Uaprr
          g$args$14354$Uaprr))))
   (g$fprintf$14342$Uaprr
     g$fprintf$14364$Uaprr
     (case-lambda
       ((g$p$14355$Uaprr g$control$14356$Uaprr . g$args$14357$Uaprr)
        (g$dofmt$14340$Uaprr
          g$p$14355$Uaprr
          g$control$14356$Uaprr
          g$args$14357$Uaprr))))
   (g$format$14343$Uaprr
     g$format$14365$Uaprr
     (case-lambda
       ((g$control$14358$Uaprr . g$args$14359$Uaprr)
        (call-with-values
          g$open-string-output-port$14125$Uaprr
          (case-lambda
            ((g$p$14360$Uaprr g$c$14361$Uaprr)
             (begin
               (g$dofmt$14340$Uaprr
                 g$p$14360$Uaprr
                 g$control$14358$Uaprr
                 g$args$14359$Uaprr)
               (g$c$14361$Uaprr)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$14366$Uaprr
     g$make-traced-macro$14369$Uaprr
     (case-lambda
       ((g$name$14367$Uaprr g$x$14368$Uaprr)
        (if (g$procedure?$12467$Uaprr g$x$14368$Uaprr)
          (make-traced-procedure
            g$name$14367$Uaprr
            g$x$14368$Uaprr
            g$syntax->datum$19922$Uaprr)
          (if (g$variable-transformer?$19743$Uaprr g$x$14368$Uaprr)
            (g$make-variable-transformer$19741$Uaprr
              (make-traced-procedure
                g$name$14367$Uaprr
                (g$variable-transformer-procedure$19744$Uaprr
                  g$x$14368$Uaprr)
                g$syntax->datum$19922$Uaprr))
            g$x$14368$Uaprr))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$library-version-mismatch-warning$14370$Uaprr
     g$library-version-mismatch-warning$14571$Uaprr
     (case-lambda
       ((g$name$14543$Uaprr
          g$depname$14544$Uaprr
          g$filename$14545$Uaprr)
        (g$fprintf$14364$Uaprr
          (current-error-port)
          '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
          g$name$14543$Uaprr
          g$depname$14544$Uaprr
          g$filename$14545$Uaprr))))
   (g$file-locator-resolution-error$14371$Uaprr
     g$file-locator-resolution-error$14572$Uaprr
     (case-lambda
       ((g$libname$14546$Uaprr g$failed-list$14547$Uaprr)
        (letrec* ((g$6950$14548$Uaprr
                    (make-record-type-descriptor
                      '&library-resolution
                      g$&condition-rtd$13134$Uaprr
                      'g$6953$Uaprr
                      '#f
                      '#f
                      '#((immutable library) (immutable files))))
                  (g$6952$14549$Uaprr '#f)
                  (g$6951$14550$Uaprr
                    (make-record-constructor-descriptor
                      g$6950$14548$Uaprr
                      g$&condition-rcd$13135$Uaprr
                      g$6952$14549$Uaprr))
                  (g$6949$14553$Uaprr
                    (record-predicate g$6950$14548$Uaprr))
                  (g$make-library-resolution-condition$14554$Uaprr
                    (record-constructor g$6951$14550$Uaprr))
                  (g$6947$14555$Uaprr
                    (record-accessor g$6950$14548$Uaprr '0))
                  (g$6948$14556$Uaprr
                    (record-accessor g$6950$14548$Uaprr '1))
                  (g$library-resolution-condition?$14557$Uaprr
                    (condition-predicate g$6950$14548$Uaprr))
                  (g$condition-library$14558$Uaprr
                    (condition-accessor
                      g$6950$14548$Uaprr
                      g$6947$14555$Uaprr))
                  (g$condition-files$14559$Uaprr
                    (condition-accessor
                      g$6950$14548$Uaprr
                      g$6948$14556$Uaprr)))
          (raise
            (condition
              (g$make-error$13166$Uaprr)
              (g$make-who-condition$13200$Uaprr 'expander)
              (g$make-message-condition$13140$Uaprr
                '"cannot locate library in library-path")
              (g$make-library-resolution-condition$14554$Uaprr
                g$libname$14546$Uaprr
                g$failed-list$14547$Uaprr)))))))
   (g$read-library-source-file$14372$Uaprr
     g$read-library-source-file$14573$Uaprr
     (case-lambda
       ((g$file-name$14560$Uaprr)
        (g$with-input-from-file$14187$Uaprr
          g$file-name$14560$Uaprr
          read-annotated))))
   (g$make-parameter$14373$Uaprr
     g$make-parameter$14574$Uaprr
     (case-lambda
       ((g$x$14561$Uaprr)
        (g$make-parameter$14373$Uaprr
          g$x$14561$Uaprr
          (case-lambda ((g$x$14562$Uaprr) g$x$14562$Uaprr))))
       ((g$x$14563$Uaprr g$fender$14564$Uaprr)
        (begin
          (if (not (g$procedure?$12467$Uaprr g$fender$14564$Uaprr))
            (g$assertion-error$19915$Uaprr
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(90,8) - (90,36)"))
            (void))
          ((case-lambda
             ((g$x$14565$Uaprr)
              (case-lambda
                (() g$x$14565$Uaprr)
                ((g$v$14566$Uaprr)
                 (set! g$x$14565$Uaprr
                   (g$fender$14564$Uaprr g$v$14566$Uaprr))))))
           (g$fender$14564$Uaprr g$x$14563$Uaprr))))))
   (g$file-options-constructor$14539$Uaprr
     g$file-options-constructor$14575$Uaprr
     (g$make-parameter$14373$Uaprr '#f))
   (g$file-options-spec$14540$Uaprr
     g$file-options-spec$14576$Uaprr
     (case-lambda
       ((g$x$14567$Uaprr)
        ((g$file-options-constructor$14539$Uaprr) g$x$14567$Uaprr))))
   (g$set-label-binding!$14541$Uaprr
     g$set-label-binding!$14577$Uaprr
     (case-lambda
       ((g$label$14568$Uaprr g$binding$14569$Uaprr)
        (set-symbol-value! g$label$14568$Uaprr g$binding$14569$Uaprr))))
   (g$label-binding$14542$Uaprr
     g$label-binding$14578$Uaprr
     (case-lambda
       ((g$label$14570$Uaprr)
        (if (symbol-bound? g$label$14570$Uaprr)
          (begin '#f (symbol-value g$label$14570$Uaprr))
          '#f)))))
  (void))

(library-letrec* (ironscheme pretty-print)
  ((g$genwrite:newline-str$14579$Uaprr
     g$genwrite:newline-str$14772$Uaprr
     (make-string '1 '#\newline))
   (g$symbol->string$14580$Uaprr
     g$symbol->string$14773$Uaprr
     (case-lambda
       ((g$s$14592$Uaprr)
        (symbol->string
          (if (g$pretty-gensyms$14589$Uaprr)
            (ungensym g$s$14592$Uaprr)
            g$s$14592$Uaprr)))))
   (g$read-macro-body$14581$Uaprr
     g$read-macro-body$14774$Uaprr
     (case-lambda
       ((g$l$14593$Uaprr) (g$cadr$12475$Uaprr g$l$14593$Uaprr))))
   (g$read-macro-prefix$14582$Uaprr
     g$read-macro-prefix$14775$Uaprr
     (case-lambda
       ((g$l$14594$Uaprr)
        ((case-lambda
           ((g$head$14595$Uaprr g$tail$14596$Uaprr)
            ((case-lambda
               ((g$t$14597$Uaprr)
                (if (eqv? g$t$14597$Uaprr 'syntax)
                  '"#'"
                  (if (eqv? g$t$14597$Uaprr 'quasisyntax)
                    '"#`"
                    (if (eqv? g$t$14597$Uaprr 'unsyntax)
                      '"#,"
                      (if (eqv? g$t$14597$Uaprr 'unsyntax-splicing)
                        '"#,@"
                        (if (eqv? g$t$14597$Uaprr 'quote)
                          '"'"
                          (if (eqv? g$t$14597$Uaprr 'quasiquote)
                            '"`"
                            (if (eqv? g$t$14597$Uaprr 'unquote)
                              '","
                              (if (eqv?
                                    g$t$14597$Uaprr
                                    'unquote-splicing)
                                '",@"
                                (if '#f '#f (void))))))))))))
             g$head$14595$Uaprr)))
         (car g$l$14594$Uaprr)
         (cdr g$l$14594$Uaprr)))))
   (g$length1?$14583$Uaprr
     g$length1?$14776$Uaprr
     (case-lambda
       ((g$l$14598$Uaprr)
        (if (pair? g$l$14598$Uaprr)
          (begin '#f (null? (cdr g$l$14598$Uaprr)))
          '#f))))
   (g$read-macro?$14584$Uaprr
     g$read-macro?$14777$Uaprr
     (case-lambda
       ((g$l$14599$Uaprr)
        ((case-lambda
           ((g$head$14600$Uaprr g$tail$14601$Uaprr)
            ((case-lambda
               ((g$t$14602$Uaprr)
                (if (g$memv$11715$Uaprr
                      g$t$14602$Uaprr
                      '(quote
                         quasiquote
                         unquote
                         unquote-splicing
                         syntax
                         quasisyntax
                         unsyntax
                         unsyntax-splicing))
                  (g$length1?$14583$Uaprr g$tail$14601$Uaprr)
                  '#f)))
             g$head$14600$Uaprr)))
         (car g$l$14599$Uaprr)
         (cdr g$l$14599$Uaprr)))))
   (g$generic-write$14585$Uaprr
     g$generic-write$14778$Uaprr
     (case-lambda
       ((g$obj$14603$Uaprr
          g$display?$14604$Uaprr
          g$width$14605$Uaprr
          g$output$14606$Uaprr)
        (letrec* ((g$out$14607$Uaprr
                    (case-lambda
                      ((g$str$14756$Uaprr g$col$14757$Uaprr)
                       (if g$col$14757$Uaprr
                         (if (g$output$14606$Uaprr g$str$14756$Uaprr)
                           (begin
                             '#f
                             (fx+ g$col$14757$Uaprr
                                  (string-length g$str$14756$Uaprr)))
                           '#f)
                         '#f))))
                  (g$wr$14608$Uaprr
                    (case-lambda
                      ((g$obj$14739$Uaprr g$col$14740$Uaprr)
                       (letrec* ((g$wr-expr$14741$Uaprr
                                   (case-lambda
                                     ((g$expr$14754$Uaprr
                                        g$col$14755$Uaprr)
                                      (if (g$read-macro?$14584$Uaprr
                                            g$expr$14754$Uaprr)
                                        (g$wr$14608$Uaprr
                                          (g$read-macro-body$14581$Uaprr
                                            g$expr$14754$Uaprr)
                                          (g$out$14607$Uaprr
                                            (g$read-macro-prefix$14582$Uaprr
                                              g$expr$14754$Uaprr)
                                            g$col$14755$Uaprr))
                                        (g$wr-lst$14742$Uaprr
                                          g$expr$14754$Uaprr
                                          g$col$14755$Uaprr)))))
                                 (g$wr-lst$14742$Uaprr
                                   (case-lambda
                                     ((g$l$14749$Uaprr
                                        g$col$14750$Uaprr)
                                      (if (pair? g$l$14749$Uaprr)
                                        ((letrec ((g$loop$14751$Uaprr
                                                    (case-lambda
                                                      ((g$l$14752$Uaprr
                                                         g$col$14753$Uaprr)
                                                       (if (not g$col$14753$Uaprr)
                                                         g$col$14753$Uaprr
                                                         (if (pair?
                                                               g$l$14752$Uaprr)
                                                           (g$loop$14751$Uaprr
                                                             (cdr g$l$14752$Uaprr)
                                                             (g$wr$14608$Uaprr
                                                               (car g$l$14752$Uaprr)
                                                               (g$out$14607$Uaprr
                                                                 '" "
                                                                 g$col$14753$Uaprr)))
                                                           (if (null?
                                                                 g$l$14752$Uaprr)
                                                             (g$out$14607$Uaprr
                                                               '")"
                                                               g$col$14753$Uaprr)
                                                             (g$out$14607$Uaprr
                                                               '")"
                                                               (g$wr$14608$Uaprr
                                                                 g$l$14752$Uaprr
                                                                 (g$out$14607$Uaprr
                                                                   '" . "
                                                                   g$col$14753$Uaprr))))))))))
                                           g$loop$14751$Uaprr)
                                         (cdr g$l$14749$Uaprr)
                                         (if g$col$14750$Uaprr
                                           (begin
                                             '#f
                                             (g$wr$14608$Uaprr
                                               (car g$l$14749$Uaprr)
                                               (g$out$14607$Uaprr
                                                 '"("
                                                 g$col$14750$Uaprr)))
                                           '#f))
                                        (g$out$14607$Uaprr
                                          '"()"
                                          g$col$14750$Uaprr))))))
                         (if (pair? g$obj$14739$Uaprr)
                           (g$wr-expr$14741$Uaprr
                             g$obj$14739$Uaprr
                             g$col$14740$Uaprr)
                           (if (null? g$obj$14739$Uaprr)
                             (g$wr-lst$14742$Uaprr
                               g$obj$14739$Uaprr
                               g$col$14740$Uaprr)
                             (if (g$vector?$12463$Uaprr
                                   g$obj$14739$Uaprr)
                               (g$wr-lst$14742$Uaprr
                                 (vector->list g$obj$14739$Uaprr)
                                 (g$out$14607$Uaprr
                                   '"#"
                                   g$col$14740$Uaprr))
                               (if (g$boolean?$12466$Uaprr
                                     g$obj$14739$Uaprr)
                                 (g$out$14607$Uaprr
                                   (if g$obj$14739$Uaprr '"#t" '"#f")
                                   g$col$14740$Uaprr)
                                 (if (number? g$obj$14739$Uaprr)
                                   (g$out$14607$Uaprr
                                     (number->string g$obj$14739$Uaprr)
                                     g$col$14740$Uaprr)
                                   (if (g$symbol?$12465$Uaprr
                                         g$obj$14739$Uaprr)
                                     (g$out$14607$Uaprr
                                       (g$symbol->string$14580$Uaprr
                                         g$obj$14739$Uaprr)
                                       g$col$14740$Uaprr)
                                     (if (string? g$obj$14739$Uaprr)
                                       (if g$display?$14604$Uaprr
                                         (g$out$14607$Uaprr
                                           g$obj$14739$Uaprr
                                           g$col$14740$Uaprr)
                                         ((letrec ((g$loop$14743$Uaprr
                                                     (case-lambda
                                                       ((g$i$14744$Uaprr
                                                          g$j$14745$Uaprr
                                                          g$col$14746$Uaprr)
                                                        (if (if g$col$14746$Uaprr
                                                              (begin
                                                                '#f
                                                                (g$fx<?$13962$Uaprr
                                                                  g$j$14745$Uaprr
                                                                  (string-length
                                                                    g$obj$14739$Uaprr)))
                                                              '#f)
                                                          ((case-lambda
                                                             ((g$c$14747$Uaprr)
                                                              (if ((case-lambda
                                                                     ((g$t$14748$Uaprr)
                                                                      (if g$t$14748$Uaprr
                                                                        g$t$14748$Uaprr
                                                                        (begin
                                                                          '#f
                                                                          (g$char=?$12518$Uaprr
                                                                            g$c$14747$Uaprr
                                                                            '#\")))))
                                                                   (g$char=?$12518$Uaprr
                                                                     g$c$14747$Uaprr
                                                                     '#\\))
                                                                (g$loop$14743$Uaprr
                                                                  g$j$14745$Uaprr
                                                                  (fx+ g$j$14745$Uaprr
                                                                       '1)
                                                                  (g$out$14607$Uaprr
                                                                    '"\\"
                                                                    (g$out$14607$Uaprr
                                                                      (substring
                                                                        g$obj$14739$Uaprr
                                                                        g$i$14744$Uaprr
                                                                        g$j$14745$Uaprr)
                                                                      g$col$14746$Uaprr)))
                                                                (g$loop$14743$Uaprr
                                                                  g$i$14744$Uaprr
                                                                  (fx+ g$j$14745$Uaprr
                                                                       '1)
                                                                  g$col$14746$Uaprr))))
                                                           (string-ref
                                                             g$obj$14739$Uaprr
                                                             g$j$14745$Uaprr))
                                                          (g$out$14607$Uaprr
                                                            '"\""
                                                            (g$out$14607$Uaprr
                                                              (substring
                                                                g$obj$14739$Uaprr
                                                                g$i$14744$Uaprr
                                                                g$j$14745$Uaprr)
                                                              g$col$14746$Uaprr)))))))
                                            g$loop$14743$Uaprr)
                                          '0
                                          '0
                                          (g$out$14607$Uaprr
                                            '"\""
                                            g$col$14740$Uaprr)))
                                       (g$out$14607$Uaprr
                                         (g$format$14365$Uaprr
                                           (if g$display?$14604$Uaprr
                                             '"~a"
                                             '"~s")
                                           g$obj$14739$Uaprr)
                                         g$col$14740$Uaprr))))))))))))
                  (g$pp$14609$Uaprr
                    (case-lambda
                      ((g$obj$14610$Uaprr g$col$14611$Uaprr)
                       (letrec* ((g$spaces$14612$Uaprr
                                   (case-lambda
                                     ((g$n$14737$Uaprr
                                        g$col$14738$Uaprr)
                                      (if (g$fx>?$13964$Uaprr
                                            g$n$14737$Uaprr
                                            '0)
                                        (if (g$fx>?$13964$Uaprr
                                              g$n$14737$Uaprr
                                              '7)
                                          (g$spaces$14612$Uaprr
                                            (fx- g$n$14737$Uaprr '8)
                                            (g$out$14607$Uaprr
                                              '"        "
                                              g$col$14738$Uaprr))
                                          (g$out$14607$Uaprr
                                            (substring
                                              '"        "
                                              '0
                                              g$n$14737$Uaprr)
                                            g$col$14738$Uaprr))
                                        g$col$14738$Uaprr))))
                                 (g$indent$14613$Uaprr
                                   (case-lambda
                                     ((g$to$14735$Uaprr
                                        g$col$14736$Uaprr)
                                      (if g$col$14736$Uaprr
                                        (begin
                                          '#f
                                          (if (g$fx<?$13962$Uaprr
                                                g$to$14735$Uaprr
                                                g$col$14736$Uaprr)
                                            (if (g$out$14607$Uaprr
                                                  g$genwrite:newline-str$14579$Uaprr
                                                  g$col$14736$Uaprr)
                                              (begin
                                                '#f
                                                (g$spaces$14612$Uaprr
                                                  g$to$14735$Uaprr
                                                  '0))
                                              '#f)
                                            (g$spaces$14612$Uaprr
                                              (fx- g$to$14735$Uaprr
                                                   g$col$14736$Uaprr)
                                              g$col$14736$Uaprr)))
                                        '#f))))
                                 (g$pr$14614$Uaprr
                                   (case-lambda
                                     ((g$obj$14727$Uaprr
                                        g$col$14728$Uaprr
                                        g$extra$14729$Uaprr
                                        g$pp-pair$14730$Uaprr)
                                      (if ((case-lambda
                                             ((g$t$14731$Uaprr)
                                              (if g$t$14731$Uaprr
                                                g$t$14731$Uaprr
                                                (begin
                                                  '#f
                                                  (g$vector?$12463$Uaprr
                                                    g$obj$14727$Uaprr)))))
                                           (pair? g$obj$14727$Uaprr))
                                        ((case-lambda
                                           ((g$result$14732$Uaprr
                                              g$left$14733$Uaprr)
                                            (begin
                                              (g$generic-write$14585$Uaprr
                                                g$obj$14727$Uaprr
                                                g$display?$14604$Uaprr
                                                '#f
                                                (case-lambda
                                                  ((g$str$14734$Uaprr)
                                                   (begin
                                                     (set! g$result$14732$Uaprr
                                                       (cons
                                                         g$str$14734$Uaprr
                                                         g$result$14732$Uaprr))
                                                     (set! g$left$14733$Uaprr
                                                       (fx- g$left$14733$Uaprr
                                                            (string-length
                                                              g$str$14734$Uaprr)))
                                                     (g$fx>?$13964$Uaprr
                                                       g$left$14733$Uaprr
                                                       '0)))))
                                              (if (g$fx>?$13964$Uaprr
                                                    g$left$14733$Uaprr
                                                    '0)
                                                (g$out$14607$Uaprr
                                                  (g$reverse-string-append$14590$Uaprr
                                                    g$result$14732$Uaprr)
                                                  g$col$14728$Uaprr)
                                                (if (pair?
                                                      g$obj$14727$Uaprr)
                                                  (g$pp-pair$14730$Uaprr
                                                    g$obj$14727$Uaprr
                                                    g$col$14728$Uaprr
                                                    g$extra$14729$Uaprr)
                                                  (g$pp-list$14617$Uaprr
                                                    (vector->list
                                                      g$obj$14727$Uaprr)
                                                    (g$out$14607$Uaprr
                                                      '"#"
                                                      g$col$14728$Uaprr)
                                                    g$extra$14729$Uaprr
                                                    g$pp-expr$14615$Uaprr))))))
                                         '()
                                         (g$min$12508$Uaprr
                                           (fx+ (fx- (fx- g$width$14605$Uaprr
                                                          g$col$14728$Uaprr)
                                                     g$extra$14729$Uaprr)
                                                '1)
                                           (g$pretty-width$14586$Uaprr)))
                                        (g$wr$14608$Uaprr
                                          g$obj$14727$Uaprr
                                          g$col$14728$Uaprr)))))
                                 (g$pp-expr$14615$Uaprr
                                   (case-lambda
                                     ((g$expr$14722$Uaprr
                                        g$col$14723$Uaprr
                                        g$extra$14724$Uaprr)
                                      (if (g$read-macro?$14584$Uaprr
                                            g$expr$14722$Uaprr)
                                        (g$pr$14614$Uaprr
                                          (g$read-macro-body$14581$Uaprr
                                            g$expr$14722$Uaprr)
                                          (g$out$14607$Uaprr
                                            (g$read-macro-prefix$14582$Uaprr
                                              g$expr$14722$Uaprr)
                                            g$col$14723$Uaprr)
                                          g$extra$14724$Uaprr
                                          g$pp-expr$14615$Uaprr)
                                        ((case-lambda
                                           ((g$head$14725$Uaprr)
                                            (if (g$symbol?$12465$Uaprr
                                                  g$head$14725$Uaprr)
                                              ((case-lambda
                                                 ((g$proc$14726$Uaprr)
                                                  (if g$proc$14726$Uaprr
                                                    (g$proc$14726$Uaprr
                                                      g$expr$14722$Uaprr
                                                      g$col$14723$Uaprr
                                                      g$extra$14724$Uaprr)
                                                    (if (g$fx>?$13964$Uaprr
                                                          (string-length
                                                            (g$symbol->string$14580$Uaprr
                                                              g$head$14725$Uaprr))
                                                          (g$max-call-head-width$14588$Uaprr))
                                                      (g$pp-general$14619$Uaprr
                                                        g$expr$14722$Uaprr
                                                        g$col$14723$Uaprr
                                                        g$extra$14724$Uaprr
                                                        '#f
                                                        '#f
                                                        '#f
                                                        g$pp-expr$14615$Uaprr)
                                                      (g$pp-call$14616$Uaprr
                                                        g$expr$14722$Uaprr
                                                        g$col$14723$Uaprr
                                                        g$extra$14724$Uaprr
                                                        g$pp-expr$14615$Uaprr)))))
                                               (g$style$14631$Uaprr
                                                 g$head$14725$Uaprr))
                                              (g$pp-list$14617$Uaprr
                                                g$expr$14722$Uaprr
                                                g$col$14723$Uaprr
                                                g$extra$14724$Uaprr
                                                g$pp-expr$14615$Uaprr))))
                                         (car g$expr$14722$Uaprr))))))
                                 (g$pp-call$14616$Uaprr
                                   (case-lambda
                                     ((g$expr$14717$Uaprr
                                        g$col$14718$Uaprr
                                        g$extra$14719$Uaprr
                                        g$pp-item$14720$Uaprr)
                                      ((case-lambda
                                         ((g$col*$14721$Uaprr)
                                          (if g$col$14718$Uaprr
                                            (begin
                                              '#f
                                              (g$pp-down$14618$Uaprr
                                                (cdr g$expr$14717$Uaprr)
                                                g$col*$14721$Uaprr
                                                (fx+ g$col*$14721$Uaprr
                                                     '1)
                                                g$extra$14719$Uaprr
                                                g$pp-item$14720$Uaprr))
                                            '#f)))
                                       (g$wr$14608$Uaprr
                                         (car g$expr$14717$Uaprr)
                                         (g$out$14607$Uaprr
                                           '"("
                                           g$col$14718$Uaprr))))))
                                 (g$pp-list$14617$Uaprr
                                   (case-lambda
                                     ((g$l$14712$Uaprr
                                        g$col$14713$Uaprr
                                        g$extra$14714$Uaprr
                                        g$pp-item$14715$Uaprr)
                                      ((case-lambda
                                         ((g$col$14716$Uaprr)
                                          (g$pp-down$14618$Uaprr
                                            g$l$14712$Uaprr
                                            g$col$14716$Uaprr
                                            g$col$14716$Uaprr
                                            g$extra$14714$Uaprr
                                            g$pp-item$14715$Uaprr)))
                                       (g$out$14607$Uaprr
                                         '"("
                                         g$col$14713$Uaprr)))))
                                 (g$pp-down$14618$Uaprr
                                   (case-lambda
                                     ((g$l$14702$Uaprr
                                        g$col1$14703$Uaprr
                                        g$col2$14704$Uaprr
                                        g$extra$14705$Uaprr
                                        g$pp-item$14706$Uaprr)
                                      ((letrec ((g$loop$14707$Uaprr
                                                  (case-lambda
                                                    ((g$l$14708$Uaprr
                                                       g$col$14709$Uaprr)
                                                     (if g$col$14709$Uaprr
                                                       (begin
                                                         '#f
                                                         (if (pair?
                                                               g$l$14708$Uaprr)
                                                           ((case-lambda
                                                              ((g$rest$14710$Uaprr)
                                                               ((case-lambda
                                                                  ((g$extra$14711$Uaprr)
                                                                   (g$loop$14707$Uaprr
                                                                     g$rest$14710$Uaprr
                                                                     (g$pr$14614$Uaprr
                                                                       (car g$l$14708$Uaprr)
                                                                       (g$indent$14613$Uaprr
                                                                         g$col2$14704$Uaprr
                                                                         g$col$14709$Uaprr)
                                                                       g$extra$14711$Uaprr
                                                                       g$pp-item$14706$Uaprr))))
                                                                (if (null?
                                                                      g$rest$14710$Uaprr)
                                                                  (fx+ g$extra$14705$Uaprr
                                                                       '1)
                                                                  '0))))
                                                            (cdr g$l$14708$Uaprr))
                                                           (if (null?
                                                                 g$l$14708$Uaprr)
                                                             (g$out$14607$Uaprr
                                                               '")"
                                                               g$col$14709$Uaprr)
                                                             (g$out$14607$Uaprr
                                                               '")"
                                                               (g$pr$14614$Uaprr
                                                                 g$l$14708$Uaprr
                                                                 (g$indent$14613$Uaprr
                                                                   g$col2$14704$Uaprr
                                                                   (g$out$14607$Uaprr
                                                                     '"."
                                                                     (g$indent$14613$Uaprr
                                                                       g$col2$14704$Uaprr
                                                                       g$col$14709$Uaprr)))
                                                                 (fx+ g$extra$14705$Uaprr
                                                                      '1)
                                                                 g$pp-item$14706$Uaprr)))))
                                                       '#f)))))
                                         g$loop$14707$Uaprr)
                                       g$l$14702$Uaprr
                                       g$col1$14703$Uaprr))))
                                 (g$pp-general$14619$Uaprr
                                   (case-lambda
                                     ((g$expr$14669$Uaprr
                                        g$col$14670$Uaprr
                                        g$extra$14671$Uaprr
                                        g$named?$14672$Uaprr
                                        g$pp-1$14673$Uaprr
                                        g$pp-2$14674$Uaprr
                                        g$pp-3$14675$Uaprr)
                                      (letrec* ((g$tail1$14676$Uaprr
                                                  (case-lambda
                                                    ((g$rest$14695$Uaprr
                                                       g$col1$14696$Uaprr
                                                       g$col2$14697$Uaprr
                                                       g$col3$14698$Uaprr)
                                                     (if (if g$pp-1$14673$Uaprr
                                                           (begin
                                                             '#f
                                                             (pair?
                                                               g$rest$14695$Uaprr))
                                                           '#f)
                                                       ((case-lambda
                                                          ((g$val1$14699$Uaprr)
                                                           ((case-lambda
                                                              ((g$rest$14700$Uaprr)
                                                               ((case-lambda
                                                                  ((g$extra$14701$Uaprr)
                                                                   (g$tail2$14677$Uaprr
                                                                     g$rest$14700$Uaprr
                                                                     g$col1$14696$Uaprr
                                                                     (g$pr$14614$Uaprr
                                                                       g$val1$14699$Uaprr
                                                                       (g$indent$14613$Uaprr
                                                                         g$col3$14698$Uaprr
                                                                         g$col2$14697$Uaprr)
                                                                       g$extra$14701$Uaprr
                                                                       g$pp-1$14673$Uaprr)
                                                                     g$col3$14698$Uaprr)))
                                                                (if (null?
                                                                      g$rest$14700$Uaprr)
                                                                  (fx+ g$extra$14671$Uaprr
                                                                       '1)
                                                                  '0))))
                                                            (cdr g$rest$14695$Uaprr))))
                                                        (car g$rest$14695$Uaprr))
                                                       (g$tail2$14677$Uaprr
                                                         g$rest$14695$Uaprr
                                                         g$col1$14696$Uaprr
                                                         g$col2$14697$Uaprr
                                                         g$col3$14698$Uaprr)))))
                                                (g$tail2$14677$Uaprr
                                                  (case-lambda
                                                    ((g$rest$14688$Uaprr
                                                       g$col1$14689$Uaprr
                                                       g$col2$14690$Uaprr
                                                       g$col3$14691$Uaprr)
                                                     (if (if g$pp-2$14674$Uaprr
                                                           (begin
                                                             '#f
                                                             (pair?
                                                               g$rest$14688$Uaprr))
                                                           '#f)
                                                       ((case-lambda
                                                          ((g$val1$14692$Uaprr)
                                                           ((case-lambda
                                                              ((g$rest$14693$Uaprr)
                                                               ((case-lambda
                                                                  ((g$extra$14694$Uaprr)
                                                                   (g$tail3$14678$Uaprr
                                                                     g$rest$14693$Uaprr
                                                                     g$col1$14689$Uaprr
                                                                     (g$pr$14614$Uaprr
                                                                       g$val1$14692$Uaprr
                                                                       (g$indent$14613$Uaprr
                                                                         g$col3$14691$Uaprr
                                                                         g$col2$14690$Uaprr)
                                                                       g$extra$14694$Uaprr
                                                                       g$pp-2$14674$Uaprr))))
                                                                (if (null?
                                                                      g$rest$14693$Uaprr)
                                                                  (fx+ g$extra$14671$Uaprr
                                                                       '1)
                                                                  '0))))
                                                            (cdr g$rest$14688$Uaprr))))
                                                        (car g$rest$14688$Uaprr))
                                                       (g$tail3$14678$Uaprr
                                                         g$rest$14688$Uaprr
                                                         g$col1$14689$Uaprr
                                                         g$col2$14690$Uaprr)))))
                                                (g$tail3$14678$Uaprr
                                                  (case-lambda
                                                    ((g$rest$14685$Uaprr
                                                       g$col1$14686$Uaprr
                                                       g$col2$14687$Uaprr)
                                                     (g$pp-down$14618$Uaprr
                                                       g$rest$14685$Uaprr
                                                       g$col2$14687$Uaprr
                                                       g$col1$14686$Uaprr
                                                       g$extra$14671$Uaprr
                                                       g$pp-3$14675$Uaprr)))))
                                        ((case-lambda
                                           ((g$head$14679$Uaprr)
                                            ((case-lambda
                                               ((g$rest$14680$Uaprr)
                                                ((case-lambda
                                                   ((g$col*$14681$Uaprr)
                                                    (if (if g$named?$14672$Uaprr
                                                          (begin
                                                            '#f
                                                            (pair?
                                                              g$rest$14680$Uaprr))
                                                          '#f)
                                                      ((case-lambda
                                                         ((g$name$14682$Uaprr)
                                                          ((case-lambda
                                                             ((g$rest$14683$Uaprr)
                                                              ((case-lambda
                                                                 ((g$col**$14684$Uaprr)
                                                                  (g$tail1$14676$Uaprr
                                                                    g$rest$14683$Uaprr
                                                                    (fx+ g$col$14670$Uaprr
                                                                         (g$indent-general$14587$Uaprr))
                                                                    g$col**$14684$Uaprr
                                                                    (fx+ g$col**$14684$Uaprr
                                                                         '1))))
                                                               (g$wr$14608$Uaprr
                                                                 g$name$14682$Uaprr
                                                                 (g$out$14607$Uaprr
                                                                   '" "
                                                                   g$col*$14681$Uaprr)))))
                                                           (cdr g$rest$14680$Uaprr))))
                                                       (car g$rest$14680$Uaprr))
                                                      (g$tail1$14676$Uaprr
                                                        g$rest$14680$Uaprr
                                                        (fx+ g$col$14670$Uaprr
                                                             (g$indent-general$14587$Uaprr))
                                                        g$col*$14681$Uaprr
                                                        (fx+ g$col*$14681$Uaprr
                                                             '1)))))
                                                 (g$wr$14608$Uaprr
                                                   g$head$14679$Uaprr
                                                   (g$out$14607$Uaprr
                                                     '"("
                                                     g$col$14670$Uaprr)))))
                                             (cdr g$expr$14669$Uaprr))))
                                         (car g$expr$14669$Uaprr))))))
                                 (g$pp-expr-list$14620$Uaprr
                                   (case-lambda
                                     ((g$l$14666$Uaprr
                                        g$col$14667$Uaprr
                                        g$extra$14668$Uaprr)
                                      (g$pp-list$14617$Uaprr
                                        g$l$14666$Uaprr
                                        g$col$14667$Uaprr
                                        g$extra$14668$Uaprr
                                        g$pp-expr$14615$Uaprr))))
                                 (g$pp-SYNTAX-CASE$14621$Uaprr
                                   (case-lambda
                                     ((g$expr$14663$Uaprr
                                        g$col$14664$Uaprr
                                        g$extra$14665$Uaprr)
                                      (g$pp-general$14619$Uaprr
                                        g$expr$14663$Uaprr
                                        g$col$14664$Uaprr
                                        g$extra$14665$Uaprr
                                        '#t
                                        g$pp-expr-list$14620$Uaprr
                                        '#f
                                        g$pp-expr$14615$Uaprr))))
                                 (g$pp-LAMBDA$14622$Uaprr
                                   (case-lambda
                                     ((g$expr$14660$Uaprr
                                        g$col$14661$Uaprr
                                        g$extra$14662$Uaprr)
                                      (g$pp-general$14619$Uaprr
                                        g$expr$14660$Uaprr
                                        g$col$14661$Uaprr
                                        g$extra$14662$Uaprr
                                        '#f
                                        g$pp-expr-list$14620$Uaprr
                                        '#f
                                        g$pp-expr$14615$Uaprr))))
                                 (g$pp-IF$14623$Uaprr
                                   (case-lambda
                                     ((g$expr$14657$Uaprr
                                        g$col$14658$Uaprr
                                        g$extra$14659$Uaprr)
                                      (g$pp-general$14619$Uaprr
                                        g$expr$14657$Uaprr
                                        g$col$14658$Uaprr
                                        g$extra$14659$Uaprr
                                        '#f
                                        g$pp-expr$14615$Uaprr
                                        '#f
                                        g$pp-expr$14615$Uaprr))))
                                 (g$pp-COND$14624$Uaprr
                                   (case-lambda
                                     ((g$expr$14654$Uaprr
                                        g$col$14655$Uaprr
                                        g$extra$14656$Uaprr)
                                      (g$pp-call$14616$Uaprr
                                        g$expr$14654$Uaprr
                                        g$col$14655$Uaprr
                                        g$extra$14656$Uaprr
                                        g$pp-expr-list$14620$Uaprr))))
                                 (g$pp-CASE$14625$Uaprr
                                   (case-lambda
                                     ((g$expr$14651$Uaprr
                                        g$col$14652$Uaprr
                                        g$extra$14653$Uaprr)
                                      (g$pp-general$14619$Uaprr
                                        g$expr$14651$Uaprr
                                        g$col$14652$Uaprr
                                        g$extra$14653$Uaprr
                                        '#f
                                        g$pp-expr$14615$Uaprr
                                        '#f
                                        g$pp-expr-list$14620$Uaprr))))
                                 (g$pp-CASE-LAMBDA$14626$Uaprr
                                   (case-lambda
                                     ((g$expr$14648$Uaprr
                                        g$col$14649$Uaprr
                                        g$extra$14650$Uaprr)
                                      (g$pp-general$14619$Uaprr
                                        g$expr$14648$Uaprr
                                        g$col$14649$Uaprr
                                        g$extra$14650$Uaprr
                                        '#f
                                        '#f
                                        '#f
                                        g$pp-expr-list$14620$Uaprr))))
                                 (g$pp-AND$14627$Uaprr
                                   (case-lambda
                                     ((g$expr$14645$Uaprr
                                        g$col$14646$Uaprr
                                        g$extra$14647$Uaprr)
                                      (g$pp-call$14616$Uaprr
                                        g$expr$14645$Uaprr
                                        g$col$14646$Uaprr
                                        g$extra$14647$Uaprr
                                        g$pp-expr$14615$Uaprr))))
                                 (g$pp-LET$14628$Uaprr
                                   (case-lambda
                                     ((g$expr$14640$Uaprr
                                        g$col$14641$Uaprr
                                        g$extra$14642$Uaprr)
                                      ((case-lambda
                                         ((g$rest$14643$Uaprr)
                                          ((case-lambda
                                             ((g$named?$14644$Uaprr)
                                              (g$pp-general$14619$Uaprr
                                                g$expr$14640$Uaprr
                                                g$col$14641$Uaprr
                                                g$extra$14642$Uaprr
                                                g$named?$14644$Uaprr
                                                g$pp-expr-list$14620$Uaprr
                                                '#f
                                                g$pp-expr$14615$Uaprr)))
                                           (if (pair?
                                                 g$rest$14643$Uaprr)
                                             (begin
                                               '#f
                                               (g$symbol?$12465$Uaprr
                                                 (car g$rest$14643$Uaprr)))
                                             '#f))))
                                       (cdr g$expr$14640$Uaprr)))))
                                 (g$pp-BEGIN$14629$Uaprr
                                   (case-lambda
                                     ((g$expr$14637$Uaprr
                                        g$col$14638$Uaprr
                                        g$extra$14639$Uaprr)
                                      (g$pp-general$14619$Uaprr
                                        g$expr$14637$Uaprr
                                        g$col$14638$Uaprr
                                        g$extra$14639$Uaprr
                                        '#f
                                        '#f
                                        '#f
                                        g$pp-expr$14615$Uaprr))))
                                 (g$pp-DO$14630$Uaprr
                                   (case-lambda
                                     ((g$expr$14634$Uaprr
                                        g$col$14635$Uaprr
                                        g$extra$14636$Uaprr)
                                      (g$pp-general$14619$Uaprr
                                        g$expr$14634$Uaprr
                                        g$col$14635$Uaprr
                                        g$extra$14636$Uaprr
                                        '#f
                                        g$pp-expr-list$14620$Uaprr
                                        g$pp-expr-list$14620$Uaprr
                                        g$pp-expr$14615$Uaprr))))
                                 (g$style$14631$Uaprr
                                   (case-lambda
                                     ((g$head$14632$Uaprr)
                                      ((case-lambda
                                         ((g$t$14633$Uaprr)
                                          (if (g$memv$11715$Uaprr
                                                g$t$14633$Uaprr
                                                '(lambda let*
                                                   letrec
                                                   letrec*
                                                   define
                                                   define-syntax
                                                   syntax-rules
                                                   let-syntax
                                                   letrec-syntax
                                                   with-syntax
                                                   library
                                                   library-letrec*))
                                            g$pp-LAMBDA$14622$Uaprr
                                            (if (eqv?
                                                  g$t$14633$Uaprr
                                                  'syntax-case)
                                              g$pp-SYNTAX-CASE$14621$Uaprr
                                              (if (g$memv$11715$Uaprr
                                                    g$t$14633$Uaprr
                                                    '(if set!
                                                       when
                                                       unless))
                                                g$pp-IF$14623$Uaprr
                                                (if (eqv?
                                                      g$t$14633$Uaprr
                                                      'cond)
                                                  g$pp-COND$14624$Uaprr
                                                  (if (eqv?
                                                        g$t$14633$Uaprr
                                                        'case-lambda)
                                                    g$pp-CASE-LAMBDA$14626$Uaprr
                                                    (if (eqv?
                                                          g$t$14633$Uaprr
                                                          'case)
                                                      g$pp-CASE$14625$Uaprr
                                                      (if (g$memv$11715$Uaprr
                                                            g$t$14633$Uaprr
                                                            '(and or
                                                                  import
                                                                  export))
                                                        g$pp-AND$14627$Uaprr
                                                        (if (eqv?
                                                              g$t$14633$Uaprr
                                                              'let)
                                                          g$pp-LET$14628$Uaprr
                                                          (if (eqv?
                                                                g$t$14633$Uaprr
                                                                'begin)
                                                            g$pp-BEGIN$14629$Uaprr
                                                            (if (eqv?
                                                                  g$t$14633$Uaprr
                                                                  'do)
                                                              g$pp-DO$14630$Uaprr
                                                              '#f))))))))))))
                                       g$head$14632$Uaprr)))))
                         (g$pr$14614$Uaprr
                           g$obj$14610$Uaprr
                           g$col$14611$Uaprr
                           '0
                           g$pp-expr$14615$Uaprr))))))
          (if g$width$14605$Uaprr
            (g$out$14607$Uaprr
              g$genwrite:newline-str$14579$Uaprr
              (g$pp$14609$Uaprr g$obj$14603$Uaprr '0))
            (g$wr$14608$Uaprr g$obj$14603$Uaprr '0))))))
   (g$pretty-width$14586$Uaprr
     g$pretty-width$14779$Uaprr
     (g$make-parameter$14574$Uaprr '72))
   (g$indent-general$14587$Uaprr
     g$indent-general$14780$Uaprr
     (g$make-parameter$14574$Uaprr '2))
   (g$max-call-head-width$14588$Uaprr
     g$max-call-head-width$14781$Uaprr
     (g$make-parameter$14574$Uaprr '3))
   (g$pretty-gensyms$14589$Uaprr
     g$pretty-gensyms$14782$Uaprr
     (g$make-parameter$14574$Uaprr '#f))
   (g$reverse-string-append$14590$Uaprr
     g$reverse-string-append$14783$Uaprr
     (case-lambda
       ((g$l$14758$Uaprr)
        (letrec* ((g$rev-string-append$14759$Uaprr
                    (case-lambda
                      ((g$l$14760$Uaprr g$i$14761$Uaprr)
                       (if (pair? g$l$14760$Uaprr)
                         ((case-lambda
                            ((g$str$14762$Uaprr)
                             ((case-lambda
                                ((g$len$14763$Uaprr)
                                 ((case-lambda
                                    ((g$result$14764$Uaprr)
                                     ((letrec ((g$loop$14765$Uaprr
                                                 (case-lambda
                                                   ((g$j$14766$Uaprr
                                                      g$k$14767$Uaprr)
                                                    (if (g$fx<?$13962$Uaprr
                                                          g$j$14766$Uaprr
                                                          g$len$14763$Uaprr)
                                                      (begin
                                                        (string-set!
                                                          g$result$14764$Uaprr
                                                          g$k$14767$Uaprr
                                                          (string-ref
                                                            g$str$14762$Uaprr
                                                            g$j$14766$Uaprr))
                                                        (g$loop$14765$Uaprr
                                                          (fx+ g$j$14766$Uaprr
                                                               '1)
                                                          (fx+ g$k$14767$Uaprr
                                                               '1)))
                                                      g$result$14764$Uaprr)))))
                                        g$loop$14765$Uaprr)
                                      '0
                                      (fx- (fx- (string-length
                                                  g$result$14764$Uaprr)
                                                g$i$14761$Uaprr)
                                           g$len$14763$Uaprr))))
                                  (g$rev-string-append$14759$Uaprr
                                    (cdr g$l$14760$Uaprr)
                                    (fx+ g$i$14761$Uaprr
                                         g$len$14763$Uaprr)))))
                              (string-length g$str$14762$Uaprr))))
                          (car g$l$14760$Uaprr))
                         (make-string g$i$14761$Uaprr))))))
          (g$rev-string-append$14759$Uaprr g$l$14758$Uaprr '0)))))
   (g$pretty-print$14591$Uaprr
     g$pretty-print$14784$Uaprr
     (case-lambda
       ((g$obj$14768$Uaprr . g$opt$14769$Uaprr)
        ((case-lambda
           ((g$port$14770$Uaprr)
            (g$generic-write$14585$Uaprr
              g$obj$14768$Uaprr
              '#f
              (g$pretty-width$14586$Uaprr)
              (case-lambda
                ((g$s$14771$Uaprr)
                 (begin
                   (display g$s$14771$Uaprr g$port$14770$Uaprr)
                   '#t))))))
         (if (pair? g$opt$14769$Uaprr)
           (car g$opt$14769$Uaprr)
           (current-output-port)))))))
  (void))

(library-letrec* (ironscheme cps)
  ((g$cps/generate-reference$14785$Uaprr
     g$cps/generate-reference$15050$Uaprr
     (case-lambda
       ((g$variable$14838$Uaprr)
        (g$cps/generate-operand$14789$Uaprr
          (g$make-reference$14815$Uaprr g$variable$14838$Uaprr)))))
   (g$cps/generate-literal$14786$Uaprr
     g$cps/generate-literal$15051$Uaprr
     (case-lambda
       ((g$datum$14839$Uaprr)
        (g$cps/generate-operand$14789$Uaprr
          (g$make-literal$14814$Uaprr g$datum$14839$Uaprr)))))
   (g$cps/generate-abstraction$14787$Uaprr
     g$cps/generate-abstraction$15052$Uaprr
     (case-lambda
       ((g$bvl$14840$Uaprr g$body-generator$14841$Uaprr)
        (g$cps/generate-operand$14789$Uaprr
          (g$make-user-abstraction$14816$Uaprr
            g$bvl$14840$Uaprr
            (case-lambda
              ((g$continuation-variable$14842$Uaprr)
               (g$body-generator$14841$Uaprr
                 (g$variable-continuator$14802$Uaprr
                   g$continuation-variable$14842$Uaprr)))))))))
   (g$cps/generate-abstractions$14788$Uaprr
     g$cps/generate-abstractions$15053$Uaprr
     (case-lambda
       ((g$bvls$14843$Uaprr g$body-generators$14844$Uaprr)
        (g$cps/generate-operand$14789$Uaprr
          (g$make-user-abstractions$14817$Uaprr
            g$bvls$14843$Uaprr
            (g$map$11722$Uaprr
              (case-lambda
                ((g$body-generator$14845$Uaprr)
                 (case-lambda
                   ((g$continuation-variable$14846$Uaprr)
                    (g$body-generator$14845$Uaprr
                      (g$variable-continuator$14802$Uaprr
                        g$continuation-variable$14846$Uaprr))))))
              g$body-generators$14844$Uaprr))))))
   (g$cps/generate-operand$14789$Uaprr
     g$cps/generate-operand$15054$Uaprr
     (case-lambda
       ((g$operand$14847$Uaprr)
        (case-lambda
          ((g$continuator$14848$Uaprr)
           (g$continue-with-operand$14805$Uaprr
             g$continuator$14848$Uaprr
             g$operand$14847$Uaprr))))))
   (g$cps/generate-conditional$14790$Uaprr
     g$cps/generate-conditional$15055$Uaprr
     (case-lambda
       ((g$condition-generator$14849$Uaprr
          g$consequent-generator$14850$Uaprr
          g$alternative-generator$14851$Uaprr)
        (case-lambda
          ((g$continuator$14852$Uaprr)
           (letrec* ((g$if-variable$14853$Uaprr
                       (case-lambda
                         ((g$continuation-variable$14855$Uaprr)
                          ((case-lambda
                             ((g$continuator*$14856$Uaprr)
                              (g$condition-generator$14849$Uaprr
                                (g$conditional-continuator$14801$Uaprr
                                  (case-lambda
                                    ((g$condition$14857$Uaprr)
                                     (g$make-conditional$14824$Uaprr
                                       g$condition$14857$Uaprr
                                       (g$consequent-generator$14850$Uaprr
                                         g$continuator*$14856$Uaprr)
                                       (g$alternative-generator$14851$Uaprr
                                         g$continuator*$14856$Uaprr))))))))
                           (g$variable-continuator$14802$Uaprr
                             g$continuation-variable$14855$Uaprr))))))
             (g$reify-continuation*$14807$Uaprr
               g$continuator$14852$Uaprr
               g$if-variable$14853$Uaprr
               (case-lambda
                 ((g$continuation-abstraction$14854$Uaprr)
                  (g$make-conditional-join$14825$Uaprr
                    g$continuation-abstraction$14854$Uaprr
                    g$if-variable$14853$Uaprr))))))))))
   (g$cps/generate-recursive-bind$14791$Uaprr
     g$cps/generate-recursive-bind$15056$Uaprr
     (case-lambda
       ((g$variables$14858$Uaprr
          g$generators$14859$Uaprr
          g$body-generator$14860$Uaprr)
        (case-lambda
          ((g$continuator$14861$Uaprr)
           (g$make-recursive-bind$14819$Uaprr
             g$variables$14858$Uaprr
             (g$map$11722$Uaprr
               (case-lambda
                 ((g$generator$14862$Uaprr)
                  (case-lambda
                    ((g$continuation-variable$14863$Uaprr)
                     (g$generator$14862$Uaprr
                       (g$variable-continuator$14802$Uaprr
                         g$continuation-variable$14863$Uaprr))))))
               g$generators$14859$Uaprr)
             (g$body-generator$14860$Uaprr
               (g$reified-continuator$14804$Uaprr
                 g$continuator$14861$Uaprr))))))))
   (g$cps/generate-recursive*-bind$14792$Uaprr
     g$cps/generate-recursive*-bind$15057$Uaprr
     (case-lambda
       ((g$variables$14864$Uaprr
          g$generators$14865$Uaprr
          g$body-generator$14866$Uaprr)
        (case-lambda
          ((g$continuator$14867$Uaprr)
           (g$make-recursive*-bind$14820$Uaprr
             g$variables$14864$Uaprr
             (g$map$11722$Uaprr
               (case-lambda
                 ((g$generator$14868$Uaprr)
                  (case-lambda
                    ((g$continuation-variable$14869$Uaprr)
                     (g$generator$14868$Uaprr
                       (g$variable-continuator$14802$Uaprr
                         g$continuation-variable$14869$Uaprr))))))
               g$generators$14865$Uaprr)
             (g$body-generator$14866$Uaprr
               (g$reified-continuator$14804$Uaprr
                 g$continuator$14867$Uaprr))))))))
   (g$cps/generate-recursive*-library-bind$14793$Uaprr
     g$cps/generate-recursive*-library-bind$15058$Uaprr
     (case-lambda
       ((g$name$14870$Uaprr
          g$variables$14871$Uaprr
          g$variables*$14872$Uaprr
          g$generators$14873$Uaprr
          g$body-generator$14874$Uaprr)
        (case-lambda
          ((g$continuator$14875$Uaprr)
           (g$make-recursive*-library-bind$14821$Uaprr
             g$name$14870$Uaprr
             g$variables$14871$Uaprr
             g$variables*$14872$Uaprr
             (g$map$11722$Uaprr
               (case-lambda
                 ((g$generator$14876$Uaprr)
                  (case-lambda
                    ((g$continuation-variable$14877$Uaprr)
                     (g$generator$14876$Uaprr
                       (g$variable-continuator$14802$Uaprr
                         g$continuation-variable$14877$Uaprr))))))
               g$generators$14873$Uaprr)
             (g$body-generator$14874$Uaprr
               (g$reified-continuator$14804$Uaprr
                 g$continuator$14875$Uaprr))))))))
   (g$cps/generate-sequence$14794$Uaprr
     g$cps/generate-sequence$15059$Uaprr
     (case-lambda
       ((g$generators$14878$Uaprr)
        (case-lambda
          ((g$continuator$14879$Uaprr)
           ((letrec ((g$recur$14880$Uaprr
                       (case-lambda
                         ((g$generators$14881$Uaprr)
                          ((car g$generators$14881$Uaprr)
                           ((case-lambda
                              ((g$generators$14882$Uaprr)
                               (if (pair? g$generators$14882$Uaprr)
                                 (g$effect-continuator$14800$Uaprr
                                   (case-lambda
                                     (()
                                      (g$recur$14880$Uaprr
                                        g$generators$14882$Uaprr))))
                                 g$continuator$14879$Uaprr)))
                            (cdr g$generators$14881$Uaprr)))))))
              g$recur$14880$Uaprr)
            g$generators$14878$Uaprr))))))
   (g$cps/generate-assignment$14795$Uaprr
     g$cps/generate-assignment$15060$Uaprr
     (case-lambda
       ((g$location$14883$Uaprr g$expression-generator$14884$Uaprr)
        (case-lambda
          ((g$continuator$14885$Uaprr)
           (g$expression-generator$14884$Uaprr
             (g$operand-continuator$14799$Uaprr
               (case-lambda
                 ((g$operand$14886$Uaprr)
                  (g$make-assignment$14827$Uaprr
                    g$location$14883$Uaprr
                    g$operand$14886$Uaprr
                    (g$continue-with-operand$14805$Uaprr
                      g$continuator$14885$Uaprr
                      '(cps-void))))))))))))
   (g$cps/generate-declaration$14796$Uaprr
     g$cps/generate-declaration$15061$Uaprr
     (case-lambda
       ((g$location$14887$Uaprr g$expression-generator$14888$Uaprr)
        (case-lambda
          ((g$continuator$14889$Uaprr)
           (g$expression-generator$14888$Uaprr
             (g$operand-continuator$14799$Uaprr
               (case-lambda
                 ((g$operand$14890$Uaprr)
                  (g$make-declaration$14828$Uaprr
                    g$location$14887$Uaprr
                    g$operand$14890$Uaprr
                    (g$continue-with-operand$14805$Uaprr
                      g$continuator$14889$Uaprr
                      '(cps-void))))))))))))
   (g$cps/generate-combination$14797$Uaprr
     g$cps/generate-combination$15062$Uaprr
     (case-lambda
       ((g$operator-generator$14891$Uaprr
          g$operand-generators$14892$Uaprr)
        (g$cps/generate-subproblems$14798$Uaprr
          (g$reverse$12473$Uaprr
            (cons
              g$operator-generator$14891$Uaprr
              g$operand-generators$14892$Uaprr))
          (case-lambda
            ((g$operands$14893$Uaprr g$continuator$14894$Uaprr)
             (g$make-combination$14822$Uaprr
               (car g$operands$14893$Uaprr)
               (g$reify-continuation$14806$Uaprr
                 g$continuator$14894$Uaprr)
               (cdr g$operands$14893$Uaprr))))))))
   (g$cps/generate-subproblems$14798$Uaprr
     g$cps/generate-subproblems$15063$Uaprr
     (case-lambda
       ((g$generators$14895$Uaprr g$combiner$14896$Uaprr)
        (case-lambda
          ((g$continuator$14897$Uaprr)
           ((letrec ((g$recur$14898$Uaprr
                       (case-lambda
                         ((g$generators$14899$Uaprr
                            g$operands$14900$Uaprr)
                          (if (pair? g$generators$14899$Uaprr)
                            ((car g$generators$14899$Uaprr)
                             ((case-lambda
                                ((g$generators$14901$Uaprr)
                                 (g$operand-continuator$14799$Uaprr
                                   (case-lambda
                                     ((g$operand$14902$Uaprr)
                                      (g$recur$14898$Uaprr
                                        g$generators$14901$Uaprr
                                        (cons
                                          g$operand$14902$Uaprr
                                          g$operands$14900$Uaprr)))))))
                              (cdr g$generators$14899$Uaprr)))
                            (g$combiner$14896$Uaprr
                              g$operands$14900$Uaprr
                              g$continuator$14897$Uaprr))))))
              g$recur$14898$Uaprr)
            g$generators$14895$Uaprr
            '()))))))
   (g$operand-continuator$14799$Uaprr
     g$operand-continuator$15064$Uaprr
     (case-lambda
       ((g$generator$14903$Uaprr)
        (case-lambda
          ((g$if-operand$14904$Uaprr
             g$if-effect$14905$Uaprr
             g$if-conditional$14906$Uaprr
             g$if-variable$14907$Uaprr
             g$if-inline$14908$Uaprr)
           (begin
             g$if-effect$14905$Uaprr
             g$if-conditional$14906$Uaprr
             g$if-variable$14907$Uaprr
             g$if-inline$14908$Uaprr
             (g$if-operand$14904$Uaprr g$generator$14903$Uaprr)))))))
   (g$effect-continuator$14800$Uaprr
     g$effect-continuator$15065$Uaprr
     (case-lambda
       ((g$generator$14909$Uaprr)
        (case-lambda
          ((g$if-operand$14910$Uaprr
             g$if-effect$14911$Uaprr
             g$if-conditional$14912$Uaprr
             g$if-variable$14913$Uaprr
             g$if-inline$14914$Uaprr)
           (begin
             g$if-operand$14910$Uaprr
             g$if-conditional$14912$Uaprr
             g$if-variable$14913$Uaprr
             g$if-inline$14914$Uaprr
             (g$if-effect$14911$Uaprr g$generator$14909$Uaprr)))))))
   (g$conditional-continuator$14801$Uaprr
     g$conditional-continuator$15066$Uaprr
     (case-lambda
       ((g$generator$14915$Uaprr)
        (case-lambda
          ((g$if-operand$14916$Uaprr
             g$if-effect$14917$Uaprr
             g$if-conditional$14918$Uaprr
             g$if-variable$14919$Uaprr
             g$if-inline$14920$Uaprr)
           (begin
             g$if-operand$14916$Uaprr
             g$if-effect$14917$Uaprr
             g$if-variable$14919$Uaprr
             g$if-inline$14920$Uaprr
             (g$if-conditional$14918$Uaprr
               g$generator$14915$Uaprr)))))))
   (g$variable-continuator$14802$Uaprr
     g$variable-continuator$15067$Uaprr
     (case-lambda
       ((g$variable$14921$Uaprr)
        (case-lambda
          ((g$if-operand$14922$Uaprr
             g$if-effect$14923$Uaprr
             g$if-conditional$14924$Uaprr
             g$if-variable$14925$Uaprr
             g$if-inline$14926$Uaprr)
           (begin
             g$if-operand$14922$Uaprr
             g$if-effect$14923$Uaprr
             g$if-variable$14925$Uaprr
             g$if-inline$14926$Uaprr
             (g$if-variable$14925$Uaprr g$variable$14921$Uaprr)))))))
   (g$inline-continuator$14803$Uaprr
     g$inline-continuator$15068$Uaprr
     (case-lambda
       ((g$continuation$14927$Uaprr)
        (case-lambda
          ((g$if-operand$14928$Uaprr
             g$if-effect$14929$Uaprr
             g$if-conditional$14930$Uaprr
             g$if-variable$14931$Uaprr
             g$if-inline$14932$Uaprr)
           (begin
             g$if-operand$14928$Uaprr
             g$if-effect$14929$Uaprr
             g$if-conditional$14930$Uaprr
             g$if-variable$14931$Uaprr
             (g$if-inline$14932$Uaprr g$continuation$14927$Uaprr)))))))
   (g$reified-continuator$14804$Uaprr
     g$reified-continuator$15069$Uaprr
     (case-lambda
       ((g$continuator$14933$Uaprr)
        (case-lambda
          ((g$if-operand$14934$Uaprr
             g$if-effect$14935$Uaprr
             g$if-conditional$14936$Uaprr
             g$if-variable$14937$Uaprr
             g$if-inline$14938$Uaprr)
           (begin
             g$if-operand$14934$Uaprr
             g$if-effect$14935$Uaprr
             g$if-conditional$14936$Uaprr
             (g$reify-continuation*$14807$Uaprr
               g$continuator$14933$Uaprr
               g$if-variable$14937$Uaprr
               g$if-inline$14938$Uaprr)))))))
   (g$continue-with-operand$14805$Uaprr
     g$continue-with-operand$15070$Uaprr
     (case-lambda
       ((g$continuator$14939$Uaprr g$operand$14940$Uaprr)
        (g$continuator$14939$Uaprr
          (case-lambda
            ((g$generator$14941$Uaprr)
             (g$generator$14941$Uaprr g$operand$14940$Uaprr)))
          (case-lambda
            ((g$generator$14942$Uaprr) (g$generator$14942$Uaprr)))
          (case-lambda
            ((g$generator$14943$Uaprr)
             (g$generator$14943$Uaprr
               (g$make-truth-test$14829$Uaprr g$operand$14940$Uaprr))))
          (case-lambda
            ((g$continuation-variable$14944$Uaprr)
             (g$make-return$14823$Uaprr
               (g$make-reference$14815$Uaprr
                 g$continuation-variable$14944$Uaprr)
               (list g$operand$14940$Uaprr))))
          (case-lambda
            ((g$continuation-abstraction$14945$Uaprr)
             (g$make-return$14823$Uaprr
               g$continuation-abstraction$14945$Uaprr
               (list g$operand$14940$Uaprr))))))))
   (g$reify-continuation$14806$Uaprr
     g$reify-continuation$15071$Uaprr
     (case-lambda
       ((g$continuator$14946$Uaprr)
        (g$continuator$14946$Uaprr
          g$operand-continuation-reifier$14809$Uaprr
          g$effect-continuation-reifier$14811$Uaprr
          g$conditional-continuation-reifier$14813$Uaprr
          (case-lambda
            ((g$variable$14947$Uaprr)
             (g$make-reference$14815$Uaprr g$variable$14947$Uaprr)))
          (case-lambda
            ((g$continuation$14948$Uaprr)
             g$continuation$14948$Uaprr))))))
   (g$reify-continuation*$14807$Uaprr
     g$reify-continuation*$15072$Uaprr
     (case-lambda
       ((g$continuator$14949$Uaprr
          g$if-variable$14950$Uaprr
          g$if-inline$14951$Uaprr)
        (g$continuator$14949$Uaprr
          (g$operand-continuation-reifier*$14808$Uaprr
            g$if-inline$14951$Uaprr)
          (g$effect-continuation-reifier*$14810$Uaprr
            g$if-inline$14951$Uaprr)
          (g$conditional-continuation-reifier*$14812$Uaprr
            g$if-inline$14951$Uaprr)
          g$if-variable$14950$Uaprr
          g$if-inline$14951$Uaprr))))
   (g$operand-continuation-reifier*$14808$Uaprr
     g$operand-continuation-reifier*$15073$Uaprr
     (case-lambda
       ((g$receiver$14952$Uaprr)
        (case-lambda
          ((g$generator$14953$Uaprr)
           (g$receiver$14952$Uaprr
             ((case-lambda
                ((g$variable$14954$Uaprr)
                 (g$make-continuation-abstraction$14818$Uaprr
                   (list g$variable$14954$Uaprr)
                   (g$generator$14953$Uaprr
                     (g$make-reference$14815$Uaprr
                       g$variable$14954$Uaprr)))))
              (g$generate-variable$14830$Uaprr 'V))))))))
   (g$operand-continuation-reifier$14809$Uaprr
     g$operand-continuation-reifier$15074$Uaprr
     (g$operand-continuation-reifier*$14808$Uaprr values))
   (g$effect-continuation-reifier*$14810$Uaprr
     g$effect-continuation-reifier*$15075$Uaprr
     (case-lambda
       ((g$receiver$14955$Uaprr)
        (case-lambda
          ((g$generator$14956$Uaprr)
           (g$receiver$14955$Uaprr
             ((case-lambda
                ((g$variable$14957$Uaprr)
                 (g$make-continuation-abstraction$14818$Uaprr
                   g$variable$14957$Uaprr
                   (g$generator$14956$Uaprr))))
              (g$generate-variable$14830$Uaprr 'IGNORE))))))))
   (g$effect-continuation-reifier$14811$Uaprr
     g$effect-continuation-reifier$15076$Uaprr
     (g$effect-continuation-reifier*$14810$Uaprr values))
   (g$conditional-continuation-reifier*$14812$Uaprr
     g$conditional-continuation-reifier*$15077$Uaprr
     (case-lambda
       ((g$receiver$14958$Uaprr)
        (case-lambda
          ((g$generator$14959$Uaprr)
           (g$receiver$14958$Uaprr
             ((case-lambda
                ((g$variable$14960$Uaprr)
                 (g$make-continuation-abstraction$14818$Uaprr
                   (list g$variable$14960$Uaprr)
                   (g$generator$14959$Uaprr
                     (g$make-truth-test$14829$Uaprr
                       (g$make-reference$14815$Uaprr
                         g$variable$14960$Uaprr))))))
              (g$generate-variable$14830$Uaprr 'T))))))))
   (g$conditional-continuation-reifier$14813$Uaprr
     g$conditional-continuation-reifier$15078$Uaprr
     (g$conditional-continuation-reifier*$14812$Uaprr values))
   (g$make-literal$14814$Uaprr
     g$make-literal$15079$Uaprr
     (case-lambda
       ((g$datum$14961$Uaprr) (list 'quote g$datum$14961$Uaprr))))
   (g$make-reference$14815$Uaprr
     g$make-reference$15080$Uaprr
     (case-lambda ((g$variable$14962$Uaprr) g$variable$14962$Uaprr)))
   (g$make-user-abstraction$14816$Uaprr
     g$make-user-abstraction$15081$Uaprr
     (case-lambda
       ((g$bvl$14963$Uaprr g$body-constructor$14964$Uaprr)
        ((case-lambda
           ((g$continuation$14965$Uaprr)
            (list
              'case-lambda
              (list
                (cons g$continuation$14965$Uaprr g$bvl$14963$Uaprr)
                (g$body-constructor$14964$Uaprr
                  g$continuation$14965$Uaprr)))))
         (g$generate-variable$14830$Uaprr 'C)))))
   (g$make-user-abstractions$14817$Uaprr
     g$make-user-abstractions$15082$Uaprr
     (case-lambda
       ((g$bvls$14966$Uaprr g$body-constructors$14967$Uaprr)
        ((case-lambda
           ((g$continuation$14968$Uaprr)
            (cons
              'case-lambda
              (g$map$11722$Uaprr
                (case-lambda
                  ((g$bvl$14969$Uaprr g$body-constructor$14970$Uaprr)
                   (list
                     (cons g$continuation$14968$Uaprr g$bvl$14969$Uaprr)
                     (g$body-constructor$14970$Uaprr
                       g$continuation$14968$Uaprr))))
                g$bvls$14966$Uaprr
                g$body-constructors$14967$Uaprr))))
         (g$generate-variable$14830$Uaprr 'C)))))
   (g$make-continuation-abstraction$14818$Uaprr
     g$make-continuation-abstraction$15083$Uaprr
     (case-lambda
       ((g$bvl$14971$Uaprr g$body$14972$Uaprr)
        (list
          'case-lambda
          (list g$bvl$14971$Uaprr g$body$14972$Uaprr)))))
   (g$make-recursive-bind$14819$Uaprr
     g$make-recursive-bind$15084$Uaprr
     (case-lambda
       ((g$variables$14973$Uaprr
          g$constructors$14974$Uaprr
          g$body$14975$Uaprr)
        (list
          'letrec
          (g$map$11722$Uaprr
            (case-lambda
              ((g$variable$14976$Uaprr g$constructor$14977$Uaprr)
               (list
                 g$variable$14976$Uaprr
                 (list
                   (g$make-user-abstraction$14816$Uaprr
                     '()
                     g$constructor$14977$Uaprr)
                   (list
                     'letrec-identity
                     (list 'quote g$variable$14976$Uaprr))))))
            g$variables$14973$Uaprr
            g$constructors$14974$Uaprr)
          g$body$14975$Uaprr))))
   (g$make-recursive*-bind$14820$Uaprr
     g$make-recursive*-bind$15085$Uaprr
     (case-lambda
       ((g$variables$14978$Uaprr
          g$constructors$14979$Uaprr
          g$body$14980$Uaprr)
        (list
          'letrec*
          (g$map$11722$Uaprr
            (case-lambda
              ((g$variable$14981$Uaprr g$constructor$14982$Uaprr)
               (list
                 g$variable$14981$Uaprr
                 (list
                   (g$make-user-abstraction$14816$Uaprr
                     '()
                     g$constructor$14982$Uaprr)
                   (list
                     'letrec*-identity
                     (list 'quote g$variable$14981$Uaprr))))))
            g$variables$14978$Uaprr
            g$constructors$14979$Uaprr)
          g$body$14980$Uaprr))))
   (g$make-recursive*-library-bind$14821$Uaprr
     g$make-recursive*-library-bind$15086$Uaprr
     (case-lambda
       ((g$name$14983$Uaprr
          g$variables$14984$Uaprr
          g$variables*$14985$Uaprr
          g$constructors$14986$Uaprr
          g$body$14987$Uaprr)
        (list
          'library-letrec*
          g$name$14983$Uaprr
          (g$map$11722$Uaprr
            (case-lambda
              ((g$variable$14988$Uaprr
                 g$variable*$14989$Uaprr
                 g$constructor$14990$Uaprr)
               (list
                 g$variable$14988$Uaprr
                 g$variable*$14989$Uaprr
                 (list
                   (g$make-user-abstraction$14816$Uaprr
                     '()
                     g$constructor$14990$Uaprr)
                   (list
                     'library-letrec*-identity
                     (list 'quote g$variable$14988$Uaprr))))))
            g$variables$14984$Uaprr
            g$variables*$14985$Uaprr
            g$constructors$14986$Uaprr)
          g$body$14987$Uaprr))))
   (g$make-combination$14822$Uaprr
     g$make-combination$15087$Uaprr
     (case-lambda
       ((g$operator$14991$Uaprr
          g$continuation$14992$Uaprr
          g$operands$14993$Uaprr)
        (cons
          g$operator$14991$Uaprr
          (cons g$continuation$14992$Uaprr g$operands$14993$Uaprr)))))
   (g$make-return$14823$Uaprr
     g$make-return$15088$Uaprr
     (case-lambda
       ((g$continuation$14994$Uaprr g$operands$14995$Uaprr)
        (cons g$continuation$14994$Uaprr g$operands$14995$Uaprr))))
   (g$make-conditional$14824$Uaprr
     g$make-conditional$15089$Uaprr
     (case-lambda
       ((g$condition$14996$Uaprr
          g$consequent$14997$Uaprr
          g$alternative$14998$Uaprr)
        (list
          'if
          g$condition$14996$Uaprr
          g$consequent$14997$Uaprr
          g$alternative$14998$Uaprr))))
   (g$make-conditional-join$14825$Uaprr
     g$make-conditional-join$15090$Uaprr
     (case-lambda
       ((g$continuation$14999$Uaprr g$constructor$15000$Uaprr)
        ((case-lambda
           ((g$variable$15001$Uaprr)
            (g$make-let$14826$Uaprr
              (list g$variable$15001$Uaprr)
              (list g$continuation$14999$Uaprr)
              (g$constructor$15000$Uaprr g$variable$15001$Uaprr))))
         (g$generate-variable$14830$Uaprr 'J)))))
   (g$make-let$14826$Uaprr
     g$make-let$15091$Uaprr
     (case-lambda
       ((g$variables$15002$Uaprr
          g$expressions$15003$Uaprr
          g$body$15004$Uaprr)
        (cons
          (list
            'case-lambda
            (list g$variables$15002$Uaprr g$body$15004$Uaprr))
          g$expressions$15003$Uaprr))))
   (g$make-assignment$14827$Uaprr
     g$make-assignment$15092$Uaprr
     (case-lambda
       ((g$location$15005$Uaprr
          g$operand$15006$Uaprr
          g$expression$15007$Uaprr)
        (list
          'begin
          (list 'set! g$location$15005$Uaprr g$operand$15006$Uaprr)
          g$expression$15007$Uaprr))))
   (g$make-declaration$14828$Uaprr
     g$make-declaration$15093$Uaprr
     (case-lambda
       ((g$location$15008$Uaprr
          g$operand$15009$Uaprr
          g$expression$15010$Uaprr)
        (list
          'begin
          (list 'define g$location$15008$Uaprr g$operand$15009$Uaprr)
          g$expression$15010$Uaprr))))
   (g$make-truth-test$14829$Uaprr
     g$make-truth-test$15094$Uaprr
     (case-lambda ((g$operand$15011$Uaprr) g$operand$15011$Uaprr)))
   (g$generate-variable$14830$Uaprr
     g$generate-variable$15095$Uaprr
     (case-lambda ((g$name$15012$Uaprr) (gensym g$name$15012$Uaprr))))
   (g$parse$14831$Uaprr
     g$parse$15096$Uaprr
     (case-lambda
       ((g$x$15013$Uaprr)
        (if (pair? g$x$15013$Uaprr)
          ((case-lambda
             ((g$t$15014$Uaprr)
              (if (eqv? g$t$15014$Uaprr 'quote)
                (g$cps/generate-literal$14786$Uaprr
                  (g$cadr$12475$Uaprr g$x$15013$Uaprr))
                (if (eqv? g$t$15014$Uaprr 'if)
                  (g$cps/generate-conditional$14790$Uaprr
                    (g$parse$14831$Uaprr
                      (g$cadr$12475$Uaprr g$x$15013$Uaprr))
                    (g$parse$14831$Uaprr
                      (g$caddr$12481$Uaprr g$x$15013$Uaprr))
                    (g$parse$14831$Uaprr
                      (g$cadddr$12493$Uaprr g$x$15013$Uaprr)))
                  (if (eqv? g$t$15014$Uaprr 'case-lambda)
                    ((case-lambda
                       ((g$d$15015$Uaprr)
                        (g$cps/generate-abstractions$14788$Uaprr
                          (g$map$11722$Uaprr car g$d$15015$Uaprr)
                          (g$map$11722$Uaprr
                            (case-lambda
                              ((g$e$15016$Uaprr)
                               (g$cps/generate-sequence$14794$Uaprr
                                 (g$map$11722$Uaprr
                                   g$parse$14831$Uaprr
                                   (cdr g$e$15016$Uaprr)))))
                            g$d$15015$Uaprr))))
                     (cdr g$x$15013$Uaprr))
                    (if (eqv? g$t$15014$Uaprr 'letrec)
                      ((case-lambda
                         ((g$bindings$15017$Uaprr g$body*$15018$Uaprr)
                          ((case-lambda
                             ((g$lhs*$15019$Uaprr g$rhs*$15020$Uaprr)
                              ((case-lambda
                                 ((g$t*$15021$Uaprr g$tmps$15022$Uaprr)
                                  ((case-lambda
                                     ((g$s*$15023$Uaprr)
                                      (g$parse$14831$Uaprr
                                        (cons
                                          (list
                                            'case-lambda
                                            (list
                                              g$lhs*$15019$Uaprr
                                              (cons
                                                (list
                                                  'case-lambda
                                                  (cons
                                                    g$t*$15021$Uaprr
                                                    (append
                                                      g$s*$15023$Uaprr
                                                      g$body*$15018$Uaprr)))
                                                g$rhs*$15020$Uaprr)))
                                          g$tmps$15022$Uaprr))))
                                   (g$map$11722$Uaprr
                                     (case-lambda
                                       ((g$i$15024$Uaprr
                                          g$t$15025$Uaprr)
                                        (list
                                          'set!
                                          g$i$15024$Uaprr
                                          g$t$15025$Uaprr)))
                                     g$lhs*$15019$Uaprr
                                     g$t*$15021$Uaprr))))
                               (g$map$11722$Uaprr
                                 gensym
                                 g$lhs*$15019$Uaprr)
                               (g$map$11722$Uaprr
                                 (case-lambda
                                   ((g$x$15026$Uaprr) 'uninitialized))
                                 g$lhs*$15019$Uaprr))))
                           (g$map$11722$Uaprr
                             car
                             g$bindings$15017$Uaprr)
                           (g$map$11722$Uaprr
                             g$cadr$12475$Uaprr
                             g$bindings$15017$Uaprr))))
                       (g$cadr$12475$Uaprr g$x$15013$Uaprr)
                       (g$cddr$12477$Uaprr g$x$15013$Uaprr))
                      (if (eqv? g$t$15014$Uaprr 'letrec*)
                        ((case-lambda
                           ((g$bindings$15027$Uaprr g$body*$15028$Uaprr)
                            ((case-lambda
                               ((g$lhs*$15029$Uaprr g$rhs*$15030$Uaprr)
                                (g$cps/generate-recursive*-bind$14792$Uaprr
                                  g$lhs*$15029$Uaprr
                                  (g$map$11722$Uaprr
                                    g$parse$14831$Uaprr
                                    g$rhs*$15030$Uaprr)
                                  (g$parse$14831$Uaprr
                                    (cons
                                      'begin
                                      g$body*$15028$Uaprr)))))
                             (g$map$11722$Uaprr
                               car
                               g$bindings$15027$Uaprr)
                             (g$map$11722$Uaprr
                               g$cadr$12475$Uaprr
                               g$bindings$15027$Uaprr))))
                         (g$cadr$12475$Uaprr g$x$15013$Uaprr)
                         (g$cddr$12477$Uaprr g$x$15013$Uaprr))
                        (if (eqv? g$t$15014$Uaprr 'library-letrec*)
                          ((case-lambda
                             ((g$name$15031$Uaprr g$x$15032$Uaprr)
                              ((case-lambda
                                 ((g$bindings$15033$Uaprr
                                    g$body*$15034$Uaprr)
                                  ((case-lambda
                                     ((g$lhs*$15035$Uaprr
                                        g$lhs**$15036$Uaprr
                                        g$rhs*$15037$Uaprr)
                                      (g$cps/generate-recursive*-library-bind$14793$Uaprr
                                        g$name$15031$Uaprr
                                        g$lhs*$15035$Uaprr
                                        g$lhs**$15036$Uaprr
                                        (g$map$11722$Uaprr
                                          g$parse$14831$Uaprr
                                          g$rhs*$15037$Uaprr)
                                        (g$parse$14831$Uaprr
                                          (cons
                                            'begin
                                            g$body*$15034$Uaprr)))))
                                   (g$map$11722$Uaprr
                                     car
                                     g$bindings$15033$Uaprr)
                                   (g$map$11722$Uaprr
                                     g$cadr$12475$Uaprr
                                     g$bindings$15033$Uaprr)
                                   (g$map$11722$Uaprr
                                     g$caddr$12481$Uaprr
                                     g$bindings$15033$Uaprr))))
                               (g$cadr$12475$Uaprr g$x$15032$Uaprr)
                               (g$cddr$12477$Uaprr g$x$15032$Uaprr))))
                           (g$cadr$12475$Uaprr g$x$15013$Uaprr)
                           (cdr g$x$15013$Uaprr))
                          (if (eqv? g$t$15014$Uaprr 'begin)
                            (g$cps/generate-sequence$14794$Uaprr
                              (g$map$11722$Uaprr
                                g$parse$14831$Uaprr
                                (cdr g$x$15013$Uaprr)))
                            (if (eqv? g$t$15014$Uaprr 'set!)
                              (g$cps/generate-assignment$14795$Uaprr
                                (g$cadr$12475$Uaprr g$x$15013$Uaprr)
                                (g$parse$14831$Uaprr
                                  (g$caddr$12481$Uaprr
                                    g$x$15013$Uaprr)))
                              (if (eqv? g$t$15014$Uaprr 'define)
                                (g$cps/generate-declaration$14796$Uaprr
                                  (g$cadr$12475$Uaprr g$x$15013$Uaprr)
                                  (g$parse$14831$Uaprr
                                    (g$caddr$12481$Uaprr
                                      g$x$15013$Uaprr)))
                                (if (list? g$x$15013$Uaprr)
                                  (g$cps/generate-combination$14797$Uaprr
                                    (g$parse$14831$Uaprr
                                      (car g$x$15013$Uaprr))
                                    (g$map$11722$Uaprr
                                      g$parse$14831$Uaprr
                                      (cdr g$x$15013$Uaprr)))
                                  (error
                                    'rewrite
                                    '"invalid form ~s ~s"
                                    g$x$15013$Uaprr
                                    (list? g$x$15013$Uaprr))))))))))))))
           (car g$x$15013$Uaprr))
          (if (g$symbol?$12465$Uaprr g$x$15013$Uaprr)
            (g$cps/generate-reference$14785$Uaprr g$x$15013$Uaprr)
            (g$cps/generate-literal$14786$Uaprr g$x$15013$Uaprr))))))
   (g$starts-with?$14832$Uaprr
     g$starts-with?$15097$Uaprr
     (case-lambda
       ((g$str$15038$Uaprr g$sub$15039$Uaprr)
        (clr-call-internal
          'system.string
          'startswith
          g$str$15038$Uaprr
          g$sub$15039$Uaprr))))
   (g$ends-with?$14833$Uaprr
     g$ends-with?$15098$Uaprr
     (case-lambda
       ((g$str$15040$Uaprr g$sub$15041$Uaprr)
        (clr-call-internal
          'system.string
          'endswith
          g$str$15040$Uaprr
          g$sub$15041$Uaprr))))
   (g$clr-generator?$14834$Uaprr
     g$clr-generator?$15099$Uaprr
     (case-lambda
       ((g$o$15042$Uaprr)
        (if (g$symbol?$12465$Uaprr g$o$15042$Uaprr)
          (begin
            '#f
            ((case-lambda
               ((g$o$15043$Uaprr)
                (if (g$starts-with?$14832$Uaprr g$o$15043$Uaprr '"clr-")
                  (begin
                    '#f
                    (g$ends-with?$14833$Uaprr
                      g$o$15043$Uaprr
                      '"-internal"))
                  '#f)))
             (symbol->string g$o$15042$Uaprr)))
          '#f))))
   (g$fix-primitives$14835$Uaprr
     g$fix-primitives$15100$Uaprr
     (case-lambda
       ((g$e$15044$Uaprr)
        (if (if (pair? g$e$15044$Uaprr)
              (begin '#f (list? g$e$15044$Uaprr))
              '#f)
          ((case-lambda
             ((g$o$15045$Uaprr)
              (if (eq? g$o$15045$Uaprr 'quote)
                g$e$15044$Uaprr
                (if (begin
                      '#f
                      (g$clr-generator?$14834$Uaprr g$o$15045$Uaprr))
                  (if (pair? (cdr g$e$15044$Uaprr))
                    (list
                      (g$fix-primitives$14835$Uaprr
                        (g$cadr$12475$Uaprr g$e$15044$Uaprr))
                      (cons
                        g$o$15045$Uaprr
                        (g$map$11722$Uaprr
                          g$fix-primitives$14835$Uaprr
                          (g$cddr$12477$Uaprr g$e$15044$Uaprr))))
                    g$e$15044$Uaprr)
                  (cons
                    (g$fix-primitives$14835$Uaprr g$o$15045$Uaprr)
                    (g$map$11722$Uaprr
                      g$fix-primitives$14835$Uaprr
                      (cdr g$e$15044$Uaprr)))))))
           (car g$e$15044$Uaprr))
          g$e$15044$Uaprr))))
   (g$parse->cps$14836$Uaprr
     g$parse->cps$15101$Uaprr
     (case-lambda
       ((g$e$15046$Uaprr g$var$15047$Uaprr)
        ((g$parse$14831$Uaprr g$e$15046$Uaprr)
         (g$variable-continuator$14802$Uaprr g$var$15047$Uaprr)))))
   (g$convert->cps$14837$Uaprr
     g$convert->cps$15102$Uaprr
     (case-lambda
       ((g$e$15048$Uaprr g$var$15049$Uaprr)
        (g$fix-primitives$14835$Uaprr
          (g$parse->cps$14836$Uaprr
            g$e$15048$Uaprr
            g$var$15049$Uaprr))))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$15103$Uaprr
     g$current-primitive-locations$15148$Uaprr
     (g$make-parameter$14574$Uaprr
       (case-lambda ((g$x$15109$Uaprr) '#f))
       (case-lambda
         ((g$p$15110$Uaprr)
          (begin
            (if (not (g$procedure?$12467$Uaprr g$p$15110$Uaprr))
              (g$assertion-error$19915$Uaprr
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$15110$Uaprr)))))
   (g$mutable?$15104$Uaprr
     g$mutable?$15149$Uaprr
     (case-lambda
       ((g$x$15111$Uaprr)
        (letrec* ((g$simple?$15112$Uaprr
                    (case-lambda
                      ((g$x$15113$Uaprr)
                       ((case-lambda
                          ((g$t$15114$Uaprr)
                           (if g$t$15114$Uaprr
                             g$t$15114$Uaprr
                             ((case-lambda
                                ((g$t$15115$Uaprr)
                                 (if g$t$15115$Uaprr
                                   g$t$15115$Uaprr
                                   ((case-lambda
                                      ((g$t$15116$Uaprr)
                                       (if g$t$15116$Uaprr
                                         g$t$15116$Uaprr
                                         ((case-lambda
                                            ((g$t$15117$Uaprr)
                                             (if g$t$15117$Uaprr
                                               g$t$15117$Uaprr
                                               ((case-lambda
                                                  ((g$t$15118$Uaprr)
                                                   (if g$t$15118$Uaprr
                                                     g$t$15118$Uaprr
                                                     ((case-lambda
                                                        ((g$t$15119$Uaprr)
                                                         (if g$t$15119$Uaprr
                                                           g$t$15119$Uaprr
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$15113$Uaprr)))))
                                                      (g$bytevector?$12464$Uaprr
                                                        g$x$15113$Uaprr)))))
                                                (string?
                                                  g$x$15113$Uaprr)))))
                                          (g$boolean?$12466$Uaprr
                                            g$x$15113$Uaprr)))))
                                    (g$symbol?$12465$Uaprr
                                      g$x$15113$Uaprr)))))
                              (g$char?$12462$Uaprr g$x$15113$Uaprr)))))
                        (null? g$x$15113$Uaprr))))))
          (not (g$simple?$15112$Uaprr g$x$15111$Uaprr))))))
   (g$rewriter$15105$Uaprr
     g$rewriter$15150$Uaprr
     (case-lambda
       ((g$quote-hack?$15120$Uaprr)
        (letrec* ((g$f$15121$Uaprr
                    (case-lambda
                      ((g$x$15122$Uaprr)
                       (if (pair? g$x$15122$Uaprr)
                         ((case-lambda
                            ((g$t$15123$Uaprr)
                             (if (eqv? g$t$15123$Uaprr 'quote)
                               (if (if g$quote-hack?$15120$Uaprr
                                     (begin
                                       '#f
                                       (g$mutable?$15104$Uaprr
                                         (g$cadr$12475$Uaprr
                                           g$x$15122$Uaprr)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$15124$Uaprr)
                                     (begin
                                       (set-symbol-value!
                                         g$g$15124$Uaprr
                                         (g$cadr$12475$Uaprr
                                           g$x$15122$Uaprr))
                                       g$g$15124$Uaprr)))
                                  (gensym 'weak-temp))
                                 g$x$15122$Uaprr)
                               (if (eqv? g$t$15123$Uaprr 'case-lambda)
                                 (cons
                                   'case-lambda
                                   (g$map$11722$Uaprr
                                     (case-lambda
                                       ((g$x$15125$Uaprr)
                                        (cons
                                          (car g$x$15125$Uaprr)
                                          (g$map$11722$Uaprr
                                            g$f$15121$Uaprr
                                            (cdr g$x$15125$Uaprr)))))
                                     (cdr g$x$15122$Uaprr)))
                                 (if (eqv? g$t$15123$Uaprr 'lambda)
                                   (g$cons*$11724$Uaprr
                                     'lambda
                                     (g$cadr$12475$Uaprr
                                       g$x$15122$Uaprr)
                                     (g$map$11722$Uaprr
                                       g$f$15121$Uaprr
                                       (g$cddr$12477$Uaprr
                                         g$x$15122$Uaprr)))
                                   (if (eqv? g$t$15123$Uaprr 'letrec)
                                     ((case-lambda
                                        ((g$bindings$15126$Uaprr
                                           g$body*$15127$Uaprr)
                                         ((case-lambda
                                            ((g$lhs*$15128$Uaprr
                                               g$rhs*$15129$Uaprr)
                                             (g$cons*$11724$Uaprr
                                               'letrec
                                               (g$map$11722$Uaprr
                                                 list
                                                 g$lhs*$15128$Uaprr
                                                 (g$map$11722$Uaprr
                                                   g$f$15121$Uaprr
                                                   g$rhs*$15129$Uaprr))
                                               (g$map$11722$Uaprr
                                                 g$f$15121$Uaprr
                                                 g$body*$15127$Uaprr))))
                                          (g$map$11722$Uaprr
                                            car
                                            g$bindings$15126$Uaprr)
                                          (g$map$11722$Uaprr
                                            g$cadr$12475$Uaprr
                                            g$bindings$15126$Uaprr))))
                                      (g$cadr$12475$Uaprr
                                        g$x$15122$Uaprr)
                                      (g$cddr$12477$Uaprr
                                        g$x$15122$Uaprr))
                                     (if (eqv? g$t$15123$Uaprr 'letrec*)
                                       ((case-lambda
                                          ((g$bindings$15130$Uaprr
                                             g$body*$15131$Uaprr)
                                           ((case-lambda
                                              ((g$lhs*$15132$Uaprr
                                                 g$rhs*$15133$Uaprr)
                                               (g$cons*$11724$Uaprr
                                                 'letrec*
                                                 (g$map$11722$Uaprr
                                                   list
                                                   g$lhs*$15132$Uaprr
                                                   (g$map$11722$Uaprr
                                                     g$f$15121$Uaprr
                                                     g$rhs*$15133$Uaprr))
                                                 (g$map$11722$Uaprr
                                                   g$f$15121$Uaprr
                                                   g$body*$15131$Uaprr))))
                                            (g$map$11722$Uaprr
                                              car
                                              g$bindings$15130$Uaprr)
                                            (g$map$11722$Uaprr
                                              g$cadr$12475$Uaprr
                                              g$bindings$15130$Uaprr))))
                                        (g$cadr$12475$Uaprr
                                          g$x$15122$Uaprr)
                                        (g$cddr$12477$Uaprr
                                          g$x$15122$Uaprr))
                                       (if (eqv?
                                             g$t$15123$Uaprr
                                             'library-letrec*)
                                         ((case-lambda
                                            ((g$name$15134$Uaprr
                                               g$x$15135$Uaprr)
                                             ((case-lambda
                                                ((g$bindings$15136$Uaprr
                                                   g$body*$15137$Uaprr)
                                                 ((case-lambda
                                                    ((g$lhs*$15138$Uaprr
                                                       g$lhs**$15139$Uaprr
                                                       g$rhs*$15140$Uaprr)
                                                     (g$cons*$11724$Uaprr
                                                       'library-letrec*
                                                       g$name$15134$Uaprr
                                                       (g$map$11722$Uaprr
                                                         list
                                                         g$lhs*$15138$Uaprr
                                                         g$lhs**$15139$Uaprr
                                                         (g$map$11722$Uaprr
                                                           g$f$15121$Uaprr
                                                           g$rhs*$15140$Uaprr))
                                                       (g$map$11722$Uaprr
                                                         g$f$15121$Uaprr
                                                         g$body*$15137$Uaprr))))
                                                  (g$map$11722$Uaprr
                                                    car
                                                    g$bindings$15136$Uaprr)
                                                  (g$map$11722$Uaprr
                                                    g$cadr$12475$Uaprr
                                                    g$bindings$15136$Uaprr)
                                                  (g$map$11722$Uaprr
                                                    g$caddr$12481$Uaprr
                                                    g$bindings$15136$Uaprr))))
                                              (g$cadr$12475$Uaprr
                                                g$x$15135$Uaprr)
                                              (g$cddr$12477$Uaprr
                                                g$x$15135$Uaprr))))
                                          (g$cadr$12475$Uaprr
                                            g$x$15122$Uaprr)
                                          (cdr g$x$15122$Uaprr))
                                         (if (eqv?
                                               g$t$15123$Uaprr
                                               'begin)
                                           (cons
                                             'begin
                                             (g$map$11722$Uaprr
                                               g$f$15121$Uaprr
                                               (cdr g$x$15122$Uaprr)))
                                           (if (eqv?
                                                 g$t$15123$Uaprr
                                                 'set!)
                                             (list
                                               'set!
                                               (g$cadr$12475$Uaprr
                                                 g$x$15122$Uaprr)
                                               (g$f$15121$Uaprr
                                                 (g$caddr$12481$Uaprr
                                                   g$x$15122$Uaprr)))
                                             (if (eqv?
                                                   g$t$15123$Uaprr
                                                   'primitive)
                                               ((case-lambda
                                                  ((g$op$15141$Uaprr)
                                                   ((case-lambda
                                                      ((g$t$15142$Uaprr)
                                                       (if g$t$15142$Uaprr
                                                         ((case-lambda
                                                            ((g$loc$15143$Uaprr)
                                                             g$loc$15143$Uaprr))
                                                          g$t$15142$Uaprr)
                                                         g$op$15141$Uaprr)))
                                                    ((g$current-primitive-locations$15103$Uaprr)
                                                     g$op$15141$Uaprr))))
                                                (g$cadr$12475$Uaprr
                                                  g$x$15122$Uaprr))
                                               (if (eqv?
                                                     g$t$15123$Uaprr
                                                     'define)
                                                 g$x$15122$Uaprr
                                                 (if (list?
                                                       g$x$15122$Uaprr)
                                                   (g$map$11722$Uaprr
                                                     g$f$15121$Uaprr
                                                     g$x$15122$Uaprr)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$15122$Uaprr
                                                     (list?
                                                       g$x$15122$Uaprr)))))))))))))))
                          (car g$x$15122$Uaprr))
                         g$x$15122$Uaprr)))))
          g$f$15121$Uaprr))))
   (g$expanded->core$15106$Uaprr
     g$expanded->core$15151$Uaprr
     (case-lambda
       ((g$x$15144$Uaprr)
        ((g$rewriter$15105$Uaprr '#t) g$x$15144$Uaprr))))
   (g$compile-core-expr$15107$Uaprr
     g$compile-core-expr$15152$Uaprr
     (case-lambda
       ((g$x$15145$Uaprr)
        ((g$rewriter$15105$Uaprr '#f) g$x$15145$Uaprr))))
   (g$compile-core-expr-to-port$15108$Uaprr
     g$compile-core-expr-to-port$15153$Uaprr
     (case-lambda
       ((g$x$15146$Uaprr g$p$15147$Uaprr)
        (g$pretty-print$14784$Uaprr
          ((g$rewriter$15105$Uaprr '#f) g$x$15146$Uaprr)
          g$p$15147$Uaprr)))))
  (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$15154$Uaprr
     g$make-collection$15362$Uaprr
     (case-lambda
       (()
        ((case-lambda
           ((g$set$15217$Uaprr)
            (letrec* ((g$set-cons$15218$Uaprr
                        (case-lambda
                          ((g$x$15222$Uaprr g$ls$15223$Uaprr)
                           (if (g$memq$11714$Uaprr
                                 g$x$15222$Uaprr
                                 g$ls$15223$Uaprr)
                             g$ls$15223$Uaprr
                             (cons
                               g$x$15222$Uaprr
                               g$ls$15223$Uaprr))))))
              (case-lambda
                (() g$set$15217$Uaprr)
                ((g$x$15219$Uaprr)
                 (set! g$set$15217$Uaprr
                   (g$set-cons$15218$Uaprr
                     g$x$15219$Uaprr
                     g$set$15217$Uaprr)))
                ((g$x$15220$Uaprr g$del?$15221$Uaprr)
                 (if g$del?$15221$Uaprr
                   (set! g$set$15217$Uaprr
                     (g$remq$11729$Uaprr
                       g$x$15220$Uaprr
                       g$set$15217$Uaprr))
                   (set! g$set$15217$Uaprr
                     (g$set-cons$15218$Uaprr
                       g$x$15220$Uaprr
                       g$set$15217$Uaprr))))))))
         '()))))
   (g$current-library-collection$15155$Uaprr
     g$current-library-collection$15363$Uaprr
     (g$make-parameter$14574$Uaprr
       (g$make-collection$15154$Uaprr)
       (case-lambda
         ((g$x$15224$Uaprr)
          (begin
            (if (not (g$procedure?$12467$Uaprr g$x$15224$Uaprr))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$15224$Uaprr)
              (void))
            g$x$15224$Uaprr)))))
   (g$7487$15156$Uaprr
     g$7487$15364$Uaprr
     (make-record-type-descriptor
       'library
       '#f
       'g$7490$Uaprr
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$7489$15157$Uaprr g$7489$15365$Uaprr '#f)
   (g$7488$15158$Uaprr
     g$7488$15366$Uaprr
     (make-record-constructor-descriptor
       g$7487$15156$Uaprr
       '#f
       g$7489$15157$Uaprr))
   (g$library?$15161$Uaprr
     g$library?$15367$Uaprr
     (record-predicate g$7487$15156$Uaprr))
   (g$make-library$15162$Uaprr
     g$make-library$15368$Uaprr
     (record-constructor g$7488$15158$Uaprr))
   (g$library-id$15163$Uaprr
     g$library-id$15369$Uaprr
     (record-accessor g$7487$15156$Uaprr '0))
   (g$library-name$15164$Uaprr
     g$library-name$15370$Uaprr
     (record-accessor g$7487$15156$Uaprr '1))
   (g$library-version$15165$Uaprr
     g$library-version$15371$Uaprr
     (record-accessor g$7487$15156$Uaprr '2))
   (g$library-imp*$15166$Uaprr
     g$library-imp*$15372$Uaprr
     (record-accessor g$7487$15156$Uaprr '3))
   (g$library-vis*$15167$Uaprr
     g$library-vis*$15373$Uaprr
     (record-accessor g$7487$15156$Uaprr '4))
   (g$library-inv*$15168$Uaprr
     g$library-inv*$15374$Uaprr
     (record-accessor g$7487$15156$Uaprr '5))
   (g$library-subst$15169$Uaprr
     g$library-subst$15375$Uaprr
     (record-accessor g$7487$15156$Uaprr '6))
   (g$library-env$15170$Uaprr
     g$library-env$15376$Uaprr
     (record-accessor g$7487$15156$Uaprr '7))
   (g$library-visit-state$15171$Uaprr
     g$library-visit-state$15377$Uaprr
     (record-accessor g$7487$15156$Uaprr '8))
   (g$library-invoke-state$15172$Uaprr
     g$library-invoke-state$15378$Uaprr
     (record-accessor g$7487$15156$Uaprr '9))
   (g$library-visit-code$15173$Uaprr
     g$library-visit-code$15379$Uaprr
     (record-accessor g$7487$15156$Uaprr '10))
   (g$library-invoke-code$15174$Uaprr
     g$library-invoke-code$15380$Uaprr
     (record-accessor g$7487$15156$Uaprr '11))
   (g$library-visible?$15175$Uaprr
     g$library-visible?$15381$Uaprr
     (record-accessor g$7487$15156$Uaprr '12))
   (g$library-source-file-name$15176$Uaprr
     g$library-source-file-name$15382$Uaprr
     (record-accessor g$7487$15156$Uaprr '13))
   (g$set-library-id!$15177$Uaprr
     g$set-library-id!$15383$Uaprr
     (record-mutator g$7487$15156$Uaprr '0))
   (g$set-library-name!$15178$Uaprr
     g$set-library-name!$15384$Uaprr
     (record-mutator g$7487$15156$Uaprr '1))
   (g$set-library-version!$15179$Uaprr
     g$set-library-version!$15385$Uaprr
     (record-mutator g$7487$15156$Uaprr '2))
   (g$set-library-imp*!$15180$Uaprr
     g$set-library-imp*!$15386$Uaprr
     (record-mutator g$7487$15156$Uaprr '3))
   (g$set-library-vis*!$15181$Uaprr
     g$set-library-vis*!$15387$Uaprr
     (record-mutator g$7487$15156$Uaprr '4))
   (g$set-library-inv*!$15182$Uaprr
     g$set-library-inv*!$15388$Uaprr
     (record-mutator g$7487$15156$Uaprr '5))
   (g$set-library-subst!$15183$Uaprr
     g$set-library-subst!$15389$Uaprr
     (record-mutator g$7487$15156$Uaprr '6))
   (g$set-library-env!$15184$Uaprr
     g$set-library-env!$15390$Uaprr
     (record-mutator g$7487$15156$Uaprr '7))
   (g$set-library-visit-state!$15185$Uaprr
     g$set-library-visit-state!$15391$Uaprr
     (record-mutator g$7487$15156$Uaprr '8))
   (g$set-library-invoke-state!$15186$Uaprr
     g$set-library-invoke-state!$15392$Uaprr
     (record-mutator g$7487$15156$Uaprr '9))
   (g$set-library-visit-code!$15187$Uaprr
     g$set-library-visit-code!$15393$Uaprr
     (record-mutator g$7487$15156$Uaprr '10))
   (g$set-library-invoke-code!$15188$Uaprr
     g$set-library-invoke-code!$15394$Uaprr
     (record-mutator g$7487$15156$Uaprr '11))
   (g$set-library-visible?!$15189$Uaprr
     g$set-library-visible?!$15395$Uaprr
     (record-mutator g$7487$15156$Uaprr '12))
   (g$set-library-source-file-name!$15190$Uaprr
     g$set-library-source-file-name!$15396$Uaprr
     (record-mutator g$7487$15156$Uaprr '13))
   (g$rp$15191$Uaprr
     g$rp$15397$Uaprr
     (make-record-printer
       'library
       (case-lambda
         ((g$x$15225$Uaprr g$p$15226$Uaprr g$wr$15227$Uaprr)
          (begin
            (if (not (g$library?$15161$Uaprr g$x$15225$Uaprr))
              (assertion-violation
                'record-type-printer
                '"not a library")
              (void))
            (display
              (g$format$14365$Uaprr
                '"#<library ~s>"
                (if (null?
                      (g$library-version$15165$Uaprr g$x$15225$Uaprr))
                  (g$library-name$15164$Uaprr g$x$15225$Uaprr)
                  (append
                    (g$library-name$15164$Uaprr g$x$15225$Uaprr)
                    (list
                      (g$library-version$15165$Uaprr
                        g$x$15225$Uaprr)))))
              g$p$15226$Uaprr))))))
   (g$find-dependencies$15192$Uaprr
     g$find-dependencies$15398$Uaprr
     (case-lambda
       ((g$ls$15228$Uaprr)
        (if (null? g$ls$15228$Uaprr)
          '()
          (assertion-violation
            'find-dependencies
            '"cannot handle deps yet")))))
   (g$find-library-by$15193$Uaprr
     g$find-library-by$15399$Uaprr
     (case-lambda
       ((g$pred$15229$Uaprr)
        ((letrec ((g$f$15230$Uaprr
                    (case-lambda
                      ((g$ls$15231$Uaprr)
                       (if (null? g$ls$15231$Uaprr)
                         '#f
                         (if (g$pred$15229$Uaprr (car g$ls$15231$Uaprr))
                           (car g$ls$15231$Uaprr)
                           (g$f$15230$Uaprr
                             (cdr g$ls$15231$Uaprr))))))))
           g$f$15230$Uaprr)
         ((g$current-library-collection$15155$Uaprr))))))
   (g$library-path$15194$Uaprr
     g$library-path$15400$Uaprr
     (g$make-parameter$14574$Uaprr
       '(".")
       (case-lambda
         ((g$x$15232$Uaprr)
          (if (if (list? g$x$15232$Uaprr)
                (begin
                  '#f
                  (g$for-all$11720$Uaprr string? g$x$15232$Uaprr))
                '#f)
            (g$map$11722$Uaprr
              (case-lambda ((g$x$15233$Uaprr) g$x$15233$Uaprr))
              g$x$15232$Uaprr)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$15232$Uaprr))))))
   (g$library-extensions$15195$Uaprr
     g$library-extensions$15401$Uaprr
     (g$make-parameter$14574$Uaprr
       '(".sls" ".ss")
       (case-lambda
         ((g$x$15234$Uaprr)
          (if (if (list? g$x$15234$Uaprr)
                (begin
                  '#f
                  (g$for-all$11720$Uaprr string? g$x$15234$Uaprr))
                '#f)
            (g$map$11722$Uaprr
              (case-lambda ((g$x$15235$Uaprr) g$x$15235$Uaprr))
              g$x$15234$Uaprr)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$15234$Uaprr))))))
   (g$library-name->file-name$15196$Uaprr
     g$library-name->file-name$15402$Uaprr
     (case-lambda
       ((g$x$15236$Uaprr)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$14125$Uaprr)))
          (case-lambda
            ((g$p$15239$Uaprr g$extract$15240$Uaprr)
             ((case-lambda
                ((g$extract$15241$Uaprr g$p$15242$Uaprr)
                 (letrec* ((g$display-hex$15243$Uaprr
                             (case-lambda
                               ((g$n$15251$Uaprr)
                                (if (<= '0 g$n$15251$Uaprr '9)
                                  (display
                                    g$n$15251$Uaprr
                                    g$p$15242$Uaprr)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$15251$Uaprr '10)))
                                    g$p$15242$Uaprr))))))
                   (begin
                     ((letrec ((g$f$15244$Uaprr
                                 (case-lambda
                                   ((g$ls$15245$Uaprr)
                                    (if (not (null? g$ls$15245$Uaprr))
                                      (begin
                                        (display '"/" g$p$15242$Uaprr)
                                        (g$for-each$11723$Uaprr
                                          (case-lambda
                                            ((g$c$15246$Uaprr)
                                             (if ((case-lambda
                                                    ((g$t$15247$Uaprr)
                                                     (if g$t$15247$Uaprr
                                                       g$t$15247$Uaprr
                                                       ((case-lambda
                                                          ((g$t$15248$Uaprr)
                                                           (if g$t$15248$Uaprr
                                                             g$t$15248$Uaprr
                                                             ((case-lambda
                                                                ((g$t$15249$Uaprr)
                                                                 (if g$t$15249$Uaprr
                                                                   g$t$15249$Uaprr
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$11715$Uaprr
                                                                       g$c$15246$Uaprr
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$12521$Uaprr
                                                                '#\0
                                                                g$c$15246$Uaprr
                                                                '#\9)))))
                                                        (g$char<=?$12521$Uaprr
                                                          '#\A
                                                          g$c$15246$Uaprr
                                                          '#\Z)))))
                                                  (g$char<=?$12521$Uaprr
                                                    '#\a
                                                    g$c$15246$Uaprr
                                                    '#\z))
                                               (display
                                                 g$c$15246$Uaprr
                                                 g$p$15242$Uaprr)
                                               (begin
                                                 (display
                                                   '"%"
                                                   g$p$15242$Uaprr)
                                                 ((case-lambda
                                                    ((g$n$15250$Uaprr)
                                                     (begin
                                                       (g$display-hex$15243$Uaprr
                                                         (g$quotient$13400$Uaprr
                                                           g$n$15250$Uaprr
                                                           '16))
                                                       (g$display-hex$15243$Uaprr
                                                         (g$remainder$13401$Uaprr
                                                           g$n$15250$Uaprr
                                                           '16)))))
                                                  (char->integer
                                                    g$c$15246$Uaprr))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$15245$Uaprr))))
                                        (g$f$15244$Uaprr
                                          (cdr g$ls$15245$Uaprr)))
                                      (void))))))
                        g$f$15244$Uaprr)
                      g$x$15236$Uaprr)
                     (g$extract$15241$Uaprr)))))
              g$extract$15240$Uaprr
              g$p$15239$Uaprr)))))))
   (g$file-locator$15197$Uaprr
     g$file-locator$15403$Uaprr
     (g$make-parameter$14574$Uaprr
       (case-lambda
         ((g$x$15252$Uaprr)
          ((case-lambda
             ((g$str$15253$Uaprr)
              ((letrec ((g$f$15254$Uaprr
                          (case-lambda
                            ((g$ls$15255$Uaprr
                               g$exts$15256$Uaprr
                               g$failed-list$15257$Uaprr)
                             (if (null? g$ls$15255$Uaprr)
                               (g$file-locator-resolution-error$14572$Uaprr
                                 g$x$15252$Uaprr
                                 (g$reverse$12473$Uaprr
                                   g$failed-list$15257$Uaprr))
                               (if (null? g$exts$15256$Uaprr)
                                 (g$f$15254$Uaprr
                                   (cdr g$ls$15255$Uaprr)
                                   (g$library-extensions$15195$Uaprr)
                                   g$failed-list$15257$Uaprr)
                                 ((case-lambda
                                    ((g$name$15258$Uaprr)
                                     (if (g$file-exists?$12584$Uaprr
                                           g$name$15258$Uaprr)
                                       g$name$15258$Uaprr
                                       (g$f$15254$Uaprr
                                         g$ls$15255$Uaprr
                                         (cdr g$exts$15256$Uaprr)
                                         (cons
                                           g$name$15258$Uaprr
                                           g$failed-list$15257$Uaprr)))))
                                  (string-append
                                    (car g$ls$15255$Uaprr)
                                    g$str$15253$Uaprr
                                    (car g$exts$15256$Uaprr)))))))))
                 g$f$15254$Uaprr)
               (g$library-path$15194$Uaprr)
               (g$library-extensions$15195$Uaprr)
               '())))
           (g$library-name->file-name$15196$Uaprr g$x$15252$Uaprr))))
       (case-lambda
         ((g$f$15259$Uaprr)
          (if (g$procedure?$12467$Uaprr g$f$15259$Uaprr)
            g$f$15259$Uaprr
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$15259$Uaprr))))))
   (g$serialize-all$15198$Uaprr
     g$serialize-all$15404$Uaprr
     (case-lambda
       ((g$serialize$15260$Uaprr g$compile$15261$Uaprr)
        (letrec* ((g$library-desc$15262$Uaprr
                    (case-lambda
                      ((g$x$15264$Uaprr)
                       (list
                         (g$library-id$15163$Uaprr g$x$15264$Uaprr)
                         (g$library-name$15164$Uaprr
                           g$x$15264$Uaprr))))))
          (g$for-each$11723$Uaprr
            (case-lambda
              ((g$x$15263$Uaprr)
               (if (g$library-source-file-name$15176$Uaprr
                     g$x$15263$Uaprr)
                 (g$serialize$15260$Uaprr
                   (g$library-source-file-name$15176$Uaprr
                     g$x$15263$Uaprr)
                   (list
                     (g$library-id$15163$Uaprr g$x$15263$Uaprr)
                     (g$library-name$15164$Uaprr g$x$15263$Uaprr)
                     (g$library-version$15165$Uaprr g$x$15263$Uaprr)
                     (g$map$11722$Uaprr
                       g$library-desc$15262$Uaprr
                       (g$library-imp*$15166$Uaprr g$x$15263$Uaprr))
                     (g$map$11722$Uaprr
                       g$library-desc$15262$Uaprr
                       (g$library-vis*$15167$Uaprr g$x$15263$Uaprr))
                     (g$map$11722$Uaprr
                       g$library-desc$15262$Uaprr
                       (g$library-inv*$15168$Uaprr g$x$15263$Uaprr))
                     (g$library-subst$15169$Uaprr g$x$15263$Uaprr)
                     (g$library-env$15170$Uaprr g$x$15263$Uaprr)
                     (g$compile$15261$Uaprr
                       (g$library-visit-code$15173$Uaprr
                         g$x$15263$Uaprr))
                     (g$compile$15261$Uaprr
                       (g$library-invoke-code$15174$Uaprr
                         g$x$15263$Uaprr))
                     (g$library-visible?$15175$Uaprr g$x$15263$Uaprr)))
                 (void))))
            ((g$current-library-collection$15155$Uaprr)))))))
   (g$current-precompiled-library-loader$15199$Uaprr
     g$current-precompiled-library-loader$15405$Uaprr
     (g$make-parameter$14574$Uaprr
       (case-lambda ((g$filename$15265$Uaprr g$sk$15266$Uaprr) '#f))))
   (g$try-load-from-file$15200$Uaprr
     g$try-load-from-file$15406$Uaprr
     (case-lambda
       ((g$filename$15267$Uaprr)
        ((g$current-precompiled-library-loader$15199$Uaprr)
         g$filename$15267$Uaprr
         (case-lambda
           ((g$id$15268$Uaprr
              g$name$15269$Uaprr
              g$ver$15270$Uaprr
              g$imp*$15271$Uaprr
              g$vis*$15272$Uaprr
              g$inv*$15273$Uaprr
              g$exp-subst$15274$Uaprr
              g$exp-env$15275$Uaprr
              g$visit-proc$15276$Uaprr
              g$invoke-proc$15277$Uaprr
              g$visible?$15278$Uaprr)
            ((letrec ((g$f$15279$Uaprr
                        (case-lambda
                          ((g$deps$15280$Uaprr)
                           (if (null? g$deps$15280$Uaprr)
                             (begin
                               (g$install-library$15210$Uaprr
                                 g$id$15268$Uaprr
                                 g$name$15269$Uaprr
                                 g$ver$15270$Uaprr
                                 g$imp*$15271$Uaprr
                                 g$vis*$15272$Uaprr
                                 g$inv*$15273$Uaprr
                                 g$exp-subst$15274$Uaprr
                                 g$exp-env$15275$Uaprr
                                 g$visit-proc$15276$Uaprr
                                 g$invoke-proc$15277$Uaprr
                                 '#f
                                 '#f
                                 g$visible?$15278$Uaprr
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$15281$Uaprr)
                                 ((case-lambda
                                    ((g$label$15282$Uaprr
                                       g$dname$15283$Uaprr)
                                     ((case-lambda
                                        ((g$l$15284$Uaprr)
                                         (if (if (g$library?$15161$Uaprr
                                                   g$l$15284$Uaprr)
                                               (begin
                                                 '#f
                                                 (eq? g$label$15282$Uaprr
                                                      (g$library-id$15163$Uaprr
                                                        g$l$15284$Uaprr)))
                                               '#f)
                                           (g$f$15279$Uaprr
                                             (cdr g$deps$15280$Uaprr))
                                           (begin
                                             (g$library-version-mismatch-warning$14571$Uaprr
                                               g$name$15269$Uaprr
                                               g$dname$15283$Uaprr
                                               g$filename$15267$Uaprr)
                                             '#f))))
                                      (g$find-library-by-name$15205$Uaprr
                                        g$dname$15283$Uaprr))))
                                  (car g$d$15281$Uaprr)
                                  (g$cadr$12475$Uaprr
                                    g$d$15281$Uaprr))))
                              (car g$deps$15280$Uaprr)))))))
               g$f$15279$Uaprr)
             (append
               g$imp*$15271$Uaprr
               g$vis*$15272$Uaprr
               g$inv*$15273$Uaprr)))
           (g$others$15285$Uaprr '#f))))))
   (g$library-loader$15201$Uaprr
     g$library-loader$15407$Uaprr
     (g$make-parameter$14574$Uaprr
       (case-lambda
         ((g$x$15286$Uaprr)
          ((case-lambda
             ((g$file-name$15287$Uaprr)
              (if (not g$file-name$15287$Uaprr)
                (assertion-violation
                  '#f
                  '"cannot find library"
                  g$x$15286$Uaprr)
                ((case-lambda
                   ((g$t$15288$Uaprr)
                    (if g$t$15288$Uaprr
                      g$t$15288$Uaprr
                      (begin
                        '#f
                        ((g$current-library-expander$15202$Uaprr)
                         (g$read-library-source-file$14573$Uaprr
                           g$file-name$15287$Uaprr)
                         g$file-name$15287$Uaprr
                         (case-lambda
                           ((g$name$15289$Uaprr)
                            (if (not (equal?
                                       g$name$15289$Uaprr
                                       g$x$15286$Uaprr))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (g$open-string-output-port$14125$Uaprr)))
                                  (case-lambda
                                    ((g$p$15292$Uaprr g$e$15293$Uaprr)
                                     ((case-lambda
                                        ((g$e$15294$Uaprr
                                           g$p$15295$Uaprr)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$15295$Uaprr)
                                           (write
                                             g$x$15286$Uaprr
                                             g$p$15295$Uaprr)
                                           (display
                                             '" in file "
                                             g$p$15295$Uaprr)
                                           (display
                                             g$file-name$15287$Uaprr
                                             g$p$15295$Uaprr)
                                           (display
                                             '", found "
                                             g$p$15295$Uaprr)
                                           (write
                                             g$name$15289$Uaprr
                                             g$p$15295$Uaprr)
                                           (display
                                             '" instead"
                                             g$p$15295$Uaprr)
                                           (g$e$15294$Uaprr))))
                                      g$e$15293$Uaprr
                                      g$p$15292$Uaprr)))))
                              (void)))))))))
                 (g$try-load-from-file$15200$Uaprr
                   g$file-name$15287$Uaprr)))))
           ((g$file-locator$15197$Uaprr) g$x$15286$Uaprr))))
       (case-lambda
         ((g$f$15296$Uaprr)
          (if (g$procedure?$12467$Uaprr g$f$15296$Uaprr)
            g$f$15296$Uaprr
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$15296$Uaprr))))))
   (g$current-library-expander$15202$Uaprr
     g$current-library-expander$15408$Uaprr
     (g$make-parameter$14574$Uaprr
       (case-lambda
         ((g$x$15297$Uaprr)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$15298$Uaprr)
          (if (g$procedure?$12467$Uaprr g$f$15298$Uaprr)
            g$f$15298$Uaprr
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$15298$Uaprr))))))
   (g$external-pending-libraries$15203$Uaprr
     g$external-pending-libraries$15409$Uaprr
     (g$make-parameter$14574$Uaprr '()))
   (g$find-external-library$15204$Uaprr
     g$find-external-library$15410$Uaprr
     (case-lambda
       ((g$name$15299$Uaprr)
        (begin
          (if (g$member$11716$Uaprr
                g$name$15299$Uaprr
                (g$external-pending-libraries$15203$Uaprr))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$15299$Uaprr)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$15302$Uaprr
                g$external-pending-libraries$15303$Uaprr)
              ((case-lambda
                 ((g$swap$15304$Uaprr)
                  (dynamic-wind
                    g$swap$15304$Uaprr
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$15201$Uaprr)
                          g$name$15299$Uaprr)
                         ((case-lambda
                            ((g$t$15305$Uaprr)
                             (if g$t$15305$Uaprr
                               g$t$15305$Uaprr
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$15299$Uaprr)))))
                          (g$find-library-by$15193$Uaprr
                            (case-lambda
                              ((g$x$15306$Uaprr)
                               (equal?
                                 (g$library-name$15164$Uaprr
                                   g$x$15306$Uaprr)
                                 g$name$15299$Uaprr))))))))
                    g$swap$15304$Uaprr)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$15307$Uaprr)
                      (begin
                        (g$external-pending-libraries$15302$Uaprr
                          g$external-pending-libraries$15303$Uaprr)
                        (set! g$external-pending-libraries$15303$Uaprr
                          g$t$15307$Uaprr))))
                   (g$external-pending-libraries$15302$Uaprr)))))))
           g$external-pending-libraries$15203$Uaprr
           (cons
             g$name$15299$Uaprr
             (g$external-pending-libraries$15203$Uaprr)))))))
   (g$find-library-by-name$15205$Uaprr
     g$find-library-by-name$15411$Uaprr
     (case-lambda
       ((g$name$15308$Uaprr)
        ((case-lambda
           ((g$t$15309$Uaprr)
            (if g$t$15309$Uaprr
              g$t$15309$Uaprr
              (begin
                '#f
                (g$find-external-library$15204$Uaprr
                  g$name$15308$Uaprr)))))
         (g$find-library-by$15193$Uaprr
           (case-lambda
             ((g$x$15310$Uaprr)
              (equal?
                (g$library-name$15164$Uaprr g$x$15310$Uaprr)
                g$name$15308$Uaprr))))))))
   (g$uninstall-library$15206$Uaprr
     g$uninstall-library$15412$Uaprr
     (case-lambda
       ((g$name$15311$Uaprr g$err?$15312$Uaprr)
        (letrec* ((g$who$15313$Uaprr 'uninstall-library))
          ((case-lambda
             ((g$lib$15314$Uaprr)
              (begin
                (if (if g$err?$15312$Uaprr
                      (begin '#f (not g$lib$15314$Uaprr))
                      '#f)
                  (assertion-violation
                    g$who$15313$Uaprr
                    '"library not installed"
                    g$name$15311$Uaprr)
                  (void))
                ((g$current-library-collection$15155$Uaprr)
                 g$lib$15314$Uaprr
                 '#t)
                (g$for-each$11723$Uaprr
                  (case-lambda
                    ((g$x$15315$Uaprr)
                     ((case-lambda
                        ((g$label$15316$Uaprr g$binding$15317$Uaprr)
                         (begin
                           (remove-location g$label$15316$Uaprr)
                           (if (g$memq$11714$Uaprr
                                 (car g$binding$15317$Uaprr)
                                 '(global
                                    global-macro
                                    global-macro!
                                    global-ctv))
                             (remove-location
                               (cdr g$binding$15317$Uaprr))
                             (void)))))
                      (car g$x$15315$Uaprr)
                      (cdr g$x$15315$Uaprr))))
                  (g$library-env$15170$Uaprr g$lib$15314$Uaprr)))))
           (g$find-library-by$15193$Uaprr
             (case-lambda
               ((g$x$15318$Uaprr)
                (equal?
                  (g$library-name$15164$Uaprr g$x$15318$Uaprr)
                  g$name$15311$Uaprr)))))))
       ((g$name$15319$Uaprr)
        (g$uninstall-library$15206$Uaprr g$name$15319$Uaprr '#t))))
   (g$library-exists?$15207$Uaprr
     g$library-exists?$15413$Uaprr
     (case-lambda
       ((g$name$15320$Uaprr)
        (if (g$find-library-by$15193$Uaprr
              (case-lambda
                ((g$x$15321$Uaprr)
                 (equal?
                   (g$library-name$15164$Uaprr g$x$15321$Uaprr)
                   g$name$15320$Uaprr))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$15208$Uaprr
     g$find-library-by-spec/die$15414$Uaprr
     (case-lambda
       ((g$spec$15322$Uaprr)
        ((case-lambda
           ((g$id$15323$Uaprr)
            ((case-lambda
               ((g$t$15324$Uaprr)
                (if g$t$15324$Uaprr
                  g$t$15324$Uaprr
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$15322$Uaprr)))))
             (g$find-library-by$15193$Uaprr
               (case-lambda
                 ((g$x$15325$Uaprr)
                  (eq? g$id$15323$Uaprr
                       (g$library-id$15163$Uaprr g$x$15325$Uaprr))))))))
         (car g$spec$15322$Uaprr)))))
   (g$install-library-record$15209$Uaprr
     g$install-library-record$15415$Uaprr
     (case-lambda
       ((g$lib$15326$Uaprr)
        (begin
          ((case-lambda
             ((g$exp-env$15327$Uaprr)
              (g$for-each$11723$Uaprr
                (case-lambda
                  ((g$x$15328$Uaprr)
                   ((case-lambda
                      ((g$label$15329$Uaprr g$binding$15330$Uaprr)
                       ((case-lambda
                          ((g$binding$15331$Uaprr)
                           (g$set-label-binding!$14577$Uaprr
                             g$label$15329$Uaprr
                             g$binding$15331$Uaprr)))
                        ((case-lambda
                           ((g$t$15332$Uaprr)
                            (if (eqv? g$t$15332$Uaprr 'global)
                              (cons
                                'global
                                (cons
                                  g$lib$15326$Uaprr
                                  (cdr g$binding$15330$Uaprr)))
                              (if (eqv? g$t$15332$Uaprr 'global-macro)
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$15326$Uaprr
                                    (cdr g$binding$15330$Uaprr)))
                                (if (eqv?
                                      g$t$15332$Uaprr
                                      'global-macro!)
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$15326$Uaprr
                                      (cdr g$binding$15330$Uaprr)))
                                  (if (eqv? g$t$15332$Uaprr 'global-ctv)
                                    (cons
                                      'global-ctv
                                      (cons
                                        g$lib$15326$Uaprr
                                        (cdr g$binding$15330$Uaprr)))
                                    g$binding$15330$Uaprr))))))
                         (car g$binding$15330$Uaprr)))))
                    (car g$x$15328$Uaprr)
                    (cdr g$x$15328$Uaprr))))
                g$exp-env$15327$Uaprr)))
           (g$library-env$15170$Uaprr g$lib$15326$Uaprr))
          ((g$current-library-collection$15155$Uaprr)
           g$lib$15326$Uaprr)))))
   (g$install-library$15210$Uaprr
     g$install-library$15416$Uaprr
     (case-lambda
       ((g$id$15333$Uaprr
          g$name$15334$Uaprr
          g$ver$15335$Uaprr
          g$imp*$15336$Uaprr
          g$vis*$15337$Uaprr
          g$inv*$15338$Uaprr
          g$exp-subst$15339$Uaprr
          g$exp-env$15340$Uaprr
          g$visit-proc$15341$Uaprr
          g$invoke-proc$15342$Uaprr
          g$visit-code$15343$Uaprr
          g$invoke-code$15344$Uaprr
          g$visible?$15345$Uaprr
          g$source-file-name$15346$Uaprr)
        ((case-lambda
           ((g$imp-lib*$15347$Uaprr
              g$vis-lib*$15348$Uaprr
              g$inv-lib*$15349$Uaprr)
            (begin
              (if (not (if (g$symbol?$12465$Uaprr g$id$15333$Uaprr)
                         (if (list? g$name$15334$Uaprr)
                           (begin '#f (list? g$ver$15335$Uaprr))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$15333$Uaprr
                  g$name$15334$Uaprr
                  g$ver$15335$Uaprr)
                (void))
              (if (g$library-exists?$15207$Uaprr g$name$15334$Uaprr)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$15334$Uaprr)
                (void))
              ((case-lambda
                 ((g$lib$15350$Uaprr)
                  (g$install-library-record$15209$Uaprr
                    g$lib$15350$Uaprr)))
               (g$make-library$15162$Uaprr
                 g$id$15333$Uaprr
                 g$name$15334$Uaprr
                 g$ver$15335$Uaprr
                 g$imp-lib*$15347$Uaprr
                 g$vis-lib*$15348$Uaprr
                 g$inv-lib*$15349$Uaprr
                 g$exp-subst$15339$Uaprr
                 g$exp-env$15340$Uaprr
                 g$visit-proc$15341$Uaprr
                 g$invoke-proc$15342$Uaprr
                 g$visit-code$15343$Uaprr
                 g$invoke-code$15344$Uaprr
                 g$visible?$15345$Uaprr
                 g$source-file-name$15346$Uaprr)))))
         (g$map$11722$Uaprr
           g$find-library-by-spec/die$15208$Uaprr
           g$imp*$15336$Uaprr)
         (g$map$11722$Uaprr
           g$find-library-by-spec/die$15208$Uaprr
           g$vis*$15337$Uaprr)
         (g$map$11722$Uaprr
           g$find-library-by-spec/die$15208$Uaprr
           g$inv*$15338$Uaprr)))))
   (g$imported-label->binding$15211$Uaprr
     g$imported-label->binding$15417$Uaprr
     (case-lambda
       ((g$lab$15351$Uaprr)
        (g$label-binding$14578$Uaprr g$lab$15351$Uaprr))))
   (g$invoke-library$15212$Uaprr
     g$invoke-library$15418$Uaprr
     (case-lambda
       ((g$lib$15352$Uaprr)
        ((case-lambda
           ((g$invoke$15353$Uaprr)
            (if (g$procedure?$12467$Uaprr g$invoke$15353$Uaprr)
              (begin
                (g$set-library-invoke-state!$15186$Uaprr
                  g$lib$15352$Uaprr
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$15352$Uaprr))))
                (g$for-each$11723$Uaprr
                  g$invoke-library$15212$Uaprr
                  (g$library-inv*$15168$Uaprr g$lib$15352$Uaprr))
                (g$set-library-invoke-state!$15186$Uaprr
                  g$lib$15352$Uaprr
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$15352$Uaprr))))
                (g$invoke$15353$Uaprr)
                (g$set-library-invoke-state!$15186$Uaprr
                  g$lib$15352$Uaprr
                  '#t))
              (void))))
         (g$library-invoke-state$15172$Uaprr g$lib$15352$Uaprr)))))
   (g$visit-library$15213$Uaprr
     g$visit-library$15419$Uaprr
     (case-lambda
       ((g$lib$15354$Uaprr)
        ((case-lambda
           ((g$visit$15355$Uaprr)
            (if (g$procedure?$12467$Uaprr g$visit$15355$Uaprr)
              (begin
                (g$set-library-visit-state!$15185$Uaprr
                  g$lib$15354$Uaprr
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$15354$Uaprr))))
                (g$for-each$11723$Uaprr
                  g$invoke-library$15212$Uaprr
                  (g$library-vis*$15167$Uaprr g$lib$15354$Uaprr))
                (g$set-library-visit-state!$15185$Uaprr
                  g$lib$15354$Uaprr
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$15354$Uaprr))))
                (g$visit$15355$Uaprr)
                (g$set-library-visit-state!$15185$Uaprr
                  g$lib$15354$Uaprr
                  '#t))
              (void))))
         (g$library-visit-state$15171$Uaprr g$lib$15354$Uaprr)))))
   (g$invoke-library-by-spec$15214$Uaprr
     g$invoke-library-by-spec$15420$Uaprr
     (case-lambda
       ((g$spec$15356$Uaprr)
        (g$invoke-library$15212$Uaprr
          (g$find-library-by-spec/die$15208$Uaprr
            g$spec$15356$Uaprr)))))
   (g$installed-libraries$15215$Uaprr
     g$installed-libraries$15421$Uaprr
     (case-lambda
       ((g$all?$15357$Uaprr)
        ((letrec ((g$f$15358$Uaprr
                    (case-lambda
                      ((g$ls$15359$Uaprr)
                       (if (null? g$ls$15359$Uaprr)
                         '()
                         (if ((case-lambda
                                ((g$t$15360$Uaprr)
                                 (if g$t$15360$Uaprr
                                   g$t$15360$Uaprr
                                   (begin
                                     '#f
                                     (g$library-visible?$15175$Uaprr
                                       (car g$ls$15359$Uaprr))))))
                              g$all?$15357$Uaprr)
                           (cons
                             (g$library-name$15164$Uaprr
                               (car g$ls$15359$Uaprr))
                             (g$f$15358$Uaprr (cdr g$ls$15359$Uaprr)))
                           (g$f$15358$Uaprr
                             (cdr g$ls$15359$Uaprr))))))))
           g$f$15358$Uaprr)
         ((g$current-library-collection$15155$Uaprr))))
       (() (g$installed-libraries$15215$Uaprr '#f))))
   (g$library-spec$15216$Uaprr
     g$library-spec$15422$Uaprr
     (case-lambda
       ((g$x$15361$Uaprr)
        (begin
          (if (not (g$library?$15161$Uaprr g$x$15361$Uaprr))
            (assertion-violation
              'library-spec
              '"not a library"
              g$x$15361$Uaprr)
            (void))
          (list
            (g$library-id$15163$Uaprr g$x$15361$Uaprr)
            (g$library-name$15164$Uaprr g$x$15361$Uaprr)
            (g$library-version$15165$Uaprr g$x$15361$Uaprr)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$15423$Uaprr
     g$build-global-define$15633$Uaprr
     (case-lambda ((g$x$15604$Uaprr) (g$build-void$15600$Uaprr))))
   (g$build-lambda$15534$Uaprr
     g$build-lambda$15634$Uaprr
     (case-lambda
       ((g$ae$15605$Uaprr g$vars$15606$Uaprr g$exp$15607$Uaprr)
        (list
          'case-lambda
          (list g$vars$15606$Uaprr g$exp$15607$Uaprr)))))
   (g$build-case-lambda$15535$Uaprr
     g$build-case-lambda$15635$Uaprr
     (case-lambda
       ((g$ae$15608$Uaprr g$vars*$15609$Uaprr g$exp*$15610$Uaprr)
        (cons
          'case-lambda
          (g$map$11722$Uaprr
            list
            g$vars*$15609$Uaprr
            g$exp*$15610$Uaprr)))))
   (g$build-let$15536$Uaprr
     g$build-let$15636$Uaprr
     (case-lambda
       ((g$ae$15611$Uaprr
          g$lhs*$15612$Uaprr
          g$rhs*$15613$Uaprr
          g$body$15614$Uaprr)
        (cons
          (g$build-lambda$15534$Uaprr
            g$ae$15611$Uaprr
            g$lhs*$15612$Uaprr
            g$body$15614$Uaprr)
          g$rhs*$15613$Uaprr))))
   (g$build-sequence$15599$Uaprr
     g$build-sequence$15637$Uaprr
     (case-lambda
       ((g$ae$15615$Uaprr g$exps$15616$Uaprr)
        ((letrec ((g$loop$15617$Uaprr
                    (case-lambda
                      ((g$exps$15618$Uaprr)
                       (if (null? (cdr g$exps$15618$Uaprr))
                         (car g$exps$15618$Uaprr)
                         (if (equal?
                               (car g$exps$15618$Uaprr)
                               (g$build-void$15600$Uaprr))
                           (g$loop$15617$Uaprr (cdr g$exps$15618$Uaprr))
                           (cons 'begin g$exps$15618$Uaprr)))))))
           g$loop$15617$Uaprr)
         g$exps$15616$Uaprr))))
   (g$build-void$15600$Uaprr
     g$build-void$15638$Uaprr
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$15601$Uaprr
     g$build-letrec$15639$Uaprr
     (case-lambda
       ((g$ae$15619$Uaprr
          g$vars$15620$Uaprr
          g$val-exps$15621$Uaprr
          g$body-exp$15622$Uaprr)
        (if (null? g$vars$15620$Uaprr)
          g$body-exp$15622$Uaprr
          (list
            'letrec
            (g$map$11722$Uaprr
              list
              g$vars$15620$Uaprr
              g$val-exps$15621$Uaprr)
            g$body-exp$15622$Uaprr)))))
   (g$build-letrec*$15602$Uaprr
     g$build-letrec*$15640$Uaprr
     (case-lambda
       ((g$ae$15623$Uaprr
          g$vars$15624$Uaprr
          g$val-exps$15625$Uaprr
          g$body-exp$15626$Uaprr)
        (if (null? g$vars$15624$Uaprr)
          g$body-exp$15626$Uaprr
          (list
            'letrec*
            (g$map$11722$Uaprr
              list
              g$vars$15624$Uaprr
              g$val-exps$15625$Uaprr)
            g$body-exp$15626$Uaprr)))))
   (g$build-library-letrec*$15603$Uaprr
     g$build-library-letrec*$15641$Uaprr
     (case-lambda
       ((g$ae$15627$Uaprr
          g$name$15628$Uaprr
          g$vars$15629$Uaprr
          g$locs$15630$Uaprr
          g$val-exps$15631$Uaprr
          g$body-exp$15632$Uaprr)
        (list
          'library-letrec*
          g$name$15628$Uaprr
          (g$map$11722$Uaprr
            list
            g$vars$15629$Uaprr
            g$locs$15630$Uaprr
            g$val-exps$15631$Uaprr)
          g$body-exp$15632$Uaprr)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$15642$Uaprr
     g$set-cons$19654$Uaprr
     (case-lambda
       ((g$x$16338$Uaprr g$ls$16339$Uaprr)
        (if (g$memq$11714$Uaprr g$x$16338$Uaprr g$ls$16339$Uaprr)
          g$ls$16339$Uaprr
          (cons g$x$16338$Uaprr g$ls$16339$Uaprr)))))
   (g$set-union$15643$Uaprr
     g$set-union$19655$Uaprr
     (case-lambda
       ((g$ls1$16340$Uaprr g$ls2$16341$Uaprr)
        (if (null? g$ls1$16340$Uaprr)
          g$ls2$16341$Uaprr
          (if (g$memq$11714$Uaprr
                (car g$ls1$16340$Uaprr)
                g$ls2$16341$Uaprr)
            (g$set-union$15643$Uaprr
              (cdr g$ls1$16340$Uaprr)
              g$ls2$16341$Uaprr)
            (cons
              (car g$ls1$16340$Uaprr)
              (g$set-union$15643$Uaprr
                (cdr g$ls1$16340$Uaprr)
                g$ls2$16341$Uaprr)))))))
   (g$top-mark*$15645$Uaprr g$top-mark*$19656$Uaprr '(top))
   (g$top-marked?$15646$Uaprr
     g$top-marked?$19657$Uaprr
     (case-lambda
       ((g$m*$16342$Uaprr) (g$memq$11714$Uaprr 'top g$m*$16342$Uaprr))))
   (g$gen-lexical$15647$Uaprr
     g$gen-lexical$19658$Uaprr
     (case-lambda
       ((g$sym$16343$Uaprr)
        (if (g$symbol?$12465$Uaprr g$sym$16343$Uaprr)
          (gensym g$sym$16343$Uaprr)
          (if (g$stx?$15684$Uaprr g$sym$16343$Uaprr)
            (g$gen-lexical$15647$Uaprr
              (g$id->sym$15713$Uaprr g$sym$16343$Uaprr))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$16343$Uaprr))))))
   (g$gen-global$15648$Uaprr
     g$gen-global$19659$Uaprr
     (case-lambda
       ((g$x$16344$Uaprr) (g$gen-lexical$15647$Uaprr g$x$16344$Uaprr))))
   (g$gen-label$15649$Uaprr
     g$gen-label$19660$Uaprr
     (case-lambda ((g$_$16345$Uaprr) (gensym))))
   (g$gen-top-level-label$15650$Uaprr
     g$gen-top-level-label$19661$Uaprr
     (case-lambda
       ((g$id$16346$Uaprr g$rib$16347$Uaprr)
        (letrec* ((g$find$16348$Uaprr
                    (case-lambda
                      ((g$sym$16354$Uaprr
                         g$mark*$16355$Uaprr
                         g$sym*$16356$Uaprr
                         g$mark**$16357$Uaprr
                         g$label*$16358$Uaprr)
                       (if (pair? g$sym*$16356$Uaprr)
                         (begin
                           '#f
                           (if (if (eq? g$sym$16354$Uaprr
                                        (car g$sym*$16356$Uaprr))
                                 (begin
                                   '#f
                                   (g$same-marks?$15714$Uaprr
                                     g$mark*$16355$Uaprr
                                     (car g$mark**$16357$Uaprr)))
                                 '#f)
                             (car g$label*$16358$Uaprr)
                             (g$find$16348$Uaprr
                               g$sym$16354$Uaprr
                               g$mark*$16355$Uaprr
                               (cdr g$sym*$16356$Uaprr)
                               (cdr g$mark**$16357$Uaprr)
                               (cdr g$label*$16358$Uaprr))))
                         '#f)))))
          ((case-lambda
             ((g$sym$16349$Uaprr g$mark*$16350$Uaprr)
              ((case-lambda
                 ((g$sym*$16351$Uaprr)
                  ((case-lambda
                     ((g$t$16352$Uaprr)
                      (if g$t$16352$Uaprr
                        ((case-lambda
                           ((g$label$16353$Uaprr)
                            (if (g$imported-label->binding$15417$Uaprr
                                  g$label$16353$Uaprr)
                              (gensym)
                              g$label$16353$Uaprr)))
                         g$t$16352$Uaprr)
                        (gensym))))
                   (if (g$memq$11714$Uaprr
                         g$sym$16349$Uaprr
                         (g$rib-sym*$15660$Uaprr g$rib$16347$Uaprr))
                     (begin
                       '#f
                       (g$find$16348$Uaprr
                         g$sym$16349$Uaprr
                         g$mark*$16350$Uaprr
                         g$sym*$16351$Uaprr
                         (g$rib-mark**$15661$Uaprr g$rib$16347$Uaprr)
                         (g$rib-label*$15662$Uaprr g$rib$16347$Uaprr)))
                     '#f))))
               (g$rib-sym*$15660$Uaprr g$rib$16347$Uaprr))))
           (g$id->sym$15713$Uaprr g$id$16346$Uaprr)
           (g$stx-mark*$15687$Uaprr g$id$16346$Uaprr))))))
   (g$gen-define-label+loc$15651$Uaprr
     g$gen-define-label+loc$19662$Uaprr
     (case-lambda
       ((g$id$16359$Uaprr g$rib$16360$Uaprr g$sd?$16361$Uaprr)
        (if g$sd?$16361$Uaprr
          (values (gensym) (g$gen-lexical$15647$Uaprr g$id$16359$Uaprr))
          ((case-lambda
             ((g$env$16362$Uaprr)
              ((case-lambda
                 ((g$label$16363$Uaprr g$locs$16364$Uaprr)
                  (values
                    g$label$16363$Uaprr
                    ((case-lambda
                       ((g$t$16365$Uaprr)
                        (if g$t$16365$Uaprr
                          (cdr g$t$16365$Uaprr)
                          ((case-lambda
                             ((g$loc$16366$Uaprr)
                              (begin
                                (g$set-interaction-env-locs!$16300$Uaprr
                                  g$env$16362$Uaprr
                                  (cons
                                    (cons
                                      g$label$16363$Uaprr
                                      g$loc$16366$Uaprr)
                                    g$locs$16364$Uaprr))
                                g$loc$16366$Uaprr)))
                           (g$gen-lexical$15647$Uaprr
                             g$id$16359$Uaprr)))))
                     (g$assq$11710$Uaprr
                       g$label$16363$Uaprr
                       g$locs$16364$Uaprr)))))
               (g$gen-top-level-label$15650$Uaprr
                 g$id$16359$Uaprr
                 g$rib$16360$Uaprr)
               (g$interaction-env-locs$16297$Uaprr g$env$16362$Uaprr))))
           (g$top-level-context$16337$Uaprr))))))
   (g$gen-define-label$15652$Uaprr
     g$gen-define-label$19663$Uaprr
     (case-lambda
       ((g$id$16367$Uaprr g$rib$16368$Uaprr g$sd?$16369$Uaprr)
        (if g$sd?$16369$Uaprr
          (gensym)
          (g$gen-top-level-label$15650$Uaprr
            g$id$16367$Uaprr
            g$rib$16368$Uaprr)))))
   (g$7813$15653$Uaprr
     g$7813$19664$Uaprr
     (make-record-type-descriptor
       'rib
       '#f
       'g$7816$Uaprr
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq)
          (mutable cache))))
   (g$7815$15654$Uaprr g$7815$19665$Uaprr '#f)
   (g$7814$15655$Uaprr
     g$7814$19666$Uaprr
     (make-record-constructor-descriptor
       g$7813$15653$Uaprr
       '#f
       g$7815$15654$Uaprr))
   (g$rib?$15658$Uaprr
     g$rib?$19667$Uaprr
     (record-predicate g$7813$15653$Uaprr))
   (g$make-rib$15659$Uaprr
     g$make-rib$19668$Uaprr
     (record-constructor g$7814$15655$Uaprr))
   (g$rib-sym*$15660$Uaprr
     g$rib-sym*$19669$Uaprr
     (record-accessor g$7813$15653$Uaprr '0))
   (g$rib-mark**$15661$Uaprr
     g$rib-mark**$19670$Uaprr
     (record-accessor g$7813$15653$Uaprr '1))
   (g$rib-label*$15662$Uaprr
     g$rib-label*$19671$Uaprr
     (record-accessor g$7813$15653$Uaprr '2))
   (g$rib-sealed/freq$15663$Uaprr
     g$rib-sealed/freq$19672$Uaprr
     (record-accessor g$7813$15653$Uaprr '3))
   (g$rib-cache$15664$Uaprr
     g$rib-cache$19673$Uaprr
     (record-accessor g$7813$15653$Uaprr '4))
   (g$set-rib-sym*!$15665$Uaprr
     g$set-rib-sym*!$19674$Uaprr
     (record-mutator g$7813$15653$Uaprr '0))
   (g$set-rib-mark**!$15666$Uaprr
     g$set-rib-mark**!$19675$Uaprr
     (record-mutator g$7813$15653$Uaprr '1))
   (g$set-rib-label*!$15667$Uaprr
     g$set-rib-label*!$19676$Uaprr
     (record-mutator g$7813$15653$Uaprr '2))
   (g$set-rib-sealed/freq!$15668$Uaprr
     g$set-rib-sealed/freq!$19677$Uaprr
     (record-mutator g$7813$15653$Uaprr '3))
   (g$set-rib-cache!$15669$Uaprr
     g$set-rib-cache!$19678$Uaprr
     (record-mutator g$7813$15653$Uaprr '4))
   (g$make-empty-rib$15670$Uaprr
     g$make-empty-rib$19679$Uaprr
     (case-lambda (() (g$make-rib$15659$Uaprr '() '() '() '#f '#f))))
   (g$make-cache-rib$15671$Uaprr
     g$make-cache-rib$19680$Uaprr
     (case-lambda
       (()
        (g$make-rib$15659$Uaprr
          '()
          '()
          '()
          '#f
          (g$make-eq-hashtable$12566$Uaprr)))))
   (g$find-label$15672$Uaprr
     g$find-label$19681$Uaprr
     (case-lambda
       ((g$rib$16370$Uaprr g$sym$16371$Uaprr g$mark*$16372$Uaprr)
        ((case-lambda
           ((g$ht$16373$Uaprr)
            (if g$ht$16373$Uaprr
              (begin
                '#f
                ((case-lambda
                   ((g$cv$16374$Uaprr)
                    ((case-lambda
                       ((g$t$16375$Uaprr)
                        (if g$t$16375$Uaprr (cdr g$t$16375$Uaprr) '#f)))
                     (if g$cv$16374$Uaprr
                       (begin
                         '#f
                         (g$assp$11713$Uaprr
                           (case-lambda
                             ((g$m$16376$Uaprr)
                              (g$same-marks?$15714$Uaprr
                                g$mark*$16372$Uaprr
                                g$m$16376$Uaprr)))
                           g$cv$16374$Uaprr))
                       '#f))))
                 (g$hashtable-ref$12569$Uaprr
                   g$ht$16373$Uaprr
                   g$sym$16371$Uaprr
                   '#f)))
              '#f)))
         (g$rib-cache$15664$Uaprr g$rib$16370$Uaprr)))))
   (g$extend-rib!$15673$Uaprr
     g$extend-rib!$19682$Uaprr
     (case-lambda
       ((g$rib$16377$Uaprr
          g$id$16378$Uaprr
          g$label$16379$Uaprr
          g$sd?$16380$Uaprr)
        (letrec* ((g$find$16381$Uaprr
                    (case-lambda
                      ((g$sym$16390$Uaprr
                         g$mark*$16391$Uaprr
                         g$sym*$16392$Uaprr
                         g$mark**$16393$Uaprr
                         g$label*$16394$Uaprr)
                       (if (pair? g$sym*$16392$Uaprr)
                         (begin
                           '#f
                           (if (if (eq? g$sym$16390$Uaprr
                                        (car g$sym*$16392$Uaprr))
                                 (begin
                                   '#f
                                   (g$same-marks?$15714$Uaprr
                                     g$mark*$16391$Uaprr
                                     (car g$mark**$16393$Uaprr)))
                                 '#f)
                             g$label*$16394$Uaprr
                             (g$find$16381$Uaprr
                               g$sym$16390$Uaprr
                               g$mark*$16391$Uaprr
                               (cdr g$sym*$16392$Uaprr)
                               (cdr g$mark**$16393$Uaprr)
                               (cdr g$label*$16394$Uaprr))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$15663$Uaprr g$rib$16377$Uaprr)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$16377$Uaprr)
              (void))
            ((case-lambda
               ((g$sym$16382$Uaprr g$mark*$16383$Uaprr)
                ((case-lambda
                   ((g$sym*$16384$Uaprr)
                    ((case-lambda
                       ((g$t$16385$Uaprr)
                        (if g$t$16385$Uaprr
                          ((case-lambda
                             ((g$p$16386$Uaprr)
                              (if (not (eq? g$label$16379$Uaprr
                                            g$p$16386$Uaprr))
                                (g$syntax-violation$16329$Uaprr
                                  '#f
                                  '"multiple definitions of identifier"
                                  g$id$16378$Uaprr)
                                (void))))
                           g$t$16385$Uaprr)
                          ((case-lambda
                             ((g$t$16387$Uaprr)
                              (if g$t$16387$Uaprr
                                ((case-lambda
                                   ((g$p$16388$Uaprr)
                                    (if (not (eq? g$label$16379$Uaprr
                                                  (car g$p$16388$Uaprr)))
                                      (if (not g$sd?$16380$Uaprr)
                                        (set-car!
                                          g$p$16388$Uaprr
                                          g$label$16379$Uaprr)
                                        (g$syntax-violation$16329$Uaprr
                                          '#f
                                          '"multiple definitions of identifier"
                                          g$id$16378$Uaprr))
                                      (void))))
                                 g$t$16387$Uaprr)
                                (begin
                                  (if (g$rib-cache$15664$Uaprr
                                        g$rib$16377$Uaprr)
                                    (g$hashtable-update!$12573$Uaprr
                                      (g$rib-cache$15664$Uaprr
                                        g$rib$16377$Uaprr)
                                      g$sym$16382$Uaprr
                                      (case-lambda
                                        ((g$e$16389$Uaprr)
                                         (cons
                                           (cons
                                             g$mark*$16383$Uaprr
                                             g$label$16379$Uaprr)
                                           g$e$16389$Uaprr)))
                                      '())
                                    (void))
                                  (g$set-rib-sym*!$15665$Uaprr
                                    g$rib$16377$Uaprr
                                    (cons
                                      g$sym$16382$Uaprr
                                      g$sym*$16384$Uaprr))
                                  (g$set-rib-mark**!$15666$Uaprr
                                    g$rib$16377$Uaprr
                                    (cons
                                      g$mark*$16383$Uaprr
                                      (g$rib-mark**$15661$Uaprr
                                        g$rib$16377$Uaprr)))
                                  (g$set-rib-label*!$15667$Uaprr
                                    g$rib$16377$Uaprr
                                    (cons
                                      g$label$16379$Uaprr
                                      (g$rib-label*$15662$Uaprr
                                        g$rib$16377$Uaprr)))))))
                           (if (g$memq$11714$Uaprr
                                 g$sym$16382$Uaprr
                                 (g$rib-sym*$15660$Uaprr
                                   g$rib$16377$Uaprr))
                             (begin
                               '#f
                               (g$find$16381$Uaprr
                                 g$sym$16382$Uaprr
                                 g$mark*$16383$Uaprr
                                 g$sym*$16384$Uaprr
                                 (g$rib-mark**$15661$Uaprr
                                   g$rib$16377$Uaprr)
                                 (g$rib-label*$15662$Uaprr
                                   g$rib$16377$Uaprr)))
                             '#f)))))
                     (g$find-label$15672$Uaprr
                       g$rib$16377$Uaprr
                       g$sym$16382$Uaprr
                       g$mark*$16383$Uaprr))))
                 (g$rib-sym*$15660$Uaprr g$rib$16377$Uaprr))))
             (g$id->sym$15713$Uaprr g$id$16378$Uaprr)
             (g$stx-mark*$15687$Uaprr g$id$16378$Uaprr)))))))
   (g$extend-rib/nc!$15674$Uaprr
     g$extend-rib/nc!$19683$Uaprr
     (case-lambda
       ((g$rib$16395$Uaprr g$id$16396$Uaprr g$label$16397$Uaprr)
        ((case-lambda
           ((g$sym$16398$Uaprr g$mark*$16399$Uaprr)
            ((case-lambda
               ((g$sym*$16400$Uaprr)
                (begin
                  (if (g$rib-cache$15664$Uaprr g$rib$16395$Uaprr)
                    (g$hashtable-update!$12573$Uaprr
                      (g$rib-cache$15664$Uaprr g$rib$16395$Uaprr)
                      g$sym$16398$Uaprr
                      (case-lambda
                        ((g$e$16401$Uaprr)
                         (cons
                           (cons
                             g$mark*$16399$Uaprr
                             g$label$16397$Uaprr)
                           g$e$16401$Uaprr)))
                      '())
                    (void))
                  (g$set-rib-sym*!$15665$Uaprr
                    g$rib$16395$Uaprr
                    (cons g$sym$16398$Uaprr g$sym*$16400$Uaprr))
                  (g$set-rib-mark**!$15666$Uaprr
                    g$rib$16395$Uaprr
                    (cons
                      g$mark*$16399$Uaprr
                      (g$rib-mark**$15661$Uaprr g$rib$16395$Uaprr)))
                  (g$set-rib-label*!$15667$Uaprr
                    g$rib$16395$Uaprr
                    (cons
                      g$label$16397$Uaprr
                      (g$rib-label*$15662$Uaprr g$rib$16395$Uaprr))))))
             (g$rib-sym*$15660$Uaprr g$rib$16395$Uaprr))))
         (g$id->sym$15713$Uaprr g$id$16396$Uaprr)
         (g$stx-mark*$15687$Uaprr g$id$16396$Uaprr)))))
   (g$make-rib-map$15675$Uaprr
     g$make-rib-map$19684$Uaprr
     (case-lambda
       ((g$sym*$16402$Uaprr)
        ((case-lambda
           ((g$ht$16403$Uaprr)
            ((letrec ((g$f$16404$Uaprr
                        (case-lambda
                          ((g$i$16405$Uaprr g$sym*$16406$Uaprr)
                           (if (null? g$sym*$16406$Uaprr)
                             g$ht$16403$Uaprr
                             (begin
                               (g$hashtable-update!$12573$Uaprr
                                 g$ht$16403$Uaprr
                                 (car g$sym*$16406$Uaprr)
                                 (case-lambda
                                   ((g$x$16407$Uaprr)
                                    (cons
                                      g$i$16405$Uaprr
                                      g$x$16407$Uaprr)))
                                 '())
                               (g$f$16404$Uaprr
                                 (+ g$i$16405$Uaprr '1)
                                 (cdr g$sym*$16406$Uaprr))))))))
               g$f$16404$Uaprr)
             '0
             g$sym*$16402$Uaprr)))
         (g$make-eq-hashtable$12566$Uaprr)))))
   (g$seal-rib!$15676$Uaprr
     g$seal-rib!$19685$Uaprr
     (case-lambda
       ((g$rib$16408$Uaprr)
        ((case-lambda
           ((g$sym*$16409$Uaprr)
            (if (not (null? g$sym*$16409$Uaprr))
              (begin
                (g$set-rib-sym*!$15665$Uaprr
                  g$rib$16408$Uaprr
                  (g$list->vector$12460$Uaprr g$sym*$16409$Uaprr))
                (g$set-rib-mark**!$15666$Uaprr
                  g$rib$16408$Uaprr
                  (g$list->vector$12460$Uaprr
                    (g$rib-mark**$15661$Uaprr g$rib$16408$Uaprr)))
                (g$set-rib-label*!$15667$Uaprr
                  g$rib$16408$Uaprr
                  (g$list->vector$12460$Uaprr
                    (g$rib-label*$15662$Uaprr g$rib$16408$Uaprr)))
                (g$set-rib-sealed/freq!$15668$Uaprr
                  g$rib$16408$Uaprr
                  (g$make-rib-map$15675$Uaprr g$sym*$16409$Uaprr)))
              (void))))
         (g$rib-sym*$15660$Uaprr g$rib$16408$Uaprr)))))
   (g$unseal-rib!$15677$Uaprr
     g$unseal-rib!$19686$Uaprr
     (case-lambda
       ((g$rib$16410$Uaprr)
        (if (g$rib-sealed/freq$15663$Uaprr g$rib$16410$Uaprr)
          (begin
            (g$set-rib-sealed/freq!$15668$Uaprr g$rib$16410$Uaprr '#f)
            (g$set-rib-sym*!$15665$Uaprr
              g$rib$16410$Uaprr
              (vector->list (g$rib-sym*$15660$Uaprr g$rib$16410$Uaprr)))
            (g$set-rib-mark**!$15666$Uaprr
              g$rib$16410$Uaprr
              (vector->list
                (g$rib-mark**$15661$Uaprr g$rib$16410$Uaprr)))
            (g$set-rib-label*!$15667$Uaprr
              g$rib$16410$Uaprr
              (vector->list
                (g$rib-label*$15662$Uaprr g$rib$16410$Uaprr))))
          (void)))))
   (g$make-full-rib$15678$Uaprr
     g$make-full-rib$19687$Uaprr
     (case-lambda
       ((g$id*$16411$Uaprr g$label*$16412$Uaprr)
        ((case-lambda
           ((g$r$16413$Uaprr)
            (begin
              (g$seal-rib!$15676$Uaprr g$r$16413$Uaprr)
              g$r$16413$Uaprr)))
         (g$make-rib$15659$Uaprr
           (g$map$11722$Uaprr g$id->sym$15713$Uaprr g$id*$16411$Uaprr)
           (g$map$11722$Uaprr g$stx-mark*$15687$Uaprr g$id*$16411$Uaprr)
           g$label*$16412$Uaprr
           '#f
           '#f)))))
   (g$7842$15679$Uaprr
     g$7842$19688$Uaprr
     (make-record-type-descriptor
       'stx
       '#f
       'g$7845$Uaprr
       '#t
       '#t
       '#((mutable expr)
          (mutable mark*)
          (mutable subst*)
          (mutable ae*))))
   (g$7844$15680$Uaprr g$7844$19689$Uaprr '#f)
   (g$7843$15681$Uaprr
     g$7843$19690$Uaprr
     (make-record-constructor-descriptor
       g$7842$15679$Uaprr
       '#f
       g$7844$15680$Uaprr))
   (g$stx?$15684$Uaprr
     g$stx?$19691$Uaprr
     (record-predicate g$7842$15679$Uaprr))
   (g$make-stx$15685$Uaprr
     g$make-stx$19692$Uaprr
     (record-constructor g$7843$15681$Uaprr))
   (g$stx-expr$15686$Uaprr
     g$stx-expr$19693$Uaprr
     (record-accessor g$7842$15679$Uaprr '0))
   (g$stx-mark*$15687$Uaprr
     g$stx-mark*$19694$Uaprr
     (record-accessor g$7842$15679$Uaprr '1))
   (g$stx-subst*$15688$Uaprr
     g$stx-subst*$19695$Uaprr
     (record-accessor g$7842$15679$Uaprr '2))
   (g$stx-ae*$15689$Uaprr
     g$stx-ae*$19696$Uaprr
     (record-accessor g$7842$15679$Uaprr '3))
   (g$set-stx-expr!$15690$Uaprr
     g$set-stx-expr!$19697$Uaprr
     (record-mutator g$7842$15679$Uaprr '0))
   (g$set-stx-mark*!$15691$Uaprr
     g$set-stx-mark*!$19698$Uaprr
     (record-mutator g$7842$15679$Uaprr '1))
   (g$set-stx-subst*!$15692$Uaprr
     g$set-stx-subst*!$19699$Uaprr
     (record-mutator g$7842$15679$Uaprr '2))
   (g$set-stx-ae*!$15693$Uaprr
     g$set-stx-ae*!$19700$Uaprr
     (record-mutator g$7842$15679$Uaprr '3))
   (g$rp$15694$Uaprr
     g$rp$19701$Uaprr
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$16414$Uaprr g$p$16415$Uaprr g$wr$16416$Uaprr)
          (begin
            (display '"#<syntax " g$p$16415$Uaprr)
            (write
              (g$stx->datum$15723$Uaprr g$x$16414$Uaprr)
              g$p$16415$Uaprr)
            ((case-lambda
               ((g$expr$16417$Uaprr)
                (if (annotation? g$expr$16417$Uaprr)
                  ((case-lambda
                     ((g$src$16418$Uaprr)
                      (if (pair? g$src$16418$Uaprr)
                        (begin
                          (display '" (" g$p$16415$Uaprr)
                          (display
                            (cdr g$src$16418$Uaprr)
                            g$p$16415$Uaprr)
                          (display '" of " g$p$16415$Uaprr)
                          (display
                            (car g$src$16418$Uaprr)
                            g$p$16415$Uaprr)
                          (display '")" g$p$16415$Uaprr))
                        (void))))
                   (annotation-source g$expr$16417$Uaprr))
                  (void))))
             (g$stx-expr$15686$Uaprr g$x$16414$Uaprr))
            (display '">" g$p$16415$Uaprr))))))
   (g$datum->stx$15695$Uaprr
     g$datum->stx$19702$Uaprr
     (case-lambda
       ((g$id$16419$Uaprr g$datum$16420$Uaprr)
        (g$make-stx$15685$Uaprr
          g$datum$16420$Uaprr
          (g$stx-mark*$15687$Uaprr g$id$16419$Uaprr)
          (g$stx-subst*$15688$Uaprr g$id$16419$Uaprr)
          (g$stx-ae*$15689$Uaprr g$id$16419$Uaprr)))))
   (g$gen-mark$15696$Uaprr
     g$gen-mark$19703$Uaprr
     (case-lambda (() (string '#\m))))
   (g$anti-mark$15697$Uaprr g$anti-mark$19704$Uaprr '#f)
   (g$anti-mark?$15698$Uaprr g$anti-mark?$19705$Uaprr not)
   (g$join-wraps$15699$Uaprr
     g$join-wraps$19706$Uaprr
     (case-lambda
       ((g$m1*$16421$Uaprr
          g$s1*$16422$Uaprr
          g$ae1*$16423$Uaprr
          g$e$16424$Uaprr)
        (letrec* ((g$cancel$16425$Uaprr
                    (case-lambda
                      ((g$ls1$16429$Uaprr g$ls2$16430$Uaprr)
                       ((letrec ((g$f$16431$Uaprr
                                   (case-lambda
                                     ((g$x$16432$Uaprr
                                        g$ls1$16433$Uaprr)
                                      (if (null? g$ls1$16433$Uaprr)
                                        (cdr g$ls2$16430$Uaprr)
                                        (cons
                                          g$x$16432$Uaprr
                                          (g$f$16431$Uaprr
                                            (car g$ls1$16433$Uaprr)
                                            (cdr g$ls1$16433$Uaprr))))))))
                          g$f$16431$Uaprr)
                        (car g$ls1$16429$Uaprr)
                        (cdr g$ls1$16429$Uaprr))))))
          ((case-lambda
             ((g$m2*$16426$Uaprr g$s2*$16427$Uaprr g$ae2*$16428$Uaprr)
              (if (if (not (null? g$m1*$16421$Uaprr))
                    (if (not (null? g$m2*$16426$Uaprr))
                      (begin
                        '#f
                        (g$anti-mark?$15698$Uaprr
                          (car g$m2*$16426$Uaprr)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$16425$Uaprr
                    g$m1*$16421$Uaprr
                    g$m2*$16426$Uaprr)
                  (g$cancel$16425$Uaprr
                    g$s1*$16422$Uaprr
                    g$s2*$16427$Uaprr)
                  (g$cancel$16425$Uaprr
                    g$ae1*$16423$Uaprr
                    g$ae2*$16428$Uaprr))
                (values
                  (append g$m1*$16421$Uaprr g$m2*$16426$Uaprr)
                  (append g$s1*$16422$Uaprr g$s2*$16427$Uaprr)
                  (append g$ae1*$16423$Uaprr g$ae2*$16428$Uaprr)))))
           (g$stx-mark*$15687$Uaprr g$e$16424$Uaprr)
           (g$stx-subst*$15688$Uaprr g$e$16424$Uaprr)
           (g$stx-ae*$15689$Uaprr g$e$16424$Uaprr))))))
   (g$mkstx$15700$Uaprr
     g$mkstx$19707$Uaprr
     (case-lambda
       ((g$e$16434$Uaprr
          g$m*$16435$Uaprr
          g$s*$16436$Uaprr
          g$ae*$16437$Uaprr)
        (if (if (g$stx?$15684$Uaprr g$e$16434$Uaprr)
              (begin
                '#f
                (not (g$top-marked?$15646$Uaprr g$m*$16435$Uaprr)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$15699$Uaprr
                 g$m*$16435$Uaprr
                 g$s*$16436$Uaprr
                 g$ae*$16437$Uaprr
                 g$e$16434$Uaprr)))
            (case-lambda
              ((g$m*$16441$Uaprr g$s*$16442$Uaprr g$ae*$16443$Uaprr)
               ((case-lambda
                  ((g$ae*$16444$Uaprr g$s*$16445$Uaprr g$m*$16446$Uaprr)
                   (g$make-stx$15685$Uaprr
                     (g$stx-expr$15686$Uaprr g$e$16434$Uaprr)
                     g$m*$16446$Uaprr
                     g$s*$16445$Uaprr
                     g$ae*$16444$Uaprr)))
                g$ae*$16443$Uaprr
                g$s*$16442$Uaprr
                g$m*$16441$Uaprr))))
          (g$make-stx$15685$Uaprr
            g$e$16434$Uaprr
            g$m*$16435$Uaprr
            g$s*$16436$Uaprr
            g$ae*$16437$Uaprr)))))
   (g$add-mark$15701$Uaprr
     g$add-mark$19708$Uaprr
     (case-lambda
       ((g$m$16447$Uaprr g$e$16448$Uaprr g$ae$16449$Uaprr)
        (g$mkstx$15700$Uaprr
          g$e$16448$Uaprr
          (list g$m$16447$Uaprr)
          '(shift)
          (list g$ae$16449$Uaprr)))))
   (g$add-subst$15702$Uaprr
     g$add-subst$19709$Uaprr
     (case-lambda
       ((g$subst$16450$Uaprr g$e$16451$Uaprr)
        (g$mkstx$15700$Uaprr
          g$e$16451$Uaprr
          '()
          (list g$subst$16450$Uaprr)
          '()))))
   (g$syntax-kind?$15703$Uaprr
     g$syntax-kind?$19710$Uaprr
     (case-lambda
       ((g$x$16452$Uaprr g$p?$16453$Uaprr)
        (if (g$stx?$15684$Uaprr g$x$16452$Uaprr)
          (g$syntax-kind?$15703$Uaprr
            (g$stx-expr$15686$Uaprr g$x$16452$Uaprr)
            g$p?$16453$Uaprr)
          (if (annotation? g$x$16452$Uaprr)
            (g$syntax-kind?$15703$Uaprr
              (annotation-expression g$x$16452$Uaprr)
              g$p?$16453$Uaprr)
            (g$p?$16453$Uaprr g$x$16452$Uaprr))))))
   (g$syntax-vector->list$15704$Uaprr
     g$syntax-vector->list$19711$Uaprr
     (case-lambda
       ((g$x$16454$Uaprr)
        (if (g$stx?$15684$Uaprr g$x$16454$Uaprr)
          ((case-lambda
             ((g$ls$16455$Uaprr
                g$m*$16456$Uaprr
                g$s*$16457$Uaprr
                g$ae*$16458$Uaprr)
              (g$map$11722$Uaprr
                (case-lambda
                  ((g$x$16459$Uaprr)
                   (g$mkstx$15700$Uaprr
                     g$x$16459$Uaprr
                     g$m*$16456$Uaprr
                     g$s*$16457$Uaprr
                     g$ae*$16458$Uaprr)))
                g$ls$16455$Uaprr)))
           (g$syntax-vector->list$15704$Uaprr
             (g$stx-expr$15686$Uaprr g$x$16454$Uaprr))
           (g$stx-mark*$15687$Uaprr g$x$16454$Uaprr)
           (g$stx-subst*$15688$Uaprr g$x$16454$Uaprr)
           (g$stx-ae*$15689$Uaprr g$x$16454$Uaprr))
          (if (annotation? g$x$16454$Uaprr)
            (g$syntax-vector->list$15704$Uaprr
              (annotation-expression g$x$16454$Uaprr))
            (if (g$vector?$12463$Uaprr g$x$16454$Uaprr)
              (vector->list g$x$16454$Uaprr)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$16454$Uaprr)))))))
   (g$syntax-pair?$15705$Uaprr
     g$syntax-pair?$19712$Uaprr
     (case-lambda
       ((g$x$16460$Uaprr)
        (g$syntax-kind?$15703$Uaprr g$x$16460$Uaprr pair?))))
   (g$syntax-vector?$15706$Uaprr
     g$syntax-vector?$19713$Uaprr
     (case-lambda
       ((g$x$16461$Uaprr)
        (g$syntax-kind?$15703$Uaprr
          g$x$16461$Uaprr
          g$vector?$12463$Uaprr))))
   (g$syntax-null?$15707$Uaprr
     g$syntax-null?$19714$Uaprr
     (case-lambda
       ((g$x$16462$Uaprr)
        (g$syntax-kind?$15703$Uaprr g$x$16462$Uaprr null?))))
   (g$syntax-list?$15708$Uaprr
     g$syntax-list?$19715$Uaprr
     (case-lambda
       ((g$x$16463$Uaprr)
        ((case-lambda
           ((g$t$16464$Uaprr)
            (if g$t$16464$Uaprr
              g$t$16464$Uaprr
              (begin
                '#f
                (if (g$syntax-pair?$15705$Uaprr g$x$16463$Uaprr)
                  (begin
                    '#f
                    (g$syntax-list?$15708$Uaprr
                      (g$syntax-cdr$15710$Uaprr g$x$16463$Uaprr)))
                  '#f)))))
         (g$syntax-null?$15707$Uaprr g$x$16463$Uaprr)))))
   (g$syntax-car$15709$Uaprr
     g$syntax-car$19716$Uaprr
     (case-lambda
       ((g$x$16465$Uaprr)
        (if (g$stx?$15684$Uaprr g$x$16465$Uaprr)
          (g$mkstx$15700$Uaprr
            (g$syntax-car$15709$Uaprr
              (g$stx-expr$15686$Uaprr g$x$16465$Uaprr))
            (g$stx-mark*$15687$Uaprr g$x$16465$Uaprr)
            (g$stx-subst*$15688$Uaprr g$x$16465$Uaprr)
            (g$stx-ae*$15689$Uaprr g$x$16465$Uaprr))
          (if (annotation? g$x$16465$Uaprr)
            (g$syntax-car$15709$Uaprr
              (annotation-expression g$x$16465$Uaprr))
            (if (pair? g$x$16465$Uaprr)
              (car g$x$16465$Uaprr)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$16465$Uaprr)))))))
   (g$syntax-cdr$15710$Uaprr
     g$syntax-cdr$19717$Uaprr
     (case-lambda
       ((g$x$16466$Uaprr)
        (if (g$stx?$15684$Uaprr g$x$16466$Uaprr)
          (g$mkstx$15700$Uaprr
            (g$syntax-cdr$15710$Uaprr
              (g$stx-expr$15686$Uaprr g$x$16466$Uaprr))
            (g$stx-mark*$15687$Uaprr g$x$16466$Uaprr)
            (g$stx-subst*$15688$Uaprr g$x$16466$Uaprr)
            (g$stx-ae*$15689$Uaprr g$x$16466$Uaprr))
          (if (annotation? g$x$16466$Uaprr)
            (g$syntax-cdr$15710$Uaprr
              (annotation-expression g$x$16466$Uaprr))
            (if (pair? g$x$16466$Uaprr)
              (cdr g$x$16466$Uaprr)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$16466$Uaprr)))))))
   (g$syntax->list$15711$Uaprr
     g$syntax->list$19718$Uaprr
     (case-lambda
       ((g$x$16467$Uaprr)
        (if (g$syntax-pair?$15705$Uaprr g$x$16467$Uaprr)
          (cons
            (g$syntax-car$15709$Uaprr g$x$16467$Uaprr)
            (g$syntax->list$15711$Uaprr
              (g$syntax-cdr$15710$Uaprr g$x$16467$Uaprr)))
          (if (g$syntax-null?$15707$Uaprr g$x$16467$Uaprr)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$16467$Uaprr))))))
   (g$id?$15712$Uaprr
     g$id?$19719$Uaprr
     (case-lambda
       ((g$x$16468$Uaprr)
        (if (g$stx?$15684$Uaprr g$x$16468$Uaprr)
          (begin
            '#f
            ((case-lambda
               ((g$expr$16469$Uaprr)
                (g$symbol?$12465$Uaprr
                  (if (annotation? g$expr$16469$Uaprr)
                    (annotation-stripped g$expr$16469$Uaprr)
                    g$expr$16469$Uaprr))))
             (g$stx-expr$15686$Uaprr g$x$16468$Uaprr)))
          '#f))))
   (g$id->sym$15713$Uaprr
     g$id->sym$19720$Uaprr
     (case-lambda
       ((g$x$16470$Uaprr)
        (begin
          (if (not (g$stx?$15684$Uaprr g$x$16470$Uaprr))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$16470$Uaprr)
            (void))
          ((case-lambda
             ((g$expr$16471$Uaprr)
              ((case-lambda
                 ((g$sym$16472$Uaprr)
                  (if (g$symbol?$12465$Uaprr g$sym$16472$Uaprr)
                    g$sym$16472$Uaprr
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$16470$Uaprr))))
               (if (annotation? g$expr$16471$Uaprr)
                 (annotation-stripped g$expr$16471$Uaprr)
                 g$expr$16471$Uaprr))))
           (g$stx-expr$15686$Uaprr g$x$16470$Uaprr))))))
   (g$same-marks?$15714$Uaprr
     g$same-marks?$19721$Uaprr
     (case-lambda
       ((g$x$16473$Uaprr g$y$16474$Uaprr)
        ((case-lambda
           ((g$t$16475$Uaprr)
            (if g$t$16475$Uaprr
              g$t$16475$Uaprr
              (begin
                '#f
                (if (pair? g$x$16473$Uaprr)
                  (if (pair? g$y$16474$Uaprr)
                    (if (eq? (car g$x$16473$Uaprr)
                             (car g$y$16474$Uaprr))
                      (begin
                        '#f
                        (g$same-marks?$15714$Uaprr
                          (cdr g$x$16473$Uaprr)
                          (cdr g$y$16474$Uaprr)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$16473$Uaprr)
           (begin '#f (null? g$y$16474$Uaprr))
           '#f)))))
   (g$bound-id=?$15715$Uaprr
     g$bound-id=?$19722$Uaprr
     (case-lambda
       ((g$x$16476$Uaprr g$y$16477$Uaprr)
        (if (eq? (g$id->sym$15713$Uaprr g$x$16476$Uaprr)
                 (g$id->sym$15713$Uaprr g$y$16477$Uaprr))
          (begin
            '#f
            (g$same-marks?$15714$Uaprr
              (g$stx-mark*$15687$Uaprr g$x$16476$Uaprr)
              (g$stx-mark*$15687$Uaprr g$y$16477$Uaprr)))
          '#f))))
   (g$free-id=?$15716$Uaprr
     g$free-id=?$19723$Uaprr
     (case-lambda
       ((g$i$16478$Uaprr g$j$16479$Uaprr)
        ((case-lambda
           ((g$t0$16480$Uaprr g$t1$16481$Uaprr)
            (if ((case-lambda
                   ((g$t$16482$Uaprr)
                    (if g$t$16482$Uaprr
                      g$t$16482$Uaprr
                      (begin '#f g$t1$16481$Uaprr))))
                 g$t0$16480$Uaprr)
              (eq? g$t0$16480$Uaprr g$t1$16481$Uaprr)
              (eq? (g$id->sym$15713$Uaprr g$i$16478$Uaprr)
                   (g$id->sym$15713$Uaprr g$j$16479$Uaprr)))))
         (g$id->real-label$15726$Uaprr g$i$16478$Uaprr)
         (g$id->real-label$15726$Uaprr g$j$16479$Uaprr)))))
   (g$valid-bound-ids?$15717$Uaprr
     g$valid-bound-ids?$19724$Uaprr
     (case-lambda
       ((g$id*$16483$Uaprr)
        (if (g$for-all$11720$Uaprr g$id?$15712$Uaprr g$id*$16483$Uaprr)
          (begin
            '#f
            (g$distinct-bound-ids?$15718$Uaprr g$id*$16483$Uaprr))
          '#f))))
   (g$distinct-bound-ids?$15718$Uaprr
     g$distinct-bound-ids?$19725$Uaprr
     (case-lambda
       ((g$id*$16484$Uaprr)
        ((case-lambda
           ((g$t$16485$Uaprr)
            (if g$t$16485$Uaprr
              g$t$16485$Uaprr
              (begin
                '#f
                (if (not (g$bound-id-member?$15719$Uaprr
                           (car g$id*$16484$Uaprr)
                           (cdr g$id*$16484$Uaprr)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$15718$Uaprr
                      (cdr g$id*$16484$Uaprr)))
                  '#f)))))
         (null? g$id*$16484$Uaprr)))))
   (g$bound-id-member?$15719$Uaprr
     g$bound-id-member?$19726$Uaprr
     (case-lambda
       ((g$id$16486$Uaprr g$id*$16487$Uaprr)
        (if (pair? g$id*$16487$Uaprr)
          (begin
            '#f
            ((case-lambda
               ((g$t$16488$Uaprr)
                (if g$t$16488$Uaprr
                  g$t$16488$Uaprr
                  (begin
                    '#f
                    (g$bound-id-member?$15719$Uaprr
                      g$id$16486$Uaprr
                      (cdr g$id*$16487$Uaprr))))))
             (g$bound-id=?$15715$Uaprr
               g$id$16486$Uaprr
               (car g$id*$16487$Uaprr))))
          '#f))))
   (g$self-evaluating?$15720$Uaprr
     g$self-evaluating?$19727$Uaprr
     (case-lambda
       ((g$x$16489$Uaprr)
        ((case-lambda
           ((g$t$16490$Uaprr)
            (if g$t$16490$Uaprr
              g$t$16490$Uaprr
              ((case-lambda
                 ((g$t$16491$Uaprr)
                  (if g$t$16491$Uaprr
                    g$t$16491$Uaprr
                    ((case-lambda
                       ((g$t$16492$Uaprr)
                        (if g$t$16492$Uaprr
                          g$t$16492$Uaprr
                          ((case-lambda
                             ((g$t$16493$Uaprr)
                              (if g$t$16493$Uaprr
                                g$t$16493$Uaprr
                                (begin
                                  '#f
                                  (g$bytevector?$12464$Uaprr
                                    g$x$16489$Uaprr)))))
                           (g$boolean?$12466$Uaprr g$x$16489$Uaprr)))))
                     (g$char?$12462$Uaprr g$x$16489$Uaprr)))))
               (string? g$x$16489$Uaprr)))))
         (number? g$x$16489$Uaprr)))))
   (g$strip-annotations$15721$Uaprr
     g$strip-annotations$19728$Uaprr
     (case-lambda
       ((g$x$16494$Uaprr)
        (if (pair? g$x$16494$Uaprr)
          (cons
            (g$strip-annotations$15721$Uaprr (car g$x$16494$Uaprr))
            (g$strip-annotations$15721$Uaprr (cdr g$x$16494$Uaprr)))
          (if (g$vector?$12463$Uaprr g$x$16494$Uaprr)
            (g$vector-map$12526$Uaprr
              g$strip-annotations$15721$Uaprr
              g$x$16494$Uaprr)
            (if (annotation? g$x$16494$Uaprr)
              (annotation-stripped g$x$16494$Uaprr)
              g$x$16494$Uaprr))))))
   (g$strip$15722$Uaprr
     g$strip$19729$Uaprr
     (case-lambda
       ((g$x$16495$Uaprr g$m*$16496$Uaprr)
        (if (g$top-marked?$15646$Uaprr g$m*$16496$Uaprr)
          (if ((case-lambda
                 ((g$t$16497$Uaprr)
                  (if g$t$16497$Uaprr
                    g$t$16497$Uaprr
                    ((case-lambda
                       ((g$t$16498$Uaprr)
                        (if g$t$16498$Uaprr
                          g$t$16498$Uaprr
                          (begin
                            '#f
                            (if (g$vector?$12463$Uaprr g$x$16495$Uaprr)
                              (if (> (vector-length g$x$16495$Uaprr) '0)
                                (begin
                                  '#f
                                  (annotation?
                                    (vector-ref g$x$16495$Uaprr '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$16495$Uaprr)
                       (begin '#f (annotation? (car g$x$16495$Uaprr)))
                       '#f)))))
               (annotation? g$x$16495$Uaprr))
            (g$strip-annotations$15721$Uaprr g$x$16495$Uaprr)
            g$x$16495$Uaprr)
          ((letrec ((g$f$16499$Uaprr
                      (case-lambda
                        ((g$x$16500$Uaprr)
                         (if (g$stx?$15684$Uaprr g$x$16500$Uaprr)
                           (g$strip$15722$Uaprr
                             (g$stx-expr$15686$Uaprr g$x$16500$Uaprr)
                             (g$stx-mark*$15687$Uaprr g$x$16500$Uaprr))
                           (if (annotation? g$x$16500$Uaprr)
                             (annotation-stripped g$x$16500$Uaprr)
                             (if (pair? g$x$16500$Uaprr)
                               ((case-lambda
                                  ((g$a$16501$Uaprr g$d$16502$Uaprr)
                                   (if (if (eq? g$a$16501$Uaprr
                                                (car g$x$16500$Uaprr))
                                         (begin
                                           '#f
                                           (eq? g$d$16502$Uaprr
                                                (cdr g$x$16500$Uaprr)))
                                         '#f)
                                     g$x$16500$Uaprr
                                     (cons
                                       g$a$16501$Uaprr
                                       g$d$16502$Uaprr))))
                                (g$f$16499$Uaprr (car g$x$16500$Uaprr))
                                (g$f$16499$Uaprr (cdr g$x$16500$Uaprr)))
                               (if (g$vector?$12463$Uaprr
                                     g$x$16500$Uaprr)
                                 ((case-lambda
                                    ((g$old$16503$Uaprr)
                                     ((case-lambda
                                        ((g$new$16504$Uaprr)
                                         (if (g$for-all$11720$Uaprr
                                               eq?
                                               g$old$16503$Uaprr
                                               g$new$16504$Uaprr)
                                           g$x$16500$Uaprr
                                           (g$list->vector$12460$Uaprr
                                             g$new$16504$Uaprr))))
                                      (g$map$11722$Uaprr
                                        g$f$16499$Uaprr
                                        g$old$16503$Uaprr))))
                                  (vector->list g$x$16500$Uaprr))
                                 g$x$16500$Uaprr))))))))
             g$f$16499$Uaprr)
           g$x$16495$Uaprr)))))
   (g$stx->datum$15723$Uaprr
     g$stx->datum$19730$Uaprr
     (case-lambda
       ((g$x$16505$Uaprr) (g$strip$15722$Uaprr g$x$16505$Uaprr '()))))
   (g$same-marks*?$15724$Uaprr
     g$same-marks*?$19731$Uaprr
     (case-lambda
       ((g$mark*$16506$Uaprr g$mark**$16507$Uaprr g$si$16508$Uaprr)
        (if (null? g$si$16508$Uaprr)
          '#f
          (if (g$same-marks?$15714$Uaprr
                g$mark*$16506$Uaprr
                (vector-ref
                  g$mark**$16507$Uaprr
                  (car g$si$16508$Uaprr)))
            (car g$si$16508$Uaprr)
            (g$same-marks*?$15724$Uaprr
              g$mark*$16506$Uaprr
              g$mark**$16507$Uaprr
              (cdr g$si$16508$Uaprr)))))))
   (g$id->label$15725$Uaprr
     g$id->label$19732$Uaprr
     (case-lambda
       ((g$id$16509$Uaprr)
        ((case-lambda
           ((g$t$16510$Uaprr)
            (if g$t$16510$Uaprr
              g$t$16510$Uaprr
              (begin
                '#f
                ((case-lambda
                   ((g$t$16511$Uaprr)
                    (if g$t$16511$Uaprr
                      ((case-lambda
                         ((g$env$16512$Uaprr)
                          ((case-lambda
                             ((g$rib$16513$Uaprr)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$15651$Uaprr
                                     g$id$16509$Uaprr
                                     g$rib$16513$Uaprr
                                     '#f)))
                                (case-lambda
                                  ((g$lab$16516$Uaprr
                                     g$_loc$16517$Uaprr)
                                   ((case-lambda
                                      ((g$_loc$16518$Uaprr
                                         g$lab$16519$Uaprr)
                                       (begin
                                         (g$extend-rib!$15673$Uaprr
                                           g$rib$16513$Uaprr
                                           g$id$16509$Uaprr
                                           g$lab$16519$Uaprr
                                           '#t)
                                         g$lab$16519$Uaprr)))
                                    g$_loc$16517$Uaprr
                                    g$lab$16516$Uaprr))))))
                           (g$interaction-env-rib$16295$Uaprr
                             g$env$16512$Uaprr))))
                       g$t$16511$Uaprr)
                      '#f)))
                 (g$top-level-context$16337$Uaprr))))))
         (g$id->real-label$15726$Uaprr g$id$16509$Uaprr)))))
   (g$id->real-label$15726$Uaprr
     g$id->real-label$19733$Uaprr
     (case-lambda
       ((g$id$16520$Uaprr)
        ((case-lambda
           ((g$sym$16521$Uaprr)
            ((letrec ((g$search$16522$Uaprr
                        (case-lambda
                          ((g$subst*$16523$Uaprr g$mark*$16524$Uaprr)
                           (if (null? g$subst*$16523$Uaprr)
                             '#f
                             (if (eq? (car g$subst*$16523$Uaprr) 'shift)
                               (g$search$16522$Uaprr
                                 (cdr g$subst*$16523$Uaprr)
                                 (cdr g$mark*$16524$Uaprr))
                               ((case-lambda
                                  ((g$rib$16525$Uaprr)
                                   ((case-lambda
                                      ((g$t$16526$Uaprr)
                                       (if g$t$16526$Uaprr
                                         ((case-lambda
                                            ((g$ht$16527$Uaprr)
                                             ((case-lambda
                                                ((g$si$16528$Uaprr)
                                                 ((case-lambda
                                                    ((g$i$16529$Uaprr)
                                                     (if g$i$16529$Uaprr
                                                       (vector-ref
                                                         (g$rib-label*$15662$Uaprr
                                                           g$rib$16525$Uaprr)
                                                         g$i$16529$Uaprr)
                                                       (g$search$16522$Uaprr
                                                         (cdr g$subst*$16523$Uaprr)
                                                         g$mark*$16524$Uaprr))))
                                                  (if g$si$16528$Uaprr
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$15724$Uaprr
                                                        g$mark*$16524$Uaprr
                                                        (g$rib-mark**$15661$Uaprr
                                                          g$rib$16525$Uaprr)
                                                        (g$reverse$12473$Uaprr
                                                          g$si$16528$Uaprr)))
                                                    '#f))))
                                              (g$hashtable-ref$12569$Uaprr
                                                g$ht$16527$Uaprr
                                                g$sym$16521$Uaprr
                                                '#f))))
                                          g$t$16526$Uaprr)
                                         ((case-lambda
                                            ((g$t$16530$Uaprr)
                                             (if g$t$16530$Uaprr
                                               g$t$16530$Uaprr
                                               (begin
                                                 '#f
                                                 ((letrec ((g$f$16531$Uaprr
                                                             (case-lambda
                                                               ((g$sym*$16532$Uaprr
                                                                  g$mark**$16533$Uaprr
                                                                  g$label*$16534$Uaprr)
                                                                (if (null?
                                                                      g$sym*$16532$Uaprr)
                                                                  (g$search$16522$Uaprr
                                                                    (cdr g$subst*$16523$Uaprr)
                                                                    g$mark*$16524$Uaprr)
                                                                  (if (if (eq? (car g$sym*$16532$Uaprr)
                                                                               g$sym$16521$Uaprr)
                                                                        (begin
                                                                          '#f
                                                                          (g$same-marks?$15714$Uaprr
                                                                            (car g$mark**$16533$Uaprr)
                                                                            g$mark*$16524$Uaprr))
                                                                        '#f)
                                                                    (car g$label*$16534$Uaprr)
                                                                    (g$f$16531$Uaprr
                                                                      (cdr g$sym*$16532$Uaprr)
                                                                      (cdr g$mark**$16533$Uaprr)
                                                                      (cdr g$label*$16534$Uaprr))))))))
                                                    g$f$16531$Uaprr)
                                                  (g$rib-sym*$15660$Uaprr
                                                    g$rib$16525$Uaprr)
                                                  (g$rib-mark**$15661$Uaprr
                                                    g$rib$16525$Uaprr)
                                                  (g$rib-label*$15662$Uaprr
                                                    g$rib$16525$Uaprr))))))
                                          (g$find-label$15672$Uaprr
                                            g$rib$16525$Uaprr
                                            g$sym$16521$Uaprr
                                            g$mark*$16524$Uaprr)))))
                                    (g$rib-sealed/freq$15663$Uaprr
                                      g$rib$16525$Uaprr))))
                                (car g$subst*$16523$Uaprr))))))))
               g$search$16522$Uaprr)
             (g$stx-subst*$15688$Uaprr g$id$16520$Uaprr)
             (g$stx-mark*$15687$Uaprr g$id$16520$Uaprr))))
         (g$id->sym$15713$Uaprr g$id$16520$Uaprr)))))
   (g$label->binding$15727$Uaprr
     g$label->binding$19734$Uaprr
     (case-lambda
       ((g$x$16535$Uaprr g$r$16536$Uaprr)
        (if (not g$x$16535$Uaprr)
          '(displaced-lexical)
          ((case-lambda
             ((g$t$16537$Uaprr)
              (if g$t$16537$Uaprr
                ((case-lambda
                   ((g$b$16538$Uaprr)
                    (if (if (pair? g$b$16538$Uaprr)
                          (begin
                            '#f
                            (eq? (car g$b$16538$Uaprr) '$core-rtd))
                          '#f)
                      (cons
                        '$rtd
                        (g$map$11722$Uaprr
                          g$bless$16173$Uaprr
                          (cdr g$b$16538$Uaprr)))
                      (if (if (pair? g$b$16538$Uaprr)
                            (begin
                              '#f
                              (eq? (car g$b$16538$Uaprr) 'global-rtd))
                            '#f)
                        ((case-lambda
                           ((g$lib$16539$Uaprr g$loc$16540$Uaprr)
                            (cons
                              '$rtd
                              (symbol-value g$loc$16540$Uaprr))))
                         (g$cadr$12475$Uaprr g$b$16538$Uaprr)
                         (g$cddr$12477$Uaprr g$b$16538$Uaprr))
                        g$b$16538$Uaprr))))
                 g$t$16537$Uaprr)
                ((case-lambda
                   ((g$t$16541$Uaprr)
                    (if g$t$16541$Uaprr
                      (cdr g$t$16541$Uaprr)
                      ((case-lambda
                         ((g$t$16542$Uaprr)
                          (if g$t$16542$Uaprr
                            ((case-lambda
                               ((g$env$16543$Uaprr)
                                ((case-lambda
                                   ((g$t$16544$Uaprr)
                                    (if g$t$16544$Uaprr
                                      ((case-lambda
                                         ((g$p$16545$Uaprr)
                                          (g$cons*$11724$Uaprr
                                            'lexical
                                            (cdr g$p$16545$Uaprr)
                                            '#f)))
                                       g$t$16544$Uaprr)
                                      '(displaced-lexical . #f))))
                                 (g$assq$11710$Uaprr
                                   g$x$16535$Uaprr
                                   (g$interaction-env-locs$16297$Uaprr
                                     g$env$16543$Uaprr)))))
                             g$t$16542$Uaprr)
                            '(displaced-lexical . #f))))
                       (g$top-level-context$16337$Uaprr)))))
                 (g$assq$11710$Uaprr
                   g$x$16535$Uaprr
                   g$r$16536$Uaprr)))))
           (g$imported-label->binding$15417$Uaprr g$x$16535$Uaprr))))))
   (g$make-binding$15728$Uaprr g$make-binding$19735$Uaprr cons)
   (g$binding-type$15729$Uaprr g$binding-type$19736$Uaprr car)
   (g$binding-value$15730$Uaprr g$binding-value$19737$Uaprr cdr)
   (g$raise-unbound-error$15731$Uaprr
     g$raise-unbound-error$19738$Uaprr
     (case-lambda
       ((g$id$16546$Uaprr)
        (g$syntax-violation*$16328$Uaprr
          '#f
          '"unbound identifier"
          g$id$16546$Uaprr
          (g$make-undefined-violation$13246$Uaprr)))))
   (g$syntax-type$15732$Uaprr
     g$syntax-type$19739$Uaprr
     (case-lambda
       ((g$e$16547$Uaprr g$r$16548$Uaprr)
        (if (g$id?$15712$Uaprr g$e$16547$Uaprr)
          ((case-lambda
             ((g$id$16549$Uaprr)
              ((case-lambda
                 ((g$label$16550$Uaprr)
                  ((case-lambda
                     ((g$b$16551$Uaprr)
                      ((case-lambda
                         ((g$type$16552$Uaprr)
                          (begin
                            (if (not g$label$16550$Uaprr)
                              (g$raise-unbound-error$15731$Uaprr
                                g$id$16549$Uaprr)
                              (void))
                            ((case-lambda
                               ((g$t$16553$Uaprr)
                                (if (g$memv$11715$Uaprr
                                      g$t$16553$Uaprr
                                      '(lexical
                                         core-prim
                                         macro
                                         macro!
                                         global
                                         local-macro
                                         local-macro!
                                         global-macro
                                         global-macro!
                                         displaced-lexical
                                         syntax
                                         import
                                         export
                                         $module
                                         $core-rtd
                                         library
                                         mutable
                                         ctv
                                         local-ctv
                                         global-ctv))
                                  (values
                                    g$type$16552$Uaprr
                                    (g$binding-value$15730$Uaprr
                                      g$b$16551$Uaprr)
                                    g$id$16549$Uaprr)
                                  (values 'other '#f '#f))))
                             g$type$16552$Uaprr))))
                       (g$binding-type$15729$Uaprr g$b$16551$Uaprr))))
                   (g$label->binding$15727$Uaprr
                     g$label$16550$Uaprr
                     g$r$16548$Uaprr))))
               (g$id->label$15725$Uaprr g$id$16549$Uaprr))))
           g$e$16547$Uaprr)
          (if (g$syntax-pair?$15705$Uaprr g$e$16547$Uaprr)
            ((case-lambda
               ((g$id$16554$Uaprr)
                (if (g$id?$15712$Uaprr g$id$16554$Uaprr)
                  ((case-lambda
                     ((g$label$16555$Uaprr)
                      ((case-lambda
                         ((g$b$16556$Uaprr)
                          ((case-lambda
                             ((g$type$16557$Uaprr)
                              (begin
                                (if (not g$label$16555$Uaprr)
                                  (g$raise-unbound-error$15731$Uaprr
                                    g$id$16554$Uaprr)
                                  (void))
                                ((case-lambda
                                   ((g$t$16558$Uaprr)
                                    (if (g$memv$11715$Uaprr
                                          g$t$16558$Uaprr
                                          '(define define-syntax
                                             core-macro
                                             begin
                                             macro
                                             macro!
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             module
                                             library
                                             set!
                                             let-syntax
                                             letrec-syntax
                                             import
                                             export
                                             $core-rtd
                                             ctv
                                             local-ctv
                                             global-ctv))
                                      (values
                                        g$type$16557$Uaprr
                                        (g$binding-value$15730$Uaprr
                                          g$b$16556$Uaprr)
                                        g$id$16554$Uaprr)
                                      (values 'call '#f '#f))))
                                 g$type$16557$Uaprr))))
                           (g$binding-type$15729$Uaprr
                             g$b$16556$Uaprr))))
                       (g$label->binding$15727$Uaprr
                         g$label$16555$Uaprr
                         g$r$16548$Uaprr))))
                   (g$id->label$15725$Uaprr g$id$16554$Uaprr))
                  (values 'call '#f '#f))))
             (g$syntax-car$15709$Uaprr g$e$16547$Uaprr))
            ((case-lambda
               ((g$d$16559$Uaprr)
                (if (g$self-evaluating?$15720$Uaprr g$d$16559$Uaprr)
                  (values 'constant g$d$16559$Uaprr '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$15723$Uaprr g$e$16547$Uaprr)))))))
   (g$sanitize-binding$15755$Uaprr
     g$sanitize-binding$19740$Uaprr
     (case-lambda
       ((g$x$16560$Uaprr g$src$16561$Uaprr)
        (if (g$procedure?$12467$Uaprr g$x$16560$Uaprr)
          (g$cons*$11724$Uaprr
            'local-macro
            g$x$16560$Uaprr
            g$src$16561$Uaprr)
          (if (if (pair? g$x$16560$Uaprr)
                (if (eq? (car g$x$16560$Uaprr) 'macro!)
                  (begin
                    '#f
                    (g$procedure?$12467$Uaprr (cdr g$x$16560$Uaprr)))
                  '#f)
                '#f)
            (g$cons*$11724$Uaprr
              'local-macro!
              (cdr g$x$16560$Uaprr)
              g$src$16561$Uaprr)
            (if (if (pair? g$x$16560$Uaprr)
                  (begin '#f (eq? (car g$x$16560$Uaprr) '$rtd))
                  '#f)
              g$x$16560$Uaprr
              (if (if (pair? g$x$16560$Uaprr)
                    (begin '#f (eq? (car g$x$16560$Uaprr) 'ctv))
                    '#f)
                (g$cons*$11724$Uaprr
                  'local-ctv
                  (cdr g$x$16560$Uaprr)
                  g$src$16561$Uaprr)
                (assertion-violation
                  'expand
                  '"invalid transformer"
                  g$x$16560$Uaprr))))))))
   (g$make-variable-transformer$15756$Uaprr
     g$make-variable-transformer$19741$Uaprr
     (case-lambda
       ((g$x$16562$Uaprr)
        (if (g$procedure?$12467$Uaprr g$x$16562$Uaprr)
          (cons 'macro! g$x$16562$Uaprr)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$16562$Uaprr)))))
   (g$make-compile-time-value$15757$Uaprr
     g$make-compile-time-value$19742$Uaprr
     (case-lambda ((g$x$16563$Uaprr) (cons 'ctv g$x$16563$Uaprr))))
   (g$variable-transformer?$15758$Uaprr
     g$variable-transformer?$19743$Uaprr
     (case-lambda
       ((g$x$16564$Uaprr)
        (if (pair? g$x$16564$Uaprr)
          (if (eq? (car g$x$16564$Uaprr) 'macro!)
            (begin '#f (g$procedure?$12467$Uaprr (cdr g$x$16564$Uaprr)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$15759$Uaprr
     g$variable-transformer-procedure$19744$Uaprr
     (case-lambda
       ((g$x$16565$Uaprr)
        (if (g$variable-transformer?$15758$Uaprr g$x$16565$Uaprr)
          (cdr g$x$16565$Uaprr)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$16565$Uaprr)))))
   (g$make-eval-transformer$15760$Uaprr
     g$make-eval-transformer$19745$Uaprr
     (case-lambda
       ((g$x$16566$Uaprr)
        (g$sanitize-binding$15755$Uaprr
          (eval-core (g$expanded->core$15151$Uaprr g$x$16566$Uaprr))
          g$x$16566$Uaprr))))
   (g$parse-define$16150$Uaprr
     g$parse-define$19746$Uaprr
     (case-lambda
       ((g$x$16567$Uaprr)
        ((case-lambda
           ((g$t$16568$Uaprr)
            ((case-lambda
               ((g$ls/false$16569$Uaprr)
                (if (if g$ls/false$16569$Uaprr
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$16570$Uaprr
                               g$fmls$16571$Uaprr
                               g$b$16572$Uaprr
                               g$b*$16573$Uaprr)
                             (g$id?$15712$Uaprr g$id$16570$Uaprr)))
                          g$ls/false$16569$Uaprr))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$16574$Uaprr
                         g$fmls$16575$Uaprr
                         g$b$16576$Uaprr
                         g$b*$16577$Uaprr)
                       (begin
                         (g$verify-formals$16230$Uaprr
                           g$fmls$16575$Uaprr
                           g$x$16567$Uaprr)
                         (values
                           g$id$16574$Uaprr
                           (cons
                             'defun
                             (cons
                               g$fmls$16575$Uaprr
                               (cons
                                 g$b$16576$Uaprr
                                 g$b*$16577$Uaprr)))))))
                    g$ls/false$16569$Uaprr)
                  ((case-lambda
                     ((g$t$16578$Uaprr)
                      ((case-lambda
                         ((g$ls/false$16579$Uaprr)
                          (if (if g$ls/false$16579$Uaprr
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$16580$Uaprr
                                         g$val$16581$Uaprr)
                                       (g$id?$15712$Uaprr
                                         g$id$16580$Uaprr)))
                                    g$ls/false$16579$Uaprr))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$16582$Uaprr g$val$16583$Uaprr)
                                 (values
                                   g$id$16582$Uaprr
                                   (cons 'expr g$val$16583$Uaprr))))
                              g$ls/false$16579$Uaprr)
                            ((case-lambda
                               ((g$t$16584$Uaprr)
                                ((case-lambda
                                   ((g$ls/false$16585$Uaprr)
                                    (if (if g$ls/false$16585$Uaprr
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$16586$Uaprr)
                                                 (g$id?$15712$Uaprr
                                                   g$id$16586$Uaprr)))
                                              g$ls/false$16585$Uaprr))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$16587$Uaprr)
                                           (values
                                             g$id$16587$Uaprr
                                             (cons
                                               'expr
                                               (g$bless$16173$Uaprr
                                                 '(void))))))
                                        g$ls/false$16585$Uaprr)
                                      (g$syntax-violation$16329$Uaprr
                                        '#f
                                        '"invalid syntax"
                                        g$t$16584$Uaprr))))
                                 (g$syntax-dispatch$16210$Uaprr
                                   g$t$16584$Uaprr
                                   '(_ any)))))
                             g$t$16578$Uaprr))))
                       (g$syntax-dispatch$16210$Uaprr
                         g$t$16578$Uaprr
                         '(_ any any)))))
                   g$t$16568$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$16568$Uaprr
               '(_ (any . any) any . each-any)))))
         g$x$16567$Uaprr))))
   (g$parse-define-syntax$16151$Uaprr
     g$parse-define-syntax$19747$Uaprr
     (case-lambda
       ((g$x$16588$Uaprr)
        ((case-lambda
           ((g$t$16589$Uaprr)
            ((case-lambda
               ((g$ls/false$16590$Uaprr)
                (if (if g$ls/false$16590$Uaprr
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$16591$Uaprr g$val$16592$Uaprr)
                             (g$id?$15712$Uaprr g$id$16591$Uaprr)))
                          g$ls/false$16590$Uaprr))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$16593$Uaprr g$val$16594$Uaprr)
                       (values g$id$16593$Uaprr g$val$16594$Uaprr)))
                    g$ls/false$16590$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$16589$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$16589$Uaprr
               '(_ any any)))))
         g$x$16588$Uaprr))))
   (g$scheme-stx-hashtable$16152$Uaprr
     g$scheme-stx-hashtable$19748$Uaprr
     (g$make-eq-hashtable$12566$Uaprr))
   (g$scheme-stx$16153$Uaprr
     g$scheme-stx$19749$Uaprr
     (case-lambda
       ((g$sym$16595$Uaprr)
        ((case-lambda
           ((g$t$16596$Uaprr)
            (if g$t$16596$Uaprr
              g$t$16596$Uaprr
              (begin
                '#f
                ((case-lambda
                   ((g$subst$16597$Uaprr)
                    ((case-lambda
                       ((g$stx$16598$Uaprr)
                        ((case-lambda
                           ((g$stx$16599$Uaprr)
                            (begin
                              (g$hashtable-set!$12570$Uaprr
                                g$scheme-stx-hashtable$16152$Uaprr
                                g$sym$16595$Uaprr
                                g$stx$16599$Uaprr)
                              g$stx$16599$Uaprr)))
                         ((case-lambda
                            ((g$t$16600$Uaprr)
                             (if g$t$16600$Uaprr
                               ((case-lambda
                                  ((g$x$16601$Uaprr)
                                   ((case-lambda
                                      ((g$name$16602$Uaprr
                                         g$label$16603$Uaprr)
                                       (g$add-subst$15702$Uaprr
                                         (g$make-rib$15659$Uaprr
                                           (list g$name$16602$Uaprr)
                                           (list
                                             g$top-mark*$15645$Uaprr)
                                           (list g$label$16603$Uaprr)
                                           '#f
                                           '#f)
                                         g$stx$16598$Uaprr)))
                                    (car g$x$16601$Uaprr)
                                    (cdr g$x$16601$Uaprr))))
                                g$t$16600$Uaprr)
                               g$stx$16598$Uaprr)))
                          (g$assq$11710$Uaprr
                            g$sym$16595$Uaprr
                            g$subst$16597$Uaprr)))))
                     (g$make-stx$15685$Uaprr
                       g$sym$16595$Uaprr
                       g$top-mark*$15645$Uaprr
                       '()
                       '()))))
                 (g$library-subst$15375$Uaprr
                   (g$find-library-by-name$15411$Uaprr
                     '(psyntax system $all))))))))
         (g$hashtable-ref$12569$Uaprr
           g$scheme-stx-hashtable$16152$Uaprr
           g$sym$16595$Uaprr
           '#f)))))
   (g$lexical-var$16154$Uaprr g$lexical-var$19750$Uaprr car)
   (g$lexical-mutable?$16155$Uaprr g$lexical-mutable?$19751$Uaprr cdr)
   (g$set-lexical-mutable!$16156$Uaprr
     g$set-lexical-mutable!$19752$Uaprr
     set-cdr!)
   (g$add-lexical$16157$Uaprr
     g$add-lexical$19753$Uaprr
     (case-lambda
       ((g$lab$16604$Uaprr g$lex$16605$Uaprr g$r$16606$Uaprr)
        (cons
          (g$cons*$11724$Uaprr
            g$lab$16604$Uaprr
            'lexical
            g$lex$16605$Uaprr
            '#f)
          g$r$16606$Uaprr))))
   (g$add-lexicals$16158$Uaprr
     g$add-lexicals$19754$Uaprr
     (case-lambda
       ((g$lab*$16607$Uaprr g$lex*$16608$Uaprr g$r$16609$Uaprr)
        (if (null? g$lab*$16607$Uaprr)
          g$r$16609$Uaprr
          (g$add-lexicals$16158$Uaprr
            (cdr g$lab*$16607$Uaprr)
            (cdr g$lex*$16608$Uaprr)
            (g$add-lexical$16157$Uaprr
              (car g$lab*$16607$Uaprr)
              (car g$lex*$16608$Uaprr)
              g$r$16609$Uaprr))))))
   (g$letrec-helper$16159$Uaprr
     g$letrec-helper$19755$Uaprr
     (case-lambda
       ((g$e$16610$Uaprr
          g$r$16611$Uaprr
          g$mr$16612$Uaprr
          g$build$16613$Uaprr)
        ((case-lambda
           ((g$t$16614$Uaprr)
            ((case-lambda
               ((g$ls/false$16615$Uaprr)
                (if g$ls/false$16615$Uaprr
                  (apply
                    (case-lambda
                      ((g$lhs*$16616$Uaprr
                         g$rhs*$16617$Uaprr
                         g$b$16618$Uaprr
                         g$b*$16619$Uaprr)
                       (if (not (g$valid-bound-ids?$15717$Uaprr
                                  g$lhs*$16616$Uaprr))
                         (g$invalid-fmls-error$16175$Uaprr
                           g$e$16610$Uaprr
                           g$lhs*$16616$Uaprr)
                         ((case-lambda
                            ((g$lex*$16620$Uaprr g$lab*$16621$Uaprr)
                             ((case-lambda
                                ((g$rib$16622$Uaprr g$r$16623$Uaprr)
                                 ((case-lambda
                                    ((g$body$16624$Uaprr
                                       g$rhs*$16625$Uaprr)
                                     (g$build$16613$Uaprr
                                       '#f
                                       g$lex*$16620$Uaprr
                                       g$rhs*$16625$Uaprr
                                       g$body$16624$Uaprr)))
                                  (g$chi-internal$16239$Uaprr
                                    (g$add-subst$15702$Uaprr
                                      g$rib$16622$Uaprr
                                      (cons
                                        g$b$16618$Uaprr
                                        g$b*$16619$Uaprr))
                                    g$r$16623$Uaprr
                                    g$mr$16612$Uaprr)
                                  (g$chi-expr*$16226$Uaprr
                                    (g$map$11722$Uaprr
                                      (case-lambda
                                        ((g$x$16626$Uaprr)
                                         (g$add-subst$15702$Uaprr
                                           g$rib$16622$Uaprr
                                           g$x$16626$Uaprr)))
                                      g$rhs*$16617$Uaprr)
                                    g$r$16623$Uaprr
                                    g$mr$16612$Uaprr))))
                              (g$make-full-rib$15678$Uaprr
                                g$lhs*$16616$Uaprr
                                g$lab*$16621$Uaprr)
                              (g$add-lexicals$16158$Uaprr
                                g$lab*$16621$Uaprr
                                g$lex*$16620$Uaprr
                                g$r$16611$Uaprr))))
                          (g$map$11722$Uaprr
                            g$gen-lexical$15647$Uaprr
                            g$lhs*$16616$Uaprr)
                          (g$map$11722$Uaprr
                            g$gen-label$15649$Uaprr
                            g$lhs*$16616$Uaprr)))))
                    g$ls/false$16615$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$16614$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$16614$Uaprr
               '(_ #(each (any any)) any . each-any)))))
         g$e$16610$Uaprr))))
   (g$letrec-transformer$16160$Uaprr
     g$letrec-transformer$19756$Uaprr
     (case-lambda
       ((g$e$16627$Uaprr g$r$16628$Uaprr g$mr$16629$Uaprr)
        (g$letrec-helper$16159$Uaprr
          g$e$16627$Uaprr
          g$r$16628$Uaprr
          g$mr$16629$Uaprr
          g$build-letrec$15639$Uaprr))))
   (g$letrec*-transformer$16161$Uaprr
     g$letrec*-transformer$19757$Uaprr
     (case-lambda
       ((g$e$16630$Uaprr g$r$16631$Uaprr g$mr$16632$Uaprr)
        (g$letrec-helper$16159$Uaprr
          g$e$16630$Uaprr
          g$r$16631$Uaprr
          g$mr$16632$Uaprr
          g$build-letrec*$15640$Uaprr))))
   (g$fluid-let-syntax-transformer$16162$Uaprr
     g$fluid-let-syntax-transformer$19758$Uaprr
     (case-lambda
       ((g$e$16633$Uaprr g$r$16634$Uaprr g$mr$16635$Uaprr)
        (letrec* ((g$lookup$16636$Uaprr
                    (case-lambda
                      ((g$x$16646$Uaprr)
                       ((case-lambda
                          ((g$t$16647$Uaprr)
                           (if g$t$16647$Uaprr
                             g$t$16647$Uaprr
                             (begin
                               '#f
                               (g$syntax-violation$16329$Uaprr
                                 '#f
                                 '"unbound identifier"
                                 g$e$16633$Uaprr
                                 g$x$16646$Uaprr)))))
                        (g$id->label$15725$Uaprr g$x$16646$Uaprr))))))
          ((case-lambda
             ((g$t$16637$Uaprr)
              ((case-lambda
                 ((g$ls/false$16638$Uaprr)
                  (if g$ls/false$16638$Uaprr
                    (apply
                      (case-lambda
                        ((g$lhs*$16639$Uaprr
                           g$rhs*$16640$Uaprr
                           g$b$16641$Uaprr
                           g$b*$16642$Uaprr)
                         (if (not (g$valid-bound-ids?$15717$Uaprr
                                    g$lhs*$16639$Uaprr))
                           (g$invalid-fmls-error$16175$Uaprr
                             g$e$16633$Uaprr
                             g$lhs*$16639$Uaprr)
                           ((case-lambda
                              ((g$lab*$16643$Uaprr g$rhs*$16644$Uaprr)
                               (g$chi-internal$16239$Uaprr
                                 (cons g$b$16641$Uaprr g$b*$16642$Uaprr)
                                 (append
                                   (g$map$11722$Uaprr
                                     cons
                                     g$lab*$16643$Uaprr
                                     g$rhs*$16644$Uaprr)
                                   g$r$16634$Uaprr)
                                 (append
                                   (g$map$11722$Uaprr
                                     cons
                                     g$lab*$16643$Uaprr
                                     g$rhs*$16644$Uaprr)
                                   g$mr$16635$Uaprr))))
                            (g$map$11722$Uaprr
                              g$lookup$16636$Uaprr
                              g$lhs*$16639$Uaprr)
                            (g$map$11722$Uaprr
                              (case-lambda
                                ((g$x$16645$Uaprr)
                                 (g$make-eval-transformer$15760$Uaprr
                                   (g$expand-transformer$16258$Uaprr
                                     g$x$16645$Uaprr
                                     g$mr$16635$Uaprr))))
                              g$rhs*$16640$Uaprr)))))
                      g$ls/false$16638$Uaprr)
                    (g$syntax-violation$16329$Uaprr
                      '#f
                      '"invalid syntax"
                      g$t$16637$Uaprr))))
               (g$syntax-dispatch$16210$Uaprr
                 g$t$16637$Uaprr
                 '(_ #(each (any any)) any . each-any)))))
           g$e$16633$Uaprr)))))
   (g$type-descriptor-transformer$16163$Uaprr
     g$type-descriptor-transformer$19759$Uaprr
     (case-lambda
       ((g$e$16648$Uaprr g$r$16649$Uaprr g$mr$16650$Uaprr)
        ((case-lambda
           ((g$t$16651$Uaprr)
            ((case-lambda
               ((g$ls/false$16652$Uaprr)
                (if (if g$ls/false$16652$Uaprr
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$16653$Uaprr)
                             (g$id?$15712$Uaprr g$id$16653$Uaprr)))
                          g$ls/false$16652$Uaprr))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$16654$Uaprr)
                       ((case-lambda
                          ((g$lab$16655$Uaprr)
                           ((case-lambda
                              ((g$b$16656$Uaprr)
                               ((case-lambda
                                  ((g$type$16657$Uaprr)
                                   (begin
                                     (if (not g$lab$16655$Uaprr)
                                       (g$raise-unbound-error$15731$Uaprr
                                         g$id$16654$Uaprr)
                                       (void))
                                     (if (not (if (eq? g$type$16657$Uaprr
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (not (list?
                                                         (g$binding-value$15730$Uaprr
                                                           g$b$16656$Uaprr))))
                                                '#f))
                                       (g$syntax-violation$16329$Uaprr
                                         '#f
                                         '"not a record type"
                                         g$e$16648$Uaprr)
                                       (void))
                                     (list
                                       'quote
                                       (g$binding-value$15730$Uaprr
                                         g$b$16656$Uaprr)))))
                                (g$binding-type$15729$Uaprr
                                  g$b$16656$Uaprr))))
                            (g$label->binding$15727$Uaprr
                              g$lab$16655$Uaprr
                              g$r$16649$Uaprr))))
                        (g$id->label$15725$Uaprr g$id$16654$Uaprr))))
                    g$ls/false$16652$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$16651$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr g$t$16651$Uaprr '(_ any)))))
         g$e$16648$Uaprr))))
   (g$record-type-descriptor-transformer$16164$Uaprr
     g$record-type-descriptor-transformer$19760$Uaprr
     (case-lambda
       ((g$e$16658$Uaprr g$r$16659$Uaprr g$mr$16660$Uaprr)
        ((case-lambda
           ((g$t$16661$Uaprr)
            ((case-lambda
               ((g$ls/false$16662$Uaprr)
                (if (if g$ls/false$16662$Uaprr
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$16663$Uaprr)
                             (g$id?$15712$Uaprr g$id$16663$Uaprr)))
                          g$ls/false$16662$Uaprr))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$16664$Uaprr)
                       ((case-lambda
                          ((g$lab$16665$Uaprr)
                           ((case-lambda
                              ((g$b$16666$Uaprr)
                               ((case-lambda
                                  ((g$type$16667$Uaprr)
                                   (begin
                                     (if (not g$lab$16665$Uaprr)
                                       (g$raise-unbound-error$15731$Uaprr
                                         g$id$16664$Uaprr)
                                       (void))
                                     (if (not (if (eq? g$type$16667$Uaprr
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$15730$Uaprr
                                                      g$b$16666$Uaprr)))
                                                '#f))
                                       (g$syntax-violation$16329$Uaprr
                                         '#f
                                         '"not a record type"
                                         g$e$16658$Uaprr)
                                       (void))
                                     (g$chi-expr$16228$Uaprr
                                       (car (g$binding-value$15730$Uaprr
                                              g$b$16666$Uaprr))
                                       g$r$16659$Uaprr
                                       g$mr$16660$Uaprr))))
                                (g$binding-type$15729$Uaprr
                                  g$b$16666$Uaprr))))
                            (g$label->binding$15727$Uaprr
                              g$lab$16665$Uaprr
                              g$r$16659$Uaprr))))
                        (g$id->label$15725$Uaprr g$id$16664$Uaprr))))
                    g$ls/false$16662$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$16661$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr g$t$16661$Uaprr '(_ any)))))
         g$e$16658$Uaprr))))
   (g$record-constructor-descriptor-transformer$16165$Uaprr
     g$record-constructor-descriptor-transformer$19761$Uaprr
     (case-lambda
       ((g$e$16668$Uaprr g$r$16669$Uaprr g$mr$16670$Uaprr)
        ((case-lambda
           ((g$t$16671$Uaprr)
            ((case-lambda
               ((g$ls/false$16672$Uaprr)
                (if (if g$ls/false$16672$Uaprr
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$16673$Uaprr)
                             (g$id?$15712$Uaprr g$id$16673$Uaprr)))
                          g$ls/false$16672$Uaprr))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$16674$Uaprr)
                       ((case-lambda
                          ((g$lab$16675$Uaprr)
                           ((case-lambda
                              ((g$b$16676$Uaprr)
                               ((case-lambda
                                  ((g$type$16677$Uaprr)
                                   (begin
                                     (if (not g$lab$16675$Uaprr)
                                       (g$raise-unbound-error$15731$Uaprr
                                         g$id$16674$Uaprr)
                                       (void))
                                     (if (not (if (eq? g$type$16677$Uaprr
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$15730$Uaprr
                                                      g$b$16676$Uaprr)))
                                                '#f))
                                       (g$syntax-violation$16329$Uaprr
                                         '#f
                                         '"invalid type"
                                         g$e$16668$Uaprr)
                                       (void))
                                     (g$chi-expr$16228$Uaprr
                                       (g$cadr$12475$Uaprr
                                         (g$binding-value$15730$Uaprr
                                           g$b$16676$Uaprr))
                                       g$r$16669$Uaprr
                                       g$mr$16670$Uaprr))))
                                (g$binding-type$15729$Uaprr
                                  g$b$16676$Uaprr))))
                            (g$label->binding$15727$Uaprr
                              g$lab$16675$Uaprr
                              g$r$16669$Uaprr))))
                        (g$id->label$15725$Uaprr g$id$16674$Uaprr))))
                    g$ls/false$16672$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$16671$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr g$t$16671$Uaprr '(_ any)))))
         g$e$16668$Uaprr))))
   (g$when-macro$16166$Uaprr
     g$when-macro$19762$Uaprr
     (case-lambda
       ((g$e$16678$Uaprr)
        ((case-lambda
           ((g$t$16679$Uaprr)
            ((case-lambda
               ((g$ls/false$16680$Uaprr)
                (if g$ls/false$16680$Uaprr
                  (apply
                    (case-lambda
                      ((g$test$16681$Uaprr
                         g$e$16682$Uaprr
                         g$e*$16683$Uaprr)
                       (g$bless$16173$Uaprr
                         (list
                           'if
                           g$test$16681$Uaprr
                           (cons
                             'begin
                             (cons
                               g$e$16682$Uaprr
                               g$e*$16683$Uaprr))))))
                    g$ls/false$16680$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$16679$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$16679$Uaprr
               '(_ any any . each-any)))))
         g$e$16678$Uaprr))))
   (g$unless-macro$16167$Uaprr
     g$unless-macro$19763$Uaprr
     (case-lambda
       ((g$e$16684$Uaprr)
        ((case-lambda
           ((g$t$16685$Uaprr)
            ((case-lambda
               ((g$ls/false$16686$Uaprr)
                (if g$ls/false$16686$Uaprr
                  (apply
                    (case-lambda
                      ((g$test$16687$Uaprr
                         g$e$16688$Uaprr
                         g$e*$16689$Uaprr)
                       (g$bless$16173$Uaprr
                         (list
                           'if
                           (list 'not g$test$16687$Uaprr)
                           (cons
                             'begin
                             (cons
                               g$e$16688$Uaprr
                               g$e*$16689$Uaprr))))))
                    g$ls/false$16686$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$16685$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$16685$Uaprr
               '(_ any any . each-any)))))
         g$e$16684$Uaprr))))
   (g$if-transformer$16168$Uaprr
     g$if-transformer$19764$Uaprr
     (case-lambda
       ((g$e$16690$Uaprr g$r$16691$Uaprr g$mr$16692$Uaprr)
        ((case-lambda
           ((g$t$16693$Uaprr)
            ((case-lambda
               ((g$ls/false$16694$Uaprr)
                (if g$ls/false$16694$Uaprr
                  (apply
                    (case-lambda
                      ((g$e0$16695$Uaprr
                         g$e1$16696$Uaprr
                         g$e2$16697$Uaprr)
                       (list
                         'if
                         (g$chi-expr$16228$Uaprr
                           g$e0$16695$Uaprr
                           g$r$16691$Uaprr
                           g$mr$16692$Uaprr)
                         (g$chi-expr$16228$Uaprr
                           g$e1$16696$Uaprr
                           g$r$16691$Uaprr
                           g$mr$16692$Uaprr)
                         (g$chi-expr$16228$Uaprr
                           g$e2$16697$Uaprr
                           g$r$16691$Uaprr
                           g$mr$16692$Uaprr))))
                    g$ls/false$16694$Uaprr)
                  ((case-lambda
                     ((g$t$16698$Uaprr)
                      ((case-lambda
                         ((g$ls/false$16699$Uaprr)
                          (if g$ls/false$16699$Uaprr
                            (apply
                              (case-lambda
                                ((g$e0$16700$Uaprr g$e1$16701$Uaprr)
                                 (list
                                   'if
                                   (g$chi-expr$16228$Uaprr
                                     g$e0$16700$Uaprr
                                     g$r$16691$Uaprr
                                     g$mr$16692$Uaprr)
                                   (g$chi-expr$16228$Uaprr
                                     g$e1$16701$Uaprr
                                     g$r$16691$Uaprr
                                     g$mr$16692$Uaprr)
                                   (g$build-void$15638$Uaprr))))
                              g$ls/false$16699$Uaprr)
                            (g$syntax-violation$16329$Uaprr
                              '#f
                              '"invalid syntax"
                              g$t$16698$Uaprr))))
                       (g$syntax-dispatch$16210$Uaprr
                         g$t$16698$Uaprr
                         '(_ any any)))))
                   g$t$16693$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$16693$Uaprr
               '(_ any any any)))))
         g$e$16690$Uaprr))))
   (g$case-macro$16169$Uaprr
     g$case-macro$19765$Uaprr
     (case-lambda
       ((g$e$16702$Uaprr)
        (letrec* ((g$build-last$16703$Uaprr
                    (case-lambda
                      ((g$cls$16723$Uaprr)
                       ((case-lambda
                          ((g$t$16724$Uaprr)
                           ((case-lambda
                              ((g$ls/false$16725$Uaprr)
                               (if g$ls/false$16725$Uaprr
                                 (apply
                                   (case-lambda
                                     ((g$e$16726$Uaprr g$e*$16727$Uaprr)
                                      (cons
                                        'begin
                                        (cons
                                          g$e$16726$Uaprr
                                          g$e*$16727$Uaprr))))
                                   g$ls/false$16725$Uaprr)
                                 ((case-lambda
                                    ((g$t$16728$Uaprr)
                                     ((case-lambda
                                        ((g$ls/false$16729$Uaprr)
                                         (if g$ls/false$16729$Uaprr
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$16704$Uaprr
                                                  g$cls$16723$Uaprr
                                                  '(if #f #f))))
                                             g$ls/false$16729$Uaprr)
                                           (g$syntax-violation$16329$Uaprr
                                             '#f
                                             '"invalid syntax"
                                             g$t$16728$Uaprr))))
                                      (g$syntax-dispatch$16210$Uaprr
                                        g$t$16728$Uaprr
                                        '_))))
                                  g$t$16724$Uaprr))))
                            (g$syntax-dispatch$16210$Uaprr
                              g$t$16724$Uaprr
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$16723$Uaprr))))
                  (g$build-one$16704$Uaprr
                    (case-lambda
                      ((g$cls$16716$Uaprr g$k$16717$Uaprr)
                       ((case-lambda
                          ((g$t$16718$Uaprr)
                           ((case-lambda
                              ((g$ls/false$16719$Uaprr)
                               (if g$ls/false$16719$Uaprr
                                 (apply
                                   (case-lambda
                                     ((g$d*$16720$Uaprr
                                        g$e$16721$Uaprr
                                        g$e*$16722$Uaprr)
                                      (if (= '1
                                             (length g$d*$16720$Uaprr))
                                        (list
                                          'if
                                          (list
                                            'eqv?
                                            't
                                            (list
                                              'quote
                                              (car g$d*$16720$Uaprr)))
                                          (cons
                                            'begin
                                            (cons
                                              g$e$16721$Uaprr
                                              g$e*$16722$Uaprr))
                                          g$k$16717$Uaprr)
                                        (list
                                          'if
                                          (list
                                            'memv
                                            't
                                            (list
                                              'quote
                                              g$d*$16720$Uaprr))
                                          (cons
                                            'begin
                                            (cons
                                              g$e$16721$Uaprr
                                              g$e*$16722$Uaprr))
                                          g$k$16717$Uaprr))))
                                   g$ls/false$16719$Uaprr)
                                 (g$syntax-violation$16329$Uaprr
                                   '#f
                                   '"invalid syntax"
                                   g$t$16718$Uaprr))))
                            (g$syntax-dispatch$16210$Uaprr
                              g$t$16718$Uaprr
                              '(each-any any . each-any)))))
                        g$cls$16716$Uaprr)))))
          ((case-lambda
             ((g$t$16705$Uaprr)
              ((case-lambda
                 ((g$ls/false$16706$Uaprr)
                  (if g$ls/false$16706$Uaprr
                    (apply
                      (case-lambda
                        ((g$expr$16707$Uaprr)
                         (g$bless$16173$Uaprr
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$16707$Uaprr))
                               '((if #f #f)))))))
                      g$ls/false$16706$Uaprr)
                    ((case-lambda
                       ((g$t$16708$Uaprr)
                        ((case-lambda
                           ((g$ls/false$16709$Uaprr)
                            (if g$ls/false$16709$Uaprr
                              (apply
                                (case-lambda
                                  ((g$expr$16710$Uaprr
                                     g$cls$16711$Uaprr
                                     g$cls*$16712$Uaprr)
                                   (g$bless$16173$Uaprr
                                     (list
                                       'let
                                       (list
                                         (list 't g$expr$16710$Uaprr))
                                       ((letrec ((g$f$16713$Uaprr
                                                   (case-lambda
                                                     ((g$cls$16714$Uaprr
                                                        g$cls*$16715$Uaprr)
                                                      (if (null?
                                                            g$cls*$16715$Uaprr)
                                                        (g$build-last$16703$Uaprr
                                                          g$cls$16714$Uaprr)
                                                        (g$build-one$16704$Uaprr
                                                          g$cls$16714$Uaprr
                                                          (g$f$16713$Uaprr
                                                            (car g$cls*$16715$Uaprr)
                                                            (cdr g$cls*$16715$Uaprr))))))))
                                          g$f$16713$Uaprr)
                                        g$cls$16711$Uaprr
                                        g$cls*$16712$Uaprr)))))
                                g$ls/false$16709$Uaprr)
                              (g$syntax-violation$16329$Uaprr
                                '#f
                                '"invalid syntax"
                                g$t$16708$Uaprr))))
                         (g$syntax-dispatch$16210$Uaprr
                           g$t$16708$Uaprr
                           '(_ any any . each-any)))))
                     g$t$16705$Uaprr))))
               (g$syntax-dispatch$16210$Uaprr
                 g$t$16705$Uaprr
                 '(_ any)))))
           g$e$16702$Uaprr)))))
   (g$quote-transformer$16170$Uaprr
     g$quote-transformer$19766$Uaprr
     (case-lambda
       ((g$e$16730$Uaprr g$r$16731$Uaprr g$mr$16732$Uaprr)
        ((case-lambda
           ((g$t$16733$Uaprr)
            ((case-lambda
               ((g$ls/false$16734$Uaprr)
                (if g$ls/false$16734$Uaprr
                  (apply
                    (case-lambda
                      ((g$datum$16735$Uaprr)
                       (list
                         'quote
                         (g$stx->datum$15723$Uaprr
                           g$datum$16735$Uaprr))))
                    g$ls/false$16734$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$16733$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr g$t$16733$Uaprr '(_ any)))))
         g$e$16730$Uaprr))))
   (g$case-lambda-transformer$16171$Uaprr
     g$case-lambda-transformer$19767$Uaprr
     (case-lambda
       ((g$e$16736$Uaprr g$r$16737$Uaprr g$mr$16738$Uaprr)
        ((case-lambda
           ((g$t$16739$Uaprr)
            ((case-lambda
               ((g$ls/false$16740$Uaprr)
                (if g$ls/false$16740$Uaprr
                  (apply
                    (case-lambda
                      ((g$fmls*$16741$Uaprr
                         g$b*$16742$Uaprr
                         g$b**$16743$Uaprr)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$16232$Uaprr
                              g$e$16736$Uaprr
                              g$fmls*$16741$Uaprr
                              (g$map$11722$Uaprr
                                cons
                                g$b*$16742$Uaprr
                                g$b**$16743$Uaprr)
                              g$r$16737$Uaprr
                              g$mr$16738$Uaprr)))
                         (case-lambda
                           ((g$fmls*$16746$Uaprr g$body*$16747$Uaprr)
                            ((case-lambda
                               ((g$body*$16748$Uaprr
                                  g$fmls*$16749$Uaprr)
                                (g$build-case-lambda$15635$Uaprr
                                  '#f
                                  g$fmls*$16749$Uaprr
                                  g$body*$16748$Uaprr)))
                             g$body*$16747$Uaprr
                             g$fmls*$16746$Uaprr))))))
                    g$ls/false$16740$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$16739$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$16739$Uaprr
               '(_ . #(each (any any . each-any)))))))
         g$e$16736$Uaprr))))
   (g$lambda-transformer$16172$Uaprr
     g$lambda-transformer$19768$Uaprr
     (case-lambda
       ((g$e$16750$Uaprr g$r$16751$Uaprr g$mr$16752$Uaprr)
        ((case-lambda
           ((g$t$16753$Uaprr)
            ((case-lambda
               ((g$ls/false$16754$Uaprr)
                (if g$ls/false$16754$Uaprr
                  (apply
                    (case-lambda
                      ((g$fmls$16755$Uaprr
                         g$b$16756$Uaprr
                         g$b*$16757$Uaprr)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$16231$Uaprr
                              g$e$16750$Uaprr
                              g$fmls$16755$Uaprr
                              (cons g$b$16756$Uaprr g$b*$16757$Uaprr)
                              g$r$16751$Uaprr
                              g$mr$16752$Uaprr)))
                         (case-lambda
                           ((g$fmls$16760$Uaprr g$body$16761$Uaprr)
                            ((case-lambda
                               ((g$body$16762$Uaprr g$fmls$16763$Uaprr)
                                (g$build-lambda$15634$Uaprr
                                  '#f
                                  g$fmls$16763$Uaprr
                                  g$body$16762$Uaprr)))
                             g$body$16761$Uaprr
                             g$fmls$16760$Uaprr))))))
                    g$ls/false$16754$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$16753$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$16753$Uaprr
               '(_ any any . each-any)))))
         g$e$16750$Uaprr))))
   (g$bless$16173$Uaprr
     g$bless$19769$Uaprr
     (case-lambda
       ((g$x$16764$Uaprr)
        (g$mkstx$15700$Uaprr
          ((letrec ((g$f$16765$Uaprr
                      (case-lambda
                        ((g$x$16766$Uaprr)
                         (if (g$stx?$15684$Uaprr g$x$16766$Uaprr)
                           g$x$16766$Uaprr
                           (if (pair? g$x$16766$Uaprr)
                             (cons
                               (g$f$16765$Uaprr (car g$x$16766$Uaprr))
                               (g$f$16765$Uaprr (cdr g$x$16766$Uaprr)))
                             (if (g$symbol?$12465$Uaprr g$x$16766$Uaprr)
                               (g$scheme-stx$16153$Uaprr
                                 g$x$16766$Uaprr)
                               (if (g$vector?$12463$Uaprr
                                     g$x$16766$Uaprr)
                                 (g$vector-map$12526$Uaprr
                                   g$f$16765$Uaprr
                                   g$x$16766$Uaprr)
                                 g$x$16766$Uaprr))))))))
             g$f$16765$Uaprr)
           g$x$16764$Uaprr)
          '()
          '()
          '()))))
   (g$with-syntax-macro$16174$Uaprr
     g$with-syntax-macro$19770$Uaprr
     (case-lambda
       ((g$e$16767$Uaprr)
        ((case-lambda
           ((g$t$16768$Uaprr)
            ((case-lambda
               ((g$ls/false$16769$Uaprr)
                (if g$ls/false$16769$Uaprr
                  (apply
                    (case-lambda
                      ((g$pat*$16770$Uaprr
                         g$expr*$16771$Uaprr
                         g$b$16772$Uaprr
                         g$b*$16773$Uaprr)
                       ((case-lambda
                          ((g$idn*$16774$Uaprr)
                           (begin
                             (g$verify-formals$16230$Uaprr
                               (g$map$11722$Uaprr
                                 car
                                 g$idn*$16774$Uaprr)
                               g$e$16767$Uaprr)
                             ((case-lambda
                                ((g$t*$16775$Uaprr)
                                 (g$bless$16173$Uaprr
                                   (list
                                     'let
                                     (g$map$11722$Uaprr
                                       list
                                       g$t*$16775$Uaprr
                                       g$expr*$16771$Uaprr)
                                     ((letrec ((g$f$16776$Uaprr
                                                 (case-lambda
                                                   ((g$pat*$16777$Uaprr
                                                      g$t*$16778$Uaprr)
                                                    (if (null?
                                                          g$pat*$16777$Uaprr)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$16772$Uaprr
                                                            g$b*$16773$Uaprr)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$16778$Uaprr)
                                                        '()
                                                        (list
                                                          (car g$pat*$16777$Uaprr)
                                                          (g$f$16776$Uaprr
                                                            (cdr g$pat*$16777$Uaprr)
                                                            (cdr g$t*$16778$Uaprr)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$16777$Uaprr))
                                                            (car g$t*$16778$Uaprr)))))))))
                                        g$f$16776$Uaprr)
                                      g$pat*$16770$Uaprr
                                      g$t*$16775$Uaprr)))))
                              (g$generate-temporaries$16319$Uaprr
                                g$expr*$16771$Uaprr)))))
                        ((letrec ((g$f$16779$Uaprr
                                    (case-lambda
                                      ((g$pat*$16780$Uaprr)
                                       (if (null? g$pat*$16780$Uaprr)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$16209$Uaprr
                                                (car g$pat*$16780$Uaprr)
                                                '())))
                                           (case-lambda
                                             ((g$pat$16783$Uaprr
                                                g$idn*$16784$Uaprr)
                                              ((case-lambda
                                                 ((g$idn*$16785$Uaprr
                                                    g$pat$16786$Uaprr)
                                                  (append
                                                    g$idn*$16785$Uaprr
                                                    (g$f$16779$Uaprr
                                                      (cdr g$pat*$16780$Uaprr)))))
                                               g$idn*$16784$Uaprr
                                               g$pat$16783$Uaprr)))))))))
                           g$f$16779$Uaprr)
                         g$pat*$16770$Uaprr))))
                    g$ls/false$16769$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$16768$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$16768$Uaprr
               '(_ #(each (any any)) any . each-any)))))
         g$e$16767$Uaprr))))
   (g$invalid-fmls-error$16175$Uaprr
     g$invalid-fmls-error$19771$Uaprr
     (case-lambda
       ((g$stx$16787$Uaprr g$fmls$16788$Uaprr)
        ((case-lambda
           ((g$t$16789$Uaprr)
            ((case-lambda
               ((g$ls/false$16790$Uaprr)
                (if g$ls/false$16790$Uaprr
                  (apply
                    (case-lambda
                      ((g$id*$16791$Uaprr g$last$16792$Uaprr)
                       ((letrec ((g$f$16793$Uaprr
                                   (case-lambda
                                     ((g$id*$16794$Uaprr)
                                      (if (null? g$id*$16794$Uaprr)
                                        (values)
                                        (if (not (g$id?$15712$Uaprr
                                                   (car g$id*$16794$Uaprr)))
                                          (g$syntax-violation$16329$Uaprr
                                            '#f
                                            '"not an identifier"
                                            g$stx$16787$Uaprr
                                            (car g$id*$16794$Uaprr))
                                          (begin
                                            (g$f$16793$Uaprr
                                              (cdr g$id*$16794$Uaprr))
                                            (if (g$bound-id-member?$15719$Uaprr
                                                  (car g$id*$16794$Uaprr)
                                                  (cdr g$id*$16794$Uaprr))
                                              (g$syntax-violation$16329$Uaprr
                                                '#f
                                                '"duplicate binding"
                                                g$stx$16787$Uaprr
                                                (car g$id*$16794$Uaprr))
                                              (void)))))))))
                          g$f$16793$Uaprr)
                        (if (g$id?$15712$Uaprr g$last$16792$Uaprr)
                          (cons g$last$16792$Uaprr g$id*$16791$Uaprr)
                          (if (g$syntax-null?$15707$Uaprr
                                g$last$16792$Uaprr)
                            g$id*$16791$Uaprr
                            (g$syntax-violation$16329$Uaprr
                              '#f
                              '"not an identifier"
                              g$stx$16787$Uaprr
                              g$last$16792$Uaprr))))))
                    g$ls/false$16790$Uaprr)
                  ((case-lambda
                     ((g$t$16795$Uaprr)
                      ((case-lambda
                         ((g$ls/false$16796$Uaprr)
                          (if g$ls/false$16796$Uaprr
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$16329$Uaprr
                                   '#f
                                   '"malformed binding form"
                                   g$stx$16787$Uaprr
                                   g$fmls$16788$Uaprr)))
                              g$ls/false$16796$Uaprr)
                            (g$syntax-violation$16329$Uaprr
                              '#f
                              '"invalid syntax"
                              g$t$16795$Uaprr))))
                       (g$syntax-dispatch$16210$Uaprr
                         g$t$16795$Uaprr
                         '_))))
                   g$t$16789$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$16789$Uaprr
               '#(each+ any () any)))))
         g$fmls$16788$Uaprr))))
   (g$let-macro$16176$Uaprr
     g$let-macro$19772$Uaprr
     (case-lambda
       ((g$stx$16797$Uaprr)
        ((case-lambda
           ((g$t$16798$Uaprr)
            ((case-lambda
               ((g$ls/false$16799$Uaprr)
                (if g$ls/false$16799$Uaprr
                  (apply
                    (case-lambda
                      ((g$lhs*$16800$Uaprr
                         g$rhs*$16801$Uaprr
                         g$b$16802$Uaprr
                         g$b*$16803$Uaprr)
                       (if (g$valid-bound-ids?$15717$Uaprr
                             g$lhs*$16800$Uaprr)
                         (g$bless$16173$Uaprr
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$16800$Uaprr
                                 (cons
                                   g$b$16802$Uaprr
                                   g$b*$16803$Uaprr)))
                             g$rhs*$16801$Uaprr))
                         (g$invalid-fmls-error$16175$Uaprr
                           g$stx$16797$Uaprr
                           g$lhs*$16800$Uaprr))))
                    g$ls/false$16799$Uaprr)
                  ((case-lambda
                     ((g$t$16804$Uaprr)
                      ((case-lambda
                         ((g$ls/false$16805$Uaprr)
                          (if (if g$ls/false$16805$Uaprr
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$16806$Uaprr
                                         g$lhs*$16807$Uaprr
                                         g$rhs*$16808$Uaprr
                                         g$b$16809$Uaprr
                                         g$b*$16810$Uaprr)
                                       (g$id?$15712$Uaprr
                                         g$f$16806$Uaprr)))
                                    g$ls/false$16805$Uaprr))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$16811$Uaprr
                                   g$lhs*$16812$Uaprr
                                   g$rhs*$16813$Uaprr
                                   g$b$16814$Uaprr
                                   g$b*$16815$Uaprr)
                                 (if (g$valid-bound-ids?$15717$Uaprr
                                       g$lhs*$16812$Uaprr)
                                   (g$bless$16173$Uaprr
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$16811$Uaprr
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$16812$Uaprr
                                                 (cons
                                                   g$b$16814$Uaprr
                                                   g$b*$16815$Uaprr)))))
                                         g$f$16811$Uaprr)
                                       g$rhs*$16813$Uaprr))
                                   (g$invalid-fmls-error$16175$Uaprr
                                     g$stx$16797$Uaprr
                                     g$lhs*$16812$Uaprr))))
                              g$ls/false$16805$Uaprr)
                            (g$syntax-violation$16329$Uaprr
                              '#f
                              '"invalid syntax"
                              g$t$16804$Uaprr))))
                       (g$syntax-dispatch$16210$Uaprr
                         g$t$16804$Uaprr
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$16798$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$16798$Uaprr
               '(_ #(each (any any)) any . each-any)))))
         g$stx$16797$Uaprr))))
   (g$let-values-macro$16177$Uaprr
     g$let-values-macro$19773$Uaprr
     (case-lambda
       ((g$stx$16816$Uaprr)
        (letrec* ((g$rename$16817$Uaprr
                    (case-lambda
                      ((g$x$16868$Uaprr
                         g$old*$16869$Uaprr
                         g$new*$16870$Uaprr)
                       (begin
                         (if (not (g$id?$15712$Uaprr g$x$16868$Uaprr))
                           (g$syntax-violation$16329$Uaprr
                             '#f
                             '"not an indentifier"
                             g$stx$16816$Uaprr
                             g$x$16868$Uaprr)
                           (void))
                         (if (g$bound-id-member?$15719$Uaprr
                               g$x$16868$Uaprr
                               g$old*$16869$Uaprr)
                           (g$syntax-violation$16329$Uaprr
                             '#f
                             '"duplicate binding"
                             g$stx$16816$Uaprr
                             g$x$16868$Uaprr)
                           (void))
                         ((case-lambda
                            ((g$y$16871$Uaprr)
                             (values
                               g$y$16871$Uaprr
                               (cons g$x$16868$Uaprr g$old*$16869$Uaprr)
                               (cons
                                 g$y$16871$Uaprr
                                 g$new*$16870$Uaprr))))
                          (gensym
                            (g$syntax->datum$16332$Uaprr
                              g$x$16868$Uaprr)))))))
                  (g$rename*$16818$Uaprr
                    (case-lambda
                      ((g$x*$16859$Uaprr
                         g$old*$16860$Uaprr
                         g$new*$16861$Uaprr)
                       (if (null? g$x*$16859$Uaprr)
                         (values
                           '()
                           g$old*$16860$Uaprr
                           g$new*$16861$Uaprr)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$16817$Uaprr
                                (car g$x*$16859$Uaprr)
                                g$old*$16860$Uaprr
                                g$new*$16861$Uaprr)))
                           (case-lambda
                             ((g$x$16862$Uaprr
                                g$old*$16863$Uaprr
                                g$new*$16864$Uaprr)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$16818$Uaprr
                                     (cdr g$x*$16859$Uaprr)
                                     g$old*$16863$Uaprr
                                     g$new*$16864$Uaprr)))
                                (case-lambda
                                  ((g$x*$16865$Uaprr
                                     g$old*$16866$Uaprr
                                     g$new*$16867$Uaprr)
                                   (values
                                     (cons
                                       g$x$16862$Uaprr
                                       g$x*$16865$Uaprr)
                                     g$old*$16866$Uaprr
                                     g$new*$16867$Uaprr))))))))))))
          ((case-lambda
             ((g$t$16819$Uaprr)
              ((case-lambda
                 ((g$ls/false$16820$Uaprr)
                  (if g$ls/false$16820$Uaprr
                    (apply
                      (case-lambda
                        ((g$b$16821$Uaprr g$b*$16822$Uaprr)
                         (g$cons*$11724$Uaprr
                           (g$bless$16173$Uaprr 'let)
                           '()
                           g$b$16821$Uaprr
                           g$b*$16822$Uaprr)))
                      g$ls/false$16820$Uaprr)
                    ((case-lambda
                       ((g$t$16823$Uaprr)
                        ((case-lambda
                           ((g$ls/false$16824$Uaprr)
                            (if g$ls/false$16824$Uaprr
                              (apply
                                (case-lambda
                                  ((g$lhs*$16825$Uaprr
                                     g$rhs*$16826$Uaprr
                                     g$b$16827$Uaprr
                                     g$b*$16828$Uaprr)
                                   (g$bless$16173$Uaprr
                                     ((letrec ((g$f$16829$Uaprr
                                                 (case-lambda
                                                   ((g$lhs*$16830$Uaprr
                                                      g$rhs*$16831$Uaprr
                                                      g$old*$16832$Uaprr
                                                      g$new*$16833$Uaprr)
                                                    (if (null?
                                                          g$lhs*$16830$Uaprr)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (g$map$11722$Uaprr
                                                            list
                                                            g$old*$16832$Uaprr
                                                            g$new*$16833$Uaprr)
                                                          (cons
                                                            g$b$16827$Uaprr
                                                            g$b*$16828$Uaprr)))
                                                      ((case-lambda
                                                         ((g$t$16834$Uaprr)
                                                          ((case-lambda
                                                             ((g$ls/false$16835$Uaprr)
                                                              (if g$ls/false$16835$Uaprr
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$16836$Uaprr)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$16818$Uaprr
                                                                            g$x*$16836$Uaprr
                                                                            g$old*$16832$Uaprr
                                                                            g$new*$16833$Uaprr)))
                                                                       (case-lambda
                                                                         ((g$y*$16840$Uaprr
                                                                            g$old*$16841$Uaprr
                                                                            g$new*$16842$Uaprr)
                                                                          ((case-lambda
                                                                             ((g$new*$16843$Uaprr
                                                                                g$old*$16844$Uaprr
                                                                                g$y*$16845$Uaprr)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$16831$Uaprr))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$16845$Uaprr
                                                                                  (g$f$16829$Uaprr
                                                                                    (cdr g$lhs*$16830$Uaprr)
                                                                                    (cdr g$rhs*$16831$Uaprr)
                                                                                    g$old*$16844$Uaprr
                                                                                    g$new*$16843$Uaprr)))))
                                                                           g$new*$16842$Uaprr
                                                                           g$old*$16841$Uaprr
                                                                           g$y*$16840$Uaprr))))))
                                                                  g$ls/false$16835$Uaprr)
                                                                ((case-lambda
                                                                   ((g$t$16846$Uaprr)
                                                                    ((case-lambda
                                                                       ((g$ls/false$16847$Uaprr)
                                                                        (if g$ls/false$16847$Uaprr
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$16848$Uaprr
                                                                                 g$x$16849$Uaprr)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$16817$Uaprr
                                                                                      g$x$16849$Uaprr
                                                                                      g$old*$16832$Uaprr
                                                                                      g$new*$16833$Uaprr)))
                                                                                 (case-lambda
                                                                                   ((g$y$16850$Uaprr
                                                                                      g$old*$16851$Uaprr
                                                                                      g$new*$16852$Uaprr)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$16818$Uaprr
                                                                                           g$x*$16848$Uaprr
                                                                                           g$old*$16851$Uaprr
                                                                                           g$new*$16852$Uaprr)))
                                                                                      (case-lambda
                                                                                        ((g$y*$16853$Uaprr
                                                                                           g$old*$16854$Uaprr
                                                                                           g$new*$16855$Uaprr)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$16831$Uaprr))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$16853$Uaprr
                                                                                               g$y$16850$Uaprr)
                                                                                             (g$f$16829$Uaprr
                                                                                               (cdr g$lhs*$16830$Uaprr)
                                                                                               (cdr g$rhs*$16831$Uaprr)
                                                                                               g$old*$16854$Uaprr
                                                                                               g$new*$16855$Uaprr)))))))))))
                                                                            g$ls/false$16847$Uaprr)
                                                                          ((case-lambda
                                                                             ((g$t$16856$Uaprr)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$16857$Uaprr)
                                                                                  (if g$ls/false$16857$Uaprr
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$16858$Uaprr)
                                                                                         (g$syntax-violation$16329$Uaprr
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$16816$Uaprr
                                                                                           g$others$16858$Uaprr)))
                                                                                      g$ls/false$16857$Uaprr)
                                                                                    (g$syntax-violation$16329$Uaprr
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$16856$Uaprr))))
                                                                               (g$syntax-dispatch$16210$Uaprr
                                                                                 g$t$16856$Uaprr
                                                                                 'any))))
                                                                           g$t$16846$Uaprr))))
                                                                     (g$syntax-dispatch$16210$Uaprr
                                                                       g$t$16846$Uaprr
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$16834$Uaprr))))
                                                           (g$syntax-dispatch$16210$Uaprr
                                                             g$t$16834$Uaprr
                                                             'each-any))))
                                                       (car g$lhs*$16830$Uaprr)))))))
                                        g$f$16829$Uaprr)
                                      g$lhs*$16825$Uaprr
                                      g$rhs*$16826$Uaprr
                                      '()
                                      '()))))
                                g$ls/false$16824$Uaprr)
                              (g$syntax-violation$16329$Uaprr
                                '#f
                                '"invalid syntax"
                                g$t$16823$Uaprr))))
                         (g$syntax-dispatch$16210$Uaprr
                           g$t$16823$Uaprr
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$16819$Uaprr))))
               (g$syntax-dispatch$16210$Uaprr
                 g$t$16819$Uaprr
                 '(_ () any . each-any)))))
           g$stx$16816$Uaprr)))))
   (g$let*-values-macro$16178$Uaprr
     g$let*-values-macro$19774$Uaprr
     (case-lambda
       ((g$stx$16872$Uaprr)
        (letrec* ((g$check$16873$Uaprr
                    (case-lambda
                      ((g$x*$16897$Uaprr)
                       (if (not (null? g$x*$16897$Uaprr))
                         ((case-lambda
                            ((g$x$16898$Uaprr)
                             (begin
                               (if (not (g$id?$15712$Uaprr
                                          g$x$16898$Uaprr))
                                 (g$syntax-violation$16329$Uaprr
                                   '#f
                                   '"not an identifier"
                                   g$stx$16872$Uaprr
                                   g$x$16898$Uaprr)
                                 (void))
                               (g$check$16873$Uaprr
                                 (cdr g$x*$16897$Uaprr))
                               (if (g$bound-id-member?$15719$Uaprr
                                     g$x$16898$Uaprr
                                     (cdr g$x*$16897$Uaprr))
                                 (g$syntax-violation$16329$Uaprr
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$16872$Uaprr
                                   g$x$16898$Uaprr)
                                 (void)))))
                          (car g$x*$16897$Uaprr))
                         (void))))))
          ((case-lambda
             ((g$t$16874$Uaprr)
              ((case-lambda
                 ((g$ls/false$16875$Uaprr)
                  (if g$ls/false$16875$Uaprr
                    (apply
                      (case-lambda
                        ((g$b$16876$Uaprr g$b*$16877$Uaprr)
                         (g$cons*$11724$Uaprr
                           (g$bless$16173$Uaprr 'let)
                           '()
                           g$b$16876$Uaprr
                           g$b*$16877$Uaprr)))
                      g$ls/false$16875$Uaprr)
                    ((case-lambda
                       ((g$t$16878$Uaprr)
                        ((case-lambda
                           ((g$ls/false$16879$Uaprr)
                            (if g$ls/false$16879$Uaprr
                              (apply
                                (case-lambda
                                  ((g$lhs*$16880$Uaprr
                                     g$rhs*$16881$Uaprr
                                     g$b$16882$Uaprr
                                     g$b*$16883$Uaprr)
                                   (g$bless$16173$Uaprr
                                     ((letrec ((g$f$16884$Uaprr
                                                 (case-lambda
                                                   ((g$lhs*$16885$Uaprr
                                                      g$rhs*$16886$Uaprr)
                                                    (if (null?
                                                          g$lhs*$16885$Uaprr)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$16882$Uaprr
                                                          g$b*$16883$Uaprr))
                                                      ((case-lambda
                                                         ((g$t$16887$Uaprr)
                                                          ((case-lambda
                                                             ((g$ls/false$16888$Uaprr)
                                                              (if g$ls/false$16888$Uaprr
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$16889$Uaprr)
                                                                     (begin
                                                                       (g$check$16873$Uaprr
                                                                         g$x*$16889$Uaprr)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$16886$Uaprr))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$16889$Uaprr
                                                                           (g$f$16884$Uaprr
                                                                             (cdr g$lhs*$16885$Uaprr)
                                                                             (cdr g$rhs*$16886$Uaprr)))))))
                                                                  g$ls/false$16888$Uaprr)
                                                                ((case-lambda
                                                                   ((g$t$16890$Uaprr)
                                                                    ((case-lambda
                                                                       ((g$ls/false$16891$Uaprr)
                                                                        (if g$ls/false$16891$Uaprr
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$16892$Uaprr
                                                                                 g$x$16893$Uaprr)
                                                                               (begin
                                                                                 (g$check$16873$Uaprr
                                                                                   (cons
                                                                                     g$x$16893$Uaprr
                                                                                     g$x*$16892$Uaprr))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$16886$Uaprr))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$16892$Uaprr
                                                                                       g$x$16893$Uaprr)
                                                                                     (g$f$16884$Uaprr
                                                                                       (cdr g$lhs*$16885$Uaprr)
                                                                                       (cdr g$rhs*$16886$Uaprr)))))))
                                                                            g$ls/false$16891$Uaprr)
                                                                          ((case-lambda
                                                                             ((g$t$16894$Uaprr)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$16895$Uaprr)
                                                                                  (if g$ls/false$16895$Uaprr
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$16896$Uaprr)
                                                                                         (g$syntax-violation$16329$Uaprr
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$16872$Uaprr
                                                                                           g$others$16896$Uaprr)))
                                                                                      g$ls/false$16895$Uaprr)
                                                                                    (g$syntax-violation$16329$Uaprr
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$16894$Uaprr))))
                                                                               (g$syntax-dispatch$16210$Uaprr
                                                                                 g$t$16894$Uaprr
                                                                                 'any))))
                                                                           g$t$16890$Uaprr))))
                                                                     (g$syntax-dispatch$16210$Uaprr
                                                                       g$t$16890$Uaprr
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$16887$Uaprr))))
                                                           (g$syntax-dispatch$16210$Uaprr
                                                             g$t$16887$Uaprr
                                                             'each-any))))
                                                       (car g$lhs*$16885$Uaprr)))))))
                                        g$f$16884$Uaprr)
                                      g$lhs*$16880$Uaprr
                                      g$rhs*$16881$Uaprr))))
                                g$ls/false$16879$Uaprr)
                              (g$syntax-violation$16329$Uaprr
                                '#f
                                '"invalid syntax"
                                g$t$16878$Uaprr))))
                         (g$syntax-dispatch$16210$Uaprr
                           g$t$16878$Uaprr
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$16874$Uaprr))))
               (g$syntax-dispatch$16210$Uaprr
                 g$t$16874$Uaprr
                 '(_ () any . each-any)))))
           g$stx$16872$Uaprr)))))
   (g$trace-lambda-macro$16179$Uaprr
     g$trace-lambda-macro$19775$Uaprr
     (case-lambda
       ((g$stx$16899$Uaprr)
        ((case-lambda
           ((g$t$16900$Uaprr)
            ((case-lambda
               ((g$ls/false$16901$Uaprr)
                (if g$ls/false$16901$Uaprr
                  (apply
                    (case-lambda
                      ((g$who$16902$Uaprr
                         g$fmls$16903$Uaprr
                         g$b$16904$Uaprr
                         g$b*$16905$Uaprr)
                       (if (g$valid-bound-ids?$15717$Uaprr
                             g$fmls$16903$Uaprr)
                         (g$bless$16173$Uaprr
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$16902$Uaprr)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$16903$Uaprr
                                 (cons
                                   g$b$16904$Uaprr
                                   g$b*$16905$Uaprr)))))
                         (g$invalid-fmls-error$16175$Uaprr
                           g$stx$16899$Uaprr
                           g$fmls$16903$Uaprr))))
                    g$ls/false$16901$Uaprr)
                  ((case-lambda
                     ((g$t$16906$Uaprr)
                      ((case-lambda
                         ((g$ls/false$16907$Uaprr)
                          (if g$ls/false$16907$Uaprr
                            (apply
                              (case-lambda
                                ((g$who$16908$Uaprr
                                   g$fmls$16909$Uaprr
                                   g$last$16910$Uaprr
                                   g$b$16911$Uaprr
                                   g$b*$16912$Uaprr)
                                 (if (g$valid-bound-ids?$15717$Uaprr
                                       (cons
                                         g$last$16910$Uaprr
                                         g$fmls$16909$Uaprr))
                                   (g$bless$16173$Uaprr
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$16908$Uaprr)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$16909$Uaprr
                                             g$last$16910$Uaprr)
                                           (cons
                                             g$b$16911$Uaprr
                                             g$b*$16912$Uaprr)))))
                                   (g$invalid-fmls-error$16175$Uaprr
                                     g$stx$16899$Uaprr
                                     (append
                                       g$fmls$16909$Uaprr
                                       g$last$16910$Uaprr)))))
                              g$ls/false$16907$Uaprr)
                            (g$syntax-violation$16329$Uaprr
                              '#f
                              '"invalid syntax"
                              g$t$16906$Uaprr))))
                       (g$syntax-dispatch$16210$Uaprr
                         g$t$16906$Uaprr
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$16900$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$16900$Uaprr
               '(_ any each-any any . each-any)))))
         g$stx$16899$Uaprr))))
   (g$trace-define-macro$16180$Uaprr
     g$trace-define-macro$19776$Uaprr
     (case-lambda
       ((g$stx$16913$Uaprr)
        ((case-lambda
           ((g$t$16914$Uaprr)
            ((case-lambda
               ((g$ls/false$16915$Uaprr)
                (if g$ls/false$16915$Uaprr
                  (apply
                    (case-lambda
                      ((g$who$16916$Uaprr
                         g$fmls$16917$Uaprr
                         g$b$16918$Uaprr
                         g$b*$16919$Uaprr)
                       (if (g$valid-bound-ids?$15717$Uaprr
                             g$fmls$16917$Uaprr)
                         (g$bless$16173$Uaprr
                           (list
                             'define
                             g$who$16916$Uaprr
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$16916$Uaprr)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$16917$Uaprr
                                   (cons
                                     g$b$16918$Uaprr
                                     g$b*$16919$Uaprr))))))
                         (g$invalid-fmls-error$16175$Uaprr
                           g$stx$16913$Uaprr
                           g$fmls$16917$Uaprr))))
                    g$ls/false$16915$Uaprr)
                  ((case-lambda
                     ((g$t$16920$Uaprr)
                      ((case-lambda
                         ((g$ls/false$16921$Uaprr)
                          (if g$ls/false$16921$Uaprr
                            (apply
                              (case-lambda
                                ((g$who$16922$Uaprr
                                   g$fmls$16923$Uaprr
                                   g$last$16924$Uaprr
                                   g$b$16925$Uaprr
                                   g$b*$16926$Uaprr)
                                 (if (g$valid-bound-ids?$15717$Uaprr
                                       (cons
                                         g$last$16924$Uaprr
                                         g$fmls$16923$Uaprr))
                                   (g$bless$16173$Uaprr
                                     (list
                                       'define
                                       g$who$16922$Uaprr
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$16922$Uaprr)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$16923$Uaprr
                                               g$last$16924$Uaprr)
                                             (cons
                                               g$b$16925$Uaprr
                                               g$b*$16926$Uaprr))))))
                                   (g$invalid-fmls-error$16175$Uaprr
                                     g$stx$16913$Uaprr
                                     (append
                                       g$fmls$16923$Uaprr
                                       g$last$16924$Uaprr)))))
                              g$ls/false$16921$Uaprr)
                            ((case-lambda
                               ((g$t$16927$Uaprr)
                                ((case-lambda
                                   ((g$ls/false$16928$Uaprr)
                                    (if g$ls/false$16928$Uaprr
                                      (apply
                                        (case-lambda
                                          ((g$who$16929$Uaprr
                                             g$expr$16930$Uaprr)
                                           (if (g$id?$15712$Uaprr
                                                 g$who$16929$Uaprr)
                                             (g$bless$16173$Uaprr
                                               (list
                                                 'define
                                                 g$who$16929$Uaprr
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$16930$Uaprr))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$16929$Uaprr)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$16329$Uaprr
                                               '#f
                                               '"invalid name"
                                               g$stx$16913$Uaprr))))
                                        g$ls/false$16928$Uaprr)
                                      (g$syntax-violation$16329$Uaprr
                                        '#f
                                        '"invalid syntax"
                                        g$t$16927$Uaprr))))
                                 (g$syntax-dispatch$16210$Uaprr
                                   g$t$16927$Uaprr
                                   '(_ any any)))))
                             g$t$16920$Uaprr))))
                       (g$syntax-dispatch$16210$Uaprr
                         g$t$16920$Uaprr
                         '(_ (any . #(each+ any () any))
                             any
                             .
                             each-any)))))
                   g$t$16914$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$16914$Uaprr
               '(_ (any . each-any) any . each-any)))))
         g$stx$16913$Uaprr))))
   (g$trace-define-syntax-macro$16181$Uaprr
     g$trace-define-syntax-macro$19777$Uaprr
     (case-lambda
       ((g$stx$16931$Uaprr)
        ((case-lambda
           ((g$t$16932$Uaprr)
            ((case-lambda
               ((g$ls/false$16933$Uaprr)
                (if g$ls/false$16933$Uaprr
                  (apply
                    (case-lambda
                      ((g$who$16934$Uaprr g$expr$16935$Uaprr)
                       (if (g$id?$15712$Uaprr g$who$16934$Uaprr)
                         (g$bless$16173$Uaprr
                           (list
                             'define-syntax
                             g$who$16934$Uaprr
                             (list
                               'make-traced-macro
                               (list 'quote g$who$16934$Uaprr)
                               g$expr$16935$Uaprr)))
                         (g$syntax-violation$16329$Uaprr
                           '#f
                           '"invalid name"
                           g$stx$16931$Uaprr))))
                    g$ls/false$16933$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$16932$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$16932$Uaprr
               '(_ any any)))))
         g$stx$16931$Uaprr))))
   (g$trace-let/rec-syntax$16182$Uaprr
     g$trace-let/rec-syntax$19778$Uaprr
     (case-lambda
       ((g$who$16936$Uaprr)
        (case-lambda
          ((g$stx$16937$Uaprr)
           ((case-lambda
              ((g$t$16938$Uaprr)
               ((case-lambda
                  ((g$ls/false$16939$Uaprr)
                   (if g$ls/false$16939$Uaprr
                     (apply
                       (case-lambda
                         ((g$lhs*$16940$Uaprr
                            g$rhs*$16941$Uaprr
                            g$b$16942$Uaprr
                            g$b*$16943$Uaprr)
                          (if (g$valid-bound-ids?$15717$Uaprr
                                g$lhs*$16940$Uaprr)
                            ((case-lambda
                               ((g$rhs*$16944$Uaprr)
                                (g$bless$16173$Uaprr
                                  (cons
                                    g$who$16936$Uaprr
                                    (cons
                                      (g$map$11722$Uaprr
                                        list
                                        g$lhs*$16940$Uaprr
                                        g$rhs*$16944$Uaprr)
                                      (cons
                                        g$b$16942$Uaprr
                                        g$b*$16943$Uaprr))))))
                             (g$map$11722$Uaprr
                               (case-lambda
                                 ((g$lhs$16945$Uaprr g$rhs$16946$Uaprr)
                                  (list
                                    'make-traced-macro
                                    (list 'quote g$lhs$16945$Uaprr)
                                    g$rhs$16946$Uaprr)))
                               g$lhs*$16940$Uaprr
                               g$rhs*$16941$Uaprr))
                            (g$invalid-fmls-error$16175$Uaprr
                              g$stx$16937$Uaprr
                              g$lhs*$16940$Uaprr))))
                       g$ls/false$16939$Uaprr)
                     (g$syntax-violation$16329$Uaprr
                       '#f
                       '"invalid syntax"
                       g$t$16938$Uaprr))))
                (g$syntax-dispatch$16210$Uaprr
                  g$t$16938$Uaprr
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$16937$Uaprr))))))
   (g$trace-let-syntax-macro$16183$Uaprr
     g$trace-let-syntax-macro$19779$Uaprr
     (g$trace-let/rec-syntax$16182$Uaprr 'let-syntax))
   (g$trace-letrec-syntax-macro$16184$Uaprr
     g$trace-letrec-syntax-macro$19780$Uaprr
     (g$trace-let/rec-syntax$16182$Uaprr 'letrec-syntax))
   (g$guard-macro$16185$Uaprr
     g$guard-macro$19781$Uaprr
     (case-lambda
       ((g$x$16947$Uaprr)
        (letrec* ((g$gen-clauses$16948$Uaprr
                    (case-lambda
                      ((g$con$16960$Uaprr
                         g$outerk$16961$Uaprr
                         g$clause*$16962$Uaprr)
                       (letrec* ((g$f$16963$Uaprr
                                   (case-lambda
                                     ((g$x$16991$Uaprr g$k$16992$Uaprr)
                                      ((case-lambda
                                         ((g$t$16993$Uaprr)
                                          ((case-lambda
                                             ((g$ls/false$16994$Uaprr)
                                              (if g$ls/false$16994$Uaprr
                                                (apply
                                                  (case-lambda
                                                    ((g$e$16995$Uaprr
                                                       g$p$16996$Uaprr)
                                                     ((case-lambda
                                                        ((g$t$16997$Uaprr)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$16997$Uaprr
                                                               g$e$16995$Uaprr))
                                                           (list
                                                             'if
                                                             g$t$16997$Uaprr
                                                             (list
                                                               g$p$16996$Uaprr
                                                               g$t$16997$Uaprr)
                                                             g$k$16992$Uaprr))))
                                                      (gensym))))
                                                  g$ls/false$16994$Uaprr)
                                                ((case-lambda
                                                   ((g$t$16998$Uaprr)
                                                    ((case-lambda
                                                       ((g$ls/false$16999$Uaprr)
                                                        (if g$ls/false$16999$Uaprr
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$17000$Uaprr)
                                                               ((case-lambda
                                                                  ((g$t$17001$Uaprr)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$17001$Uaprr
                                                                         g$e$17000$Uaprr))
                                                                     (list
                                                                       'if
                                                                       g$t$17001$Uaprr
                                                                       g$t$17001$Uaprr
                                                                       g$k$16992$Uaprr))))
                                                                (gensym))))
                                                            g$ls/false$16999$Uaprr)
                                                          ((case-lambda
                                                             ((g$t$17002$Uaprr)
                                                              ((case-lambda
                                                                 ((g$ls/false$17003$Uaprr)
                                                                  (if g$ls/false$17003$Uaprr
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$17004$Uaprr
                                                                           g$v$17005$Uaprr
                                                                           g$v*$17006$Uaprr)
                                                                         (list
                                                                           'if
                                                                           g$e$17004$Uaprr
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$17005$Uaprr
                                                                               g$v*$17006$Uaprr))
                                                                           g$k$16992$Uaprr)))
                                                                      g$ls/false$17003$Uaprr)
                                                                    ((case-lambda
                                                                       ((g$t$17007$Uaprr)
                                                                        ((case-lambda
                                                                           ((g$ls/false$17008$Uaprr)
                                                                            (if g$ls/false$17008$Uaprr
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$16329$Uaprr
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$16991$Uaprr)))
                                                                                g$ls/false$17008$Uaprr)
                                                                              (g$syntax-violation$16329$Uaprr
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$17007$Uaprr))))
                                                                         (g$syntax-dispatch$16210$Uaprr
                                                                           g$t$17007$Uaprr
                                                                           '_))))
                                                                     g$t$17002$Uaprr))))
                                                               (g$syntax-dispatch$16210$Uaprr
                                                                 g$t$17002$Uaprr
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$16998$Uaprr))))
                                                     (g$syntax-dispatch$16210$Uaprr
                                                       g$t$16998$Uaprr
                                                       '(any)))))
                                                 g$t$16993$Uaprr))))
                                           (g$syntax-dispatch$16210$Uaprr
                                             g$t$16993$Uaprr
                                             '(any #(scheme-id =>)
                                                   any)))))
                                       g$x$16991$Uaprr))))
                                 (g$f*$16964$Uaprr
                                   (case-lambda
                                     ((g$x*$16971$Uaprr)
                                      ((case-lambda
                                         ((g$t$16972$Uaprr)
                                          ((case-lambda
                                             ((g$ls/false$16973$Uaprr)
                                              (if g$ls/false$16973$Uaprr
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$16960$Uaprr)
                                                       '#t)))
                                                  g$ls/false$16973$Uaprr)
                                                ((case-lambda
                                                   ((g$t$16974$Uaprr)
                                                    ((case-lambda
                                                       ((g$ls/false$16975$Uaprr)
                                                        (if g$ls/false$16975$Uaprr
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$16976$Uaprr
                                                                 g$e*$16977$Uaprr)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$16976$Uaprr
                                                                     g$e*$16977$Uaprr))
                                                                 '#f)))
                                                            g$ls/false$16975$Uaprr)
                                                          ((case-lambda
                                                             ((g$t$16978$Uaprr)
                                                              ((case-lambda
                                                                 ((g$ls/false$16979$Uaprr)
                                                                  (if g$ls/false$16979$Uaprr
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$16980$Uaprr
                                                                           g$cls*$16981$Uaprr)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$16964$Uaprr
                                                                                g$cls*$16981$Uaprr)))
                                                                           (case-lambda
                                                                             ((g$e$16984$Uaprr
                                                                                g$g$16985$Uaprr)
                                                                              ((case-lambda
                                                                                 ((g$g$16986$Uaprr
                                                                                    g$e$16987$Uaprr)
                                                                                  (values
                                                                                    (g$f$16963$Uaprr
                                                                                      g$cls$16980$Uaprr
                                                                                      g$e$16987$Uaprr)
                                                                                    g$g$16986$Uaprr)))
                                                                               g$g$16985$Uaprr
                                                                               g$e$16984$Uaprr))))))
                                                                      g$ls/false$16979$Uaprr)
                                                                    ((case-lambda
                                                                       ((g$t$16988$Uaprr)
                                                                        ((case-lambda
                                                                           ((g$ls/false$16989$Uaprr)
                                                                            (if g$ls/false$16989$Uaprr
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$16990$Uaprr)
                                                                                   (g$syntax-violation$16329$Uaprr
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$16990$Uaprr)))
                                                                                g$ls/false$16989$Uaprr)
                                                                              (g$syntax-violation$16329$Uaprr
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$16988$Uaprr))))
                                                                         (g$syntax-dispatch$16210$Uaprr
                                                                           g$t$16988$Uaprr
                                                                           'any))))
                                                                     g$t$16978$Uaprr))))
                                                               (g$syntax-dispatch$16210$Uaprr
                                                                 g$t$16978$Uaprr
                                                                 '(any .
                                                                       any)))))
                                                           g$t$16974$Uaprr))))
                                                     (g$syntax-dispatch$16210$Uaprr
                                                       g$t$16974$Uaprr
                                                       '((#(scheme-id
                                                            else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$16972$Uaprr))))
                                           (g$syntax-dispatch$16210$Uaprr
                                             g$t$16972$Uaprr
                                             '()))))
                                       g$x*$16971$Uaprr)))))
                         (call-with-values
                           (case-lambda
                             (()
                              (g$f*$16964$Uaprr g$clause*$16962$Uaprr)))
                           (case-lambda
                             ((g$code$16967$Uaprr g$raisek$16968$Uaprr)
                              ((case-lambda
                                 ((g$raisek$16969$Uaprr
                                    g$code$16970$Uaprr)
                                  (if g$raisek$16969$Uaprr
                                    (list
                                      g$outerk$16961$Uaprr
                                      g$code$16970$Uaprr)
                                    g$code$16970$Uaprr)))
                               g$raisek$16968$Uaprr
                               g$code$16967$Uaprr)))))))))
          ((case-lambda
             ((g$t$16949$Uaprr)
              ((case-lambda
                 ((g$ls/false$16950$Uaprr)
                  (if (if g$ls/false$16950$Uaprr
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$16951$Uaprr
                                 g$clause*$16952$Uaprr
                                 g$b$16953$Uaprr
                                 g$b*$16954$Uaprr)
                               (g$id?$15712$Uaprr g$con$16951$Uaprr)))
                            g$ls/false$16950$Uaprr))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$16955$Uaprr
                           g$clause*$16956$Uaprr
                           g$b$16957$Uaprr
                           g$b*$16958$Uaprr)
                         ((case-lambda
                            ((g$outerk$16959$Uaprr)
                             (g$bless$16173$Uaprr
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$16959$Uaprr)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$16955$Uaprr)
                                           (g$gen-clauses$16948$Uaprr
                                             g$con$16955$Uaprr
                                             g$outerk$16959$Uaprr
                                             g$clause*$16956$Uaprr))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$16957$Uaprr
                                                 g$b*$16958$Uaprr))))))))))))
                          (gensym))))
                      g$ls/false$16950$Uaprr)
                    (g$syntax-violation$16329$Uaprr
                      '#f
                      '"invalid syntax"
                      g$t$16949$Uaprr))))
               (g$syntax-dispatch$16210$Uaprr
                 g$t$16949$Uaprr
                 '(_ (any . each-any) any . each-any)))))
           g$x$16947$Uaprr)))))
   (g$define-enumeration-macro$16186$Uaprr
     g$define-enumeration-macro$19782$Uaprr
     (case-lambda
       ((g$stx$17009$Uaprr)
        (letrec* ((g$set?$17010$Uaprr
                    (case-lambda
                      ((g$x$17023$Uaprr)
                       ((case-lambda
                          ((g$t$17024$Uaprr)
                           (if g$t$17024$Uaprr
                             g$t$17024$Uaprr
                             (begin
                               '#f
                               (if (not (g$memq$11714$Uaprr
                                          (car g$x$17023$Uaprr)
                                          (cdr g$x$17023$Uaprr)))
                                 (begin
                                   '#f
                                   (g$set?$17010$Uaprr
                                     (cdr g$x$17023$Uaprr)))
                                 '#f)))))
                        (null? g$x$17023$Uaprr)))))
                  (g$remove-dups$17011$Uaprr
                    (case-lambda
                      ((g$ls$17022$Uaprr)
                       (if (null? g$ls$17022$Uaprr)
                         '()
                         (cons
                           (car g$ls$17022$Uaprr)
                           (g$remove-dups$17011$Uaprr
                             (g$remq$11729$Uaprr
                               (car g$ls$17022$Uaprr)
                               (cdr g$ls$17022$Uaprr)))))))))
          ((case-lambda
             ((g$t$17012$Uaprr)
              ((case-lambda
                 ((g$ls/false$17013$Uaprr)
                  (if (if g$ls/false$17013$Uaprr
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$17014$Uaprr
                                 g$id*$17015$Uaprr
                                 g$maker$17016$Uaprr)
                               (if (g$id?$15712$Uaprr
                                     g$name$17014$Uaprr)
                                 (if (g$id?$15712$Uaprr
                                       g$maker$17016$Uaprr)
                                   (begin
                                     '#f
                                     (g$for-all$11720$Uaprr
                                       g$id?$15712$Uaprr
                                       g$id*$17015$Uaprr))
                                   '#f)
                                 '#f)))
                            g$ls/false$17013$Uaprr))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$17017$Uaprr
                           g$id*$17018$Uaprr
                           g$maker$17019$Uaprr)
                         ((case-lambda
                            ((g$name*$17020$Uaprr g$mk$17021$Uaprr)
                             (g$bless$16173$Uaprr
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$17021$Uaprr
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list
                                         'quote
                                         g$name*$17020$Uaprr))))
                                 (list
                                   'define-syntax
                                   g$name$17017$Uaprr
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list
                                               'quote
                                               g$name*$17020$Uaprr))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list
                                                 'quote
                                                 g$name$17017$Uaprr)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$17019$Uaprr
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$17019$Uaprr)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$17020$Uaprr))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$17019$Uaprr)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$17021$Uaprr
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$17011$Uaprr
                            (g$syntax->datum$16332$Uaprr
                              g$id*$17018$Uaprr))
                          (gensym))))
                      g$ls/false$17013$Uaprr)
                    (g$syntax-violation$16329$Uaprr
                      '#f
                      '"invalid syntax"
                      g$t$17012$Uaprr))))
               (g$syntax-dispatch$16210$Uaprr
                 g$t$17012$Uaprr
                 '(_ any each-any any)))))
           g$stx$17009$Uaprr)))))
   (g$time-macro$16187$Uaprr
     g$time-macro$19783$Uaprr
     (case-lambda
       ((g$stx$17025$Uaprr)
        ((case-lambda
           ((g$t$17026$Uaprr)
            ((case-lambda
               ((g$ls/false$17027$Uaprr)
                (if g$ls/false$17027$Uaprr
                  (apply
                    (case-lambda
                      ((g$expr$17028$Uaprr)
                       ((case-lambda
                          ((g$str$17029$Uaprr)
                           (g$bless$16173$Uaprr
                             (list
                               'time-it
                               g$str$17029$Uaprr
                               (list 'lambda '() g$expr$17028$Uaprr)))))
                        (call-with-values
                          (case-lambda
                            (()
                             (g$open-string-output-port$14125$Uaprr)))
                          (case-lambda
                            ((g$p$17032$Uaprr g$e$17033$Uaprr)
                             ((case-lambda
                                ((g$e$17034$Uaprr g$p$17035$Uaprr)
                                 (begin
                                   (write
                                     (g$syntax->datum$16332$Uaprr
                                       g$expr$17028$Uaprr)
                                     g$p$17035$Uaprr)
                                   (g$e$17034$Uaprr))))
                              g$e$17033$Uaprr
                              g$p$17032$Uaprr)))))))
                    g$ls/false$17027$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$17026$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr g$t$17026$Uaprr '(_ any)))))
         g$stx$17025$Uaprr))))
   (g$delay-macro$16188$Uaprr
     g$delay-macro$19784$Uaprr
     (case-lambda
       ((g$stx$17036$Uaprr)
        ((case-lambda
           ((g$t$17037$Uaprr)
            ((case-lambda
               ((g$ls/false$17038$Uaprr)
                (if g$ls/false$17038$Uaprr
                  (apply
                    (case-lambda
                      ((g$expr$17039$Uaprr)
                       (g$bless$16173$Uaprr
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$17039$Uaprr)))))
                    g$ls/false$17038$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$17037$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr g$t$17037$Uaprr '(_ any)))))
         g$stx$17036$Uaprr))))
   (g$assert-macro$16189$Uaprr
     g$assert-macro$19785$Uaprr
     (case-lambda
       ((g$stx$17040$Uaprr)
        ((case-lambda
           ((g$t$17041$Uaprr)
            ((case-lambda
               ((g$ls/false$17042$Uaprr)
                (if g$ls/false$17042$Uaprr
                  (apply
                    (case-lambda
                      ((g$expr$17043$Uaprr)
                       ((case-lambda
                          ((g$pos$17044$Uaprr)
                           (g$bless$16173$Uaprr
                             (list
                               'unless
                               g$expr$17043$Uaprr
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$17043$Uaprr)
                                 (list 'quote g$pos$17044$Uaprr))))))
                        ((case-lambda
                           ((g$t$17045$Uaprr)
                            (if g$t$17045$Uaprr
                              g$t$17045$Uaprr
                              (begin
                                '#f
                                (g$expression-position$16324$Uaprr
                                  g$expr$17043$Uaprr)))))
                         (g$expression-position$16324$Uaprr
                           g$stx$17040$Uaprr)))))
                    g$ls/false$17042$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$17041$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr g$t$17041$Uaprr '(_ any)))))
         g$stx$17040$Uaprr))))
   (g$endianness-macro$16190$Uaprr
     g$endianness-macro$19786$Uaprr
     (case-lambda
       ((g$stx$17046$Uaprr)
        ((case-lambda
           ((g$t$17047$Uaprr)
            ((case-lambda
               ((g$ls/false$17048$Uaprr)
                (if g$ls/false$17048$Uaprr
                  (apply
                    (case-lambda
                      ((g$e$17049$Uaprr)
                       ((case-lambda
                          ((g$t$17050$Uaprr)
                           (if (eqv? g$t$17050$Uaprr 'little)
                             (g$bless$16173$Uaprr ''little)
                             (if (eqv? g$t$17050$Uaprr 'big)
                               (g$bless$16173$Uaprr ''big)
                               (g$syntax-violation$16329$Uaprr
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$17046$Uaprr)))))
                        (g$syntax->datum$16332$Uaprr g$e$17049$Uaprr))))
                    g$ls/false$17048$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$17047$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr g$t$17047$Uaprr '(_ any)))))
         g$stx$17046$Uaprr))))
   (g$identifier-syntax-macro$16191$Uaprr
     g$identifier-syntax-macro$19787$Uaprr
     (case-lambda
       ((g$stx$17051$Uaprr)
        ((case-lambda
           ((g$t$17052$Uaprr)
            ((case-lambda
               ((g$ls/false$17053$Uaprr)
                (if g$ls/false$17053$Uaprr
                  (apply
                    (case-lambda
                      ((g$expr$17054$Uaprr)
                       (g$bless$16173$Uaprr
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$17054$Uaprr))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$17054$Uaprr)
                                   '(#'(e* ...))))))))))
                    g$ls/false$17053$Uaprr)
                  ((case-lambda
                     ((g$t$17055$Uaprr)
                      ((case-lambda
                         ((g$ls/false$17056$Uaprr)
                          (if (if g$ls/false$17056$Uaprr
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$17057$Uaprr
                                         g$expr1$17058$Uaprr
                                         g$id2$17059$Uaprr
                                         g$expr2$17060$Uaprr
                                         g$expr3$17061$Uaprr)
                                       (if (g$id?$15712$Uaprr
                                             g$id1$17057$Uaprr)
                                         (if (g$id?$15712$Uaprr
                                               g$id2$17059$Uaprr)
                                           (begin
                                             '#f
                                             (g$id?$15712$Uaprr
                                               g$expr2$17060$Uaprr))
                                           '#f)
                                         '#f)))
                                    g$ls/false$17056$Uaprr))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$17062$Uaprr
                                   g$expr1$17063$Uaprr
                                   g$id2$17064$Uaprr
                                   g$expr2$17065$Uaprr
                                   g$expr3$17066$Uaprr)
                                 (g$bless$16173$Uaprr
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             g$expr1$17063$Uaprr))
                                         (list
                                           (list
                                             'set!
                                             'id
                                             g$expr2$17065$Uaprr)
                                           (list
                                             'syntax
                                             g$expr3$17066$Uaprr))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$17063$Uaprr
                                               '(e* ...))))))))))
                              g$ls/false$17056$Uaprr)
                            (g$syntax-violation$16329$Uaprr
                              '#f
                              '"invalid syntax"
                              g$t$17055$Uaprr))))
                       (g$syntax-dispatch$16210$Uaprr
                         g$t$17055$Uaprr
                         '(_ (any any)
                             ((#(scheme-id set!) any any) any))))))
                   g$t$17052$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr g$t$17052$Uaprr '(_ any)))))
         g$stx$17051$Uaprr))))
   (g$do-macro$16192$Uaprr
     g$do-macro$19788$Uaprr
     (case-lambda
       ((g$stx$17067$Uaprr)
        (letrec* ((g$bind$17068$Uaprr
                    (case-lambda
                      ((g$x$17080$Uaprr)
                       ((case-lambda
                          ((g$t$17081$Uaprr)
                           ((case-lambda
                              ((g$ls/false$17082$Uaprr)
                               (if g$ls/false$17082$Uaprr
                                 (apply
                                   (case-lambda
                                     ((g$x$17083$Uaprr
                                        g$init$17084$Uaprr)
                                      (list
                                        g$x$17083$Uaprr
                                        g$init$17084$Uaprr
                                        g$x$17083$Uaprr)))
                                   g$ls/false$17082$Uaprr)
                                 ((case-lambda
                                    ((g$t$17085$Uaprr)
                                     ((case-lambda
                                        ((g$ls/false$17086$Uaprr)
                                         (if g$ls/false$17086$Uaprr
                                           (apply
                                             (case-lambda
                                               ((g$x$17087$Uaprr
                                                  g$init$17088$Uaprr
                                                  g$step$17089$Uaprr)
                                                (list
                                                  g$x$17087$Uaprr
                                                  g$init$17088$Uaprr
                                                  g$step$17089$Uaprr)))
                                             g$ls/false$17086$Uaprr)
                                           ((case-lambda
                                              ((g$t$17090$Uaprr)
                                               ((case-lambda
                                                  ((g$ls/false$17091$Uaprr)
                                                   (if g$ls/false$17091$Uaprr
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$16329$Uaprr
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$17067$Uaprr)))
                                                       g$ls/false$17091$Uaprr)
                                                     (g$syntax-violation$16329$Uaprr
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$17090$Uaprr))))
                                                (g$syntax-dispatch$16210$Uaprr
                                                  g$t$17090$Uaprr
                                                  '_))))
                                            g$t$17085$Uaprr))))
                                      (g$syntax-dispatch$16210$Uaprr
                                        g$t$17085$Uaprr
                                        '(any any any)))))
                                  g$t$17081$Uaprr))))
                            (g$syntax-dispatch$16210$Uaprr
                              g$t$17081$Uaprr
                              '(any any)))))
                        g$x$17080$Uaprr)))))
          ((case-lambda
             ((g$t$17069$Uaprr)
              ((case-lambda
                 ((g$ls/false$17070$Uaprr)
                  (if g$ls/false$17070$Uaprr
                    (apply
                      (case-lambda
                        ((g$binding*$17071$Uaprr
                           g$test$17072$Uaprr
                           g$expr*$17073$Uaprr
                           g$command*$17074$Uaprr)
                         ((case-lambda
                            ((g$t$17075$Uaprr)
                             ((case-lambda
                                ((g$ls/false$17076$Uaprr)
                                 (if g$ls/false$17076$Uaprr
                                   (apply
                                     (case-lambda
                                       ((g$x*$17077$Uaprr
                                          g$init*$17078$Uaprr
                                          g$step*$17079$Uaprr)
                                        (if (g$valid-bound-ids?$15717$Uaprr
                                              g$x*$17077$Uaprr)
                                          (g$bless$16173$Uaprr
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$17077$Uaprr
                                                    (list
                                                      'if
                                                      g$test$17072$Uaprr
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$17073$Uaprr))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$17074$Uaprr
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$17079$Uaprr))))))))
                                              (cons
                                                'loop
                                                g$init*$17078$Uaprr)))
                                          (g$syntax-violation$16329$Uaprr
                                            '#f
                                            '"invalid bindings"
                                            g$stx$17067$Uaprr))))
                                     g$ls/false$17076$Uaprr)
                                   (g$syntax-violation$16329$Uaprr
                                     '#f
                                     '"invalid syntax"
                                     g$t$17075$Uaprr))))
                              (g$syntax-dispatch$16210$Uaprr
                                g$t$17075$Uaprr
                                '#(each (any any any))))))
                          (g$map$11722$Uaprr
                            g$bind$17068$Uaprr
                            g$binding*$17071$Uaprr))))
                      g$ls/false$17070$Uaprr)
                    (g$syntax-violation$16329$Uaprr
                      '#f
                      '"invalid syntax"
                      g$t$17069$Uaprr))))
               (g$syntax-dispatch$16210$Uaprr
                 g$t$17069$Uaprr
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$17067$Uaprr)))))
   (g$let*-macro$16193$Uaprr
     g$let*-macro$19789$Uaprr
     (case-lambda
       ((g$stx$17092$Uaprr)
        ((case-lambda
           ((g$t$17093$Uaprr)
            ((case-lambda
               ((g$ls/false$17094$Uaprr)
                (if (if g$ls/false$17094$Uaprr
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$17095$Uaprr
                               g$rhs*$17096$Uaprr
                               g$b$17097$Uaprr
                               g$b*$17098$Uaprr)
                             (g$for-all$11720$Uaprr
                               g$id?$15712$Uaprr
                               g$lhs*$17095$Uaprr)))
                          g$ls/false$17094$Uaprr))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$17099$Uaprr
                         g$rhs*$17100$Uaprr
                         g$b$17101$Uaprr
                         g$b*$17102$Uaprr)
                       (g$bless$16173$Uaprr
                         ((letrec ((g$f$17103$Uaprr
                                     (case-lambda
                                       ((g$x*$17104$Uaprr)
                                        (if (null? g$x*$17104$Uaprr)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$17101$Uaprr
                                                g$b*$17102$Uaprr)))
                                          (if (null?
                                                (cdr g$x*$17104$Uaprr))
                                            (cons
                                              'let
                                              (cons
                                                (list
                                                  (car g$x*$17104$Uaprr))
                                                (cons
                                                  g$b$17101$Uaprr
                                                  g$b*$17102$Uaprr)))
                                            (list
                                              'let
                                              (list
                                                (car g$x*$17104$Uaprr))
                                              (g$f$17103$Uaprr
                                                (cdr g$x*$17104$Uaprr)))))))))
                            g$f$17103$Uaprr)
                          (g$map$11722$Uaprr
                            list
                            g$lhs*$17099$Uaprr
                            g$rhs*$17100$Uaprr)))))
                    g$ls/false$17094$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$17093$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$17093$Uaprr
               '(_ #(each (any any)) any . each-any)))))
         g$stx$17092$Uaprr))))
   (g$or-macro$16194$Uaprr
     g$or-macro$19790$Uaprr
     (case-lambda
       ((g$stx$17105$Uaprr)
        ((case-lambda
           ((g$t$17106$Uaprr)
            ((case-lambda
               ((g$ls/false$17107$Uaprr)
                (if g$ls/false$17107$Uaprr
                  (apply (case-lambda (() '#f)) g$ls/false$17107$Uaprr)
                  ((case-lambda
                     ((g$t$17108$Uaprr)
                      ((case-lambda
                         ((g$ls/false$17109$Uaprr)
                          (if g$ls/false$17109$Uaprr
                            (apply
                              (case-lambda
                                ((g$e$17110$Uaprr g$e*$17111$Uaprr)
                                 (g$bless$16173$Uaprr
                                   ((letrec ((g$f$17112$Uaprr
                                               (case-lambda
                                                 ((g$e$17113$Uaprr
                                                    g$e*$17114$Uaprr)
                                                  (if (null?
                                                        g$e*$17114$Uaprr)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$17113$Uaprr)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$17113$Uaprr))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$17112$Uaprr
                                                          (car g$e*$17114$Uaprr)
                                                          (cdr g$e*$17114$Uaprr)))))))))
                                      g$f$17112$Uaprr)
                                    g$e$17110$Uaprr
                                    g$e*$17111$Uaprr))))
                              g$ls/false$17109$Uaprr)
                            (g$syntax-violation$16329$Uaprr
                              '#f
                              '"invalid syntax"
                              g$t$17108$Uaprr))))
                       (g$syntax-dispatch$16210$Uaprr
                         g$t$17108$Uaprr
                         '(_ any . each-any)))))
                   g$t$17106$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr g$t$17106$Uaprr '(_)))))
         g$stx$17105$Uaprr))))
   (g$and-macro$16195$Uaprr
     g$and-macro$19791$Uaprr
     (case-lambda
       ((g$stx$17115$Uaprr)
        ((case-lambda
           ((g$t$17116$Uaprr)
            ((case-lambda
               ((g$ls/false$17117$Uaprr)
                (if g$ls/false$17117$Uaprr
                  (apply (case-lambda (() '#t)) g$ls/false$17117$Uaprr)
                  ((case-lambda
                     ((g$t$17118$Uaprr)
                      ((case-lambda
                         ((g$ls/false$17119$Uaprr)
                          (if g$ls/false$17119$Uaprr
                            (apply
                              (case-lambda
                                ((g$e$17120$Uaprr g$e*$17121$Uaprr)
                                 (g$bless$16173$Uaprr
                                   ((letrec ((g$f$17122$Uaprr
                                               (case-lambda
                                                 ((g$e$17123$Uaprr
                                                    g$e*$17124$Uaprr)
                                                  (if (null?
                                                        g$e*$17124$Uaprr)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$17123$Uaprr)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$17123$Uaprr
                                                        (cons
                                                          (g$f$17122$Uaprr
                                                            (car g$e*$17124$Uaprr)
                                                            (cdr g$e*$17124$Uaprr))
                                                          '(#f)))))))))
                                      g$f$17122$Uaprr)
                                    g$e$17120$Uaprr
                                    g$e*$17121$Uaprr))))
                              g$ls/false$17119$Uaprr)
                            (g$syntax-violation$16329$Uaprr
                              '#f
                              '"invalid syntax"
                              g$t$17118$Uaprr))))
                       (g$syntax-dispatch$16210$Uaprr
                         g$t$17118$Uaprr
                         '(_ any . each-any)))))
                   g$t$17116$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr g$t$17116$Uaprr '(_)))))
         g$stx$17115$Uaprr))))
   (g$cond-macro$16196$Uaprr
     g$cond-macro$19792$Uaprr
     (case-lambda
       ((g$stx$17125$Uaprr)
        ((case-lambda
           ((g$t$17126$Uaprr)
            ((case-lambda
               ((g$ls/false$17127$Uaprr)
                (if g$ls/false$17127$Uaprr
                  (apply
                    (case-lambda
                      ((g$cls$17128$Uaprr g$cls*$17129$Uaprr)
                       (g$bless$16173$Uaprr
                         ((letrec ((g$f$17130$Uaprr
                                     (case-lambda
                                       ((g$cls$17131$Uaprr
                                          g$cls*$17132$Uaprr)
                                        (if (null? g$cls*$17132$Uaprr)
                                          ((case-lambda
                                             ((g$t$17133$Uaprr)
                                              ((case-lambda
                                                 ((g$ls/false$17134$Uaprr)
                                                  (if g$ls/false$17134$Uaprr
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$17135$Uaprr
                                                           g$e*$17136$Uaprr)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$17135$Uaprr
                                                             g$e*$17136$Uaprr))))
                                                      g$ls/false$17134$Uaprr)
                                                    ((case-lambda
                                                       ((g$t$17137$Uaprr)
                                                        ((case-lambda
                                                           ((g$ls/false$17138$Uaprr)
                                                            (if g$ls/false$17138$Uaprr
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$17139$Uaprr
                                                                     g$p$17140$Uaprr)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$17139$Uaprr))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$17140$Uaprr
                                                                         '(t))))))
                                                                g$ls/false$17138$Uaprr)
                                                              ((case-lambda
                                                                 ((g$t$17141$Uaprr)
                                                                  ((case-lambda
                                                                     ((g$ls/false$17142$Uaprr)
                                                                      (if g$ls/false$17142$Uaprr
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$17143$Uaprr)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$17143$Uaprr
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$17142$Uaprr)
                                                                        ((case-lambda
                                                                           ((g$t$17144$Uaprr)
                                                                            ((case-lambda
                                                                               ((g$ls/false$17145$Uaprr)
                                                                                (if g$ls/false$17145$Uaprr
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$17146$Uaprr
                                                                                         g$e*$17147$Uaprr)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$17146$Uaprr
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$17147$Uaprr))))
                                                                                    g$ls/false$17145$Uaprr)
                                                                                  ((case-lambda
                                                                                     ((g$t$17148$Uaprr)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$17149$Uaprr)
                                                                                          (if g$ls/false$17149$Uaprr
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$16329$Uaprr
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$17125$Uaprr)))
                                                                                              g$ls/false$17149$Uaprr)
                                                                                            (g$syntax-violation$16329$Uaprr
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$17148$Uaprr))))
                                                                                       (g$syntax-dispatch$16210$Uaprr
                                                                                         g$t$17148$Uaprr
                                                                                         '_))))
                                                                                   g$t$17144$Uaprr))))
                                                                             (g$syntax-dispatch$16210$Uaprr
                                                                               g$t$17144$Uaprr
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$17141$Uaprr))))
                                                                   (g$syntax-dispatch$16210$Uaprr
                                                                     g$t$17141$Uaprr
                                                                     '(any)))))
                                                               g$t$17137$Uaprr))))
                                                         (g$syntax-dispatch$16210$Uaprr
                                                           g$t$17137$Uaprr
                                                           '(any #(scheme-id
                                                                   =>)
                                                                 any)))))
                                                     g$t$17133$Uaprr))))
                                               (g$syntax-dispatch$16210$Uaprr
                                                 g$t$17133$Uaprr
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$17131$Uaprr)
                                          ((case-lambda
                                             ((g$t$17150$Uaprr)
                                              ((case-lambda
                                                 ((g$ls/false$17151$Uaprr)
                                                  (if g$ls/false$17151$Uaprr
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$17152$Uaprr
                                                           g$e*$17153$Uaprr)
                                                         (g$syntax-violation$16329$Uaprr
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$17125$Uaprr)))
                                                      g$ls/false$17151$Uaprr)
                                                    ((case-lambda
                                                       ((g$t$17154$Uaprr)
                                                        ((case-lambda
                                                           ((g$ls/false$17155$Uaprr)
                                                            (if g$ls/false$17155$Uaprr
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$17156$Uaprr
                                                                     g$p$17157$Uaprr)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$17156$Uaprr))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$17157$Uaprr
                                                                         '(t))
                                                                       (g$f$17130$Uaprr
                                                                         (car g$cls*$17132$Uaprr)
                                                                         (cdr g$cls*$17132$Uaprr))))))
                                                                g$ls/false$17155$Uaprr)
                                                              ((case-lambda
                                                                 ((g$t$17158$Uaprr)
                                                                  ((case-lambda
                                                                     ((g$ls/false$17159$Uaprr)
                                                                      (if g$ls/false$17159$Uaprr
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$17160$Uaprr)
                                                                             (list
                                                                               'or
                                                                               g$e$17160$Uaprr
                                                                               (g$f$17130$Uaprr
                                                                                 (car g$cls*$17132$Uaprr)
                                                                                 (cdr g$cls*$17132$Uaprr)))))
                                                                          g$ls/false$17159$Uaprr)
                                                                        ((case-lambda
                                                                           ((g$t$17161$Uaprr)
                                                                            ((case-lambda
                                                                               ((g$ls/false$17162$Uaprr)
                                                                                (if g$ls/false$17162$Uaprr
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$17163$Uaprr
                                                                                         g$e*$17164$Uaprr)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$17163$Uaprr
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$17164$Uaprr)
                                                                                         (g$f$17130$Uaprr
                                                                                           (car g$cls*$17132$Uaprr)
                                                                                           (cdr g$cls*$17132$Uaprr)))))
                                                                                    g$ls/false$17162$Uaprr)
                                                                                  ((case-lambda
                                                                                     ((g$t$17165$Uaprr)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$17166$Uaprr)
                                                                                          (if g$ls/false$17166$Uaprr
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$16329$Uaprr
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$17125$Uaprr)))
                                                                                              g$ls/false$17166$Uaprr)
                                                                                            (g$syntax-violation$16329$Uaprr
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$17165$Uaprr))))
                                                                                       (g$syntax-dispatch$16210$Uaprr
                                                                                         g$t$17165$Uaprr
                                                                                         '_))))
                                                                                   g$t$17161$Uaprr))))
                                                                             (g$syntax-dispatch$16210$Uaprr
                                                                               g$t$17161$Uaprr
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$17158$Uaprr))))
                                                                   (g$syntax-dispatch$16210$Uaprr
                                                                     g$t$17158$Uaprr
                                                                     '(any)))))
                                                               g$t$17154$Uaprr))))
                                                         (g$syntax-dispatch$16210$Uaprr
                                                           g$t$17154$Uaprr
                                                           '(any #(scheme-id
                                                                   =>)
                                                                 any)))))
                                                     g$t$17150$Uaprr))))
                                               (g$syntax-dispatch$16210$Uaprr
                                                 g$t$17150$Uaprr
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$17131$Uaprr))))))
                            g$f$17130$Uaprr)
                          g$cls$17128$Uaprr
                          g$cls*$17129$Uaprr))))
                    g$ls/false$17127$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$17126$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$17126$Uaprr
               '(_ any . each-any)))))
         g$stx$17125$Uaprr))))
   (g$do-include$16197$Uaprr
     g$do-include$19793$Uaprr
     (case-lambda
       ((g$stx$17167$Uaprr g$id$17168$Uaprr g$filename$17169$Uaprr)
        ((case-lambda
           ((g$filename$17170$Uaprr)
            (begin
              (if (not (if (string? g$filename$17170$Uaprr)
                         (begin
                           '#f
                           (g$id?$15712$Uaprr g$id$17168$Uaprr))
                         '#f))
                (g$syntax-violation$16329$Uaprr
                  '#f
                  '"invalid syntax"
                  g$stx$17167$Uaprr)
                (void))
              (cons
                (g$bless$16173$Uaprr 'begin)
                (g$with-input-from-file$14187$Uaprr
                  g$filename$17170$Uaprr
                  (case-lambda
                    (()
                     ((letrec ((g$f$17171$Uaprr
                                 (case-lambda
                                   ((g$ls$17172$Uaprr)
                                    ((case-lambda
                                       ((g$x$17173$Uaprr)
                                        (if (eof-object?
                                              g$x$17173$Uaprr)
                                          (g$reverse$12473$Uaprr
                                            g$ls$17172$Uaprr)
                                          (g$f$17171$Uaprr
                                            (cons
                                              (g$datum->stx$15695$Uaprr
                                                g$id$17168$Uaprr
                                                g$x$17173$Uaprr)
                                              g$ls$17172$Uaprr)))))
                                     (read-annotated))))))
                        g$f$17171$Uaprr)
                      '()))))))))
         (g$stx->datum$15723$Uaprr g$filename$17169$Uaprr)))))
   (g$include-macro$16198$Uaprr
     g$include-macro$19794$Uaprr
     (case-lambda
       ((g$e$17174$Uaprr)
        ((case-lambda
           ((g$t$17175$Uaprr)
            ((case-lambda
               ((g$ls/false$17176$Uaprr)
                (if g$ls/false$17176$Uaprr
                  (apply
                    (case-lambda
                      ((g$id$17177$Uaprr g$filename$17178$Uaprr)
                       (g$do-include$16197$Uaprr
                         g$e$17174$Uaprr
                         g$id$17177$Uaprr
                         g$filename$17178$Uaprr)))
                    g$ls/false$17176$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$17175$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$17175$Uaprr
               '(any any)))))
         g$e$17174$Uaprr))))
   (g$include-into-macro$16199$Uaprr
     g$include-into-macro$19795$Uaprr
     (case-lambda
       ((g$e$17179$Uaprr)
        ((case-lambda
           ((g$t$17180$Uaprr)
            ((case-lambda
               ((g$ls/false$17181$Uaprr)
                (if g$ls/false$17181$Uaprr
                  (apply
                    (case-lambda
                      ((g$id$17182$Uaprr g$filename$17183$Uaprr)
                       (g$do-include$16197$Uaprr
                         g$e$17179$Uaprr
                         g$id$17182$Uaprr
                         g$filename$17183$Uaprr)))
                    g$ls/false$17181$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$17180$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$17180$Uaprr
               '(_ any any)))))
         g$e$17179$Uaprr))))
   (g$syntax-rules-macro$16200$Uaprr
     g$syntax-rules-macro$19796$Uaprr
     (case-lambda
       ((g$e$17184$Uaprr)
        ((case-lambda
           ((g$t$17185$Uaprr)
            ((case-lambda
               ((g$ls/false$17186$Uaprr)
                (if g$ls/false$17186$Uaprr
                  (apply
                    (case-lambda
                      ((g$lits$17187$Uaprr
                         g$pat*$17188$Uaprr
                         g$tmp*$17189$Uaprr)
                       (begin
                         (g$verify-literals$16213$Uaprr
                           g$lits$17187$Uaprr
                           g$e$17184$Uaprr)
                         (g$bless$16173$Uaprr
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$17187$Uaprr
                                   (g$map$11722$Uaprr
                                     (case-lambda
                                       ((g$pat$17190$Uaprr
                                          g$tmp$17191$Uaprr)
                                        ((case-lambda
                                           ((g$t$17192$Uaprr)
                                            ((case-lambda
                                               ((g$ls/false$17193$Uaprr)
                                                (if g$ls/false$17193$Uaprr
                                                  (apply
                                                    (case-lambda
                                                      ((g$rest$17194$Uaprr)
                                                       (list
                                                         (cons
                                                           'g
                                                           g$rest$17194$Uaprr)
                                                         (list
                                                           'syntax
                                                           g$tmp$17191$Uaprr))))
                                                    g$ls/false$17193$Uaprr)
                                                  ((case-lambda
                                                     ((g$t$17195$Uaprr)
                                                      ((case-lambda
                                                         ((g$ls/false$17196$Uaprr)
                                                          (if g$ls/false$17196$Uaprr
                                                            (apply
                                                              (case-lambda
                                                                (()
                                                                 (g$syntax-violation$16329$Uaprr
                                                                   '#f
                                                                   '"invalid syntax-rules pattern"
                                                                   g$e$17184$Uaprr
                                                                   g$pat$17190$Uaprr)))
                                                              g$ls/false$17196$Uaprr)
                                                            (g$syntax-violation$16329$Uaprr
                                                              '#f
                                                              '"invalid syntax"
                                                              g$t$17195$Uaprr))))
                                                       (g$syntax-dispatch$16210$Uaprr
                                                         g$t$17195$Uaprr
                                                         '_))))
                                                   g$t$17192$Uaprr))))
                                             (g$syntax-dispatch$16210$Uaprr
                                               g$t$17192$Uaprr
                                               '(_ . any)))))
                                         g$pat$17190$Uaprr)))
                                     g$pat*$17188$Uaprr
                                     g$tmp*$17189$Uaprr)))))))))
                    g$ls/false$17186$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$17185$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$17185$Uaprr
               '(_ each-any . #(each (any any)))))))
         g$e$17184$Uaprr))))
   (g$quasiquote-macro$16201$Uaprr
     g$quasiquote-macro$19797$Uaprr
     ((case-lambda
        (()
         (letrec* ((g$datum$17197$Uaprr
                     (case-lambda
                       ((g$x$17347$Uaprr)
                        (list
                          (g$scheme-stx$16153$Uaprr 'quote)
                          (g$mkstx$15700$Uaprr
                            g$x$17347$Uaprr
                            '()
                            '()
                            '())))))
                   (g$quasicons*$17232$Uaprr
                     (case-lambda
                       ((g$x$17343$Uaprr g$y$17344$Uaprr)
                        ((letrec ((g$f$17345$Uaprr
                                    (case-lambda
                                      ((g$x$17346$Uaprr)
                                       (if (null? g$x$17346$Uaprr)
                                         g$y$17344$Uaprr
                                         (g$quasicons$17233$Uaprr
                                           (car g$x$17346$Uaprr)
                                           (g$f$17345$Uaprr
                                             (cdr g$x$17346$Uaprr))))))))
                           g$f$17345$Uaprr)
                         g$x$17343$Uaprr))))
                   (g$quasicons$17233$Uaprr
                     (case-lambda
                       ((g$x$17324$Uaprr g$y$17325$Uaprr)
                        ((case-lambda
                           ((g$t$17326$Uaprr)
                            ((case-lambda
                               ((g$ls/false$17327$Uaprr)
                                (if g$ls/false$17327$Uaprr
                                  (apply
                                    (case-lambda
                                      ((g$dy$17328$Uaprr)
                                       ((case-lambda
                                          ((g$t$17329$Uaprr)
                                           ((case-lambda
                                              ((g$ls/false$17330$Uaprr)
                                               (if g$ls/false$17330$Uaprr
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$17331$Uaprr)
                                                      (list
                                                        (g$scheme-stx$16153$Uaprr
                                                          'quote)
                                                        (cons
                                                          g$dx$17331$Uaprr
                                                          g$dy$17328$Uaprr))))
                                                   g$ls/false$17330$Uaprr)
                                                 ((case-lambda
                                                    ((g$t$17332$Uaprr)
                                                     ((case-lambda
                                                        ((g$ls/false$17333$Uaprr)
                                                         (if g$ls/false$17333$Uaprr
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$17334$Uaprr)
                                                                    ((case-lambda
                                                                       ((g$ls/false$17335$Uaprr)
                                                                        (if g$ls/false$17335$Uaprr
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$16153$Uaprr
                                                                                   'list)
                                                                                 g$x$17324$Uaprr)))
                                                                            g$ls/false$17335$Uaprr)
                                                                          ((case-lambda
                                                                             ((g$t$17336$Uaprr)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$17337$Uaprr)
                                                                                  (if g$ls/false$17337$Uaprr
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$16153$Uaprr
                                                                                             'cons)
                                                                                           g$x$17324$Uaprr
                                                                                           g$y$17325$Uaprr)))
                                                                                      g$ls/false$17337$Uaprr)
                                                                                    (g$syntax-violation$16329$Uaprr
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$17336$Uaprr))))
                                                                               (g$syntax-dispatch$16210$Uaprr
                                                                                 g$t$17336$Uaprr
                                                                                 '_))))
                                                                           g$t$17334$Uaprr))))
                                                                     (g$syntax-dispatch$16210$Uaprr
                                                                       g$t$17334$Uaprr
                                                                       '()))))
                                                                 g$dy$17328$Uaprr)))
                                                             g$ls/false$17333$Uaprr)
                                                           (g$syntax-violation$16329$Uaprr
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$17332$Uaprr))))
                                                      (g$syntax-dispatch$16210$Uaprr
                                                        g$t$17332$Uaprr
                                                        '_))))
                                                  g$t$17329$Uaprr))))
                                            (g$syntax-dispatch$16210$Uaprr
                                              g$t$17329$Uaprr
                                              '(#(scheme-id quote)
                                                any)))))
                                        g$x$17324$Uaprr)))
                                    g$ls/false$17327$Uaprr)
                                  ((case-lambda
                                     ((g$t$17338$Uaprr)
                                      ((case-lambda
                                         ((g$ls/false$17339$Uaprr)
                                          (if g$ls/false$17339$Uaprr
                                            (apply
                                              (case-lambda
                                                ((g$stuff$17340$Uaprr)
                                                 (g$cons*$11724$Uaprr
                                                   (g$scheme-stx$16153$Uaprr
                                                     'list)
                                                   g$x$17324$Uaprr
                                                   g$stuff$17340$Uaprr)))
                                              g$ls/false$17339$Uaprr)
                                            ((case-lambda
                                               ((g$t$17341$Uaprr)
                                                ((case-lambda
                                                   ((g$ls/false$17342$Uaprr)
                                                    (if g$ls/false$17342$Uaprr
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$16153$Uaprr
                                                               'cons)
                                                             g$x$17324$Uaprr
                                                             g$y$17325$Uaprr)))
                                                        g$ls/false$17342$Uaprr)
                                                      (g$syntax-violation$16329$Uaprr
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$17341$Uaprr))))
                                                 (g$syntax-dispatch$16210$Uaprr
                                                   g$t$17341$Uaprr
                                                   '_))))
                                             g$t$17338$Uaprr))))
                                       (g$syntax-dispatch$16210$Uaprr
                                         g$t$17338$Uaprr
                                         '(#(scheme-id list)
                                           .
                                           each-any)))))
                                   g$t$17326$Uaprr))))
                             (g$syntax-dispatch$16210$Uaprr
                               g$t$17326$Uaprr
                               '(#(scheme-id quote) any)))))
                         g$y$17325$Uaprr))))
                   (g$quasiappend$17234$Uaprr
                     (case-lambda
                       ((g$x$17311$Uaprr g$y$17312$Uaprr)
                        ((case-lambda
                           ((g$ls$17313$Uaprr)
                            (if (null? g$ls$17313$Uaprr)
                              (list
                                (g$scheme-stx$16153$Uaprr 'quote)
                                '())
                              (if (null? (cdr g$ls$17313$Uaprr))
                                (car g$ls$17313$Uaprr)
                                (g$cons*$11724$Uaprr
                                  (g$scheme-stx$16153$Uaprr 'append)
                                  g$ls$17313$Uaprr)))))
                         ((letrec ((g$f$17314$Uaprr
                                     (case-lambda
                                       ((g$x$17315$Uaprr)
                                        (if (null? g$x$17315$Uaprr)
                                          ((case-lambda
                                             ((g$t$17316$Uaprr)
                                              ((case-lambda
                                                 ((g$ls/false$17317$Uaprr)
                                                  (if g$ls/false$17317$Uaprr
                                                    (apply
                                                      (case-lambda
                                                        (() '()))
                                                      g$ls/false$17317$Uaprr)
                                                    ((case-lambda
                                                       ((g$t$17318$Uaprr)
                                                        ((case-lambda
                                                           ((g$ls/false$17319$Uaprr)
                                                            (if g$ls/false$17319$Uaprr
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$17312$Uaprr)))
                                                                g$ls/false$17319$Uaprr)
                                                              (g$syntax-violation$16329$Uaprr
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$17318$Uaprr))))
                                                         (g$syntax-dispatch$16210$Uaprr
                                                           g$t$17318$Uaprr
                                                           '_))))
                                                     g$t$17316$Uaprr))))
                                               (g$syntax-dispatch$16210$Uaprr
                                                 g$t$17316$Uaprr
                                                 '(#(scheme-id quote)
                                                   ())))))
                                           g$y$17312$Uaprr)
                                          ((case-lambda
                                             ((g$t$17320$Uaprr)
                                              ((case-lambda
                                                 ((g$ls/false$17321$Uaprr)
                                                  (if g$ls/false$17321$Uaprr
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$17314$Uaprr
                                                           (cdr g$x$17315$Uaprr))))
                                                      g$ls/false$17321$Uaprr)
                                                    ((case-lambda
                                                       ((g$t$17322$Uaprr)
                                                        ((case-lambda
                                                           ((g$ls/false$17323$Uaprr)
                                                            (if g$ls/false$17323$Uaprr
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$17315$Uaprr)
                                                                     (g$f$17314$Uaprr
                                                                       (cdr g$x$17315$Uaprr)))))
                                                                g$ls/false$17323$Uaprr)
                                                              (g$syntax-violation$16329$Uaprr
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$17322$Uaprr))))
                                                         (g$syntax-dispatch$16210$Uaprr
                                                           g$t$17322$Uaprr
                                                           '_))))
                                                     g$t$17320$Uaprr))))
                                               (g$syntax-dispatch$16210$Uaprr
                                                 g$t$17320$Uaprr
                                                 '(#(scheme-id quote)
                                                   ())))))
                                           (car g$x$17315$Uaprr)))))))
                            g$f$17314$Uaprr)
                          g$x$17311$Uaprr)))))
                   (g$quasivector$17235$Uaprr
                     (case-lambda
                       ((g$x$17286$Uaprr)
                        ((case-lambda
                           ((g$pat-x$17287$Uaprr)
                            ((case-lambda
                               ((g$t$17288$Uaprr)
                                ((case-lambda
                                   ((g$ls/false$17289$Uaprr)
                                    (if g$ls/false$17289$Uaprr
                                      (apply
                                        (case-lambda
                                          ((g$x*$17290$Uaprr)
                                           (list
                                             (g$scheme-stx$16153$Uaprr
                                               'quote)
                                             (g$list->vector$12460$Uaprr
                                               g$x*$17290$Uaprr))))
                                        g$ls/false$17289$Uaprr)
                                      ((case-lambda
                                         ((g$t$17291$Uaprr)
                                          ((case-lambda
                                             ((g$ls/false$17292$Uaprr)
                                              (if g$ls/false$17292$Uaprr
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$17293$Uaprr
                                                                 (case-lambda
                                                                   ((g$x$17294$Uaprr
                                                                      g$k$17295$Uaprr)
                                                                    ((case-lambda
                                                                       ((g$t$17296$Uaprr)
                                                                        ((case-lambda
                                                                           ((g$ls/false$17297$Uaprr)
                                                                            (if g$ls/false$17297$Uaprr
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$17298$Uaprr)
                                                                                   (g$k$17295$Uaprr
                                                                                     (g$map$11722$Uaprr
                                                                                       (case-lambda
                                                                                         ((g$x$17299$Uaprr)
                                                                                          (list
                                                                                            (g$scheme-stx$16153$Uaprr
                                                                                              'quote)
                                                                                            g$x$17299$Uaprr)))
                                                                                       g$x*$17298$Uaprr))))
                                                                                g$ls/false$17297$Uaprr)
                                                                              ((case-lambda
                                                                                 ((g$t$17300$Uaprr)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$17301$Uaprr)
                                                                                      (if g$ls/false$17301$Uaprr
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$17302$Uaprr)
                                                                                             (g$k$17295$Uaprr
                                                                                               g$x*$17302$Uaprr)))
                                                                                          g$ls/false$17301$Uaprr)
                                                                                        ((case-lambda
                                                                                           ((g$t$17303$Uaprr)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$17304$Uaprr)
                                                                                                (if g$ls/false$17304$Uaprr
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$17305$Uaprr
                                                                                                         g$y$17306$Uaprr)
                                                                                                       (g$f$17293$Uaprr
                                                                                                         g$y$17306$Uaprr
                                                                                                         (case-lambda
                                                                                                           ((g$ls$17307$Uaprr)
                                                                                                            (g$k$17295$Uaprr
                                                                                                              (cons
                                                                                                                g$x$17305$Uaprr
                                                                                                                g$ls$17307$Uaprr)))))))
                                                                                                    g$ls/false$17304$Uaprr)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$17308$Uaprr)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$17309$Uaprr)
                                                                                                          (if g$ls/false$17309$Uaprr
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$16153$Uaprr
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$17287$Uaprr)))
                                                                                                              g$ls/false$17309$Uaprr)
                                                                                                            (g$syntax-violation$16329$Uaprr
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$17308$Uaprr))))
                                                                                                       (g$syntax-dispatch$16210$Uaprr
                                                                                                         g$t$17308$Uaprr
                                                                                                         '_))))
                                                                                                   g$t$17303$Uaprr))))
                                                                                             (g$syntax-dispatch$16210$Uaprr
                                                                                               g$t$17303$Uaprr
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$17300$Uaprr))))
                                                                                   (g$syntax-dispatch$16210$Uaprr
                                                                                     g$t$17300$Uaprr
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$17296$Uaprr))))
                                                                         (g$syntax-dispatch$16210$Uaprr
                                                                           g$t$17296$Uaprr
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$17294$Uaprr)))))
                                                        g$f$17293$Uaprr)
                                                      g$x$17286$Uaprr
                                                      (case-lambda
                                                        ((g$ls$17310$Uaprr)
                                                         (g$cons*$11724$Uaprr
                                                           (g$scheme-stx$16153$Uaprr
                                                             'vector)
                                                           g$ls$17310$Uaprr))))))
                                                  g$ls/false$17292$Uaprr)
                                                (g$syntax-violation$16329$Uaprr
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$17291$Uaprr))))
                                           (g$syntax-dispatch$16210$Uaprr
                                             g$t$17291$Uaprr
                                             '_))))
                                       g$t$17288$Uaprr))))
                                 (g$syntax-dispatch$16210$Uaprr
                                   g$t$17288$Uaprr
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$17287$Uaprr)))
                         g$x$17286$Uaprr))))
                   (g$vquasi$17236$Uaprr
                     (case-lambda
                       ((g$p$17269$Uaprr g$lev$17270$Uaprr)
                        ((case-lambda
                           ((g$t$17271$Uaprr)
                            ((case-lambda
                               ((g$ls/false$17272$Uaprr)
                                (if g$ls/false$17272$Uaprr
                                  (apply
                                    (case-lambda
                                      ((g$p$17273$Uaprr g$q$17274$Uaprr)
                                       ((case-lambda
                                          ((g$t$17275$Uaprr)
                                           ((case-lambda
                                              ((g$ls/false$17276$Uaprr)
                                               (if g$ls/false$17276$Uaprr
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$17277$Uaprr)
                                                      (if (= g$lev$17270$Uaprr
                                                             '0)
                                                        (g$quasicons*$17232$Uaprr
                                                          g$p$17277$Uaprr
                                                          (g$vquasi$17236$Uaprr
                                                            g$q$17274$Uaprr
                                                            g$lev$17270$Uaprr))
                                                        (g$quasicons$17233$Uaprr
                                                          (g$quasicons$17233$Uaprr
                                                            (g$datum$17197$Uaprr
                                                              'unquote)
                                                            (g$quasi$17237$Uaprr
                                                              g$p$17277$Uaprr
                                                              (- g$lev$17270$Uaprr
                                                                 '1)))
                                                          (g$vquasi$17236$Uaprr
                                                            g$q$17274$Uaprr
                                                            g$lev$17270$Uaprr)))))
                                                   g$ls/false$17276$Uaprr)
                                                 ((case-lambda
                                                    ((g$t$17278$Uaprr)
                                                     ((case-lambda
                                                        ((g$ls/false$17279$Uaprr)
                                                         (if g$ls/false$17279$Uaprr
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$17280$Uaprr)
                                                                (if (= g$lev$17270$Uaprr
                                                                       '0)
                                                                  (g$quasiappend$17234$Uaprr
                                                                    g$p$17280$Uaprr
                                                                    (g$vquasi$17236$Uaprr
                                                                      g$q$17274$Uaprr
                                                                      g$lev$17270$Uaprr))
                                                                  (g$quasicons$17233$Uaprr
                                                                    (g$quasicons$17233$Uaprr
                                                                      (g$datum$17197$Uaprr
                                                                        'unquote-splicing)
                                                                      (g$quasi$17237$Uaprr
                                                                        g$p$17280$Uaprr
                                                                        (- g$lev$17270$Uaprr
                                                                           '1)))
                                                                    (g$vquasi$17236$Uaprr
                                                                      g$q$17274$Uaprr
                                                                      g$lev$17270$Uaprr)))))
                                                             g$ls/false$17279$Uaprr)
                                                           ((case-lambda
                                                              ((g$t$17281$Uaprr)
                                                               ((case-lambda
                                                                  ((g$ls/false$17282$Uaprr)
                                                                   (if g$ls/false$17282$Uaprr
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$17283$Uaprr)
                                                                          (g$quasicons$17233$Uaprr
                                                                            (g$quasi$17237$Uaprr
                                                                              g$p$17283$Uaprr
                                                                              g$lev$17270$Uaprr)
                                                                            (g$vquasi$17236$Uaprr
                                                                              g$q$17274$Uaprr
                                                                              g$lev$17270$Uaprr))))
                                                                       g$ls/false$17282$Uaprr)
                                                                     (g$syntax-violation$16329$Uaprr
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$17281$Uaprr))))
                                                                (g$syntax-dispatch$16210$Uaprr
                                                                  g$t$17281$Uaprr
                                                                  'any))))
                                                            g$t$17278$Uaprr))))
                                                      (g$syntax-dispatch$16210$Uaprr
                                                        g$t$17278$Uaprr
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$17275$Uaprr))))
                                            (g$syntax-dispatch$16210$Uaprr
                                              g$t$17275$Uaprr
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$17273$Uaprr)))
                                    g$ls/false$17272$Uaprr)
                                  ((case-lambda
                                     ((g$t$17284$Uaprr)
                                      ((case-lambda
                                         ((g$ls/false$17285$Uaprr)
                                          (if g$ls/false$17285$Uaprr
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$16153$Uaprr
                                                     'quote)
                                                   '())))
                                              g$ls/false$17285$Uaprr)
                                            (g$syntax-violation$16329$Uaprr
                                              '#f
                                              '"invalid syntax"
                                              g$t$17284$Uaprr))))
                                       (g$syntax-dispatch$16210$Uaprr
                                         g$t$17284$Uaprr
                                         '()))))
                                   g$t$17271$Uaprr))))
                             (g$syntax-dispatch$16210$Uaprr
                               g$t$17271$Uaprr
                               '(any . any)))))
                         g$p$17269$Uaprr))))
                   (g$quasi$17237$Uaprr
                     (case-lambda
                       ((g$p$17242$Uaprr g$lev$17243$Uaprr)
                        ((case-lambda
                           ((g$t$17244$Uaprr)
                            ((case-lambda
                               ((g$ls/false$17245$Uaprr)
                                (if g$ls/false$17245$Uaprr
                                  (apply
                                    (case-lambda
                                      ((g$p$17246$Uaprr)
                                       (if (= g$lev$17243$Uaprr '0)
                                         g$p$17246$Uaprr
                                         (g$quasicons$17233$Uaprr
                                           (g$datum$17197$Uaprr
                                             'unquote)
                                           (g$quasi$17237$Uaprr
                                             (list g$p$17246$Uaprr)
                                             (- g$lev$17243$Uaprr
                                                '1))))))
                                    g$ls/false$17245$Uaprr)
                                  ((case-lambda
                                     ((g$t$17247$Uaprr)
                                      ((case-lambda
                                         ((g$ls/false$17248$Uaprr)
                                          (if g$ls/false$17248$Uaprr
                                            (apply
                                              (case-lambda
                                                ((g$p$17249$Uaprr
                                                   g$q$17250$Uaprr)
                                                 (if (= g$lev$17243$Uaprr
                                                        '0)
                                                   (g$quasicons*$17232$Uaprr
                                                     g$p$17249$Uaprr
                                                     (g$quasi$17237$Uaprr
                                                       g$q$17250$Uaprr
                                                       g$lev$17243$Uaprr))
                                                   (g$quasicons$17233$Uaprr
                                                     (g$quasicons$17233$Uaprr
                                                       (g$datum$17197$Uaprr
                                                         'unquote)
                                                       (g$quasi$17237$Uaprr
                                                         g$p$17249$Uaprr
                                                         (- g$lev$17243$Uaprr
                                                            '1)))
                                                     (g$quasi$17237$Uaprr
                                                       g$q$17250$Uaprr
                                                       g$lev$17243$Uaprr)))))
                                              g$ls/false$17248$Uaprr)
                                            ((case-lambda
                                               ((g$t$17251$Uaprr)
                                                ((case-lambda
                                                   ((g$ls/false$17252$Uaprr)
                                                    (if g$ls/false$17252$Uaprr
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$17253$Uaprr
                                                             g$q$17254$Uaprr)
                                                           (if (= g$lev$17243$Uaprr
                                                                  '0)
                                                             (g$quasiappend$17234$Uaprr
                                                               g$p$17253$Uaprr
                                                               (g$quasi$17237$Uaprr
                                                                 g$q$17254$Uaprr
                                                                 g$lev$17243$Uaprr))
                                                             (g$quasicons$17233$Uaprr
                                                               (g$quasicons$17233$Uaprr
                                                                 (g$datum$17197$Uaprr
                                                                   'unquote-splicing)
                                                                 (g$quasi$17237$Uaprr
                                                                   g$p$17253$Uaprr
                                                                   (- g$lev$17243$Uaprr
                                                                      '1)))
                                                               (g$quasi$17237$Uaprr
                                                                 g$q$17254$Uaprr
                                                                 g$lev$17243$Uaprr)))))
                                                        g$ls/false$17252$Uaprr)
                                                      ((case-lambda
                                                         ((g$t$17255$Uaprr)
                                                          ((case-lambda
                                                             ((g$ls/false$17256$Uaprr)
                                                              (if g$ls/false$17256$Uaprr
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$17257$Uaprr)
                                                                     (g$quasicons$17233$Uaprr
                                                                       (g$datum$17197$Uaprr
                                                                         'quasiquote)
                                                                       (g$quasi$17237$Uaprr
                                                                         (list
                                                                           g$p$17257$Uaprr)
                                                                         (+ g$lev$17243$Uaprr
                                                                            '1)))))
                                                                  g$ls/false$17256$Uaprr)
                                                                ((case-lambda
                                                                   ((g$t$17258$Uaprr)
                                                                    ((case-lambda
                                                                       ((g$ls/false$17259$Uaprr)
                                                                        (if g$ls/false$17259$Uaprr
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$17260$Uaprr
                                                                                 g$q$17261$Uaprr)
                                                                               (g$quasicons$17233$Uaprr
                                                                                 (g$quasi$17237$Uaprr
                                                                                   g$p$17260$Uaprr
                                                                                   g$lev$17243$Uaprr)
                                                                                 (g$quasi$17237$Uaprr
                                                                                   g$q$17261$Uaprr
                                                                                   g$lev$17243$Uaprr))))
                                                                            g$ls/false$17259$Uaprr)
                                                                          ((case-lambda
                                                                             ((g$t$17262$Uaprr)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$17263$Uaprr)
                                                                                  (if (if g$ls/false$17263$Uaprr
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$17264$Uaprr)
                                                                                               (not (g$stx?$15684$Uaprr
                                                                                                      g$x$17264$Uaprr))))
                                                                                            g$ls/false$17263$Uaprr))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$17265$Uaprr)
                                                                                         (g$quasivector$17235$Uaprr
                                                                                           (g$vquasi$17236$Uaprr
                                                                                             g$x$17265$Uaprr
                                                                                             g$lev$17243$Uaprr))))
                                                                                      g$ls/false$17263$Uaprr)
                                                                                    ((case-lambda
                                                                                       ((g$t$17266$Uaprr)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$17267$Uaprr)
                                                                                            (if g$ls/false$17267$Uaprr
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$17268$Uaprr)
                                                                                                   (list
                                                                                                     (g$scheme-stx$16153$Uaprr
                                                                                                       'quote)
                                                                                                     g$p$17268$Uaprr)))
                                                                                                g$ls/false$17267$Uaprr)
                                                                                              (g$syntax-violation$16329$Uaprr
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$17266$Uaprr))))
                                                                                         (g$syntax-dispatch$16210$Uaprr
                                                                                           g$t$17266$Uaprr
                                                                                           'any))))
                                                                                     g$t$17262$Uaprr))))
                                                                               (g$syntax-dispatch$16210$Uaprr
                                                                                 g$t$17262$Uaprr
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$17258$Uaprr))))
                                                                     (g$syntax-dispatch$16210$Uaprr
                                                                       g$t$17258$Uaprr
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$17255$Uaprr))))
                                                           (g$syntax-dispatch$16210$Uaprr
                                                             g$t$17255$Uaprr
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$17251$Uaprr))))
                                                 (g$syntax-dispatch$16210$Uaprr
                                                   g$t$17251$Uaprr
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$17247$Uaprr))))
                                       (g$syntax-dispatch$16210$Uaprr
                                         g$t$17247$Uaprr
                                         '((#(scheme-id unquote)
                                            .
                                            each-any)
                                           .
                                           any)))))
                                   g$t$17244$Uaprr))))
                             (g$syntax-dispatch$16210$Uaprr
                               g$t$17244$Uaprr
                               '(#(scheme-id unquote) any)))))
                         g$p$17242$Uaprr)))))
           (case-lambda
             ((g$x$17238$Uaprr)
              ((case-lambda
                 ((g$t$17239$Uaprr)
                  ((case-lambda
                     ((g$ls/false$17240$Uaprr)
                      (if g$ls/false$17240$Uaprr
                        (apply
                          (case-lambda
                            ((g$e$17241$Uaprr)
                             (g$quasi$17237$Uaprr g$e$17241$Uaprr '0)))
                          g$ls/false$17240$Uaprr)
                        (g$syntax-violation$16329$Uaprr
                          '#f
                          '"invalid syntax"
                          g$t$17239$Uaprr))))
                   (g$syntax-dispatch$16210$Uaprr
                     g$t$17239$Uaprr
                     '(_ any)))))
               g$x$17238$Uaprr))))))))
   (g$quasisyntax-macro$16202$Uaprr
     g$quasisyntax-macro$19798$Uaprr
     ((case-lambda
        (()
         (letrec* ((g$quasi$17348$Uaprr
                     (case-lambda
                       ((g$p$17362$Uaprr g$lev$17363$Uaprr)
                        ((case-lambda
                           ((g$t$17364$Uaprr)
                            ((case-lambda
                               ((g$ls/false$17365$Uaprr)
                                (if g$ls/false$17365$Uaprr
                                  (apply
                                    (case-lambda
                                      ((g$p$17366$Uaprr)
                                       (if (= g$lev$17363$Uaprr '0)
                                         ((case-lambda
                                            ((g$g$17367$Uaprr)
                                             (values
                                               (list g$g$17367$Uaprr)
                                               (list g$p$17366$Uaprr)
                                               g$g$17367$Uaprr)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$17348$Uaprr
                                                g$p$17366$Uaprr
                                                (- g$lev$17363$Uaprr
                                                   '1))))
                                           (case-lambda
                                             ((g$lhs*$17371$Uaprr
                                                g$rhs*$17372$Uaprr
                                                g$p$17373$Uaprr)
                                              ((case-lambda
                                                 ((g$p$17374$Uaprr
                                                    g$rhs*$17375$Uaprr
                                                    g$lhs*$17376$Uaprr)
                                                  (values
                                                    g$lhs*$17376$Uaprr
                                                    g$rhs*$17375$Uaprr
                                                    (list
                                                      'unsyntax
                                                      g$p$17374$Uaprr))))
                                               g$p$17373$Uaprr
                                               g$rhs*$17372$Uaprr
                                               g$lhs*$17371$Uaprr)))))))
                                    g$ls/false$17365$Uaprr)
                                  ((case-lambda
                                     ((g$t$17377$Uaprr)
                                      ((case-lambda
                                         ((g$ls/false$17378$Uaprr)
                                          (if (if g$ls/false$17378$Uaprr
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$17363$Uaprr
                                                          '0)))
                                                    g$ls/false$17378$Uaprr))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$16329$Uaprr
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$17362$Uaprr)))
                                              g$ls/false$17378$Uaprr)
                                            ((case-lambda
                                               ((g$t$17379$Uaprr)
                                                ((case-lambda
                                                   ((g$ls/false$17380$Uaprr)
                                                    (if g$ls/false$17380$Uaprr
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$17381$Uaprr
                                                             g$q$17382$Uaprr)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$17348$Uaprr
                                                                  g$q$17382$Uaprr
                                                                  g$lev$17363$Uaprr)))
                                                             (case-lambda
                                                               ((g$lhs*$17386$Uaprr
                                                                  g$rhs*$17387$Uaprr
                                                                  g$q$17388$Uaprr)
                                                                ((case-lambda
                                                                   ((g$q$17389$Uaprr
                                                                      g$rhs*$17390$Uaprr
                                                                      g$lhs*$17391$Uaprr)
                                                                    (if (= g$lev$17363$Uaprr
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$17392$Uaprr)
                                                                          (values
                                                                            (append
                                                                              g$g*$17392$Uaprr
                                                                              g$lhs*$17391$Uaprr)
                                                                            (append
                                                                              g$p*$17381$Uaprr
                                                                              g$rhs*$17390$Uaprr)
                                                                            (append
                                                                              g$g*$17392$Uaprr
                                                                              g$q$17389$Uaprr))))
                                                                       (g$map$11722$Uaprr
                                                                         (case-lambda
                                                                           ((g$x$17393$Uaprr)
                                                                            (gensym)))
                                                                         g$p*$17381$Uaprr))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$17348$Uaprr
                                                                             g$p*$17381$Uaprr
                                                                             (- g$lev$17363$Uaprr
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$17397$Uaprr
                                                                             g$rhs2*$17398$Uaprr
                                                                             g$p*$17399$Uaprr)
                                                                           ((case-lambda
                                                                              ((g$p*$17400$Uaprr
                                                                                 g$rhs2*$17401$Uaprr
                                                                                 g$lhs2*$17402$Uaprr)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$17402$Uaprr
                                                                                   g$lhs*$17391$Uaprr)
                                                                                 (append
                                                                                   g$rhs2*$17401$Uaprr
                                                                                   g$rhs*$17390$Uaprr)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$17400$Uaprr)
                                                                                   g$q$17389$Uaprr))))
                                                                            g$p*$17399$Uaprr
                                                                            g$rhs2*$17398$Uaprr
                                                                            g$lhs2*$17397$Uaprr)))))))
                                                                 g$q$17388$Uaprr
                                                                 g$rhs*$17387$Uaprr
                                                                 g$lhs*$17386$Uaprr))))))
                                                        g$ls/false$17380$Uaprr)
                                                      ((case-lambda
                                                         ((g$t$17403$Uaprr)
                                                          ((case-lambda
                                                             ((g$ls/false$17404$Uaprr)
                                                              (if g$ls/false$17404$Uaprr
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$17405$Uaprr
                                                                       g$q$17406$Uaprr)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$17348$Uaprr
                                                                            g$q$17406$Uaprr
                                                                            g$lev$17363$Uaprr)))
                                                                       (case-lambda
                                                                         ((g$lhs*$17410$Uaprr
                                                                            g$rhs*$17411$Uaprr
                                                                            g$q$17412$Uaprr)
                                                                          ((case-lambda
                                                                             ((g$q$17413$Uaprr
                                                                                g$rhs*$17414$Uaprr
                                                                                g$lhs*$17415$Uaprr)
                                                                              (if (= g$lev$17363$Uaprr
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$17416$Uaprr)
                                                                                    (values
                                                                                      (append
                                                                                        (g$map$11722$Uaprr
                                                                                          (case-lambda
                                                                                            ((g$g$17417$Uaprr)
                                                                                             (cons
                                                                                               g$g$17417$Uaprr
                                                                                               '(...))))
                                                                                          g$g*$17416$Uaprr)
                                                                                        g$lhs*$17415$Uaprr)
                                                                                      (append
                                                                                        g$p*$17405$Uaprr
                                                                                        g$rhs*$17414$Uaprr)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (g$map$11722$Uaprr
                                                                                            (case-lambda
                                                                                              ((g$g$17418$Uaprr)
                                                                                               (cons
                                                                                                 g$g$17418$Uaprr
                                                                                                 '(...))))
                                                                                            g$g*$17416$Uaprr))
                                                                                        g$q$17413$Uaprr))))
                                                                                 (g$map$11722$Uaprr
                                                                                   (case-lambda
                                                                                     ((g$x$17419$Uaprr)
                                                                                      (gensym)))
                                                                                   g$p*$17405$Uaprr))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$17348$Uaprr
                                                                                       g$p*$17405$Uaprr
                                                                                       (- g$lev$17363$Uaprr
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$17423$Uaprr
                                                                                       g$rhs2*$17424$Uaprr
                                                                                       g$p*$17425$Uaprr)
                                                                                     ((case-lambda
                                                                                        ((g$p*$17426$Uaprr
                                                                                           g$rhs2*$17427$Uaprr
                                                                                           g$lhs2*$17428$Uaprr)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$17428$Uaprr
                                                                                             g$lhs*$17415$Uaprr)
                                                                                           (append
                                                                                             g$rhs2*$17427$Uaprr
                                                                                             g$rhs*$17414$Uaprr)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$17426$Uaprr)
                                                                                             g$q$17413$Uaprr))))
                                                                                      g$p*$17425$Uaprr
                                                                                      g$rhs2*$17424$Uaprr
                                                                                      g$lhs2*$17423$Uaprr)))))))
                                                                           g$q$17412$Uaprr
                                                                           g$rhs*$17411$Uaprr
                                                                           g$lhs*$17410$Uaprr))))))
                                                                  g$ls/false$17404$Uaprr)
                                                                ((case-lambda
                                                                   ((g$t$17429$Uaprr)
                                                                    ((case-lambda
                                                                       ((g$ls/false$17430$Uaprr)
                                                                        (if (if g$ls/false$17430$Uaprr
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$17363$Uaprr
                                                                                        '0)))
                                                                                  g$ls/false$17430$Uaprr))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$16329$Uaprr
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$17362$Uaprr)))
                                                                            g$ls/false$17430$Uaprr)
                                                                          ((case-lambda
                                                                             ((g$t$17431$Uaprr)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$17432$Uaprr)
                                                                                  (if g$ls/false$17432$Uaprr
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$17433$Uaprr)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$17348$Uaprr
                                                                                                g$p$17433$Uaprr
                                                                                                (+ g$lev$17363$Uaprr
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$17437$Uaprr
                                                                                                g$rhs*$17438$Uaprr
                                                                                                g$p$17439$Uaprr)
                                                                                              ((case-lambda
                                                                                                 ((g$p$17440$Uaprr
                                                                                                    g$rhs*$17441$Uaprr
                                                                                                    g$lhs*$17442$Uaprr)
                                                                                                  (values
                                                                                                    g$lhs*$17442$Uaprr
                                                                                                    g$rhs*$17441$Uaprr
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$17440$Uaprr))))
                                                                                               g$p$17439$Uaprr
                                                                                               g$rhs*$17438$Uaprr
                                                                                               g$lhs*$17437$Uaprr))))))
                                                                                      g$ls/false$17432$Uaprr)
                                                                                    ((case-lambda
                                                                                       ((g$t$17443$Uaprr)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$17444$Uaprr)
                                                                                            (if g$ls/false$17444$Uaprr
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$17445$Uaprr
                                                                                                     g$q$17446$Uaprr)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$17348$Uaprr
                                                                                                          g$p$17445$Uaprr
                                                                                                          g$lev$17363$Uaprr)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$17453$Uaprr
                                                                                                          g$rhs*$17454$Uaprr
                                                                                                          g$p$17455$Uaprr)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$17348$Uaprr
                                                                                                               g$q$17446$Uaprr
                                                                                                               g$lev$17363$Uaprr)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$17456$Uaprr
                                                                                                               g$rhs2*$17457$Uaprr
                                                                                                               g$q$17458$Uaprr)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$17459$Uaprr
                                                                                                                   g$rhs2*$17460$Uaprr
                                                                                                                   g$lhs2*$17461$Uaprr
                                                                                                                   g$p$17462$Uaprr
                                                                                                                   g$rhs*$17463$Uaprr
                                                                                                                   g$lhs*$17464$Uaprr)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$17461$Uaprr
                                                                                                                     g$lhs*$17464$Uaprr)
                                                                                                                   (append
                                                                                                                     g$rhs2*$17460$Uaprr
                                                                                                                     g$rhs*$17463$Uaprr)
                                                                                                                   (cons
                                                                                                                     g$p$17462$Uaprr
                                                                                                                     g$q$17459$Uaprr))))
                                                                                                              g$q$17458$Uaprr
                                                                                                              g$rhs2*$17457$Uaprr
                                                                                                              g$lhs2*$17456$Uaprr
                                                                                                              g$p$17455$Uaprr
                                                                                                              g$rhs*$17454$Uaprr
                                                                                                              g$lhs*$17453$Uaprr)))))))))
                                                                                                g$ls/false$17444$Uaprr)
                                                                                              ((case-lambda
                                                                                                 ((g$t$17465$Uaprr)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$17466$Uaprr)
                                                                                                      (if g$ls/false$17466$Uaprr
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$17467$Uaprr)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$17348$Uaprr
                                                                                                                    g$x*$17467$Uaprr
                                                                                                                    g$lev$17363$Uaprr)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$17471$Uaprr
                                                                                                                    g$rhs*$17472$Uaprr
                                                                                                                    g$x*$17473$Uaprr)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$17474$Uaprr
                                                                                                                        g$rhs*$17475$Uaprr
                                                                                                                        g$lhs*$17476$Uaprr)
                                                                                                                      (values
                                                                                                                        g$lhs*$17476$Uaprr
                                                                                                                        g$rhs*$17475$Uaprr
                                                                                                                        (g$list->vector$12460$Uaprr
                                                                                                                          g$x*$17474$Uaprr))))
                                                                                                                   g$x*$17473$Uaprr
                                                                                                                   g$rhs*$17472$Uaprr
                                                                                                                   g$lhs*$17471$Uaprr))))))
                                                                                                          g$ls/false$17466$Uaprr)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$17477$Uaprr)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$17478$Uaprr)
                                                                                                                (if g$ls/false$17478$Uaprr
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$17362$Uaprr)))
                                                                                                                    g$ls/false$17478$Uaprr)
                                                                                                                  (g$syntax-violation$16329$Uaprr
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$17477$Uaprr))))
                                                                                                             (g$syntax-dispatch$16210$Uaprr
                                                                                                               g$t$17477$Uaprr
                                                                                                               '_))))
                                                                                                         g$t$17465$Uaprr))))
                                                                                                   (g$syntax-dispatch$16210$Uaprr
                                                                                                     g$t$17465$Uaprr
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$17443$Uaprr))))
                                                                                         (g$syntax-dispatch$16210$Uaprr
                                                                                           g$t$17443$Uaprr
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$17431$Uaprr))))
                                                                               (g$syntax-dispatch$16210$Uaprr
                                                                                 g$t$17431$Uaprr
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$17429$Uaprr))))
                                                                     (g$syntax-dispatch$16210$Uaprr
                                                                       g$t$17429$Uaprr
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$17403$Uaprr))))
                                                           (g$syntax-dispatch$16210$Uaprr
                                                             g$t$17403$Uaprr
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$17379$Uaprr))))
                                                 (g$syntax-dispatch$16210$Uaprr
                                                   g$t$17379$Uaprr
                                                   '((#(scheme-id
                                                        unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$17377$Uaprr))))
                                       (g$syntax-dispatch$16210$Uaprr
                                         g$t$17377$Uaprr
                                         '#(scheme-id unsyntax)))))
                                   g$t$17364$Uaprr))))
                             (g$syntax-dispatch$16210$Uaprr
                               g$t$17364$Uaprr
                               '(#(scheme-id unsyntax) any)))))
                         g$p$17362$Uaprr)))))
           (case-lambda
             ((g$x$17349$Uaprr)
              ((case-lambda
                 ((g$t$17350$Uaprr)
                  ((case-lambda
                     ((g$ls/false$17351$Uaprr)
                      (if g$ls/false$17351$Uaprr
                        (apply
                          (case-lambda
                            ((g$e$17352$Uaprr)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$quasi$17348$Uaprr
                                    g$e$17352$Uaprr
                                    '0)))
                               (case-lambda
                                 ((g$lhs*$17356$Uaprr
                                    g$rhs*$17357$Uaprr
                                    g$v$17358$Uaprr)
                                  ((case-lambda
                                     ((g$v$17359$Uaprr
                                        g$rhs*$17360$Uaprr
                                        g$lhs*$17361$Uaprr)
                                      (g$bless$16173$Uaprr
                                        (list
                                          'syntax-case
                                          (cons
                                            'list
                                            g$rhs*$17360$Uaprr)
                                          '()
                                          (list
                                            g$lhs*$17361$Uaprr
                                            (list
                                              'syntax
                                              g$v$17359$Uaprr))))))
                                   g$v$17358$Uaprr
                                   g$rhs*$17357$Uaprr
                                   g$lhs*$17356$Uaprr))))))
                          g$ls/false$17351$Uaprr)
                        (g$syntax-violation$16329$Uaprr
                          '#f
                          '"invalid syntax"
                          g$t$17350$Uaprr))))
                   (g$syntax-dispatch$16210$Uaprr
                     g$t$17350$Uaprr
                     '(_ any)))))
               g$x$17349$Uaprr))))))))
   (g$define-struct-macro$16203$Uaprr
     g$define-struct-macro$19799$Uaprr
     (case-lambda
       ((g$stx$17479$Uaprr)
        (g$syntax-violation$16329$Uaprr
          '#f
          '"define-struct not supported"
          g$stx$17479$Uaprr))))
   (g$define-record-type-macro$16204$Uaprr
     g$define-record-type-macro$19800$Uaprr
     (case-lambda
       ((g$x$17480$Uaprr)
        (letrec* ((g$id$17481$Uaprr
                    (case-lambda
                      ((g$ctxt$17733$Uaprr . g$str*$17734$Uaprr)
                       (g$datum->syntax$16331$Uaprr
                         g$ctxt$17733$Uaprr
                         (string->symbol
                           (apply
                             string-append
                             (g$map$11722$Uaprr
                               (case-lambda
                                 ((g$x$17735$Uaprr)
                                  (if (g$symbol?$12465$Uaprr
                                        g$x$17735$Uaprr)
                                    (symbol->string g$x$17735$Uaprr)
                                    (if (string? g$x$17735$Uaprr)
                                      g$x$17735$Uaprr
                                      (assertion-violation
                                        'define-record-type
                                        '"BUG")))))
                               g$str*$17734$Uaprr)))))))
                  (g$get-record-name$17482$Uaprr
                    (case-lambda
                      ((g$spec$17724$Uaprr)
                       ((case-lambda
                          ((g$t$17725$Uaprr)
                           ((case-lambda
                              ((g$ls/false$17726$Uaprr)
                               (if g$ls/false$17726$Uaprr
                                 (apply
                                   (case-lambda
                                     ((g$foo$17727$Uaprr
                                        g$make-foo$17728$Uaprr
                                        g$foo?$17729$Uaprr)
                                      g$foo$17727$Uaprr))
                                   g$ls/false$17726$Uaprr)
                                 ((case-lambda
                                    ((g$t$17730$Uaprr)
                                     ((case-lambda
                                        ((g$ls/false$17731$Uaprr)
                                         (if g$ls/false$17731$Uaprr
                                           (apply
                                             (case-lambda
                                               ((g$foo$17732$Uaprr)
                                                g$foo$17732$Uaprr))
                                             g$ls/false$17731$Uaprr)
                                           (g$syntax-violation$16329$Uaprr
                                             '#f
                                             '"invalid syntax"
                                             g$t$17730$Uaprr))))
                                      (g$syntax-dispatch$16210$Uaprr
                                        g$t$17730$Uaprr
                                        'any))))
                                  g$t$17725$Uaprr))))
                            (g$syntax-dispatch$16210$Uaprr
                              g$t$17725$Uaprr
                              '(any any any)))))
                        g$spec$17724$Uaprr))))
                  (g$get-record-constructor-name$17483$Uaprr
                    (case-lambda
                      ((g$spec$17714$Uaprr)
                       ((case-lambda
                          ((g$t$17715$Uaprr)
                           ((case-lambda
                              ((g$ls/false$17716$Uaprr)
                               (if g$ls/false$17716$Uaprr
                                 (apply
                                   (case-lambda
                                     ((g$foo$17717$Uaprr
                                        g$make-foo$17718$Uaprr
                                        g$foo?$17719$Uaprr)
                                      g$make-foo$17718$Uaprr))
                                   g$ls/false$17716$Uaprr)
                                 ((case-lambda
                                    ((g$t$17720$Uaprr)
                                     ((case-lambda
                                        ((g$ls/false$17721$Uaprr)
                                         (if (if g$ls/false$17721$Uaprr
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$17722$Uaprr)
                                                      (g$id?$15712$Uaprr
                                                        g$foo$17722$Uaprr)))
                                                   g$ls/false$17721$Uaprr))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$17723$Uaprr)
                                                (g$id$17481$Uaprr
                                                  g$foo$17723$Uaprr
                                                  '"make-"
                                                  (g$stx->datum$15723$Uaprr
                                                    g$foo$17723$Uaprr))))
                                             g$ls/false$17721$Uaprr)
                                           (g$syntax-violation$16329$Uaprr
                                             '#f
                                             '"invalid syntax"
                                             g$t$17720$Uaprr))))
                                      (g$syntax-dispatch$16210$Uaprr
                                        g$t$17720$Uaprr
                                        'any))))
                                  g$t$17715$Uaprr))))
                            (g$syntax-dispatch$16210$Uaprr
                              g$t$17715$Uaprr
                              '(any any any)))))
                        g$spec$17714$Uaprr))))
                  (g$get-record-predicate-name$17484$Uaprr
                    (case-lambda
                      ((g$spec$17704$Uaprr)
                       ((case-lambda
                          ((g$t$17705$Uaprr)
                           ((case-lambda
                              ((g$ls/false$17706$Uaprr)
                               (if g$ls/false$17706$Uaprr
                                 (apply
                                   (case-lambda
                                     ((g$foo$17707$Uaprr
                                        g$make-foo$17708$Uaprr
                                        g$foo?$17709$Uaprr)
                                      g$foo?$17709$Uaprr))
                                   g$ls/false$17706$Uaprr)
                                 ((case-lambda
                                    ((g$t$17710$Uaprr)
                                     ((case-lambda
                                        ((g$ls/false$17711$Uaprr)
                                         (if (if g$ls/false$17711$Uaprr
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$17712$Uaprr)
                                                      (g$id?$15712$Uaprr
                                                        g$foo$17712$Uaprr)))
                                                   g$ls/false$17711$Uaprr))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$17713$Uaprr)
                                                (g$id$17481$Uaprr
                                                  g$foo$17713$Uaprr
                                                  (g$stx->datum$15723$Uaprr
                                                    g$foo$17713$Uaprr)
                                                  '"?")))
                                             g$ls/false$17711$Uaprr)
                                           (g$syntax-violation$16329$Uaprr
                                             '#f
                                             '"invalid syntax"
                                             g$t$17710$Uaprr))))
                                      (g$syntax-dispatch$16210$Uaprr
                                        g$t$17710$Uaprr
                                        'any))))
                                  g$t$17705$Uaprr))))
                            (g$syntax-dispatch$16210$Uaprr
                              g$t$17705$Uaprr
                              '(any any any)))))
                        g$spec$17704$Uaprr))))
                  (g$get-clause$17485$Uaprr
                    (case-lambda
                      ((g$id$17695$Uaprr g$ls$17696$Uaprr)
                       ((case-lambda
                          ((g$t$17697$Uaprr)
                           ((case-lambda
                              ((g$ls/false$17698$Uaprr)
                               (if g$ls/false$17698$Uaprr
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$17698$Uaprr)
                                 ((case-lambda
                                    ((g$t$17699$Uaprr)
                                     ((case-lambda
                                        ((g$ls/false$17700$Uaprr)
                                         (if g$ls/false$17700$Uaprr
                                           (apply
                                             (case-lambda
                                               ((g$x$17701$Uaprr
                                                  g$rest$17702$Uaprr
                                                  g$ls$17703$Uaprr)
                                                (if (g$free-id=?$15716$Uaprr
                                                      (g$bless$16173$Uaprr
                                                        g$id$17695$Uaprr)
                                                      g$x$17701$Uaprr)
                                                  (cons
                                                    g$x$17701$Uaprr
                                                    g$rest$17702$Uaprr)
                                                  (g$get-clause$17485$Uaprr
                                                    g$id$17695$Uaprr
                                                    g$ls$17703$Uaprr))))
                                             g$ls/false$17700$Uaprr)
                                           (g$syntax-violation$16329$Uaprr
                                             '#f
                                             '"invalid syntax"
                                             g$t$17699$Uaprr))))
                                      (g$syntax-dispatch$16210$Uaprr
                                        g$t$17699$Uaprr
                                        '((any . any) . any)))))
                                  g$t$17697$Uaprr))))
                            (g$syntax-dispatch$16210$Uaprr
                              g$t$17697$Uaprr
                              '()))))
                        g$ls$17696$Uaprr))))
                  (g$foo-rtd-code$17486$Uaprr
                    (case-lambda
                      ((g$name$17654$Uaprr
                         g$clause*$17655$Uaprr
                         g$parent-rtd-code$17656$Uaprr)
                       (letrec* ((g$convert-field-spec*$17657$Uaprr
                                   (case-lambda
                                     ((g$ls$17682$Uaprr)
                                      (g$list->vector$12460$Uaprr
                                        (g$map$11722$Uaprr
                                          (case-lambda
                                            ((g$x$17683$Uaprr)
                                             ((case-lambda
                                                ((g$t$17684$Uaprr)
                                                 ((case-lambda
                                                    ((g$ls/false$17685$Uaprr)
                                                     (if g$ls/false$17685$Uaprr
                                                       (apply
                                                         (case-lambda
                                                           ((g$name$17686$Uaprr
                                                              g$rest$17687$Uaprr)
                                                            (list
                                                              'mutable
                                                              g$name$17686$Uaprr)))
                                                         g$ls/false$17685$Uaprr)
                                                       ((case-lambda
                                                          ((g$t$17688$Uaprr)
                                                           ((case-lambda
                                                              ((g$ls/false$17689$Uaprr)
                                                               (if g$ls/false$17689$Uaprr
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$name$17690$Uaprr
                                                                        g$rest$17691$Uaprr)
                                                                      (list
                                                                        'immutable
                                                                        g$name$17690$Uaprr)))
                                                                   g$ls/false$17689$Uaprr)
                                                                 ((case-lambda
                                                                    ((g$t$17692$Uaprr)
                                                                     ((case-lambda
                                                                        ((g$ls/false$17693$Uaprr)
                                                                         (if g$ls/false$17693$Uaprr
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$name$17694$Uaprr)
                                                                                (list
                                                                                  'immutable
                                                                                  g$name$17694$Uaprr)))
                                                                             g$ls/false$17693$Uaprr)
                                                                           (g$syntax-violation$16329$Uaprr
                                                                             '#f
                                                                             '"invalid syntax"
                                                                             g$t$17692$Uaprr))))
                                                                      (g$syntax-dispatch$16210$Uaprr
                                                                        g$t$17692$Uaprr
                                                                        'any))))
                                                                  g$t$17688$Uaprr))))
                                                            (g$syntax-dispatch$16210$Uaprr
                                                              g$t$17688$Uaprr
                                                              '(#(scheme-id
                                                                  immutable)
                                                                any
                                                                .
                                                                any)))))
                                                        g$t$17684$Uaprr))))
                                                  (g$syntax-dispatch$16210$Uaprr
                                                    g$t$17684$Uaprr
                                                    '(#(scheme-id
                                                        mutable)
                                                      any
                                                      .
                                                      any)))))
                                              g$x$17683$Uaprr)))
                                          g$ls$17682$Uaprr))))))
                         ((case-lambda
                            ((g$uid-code$17658$Uaprr
                               g$sealed?$17659$Uaprr
                               g$opaque?$17660$Uaprr
                               g$fields$17661$Uaprr)
                             (g$bless$16173$Uaprr
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$17654$Uaprr)
                                 g$parent-rtd-code$17656$Uaprr
                                 g$uid-code$17658$Uaprr
                                 g$sealed?$17659$Uaprr
                                 g$opaque?$17660$Uaprr
                                 g$fields$17661$Uaprr))))
                          ((case-lambda
                             ((g$t$17662$Uaprr)
                              ((case-lambda
                                 ((g$ls/false$17663$Uaprr)
                                  (if g$ls/false$17663$Uaprr
                                    (apply
                                      (case-lambda
                                        (() (list 'quote (gensym))))
                                      g$ls/false$17663$Uaprr)
                                    ((case-lambda
                                       ((g$t$17664$Uaprr)
                                        ((case-lambda
                                           ((g$ls/false$17665$Uaprr)
                                            (if g$ls/false$17665$Uaprr
                                              (apply
                                                (case-lambda
                                                  ((g$uid$17666$Uaprr)
                                                   (list
                                                     'quote
                                                     g$uid$17666$Uaprr)))
                                                g$ls/false$17665$Uaprr)
                                              ((case-lambda
                                                 ((g$t$17667$Uaprr)
                                                  ((case-lambda
                                                     ((g$ls/false$17668$Uaprr)
                                                      (if g$ls/false$17668$Uaprr
                                                        (apply
                                                          (case-lambda
                                                            (() '#f))
                                                          g$ls/false$17668$Uaprr)
                                                        (g$syntax-violation$16329$Uaprr
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$17667$Uaprr))))
                                                   (g$syntax-dispatch$16210$Uaprr
                                                     g$t$17667$Uaprr
                                                     '_))))
                                               g$t$17664$Uaprr))))
                                         (g$syntax-dispatch$16210$Uaprr
                                           g$t$17664$Uaprr
                                           '(_ any)))))
                                     g$t$17662$Uaprr))))
                               (g$syntax-dispatch$16210$Uaprr
                                 g$t$17662$Uaprr
                                 '(_)))))
                           (g$get-clause$17485$Uaprr
                             'nongenerative
                             g$clause*$17655$Uaprr))
                          ((case-lambda
                             ((g$t$17669$Uaprr)
                              ((case-lambda
                                 ((g$ls/false$17670$Uaprr)
                                  (if g$ls/false$17670$Uaprr
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$17670$Uaprr)
                                    ((case-lambda
                                       ((g$t$17671$Uaprr)
                                        ((case-lambda
                                           ((g$ls/false$17672$Uaprr)
                                            (if g$ls/false$17672$Uaprr
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$17672$Uaprr)
                                              (g$syntax-violation$16329$Uaprr
                                                '#f
                                                '"invalid syntax"
                                                g$t$17671$Uaprr))))
                                         (g$syntax-dispatch$16210$Uaprr
                                           g$t$17671$Uaprr
                                           '_))))
                                     g$t$17669$Uaprr))))
                               (g$syntax-dispatch$16210$Uaprr
                                 g$t$17669$Uaprr
                                 '(_ #(atom #t))))))
                           (g$get-clause$17485$Uaprr
                             'sealed
                             g$clause*$17655$Uaprr))
                          ((case-lambda
                             ((g$t$17673$Uaprr)
                              ((case-lambda
                                 ((g$ls/false$17674$Uaprr)
                                  (if g$ls/false$17674$Uaprr
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$17674$Uaprr)
                                    ((case-lambda
                                       ((g$t$17675$Uaprr)
                                        ((case-lambda
                                           ((g$ls/false$17676$Uaprr)
                                            (if g$ls/false$17676$Uaprr
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$17676$Uaprr)
                                              (g$syntax-violation$16329$Uaprr
                                                '#f
                                                '"invalid syntax"
                                                g$t$17675$Uaprr))))
                                         (g$syntax-dispatch$16210$Uaprr
                                           g$t$17675$Uaprr
                                           '_))))
                                     g$t$17673$Uaprr))))
                               (g$syntax-dispatch$16210$Uaprr
                                 g$t$17673$Uaprr
                                 '(_ #(atom #t))))))
                           (g$get-clause$17485$Uaprr
                             'opaque
                             g$clause*$17655$Uaprr))
                          ((case-lambda
                             ((g$t$17677$Uaprr)
                              ((case-lambda
                                 ((g$ls/false$17678$Uaprr)
                                  (if g$ls/false$17678$Uaprr
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$17679$Uaprr)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$17657$Uaprr
                                             g$field-spec*$17679$Uaprr))))
                                      g$ls/false$17678$Uaprr)
                                    ((case-lambda
                                       ((g$t$17680$Uaprr)
                                        ((case-lambda
                                           ((g$ls/false$17681$Uaprr)
                                            (if g$ls/false$17681$Uaprr
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$17681$Uaprr)
                                              (g$syntax-violation$16329$Uaprr
                                                '#f
                                                '"invalid syntax"
                                                g$t$17680$Uaprr))))
                                         (g$syntax-dispatch$16210$Uaprr
                                           g$t$17680$Uaprr
                                           '_))))
                                     g$t$17677$Uaprr))))
                               (g$syntax-dispatch$16210$Uaprr
                                 g$t$17677$Uaprr
                                 '(_ . each-any)))))
                           (g$get-clause$17485$Uaprr
                             'fields
                             g$clause*$17655$Uaprr)))))))
                  (g$parent-rtd-code$17487$Uaprr
                    (case-lambda
                      ((g$clause*$17642$Uaprr)
                       ((case-lambda
                          ((g$t$17643$Uaprr)
                           ((case-lambda
                              ((g$ls/false$17644$Uaprr)
                               (if g$ls/false$17644$Uaprr
                                 (apply
                                   (case-lambda
                                     ((g$name$17645$Uaprr)
                                      (list
                                        'record-type-descriptor
                                        g$name$17645$Uaprr)))
                                   g$ls/false$17644$Uaprr)
                                 ((case-lambda
                                    ((g$t$17646$Uaprr)
                                     ((case-lambda
                                        ((g$ls/false$17647$Uaprr)
                                         (if g$ls/false$17647$Uaprr
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$17648$Uaprr)
                                                    ((case-lambda
                                                       ((g$ls/false$17649$Uaprr)
                                                        (if g$ls/false$17649$Uaprr
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$17650$Uaprr
                                                                 g$rcd$17651$Uaprr)
                                                               g$rtd$17650$Uaprr))
                                                            g$ls/false$17649$Uaprr)
                                                          ((case-lambda
                                                             ((g$t$17652$Uaprr)
                                                              ((case-lambda
                                                                 ((g$ls/false$17653$Uaprr)
                                                                  (if g$ls/false$17653$Uaprr
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$17653$Uaprr)
                                                                    (g$syntax-violation$16329$Uaprr
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$17652$Uaprr))))
                                                               (g$syntax-dispatch$16210$Uaprr
                                                                 g$t$17652$Uaprr
                                                                 '#(atom
                                                                    #f)))))
                                                           g$t$17648$Uaprr))))
                                                     (g$syntax-dispatch$16210$Uaprr
                                                       g$t$17648$Uaprr
                                                       '(_ any any)))))
                                                 (g$get-clause$17485$Uaprr
                                                   'parent-rtd
                                                   g$clause*$17642$Uaprr))))
                                             g$ls/false$17647$Uaprr)
                                           (g$syntax-violation$16329$Uaprr
                                             '#f
                                             '"invalid syntax"
                                             g$t$17646$Uaprr))))
                                      (g$syntax-dispatch$16210$Uaprr
                                        g$t$17646$Uaprr
                                        '#(atom #f)))))
                                  g$t$17643$Uaprr))))
                            (g$syntax-dispatch$16210$Uaprr
                              g$t$17643$Uaprr
                              '(_ any)))))
                        (g$get-clause$17485$Uaprr
                          'parent
                          g$clause*$17642$Uaprr)))))
                  (g$parent-rcd-code$17488$Uaprr
                    (case-lambda
                      ((g$clause*$17630$Uaprr)
                       ((case-lambda
                          ((g$t$17631$Uaprr)
                           ((case-lambda
                              ((g$ls/false$17632$Uaprr)
                               (if g$ls/false$17632$Uaprr
                                 (apply
                                   (case-lambda
                                     ((g$name$17633$Uaprr)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$17633$Uaprr)))
                                   g$ls/false$17632$Uaprr)
                                 ((case-lambda
                                    ((g$t$17634$Uaprr)
                                     ((case-lambda
                                        ((g$ls/false$17635$Uaprr)
                                         (if g$ls/false$17635$Uaprr
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$17636$Uaprr)
                                                    ((case-lambda
                                                       ((g$ls/false$17637$Uaprr)
                                                        (if g$ls/false$17637$Uaprr
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$17638$Uaprr
                                                                 g$rcd$17639$Uaprr)
                                                               g$rcd$17639$Uaprr))
                                                            g$ls/false$17637$Uaprr)
                                                          ((case-lambda
                                                             ((g$t$17640$Uaprr)
                                                              ((case-lambda
                                                                 ((g$ls/false$17641$Uaprr)
                                                                  (if g$ls/false$17641$Uaprr
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$17641$Uaprr)
                                                                    (g$syntax-violation$16329$Uaprr
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$17640$Uaprr))))
                                                               (g$syntax-dispatch$16210$Uaprr
                                                                 g$t$17640$Uaprr
                                                                 '#(atom
                                                                    #f)))))
                                                           g$t$17636$Uaprr))))
                                                     (g$syntax-dispatch$16210$Uaprr
                                                       g$t$17636$Uaprr
                                                       '(_ any any)))))
                                                 (g$get-clause$17485$Uaprr
                                                   'parent-rtd
                                                   g$clause*$17630$Uaprr))))
                                             g$ls/false$17635$Uaprr)
                                           (g$syntax-violation$16329$Uaprr
                                             '#f
                                             '"invalid syntax"
                                             g$t$17634$Uaprr))))
                                      (g$syntax-dispatch$16210$Uaprr
                                        g$t$17634$Uaprr
                                        '#(atom #f)))))
                                  g$t$17631$Uaprr))))
                            (g$syntax-dispatch$16210$Uaprr
                              g$t$17631$Uaprr
                              '(_ any)))))
                        (g$get-clause$17485$Uaprr
                          'parent
                          g$clause*$17630$Uaprr)))))
                  (g$foo-rcd-code$17489$Uaprr
                    (case-lambda
                      ((g$clause*$17626$Uaprr
                         g$foo-rtd$17627$Uaprr
                         g$protocol$17628$Uaprr
                         g$parent-rcd-code$17629$Uaprr)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$17627$Uaprr
                         g$parent-rcd-code$17629$Uaprr
                         g$protocol$17628$Uaprr))))
                  (g$get-protocol-code$17490$Uaprr
                    (case-lambda
                      ((g$clause*$17620$Uaprr)
                       ((case-lambda
                          ((g$t$17621$Uaprr)
                           ((case-lambda
                              ((g$ls/false$17622$Uaprr)
                               (if g$ls/false$17622$Uaprr
                                 (apply
                                   (case-lambda
                                     ((g$expr$17623$Uaprr)
                                      g$expr$17623$Uaprr))
                                   g$ls/false$17622$Uaprr)
                                 ((case-lambda
                                    ((g$t$17624$Uaprr)
                                     ((case-lambda
                                        ((g$ls/false$17625$Uaprr)
                                         (if g$ls/false$17625$Uaprr
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$17625$Uaprr)
                                           (g$syntax-violation$16329$Uaprr
                                             '#f
                                             '"invalid syntax"
                                             g$t$17624$Uaprr))))
                                      (g$syntax-dispatch$16210$Uaprr
                                        g$t$17624$Uaprr
                                        '_))))
                                  g$t$17621$Uaprr))))
                            (g$syntax-dispatch$16210$Uaprr
                              g$t$17621$Uaprr
                              '(_ any)))))
                        (g$get-clause$17485$Uaprr
                          'protocol
                          g$clause*$17620$Uaprr)))))
                  (g$get-fields$17491$Uaprr
                    (case-lambda
                      ((g$clause*$17611$Uaprr)
                       ((case-lambda
                          ((g$t$17612$Uaprr)
                           ((case-lambda
                              ((g$ls/false$17613$Uaprr)
                               (if g$ls/false$17613$Uaprr
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$17613$Uaprr)
                                 ((case-lambda
                                    ((g$t$17614$Uaprr)
                                     ((case-lambda
                                        ((g$ls/false$17615$Uaprr)
                                         (if g$ls/false$17615$Uaprr
                                           (apply
                                             (case-lambda
                                               ((g$f*$17616$Uaprr)
                                                g$f*$17616$Uaprr))
                                             g$ls/false$17615$Uaprr)
                                           ((case-lambda
                                              ((g$t$17617$Uaprr)
                                               ((case-lambda
                                                  ((g$ls/false$17618$Uaprr)
                                                   (if g$ls/false$17618$Uaprr
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$17619$Uaprr)
                                                          (g$get-fields$17491$Uaprr
                                                            g$rest$17619$Uaprr)))
                                                       g$ls/false$17618$Uaprr)
                                                     (g$syntax-violation$16329$Uaprr
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$17617$Uaprr))))
                                                (g$syntax-dispatch$16210$Uaprr
                                                  g$t$17617$Uaprr
                                                  '(_ . any)))))
                                            g$t$17614$Uaprr))))
                                      (g$syntax-dispatch$16210$Uaprr
                                        g$t$17614$Uaprr
                                        '((#(scheme-id fields)
                                           .
                                           each-any)
                                          .
                                          _)))))
                                  g$t$17612$Uaprr))))
                            (g$syntax-dispatch$16210$Uaprr
                              g$t$17612$Uaprr
                              '()))))
                        g$clause*$17611$Uaprr))))
                  (g$get-mutator-indices$17492$Uaprr
                    (case-lambda
                      ((g$fields$17599$Uaprr)
                       ((letrec ((g$f$17600$Uaprr
                                   (case-lambda
                                     ((g$fields$17601$Uaprr
                                        g$i$17602$Uaprr)
                                      ((case-lambda
                                         ((g$t$17603$Uaprr)
                                          ((case-lambda
                                             ((g$ls/false$17604$Uaprr)
                                              (if g$ls/false$17604$Uaprr
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$17604$Uaprr)
                                                ((case-lambda
                                                   ((g$t$17605$Uaprr)
                                                    ((case-lambda
                                                       ((g$ls/false$17606$Uaprr)
                                                        (if g$ls/false$17606$Uaprr
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$17607$Uaprr)
                                                               (cons
                                                                 g$i$17602$Uaprr
                                                                 (g$f$17600$Uaprr
                                                                   g$rest$17607$Uaprr
                                                                   (+ g$i$17602$Uaprr
                                                                      '1)))))
                                                            g$ls/false$17606$Uaprr)
                                                          ((case-lambda
                                                             ((g$t$17608$Uaprr)
                                                              ((case-lambda
                                                                 ((g$ls/false$17609$Uaprr)
                                                                  (if g$ls/false$17609$Uaprr
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$17610$Uaprr)
                                                                         (g$f$17600$Uaprr
                                                                           g$rest$17610$Uaprr
                                                                           (+ g$i$17602$Uaprr
                                                                              '1))))
                                                                      g$ls/false$17609$Uaprr)
                                                                    (g$syntax-violation$16329$Uaprr
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$17608$Uaprr))))
                                                               (g$syntax-dispatch$16210$Uaprr
                                                                 g$t$17608$Uaprr
                                                                 '(_ .
                                                                     any)))))
                                                           g$t$17605$Uaprr))))
                                                     (g$syntax-dispatch$16210$Uaprr
                                                       g$t$17605$Uaprr
                                                       '((#(scheme-id
                                                            mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$17603$Uaprr))))
                                           (g$syntax-dispatch$16210$Uaprr
                                             g$t$17603$Uaprr
                                             '()))))
                                       g$fields$17601$Uaprr)))))
                          g$f$17600$Uaprr)
                        g$fields$17599$Uaprr
                        '0))))
                  (g$get-mutators$17493$Uaprr
                    (case-lambda
                      ((g$foo$17578$Uaprr g$fields$17579$Uaprr)
                       (letrec* ((g$gen-name$17580$Uaprr
                                   (case-lambda
                                     ((g$x$17598$Uaprr)
                                      (g$datum->syntax$16331$Uaprr
                                        g$foo$17578$Uaprr
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$16332$Uaprr
                                                g$foo$17578$Uaprr))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$16332$Uaprr
                                                g$x$17598$Uaprr))
                                            '"-set!")))))))
                         ((letrec ((g$f$17581$Uaprr
                                     (case-lambda
                                       ((g$fields$17582$Uaprr)
                                        ((case-lambda
                                           ((g$t$17583$Uaprr)
                                            ((case-lambda
                                               ((g$ls/false$17584$Uaprr)
                                                (if g$ls/false$17584$Uaprr
                                                  (apply
                                                    (case-lambda
                                                      (() '()))
                                                    g$ls/false$17584$Uaprr)
                                                  ((case-lambda
                                                     ((g$t$17585$Uaprr)
                                                      ((case-lambda
                                                         ((g$ls/false$17586$Uaprr)
                                                          (if g$ls/false$17586$Uaprr
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$17587$Uaprr
                                                                   g$accessor$17588$Uaprr
                                                                   g$mutator$17589$Uaprr
                                                                   g$rest$17590$Uaprr)
                                                                 (cons
                                                                   g$mutator$17589$Uaprr
                                                                   (g$f$17581$Uaprr
                                                                     g$rest$17590$Uaprr))))
                                                              g$ls/false$17586$Uaprr)
                                                            ((case-lambda
                                                               ((g$t$17591$Uaprr)
                                                                ((case-lambda
                                                                   ((g$ls/false$17592$Uaprr)
                                                                    (if g$ls/false$17592$Uaprr
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$17593$Uaprr
                                                                             g$rest$17594$Uaprr)
                                                                           (cons
                                                                             (g$gen-name$17580$Uaprr
                                                                               g$name$17593$Uaprr)
                                                                             (g$f$17581$Uaprr
                                                                               g$rest$17594$Uaprr))))
                                                                        g$ls/false$17592$Uaprr)
                                                                      ((case-lambda
                                                                         ((g$t$17595$Uaprr)
                                                                          ((case-lambda
                                                                             ((g$ls/false$17596$Uaprr)
                                                                              (if g$ls/false$17596$Uaprr
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$17597$Uaprr)
                                                                                     (g$f$17581$Uaprr
                                                                                       g$rest$17597$Uaprr)))
                                                                                  g$ls/false$17596$Uaprr)
                                                                                (g$syntax-violation$16329$Uaprr
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$17595$Uaprr))))
                                                                           (g$syntax-dispatch$16210$Uaprr
                                                                             g$t$17595$Uaprr
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$17591$Uaprr))))
                                                                 (g$syntax-dispatch$16210$Uaprr
                                                                   g$t$17591$Uaprr
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$17585$Uaprr))))
                                                       (g$syntax-dispatch$16210$Uaprr
                                                         g$t$17585$Uaprr
                                                         '((#(scheme-id
                                                              mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$17583$Uaprr))))
                                             (g$syntax-dispatch$16210$Uaprr
                                               g$t$17583$Uaprr
                                               '()))))
                                         g$fields$17582$Uaprr)))))
                            g$f$17581$Uaprr)
                          g$fields$17579$Uaprr)))))
                  (g$get-accessors$17494$Uaprr
                    (case-lambda
                      ((g$foo$17544$Uaprr g$fields$17545$Uaprr)
                       (letrec* ((g$gen-name$17546$Uaprr
                                   (case-lambda
                                     ((g$x$17577$Uaprr)
                                      (g$datum->syntax$16331$Uaprr
                                        g$foo$17544$Uaprr
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$16332$Uaprr
                                                g$foo$17544$Uaprr))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$16332$Uaprr
                                                g$x$17577$Uaprr)))))))))
                         (g$map$11722$Uaprr
                           (case-lambda
                             ((g$field$17547$Uaprr)
                              ((case-lambda
                                 ((g$t$17548$Uaprr)
                                  ((case-lambda
                                     ((g$ls/false$17549$Uaprr)
                                      (if (if g$ls/false$17549$Uaprr
                                            (begin
                                              '#f
                                              (apply
                                                (case-lambda
                                                  ((g$name$17550$Uaprr
                                                     g$accessor$17551$Uaprr
                                                     g$mutator$17552$Uaprr)
                                                   (g$id?$15712$Uaprr
                                                     g$accessor$17551$Uaprr)))
                                                g$ls/false$17549$Uaprr))
                                            '#f)
                                        (apply
                                          (case-lambda
                                            ((g$name$17553$Uaprr
                                               g$accessor$17554$Uaprr
                                               g$mutator$17555$Uaprr)
                                             g$accessor$17554$Uaprr))
                                          g$ls/false$17549$Uaprr)
                                        ((case-lambda
                                           ((g$t$17556$Uaprr)
                                            ((case-lambda
                                               ((g$ls/false$17557$Uaprr)
                                                (if (if g$ls/false$17557$Uaprr
                                                      (begin
                                                        '#f
                                                        (apply
                                                          (case-lambda
                                                            ((g$name$17558$Uaprr
                                                               g$accessor$17559$Uaprr)
                                                             (g$id?$15712$Uaprr
                                                               g$accessor$17559$Uaprr)))
                                                          g$ls/false$17557$Uaprr))
                                                      '#f)
                                                  (apply
                                                    (case-lambda
                                                      ((g$name$17560$Uaprr
                                                         g$accessor$17561$Uaprr)
                                                       g$accessor$17561$Uaprr))
                                                    g$ls/false$17557$Uaprr)
                                                  ((case-lambda
                                                     ((g$t$17562$Uaprr)
                                                      ((case-lambda
                                                         ((g$ls/false$17563$Uaprr)
                                                          (if (if g$ls/false$17563$Uaprr
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$name$17564$Uaprr)
                                                                       (g$id?$15712$Uaprr
                                                                         g$name$17564$Uaprr)))
                                                                    g$ls/false$17563$Uaprr))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$17565$Uaprr)
                                                                 (g$gen-name$17546$Uaprr
                                                                   g$name$17565$Uaprr)))
                                                              g$ls/false$17563$Uaprr)
                                                            ((case-lambda
                                                               ((g$t$17566$Uaprr)
                                                                ((case-lambda
                                                                   ((g$ls/false$17567$Uaprr)
                                                                    (if (if g$ls/false$17567$Uaprr
                                                                          (begin
                                                                            '#f
                                                                            (apply
                                                                              (case-lambda
                                                                                ((g$name$17568$Uaprr)
                                                                                 (g$id?$15712$Uaprr
                                                                                   g$name$17568$Uaprr)))
                                                                              g$ls/false$17567$Uaprr))
                                                                          '#f)
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$17569$Uaprr)
                                                                           (g$gen-name$17546$Uaprr
                                                                             g$name$17569$Uaprr)))
                                                                        g$ls/false$17567$Uaprr)
                                                                      ((case-lambda
                                                                         ((g$t$17570$Uaprr)
                                                                          ((case-lambda
                                                                             ((g$ls/false$17571$Uaprr)
                                                                              (if (if g$ls/false$17571$Uaprr
                                                                                    (begin
                                                                                      '#f
                                                                                      (apply
                                                                                        (case-lambda
                                                                                          ((g$name$17572$Uaprr)
                                                                                           (g$id?$15712$Uaprr
                                                                                             g$name$17572$Uaprr)))
                                                                                        g$ls/false$17571$Uaprr))
                                                                                    '#f)
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$name$17573$Uaprr)
                                                                                     (g$gen-name$17546$Uaprr
                                                                                       g$name$17573$Uaprr)))
                                                                                  g$ls/false$17571$Uaprr)
                                                                                ((case-lambda
                                                                                   ((g$t$17574$Uaprr)
                                                                                    ((case-lambda
                                                                                       ((g$ls/false$17575$Uaprr)
                                                                                        (if g$ls/false$17575$Uaprr
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$others$17576$Uaprr)
                                                                                               (g$syntax-violation$16329$Uaprr
                                                                                                 '#f
                                                                                                 '"invalid field spec"
                                                                                                 g$field$17547$Uaprr)))
                                                                                            g$ls/false$17575$Uaprr)
                                                                                          (g$syntax-violation$16329$Uaprr
                                                                                            '#f
                                                                                            '"invalid syntax"
                                                                                            g$t$17574$Uaprr))))
                                                                                     (g$syntax-dispatch$16210$Uaprr
                                                                                       g$t$17574$Uaprr
                                                                                       'any))))
                                                                                 g$t$17570$Uaprr))))
                                                                           (g$syntax-dispatch$16210$Uaprr
                                                                             g$t$17570$Uaprr
                                                                             'any))))
                                                                       g$t$17566$Uaprr))))
                                                                 (g$syntax-dispatch$16210$Uaprr
                                                                   g$t$17566$Uaprr
                                                                   '(#(scheme-id
                                                                       immutable)
                                                                     any)))))
                                                             g$t$17562$Uaprr))))
                                                       (g$syntax-dispatch$16210$Uaprr
                                                         g$t$17562$Uaprr
                                                         '(#(scheme-id
                                                             mutable)
                                                           any)))))
                                                   g$t$17556$Uaprr))))
                                             (g$syntax-dispatch$16210$Uaprr
                                               g$t$17556$Uaprr
                                               '(#(scheme-id immutable)
                                                 any
                                                 any)))))
                                         g$t$17548$Uaprr))))
                                   (g$syntax-dispatch$16210$Uaprr
                                     g$t$17548$Uaprr
                                     '(#(scheme-id mutable)
                                       any
                                       any
                                       any)))))
                               g$field$17547$Uaprr)))
                           g$fields$17545$Uaprr)))))
                  (g$enumerate$17495$Uaprr
                    (case-lambda
                      ((g$ls$17540$Uaprr)
                       ((letrec ((g$f$17541$Uaprr
                                   (case-lambda
                                     ((g$ls$17542$Uaprr g$i$17543$Uaprr)
                                      (if (null? g$ls$17542$Uaprr)
                                        '()
                                        (cons
                                          g$i$17543$Uaprr
                                          (g$f$17541$Uaprr
                                            (cdr g$ls$17542$Uaprr)
                                            (+ g$i$17543$Uaprr
                                               '1))))))))
                          g$f$17541$Uaprr)
                        g$ls$17540$Uaprr
                        '0))))
                  (g$do-define-record$17496$Uaprr
                    (case-lambda
                      ((g$namespec$17520$Uaprr g$clause*$17521$Uaprr)
                       ((case-lambda
                          ((g$foo$17522$Uaprr)
                           ((case-lambda
                              ((g$foo-rtd$17523$Uaprr)
                               ((case-lambda
                                  ((g$foo-rcd$17524$Uaprr)
                                   ((case-lambda
                                      ((g$protocol$17525$Uaprr)
                                       ((case-lambda
                                          ((g$make-foo$17526$Uaprr)
                                           ((case-lambda
                                              ((g$fields$17527$Uaprr)
                                               ((case-lambda
                                                  ((g$idx*$17528$Uaprr)
                                                   ((case-lambda
                                                      ((g$foo-x*$17529$Uaprr)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$17530$Uaprr)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$17531$Uaprr)
                                                               ((case-lambda
                                                                  ((g$foo?$17532$Uaprr)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$17533$Uaprr)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$17534$Uaprr)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$17535$Uaprr)
                                                                               (g$bless$16173$Uaprr
                                                                                 (cons
                                                                                   'begin
                                                                                   (cons
                                                                                     (list
                                                                                       'define
                                                                                       g$foo-rtd$17523$Uaprr
                                                                                       g$foo-rtd-code$17533$Uaprr)
                                                                                     (cons
                                                                                       (list
                                                                                         'define
                                                                                         g$protocol$17525$Uaprr
                                                                                         g$protocol-code$17535$Uaprr)
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rcd$17524$Uaprr
                                                                                           g$foo-rcd-code$17534$Uaprr)
                                                                                         (cons
                                                                                           (list
                                                                                             'define-syntax
                                                                                             g$foo$17522$Uaprr
                                                                                             (list
                                                                                               'list
                                                                                               ''$rtd
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rtd$17523$Uaprr)
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rcd$17524$Uaprr)))
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo?$17532$Uaprr
                                                                                               (list
                                                                                                 'record-predicate
                                                                                                 g$foo-rtd$17523$Uaprr))
                                                                                             (cons
                                                                                               (list
                                                                                                 'define
                                                                                                 g$make-foo$17526$Uaprr
                                                                                                 (list
                                                                                                   'record-constructor
                                                                                                   g$foo-rcd$17524$Uaprr))
                                                                                               (append
                                                                                                 (g$map$11722$Uaprr
                                                                                                   (case-lambda
                                                                                                     ((g$foo-x$17536$Uaprr
                                                                                                        g$idx$17537$Uaprr)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$foo-x$17536$Uaprr
                                                                                                        (list
                                                                                                          'record-accessor
                                                                                                          g$foo-rtd$17523$Uaprr
                                                                                                          g$idx$17537$Uaprr))))
                                                                                                   g$foo-x*$17529$Uaprr
                                                                                                   g$idx*$17528$Uaprr)
                                                                                                 (g$map$11722$Uaprr
                                                                                                   (case-lambda
                                                                                                     ((g$set-foo-x!$17538$Uaprr
                                                                                                        g$idx$17539$Uaprr)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$set-foo-x!$17538$Uaprr
                                                                                                        (list
                                                                                                          'record-mutator
                                                                                                          g$foo-rtd$17523$Uaprr
                                                                                                          g$idx$17539$Uaprr))))
                                                                                                   g$set-foo-x!*$17530$Uaprr
                                                                                                   g$set-foo-idx*$17531$Uaprr))))))))))))
                                                                            (g$get-protocol-code$17490$Uaprr
                                                                              g$clause*$17521$Uaprr))))
                                                                        (g$foo-rcd-code$17489$Uaprr
                                                                          g$clause*$17521$Uaprr
                                                                          g$foo-rtd$17523$Uaprr
                                                                          g$protocol$17525$Uaprr
                                                                          (g$parent-rcd-code$17488$Uaprr
                                                                            g$clause*$17521$Uaprr)))))
                                                                    (g$foo-rtd-code$17486$Uaprr
                                                                      g$foo$17522$Uaprr
                                                                      g$clause*$17521$Uaprr
                                                                      (g$parent-rtd-code$17487$Uaprr
                                                                        g$clause*$17521$Uaprr)))))
                                                                (g$get-record-predicate-name$17484$Uaprr
                                                                  g$namespec$17520$Uaprr))))
                                                            (g$get-mutator-indices$17492$Uaprr
                                                              g$fields$17527$Uaprr))))
                                                        (g$get-mutators$17493$Uaprr
                                                          g$foo$17522$Uaprr
                                                          g$fields$17527$Uaprr))))
                                                    (g$get-accessors$17494$Uaprr
                                                      g$foo$17522$Uaprr
                                                      g$fields$17527$Uaprr))))
                                                (g$enumerate$17495$Uaprr
                                                  g$fields$17527$Uaprr))))
                                            (g$get-fields$17491$Uaprr
                                              g$clause*$17521$Uaprr))))
                                        (g$get-record-constructor-name$17483$Uaprr
                                          g$namespec$17520$Uaprr))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$17482$Uaprr
                          g$namespec$17520$Uaprr)))))
                  (g$verify-clauses$17497$Uaprr
                    (case-lambda
                      ((g$x$17502$Uaprr g$cls*$17503$Uaprr)
                       (letrec* ((g$valid-kwds$17504$Uaprr
                                   (g$map$11722$Uaprr
                                     g$bless$16173$Uaprr
                                     '(fields
                                        parent
                                        parent-rtd
                                        protocol
                                        sealed
                                        opaque
                                        nongenerative)))
                                 (g$free-id-member?$17505$Uaprr
                                   (case-lambda
                                     ((g$x$17517$Uaprr g$ls$17518$Uaprr)
                                      (if (pair? g$ls$17518$Uaprr)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$17519$Uaprr)
                                              (if g$t$17519$Uaprr
                                                g$t$17519$Uaprr
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$17505$Uaprr
                                                    g$x$17517$Uaprr
                                                    (cdr g$ls$17518$Uaprr))))))
                                           (g$free-id=?$15716$Uaprr
                                             g$x$17517$Uaprr
                                             (car g$ls$17518$Uaprr))))
                                        '#f)))))
                         ((letrec ((g$f$17506$Uaprr
                                     (case-lambda
                                       ((g$cls*$17507$Uaprr
                                          g$seen*$17508$Uaprr)
                                        (if (not (null?
                                                   g$cls*$17507$Uaprr))
                                          ((case-lambda
                                             ((g$t$17509$Uaprr)
                                              ((case-lambda
                                                 ((g$ls/false$17510$Uaprr)
                                                  (if g$ls/false$17510$Uaprr
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$17511$Uaprr
                                                           g$rest$17512$Uaprr)
                                                         (if ((case-lambda
                                                                ((g$t$17513$Uaprr)
                                                                 (if g$t$17513$Uaprr
                                                                   g$t$17513$Uaprr
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$17505$Uaprr
                                                                            g$kwd$17511$Uaprr
                                                                            g$valid-kwds$17504$Uaprr))))))
                                                              (not (g$id?$15712$Uaprr
                                                                     g$kwd$17511$Uaprr)))
                                                           (g$syntax-violation$16329$Uaprr
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$17511$Uaprr)
                                                           (if (g$bound-id-member?$15719$Uaprr
                                                                 g$kwd$17511$Uaprr
                                                                 g$seen*$17508$Uaprr)
                                                             (g$syntax-violation$16329$Uaprr
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$17502$Uaprr
                                                               g$kwd$17511$Uaprr)
                                                             (g$f$17506$Uaprr
                                                               (cdr g$cls*$17507$Uaprr)
                                                               (cons
                                                                 g$kwd$17511$Uaprr
                                                                 g$seen*$17508$Uaprr))))))
                                                      g$ls/false$17510$Uaprr)
                                                    ((case-lambda
                                                       ((g$t$17514$Uaprr)
                                                        ((case-lambda
                                                           ((g$ls/false$17515$Uaprr)
                                                            (if g$ls/false$17515$Uaprr
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$17516$Uaprr)
                                                                   (g$syntax-violation$16329$Uaprr
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$17516$Uaprr)))
                                                                g$ls/false$17515$Uaprr)
                                                              (g$syntax-violation$16329$Uaprr
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$17514$Uaprr))))
                                                         (g$syntax-dispatch$16210$Uaprr
                                                           g$t$17514$Uaprr
                                                           'any))))
                                                     g$t$17509$Uaprr))))
                                               (g$syntax-dispatch$16210$Uaprr
                                                 g$t$17509$Uaprr
                                                 '(any . any)))))
                                           (car g$cls*$17507$Uaprr))
                                          (void))))))
                            g$f$17506$Uaprr)
                          g$cls*$17503$Uaprr
                          '()))))))
          ((case-lambda
             ((g$t$17498$Uaprr)
              ((case-lambda
                 ((g$ls/false$17499$Uaprr)
                  (if g$ls/false$17499$Uaprr
                    (apply
                      (case-lambda
                        ((g$namespec$17500$Uaprr g$clause*$17501$Uaprr)
                         (begin
                           (g$verify-clauses$17497$Uaprr
                             g$x$17480$Uaprr
                             g$clause*$17501$Uaprr)
                           (g$do-define-record$17496$Uaprr
                             g$namespec$17500$Uaprr
                             g$clause*$17501$Uaprr))))
                      g$ls/false$17499$Uaprr)
                    (g$syntax-violation$16329$Uaprr
                      '#f
                      '"invalid syntax"
                      g$t$17498$Uaprr))))
               (g$syntax-dispatch$16210$Uaprr
                 g$t$17498$Uaprr
                 '(_ any . each-any)))))
           g$x$17480$Uaprr)))))
   (g$define-condition-type-macro$16205$Uaprr
     g$define-condition-type-macro$19801$Uaprr
     (case-lambda
       ((g$x$17736$Uaprr)
        (letrec* ((g$mkname$17737$Uaprr
                    (case-lambda
                      ((g$name$17760$Uaprr g$suffix$17761$Uaprr)
                       (g$datum->syntax$16331$Uaprr
                         g$name$17760$Uaprr
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$16332$Uaprr
                                 g$name$17760$Uaprr))
                             g$suffix$17761$Uaprr)))))))
          ((case-lambda
             ((g$t$17738$Uaprr)
              ((case-lambda
                 ((g$ls/false$17739$Uaprr)
                  (if (if g$ls/false$17739$Uaprr
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$17740$Uaprr
                                 g$name$17741$Uaprr
                                 g$super$17742$Uaprr
                                 g$constructor$17743$Uaprr
                                 g$predicate$17744$Uaprr
                                 g$field*$17745$Uaprr
                                 g$accessor*$17746$Uaprr)
                               (if (g$id?$15712$Uaprr
                                     g$name$17741$Uaprr)
                                 (if (g$id?$15712$Uaprr
                                       g$super$17742$Uaprr)
                                   (if (g$id?$15712$Uaprr
                                         g$constructor$17743$Uaprr)
                                     (if (g$id?$15712$Uaprr
                                           g$predicate$17744$Uaprr)
                                       (if (g$for-all$11720$Uaprr
                                             g$id?$15712$Uaprr
                                             g$field*$17745$Uaprr)
                                         (begin
                                           '#f
                                           (g$for-all$11720$Uaprr
                                             g$id?$15712$Uaprr
                                             g$accessor*$17746$Uaprr))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$17739$Uaprr))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$17747$Uaprr
                           g$name$17748$Uaprr
                           g$super$17749$Uaprr
                           g$constructor$17750$Uaprr
                           g$predicate$17751$Uaprr
                           g$field*$17752$Uaprr
                           g$accessor*$17753$Uaprr)
                         ((case-lambda
                            ((g$aux-accessor*$17754$Uaprr)
                             (g$bless$16173$Uaprr
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$17748$Uaprr
                                         g$constructor$17750$Uaprr
                                         (gensym))
                                       (cons
                                         (list
                                           'parent
                                           g$super$17749$Uaprr)
                                         (cons
                                           (cons
                                             'fields
                                             (g$map$11722$Uaprr
                                               (case-lambda
                                                 ((g$field$17755$Uaprr
                                                    g$aux$17756$Uaprr)
                                                  (list
                                                    'immutable
                                                    g$field$17755$Uaprr
                                                    g$aux$17756$Uaprr)))
                                               g$field*$17752$Uaprr
                                               g$aux-accessor*$17754$Uaprr))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$17751$Uaprr
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$17748$Uaprr)))
                                     (g$map$11722$Uaprr
                                       (case-lambda
                                         ((g$accessor$17757$Uaprr
                                            g$aux$17758$Uaprr)
                                          (list
                                            'define
                                            g$accessor$17757$Uaprr
                                            (list
                                              'condition-accessor
                                              (list
                                                'record-type-descriptor
                                                g$name$17748$Uaprr)
                                              g$aux$17758$Uaprr))))
                                       g$accessor*$17753$Uaprr
                                       g$aux-accessor*$17754$Uaprr)))))))
                          (g$map$11722$Uaprr
                            (case-lambda ((g$x$17759$Uaprr) (gensym)))
                            g$accessor*$17753$Uaprr))))
                      g$ls/false$17739$Uaprr)
                    (g$syntax-violation$16329$Uaprr
                      '#f
                      '"invalid syntax"
                      g$t$17738$Uaprr))))
               (g$syntax-dispatch$16210$Uaprr
                 g$t$17738$Uaprr
                 '(any any any any any . #(each (any any)))))))
           g$x$17736$Uaprr)))))
   (g$incorrect-usage-macro$16206$Uaprr
     g$incorrect-usage-macro$19802$Uaprr
     (case-lambda
       ((g$e$17762$Uaprr)
        (g$syntax-violation$16329$Uaprr
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$17762$Uaprr))))
   (g$parameterize-macro$16207$Uaprr
     g$parameterize-macro$19803$Uaprr
     (case-lambda
       ((g$e$17763$Uaprr)
        ((case-lambda
           ((g$t$17764$Uaprr)
            ((case-lambda
               ((g$ls/false$17765$Uaprr)
                (if g$ls/false$17765$Uaprr
                  (apply
                    (case-lambda
                      ((g$b$17766$Uaprr g$b*$17767$Uaprr)
                       (g$bless$16173$Uaprr
                         (cons
                           'let
                           (cons
                             '()
                             (cons
                               g$b$17766$Uaprr
                               g$b*$17767$Uaprr))))))
                    g$ls/false$17765$Uaprr)
                  ((case-lambda
                     ((g$t$17768$Uaprr)
                      ((case-lambda
                         ((g$ls/false$17769$Uaprr)
                          (if g$ls/false$17769$Uaprr
                            (apply
                              (case-lambda
                                ((g$olhs*$17770$Uaprr
                                   g$orhs*$17771$Uaprr
                                   g$b$17772$Uaprr
                                   g$b*$17773$Uaprr)
                                 ((case-lambda
                                    ((g$lhs*$17774$Uaprr
                                       g$rhs*$17775$Uaprr)
                                     (g$bless$16173$Uaprr
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$17774$Uaprr
                                             g$rhs*$17775$Uaprr)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (g$map$11722$Uaprr
                                                       (case-lambda
                                                         ((g$lhs$17776$Uaprr
                                                            g$rhs$17777$Uaprr)
                                                          (list
                                                            'let
                                                            (list
                                                              (list
                                                                't
                                                                (list
                                                                  g$lhs$17776$Uaprr)))
                                                            (list
                                                              g$lhs$17776$Uaprr
                                                              g$rhs$17777$Uaprr)
                                                            (cons
                                                              'set!
                                                              (cons
                                                                g$rhs$17777$Uaprr
                                                                '(t))))))
                                                       g$lhs*$17774$Uaprr
                                                       g$rhs*$17775$Uaprr)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$17772$Uaprr
                                                         g$b*$17773$Uaprr)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$17770$Uaprr
                                           g$orhs*$17771$Uaprr)))))
                                  (g$generate-temporaries$16319$Uaprr
                                    g$olhs*$17770$Uaprr)
                                  (g$generate-temporaries$16319$Uaprr
                                    g$orhs*$17771$Uaprr))))
                              g$ls/false$17769$Uaprr)
                            (g$syntax-violation$16329$Uaprr
                              '#f
                              '"invalid syntax"
                              g$t$17768$Uaprr))))
                       (g$syntax-dispatch$16210$Uaprr
                         g$t$17768$Uaprr
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$17764$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$17764$Uaprr
               '(_ () any . each-any)))))
         g$e$17763$Uaprr))))
   (g$foreign-call-transformer$16208$Uaprr
     g$foreign-call-transformer$19804$Uaprr
     (case-lambda
       ((g$e$17778$Uaprr g$r$17779$Uaprr g$mr$17780$Uaprr)
        ((case-lambda
           ((g$t$17781$Uaprr)
            ((case-lambda
               ((g$ls/false$17782$Uaprr)
                (if g$ls/false$17782$Uaprr
                  (apply
                    (case-lambda
                      ((g$name$17783$Uaprr g$arg*$17784$Uaprr)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$16228$Uaprr
                             g$name$17783$Uaprr
                             g$r$17779$Uaprr
                             g$mr$17780$Uaprr)
                           (g$chi-expr*$16226$Uaprr
                             g$arg*$17784$Uaprr
                             g$r$17779$Uaprr
                             g$mr$17780$Uaprr)))))
                    g$ls/false$17782$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$17781$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$17781$Uaprr
               '(_ any . each-any)))))
         g$e$17778$Uaprr))))
   (g$convert-pattern$16209$Uaprr
     g$convert-pattern$19805$Uaprr
     (case-lambda
       ((g$pattern$17785$Uaprr g$keys$17786$Uaprr)
        (letrec* ((g$cvt*$17787$Uaprr
                    (case-lambda
                      ((g$p*$17867$Uaprr
                         g$n$17868$Uaprr
                         g$ids$17869$Uaprr)
                       (if (null? g$p*$17867$Uaprr)
                         (values '() g$ids$17869$Uaprr)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$17787$Uaprr
                                (cdr g$p*$17867$Uaprr)
                                g$n$17868$Uaprr
                                g$ids$17869$Uaprr)))
                           (case-lambda
                             ((g$y$17872$Uaprr g$ids$17873$Uaprr)
                              ((case-lambda
                                 ((g$ids$17874$Uaprr g$y$17875$Uaprr)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$17788$Uaprr
                                         (car g$p*$17867$Uaprr)
                                         g$n$17868$Uaprr
                                         g$ids$17874$Uaprr)))
                                    (case-lambda
                                      ((g$x$17878$Uaprr
                                         g$ids$17879$Uaprr)
                                       ((case-lambda
                                          ((g$ids$17880$Uaprr
                                             g$x$17881$Uaprr)
                                           (values
                                             (cons
                                               g$x$17881$Uaprr
                                               g$y$17875$Uaprr)
                                             g$ids$17880$Uaprr)))
                                        g$ids$17879$Uaprr
                                        g$x$17878$Uaprr))))))
                               g$ids$17873$Uaprr
                               g$y$17872$Uaprr))))))))
                  (g$cvt$17788$Uaprr
                    (case-lambda
                      ((g$p$17789$Uaprr
                         g$n$17790$Uaprr
                         g$ids$17791$Uaprr)
                       ((case-lambda
                          ((g$t$17792$Uaprr)
                           ((case-lambda
                              ((g$ls/false$17793$Uaprr)
                               (if (if g$ls/false$17793$Uaprr
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$17794$Uaprr)
                                            (g$id?$15712$Uaprr
                                              g$id$17794$Uaprr)))
                                         g$ls/false$17793$Uaprr))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$17795$Uaprr)
                                      (if (g$bound-id-member?$15719$Uaprr
                                            g$p$17789$Uaprr
                                            g$keys$17786$Uaprr)
                                        (values
                                          (vector
                                            'free-id
                                            g$p$17789$Uaprr)
                                          g$ids$17791$Uaprr)
                                        (if (g$free-id=?$15716$Uaprr
                                              g$p$17789$Uaprr
                                              (g$scheme-stx$16153$Uaprr
                                                '_))
                                          (values '_ g$ids$17791$Uaprr)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$17789$Uaprr
                                                g$n$17790$Uaprr)
                                              g$ids$17791$Uaprr))))))
                                   g$ls/false$17793$Uaprr)
                                 ((case-lambda
                                    ((g$t$17796$Uaprr)
                                     ((case-lambda
                                        ((g$ls/false$17797$Uaprr)
                                         (if (if g$ls/false$17797$Uaprr
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$17798$Uaprr
                                                        g$dots$17799$Uaprr)
                                                      (g$ellipsis?$16211$Uaprr
                                                        g$dots$17799$Uaprr)))
                                                   g$ls/false$17797$Uaprr))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$17800$Uaprr
                                                  g$dots$17801$Uaprr)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$17788$Uaprr
                                                       g$p$17800$Uaprr
                                                       (+ g$n$17790$Uaprr
                                                          '1)
                                                       g$ids$17791$Uaprr)))
                                                  (case-lambda
                                                    ((g$p$17804$Uaprr
                                                       g$ids$17805$Uaprr)
                                                     ((case-lambda
                                                        ((g$ids$17806$Uaprr
                                                           g$p$17807$Uaprr)
                                                         (values
                                                           (if (eq? g$p$17807$Uaprr
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$17807$Uaprr))
                                                           g$ids$17806$Uaprr)))
                                                      g$ids$17805$Uaprr
                                                      g$p$17804$Uaprr))))))
                                             g$ls/false$17797$Uaprr)
                                           ((case-lambda
                                              ((g$t$17808$Uaprr)
                                               ((case-lambda
                                                  ((g$ls/false$17809$Uaprr)
                                                   (if (if g$ls/false$17809$Uaprr
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$17810$Uaprr
                                                                  g$dots$17811$Uaprr
                                                                  g$ys$17812$Uaprr
                                                                  g$z$17813$Uaprr)
                                                                (g$ellipsis?$16211$Uaprr
                                                                  g$dots$17811$Uaprr)))
                                                             g$ls/false$17809$Uaprr))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$17814$Uaprr
                                                            g$dots$17815$Uaprr
                                                            g$ys$17816$Uaprr
                                                            g$z$17817$Uaprr)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$17788$Uaprr
                                                                 g$z$17817$Uaprr
                                                                 g$n$17790$Uaprr
                                                                 g$ids$17791$Uaprr)))
                                                            (case-lambda
                                                              ((g$z$17820$Uaprr
                                                                 g$ids$17821$Uaprr)
                                                               ((case-lambda
                                                                  ((g$ids$17822$Uaprr
                                                                     g$z$17823$Uaprr)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$17787$Uaprr
                                                                          g$ys$17816$Uaprr
                                                                          g$n$17790$Uaprr
                                                                          g$ids$17822$Uaprr)))
                                                                     (case-lambda
                                                                       ((g$ys$17826$Uaprr
                                                                          g$ids$17827$Uaprr)
                                                                        ((case-lambda
                                                                           ((g$ids$17828$Uaprr
                                                                              g$ys$17829$Uaprr)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$17788$Uaprr
                                                                                   g$x$17814$Uaprr
                                                                                   (+ g$n$17790$Uaprr
                                                                                      '1)
                                                                                   g$ids$17828$Uaprr)))
                                                                              (case-lambda
                                                                                ((g$x$17832$Uaprr
                                                                                   g$ids$17833$Uaprr)
                                                                                 ((case-lambda
                                                                                    ((g$ids$17834$Uaprr
                                                                                       g$x$17835$Uaprr)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$17835$Uaprr
                                                                                         (g$reverse$12473$Uaprr
                                                                                           g$ys$17829$Uaprr)
                                                                                         g$z$17823$Uaprr)
                                                                                       g$ids$17834$Uaprr)))
                                                                                  g$ids$17833$Uaprr
                                                                                  g$x$17832$Uaprr))))))
                                                                         g$ids$17827$Uaprr
                                                                         g$ys$17826$Uaprr))))))
                                                                g$ids$17821$Uaprr
                                                                g$z$17820$Uaprr))))))
                                                       g$ls/false$17809$Uaprr)
                                                     ((case-lambda
                                                        ((g$t$17836$Uaprr)
                                                         ((case-lambda
                                                            ((g$ls/false$17837$Uaprr)
                                                             (if g$ls/false$17837$Uaprr
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$17838$Uaprr
                                                                      g$y$17839$Uaprr)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$17788$Uaprr
                                                                           g$y$17839$Uaprr
                                                                           g$n$17790$Uaprr
                                                                           g$ids$17791$Uaprr)))
                                                                      (case-lambda
                                                                        ((g$y$17842$Uaprr
                                                                           g$ids$17843$Uaprr)
                                                                         ((case-lambda
                                                                            ((g$ids$17844$Uaprr
                                                                               g$y$17845$Uaprr)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$17788$Uaprr
                                                                                    g$x$17838$Uaprr
                                                                                    g$n$17790$Uaprr
                                                                                    g$ids$17844$Uaprr)))
                                                                               (case-lambda
                                                                                 ((g$x$17848$Uaprr
                                                                                    g$ids$17849$Uaprr)
                                                                                  ((case-lambda
                                                                                     ((g$ids$17850$Uaprr
                                                                                        g$x$17851$Uaprr)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$17851$Uaprr
                                                                                          g$y$17845$Uaprr)
                                                                                        g$ids$17850$Uaprr)))
                                                                                   g$ids$17849$Uaprr
                                                                                   g$x$17848$Uaprr))))))
                                                                          g$ids$17843$Uaprr
                                                                          g$y$17842$Uaprr))))))
                                                                 g$ls/false$17837$Uaprr)
                                                               ((case-lambda
                                                                  ((g$t$17852$Uaprr)
                                                                   ((case-lambda
                                                                      ((g$ls/false$17853$Uaprr)
                                                                       (if g$ls/false$17853$Uaprr
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$17791$Uaprr)))
                                                                           g$ls/false$17853$Uaprr)
                                                                         ((case-lambda
                                                                            ((g$t$17854$Uaprr)
                                                                             ((case-lambda
                                                                                ((g$ls/false$17855$Uaprr)
                                                                                 (if (if g$ls/false$17855$Uaprr
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$17856$Uaprr)
                                                                                              (not (g$stx?$15684$Uaprr
                                                                                                     g$p$17856$Uaprr))))
                                                                                           g$ls/false$17855$Uaprr))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$17857$Uaprr)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$17788$Uaprr
                                                                                               g$p$17857$Uaprr
                                                                                               g$n$17790$Uaprr
                                                                                               g$ids$17791$Uaprr)))
                                                                                          (case-lambda
                                                                                            ((g$p$17860$Uaprr
                                                                                               g$ids$17861$Uaprr)
                                                                                             ((case-lambda
                                                                                                ((g$ids$17862$Uaprr
                                                                                                   g$p$17863$Uaprr)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$17863$Uaprr)
                                                                                                   g$ids$17862$Uaprr)))
                                                                                              g$ids$17861$Uaprr
                                                                                              g$p$17860$Uaprr))))))
                                                                                     g$ls/false$17855$Uaprr)
                                                                                   ((case-lambda
                                                                                      ((g$t$17864$Uaprr)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$17865$Uaprr)
                                                                                           (if g$ls/false$17865$Uaprr
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$17866$Uaprr)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$15723$Uaprr
                                                                                                        g$datum$17866$Uaprr))
                                                                                                    g$ids$17791$Uaprr)))
                                                                                               g$ls/false$17865$Uaprr)
                                                                                             (g$syntax-violation$16329$Uaprr
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$17864$Uaprr))))
                                                                                        (g$syntax-dispatch$16210$Uaprr
                                                                                          g$t$17864$Uaprr
                                                                                          'any))))
                                                                                    g$t$17854$Uaprr))))
                                                                              (g$syntax-dispatch$16210$Uaprr
                                                                                g$t$17854$Uaprr
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$17852$Uaprr))))
                                                                    (g$syntax-dispatch$16210$Uaprr
                                                                      g$t$17852$Uaprr
                                                                      '()))))
                                                                g$t$17836$Uaprr))))
                                                          (g$syntax-dispatch$16210$Uaprr
                                                            g$t$17836$Uaprr
                                                            '(any .
                                                                  any)))))
                                                      g$t$17808$Uaprr))))
                                                (g$syntax-dispatch$16210$Uaprr
                                                  g$t$17808$Uaprr
                                                  '(any any
                                                        .
                                                        #(each+
                                                          any
                                                          ()
                                                          any))))))
                                            g$t$17796$Uaprr))))
                                      (g$syntax-dispatch$16210$Uaprr
                                        g$t$17796$Uaprr
                                        '(any any)))))
                                  g$t$17792$Uaprr))))
                            (g$syntax-dispatch$16210$Uaprr
                              g$t$17792$Uaprr
                              'any))))
                        g$p$17789$Uaprr)))))
          (g$cvt$17788$Uaprr g$pattern$17785$Uaprr '0 '())))))
   (g$syntax-dispatch$16210$Uaprr
     g$syntax-dispatch$19806$Uaprr
     (case-lambda
       ((g$e$17882$Uaprr g$p$17883$Uaprr)
        (letrec* ((g$stx^$17884$Uaprr
                    (case-lambda
                      ((g$e$17992$Uaprr
                         g$m*$17993$Uaprr
                         g$s*$17994$Uaprr
                         g$ae*$17995$Uaprr)
                       (if (if (null? g$m*$17993$Uaprr)
                             (if (null? g$s*$17994$Uaprr)
                               (begin '#f (null? g$ae*$17995$Uaprr))
                               '#f)
                             '#f)
                         g$e$17992$Uaprr
                         (g$mkstx$15700$Uaprr
                           g$e$17992$Uaprr
                           g$m*$17993$Uaprr
                           g$s*$17994$Uaprr
                           g$ae*$17995$Uaprr)))))
                  (g$match-each$17885$Uaprr
                    (case-lambda
                      ((g$e$17976$Uaprr
                         g$p$17977$Uaprr
                         g$m*$17978$Uaprr
                         g$s*$17979$Uaprr
                         g$ae*$17980$Uaprr)
                       (if (pair? g$e$17976$Uaprr)
                         ((case-lambda
                            ((g$first$17981$Uaprr)
                             (if g$first$17981$Uaprr
                               (begin
                                 '#f
                                 ((case-lambda
                                    ((g$rest$17982$Uaprr)
                                     (if g$rest$17982$Uaprr
                                       (begin
                                         '#f
                                         (cons
                                           g$first$17981$Uaprr
                                           g$rest$17982$Uaprr))
                                       '#f)))
                                  (g$match-each$17885$Uaprr
                                    (cdr g$e$17976$Uaprr)
                                    g$p$17977$Uaprr
                                    g$m*$17978$Uaprr
                                    g$s*$17979$Uaprr
                                    g$ae*$17980$Uaprr)))
                               '#f)))
                          (g$match$17891$Uaprr
                            (car g$e$17976$Uaprr)
                            g$p$17977$Uaprr
                            g$m*$17978$Uaprr
                            g$s*$17979$Uaprr
                            g$ae*$17980$Uaprr
                            '()))
                         (if (null? g$e$17976$Uaprr)
                           '()
                           (if (g$stx?$15684$Uaprr g$e$17976$Uaprr)
                             (if (not (g$top-marked?$15646$Uaprr
                                        g$m*$17978$Uaprr))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$15699$Uaprr
                                        g$m*$17978$Uaprr
                                        g$s*$17979$Uaprr
                                        g$ae*$17980$Uaprr
                                        g$e$17976$Uaprr)))
                                   (case-lambda
                                     ((g$m*$17986$Uaprr
                                        g$s*$17987$Uaprr
                                        g$ae*$17988$Uaprr)
                                      ((case-lambda
                                         ((g$ae*$17989$Uaprr
                                            g$s*$17990$Uaprr
                                            g$m*$17991$Uaprr)
                                          (g$match-each$17885$Uaprr
                                            (g$stx-expr$15686$Uaprr
                                              g$e$17976$Uaprr)
                                            g$p$17977$Uaprr
                                            g$m*$17991$Uaprr
                                            g$s*$17990$Uaprr
                                            g$ae*$17989$Uaprr)))
                                       g$ae*$17988$Uaprr
                                       g$s*$17987$Uaprr
                                       g$m*$17986$Uaprr)))))
                               '#f)
                             (if (annotation? g$e$17976$Uaprr)
                               (g$match-each$17885$Uaprr
                                 (annotation-expression g$e$17976$Uaprr)
                                 g$p$17977$Uaprr
                                 g$m*$17978$Uaprr
                                 g$s*$17979$Uaprr
                                 g$ae*$17980$Uaprr)
                               '#f)))))))
                  (g$match-each+$17886$Uaprr
                    (case-lambda
                      ((g$e$17944$Uaprr
                         g$x-pat$17945$Uaprr
                         g$y-pat$17946$Uaprr
                         g$z-pat$17947$Uaprr
                         g$m*$17948$Uaprr
                         g$s*$17949$Uaprr
                         g$ae*$17950$Uaprr
                         g$r$17951$Uaprr)
                       ((letrec ((g$f$17952$Uaprr
                                   (case-lambda
                                     ((g$e$17953$Uaprr
                                        g$m*$17954$Uaprr
                                        g$s*$17955$Uaprr
                                        g$ae*$17956$Uaprr)
                                      (if (pair? g$e$17953$Uaprr)
                                        (call-with-values
                                          (case-lambda
                                            (()
                                             (g$f$17952$Uaprr
                                               (cdr g$e$17953$Uaprr)
                                               g$m*$17954$Uaprr
                                               g$s*$17955$Uaprr
                                               g$ae*$17956$Uaprr)))
                                          (case-lambda
                                            ((g$xr*$17960$Uaprr
                                               g$y-pat$17961$Uaprr
                                               g$r$17962$Uaprr)
                                             ((case-lambda
                                                ((g$r$17963$Uaprr
                                                   g$y-pat$17964$Uaprr
                                                   g$xr*$17965$Uaprr)
                                                 (if g$r$17963$Uaprr
                                                   (if (null?
                                                         g$y-pat$17964$Uaprr)
                                                     ((case-lambda
                                                        ((g$xr$17966$Uaprr)
                                                         (if g$xr$17966$Uaprr
                                                           (values
                                                             (cons
                                                               g$xr$17966$Uaprr
                                                               g$xr*$17965$Uaprr)
                                                             g$y-pat$17964$Uaprr
                                                             g$r$17963$Uaprr)
                                                           (values
                                                             '#f
                                                             '#f
                                                             '#f))))
                                                      (g$match$17891$Uaprr
                                                        (car g$e$17953$Uaprr)
                                                        g$x-pat$17945$Uaprr
                                                        g$m*$17954$Uaprr
                                                        g$s*$17955$Uaprr
                                                        g$ae*$17956$Uaprr
                                                        '()))
                                                     (values
                                                       '()
                                                       (cdr g$y-pat$17964$Uaprr)
                                                       (g$match$17891$Uaprr
                                                         (car g$e$17953$Uaprr)
                                                         (car g$y-pat$17964$Uaprr)
                                                         g$m*$17954$Uaprr
                                                         g$s*$17955$Uaprr
                                                         g$ae*$17956$Uaprr
                                                         g$r$17963$Uaprr)))
                                                   (values
                                                     '#f
                                                     '#f
                                                     '#f))))
                                              g$r$17962$Uaprr
                                              g$y-pat$17961$Uaprr
                                              g$xr*$17960$Uaprr))))
                                        (if (g$stx?$15684$Uaprr
                                              g$e$17953$Uaprr)
                                          (if (g$top-marked?$15646$Uaprr
                                                g$m*$17954$Uaprr)
                                            (values
                                              '()
                                              g$y-pat$17946$Uaprr
                                              (g$match$17891$Uaprr
                                                g$e$17953$Uaprr
                                                g$z-pat$17947$Uaprr
                                                g$m*$17954$Uaprr
                                                g$s*$17955$Uaprr
                                                g$ae*$17956$Uaprr
                                                g$r$17951$Uaprr))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$join-wraps$15699$Uaprr
                                                   g$m*$17954$Uaprr
                                                   g$s*$17955$Uaprr
                                                   g$ae*$17956$Uaprr
                                                   g$e$17953$Uaprr)))
                                              (case-lambda
                                                ((g$m*$17970$Uaprr
                                                   g$s*$17971$Uaprr
                                                   g$ae*$17972$Uaprr)
                                                 ((case-lambda
                                                    ((g$ae*$17973$Uaprr
                                                       g$s*$17974$Uaprr
                                                       g$m*$17975$Uaprr)
                                                     (g$f$17952$Uaprr
                                                       (g$stx-expr$15686$Uaprr
                                                         g$e$17953$Uaprr)
                                                       g$m*$17975$Uaprr
                                                       g$s*$17974$Uaprr
                                                       g$ae*$17973$Uaprr)))
                                                  g$ae*$17972$Uaprr
                                                  g$s*$17971$Uaprr
                                                  g$m*$17970$Uaprr)))))
                                          (if (annotation?
                                                g$e$17953$Uaprr)
                                            (g$f$17952$Uaprr
                                              (annotation-expression
                                                g$e$17953$Uaprr)
                                              g$m*$17954$Uaprr
                                              g$s*$17955$Uaprr
                                              g$ae*$17956$Uaprr)
                                            (values
                                              '()
                                              g$y-pat$17946$Uaprr
                                              (g$match$17891$Uaprr
                                                g$e$17953$Uaprr
                                                g$z-pat$17947$Uaprr
                                                g$m*$17954$Uaprr
                                                g$s*$17955$Uaprr
                                                g$ae*$17956$Uaprr
                                                g$r$17951$Uaprr)))))))))
                          g$f$17952$Uaprr)
                        g$e$17944$Uaprr
                        g$m*$17948$Uaprr
                        g$s*$17949$Uaprr
                        g$ae*$17950$Uaprr))))
                  (g$match-each-any$17887$Uaprr
                    (case-lambda
                      ((g$e$17930$Uaprr
                         g$m*$17931$Uaprr
                         g$s*$17932$Uaprr
                         g$ae*$17933$Uaprr)
                       (if (pair? g$e$17930$Uaprr)
                         ((case-lambda
                            ((g$l$17934$Uaprr)
                             (if g$l$17934$Uaprr
                               (begin
                                 '#f
                                 (cons
                                   (g$stx^$17884$Uaprr
                                     (car g$e$17930$Uaprr)
                                     g$m*$17931$Uaprr
                                     g$s*$17932$Uaprr
                                     g$ae*$17933$Uaprr)
                                   g$l$17934$Uaprr))
                               '#f)))
                          (g$match-each-any$17887$Uaprr
                            (cdr g$e$17930$Uaprr)
                            g$m*$17931$Uaprr
                            g$s*$17932$Uaprr
                            g$ae*$17933$Uaprr))
                         (if (null? g$e$17930$Uaprr)
                           '()
                           (if (g$stx?$15684$Uaprr g$e$17930$Uaprr)
                             (if (not (g$top-marked?$15646$Uaprr
                                        g$m*$17931$Uaprr))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$15699$Uaprr
                                        g$m*$17931$Uaprr
                                        g$s*$17932$Uaprr
                                        g$ae*$17933$Uaprr
                                        g$e$17930$Uaprr)))
                                   (case-lambda
                                     ((g$m*$17938$Uaprr
                                        g$s*$17939$Uaprr
                                        g$ae*$17940$Uaprr)
                                      ((case-lambda
                                         ((g$ae*$17941$Uaprr
                                            g$s*$17942$Uaprr
                                            g$m*$17943$Uaprr)
                                          (g$match-each-any$17887$Uaprr
                                            (g$stx-expr$15686$Uaprr
                                              g$e$17930$Uaprr)
                                            g$m*$17943$Uaprr
                                            g$s*$17942$Uaprr
                                            g$ae*$17941$Uaprr)))
                                       g$ae*$17940$Uaprr
                                       g$s*$17939$Uaprr
                                       g$m*$17938$Uaprr)))))
                               '#f)
                             (if (annotation? g$e$17930$Uaprr)
                               (g$match-each-any$17887$Uaprr
                                 (annotation-expression g$e$17930$Uaprr)
                                 g$m*$17931$Uaprr
                                 g$s*$17932$Uaprr
                                 g$ae*$17933$Uaprr)
                               '#f)))))))
                  (g$match-empty$17888$Uaprr
                    (case-lambda
                      ((g$p$17927$Uaprr g$r$17928$Uaprr)
                       (if (null? g$p$17927$Uaprr)
                         g$r$17928$Uaprr
                         (if (eq? g$p$17927$Uaprr '_)
                           g$r$17928$Uaprr
                           (if (eq? g$p$17927$Uaprr 'any)
                             (cons '() g$r$17928$Uaprr)
                             (if (pair? g$p$17927$Uaprr)
                               (g$match-empty$17888$Uaprr
                                 (car g$p$17927$Uaprr)
                                 (g$match-empty$17888$Uaprr
                                   (cdr g$p$17927$Uaprr)
                                   g$r$17928$Uaprr))
                               (if (eq? g$p$17927$Uaprr 'each-any)
                                 (cons '() g$r$17928$Uaprr)
                                 ((case-lambda
                                    ((g$t$17929$Uaprr)
                                     (if (eqv? g$t$17929$Uaprr 'each)
                                       (g$match-empty$17888$Uaprr
                                         (vector-ref g$p$17927$Uaprr '1)
                                         g$r$17928$Uaprr)
                                       (if (eqv? g$t$17929$Uaprr 'each+)
                                         (g$match-empty$17888$Uaprr
                                           (vector-ref
                                             g$p$17927$Uaprr
                                             '1)
                                           (g$match-empty$17888$Uaprr
                                             (g$reverse$12473$Uaprr
                                               (vector-ref
                                                 g$p$17927$Uaprr
                                                 '2))
                                             (g$match-empty$17888$Uaprr
                                               (vector-ref
                                                 g$p$17927$Uaprr
                                                 '3)
                                               g$r$17928$Uaprr)))
                                         (if (g$memv$11715$Uaprr
                                               g$t$17929$Uaprr
                                               '(free-id atom))
                                           g$r$17928$Uaprr
                                           (if (g$memv$11715$Uaprr
                                                 g$t$17929$Uaprr
                                                 '(scheme-id atom))
                                             g$r$17928$Uaprr
                                             (if (eqv?
                                                   g$t$17929$Uaprr
                                                   'vector)
                                               (g$match-empty$17888$Uaprr
                                                 (vector-ref
                                                   g$p$17927$Uaprr
                                                   '1)
                                                 g$r$17928$Uaprr)
                                               (assertion-violation
                                                 'syntax-dispatch
                                                 '"invalid pattern"
                                                 g$p$17927$Uaprr))))))))
                                  (vector-ref
                                    g$p$17927$Uaprr
                                    '0))))))))))
                  (g$combine$17889$Uaprr
                    (case-lambda
                      ((g$r*$17925$Uaprr g$r$17926$Uaprr)
                       (if (null? (car g$r*$17925$Uaprr))
                         g$r$17926$Uaprr
                         (cons
                           (g$map$11722$Uaprr car g$r*$17925$Uaprr)
                           (g$combine$17889$Uaprr
                             (g$map$11722$Uaprr cdr g$r*$17925$Uaprr)
                             g$r$17926$Uaprr))))))
                  (g$match*$17890$Uaprr
                    (case-lambda
                      ((g$e$17907$Uaprr
                         g$p$17908$Uaprr
                         g$m*$17909$Uaprr
                         g$s*$17910$Uaprr
                         g$ae*$17911$Uaprr
                         g$r$17912$Uaprr)
                       (if (null? g$p$17908$Uaprr)
                         (if (null? g$e$17907$Uaprr)
                           (begin '#f g$r$17912$Uaprr)
                           '#f)
                         (if (pair? g$p$17908$Uaprr)
                           (if (pair? g$e$17907$Uaprr)
                             (begin
                               '#f
                               (g$match$17891$Uaprr
                                 (car g$e$17907$Uaprr)
                                 (car g$p$17908$Uaprr)
                                 g$m*$17909$Uaprr
                                 g$s*$17910$Uaprr
                                 g$ae*$17911$Uaprr
                                 (g$match$17891$Uaprr
                                   (cdr g$e$17907$Uaprr)
                                   (cdr g$p$17908$Uaprr)
                                   g$m*$17909$Uaprr
                                   g$s*$17910$Uaprr
                                   g$ae*$17911$Uaprr
                                   g$r$17912$Uaprr)))
                             '#f)
                           (if (eq? g$p$17908$Uaprr 'each-any)
                             ((case-lambda
                                ((g$l$17913$Uaprr)
                                 (if g$l$17913$Uaprr
                                   (begin
                                     '#f
                                     (cons
                                       g$l$17913$Uaprr
                                       g$r$17912$Uaprr))
                                   '#f)))
                              (g$match-each-any$17887$Uaprr
                                g$e$17907$Uaprr
                                g$m*$17909$Uaprr
                                g$s*$17910$Uaprr
                                g$ae*$17911$Uaprr))
                             ((case-lambda
                                ((g$t$17914$Uaprr)
                                 (if (eqv? g$t$17914$Uaprr 'each)
                                   (if (null? g$e$17907$Uaprr)
                                     (g$match-empty$17888$Uaprr
                                       (vector-ref g$p$17908$Uaprr '1)
                                       g$r$17912$Uaprr)
                                     ((case-lambda
                                        ((g$r*$17915$Uaprr)
                                         (if g$r*$17915$Uaprr
                                           (begin
                                             '#f
                                             (g$combine$17889$Uaprr
                                               g$r*$17915$Uaprr
                                               g$r$17912$Uaprr))
                                           '#f)))
                                      (g$match-each$17885$Uaprr
                                        g$e$17907$Uaprr
                                        (vector-ref g$p$17908$Uaprr '1)
                                        g$m*$17909$Uaprr
                                        g$s*$17910$Uaprr
                                        g$ae*$17911$Uaprr)))
                                   (if (eqv? g$t$17914$Uaprr 'free-id)
                                     (if (g$symbol?$12465$Uaprr
                                           g$e$17907$Uaprr)
                                       (if (g$top-marked?$15646$Uaprr
                                             g$m*$17909$Uaprr)
                                         (if (g$free-id=?$15716$Uaprr
                                               (g$stx^$17884$Uaprr
                                                 g$e$17907$Uaprr
                                                 g$m*$17909$Uaprr
                                                 g$s*$17910$Uaprr
                                                 g$ae*$17911$Uaprr)
                                               (vector-ref
                                                 g$p$17908$Uaprr
                                                 '1))
                                           (begin '#f g$r$17912$Uaprr)
                                           '#f)
                                         '#f)
                                       '#f)
                                     (if (eqv?
                                           g$t$17914$Uaprr
                                           'scheme-id)
                                       (if (g$symbol?$12465$Uaprr
                                             g$e$17907$Uaprr)
                                         (if (g$top-marked?$15646$Uaprr
                                               g$m*$17909$Uaprr)
                                           (if (g$free-id=?$15716$Uaprr
                                                 (g$stx^$17884$Uaprr
                                                   g$e$17907$Uaprr
                                                   g$m*$17909$Uaprr
                                                   g$s*$17910$Uaprr
                                                   g$ae*$17911$Uaprr)
                                                 (g$scheme-stx$16153$Uaprr
                                                   (vector-ref
                                                     g$p$17908$Uaprr
                                                     '1)))
                                             (begin '#f g$r$17912$Uaprr)
                                             '#f)
                                           '#f)
                                         '#f)
                                       (if (eqv? g$t$17914$Uaprr 'each+)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$match-each+$17886$Uaprr
                                                g$e$17907$Uaprr
                                                (vector-ref
                                                  g$p$17908$Uaprr
                                                  '1)
                                                (vector-ref
                                                  g$p$17908$Uaprr
                                                  '2)
                                                (vector-ref
                                                  g$p$17908$Uaprr
                                                  '3)
                                                g$m*$17909$Uaprr
                                                g$s*$17910$Uaprr
                                                g$ae*$17911$Uaprr
                                                g$r$17912$Uaprr)))
                                           (case-lambda
                                             ((g$xr*$17919$Uaprr
                                                g$y-pat$17920$Uaprr
                                                g$r$17921$Uaprr)
                                              ((case-lambda
                                                 ((g$r$17922$Uaprr
                                                    g$y-pat$17923$Uaprr
                                                    g$xr*$17924$Uaprr)
                                                  (if g$r$17922$Uaprr
                                                    (if (null?
                                                          g$y-pat$17923$Uaprr)
                                                      (begin
                                                        '#f
                                                        (if (null?
                                                              g$xr*$17924$Uaprr)
                                                          (g$match-empty$17888$Uaprr
                                                            (vector-ref
                                                              g$p$17908$Uaprr
                                                              '1)
                                                            g$r$17922$Uaprr)
                                                          (g$combine$17889$Uaprr
                                                            g$xr*$17924$Uaprr
                                                            g$r$17922$Uaprr)))
                                                      '#f)
                                                    '#f)))
                                               g$r$17921$Uaprr
                                               g$y-pat$17920$Uaprr
                                               g$xr*$17919$Uaprr))))
                                         (if (eqv?
                                               g$t$17914$Uaprr
                                               'atom)
                                           (if (equal?
                                                 (vector-ref
                                                   g$p$17908$Uaprr
                                                   '1)
                                                 (g$strip$15722$Uaprr
                                                   g$e$17907$Uaprr
                                                   g$m*$17909$Uaprr))
                                             (begin '#f g$r$17912$Uaprr)
                                             '#f)
                                           (if (eqv?
                                                 g$t$17914$Uaprr
                                                 'vector)
                                             (if (g$vector?$12463$Uaprr
                                                   g$e$17907$Uaprr)
                                               (begin
                                                 '#f
                                                 (g$match$17891$Uaprr
                                                   (vector->list
                                                     g$e$17907$Uaprr)
                                                   (vector-ref
                                                     g$p$17908$Uaprr
                                                     '1)
                                                   g$m*$17909$Uaprr
                                                   g$s*$17910$Uaprr
                                                   g$ae*$17911$Uaprr
                                                   g$r$17912$Uaprr))
                                               '#f)
                                             (assertion-violation
                                               'syntax-dispatch
                                               '"invalid pattern"
                                               g$p$17908$Uaprr)))))))))
                              (vector-ref g$p$17908$Uaprr '0))))))))
                  (g$match$17891$Uaprr
                    (case-lambda
                      ((g$e$17892$Uaprr
                         g$p$17893$Uaprr
                         g$m*$17894$Uaprr
                         g$s*$17895$Uaprr
                         g$ae*$17896$Uaprr
                         g$r$17897$Uaprr)
                       (if (not g$r$17897$Uaprr)
                         '#f
                         (if (eq? g$p$17893$Uaprr '_)
                           g$r$17897$Uaprr
                           (if (eq? g$p$17893$Uaprr 'any)
                             (cons
                               (g$stx^$17884$Uaprr
                                 g$e$17892$Uaprr
                                 g$m*$17894$Uaprr
                                 g$s*$17895$Uaprr
                                 g$ae*$17896$Uaprr)
                               g$r$17897$Uaprr)
                             (if (g$stx?$15684$Uaprr g$e$17892$Uaprr)
                               (if (not (g$top-marked?$15646$Uaprr
                                          g$m*$17894$Uaprr))
                                 (begin
                                   '#f
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$join-wraps$15699$Uaprr
                                          g$m*$17894$Uaprr
                                          g$s*$17895$Uaprr
                                          g$ae*$17896$Uaprr
                                          g$e$17892$Uaprr)))
                                     (case-lambda
                                       ((g$m*$17901$Uaprr
                                          g$s*$17902$Uaprr
                                          g$ae*$17903$Uaprr)
                                        ((case-lambda
                                           ((g$ae*$17904$Uaprr
                                              g$s*$17905$Uaprr
                                              g$m*$17906$Uaprr)
                                            (g$match$17891$Uaprr
                                              (g$stx-expr$15686$Uaprr
                                                g$e$17892$Uaprr)
                                              g$p$17893$Uaprr
                                              g$m*$17906$Uaprr
                                              g$s*$17905$Uaprr
                                              g$ae*$17904$Uaprr
                                              g$r$17897$Uaprr)))
                                         g$ae*$17903$Uaprr
                                         g$s*$17902$Uaprr
                                         g$m*$17901$Uaprr)))))
                                 '#f)
                               (if (annotation? g$e$17892$Uaprr)
                                 (g$match$17891$Uaprr
                                   (annotation-expression
                                     g$e$17892$Uaprr)
                                   g$p$17893$Uaprr
                                   g$m*$17894$Uaprr
                                   g$s*$17895$Uaprr
                                   g$ae*$17896$Uaprr
                                   g$r$17897$Uaprr)
                                 (g$match*$17890$Uaprr
                                   g$e$17892$Uaprr
                                   g$p$17893$Uaprr
                                   g$m*$17894$Uaprr
                                   g$s*$17895$Uaprr
                                   g$ae*$17896$Uaprr
                                   g$r$17897$Uaprr))))))))))
          (g$match$17891$Uaprr
            g$e$17882$Uaprr
            g$p$17883$Uaprr
            '()
            '()
            '()
            '())))))
   (g$ellipsis?$16211$Uaprr
     g$ellipsis?$19807$Uaprr
     (case-lambda
       ((g$x$17996$Uaprr)
        (if (g$id?$15712$Uaprr g$x$17996$Uaprr)
          (begin
            '#f
            (g$free-id=?$15716$Uaprr
              g$x$17996$Uaprr
              (g$scheme-stx$16153$Uaprr '...)))
          '#f))))
   (g$underscore?$16212$Uaprr
     g$underscore?$19808$Uaprr
     (case-lambda
       ((g$x$17997$Uaprr)
        (if (g$id?$15712$Uaprr g$x$17997$Uaprr)
          (begin
            '#f
            (g$free-id=?$15716$Uaprr
              g$x$17997$Uaprr
              (g$scheme-stx$16153$Uaprr '_)))
          '#f))))
   (g$verify-literals$16213$Uaprr
     g$verify-literals$19809$Uaprr
     (case-lambda
       ((g$lits$17998$Uaprr g$expr$17999$Uaprr)
        (g$for-each$11723$Uaprr
          (case-lambda
            ((g$x$18000$Uaprr)
             (if ((case-lambda
                    ((g$t$18001$Uaprr)
                     (if g$t$18001$Uaprr
                       g$t$18001$Uaprr
                       ((case-lambda
                          ((g$t$18002$Uaprr)
                           (if g$t$18002$Uaprr
                             g$t$18002$Uaprr
                             (begin
                               '#f
                               (g$underscore?$16212$Uaprr
                                 g$x$18000$Uaprr)))))
                        (g$ellipsis?$16211$Uaprr g$x$18000$Uaprr)))))
                  (not (g$id?$15712$Uaprr g$x$18000$Uaprr)))
               (g$syntax-violation$16329$Uaprr
                 '#f
                 '"invalid literal"
                 g$expr$17999$Uaprr
                 g$x$18000$Uaprr)
               (void))))
          g$lits$17998$Uaprr))))
   (g$syntax-case-transformer$16214$Uaprr
     g$syntax-case-transformer$19810$Uaprr
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$18003$Uaprr
                     (case-lambda
                       ((g$pvars$18060$Uaprr
                          g$expr$18061$Uaprr
                          g$y$18062$Uaprr
                          g$r$18063$Uaprr
                          g$mr$18064$Uaprr)
                        ((case-lambda
                           ((g$ids$18065$Uaprr g$levels$18066$Uaprr)
                            ((case-lambda
                               ((g$labels$18067$Uaprr
                                  g$new-vars$18068$Uaprr)
                                ((case-lambda
                                   ((g$body$18069$Uaprr)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$15634$Uaprr
                                        '#f
                                        g$new-vars$18068$Uaprr
                                        g$body$18069$Uaprr)
                                      g$y$18062$Uaprr)))
                                 (g$chi-expr$16228$Uaprr
                                   (g$add-subst$15702$Uaprr
                                     (g$make-full-rib$15678$Uaprr
                                       g$ids$18065$Uaprr
                                       g$labels$18067$Uaprr)
                                     g$expr$18061$Uaprr)
                                   (append
                                     (g$map$11722$Uaprr
                                       (case-lambda
                                         ((g$label$18070$Uaprr
                                            g$var$18071$Uaprr
                                            g$level$18072$Uaprr)
                                          (cons
                                            g$label$18070$Uaprr
                                            (g$make-binding$15728$Uaprr
                                              'syntax
                                              (cons
                                                g$var$18071$Uaprr
                                                g$level$18072$Uaprr)))))
                                       g$labels$18067$Uaprr
                                       g$new-vars$18068$Uaprr
                                       (g$map$11722$Uaprr
                                         cdr
                                         g$pvars$18060$Uaprr))
                                     g$r$18063$Uaprr)
                                   g$mr$18064$Uaprr))))
                             (g$map$11722$Uaprr
                               g$gen-label$15649$Uaprr
                               g$ids$18065$Uaprr)
                             (g$map$11722$Uaprr
                               g$gen-lexical$15647$Uaprr
                               g$ids$18065$Uaprr))))
                         (g$map$11722$Uaprr car g$pvars$18060$Uaprr)
                         (g$map$11722$Uaprr cdr g$pvars$18060$Uaprr)))))
                   (g$invalid-ids-error$18004$Uaprr
                     (case-lambda
                       ((g$id*$18054$Uaprr
                          g$e$18055$Uaprr
                          g$class$18056$Uaprr)
                        ((letrec ((g$find$18057$Uaprr
                                    (case-lambda
                                      ((g$id*$18058$Uaprr
                                         g$ok*$18059$Uaprr)
                                       (if (null? g$id*$18058$Uaprr)
                                         (g$syntax-violation$16329$Uaprr
                                           '#f
                                           '"invalid syntax"
                                           g$e$18055$Uaprr)
                                         (if (g$id?$15712$Uaprr
                                               (car g$id*$18058$Uaprr))
                                           (if (g$bound-id-member?$15719$Uaprr
                                                 (car g$id*$18058$Uaprr)
                                                 g$ok*$18059$Uaprr)
                                             (g$syntax-error$16326$Uaprr
                                               (car g$id*$18058$Uaprr)
                                               '"duplicate "
                                               g$class$18056$Uaprr)
                                             (g$find$18057$Uaprr
                                               (cdr g$id*$18058$Uaprr)
                                               (cons
                                                 (car g$id*$18058$Uaprr)
                                                 g$ok*$18059$Uaprr)))
                                           (g$syntax-error$16326$Uaprr
                                             (car g$id*$18058$Uaprr)
                                             '"invalid "
                                             g$class$18056$Uaprr)))))))
                           g$find$18057$Uaprr)
                         g$id*$18054$Uaprr
                         '()))))
                   (g$gen-clause$18005$Uaprr
                     (case-lambda
                       ((g$x$18034$Uaprr
                          g$keys$18035$Uaprr
                          g$clauses$18036$Uaprr
                          g$r$18037$Uaprr
                          g$mr$18038$Uaprr
                          g$pat$18039$Uaprr
                          g$fender$18040$Uaprr
                          g$expr$18041$Uaprr)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$16209$Uaprr
                               g$pat$18039$Uaprr
                               g$keys$18035$Uaprr)))
                          (case-lambda
                            ((g$p$18044$Uaprr g$pvars$18045$Uaprr)
                             ((case-lambda
                                ((g$pvars$18046$Uaprr g$p$18047$Uaprr)
                                 (if (not (g$distinct-bound-ids?$15718$Uaprr
                                            (g$map$11722$Uaprr
                                              car
                                              g$pvars$18046$Uaprr)))
                                   (g$invalid-ids-error$18004$Uaprr
                                     (g$map$11722$Uaprr
                                       car
                                       g$pvars$18046$Uaprr)
                                     g$pat$18039$Uaprr
                                     '"pattern variable")
                                   (if (not (g$for-all$11720$Uaprr
                                              (case-lambda
                                                ((g$x$18048$Uaprr)
                                                 (not (g$ellipsis?$16211$Uaprr
                                                        (car g$x$18048$Uaprr)))))
                                              g$pvars$18046$Uaprr))
                                     (g$syntax-violation$16329$Uaprr
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$18039$Uaprr)
                                     ((case-lambda
                                        ((g$y$18049$Uaprr)
                                         ((case-lambda
                                            ((g$test$18050$Uaprr)
                                             ((case-lambda
                                                ((g$conseq$18051$Uaprr)
                                                 ((case-lambda
                                                    ((g$altern$18052$Uaprr)
                                                     (list
                                                       (g$build-lambda$15634$Uaprr
                                                         '#f
                                                         (list
                                                           g$y$18049$Uaprr)
                                                         (list
                                                           'if
                                                           g$test$18050$Uaprr
                                                           g$conseq$18051$Uaprr
                                                           g$altern$18052$Uaprr))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$18034$Uaprr
                                                         (list
                                                           'quote
                                                           g$p$18047$Uaprr)))))
                                                  (g$gen-syntax-case$18006$Uaprr
                                                    g$x$18034$Uaprr
                                                    g$keys$18035$Uaprr
                                                    g$clauses$18036$Uaprr
                                                    g$r$18037$Uaprr
                                                    g$mr$18038$Uaprr))))
                                              (g$build-dispatch-call$18003$Uaprr
                                                g$pvars$18046$Uaprr
                                                g$expr$18041$Uaprr
                                                g$y$18049$Uaprr
                                                g$r$18037$Uaprr
                                                g$mr$18038$Uaprr))))
                                          (if (eq? g$fender$18040$Uaprr
                                                   '#t)
                                            g$y$18049$Uaprr
                                            ((case-lambda
                                               ((g$call$18053$Uaprr)
                                                (list
                                                  'if
                                                  g$y$18049$Uaprr
                                                  g$call$18053$Uaprr
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$18003$Uaprr
                                               g$pvars$18046$Uaprr
                                               g$fender$18040$Uaprr
                                               g$y$18049$Uaprr
                                               g$r$18037$Uaprr
                                               g$mr$18038$Uaprr))))))
                                      (g$gen-lexical$15647$Uaprr
                                        'tmp))))))
                              g$pvars$18045$Uaprr
                              g$p$18044$Uaprr)))))))
                   (g$gen-syntax-case$18006$Uaprr
                     (case-lambda
                       ((g$x$18017$Uaprr
                          g$keys$18018$Uaprr
                          g$clauses$18019$Uaprr
                          g$r$18020$Uaprr
                          g$mr$18021$Uaprr)
                        (if (null? g$clauses$18019$Uaprr)
                          (list
                            '(primitive syntax-error)
                            g$x$18017$Uaprr)
                          ((case-lambda
                             ((g$t$18022$Uaprr)
                              ((case-lambda
                                 ((g$ls/false$18023$Uaprr)
                                  (if g$ls/false$18023$Uaprr
                                    (apply
                                      (case-lambda
                                        ((g$pat$18024$Uaprr
                                           g$expr$18025$Uaprr)
                                         (if (if (g$id?$15712$Uaprr
                                                   g$pat$18024$Uaprr)
                                               (if (not (g$bound-id-member?$15719$Uaprr
                                                          g$pat$18024$Uaprr
                                                          g$keys$18018$Uaprr))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$16211$Uaprr
                                                          g$pat$18024$Uaprr)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$15716$Uaprr
                                                 g$pat$18024$Uaprr
                                                 (g$scheme-stx$16153$Uaprr
                                                   '_))
                                             (g$chi-expr$16228$Uaprr
                                               g$expr$18025$Uaprr
                                               g$r$18020$Uaprr
                                               g$mr$18021$Uaprr)
                                             ((case-lambda
                                                ((g$lab$18026$Uaprr
                                                   g$lex$18027$Uaprr)
                                                 ((case-lambda
                                                    ((g$body$18028$Uaprr)
                                                     (list
                                                       (g$build-lambda$15634$Uaprr
                                                         '#f
                                                         (list
                                                           g$lex$18027$Uaprr)
                                                         g$body$18028$Uaprr)
                                                       g$x$18017$Uaprr)))
                                                  (g$chi-expr$16228$Uaprr
                                                    (g$add-subst$15702$Uaprr
                                                      (g$make-full-rib$15678$Uaprr
                                                        (list
                                                          g$pat$18024$Uaprr)
                                                        (list
                                                          g$lab$18026$Uaprr))
                                                      g$expr$18025$Uaprr)
                                                    (cons
                                                      (cons
                                                        g$lab$18026$Uaprr
                                                        (g$make-binding$15728$Uaprr
                                                          'syntax
                                                          (cons
                                                            g$lex$18027$Uaprr
                                                            '0)))
                                                      g$r$18020$Uaprr)
                                                    g$mr$18021$Uaprr))))
                                              (g$gen-label$15649$Uaprr
                                                g$pat$18024$Uaprr)
                                              (g$gen-lexical$15647$Uaprr
                                                g$pat$18024$Uaprr)))
                                           (g$gen-clause$18005$Uaprr
                                             g$x$18017$Uaprr
                                             g$keys$18018$Uaprr
                                             (cdr g$clauses$18019$Uaprr)
                                             g$r$18020$Uaprr
                                             g$mr$18021$Uaprr
                                             g$pat$18024$Uaprr
                                             '#t
                                             g$expr$18025$Uaprr))))
                                      g$ls/false$18023$Uaprr)
                                    ((case-lambda
                                       ((g$t$18029$Uaprr)
                                        ((case-lambda
                                           ((g$ls/false$18030$Uaprr)
                                            (if g$ls/false$18030$Uaprr
                                              (apply
                                                (case-lambda
                                                  ((g$pat$18031$Uaprr
                                                     g$fender$18032$Uaprr
                                                     g$expr$18033$Uaprr)
                                                   (g$gen-clause$18005$Uaprr
                                                     g$x$18017$Uaprr
                                                     g$keys$18018$Uaprr
                                                     (cdr g$clauses$18019$Uaprr)
                                                     g$r$18020$Uaprr
                                                     g$mr$18021$Uaprr
                                                     g$pat$18031$Uaprr
                                                     g$fender$18032$Uaprr
                                                     g$expr$18033$Uaprr)))
                                                g$ls/false$18030$Uaprr)
                                              (g$syntax-violation$16329$Uaprr
                                                '#f
                                                '"invalid syntax"
                                                g$t$18029$Uaprr))))
                                         (g$syntax-dispatch$16210$Uaprr
                                           g$t$18029$Uaprr
                                           '(any any any)))))
                                     g$t$18022$Uaprr))))
                               (g$syntax-dispatch$16210$Uaprr
                                 g$t$18022$Uaprr
                                 '(any any)))))
                           (car g$clauses$18019$Uaprr)))))))
           (case-lambda
             ((g$e$18007$Uaprr g$r$18008$Uaprr g$mr$18009$Uaprr)
              ((case-lambda
                 ((g$t$18010$Uaprr)
                  ((case-lambda
                     ((g$ls/false$18011$Uaprr)
                      (if g$ls/false$18011$Uaprr
                        (apply
                          (case-lambda
                            ((g$expr$18012$Uaprr
                               g$keys$18013$Uaprr
                               g$clauses$18014$Uaprr)
                             (begin
                               (g$verify-literals$16213$Uaprr
                                 g$keys$18013$Uaprr
                                 g$e$18007$Uaprr)
                               ((case-lambda
                                  ((g$x$18015$Uaprr)
                                   ((case-lambda
                                      ((g$body$18016$Uaprr)
                                       (list
                                         (g$build-lambda$15634$Uaprr
                                           '#f
                                           (list g$x$18015$Uaprr)
                                           g$body$18016$Uaprr)
                                         (g$chi-expr$16228$Uaprr
                                           g$expr$18012$Uaprr
                                           g$r$18008$Uaprr
                                           g$mr$18009$Uaprr))))
                                    (g$gen-syntax-case$18006$Uaprr
                                      g$x$18015$Uaprr
                                      g$keys$18013$Uaprr
                                      g$clauses$18014$Uaprr
                                      g$r$18008$Uaprr
                                      g$mr$18009$Uaprr))))
                                (g$gen-lexical$15647$Uaprr 'tmp)))))
                          g$ls/false$18011$Uaprr)
                        (g$syntax-violation$16329$Uaprr
                          '#f
                          '"invalid syntax"
                          g$t$18010$Uaprr))))
                   (g$syntax-dispatch$16210$Uaprr
                     g$t$18010$Uaprr
                     '(_ any each-any . each-any)))))
               g$e$18007$Uaprr))))))))
   (g$ellipsis-map$16215$Uaprr
     g$ellipsis-map$19811$Uaprr
     (case-lambda
       ((g$proc$18073$Uaprr g$ls$18074$Uaprr . g$ls*$18075$Uaprr)
        (letrec* ((g$who$18076$Uaprr '...))
          (begin
            (if (not (list? g$ls$18074$Uaprr))
              (assertion-violation
                g$who$18076$Uaprr
                '"not a list"
                g$ls$18074$Uaprr)
              (void))
            (if (not (null? g$ls*$18075$Uaprr))
              ((case-lambda
                 ((g$n$18077$Uaprr)
                  (g$for-each$11723$Uaprr
                    (case-lambda
                      ((g$x$18078$Uaprr)
                       (begin
                         (if (not (list? g$x$18078$Uaprr))
                           (assertion-violation
                             g$who$18076$Uaprr
                             '"not a list"
                             g$x$18078$Uaprr)
                           (void))
                         (if (not (= (length g$x$18078$Uaprr)
                                     g$n$18077$Uaprr))
                           (assertion-violation
                             g$who$18076$Uaprr
                             '"length mismatch"
                             g$ls$18074$Uaprr
                             g$x$18078$Uaprr)
                           (void)))))
                    g$ls*$18075$Uaprr)))
               (length g$ls$18074$Uaprr))
              (void))
            (apply
              g$map$11722$Uaprr
              g$proc$18073$Uaprr
              g$ls$18074$Uaprr
              g$ls*$18075$Uaprr))))))
   (g$syntax-transformer$16216$Uaprr
     g$syntax-transformer$19812$Uaprr
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$18079$Uaprr
                     (case-lambda
                       ((g$src$18139$Uaprr
                          g$e$18140$Uaprr
                          g$r$18141$Uaprr
                          g$maps$18142$Uaprr
                          g$ellipsis?$18143$Uaprr
                          g$vec?$18144$Uaprr)
                        ((case-lambda
                           ((g$t$18145$Uaprr)
                            ((case-lambda
                               ((g$ls/false$18146$Uaprr)
                                (if (if g$ls/false$18146$Uaprr
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$18147$Uaprr)
                                             (g$ellipsis?$18143$Uaprr
                                               g$dots$18147$Uaprr)))
                                          g$ls/false$18146$Uaprr))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$18148$Uaprr)
                                       (g$syntax-violation$16329$Uaprr
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$18139$Uaprr)))
                                    g$ls/false$18146$Uaprr)
                                  ((case-lambda
                                     ((g$t$18149$Uaprr)
                                      ((case-lambda
                                         ((g$ls/false$18150$Uaprr)
                                          (if (if g$ls/false$18150$Uaprr
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$18151$Uaprr)
                                                       (g$id?$15712$Uaprr
                                                         g$id$18151$Uaprr)))
                                                    g$ls/false$18150$Uaprr))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$18152$Uaprr)
                                                 ((case-lambda
                                                    ((g$label$18153$Uaprr)
                                                     ((case-lambda
                                                        ((g$b$18154$Uaprr)
                                                         (if (eq? (g$binding-type$15729$Uaprr
                                                                    g$b$18154$Uaprr)
                                                                  'syntax)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$var.lev$18157$Uaprr)
                                                                    (g$gen-ref$18080$Uaprr
                                                                      g$src$18139$Uaprr
                                                                      (car g$var.lev$18157$Uaprr)
                                                                      (cdr g$var.lev$18157$Uaprr)
                                                                      g$maps$18142$Uaprr)))
                                                                 (g$binding-value$15730$Uaprr
                                                                   g$b$18154$Uaprr))))
                                                             (case-lambda
                                                               ((g$var$18158$Uaprr
                                                                  g$maps$18159$Uaprr)
                                                                ((case-lambda
                                                                   ((g$maps$18160$Uaprr
                                                                      g$var$18161$Uaprr)
                                                                    (values
                                                                      (list
                                                                        'ref
                                                                        g$var$18161$Uaprr)
                                                                      g$maps$18160$Uaprr)))
                                                                 g$maps$18159$Uaprr
                                                                 g$var$18158$Uaprr))))
                                                           (values
                                                             (list
                                                               'quote
                                                               g$e$18140$Uaprr)
                                                             g$maps$18142$Uaprr))))
                                                      (g$label->binding$15727$Uaprr
                                                        g$label$18153$Uaprr
                                                        g$r$18141$Uaprr))))
                                                  (g$id->label$15725$Uaprr
                                                    g$e$18140$Uaprr))))
                                              g$ls/false$18150$Uaprr)
                                            ((case-lambda
                                               ((g$t$18162$Uaprr)
                                                ((case-lambda
                                                   ((g$ls/false$18163$Uaprr)
                                                    (if (if g$ls/false$18163$Uaprr
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$18164$Uaprr
                                                                   g$e$18165$Uaprr)
                                                                 (g$ellipsis?$18143$Uaprr
                                                                   g$dots$18164$Uaprr)))
                                                              g$ls/false$18163$Uaprr))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$18166$Uaprr
                                                             g$e$18167$Uaprr)
                                                           (if g$vec?$18144$Uaprr
                                                             (g$syntax-violation$16329$Uaprr
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$18139$Uaprr)
                                                             (g$gen-syntax$18079$Uaprr
                                                               g$src$18139$Uaprr
                                                               g$e$18167$Uaprr
                                                               g$r$18141$Uaprr
                                                               g$maps$18142$Uaprr
                                                               (case-lambda
                                                                 ((g$x$18168$Uaprr)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$18163$Uaprr)
                                                      ((case-lambda
                                                         ((g$t$18169$Uaprr)
                                                          ((case-lambda
                                                             ((g$ls/false$18170$Uaprr)
                                                              (if (if g$ls/false$18170$Uaprr
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$18171$Uaprr
                                                                             g$dots$18172$Uaprr
                                                                             g$y$18173$Uaprr)
                                                                           (g$ellipsis?$18143$Uaprr
                                                                             g$dots$18172$Uaprr)))
                                                                        g$ls/false$18170$Uaprr))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$18174$Uaprr
                                                                       g$dots$18175$Uaprr
                                                                       g$y$18176$Uaprr)
                                                                     ((letrec ((g$f$18177$Uaprr
                                                                                 (case-lambda
                                                                                   ((g$y$18178$Uaprr
                                                                                      g$k$18179$Uaprr)
                                                                                    ((case-lambda
                                                                                       ((g$t$18180$Uaprr)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$18181$Uaprr)
                                                                                            (if g$ls/false$18181$Uaprr
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$18179$Uaprr
                                                                                                     g$maps$18142$Uaprr)))
                                                                                                g$ls/false$18181$Uaprr)
                                                                                              ((case-lambda
                                                                                                 ((g$t$18182$Uaprr)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$18183$Uaprr)
                                                                                                      (if (if g$ls/false$18183$Uaprr
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$18184$Uaprr
                                                                                                                     g$y$18185$Uaprr)
                                                                                                                   (g$ellipsis?$18143$Uaprr
                                                                                                                     g$dots$18184$Uaprr)))
                                                                                                                g$ls/false$18183$Uaprr))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$18186$Uaprr
                                                                                                               g$y$18187$Uaprr)
                                                                                                             (g$f$18177$Uaprr
                                                                                                               g$y$18187$Uaprr
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$18188$Uaprr)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$18179$Uaprr
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$18188$Uaprr))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$18191$Uaprr
                                                                                                                         g$maps$18192$Uaprr)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$18193$Uaprr
                                                                                                                             g$x$18194$Uaprr)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$18193$Uaprr))
                                                                                                                             (g$syntax-violation$16329$Uaprr
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$18139$Uaprr)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$18082$Uaprr
                                                                                                                                 g$x$18194$Uaprr
                                                                                                                                 (car g$maps$18193$Uaprr))
                                                                                                                               (cdr g$maps$18193$Uaprr)))))
                                                                                                                        g$maps$18192$Uaprr
                                                                                                                        g$x$18191$Uaprr)))))))))
                                                                                                          g$ls/false$18183$Uaprr)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$18195$Uaprr)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$18196$Uaprr)
                                                                                                                (if g$ls/false$18196$Uaprr
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$18079$Uaprr
                                                                                                                              g$src$18139$Uaprr
                                                                                                                              g$y$18178$Uaprr
                                                                                                                              g$r$18141$Uaprr
                                                                                                                              g$maps$18142$Uaprr
                                                                                                                              g$ellipsis?$18143$Uaprr
                                                                                                                              g$vec?$18144$Uaprr)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$18199$Uaprr
                                                                                                                              g$maps$18200$Uaprr)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$18201$Uaprr
                                                                                                                                  g$y$18202$Uaprr)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$18179$Uaprr
                                                                                                                                       g$maps$18201$Uaprr)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$18205$Uaprr
                                                                                                                                       g$maps$18206$Uaprr)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$18207$Uaprr
                                                                                                                                           g$x$18208$Uaprr)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$18081$Uaprr
                                                                                                                                             g$x$18208$Uaprr
                                                                                                                                             g$y$18202$Uaprr)
                                                                                                                                           g$maps$18207$Uaprr)))
                                                                                                                                      g$maps$18206$Uaprr
                                                                                                                                      g$x$18205$Uaprr))))))
                                                                                                                             g$maps$18200$Uaprr
                                                                                                                             g$y$18199$Uaprr))))))
                                                                                                                    g$ls/false$18196$Uaprr)
                                                                                                                  (g$syntax-violation$16329$Uaprr
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$18195$Uaprr))))
                                                                                                             (g$syntax-dispatch$16210$Uaprr
                                                                                                               g$t$18195$Uaprr
                                                                                                               '_))))
                                                                                                         g$t$18182$Uaprr))))
                                                                                                   (g$syntax-dispatch$16210$Uaprr
                                                                                                     g$t$18182$Uaprr
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$18180$Uaprr))))
                                                                                         (g$syntax-dispatch$16210$Uaprr
                                                                                           g$t$18180$Uaprr
                                                                                           '()))))
                                                                                     g$y$18178$Uaprr)))))
                                                                        g$f$18177$Uaprr)
                                                                      g$y$18176$Uaprr
                                                                      (case-lambda
                                                                        ((g$maps$18209$Uaprr)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$18079$Uaprr
                                                                                g$src$18139$Uaprr
                                                                                g$x$18174$Uaprr
                                                                                g$r$18141$Uaprr
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$18209$Uaprr)
                                                                                g$ellipsis?$18143$Uaprr
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$18212$Uaprr
                                                                                g$maps$18213$Uaprr)
                                                                              ((case-lambda
                                                                                 ((g$maps$18214$Uaprr
                                                                                    g$x$18215$Uaprr)
                                                                                  (if (null?
                                                                                        (car g$maps$18214$Uaprr))
                                                                                    (g$syntax-violation$16329$Uaprr
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$18139$Uaprr)
                                                                                    (values
                                                                                      (g$gen-map$18083$Uaprr
                                                                                        g$x$18215$Uaprr
                                                                                        (car g$maps$18214$Uaprr))
                                                                                      (cdr g$maps$18214$Uaprr)))))
                                                                               g$maps$18213$Uaprr
                                                                               g$x$18212$Uaprr)))))))))
                                                                  g$ls/false$18170$Uaprr)
                                                                ((case-lambda
                                                                   ((g$t$18216$Uaprr)
                                                                    ((case-lambda
                                                                       ((g$ls/false$18217$Uaprr)
                                                                        (if g$ls/false$18217$Uaprr
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$18218$Uaprr
                                                                                 g$y$18219$Uaprr)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$18079$Uaprr
                                                                                      g$src$18139$Uaprr
                                                                                      g$x$18218$Uaprr
                                                                                      g$r$18141$Uaprr
                                                                                      g$maps$18142$Uaprr
                                                                                      g$ellipsis?$18143$Uaprr
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$18222$Uaprr
                                                                                      g$maps$18223$Uaprr)
                                                                                    ((case-lambda
                                                                                       ((g$maps$18224$Uaprr
                                                                                          g$xnew$18225$Uaprr)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$18079$Uaprr
                                                                                               g$src$18139$Uaprr
                                                                                               g$y$18219$Uaprr
                                                                                               g$r$18141$Uaprr
                                                                                               g$maps$18224$Uaprr
                                                                                               g$ellipsis?$18143$Uaprr
                                                                                               g$vec?$18144$Uaprr)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$18228$Uaprr
                                                                                               g$maps$18229$Uaprr)
                                                                                             ((case-lambda
                                                                                                ((g$maps$18230$Uaprr
                                                                                                   g$ynew$18231$Uaprr)
                                                                                                 (values
                                                                                                   (g$gen-cons$18084$Uaprr
                                                                                                     g$e$18140$Uaprr
                                                                                                     g$x$18218$Uaprr
                                                                                                     g$y$18219$Uaprr
                                                                                                     g$xnew$18225$Uaprr
                                                                                                     g$ynew$18231$Uaprr)
                                                                                                   g$maps$18230$Uaprr)))
                                                                                              g$maps$18229$Uaprr
                                                                                              g$ynew$18228$Uaprr))))))
                                                                                     g$maps$18223$Uaprr
                                                                                     g$xnew$18222$Uaprr))))))
                                                                            g$ls/false$18217$Uaprr)
                                                                          ((case-lambda
                                                                             ((g$t$18232$Uaprr)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$18233$Uaprr)
                                                                                  (if g$ls/false$18233$Uaprr
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$18234$Uaprr)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$18079$Uaprr
                                                                                                g$src$18139$Uaprr
                                                                                                g$ls$18234$Uaprr
                                                                                                g$r$18141$Uaprr
                                                                                                g$maps$18142$Uaprr
                                                                                                g$ellipsis?$18143$Uaprr
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$18237$Uaprr
                                                                                                g$maps$18238$Uaprr)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$18239$Uaprr
                                                                                                    g$lsnew$18240$Uaprr)
                                                                                                  (values
                                                                                                    (g$gen-vector$18085$Uaprr
                                                                                                      g$e$18140$Uaprr
                                                                                                      g$ls$18234$Uaprr
                                                                                                      g$lsnew$18240$Uaprr)
                                                                                                    g$maps$18239$Uaprr)))
                                                                                               g$maps$18238$Uaprr
                                                                                               g$lsnew$18237$Uaprr))))))
                                                                                      g$ls/false$18233$Uaprr)
                                                                                    ((case-lambda
                                                                                       ((g$t$18241$Uaprr)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$18242$Uaprr)
                                                                                            (if g$ls/false$18242$Uaprr
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$18140$Uaprr)
                                                                                                     g$maps$18142$Uaprr)))
                                                                                                g$ls/false$18242$Uaprr)
                                                                                              (g$syntax-violation$16329$Uaprr
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$18241$Uaprr))))
                                                                                         (g$syntax-dispatch$16210$Uaprr
                                                                                           g$t$18241$Uaprr
                                                                                           '_))))
                                                                                     g$t$18232$Uaprr))))
                                                                               (g$syntax-dispatch$16210$Uaprr
                                                                                 g$t$18232$Uaprr
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$18216$Uaprr))))
                                                                     (g$syntax-dispatch$16210$Uaprr
                                                                       g$t$18216$Uaprr
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$18169$Uaprr))))
                                                           (g$syntax-dispatch$16210$Uaprr
                                                             g$t$18169$Uaprr
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$18162$Uaprr))))
                                                 (g$syntax-dispatch$16210$Uaprr
                                                   g$t$18162$Uaprr
                                                   '(any any)))))
                                             g$t$18149$Uaprr))))
                                       (g$syntax-dispatch$16210$Uaprr
                                         g$t$18149$Uaprr
                                         'any))))
                                   g$t$18145$Uaprr))))
                             (g$syntax-dispatch$16210$Uaprr
                               g$t$18145$Uaprr
                               'any))))
                         g$e$18140$Uaprr))))
                   (g$gen-ref$18080$Uaprr
                     (case-lambda
                       ((g$src$18126$Uaprr
                          g$var$18127$Uaprr
                          g$level$18128$Uaprr
                          g$maps$18129$Uaprr)
                        (if (= g$level$18128$Uaprr '0)
                          (values g$var$18127$Uaprr g$maps$18129$Uaprr)
                          (if (null? g$maps$18129$Uaprr)
                            (g$syntax-violation$16329$Uaprr
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$18126$Uaprr)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$18080$Uaprr
                                   g$src$18126$Uaprr
                                   g$var$18127$Uaprr
                                   (- g$level$18128$Uaprr '1)
                                   (cdr g$maps$18129$Uaprr))))
                              (case-lambda
                                ((g$outer-var$18132$Uaprr
                                   g$outer-maps$18133$Uaprr)
                                 ((case-lambda
                                    ((g$outer-maps$18134$Uaprr
                                       g$outer-var$18135$Uaprr)
                                     ((case-lambda
                                        ((g$t$18136$Uaprr)
                                         (if g$t$18136$Uaprr
                                           ((case-lambda
                                              ((g$b$18137$Uaprr)
                                               (values
                                                 (cdr g$b$18137$Uaprr)
                                                 g$maps$18129$Uaprr)))
                                            g$t$18136$Uaprr)
                                           ((case-lambda
                                              ((g$inner-var$18138$Uaprr)
                                               (values
                                                 g$inner-var$18138$Uaprr
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$18135$Uaprr
                                                       g$inner-var$18138$Uaprr)
                                                     (car g$maps$18129$Uaprr))
                                                   g$outer-maps$18134$Uaprr))))
                                            (g$gen-lexical$15647$Uaprr
                                              'tmp)))))
                                      (g$assq$11710$Uaprr
                                        g$outer-var$18135$Uaprr
                                        (car g$maps$18129$Uaprr)))))
                                  g$outer-maps$18133$Uaprr
                                  g$outer-var$18132$Uaprr)))))))))
                   (g$gen-append$18081$Uaprr
                     (case-lambda
                       ((g$x$18124$Uaprr g$y$18125$Uaprr)
                        (if (equal? g$y$18125$Uaprr ''())
                          g$x$18124$Uaprr
                          (list
                            'append
                            g$x$18124$Uaprr
                            g$y$18125$Uaprr)))))
                   (g$gen-mappend$18082$Uaprr
                     (case-lambda
                       ((g$e$18122$Uaprr g$map-env$18123$Uaprr)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$18083$Uaprr
                            g$e$18122$Uaprr
                            g$map-env$18123$Uaprr)))))
                   (g$gen-map$18083$Uaprr
                     (case-lambda
                       ((g$e$18113$Uaprr g$map-env$18114$Uaprr)
                        ((case-lambda
                           ((g$formals$18115$Uaprr
                              g$actuals$18116$Uaprr)
                            (if (eq? (car g$e$18113$Uaprr) 'ref)
                              (car g$actuals$18116$Uaprr)
                              (if (g$for-all$11720$Uaprr
                                    (case-lambda
                                      ((g$x$18117$Uaprr)
                                       (if (eq? (car g$x$18117$Uaprr)
                                                'ref)
                                         (begin
                                           '#f
                                           (g$memq$11714$Uaprr
                                             (g$cadr$12475$Uaprr
                                               g$x$18117$Uaprr)
                                             g$formals$18115$Uaprr))
                                         '#f)))
                                    (cdr g$e$18113$Uaprr))
                                ((case-lambda
                                   ((g$args$18118$Uaprr)
                                    (cons
                                      'map
                                      (cons
                                        (list
                                          'primitive
                                          (car g$e$18113$Uaprr))
                                        g$args$18118$Uaprr))))
                                 (g$map$11722$Uaprr
                                   ((case-lambda
                                      ((g$r$18119$Uaprr)
                                       (case-lambda
                                         ((g$x$18120$Uaprr)
                                          (cdr (g$assq$11710$Uaprr
                                                 (g$cadr$12475$Uaprr
                                                   g$x$18120$Uaprr)
                                                 g$r$18119$Uaprr))))))
                                    (g$map$11722$Uaprr
                                      cons
                                      g$formals$18115$Uaprr
                                      g$actuals$18116$Uaprr))
                                   (cdr g$e$18113$Uaprr)))
                                (g$cons*$11724$Uaprr
                                  'map
                                  (list
                                    'lambda
                                    g$formals$18115$Uaprr
                                    g$e$18113$Uaprr)
                                  g$actuals$18116$Uaprr)))))
                         (g$map$11722$Uaprr cdr g$map-env$18114$Uaprr)
                         (g$map$11722$Uaprr
                           (case-lambda
                             ((g$x$18121$Uaprr)
                              (list 'ref (car g$x$18121$Uaprr))))
                           g$map-env$18114$Uaprr)))))
                   (g$gen-cons$18084$Uaprr
                     (case-lambda
                       ((g$e$18105$Uaprr
                          g$x$18106$Uaprr
                          g$y$18107$Uaprr
                          g$xnew$18108$Uaprr
                          g$ynew$18109$Uaprr)
                        ((case-lambda
                           ((g$t$18110$Uaprr)
                            (if (eqv? g$t$18110$Uaprr 'quote)
                              (if (eq? (car g$xnew$18108$Uaprr) 'quote)
                                ((case-lambda
                                   ((g$xnew$18111$Uaprr
                                      g$ynew$18112$Uaprr)
                                    (if (if (eq? g$xnew$18111$Uaprr
                                                 g$x$18106$Uaprr)
                                          (begin
                                            '#f
                                            (eq? g$ynew$18112$Uaprr
                                                 g$y$18107$Uaprr))
                                          '#f)
                                      (list 'quote g$e$18105$Uaprr)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$18111$Uaprr
                                          g$ynew$18112$Uaprr)))))
                                 (g$cadr$12475$Uaprr g$xnew$18108$Uaprr)
                                 (g$cadr$12475$Uaprr
                                   g$ynew$18109$Uaprr))
                                (if (null?
                                      (g$cadr$12475$Uaprr
                                        g$ynew$18109$Uaprr))
                                  (list 'list g$xnew$18108$Uaprr)
                                  (list
                                    'cons
                                    g$xnew$18108$Uaprr
                                    g$ynew$18109$Uaprr)))
                              (if (eqv? g$t$18110$Uaprr 'list)
                                (cons
                                  'list
                                  (cons
                                    g$xnew$18108$Uaprr
                                    (cdr g$ynew$18109$Uaprr)))
                                (list
                                  'cons
                                  g$xnew$18108$Uaprr
                                  g$ynew$18109$Uaprr)))))
                         (car g$ynew$18109$Uaprr)))))
                   (g$gen-vector$18085$Uaprr
                     (case-lambda
                       ((g$e$18102$Uaprr
                          g$ls$18103$Uaprr
                          g$lsnew$18104$Uaprr)
                        (if (eq? (car g$lsnew$18104$Uaprr) 'quote)
                          (if (eq? (g$cadr$12475$Uaprr
                                     g$lsnew$18104$Uaprr)
                                   g$ls$18103$Uaprr)
                            (list 'quote g$e$18102$Uaprr)
                            (list
                              'quote
                              (g$list->vector$12460$Uaprr
                                (g$cadr$12475$Uaprr
                                  g$lsnew$18104$Uaprr))))
                          (if (eq? (car g$lsnew$18104$Uaprr) 'list)
                            (cons 'vector (cdr g$lsnew$18104$Uaprr))
                            (list
                              'list->vector
                              g$lsnew$18104$Uaprr))))))
                   (g$regen$18086$Uaprr
                     (case-lambda
                       ((g$x$18099$Uaprr)
                        ((case-lambda
                           ((g$t$18100$Uaprr)
                            (if (eqv? g$t$18100$Uaprr 'ref)
                              (g$cadr$12475$Uaprr g$x$18099$Uaprr)
                              (if (eqv? g$t$18100$Uaprr 'primitive)
                                (list
                                  'primitive
                                  (g$cadr$12475$Uaprr g$x$18099$Uaprr))
                                (if (eqv? g$t$18100$Uaprr 'quote)
                                  (list
                                    'quote
                                    (g$cadr$12475$Uaprr
                                      g$x$18099$Uaprr))
                                  (if (eqv? g$t$18100$Uaprr 'lambda)
                                    (g$build-lambda$15634$Uaprr
                                      '#f
                                      (g$cadr$12475$Uaprr
                                        g$x$18099$Uaprr)
                                      (g$regen$18086$Uaprr
                                        (g$caddr$12481$Uaprr
                                          g$x$18099$Uaprr)))
                                    (if (eqv? g$t$18100$Uaprr 'map)
                                      ((case-lambda
                                         ((g$ls$18101$Uaprr)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$18101$Uaprr)))
                                       (g$map$11722$Uaprr
                                         g$regen$18086$Uaprr
                                         (cdr g$x$18099$Uaprr)))
                                      (cons
                                        (list
                                          'primitive
                                          (car g$x$18099$Uaprr))
                                        (g$map$11722$Uaprr
                                          g$regen$18086$Uaprr
                                          (cdr g$x$18099$Uaprr))))))))))
                         (car g$x$18099$Uaprr))))))
           (case-lambda
             ((g$e$18087$Uaprr g$r$18088$Uaprr g$mr$18089$Uaprr)
              ((case-lambda
                 ((g$t$18090$Uaprr)
                  ((case-lambda
                     ((g$ls/false$18091$Uaprr)
                      (if g$ls/false$18091$Uaprr
                        (apply
                          (case-lambda
                            ((g$x$18092$Uaprr)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$18079$Uaprr
                                    g$e$18087$Uaprr
                                    g$x$18092$Uaprr
                                    g$r$18088$Uaprr
                                    '()
                                    g$ellipsis?$16211$Uaprr
                                    '#f)))
                               (case-lambda
                                 ((g$e$18095$Uaprr g$maps$18096$Uaprr)
                                  ((case-lambda
                                     ((g$maps$18097$Uaprr
                                        g$e$18098$Uaprr)
                                      (g$regen$18086$Uaprr
                                        g$e$18098$Uaprr)))
                                   g$maps$18096$Uaprr
                                   g$e$18095$Uaprr))))))
                          g$ls/false$18091$Uaprr)
                        (g$syntax-violation$16329$Uaprr
                          '#f
                          '"invalid syntax"
                          g$t$18090$Uaprr))))
                   (g$syntax-dispatch$16210$Uaprr
                     g$t$18090$Uaprr
                     '(_ any)))))
               g$e$18087$Uaprr))))))))
   (g$core-macro-transformer$16217$Uaprr
     g$core-macro-transformer$19813$Uaprr
     (case-lambda
       ((g$name$18243$Uaprr)
        ((case-lambda
           ((g$t$18244$Uaprr)
            (if (eqv? g$t$18244$Uaprr 'quote)
              g$quote-transformer$16170$Uaprr
              (if (eqv? g$t$18244$Uaprr 'lambda)
                g$lambda-transformer$16172$Uaprr
                (if (eqv? g$t$18244$Uaprr 'case-lambda)
                  g$case-lambda-transformer$16171$Uaprr
                  (if (eqv? g$t$18244$Uaprr 'letrec)
                    g$letrec-transformer$16160$Uaprr
                    (if (eqv? g$t$18244$Uaprr 'letrec*)
                      g$letrec*-transformer$16161$Uaprr
                      (if (eqv? g$t$18244$Uaprr 'if)
                        g$if-transformer$16168$Uaprr
                        (if (eqv? g$t$18244$Uaprr 'foreign-call)
                          g$foreign-call-transformer$16208$Uaprr
                          (if (eqv? g$t$18244$Uaprr 'syntax-case)
                            g$syntax-case-transformer$16214$Uaprr
                            (if (eqv? g$t$18244$Uaprr 'syntax)
                              g$syntax-transformer$16216$Uaprr
                              (if (eqv?
                                    g$t$18244$Uaprr
                                    'type-descriptor)
                                g$type-descriptor-transformer$16163$Uaprr
                                (if (eqv?
                                      g$t$18244$Uaprr
                                      'record-type-descriptor)
                                  g$record-type-descriptor-transformer$16164$Uaprr
                                  (if (eqv?
                                        g$t$18244$Uaprr
                                        'record-constructor-descriptor)
                                    g$record-constructor-descriptor-transformer$16165$Uaprr
                                    (if (eqv?
                                          g$t$18244$Uaprr
                                          'fluid-let-syntax)
                                      g$fluid-let-syntax-transformer$16162$Uaprr
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$18243$Uaprr))))))))))))))))
         g$name$18243$Uaprr))))
   (g$file-options-macro$16218$Uaprr
     g$file-options-macro$19814$Uaprr
     (case-lambda
       ((g$x$18245$Uaprr)
        (letrec* ((g$valid-option?$18246$Uaprr
                    (case-lambda
                      ((g$x$18251$Uaprr)
                       (if (g$id?$15712$Uaprr g$x$18251$Uaprr)
                         (begin
                           '#f
                           (g$memq$11714$Uaprr
                             (g$id->sym$15713$Uaprr g$x$18251$Uaprr)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$18247$Uaprr)
              ((case-lambda
                 ((g$ls/false$18248$Uaprr)
                  (if (if g$ls/false$18248$Uaprr
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$18249$Uaprr)
                               (if (g$for-all$11720$Uaprr
                                     g$valid-option?$18246$Uaprr
                                     g$opt*$18249$Uaprr)
                                 (begin
                                   '#f
                                   (g$file-options-spec$14576$Uaprr
                                     (g$map$11722$Uaprr
                                       g$id->sym$15713$Uaprr
                                       g$opt*$18249$Uaprr)))
                                 '#f)))
                            g$ls/false$18248$Uaprr))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$18250$Uaprr)
                         (g$bless$16173$Uaprr
                           (list
                             'quote
                             (g$file-options-spec$14576$Uaprr
                               (g$map$11722$Uaprr
                                 g$id->sym$15713$Uaprr
                                 g$opt*$18250$Uaprr))))))
                      g$ls/false$18248$Uaprr)
                    (g$syntax-violation$16329$Uaprr
                      '#f
                      '"invalid syntax"
                      g$t$18247$Uaprr))))
               (g$syntax-dispatch$16210$Uaprr
                 g$t$18247$Uaprr
                 '(_ . each-any)))))
           g$x$18245$Uaprr)))))
   (g$symbol-macro$16219$Uaprr
     g$symbol-macro$19815$Uaprr
     (case-lambda
       ((g$x$18252$Uaprr g$set$18253$Uaprr)
        ((case-lambda
           ((g$t$18254$Uaprr)
            ((case-lambda
               ((g$ls/false$18255$Uaprr)
                (if (if g$ls/false$18255$Uaprr
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$18256$Uaprr)
                             (if (g$id?$15712$Uaprr g$name$18256$Uaprr)
                               (begin
                                 '#f
                                 (g$memq$11714$Uaprr
                                   (g$id->sym$15713$Uaprr
                                     g$name$18256$Uaprr)
                                   g$set$18253$Uaprr))
                               '#f)))
                          g$ls/false$18255$Uaprr))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$18257$Uaprr)
                       (g$bless$16173$Uaprr
                         (list 'quote g$name$18257$Uaprr))))
                    g$ls/false$18255$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$18254$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr g$t$18254$Uaprr '(_ any)))))
         g$x$18252$Uaprr))))
   (g$macro-transformer$16220$Uaprr
     g$macro-transformer$19816$Uaprr
     (case-lambda
       ((g$x$18258$Uaprr)
        (if (g$procedure?$12467$Uaprr g$x$18258$Uaprr)
          g$x$18258$Uaprr
          (if (g$symbol?$12465$Uaprr g$x$18258$Uaprr)
            ((case-lambda
               ((g$t$18259$Uaprr)
                (if (eqv? g$t$18259$Uaprr 'define-record-type)
                  g$define-record-type-macro$16204$Uaprr
                  (if (eqv? g$t$18259$Uaprr 'define-struct)
                    g$define-struct-macro$16203$Uaprr
                    (if (eqv? g$t$18259$Uaprr 'include)
                      g$include-macro$16198$Uaprr
                      (if (eqv? g$t$18259$Uaprr 'cond)
                        g$cond-macro$16196$Uaprr
                        (if (eqv? g$t$18259$Uaprr 'let)
                          g$let-macro$16176$Uaprr
                          (if (eqv? g$t$18259$Uaprr 'do)
                            g$do-macro$16192$Uaprr
                            (if (eqv? g$t$18259$Uaprr 'or)
                              g$or-macro$16194$Uaprr
                              (if (eqv? g$t$18259$Uaprr 'and)
                                g$and-macro$16195$Uaprr
                                (if (eqv? g$t$18259$Uaprr 'let*)
                                  g$let*-macro$16193$Uaprr
                                  (if (eqv? g$t$18259$Uaprr 'let-values)
                                    g$let-values-macro$16177$Uaprr
                                    (if (eqv?
                                          g$t$18259$Uaprr
                                          'let*-values)
                                      g$let*-values-macro$16178$Uaprr
                                      (if (eqv?
                                            g$t$18259$Uaprr
                                            'syntax-rules)
                                        g$syntax-rules-macro$16200$Uaprr
                                        (if (eqv?
                                              g$t$18259$Uaprr
                                              'quasiquote)
                                          g$quasiquote-macro$16201$Uaprr
                                          (if (eqv?
                                                g$t$18259$Uaprr
                                                'quasisyntax)
                                            g$quasisyntax-macro$16202$Uaprr
                                            (if (eqv?
                                                  g$t$18259$Uaprr
                                                  'with-syntax)
                                              g$with-syntax-macro$16174$Uaprr
                                              (if (eqv?
                                                    g$t$18259$Uaprr
                                                    'when)
                                                g$when-macro$16166$Uaprr
                                                (if (eqv?
                                                      g$t$18259$Uaprr
                                                      'unless)
                                                  g$unless-macro$16167$Uaprr
                                                  (if (eqv?
                                                        g$t$18259$Uaprr
                                                        'case)
                                                    g$case-macro$16169$Uaprr
                                                    (if (eqv?
                                                          g$t$18259$Uaprr
                                                          'identifier-syntax)
                                                      g$identifier-syntax-macro$16191$Uaprr
                                                      (if (eqv?
                                                            g$t$18259$Uaprr
                                                            'time)
                                                        g$time-macro$16187$Uaprr
                                                        (if (eqv?
                                                              g$t$18259$Uaprr
                                                              'delay)
                                                          g$delay-macro$16188$Uaprr
                                                          (if (eqv?
                                                                g$t$18259$Uaprr
                                                                'assert)
                                                            g$assert-macro$16189$Uaprr
                                                            (if (eqv?
                                                                  g$t$18259$Uaprr
                                                                  'endianness)
                                                              g$endianness-macro$16190$Uaprr
                                                              (if (eqv?
                                                                    g$t$18259$Uaprr
                                                                    'guard)
                                                                g$guard-macro$16185$Uaprr
                                                                (if (eqv?
                                                                      g$t$18259$Uaprr
                                                                      'define-enumeration)
                                                                  g$define-enumeration-macro$16186$Uaprr
                                                                  (if (eqv?
                                                                        g$t$18259$Uaprr
                                                                        'trace-lambda)
                                                                    g$trace-lambda-macro$16179$Uaprr
                                                                    (if (eqv?
                                                                          g$t$18259$Uaprr
                                                                          'trace-define)
                                                                      g$trace-define-macro$16180$Uaprr
                                                                      (if (eqv?
                                                                            g$t$18259$Uaprr
                                                                            'trace-define-syntax)
                                                                        g$trace-define-syntax-macro$16181$Uaprr
                                                                        (if (eqv?
                                                                              g$t$18259$Uaprr
                                                                              'trace-let-syntax)
                                                                          g$trace-let-syntax-macro$16183$Uaprr
                                                                          (if (eqv?
                                                                                g$t$18259$Uaprr
                                                                                'trace-letrec-syntax)
                                                                            g$trace-letrec-syntax-macro$16184$Uaprr
                                                                            (if (eqv?
                                                                                  g$t$18259$Uaprr
                                                                                  'define-condition-type)
                                                                              g$define-condition-type-macro$16205$Uaprr
                                                                              (if (eqv?
                                                                                    g$t$18259$Uaprr
                                                                                    'parameterize)
                                                                                g$parameterize-macro$16207$Uaprr
                                                                                (if (eqv?
                                                                                      g$t$18259$Uaprr
                                                                                      'include-into)
                                                                                  g$include-into-macro$16199$Uaprr
                                                                                  (if (eqv?
                                                                                        g$t$18259$Uaprr
                                                                                        'eol-style)
                                                                                    (case-lambda
                                                                                      ((g$x$18260$Uaprr)
                                                                                       (g$symbol-macro$16219$Uaprr
                                                                                         g$x$18260$Uaprr
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (eqv?
                                                                                          g$t$18259$Uaprr
                                                                                          'error-handling-mode)
                                                                                      (case-lambda
                                                                                        ((g$x$18261$Uaprr)
                                                                                         (g$symbol-macro$16219$Uaprr
                                                                                           g$x$18261$Uaprr
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (eqv?
                                                                                            g$t$18259$Uaprr
                                                                                            'buffer-mode)
                                                                                        (case-lambda
                                                                                          ((g$x$18262$Uaprr)
                                                                                           (g$symbol-macro$16219$Uaprr
                                                                                             g$x$18262$Uaprr
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (eqv?
                                                                                              g$t$18259$Uaprr
                                                                                              'file-options)
                                                                                          g$file-options-macro$16218$Uaprr
                                                                                          (if (g$memv$11715$Uaprr
                                                                                                g$t$18259$Uaprr
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$16206$Uaprr
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$18258$Uaprr)))))))))))))))))))))))))))))))))))))))))
             g$x$18258$Uaprr)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$18258$Uaprr))))))
   (g$local-macro-transformer$16221$Uaprr
     g$local-macro-transformer$19817$Uaprr
     (case-lambda ((g$x$18263$Uaprr) (car g$x$18263$Uaprr))))
   (g$do-macro-call$16222$Uaprr
     g$do-macro-call$19818$Uaprr
     (case-lambda
       ((g$transformer$18264$Uaprr g$expr$18265$Uaprr g$r$18266$Uaprr)
        (letrec* ((g$return$18267$Uaprr
                    (case-lambda
                      ((g$x$18275$Uaprr)
                       (begin
                         ((letrec ((g$f$18276$Uaprr
                                     (case-lambda
                                       ((g$x$18277$Uaprr)
                                        (if (not (g$stx?$15684$Uaprr
                                                   g$x$18277$Uaprr))
                                          (if (pair? g$x$18277$Uaprr)
                                            (begin
                                              (g$f$18276$Uaprr
                                                (car g$x$18277$Uaprr))
                                              (g$f$18276$Uaprr
                                                (cdr g$x$18277$Uaprr)))
                                            (if (g$vector?$12463$Uaprr
                                                  g$x$18277$Uaprr)
                                              (g$vector-for-each$12527$Uaprr
                                                g$f$18276$Uaprr
                                                g$x$18277$Uaprr)
                                              (if (g$symbol?$12465$Uaprr
                                                    g$x$18277$Uaprr)
                                                (g$syntax-violation$16329$Uaprr
                                                  '#f
                                                  '"raw symbol encountered in output of macro"
                                                  g$expr$18265$Uaprr
                                                  g$x$18277$Uaprr)
                                                (void))))
                                          (void))))))
                            g$f$18276$Uaprr)
                          g$x$18275$Uaprr)
                         (g$add-mark$15701$Uaprr
                           (g$gen-mark$15696$Uaprr)
                           g$x$18275$Uaprr
                           g$expr$18265$Uaprr))))))
          ((case-lambda
             ((g$x$18268$Uaprr)
              (if (g$procedure?$12467$Uaprr g$x$18268$Uaprr)
                (g$return$18267$Uaprr
                  (g$x$18268$Uaprr
                    (case-lambda
                      ((g$id$18269$Uaprr)
                       (begin
                         (if (not (g$id?$15712$Uaprr g$id$18269$Uaprr))
                           (assertion-violation
                             'rho
                             '"not an identifier"
                             g$id$18269$Uaprr)
                           (void))
                         ((case-lambda
                            ((g$label$18270$Uaprr)
                             ((case-lambda
                                ((g$binding$18271$Uaprr)
                                 ((case-lambda
                                    ((g$t$18272$Uaprr)
                                     (if (eqv?
                                           g$t$18272$Uaprr
                                           'local-ctv)
                                       (g$cadr$12475$Uaprr
                                         g$binding$18271$Uaprr)
                                       (if (eqv?
                                             g$t$18272$Uaprr
                                             'global-ctv)
                                         ((case-lambda
                                            ((g$lib$18273$Uaprr
                                               g$loc$18274$Uaprr)
                                             (begin
                                               (g$visit-library$15419$Uaprr
                                                 g$lib$18273$Uaprr)
                                               (symbol-value
                                                 g$loc$18274$Uaprr))))
                                          (g$cadr$12475$Uaprr
                                            g$binding$18271$Uaprr)
                                          (g$cddr$12477$Uaprr
                                            g$binding$18271$Uaprr))
                                         '#f))))
                                  (car g$binding$18271$Uaprr))))
                              (g$label->binding$15727$Uaprr
                                g$label$18270$Uaprr
                                g$r$18266$Uaprr))))
                          (g$id->label$15725$Uaprr
                            g$id$18269$Uaprr)))))))
                (g$return$18267$Uaprr g$x$18268$Uaprr))))
           (g$transformer$18264$Uaprr
             (g$add-mark$15701$Uaprr
               g$anti-mark$15697$Uaprr
               g$expr$18265$Uaprr
               '#f)))))))
   (g$chi-macro$16223$Uaprr
     g$chi-macro$19819$Uaprr
     (case-lambda
       ((g$p$18278$Uaprr g$e$18279$Uaprr g$r$18280$Uaprr)
        (g$do-macro-call$16222$Uaprr
          (g$macro-transformer$16220$Uaprr g$p$18278$Uaprr)
          g$e$18279$Uaprr
          g$r$18280$Uaprr))))
   (g$chi-local-macro$16224$Uaprr
     g$chi-local-macro$19820$Uaprr
     (case-lambda
       ((g$p$18281$Uaprr g$e$18282$Uaprr g$r$18283$Uaprr)
        (g$do-macro-call$16222$Uaprr
          (g$local-macro-transformer$16221$Uaprr g$p$18281$Uaprr)
          g$e$18282$Uaprr
          g$r$18283$Uaprr))))
   (g$chi-global-macro$16225$Uaprr
     g$chi-global-macro$19821$Uaprr
     (case-lambda
       ((g$p$18284$Uaprr g$e$18285$Uaprr g$r$18286$Uaprr)
        ((case-lambda
           ((g$lib$18287$Uaprr g$loc$18288$Uaprr)
            (begin
              (g$visit-library$15419$Uaprr g$lib$18287$Uaprr)
              ((case-lambda
                 ((g$x$18289$Uaprr)
                  ((case-lambda
                     ((g$transformer$18290$Uaprr)
                      (g$do-macro-call$16222$Uaprr
                        g$transformer$18290$Uaprr
                        g$e$18285$Uaprr
                        g$r$18286$Uaprr)))
                   (if (g$procedure?$12467$Uaprr g$x$18289$Uaprr)
                     g$x$18289$Uaprr
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$18289$Uaprr)))))
               (symbol-value g$loc$18288$Uaprr)))))
         (car g$p$18284$Uaprr)
         (cdr g$p$18284$Uaprr)))))
   (g$chi-expr*$16226$Uaprr
     g$chi-expr*$19822$Uaprr
     (case-lambda
       ((g$e*$18291$Uaprr g$r$18292$Uaprr g$mr$18293$Uaprr)
        (if (null? g$e*$18291$Uaprr)
          '()
          ((case-lambda
             ((g$e$18294$Uaprr)
              (cons
                g$e$18294$Uaprr
                (g$chi-expr*$16226$Uaprr
                  (cdr g$e*$18291$Uaprr)
                  g$r$18292$Uaprr
                  g$mr$18293$Uaprr))))
           (g$chi-expr$16228$Uaprr
             (car g$e*$18291$Uaprr)
             g$r$18292$Uaprr
             g$mr$18293$Uaprr))))))
   (g$chi-application$16227$Uaprr
     g$chi-application$19823$Uaprr
     (case-lambda
       ((g$e$18295$Uaprr g$r$18296$Uaprr g$mr$18297$Uaprr)
        ((case-lambda
           ((g$t$18298$Uaprr)
            ((case-lambda
               ((g$ls/false$18299$Uaprr)
                (if g$ls/false$18299$Uaprr
                  (apply
                    (case-lambda
                      ((g$rator$18300$Uaprr g$rands$18301$Uaprr)
                       ((case-lambda
                          ((g$rator$18302$Uaprr)
                           (cons
                             g$rator$18302$Uaprr
                             (g$chi-expr*$16226$Uaprr
                               g$rands$18301$Uaprr
                               g$r$18296$Uaprr
                               g$mr$18297$Uaprr))))
                        (g$chi-expr$16228$Uaprr
                          g$rator$18300$Uaprr
                          g$r$18296$Uaprr
                          g$mr$18297$Uaprr))))
                    g$ls/false$18299$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$18298$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$18298$Uaprr
               '(any . each-any)))))
         g$e$18295$Uaprr))))
   (g$chi-expr$16228$Uaprr
     g$chi-expr$19824$Uaprr
     (case-lambda
       ((g$e$18303$Uaprr g$r$18304$Uaprr g$mr$18305$Uaprr)
        (call-with-values
          (case-lambda
            (()
             (g$syntax-type$15732$Uaprr
               g$e$18303$Uaprr
               g$r$18304$Uaprr)))
          (case-lambda
            ((g$type$18309$Uaprr g$value$18310$Uaprr g$kwd$18311$Uaprr)
             ((case-lambda
                ((g$kwd$18312$Uaprr
                   g$value$18313$Uaprr
                   g$type$18314$Uaprr)
                 ((case-lambda
                    ((g$t$18315$Uaprr)
                     (if (eqv? g$t$18315$Uaprr 'core-macro)
                       ((case-lambda
                          ((g$transformer$18316$Uaprr)
                           (g$transformer$18316$Uaprr
                             g$e$18303$Uaprr
                             g$r$18304$Uaprr
                             g$mr$18305$Uaprr)))
                        (g$core-macro-transformer$16217$Uaprr
                          g$value$18313$Uaprr))
                       (if (eqv? g$t$18315$Uaprr 'global)
                         ((case-lambda
                            ((g$lib$18317$Uaprr)
                             ((case-lambda
                                ((g$loc$18318$Uaprr)
                                 (begin
                                   ((g$inv-collector$16265$Uaprr)
                                    g$lib$18317$Uaprr)
                                   g$loc$18318$Uaprr)))
                              (cdr g$value$18313$Uaprr))))
                          (car g$value$18313$Uaprr))
                         (if (eqv? g$t$18315$Uaprr 'core-prim)
                           ((case-lambda
                              ((g$name$18319$Uaprr)
                               (list 'primitive g$name$18319$Uaprr)))
                            g$value$18313$Uaprr)
                           (if (eqv? g$t$18315$Uaprr 'call)
                             (g$chi-application$16227$Uaprr
                               g$e$18303$Uaprr
                               g$r$18304$Uaprr
                               g$mr$18305$Uaprr)
                             (if (eqv? g$t$18315$Uaprr 'lexical)
                               ((case-lambda
                                  ((g$lex$18320$Uaprr)
                                   g$lex$18320$Uaprr))
                                (g$lexical-var$16154$Uaprr
                                  g$value$18313$Uaprr))
                               (if (g$memv$11715$Uaprr
                                     g$t$18315$Uaprr
                                     '(global-macro global-macro!))
                                 (g$chi-expr$16228$Uaprr
                                   (g$chi-global-macro$16225$Uaprr
                                     g$value$18313$Uaprr
                                     g$e$18303$Uaprr
                                     g$r$18304$Uaprr)
                                   g$r$18304$Uaprr
                                   g$mr$18305$Uaprr)
                                 (if (g$memv$11715$Uaprr
                                       g$t$18315$Uaprr
                                       '(local-macro local-macro!))
                                   (g$chi-expr$16228$Uaprr
                                     (g$chi-local-macro$16224$Uaprr
                                       g$value$18313$Uaprr
                                       g$e$18303$Uaprr
                                       g$r$18304$Uaprr)
                                     g$r$18304$Uaprr
                                     g$mr$18305$Uaprr)
                                   (if (g$memv$11715$Uaprr
                                         g$t$18315$Uaprr
                                         '(macro macro!))
                                     (g$chi-expr$16228$Uaprr
                                       (g$chi-macro$16223$Uaprr
                                         g$value$18313$Uaprr
                                         g$e$18303$Uaprr
                                         g$r$18304$Uaprr)
                                       g$r$18304$Uaprr
                                       g$mr$18305$Uaprr)
                                     (if (eqv?
                                           g$t$18315$Uaprr
                                           'constant)
                                       ((case-lambda
                                          ((g$datum$18321$Uaprr)
                                           (list
                                             'quote
                                             g$datum$18321$Uaprr)))
                                        g$value$18313$Uaprr)
                                       (if (eqv? g$t$18315$Uaprr 'set!)
                                         (g$chi-set!$16229$Uaprr
                                           g$e$18303$Uaprr
                                           g$r$18304$Uaprr
                                           g$mr$18305$Uaprr)
                                         (if (eqv?
                                               g$t$18315$Uaprr
                                               'begin)
                                           ((case-lambda
                                              ((g$t$18322$Uaprr)
                                               ((case-lambda
                                                  ((g$ls/false$18323$Uaprr)
                                                   (if g$ls/false$18323$Uaprr
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$18324$Uaprr
                                                            g$x*$18325$Uaprr)
                                                          (g$build-sequence$15637$Uaprr
                                                            '#f
                                                            (g$chi-expr*$16226$Uaprr
                                                              (cons
                                                                g$x$18324$Uaprr
                                                                g$x*$18325$Uaprr)
                                                              g$r$18304$Uaprr
                                                              g$mr$18305$Uaprr))))
                                                       g$ls/false$18323$Uaprr)
                                                     (g$syntax-violation$16329$Uaprr
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$18322$Uaprr))))
                                                (g$syntax-dispatch$16210$Uaprr
                                                  g$t$18322$Uaprr
                                                  '(_ any
                                                      .
                                                      each-any)))))
                                            g$e$18303$Uaprr)
                                           (if (g$memv$11715$Uaprr
                                                 g$t$18315$Uaprr
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$18326$Uaprr)
                                                 ((case-lambda
                                                    ((g$ls/false$18327$Uaprr)
                                                     (if (if g$ls/false$18327$Uaprr
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$18328$Uaprr
                                                                    g$xrhs*$18329$Uaprr
                                                                    g$xbody$18330$Uaprr
                                                                    g$xbody*$18331$Uaprr)
                                                                  (if (not (g$valid-bound-ids?$15717$Uaprr
                                                                             g$xlhs*$18328$Uaprr))
                                                                    (g$syntax-violation$16329$Uaprr
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$18303$Uaprr)
                                                                    (void))))
                                                               g$ls/false$18327$Uaprr))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$18332$Uaprr
                                                              g$xrhs*$18333$Uaprr
                                                              g$xbody$18334$Uaprr
                                                              g$xbody*$18335$Uaprr)
                                                            ((case-lambda
                                                               ((g$xlab*$18336$Uaprr)
                                                                ((case-lambda
                                                                   ((g$xrib$18337$Uaprr)
                                                                    ((case-lambda
                                                                       ((g$xb*$18338$Uaprr)
                                                                        (g$build-sequence$15637$Uaprr
                                                                          '#f
                                                                          (g$chi-expr*$16226$Uaprr
                                                                            (g$map$11722$Uaprr
                                                                              (case-lambda
                                                                                ((g$x$18339$Uaprr)
                                                                                 (g$add-subst$15702$Uaprr
                                                                                   g$xrib$18337$Uaprr
                                                                                   g$x$18339$Uaprr)))
                                                                              (cons
                                                                                g$xbody$18334$Uaprr
                                                                                g$xbody*$18335$Uaprr))
                                                                            (append
                                                                              (g$map$11722$Uaprr
                                                                                cons
                                                                                g$xlab*$18336$Uaprr
                                                                                g$xb*$18338$Uaprr)
                                                                              g$r$18304$Uaprr)
                                                                            (append
                                                                              (g$map$11722$Uaprr
                                                                                cons
                                                                                g$xlab*$18336$Uaprr
                                                                                g$xb*$18338$Uaprr)
                                                                              g$mr$18305$Uaprr)))))
                                                                     (g$map$11722$Uaprr
                                                                       (case-lambda
                                                                         ((g$x$18340$Uaprr)
                                                                          (g$make-eval-transformer$15760$Uaprr
                                                                            (g$expand-transformer$16258$Uaprr
                                                                              (if (eq? g$type$18314$Uaprr
                                                                                       'let-syntax)
                                                                                g$x$18340$Uaprr
                                                                                (g$add-subst$15702$Uaprr
                                                                                  g$xrib$18337$Uaprr
                                                                                  g$x$18340$Uaprr))
                                                                              g$mr$18305$Uaprr))))
                                                                       g$xrhs*$18333$Uaprr))))
                                                                 (g$make-full-rib$15678$Uaprr
                                                                   g$xlhs*$18332$Uaprr
                                                                   g$xlab*$18336$Uaprr))))
                                                             (g$map$11722$Uaprr
                                                               g$gen-label$15649$Uaprr
                                                               g$xlhs*$18332$Uaprr))))
                                                         g$ls/false$18327$Uaprr)
                                                       (g$syntax-violation$16329$Uaprr
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$18326$Uaprr))))
                                                  (g$syntax-dispatch$16210$Uaprr
                                                    g$t$18326$Uaprr
                                                    '(_ #(each
                                                          (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$18303$Uaprr)
                                             (if (eqv?
                                                   g$t$18315$Uaprr
                                                   'displaced-lexical)
                                               (g$syntax-violation$16329$Uaprr
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$18303$Uaprr)
                                               (if (eqv?
                                                     g$t$18315$Uaprr
                                                     'syntax)
                                                 (g$syntax-violation$16329$Uaprr
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$18303$Uaprr)
                                                 (if (g$memv$11715$Uaprr
                                                       g$t$18315$Uaprr
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$16329$Uaprr
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$18341$Uaprr)
                                                           (if (eqv?
                                                                 g$t$18341$Uaprr
                                                                 'define)
                                                             '"a definition"
                                                             (if (eqv?
                                                                   g$t$18341$Uaprr
                                                                   'define-syntax)
                                                               '"a define-syntax"
                                                               (if (eqv?
                                                                     g$t$18341$Uaprr
                                                                     'module)
                                                                 '"a module definition"
                                                                 (if (eqv?
                                                                       g$t$18341$Uaprr
                                                                       'library)
                                                                   '"a library definition"
                                                                   (if (eqv?
                                                                         g$t$18341$Uaprr
                                                                         'import)
                                                                     '"an import declaration"
                                                                     (if (eqv?
                                                                           g$t$18341$Uaprr
                                                                           'export)
                                                                       '"an export declaration"
                                                                       '"a non-expression"))))))))
                                                        g$type$18314$Uaprr)
                                                       '" was found where an expression was expected")
                                                     g$e$18303$Uaprr)
                                                   (if (eqv?
                                                         g$t$18315$Uaprr
                                                         'mutable)
                                                     (g$syntax-violation$16329$Uaprr
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$18303$Uaprr)
                                                     (g$syntax-violation$16329$Uaprr
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$18303$Uaprr)))))))))))))))))))
                  g$type$18314$Uaprr)))
              g$kwd$18311$Uaprr
              g$value$18310$Uaprr
              g$type$18309$Uaprr)))))))
   (g$chi-set!$16229$Uaprr
     g$chi-set!$19825$Uaprr
     (case-lambda
       ((g$e$18342$Uaprr g$r$18343$Uaprr g$mr$18344$Uaprr)
        ((case-lambda
           ((g$t$18345$Uaprr)
            ((case-lambda
               ((g$ls/false$18346$Uaprr)
                (if (if g$ls/false$18346$Uaprr
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$18347$Uaprr g$v$18348$Uaprr)
                             (g$id?$15712$Uaprr g$x$18347$Uaprr)))
                          g$ls/false$18346$Uaprr))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$18349$Uaprr g$v$18350$Uaprr)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$15732$Uaprr
                              g$x$18349$Uaprr
                              g$r$18343$Uaprr)))
                         (case-lambda
                           ((g$type$18354$Uaprr
                              g$value$18355$Uaprr
                              g$kwd$18356$Uaprr)
                            ((case-lambda
                               ((g$kwd$18357$Uaprr
                                  g$value$18358$Uaprr
                                  g$type$18359$Uaprr)
                                ((case-lambda
                                   ((g$t$18360$Uaprr)
                                    (if (eqv? g$t$18360$Uaprr 'lexical)
                                      (begin
                                        (g$set-lexical-mutable!$16156$Uaprr
                                          g$value$18358$Uaprr
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$16154$Uaprr
                                            g$value$18358$Uaprr)
                                          (g$chi-expr$16228$Uaprr
                                            g$v$18350$Uaprr
                                            g$r$18343$Uaprr
                                            g$mr$18344$Uaprr)))
                                      (if (eqv?
                                            g$t$18360$Uaprr
                                            'core-prim)
                                        (g$syntax-violation$16329$Uaprr
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$18342$Uaprr)
                                        (if (eqv?
                                              g$t$18360$Uaprr
                                              'global)
                                          (g$syntax-violation$16329$Uaprr
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$18342$Uaprr)
                                          (if (eqv?
                                                g$t$18360$Uaprr
                                                'global-macro!)
                                            (g$chi-expr$16228$Uaprr
                                              (g$chi-global-macro$16225$Uaprr
                                                g$value$18358$Uaprr
                                                g$e$18342$Uaprr
                                                g$r$18343$Uaprr)
                                              g$r$18343$Uaprr
                                              g$mr$18344$Uaprr)
                                            (if (eqv?
                                                  g$t$18360$Uaprr
                                                  'local-macro!)
                                              (g$chi-expr$16228$Uaprr
                                                (g$chi-local-macro$16224$Uaprr
                                                  g$value$18358$Uaprr
                                                  g$e$18342$Uaprr
                                                  g$r$18343$Uaprr)
                                                g$r$18343$Uaprr
                                                g$mr$18344$Uaprr)
                                              (if (eqv?
                                                    g$t$18360$Uaprr
                                                    'mutable)
                                                (g$syntax-violation$16329$Uaprr
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$18342$Uaprr)
                                                (g$syntax-violation$16329$Uaprr
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$18342$Uaprr)))))))))
                                 g$type$18359$Uaprr)))
                             g$kwd$18356$Uaprr
                             g$value$18355$Uaprr
                             g$type$18354$Uaprr))))))
                    g$ls/false$18346$Uaprr)
                  (g$syntax-violation$16329$Uaprr
                    '#f
                    '"invalid syntax"
                    g$t$18345$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$18345$Uaprr
               '(_ any any)))))
         g$e$18342$Uaprr))))
   (g$verify-formals$16230$Uaprr
     g$verify-formals$19826$Uaprr
     (case-lambda
       ((g$fmls$18361$Uaprr g$stx$18362$Uaprr)
        ((case-lambda
           ((g$t$18363$Uaprr)
            ((case-lambda
               ((g$ls/false$18364$Uaprr)
                (if g$ls/false$18364$Uaprr
                  (apply
                    (case-lambda
                      ((g$x*$18365$Uaprr)
                       (if (not (g$valid-bound-ids?$15717$Uaprr
                                  g$x*$18365$Uaprr))
                         (g$invalid-fmls-error$16175$Uaprr
                           g$stx$18362$Uaprr
                           g$fmls$18361$Uaprr)
                         (void))))
                    g$ls/false$18364$Uaprr)
                  ((case-lambda
                     ((g$t$18366$Uaprr)
                      ((case-lambda
                         ((g$ls/false$18367$Uaprr)
                          (if g$ls/false$18367$Uaprr
                            (apply
                              (case-lambda
                                ((g$x*$18368$Uaprr g$x$18369$Uaprr)
                                 (if (not (g$valid-bound-ids?$15717$Uaprr
                                            (cons
                                              g$x$18369$Uaprr
                                              g$x*$18368$Uaprr)))
                                   (g$invalid-fmls-error$16175$Uaprr
                                     g$stx$18362$Uaprr
                                     g$fmls$18361$Uaprr)
                                   (void))))
                              g$ls/false$18367$Uaprr)
                            ((case-lambda
                               ((g$t$18370$Uaprr)
                                ((case-lambda
                                   ((g$ls/false$18371$Uaprr)
                                    (if g$ls/false$18371$Uaprr
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$16329$Uaprr
                                             '#f
                                             '"invalid syntax"
                                             g$stx$18362$Uaprr)))
                                        g$ls/false$18371$Uaprr)
                                      (g$syntax-violation$16329$Uaprr
                                        '#f
                                        '"invalid syntax"
                                        g$t$18370$Uaprr))))
                                 (g$syntax-dispatch$16210$Uaprr
                                   g$t$18370$Uaprr
                                   '_))))
                             g$t$18366$Uaprr))))
                       (g$syntax-dispatch$16210$Uaprr
                         g$t$18366$Uaprr
                         '#(each+ any () any)))))
                   g$t$18363$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$18363$Uaprr
               'each-any))))
         g$fmls$18361$Uaprr))))
   (g$chi-lambda-clause$16231$Uaprr
     g$chi-lambda-clause$19827$Uaprr
     (case-lambda
       ((g$stx$18372$Uaprr
          g$fmls$18373$Uaprr
          g$body*$18374$Uaprr
          g$r$18375$Uaprr
          g$mr$18376$Uaprr)
        ((case-lambda
           ((g$t$18377$Uaprr)
            ((case-lambda
               ((g$ls/false$18378$Uaprr)
                (if g$ls/false$18378$Uaprr
                  (apply
                    (case-lambda
                      ((g$x*$18379$Uaprr)
                       (begin
                         (g$verify-formals$16230$Uaprr
                           g$fmls$18373$Uaprr
                           g$stx$18372$Uaprr)
                         ((case-lambda
                            ((g$lex*$18380$Uaprr g$lab*$18381$Uaprr)
                             (values
                               g$lex*$18380$Uaprr
                               (g$chi-internal$16239$Uaprr
                                 (g$add-subst$15702$Uaprr
                                   (g$make-full-rib$15678$Uaprr
                                     g$x*$18379$Uaprr
                                     g$lab*$18381$Uaprr)
                                   g$body*$18374$Uaprr)
                                 (g$add-lexicals$16158$Uaprr
                                   g$lab*$18381$Uaprr
                                   g$lex*$18380$Uaprr
                                   g$r$18375$Uaprr)
                                 g$mr$18376$Uaprr))))
                          (g$map$11722$Uaprr
                            g$gen-lexical$15647$Uaprr
                            g$x*$18379$Uaprr)
                          (g$map$11722$Uaprr
                            g$gen-label$15649$Uaprr
                            g$x*$18379$Uaprr)))))
                    g$ls/false$18378$Uaprr)
                  ((case-lambda
                     ((g$t$18382$Uaprr)
                      ((case-lambda
                         ((g$ls/false$18383$Uaprr)
                          (if g$ls/false$18383$Uaprr
                            (apply
                              (case-lambda
                                ((g$x*$18384$Uaprr g$x$18385$Uaprr)
                                 (begin
                                   (g$verify-formals$16230$Uaprr
                                     g$fmls$18373$Uaprr
                                     g$stx$18372$Uaprr)
                                   ((case-lambda
                                      ((g$lex*$18386$Uaprr
                                         g$lab*$18387$Uaprr
                                         g$lex$18388$Uaprr
                                         g$lab$18389$Uaprr)
                                       (values
                                         (append
                                           g$lex*$18386$Uaprr
                                           g$lex$18388$Uaprr)
                                         (g$chi-internal$16239$Uaprr
                                           (g$add-subst$15702$Uaprr
                                             (g$make-full-rib$15678$Uaprr
                                               (cons
                                                 g$x$18385$Uaprr
                                                 g$x*$18384$Uaprr)
                                               (cons
                                                 g$lab$18389$Uaprr
                                                 g$lab*$18387$Uaprr))
                                             g$body*$18374$Uaprr)
                                           (g$add-lexicals$16158$Uaprr
                                             (cons
                                               g$lab$18389$Uaprr
                                               g$lab*$18387$Uaprr)
                                             (cons
                                               g$lex$18388$Uaprr
                                               g$lex*$18386$Uaprr)
                                             g$r$18375$Uaprr)
                                           g$mr$18376$Uaprr))))
                                    (g$map$11722$Uaprr
                                      g$gen-lexical$15647$Uaprr
                                      g$x*$18384$Uaprr)
                                    (g$map$11722$Uaprr
                                      g$gen-label$15649$Uaprr
                                      g$x*$18384$Uaprr)
                                    (g$gen-lexical$15647$Uaprr
                                      g$x$18385$Uaprr)
                                    (g$gen-label$15649$Uaprr
                                      g$x$18385$Uaprr)))))
                              g$ls/false$18383$Uaprr)
                            ((case-lambda
                               ((g$t$18390$Uaprr)
                                ((case-lambda
                                   ((g$ls/false$18391$Uaprr)
                                    (if g$ls/false$18391$Uaprr
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$16329$Uaprr
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$18373$Uaprr)))
                                        g$ls/false$18391$Uaprr)
                                      (g$syntax-violation$16329$Uaprr
                                        '#f
                                        '"invalid syntax"
                                        g$t$18390$Uaprr))))
                                 (g$syntax-dispatch$16210$Uaprr
                                   g$t$18390$Uaprr
                                   '_))))
                             g$t$18382$Uaprr))))
                       (g$syntax-dispatch$16210$Uaprr
                         g$t$18382$Uaprr
                         '#(each+ any () any)))))
                   g$t$18377$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$18377$Uaprr
               'each-any))))
         g$fmls$18373$Uaprr))))
   (g$chi-lambda-clause*$16232$Uaprr
     g$chi-lambda-clause*$19828$Uaprr
     (case-lambda
       ((g$stx$18392$Uaprr
          g$fmls*$18393$Uaprr
          g$body**$18394$Uaprr
          g$r$18395$Uaprr
          g$mr$18396$Uaprr)
        (if (null? g$fmls*$18393$Uaprr)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$16231$Uaprr
                 g$stx$18392$Uaprr
                 (car g$fmls*$18393$Uaprr)
                 (car g$body**$18394$Uaprr)
                 g$r$18395$Uaprr
                 g$mr$18396$Uaprr)))
            (case-lambda
              ((g$a$18399$Uaprr g$b$18400$Uaprr)
               ((case-lambda
                  ((g$b$18401$Uaprr g$a$18402$Uaprr)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$16232$Uaprr
                          g$stx$18392$Uaprr
                          (cdr g$fmls*$18393$Uaprr)
                          (cdr g$body**$18394$Uaprr)
                          g$r$18395$Uaprr
                          g$mr$18396$Uaprr)))
                     (case-lambda
                       ((g$a*$18405$Uaprr g$b*$18406$Uaprr)
                        ((case-lambda
                           ((g$b*$18407$Uaprr g$a*$18408$Uaprr)
                            (values
                              (cons g$a$18402$Uaprr g$a*$18408$Uaprr)
                              (cons g$b$18401$Uaprr g$b*$18407$Uaprr))))
                         g$b*$18406$Uaprr
                         g$a*$18405$Uaprr))))))
                g$b$18400$Uaprr
                g$a$18399$Uaprr))))))))
   (g$chi-defun$16233$Uaprr
     g$chi-defun$19829$Uaprr
     (case-lambda
       ((g$x$18409$Uaprr g$r$18410$Uaprr g$mr$18411$Uaprr)
        ((case-lambda
           ((g$fmls$18412$Uaprr g$body*$18413$Uaprr)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$16231$Uaprr
                   g$fmls$18412$Uaprr
                   g$fmls$18412$Uaprr
                   g$body*$18413$Uaprr
                   g$r$18410$Uaprr
                   g$mr$18411$Uaprr)))
              (case-lambda
                ((g$fmls$18416$Uaprr g$body$18417$Uaprr)
                 ((case-lambda
                    ((g$body$18418$Uaprr g$fmls$18419$Uaprr)
                     (g$build-lambda$15634$Uaprr
                       '#f
                       g$fmls$18419$Uaprr
                       g$body$18418$Uaprr)))
                  g$body$18417$Uaprr
                  g$fmls$18416$Uaprr))))))
         (car g$x$18409$Uaprr)
         (cdr g$x$18409$Uaprr)))))
   (g$chi-rhs$16234$Uaprr
     g$chi-rhs$19830$Uaprr
     (case-lambda
       ((g$rhs$18420$Uaprr g$r$18421$Uaprr g$mr$18422$Uaprr)
        ((case-lambda
           ((g$t$18423$Uaprr)
            (if (eqv? g$t$18423$Uaprr 'defun)
              (g$chi-defun$16233$Uaprr
                (cdr g$rhs$18420$Uaprr)
                g$r$18421$Uaprr
                g$mr$18422$Uaprr)
              (if (eqv? g$t$18423$Uaprr 'expr)
                ((case-lambda
                   ((g$expr$18424$Uaprr)
                    (g$chi-expr$16228$Uaprr
                      g$expr$18424$Uaprr
                      g$r$18421$Uaprr
                      g$mr$18422$Uaprr)))
                 (cdr g$rhs$18420$Uaprr))
                (if (eqv? g$t$18423$Uaprr 'top-expr)
                  ((case-lambda
                     ((g$expr$18425$Uaprr)
                      (g$build-sequence$15637$Uaprr
                        '#f
                        (list
                          (g$chi-expr$16228$Uaprr
                            g$expr$18425$Uaprr
                            g$r$18421$Uaprr
                            g$mr$18422$Uaprr)
                          (g$build-void$15638$Uaprr)))))
                   (cdr g$rhs$18420$Uaprr))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$18420$Uaprr))))))
         (car g$rhs$18420$Uaprr)))))
   (g$expand-interaction-rhs*/init*$16235$Uaprr
     g$expand-interaction-rhs*/init*$19831$Uaprr
     (case-lambda
       ((g$lhs*$18426$Uaprr
          g$rhs*$18427$Uaprr
          g$init*$18428$Uaprr
          g$r$18429$Uaprr
          g$mr$18430$Uaprr)
        ((letrec ((g$f$18431$Uaprr
                    (case-lambda
                      ((g$lhs*$18432$Uaprr g$rhs*$18433$Uaprr)
                       (if (null? g$lhs*$18432$Uaprr)
                         (g$map$11722$Uaprr
                           (case-lambda
                             ((g$x$18434$Uaprr)
                              (g$chi-expr$16228$Uaprr
                                g$x$18434$Uaprr
                                g$r$18429$Uaprr
                                g$mr$18430$Uaprr)))
                           g$init*$18428$Uaprr)
                         ((case-lambda
                            ((g$lhs$18435$Uaprr g$rhs$18436$Uaprr)
                             ((case-lambda
                                ((g$t$18437$Uaprr)
                                 (if (eqv? g$t$18437$Uaprr 'defun)
                                   ((case-lambda
                                      ((g$rhs$18438$Uaprr)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$18435$Uaprr
                                           g$rhs$18438$Uaprr)
                                         (g$f$18431$Uaprr
                                           (cdr g$lhs*$18432$Uaprr)
                                           (cdr g$rhs*$18433$Uaprr)))))
                                    (g$chi-defun$16233$Uaprr
                                      (cdr g$rhs$18436$Uaprr)
                                      g$r$18429$Uaprr
                                      g$mr$18430$Uaprr))
                                   (if (eqv? g$t$18437$Uaprr 'expr)
                                     ((case-lambda
                                        ((g$rhs$18439$Uaprr)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$18435$Uaprr
                                             g$rhs$18439$Uaprr)
                                           (g$f$18431$Uaprr
                                             (cdr g$lhs*$18432$Uaprr)
                                             (cdr g$rhs*$18433$Uaprr)))))
                                      (g$chi-expr$16228$Uaprr
                                        (cdr g$rhs$18436$Uaprr)
                                        g$r$18429$Uaprr
                                        g$mr$18430$Uaprr))
                                     (if (eqv?
                                           g$t$18437$Uaprr
                                           'top-expr)
                                       ((case-lambda
                                          ((g$e$18440$Uaprr)
                                           (cons
                                             g$e$18440$Uaprr
                                             (g$f$18431$Uaprr
                                               (cdr g$lhs*$18432$Uaprr)
                                               (cdr g$rhs*$18433$Uaprr)))))
                                        (g$chi-expr$16228$Uaprr
                                          (cdr g$rhs$18436$Uaprr)
                                          g$r$18429$Uaprr
                                          g$mr$18430$Uaprr))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$18436$Uaprr))))))
                              (car g$rhs$18436$Uaprr))))
                          (car g$lhs*$18432$Uaprr)
                          (car g$rhs*$18433$Uaprr)))))))
           g$f$18431$Uaprr)
         g$lhs*$18426$Uaprr
         g$rhs*$18427$Uaprr))))
   (g$chi-rhs*$16236$Uaprr
     g$chi-rhs*$19832$Uaprr
     (case-lambda
       ((g$rhs*$18441$Uaprr g$r$18442$Uaprr g$mr$18443$Uaprr)
        ((letrec ((g$f$18444$Uaprr
                    (case-lambda
                      ((g$ls$18445$Uaprr)
                       (if (null? g$ls$18445$Uaprr)
                         '()
                         ((case-lambda
                            ((g$a$18446$Uaprr)
                             (cons
                               g$a$18446$Uaprr
                               (g$f$18444$Uaprr
                                 (cdr g$ls$18445$Uaprr)))))
                          (g$chi-rhs$16234$Uaprr
                            (car g$ls$18445$Uaprr)
                            g$r$18442$Uaprr
                            g$mr$18443$Uaprr)))))))
           g$f$18444$Uaprr)
         g$rhs*$18441$Uaprr))))
   (g$find-bound=?$16237$Uaprr
     g$find-bound=?$19833$Uaprr
     (case-lambda
       ((g$x$18447$Uaprr g$lhs*$18448$Uaprr g$rhs*$18449$Uaprr)
        (if (null? g$lhs*$18448$Uaprr)
          '#f
          (if (g$bound-id=?$15715$Uaprr
                g$x$18447$Uaprr
                (car g$lhs*$18448$Uaprr))
            (car g$rhs*$18449$Uaprr)
            (g$find-bound=?$16237$Uaprr
              g$x$18447$Uaprr
              (cdr g$lhs*$18448$Uaprr)
              (cdr g$rhs*$18449$Uaprr)))))))
   (g$find-dups$16238$Uaprr
     g$find-dups$19834$Uaprr
     (case-lambda
       ((g$ls$18450$Uaprr)
        ((letrec ((g$f$18451$Uaprr
                    (case-lambda
                      ((g$ls$18452$Uaprr g$dups$18453$Uaprr)
                       (if (null? g$ls$18452$Uaprr)
                         g$dups$18453$Uaprr
                         ((case-lambda
                            ((g$t$18454$Uaprr)
                             (if g$t$18454$Uaprr
                               ((case-lambda
                                  ((g$x$18455$Uaprr)
                                   (g$f$18451$Uaprr
                                     (cdr g$ls$18452$Uaprr)
                                     (cons
                                       (list
                                         (car g$ls$18452$Uaprr)
                                         g$x$18455$Uaprr)
                                       g$dups$18453$Uaprr))))
                                g$t$18454$Uaprr)
                               (g$f$18451$Uaprr
                                 (cdr g$ls$18452$Uaprr)
                                 g$dups$18453$Uaprr))))
                          (g$find-bound=?$16237$Uaprr
                            (car g$ls$18452$Uaprr)
                            (cdr g$ls$18452$Uaprr)
                            (cdr g$ls$18452$Uaprr))))))))
           g$f$18451$Uaprr)
         g$ls$18450$Uaprr
         '()))))
   (g$chi-internal$16239$Uaprr
     g$chi-internal$19835$Uaprr
     (case-lambda
       ((g$e*$18456$Uaprr g$r$18457$Uaprr g$mr$18458$Uaprr)
        ((case-lambda
           ((g$rib$18459$Uaprr)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$16257$Uaprr
                   (g$map$11722$Uaprr
                     (case-lambda
                       ((g$x$18468$Uaprr)
                        (g$add-subst$15702$Uaprr
                          g$rib$18459$Uaprr
                          g$x$18468$Uaprr)))
                     (g$syntax->list$15711$Uaprr g$e*$18456$Uaprr))
                   g$r$18457$Uaprr
                   g$mr$18458$Uaprr
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$18459$Uaprr
                   '#f
                   '#t)))
              (case-lambda
                ((g$e*$18469$Uaprr
                   g$r$18470$Uaprr
                   g$mr$18471$Uaprr
                   g$lex*$18472$Uaprr
                   g$rhs*$18473$Uaprr
                   g$mod**$18474$Uaprr
                   g$kwd*$18475$Uaprr
                   g$_exp*$18476$Uaprr)
                 ((case-lambda
                    ((g$_exp*$18477$Uaprr
                       g$kwd*$18478$Uaprr
                       g$mod**$18479$Uaprr
                       g$rhs*$18480$Uaprr
                       g$lex*$18481$Uaprr
                       g$mr$18482$Uaprr
                       g$r$18483$Uaprr
                       g$e*$18484$Uaprr)
                     (begin
                       (if (null? g$e*$18484$Uaprr)
                         (g$syntax-violation$16329$Uaprr
                           '#f
                           '"no expression in body"
                           g$e*$18484$Uaprr)
                         (void))
                       ((case-lambda
                          ((g$init*$18485$Uaprr)
                           ((case-lambda
                              ((g$rhs*$18486$Uaprr)
                               (g$build-letrec*$15640$Uaprr
                                 '#f
                                 (g$reverse$12473$Uaprr
                                   g$lex*$18481$Uaprr)
                                 (g$reverse$12473$Uaprr
                                   g$rhs*$18486$Uaprr)
                                 (g$build-sequence$15637$Uaprr
                                   '#f
                                   g$init*$18485$Uaprr))))
                            (g$chi-rhs*$16236$Uaprr
                              g$rhs*$18480$Uaprr
                              g$r$18483$Uaprr
                              g$mr$18482$Uaprr))))
                        (g$chi-expr*$16226$Uaprr
                          (append
                            (apply
                              append
                              (g$reverse$12473$Uaprr
                                g$mod**$18479$Uaprr))
                            g$e*$18484$Uaprr)
                          g$r$18483$Uaprr
                          g$mr$18482$Uaprr)))))
                  g$_exp*$18476$Uaprr
                  g$kwd*$18475$Uaprr
                  g$mod**$18474$Uaprr
                  g$rhs*$18473$Uaprr
                  g$lex*$18472$Uaprr
                  g$mr$18471$Uaprr
                  g$r$18470$Uaprr
                  g$e*$18469$Uaprr))))))
         (g$make-empty-rib$15670$Uaprr)))))
   (g$parse-module$16240$Uaprr
     g$parse-module$19836$Uaprr
     (case-lambda
       ((g$e$18487$Uaprr)
        ((case-lambda
           ((g$t$18488$Uaprr)
            ((case-lambda
               ((g$ls/false$18489$Uaprr)
                (if g$ls/false$18489$Uaprr
                  (apply
                    (case-lambda
                      ((g$export*$18490$Uaprr g$b*$18491$Uaprr)
                       (begin
                         (if (not (g$for-all$11720$Uaprr
                                    g$id?$15712$Uaprr
                                    g$export*$18490$Uaprr))
                           (g$syntax-violation$16329$Uaprr
                             '#f
                             '"module exports must be identifiers"
                             g$e$18487$Uaprr)
                           (void))
                         (values
                           '#f
                           (g$list->vector$12460$Uaprr
                             g$export*$18490$Uaprr)
                           g$b*$18491$Uaprr))))
                    g$ls/false$18489$Uaprr)
                  ((case-lambda
                     ((g$t$18492$Uaprr)
                      ((case-lambda
                         ((g$ls/false$18493$Uaprr)
                          (if g$ls/false$18493$Uaprr
                            (apply
                              (case-lambda
                                ((g$name$18494$Uaprr
                                   g$export*$18495$Uaprr
                                   g$b*$18496$Uaprr)
                                 (begin
                                   (if (not (g$id?$15712$Uaprr
                                              g$name$18494$Uaprr))
                                     (g$syntax-violation$16329$Uaprr
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$18487$Uaprr)
                                     (void))
                                   (if (not (g$for-all$11720$Uaprr
                                              g$id?$15712$Uaprr
                                              g$export*$18495$Uaprr))
                                     (g$syntax-violation$16329$Uaprr
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$18487$Uaprr)
                                     (void))
                                   (values
                                     g$name$18494$Uaprr
                                     (g$list->vector$12460$Uaprr
                                       g$export*$18495$Uaprr)
                                     g$b*$18496$Uaprr))))
                              g$ls/false$18493$Uaprr)
                            (g$syntax-violation$16329$Uaprr
                              '#f
                              '"invalid syntax"
                              g$t$18492$Uaprr))))
                       (g$syntax-dispatch$16210$Uaprr
                         g$t$18492$Uaprr
                         '(_ any each-any . each-any)))))
                   g$t$18488$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$18488$Uaprr
               '(_ each-any . each-any)))))
         g$e$18487$Uaprr))))
   (g$8127$16241$Uaprr
     g$8127$19837$Uaprr
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$8130$Uaprr
       '#t
       '#t
       '#((mutable first-mark)
          (mutable exp-id-vec)
          (mutable exp-lab-vec))))
   (g$8129$16242$Uaprr g$8129$19838$Uaprr '#f)
   (g$8128$16243$Uaprr
     g$8128$19839$Uaprr
     (make-record-constructor-descriptor
       g$8127$16241$Uaprr
       '#f
       g$8129$16242$Uaprr))
   (g$module-interface?$16246$Uaprr
     g$module-interface?$19840$Uaprr
     (record-predicate g$8127$16241$Uaprr))
   (g$make-module-interface$16247$Uaprr
     g$make-module-interface$19841$Uaprr
     (record-constructor g$8128$16243$Uaprr))
   (g$module-interface-first-mark$16248$Uaprr
     g$module-interface-first-mark$19842$Uaprr
     (record-accessor g$8127$16241$Uaprr '0))
   (g$module-interface-exp-id-vec$16249$Uaprr
     g$module-interface-exp-id-vec$19843$Uaprr
     (record-accessor g$8127$16241$Uaprr '1))
   (g$module-interface-exp-lab-vec$16250$Uaprr
     g$module-interface-exp-lab-vec$19844$Uaprr
     (record-accessor g$8127$16241$Uaprr '2))
   (g$set-module-interface-first-mark!$16251$Uaprr
     g$set-module-interface-first-mark!$19845$Uaprr
     (record-mutator g$8127$16241$Uaprr '0))
   (g$set-module-interface-exp-id-vec!$16252$Uaprr
     g$set-module-interface-exp-id-vec!$19846$Uaprr
     (record-mutator g$8127$16241$Uaprr '1))
   (g$set-module-interface-exp-lab-vec!$16253$Uaprr
     g$set-module-interface-exp-lab-vec!$19847$Uaprr
     (record-mutator g$8127$16241$Uaprr '2))
   (g$module-interface-exp-id*$16254$Uaprr
     g$module-interface-exp-id*$19848$Uaprr
     (case-lambda
       ((g$iface$18497$Uaprr g$id$18498$Uaprr)
        (letrec* ((g$diff-marks$18499$Uaprr
                    (case-lambda
                      ((g$ls$18503$Uaprr g$x$18504$Uaprr)
                       (begin
                         (if (null? g$ls$18503$Uaprr)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$18505$Uaprr)
                             (if (eq? g$a$18505$Uaprr g$x$18504$Uaprr)
                               '()
                               (cons
                                 g$a$18505$Uaprr
                                 (g$diff-marks$18499$Uaprr
                                   (cdr g$ls$18503$Uaprr)
                                   g$x$18504$Uaprr)))))
                          (car g$ls$18503$Uaprr)))))))
          ((case-lambda
             ((g$diff$18500$Uaprr g$id-vec$18501$Uaprr)
              (if (null? g$diff$18500$Uaprr)
                g$id-vec$18501$Uaprr
                (g$vector-map$12526$Uaprr
                  (case-lambda
                    ((g$x$18502$Uaprr)
                     (g$make-stx$15685$Uaprr
                       (g$stx-expr$15686$Uaprr g$x$18502$Uaprr)
                       (append
                         g$diff$18500$Uaprr
                         (g$stx-mark*$15687$Uaprr g$x$18502$Uaprr))
                       '()
                       '())))
                  g$id-vec$18501$Uaprr))))
           (g$diff-marks$18499$Uaprr
             (g$stx-mark*$15687$Uaprr g$id$18498$Uaprr)
             (g$module-interface-first-mark$16248$Uaprr
               g$iface$18497$Uaprr))
           (g$module-interface-exp-id-vec$16249$Uaprr
             g$iface$18497$Uaprr))))))
   (g$syntax-transpose$16255$Uaprr
     g$syntax-transpose$19849$Uaprr
     (case-lambda
       ((g$object$18506$Uaprr
          g$base-id$18507$Uaprr
          g$new-id$18508$Uaprr)
        (letrec* ((g$who$18509$Uaprr 'syntax-transpose)
                  (g$err$18510$Uaprr
                    (case-lambda
                      ((g$msg$18552$Uaprr . g$args$18553$Uaprr)
                       (apply
                         assertion-violation
                         g$who$18509$Uaprr
                         g$msg$18552$Uaprr
                         g$args$18553$Uaprr))))
                  (g$split$18511$Uaprr
                    (case-lambda
                      ((g$s*$18545$Uaprr)
                       (if (eq? (car g$s*$18545$Uaprr) 'shift)
                         (values (list 'shift) (cdr g$s*$18545$Uaprr))
                         (call-with-values
                           (case-lambda
                             (()
                              (g$split$18511$Uaprr
                                (cdr g$s*$18545$Uaprr))))
                           (case-lambda
                             ((g$s1*$18548$Uaprr g$s2*$18549$Uaprr)
                              ((case-lambda
                                 ((g$s2*$18550$Uaprr g$s1*$18551$Uaprr)
                                  (values
                                    (cons
                                      (car g$s*$18545$Uaprr)
                                      g$s1*$18551$Uaprr)
                                    g$s2*$18550$Uaprr)))
                               g$s2*$18549$Uaprr
                               g$s1*$18548$Uaprr))))))))
                  (g$final$18512$Uaprr
                    (case-lambda
                      ((g$s*$18543$Uaprr)
                       (if ((case-lambda
                              ((g$t$18544$Uaprr)
                               (if g$t$18544$Uaprr
                                 g$t$18544$Uaprr
                                 (begin
                                   '#f
                                   (eq? (car g$s*$18543$Uaprr)
                                        'shift)))))
                            (null? g$s*$18543$Uaprr))
                         '()
                         (cons
                           (car g$s*$18543$Uaprr)
                           (g$final$18512$Uaprr
                             (cdr g$s*$18543$Uaprr)))))))
                  (g$diff$18513$Uaprr
                    (case-lambda
                      ((g$m$18523$Uaprr
                         g$m*$18524$Uaprr
                         g$s*$18525$Uaprr
                         g$ae*$18526$Uaprr)
                       (if (null? g$m*$18524$Uaprr)
                         (g$err$18510$Uaprr
                           '"unmatched identifiers"
                           g$base-id$18507$Uaprr
                           g$new-id$18508$Uaprr)
                         ((case-lambda
                            ((g$m1$18527$Uaprr)
                             (if (eq? g$m$18523$Uaprr g$m1$18527$Uaprr)
                               (values
                                 '()
                                 (g$final$18512$Uaprr g$s*$18525$Uaprr)
                                 '())
                               (call-with-values
                                 (case-lambda
                                   (()
                                    (g$split$18511$Uaprr
                                      g$s*$18525$Uaprr)))
                                 (case-lambda
                                   ((g$s1*$18530$Uaprr
                                      g$s2*$18531$Uaprr)
                                    ((case-lambda
                                       ((g$s2*$18532$Uaprr
                                          g$s1*$18533$Uaprr)
                                        (call-with-values
                                          (case-lambda
                                            (()
                                             (g$diff$18513$Uaprr
                                               g$m$18523$Uaprr
                                               (cdr g$m*$18524$Uaprr)
                                               g$s2*$18532$Uaprr
                                               (cdr g$ae*$18526$Uaprr))))
                                          (case-lambda
                                            ((g$nm*$18537$Uaprr
                                               g$ns*$18538$Uaprr
                                               g$nae*$18539$Uaprr)
                                             ((case-lambda
                                                ((g$nae*$18540$Uaprr
                                                   g$ns*$18541$Uaprr
                                                   g$nm*$18542$Uaprr)
                                                 (values
                                                   (cons
                                                     g$m1$18527$Uaprr
                                                     g$nm*$18542$Uaprr)
                                                   (append
                                                     g$s1*$18533$Uaprr
                                                     g$ns*$18541$Uaprr)
                                                   (cons
                                                     (car g$ae*$18526$Uaprr)
                                                     g$nae*$18540$Uaprr))))
                                              g$nae*$18539$Uaprr
                                              g$ns*$18538$Uaprr
                                              g$nm*$18537$Uaprr))))))
                                     g$s2*$18531$Uaprr
                                     g$s1*$18530$Uaprr)))))))
                          (car g$m*$18524$Uaprr)))))))
          (begin
            (if (not (g$id?$15712$Uaprr g$base-id$18507$Uaprr))
              (g$err$18510$Uaprr
                '"not an identifier"
                g$base-id$18507$Uaprr)
              (void))
            (if (not (g$id?$15712$Uaprr g$new-id$18508$Uaprr))
              (g$err$18510$Uaprr
                '"not an identifier"
                g$new-id$18508$Uaprr)
              (void))
            (if (not (g$free-identifier=?$16320$Uaprr
                       g$base-id$18507$Uaprr
                       g$new-id$18508$Uaprr))
              (g$err$18510$Uaprr
                '"not the same identifier"
                g$base-id$18507$Uaprr
                g$new-id$18508$Uaprr)
              (void))
            (call-with-values
              (case-lambda
                (()
                 (g$diff$18513$Uaprr
                   (car (g$stx-mark*$15687$Uaprr g$base-id$18507$Uaprr))
                   (g$stx-mark*$15687$Uaprr g$new-id$18508$Uaprr)
                   (g$stx-subst*$15688$Uaprr g$new-id$18508$Uaprr)
                   (g$stx-ae*$15689$Uaprr g$new-id$18508$Uaprr))))
              (case-lambda
                ((g$m*$18517$Uaprr g$s*$18518$Uaprr g$ae*$18519$Uaprr)
                 ((case-lambda
                    ((g$ae*$18520$Uaprr
                       g$s*$18521$Uaprr
                       g$m*$18522$Uaprr)
                     (if (if (null? g$m*$18522$Uaprr)
                           (begin '#f (null? g$s*$18521$Uaprr))
                           '#f)
                       g$object$18506$Uaprr
                       (g$mkstx$15700$Uaprr
                         g$object$18506$Uaprr
                         g$m*$18522$Uaprr
                         g$s*$18521$Uaprr
                         g$ae*$18520$Uaprr))))
                  g$ae*$18519$Uaprr
                  g$s*$18518$Uaprr
                  g$m*$18517$Uaprr)))))))))
   (g$chi-internal-module$16256$Uaprr
     g$chi-internal-module$19850$Uaprr
     (case-lambda
       ((g$e$18554$Uaprr
          g$r$18555$Uaprr
          g$mr$18556$Uaprr
          g$lex*$18557$Uaprr
          g$rhs*$18558$Uaprr
          g$mod**$18559$Uaprr
          g$kwd*$18560$Uaprr)
        (call-with-values
          (case-lambda
            (() (g$parse-module$16240$Uaprr g$e$18554$Uaprr)))
          (case-lambda
            ((g$name$18564$Uaprr g$exp-id*$18565$Uaprr g$e*$18566$Uaprr)
             ((case-lambda
                ((g$e*$18567$Uaprr
                   g$exp-id*$18568$Uaprr
                   g$name$18569$Uaprr)
                 ((case-lambda
                    ((g$rib$18570$Uaprr)
                     ((case-lambda
                        ((g$e*$18571$Uaprr)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$chi-body*$16257$Uaprr
                                g$e*$18571$Uaprr
                                g$r$18555$Uaprr
                                g$mr$18556$Uaprr
                                g$lex*$18557$Uaprr
                                g$rhs*$18558$Uaprr
                                g$mod**$18559$Uaprr
                                g$kwd*$18560$Uaprr
                                '()
                                g$rib$18570$Uaprr
                                '#f
                                '#t)))
                           (case-lambda
                             ((g$e*$18580$Uaprr
                                g$r$18581$Uaprr
                                g$mr$18582$Uaprr
                                g$lex*$18583$Uaprr
                                g$rhs*$18584$Uaprr
                                g$mod**$18585$Uaprr
                                g$kwd*$18586$Uaprr
                                g$_exp*$18587$Uaprr)
                              ((case-lambda
                                 ((g$_exp*$18588$Uaprr
                                    g$kwd*$18589$Uaprr
                                    g$mod**$18590$Uaprr
                                    g$rhs*$18591$Uaprr
                                    g$lex*$18592$Uaprr
                                    g$mr$18593$Uaprr
                                    g$r$18594$Uaprr
                                    g$e*$18595$Uaprr)
                                  ((case-lambda
                                     ((g$exp-lab*$18596$Uaprr
                                        g$mod**$18597$Uaprr)
                                      (if (not g$name$18569$Uaprr)
                                        (values
                                          g$lex*$18592$Uaprr
                                          g$rhs*$18591$Uaprr
                                          g$exp-id*$18568$Uaprr
                                          g$exp-lab*$18596$Uaprr
                                          g$r$18594$Uaprr
                                          g$mr$18593$Uaprr
                                          g$mod**$18597$Uaprr
                                          g$kwd*$18589$Uaprr)
                                        ((case-lambda
                                           ((g$lab$18598$Uaprr
                                              g$iface$18599$Uaprr)
                                            (values
                                              g$lex*$18592$Uaprr
                                              g$rhs*$18591$Uaprr
                                              (vector
                                                g$name$18569$Uaprr)
                                              (vector g$lab$18598$Uaprr)
                                              (cons
                                                (cons
                                                  g$lab$18598$Uaprr
                                                  (cons
                                                    '$module
                                                    g$iface$18599$Uaprr))
                                                g$r$18594$Uaprr)
                                              (cons
                                                (cons
                                                  g$lab$18598$Uaprr
                                                  (cons
                                                    '$module
                                                    g$iface$18599$Uaprr))
                                                g$mr$18593$Uaprr)
                                              g$mod**$18597$Uaprr
                                              g$kwd*$18589$Uaprr)))
                                         (g$gen-label$15649$Uaprr
                                           'module)
                                         (g$make-module-interface$16247$Uaprr
                                           (car (g$stx-mark*$15687$Uaprr
                                                  g$name$18569$Uaprr))
                                           (g$vector-map$12526$Uaprr
                                             (case-lambda
                                               ((g$x$18600$Uaprr)
                                                (g$make-stx$15685$Uaprr
                                                  (g$stx-expr$15686$Uaprr
                                                    g$x$18600$Uaprr)
                                                  (g$stx-mark*$15687$Uaprr
                                                    g$x$18600$Uaprr)
                                                  '()
                                                  '())))
                                             g$exp-id*$18568$Uaprr)
                                           g$exp-lab*$18596$Uaprr)))))
                                   (g$vector-map$12526$Uaprr
                                     (case-lambda
                                       ((g$x$18601$Uaprr)
                                        ((case-lambda
                                           ((g$t$18602$Uaprr)
                                            (if g$t$18602$Uaprr
                                              g$t$18602$Uaprr
                                              (begin
                                                '#f
                                                (g$syntax-violation$16329$Uaprr
                                                  '#f
                                                  '"cannot find module export"
                                                  g$x$18601$Uaprr)))))
                                         (g$id->label$15725$Uaprr
                                           (g$make-stx$15685$Uaprr
                                             (g$id->sym$15713$Uaprr
                                               g$x$18601$Uaprr)
                                             (g$stx-mark*$15687$Uaprr
                                               g$x$18601$Uaprr)
                                             (list g$rib$18570$Uaprr)
                                             '())))))
                                     g$exp-id*$18568$Uaprr)
                                   (cons
                                     g$e*$18595$Uaprr
                                     g$mod**$18590$Uaprr))))
                               g$_exp*$18587$Uaprr
                               g$kwd*$18586$Uaprr
                               g$mod**$18585$Uaprr
                               g$rhs*$18584$Uaprr
                               g$lex*$18583$Uaprr
                               g$mr$18582$Uaprr
                               g$r$18581$Uaprr
                               g$e*$18580$Uaprr))))))
                      (g$map$11722$Uaprr
                        (case-lambda
                          ((g$x$18603$Uaprr)
                           (g$add-subst$15702$Uaprr
                             g$rib$18570$Uaprr
                             g$x$18603$Uaprr)))
                        (g$syntax->list$15711$Uaprr
                          g$e*$18567$Uaprr)))))
                  (g$make-empty-rib$15670$Uaprr))))
              g$e*$18566$Uaprr
              g$exp-id*$18565$Uaprr
              g$name$18564$Uaprr)))))))
   (g$chi-body*$16257$Uaprr
     g$chi-body*$19851$Uaprr
     (case-lambda
       ((g$e*$18604$Uaprr
          g$r$18605$Uaprr
          g$mr$18606$Uaprr
          g$lex*$18607$Uaprr
          g$rhs*$18608$Uaprr
          g$mod**$18609$Uaprr
          g$kwd*$18610$Uaprr
          g$exp*$18611$Uaprr
          g$rib$18612$Uaprr
          g$mix?$18613$Uaprr
          g$sd?$18614$Uaprr)
        (if (null? g$e*$18604$Uaprr)
          (values
            g$e*$18604$Uaprr
            g$r$18605$Uaprr
            g$mr$18606$Uaprr
            g$lex*$18607$Uaprr
            g$rhs*$18608$Uaprr
            g$mod**$18609$Uaprr
            g$kwd*$18610$Uaprr
            g$exp*$18611$Uaprr)
          ((case-lambda
             ((g$e$18615$Uaprr)
              (call-with-values
                (case-lambda
                  (()
                   (g$syntax-type$15732$Uaprr
                     g$e$18615$Uaprr
                     g$r$18605$Uaprr)))
                (case-lambda
                  ((g$type$18619$Uaprr
                     g$value$18620$Uaprr
                     g$kwd$18621$Uaprr)
                   ((case-lambda
                      ((g$kwd$18622$Uaprr
                         g$value$18623$Uaprr
                         g$type$18624$Uaprr)
                       ((case-lambda
                          ((g$kwd*$18625$Uaprr)
                           ((case-lambda
                              ((g$t$18626$Uaprr)
                               (if (eqv? g$t$18626$Uaprr 'define)
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$16150$Uaprr
                                        g$e$18615$Uaprr)))
                                   (case-lambda
                                     ((g$id$18629$Uaprr
                                        g$rhs$18630$Uaprr)
                                      ((case-lambda
                                         ((g$rhs$18631$Uaprr
                                            g$id$18632$Uaprr)
                                          (begin
                                            (if (g$bound-id-member?$15719$Uaprr
                                                  g$id$18632$Uaprr
                                                  g$kwd*$18625$Uaprr)
                                              (g$syntax-violation$16329$Uaprr
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$18615$Uaprr)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$15651$Uaprr
                                                   g$id$18632$Uaprr
                                                   g$rib$18612$Uaprr
                                                   g$sd?$18614$Uaprr)))
                                              (case-lambda
                                                ((g$lab$18635$Uaprr
                                                   g$lex$18636$Uaprr)
                                                 ((case-lambda
                                                    ((g$lex$18637$Uaprr
                                                       g$lab$18638$Uaprr)
                                                     (begin
                                                       (g$extend-rib!$15673$Uaprr
                                                         g$rib$18612$Uaprr
                                                         g$id$18632$Uaprr
                                                         g$lab$18638$Uaprr
                                                         g$sd?$18614$Uaprr)
                                                       (g$chi-body*$16257$Uaprr
                                                         (cdr g$e*$18604$Uaprr)
                                                         (g$add-lexical$16157$Uaprr
                                                           g$lab$18638$Uaprr
                                                           g$lex$18637$Uaprr
                                                           g$r$18605$Uaprr)
                                                         g$mr$18606$Uaprr
                                                         (cons
                                                           g$lex$18637$Uaprr
                                                           g$lex*$18607$Uaprr)
                                                         (cons
                                                           g$rhs$18631$Uaprr
                                                           g$rhs*$18608$Uaprr)
                                                         g$mod**$18609$Uaprr
                                                         g$kwd*$18625$Uaprr
                                                         g$exp*$18611$Uaprr
                                                         g$rib$18612$Uaprr
                                                         g$mix?$18613$Uaprr
                                                         g$sd?$18614$Uaprr))))
                                                  g$lex$18636$Uaprr
                                                  g$lab$18635$Uaprr)))))))
                                       g$rhs$18630$Uaprr
                                       g$id$18629$Uaprr))))
                                 (if (eqv?
                                       g$t$18626$Uaprr
                                       'define-syntax)
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$16151$Uaprr
                                          g$e$18615$Uaprr)))
                                     (case-lambda
                                       ((g$id$18641$Uaprr
                                          g$rhs$18642$Uaprr)
                                        ((case-lambda
                                           ((g$rhs$18643$Uaprr
                                              g$id$18644$Uaprr)
                                            (begin
                                              (if (g$bound-id-member?$15719$Uaprr
                                                    g$id$18644$Uaprr
                                                    g$kwd*$18625$Uaprr)
                                                (g$syntax-violation$16329$Uaprr
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$18615$Uaprr)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$18645$Uaprr)
                                                  ((case-lambda
                                                     ((g$expanded-rhs$18646$Uaprr)
                                                      (begin
                                                        (g$extend-rib!$15673$Uaprr
                                                          g$rib$18612$Uaprr
                                                          g$id$18644$Uaprr
                                                          g$lab$18645$Uaprr
                                                          g$sd?$18614$Uaprr)
                                                        ((case-lambda
                                                           ((g$b$18647$Uaprr)
                                                            (g$chi-body*$16257$Uaprr
                                                              (cdr g$e*$18604$Uaprr)
                                                              (cons
                                                                (cons
                                                                  g$lab$18645$Uaprr
                                                                  g$b$18647$Uaprr)
                                                                g$r$18605$Uaprr)
                                                              (cons
                                                                (cons
                                                                  g$lab$18645$Uaprr
                                                                  g$b$18647$Uaprr)
                                                                g$mr$18606$Uaprr)
                                                              g$lex*$18607$Uaprr
                                                              g$rhs*$18608$Uaprr
                                                              g$mod**$18609$Uaprr
                                                              g$kwd*$18625$Uaprr
                                                              g$exp*$18611$Uaprr
                                                              g$rib$18612$Uaprr
                                                              g$mix?$18613$Uaprr
                                                              g$sd?$18614$Uaprr)))
                                                         (g$make-eval-transformer$15760$Uaprr
                                                           g$expanded-rhs$18646$Uaprr)))))
                                                   (g$expand-transformer$16258$Uaprr
                                                     g$rhs$18643$Uaprr
                                                     g$mr$18606$Uaprr))))
                                               (g$gen-define-label$15652$Uaprr
                                                 g$id$18644$Uaprr
                                                 g$rib$18612$Uaprr
                                                 g$sd?$18614$Uaprr)))))
                                         g$rhs$18642$Uaprr
                                         g$id$18641$Uaprr))))
                                   (if (g$memv$11715$Uaprr
                                         g$t$18626$Uaprr
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$18648$Uaprr)
                                         ((case-lambda
                                            ((g$ls/false$18649$Uaprr)
                                             (if (if g$ls/false$18649$Uaprr
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$18650$Uaprr
                                                            g$xrhs*$18651$Uaprr
                                                            g$xbody*$18652$Uaprr)
                                                          (if (not (g$valid-bound-ids?$15717$Uaprr
                                                                     g$xlhs*$18650$Uaprr))
                                                            (g$syntax-violation$16329$Uaprr
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$18615$Uaprr)
                                                            (void))))
                                                       g$ls/false$18649$Uaprr))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$18653$Uaprr
                                                      g$xrhs*$18654$Uaprr
                                                      g$xbody*$18655$Uaprr)
                                                    ((case-lambda
                                                       ((g$xlab*$18656$Uaprr)
                                                        ((case-lambda
                                                           ((g$xrib$18657$Uaprr)
                                                            ((case-lambda
                                                               ((g$xb*$18658$Uaprr)
                                                                (g$chi-body*$16257$Uaprr
                                                                  (append
                                                                    (g$map$11722$Uaprr
                                                                      (case-lambda
                                                                        ((g$x$18659$Uaprr)
                                                                         (g$add-subst$15702$Uaprr
                                                                           g$xrib$18657$Uaprr
                                                                           g$x$18659$Uaprr)))
                                                                      g$xbody*$18655$Uaprr)
                                                                    (cdr g$e*$18604$Uaprr))
                                                                  (append
                                                                    (g$map$11722$Uaprr
                                                                      cons
                                                                      g$xlab*$18656$Uaprr
                                                                      g$xb*$18658$Uaprr)
                                                                    g$r$18605$Uaprr)
                                                                  (append
                                                                    (g$map$11722$Uaprr
                                                                      cons
                                                                      g$xlab*$18656$Uaprr
                                                                      g$xb*$18658$Uaprr)
                                                                    g$mr$18606$Uaprr)
                                                                  g$lex*$18607$Uaprr
                                                                  g$rhs*$18608$Uaprr
                                                                  g$mod**$18609$Uaprr
                                                                  g$kwd*$18625$Uaprr
                                                                  g$exp*$18611$Uaprr
                                                                  g$rib$18612$Uaprr
                                                                  g$mix?$18613$Uaprr
                                                                  g$sd?$18614$Uaprr)))
                                                             (g$map$11722$Uaprr
                                                               (case-lambda
                                                                 ((g$x$18660$Uaprr)
                                                                  (g$make-eval-transformer$15760$Uaprr
                                                                    (g$expand-transformer$16258$Uaprr
                                                                      (if (eq? g$type$18624$Uaprr
                                                                               'let-syntax)
                                                                        g$x$18660$Uaprr
                                                                        (g$add-subst$15702$Uaprr
                                                                          g$xrib$18657$Uaprr
                                                                          g$x$18660$Uaprr))
                                                                      g$mr$18606$Uaprr))))
                                                               g$xrhs*$18654$Uaprr))))
                                                         (g$make-full-rib$15678$Uaprr
                                                           g$xlhs*$18653$Uaprr
                                                           g$xlab*$18656$Uaprr))))
                                                     (g$map$11722$Uaprr
                                                       g$gen-label$15649$Uaprr
                                                       g$xlhs*$18653$Uaprr))))
                                                 g$ls/false$18649$Uaprr)
                                               (g$syntax-violation$16329$Uaprr
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$18648$Uaprr))))
                                          (g$syntax-dispatch$16210$Uaprr
                                            g$t$18648$Uaprr
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$18615$Uaprr)
                                     (if (eqv? g$t$18626$Uaprr 'begin)
                                       ((case-lambda
                                          ((g$t$18661$Uaprr)
                                           ((case-lambda
                                              ((g$ls/false$18662$Uaprr)
                                               (if g$ls/false$18662$Uaprr
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$18663$Uaprr)
                                                      (g$chi-body*$16257$Uaprr
                                                        (append
                                                          g$x*$18663$Uaprr
                                                          (cdr g$e*$18604$Uaprr))
                                                        g$r$18605$Uaprr
                                                        g$mr$18606$Uaprr
                                                        g$lex*$18607$Uaprr
                                                        g$rhs*$18608$Uaprr
                                                        g$mod**$18609$Uaprr
                                                        g$kwd*$18625$Uaprr
                                                        g$exp*$18611$Uaprr
                                                        g$rib$18612$Uaprr
                                                        g$mix?$18613$Uaprr
                                                        g$sd?$18614$Uaprr)))
                                                   g$ls/false$18662$Uaprr)
                                                 (g$syntax-violation$16329$Uaprr
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$18661$Uaprr))))
                                            (g$syntax-dispatch$16210$Uaprr
                                              g$t$18661$Uaprr
                                              '(_ . each-any)))))
                                        g$e$18615$Uaprr)
                                       (if (g$memv$11715$Uaprr
                                             g$t$18626$Uaprr
                                             '(global-macro
                                                global-macro!))
                                         (g$chi-body*$16257$Uaprr
                                           (cons
                                             (g$add-subst$15702$Uaprr
                                               g$rib$18612$Uaprr
                                               (g$chi-global-macro$16225$Uaprr
                                                 g$value$18623$Uaprr
                                                 g$e$18615$Uaprr
                                                 g$r$18605$Uaprr))
                                             (cdr g$e*$18604$Uaprr))
                                           g$r$18605$Uaprr
                                           g$mr$18606$Uaprr
                                           g$lex*$18607$Uaprr
                                           g$rhs*$18608$Uaprr
                                           g$mod**$18609$Uaprr
                                           g$kwd*$18625$Uaprr
                                           g$exp*$18611$Uaprr
                                           g$rib$18612$Uaprr
                                           g$mix?$18613$Uaprr
                                           g$sd?$18614$Uaprr)
                                         (if (g$memv$11715$Uaprr
                                               g$t$18626$Uaprr
                                               '(local-macro
                                                  local-macro!))
                                           (g$chi-body*$16257$Uaprr
                                             (cons
                                               (g$add-subst$15702$Uaprr
                                                 g$rib$18612$Uaprr
                                                 (g$chi-local-macro$16224$Uaprr
                                                   g$value$18623$Uaprr
                                                   g$e$18615$Uaprr
                                                   g$r$18605$Uaprr))
                                               (cdr g$e*$18604$Uaprr))
                                             g$r$18605$Uaprr
                                             g$mr$18606$Uaprr
                                             g$lex*$18607$Uaprr
                                             g$rhs*$18608$Uaprr
                                             g$mod**$18609$Uaprr
                                             g$kwd*$18625$Uaprr
                                             g$exp*$18611$Uaprr
                                             g$rib$18612$Uaprr
                                             g$mix?$18613$Uaprr
                                             g$sd?$18614$Uaprr)
                                           (if (g$memv$11715$Uaprr
                                                 g$t$18626$Uaprr
                                                 '(macro macro!))
                                             (g$chi-body*$16257$Uaprr
                                               (cons
                                                 (g$add-subst$15702$Uaprr
                                                   g$rib$18612$Uaprr
                                                   (g$chi-macro$16223$Uaprr
                                                     g$value$18623$Uaprr
                                                     g$e$18615$Uaprr
                                                     g$r$18605$Uaprr))
                                                 (cdr g$e*$18604$Uaprr))
                                               g$r$18605$Uaprr
                                               g$mr$18606$Uaprr
                                               g$lex*$18607$Uaprr
                                               g$rhs*$18608$Uaprr
                                               g$mod**$18609$Uaprr
                                               g$kwd*$18625$Uaprr
                                               g$exp*$18611$Uaprr
                                               g$rib$18612$Uaprr
                                               g$mix?$18613$Uaprr
                                               g$sd?$18614$Uaprr)
                                             (if (eqv?
                                                   g$t$18626$Uaprr
                                                   'module)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$16256$Uaprr
                                                      g$e$18615$Uaprr
                                                      g$r$18605$Uaprr
                                                      g$mr$18606$Uaprr
                                                      g$lex*$18607$Uaprr
                                                      g$rhs*$18608$Uaprr
                                                      g$mod**$18609$Uaprr
                                                      g$kwd*$18625$Uaprr)))
                                                 (case-lambda
                                                   ((g$lex*$18672$Uaprr
                                                      g$rhs*$18673$Uaprr
                                                      g$m-exp-id*$18674$Uaprr
                                                      g$m-exp-lab*$18675$Uaprr
                                                      g$r$18676$Uaprr
                                                      g$mr$18677$Uaprr
                                                      g$mod**$18678$Uaprr
                                                      g$kwd*$18679$Uaprr)
                                                    ((case-lambda
                                                       ((g$kwd*$18680$Uaprr
                                                          g$mod**$18681$Uaprr
                                                          g$mr$18682$Uaprr
                                                          g$r$18683$Uaprr
                                                          g$m-exp-lab*$18684$Uaprr
                                                          g$m-exp-id*$18685$Uaprr
                                                          g$rhs*$18686$Uaprr
                                                          g$lex*$18687$Uaprr)
                                                        (begin
                                                          (g$vector-for-each$12527$Uaprr
                                                            (case-lambda
                                                              ((g$id$18688$Uaprr
                                                                 g$lab$18689$Uaprr)
                                                               (g$extend-rib!$15673$Uaprr
                                                                 g$rib$18612$Uaprr
                                                                 g$id$18688$Uaprr
                                                                 g$lab$18689$Uaprr
                                                                 g$sd?$18614$Uaprr)))
                                                            g$m-exp-id*$18685$Uaprr
                                                            g$m-exp-lab*$18684$Uaprr)
                                                          (g$chi-body*$16257$Uaprr
                                                            (cdr g$e*$18604$Uaprr)
                                                            g$r$18683$Uaprr
                                                            g$mr$18682$Uaprr
                                                            g$lex*$18687$Uaprr
                                                            g$rhs*$18686$Uaprr
                                                            g$mod**$18681$Uaprr
                                                            g$kwd*$18680$Uaprr
                                                            g$exp*$18611$Uaprr
                                                            g$rib$18612$Uaprr
                                                            g$mix?$18613$Uaprr
                                                            g$sd?$18614$Uaprr))))
                                                     g$kwd*$18679$Uaprr
                                                     g$mod**$18678$Uaprr
                                                     g$mr$18677$Uaprr
                                                     g$r$18676$Uaprr
                                                     g$m-exp-lab*$18675$Uaprr
                                                     g$m-exp-id*$18674$Uaprr
                                                     g$rhs*$18673$Uaprr
                                                     g$lex*$18672$Uaprr))))
                                               (if (eqv?
                                                     g$t$18626$Uaprr
                                                     'library)
                                                 (begin
                                                   (g$library-expander$16313$Uaprr
                                                     (g$stx->datum$15723$Uaprr
                                                       g$e$18615$Uaprr))
                                                   (g$chi-body*$16257$Uaprr
                                                     (cdr g$e*$18604$Uaprr)
                                                     g$r$18605$Uaprr
                                                     g$mr$18606$Uaprr
                                                     g$lex*$18607$Uaprr
                                                     g$rhs*$18608$Uaprr
                                                     g$mod**$18609$Uaprr
                                                     g$kwd*$18625$Uaprr
                                                     g$exp*$18611$Uaprr
                                                     g$rib$18612$Uaprr
                                                     g$mix?$18613$Uaprr
                                                     g$sd?$18614$Uaprr))
                                                 (if (eqv?
                                                       g$t$18626$Uaprr
                                                       'export)
                                                   ((case-lambda
                                                      ((g$t$18690$Uaprr)
                                                       ((case-lambda
                                                          ((g$ls/false$18691$Uaprr)
                                                           (if g$ls/false$18691$Uaprr
                                                             (apply
                                                               (case-lambda
                                                                 ((g$exp-decl*$18692$Uaprr)
                                                                  (g$chi-body*$16257$Uaprr
                                                                    (cdr g$e*$18604$Uaprr)
                                                                    g$r$18605$Uaprr
                                                                    g$mr$18606$Uaprr
                                                                    g$lex*$18607$Uaprr
                                                                    g$rhs*$18608$Uaprr
                                                                    g$mod**$18609$Uaprr
                                                                    g$kwd*$18625$Uaprr
                                                                    (append
                                                                      g$exp-decl*$18692$Uaprr
                                                                      g$exp*$18611$Uaprr)
                                                                    g$rib$18612$Uaprr
                                                                    g$mix?$18613$Uaprr
                                                                    g$sd?$18614$Uaprr)))
                                                               g$ls/false$18691$Uaprr)
                                                             (g$syntax-violation$16329$Uaprr
                                                               '#f
                                                               '"invalid syntax"
                                                               g$t$18690$Uaprr))))
                                                        (g$syntax-dispatch$16210$Uaprr
                                                          g$t$18690$Uaprr
                                                          '(_ .
                                                              each-any)))))
                                                    g$e$18615$Uaprr)
                                                   (if (eqv?
                                                         g$t$18626$Uaprr
                                                         'import)
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$18693$Uaprr
                                                                     (case-lambda
                                                                       ((g$e$18735$Uaprr)
                                                                        ((case-lambda
                                                                           ((g$t$18736$Uaprr)
                                                                            ((case-lambda
                                                                               ((g$ls/false$18737$Uaprr)
                                                                                (if (if g$ls/false$18737$Uaprr
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$18738$Uaprr)
                                                                                             (g$id?$15712$Uaprr
                                                                                               g$id$18738$Uaprr)))
                                                                                          g$ls/false$18737$Uaprr))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$18739$Uaprr)
                                                                                       '#t))
                                                                                    g$ls/false$18737$Uaprr)
                                                                                  ((case-lambda
                                                                                     ((g$t$18740$Uaprr)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$18741$Uaprr)
                                                                                          (if g$ls/false$18741$Uaprr
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$18742$Uaprr)
                                                                                                 '#f))
                                                                                              g$ls/false$18741$Uaprr)
                                                                                            ((case-lambda
                                                                                               ((g$t$18743$Uaprr)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$18744$Uaprr)
                                                                                                    (if g$ls/false$18744$Uaprr
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$16329$Uaprr
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$18735$Uaprr)))
                                                                                                        g$ls/false$18744$Uaprr)
                                                                                                      (g$syntax-violation$16329$Uaprr
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$18743$Uaprr))))
                                                                                                 (g$syntax-dispatch$16210$Uaprr
                                                                                                   g$t$18743$Uaprr
                                                                                                   '_))))
                                                                                             g$t$18740$Uaprr))))
                                                                                       (g$syntax-dispatch$16210$Uaprr
                                                                                         g$t$18740$Uaprr
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$18736$Uaprr))))
                                                                             (g$syntax-dispatch$16210$Uaprr
                                                                               g$t$18736$Uaprr
                                                                               '(_ any)))))
                                                                         g$e$18735$Uaprr))))
                                                                   (g$module-import$18694$Uaprr
                                                                     (case-lambda
                                                                       ((g$e$18718$Uaprr
                                                                          g$r$18719$Uaprr)
                                                                        ((case-lambda
                                                                           ((g$t$18720$Uaprr)
                                                                            ((case-lambda
                                                                               ((g$ls/false$18721$Uaprr)
                                                                                (if (if g$ls/false$18721$Uaprr
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$18722$Uaprr)
                                                                                             (g$id?$15712$Uaprr
                                                                                               g$id$18722$Uaprr)))
                                                                                          g$ls/false$18721$Uaprr))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$18723$Uaprr)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$15732$Uaprr
                                                                                              g$id$18723$Uaprr
                                                                                              g$r$18719$Uaprr)))
                                                                                         (case-lambda
                                                                                           ((g$type$18727$Uaprr
                                                                                              g$value$18728$Uaprr
                                                                                              g$kwd$18729$Uaprr)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$18730$Uaprr
                                                                                                  g$value$18731$Uaprr
                                                                                                  g$type$18732$Uaprr)
                                                                                                ((case-lambda
                                                                                                   ((g$t$18733$Uaprr)
                                                                                                    (if (eqv?
                                                                                                          g$t$18733$Uaprr
                                                                                                          '$module)
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$18734$Uaprr)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$16254$Uaprr
                                                                                                              g$iface$18734$Uaprr
                                                                                                              g$id$18723$Uaprr)
                                                                                                            (g$module-interface-exp-lab-vec$16250$Uaprr
                                                                                                              g$iface$18734$Uaprr))))
                                                                                                       g$value$18731$Uaprr)
                                                                                                      (g$syntax-violation$16329$Uaprr
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$18718$Uaprr))))
                                                                                                 g$type$18732$Uaprr)))
                                                                                             g$kwd$18729$Uaprr
                                                                                             g$value$18728$Uaprr
                                                                                             g$type$18727$Uaprr))))))
                                                                                    g$ls/false$18721$Uaprr)
                                                                                  (g$syntax-violation$16329$Uaprr
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$18720$Uaprr))))
                                                                             (g$syntax-dispatch$16210$Uaprr
                                                                               g$t$18720$Uaprr
                                                                               '(_ any)))))
                                                                         g$e$18718$Uaprr))))
                                                                   (g$library-import$18695$Uaprr
                                                                     (case-lambda
                                                                       ((g$e$18704$Uaprr)
                                                                        ((case-lambda
                                                                           ((g$t$18705$Uaprr)
                                                                            ((case-lambda
                                                                               ((g$ls/false$18706$Uaprr)
                                                                                (if g$ls/false$18706$Uaprr
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$18707$Uaprr
                                                                                         g$imp*$18708$Uaprr)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$16262$Uaprr
                                                                                              (g$syntax->datum$16332$Uaprr
                                                                                                g$imp*$18708$Uaprr))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$18711$Uaprr
                                                                                              g$subst-labels$18712$Uaprr)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$18713$Uaprr
                                                                                                  g$subst-names$18714$Uaprr)
                                                                                                (values
                                                                                                  (g$vector-map$12526$Uaprr
                                                                                                    (case-lambda
                                                                                                      ((g$name$18715$Uaprr)
                                                                                                       (g$datum->stx$15695$Uaprr
                                                                                                         g$ctxt$18707$Uaprr
                                                                                                         g$name$18715$Uaprr)))
                                                                                                    g$subst-names$18714$Uaprr)
                                                                                                  g$subst-labels$18713$Uaprr)))
                                                                                             g$subst-labels$18712$Uaprr
                                                                                             g$subst-names$18711$Uaprr))))))
                                                                                    g$ls/false$18706$Uaprr)
                                                                                  ((case-lambda
                                                                                     ((g$t$18716$Uaprr)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$18717$Uaprr)
                                                                                          (if g$ls/false$18717$Uaprr
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$16329$Uaprr
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$18704$Uaprr)))
                                                                                              g$ls/false$18717$Uaprr)
                                                                                            (g$syntax-violation$16329$Uaprr
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$18716$Uaprr))))
                                                                                       (g$syntax-dispatch$16210$Uaprr
                                                                                         g$t$18716$Uaprr
                                                                                         '_))))
                                                                                   g$t$18705$Uaprr))))
                                                                             (g$syntax-dispatch$16210$Uaprr
                                                                               g$t$18705$Uaprr
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$18704$Uaprr)))))
                                                           (begin
                                                             (call-with-values
                                                               (case-lambda
                                                                 (()
                                                                  (if (g$module-import?$18693$Uaprr
                                                                        g$e$18615$Uaprr)
                                                                    (g$module-import$18694$Uaprr
                                                                      g$e$18615$Uaprr
                                                                      g$r$18605$Uaprr)
                                                                    (g$library-import$18695$Uaprr
                                                                      g$e$18615$Uaprr))))
                                                               (case-lambda
                                                                 ((g$id*$18698$Uaprr
                                                                    g$lab*$18699$Uaprr)
                                                                  ((case-lambda
                                                                     ((g$lab*$18700$Uaprr
                                                                        g$id*$18701$Uaprr)
                                                                      (g$vector-for-each$12527$Uaprr
                                                                        (case-lambda
                                                                          ((g$id$18702$Uaprr
                                                                             g$lab$18703$Uaprr)
                                                                           (g$extend-rib!$15673$Uaprr
                                                                             g$rib$18612$Uaprr
                                                                             g$id$18702$Uaprr
                                                                             g$lab$18703$Uaprr
                                                                             g$sd?$18614$Uaprr)))
                                                                        g$id*$18701$Uaprr
                                                                        g$lab*$18700$Uaprr)))
                                                                   g$lab*$18699$Uaprr
                                                                   g$id*$18698$Uaprr))))
                                                             (g$chi-body*$16257$Uaprr
                                                               (cdr g$e*$18604$Uaprr)
                                                               g$r$18605$Uaprr
                                                               g$mr$18606$Uaprr
                                                               g$lex*$18607$Uaprr
                                                               g$rhs*$18608$Uaprr
                                                               g$mod**$18609$Uaprr
                                                               g$kwd*$18625$Uaprr
                                                               g$exp*$18611$Uaprr
                                                               g$rib$18612$Uaprr
                                                               g$mix?$18613$Uaprr
                                                               g$sd?$18614$Uaprr))))))
                                                     (if g$mix?$18613$Uaprr
                                                       (g$chi-body*$16257$Uaprr
                                                         (cdr g$e*$18604$Uaprr)
                                                         g$r$18605$Uaprr
                                                         g$mr$18606$Uaprr
                                                         (cons
                                                           (g$gen-lexical$15647$Uaprr
                                                             'dummy)
                                                           g$lex*$18607$Uaprr)
                                                         (cons
                                                           (cons
                                                             'top-expr
                                                             g$e$18615$Uaprr)
                                                           g$rhs*$18608$Uaprr)
                                                         g$mod**$18609$Uaprr
                                                         g$kwd*$18625$Uaprr
                                                         g$exp*$18611$Uaprr
                                                         g$rib$18612$Uaprr
                                                         '#t
                                                         g$sd?$18614$Uaprr)
                                                       (values
                                                         g$e*$18604$Uaprr
                                                         g$r$18605$Uaprr
                                                         g$mr$18606$Uaprr
                                                         g$lex*$18607$Uaprr
                                                         g$rhs*$18608$Uaprr
                                                         g$mod**$18609$Uaprr
                                                         g$kwd*$18625$Uaprr
                                                         g$exp*$18611$Uaprr)))))))))))))))
                            g$type$18624$Uaprr)))
                        (if (g$id?$15712$Uaprr g$kwd$18622$Uaprr)
                          (cons g$kwd$18622$Uaprr g$kwd*$18610$Uaprr)
                          g$kwd*$18610$Uaprr))))
                    g$kwd$18621$Uaprr
                    g$value$18620$Uaprr
                    g$type$18619$Uaprr))))))
           (car g$e*$18604$Uaprr))))))
   (g$expand-transformer$16258$Uaprr
     g$expand-transformer$19852$Uaprr
     (case-lambda
       ((g$expr$18745$Uaprr g$r$18746$Uaprr)
        ((case-lambda
           ((g$rtc$18747$Uaprr)
            ((case-lambda
               ((g$expanded-rhs$18748$Uaprr)
                (begin
                  (g$for-each$11723$Uaprr
                    ((case-lambda
                       ((g$mark-visit$18749$Uaprr)
                        (case-lambda
                          ((g$x$18750$Uaprr)
                           (begin
                             (g$invoke-library$15418$Uaprr
                               g$x$18750$Uaprr)
                             (g$mark-visit$18749$Uaprr
                               g$x$18750$Uaprr))))))
                     (g$vis-collector$16266$Uaprr))
                    (g$rtc$18747$Uaprr))
                  g$expanded-rhs$18748$Uaprr)))
             ((case-lambda
                ((g$inv-collector$18755$Uaprr
                   g$vis-collector$18756$Uaprr
                   g$inv-collector$18757$Uaprr
                   g$vis-collector$18758$Uaprr)
                 ((case-lambda
                    ((g$swap$18759$Uaprr)
                     (dynamic-wind
                       g$swap$18759$Uaprr
                       (case-lambda
                         (()
                          (g$chi-expr$16228$Uaprr
                            g$expr$18745$Uaprr
                            g$r$18746$Uaprr
                            g$r$18746$Uaprr)))
                       g$swap$18759$Uaprr)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$18760$Uaprr)
                           (begin
                             (g$inv-collector$18755$Uaprr
                               g$inv-collector$18757$Uaprr)
                             (set! g$inv-collector$18757$Uaprr
                               g$t$18760$Uaprr))))
                        (g$inv-collector$18755$Uaprr))
                       ((case-lambda
                          ((g$t$18761$Uaprr)
                           (begin
                             (g$vis-collector$18756$Uaprr
                               g$vis-collector$18758$Uaprr)
                             (set! g$vis-collector$18758$Uaprr
                               g$t$18761$Uaprr))))
                        (g$vis-collector$18756$Uaprr))))))))
              g$inv-collector$16265$Uaprr
              g$vis-collector$16266$Uaprr
              g$rtc$18747$Uaprr
              (case-lambda ((g$x$18762$Uaprr) (values)))))))
         (g$make-collector$16264$Uaprr)))))
   (g$parse-exports$16259$Uaprr
     g$parse-exports$19853$Uaprr
     (case-lambda
       ((g$exp*$18763$Uaprr)
        ((letrec ((g$f$18764$Uaprr
                    (case-lambda
                      ((g$exp*$18765$Uaprr
                         g$int*$18766$Uaprr
                         g$ext*$18767$Uaprr)
                       (if (null? g$exp*$18765$Uaprr)
                         (begin
                           (if (not (g$valid-bound-ids?$15717$Uaprr
                                      g$ext*$18767$Uaprr))
                             (g$syntax-violation$16329$Uaprr
                               'export
                               '"invalid exports"
                               (g$find-dups$16238$Uaprr
                                 g$ext*$18767$Uaprr))
                             (void))
                           (values
                             (g$map$11722$Uaprr
                               g$syntax->datum$16332$Uaprr
                               g$ext*$18767$Uaprr)
                             g$int*$18766$Uaprr))
                         ((case-lambda
                            ((g$t$18768$Uaprr)
                             ((case-lambda
                                ((g$ls/false$18769$Uaprr)
                                 (if g$ls/false$18769$Uaprr
                                   (apply
                                     (case-lambda
                                       ((g$rename$18770$Uaprr
                                          g$i*$18771$Uaprr
                                          g$e*$18772$Uaprr)
                                        (begin
                                          (if (not (if (eq? (g$syntax->datum$16332$Uaprr
                                                              g$rename$18770$Uaprr)
                                                            'rename)
                                                     (if (g$for-all$11720$Uaprr
                                                           g$id?$15712$Uaprr
                                                           g$i*$18771$Uaprr)
                                                       (begin
                                                         '#f
                                                         (g$for-all$11720$Uaprr
                                                           g$id?$15712$Uaprr
                                                           g$e*$18772$Uaprr))
                                                       '#f)
                                                     '#f))
                                            (g$syntax-violation$16329$Uaprr
                                              'export
                                              '"invalid export specifier"
                                              (car g$exp*$18765$Uaprr))
                                            (void))
                                          (g$f$18764$Uaprr
                                            (cdr g$exp*$18765$Uaprr)
                                            (append
                                              g$i*$18771$Uaprr
                                              g$int*$18766$Uaprr)
                                            (append
                                              g$e*$18772$Uaprr
                                              g$ext*$18767$Uaprr)))))
                                     g$ls/false$18769$Uaprr)
                                   ((case-lambda
                                      ((g$t$18773$Uaprr)
                                       ((case-lambda
                                          ((g$ls/false$18774$Uaprr)
                                           (if g$ls/false$18774$Uaprr
                                             (apply
                                               (case-lambda
                                                 ((g$ie$18775$Uaprr)
                                                  (begin
                                                    (if (not (g$id?$15712$Uaprr
                                                               g$ie$18775$Uaprr))
                                                      (g$syntax-violation$16329$Uaprr
                                                        'export
                                                        '"invalid export"
                                                        g$ie$18775$Uaprr)
                                                      (void))
                                                    (g$f$18764$Uaprr
                                                      (cdr g$exp*$18765$Uaprr)
                                                      (cons
                                                        g$ie$18775$Uaprr
                                                        g$int*$18766$Uaprr)
                                                      (cons
                                                        g$ie$18775$Uaprr
                                                        g$ext*$18767$Uaprr)))))
                                               g$ls/false$18774$Uaprr)
                                             (g$syntax-violation$16329$Uaprr
                                               '#f
                                               '"invalid syntax"
                                               g$t$18773$Uaprr))))
                                        (g$syntax-dispatch$16210$Uaprr
                                          g$t$18773$Uaprr
                                          'any))))
                                    g$t$18768$Uaprr))))
                              (g$syntax-dispatch$16210$Uaprr
                                g$t$18768$Uaprr
                                '(any . #(each (any any)))))))
                          (car g$exp*$18765$Uaprr)))))))
           g$f$18764$Uaprr)
         g$exp*$18763$Uaprr
         '()
         '()))))
   (g$parse-library-name$16260$Uaprr
     g$parse-library-name$19854$Uaprr
     (case-lambda
       ((g$spec$18776$Uaprr)
        (letrec* ((g$parse$18777$Uaprr
                    (case-lambda
                      ((g$x$18784$Uaprr)
                       ((case-lambda
                          ((g$t$18785$Uaprr)
                           ((case-lambda
                              ((g$ls/false$18786$Uaprr)
                               (if (if g$ls/false$18786$Uaprr
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$18787$Uaprr)
                                            (g$for-all$11720$Uaprr
                                              (case-lambda
                                                ((g$x$18788$Uaprr)
                                                 ((case-lambda
                                                    ((g$x$18789$Uaprr)
                                                     (if (integer?
                                                           g$x$18789$Uaprr)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$18789$Uaprr))
                                                       '#f)))
                                                  (g$syntax->datum$16332$Uaprr
                                                    g$x$18788$Uaprr))))
                                              g$v*$18787$Uaprr)))
                                         g$ls/false$18786$Uaprr))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$18790$Uaprr)
                                      (values
                                        '()
                                        (g$map$11722$Uaprr
                                          g$syntax->datum$16332$Uaprr
                                          g$v*$18790$Uaprr))))
                                   g$ls/false$18786$Uaprr)
                                 ((case-lambda
                                    ((g$t$18791$Uaprr)
                                     ((case-lambda
                                        ((g$ls/false$18792$Uaprr)
                                         (if (if g$ls/false$18792$Uaprr
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$18793$Uaprr
                                                        g$rest$18794$Uaprr)
                                                      (g$symbol?$12465$Uaprr
                                                        (g$syntax->datum$16332$Uaprr
                                                          g$x$18793$Uaprr))))
                                                   g$ls/false$18792$Uaprr))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$18795$Uaprr
                                                  g$rest$18796$Uaprr)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$18777$Uaprr
                                                       g$rest$18796$Uaprr)))
                                                  (case-lambda
                                                    ((g$x*$18799$Uaprr
                                                       g$v*$18800$Uaprr)
                                                     ((case-lambda
                                                        ((g$v*$18801$Uaprr
                                                           g$x*$18802$Uaprr)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$16332$Uaprr
                                                               g$x$18795$Uaprr)
                                                             g$x*$18802$Uaprr)
                                                           g$v*$18801$Uaprr)))
                                                      g$v*$18800$Uaprr
                                                      g$x*$18799$Uaprr))))))
                                             g$ls/false$18792$Uaprr)
                                           ((case-lambda
                                              ((g$t$18803$Uaprr)
                                               ((case-lambda
                                                  ((g$ls/false$18804$Uaprr)
                                                   (if g$ls/false$18804$Uaprr
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (values
                                                            '()
                                                            '())))
                                                       g$ls/false$18804$Uaprr)
                                                     ((case-lambda
                                                        ((g$t$18805$Uaprr)
                                                         ((case-lambda
                                                            ((g$ls/false$18806$Uaprr)
                                                             (if g$ls/false$18806$Uaprr
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$16329$Uaprr
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$18776$Uaprr)))
                                                                 g$ls/false$18806$Uaprr)
                                                               (g$syntax-violation$16329$Uaprr
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$18805$Uaprr))))
                                                          (g$syntax-dispatch$16210$Uaprr
                                                            g$t$18805$Uaprr
                                                            '_))))
                                                      g$t$18803$Uaprr))))
                                                (g$syntax-dispatch$16210$Uaprr
                                                  g$t$18803$Uaprr
                                                  '()))))
                                            g$t$18791$Uaprr))))
                                      (g$syntax-dispatch$16210$Uaprr
                                        g$t$18791$Uaprr
                                        '(any . any)))))
                                  g$t$18785$Uaprr))))
                            (g$syntax-dispatch$16210$Uaprr
                              g$t$18785$Uaprr
                              '(each-any)))))
                        g$x$18784$Uaprr)))))
          (call-with-values
            (case-lambda (() (g$parse$18777$Uaprr g$spec$18776$Uaprr)))
            (case-lambda
              ((g$name*$18780$Uaprr g$ver*$18781$Uaprr)
               ((case-lambda
                  ((g$ver*$18782$Uaprr g$name*$18783$Uaprr)
                   (begin
                     (if (null? g$name*$18783$Uaprr)
                       (g$syntax-violation$16329$Uaprr
                         '#f
                         '"empty library name"
                         g$spec$18776$Uaprr)
                       (void))
                     (values g$name*$18783$Uaprr g$ver*$18782$Uaprr))))
                g$ver*$18781$Uaprr
                g$name*$18780$Uaprr))))))))
   (g$parse-library$16261$Uaprr
     g$parse-library$19855$Uaprr
     (case-lambda
       ((g$e$18807$Uaprr)
        ((case-lambda
           ((g$t$18808$Uaprr)
            ((case-lambda
               ((g$ls/false$18809$Uaprr)
                (if (if g$ls/false$18809$Uaprr
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$18810$Uaprr
                               g$name*$18811$Uaprr
                               g$export$18812$Uaprr
                               g$exp*$18813$Uaprr
                               g$import$18814$Uaprr
                               g$imp*$18815$Uaprr
                               g$b*$18816$Uaprr)
                             (if (eq? (g$syntax->datum$16332$Uaprr
                                        g$export$18812$Uaprr)
                                      'export)
                               (if (eq? (g$syntax->datum$16332$Uaprr
                                          g$import$18814$Uaprr)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$16332$Uaprr
                                          g$library$18810$Uaprr)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$18809$Uaprr))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$18817$Uaprr
                         g$name*$18818$Uaprr
                         g$export$18819$Uaprr
                         g$exp*$18820$Uaprr
                         g$import$18821$Uaprr
                         g$imp*$18822$Uaprr
                         g$b*$18823$Uaprr)
                       (values
                         g$name*$18818$Uaprr
                         g$exp*$18820$Uaprr
                         g$imp*$18822$Uaprr
                         g$b*$18823$Uaprr)))
                    g$ls/false$18809$Uaprr)
                  ((case-lambda
                     ((g$t$18824$Uaprr)
                      ((case-lambda
                         ((g$ls/false$18825$Uaprr)
                          (if g$ls/false$18825$Uaprr
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$16329$Uaprr
                                   '#f
                                   '"malformed library"
                                   g$e$18807$Uaprr)))
                              g$ls/false$18825$Uaprr)
                            (g$syntax-violation$16329$Uaprr
                              '#f
                              '"invalid syntax"
                              g$t$18824$Uaprr))))
                       (g$syntax-dispatch$16210$Uaprr
                         g$t$18824$Uaprr
                         '_))))
                   g$t$18808$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$18808$Uaprr
               '(any each-any
                     (any . each-any)
                     (any . each-any)
                     .
                     each-any)))))
         g$e$18807$Uaprr))))
   (g$parse-import-spec*$16262$Uaprr
     g$parse-import-spec*$19856$Uaprr
     (case-lambda
       ((g$imp*$18826$Uaprr)
        (letrec* ((g$idsyn?$18827$Uaprr
                    (case-lambda
                      ((g$x$19087$Uaprr)
                       (g$symbol?$12465$Uaprr
                         (g$syntax->datum$16332$Uaprr
                           g$x$19087$Uaprr)))))
                  (g$dup-error$18828$Uaprr
                    (case-lambda
                      ((g$name$19086$Uaprr)
                       (g$syntax-violation$16329$Uaprr
                         'import
                         '"two imports with different bindings"
                         g$name$19086$Uaprr))))
                  (g$merge-substs$18829$Uaprr
                    (case-lambda
                      ((g$s$19077$Uaprr g$subst$19078$Uaprr)
                       (letrec* ((g$insert-to-subst$19079$Uaprr
                                   (case-lambda
                                     ((g$a$19080$Uaprr
                                        g$subst$19081$Uaprr)
                                      ((case-lambda
                                         ((g$name$19082$Uaprr
                                            g$label$19083$Uaprr)
                                          ((case-lambda
                                             ((g$t$19084$Uaprr)
                                              (if g$t$19084$Uaprr
                                                ((case-lambda
                                                   ((g$x$19085$Uaprr)
                                                    (if (eq? (cdr g$x$19085$Uaprr)
                                                             g$label$19083$Uaprr)
                                                      g$subst$19081$Uaprr
                                                      (g$dup-error$18828$Uaprr
                                                        g$name$19082$Uaprr))))
                                                 g$t$19084$Uaprr)
                                                (cons
                                                  g$a$19080$Uaprr
                                                  g$subst$19081$Uaprr))))
                                           (g$assq$11710$Uaprr
                                             g$name$19082$Uaprr
                                             g$subst$19081$Uaprr))))
                                       (car g$a$19080$Uaprr)
                                       (cdr g$a$19080$Uaprr))))))
                         (if (null? g$s$19077$Uaprr)
                           g$subst$19078$Uaprr
                           (g$insert-to-subst$19079$Uaprr
                             (car g$s$19077$Uaprr)
                             (g$merge-substs$18829$Uaprr
                               (cdr g$s$19077$Uaprr)
                               g$subst$19078$Uaprr)))))))
                  (g$exclude*$18830$Uaprr
                    (case-lambda
                      ((g$sym*$19053$Uaprr g$subst$19054$Uaprr)
                       (letrec* ((g$exclude$19055$Uaprr
                                   (case-lambda
                                     ((g$sym$19068$Uaprr
                                        g$subst$19069$Uaprr)
                                      (if (null? g$subst$19069$Uaprr)
                                        (g$syntax-violation$16329$Uaprr
                                          'import
                                          '"cannot rename unbound identifier"
                                          g$sym$19068$Uaprr)
                                        (if (eq? g$sym$19068$Uaprr
                                                 (g$caar$12474$Uaprr
                                                   g$subst$19069$Uaprr))
                                          (values
                                            (g$cdar$12476$Uaprr
                                              g$subst$19069$Uaprr)
                                            (cdr g$subst$19069$Uaprr))
                                          ((case-lambda
                                             ((g$a$19070$Uaprr)
                                              (call-with-values
                                                (case-lambda
                                                  (()
                                                   (g$exclude$19055$Uaprr
                                                     g$sym$19068$Uaprr
                                                     (cdr g$subst$19069$Uaprr))))
                                                (case-lambda
                                                  ((g$old$19073$Uaprr
                                                     g$subst$19074$Uaprr)
                                                   ((case-lambda
                                                      ((g$subst$19075$Uaprr
                                                         g$old$19076$Uaprr)
                                                       (values
                                                         g$old$19076$Uaprr
                                                         (cons
                                                           g$a$19070$Uaprr
                                                           g$subst$19075$Uaprr))))
                                                    g$subst$19074$Uaprr
                                                    g$old$19073$Uaprr))))))
                                           (car g$subst$19069$Uaprr))))))))
                         (if (null? g$sym*$19053$Uaprr)
                           (values '() g$subst$19054$Uaprr)
                           (call-with-values
                             (case-lambda
                               (()
                                (g$exclude$19055$Uaprr
                                  (car g$sym*$19053$Uaprr)
                                  g$subst$19054$Uaprr)))
                             (case-lambda
                               ((g$old$19058$Uaprr g$subst$19059$Uaprr)
                                ((case-lambda
                                   ((g$subst$19060$Uaprr
                                      g$old$19061$Uaprr)
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$exclude*$18830$Uaprr
                                           (cdr g$sym*$19053$Uaprr)
                                           g$subst$19060$Uaprr)))
                                      (case-lambda
                                        ((g$old*$19064$Uaprr
                                           g$subst$19065$Uaprr)
                                         ((case-lambda
                                            ((g$subst$19066$Uaprr
                                               g$old*$19067$Uaprr)
                                             (values
                                               (cons
                                                 g$old$19061$Uaprr
                                                 g$old*$19067$Uaprr)
                                               g$subst$19066$Uaprr)))
                                          g$subst$19065$Uaprr
                                          g$old*$19064$Uaprr))))))
                                 g$subst$19059$Uaprr
                                 g$old$19058$Uaprr)))))))))
                  (g$find*$18831$Uaprr
                    (case-lambda
                      ((g$sym*$19049$Uaprr g$subst$19050$Uaprr)
                       (g$map$11722$Uaprr
                         (case-lambda
                           ((g$x$19051$Uaprr)
                            ((case-lambda
                               ((g$t$19052$Uaprr)
                                (if g$t$19052$Uaprr
                                  (cdr g$t$19052$Uaprr)
                                  (g$syntax-violation$16329$Uaprr
                                    'import
                                    '"cannot find identifier"
                                    g$x$19051$Uaprr))))
                             (g$assq$11710$Uaprr
                               g$x$19051$Uaprr
                               g$subst$19050$Uaprr))))
                         g$sym*$19049$Uaprr))))
                  (g$rem*$18832$Uaprr
                    (case-lambda
                      ((g$sym*$19045$Uaprr g$subst$19046$Uaprr)
                       ((letrec ((g$f$19047$Uaprr
                                   (case-lambda
                                     ((g$subst$19048$Uaprr)
                                      (if (null? g$subst$19048$Uaprr)
                                        '()
                                        (if (g$memq$11714$Uaprr
                                              (g$caar$12474$Uaprr
                                                g$subst$19048$Uaprr)
                                              g$sym*$19045$Uaprr)
                                          (g$f$19047$Uaprr
                                            (cdr g$subst$19048$Uaprr))
                                          (cons
                                            (car g$subst$19048$Uaprr)
                                            (g$f$19047$Uaprr
                                              (cdr g$subst$19048$Uaprr)))))))))
                          g$f$19047$Uaprr)
                        g$subst$19046$Uaprr))))
                  (g$remove-dups$18833$Uaprr
                    (case-lambda
                      ((g$ls$19044$Uaprr)
                       (if (null? g$ls$19044$Uaprr)
                         '()
                         (if (g$memq$11714$Uaprr
                               (car g$ls$19044$Uaprr)
                               (cdr g$ls$19044$Uaprr))
                           (g$remove-dups$18833$Uaprr
                             (cdr g$ls$19044$Uaprr))
                           (cons
                             (car g$ls$19044$Uaprr)
                             (g$remove-dups$18833$Uaprr
                               (cdr g$ls$19044$Uaprr))))))))
                  (g$parse-library-name$18834$Uaprr
                    (case-lambda
                      ((g$spec$18928$Uaprr)
                       (letrec* ((g$subversion?$18929$Uaprr
                                   (case-lambda
                                     ((g$x$19042$Uaprr)
                                      ((case-lambda
                                         ((g$x$19043$Uaprr)
                                          (if (integer? g$x$19043$Uaprr)
                                            (if (exact? g$x$19043$Uaprr)
                                              (begin
                                                '#f
                                                (>= g$x$19043$Uaprr '0))
                                              '#f)
                                            '#f)))
                                       (g$syntax->datum$16332$Uaprr
                                         g$x$19042$Uaprr)))))
                                 (g$subversion-pred$18930$Uaprr
                                   (case-lambda
                                     ((g$x*$18994$Uaprr)
                                      ((case-lambda
                                         ((g$t$18995$Uaprr)
                                          ((case-lambda
                                             ((g$ls/false$18996$Uaprr)
                                              (if (if g$ls/false$18996$Uaprr
                                                    (begin
                                                      '#f
                                                      (apply
                                                        (case-lambda
                                                          ((g$n$18997$Uaprr)
                                                           (g$subversion?$18929$Uaprr
                                                             g$n$18997$Uaprr)))
                                                        g$ls/false$18996$Uaprr))
                                                    '#f)
                                                (apply
                                                  (case-lambda
                                                    ((g$n$18998$Uaprr)
                                                     (case-lambda
                                                       ((g$x$18999$Uaprr)
                                                        (= g$x$18999$Uaprr
                                                           (g$syntax->datum$16332$Uaprr
                                                             g$n$18998$Uaprr))))))
                                                  g$ls/false$18996$Uaprr)
                                                ((case-lambda
                                                   ((g$t$19000$Uaprr)
                                                    ((case-lambda
                                                       ((g$ls/false$19001$Uaprr)
                                                        (if (if g$ls/false$19001$Uaprr
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p?$19002$Uaprr
                                                                       g$sub*$19003$Uaprr)
                                                                     (eq? (g$syntax->datum$16332$Uaprr
                                                                            g$p?$19002$Uaprr)
                                                                          'and)))
                                                                  g$ls/false$19001$Uaprr))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$p?$19004$Uaprr
                                                                 g$sub*$19005$Uaprr)
                                                               ((case-lambda
                                                                  ((g$p*$19006$Uaprr)
                                                                   (case-lambda
                                                                     ((g$x$19007$Uaprr)
                                                                      (g$for-all$11720$Uaprr
                                                                        (case-lambda
                                                                          ((g$p$19008$Uaprr)
                                                                           (g$p$19008$Uaprr
                                                                             g$x$19007$Uaprr)))
                                                                        g$p*$19006$Uaprr)))))
                                                                (g$map$11722$Uaprr
                                                                  g$subversion-pred$18930$Uaprr
                                                                  g$sub*$19005$Uaprr))))
                                                            g$ls/false$19001$Uaprr)
                                                          ((case-lambda
                                                             ((g$t$19009$Uaprr)
                                                              ((case-lambda
                                                                 ((g$ls/false$19010$Uaprr)
                                                                  (if (if g$ls/false$19010$Uaprr
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p?$19011$Uaprr
                                                                                 g$sub*$19012$Uaprr)
                                                                               (eq? (g$syntax->datum$16332$Uaprr
                                                                                      g$p?$19011$Uaprr)
                                                                                    'or)))
                                                                            g$ls/false$19010$Uaprr))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$p?$19013$Uaprr
                                                                           g$sub*$19014$Uaprr)
                                                                         ((case-lambda
                                                                            ((g$p*$19015$Uaprr)
                                                                             (case-lambda
                                                                               ((g$x$19016$Uaprr)
                                                                                (g$exists$11721$Uaprr
                                                                                  (case-lambda
                                                                                    ((g$p$19017$Uaprr)
                                                                                     (g$p$19017$Uaprr
                                                                                       g$x$19016$Uaprr)))
                                                                                  g$p*$19015$Uaprr)))))
                                                                          (g$map$11722$Uaprr
                                                                            g$subversion-pred$18930$Uaprr
                                                                            g$sub*$19014$Uaprr))))
                                                                      g$ls/false$19010$Uaprr)
                                                                    ((case-lambda
                                                                       ((g$t$19018$Uaprr)
                                                                        ((case-lambda
                                                                           ((g$ls/false$19019$Uaprr)
                                                                            (if (if g$ls/false$19019$Uaprr
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p?$19020$Uaprr
                                                                                           g$sub$19021$Uaprr)
                                                                                         (eq? (g$syntax->datum$16332$Uaprr
                                                                                                g$p?$19020$Uaprr)
                                                                                              'not)))
                                                                                      g$ls/false$19019$Uaprr))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$p?$19022$Uaprr
                                                                                     g$sub$19023$Uaprr)
                                                                                   ((case-lambda
                                                                                      ((g$p$19024$Uaprr)
                                                                                       (case-lambda
                                                                                         ((g$x$19025$Uaprr)
                                                                                          (not (g$p$19024$Uaprr
                                                                                                 g$x$19025$Uaprr))))))
                                                                                    (g$subversion-pred$18930$Uaprr
                                                                                      g$sub$19023$Uaprr))))
                                                                                g$ls/false$19019$Uaprr)
                                                                              ((case-lambda
                                                                                 ((g$t$19026$Uaprr)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$19027$Uaprr)
                                                                                      (if (if g$ls/false$19027$Uaprr
                                                                                            (begin
                                                                                              '#f
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p?$19028$Uaprr
                                                                                                     g$n$19029$Uaprr)
                                                                                                   (if (eq? (g$syntax->datum$16332$Uaprr
                                                                                                              g$p?$19028$Uaprr)
                                                                                                            '<=)
                                                                                                     (begin
                                                                                                       '#f
                                                                                                       (g$subversion?$18929$Uaprr
                                                                                                         g$n$19029$Uaprr))
                                                                                                     '#f)))
                                                                                                g$ls/false$19027$Uaprr))
                                                                                            '#f)
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$p?$19030$Uaprr
                                                                                               g$n$19031$Uaprr)
                                                                                             (case-lambda
                                                                                               ((g$x$19032$Uaprr)
                                                                                                (<= g$x$19032$Uaprr
                                                                                                    (g$syntax->datum$16332$Uaprr
                                                                                                      g$n$19031$Uaprr))))))
                                                                                          g$ls/false$19027$Uaprr)
                                                                                        ((case-lambda
                                                                                           ((g$t$19033$Uaprr)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$19034$Uaprr)
                                                                                                (if (if g$ls/false$19034$Uaprr
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$p?$19035$Uaprr
                                                                                                               g$n$19036$Uaprr)
                                                                                                             (if (eq? (g$syntax->datum$16332$Uaprr
                                                                                                                        g$p?$19035$Uaprr)
                                                                                                                      '>=)
                                                                                                               (begin
                                                                                                                 '#f
                                                                                                                 (g$subversion?$18929$Uaprr
                                                                                                                   g$n$19036$Uaprr))
                                                                                                               '#f)))
                                                                                                          g$ls/false$19034$Uaprr))
                                                                                                      '#f)
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$p?$19037$Uaprr
                                                                                                         g$n$19038$Uaprr)
                                                                                                       (case-lambda
                                                                                                         ((g$x$19039$Uaprr)
                                                                                                          (>= g$x$19039$Uaprr
                                                                                                              (g$syntax->datum$16332$Uaprr
                                                                                                                g$n$19038$Uaprr))))))
                                                                                                    g$ls/false$19034$Uaprr)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$19040$Uaprr)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$19041$Uaprr)
                                                                                                          (if g$ls/false$19041$Uaprr
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (g$syntax-violation$16329$Uaprr
                                                                                                                   'import
                                                                                                                   '"invalid sub-version spec"
                                                                                                                   g$spec$18928$Uaprr
                                                                                                                   g$x*$18994$Uaprr)))
                                                                                                              g$ls/false$19041$Uaprr)
                                                                                                            (g$syntax-violation$16329$Uaprr
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$19040$Uaprr))))
                                                                                                       (g$syntax-dispatch$16210$Uaprr
                                                                                                         g$t$19040$Uaprr
                                                                                                         '_))))
                                                                                                   g$t$19033$Uaprr))))
                                                                                             (g$syntax-dispatch$16210$Uaprr
                                                                                               g$t$19033$Uaprr
                                                                                               '(any any)))))
                                                                                         g$t$19026$Uaprr))))
                                                                                   (g$syntax-dispatch$16210$Uaprr
                                                                                     g$t$19026$Uaprr
                                                                                     '(any any)))))
                                                                               g$t$19018$Uaprr))))
                                                                         (g$syntax-dispatch$16210$Uaprr
                                                                           g$t$19018$Uaprr
                                                                           '(any any)))))
                                                                     g$t$19009$Uaprr))))
                                                               (g$syntax-dispatch$16210$Uaprr
                                                                 g$t$19009$Uaprr
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$19000$Uaprr))))
                                                     (g$syntax-dispatch$16210$Uaprr
                                                       g$t$19000$Uaprr
                                                       '(any .
                                                             each-any)))))
                                                 g$t$18995$Uaprr))))
                                           (g$syntax-dispatch$16210$Uaprr
                                             g$t$18995$Uaprr
                                             'any))))
                                       g$x*$18994$Uaprr))))
                                 (g$version-pred$18931$Uaprr
                                   (case-lambda
                                     ((g$x*$18954$Uaprr)
                                      ((case-lambda
                                         ((g$t$18955$Uaprr)
                                          ((case-lambda
                                             ((g$ls/false$18956$Uaprr)
                                              (if g$ls/false$18956$Uaprr
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (case-lambda
                                                       ((g$x$18957$Uaprr)
                                                        '#t))))
                                                  g$ls/false$18956$Uaprr)
                                                ((case-lambda
                                                   ((g$t$18958$Uaprr)
                                                    ((case-lambda
                                                       ((g$ls/false$18959$Uaprr)
                                                        (if (if g$ls/false$18959$Uaprr
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$c$18960$Uaprr
                                                                       g$ver*$18961$Uaprr)
                                                                     (eq? (g$syntax->datum$16332$Uaprr
                                                                            g$c$18960$Uaprr)
                                                                          'and)))
                                                                  g$ls/false$18959$Uaprr))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$c$18962$Uaprr
                                                                 g$ver*$18963$Uaprr)
                                                               ((case-lambda
                                                                  ((g$p*$18964$Uaprr)
                                                                   (case-lambda
                                                                     ((g$x$18965$Uaprr)
                                                                      (g$for-all$11720$Uaprr
                                                                        (case-lambda
                                                                          ((g$p$18966$Uaprr)
                                                                           (g$p$18966$Uaprr
                                                                             g$x$18965$Uaprr)))
                                                                        g$p*$18964$Uaprr)))))
                                                                (g$map$11722$Uaprr
                                                                  g$version-pred$18931$Uaprr
                                                                  g$ver*$18963$Uaprr))))
                                                            g$ls/false$18959$Uaprr)
                                                          ((case-lambda
                                                             ((g$t$18967$Uaprr)
                                                              ((case-lambda
                                                                 ((g$ls/false$18968$Uaprr)
                                                                  (if (if g$ls/false$18968$Uaprr
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$c$18969$Uaprr
                                                                                 g$ver*$18970$Uaprr)
                                                                               (eq? (g$syntax->datum$16332$Uaprr
                                                                                      g$c$18969$Uaprr)
                                                                                    'or)))
                                                                            g$ls/false$18968$Uaprr))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$c$18971$Uaprr
                                                                           g$ver*$18972$Uaprr)
                                                                         ((case-lambda
                                                                            ((g$p*$18973$Uaprr)
                                                                             (case-lambda
                                                                               ((g$x$18974$Uaprr)
                                                                                (g$exists$11721$Uaprr
                                                                                  (case-lambda
                                                                                    ((g$p$18975$Uaprr)
                                                                                     (g$p$18975$Uaprr
                                                                                       g$x$18974$Uaprr)))
                                                                                  g$p*$18973$Uaprr)))))
                                                                          (g$map$11722$Uaprr
                                                                            g$version-pred$18931$Uaprr
                                                                            g$ver*$18972$Uaprr))))
                                                                      g$ls/false$18968$Uaprr)
                                                                    ((case-lambda
                                                                       ((g$t$18976$Uaprr)
                                                                        ((case-lambda
                                                                           ((g$ls/false$18977$Uaprr)
                                                                            (if (if g$ls/false$18977$Uaprr
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$c$18978$Uaprr
                                                                                           g$ver$18979$Uaprr)
                                                                                         (eq? (g$syntax->datum$16332$Uaprr
                                                                                                g$c$18978$Uaprr)
                                                                                              'not)))
                                                                                      g$ls/false$18977$Uaprr))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$c$18980$Uaprr
                                                                                     g$ver$18981$Uaprr)
                                                                                   ((case-lambda
                                                                                      ((g$p$18982$Uaprr)
                                                                                       (case-lambda
                                                                                         ((g$x$18983$Uaprr)
                                                                                          (not (g$p$18982$Uaprr
                                                                                                 g$x$18983$Uaprr))))))
                                                                                    (g$version-pred$18931$Uaprr
                                                                                      g$ver$18981$Uaprr))))
                                                                                g$ls/false$18977$Uaprr)
                                                                              ((case-lambda
                                                                                 ((g$t$18984$Uaprr)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$18985$Uaprr)
                                                                                      (if g$ls/false$18985$Uaprr
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$sub*$18986$Uaprr)
                                                                                             ((case-lambda
                                                                                                ((g$p*$18987$Uaprr)
                                                                                                 (case-lambda
                                                                                                   ((g$x$18988$Uaprr)
                                                                                                    ((letrec ((g$f$18989$Uaprr
                                                                                                                (case-lambda
                                                                                                                  ((g$p*$18990$Uaprr
                                                                                                                     g$x$18991$Uaprr)
                                                                                                                   (if (null?
                                                                                                                         g$p*$18990$Uaprr)
                                                                                                                     '#t
                                                                                                                     (if (null?
                                                                                                                           g$x$18991$Uaprr)
                                                                                                                       '#f
                                                                                                                       (if ((car g$p*$18990$Uaprr)
                                                                                                                            (car g$x$18991$Uaprr))
                                                                                                                         (begin
                                                                                                                           '#f
                                                                                                                           (g$f$18989$Uaprr
                                                                                                                             (cdr g$p*$18990$Uaprr)
                                                                                                                             (cdr g$x$18991$Uaprr)))
                                                                                                                         '#f)))))))
                                                                                                       g$f$18989$Uaprr)
                                                                                                     g$p*$18987$Uaprr
                                                                                                     g$x$18988$Uaprr)))))
                                                                                              (g$map$11722$Uaprr
                                                                                                g$subversion-pred$18930$Uaprr
                                                                                                g$sub*$18986$Uaprr))))
                                                                                          g$ls/false$18985$Uaprr)
                                                                                        ((case-lambda
                                                                                           ((g$t$18992$Uaprr)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$18993$Uaprr)
                                                                                                (if g$ls/false$18993$Uaprr
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      (()
                                                                                                       (g$syntax-violation$16329$Uaprr
                                                                                                         'import
                                                                                                         '"invalid version spec"
                                                                                                         g$spec$18928$Uaprr
                                                                                                         g$x*$18954$Uaprr)))
                                                                                                    g$ls/false$18993$Uaprr)
                                                                                                  (g$syntax-violation$16329$Uaprr
                                                                                                    '#f
                                                                                                    '"invalid syntax"
                                                                                                    g$t$18992$Uaprr))))
                                                                                             (g$syntax-dispatch$16210$Uaprr
                                                                                               g$t$18992$Uaprr
                                                                                               '_))))
                                                                                         g$t$18984$Uaprr))))
                                                                                   (g$syntax-dispatch$16210$Uaprr
                                                                                     g$t$18984$Uaprr
                                                                                     'each-any))))
                                                                               g$t$18976$Uaprr))))
                                                                         (g$syntax-dispatch$16210$Uaprr
                                                                           g$t$18976$Uaprr
                                                                           '(any any)))))
                                                                     g$t$18967$Uaprr))))
                                                               (g$syntax-dispatch$16210$Uaprr
                                                                 g$t$18967$Uaprr
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$18958$Uaprr))))
                                                     (g$syntax-dispatch$16210$Uaprr
                                                       g$t$18958$Uaprr
                                                       '(any .
                                                             each-any)))))
                                                 g$t$18955$Uaprr))))
                                           (g$syntax-dispatch$16210$Uaprr
                                             g$t$18955$Uaprr
                                             '()))))
                                       g$x*$18954$Uaprr)))))
                         ((letrec ((g$f$18932$Uaprr
                                     (case-lambda
                                       ((g$x$18933$Uaprr)
                                        ((case-lambda
                                           ((g$t$18934$Uaprr)
                                            ((case-lambda
                                               ((g$ls/false$18935$Uaprr)
                                                (if g$ls/false$18935$Uaprr
                                                  (apply
                                                    (case-lambda
                                                      ((g$version-spec*$18936$Uaprr)
                                                       (values
                                                         '()
                                                         (g$version-pred$18931$Uaprr
                                                           g$version-spec*$18936$Uaprr))))
                                                    g$ls/false$18935$Uaprr)
                                                  ((case-lambda
                                                     ((g$t$18937$Uaprr)
                                                      ((case-lambda
                                                         ((g$ls/false$18938$Uaprr)
                                                          (if (if g$ls/false$18938$Uaprr
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$x$18939$Uaprr
                                                                         g$x*$18940$Uaprr)
                                                                       (g$idsyn?$18827$Uaprr
                                                                         g$x$18939$Uaprr)))
                                                                    g$ls/false$18938$Uaprr))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$x$18941$Uaprr
                                                                   g$x*$18942$Uaprr)
                                                                 (call-with-values
                                                                   (case-lambda
                                                                     (()
                                                                      (g$f$18932$Uaprr
                                                                        g$x*$18942$Uaprr)))
                                                                   (case-lambda
                                                                     ((g$name$18945$Uaprr
                                                                        g$pred$18946$Uaprr)
                                                                      ((case-lambda
                                                                         ((g$pred$18947$Uaprr
                                                                            g$name$18948$Uaprr)
                                                                          (values
                                                                            (cons
                                                                              (g$syntax->datum$16332$Uaprr
                                                                                g$x$18941$Uaprr)
                                                                              g$name$18948$Uaprr)
                                                                            g$pred$18947$Uaprr)))
                                                                       g$pred$18946$Uaprr
                                                                       g$name$18945$Uaprr))))))
                                                              g$ls/false$18938$Uaprr)
                                                            ((case-lambda
                                                               ((g$t$18949$Uaprr)
                                                                ((case-lambda
                                                                   ((g$ls/false$18950$Uaprr)
                                                                    (if g$ls/false$18950$Uaprr
                                                                      (apply
                                                                        (case-lambda
                                                                          (()
                                                                           (values
                                                                             '()
                                                                             (case-lambda
                                                                               ((g$x$18951$Uaprr)
                                                                                '#t)))))
                                                                        g$ls/false$18950$Uaprr)
                                                                      ((case-lambda
                                                                         ((g$t$18952$Uaprr)
                                                                          ((case-lambda
                                                                             ((g$ls/false$18953$Uaprr)
                                                                              (if g$ls/false$18953$Uaprr
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$syntax-violation$16329$Uaprr
                                                                                       '#f
                                                                                       '"invalid import spec"
                                                                                       g$spec$18928$Uaprr)))
                                                                                  g$ls/false$18953$Uaprr)
                                                                                (g$syntax-violation$16329$Uaprr
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$18952$Uaprr))))
                                                                           (g$syntax-dispatch$16210$Uaprr
                                                                             g$t$18952$Uaprr
                                                                             '_))))
                                                                       g$t$18949$Uaprr))))
                                                                 (g$syntax-dispatch$16210$Uaprr
                                                                   g$t$18949$Uaprr
                                                                   '()))))
                                                             g$t$18937$Uaprr))))
                                                       (g$syntax-dispatch$16210$Uaprr
                                                         g$t$18937$Uaprr
                                                         '(any .
                                                               any)))))
                                                   g$t$18934$Uaprr))))
                                             (g$syntax-dispatch$16210$Uaprr
                                               g$t$18934$Uaprr
                                               '(each-any)))))
                                         g$x$18933$Uaprr)))))
                            g$f$18932$Uaprr)
                          g$spec$18928$Uaprr)))))
                  (g$import-library$18835$Uaprr
                    (case-lambda
                      ((g$spec*$18920$Uaprr)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-library-name$18834$Uaprr
                              g$spec*$18920$Uaprr)))
                         (case-lambda
                           ((g$name$18923$Uaprr g$pred$18924$Uaprr)
                            ((case-lambda
                               ((g$pred$18925$Uaprr g$name$18926$Uaprr)
                                (begin
                                  (if (null? g$name$18926$Uaprr)
                                    (g$syntax-violation$16329$Uaprr
                                      'import
                                      '"empty library name"
                                      g$spec*$18920$Uaprr)
                                    (void))
                                  ((case-lambda
                                     ((g$lib$18927$Uaprr)
                                      (begin
                                        (if (not g$lib$18927$Uaprr)
                                          (g$syntax-violation$16329$Uaprr
                                            'import
                                            '"cannot find library with required name"
                                            g$name$18926$Uaprr)
                                          (void))
                                        (if (not (g$pred$18925$Uaprr
                                                   (g$library-version$15371$Uaprr
                                                     g$lib$18927$Uaprr)))
                                          (g$syntax-violation$16329$Uaprr
                                            'import
                                            '"library does not satisfy version specification"
                                            g$spec*$18920$Uaprr
                                            g$lib$18927$Uaprr)
                                          (void))
                                        ((g$imp-collector$16267$Uaprr)
                                         g$lib$18927$Uaprr)
                                        (g$library-subst$15375$Uaprr
                                          g$lib$18927$Uaprr))))
                                   (g$find-library-by-name$15411$Uaprr
                                     g$name$18926$Uaprr)))))
                             g$pred$18924$Uaprr
                             g$name$18923$Uaprr)))))))
                  (g$get-import$18836$Uaprr
                    (case-lambda
                      ((g$spec$18849$Uaprr)
                       ((case-lambda
                          ((g$t$18850$Uaprr)
                           ((case-lambda
                              ((g$ls/false$18851$Uaprr)
                               (if (if g$ls/false$18851$Uaprr
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$x$18852$Uaprr
                                              g$x*$18853$Uaprr)
                                            (not (g$memq$11714$Uaprr
                                                   (g$syntax->datum$16332$Uaprr
                                                     g$x$18852$Uaprr)
                                                   '(for rename
                                                         except
                                                         only
                                                         prefix
                                                         library)))))
                                         g$ls/false$18851$Uaprr))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$x$18854$Uaprr g$x*$18855$Uaprr)
                                      (g$import-library$18835$Uaprr
                                        (cons
                                          g$x$18854$Uaprr
                                          g$x*$18855$Uaprr))))
                                   g$ls/false$18851$Uaprr)
                                 ((case-lambda
                                    ((g$t$18856$Uaprr)
                                     ((case-lambda
                                        ((g$ls/false$18857$Uaprr)
                                         (if (if g$ls/false$18857$Uaprr
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$rename$18858$Uaprr
                                                        g$isp$18859$Uaprr
                                                        g$old*$18860$Uaprr
                                                        g$new*$18861$Uaprr)
                                                      (if (eq? (g$syntax->datum$16332$Uaprr
                                                                 g$rename$18858$Uaprr)
                                                               'rename)
                                                        (if (g$for-all$11720$Uaprr
                                                              g$idsyn?$18827$Uaprr
                                                              g$old*$18860$Uaprr)
                                                          (begin
                                                            '#f
                                                            (g$for-all$11720$Uaprr
                                                              g$idsyn?$18827$Uaprr
                                                              g$new*$18861$Uaprr))
                                                          '#f)
                                                        '#f)))
                                                   g$ls/false$18857$Uaprr))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$rename$18862$Uaprr
                                                  g$isp$18863$Uaprr
                                                  g$old*$18864$Uaprr
                                                  g$new*$18865$Uaprr)
                                                ((case-lambda
                                                   ((g$subst$18866$Uaprr
                                                      g$old*$18867$Uaprr
                                                      g$new*$18868$Uaprr)
                                                    ((case-lambda
                                                       ((g$old-label*$18869$Uaprr)
                                                        ((case-lambda
                                                           ((g$subst$18870$Uaprr)
                                                            (g$merge-substs$18829$Uaprr
                                                              (g$map$11722$Uaprr
                                                                cons
                                                                g$new*$18868$Uaprr
                                                                g$old-label*$18869$Uaprr)
                                                              g$subst$18870$Uaprr)))
                                                         (g$rem*$18832$Uaprr
                                                           g$old*$18867$Uaprr
                                                           g$subst$18866$Uaprr))))
                                                     (g$find*$18831$Uaprr
                                                       g$old*$18867$Uaprr
                                                       g$subst$18866$Uaprr))))
                                                 (g$get-import$18836$Uaprr
                                                   g$isp$18863$Uaprr)
                                                 (g$map$11722$Uaprr
                                                   g$syntax->datum$16332$Uaprr
                                                   g$old*$18864$Uaprr)
                                                 (g$map$11722$Uaprr
                                                   g$syntax->datum$16332$Uaprr
                                                   g$new*$18865$Uaprr))))
                                             g$ls/false$18857$Uaprr)
                                           ((case-lambda
                                              ((g$t$18871$Uaprr)
                                               ((case-lambda
                                                  ((g$ls/false$18872$Uaprr)
                                                   (if (if g$ls/false$18872$Uaprr
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$except$18873$Uaprr
                                                                  g$isp$18874$Uaprr
                                                                  g$sym*$18875$Uaprr)
                                                                (if (eq? (g$syntax->datum$16332$Uaprr
                                                                           g$except$18873$Uaprr)
                                                                         'except)
                                                                  (begin
                                                                    '#f
                                                                    (g$for-all$11720$Uaprr
                                                                      g$idsyn?$18827$Uaprr
                                                                      g$sym*$18875$Uaprr))
                                                                  '#f)))
                                                             g$ls/false$18872$Uaprr))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$except$18876$Uaprr
                                                            g$isp$18877$Uaprr
                                                            g$sym*$18878$Uaprr)
                                                          ((case-lambda
                                                             ((g$subst$18879$Uaprr)
                                                              (g$rem*$18832$Uaprr
                                                                (g$map$11722$Uaprr
                                                                  g$syntax->datum$16332$Uaprr
                                                                  g$sym*$18878$Uaprr)
                                                                g$subst$18879$Uaprr)))
                                                           (g$get-import$18836$Uaprr
                                                             g$isp$18877$Uaprr))))
                                                       g$ls/false$18872$Uaprr)
                                                     ((case-lambda
                                                        ((g$t$18880$Uaprr)
                                                         ((case-lambda
                                                            ((g$ls/false$18881$Uaprr)
                                                             (if (if g$ls/false$18881$Uaprr
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$only$18882$Uaprr
                                                                            g$isp$18883$Uaprr
                                                                            g$sym*$18884$Uaprr)
                                                                          (if (eq? (g$syntax->datum$16332$Uaprr
                                                                                     g$only$18882$Uaprr)
                                                                                   'only)
                                                                            (begin
                                                                              '#f
                                                                              (g$for-all$11720$Uaprr
                                                                                g$idsyn?$18827$Uaprr
                                                                                g$sym*$18884$Uaprr))
                                                                            '#f)))
                                                                       g$ls/false$18881$Uaprr))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$only$18885$Uaprr
                                                                      g$isp$18886$Uaprr
                                                                      g$sym*$18887$Uaprr)
                                                                    ((case-lambda
                                                                       ((g$subst$18888$Uaprr
                                                                          g$sym*$18889$Uaprr)
                                                                        ((case-lambda
                                                                           ((g$sym*$18890$Uaprr)
                                                                            ((case-lambda
                                                                               ((g$lab*$18891$Uaprr)
                                                                                (g$map$11722$Uaprr
                                                                                  cons
                                                                                  g$sym*$18890$Uaprr
                                                                                  g$lab*$18891$Uaprr)))
                                                                             (g$find*$18831$Uaprr
                                                                               g$sym*$18890$Uaprr
                                                                               g$subst$18888$Uaprr))))
                                                                         (g$remove-dups$18833$Uaprr
                                                                           g$sym*$18889$Uaprr))))
                                                                     (g$get-import$18836$Uaprr
                                                                       g$isp$18886$Uaprr)
                                                                     (g$map$11722$Uaprr
                                                                       g$syntax->datum$16332$Uaprr
                                                                       g$sym*$18887$Uaprr))))
                                                                 g$ls/false$18881$Uaprr)
                                                               ((case-lambda
                                                                  ((g$t$18892$Uaprr)
                                                                   ((case-lambda
                                                                      ((g$ls/false$18893$Uaprr)
                                                                       (if (if g$ls/false$18893$Uaprr
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$prefix$18894$Uaprr
                                                                                      g$isp$18895$Uaprr
                                                                                      g$p$18896$Uaprr)
                                                                                    (if (eq? (g$syntax->datum$16332$Uaprr
                                                                                               g$prefix$18894$Uaprr)
                                                                                             'prefix)
                                                                                      (begin
                                                                                        '#f
                                                                                        (g$idsyn?$18827$Uaprr
                                                                                          g$p$18896$Uaprr))
                                                                                      '#f)))
                                                                                 g$ls/false$18893$Uaprr))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$prefix$18897$Uaprr
                                                                                g$isp$18898$Uaprr
                                                                                g$p$18899$Uaprr)
                                                                              ((case-lambda
                                                                                 ((g$subst$18900$Uaprr
                                                                                    g$prefix$18901$Uaprr)
                                                                                  (g$map$11722$Uaprr
                                                                                    (case-lambda
                                                                                      ((g$x$18902$Uaprr)
                                                                                       (cons
                                                                                         (string->symbol
                                                                                           (string-append
                                                                                             g$prefix$18901$Uaprr
                                                                                             (symbol->string
                                                                                               (car g$x$18902$Uaprr))))
                                                                                         (cdr g$x$18902$Uaprr))))
                                                                                    g$subst$18900$Uaprr)))
                                                                               (g$get-import$18836$Uaprr
                                                                                 g$isp$18898$Uaprr)
                                                                               (symbol->string
                                                                                 (g$syntax->datum$16332$Uaprr
                                                                                   g$p$18899$Uaprr)))))
                                                                           g$ls/false$18893$Uaprr)
                                                                         ((case-lambda
                                                                            ((g$t$18903$Uaprr)
                                                                             ((case-lambda
                                                                                ((g$ls/false$18904$Uaprr)
                                                                                 (if (if g$ls/false$18904$Uaprr
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$library$18905$Uaprr
                                                                                                g$spec*$18906$Uaprr)
                                                                                              (eq? (g$syntax->datum$16332$Uaprr
                                                                                                     g$library$18905$Uaprr)
                                                                                                   'library)))
                                                                                           g$ls/false$18904$Uaprr))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$library$18907$Uaprr
                                                                                          g$spec*$18908$Uaprr)
                                                                                        (g$import-library$18835$Uaprr
                                                                                          g$spec*$18908$Uaprr)))
                                                                                     g$ls/false$18904$Uaprr)
                                                                                   ((case-lambda
                                                                                      ((g$t$18909$Uaprr)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$18910$Uaprr)
                                                                                           (if (if g$ls/false$18910$Uaprr
                                                                                                 (begin
                                                                                                   '#f
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$for$18911$Uaprr
                                                                                                          g$isp$18912$Uaprr
                                                                                                          g$rest$18913$Uaprr)
                                                                                                        (eq? (g$syntax->datum$16332$Uaprr
                                                                                                               g$for$18911$Uaprr)
                                                                                                             'for)))
                                                                                                     g$ls/false$18910$Uaprr))
                                                                                                 '#f)
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$for$18914$Uaprr
                                                                                                    g$isp$18915$Uaprr
                                                                                                    g$rest$18916$Uaprr)
                                                                                                  (g$get-import$18836$Uaprr
                                                                                                    g$isp$18915$Uaprr)))
                                                                                               g$ls/false$18910$Uaprr)
                                                                                             ((case-lambda
                                                                                                ((g$t$18917$Uaprr)
                                                                                                 ((case-lambda
                                                                                                    ((g$ls/false$18918$Uaprr)
                                                                                                     (if g$ls/false$18918$Uaprr
                                                                                                       (apply
                                                                                                         (case-lambda
                                                                                                           ((g$spec$18919$Uaprr)
                                                                                                            (g$syntax-violation$16329$Uaprr
                                                                                                              'import
                                                                                                              '"invalid import spec"
                                                                                                              g$spec$18919$Uaprr)))
                                                                                                         g$ls/false$18918$Uaprr)
                                                                                                       (g$syntax-violation$16329$Uaprr
                                                                                                         '#f
                                                                                                         '"invalid syntax"
                                                                                                         g$t$18917$Uaprr))))
                                                                                                  (g$syntax-dispatch$16210$Uaprr
                                                                                                    g$t$18917$Uaprr
                                                                                                    'any))))
                                                                                              g$t$18909$Uaprr))))
                                                                                        (g$syntax-dispatch$16210$Uaprr
                                                                                          g$t$18909$Uaprr
                                                                                          '(any any
                                                                                                .
                                                                                                any)))))
                                                                                    g$t$18903$Uaprr))))
                                                                              (g$syntax-dispatch$16210$Uaprr
                                                                                g$t$18903$Uaprr
                                                                                '(any each-any)))))
                                                                          g$t$18892$Uaprr))))
                                                                    (g$syntax-dispatch$16210$Uaprr
                                                                      g$t$18892$Uaprr
                                                                      '(any any
                                                                            any)))))
                                                                g$t$18880$Uaprr))))
                                                          (g$syntax-dispatch$16210$Uaprr
                                                            g$t$18880$Uaprr
                                                            '(any any
                                                                  .
                                                                  each-any)))))
                                                      g$t$18871$Uaprr))))
                                                (g$syntax-dispatch$16210$Uaprr
                                                  g$t$18871$Uaprr
                                                  '(any any
                                                        .
                                                        each-any)))))
                                            g$t$18856$Uaprr))))
                                      (g$syntax-dispatch$16210$Uaprr
                                        g$t$18856$Uaprr
                                        '(any any
                                              .
                                              #(each (any any)))))))
                                  g$t$18850$Uaprr))))
                            (g$syntax-dispatch$16210$Uaprr
                              g$t$18850$Uaprr
                              '(any . each-any)))))
                        g$spec$18849$Uaprr))))
                  (g$add-imports!$18837$Uaprr
                    (case-lambda
                      ((g$imp$18841$Uaprr g$h$18842$Uaprr)
                       ((case-lambda
                          ((g$subst$18843$Uaprr)
                           (g$for-each$11723$Uaprr
                             (case-lambda
                               ((g$x$18844$Uaprr)
                                ((case-lambda
                                   ((g$name$18845$Uaprr
                                      g$label$18846$Uaprr)
                                    ((case-lambda
                                       ((g$t$18847$Uaprr)
                                        (if g$t$18847$Uaprr
                                          ((case-lambda
                                             ((g$l$18848$Uaprr)
                                              (if (not (eq? g$l$18848$Uaprr
                                                            g$label$18846$Uaprr))
                                                (g$dup-error$18828$Uaprr
                                                  g$name$18845$Uaprr)
                                                (void))))
                                           g$t$18847$Uaprr)
                                          (g$hashtable-set!$12570$Uaprr
                                            g$h$18842$Uaprr
                                            g$name$18845$Uaprr
                                            g$label$18846$Uaprr))))
                                     (g$hashtable-ref$12569$Uaprr
                                       g$h$18842$Uaprr
                                       g$name$18845$Uaprr
                                       '#f))))
                                 (car g$x$18844$Uaprr)
                                 (cdr g$x$18844$Uaprr))))
                             g$subst$18843$Uaprr)))
                        (g$get-import$18836$Uaprr
                          g$imp$18841$Uaprr))))))
          ((letrec ((g$f$18838$Uaprr
                      (case-lambda
                        ((g$imp*$18839$Uaprr g$h$18840$Uaprr)
                         (if (null? g$imp*$18839$Uaprr)
                           (hashtable-entries g$h$18840$Uaprr)
                           (begin
                             (g$add-imports!$18837$Uaprr
                               (car g$imp*$18839$Uaprr)
                               g$h$18840$Uaprr)
                             (g$f$18838$Uaprr
                               (cdr g$imp*$18839$Uaprr)
                               g$h$18840$Uaprr)))))))
             g$f$18838$Uaprr)
           g$imp*$18826$Uaprr
           (g$make-eq-hashtable$12566$Uaprr))))))
   (g$make-top-rib$16263$Uaprr
     g$make-top-rib$19857$Uaprr
     (case-lambda
       ((g$names$19088$Uaprr g$labels$19089$Uaprr)
        ((case-lambda
           ((g$rib$19090$Uaprr)
            (begin
              (g$vector-for-each$12527$Uaprr
                (case-lambda
                  ((g$name$19091$Uaprr g$label$19092$Uaprr)
                   (begin
                     (if (not (g$symbol?$12465$Uaprr
                                g$name$19091$Uaprr))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$19091$Uaprr)
                       (void))
                     (g$extend-rib/nc!$15674$Uaprr
                       g$rib$19090$Uaprr
                       (g$make-stx$15685$Uaprr
                         g$name$19091$Uaprr
                         g$top-mark*$15645$Uaprr
                         '()
                         '())
                       g$label$19092$Uaprr))))
                g$names$19088$Uaprr
                g$labels$19089$Uaprr)
              g$rib$19090$Uaprr)))
         (g$make-cache-rib$15671$Uaprr)))))
   (g$make-collector$16264$Uaprr
     g$make-collector$19858$Uaprr
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$19093$Uaprr)
            (case-lambda
              (() g$ls$19093$Uaprr)
              ((g$x$19094$Uaprr)
               (set! g$ls$19093$Uaprr
                 (g$set-cons$15642$Uaprr
                   g$x$19094$Uaprr
                   g$ls$19093$Uaprr))))))
         '()))))
   (g$inv-collector$16265$Uaprr
     g$inv-collector$19859$Uaprr
     (g$make-parameter$14574$Uaprr
       (case-lambda
         (g$args$19095$Uaprr
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$19096$Uaprr)
          (begin
            (if (not (g$procedure?$12467$Uaprr g$x$19096$Uaprr))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$19096$Uaprr)
              (void))
            g$x$19096$Uaprr)))))
   (g$vis-collector$16266$Uaprr
     g$vis-collector$19860$Uaprr
     (g$make-parameter$14574$Uaprr
       (case-lambda
         (g$args$19097$Uaprr
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$19098$Uaprr)
          (begin
            (if (not (g$procedure?$12467$Uaprr g$x$19098$Uaprr))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$19098$Uaprr)
              (void))
            g$x$19098$Uaprr)))))
   (g$imp-collector$16267$Uaprr
     g$imp-collector$19861$Uaprr
     (g$make-parameter$14574$Uaprr
       (case-lambda
         (g$args$19099$Uaprr
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$19100$Uaprr)
          (begin
            (if (not (g$procedure?$12467$Uaprr g$x$19100$Uaprr))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$19100$Uaprr)
              (void))
            g$x$19100$Uaprr)))))
   (g$chi-library-internal$16268$Uaprr
     g$chi-library-internal$19862$Uaprr
     (case-lambda
       ((g$e*$19101$Uaprr g$rib$19102$Uaprr g$mix?$19103$Uaprr)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$16257$Uaprr
               g$e*$19101$Uaprr
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$19102$Uaprr
               g$mix?$19103$Uaprr
               '#t)))
          (case-lambda
            ((g$e*$19112$Uaprr
               g$r$19113$Uaprr
               g$mr$19114$Uaprr
               g$lex*$19115$Uaprr
               g$rhs*$19116$Uaprr
               g$mod**$19117$Uaprr
               g$_kwd*$19118$Uaprr
               g$exp*$19119$Uaprr)
             ((case-lambda
                ((g$exp*$19120$Uaprr
                   g$_kwd*$19121$Uaprr
                   g$mod**$19122$Uaprr
                   g$rhs*$19123$Uaprr
                   g$lex*$19124$Uaprr
                   g$mr$19125$Uaprr
                   g$r$19126$Uaprr
                   g$e*$19127$Uaprr)
                 (values
                   (append
                     (apply
                       append
                       (g$reverse$12473$Uaprr g$mod**$19122$Uaprr))
                     g$e*$19127$Uaprr)
                   g$r$19126$Uaprr
                   g$mr$19125$Uaprr
                   (g$reverse$12473$Uaprr g$lex*$19124$Uaprr)
                   (g$reverse$12473$Uaprr g$rhs*$19123$Uaprr)
                   g$exp*$19120$Uaprr)))
              g$exp*$19119$Uaprr
              g$_kwd*$19118$Uaprr
              g$mod**$19117$Uaprr
              g$rhs*$19116$Uaprr
              g$lex*$19115$Uaprr
              g$mr$19114$Uaprr
              g$r$19113$Uaprr
              g$e*$19112$Uaprr)))))))
   (g$chi-interaction-expr$16269$Uaprr
     g$chi-interaction-expr$19863$Uaprr
     (case-lambda
       ((g$e$19128$Uaprr g$rib$19129$Uaprr g$r$19130$Uaprr)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$16257$Uaprr
               (list g$e$19128$Uaprr)
               g$r$19130$Uaprr
               g$r$19130$Uaprr
               '()
               '()
               '()
               '()
               '()
               g$rib$19129$Uaprr
               '#t
               '#f)))
          (case-lambda
            ((g$e*$19139$Uaprr
               g$r$19140$Uaprr
               g$mr$19141$Uaprr
               g$lex*$19142$Uaprr
               g$rhs*$19143$Uaprr
               g$mod**$19144$Uaprr
               g$_kwd*$19145$Uaprr
               g$_exp*$19146$Uaprr)
             ((case-lambda
                ((g$_exp*$19147$Uaprr
                   g$_kwd*$19148$Uaprr
                   g$mod**$19149$Uaprr
                   g$rhs*$19150$Uaprr
                   g$lex*$19151$Uaprr
                   g$mr$19152$Uaprr
                   g$r$19153$Uaprr
                   g$e*$19154$Uaprr)
                 ((case-lambda
                    ((g$e*$19155$Uaprr)
                     ((case-lambda
                        ((g$e$19156$Uaprr)
                         (values g$e$19156$Uaprr g$r$19153$Uaprr)))
                      (if (null? g$e*$19155$Uaprr)
                        (g$build-void$15638$Uaprr)
                        (if (null? (cdr g$e*$19155$Uaprr))
                          (car g$e*$19155$Uaprr)
                          (g$build-sequence$15637$Uaprr
                            '#f
                            g$e*$19155$Uaprr))))))
                  (g$expand-interaction-rhs*/init*$16235$Uaprr
                    (g$reverse$12473$Uaprr g$lex*$19151$Uaprr)
                    (g$reverse$12473$Uaprr g$rhs*$19150$Uaprr)
                    (append
                      (apply
                        append
                        (g$reverse$12473$Uaprr g$mod**$19149$Uaprr))
                      g$e*$19154$Uaprr)
                    g$r$19153$Uaprr
                    g$mr$19152$Uaprr))))
              g$_exp*$19146$Uaprr
              g$_kwd*$19145$Uaprr
              g$mod**$19144$Uaprr
              g$rhs*$19143$Uaprr
              g$lex*$19142$Uaprr
              g$mr$19141$Uaprr
              g$r$19140$Uaprr
              g$e*$19139$Uaprr)))))))
   (g$library-body-expander$16270$Uaprr
     g$library-body-expander$19864$Uaprr
     (case-lambda
       ((g$name$19157$Uaprr
          g$main-exp*$19158$Uaprr
          g$imp*$19159$Uaprr
          g$b*$19160$Uaprr
          g$mix?$19161$Uaprr)
        (letrec* ((g$itc$19162$Uaprr (g$make-collector$16264$Uaprr)))
          ((case-lambda
             ((g$imp-collector$19167$Uaprr
                g$top-level-context$19168$Uaprr
                g$imp-collector$19169$Uaprr
                g$top-level-context$19170$Uaprr)
              ((case-lambda
                 ((g$swap$19171$Uaprr)
                  (dynamic-wind
                    g$swap$19171$Uaprr
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$16262$Uaprr
                              g$imp*$19159$Uaprr)))
                         (case-lambda
                           ((g$subst-names$19174$Uaprr
                              g$subst-labels$19175$Uaprr)
                            ((case-lambda
                               ((g$subst-labels$19176$Uaprr
                                  g$subst-names$19177$Uaprr)
                                ((case-lambda
                                   ((g$rib$19178$Uaprr)
                                    (letrec* ((g$wrap$19179$Uaprr
                                                (case-lambda
                                                  ((g$x$19241$Uaprr)
                                                   (g$make-stx$15685$Uaprr
                                                     g$x$19241$Uaprr
                                                     g$top-mark*$15645$Uaprr
                                                     (list
                                                       g$rib$19178$Uaprr)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$19180$Uaprr
                                            g$main-exp*$19181$Uaprr
                                            g$rtc$19182$Uaprr
                                            g$vtc$19183$Uaprr)
                                          ((case-lambda
                                             ((g$inv-collector$19188$Uaprr
                                                g$vis-collector$19189$Uaprr
                                                g$inv-collector$19190$Uaprr
                                                g$vis-collector$19191$Uaprr)
                                              ((case-lambda
                                                 ((g$swap$19192$Uaprr)
                                                  (dynamic-wind
                                                    g$swap$19192$Uaprr
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$16268$Uaprr
                                                              g$b*$19180$Uaprr
                                                              g$rib$19178$Uaprr
                                                              g$mix?$19161$Uaprr)))
                                                         (case-lambda
                                                           ((g$init*$19199$Uaprr
                                                              g$r$19200$Uaprr
                                                              g$mr$19201$Uaprr
                                                              g$lex*$19202$Uaprr
                                                              g$rhs*$19203$Uaprr
                                                              g$internal-exp*$19204$Uaprr)
                                                            ((case-lambda
                                                               ((g$internal-exp*$19205$Uaprr
                                                                  g$rhs*$19206$Uaprr
                                                                  g$lex*$19207$Uaprr
                                                                  g$mr$19208$Uaprr
                                                                  g$r$19209$Uaprr
                                                                  g$init*$19210$Uaprr)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$16259$Uaprr
                                                                       (append
                                                                         g$main-exp*$19181$Uaprr
                                                                         g$internal-exp*$19205$Uaprr))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$19213$Uaprr
                                                                       g$exp-id*$19214$Uaprr)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$19215$Uaprr
                                                                           g$exp-name*$19216$Uaprr)
                                                                         (begin
                                                                           (g$seal-rib!$15676$Uaprr
                                                                             g$rib$19178$Uaprr)
                                                                           ((case-lambda
                                                                              ((g$init*$19217$Uaprr)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$19218$Uaprr)
                                                                                   (begin
                                                                                     (g$unseal-rib!$15677$Uaprr
                                                                                       g$rib$19178$Uaprr)
                                                                                     ((case-lambda
                                                                                        ((g$loc*$19219$Uaprr
                                                                                           g$export-subst$19220$Uaprr)
                                                                                         (letrec* ((g$errstr$19221$Uaprr
                                                                                                     '"attempt to export mutated variable"))
                                                                                           (call-with-values
                                                                                             (case-lambda
                                                                                               (()
                                                                                                (g$make-export-env/macros$16318$Uaprr
                                                                                                  g$lex*$19207$Uaprr
                                                                                                  g$loc*$19219$Uaprr
                                                                                                  g$r$19209$Uaprr)))
                                                                                             (case-lambda
                                                                                               ((g$export-env$19225$Uaprr
                                                                                                  g$global*$19226$Uaprr
                                                                                                  g$macro*$19227$Uaprr)
                                                                                                ((case-lambda
                                                                                                   ((g$macro*$19228$Uaprr
                                                                                                      g$global*$19229$Uaprr
                                                                                                      g$export-env$19230$Uaprr)
                                                                                                    (begin
                                                                                                      (g$for-each$11723$Uaprr
                                                                                                        (case-lambda
                                                                                                          ((g$s$19231$Uaprr)
                                                                                                           ((case-lambda
                                                                                                              ((g$name$19232$Uaprr
                                                                                                                 g$label$19233$Uaprr)
                                                                                                               ((case-lambda
                                                                                                                  ((g$p$19234$Uaprr)
                                                                                                                   (if g$p$19234$Uaprr
                                                                                                                     ((case-lambda
                                                                                                                        ((g$b$19235$Uaprr)
                                                                                                                         ((case-lambda
                                                                                                                            ((g$type$19236$Uaprr)
                                                                                                                             (if (eq? g$type$19236$Uaprr
                                                                                                                                      'mutable)
                                                                                                                               (g$syntax-violation$16329$Uaprr
                                                                                                                                 'export
                                                                                                                                 g$errstr$19221$Uaprr
                                                                                                                                 g$name$19232$Uaprr)
                                                                                                                               (void))))
                                                                                                                          (car g$b$19235$Uaprr))))
                                                                                                                      (cdr g$p$19234$Uaprr))
                                                                                                                     (void))))
                                                                                                                (g$assq$11710$Uaprr
                                                                                                                  g$label$19233$Uaprr
                                                                                                                  g$export-env$19230$Uaprr))))
                                                                                                            (car g$s$19231$Uaprr)
                                                                                                            (cdr g$s$19231$Uaprr))))
                                                                                                        g$export-subst$19220$Uaprr)
                                                                                                      ((case-lambda
                                                                                                         ((g$invoke-body$19237$Uaprr
                                                                                                            g$invoke-definitions$19238$Uaprr)
                                                                                                          (values
                                                                                                            (g$itc$19162$Uaprr)
                                                                                                            (g$rtc$19182$Uaprr)
                                                                                                            (g$vtc$19183$Uaprr)
                                                                                                            (g$build-sequence$15637$Uaprr
                                                                                                              '#f
                                                                                                              (append
                                                                                                                g$invoke-definitions$19238$Uaprr
                                                                                                                (list
                                                                                                                  g$invoke-body$19237$Uaprr)))
                                                                                                            g$macro*$19228$Uaprr
                                                                                                            g$export-subst$19220$Uaprr
                                                                                                            g$export-env$19230$Uaprr)))
                                                                                                       (g$build-library-letrec*$15641$Uaprr
                                                                                                         '#f
                                                                                                         g$name$19157$Uaprr
                                                                                                         g$lex*$19207$Uaprr
                                                                                                         g$loc*$19219$Uaprr
                                                                                                         g$rhs*$19218$Uaprr
                                                                                                         (if (null?
                                                                                                               g$init*$19217$Uaprr)
                                                                                                           (g$build-void$15638$Uaprr)
                                                                                                           (g$build-sequence$15637$Uaprr
                                                                                                             '#f
                                                                                                             g$init*$19217$Uaprr)))
                                                                                                       (g$map$11722$Uaprr
                                                                                                         g$build-global-define$15633$Uaprr
                                                                                                         (g$map$11722$Uaprr
                                                                                                           cdr
                                                                                                           g$global*$19229$Uaprr))))))
                                                                                                 g$macro*$19227$Uaprr
                                                                                                 g$global*$19226$Uaprr
                                                                                                 g$export-env$19225$Uaprr)))))))
                                                                                      (g$map$11722$Uaprr
                                                                                        g$gen-global$15648$Uaprr
                                                                                        g$lex*$19207$Uaprr)
                                                                                      (g$make-export-subst$16317$Uaprr
                                                                                        g$exp-name*$19216$Uaprr
                                                                                        g$exp-id*$19215$Uaprr)))))
                                                                                (g$chi-rhs*$16236$Uaprr
                                                                                  g$rhs*$19206$Uaprr
                                                                                  g$r$19209$Uaprr
                                                                                  g$mr$19208$Uaprr))))
                                                                            (g$chi-expr*$16226$Uaprr
                                                                              g$init*$19210$Uaprr
                                                                              g$r$19209$Uaprr
                                                                              g$mr$19208$Uaprr)))))
                                                                      g$exp-id*$19214$Uaprr
                                                                      g$exp-name*$19213$Uaprr))))))
                                                             g$internal-exp*$19204$Uaprr
                                                             g$rhs*$19203$Uaprr
                                                             g$lex*$19202$Uaprr
                                                             g$mr$19201$Uaprr
                                                             g$r$19200$Uaprr
                                                             g$init*$19199$Uaprr))))))
                                                    g$swap$19192$Uaprr)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$19239$Uaprr)
                                                        (begin
                                                          (g$inv-collector$19188$Uaprr
                                                            g$inv-collector$19190$Uaprr)
                                                          (set! g$inv-collector$19190$Uaprr
                                                            g$t$19239$Uaprr))))
                                                     (g$inv-collector$19188$Uaprr))
                                                    ((case-lambda
                                                       ((g$t$19240$Uaprr)
                                                        (begin
                                                          (g$vis-collector$19189$Uaprr
                                                            g$vis-collector$19191$Uaprr)
                                                          (set! g$vis-collector$19191$Uaprr
                                                            g$t$19240$Uaprr))))
                                                     (g$vis-collector$19189$Uaprr))))))))
                                           g$inv-collector$16265$Uaprr
                                           g$vis-collector$16266$Uaprr
                                           g$rtc$19182$Uaprr
                                           g$vtc$19183$Uaprr)))
                                       (g$map$11722$Uaprr
                                         g$wrap$19179$Uaprr
                                         g$b*$19160$Uaprr)
                                       (g$map$11722$Uaprr
                                         g$wrap$19179$Uaprr
                                         g$main-exp*$19158$Uaprr)
                                       (g$make-collector$16264$Uaprr)
                                       (g$make-collector$16264$Uaprr)))))
                                 (g$make-top-rib$16263$Uaprr
                                   g$subst-names$19177$Uaprr
                                   g$subst-labels$19176$Uaprr))))
                             g$subst-labels$19175$Uaprr
                             g$subst-names$19174$Uaprr))))))
                    g$swap$19171$Uaprr)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$19242$Uaprr)
                        (begin
                          (g$imp-collector$19167$Uaprr
                            g$imp-collector$19169$Uaprr)
                          (set! g$imp-collector$19169$Uaprr
                            g$t$19242$Uaprr))))
                     (g$imp-collector$19167$Uaprr))
                    ((case-lambda
                       ((g$t$19243$Uaprr)
                        (begin
                          (g$top-level-context$19168$Uaprr
                            g$top-level-context$19170$Uaprr)
                          (set! g$top-level-context$19170$Uaprr
                            g$t$19243$Uaprr))))
                     (g$top-level-context$19168$Uaprr))))))))
           g$imp-collector$16267$Uaprr
           g$top-level-context$16337$Uaprr
           g$itc$19162$Uaprr
           '#f)))))
   (g$core-library-expander$16271$Uaprr
     g$core-library-expander$19865$Uaprr
     (case-lambda
       ((g$e$19244$Uaprr g$verify-name$19245$Uaprr)
        (call-with-values
          (case-lambda
            (() (g$parse-library$16261$Uaprr g$e$19244$Uaprr)))
          (case-lambda
            ((g$name*$19250$Uaprr
               g$exp*$19251$Uaprr
               g$imp*$19252$Uaprr
               g$b*$19253$Uaprr)
             ((case-lambda
                ((g$b*$19254$Uaprr
                   g$imp*$19255$Uaprr
                   g$exp*$19256$Uaprr
                   g$name*$19257$Uaprr)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$parse-library-name$16260$Uaprr
                        g$name*$19257$Uaprr)))
                   (case-lambda
                     ((g$name$19260$Uaprr g$ver$19261$Uaprr)
                      ((case-lambda
                         ((g$ver$19262$Uaprr g$name$19263$Uaprr)
                          (begin
                            (g$verify-name$19245$Uaprr
                              g$name$19263$Uaprr)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$16270$Uaprr
                                   g$name$19263$Uaprr
                                   g$exp*$19256$Uaprr
                                   g$imp*$19255$Uaprr
                                   g$b*$19254$Uaprr
                                   '#f)))
                              (case-lambda
                                ((g$imp*$19271$Uaprr
                                   g$invoke-req*$19272$Uaprr
                                   g$visit-req*$19273$Uaprr
                                   g$invoke-code$19274$Uaprr
                                   g$visit-code$19275$Uaprr
                                   g$export-subst$19276$Uaprr
                                   g$export-env$19277$Uaprr)
                                 ((case-lambda
                                    ((g$export-env$19278$Uaprr
                                       g$export-subst$19279$Uaprr
                                       g$visit-code$19280$Uaprr
                                       g$invoke-code$19281$Uaprr
                                       g$visit-req*$19282$Uaprr
                                       g$invoke-req*$19283$Uaprr
                                       g$imp*$19284$Uaprr)
                                     (values
                                       g$name$19263$Uaprr
                                       g$ver$19262$Uaprr
                                       g$imp*$19284$Uaprr
                                       g$invoke-req*$19283$Uaprr
                                       g$visit-req*$19282$Uaprr
                                       g$invoke-code$19281$Uaprr
                                       g$visit-code$19280$Uaprr
                                       g$export-subst$19279$Uaprr
                                       g$export-env$19278$Uaprr)))
                                  g$export-env$19277$Uaprr
                                  g$export-subst$19276$Uaprr
                                  g$visit-code$19275$Uaprr
                                  g$invoke-code$19274$Uaprr
                                  g$visit-req*$19273$Uaprr
                                  g$invoke-req*$19272$Uaprr
                                  g$imp*$19271$Uaprr)))))))
                       g$ver$19261$Uaprr
                       g$name$19260$Uaprr))))))
              g$b*$19253$Uaprr
              g$imp*$19252$Uaprr
              g$exp*$19251$Uaprr
              g$name*$19250$Uaprr)))))))
   (g$parse-top-level-program$16272$Uaprr
     g$parse-top-level-program$19866$Uaprr
     (case-lambda
       ((g$e*$19285$Uaprr)
        ((case-lambda
           ((g$t$19286$Uaprr)
            ((case-lambda
               ((g$ls/false$19287$Uaprr)
                (if (if g$ls/false$19287$Uaprr
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$19288$Uaprr
                               g$imp*$19289$Uaprr
                               g$b*$19290$Uaprr)
                             (eq? (g$syntax->datum$16332$Uaprr
                                    g$import$19288$Uaprr)
                                  'import)))
                          g$ls/false$19287$Uaprr))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$19291$Uaprr
                         g$imp*$19292$Uaprr
                         g$b*$19293$Uaprr)
                       (values g$imp*$19292$Uaprr g$b*$19293$Uaprr)))
                    g$ls/false$19287$Uaprr)
                  ((case-lambda
                     ((g$t$19294$Uaprr)
                      ((case-lambda
                         ((g$ls/false$19295$Uaprr)
                          (if (if g$ls/false$19295$Uaprr
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$19296$Uaprr
                                         g$x$19297$Uaprr
                                         g$y$19298$Uaprr)
                                       (eq? (g$syntax->datum$16332$Uaprr
                                              g$import$19296$Uaprr)
                                            'import)))
                                    g$ls/false$19295$Uaprr))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$19299$Uaprr
                                   g$x$19300$Uaprr
                                   g$y$19301$Uaprr)
                                 (g$syntax-violation$16329$Uaprr
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$15709$Uaprr
                                     g$e*$19285$Uaprr))))
                              g$ls/false$19295$Uaprr)
                            ((case-lambda
                               ((g$t$19302$Uaprr)
                                ((case-lambda
                                   ((g$ls/false$19303$Uaprr)
                                    (if g$ls/false$19303$Uaprr
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$19303$Uaprr)
                                      (g$syntax-violation$16329$Uaprr
                                        '#f
                                        '"invalid syntax"
                                        g$t$19302$Uaprr))))
                                 (g$syntax-dispatch$16210$Uaprr
                                   g$t$19302$Uaprr
                                   '_))))
                             g$t$19294$Uaprr))))
                       (g$syntax-dispatch$16210$Uaprr
                         g$t$19294$Uaprr
                         '((any . any) . any)))))
                   g$t$19286$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$19286$Uaprr
               '((any . each-any) . each-any)))))
         g$e*$19285$Uaprr))))
   (g$top-level-expander$16273$Uaprr
     g$top-level-expander$19867$Uaprr
     (case-lambda
       ((g$e*$19304$Uaprr)
        (call-with-values
          (case-lambda
            (()
             (g$parse-top-level-program$16272$Uaprr g$e*$19304$Uaprr)))
          (case-lambda
            ((g$imp*$19307$Uaprr g$b*$19308$Uaprr)
             ((case-lambda
                ((g$b*$19309$Uaprr g$imp*$19310$Uaprr)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$16270$Uaprr
                        '()
                        '()
                        g$imp*$19310$Uaprr
                        g$b*$19309$Uaprr
                        '#t)))
                   (case-lambda
                     ((g$imp*$19318$Uaprr
                        g$invoke-req*$19319$Uaprr
                        g$visit-req*$19320$Uaprr
                        g$invoke-code$19321$Uaprr
                        g$visit-code$19322$Uaprr
                        g$export-subst$19323$Uaprr
                        g$export-env$19324$Uaprr)
                      ((case-lambda
                         ((g$export-env$19325$Uaprr
                            g$export-subst$19326$Uaprr
                            g$visit-code$19327$Uaprr
                            g$invoke-code$19328$Uaprr
                            g$visit-req*$19329$Uaprr
                            g$invoke-req*$19330$Uaprr
                            g$imp*$19331$Uaprr)
                          (values
                            g$invoke-req*$19330$Uaprr
                            g$invoke-code$19328$Uaprr)))
                       g$export-env$19324$Uaprr
                       g$export-subst$19323$Uaprr
                       g$visit-code$19322$Uaprr
                       g$invoke-code$19321$Uaprr
                       g$visit-req*$19320$Uaprr
                       g$invoke-req*$19319$Uaprr
                       g$imp*$19318$Uaprr))))))
              g$b*$19308$Uaprr
              g$imp*$19307$Uaprr)))))))
   (g$8163$16274$Uaprr
     g$8163$19868$Uaprr
     (make-record-type-descriptor
       'env
       '#f
       'g$8166$Uaprr
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$8165$16275$Uaprr g$8165$19869$Uaprr '#f)
   (g$8164$16276$Uaprr
     g$8164$19870$Uaprr
     (make-record-constructor-descriptor
       g$8163$16274$Uaprr
       '#f
       g$8165$16275$Uaprr))
   (g$env?$16279$Uaprr
     g$env?$19871$Uaprr
     (record-predicate g$8163$16274$Uaprr))
   (g$make-env$16280$Uaprr
     g$make-env$19872$Uaprr
     (record-constructor g$8164$16276$Uaprr))
   (g$env-names$16281$Uaprr
     g$env-names$19873$Uaprr
     (record-accessor g$8163$16274$Uaprr '0))
   (g$env-labels$16282$Uaprr
     g$env-labels$19874$Uaprr
     (record-accessor g$8163$16274$Uaprr '1))
   (g$env-itc$16283$Uaprr
     g$env-itc$19875$Uaprr
     (record-accessor g$8163$16274$Uaprr '2))
   (g$set-env-names!$16284$Uaprr
     g$set-env-names!$19876$Uaprr
     (record-mutator g$8163$16274$Uaprr '0))
   (g$set-env-labels!$16285$Uaprr
     g$set-env-labels!$19877$Uaprr
     (record-mutator g$8163$16274$Uaprr '1))
   (g$set-env-itc!$16286$Uaprr
     g$set-env-itc!$19878$Uaprr
     (record-mutator g$8163$16274$Uaprr '2))
   (g$rp$16287$Uaprr
     g$rp$19879$Uaprr
     (make-record-printer
       'env
       (case-lambda
         ((g$x$19332$Uaprr g$p$19333$Uaprr g$wr$19334$Uaprr)
          (display '"#<environment>" g$p$19333$Uaprr)))))
   (g$8180$16288$Uaprr
     g$8180$19880$Uaprr
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$8183$Uaprr
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$8182$16289$Uaprr g$8182$19881$Uaprr '#f)
   (g$8181$16290$Uaprr
     g$8181$19882$Uaprr
     (make-record-constructor-descriptor
       g$8180$16288$Uaprr
       '#f
       g$8182$16289$Uaprr))
   (g$interaction-env?$16293$Uaprr
     g$interaction-env?$19883$Uaprr
     (record-predicate g$8180$16288$Uaprr))
   (g$make-interaction-env$16294$Uaprr
     g$make-interaction-env$19884$Uaprr
     (record-constructor g$8181$16290$Uaprr))
   (g$interaction-env-rib$16295$Uaprr
     g$interaction-env-rib$19885$Uaprr
     (record-accessor g$8180$16288$Uaprr '0))
   (g$interaction-env-r$16296$Uaprr
     g$interaction-env-r$19886$Uaprr
     (record-accessor g$8180$16288$Uaprr '1))
   (g$interaction-env-locs$16297$Uaprr
     g$interaction-env-locs$19887$Uaprr
     (record-accessor g$8180$16288$Uaprr '2))
   (g$set-interaction-env-rib!$16298$Uaprr
     g$set-interaction-env-rib!$19888$Uaprr
     (record-mutator g$8180$16288$Uaprr '0))
   (g$set-interaction-env-r!$16299$Uaprr
     g$set-interaction-env-r!$19889$Uaprr
     (record-mutator g$8180$16288$Uaprr '1))
   (g$set-interaction-env-locs!$16300$Uaprr
     g$set-interaction-env-locs!$19890$Uaprr
     (record-mutator g$8180$16288$Uaprr '2))
   (g$rp$16301$Uaprr
     g$rp$19891$Uaprr
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$19335$Uaprr g$p$19336$Uaprr g$wr$19337$Uaprr)
          (display '"#<environment>" g$p$19336$Uaprr)))))
   (g$interaction-environment-symbols$16302$Uaprr
     g$interaction-environment-symbols$19892$Uaprr
     (case-lambda
       (()
        (g$environment-symbols$16306$Uaprr
          (g$interaction-environment$16336$Uaprr)))))
   (g$environment-bindings$16303$Uaprr
     g$environment-bindings$19893$Uaprr
     (case-lambda
       ((g$e$19338$Uaprr)
        (vector->list
          (g$vector-map$12526$Uaprr
            (case-lambda
              ((g$name$19339$Uaprr g$label$19340$Uaprr)
               (g$parse-binding$16304$Uaprr
                 (cons
                   g$name$19339$Uaprr
                   (g$imported-label->binding$15417$Uaprr
                     g$label$19340$Uaprr)))))
            (g$env-names$16281$Uaprr g$e$19338$Uaprr)
            (g$env-labels$16282$Uaprr g$e$19338$Uaprr))))))
   (g$parse-binding$16304$Uaprr
     g$parse-binding$19894$Uaprr
     (case-lambda
       ((g$b$19341$Uaprr)
        (cons
          (car g$b$19341$Uaprr)
          ((case-lambda
             ((g$t$19342$Uaprr)
              (if (g$memv$11715$Uaprr
                    g$t$19342$Uaprr
                    '(core-prim global))
                'procedure
                (if (g$memv$11715$Uaprr
                      g$t$19342$Uaprr
                      '(core-macro macro global-macro))
                  'syntax
                  (if (eqv? g$t$19342$Uaprr '$core-rtd)
                    'record
                    (if (eq? (car g$b$19341$Uaprr)
                             (g$cadr$12475$Uaprr g$b$19341$Uaprr))
                      'syntax
                      'unknown))))))
           (g$cadr$12475$Uaprr g$b$19341$Uaprr))))))
   (g$environment?$16305$Uaprr
     g$environment?$19895$Uaprr
     (case-lambda
       ((g$x$19343$Uaprr)
        ((case-lambda
           ((g$t$19344$Uaprr)
            (if g$t$19344$Uaprr
              g$t$19344$Uaprr
              (begin
                '#f
                (g$interaction-env?$16293$Uaprr g$x$19343$Uaprr)))))
         (g$env?$16279$Uaprr g$x$19343$Uaprr)))))
   (g$environment-symbols$16306$Uaprr
     g$environment-symbols$19896$Uaprr
     (case-lambda
       ((g$x$19345$Uaprr)
        (if (g$env?$16279$Uaprr g$x$19345$Uaprr)
          (vector->list (g$env-names$16281$Uaprr g$x$19345$Uaprr))
          (if (g$interaction-env?$16293$Uaprr g$x$19345$Uaprr)
            (g$map$11722$Uaprr
              values
              (g$rib-sym*$15660$Uaprr
                (g$interaction-env-rib$16295$Uaprr g$x$19345$Uaprr)))
            (assertion-violation
              'environment-symbols
              '"not an environment"
              g$x$19345$Uaprr))))))
   (g$environment$16307$Uaprr
     g$environment$19897$Uaprr
     (case-lambda
       (g$imp*$19346$Uaprr
        ((case-lambda
           ((g$itc$19347$Uaprr)
            ((case-lambda
               ((g$imp-collector$19350$Uaprr
                  g$imp-collector$19351$Uaprr)
                ((case-lambda
                   ((g$swap$19352$Uaprr)
                    (dynamic-wind
                      g$swap$19352$Uaprr
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$16262$Uaprr
                                g$imp*$19346$Uaprr)))
                           (case-lambda
                             ((g$subst-names$19355$Uaprr
                                g$subst-labels$19356$Uaprr)
                              ((case-lambda
                                 ((g$subst-labels$19357$Uaprr
                                    g$subst-names$19358$Uaprr)
                                  (g$make-env$16280$Uaprr
                                    g$subst-names$19358$Uaprr
                                    g$subst-labels$19357$Uaprr
                                    g$itc$19347$Uaprr)))
                               g$subst-labels$19356$Uaprr
                               g$subst-names$19355$Uaprr))))))
                      g$swap$19352$Uaprr)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$19359$Uaprr)
                        (begin
                          (g$imp-collector$19350$Uaprr
                            g$imp-collector$19351$Uaprr)
                          (set! g$imp-collector$19351$Uaprr
                            g$t$19359$Uaprr))))
                     (g$imp-collector$19350$Uaprr)))))))
             g$imp-collector$16267$Uaprr
             g$itc$19347$Uaprr)))
         (g$make-collector$16264$Uaprr)))))
   (g$null-environment$16308$Uaprr
     g$null-environment$19898$Uaprr
     (case-lambda
       ((g$n$19360$Uaprr)
        (begin
          (if (not (eqv? g$n$19360$Uaprr '5))
            (assertion-violation
              'null-environment
              '"not 5"
              g$n$19360$Uaprr)
            (void))
          (g$environment$16307$Uaprr '(psyntax null-environment-5))))))
   (g$scheme-report-environment$16309$Uaprr
     g$scheme-report-environment$19899$Uaprr
     (case-lambda
       ((g$n$19361$Uaprr)
        (begin
          (if (not (eqv? g$n$19361$Uaprr '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$19361$Uaprr)
            (void))
          (g$environment$16307$Uaprr
            '(psyntax scheme-report-environment-5))))))
   (g$expand$16310$Uaprr
     g$expand$19900$Uaprr
     (case-lambda
       ((g$x$19362$Uaprr g$env$19363$Uaprr)
        (if (g$env?$16279$Uaprr g$env$19363$Uaprr)
          ((case-lambda
             ((g$rib$19364$Uaprr)
              ((case-lambda
                 ((g$x$19365$Uaprr
                    g$itc$19366$Uaprr
                    g$rtc$19367$Uaprr
                    g$vtc$19368$Uaprr)
                  ((case-lambda
                     ((g$x$19369$Uaprr)
                      (begin
                        (g$seal-rib!$15676$Uaprr g$rib$19364$Uaprr)
                        (values g$x$19369$Uaprr (g$rtc$19367$Uaprr)))))
                   ((case-lambda
                      ((g$top-level-context$19378$Uaprr
                         g$inv-collector$19379$Uaprr
                         g$vis-collector$19380$Uaprr
                         g$imp-collector$19381$Uaprr
                         g$top-level-context$19382$Uaprr
                         g$inv-collector$19383$Uaprr
                         g$vis-collector$19384$Uaprr
                         g$imp-collector$19385$Uaprr)
                       ((case-lambda
                          ((g$swap$19386$Uaprr)
                           (dynamic-wind
                             g$swap$19386$Uaprr
                             (case-lambda
                               (()
                                (g$chi-expr$16228$Uaprr
                                  g$x$19365$Uaprr
                                  '()
                                  '())))
                             g$swap$19386$Uaprr)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$19387$Uaprr)
                                 (begin
                                   (g$top-level-context$19378$Uaprr
                                     g$top-level-context$19382$Uaprr)
                                   (set! g$top-level-context$19382$Uaprr
                                     g$t$19387$Uaprr))))
                              (g$top-level-context$19378$Uaprr))
                             ((case-lambda
                                ((g$t$19388$Uaprr)
                                 (begin
                                   (g$inv-collector$19379$Uaprr
                                     g$inv-collector$19383$Uaprr)
                                   (set! g$inv-collector$19383$Uaprr
                                     g$t$19388$Uaprr))))
                              (g$inv-collector$19379$Uaprr))
                             ((case-lambda
                                ((g$t$19389$Uaprr)
                                 (begin
                                   (g$vis-collector$19380$Uaprr
                                     g$vis-collector$19384$Uaprr)
                                   (set! g$vis-collector$19384$Uaprr
                                     g$t$19389$Uaprr))))
                              (g$vis-collector$19380$Uaprr))
                             ((case-lambda
                                ((g$t$19390$Uaprr)
                                 (begin
                                   (g$imp-collector$19381$Uaprr
                                     g$imp-collector$19385$Uaprr)
                                   (set! g$imp-collector$19385$Uaprr
                                     g$t$19390$Uaprr))))
                              (g$imp-collector$19381$Uaprr))))))))
                    g$top-level-context$16337$Uaprr
                    g$inv-collector$16265$Uaprr
                    g$vis-collector$16266$Uaprr
                    g$imp-collector$16267$Uaprr
                    '#f
                    g$rtc$19367$Uaprr
                    g$vtc$19368$Uaprr
                    g$itc$19366$Uaprr))))
               (g$make-stx$15685$Uaprr
                 g$x$19362$Uaprr
                 g$top-mark*$15645$Uaprr
                 (list g$rib$19364$Uaprr)
                 '())
               (g$env-itc$16283$Uaprr g$env$19363$Uaprr)
               (g$make-collector$16264$Uaprr)
               (g$make-collector$16264$Uaprr))))
           (g$make-top-rib$16263$Uaprr
             (g$env-names$16281$Uaprr g$env$19363$Uaprr)
             (g$env-labels$16282$Uaprr g$env$19363$Uaprr)))
          (if (g$interaction-env?$16293$Uaprr g$env$19363$Uaprr)
            ((case-lambda
               ((g$rib$19391$Uaprr g$r$19392$Uaprr g$rtc$19393$Uaprr)
                ((case-lambda
                   ((g$x$19394$Uaprr)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$19405$Uaprr
                               g$inv-collector$19406$Uaprr
                               g$vis-collector$19407$Uaprr
                               g$imp-collector$19408$Uaprr
                               g$top-level-context$19409$Uaprr
                               g$inv-collector$19410$Uaprr
                               g$vis-collector$19411$Uaprr
                               g$imp-collector$19412$Uaprr)
                             ((case-lambda
                                ((g$swap$19413$Uaprr)
                                 (dynamic-wind
                                   g$swap$19413$Uaprr
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$16269$Uaprr
                                        g$x$19394$Uaprr
                                        g$rib$19391$Uaprr
                                        g$r$19392$Uaprr)))
                                   g$swap$19413$Uaprr)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$19414$Uaprr)
                                       (begin
                                         (g$top-level-context$19405$Uaprr
                                           g$top-level-context$19409$Uaprr)
                                         (set! g$top-level-context$19409$Uaprr
                                           g$t$19414$Uaprr))))
                                    (g$top-level-context$19405$Uaprr))
                                   ((case-lambda
                                      ((g$t$19415$Uaprr)
                                       (begin
                                         (g$inv-collector$19406$Uaprr
                                           g$inv-collector$19410$Uaprr)
                                         (set! g$inv-collector$19410$Uaprr
                                           g$t$19415$Uaprr))))
                                    (g$inv-collector$19406$Uaprr))
                                   ((case-lambda
                                      ((g$t$19416$Uaprr)
                                       (begin
                                         (g$vis-collector$19407$Uaprr
                                           g$vis-collector$19411$Uaprr)
                                         (set! g$vis-collector$19411$Uaprr
                                           g$t$19416$Uaprr))))
                                    (g$vis-collector$19407$Uaprr))
                                   ((case-lambda
                                      ((g$t$19417$Uaprr)
                                       (begin
                                         (g$imp-collector$19408$Uaprr
                                           g$imp-collector$19412$Uaprr)
                                         (set! g$imp-collector$19412$Uaprr
                                           g$t$19417$Uaprr))))
                                    (g$imp-collector$19408$Uaprr))))))))
                          g$top-level-context$16337$Uaprr
                          g$inv-collector$16265$Uaprr
                          g$vis-collector$16266$Uaprr
                          g$imp-collector$16267$Uaprr
                          g$env$19363$Uaprr
                          g$rtc$19393$Uaprr
                          (g$make-collector$16264$Uaprr)
                          (g$make-collector$16264$Uaprr))))
                      (case-lambda
                        ((g$e$19418$Uaprr g$r^$19419$Uaprr)
                         ((case-lambda
                            ((g$r^$19420$Uaprr g$e$19421$Uaprr)
                             (begin
                               (g$set-interaction-env-r!$16299$Uaprr
                                 g$env$19363$Uaprr
                                 g$r^$19420$Uaprr)
                               (values
                                 g$e$19421$Uaprr
                                 (g$rtc$19393$Uaprr)))))
                          g$r^$19419$Uaprr
                          g$e$19418$Uaprr))))))
                 (g$make-stx$15685$Uaprr
                   g$x$19362$Uaprr
                   g$top-mark*$15645$Uaprr
                   (list g$rib$19391$Uaprr)
                   '()))))
             (g$interaction-env-rib$16295$Uaprr g$env$19363$Uaprr)
             (g$interaction-env-r$16296$Uaprr g$env$19363$Uaprr)
             (g$make-collector$16264$Uaprr))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$19363$Uaprr))))))
   (g$eval$16311$Uaprr
     g$eval$19901$Uaprr
     (case-lambda
       ((g$x$19422$Uaprr g$env$19423$Uaprr)
        (begin
          (if (not (g$environment?$16305$Uaprr g$env$19423$Uaprr))
            (error 'eval '"not an environment" g$env$19423$Uaprr)
            (void))
          (call-with-values
            (case-lambda
              (()
               (g$expand$16310$Uaprr
                 g$x$19422$Uaprr
                 g$env$19423$Uaprr)))
            (case-lambda
              ((g$x$19426$Uaprr g$invoke-req*$19427$Uaprr)
               ((case-lambda
                  ((g$invoke-req*$19428$Uaprr g$x$19429$Uaprr)
                   (begin
                     (g$for-each$11723$Uaprr
                       g$invoke-library$15418$Uaprr
                       g$invoke-req*$19428$Uaprr)
                     (eval-core
                       (g$expanded->core$15151$Uaprr
                         g$x$19429$Uaprr)))))
                g$invoke-req*$19427$Uaprr
                g$x$19426$Uaprr))))))))
   (g$expand->core$16312$Uaprr
     g$expand->core$19902$Uaprr
     (case-lambda
       ((g$x$19430$Uaprr g$env$19431$Uaprr)
        (begin
          (if (not (g$environment?$16305$Uaprr g$env$19431$Uaprr))
            (error 'eval '"not an environment" g$env$19431$Uaprr)
            (void))
          (call-with-values
            (case-lambda
              (()
               (g$expand$16310$Uaprr
                 g$x$19430$Uaprr
                 g$env$19431$Uaprr)))
            (case-lambda
              ((g$x$19434$Uaprr g$invoke-req*$19435$Uaprr)
               ((case-lambda
                  ((g$invoke-req*$19436$Uaprr g$x$19437$Uaprr)
                   (begin
                     (g$for-each$11723$Uaprr
                       g$invoke-library$15418$Uaprr
                       g$invoke-req*$19436$Uaprr)
                     (g$expanded->core$15151$Uaprr g$x$19437$Uaprr))))
                g$invoke-req*$19435$Uaprr
                g$x$19434$Uaprr))))))))
   (g$library-expander$16313$Uaprr
     g$library-expander$19903$Uaprr
     (case-lambda
       ((g$x$19438$Uaprr
          g$filename$19439$Uaprr
          g$verify-name$19440$Uaprr)
        (letrec* ((g$build-visit-code$19441$Uaprr
                    (case-lambda
                      ((g$macro*$19484$Uaprr)
                       (if (null? g$macro*$19484$Uaprr)
                         (g$build-void$15638$Uaprr)
                         (g$build-sequence$15637$Uaprr
                           '#f
                           (g$map$11722$Uaprr
                             (case-lambda
                               ((g$x$19485$Uaprr)
                                ((case-lambda
                                   ((g$loc$19486$Uaprr
                                      g$src$19487$Uaprr)
                                    (list
                                      'set!
                                      g$loc$19486$Uaprr
                                      g$src$19487$Uaprr)))
                                 (car g$x$19485$Uaprr)
                                 (g$cddr$12477$Uaprr g$x$19485$Uaprr))))
                             g$macro*$19484$Uaprr))))))
                  (g$visit!$19442$Uaprr
                    (case-lambda
                      ((g$macro*$19480$Uaprr)
                       (g$for-each$11723$Uaprr
                         (case-lambda
                           ((g$x$19481$Uaprr)
                            ((case-lambda
                               ((g$loc$19482$Uaprr g$proc$19483$Uaprr)
                                (set-symbol-value!
                                  g$loc$19482$Uaprr
                                  g$proc$19483$Uaprr)))
                             (car g$x$19481$Uaprr)
                             (g$cadr$12475$Uaprr g$x$19481$Uaprr))))
                         g$macro*$19480$Uaprr)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$16271$Uaprr
                 g$x$19438$Uaprr
                 g$verify-name$19440$Uaprr)))
            (case-lambda
              ((g$name$19452$Uaprr
                 g$ver$19453$Uaprr
                 g$imp*$19454$Uaprr
                 g$inv*$19455$Uaprr
                 g$vis*$19456$Uaprr
                 g$invoke-code$19457$Uaprr
                 g$macro*$19458$Uaprr
                 g$export-subst$19459$Uaprr
                 g$export-env$19460$Uaprr)
               ((case-lambda
                  ((g$export-env$19461$Uaprr
                     g$export-subst$19462$Uaprr
                     g$macro*$19463$Uaprr
                     g$invoke-code$19464$Uaprr
                     g$vis*$19465$Uaprr
                     g$inv*$19466$Uaprr
                     g$imp*$19467$Uaprr
                     g$ver$19468$Uaprr
                     g$name$19469$Uaprr)
                   ((case-lambda
                      ((g$id$19470$Uaprr
                         g$name$19471$Uaprr
                         g$ver$19472$Uaprr
                         g$imp*$19473$Uaprr
                         g$vis*$19474$Uaprr
                         g$inv*$19475$Uaprr
                         g$visit-proc$19476$Uaprr
                         g$invoke-proc$19477$Uaprr
                         g$visit-code$19478$Uaprr
                         g$invoke-code$19479$Uaprr)
                       (begin
                         (g$install-library$15416$Uaprr
                           g$id$19470$Uaprr
                           g$name$19471$Uaprr
                           g$ver$19472$Uaprr
                           g$imp*$19473$Uaprr
                           g$vis*$19474$Uaprr
                           g$inv*$19475$Uaprr
                           g$export-subst$19462$Uaprr
                           g$export-env$19461$Uaprr
                           g$visit-proc$19476$Uaprr
                           g$invoke-proc$19477$Uaprr
                           g$visit-code$19478$Uaprr
                           g$invoke-code$19479$Uaprr
                           '#t
                           g$filename$19439$Uaprr)
                         (values
                           g$id$19470$Uaprr
                           g$name$19471$Uaprr
                           g$ver$19472$Uaprr
                           g$imp*$19473$Uaprr
                           g$vis*$19474$Uaprr
                           g$inv*$19475$Uaprr
                           g$invoke-code$19479$Uaprr
                           g$visit-code$19478$Uaprr
                           g$export-subst$19462$Uaprr
                           g$export-env$19461$Uaprr))))
                    (gensym)
                    g$name$19469$Uaprr
                    g$ver$19468$Uaprr
                    (g$map$11722$Uaprr
                      g$library-spec$15422$Uaprr
                      g$imp*$19467$Uaprr)
                    (g$map$11722$Uaprr
                      g$library-spec$15422$Uaprr
                      g$vis*$19465$Uaprr)
                    (g$map$11722$Uaprr
                      g$library-spec$15422$Uaprr
                      g$inv*$19466$Uaprr)
                    (case-lambda
                      (() (g$visit!$19442$Uaprr g$macro*$19463$Uaprr)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$15151$Uaprr
                           g$invoke-code$19464$Uaprr))))
                    (g$build-visit-code$19441$Uaprr
                      g$macro*$19463$Uaprr)
                    g$invoke-code$19464$Uaprr)))
                g$export-env$19460$Uaprr
                g$export-subst$19459$Uaprr
                g$macro*$19458$Uaprr
                g$invoke-code$19457$Uaprr
                g$vis*$19456$Uaprr
                g$inv*$19455$Uaprr
                g$imp*$19454$Uaprr
                g$ver$19453$Uaprr
                g$name$19452$Uaprr))))))
       ((g$x$19488$Uaprr g$filename$19489$Uaprr)
        (g$library-expander$16313$Uaprr
          g$x$19488$Uaprr
          g$filename$19489$Uaprr
          (case-lambda ((g$x$19490$Uaprr) (values)))))
       ((g$x$19491$Uaprr)
        (g$library-expander$16313$Uaprr
          g$x$19491$Uaprr
          '#f
          (case-lambda ((g$x$19492$Uaprr) (values)))))))
   (g$boot-library-expand$16314$Uaprr
     g$boot-library-expand$19904$Uaprr
     (case-lambda
       ((g$x$19493$Uaprr)
        (call-with-values
          (case-lambda
            (() (g$library-expander$16313$Uaprr g$x$19493$Uaprr)))
          (case-lambda
            ((g$id$19504$Uaprr
               g$name$19505$Uaprr
               g$ver$19506$Uaprr
               g$imp*$19507$Uaprr
               g$vis*$19508$Uaprr
               g$inv*$19509$Uaprr
               g$invoke-code$19510$Uaprr
               g$visit-code$19511$Uaprr
               g$export-subst$19512$Uaprr
               g$export-env$19513$Uaprr)
             ((case-lambda
                ((g$export-env$19514$Uaprr
                   g$export-subst$19515$Uaprr
                   g$visit-code$19516$Uaprr
                   g$invoke-code$19517$Uaprr
                   g$inv*$19518$Uaprr
                   g$vis*$19519$Uaprr
                   g$imp*$19520$Uaprr
                   g$ver$19521$Uaprr
                   g$name$19522$Uaprr
                   g$id$19523$Uaprr)
                 (values
                   g$name$19522$Uaprr
                   g$invoke-code$19517$Uaprr
                   g$export-subst$19515$Uaprr
                   g$export-env$19514$Uaprr)))
              g$export-env$19513$Uaprr
              g$export-subst$19512$Uaprr
              g$visit-code$19511$Uaprr
              g$invoke-code$19510$Uaprr
              g$inv*$19509$Uaprr
              g$vis*$19508$Uaprr
              g$imp*$19507$Uaprr
              g$ver$19506$Uaprr
              g$name$19505$Uaprr
              g$id$19504$Uaprr)))))))
   (g$rev-map-append$16315$Uaprr
     g$rev-map-append$19905$Uaprr
     (case-lambda
       ((g$f$19524$Uaprr g$ls$19525$Uaprr g$ac$19526$Uaprr)
        (if (null? g$ls$19525$Uaprr)
          g$ac$19526$Uaprr
          (g$rev-map-append$16315$Uaprr
            g$f$19524$Uaprr
            (cdr g$ls$19525$Uaprr)
            (cons
              (g$f$19524$Uaprr (car g$ls$19525$Uaprr))
              g$ac$19526$Uaprr))))))
   (g$build-exports$16316$Uaprr
     g$build-exports$19906$Uaprr
     (case-lambda
       ((g$lex*+loc*$19527$Uaprr g$init*$19528$Uaprr)
        (g$build-sequence$15637$Uaprr
          '#f
          (cons
            (g$build-void$15638$Uaprr)
            (g$rev-map-append$16315$Uaprr
              (case-lambda
                ((g$x$19529$Uaprr)
                 (list
                   'set!
                   (cdr g$x$19529$Uaprr)
                   (car g$x$19529$Uaprr))))
              g$lex*+loc*$19527$Uaprr
              g$init*$19528$Uaprr))))))
   (g$make-export-subst$16317$Uaprr
     g$make-export-subst$19907$Uaprr
     (case-lambda
       ((g$name*$19530$Uaprr g$id*$19531$Uaprr)
        (g$map$11722$Uaprr
          (case-lambda
            ((g$name$19532$Uaprr g$id$19533$Uaprr)
             ((case-lambda
                ((g$label$19534$Uaprr)
                 (begin
                   (if (not g$label$19534$Uaprr)
                     (g$syntax-violation$16329$Uaprr
                       '#f
                       '"cannot export unbound identifier"
                       g$id$19533$Uaprr)
                     (void))
                   (cons g$name$19532$Uaprr g$label$19534$Uaprr))))
              (g$id->label$15725$Uaprr g$id$19533$Uaprr))))
          g$name*$19530$Uaprr
          g$id*$19531$Uaprr))))
   (g$make-export-env/macros$16318$Uaprr
     g$make-export-env/macros$19908$Uaprr
     (case-lambda
       ((g$lex*$19535$Uaprr g$loc*$19536$Uaprr g$r$19537$Uaprr)
        (letrec* ((g$lookup$19538$Uaprr
                    (case-lambda
                      ((g$x$19554$Uaprr)
                       ((letrec ((g$f$19555$Uaprr
                                   (case-lambda
                                     ((g$x$19556$Uaprr
                                        g$lex*$19557$Uaprr
                                        g$loc*$19558$Uaprr)
                                      (if (pair? g$lex*$19557$Uaprr)
                                        (if (eq? g$x$19556$Uaprr
                                                 (car g$lex*$19557$Uaprr))
                                          (car g$loc*$19558$Uaprr)
                                          (g$f$19555$Uaprr
                                            g$x$19556$Uaprr
                                            (cdr g$lex*$19557$Uaprr)
                                            (cdr g$loc*$19558$Uaprr)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$19555$Uaprr)
                        g$x$19554$Uaprr
                        g$lex*$19535$Uaprr
                        g$loc*$19536$Uaprr)))))
          ((letrec ((g$f$19539$Uaprr
                      (case-lambda
                        ((g$r$19540$Uaprr
                           g$env$19541$Uaprr
                           g$global*$19542$Uaprr
                           g$macro*$19543$Uaprr)
                         (if (null? g$r$19540$Uaprr)
                           (values
                             g$env$19541$Uaprr
                             g$global*$19542$Uaprr
                             g$macro*$19543$Uaprr)
                           ((case-lambda
                              ((g$x$19544$Uaprr)
                               ((case-lambda
                                  ((g$label$19545$Uaprr g$b$19546$Uaprr)
                                   ((case-lambda
                                      ((g$t$19547$Uaprr)
                                       (if (eqv?
                                             g$t$19547$Uaprr
                                             'lexical)
                                         ((case-lambda
                                            ((g$v$19548$Uaprr)
                                             ((case-lambda
                                                ((g$loc$19549$Uaprr
                                                   g$type$19550$Uaprr)
                                                 (g$f$19539$Uaprr
                                                   (cdr g$r$19540$Uaprr)
                                                   (cons
                                                     (g$cons*$11724$Uaprr
                                                       g$label$19545$Uaprr
                                                       g$type$19550$Uaprr
                                                       g$loc$19549$Uaprr)
                                                     g$env$19541$Uaprr)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$16154$Uaprr
                                                         g$v$19548$Uaprr)
                                                       g$loc$19549$Uaprr)
                                                     g$global*$19542$Uaprr)
                                                   g$macro*$19543$Uaprr)))
                                              (g$lookup$19538$Uaprr
                                                (g$lexical-var$16154$Uaprr
                                                  g$v$19548$Uaprr))
                                              (if (g$lexical-mutable?$16155$Uaprr
                                                    g$v$19548$Uaprr)
                                                'mutable
                                                'global))))
                                          (g$binding-value$15730$Uaprr
                                            g$b$19546$Uaprr))
                                         (if (eqv?
                                               g$t$19547$Uaprr
                                               'local-macro)
                                           ((case-lambda
                                              ((g$loc$19551$Uaprr)
                                               (g$f$19539$Uaprr
                                                 (cdr g$r$19540$Uaprr)
                                                 (cons
                                                   (g$cons*$11724$Uaprr
                                                     g$label$19545$Uaprr
                                                     'global-macro
                                                     g$loc$19551$Uaprr)
                                                   g$env$19541$Uaprr)
                                                 g$global*$19542$Uaprr
                                                 (cons
                                                   (cons
                                                     g$loc$19551$Uaprr
                                                     (g$binding-value$15730$Uaprr
                                                       g$b$19546$Uaprr))
                                                   g$macro*$19543$Uaprr))))
                                            (gensym))
                                           (if (eqv?
                                                 g$t$19547$Uaprr
                                                 'local-macro!)
                                             ((case-lambda
                                                ((g$loc$19552$Uaprr)
                                                 (g$f$19539$Uaprr
                                                   (cdr g$r$19540$Uaprr)
                                                   (cons
                                                     (g$cons*$11724$Uaprr
                                                       g$label$19545$Uaprr
                                                       'global-macro!
                                                       g$loc$19552$Uaprr)
                                                     g$env$19541$Uaprr)
                                                   g$global*$19542$Uaprr
                                                   (cons
                                                     (cons
                                                       g$loc$19552$Uaprr
                                                       (g$binding-value$15730$Uaprr
                                                         g$b$19546$Uaprr))
                                                     g$macro*$19543$Uaprr))))
                                              (gensym))
                                             (if (eqv?
                                                   g$t$19547$Uaprr
                                                   'local-ctv)
                                               ((case-lambda
                                                  ((g$loc$19553$Uaprr)
                                                   (g$f$19539$Uaprr
                                                     (cdr g$r$19540$Uaprr)
                                                     (cons
                                                       (g$cons*$11724$Uaprr
                                                         g$label$19545$Uaprr
                                                         'global-ctv
                                                         g$loc$19553$Uaprr)
                                                       g$env$19541$Uaprr)
                                                     g$global*$19542$Uaprr
                                                     (cons
                                                       (cons
                                                         g$loc$19553$Uaprr
                                                         (g$binding-value$15730$Uaprr
                                                           g$b$19546$Uaprr))
                                                       g$macro*$19543$Uaprr))))
                                                (gensym))
                                               (if (g$memv$11715$Uaprr
                                                     g$t$19547$Uaprr
                                                     '($rtd $module))
                                                 (g$f$19539$Uaprr
                                                   (cdr g$r$19540$Uaprr)
                                                   (cons
                                                     g$x$19544$Uaprr
                                                     g$env$19541$Uaprr)
                                                   g$global*$19542$Uaprr
                                                   g$macro*$19543$Uaprr)
                                                 (assertion-violation
                                                   'expander
                                                   '"BUG: do not know how to export"
                                                   (g$binding-type$15729$Uaprr
                                                     g$b$19546$Uaprr)
                                                   (g$binding-value$15730$Uaprr
                                                     g$b$19546$Uaprr)))))))))
                                    (g$binding-type$15729$Uaprr
                                      g$b$19546$Uaprr))))
                                (car g$x$19544$Uaprr)
                                (cdr g$x$19544$Uaprr))))
                            (car g$r$19540$Uaprr)))))))
             g$f$19539$Uaprr)
           g$r$19537$Uaprr
           '()
           '()
           '())))))
   (g$generate-temporaries$16319$Uaprr
     g$generate-temporaries$19909$Uaprr
     (case-lambda
       ((g$ls$19559$Uaprr)
        ((case-lambda
           ((g$t$19560$Uaprr)
            ((case-lambda
               ((g$ls/false$19561$Uaprr)
                (if g$ls/false$19561$Uaprr
                  (apply
                    (case-lambda
                      ((g$ls$19562$Uaprr)
                       (g$map$11722$Uaprr
                         (case-lambda
                           ((g$x$19563$Uaprr)
                            (g$make-stx$15685$Uaprr
                              ((case-lambda
                                 ((g$x$19564$Uaprr)
                                  (if ((case-lambda
                                         ((g$t$19565$Uaprr)
                                          (if g$t$19565$Uaprr
                                            g$t$19565$Uaprr
                                            (begin
                                              '#f
                                              (string?
                                                g$x$19564$Uaprr)))))
                                       (g$symbol?$12465$Uaprr
                                         g$x$19564$Uaprr))
                                    (gensym g$x$19564$Uaprr)
                                    (gensym 't))))
                               (g$syntax->datum$16332$Uaprr
                                 g$x$19563$Uaprr))
                              g$top-mark*$15645$Uaprr
                              '()
                              '())))
                         g$ls$19562$Uaprr)))
                    g$ls/false$19561$Uaprr)
                  ((case-lambda
                     ((g$t$19566$Uaprr)
                      ((case-lambda
                         ((g$ls/false$19567$Uaprr)
                          (if g$ls/false$19567$Uaprr
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$19567$Uaprr)
                            (g$syntax-violation$16329$Uaprr
                              '#f
                              '"invalid syntax"
                              g$t$19566$Uaprr))))
                       (g$syntax-dispatch$16210$Uaprr
                         g$t$19566$Uaprr
                         '_))))
                   g$t$19560$Uaprr))))
             (g$syntax-dispatch$16210$Uaprr
               g$t$19560$Uaprr
               'each-any))))
         g$ls$19559$Uaprr))))
   (g$free-identifier=?$16320$Uaprr
     g$free-identifier=?$19910$Uaprr
     (case-lambda
       ((g$x$19568$Uaprr g$y$19569$Uaprr)
        (if (g$id?$15712$Uaprr g$x$19568$Uaprr)
          (if (g$id?$15712$Uaprr g$y$19569$Uaprr)
            (g$free-id=?$15716$Uaprr g$x$19568$Uaprr g$y$19569$Uaprr)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$19569$Uaprr))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$19568$Uaprr)))))
   (g$bound-identifier=?$16321$Uaprr
     g$bound-identifier=?$19911$Uaprr
     (case-lambda
       ((g$x$19570$Uaprr g$y$19571$Uaprr)
        (if (g$id?$15712$Uaprr g$x$19570$Uaprr)
          (if (g$id?$15712$Uaprr g$y$19571$Uaprr)
            (g$bound-id=?$15715$Uaprr g$x$19570$Uaprr g$y$19571$Uaprr)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$19571$Uaprr))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$19570$Uaprr)))))
   (g$make-source-condition$16322$Uaprr
     g$make-source-condition$19912$Uaprr
     (case-lambda
       ((g$x$19572$Uaprr)
        (letrec* ((g$11153$19573$Uaprr
                    (make-record-type-descriptor
                      '&source-information
                      g$&condition-rtd$13134$Uaprr
                      'g$11156$Uaprr
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$11155$19574$Uaprr '#f)
                  (g$11154$19575$Uaprr
                    (make-record-constructor-descriptor
                      g$11153$19573$Uaprr
                      g$&condition-rcd$13135$Uaprr
                      g$11155$19574$Uaprr))
                  (g$11152$19578$Uaprr
                    (record-predicate g$11153$19573$Uaprr))
                  (g$make-source-condition$19579$Uaprr
                    (record-constructor g$11154$19575$Uaprr))
                  (g$11150$19580$Uaprr
                    (record-accessor g$11153$19573$Uaprr '0))
                  (g$11151$19581$Uaprr
                    (record-accessor g$11153$19573$Uaprr '1))
                  (g$source-condition?$19582$Uaprr
                    (condition-predicate g$11153$19573$Uaprr))
                  (g$source-filename$19583$Uaprr
                    (condition-accessor
                      g$11153$19573$Uaprr
                      g$11150$19580$Uaprr))
                  (g$source-character$19584$Uaprr
                    (condition-accessor
                      g$11153$19573$Uaprr
                      g$11151$19581$Uaprr)))
          (if (pair? g$x$19572$Uaprr)
            (g$make-source-condition$19579$Uaprr
              (car g$x$19572$Uaprr)
              (cdr g$x$19572$Uaprr))
            (condition))))))
   (g$extract-position-condition$16323$Uaprr
     g$extract-position-condition$19913$Uaprr
     (case-lambda
       ((g$x$19585$Uaprr)
        (g$make-source-condition$16322$Uaprr
          (g$expression-position$16324$Uaprr g$x$19585$Uaprr)))))
   (g$expression-position$16324$Uaprr
     g$expression-position$19914$Uaprr
     (case-lambda
       ((g$x$19586$Uaprr)
        (if (g$stx?$15684$Uaprr g$x$19586$Uaprr)
          (begin
            '#f
            ((case-lambda
               ((g$x$19587$Uaprr)
                (if (annotation? g$x$19587$Uaprr)
                  (begin '#f (annotation-source g$x$19587$Uaprr))
                  '#f)))
             (g$stx-expr$15686$Uaprr g$x$19586$Uaprr)))
          '#f))))
   (g$assertion-error$16325$Uaprr
     g$assertion-error$19915$Uaprr
     (case-lambda
       ((g$expr$19588$Uaprr g$pos$19589$Uaprr)
        (raise
          (condition
            (g$make-assertion-violation$13182$Uaprr)
            (g$make-who-condition$13200$Uaprr 'assert)
            (g$make-message-condition$13140$Uaprr '"assertion failed")
            (g$make-irritants-condition$13190$Uaprr
              (list g$expr$19588$Uaprr))
            (g$make-source-condition$16322$Uaprr g$pos$19589$Uaprr))))))
   (g$syntax-error$16326$Uaprr
     g$syntax-error$19916$Uaprr
     (case-lambda
       ((g$x$19590$Uaprr . g$args$19591$Uaprr)
        (begin
          (if (not (g$for-all$11720$Uaprr string? g$args$19591$Uaprr))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$19591$Uaprr)
            (void))
          (raise
            (condition
              (g$make-message-condition$13140$Uaprr
                (if (null? g$args$19591$Uaprr)
                  '"invalid syntax"
                  (apply string-append g$args$19591$Uaprr)))
              (g$make-syntax-violation$13234$Uaprr
                (g$syntax->datum$16332$Uaprr g$x$19590$Uaprr)
                '#f)
              (g$extract-position-condition$16323$Uaprr g$x$19590$Uaprr)
              (g$extract-trace$16327$Uaprr g$x$19590$Uaprr)))))))
   (g$extract-trace$16327$Uaprr
     g$extract-trace$19917$Uaprr
     (case-lambda
       ((g$x$19592$Uaprr)
        (letrec* ((g$11178$19593$Uaprr
                    (make-record-type-descriptor
                      '&trace
                      g$&condition-rtd$13134$Uaprr
                      'g$11181$Uaprr
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$11180$19594$Uaprr '#f)
                  (g$11179$19595$Uaprr
                    (make-record-constructor-descriptor
                      g$11178$19593$Uaprr
                      g$&condition-rcd$13135$Uaprr
                      g$11180$19594$Uaprr))
                  (g$11177$19598$Uaprr
                    (record-predicate g$11178$19593$Uaprr))
                  (g$make-trace$19599$Uaprr
                    (record-constructor g$11179$19595$Uaprr))
                  (g$11176$19600$Uaprr
                    (record-accessor g$11178$19593$Uaprr '0))
                  (g$trace?$19601$Uaprr
                    (condition-predicate g$11178$19593$Uaprr))
                  (g$trace-form$19602$Uaprr
                    (condition-accessor
                      g$11178$19593$Uaprr
                      g$11176$19600$Uaprr)))
          ((letrec ((g$f$19603$Uaprr
                      (case-lambda
                        ((g$x$19604$Uaprr)
                         (if (g$stx?$15684$Uaprr g$x$19604$Uaprr)
                           (apply
                             condition
                             (g$make-trace$19599$Uaprr g$x$19604$Uaprr)
                             (g$map$11722$Uaprr
                               g$f$19603$Uaprr
                               (g$stx-ae*$15689$Uaprr g$x$19604$Uaprr)))
                           (if (annotation? g$x$19604$Uaprr)
                             (g$make-trace$19599$Uaprr
                               (g$make-stx$15685$Uaprr
                                 g$x$19604$Uaprr
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$19603$Uaprr)
           g$x$19592$Uaprr)))))
   (g$syntax-violation*$16328$Uaprr
     g$syntax-violation*$19918$Uaprr
     (case-lambda
       ((g$who$19605$Uaprr
          g$msg$19606$Uaprr
          g$form$19607$Uaprr
          g$condition-object$19608$Uaprr)
        (begin
          (if (not (string? g$msg$19606$Uaprr))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$19606$Uaprr)
            (void))
          ((case-lambda
             ((g$who$19609$Uaprr)
              (raise
                (condition
                  (if g$who$19609$Uaprr
                    (g$make-who-condition$13200$Uaprr g$who$19609$Uaprr)
                    (condition))
                  (g$make-message-condition$13140$Uaprr
                    g$msg$19606$Uaprr)
                  g$condition-object$19608$Uaprr
                  (g$extract-position-condition$16323$Uaprr
                    g$form$19607$Uaprr)
                  (g$extract-trace$16327$Uaprr g$form$19607$Uaprr)))))
           (if ((case-lambda
                  ((g$t$19610$Uaprr)
                   (if g$t$19610$Uaprr
                     g$t$19610$Uaprr
                     (begin
                       '#f
                       (g$symbol?$12465$Uaprr g$who$19605$Uaprr)))))
                (string? g$who$19605$Uaprr))
             g$who$19605$Uaprr
             (if (not g$who$19605$Uaprr)
               ((case-lambda
                  ((g$t$19611$Uaprr)
                   ((case-lambda
                      ((g$ls/false$19612$Uaprr)
                       (if (if g$ls/false$19612$Uaprr
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$19613$Uaprr)
                                    (g$id?$15712$Uaprr
                                      g$id$19613$Uaprr)))
                                 g$ls/false$19612$Uaprr))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$19614$Uaprr)
                              (g$syntax->datum$16332$Uaprr
                                g$id$19614$Uaprr)))
                           g$ls/false$19612$Uaprr)
                         ((case-lambda
                            ((g$t$19615$Uaprr)
                             ((case-lambda
                                ((g$ls/false$19616$Uaprr)
                                 (if (if g$ls/false$19616$Uaprr
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$19617$Uaprr
                                                g$rest$19618$Uaprr)
                                              (g$id?$15712$Uaprr
                                                g$id$19617$Uaprr)))
                                           g$ls/false$19616$Uaprr))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$19619$Uaprr
                                          g$rest$19620$Uaprr)
                                        (g$syntax->datum$16332$Uaprr
                                          g$id$19619$Uaprr)))
                                     g$ls/false$19616$Uaprr)
                                   ((case-lambda
                                      ((g$t$19621$Uaprr)
                                       ((case-lambda
                                          ((g$ls/false$19622$Uaprr)
                                           (if g$ls/false$19622$Uaprr
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$19622$Uaprr)
                                             (g$syntax-violation$16329$Uaprr
                                               '#f
                                               '"invalid syntax"
                                               g$t$19621$Uaprr))))
                                        (g$syntax-dispatch$16210$Uaprr
                                          g$t$19621$Uaprr
                                          '_))))
                                    g$t$19615$Uaprr))))
                              (g$syntax-dispatch$16210$Uaprr
                                g$t$19615$Uaprr
                                '(any . any)))))
                          g$t$19611$Uaprr))))
                    (g$syntax-dispatch$16210$Uaprr
                      g$t$19611$Uaprr
                      'any))))
                g$form$19607$Uaprr)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$19605$Uaprr))))))))
   (g$syntax-violation$16329$Uaprr
     g$syntax-violation$19919$Uaprr
     (case-lambda
       ((g$who$19623$Uaprr g$msg$19624$Uaprr g$form$19625$Uaprr)
        (g$syntax-violation$16329$Uaprr
          g$who$19623$Uaprr
          g$msg$19624$Uaprr
          g$form$19625$Uaprr
          '#f))
       ((g$who$19626$Uaprr
          g$msg$19627$Uaprr
          g$form$19628$Uaprr
          g$subform$19629$Uaprr)
        (g$syntax-violation*$16328$Uaprr
          g$who$19626$Uaprr
          g$msg$19627$Uaprr
          g$form$19628$Uaprr
          (g$make-syntax-violation$13234$Uaprr
            (g$syntax->datum$16332$Uaprr g$form$19628$Uaprr)
            (g$syntax->datum$16332$Uaprr g$subform$19629$Uaprr))))))
   (g$identifier?$16330$Uaprr
     g$identifier?$19920$Uaprr
     (case-lambda
       ((g$x$19630$Uaprr) (g$id?$15712$Uaprr g$x$19630$Uaprr))))
   (g$datum->syntax$16331$Uaprr
     g$datum->syntax$19921$Uaprr
     (case-lambda
       ((g$id$19631$Uaprr g$datum$19632$Uaprr)
        (if (g$id?$15712$Uaprr g$id$19631$Uaprr)
          (g$datum->stx$15695$Uaprr
            g$id$19631$Uaprr
            g$datum$19632$Uaprr)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$19631$Uaprr)))))
   (g$syntax->datum$16332$Uaprr
     g$syntax->datum$19922$Uaprr
     (case-lambda
       ((g$x$19633$Uaprr) (g$stx->datum$15723$Uaprr g$x$19633$Uaprr))))
   (g$compile-r6rs-top-level$16333$Uaprr
     g$compile-r6rs-top-level$19923$Uaprr
     (case-lambda
       ((g$x*$19634$Uaprr)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$16273$Uaprr g$x*$19634$Uaprr)))
          (case-lambda
            ((g$lib*$19637$Uaprr g$invoke-code$19638$Uaprr)
             ((case-lambda
                ((g$invoke-code$19639$Uaprr g$lib*$19640$Uaprr)
                 (case-lambda
                   (()
                    (begin
                      (g$for-each$11723$Uaprr
                        g$invoke-library$15418$Uaprr
                        g$lib*$19640$Uaprr)
                      (eval-core
                        (g$expanded->core$15151$Uaprr
                          g$invoke-code$19639$Uaprr)))))))
              g$invoke-code$19638$Uaprr
              g$lib*$19637$Uaprr)))))))
   (g$pre-compile-r6rs-top-level$16334$Uaprr
     g$pre-compile-r6rs-top-level$19924$Uaprr
     (case-lambda
       ((g$x*$19641$Uaprr)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$16273$Uaprr g$x*$19641$Uaprr)))
          (case-lambda
            ((g$lib*$19644$Uaprr g$invoke-code$19645$Uaprr)
             ((case-lambda
                ((g$invoke-code$19646$Uaprr g$lib*$19647$Uaprr)
                 (begin
                   (g$for-each$11723$Uaprr
                     g$invoke-library$15418$Uaprr
                     g$lib*$19647$Uaprr)
                   (compile-core
                     (g$expanded->core$15151$Uaprr
                       g$invoke-code$19646$Uaprr)))))
              g$invoke-code$19645$Uaprr
              g$lib*$19644$Uaprr)))))))
   (g$new-interaction-environment$16335$Uaprr
     g$new-interaction-environment$19925$Uaprr
     (case-lambda
       (()
        ((case-lambda
           ((g$lib$19648$Uaprr g$rib$19649$Uaprr)
            (begin
              ((case-lambda
                 ((g$subst$19650$Uaprr)
                  (begin
                    (g$set-rib-sym*!$15665$Uaprr
                      g$rib$19649$Uaprr
                      (g$map$11722$Uaprr car g$subst$19650$Uaprr))
                    (g$set-rib-mark**!$15666$Uaprr
                      g$rib$19649$Uaprr
                      (g$map$11722$Uaprr
                        (case-lambda
                          ((g$x$19651$Uaprr) g$top-mark*$15645$Uaprr))
                        g$subst$19650$Uaprr))
                    (g$set-rib-label*!$15667$Uaprr
                      g$rib$19649$Uaprr
                      (g$map$11722$Uaprr cdr g$subst$19650$Uaprr)))))
               (g$library-subst$15375$Uaprr g$lib$19648$Uaprr))
              (g$make-interaction-env$16294$Uaprr
                g$rib$19649$Uaprr
                '()
                '()))))
         (g$find-library-by-name$15411$Uaprr '(ironscheme))
         (g$make-empty-rib$15670$Uaprr)))))
   (g$interaction-environment$16336$Uaprr
     g$interaction-environment$19926$Uaprr
     ((case-lambda
        ((g$e$19652$Uaprr)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$19653$Uaprr)
                (if g$t$19653$Uaprr
                  g$t$19653$Uaprr
                  (begin
                    '#f
                    (begin
                      (set! g$e$19652$Uaprr
                        (g$new-interaction-environment$16335$Uaprr))
                      g$e$19652$Uaprr)))))
             g$e$19652$Uaprr)))))
      '#f))
   (g$top-level-context$16337$Uaprr
     g$top-level-context$19927$Uaprr
     (g$make-parameter$14574$Uaprr '#f)))
  (g$current-library-expander$15408$Uaprr
    g$library-expander$16313$Uaprr))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$15148$Uaprr
      (case-lambda
        ((g$x$20008$Uaprr)
         ((case-lambda
            ((g$t$20009$Uaprr)
             (if g$t$20009$Uaprr (cdr g$t$20009$Uaprr) '#f)))
          (g$assq$11710$Uaprr
            g$x$20008$Uaprr
            '((ellipsis-map . g$ellipsis-map$19811$Uaprr)
              (&no-nans-rcd . g$&no-nans-rcd$13369$Uaprr)
              (&no-nans-rtd . g$&no-nans-rtd$13368$Uaprr)
              (&no-infinities-rcd . g$&no-infinities-rcd$13361$Uaprr)
              (&no-infinities-rtd . g$&no-infinities-rtd$13360$Uaprr)
              (&i/o-encoding-rcd . g$&i/o-encoding-rcd$13353$Uaprr)
              (&i/o-encoding-rtd . g$&i/o-encoding-rtd$13352$Uaprr)
              (&i/o-decoding-rcd . g$&i/o-decoding-rcd$13343$Uaprr)
              (&i/o-decoding-rtd . g$&i/o-decoding-rtd$13342$Uaprr)
              (&i/o-port-rcd . g$&i/o-port-rcd$13335$Uaprr)
              (&i/o-port-rtd . g$&i/o-port-rtd$13334$Uaprr)
              (&i/o-file-does-not-exist-rcd
                .
                g$&i/o-file-does-not-exist-rcd$13325$Uaprr)
              (&i/o-file-does-not-exist-rtd
                .
                g$&i/o-file-does-not-exist-rtd$13324$Uaprr)
              (&i/o-file-already-exists-rcd
                .
                g$&i/o-file-already-exists-rcd$13317$Uaprr)
              (&i/o-file-already-exists-rtd
                .
                g$&i/o-file-already-exists-rtd$13316$Uaprr)
              (&i/o-file-is-read-only-rcd
                .
                g$&i/o-file-is-read-only-rcd$13309$Uaprr)
              (&i/o-file-is-read-only-rtd
                .
                g$&i/o-file-is-read-only-rtd$13308$Uaprr)
              (&i/o-file-protection-rcd
                .
                g$&i/o-file-protection-rcd$13301$Uaprr)
              (&i/o-file-protection-rtd
                .
                g$&i/o-file-protection-rtd$13300$Uaprr)
              (&i/o-filename-rcd . g$&i/o-filename-rcd$13293$Uaprr)
              (&i/o-filename-rtd . g$&i/o-filename-rtd$13292$Uaprr)
              (&i/o-invalid-position-rcd
                .
                g$&i/o-invalid-position-rcd$13283$Uaprr)
              (&i/o-invalid-position-rtd
                .
                g$&i/o-invalid-position-rtd$13282$Uaprr)
              (&i/o-write-rcd . g$&i/o-write-rcd$13273$Uaprr)
              (&i/o-write-rtd . g$&i/o-write-rtd$13272$Uaprr)
              (&i/o-read-rcd . g$&i/o-read-rcd$13265$Uaprr)
              (&i/o-read-rtd . g$&i/o-read-rtd$13264$Uaprr)
              (&i/o-rcd . g$&i/o-rcd$13257$Uaprr)
              (&i/o-rtd . g$&i/o-rtd$13256$Uaprr)
              (&undefined-rcd . g$&undefined-rcd$13249$Uaprr)
              (&undefined-rtd . g$&undefined-rtd$13248$Uaprr)
              (&syntax-rcd . g$&syntax-rcd$13241$Uaprr)
              (&syntax-rtd . g$&syntax-rtd$13240$Uaprr)
              (&lexical-rcd . g$&lexical-rcd$13229$Uaprr)
              (&lexical-rtd . g$&lexical-rtd$13228$Uaprr)
              (&implementation-restriction-rcd
                .
                g$&implementation-restriction-rcd$13221$Uaprr)
              (&implementation-restriction-rtd
                .
                g$&implementation-restriction-rtd$13220$Uaprr)
              (&non-continuable-rcd
                .
                g$&non-continuable-rcd$13213$Uaprr)
              (&non-continuable-rtd
                .
                g$&non-continuable-rtd$13212$Uaprr)
              (&who-rcd . g$&who-rcd$13205$Uaprr)
              (&who-rtd . g$&who-rtd$13204$Uaprr)
              (&irritants-rcd . g$&irritants-rcd$13195$Uaprr)
              (&irritants-rtd . g$&irritants-rtd$13194$Uaprr)
              (&assertion-rcd . g$&assertion-rcd$13185$Uaprr)
              (&assertion-rtd . g$&assertion-rtd$13184$Uaprr)
              (&violation-rcd . g$&violation-rcd$13177$Uaprr)
              (&violation-rtd . g$&violation-rtd$13176$Uaprr)
              (&error-rcd . g$&error-rcd$13169$Uaprr)
              (&error-rtd . g$&error-rtd$13168$Uaprr)
              (&serious-rcd . g$&serious-rcd$13161$Uaprr)
              (&serious-rtd . g$&serious-rtd$13160$Uaprr)
              (&warning-rcd . g$&warning-rcd$13153$Uaprr)
              (&warning-rtd . g$&warning-rtd$13152$Uaprr)
              (&message-rcd . g$&message-rcd$13145$Uaprr)
              (&message-rtd . g$&message-rtd$13144$Uaprr)
              (&condition-rcd . g$&condition-rcd$13135$Uaprr)
              (&condition-rtd . g$&condition-rtd$13134$Uaprr)
              (make-list . g$make-list$11705$Uaprr)
              (last-pair . g$last-pair$11704$Uaprr)
              (ironscheme-build . g$ironscheme-build$19999$Uaprr)
              (syntax-error . g$syntax-error$19916$Uaprr)
              (syntax-dispatch . g$syntax-dispatch$19806$Uaprr)
              (compile-system-libraries
                .
                g$compile-system-libraries$20003$Uaprr)
              (compile->closure . g$compile->closure$20005$Uaprr)
              (compile . g$compile$20004$Uaprr)
              (load . g$load$19998$Uaprr)
              (interaction-environment
                .
                g$interaction-environment$19926$Uaprr)
              (string-normalize-nfkd
                .
                g$string-normalize-nfkd$13591$Uaprr)
              (string-normalize-nfkc
                .
                g$string-normalize-nfkc$13590$Uaprr)
              (string-normalize-nfd
                .
                g$string-normalize-nfd$13589$Uaprr)
              (string-normalize-nfc
                .
                g$string-normalize-nfc$13588$Uaprr)
              (string-ci>? . g$string-ci>?$13580$Uaprr)
              (string-ci>=? . g$string-ci>=?$13582$Uaprr)
              (string-ci=? . g$string-ci=?$13578$Uaprr)
              (string-ci<? . g$string-ci<?$13579$Uaprr)
              (string-ci<=? . g$string-ci<=?$13581$Uaprr)
              (char-ci>? . g$char-ci>?$13585$Uaprr)
              (char-ci>=? . g$char-ci>=?$13587$Uaprr)
              (char-ci=? . g$char-ci=?$13583$Uaprr)
              (char-ci<? . g$char-ci<?$13584$Uaprr)
              (char-ci<=? . g$char-ci<=?$13586$Uaprr)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$19744$Uaprr)
              (variable-transformer?
                .
                g$variable-transformer?$19743$Uaprr)
              (make-variable-transformer
                .
                g$make-variable-transformer$19741$Uaprr)
              (identifier? . g$identifier?$19920$Uaprr)
              (generate-temporaries
                .
                g$generate-temporaries$19909$Uaprr)
              (free-identifier=? . g$free-identifier=?$19910$Uaprr)
              (syntax->datum . g$syntax->datum$19922$Uaprr)
              (datum->syntax . g$datum->syntax$19921$Uaprr)
              (bound-identifier=? . g$bound-identifier=?$19911$Uaprr)
              (delete-file . g$delete-file$12585$Uaprr)
              (file-exists? . g$file-exists?$12584$Uaprr)
              (list-sort . g$list-sort$13433$Uaprr)
              (make-eqv-hashtable . g$make-eqv-hashtable$12567$Uaprr)
              (make-eq-hashtable . g$make-eq-hashtable$12566$Uaprr)
              (hashtable-update! . g$hashtable-update!$12573$Uaprr)
              (hashtable-size . g$hashtable-size$12568$Uaprr)
              (hashtable-set! . g$hashtable-set!$12570$Uaprr)
              (hashtable-ref . g$hashtable-ref$12569$Uaprr)
              (hashtable-delete! . g$hashtable-delete!$12571$Uaprr)
              (hashtable-contains? . g$hashtable-contains?$12572$Uaprr)
              (hashtable-clear! . g$hashtable-clear!$12574$Uaprr)
              (call-with-output-file
                .
                g$call-with-output-file$14190$Uaprr)
              (call-with-input-file
                .
                g$call-with-input-file$14189$Uaprr)
              (write-char . g$write-char$14186$Uaprr)
              (with-output-to-file . g$with-output-to-file$14188$Uaprr)
              (with-input-from-file
                .
                g$with-input-from-file$14187$Uaprr)
              (read-char . g$read-char$14185$Uaprr)
              (peek-char . g$peek-char$14184$Uaprr)
              (newline . g$newline$14191$Uaprr)
              (put-datum . g$put-datum$14121$Uaprr)
              (port? . g$port?$14126$Uaprr)
              (open-string-output-port
                .
                g$open-string-output-port$14125$Uaprr)
              (make-i/o-write-error
                .
                g$make-i/o-write-error$13270$Uaprr)
              (make-i/o-read-error . g$make-i/o-read-error$13262$Uaprr)
              (make-i/o-port-error . g$make-i/o-port-error$13330$Uaprr)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$13278$Uaprr)
              (make-i/o-filename-error
                .
                g$make-i/o-filename-error$13288$Uaprr)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$13298$Uaprr)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$13306$Uaprr)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$13322$Uaprr)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$13314$Uaprr)
              (make-i/o-error . g$make-i/o-error$13254$Uaprr)
              (make-i/o-encoding-error
                .
                g$make-i/o-encoding-error$13348$Uaprr)
              (make-i/o-decoding-error
                .
                g$make-i/o-decoding-error$13340$Uaprr)
              (i/o-write-error? . g$i/o-write-error?$13271$Uaprr)
              (i/o-read-error? . g$i/o-read-error?$13263$Uaprr)
              (i/o-port-error? . g$i/o-port-error?$13332$Uaprr)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$13280$Uaprr)
              (i/o-error-position . g$i/o-error-position$13281$Uaprr)
              (i/o-filename-error? . g$i/o-filename-error?$13290$Uaprr)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$13299$Uaprr)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$13307$Uaprr)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$13323$Uaprr)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$13315$Uaprr)
              (i/o-error? . g$i/o-error?$13255$Uaprr)
              (i/o-error-port . g$i/o-error-port$13333$Uaprr)
              (i/o-error-filename . g$i/o-error-filename$13291$Uaprr)
              (i/o-encoding-error? . g$i/o-encoding-error?$13350$Uaprr)
              (i/o-encoding-error-char
                .
                g$i/o-encoding-error-char$13351$Uaprr)
              (i/o-decoding-error? . g$i/o-decoding-error?$13341$Uaprr)
              (get-datum . g$get-datum$14122$Uaprr)
              (call-with-string-output-port
                .
                g$call-with-string-output-port$14127$Uaprr)
              (call-with-port . g$call-with-port$14128$Uaprr)
              (scheme-report-environment
                .
                g$scheme-report-environment$19899$Uaprr)
              (quotient . g$quotient$13400$Uaprr)
              (null-environment . g$null-environment$19898$Uaprr)
              (remainder . g$remainder$13401$Uaprr)
              (modulo . g$modulo$13402$Uaprr)
              (inexact->exact . g$inexact->exact$13397$Uaprr)
              (force . g$force$13404$Uaprr)
              (exact->inexact . g$exact->inexact$13398$Uaprr)
              (command-line . g$command-line$19994$Uaprr)
              (remove . g$remove$11727$Uaprr)
              (remv . g$remv$11728$Uaprr)
              (remp . g$remp$11708$Uaprr)
              (remq . g$remq$11729$Uaprr)
              (partition . g$partition$11707$Uaprr)
              (memv . g$memv$11715$Uaprr)
              (memq . g$memq$11714$Uaprr)
              (memp . g$memp$11717$Uaprr)
              (member . g$member$11716$Uaprr)
              (exists . g$exists$11721$Uaprr)
              (for-all . g$for-all$11720$Uaprr)
              (fold-right . g$fold-right$11726$Uaprr)
              (fold-left . g$fold-left$11725$Uaprr)
              (find . g$find$11706$Uaprr)
              (filter . g$filter$11709$Uaprr)
              (cons* . g$cons*$11724$Uaprr)
              (assv . g$assv$11711$Uaprr)
              (assq . g$assq$11710$Uaprr)
              (assp . g$assp$11713$Uaprr)
              (assoc . g$assoc$11712$Uaprr)
              (eval . g$eval$19901$Uaprr)
              (environment . g$environment$19897$Uaprr)
              (make-enumeration . g$make-enumeration$14327$Uaprr)
              (enum-set=? . g$enum-set=?$14334$Uaprr)
              (enum-set-universe . g$enum-set-universe$14328$Uaprr)
              (enum-set-union . g$enum-set-union$14335$Uaprr)
              (enum-set-subset? . g$enum-set-subset?$14333$Uaprr)
              (enum-set-projection . g$enum-set-projection$14339$Uaprr)
              (enum-set-member? . g$enum-set-member?$14332$Uaprr)
              (enum-set-intersection
                .
                g$enum-set-intersection$14336$Uaprr)
              (enum-set-indexer . g$enum-set-indexer$14329$Uaprr)
              (enum-set-difference . g$enum-set-difference$14337$Uaprr)
              (enum-set-constructor
                .
                g$enum-set-constructor$14330$Uaprr)
              (enum-set-complement . g$enum-set-complement$14338$Uaprr)
              (enum-set->list . g$enum-set->list$14331$Uaprr)
              (who-condition? . g$who-condition?$13202$Uaprr)
              (warning? . g$warning?$13151$Uaprr)
              (violation? . g$violation?$13175$Uaprr)
              (undefined-violation?
                .
                g$undefined-violation?$13247$Uaprr)
              (syntax-violation? . g$syntax-violation?$13237$Uaprr)
              (syntax-violation-subform
                .
                g$syntax-violation-subform$13239$Uaprr)
              (syntax-violation-form
                .
                g$syntax-violation-form$13238$Uaprr)
              (syntax-violation . g$syntax-violation$19919$Uaprr)
              (serious-condition? . g$serious-condition?$13159$Uaprr)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$13211$Uaprr)
              (message-condition? . g$message-condition?$13142$Uaprr)
              (make-who-condition . g$make-who-condition$13200$Uaprr)
              (make-warning . g$make-warning$13150$Uaprr)
              (make-violation . g$make-violation$13174$Uaprr)
              (make-undefined-violation
                .
                g$make-undefined-violation$13246$Uaprr)
              (make-syntax-violation
                .
                g$make-syntax-violation$13234$Uaprr)
              (make-serious-condition
                .
                g$make-serious-condition$13158$Uaprr)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$13210$Uaprr)
              (make-message-condition
                .
                g$make-message-condition$13140$Uaprr)
              (make-lexical-violation
                .
                g$make-lexical-violation$13226$Uaprr)
              (make-irritants-condition
                .
                g$make-irritants-condition$13190$Uaprr)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$13218$Uaprr)
              (make-error . g$make-error$13166$Uaprr)
              (make-assertion-violation
                .
                g$make-assertion-violation$13182$Uaprr)
              (lexical-violation? . g$lexical-violation?$13227$Uaprr)
              (irritants-condition?
                .
                g$irritants-condition?$13192$Uaprr)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$13219$Uaprr)
              (error? . g$error?$13167$Uaprr)
              (condition-who . g$condition-who$13203$Uaprr)
              (condition-message . g$condition-message$13143$Uaprr)
              (condition-irritants . g$condition-irritants$13193$Uaprr)
              (assertion-violation?
                .
                g$assertion-violation?$13183$Uaprr)
              (native-endianness . g$native-endianness$12698$Uaprr)
              (bytevector? . g$bytevector?$12464$Uaprr)
              (bytevector-u64-set! . g$bytevector-u64-set!$12719$Uaprr)
              (bytevector-u64-ref . g$bytevector-u64-ref$12715$Uaprr)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$12721$Uaprr)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$12717$Uaprr)
              (bytevector-u32-set! . g$bytevector-u32-set!$12711$Uaprr)
              (bytevector-u32-ref . g$bytevector-u32-ref$12707$Uaprr)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$12713$Uaprr)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$12709$Uaprr)
              (bytevector-u16-set! . g$bytevector-u16-set!$12703$Uaprr)
              (bytevector-u16-ref . g$bytevector-u16-ref$12699$Uaprr)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$12705$Uaprr)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$12701$Uaprr)
              (bytevector-s64-set! . g$bytevector-s64-set!$12720$Uaprr)
              (bytevector-s64-ref . g$bytevector-s64-ref$12716$Uaprr)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$12722$Uaprr)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$12718$Uaprr)
              (bytevector-s32-set! . g$bytevector-s32-set!$12712$Uaprr)
              (bytevector-s32-ref . g$bytevector-s32-ref$12708$Uaprr)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$12714$Uaprr)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$12710$Uaprr)
              (bytevector-s16-set! . g$bytevector-s16-set!$12704$Uaprr)
              (bytevector-s16-ref . g$bytevector-s16-ref$12700$Uaprr)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$12706$Uaprr)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$12702$Uaprr)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$12725$Uaprr)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$12723$Uaprr)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$12726$Uaprr)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$12724$Uaprr)
              (no-nans-violation? . g$no-nans-violation?$13367$Uaprr)
              (no-infinities-violation?
                .
                g$no-infinities-violation?$13359$Uaprr)
              (make-no-nans-violation
                .
                g$make-no-nans-violation$13366$Uaprr)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$13358$Uaprr)
              (flzero? . g$flzero?$14094$Uaprr)
              (fltruncate . g$fltruncate$14089$Uaprr)
              (fltan . g$fltan$14079$Uaprr)
              (flsqrt . g$flsqrt$14084$Uaprr)
              (flsin . g$flsin$14077$Uaprr)
              (flround . g$flround$14090$Uaprr)
              (flpositive? . g$flpositive?$14092$Uaprr)
              (flonum? . g$flonum?$12469$Uaprr)
              (flodd? . g$flodd?$14096$Uaprr)
              (flnegative? . g$flnegative?$14093$Uaprr)
              (flnan? . g$flnan?$14076$Uaprr)
              (flmod0 . g$flmod0$14070$Uaprr)
              (flmod . g$flmod$14069$Uaprr)
              (flmin . g$flmin$14098$Uaprr)
              (flmax . g$flmax$14097$Uaprr)
              (fllog . g$fllog$14083$Uaprr)
              (flinteger? . g$flinteger?$14073$Uaprr)
              (flinfinite? . g$flinfinite?$14075$Uaprr)
              (flfloor . g$flfloor$14088$Uaprr)
              (flfinite? . g$flfinite?$14074$Uaprr)
              (flexpt . g$flexpt$14086$Uaprr)
              (flexp . g$flexp$14085$Uaprr)
              (fleven? . g$fleven?$14095$Uaprr)
              (fldiv0-and-mod0 . g$fldiv0-and-mod0$14072$Uaprr)
              (fldiv-and-mod . g$fldiv-and-mod$14071$Uaprr)
              (flcos . g$flcos$14078$Uaprr)
              (flceiling . g$flceiling$14087$Uaprr)
              (flatan . g$flatan$14082$Uaprr)
              (flasin . g$flasin$14080$Uaprr)
              (flacos . g$flacos$14081$Uaprr)
              (flabs . g$flabs$14091$Uaprr)
              (fxzero? . g$fxzero?$13977$Uaprr)
              (fxxor . g$fxxor$13968$Uaprr)
              (fxrotate-bit-field . g$fxrotate-bit-field$13991$Uaprr)
              (fxpositive? . g$fxpositive?$13975$Uaprr)
              (fxodd? . g$fxodd?$13979$Uaprr)
              (fxnot . g$fxnot$13960$Uaprr)
              (fxnegative? . g$fxnegative?$13976$Uaprr)
              (fxmod0 . g$fxmod0$13971$Uaprr)
              (fxmod . g$fxmod$13970$Uaprr)
              (fxmin . g$fxmin$13981$Uaprr)
              (fxmax . g$fxmax$13980$Uaprr)
              (fxlength . g$fxlength$13957$Uaprr)
              (fxior . g$fxior$13967$Uaprr)
              (fxif . g$fxif$13985$Uaprr)
              (fxfirst-bit-set . g$fxfirst-bit-set$13958$Uaprr)
              (fxeven? . g$fxeven?$13978$Uaprr)
              (fxdiv0-and-mod0 . g$fxdiv0-and-mod0$13974$Uaprr)
              (fxdiv0 . g$fxdiv0$13973$Uaprr)
              (fxdiv-and-mod . g$fxdiv-and-mod$13972$Uaprr)
              (fxdiv . g$fxdiv$13969$Uaprr)
              (fxcopy-bit-field . g$fxcopy-bit-field$13988$Uaprr)
              (fxcopy-bit . g$fxcopy-bit$13986$Uaprr)
              (fxbit-set? . g$fxbit-set?$13959$Uaprr)
              (fxbit-field . g$fxbit-field$13987$Uaprr)
              (fxbit-count . g$fxbit-count$13956$Uaprr)
              (fxarithmetic-shift-right
                .
                g$fxarithmetic-shift-right$13990$Uaprr)
              (fxarithmetic-shift-left
                .
                g$fxarithmetic-shift-left$13989$Uaprr)
              (fxarithmetic-shift . g$fxarithmetic-shift$13955$Uaprr)
              (fxand . g$fxand$13966$Uaprr)
              (fx>? . g$fx>?$13964$Uaprr)
              (fx>=? . g$fx>=?$13965$Uaprr)
              (fx=? . g$fx=?$13961$Uaprr)
              (fx<? . g$fx<?$13962$Uaprr)
              (fx<=? . g$fx<=?$13963$Uaprr)
              (fx-/carry . g$fx-/carry$13983$Uaprr)
              (fx+/carry . g$fx+/carry$13984$Uaprr)
              (fx*/carry . g$fx*/carry$13982$Uaprr)
              (greatest-fixnum . g$greatest-fixnum$13953$Uaprr)
              (least-fixnum . g$least-fixnum$13954$Uaprr)
              (fixnum-width . g$fixnum-width$12470$Uaprr)
              (fixnum? . g$fixnum?$12468$Uaprr)
              (bitwise-rotate-bit-field
                .
                g$bitwise-rotate-bit-field$13629$Uaprr)
              (bitwise-if . g$bitwise-if$13623$Uaprr)
              (bitwise-copy-bit-field
                .
                g$bitwise-copy-bit-field$13626$Uaprr)
              (bitwise-copy-bit . g$bitwise-copy-bit$13624$Uaprr)
              (bitwise-bit-field . g$bitwise-bit-field$13625$Uaprr)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$13628$Uaprr)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$13627$Uaprr)
              (zero? . g$zero?$12504$Uaprr)
              (vector? . g$vector?$12463$Uaprr)
              (vector-map . g$vector-map$12526$Uaprr)
              (vector-for-each . g$vector-for-each$12527$Uaprr)
              (vector-fill! . g$vector-fill!$12471$Uaprr)
              (symbol? . g$symbol?$12465$Uaprr)
              (symbol=? . g$symbol=?$12516$Uaprr)
              (string>? . g$string>?$12513$Uaprr)
              (string>=? . g$string>=?$12515$Uaprr)
              (string=? . g$string=?$12511$Uaprr)
              (string<? . g$string<?$12512$Uaprr)
              (string<=? . g$string<=?$12514$Uaprr)
              (string-for-each . g$string-for-each$12528$Uaprr)
              (reverse . g$reverse$12473$Uaprr)
              (rationalize . g$rationalize$12523$Uaprr)
              (procedure? . g$procedure?$12467$Uaprr)
              (positive? . g$positive?$12502$Uaprr)
              (odd? . g$odd?$12506$Uaprr)
              (negative? . g$negative?$12503$Uaprr)
              (min . g$min$12508$Uaprr)
              (max . g$max$12507$Uaprr)
              (map . g$map$11722$Uaprr)
              (list-tail . g$list-tail$11702$Uaprr)
              (list-ref . g$list-ref$11703$Uaprr)
              (list->vector . g$list->vector$12460$Uaprr)
              (list->string . g$list->string$12461$Uaprr)
              (lcm . g$lcm$12510$Uaprr)
              (gcd . g$gcd$12509$Uaprr)
              (for-each . g$for-each$11723$Uaprr)
              (even? . g$even?$12505$Uaprr)
              (div0-and-mod0 . g$div0-and-mod0$12459$Uaprr)
              (mod0 . g$mod0$12457$Uaprr)
              (div-and-mod . g$div-and-mod$12458$Uaprr)
              (mod . g$mod$12456$Uaprr)
              (char? . g$char?$12462$Uaprr)
              (char>? . g$char>?$12520$Uaprr)
              (char>=? . g$char>=?$12522$Uaprr)
              (char=? . g$char=?$12518$Uaprr)
              (char<? . g$char<?$12519$Uaprr)
              (char<=? . g$char<=?$12521$Uaprr)
              (cddddr . g$cddddr$12501$Uaprr)
              (cdddar . g$cdddar$12500$Uaprr)
              (cddadr . g$cddadr$12499$Uaprr)
              (cddaar . g$cddaar$12498$Uaprr)
              (cdaddr . g$cdaddr$12497$Uaprr)
              (cdadar . g$cdadar$12496$Uaprr)
              (cdaadr . g$cdaadr$12495$Uaprr)
              (cdaaar . g$cdaaar$12494$Uaprr)
              (cadddr . g$cadddr$12493$Uaprr)
              (caddar . g$caddar$12492$Uaprr)
              (cadadr . g$cadadr$12491$Uaprr)
              (cadaar . g$cadaar$12490$Uaprr)
              (caaddr . g$caaddr$12489$Uaprr)
              (caadar . g$caadar$12488$Uaprr)
              (caaadr . g$caaadr$12487$Uaprr)
              (caaaar . g$caaaar$12486$Uaprr)
              (cdddr . g$cdddr$12485$Uaprr)
              (cddar . g$cddar$12484$Uaprr)
              (cdadr . g$cdadr$12483$Uaprr)
              (cdaar . g$cdaar$12482$Uaprr)
              (caddr . g$caddr$12481$Uaprr)
              (cadar . g$cadar$12480$Uaprr)
              (caadr . g$caadr$12479$Uaprr)
              (caaar . g$caaar$12478$Uaprr)
              (cddr . g$cddr$12477$Uaprr)
              (cdar . g$cdar$12476$Uaprr)
              (cadr . g$cadr$12475$Uaprr)
              (caar . g$caar$12474$Uaprr)
              (boolean? . g$boolean?$12466$Uaprr)
              (boolean=? . g$boolean=?$12517$Uaprr)
              (enum-set? . g$enum?$14308$Uaprr)
              (make-promise . g$make-promise$13403$Uaprr)
              (load/unload . g$load/unload$19997$Uaprr)
              (load/args . g$load/args$19996$Uaprr)
              (printf . g$printf$14363$Uaprr)
              (fprintf . g$fprintf$14364$Uaprr)
              (format . g$format$14365$Uaprr)
              (trace-printer . g$trace-printer$19993$Uaprr)
              (make-traced-macro . g$make-traced-macro$14369$Uaprr)
              (assertion-error . g$assertion-error$19915$Uaprr)
              (make-parameter . g$make-parameter$14574$Uaprr)
              (environment-bindings
                .
                g$environment-bindings$19893$Uaprr)
              (environment-symbols . g$environment-symbols$19896$Uaprr)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$19892$Uaprr)
              (library-path . g$library-path$15400$Uaprr)
              (make-compile-time-value
                .
                g$make-compile-time-value$19742$Uaprr)
              (expand->core . g$expand->core$19902$Uaprr)
              (expand . g$expand$19900$Uaprr)
              (syntax-transpose . g$syntax-transpose$19849$Uaprr)
              (convert->cps . g$convert->cps$15102$Uaprr)
              (installed-libraries . g$installed-libraries$15421$Uaprr)
              (uninstall-library . g$uninstall-library$15412$Uaprr)
              (pretty-gensyms . g$pretty-gensyms$14782$Uaprr)
              (pretty-width . g$pretty-width$14779$Uaprr)
              (pretty-print . g$pretty-print$14784$Uaprr)))))))
    (g$install-library$15416$Uaprr
      'g$11777$Uaprr
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$11770$Uaprr)
        (cosh . g$11769$Uaprr)
        (sinh . g$11768$Uaprr)
        (make-guid . g$11767$Uaprr)
        (unspecified? . g$11766$Uaprr)
        (make-list . g$5107$Uaprr)
        (last-pair . g$5106$Uaprr)
        (load-r5rs . g$11765$Uaprr)
        (license . g$11764$Uaprr)
        (stacktrace . g$11763$Uaprr)
        (ironscheme-build . g$11248$Uaprr)
        (remove-location . g$11750$Uaprr)
        (set-symbol-value! . g$11749$Uaprr)
        (symbol-value . g$11748$Uaprr)
        (symbol-bound? . g$11747$Uaprr)
        (ungensym . g$11746$Uaprr)
        (gensym . g$11745$Uaprr)
        (void . g$11744$Uaprr)
        (compile-system-libraries . g$11252$Uaprr)
        (compile->closure . g$11254$Uaprr)
        (compile . g$11253$Uaprr)
        (load . g$11247$Uaprr)
        (interaction-environment . g$8231$Uaprr)
        (string-upcase . g$11739$Uaprr)
        (string-titlecase . g$11738$Uaprr)
        (string-normalize-nfkd . g$6329$Uaprr)
        (string-normalize-nfkc . g$6328$Uaprr)
        (string-normalize-nfd . g$6327$Uaprr)
        (string-normalize-nfc . g$6326$Uaprr)
        (string-foldcase . g$11737$Uaprr)
        (string-downcase . g$11736$Uaprr)
        (string-ci>? . g$6313$Uaprr)
        (string-ci>=? . g$6315$Uaprr)
        (string-ci=? . g$6311$Uaprr)
        (string-ci<? . g$6312$Uaprr)
        (string-ci<=? . g$6314$Uaprr)
        (char-whitespace? . g$11735$Uaprr)
        (char-upper-case? . g$11734$Uaprr)
        (char-title-case? . g$11733$Uaprr)
        (char-numeric? . g$11732$Uaprr)
        (char-lower-case? . g$11731$Uaprr)
        (char-general-category . g$11730$Uaprr)
        (char-upcase . g$11729$Uaprr)
        (char-titlecase . g$11728$Uaprr)
        (char-foldcase . g$11727$Uaprr)
        (char-downcase . g$11726$Uaprr)
        (char-ci>? . g$6323$Uaprr)
        (char-ci>=? . g$6325$Uaprr)
        (char-ci=? . g$6321$Uaprr)
        (char-ci<? . g$6322$Uaprr)
        (char-ci<=? . g$6324$Uaprr)
        (char-alphabetic? . g$11725$Uaprr)
        (make-variable-transformer . g$7905$Uaprr)
        (identifier? . g$8225$Uaprr)
        (generate-temporaries . g$8214$Uaprr)
        (free-identifier=? . g$8215$Uaprr)
        (syntax->datum . g$8227$Uaprr)
        (datum->syntax . g$8226$Uaprr)
        (bound-identifier=? . g$8216$Uaprr)
        (record-type-descriptor? . g$11724$Uaprr)
        (record-predicate . g$11723$Uaprr)
        (record-mutator . g$11722$Uaprr)
        (record-constructor . g$11721$Uaprr)
        (record-accessor . g$11720$Uaprr)
        (make-record-type-descriptor . g$11719$Uaprr)
        (make-record-constructor-descriptor . g$11718$Uaprr)
        (record? . g$11717$Uaprr)
        (record-type-uid . g$11716$Uaprr)
        (record-type-sealed? . g$11715$Uaprr)
        (record-type-parent . g$11714$Uaprr)
        (record-type-opaque? . g$11713$Uaprr)
        (record-type-name . g$11712$Uaprr)
        (record-type-generative? . g$11711$Uaprr)
        (record-type-field-names . g$11710$Uaprr)
        (record-rtd . g$11709$Uaprr)
        (record-field-mutable? . g$11708$Uaprr)
        (delete-file . g$5720$Uaprr)
        (file-exists? . g$5719$Uaprr)
        (vector-sort! . g$11707$Uaprr)
        (vector-sort . g$11706$Uaprr)
        (list-sort . g$6282$Uaprr)
        (symbol-hash . g$11705$Uaprr)
        (string-ci-hash . g$11704$Uaprr)
        (string-hash . g$11703$Uaprr)
        (equal-hash . g$11702$Uaprr)
        (hashtable-equivalence-function . g$11701$Uaprr)
        (make-hashtable . g$11700$Uaprr)
        (hashtable-hash-function . g$11699$Uaprr)
        (make-eqv-hashtable . g$5687$Uaprr)
        (make-eq-hashtable . g$5686$Uaprr)
        (hashtable? . g$11698$Uaprr)
        (hashtable-update! . g$5693$Uaprr)
        (hashtable-size . g$5688$Uaprr)
        (hashtable-set! . g$5690$Uaprr)
        (hashtable-ref . g$5689$Uaprr)
        (hashtable-mutable? . g$11697$Uaprr)
        (hashtable-keys . g$11696$Uaprr)
        (hashtable-entries . g$11695$Uaprr)
        (hashtable-delete! . g$5691$Uaprr)
        (hashtable-copy . g$11694$Uaprr)
        (hashtable-contains? . g$5692$Uaprr)
        (hashtable-clear! . g$5694$Uaprr)
        (call-with-output-file . g$6730$Uaprr)
        (call-with-input-file . g$6729$Uaprr)
        (write-char . g$6721$Uaprr)
        (write . g$11693$Uaprr)
        (with-output-to-file . g$6728$Uaprr)
        (with-input-from-file . g$6727$Uaprr)
        (read-char . g$6720$Uaprr)
        (read . g$11692$Uaprr)
        (peek-char . g$6719$Uaprr)
        (open-output-file . g$11691$Uaprr)
        (open-input-file . g$11690$Uaprr)
        (newline . g$6731$Uaprr)
        (display . g$11689$Uaprr)
        (close-output-port . g$11688$Uaprr)
        (close-input-port . g$11687$Uaprr)
        (eof-object? . g$11686$Uaprr)
        (eof-object . g$11685$Uaprr)
        (current-error-port . g$11684$Uaprr)
        (current-output-port . g$11683$Uaprr)
        (current-input-port . g$11682$Uaprr)
        (output-port? . g$11681$Uaprr)
        (input-port? . g$11680$Uaprr)
        (utf-8-codec . g$11679$Uaprr)
        (utf-16-codec . g$11678$Uaprr)
        (transcoder-error-handling-mode . g$11677$Uaprr)
        (transcoder-eol-style . g$11676$Uaprr)
        (transcoder-codec . g$11675$Uaprr)
        (transcoded-port . g$11674$Uaprr)
        (textual-port? . g$11673$Uaprr)
        (string->bytevector . g$11672$Uaprr)
        (standard-output-port . g$11671$Uaprr)
        (standard-input-port . g$11670$Uaprr)
        (standard-error-port . g$11669$Uaprr)
        (set-port-position! . g$11668$Uaprr)
        (put-u8 . g$11667$Uaprr)
        (put-string . g$11666$Uaprr)
        (put-datum . g$6699$Uaprr)
        (put-char . g$11665$Uaprr)
        (put-bytevector . g$11664$Uaprr)
        (port? . g$6704$Uaprr)
        (port-transcoder . g$11663$Uaprr)
        (port-position . g$11662$Uaprr)
        (port-has-set-port-position!? . g$11661$Uaprr)
        (port-has-port-position? . g$11660$Uaprr)
        (port-eof? . g$11659$Uaprr)
        (output-port-buffer-mode . g$11658$Uaprr)
        (open-string-output-port . g$6703$Uaprr)
        (open-string-input-port . g$11657$Uaprr)
        (open-file-output-port . g$11656$Uaprr)
        (open-file-input/output-port . g$11655$Uaprr)
        (open-file-input-port . g$11654$Uaprr)
        (open-bytevector-output-port . g$11653$Uaprr)
        (open-bytevector-input-port . g$11652$Uaprr)
        (native-transcoder . g$11651$Uaprr)
        (native-eol-style . g$11650$Uaprr)
        (make-transcoder . g$11649$Uaprr)
        (latin-1-codec . g$11648$Uaprr)
        (make-i/o-write-error . g$6092$Uaprr)
        (make-i/o-read-error . g$6079$Uaprr)
        (make-i/o-port-error . g$6187$Uaprr)
        (make-i/o-invalid-position-error . g$6105$Uaprr)
        (make-i/o-filename-error . g$6120$Uaprr)
        (make-i/o-file-protection-error . g$6135$Uaprr)
        (make-i/o-file-is-read-only-error . g$6148$Uaprr)
        (make-i/o-file-does-not-exist-error . g$6174$Uaprr)
        (make-i/o-file-already-exists-error . g$6161$Uaprr)
        (make-i/o-error . g$6066$Uaprr)
        (make-i/o-encoding-error . g$6215$Uaprr)
        (make-i/o-decoding-error . g$6202$Uaprr)
        (make-custom-textual-output-port . g$11647$Uaprr)
        (make-custom-textual-input/output-port . g$11646$Uaprr)
        (make-custom-textual-input-port . g$11645$Uaprr)
        (make-custom-binary-output-port . g$11644$Uaprr)
        (make-custom-binary-input/output-port . g$11643$Uaprr)
        (make-custom-binary-input-port . g$11642$Uaprr)
        (make-bytevector . g$11641$Uaprr)
        (lookahead-u8 . g$11640$Uaprr)
        (lookahead-char . g$11639$Uaprr)
        (i/o-write-error? . g$6093$Uaprr)
        (i/o-read-error? . g$6080$Uaprr)
        (i/o-port-error? . g$6189$Uaprr)
        (i/o-invalid-position-error? . g$6107$Uaprr)
        (i/o-error-position . g$6108$Uaprr)
        (i/o-filename-error? . g$6122$Uaprr)
        (i/o-file-protection-error? . g$6136$Uaprr)
        (i/o-file-is-read-only-error? . g$6149$Uaprr)
        (i/o-file-does-not-exist-error? . g$6175$Uaprr)
        (i/o-file-already-exists-error? . g$6162$Uaprr)
        (i/o-error? . g$6067$Uaprr)
        (i/o-error-port . g$6190$Uaprr)
        (i/o-error-filename . g$6123$Uaprr)
        (i/o-encoding-error? . g$6217$Uaprr)
        (i/o-encoding-error-char . g$6218$Uaprr)
        (i/o-decoding-error? . g$6203$Uaprr)
        (get-u8 . g$11638$Uaprr)
        (get-string-n! . g$11637$Uaprr)
        (get-string-n . g$11636$Uaprr)
        (get-string-all . g$11635$Uaprr)
        (get-line . g$11634$Uaprr)
        (get-datum . g$6700$Uaprr)
        (get-char . g$11633$Uaprr)
        (get-bytevector-some . g$11632$Uaprr)
        (get-bytevector-n! . g$11631$Uaprr)
        (get-bytevector-n . g$11630$Uaprr)
        (get-bytevector-all . g$11629$Uaprr)
        (flush-output-port . g$11628$Uaprr)
        (close-port . g$11627$Uaprr)
        (call-with-string-output-port . g$6705$Uaprr)
        (call-with-port . g$6706$Uaprr)
        (call-with-bytevector-output-port . g$11626$Uaprr)
        (bytevector->string . g$11625$Uaprr)
        (buffer-mode? . g$11624$Uaprr)
        (binary-port? . g$11623$Uaprr)
        (scheme-report-environment . g$8204$Uaprr)
        (quotient . g$6261$Uaprr)
        (null-environment . g$8203$Uaprr)
        (remainder . g$6262$Uaprr)
        (modulo . g$6263$Uaprr)
        (inexact->exact . g$6258$Uaprr)
        (force . g$6265$Uaprr)
        (exact->inexact . g$6259$Uaprr)
        (exit . g$11622$Uaprr)
        (command-line . g$11243$Uaprr)
        (string-fill! . g$11621$Uaprr)
        (string-set! . g$11620$Uaprr)
        (set-cdr! . g$11619$Uaprr)
        (set-car! . g$11618$Uaprr)
        (remove . g$5129$Uaprr)
        (remv . g$5130$Uaprr)
        (remp . g$5110$Uaprr)
        (remq . g$5131$Uaprr)
        (partition . g$5109$Uaprr)
        (memv . g$5117$Uaprr)
        (memq . g$5116$Uaprr)
        (memp . g$5119$Uaprr)
        (member . g$5118$Uaprr)
        (exists . g$5123$Uaprr)
        (for-all . g$5122$Uaprr)
        (fold-right . g$5128$Uaprr)
        (fold-left . g$5127$Uaprr)
        (find . g$5108$Uaprr)
        (filter . g$5111$Uaprr)
        (cons* . g$5126$Uaprr)
        (assv . g$5113$Uaprr)
        (assq . g$5112$Uaprr)
        (assp . g$5115$Uaprr)
        (assoc . g$5114$Uaprr)
        (with-exception-handler . g$11617$Uaprr)
        (raise-continuable . g$11616$Uaprr)
        (raise . g$11615$Uaprr)
        (eval . g$8206$Uaprr)
        (environment . g$8202$Uaprr)
        (make-enumeration . g$6791$Uaprr)
        (enum-set=? . g$6798$Uaprr)
        (enum-set-universe . g$6792$Uaprr)
        (enum-set-union . g$6799$Uaprr)
        (enum-set-subset? . g$6797$Uaprr)
        (enum-set-projection . g$6803$Uaprr)
        (enum-set-member? . g$6796$Uaprr)
        (enum-set-intersection . g$6800$Uaprr)
        (enum-set-indexer . g$6793$Uaprr)
        (enum-set-difference . g$6801$Uaprr)
        (enum-set-constructor . g$6794$Uaprr)
        (enum-set-complement . g$6802$Uaprr)
        (enum-set->list . g$6795$Uaprr)
        (who-condition? . g$5984$Uaprr)
        (warning? . g$5903$Uaprr)
        (violation? . g$5942$Uaprr)
        (undefined-violation? . g$6054$Uaprr)
        (syntax-violation? . g$6039$Uaprr)
        (syntax-violation-subform . g$6041$Uaprr)
        (syntax-violation-form . g$6040$Uaprr)
        (syntax-violation . g$8224$Uaprr)
        (simple-conditions . g$11614$Uaprr)
        (serious-condition? . g$5916$Uaprr)
        (non-continuable-violation? . g$5998$Uaprr)
        (message-condition? . g$5889$Uaprr)
        (make-who-condition . g$5982$Uaprr)
        (make-warning . g$5902$Uaprr)
        (make-violation . g$5941$Uaprr)
        (make-undefined-violation . g$6053$Uaprr)
        (make-syntax-violation . g$6036$Uaprr)
        (make-serious-condition . g$5915$Uaprr)
        (make-non-continuable-violation . g$5997$Uaprr)
        (make-message-condition . g$5887$Uaprr)
        (make-lexical-violation . g$6023$Uaprr)
        (make-irritants-condition . g$5967$Uaprr)
        (make-implementation-restriction-violation . g$6010$Uaprr)
        (make-error . g$5928$Uaprr)
        (make-assertion-violation . g$5954$Uaprr)
        (lexical-violation? . g$6024$Uaprr)
        (irritants-condition? . g$5969$Uaprr)
        (implementation-restriction-violation? . g$6011$Uaprr)
        (error? . g$5929$Uaprr)
        (condition-who . g$5985$Uaprr)
        (condition-predicate . g$11613$Uaprr)
        (condition-message . g$5890$Uaprr)
        (condition-irritants . g$5970$Uaprr)
        (condition-accessor . g$11612$Uaprr)
        (condition . g$11611$Uaprr)
        (assertion-violation? . g$5955$Uaprr)
        (condition? . g$11610$Uaprr)
        (utf32->string . g$11609$Uaprr)
        (utf16->string . g$11608$Uaprr)
        (utf8->string . g$11607$Uaprr)
        (uint-list->bytevector . g$11606$Uaprr)
        (u8-list->bytevector . g$11605$Uaprr)
        (string->utf8 . g$11604$Uaprr)
        (string->utf32 . g$11603$Uaprr)
        (string->utf16 . g$11602$Uaprr)
        (sint-list->bytevector . g$11601$Uaprr)
        (native-endianness . g$5726$Uaprr)
        (bytevector? . g$5428$Uaprr)
        (bytevector=? . g$11600$Uaprr)
        (bytevector-uint-set! . g$11599$Uaprr)
        (bytevector-uint-ref . g$11598$Uaprr)
        (bytevector-u8-set! . g$11597$Uaprr)
        (bytevector-u8-ref . g$11596$Uaprr)
        (bytevector-u64-set! . g$5747$Uaprr)
        (bytevector-u64-ref . g$5743$Uaprr)
        (bytevector-u64-native-set! . g$5749$Uaprr)
        (bytevector-u64-native-ref . g$5745$Uaprr)
        (bytevector-u32-set! . g$5739$Uaprr)
        (bytevector-u32-ref . g$5735$Uaprr)
        (bytevector-u32-native-set! . g$5741$Uaprr)
        (bytevector-u32-native-ref . g$5737$Uaprr)
        (bytevector-u16-set! . g$5731$Uaprr)
        (bytevector-u16-ref . g$5727$Uaprr)
        (bytevector-u16-native-set! . g$5733$Uaprr)
        (bytevector-u16-native-ref . g$5729$Uaprr)
        (bytevector-sint-set! . g$11595$Uaprr)
        (bytevector-sint-ref . g$11594$Uaprr)
        (bytevector-s8-set! . g$11593$Uaprr)
        (bytevector-s8-ref . g$11592$Uaprr)
        (bytevector-s64-set! . g$5748$Uaprr)
        (bytevector-s64-ref . g$5744$Uaprr)
        (bytevector-s64-native-set! . g$5750$Uaprr)
        (bytevector-s64-native-ref . g$5746$Uaprr)
        (bytevector-s32-set! . g$5740$Uaprr)
        (bytevector-s32-ref . g$5736$Uaprr)
        (bytevector-s32-native-set! . g$5742$Uaprr)
        (bytevector-s32-native-ref . g$5738$Uaprr)
        (bytevector-s16-set! . g$5732$Uaprr)
        (bytevector-s16-ref . g$5728$Uaprr)
        (bytevector-s16-native-set! . g$5734$Uaprr)
        (bytevector-s16-native-ref . g$5730$Uaprr)
        (bytevector-length . g$11591$Uaprr)
        (bytevector-ieee-single-set! . g$11590$Uaprr)
        (bytevector-ieee-single-ref . g$11589$Uaprr)
        (bytevector-ieee-single-native-set! . g$5753$Uaprr)
        (bytevector-ieee-single-native-ref . g$5751$Uaprr)
        (bytevector-ieee-double-set! . g$11588$Uaprr)
        (bytevector-ieee-double-ref . g$11587$Uaprr)
        (bytevector-ieee-double-native-set! . g$5754$Uaprr)
        (bytevector-ieee-double-native-ref . g$5752$Uaprr)
        (bytevector-fill! . g$11586$Uaprr)
        (bytevector-copy! . g$11585$Uaprr)
        (bytevector-copy . g$11584$Uaprr)
        (bytevector->uint-list . g$11583$Uaprr)
        (bytevector->u8-list . g$11582$Uaprr)
        (bytevector->sint-list . g$11581$Uaprr)
        (no-nans-violation? . g$6244$Uaprr)
        (no-infinities-violation? . g$6231$Uaprr)
        (make-no-nans-violation . g$6243$Uaprr)
        (make-no-infinities-violation . g$6230$Uaprr)
        (real->flonum . g$11580$Uaprr)
        (flzero? . g$6645$Uaprr)
        (fltruncate . g$6640$Uaprr)
        (fltan . g$6630$Uaprr)
        (flsqrt . g$6635$Uaprr)
        (flsin . g$6628$Uaprr)
        (flround . g$6641$Uaprr)
        (flpositive? . g$6643$Uaprr)
        (flonum? . g$5433$Uaprr)
        (flodd? . g$6647$Uaprr)
        (flnumerator . g$11579$Uaprr)
        (flnegative? . g$6644$Uaprr)
        (flnan? . g$6627$Uaprr)
        (flmod0 . g$6621$Uaprr)
        (flmod . g$6620$Uaprr)
        (flmin . g$6649$Uaprr)
        (flmax . g$6648$Uaprr)
        (fllog . g$6634$Uaprr)
        (flinteger? . g$6624$Uaprr)
        (flinfinite? . g$6626$Uaprr)
        (flfloor . g$6639$Uaprr)
        (flfinite? . g$6625$Uaprr)
        (flexpt . g$6637$Uaprr)
        (flexp . g$6636$Uaprr)
        (fleven? . g$6646$Uaprr)
        (fldiv0-and-mod0 . g$6623$Uaprr)
        (fldiv0 . g$11578$Uaprr)
        (fldiv-and-mod . g$6622$Uaprr)
        (fldiv . g$11577$Uaprr)
        (fldenominator . g$11576$Uaprr)
        (flcos . g$6629$Uaprr)
        (flceiling . g$6638$Uaprr)
        (flatan . g$6633$Uaprr)
        (flasin . g$6631$Uaprr)
        (flacos . g$6632$Uaprr)
        (flabs . g$6642$Uaprr)
        (fl>? . g$11575$Uaprr)
        (fl>=? . g$11574$Uaprr)
        (fl=? . g$11573$Uaprr)
        (fl<? . g$11572$Uaprr)
        (fl<=? . g$11571$Uaprr)
        (fl/ . g$11570$Uaprr)
        (fl- . g$11569$Uaprr)
        (fl+ . g$11568$Uaprr)
        (fl* . g$11567$Uaprr)
        (fixnum->flonum . g$11566$Uaprr)
        (fxzero? . g$6465$Uaprr)
        (fxxor . g$6456$Uaprr)
        (fxrotate-bit-field . g$6479$Uaprr)
        (fxreverse-bit-field . g$11565$Uaprr)
        (fxpositive? . g$6463$Uaprr)
        (fxodd? . g$6467$Uaprr)
        (fxnot . g$6437$Uaprr)
        (fxnegative? . g$6464$Uaprr)
        (fxmod0 . g$6459$Uaprr)
        (fxmod . g$6458$Uaprr)
        (fxmin . g$6469$Uaprr)
        (fxmax . g$6468$Uaprr)
        (fxlength . g$6434$Uaprr)
        (fxior . g$6455$Uaprr)
        (fxif . g$6473$Uaprr)
        (fxfirst-bit-set . g$6435$Uaprr)
        (fxeven? . g$6466$Uaprr)
        (fxdiv0-and-mod0 . g$6462$Uaprr)
        (fxdiv0 . g$6461$Uaprr)
        (fxdiv-and-mod . g$6460$Uaprr)
        (fxdiv . g$6457$Uaprr)
        (fxcopy-bit-field . g$6476$Uaprr)
        (fxcopy-bit . g$6474$Uaprr)
        (fxbit-set? . g$6436$Uaprr)
        (fxbit-field . g$6475$Uaprr)
        (fxbit-count . g$6433$Uaprr)
        (fxarithmetic-shift-right . g$6478$Uaprr)
        (fxarithmetic-shift-left . g$6477$Uaprr)
        (fxarithmetic-shift . g$6432$Uaprr)
        (fxand . g$6454$Uaprr)
        (fx>? . g$6446$Uaprr)
        (fx>=? . g$6447$Uaprr)
        (fx=? . g$6443$Uaprr)
        (fx<? . g$6444$Uaprr)
        (fx<=? . g$6445$Uaprr)
        (fx-/carry . g$6471$Uaprr)
        (fx- . g$11564$Uaprr)
        (fx+/carry . g$6472$Uaprr)
        (fx+ . g$11563$Uaprr)
        (fx*/carry . g$6470$Uaprr)
        (fx* . g$11562$Uaprr)
        (greatest-fixnum . g$6430$Uaprr)
        (least-fixnum . g$6431$Uaprr)
        (fixnum-width . g$5434$Uaprr)
        (fixnum? . g$5432$Uaprr)
        (bitwise-rotate-bit-field . g$6393$Uaprr)
        (bitwise-reverse-bit-field . g$11561$Uaprr)
        (bitwise-length . g$11560$Uaprr)
        (bitwise-if . g$6387$Uaprr)
        (bitwise-first-bit-set . g$11559$Uaprr)
        (bitwise-copy-bit-field . g$6390$Uaprr)
        (bitwise-copy-bit . g$6388$Uaprr)
        (bitwise-bit-set? . g$11558$Uaprr)
        (bitwise-bit-field . g$6389$Uaprr)
        (bitwise-bit-count . g$11557$Uaprr)
        (bitwise-xor . g$11556$Uaprr)
        (bitwise-ior . g$11555$Uaprr)
        (bitwise-and . g$11554$Uaprr)
        (bitwise-not . g$11553$Uaprr)
        (bitwise-arithmetic-shift-right . g$6392$Uaprr)
        (bitwise-arithmetic-shift-left . g$6391$Uaprr)
        (bitwise-arithmetic-shift . g$11552$Uaprr)
        (zero? . g$5468$Uaprr)
        (vector? . g$5427$Uaprr)
        (vector-set! . g$11551$Uaprr)
        (vector-ref . g$11550$Uaprr)
        (vector-map . g$5500$Uaprr)
        (vector-length . g$11549$Uaprr)
        (vector-for-each . g$5501$Uaprr)
        (vector-fill! . g$5435$Uaprr)
        (vector->list . g$11548$Uaprr)
        (vector . g$11547$Uaprr)
        (values . g$11546$Uaprr)
        (truncate . g$11545$Uaprr)
        (tan . g$11544$Uaprr)
        (symbol? . g$5429$Uaprr)
        (symbol=? . g$5485$Uaprr)
        (symbol->string . g$11543$Uaprr)
        (substring . g$11542$Uaprr)
        (string? . g$11541$Uaprr)
        (string>? . g$5482$Uaprr)
        (string>=? . g$5484$Uaprr)
        (string=? . g$5480$Uaprr)
        (string<? . g$5481$Uaprr)
        (string<=? . g$5483$Uaprr)
        (string-ref . g$11540$Uaprr)
        (string-length . g$11539$Uaprr)
        (string-for-each . g$5502$Uaprr)
        (string-copy . g$11538$Uaprr)
        (string-append . g$11537$Uaprr)
        (string->symbol . g$11536$Uaprr)
        (string->number . g$11535$Uaprr)
        (string->list . g$11534$Uaprr)
        (string . g$11533$Uaprr)
        (sqrt . g$11532$Uaprr)
        (sin . g$11531$Uaprr)
        (round . g$11530$Uaprr)
        (reverse . g$5437$Uaprr)
        (real? . g$11529$Uaprr)
        (real-valued? . g$11528$Uaprr)
        (real-part . g$11527$Uaprr)
        (rationalize . g$5497$Uaprr)
        (rational? . g$11526$Uaprr)
        (rational-valued? . g$11525$Uaprr)
        (procedure? . g$5431$Uaprr)
        (positive? . g$5466$Uaprr)
        (pair? . g$11524$Uaprr)
        (odd? . g$5470$Uaprr)
        (numerator . g$11523$Uaprr)
        (number? . g$11522$Uaprr)
        (number->string . g$11521$Uaprr)
        (null? . g$11520$Uaprr)
        (not . g$11519$Uaprr)
        (negative? . g$5467$Uaprr)
        (nan? . g$11518$Uaprr)
        (min . g$5472$Uaprr)
        (max . g$5471$Uaprr)
        (map . g$5124$Uaprr)
        (make-vector . g$11517$Uaprr)
        (make-string . g$11516$Uaprr)
        (make-rectangular . g$11515$Uaprr)
        (make-polar . g$11514$Uaprr)
        (magnitude . g$11513$Uaprr)
        (log . g$11512$Uaprr)
        (list? . g$11511$Uaprr)
        (list-tail . g$5104$Uaprr)
        (list-ref . g$5105$Uaprr)
        (list->vector . g$5424$Uaprr)
        (list->string . g$5425$Uaprr)
        (list . g$11510$Uaprr)
        (length . g$11509$Uaprr)
        (lcm . g$5474$Uaprr)
        (integer? . g$11508$Uaprr)
        (integer-valued? . g$11507$Uaprr)
        (integer->char . g$11506$Uaprr)
        (infinite? . g$11505$Uaprr)
        (inexact? . g$11504$Uaprr)
        (inexact . g$11503$Uaprr)
        (imag-part . g$11502$Uaprr)
        (gcd . g$5473$Uaprr)
        (for-each . g$5125$Uaprr)
        (floor . g$11501$Uaprr)
        (finite? . g$11500$Uaprr)
        (expt . g$11499$Uaprr)
        (exp . g$11498$Uaprr)
        (exact? . g$11497$Uaprr)
        (exact-integer-sqrt . g$11496$Uaprr)
        (exact . g$11495$Uaprr)
        (even? . g$5469$Uaprr)
        (error . g$11494$Uaprr)
        (eqv? . g$11493$Uaprr)
        (equal? . g$11492$Uaprr)
        (eq? . g$11491$Uaprr)
        (dynamic-wind . g$11490$Uaprr)
        (div0-and-mod0 . g$5423$Uaprr)
        (mod0 . g$5421$Uaprr)
        (div0 . g$11489$Uaprr)
        (div-and-mod . g$5422$Uaprr)
        (mod . g$5420$Uaprr)
        (div . g$11488$Uaprr)
        (denominator . g$11487$Uaprr)
        (cos . g$11486$Uaprr)
        (cons . g$11485$Uaprr)
        (complex? . g$11484$Uaprr)
        (char? . g$5426$Uaprr)
        (char>? . g$5494$Uaprr)
        (char>=? . g$5496$Uaprr)
        (char=? . g$5492$Uaprr)
        (char<? . g$5493$Uaprr)
        (char<=? . g$5495$Uaprr)
        (char->integer . g$11483$Uaprr)
        (ceiling . g$11482$Uaprr)
        (call-with-values . g$11481$Uaprr)
        (call/cc . g$11480$Uaprr)
        (call-with-current-continuation . g$11479$Uaprr)
        (cddddr . g$5465$Uaprr)
        (cdddar . g$5464$Uaprr)
        (cddadr . g$5463$Uaprr)
        (cddaar . g$5462$Uaprr)
        (cdaddr . g$5461$Uaprr)
        (cdadar . g$5460$Uaprr)
        (cdaadr . g$5459$Uaprr)
        (cdaaar . g$5458$Uaprr)
        (cadddr . g$5457$Uaprr)
        (caddar . g$5456$Uaprr)
        (cadadr . g$5455$Uaprr)
        (cadaar . g$5454$Uaprr)
        (caaddr . g$5453$Uaprr)
        (caadar . g$5452$Uaprr)
        (caaadr . g$5451$Uaprr)
        (caaaar . g$5450$Uaprr)
        (cdddr . g$5449$Uaprr)
        (cddar . g$5448$Uaprr)
        (cdadr . g$5447$Uaprr)
        (cdaar . g$5446$Uaprr)
        (caddr . g$5445$Uaprr)
        (cadar . g$5444$Uaprr)
        (caadr . g$5443$Uaprr)
        (caaar . g$5442$Uaprr)
        (cddr . g$5441$Uaprr)
        (cdar . g$5440$Uaprr)
        (cadr . g$5439$Uaprr)
        (caar . g$5438$Uaprr)
        (cdr . g$11478$Uaprr)
        (car . g$11477$Uaprr)
        (boolean? . g$5430$Uaprr)
        (boolean=? . g$5486$Uaprr)
        (atan . g$11476$Uaprr)
        (assertion-violation . g$11475$Uaprr)
        (asin . g$11474$Uaprr)
        (apply . g$11473$Uaprr)
        (append . g$11472$Uaprr)
        (angle . g$11471$Uaprr)
        (acos . g$11470$Uaprr)
        (abs . g$11469$Uaprr)
        (/ . g$11468$Uaprr)
        (* . g$11467$Uaprr)
        (- . g$11466$Uaprr)
        (+ . g$11465$Uaprr)
        (>= . g$11464$Uaprr)
        (> . g$11463$Uaprr)
        (= . g$11462$Uaprr)
        (<= . g$11461$Uaprr)
        (< . g$11460$Uaprr)
        (deserialize-port . g$11433$Uaprr)
        (serialize-port . g$11432$Uaprr)
        (enum-set? . g$6768$Uaprr)
        (load/unload . g$11246$Uaprr)
        (load/args . g$11245$Uaprr)
        (printf . g$6877$Uaprr)
        (fprintf . g$6878$Uaprr)
        (format . g$6879$Uaprr)
        (procedure-form . g$11431$Uaprr)
        (procedure-environment . g$11430$Uaprr)
        (procedure-name . g$11429$Uaprr)
        (procedure-arity . g$11428$Uaprr)
        (gc-collect . g$11427$Uaprr)
        (typeof . g$11426$Uaprr)
        (clr-type? . g$11425$Uaprr)
        (get-clr-type . g$11424$Uaprr)
        (vector-append . g$11422$Uaprr)
        (vector-filter . g$11421$Uaprr)
        (vector-reverse! . g$11420$Uaprr)
        (vector-contains? . g$11419$Uaprr)
        (vector-index-of . g$11418$Uaprr)
        (vector-copy . g$11417$Uaprr)
        (vector-binary-search . g$11416$Uaprr)
        (string-ci-compare . g$11415$Uaprr)
        (string-compare . g$11414$Uaprr)
        (string-format . g$11413$Uaprr)
        (trace-printer . g$11242$Uaprr)
        (time-it . g$11411$Uaprr)
        (make-parameter . g$6906$Uaprr)
        (open-tcp-input/output-port . g$11408$Uaprr)
        (hashtable-for-each . g$11407$Uaprr)
        (hashtable-map . g$11406$Uaprr)
        (environment-bindings . g$8198$Uaprr)
        (environment-symbols . g$8201$Uaprr)
        (interaction-environment-symbols . g$8197$Uaprr)
        (optimization-level . g$11405$Uaprr)
        (library-path . g$7528$Uaprr)
        (make-compile-time-value . g$7906$Uaprr)
        (expand->core . g$8207$Uaprr)
        (expand . g$8205$Uaprr)
        (syntax-transpose . g$8144$Uaprr)
        (convert->cps . g$7225$Uaprr)
        (installed-libraries . g$7549$Uaprr)
        (uninstall-library . g$7540$Uaprr)
        (pretty-gensyms . g$6989$Uaprr)
        (pretty-width . g$6986$Uaprr)
        (pretty-print . g$6991$Uaprr)
        (&no-nans . g$11404$Uaprr)
        (&no-infinities . g$11403$Uaprr)
        (&i/o-encoding . g$11402$Uaprr)
        (&i/o-decoding . g$11401$Uaprr)
        (&i/o-port . g$11400$Uaprr)
        (&i/o-file-does-not-exist . g$11399$Uaprr)
        (&i/o-file-already-exists . g$11398$Uaprr)
        (&i/o-file-is-read-only . g$11397$Uaprr)
        (&i/o-file-protection . g$11396$Uaprr)
        (&i/o-filename . g$11395$Uaprr)
        (&i/o-invalid-position . g$11394$Uaprr)
        (&i/o-write . g$11393$Uaprr)
        (&i/o-read . g$11392$Uaprr)
        (&i/o . g$11391$Uaprr)
        (&non-continuable . g$11390$Uaprr)
        (&undefined . g$11389$Uaprr)
        (&syntax . g$11388$Uaprr)
        (&lexical . g$11387$Uaprr)
        (&implementation-restriction . g$11386$Uaprr)
        (&who . g$11385$Uaprr)
        (&irritants . g$11384$Uaprr)
        (&assertion . g$11383$Uaprr)
        (&violation . g$11382$Uaprr)
        (&error . g$11381$Uaprr)
        (&serious . g$11380$Uaprr)
        (&warning . g$11379$Uaprr)
        (&message . g$11378$Uaprr)
        (&condition . g$11377$Uaprr)
        (define-condition-type . g$11376$Uaprr)
        (define-enumeration . g$11375$Uaprr)
        (define-record-type . g$11374$Uaprr)
        (parent-rtd . g$11373$Uaprr)
        (nongenerative . g$11372$Uaprr)
        (opaque . g$11371$Uaprr)
        (sealed . g$11370$Uaprr)
        (protocol . g$11369$Uaprr)
        (parent . g$11368$Uaprr)
        (immutable . g$11367$Uaprr)
        (mutable . g$11366$Uaprr)
        (fields . g$11365$Uaprr)
        (error-handling-mode . g$11364$Uaprr)
        (file-options . g$11363$Uaprr)
        (buffer-mode . g$11362$Uaprr)
        (eol-style . g$11361$Uaprr)
        (guard . g$11360$Uaprr)
        (trace-letrec-syntax . g$11359$Uaprr)
        (trace-let-syntax . g$11358$Uaprr)
        (trace-define-syntax . g$11357$Uaprr)
        (trace-define . g$11356$Uaprr)
        (trace-lambda . g$11355$Uaprr)
        (unsyntax-splicing . g$11354$Uaprr)
        (unsyntax . g$11353$Uaprr)
        (unquote-splicing . g$11352$Uaprr)
        (unquote . g$11351$Uaprr)
        (_ . g$11350$Uaprr)
        (else . g$11349$Uaprr)
        (=> . g$11348$Uaprr)
        (... . g$11347$Uaprr)
        (assert . g$11346$Uaprr)
        (endianness . g$11345$Uaprr)
        (delay . g$11344$Uaprr)
        (time . g$11343$Uaprr)
        (or . g$11342$Uaprr)
        (and . g$11341$Uaprr)
        (do . g$11340$Uaprr)
        (cond . g$11339$Uaprr)
        (let* . g$11338$Uaprr)
        (let . g$11337$Uaprr)
        (identifier-syntax . g$11336$Uaprr)
        (with-syntax . g$11335$Uaprr)
        (quasisyntax . g$11334$Uaprr)
        (quasiquote . g$11333$Uaprr)
        (syntax-rules . g$11332$Uaprr)
        (include-into . g$11331$Uaprr)
        (include . g$11330$Uaprr)
        (let-values . g$11328$Uaprr)
        (let*-values . g$11327$Uaprr)
        (record-constructor-descriptor . g$11326$Uaprr)
        (record-type-descriptor . g$11325$Uaprr)
        (fluid-let-syntax . g$11324$Uaprr)
        (case . g$11323$Uaprr)
        (parameterize . g$11322$Uaprr)
        (unless . g$11321$Uaprr)
        (when . g$11320$Uaprr)
        (if . g$11319$Uaprr)
        (letrec* . g$11318$Uaprr)
        (letrec . g$11317$Uaprr)
        (case-lambda . g$11315$Uaprr)
        (lambda . g$11314$Uaprr)
        (syntax . g$11313$Uaprr)
        (syntax-case . g$11312$Uaprr)
        (quote . g$11311$Uaprr)
        (letrec-syntax . g$11309$Uaprr)
        (let-syntax . g$11308$Uaprr)
        (set! . g$11307$Uaprr)
        (export . g$11306$Uaprr)
        (import . g$11305$Uaprr)
        (library . g$11304$Uaprr)
        (begin . g$11303$Uaprr)
        (module . g$11302$Uaprr)
        (define-syntax . g$11301$Uaprr)
        (define . g$11300$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11778$Uaprr
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$11409$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$15416$Uaprr
      'g$11779$Uaprr
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$11775$Uaprr)
        (annotation-source . g$11774$Uaprr)
        (annotation-expression . g$11773$Uaprr)
        (annotation? . g$11772$Uaprr)
        (read-annotated . g$11771$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$15416$Uaprr
      'g$11780$Uaprr
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$11743$Uaprr)
        (serialize-library . g$11742$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$15416$Uaprr
      'g$11781$Uaprr
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((string-normalize . g$11741$Uaprr)
        (variable-transformer-procedure . g$7908$Uaprr)
        (variable-transformer? . g$7907$Uaprr)
        (eqv-hash . g$11435$Uaprr)
        (reverse! . g$11434$Uaprr)
        (make-promise . g$6264$Uaprr)
        (format . g$6879$Uaprr)
        (get-command-line . g$11423$Uaprr)
        (make-traced-procedure . g$11412$Uaprr)
        (make-traced-macro . g$6899$Uaprr)
        (assertion-error . g$8220$Uaprr)
        (library-locator . g$11410$Uaprr)
        (get-library-paths . g$11409$Uaprr)
        (library-path . g$7528$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$15416$Uaprr
      'g$11782$Uaprr
      '(ironscheme unsafe)
      '()
      '()
      '()
      '()
      '(($fxarithmetic-shift-right . g$11459$Uaprr)
        ($fxarithmetic-shift-left . g$11458$Uaprr)
        ($$fx- . g$11457$Uaprr)
        ($$fx* . g$11456$Uaprr)
        ($$fx+ . g$11455$Uaprr)
        ($fxnot . g$11454$Uaprr)
        ($fxxor . g$11453$Uaprr)
        ($fxior . g$11452$Uaprr)
        ($fxand . g$11451$Uaprr)
        ($fx>=? . g$11450$Uaprr)
        ($fx>? . g$11449$Uaprr)
        ($fx<=? . g$11448$Uaprr)
        ($fx<? . g$11447$Uaprr)
        ($fx- . g$11446$Uaprr)
        ($fxmod0 . g$11445$Uaprr)
        ($fxdiv0 . g$11444$Uaprr)
        ($fx* . g$11443$Uaprr)
        ($fx+ . g$11442$Uaprr)
        ($fx=? . g$11441$Uaprr)
        ($vector-set! . g$11440$Uaprr)
        ($vector-ref . g$11439$Uaprr)
        ($cdr . g$11438$Uaprr)
        ($car . g$11437$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$15416$Uaprr
      'g$11783$Uaprr
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$11436$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11784$Uaprr
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$11762$Uaprr)
        (clr-field-set!-internal . g$11761$Uaprr)
        (clr-field-get-internal . g$11760$Uaprr)
        (clr-cast-internal . g$11759$Uaprr)
        (clr-call-internal . g$11758$Uaprr)
        (clr-new-internal . g$11757$Uaprr)
        (clr-new-array-internal . g$11756$Uaprr)
        (clr-is-internal . g$11755$Uaprr)
        (clr-reference-internal . g$11754$Uaprr)
        (clr-using-internal . g$11753$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11785$Uaprr
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$11352$Uaprr)
        (unquote . g$11351$Uaprr)
        (else . g$11349$Uaprr)
        (=> . g$11348$Uaprr)
        (delay . g$11344$Uaprr)
        (or . g$11342$Uaprr)
        (and . g$11341$Uaprr)
        (do . g$11340$Uaprr)
        (cond . g$11339$Uaprr)
        (let* . g$11338$Uaprr)
        (let . g$11337$Uaprr)
        (quasiquote . g$11333$Uaprr)
        (syntax-rules . g$11332$Uaprr)
        (case . g$11323$Uaprr)
        (if . g$11319$Uaprr)
        (letrec . g$11317$Uaprr)
        (lambda . g$11314$Uaprr)
        (quote . g$11311$Uaprr)
        (letrec-syntax . g$11309$Uaprr)
        (let-syntax . g$11308$Uaprr)
        (set! . g$11307$Uaprr)
        (begin . g$11303$Uaprr)
        (define-syntax . g$11301$Uaprr)
        (define . g$11300$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$15416$Uaprr
      'g$11786$Uaprr
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((char-ready? . g$11740$Uaprr)
        (string-ci>? . g$6313$Uaprr)
        (string-ci>=? . g$6315$Uaprr)
        (string-ci=? . g$6311$Uaprr)
        (string-ci<? . g$6312$Uaprr)
        (string-ci<=? . g$6314$Uaprr)
        (char-whitespace? . g$11735$Uaprr)
        (char-upper-case? . g$11734$Uaprr)
        (char-numeric? . g$11732$Uaprr)
        (char-lower-case? . g$11731$Uaprr)
        (char-upcase . g$11729$Uaprr)
        (char-downcase . g$11726$Uaprr)
        (char-ci>? . g$6323$Uaprr)
        (char-ci>=? . g$6325$Uaprr)
        (char-ci=? . g$6321$Uaprr)
        (char-ci<? . g$6322$Uaprr)
        (char-ci<=? . g$6324$Uaprr)
        (char-alphabetic? . g$11725$Uaprr)
        (call-with-output-file . g$6730$Uaprr)
        (call-with-input-file . g$6729$Uaprr)
        (write-char . g$6721$Uaprr)
        (write . g$11693$Uaprr)
        (with-output-to-file . g$6728$Uaprr)
        (with-input-from-file . g$6727$Uaprr)
        (read-char . g$6720$Uaprr)
        (read . g$11692$Uaprr)
        (peek-char . g$6719$Uaprr)
        (open-output-file . g$11691$Uaprr)
        (open-input-file . g$11690$Uaprr)
        (newline . g$6731$Uaprr)
        (display . g$11689$Uaprr)
        (close-output-port . g$11688$Uaprr)
        (close-input-port . g$11687$Uaprr)
        (eof-object? . g$11686$Uaprr)
        (current-error-port . g$11684$Uaprr)
        (current-output-port . g$11683$Uaprr)
        (current-input-port . g$11682$Uaprr)
        (output-port? . g$11681$Uaprr)
        (input-port? . g$11680$Uaprr)
        (scheme-report-environment . g$8204$Uaprr)
        (quotient . g$6261$Uaprr)
        (null-environment . g$8203$Uaprr)
        (remainder . g$6262$Uaprr)
        (modulo . g$6263$Uaprr)
        (inexact->exact . g$6258$Uaprr)
        (force . g$6265$Uaprr)
        (exact->inexact . g$6259$Uaprr)
        (string-fill! . g$11621$Uaprr)
        (string-set! . g$11620$Uaprr)
        (set-cdr! . g$11619$Uaprr)
        (set-car! . g$11618$Uaprr)
        (memv . g$5117$Uaprr)
        (memq . g$5116$Uaprr)
        (member . g$5118$Uaprr)
        (assv . g$5113$Uaprr)
        (assq . g$5112$Uaprr)
        (assoc . g$5114$Uaprr)
        (eval . g$8206$Uaprr)
        (zero? . g$5468$Uaprr)
        (vector? . g$5427$Uaprr)
        (vector-set! . g$11551$Uaprr)
        (vector-ref . g$11550$Uaprr)
        (vector-length . g$11549$Uaprr)
        (vector-fill! . g$5435$Uaprr)
        (vector->list . g$11548$Uaprr)
        (vector . g$11547$Uaprr)
        (values . g$11546$Uaprr)
        (truncate . g$11545$Uaprr)
        (tan . g$11544$Uaprr)
        (symbol? . g$5429$Uaprr)
        (symbol->string . g$11543$Uaprr)
        (substring . g$11542$Uaprr)
        (string? . g$11541$Uaprr)
        (string>? . g$5482$Uaprr)
        (string>=? . g$5484$Uaprr)
        (string=? . g$5480$Uaprr)
        (string<? . g$5481$Uaprr)
        (string<=? . g$5483$Uaprr)
        (string-ref . g$11540$Uaprr)
        (string-length . g$11539$Uaprr)
        (string-copy . g$11538$Uaprr)
        (string-append . g$11537$Uaprr)
        (string->symbol . g$11536$Uaprr)
        (string->number . g$11535$Uaprr)
        (string->list . g$11534$Uaprr)
        (string . g$11533$Uaprr)
        (sqrt . g$11532$Uaprr)
        (sin . g$11531$Uaprr)
        (round . g$11530$Uaprr)
        (reverse . g$5437$Uaprr)
        (real? . g$11529$Uaprr)
        (real-part . g$11527$Uaprr)
        (rationalize . g$5497$Uaprr)
        (rational? . g$11526$Uaprr)
        (procedure? . g$5431$Uaprr)
        (positive? . g$5466$Uaprr)
        (pair? . g$11524$Uaprr)
        (odd? . g$5470$Uaprr)
        (numerator . g$11523$Uaprr)
        (number? . g$11522$Uaprr)
        (number->string . g$11521$Uaprr)
        (null? . g$11520$Uaprr)
        (not . g$11519$Uaprr)
        (negative? . g$5467$Uaprr)
        (min . g$5472$Uaprr)
        (max . g$5471$Uaprr)
        (map . g$5124$Uaprr)
        (make-vector . g$11517$Uaprr)
        (make-string . g$11516$Uaprr)
        (make-rectangular . g$11515$Uaprr)
        (make-polar . g$11514$Uaprr)
        (magnitude . g$11513$Uaprr)
        (log . g$11512$Uaprr)
        (list? . g$11511$Uaprr)
        (list-tail . g$5104$Uaprr)
        (list-ref . g$5105$Uaprr)
        (list->vector . g$5424$Uaprr)
        (list->string . g$5425$Uaprr)
        (list . g$11510$Uaprr)
        (length . g$11509$Uaprr)
        (lcm . g$5474$Uaprr)
        (integer? . g$11508$Uaprr)
        (integer->char . g$11506$Uaprr)
        (inexact? . g$11504$Uaprr)
        (imag-part . g$11502$Uaprr)
        (gcd . g$5473$Uaprr)
        (for-each . g$5125$Uaprr)
        (floor . g$11501$Uaprr)
        (expt . g$11499$Uaprr)
        (exp . g$11498$Uaprr)
        (exact? . g$11497$Uaprr)
        (even? . g$5469$Uaprr)
        (eqv? . g$11493$Uaprr)
        (equal? . g$11492$Uaprr)
        (eq? . g$11491$Uaprr)
        (dynamic-wind . g$11490$Uaprr)
        (denominator . g$11487$Uaprr)
        (cos . g$11486$Uaprr)
        (cons . g$11485$Uaprr)
        (complex? . g$11484$Uaprr)
        (char? . g$5426$Uaprr)
        (char>? . g$5494$Uaprr)
        (char>=? . g$5496$Uaprr)
        (char=? . g$5492$Uaprr)
        (char<? . g$5493$Uaprr)
        (char<=? . g$5495$Uaprr)
        (char->integer . g$11483$Uaprr)
        (ceiling . g$11482$Uaprr)
        (call-with-values . g$11481$Uaprr)
        (call-with-current-continuation . g$11479$Uaprr)
        (cddddr . g$5465$Uaprr)
        (cdddar . g$5464$Uaprr)
        (cddadr . g$5463$Uaprr)
        (cddaar . g$5462$Uaprr)
        (cdaddr . g$5461$Uaprr)
        (cdadar . g$5460$Uaprr)
        (cdaadr . g$5459$Uaprr)
        (cdaaar . g$5458$Uaprr)
        (cadddr . g$5457$Uaprr)
        (caddar . g$5456$Uaprr)
        (cadadr . g$5455$Uaprr)
        (cadaar . g$5454$Uaprr)
        (caaddr . g$5453$Uaprr)
        (caadar . g$5452$Uaprr)
        (caaadr . g$5451$Uaprr)
        (caaaar . g$5450$Uaprr)
        (cdddr . g$5449$Uaprr)
        (cddar . g$5448$Uaprr)
        (cdadr . g$5447$Uaprr)
        (cdaar . g$5446$Uaprr)
        (caddr . g$5445$Uaprr)
        (cadar . g$5444$Uaprr)
        (caadr . g$5443$Uaprr)
        (caaar . g$5442$Uaprr)
        (cddr . g$5441$Uaprr)
        (cdar . g$5440$Uaprr)
        (cadr . g$5439$Uaprr)
        (caar . g$5438$Uaprr)
        (cdr . g$11478$Uaprr)
        (car . g$11477$Uaprr)
        (boolean? . g$5430$Uaprr)
        (atan . g$11476$Uaprr)
        (asin . g$11474$Uaprr)
        (apply . g$11473$Uaprr)
        (append . g$11472$Uaprr)
        (angle . g$11471$Uaprr)
        (acos . g$11470$Uaprr)
        (abs . g$11469$Uaprr)
        (/ . g$11468$Uaprr)
        (* . g$11467$Uaprr)
        (- . g$11466$Uaprr)
        (+ . g$11465$Uaprr)
        (>= . g$11464$Uaprr)
        (> . g$11463$Uaprr)
        (= . g$11462$Uaprr)
        (<= . g$11461$Uaprr)
        (< . g$11460$Uaprr)
        (unquote-splicing . g$11352$Uaprr)
        (unquote . g$11351$Uaprr)
        (else . g$11349$Uaprr)
        (=> . g$11348$Uaprr)
        (... . g$11347$Uaprr)
        (delay . g$11344$Uaprr)
        (or . g$11342$Uaprr)
        (and . g$11341$Uaprr)
        (do . g$11340$Uaprr)
        (cond . g$11339$Uaprr)
        (let* . g$11338$Uaprr)
        (let . g$11337$Uaprr)
        (quasiquote . g$11333$Uaprr)
        (syntax-rules . g$11332$Uaprr)
        (case . g$11323$Uaprr)
        (if . g$11319$Uaprr)
        (letrec . g$11317$Uaprr)
        (lambda . g$11314$Uaprr)
        (quote . g$11311$Uaprr)
        (letrec-syntax . g$11309$Uaprr)
        (let-syntax . g$11308$Uaprr)
        (set! . g$11307$Uaprr)
        (begin . g$11303$Uaprr)
        (define-syntax . g$11301$Uaprr)
        (define . g$11300$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$15416$Uaprr
      'g$11787$Uaprr
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$11739$Uaprr)
        (string-titlecase . g$11738$Uaprr)
        (string-normalize-nfkd . g$6329$Uaprr)
        (string-normalize-nfkc . g$6328$Uaprr)
        (string-normalize-nfd . g$6327$Uaprr)
        (string-normalize-nfc . g$6326$Uaprr)
        (string-foldcase . g$11737$Uaprr)
        (string-downcase . g$11736$Uaprr)
        (string-ci>? . g$6313$Uaprr)
        (string-ci>=? . g$6315$Uaprr)
        (string-ci=? . g$6311$Uaprr)
        (string-ci<? . g$6312$Uaprr)
        (string-ci<=? . g$6314$Uaprr)
        (char-whitespace? . g$11735$Uaprr)
        (char-upper-case? . g$11734$Uaprr)
        (char-title-case? . g$11733$Uaprr)
        (char-numeric? . g$11732$Uaprr)
        (char-lower-case? . g$11731$Uaprr)
        (char-general-category . g$11730$Uaprr)
        (char-upcase . g$11729$Uaprr)
        (char-titlecase . g$11728$Uaprr)
        (char-foldcase . g$11727$Uaprr)
        (char-downcase . g$11726$Uaprr)
        (char-ci>? . g$6323$Uaprr)
        (char-ci>=? . g$6325$Uaprr)
        (char-ci=? . g$6321$Uaprr)
        (char-ci<? . g$6322$Uaprr)
        (char-ci<=? . g$6324$Uaprr)
        (char-alphabetic? . g$11725$Uaprr)
        (make-variable-transformer . g$7905$Uaprr)
        (identifier? . g$8225$Uaprr)
        (generate-temporaries . g$8214$Uaprr)
        (free-identifier=? . g$8215$Uaprr)
        (syntax->datum . g$8227$Uaprr)
        (datum->syntax . g$8226$Uaprr)
        (bound-identifier=? . g$8216$Uaprr)
        (record-type-descriptor? . g$11724$Uaprr)
        (record-predicate . g$11723$Uaprr)
        (record-mutator . g$11722$Uaprr)
        (record-constructor . g$11721$Uaprr)
        (record-accessor . g$11720$Uaprr)
        (make-record-type-descriptor . g$11719$Uaprr)
        (make-record-constructor-descriptor . g$11718$Uaprr)
        (record? . g$11717$Uaprr)
        (record-type-uid . g$11716$Uaprr)
        (record-type-sealed? . g$11715$Uaprr)
        (record-type-parent . g$11714$Uaprr)
        (record-type-opaque? . g$11713$Uaprr)
        (record-type-name . g$11712$Uaprr)
        (record-type-generative? . g$11711$Uaprr)
        (record-type-field-names . g$11710$Uaprr)
        (record-rtd . g$11709$Uaprr)
        (record-field-mutable? . g$11708$Uaprr)
        (delete-file . g$5720$Uaprr)
        (file-exists? . g$5719$Uaprr)
        (vector-sort! . g$11707$Uaprr)
        (vector-sort . g$11706$Uaprr)
        (list-sort . g$6282$Uaprr)
        (symbol-hash . g$11705$Uaprr)
        (string-ci-hash . g$11704$Uaprr)
        (string-hash . g$11703$Uaprr)
        (equal-hash . g$11702$Uaprr)
        (hashtable-equivalence-function . g$11701$Uaprr)
        (make-hashtable . g$11700$Uaprr)
        (hashtable-hash-function . g$11699$Uaprr)
        (make-eqv-hashtable . g$5687$Uaprr)
        (make-eq-hashtable . g$5686$Uaprr)
        (hashtable? . g$11698$Uaprr)
        (hashtable-update! . g$5693$Uaprr)
        (hashtable-size . g$5688$Uaprr)
        (hashtable-set! . g$5690$Uaprr)
        (hashtable-ref . g$5689$Uaprr)
        (hashtable-mutable? . g$11697$Uaprr)
        (hashtable-keys . g$11696$Uaprr)
        (hashtable-entries . g$11695$Uaprr)
        (hashtable-delete! . g$5691$Uaprr)
        (hashtable-copy . g$11694$Uaprr)
        (hashtable-contains? . g$5692$Uaprr)
        (hashtable-clear! . g$5694$Uaprr)
        (call-with-output-file . g$6730$Uaprr)
        (call-with-input-file . g$6729$Uaprr)
        (write-char . g$6721$Uaprr)
        (write . g$11693$Uaprr)
        (with-output-to-file . g$6728$Uaprr)
        (with-input-from-file . g$6727$Uaprr)
        (read-char . g$6720$Uaprr)
        (read . g$11692$Uaprr)
        (peek-char . g$6719$Uaprr)
        (open-output-file . g$11691$Uaprr)
        (open-input-file . g$11690$Uaprr)
        (newline . g$6731$Uaprr)
        (display . g$11689$Uaprr)
        (close-output-port . g$11688$Uaprr)
        (close-input-port . g$11687$Uaprr)
        (eof-object? . g$11686$Uaprr)
        (eof-object . g$11685$Uaprr)
        (current-error-port . g$11684$Uaprr)
        (current-output-port . g$11683$Uaprr)
        (current-input-port . g$11682$Uaprr)
        (output-port? . g$11681$Uaprr)
        (input-port? . g$11680$Uaprr)
        (utf-8-codec . g$11679$Uaprr)
        (utf-16-codec . g$11678$Uaprr)
        (transcoder-error-handling-mode . g$11677$Uaprr)
        (transcoder-eol-style . g$11676$Uaprr)
        (transcoder-codec . g$11675$Uaprr)
        (transcoded-port . g$11674$Uaprr)
        (textual-port? . g$11673$Uaprr)
        (string->bytevector . g$11672$Uaprr)
        (standard-output-port . g$11671$Uaprr)
        (standard-input-port . g$11670$Uaprr)
        (standard-error-port . g$11669$Uaprr)
        (set-port-position! . g$11668$Uaprr)
        (put-u8 . g$11667$Uaprr)
        (put-string . g$11666$Uaprr)
        (put-datum . g$6699$Uaprr)
        (put-char . g$11665$Uaprr)
        (put-bytevector . g$11664$Uaprr)
        (port? . g$6704$Uaprr)
        (port-transcoder . g$11663$Uaprr)
        (port-position . g$11662$Uaprr)
        (port-has-set-port-position!? . g$11661$Uaprr)
        (port-has-port-position? . g$11660$Uaprr)
        (port-eof? . g$11659$Uaprr)
        (output-port-buffer-mode . g$11658$Uaprr)
        (open-string-output-port . g$6703$Uaprr)
        (open-string-input-port . g$11657$Uaprr)
        (open-file-output-port . g$11656$Uaprr)
        (open-file-input/output-port . g$11655$Uaprr)
        (open-file-input-port . g$11654$Uaprr)
        (open-bytevector-output-port . g$11653$Uaprr)
        (open-bytevector-input-port . g$11652$Uaprr)
        (native-transcoder . g$11651$Uaprr)
        (native-eol-style . g$11650$Uaprr)
        (make-transcoder . g$11649$Uaprr)
        (latin-1-codec . g$11648$Uaprr)
        (make-i/o-write-error . g$6092$Uaprr)
        (make-i/o-read-error . g$6079$Uaprr)
        (make-i/o-port-error . g$6187$Uaprr)
        (make-i/o-invalid-position-error . g$6105$Uaprr)
        (make-i/o-filename-error . g$6120$Uaprr)
        (make-i/o-file-protection-error . g$6135$Uaprr)
        (make-i/o-file-is-read-only-error . g$6148$Uaprr)
        (make-i/o-file-does-not-exist-error . g$6174$Uaprr)
        (make-i/o-file-already-exists-error . g$6161$Uaprr)
        (make-i/o-error . g$6066$Uaprr)
        (make-i/o-encoding-error . g$6215$Uaprr)
        (make-i/o-decoding-error . g$6202$Uaprr)
        (make-custom-textual-output-port . g$11647$Uaprr)
        (make-custom-textual-input/output-port . g$11646$Uaprr)
        (make-custom-textual-input-port . g$11645$Uaprr)
        (make-custom-binary-output-port . g$11644$Uaprr)
        (make-custom-binary-input/output-port . g$11643$Uaprr)
        (make-custom-binary-input-port . g$11642$Uaprr)
        (make-bytevector . g$11641$Uaprr)
        (lookahead-u8 . g$11640$Uaprr)
        (lookahead-char . g$11639$Uaprr)
        (i/o-write-error? . g$6093$Uaprr)
        (i/o-read-error? . g$6080$Uaprr)
        (i/o-port-error? . g$6189$Uaprr)
        (i/o-invalid-position-error? . g$6107$Uaprr)
        (i/o-error-position . g$6108$Uaprr)
        (i/o-filename-error? . g$6122$Uaprr)
        (i/o-file-protection-error? . g$6136$Uaprr)
        (i/o-file-is-read-only-error? . g$6149$Uaprr)
        (i/o-file-does-not-exist-error? . g$6175$Uaprr)
        (i/o-file-already-exists-error? . g$6162$Uaprr)
        (i/o-error? . g$6067$Uaprr)
        (i/o-error-port . g$6190$Uaprr)
        (i/o-error-filename . g$6123$Uaprr)
        (i/o-encoding-error? . g$6217$Uaprr)
        (i/o-encoding-error-char . g$6218$Uaprr)
        (i/o-decoding-error? . g$6203$Uaprr)
        (get-u8 . g$11638$Uaprr)
        (get-string-n! . g$11637$Uaprr)
        (get-string-n . g$11636$Uaprr)
        (get-string-all . g$11635$Uaprr)
        (get-line . g$11634$Uaprr)
        (get-datum . g$6700$Uaprr)
        (get-char . g$11633$Uaprr)
        (get-bytevector-some . g$11632$Uaprr)
        (get-bytevector-n! . g$11631$Uaprr)
        (get-bytevector-n . g$11630$Uaprr)
        (get-bytevector-all . g$11629$Uaprr)
        (flush-output-port . g$11628$Uaprr)
        (close-port . g$11627$Uaprr)
        (call-with-string-output-port . g$6705$Uaprr)
        (call-with-port . g$6706$Uaprr)
        (call-with-bytevector-output-port . g$11626$Uaprr)
        (bytevector->string . g$11625$Uaprr)
        (buffer-mode? . g$11624$Uaprr)
        (binary-port? . g$11623$Uaprr)
        (exit . g$11622$Uaprr)
        (command-line . g$11243$Uaprr)
        (remove . g$5129$Uaprr)
        (remv . g$5130$Uaprr)
        (remp . g$5110$Uaprr)
        (remq . g$5131$Uaprr)
        (partition . g$5109$Uaprr)
        (memv . g$5117$Uaprr)
        (memq . g$5116$Uaprr)
        (memp . g$5119$Uaprr)
        (member . g$5118$Uaprr)
        (exists . g$5123$Uaprr)
        (for-all . g$5122$Uaprr)
        (fold-right . g$5128$Uaprr)
        (fold-left . g$5127$Uaprr)
        (find . g$5108$Uaprr)
        (filter . g$5111$Uaprr)
        (cons* . g$5126$Uaprr)
        (assv . g$5113$Uaprr)
        (assq . g$5112$Uaprr)
        (assp . g$5115$Uaprr)
        (assoc . g$5114$Uaprr)
        (with-exception-handler . g$11617$Uaprr)
        (raise-continuable . g$11616$Uaprr)
        (raise . g$11615$Uaprr)
        (make-enumeration . g$6791$Uaprr)
        (enum-set=? . g$6798$Uaprr)
        (enum-set-universe . g$6792$Uaprr)
        (enum-set-union . g$6799$Uaprr)
        (enum-set-subset? . g$6797$Uaprr)
        (enum-set-projection . g$6803$Uaprr)
        (enum-set-member? . g$6796$Uaprr)
        (enum-set-intersection . g$6800$Uaprr)
        (enum-set-indexer . g$6793$Uaprr)
        (enum-set-difference . g$6801$Uaprr)
        (enum-set-constructor . g$6794$Uaprr)
        (enum-set-complement . g$6802$Uaprr)
        (enum-set->list . g$6795$Uaprr)
        (who-condition? . g$5984$Uaprr)
        (warning? . g$5903$Uaprr)
        (violation? . g$5942$Uaprr)
        (undefined-violation? . g$6054$Uaprr)
        (syntax-violation? . g$6039$Uaprr)
        (syntax-violation-subform . g$6041$Uaprr)
        (syntax-violation-form . g$6040$Uaprr)
        (syntax-violation . g$8224$Uaprr)
        (simple-conditions . g$11614$Uaprr)
        (serious-condition? . g$5916$Uaprr)
        (non-continuable-violation? . g$5998$Uaprr)
        (message-condition? . g$5889$Uaprr)
        (make-who-condition . g$5982$Uaprr)
        (make-warning . g$5902$Uaprr)
        (make-violation . g$5941$Uaprr)
        (make-undefined-violation . g$6053$Uaprr)
        (make-syntax-violation . g$6036$Uaprr)
        (make-serious-condition . g$5915$Uaprr)
        (make-non-continuable-violation . g$5997$Uaprr)
        (make-message-condition . g$5887$Uaprr)
        (make-lexical-violation . g$6023$Uaprr)
        (make-irritants-condition . g$5967$Uaprr)
        (make-implementation-restriction-violation . g$6010$Uaprr)
        (make-error . g$5928$Uaprr)
        (make-assertion-violation . g$5954$Uaprr)
        (lexical-violation? . g$6024$Uaprr)
        (irritants-condition? . g$5969$Uaprr)
        (implementation-restriction-violation? . g$6011$Uaprr)
        (error? . g$5929$Uaprr)
        (condition-who . g$5985$Uaprr)
        (condition-predicate . g$11613$Uaprr)
        (condition-message . g$5890$Uaprr)
        (condition-irritants . g$5970$Uaprr)
        (condition-accessor . g$11612$Uaprr)
        (condition . g$11611$Uaprr)
        (assertion-violation? . g$5955$Uaprr)
        (condition? . g$11610$Uaprr)
        (utf32->string . g$11609$Uaprr)
        (utf16->string . g$11608$Uaprr)
        (utf8->string . g$11607$Uaprr)
        (uint-list->bytevector . g$11606$Uaprr)
        (u8-list->bytevector . g$11605$Uaprr)
        (string->utf8 . g$11604$Uaprr)
        (string->utf32 . g$11603$Uaprr)
        (string->utf16 . g$11602$Uaprr)
        (sint-list->bytevector . g$11601$Uaprr)
        (native-endianness . g$5726$Uaprr)
        (bytevector? . g$5428$Uaprr)
        (bytevector=? . g$11600$Uaprr)
        (bytevector-uint-set! . g$11599$Uaprr)
        (bytevector-uint-ref . g$11598$Uaprr)
        (bytevector-u8-set! . g$11597$Uaprr)
        (bytevector-u8-ref . g$11596$Uaprr)
        (bytevector-u64-set! . g$5747$Uaprr)
        (bytevector-u64-ref . g$5743$Uaprr)
        (bytevector-u64-native-set! . g$5749$Uaprr)
        (bytevector-u64-native-ref . g$5745$Uaprr)
        (bytevector-u32-set! . g$5739$Uaprr)
        (bytevector-u32-ref . g$5735$Uaprr)
        (bytevector-u32-native-set! . g$5741$Uaprr)
        (bytevector-u32-native-ref . g$5737$Uaprr)
        (bytevector-u16-set! . g$5731$Uaprr)
        (bytevector-u16-ref . g$5727$Uaprr)
        (bytevector-u16-native-set! . g$5733$Uaprr)
        (bytevector-u16-native-ref . g$5729$Uaprr)
        (bytevector-sint-set! . g$11595$Uaprr)
        (bytevector-sint-ref . g$11594$Uaprr)
        (bytevector-s8-set! . g$11593$Uaprr)
        (bytevector-s8-ref . g$11592$Uaprr)
        (bytevector-s64-set! . g$5748$Uaprr)
        (bytevector-s64-ref . g$5744$Uaprr)
        (bytevector-s64-native-set! . g$5750$Uaprr)
        (bytevector-s64-native-ref . g$5746$Uaprr)
        (bytevector-s32-set! . g$5740$Uaprr)
        (bytevector-s32-ref . g$5736$Uaprr)
        (bytevector-s32-native-set! . g$5742$Uaprr)
        (bytevector-s32-native-ref . g$5738$Uaprr)
        (bytevector-s16-set! . g$5732$Uaprr)
        (bytevector-s16-ref . g$5728$Uaprr)
        (bytevector-s16-native-set! . g$5734$Uaprr)
        (bytevector-s16-native-ref . g$5730$Uaprr)
        (bytevector-length . g$11591$Uaprr)
        (bytevector-ieee-single-set! . g$11590$Uaprr)
        (bytevector-ieee-single-ref . g$11589$Uaprr)
        (bytevector-ieee-single-native-set! . g$5753$Uaprr)
        (bytevector-ieee-single-native-ref . g$5751$Uaprr)
        (bytevector-ieee-double-set! . g$11588$Uaprr)
        (bytevector-ieee-double-ref . g$11587$Uaprr)
        (bytevector-ieee-double-native-set! . g$5754$Uaprr)
        (bytevector-ieee-double-native-ref . g$5752$Uaprr)
        (bytevector-fill! . g$11586$Uaprr)
        (bytevector-copy! . g$11585$Uaprr)
        (bytevector-copy . g$11584$Uaprr)
        (bytevector->uint-list . g$11583$Uaprr)
        (bytevector->u8-list . g$11582$Uaprr)
        (bytevector->sint-list . g$11581$Uaprr)
        (no-nans-violation? . g$6244$Uaprr)
        (no-infinities-violation? . g$6231$Uaprr)
        (make-no-nans-violation . g$6243$Uaprr)
        (make-no-infinities-violation . g$6230$Uaprr)
        (real->flonum . g$11580$Uaprr)
        (flzero? . g$6645$Uaprr)
        (fltruncate . g$6640$Uaprr)
        (fltan . g$6630$Uaprr)
        (flsqrt . g$6635$Uaprr)
        (flsin . g$6628$Uaprr)
        (flround . g$6641$Uaprr)
        (flpositive? . g$6643$Uaprr)
        (flonum? . g$5433$Uaprr)
        (flodd? . g$6647$Uaprr)
        (flnumerator . g$11579$Uaprr)
        (flnegative? . g$6644$Uaprr)
        (flnan? . g$6627$Uaprr)
        (flmod0 . g$6621$Uaprr)
        (flmod . g$6620$Uaprr)
        (flmin . g$6649$Uaprr)
        (flmax . g$6648$Uaprr)
        (fllog . g$6634$Uaprr)
        (flinteger? . g$6624$Uaprr)
        (flinfinite? . g$6626$Uaprr)
        (flfloor . g$6639$Uaprr)
        (flfinite? . g$6625$Uaprr)
        (flexpt . g$6637$Uaprr)
        (flexp . g$6636$Uaprr)
        (fleven? . g$6646$Uaprr)
        (fldiv0-and-mod0 . g$6623$Uaprr)
        (fldiv0 . g$11578$Uaprr)
        (fldiv-and-mod . g$6622$Uaprr)
        (fldiv . g$11577$Uaprr)
        (fldenominator . g$11576$Uaprr)
        (flcos . g$6629$Uaprr)
        (flceiling . g$6638$Uaprr)
        (flatan . g$6633$Uaprr)
        (flasin . g$6631$Uaprr)
        (flacos . g$6632$Uaprr)
        (flabs . g$6642$Uaprr)
        (fl>? . g$11575$Uaprr)
        (fl>=? . g$11574$Uaprr)
        (fl=? . g$11573$Uaprr)
        (fl<? . g$11572$Uaprr)
        (fl<=? . g$11571$Uaprr)
        (fl/ . g$11570$Uaprr)
        (fl- . g$11569$Uaprr)
        (fl+ . g$11568$Uaprr)
        (fl* . g$11567$Uaprr)
        (fixnum->flonum . g$11566$Uaprr)
        (fxzero? . g$6465$Uaprr)
        (fxxor . g$6456$Uaprr)
        (fxrotate-bit-field . g$6479$Uaprr)
        (fxreverse-bit-field . g$11565$Uaprr)
        (fxpositive? . g$6463$Uaprr)
        (fxodd? . g$6467$Uaprr)
        (fxnot . g$6437$Uaprr)
        (fxnegative? . g$6464$Uaprr)
        (fxmod0 . g$6459$Uaprr)
        (fxmod . g$6458$Uaprr)
        (fxmin . g$6469$Uaprr)
        (fxmax . g$6468$Uaprr)
        (fxlength . g$6434$Uaprr)
        (fxior . g$6455$Uaprr)
        (fxif . g$6473$Uaprr)
        (fxfirst-bit-set . g$6435$Uaprr)
        (fxeven? . g$6466$Uaprr)
        (fxdiv0-and-mod0 . g$6462$Uaprr)
        (fxdiv0 . g$6461$Uaprr)
        (fxdiv-and-mod . g$6460$Uaprr)
        (fxdiv . g$6457$Uaprr)
        (fxcopy-bit-field . g$6476$Uaprr)
        (fxcopy-bit . g$6474$Uaprr)
        (fxbit-set? . g$6436$Uaprr)
        (fxbit-field . g$6475$Uaprr)
        (fxbit-count . g$6433$Uaprr)
        (fxarithmetic-shift-right . g$6478$Uaprr)
        (fxarithmetic-shift-left . g$6477$Uaprr)
        (fxarithmetic-shift . g$6432$Uaprr)
        (fxand . g$6454$Uaprr)
        (fx>? . g$6446$Uaprr)
        (fx>=? . g$6447$Uaprr)
        (fx=? . g$6443$Uaprr)
        (fx<? . g$6444$Uaprr)
        (fx<=? . g$6445$Uaprr)
        (fx-/carry . g$6471$Uaprr)
        (fx- . g$11564$Uaprr)
        (fx+/carry . g$6472$Uaprr)
        (fx+ . g$11563$Uaprr)
        (fx*/carry . g$6470$Uaprr)
        (fx* . g$11562$Uaprr)
        (greatest-fixnum . g$6430$Uaprr)
        (least-fixnum . g$6431$Uaprr)
        (fixnum-width . g$5434$Uaprr)
        (fixnum? . g$5432$Uaprr)
        (bitwise-rotate-bit-field . g$6393$Uaprr)
        (bitwise-reverse-bit-field . g$11561$Uaprr)
        (bitwise-length . g$11560$Uaprr)
        (bitwise-if . g$6387$Uaprr)
        (bitwise-first-bit-set . g$11559$Uaprr)
        (bitwise-copy-bit-field . g$6390$Uaprr)
        (bitwise-copy-bit . g$6388$Uaprr)
        (bitwise-bit-set? . g$11558$Uaprr)
        (bitwise-bit-field . g$6389$Uaprr)
        (bitwise-bit-count . g$11557$Uaprr)
        (bitwise-xor . g$11556$Uaprr)
        (bitwise-ior . g$11555$Uaprr)
        (bitwise-and . g$11554$Uaprr)
        (bitwise-not . g$11553$Uaprr)
        (bitwise-arithmetic-shift-right . g$6392$Uaprr)
        (bitwise-arithmetic-shift-left . g$6391$Uaprr)
        (bitwise-arithmetic-shift . g$11552$Uaprr)
        (zero? . g$5468$Uaprr)
        (vector? . g$5427$Uaprr)
        (vector-set! . g$11551$Uaprr)
        (vector-ref . g$11550$Uaprr)
        (vector-map . g$5500$Uaprr)
        (vector-length . g$11549$Uaprr)
        (vector-for-each . g$5501$Uaprr)
        (vector-fill! . g$5435$Uaprr)
        (vector->list . g$11548$Uaprr)
        (vector . g$11547$Uaprr)
        (values . g$11546$Uaprr)
        (truncate . g$11545$Uaprr)
        (tan . g$11544$Uaprr)
        (symbol? . g$5429$Uaprr)
        (symbol=? . g$5485$Uaprr)
        (symbol->string . g$11543$Uaprr)
        (substring . g$11542$Uaprr)
        (string? . g$11541$Uaprr)
        (string>? . g$5482$Uaprr)
        (string>=? . g$5484$Uaprr)
        (string=? . g$5480$Uaprr)
        (string<? . g$5481$Uaprr)
        (string<=? . g$5483$Uaprr)
        (string-ref . g$11540$Uaprr)
        (string-length . g$11539$Uaprr)
        (string-for-each . g$5502$Uaprr)
        (string-copy . g$11538$Uaprr)
        (string-append . g$11537$Uaprr)
        (string->symbol . g$11536$Uaprr)
        (string->number . g$11535$Uaprr)
        (string->list . g$11534$Uaprr)
        (string . g$11533$Uaprr)
        (sqrt . g$11532$Uaprr)
        (sin . g$11531$Uaprr)
        (round . g$11530$Uaprr)
        (reverse . g$5437$Uaprr)
        (real? . g$11529$Uaprr)
        (real-valued? . g$11528$Uaprr)
        (real-part . g$11527$Uaprr)
        (rationalize . g$5497$Uaprr)
        (rational? . g$11526$Uaprr)
        (rational-valued? . g$11525$Uaprr)
        (procedure? . g$5431$Uaprr)
        (positive? . g$5466$Uaprr)
        (pair? . g$11524$Uaprr)
        (odd? . g$5470$Uaprr)
        (numerator . g$11523$Uaprr)
        (number? . g$11522$Uaprr)
        (number->string . g$11521$Uaprr)
        (null? . g$11520$Uaprr)
        (not . g$11519$Uaprr)
        (negative? . g$5467$Uaprr)
        (nan? . g$11518$Uaprr)
        (min . g$5472$Uaprr)
        (max . g$5471$Uaprr)
        (map . g$5124$Uaprr)
        (make-vector . g$11517$Uaprr)
        (make-string . g$11516$Uaprr)
        (make-rectangular . g$11515$Uaprr)
        (make-polar . g$11514$Uaprr)
        (magnitude . g$11513$Uaprr)
        (log . g$11512$Uaprr)
        (list? . g$11511$Uaprr)
        (list-tail . g$5104$Uaprr)
        (list-ref . g$5105$Uaprr)
        (list->vector . g$5424$Uaprr)
        (list->string . g$5425$Uaprr)
        (list . g$11510$Uaprr)
        (length . g$11509$Uaprr)
        (lcm . g$5474$Uaprr)
        (integer? . g$11508$Uaprr)
        (integer-valued? . g$11507$Uaprr)
        (integer->char . g$11506$Uaprr)
        (infinite? . g$11505$Uaprr)
        (inexact? . g$11504$Uaprr)
        (inexact . g$11503$Uaprr)
        (imag-part . g$11502$Uaprr)
        (gcd . g$5473$Uaprr)
        (for-each . g$5125$Uaprr)
        (floor . g$11501$Uaprr)
        (finite? . g$11500$Uaprr)
        (expt . g$11499$Uaprr)
        (exp . g$11498$Uaprr)
        (exact? . g$11497$Uaprr)
        (exact-integer-sqrt . g$11496$Uaprr)
        (exact . g$11495$Uaprr)
        (even? . g$5469$Uaprr)
        (error . g$11494$Uaprr)
        (eqv? . g$11493$Uaprr)
        (equal? . g$11492$Uaprr)
        (eq? . g$11491$Uaprr)
        (dynamic-wind . g$11490$Uaprr)
        (div0-and-mod0 . g$5423$Uaprr)
        (mod0 . g$5421$Uaprr)
        (div0 . g$11489$Uaprr)
        (div-and-mod . g$5422$Uaprr)
        (mod . g$5420$Uaprr)
        (div . g$11488$Uaprr)
        (denominator . g$11487$Uaprr)
        (cos . g$11486$Uaprr)
        (cons . g$11485$Uaprr)
        (complex? . g$11484$Uaprr)
        (char? . g$5426$Uaprr)
        (char>? . g$5494$Uaprr)
        (char>=? . g$5496$Uaprr)
        (char=? . g$5492$Uaprr)
        (char<? . g$5493$Uaprr)
        (char<=? . g$5495$Uaprr)
        (char->integer . g$11483$Uaprr)
        (ceiling . g$11482$Uaprr)
        (call-with-values . g$11481$Uaprr)
        (call/cc . g$11480$Uaprr)
        (call-with-current-continuation . g$11479$Uaprr)
        (cddddr . g$5465$Uaprr)
        (cdddar . g$5464$Uaprr)
        (cddadr . g$5463$Uaprr)
        (cddaar . g$5462$Uaprr)
        (cdaddr . g$5461$Uaprr)
        (cdadar . g$5460$Uaprr)
        (cdaadr . g$5459$Uaprr)
        (cdaaar . g$5458$Uaprr)
        (cadddr . g$5457$Uaprr)
        (caddar . g$5456$Uaprr)
        (cadadr . g$5455$Uaprr)
        (cadaar . g$5454$Uaprr)
        (caaddr . g$5453$Uaprr)
        (caadar . g$5452$Uaprr)
        (caaadr . g$5451$Uaprr)
        (caaaar . g$5450$Uaprr)
        (cdddr . g$5449$Uaprr)
        (cddar . g$5448$Uaprr)
        (cdadr . g$5447$Uaprr)
        (cdaar . g$5446$Uaprr)
        (caddr . g$5445$Uaprr)
        (cadar . g$5444$Uaprr)
        (caadr . g$5443$Uaprr)
        (caaar . g$5442$Uaprr)
        (cddr . g$5441$Uaprr)
        (cdar . g$5440$Uaprr)
        (cadr . g$5439$Uaprr)
        (caar . g$5438$Uaprr)
        (cdr . g$11478$Uaprr)
        (car . g$11477$Uaprr)
        (boolean? . g$5430$Uaprr)
        (boolean=? . g$5486$Uaprr)
        (atan . g$11476$Uaprr)
        (assertion-violation . g$11475$Uaprr)
        (asin . g$11474$Uaprr)
        (apply . g$11473$Uaprr)
        (append . g$11472$Uaprr)
        (angle . g$11471$Uaprr)
        (acos . g$11470$Uaprr)
        (abs . g$11469$Uaprr)
        (/ . g$11468$Uaprr)
        (* . g$11467$Uaprr)
        (- . g$11466$Uaprr)
        (+ . g$11465$Uaprr)
        (>= . g$11464$Uaprr)
        (> . g$11463$Uaprr)
        (= . g$11462$Uaprr)
        (<= . g$11461$Uaprr)
        (< . g$11460$Uaprr)
        (&no-nans . g$11404$Uaprr)
        (&no-infinities . g$11403$Uaprr)
        (&i/o-encoding . g$11402$Uaprr)
        (&i/o-decoding . g$11401$Uaprr)
        (&i/o-port . g$11400$Uaprr)
        (&i/o-file-does-not-exist . g$11399$Uaprr)
        (&i/o-file-already-exists . g$11398$Uaprr)
        (&i/o-file-is-read-only . g$11397$Uaprr)
        (&i/o-file-protection . g$11396$Uaprr)
        (&i/o-filename . g$11395$Uaprr)
        (&i/o-invalid-position . g$11394$Uaprr)
        (&i/o-write . g$11393$Uaprr)
        (&i/o-read . g$11392$Uaprr)
        (&i/o . g$11391$Uaprr)
        (&non-continuable . g$11390$Uaprr)
        (&undefined . g$11389$Uaprr)
        (&syntax . g$11388$Uaprr)
        (&lexical . g$11387$Uaprr)
        (&implementation-restriction . g$11386$Uaprr)
        (&who . g$11385$Uaprr)
        (&irritants . g$11384$Uaprr)
        (&assertion . g$11383$Uaprr)
        (&violation . g$11382$Uaprr)
        (&error . g$11381$Uaprr)
        (&serious . g$11380$Uaprr)
        (&warning . g$11379$Uaprr)
        (&message . g$11378$Uaprr)
        (&condition . g$11377$Uaprr)
        (define-condition-type . g$11376$Uaprr)
        (define-enumeration . g$11375$Uaprr)
        (define-record-type . g$11374$Uaprr)
        (parent-rtd . g$11373$Uaprr)
        (nongenerative . g$11372$Uaprr)
        (opaque . g$11371$Uaprr)
        (sealed . g$11370$Uaprr)
        (protocol . g$11369$Uaprr)
        (parent . g$11368$Uaprr)
        (immutable . g$11367$Uaprr)
        (mutable . g$11366$Uaprr)
        (fields . g$11365$Uaprr)
        (error-handling-mode . g$11364$Uaprr)
        (file-options . g$11363$Uaprr)
        (buffer-mode . g$11362$Uaprr)
        (eol-style . g$11361$Uaprr)
        (guard . g$11360$Uaprr)
        (unsyntax-splicing . g$11354$Uaprr)
        (unsyntax . g$11353$Uaprr)
        (unquote-splicing . g$11352$Uaprr)
        (unquote . g$11351$Uaprr)
        (_ . g$11350$Uaprr)
        (else . g$11349$Uaprr)
        (=> . g$11348$Uaprr)
        (... . g$11347$Uaprr)
        (assert . g$11346$Uaprr)
        (endianness . g$11345$Uaprr)
        (or . g$11342$Uaprr)
        (and . g$11341$Uaprr)
        (do . g$11340$Uaprr)
        (cond . g$11339$Uaprr)
        (let* . g$11338$Uaprr)
        (let . g$11337$Uaprr)
        (identifier-syntax . g$11336$Uaprr)
        (with-syntax . g$11335$Uaprr)
        (quasisyntax . g$11334$Uaprr)
        (quasiquote . g$11333$Uaprr)
        (syntax-rules . g$11332$Uaprr)
        (let-values . g$11328$Uaprr)
        (let*-values . g$11327$Uaprr)
        (record-constructor-descriptor . g$11326$Uaprr)
        (record-type-descriptor . g$11325$Uaprr)
        (case . g$11323$Uaprr)
        (unless . g$11321$Uaprr)
        (when . g$11320$Uaprr)
        (if . g$11319$Uaprr)
        (letrec* . g$11318$Uaprr)
        (letrec . g$11317$Uaprr)
        (case-lambda . g$11315$Uaprr)
        (lambda . g$11314$Uaprr)
        (syntax . g$11313$Uaprr)
        (syntax-case . g$11312$Uaprr)
        (quote . g$11311$Uaprr)
        (letrec-syntax . g$11309$Uaprr)
        (let-syntax . g$11308$Uaprr)
        (set! . g$11307$Uaprr)
        (begin . g$11303$Uaprr)
        (define-syntax . g$11301$Uaprr)
        (define . g$11300$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11788$Uaprr
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((scheme-report-environment . g$8204$Uaprr)
        (quotient . g$6261$Uaprr)
        (null-environment . g$8203$Uaprr)
        (remainder . g$6262$Uaprr)
        (modulo . g$6263$Uaprr)
        (inexact->exact . g$6258$Uaprr)
        (force . g$6265$Uaprr)
        (exact->inexact . g$6259$Uaprr)
        (delay . g$11344$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11789$Uaprr
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$11340$Uaprr)
        (unless . g$11321$Uaprr)
        (when . g$11320$Uaprr)
        (case-lambda . g$11315$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11790$Uaprr
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$8206$Uaprr) (environment . g$8202$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11791$Uaprr
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$11619$Uaprr) (set-car! . g$11618$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11792$Uaprr
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$11621$Uaprr) (string-set! . g$11620$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11793$Uaprr
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$11622$Uaprr) (command-line . g$11243$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11794$Uaprr
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$7905$Uaprr)
        (identifier? . g$8225$Uaprr)
        (generate-temporaries . g$8214$Uaprr)
        (free-identifier=? . g$8215$Uaprr)
        (syntax->datum . g$8227$Uaprr)
        (datum->syntax . g$8226$Uaprr)
        (bound-identifier=? . g$8216$Uaprr)
        (syntax-violation . g$8224$Uaprr)
        (unsyntax-splicing . g$11354$Uaprr)
        (unsyntax . g$11353$Uaprr)
        (_ . g$11350$Uaprr)
        (... . g$11347$Uaprr)
        (with-syntax . g$11335$Uaprr)
        (quasisyntax . g$11334$Uaprr)
        (syntax . g$11313$Uaprr)
        (syntax-case . g$11312$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11795$Uaprr
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$5720$Uaprr)
        (file-exists? . g$5719$Uaprr)
        (make-i/o-write-error . g$6092$Uaprr)
        (make-i/o-read-error . g$6079$Uaprr)
        (make-i/o-port-error . g$6187$Uaprr)
        (make-i/o-invalid-position-error . g$6105$Uaprr)
        (make-i/o-filename-error . g$6120$Uaprr)
        (make-i/o-file-protection-error . g$6135$Uaprr)
        (make-i/o-file-is-read-only-error . g$6148$Uaprr)
        (make-i/o-file-does-not-exist-error . g$6174$Uaprr)
        (make-i/o-file-already-exists-error . g$6161$Uaprr)
        (make-i/o-error . g$6066$Uaprr)
        (i/o-write-error? . g$6093$Uaprr)
        (i/o-read-error? . g$6080$Uaprr)
        (i/o-port-error? . g$6189$Uaprr)
        (i/o-invalid-position-error? . g$6107$Uaprr)
        (i/o-error-position . g$6108$Uaprr)
        (i/o-filename-error? . g$6122$Uaprr)
        (i/o-file-protection-error? . g$6136$Uaprr)
        (i/o-file-is-read-only-error? . g$6149$Uaprr)
        (i/o-file-does-not-exist-error? . g$6175$Uaprr)
        (i/o-file-already-exists-error? . g$6162$Uaprr)
        (i/o-error? . g$6067$Uaprr)
        (i/o-error-port . g$6190$Uaprr)
        (i/o-error-filename . g$6123$Uaprr)
        (&i/o-port . g$11400$Uaprr)
        (&i/o-file-does-not-exist . g$11399$Uaprr)
        (&i/o-file-already-exists . g$11398$Uaprr)
        (&i/o-file-is-read-only . g$11397$Uaprr)
        (&i/o-file-protection . g$11396$Uaprr)
        (&i/o-filename . g$11395$Uaprr)
        (&i/o-invalid-position . g$11394$Uaprr)
        (&i/o-write . g$11393$Uaprr)
        (&i/o-read . g$11392$Uaprr)
        (&i/o . g$11391$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11796$Uaprr
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$11707$Uaprr)
        (vector-sort . g$11706$Uaprr)
        (list-sort . g$6282$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11797$Uaprr
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$5468$Uaprr)
        (vector? . g$5427$Uaprr)
        (vector-set! . g$11551$Uaprr)
        (vector-ref . g$11550$Uaprr)
        (vector-map . g$5500$Uaprr)
        (vector-length . g$11549$Uaprr)
        (vector-for-each . g$5501$Uaprr)
        (vector-fill! . g$5435$Uaprr)
        (vector->list . g$11548$Uaprr)
        (vector . g$11547$Uaprr)
        (values . g$11546$Uaprr)
        (truncate . g$11545$Uaprr)
        (tan . g$11544$Uaprr)
        (symbol? . g$5429$Uaprr)
        (symbol=? . g$5485$Uaprr)
        (symbol->string . g$11543$Uaprr)
        (substring . g$11542$Uaprr)
        (string? . g$11541$Uaprr)
        (string>? . g$5482$Uaprr)
        (string>=? . g$5484$Uaprr)
        (string=? . g$5480$Uaprr)
        (string<? . g$5481$Uaprr)
        (string<=? . g$5483$Uaprr)
        (string-ref . g$11540$Uaprr)
        (string-length . g$11539$Uaprr)
        (string-for-each . g$5502$Uaprr)
        (string-copy . g$11538$Uaprr)
        (string-append . g$11537$Uaprr)
        (string->symbol . g$11536$Uaprr)
        (string->number . g$11535$Uaprr)
        (string->list . g$11534$Uaprr)
        (string . g$11533$Uaprr)
        (sqrt . g$11532$Uaprr)
        (sin . g$11531$Uaprr)
        (round . g$11530$Uaprr)
        (reverse . g$5437$Uaprr)
        (real? . g$11529$Uaprr)
        (real-valued? . g$11528$Uaprr)
        (real-part . g$11527$Uaprr)
        (rationalize . g$5497$Uaprr)
        (rational? . g$11526$Uaprr)
        (rational-valued? . g$11525$Uaprr)
        (procedure? . g$5431$Uaprr)
        (positive? . g$5466$Uaprr)
        (pair? . g$11524$Uaprr)
        (odd? . g$5470$Uaprr)
        (numerator . g$11523$Uaprr)
        (number? . g$11522$Uaprr)
        (number->string . g$11521$Uaprr)
        (null? . g$11520$Uaprr)
        (not . g$11519$Uaprr)
        (negative? . g$5467$Uaprr)
        (nan? . g$11518$Uaprr)
        (min . g$5472$Uaprr)
        (max . g$5471$Uaprr)
        (map . g$5124$Uaprr)
        (make-vector . g$11517$Uaprr)
        (make-string . g$11516$Uaprr)
        (make-rectangular . g$11515$Uaprr)
        (make-polar . g$11514$Uaprr)
        (magnitude . g$11513$Uaprr)
        (log . g$11512$Uaprr)
        (list? . g$11511$Uaprr)
        (list-tail . g$5104$Uaprr)
        (list-ref . g$5105$Uaprr)
        (list->vector . g$5424$Uaprr)
        (list->string . g$5425$Uaprr)
        (list . g$11510$Uaprr)
        (length . g$11509$Uaprr)
        (lcm . g$5474$Uaprr)
        (integer? . g$11508$Uaprr)
        (integer-valued? . g$11507$Uaprr)
        (integer->char . g$11506$Uaprr)
        (infinite? . g$11505$Uaprr)
        (inexact? . g$11504$Uaprr)
        (inexact . g$11503$Uaprr)
        (imag-part . g$11502$Uaprr)
        (gcd . g$5473$Uaprr)
        (for-each . g$5125$Uaprr)
        (floor . g$11501$Uaprr)
        (finite? . g$11500$Uaprr)
        (expt . g$11499$Uaprr)
        (exp . g$11498$Uaprr)
        (exact? . g$11497$Uaprr)
        (exact-integer-sqrt . g$11496$Uaprr)
        (exact . g$11495$Uaprr)
        (even? . g$5469$Uaprr)
        (error . g$11494$Uaprr)
        (eqv? . g$11493$Uaprr)
        (equal? . g$11492$Uaprr)
        (eq? . g$11491$Uaprr)
        (dynamic-wind . g$11490$Uaprr)
        (div0-and-mod0 . g$5423$Uaprr)
        (mod0 . g$5421$Uaprr)
        (div0 . g$11489$Uaprr)
        (div-and-mod . g$5422$Uaprr)
        (mod . g$5420$Uaprr)
        (div . g$11488$Uaprr)
        (denominator . g$11487$Uaprr)
        (cos . g$11486$Uaprr)
        (cons . g$11485$Uaprr)
        (complex? . g$11484$Uaprr)
        (char? . g$5426$Uaprr)
        (char>? . g$5494$Uaprr)
        (char>=? . g$5496$Uaprr)
        (char=? . g$5492$Uaprr)
        (char<? . g$5493$Uaprr)
        (char<=? . g$5495$Uaprr)
        (char->integer . g$11483$Uaprr)
        (ceiling . g$11482$Uaprr)
        (call-with-values . g$11481$Uaprr)
        (call/cc . g$11480$Uaprr)
        (call-with-current-continuation . g$11479$Uaprr)
        (cddddr . g$5465$Uaprr)
        (cdddar . g$5464$Uaprr)
        (cddadr . g$5463$Uaprr)
        (cddaar . g$5462$Uaprr)
        (cdaddr . g$5461$Uaprr)
        (cdadar . g$5460$Uaprr)
        (cdaadr . g$5459$Uaprr)
        (cdaaar . g$5458$Uaprr)
        (cadddr . g$5457$Uaprr)
        (caddar . g$5456$Uaprr)
        (cadadr . g$5455$Uaprr)
        (cadaar . g$5454$Uaprr)
        (caaddr . g$5453$Uaprr)
        (caadar . g$5452$Uaprr)
        (caaadr . g$5451$Uaprr)
        (caaaar . g$5450$Uaprr)
        (cdddr . g$5449$Uaprr)
        (cddar . g$5448$Uaprr)
        (cdadr . g$5447$Uaprr)
        (cdaar . g$5446$Uaprr)
        (caddr . g$5445$Uaprr)
        (cadar . g$5444$Uaprr)
        (caadr . g$5443$Uaprr)
        (caaar . g$5442$Uaprr)
        (cddr . g$5441$Uaprr)
        (cdar . g$5440$Uaprr)
        (cadr . g$5439$Uaprr)
        (caar . g$5438$Uaprr)
        (cdr . g$11478$Uaprr)
        (car . g$11477$Uaprr)
        (boolean? . g$5430$Uaprr)
        (boolean=? . g$5486$Uaprr)
        (atan . g$11476$Uaprr)
        (assertion-violation . g$11475$Uaprr)
        (asin . g$11474$Uaprr)
        (apply . g$11473$Uaprr)
        (append . g$11472$Uaprr)
        (angle . g$11471$Uaprr)
        (acos . g$11470$Uaprr)
        (abs . g$11469$Uaprr)
        (/ . g$11468$Uaprr)
        (* . g$11467$Uaprr)
        (- . g$11466$Uaprr)
        (+ . g$11465$Uaprr)
        (>= . g$11464$Uaprr)
        (> . g$11463$Uaprr)
        (= . g$11462$Uaprr)
        (<= . g$11461$Uaprr)
        (< . g$11460$Uaprr)
        (unquote-splicing . g$11352$Uaprr)
        (unquote . g$11351$Uaprr)
        (_ . g$11350$Uaprr)
        (else . g$11349$Uaprr)
        (=> . g$11348$Uaprr)
        (... . g$11347$Uaprr)
        (assert . g$11346$Uaprr)
        (or . g$11342$Uaprr)
        (and . g$11341$Uaprr)
        (cond . g$11339$Uaprr)
        (let* . g$11338$Uaprr)
        (let . g$11337$Uaprr)
        (identifier-syntax . g$11336$Uaprr)
        (quasiquote . g$11333$Uaprr)
        (syntax-rules . g$11332$Uaprr)
        (let-values . g$11328$Uaprr)
        (let*-values . g$11327$Uaprr)
        (case . g$11323$Uaprr)
        (if . g$11319$Uaprr)
        (letrec* . g$11318$Uaprr)
        (letrec . g$11317$Uaprr)
        (lambda . g$11314$Uaprr)
        (quote . g$11311$Uaprr)
        (letrec-syntax . g$11309$Uaprr)
        (let-syntax . g$11308$Uaprr)
        (set! . g$11307$Uaprr)
        (begin . g$11303$Uaprr)
        (define-syntax . g$11301$Uaprr)
        (define . g$11300$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11798$Uaprr
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$5129$Uaprr)
        (remv . g$5130$Uaprr)
        (remp . g$5110$Uaprr)
        (remq . g$5131$Uaprr)
        (partition . g$5109$Uaprr)
        (memv . g$5117$Uaprr)
        (memq . g$5116$Uaprr)
        (memp . g$5119$Uaprr)
        (member . g$5118$Uaprr)
        (exists . g$5123$Uaprr)
        (for-all . g$5122$Uaprr)
        (fold-right . g$5128$Uaprr)
        (fold-left . g$5127$Uaprr)
        (find . g$5108$Uaprr)
        (filter . g$5111$Uaprr)
        (cons* . g$5126$Uaprr)
        (assv . g$5113$Uaprr)
        (assq . g$5112$Uaprr)
        (assp . g$5115$Uaprr)
        (assoc . g$5114$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11799$Uaprr
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$6730$Uaprr)
        (call-with-input-file . g$6729$Uaprr)
        (write-char . g$6721$Uaprr)
        (write . g$11693$Uaprr)
        (with-output-to-file . g$6728$Uaprr)
        (with-input-from-file . g$6727$Uaprr)
        (read-char . g$6720$Uaprr)
        (read . g$11692$Uaprr)
        (peek-char . g$6719$Uaprr)
        (open-output-file . g$11691$Uaprr)
        (open-input-file . g$11690$Uaprr)
        (newline . g$6731$Uaprr)
        (display . g$11689$Uaprr)
        (close-output-port . g$11688$Uaprr)
        (close-input-port . g$11687$Uaprr)
        (eof-object? . g$11686$Uaprr)
        (eof-object . g$11685$Uaprr)
        (current-error-port . g$11684$Uaprr)
        (current-output-port . g$11683$Uaprr)
        (current-input-port . g$11682$Uaprr)
        (output-port? . g$11681$Uaprr)
        (input-port? . g$11680$Uaprr)
        (make-i/o-write-error . g$6092$Uaprr)
        (make-i/o-read-error . g$6079$Uaprr)
        (make-i/o-port-error . g$6187$Uaprr)
        (make-i/o-invalid-position-error . g$6105$Uaprr)
        (make-i/o-filename-error . g$6120$Uaprr)
        (make-i/o-file-protection-error . g$6135$Uaprr)
        (make-i/o-file-is-read-only-error . g$6148$Uaprr)
        (make-i/o-file-does-not-exist-error . g$6174$Uaprr)
        (make-i/o-file-already-exists-error . g$6161$Uaprr)
        (make-i/o-error . g$6066$Uaprr)
        (i/o-write-error? . g$6093$Uaprr)
        (i/o-read-error? . g$6080$Uaprr)
        (i/o-port-error? . g$6189$Uaprr)
        (i/o-invalid-position-error? . g$6107$Uaprr)
        (i/o-error-position . g$6108$Uaprr)
        (i/o-filename-error? . g$6122$Uaprr)
        (i/o-file-protection-error? . g$6136$Uaprr)
        (i/o-file-is-read-only-error? . g$6149$Uaprr)
        (i/o-file-does-not-exist-error? . g$6175$Uaprr)
        (i/o-file-already-exists-error? . g$6162$Uaprr)
        (i/o-error? . g$6067$Uaprr)
        (i/o-error-port . g$6190$Uaprr)
        (i/o-error-filename . g$6123$Uaprr)
        (&i/o-port . g$11400$Uaprr)
        (&i/o-file-does-not-exist . g$11399$Uaprr)
        (&i/o-file-already-exists . g$11398$Uaprr)
        (&i/o-file-is-read-only . g$11397$Uaprr)
        (&i/o-file-protection . g$11396$Uaprr)
        (&i/o-filename . g$11395$Uaprr)
        (&i/o-invalid-position . g$11394$Uaprr)
        (&i/o-write . g$11393$Uaprr)
        (&i/o-read . g$11392$Uaprr)
        (&i/o . g$11391$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11800$Uaprr
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$11641$Uaprr)
        (utf32->string . g$11609$Uaprr)
        (utf16->string . g$11608$Uaprr)
        (utf8->string . g$11607$Uaprr)
        (uint-list->bytevector . g$11606$Uaprr)
        (u8-list->bytevector . g$11605$Uaprr)
        (string->utf8 . g$11604$Uaprr)
        (string->utf32 . g$11603$Uaprr)
        (string->utf16 . g$11602$Uaprr)
        (sint-list->bytevector . g$11601$Uaprr)
        (native-endianness . g$5726$Uaprr)
        (bytevector? . g$5428$Uaprr)
        (bytevector=? . g$11600$Uaprr)
        (bytevector-uint-set! . g$11599$Uaprr)
        (bytevector-uint-ref . g$11598$Uaprr)
        (bytevector-u8-set! . g$11597$Uaprr)
        (bytevector-u8-ref . g$11596$Uaprr)
        (bytevector-u64-set! . g$5747$Uaprr)
        (bytevector-u64-ref . g$5743$Uaprr)
        (bytevector-u64-native-set! . g$5749$Uaprr)
        (bytevector-u64-native-ref . g$5745$Uaprr)
        (bytevector-u32-set! . g$5739$Uaprr)
        (bytevector-u32-ref . g$5735$Uaprr)
        (bytevector-u32-native-set! . g$5741$Uaprr)
        (bytevector-u32-native-ref . g$5737$Uaprr)
        (bytevector-u16-set! . g$5731$Uaprr)
        (bytevector-u16-ref . g$5727$Uaprr)
        (bytevector-u16-native-set! . g$5733$Uaprr)
        (bytevector-u16-native-ref . g$5729$Uaprr)
        (bytevector-sint-set! . g$11595$Uaprr)
        (bytevector-sint-ref . g$11594$Uaprr)
        (bytevector-s8-set! . g$11593$Uaprr)
        (bytevector-s8-ref . g$11592$Uaprr)
        (bytevector-s64-set! . g$5748$Uaprr)
        (bytevector-s64-ref . g$5744$Uaprr)
        (bytevector-s64-native-set! . g$5750$Uaprr)
        (bytevector-s64-native-ref . g$5746$Uaprr)
        (bytevector-s32-set! . g$5740$Uaprr)
        (bytevector-s32-ref . g$5736$Uaprr)
        (bytevector-s32-native-set! . g$5742$Uaprr)
        (bytevector-s32-native-ref . g$5738$Uaprr)
        (bytevector-s16-set! . g$5732$Uaprr)
        (bytevector-s16-ref . g$5728$Uaprr)
        (bytevector-s16-native-set! . g$5734$Uaprr)
        (bytevector-s16-native-ref . g$5730$Uaprr)
        (bytevector-length . g$11591$Uaprr)
        (bytevector-ieee-single-set! . g$11590$Uaprr)
        (bytevector-ieee-single-ref . g$11589$Uaprr)
        (bytevector-ieee-single-native-set! . g$5753$Uaprr)
        (bytevector-ieee-single-native-ref . g$5751$Uaprr)
        (bytevector-ieee-double-set! . g$11588$Uaprr)
        (bytevector-ieee-double-ref . g$11587$Uaprr)
        (bytevector-ieee-double-native-set! . g$5754$Uaprr)
        (bytevector-ieee-double-native-ref . g$5752$Uaprr)
        (bytevector-fill! . g$11586$Uaprr)
        (bytevector-copy! . g$11585$Uaprr)
        (bytevector-copy . g$11584$Uaprr)
        (bytevector->uint-list . g$11583$Uaprr)
        (bytevector->u8-list . g$11582$Uaprr)
        (bytevector->sint-list . g$11581$Uaprr)
        (endianness . g$11345$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11801$Uaprr
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$11739$Uaprr)
        (string-titlecase . g$11738$Uaprr)
        (string-normalize-nfkd . g$6329$Uaprr)
        (string-normalize-nfkc . g$6328$Uaprr)
        (string-normalize-nfd . g$6327$Uaprr)
        (string-normalize-nfc . g$6326$Uaprr)
        (string-foldcase . g$11737$Uaprr)
        (string-downcase . g$11736$Uaprr)
        (string-ci>? . g$6313$Uaprr)
        (string-ci>=? . g$6315$Uaprr)
        (string-ci=? . g$6311$Uaprr)
        (string-ci<? . g$6312$Uaprr)
        (string-ci<=? . g$6314$Uaprr)
        (char-whitespace? . g$11735$Uaprr)
        (char-upper-case? . g$11734$Uaprr)
        (char-title-case? . g$11733$Uaprr)
        (char-numeric? . g$11732$Uaprr)
        (char-lower-case? . g$11731$Uaprr)
        (char-general-category . g$11730$Uaprr)
        (char-upcase . g$11729$Uaprr)
        (char-titlecase . g$11728$Uaprr)
        (char-foldcase . g$11727$Uaprr)
        (char-downcase . g$11726$Uaprr)
        (char-ci>? . g$6323$Uaprr)
        (char-ci>=? . g$6325$Uaprr)
        (char-ci=? . g$6321$Uaprr)
        (char-ci<? . g$6322$Uaprr)
        (char-ci<=? . g$6324$Uaprr)
        (char-alphabetic? . g$11725$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11802$Uaprr
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$11617$Uaprr)
        (raise-continuable . g$11616$Uaprr)
        (raise . g$11615$Uaprr)
        (guard . g$11360$Uaprr)
        (else . g$11349$Uaprr)
        (=> . g$11348$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11803$Uaprr
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$6393$Uaprr)
        (bitwise-reverse-bit-field . g$11561$Uaprr)
        (bitwise-length . g$11560$Uaprr)
        (bitwise-if . g$6387$Uaprr)
        (bitwise-first-bit-set . g$11559$Uaprr)
        (bitwise-copy-bit-field . g$6390$Uaprr)
        (bitwise-copy-bit . g$6388$Uaprr)
        (bitwise-bit-set? . g$11558$Uaprr)
        (bitwise-bit-field . g$6389$Uaprr)
        (bitwise-bit-count . g$11557$Uaprr)
        (bitwise-xor . g$11556$Uaprr)
        (bitwise-ior . g$11555$Uaprr)
        (bitwise-and . g$11554$Uaprr)
        (bitwise-not . g$11553$Uaprr)
        (bitwise-arithmetic-shift-right . g$6392$Uaprr)
        (bitwise-arithmetic-shift-left . g$6391$Uaprr)
        (bitwise-arithmetic-shift . g$11552$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11804$Uaprr
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$6465$Uaprr)
        (fxxor . g$6456$Uaprr)
        (fxrotate-bit-field . g$6479$Uaprr)
        (fxreverse-bit-field . g$11565$Uaprr)
        (fxpositive? . g$6463$Uaprr)
        (fxodd? . g$6467$Uaprr)
        (fxnot . g$6437$Uaprr)
        (fxnegative? . g$6464$Uaprr)
        (fxmod0 . g$6459$Uaprr)
        (fxmod . g$6458$Uaprr)
        (fxmin . g$6469$Uaprr)
        (fxmax . g$6468$Uaprr)
        (fxlength . g$6434$Uaprr)
        (fxior . g$6455$Uaprr)
        (fxif . g$6473$Uaprr)
        (fxfirst-bit-set . g$6435$Uaprr)
        (fxeven? . g$6466$Uaprr)
        (fxdiv0-and-mod0 . g$6462$Uaprr)
        (fxdiv0 . g$6461$Uaprr)
        (fxdiv-and-mod . g$6460$Uaprr)
        (fxdiv . g$6457$Uaprr)
        (fxcopy-bit-field . g$6476$Uaprr)
        (fxcopy-bit . g$6474$Uaprr)
        (fxbit-set? . g$6436$Uaprr)
        (fxbit-field . g$6475$Uaprr)
        (fxbit-count . g$6433$Uaprr)
        (fxarithmetic-shift-right . g$6478$Uaprr)
        (fxarithmetic-shift-left . g$6477$Uaprr)
        (fxarithmetic-shift . g$6432$Uaprr)
        (fxand . g$6454$Uaprr)
        (fx>? . g$6446$Uaprr)
        (fx>=? . g$6447$Uaprr)
        (fx=? . g$6443$Uaprr)
        (fx<? . g$6444$Uaprr)
        (fx<=? . g$6445$Uaprr)
        (fx-/carry . g$6471$Uaprr)
        (fx- . g$11564$Uaprr)
        (fx+/carry . g$6472$Uaprr)
        (fx+ . g$11563$Uaprr)
        (fx*/carry . g$6470$Uaprr)
        (fx* . g$11562$Uaprr)
        (greatest-fixnum . g$6430$Uaprr)
        (least-fixnum . g$6431$Uaprr)
        (fixnum-width . g$5434$Uaprr)
        (fixnum? . g$5432$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11805$Uaprr
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$6244$Uaprr)
        (no-infinities-violation? . g$6231$Uaprr)
        (make-no-nans-violation . g$6243$Uaprr)
        (make-no-infinities-violation . g$6230$Uaprr)
        (real->flonum . g$11580$Uaprr)
        (flzero? . g$6645$Uaprr)
        (fltruncate . g$6640$Uaprr)
        (fltan . g$6630$Uaprr)
        (flsqrt . g$6635$Uaprr)
        (flsin . g$6628$Uaprr)
        (flround . g$6641$Uaprr)
        (flpositive? . g$6643$Uaprr)
        (flonum? . g$5433$Uaprr)
        (flodd? . g$6647$Uaprr)
        (flnumerator . g$11579$Uaprr)
        (flnegative? . g$6644$Uaprr)
        (flnan? . g$6627$Uaprr)
        (flmod0 . g$6621$Uaprr)
        (flmod . g$6620$Uaprr)
        (flmin . g$6649$Uaprr)
        (flmax . g$6648$Uaprr)
        (fllog . g$6634$Uaprr)
        (flinteger? . g$6624$Uaprr)
        (flinfinite? . g$6626$Uaprr)
        (flfloor . g$6639$Uaprr)
        (flfinite? . g$6625$Uaprr)
        (flexpt . g$6637$Uaprr)
        (flexp . g$6636$Uaprr)
        (fleven? . g$6646$Uaprr)
        (fldiv0-and-mod0 . g$6623$Uaprr)
        (fldiv0 . g$11578$Uaprr)
        (fldiv-and-mod . g$6622$Uaprr)
        (fldiv . g$11577$Uaprr)
        (fldenominator . g$11576$Uaprr)
        (flcos . g$6629$Uaprr)
        (flceiling . g$6638$Uaprr)
        (flatan . g$6633$Uaprr)
        (flasin . g$6631$Uaprr)
        (flacos . g$6632$Uaprr)
        (flabs . g$6642$Uaprr)
        (fl>? . g$11575$Uaprr)
        (fl>=? . g$11574$Uaprr)
        (fl=? . g$11573$Uaprr)
        (fl<? . g$11572$Uaprr)
        (fl<=? . g$11571$Uaprr)
        (fl/ . g$11570$Uaprr)
        (fl- . g$11569$Uaprr)
        (fl+ . g$11568$Uaprr)
        (fl* . g$11567$Uaprr)
        (fixnum->flonum . g$11566$Uaprr)
        (&no-nans . g$11404$Uaprr)
        (&no-infinities . g$11403$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11806$Uaprr
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$11705$Uaprr)
        (string-ci-hash . g$11704$Uaprr)
        (string-hash . g$11703$Uaprr)
        (equal-hash . g$11702$Uaprr)
        (hashtable-equivalence-function . g$11701$Uaprr)
        (make-hashtable . g$11700$Uaprr)
        (hashtable-hash-function . g$11699$Uaprr)
        (make-eqv-hashtable . g$5687$Uaprr)
        (make-eq-hashtable . g$5686$Uaprr)
        (hashtable? . g$11698$Uaprr)
        (hashtable-update! . g$5693$Uaprr)
        (hashtable-size . g$5688$Uaprr)
        (hashtable-set! . g$5690$Uaprr)
        (hashtable-ref . g$5689$Uaprr)
        (hashtable-mutable? . g$11697$Uaprr)
        (hashtable-keys . g$11696$Uaprr)
        (hashtable-entries . g$11695$Uaprr)
        (hashtable-delete! . g$5691$Uaprr)
        (hashtable-copy . g$11694$Uaprr)
        (hashtable-contains? . g$5692$Uaprr)
        (hashtable-clear! . g$5694$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11807$Uaprr
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$11686$Uaprr)
        (eof-object . g$11685$Uaprr)
        (current-error-port . g$11684$Uaprr)
        (current-output-port . g$11683$Uaprr)
        (current-input-port . g$11682$Uaprr)
        (output-port? . g$11681$Uaprr)
        (input-port? . g$11680$Uaprr)
        (utf-8-codec . g$11679$Uaprr)
        (utf-16-codec . g$11678$Uaprr)
        (transcoder-error-handling-mode . g$11677$Uaprr)
        (transcoder-eol-style . g$11676$Uaprr)
        (transcoder-codec . g$11675$Uaprr)
        (transcoded-port . g$11674$Uaprr)
        (textual-port? . g$11673$Uaprr)
        (string->bytevector . g$11672$Uaprr)
        (standard-output-port . g$11671$Uaprr)
        (standard-input-port . g$11670$Uaprr)
        (standard-error-port . g$11669$Uaprr)
        (set-port-position! . g$11668$Uaprr)
        (put-u8 . g$11667$Uaprr)
        (put-string . g$11666$Uaprr)
        (put-datum . g$6699$Uaprr)
        (put-char . g$11665$Uaprr)
        (put-bytevector . g$11664$Uaprr)
        (port? . g$6704$Uaprr)
        (port-transcoder . g$11663$Uaprr)
        (port-position . g$11662$Uaprr)
        (port-has-set-port-position!? . g$11661$Uaprr)
        (port-has-port-position? . g$11660$Uaprr)
        (port-eof? . g$11659$Uaprr)
        (output-port-buffer-mode . g$11658$Uaprr)
        (open-string-output-port . g$6703$Uaprr)
        (open-string-input-port . g$11657$Uaprr)
        (open-file-output-port . g$11656$Uaprr)
        (open-file-input/output-port . g$11655$Uaprr)
        (open-file-input-port . g$11654$Uaprr)
        (open-bytevector-output-port . g$11653$Uaprr)
        (open-bytevector-input-port . g$11652$Uaprr)
        (native-transcoder . g$11651$Uaprr)
        (native-eol-style . g$11650$Uaprr)
        (make-transcoder . g$11649$Uaprr)
        (latin-1-codec . g$11648$Uaprr)
        (make-i/o-write-error . g$6092$Uaprr)
        (make-i/o-read-error . g$6079$Uaprr)
        (make-i/o-port-error . g$6187$Uaprr)
        (make-i/o-invalid-position-error . g$6105$Uaprr)
        (make-i/o-filename-error . g$6120$Uaprr)
        (make-i/o-file-protection-error . g$6135$Uaprr)
        (make-i/o-file-is-read-only-error . g$6148$Uaprr)
        (make-i/o-file-does-not-exist-error . g$6174$Uaprr)
        (make-i/o-file-already-exists-error . g$6161$Uaprr)
        (make-i/o-error . g$6066$Uaprr)
        (make-i/o-encoding-error . g$6215$Uaprr)
        (make-i/o-decoding-error . g$6202$Uaprr)
        (make-custom-textual-output-port . g$11647$Uaprr)
        (make-custom-textual-input/output-port . g$11646$Uaprr)
        (make-custom-textual-input-port . g$11645$Uaprr)
        (make-custom-binary-output-port . g$11644$Uaprr)
        (make-custom-binary-input/output-port . g$11643$Uaprr)
        (make-custom-binary-input-port . g$11642$Uaprr)
        (lookahead-u8 . g$11640$Uaprr)
        (lookahead-char . g$11639$Uaprr)
        (i/o-write-error? . g$6093$Uaprr)
        (i/o-read-error? . g$6080$Uaprr)
        (i/o-port-error? . g$6189$Uaprr)
        (i/o-invalid-position-error? . g$6107$Uaprr)
        (i/o-error-position . g$6108$Uaprr)
        (i/o-filename-error? . g$6122$Uaprr)
        (i/o-file-protection-error? . g$6136$Uaprr)
        (i/o-file-is-read-only-error? . g$6149$Uaprr)
        (i/o-file-does-not-exist-error? . g$6175$Uaprr)
        (i/o-file-already-exists-error? . g$6162$Uaprr)
        (i/o-error? . g$6067$Uaprr)
        (i/o-error-port . g$6190$Uaprr)
        (i/o-error-filename . g$6123$Uaprr)
        (i/o-encoding-error? . g$6217$Uaprr)
        (i/o-encoding-error-char . g$6218$Uaprr)
        (i/o-decoding-error? . g$6203$Uaprr)
        (get-u8 . g$11638$Uaprr)
        (get-string-n! . g$11637$Uaprr)
        (get-string-n . g$11636$Uaprr)
        (get-string-all . g$11635$Uaprr)
        (get-line . g$11634$Uaprr)
        (get-datum . g$6700$Uaprr)
        (get-char . g$11633$Uaprr)
        (get-bytevector-some . g$11632$Uaprr)
        (get-bytevector-n! . g$11631$Uaprr)
        (get-bytevector-n . g$11630$Uaprr)
        (get-bytevector-all . g$11629$Uaprr)
        (flush-output-port . g$11628$Uaprr)
        (close-port . g$11627$Uaprr)
        (call-with-string-output-port . g$6705$Uaprr)
        (call-with-port . g$6706$Uaprr)
        (call-with-bytevector-output-port . g$11626$Uaprr)
        (bytevector->string . g$11625$Uaprr)
        (buffer-mode? . g$11624$Uaprr)
        (binary-port? . g$11623$Uaprr)
        (&i/o-encoding . g$11402$Uaprr)
        (&i/o-decoding . g$11401$Uaprr)
        (&i/o-port . g$11400$Uaprr)
        (&i/o-file-does-not-exist . g$11399$Uaprr)
        (&i/o-file-already-exists . g$11398$Uaprr)
        (&i/o-file-is-read-only . g$11397$Uaprr)
        (&i/o-file-protection . g$11396$Uaprr)
        (&i/o-filename . g$11395$Uaprr)
        (&i/o-invalid-position . g$11394$Uaprr)
        (&i/o-write . g$11393$Uaprr)
        (&i/o-read . g$11392$Uaprr)
        (&i/o . g$11391$Uaprr)
        (error-handling-mode . g$11364$Uaprr)
        (file-options . g$11363$Uaprr)
        (buffer-mode . g$11362$Uaprr)
        (eol-style . g$11361$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11808$Uaprr
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$6791$Uaprr)
        (enum-set=? . g$6798$Uaprr)
        (enum-set-universe . g$6792$Uaprr)
        (enum-set-union . g$6799$Uaprr)
        (enum-set-subset? . g$6797$Uaprr)
        (enum-set-projection . g$6803$Uaprr)
        (enum-set-member? . g$6796$Uaprr)
        (enum-set-intersection . g$6800$Uaprr)
        (enum-set-indexer . g$6793$Uaprr)
        (enum-set-difference . g$6801$Uaprr)
        (enum-set-constructor . g$6794$Uaprr)
        (enum-set-complement . g$6802$Uaprr)
        (enum-set->list . g$6795$Uaprr)
        (define-enumeration . g$11375$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11809$Uaprr
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$5984$Uaprr)
        (warning? . g$5903$Uaprr)
        (violation? . g$5942$Uaprr)
        (undefined-violation? . g$6054$Uaprr)
        (syntax-violation? . g$6039$Uaprr)
        (syntax-violation-subform . g$6041$Uaprr)
        (syntax-violation-form . g$6040$Uaprr)
        (simple-conditions . g$11614$Uaprr)
        (serious-condition? . g$5916$Uaprr)
        (non-continuable-violation? . g$5998$Uaprr)
        (message-condition? . g$5889$Uaprr)
        (make-who-condition . g$5982$Uaprr)
        (make-warning . g$5902$Uaprr)
        (make-violation . g$5941$Uaprr)
        (make-undefined-violation . g$6053$Uaprr)
        (make-syntax-violation . g$6036$Uaprr)
        (make-serious-condition . g$5915$Uaprr)
        (make-non-continuable-violation . g$5997$Uaprr)
        (make-message-condition . g$5887$Uaprr)
        (make-lexical-violation . g$6023$Uaprr)
        (make-irritants-condition . g$5967$Uaprr)
        (make-implementation-restriction-violation . g$6010$Uaprr)
        (make-error . g$5928$Uaprr)
        (make-assertion-violation . g$5954$Uaprr)
        (lexical-violation? . g$6024$Uaprr)
        (irritants-condition? . g$5969$Uaprr)
        (implementation-restriction-violation? . g$6011$Uaprr)
        (error? . g$5929$Uaprr)
        (condition-who . g$5985$Uaprr)
        (condition-predicate . g$11613$Uaprr)
        (condition-message . g$5890$Uaprr)
        (condition-irritants . g$5970$Uaprr)
        (condition-accessor . g$11612$Uaprr)
        (condition . g$11611$Uaprr)
        (assertion-violation? . g$5955$Uaprr)
        (condition? . g$11610$Uaprr)
        (&non-continuable . g$11390$Uaprr)
        (&undefined . g$11389$Uaprr)
        (&syntax . g$11388$Uaprr)
        (&lexical . g$11387$Uaprr)
        (&implementation-restriction . g$11386$Uaprr)
        (&who . g$11385$Uaprr)
        (&irritants . g$11384$Uaprr)
        (&assertion . g$11383$Uaprr)
        (&violation . g$11382$Uaprr)
        (&error . g$11381$Uaprr)
        (&serious . g$11380$Uaprr)
        (&warning . g$11379$Uaprr)
        (&message . g$11378$Uaprr)
        (&condition . g$11377$Uaprr)
        (define-condition-type . g$11376$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11810$Uaprr
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$11717$Uaprr)
        (record-type-uid . g$11716$Uaprr)
        (record-type-sealed? . g$11715$Uaprr)
        (record-type-parent . g$11714$Uaprr)
        (record-type-opaque? . g$11713$Uaprr)
        (record-type-name . g$11712$Uaprr)
        (record-type-generative? . g$11711$Uaprr)
        (record-type-field-names . g$11710$Uaprr)
        (record-rtd . g$11709$Uaprr)
        (record-field-mutable? . g$11708$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11811$Uaprr
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$11724$Uaprr)
        (record-predicate . g$11723$Uaprr)
        (record-mutator . g$11722$Uaprr)
        (record-constructor . g$11721$Uaprr)
        (record-accessor . g$11720$Uaprr)
        (make-record-type-descriptor . g$11719$Uaprr)
        (make-record-constructor-descriptor . g$11718$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11812$Uaprr
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$11374$Uaprr)
        (parent-rtd . g$11373$Uaprr)
        (nongenerative . g$11372$Uaprr)
        (opaque . g$11371$Uaprr)
        (sealed . g$11370$Uaprr)
        (protocol . g$11369$Uaprr)
        (parent . g$11368$Uaprr)
        (immutable . g$11367$Uaprr)
        (mutable . g$11366$Uaprr)
        (fields . g$11365$Uaprr)
        (record-constructor-descriptor . g$11326$Uaprr)
        (record-type-descriptor . g$11325$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$15416$Uaprr
      'g$11813$Uaprr
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$8101$Uaprr)
        (&no-nans-rcd . g$6246$Uaprr)
        (&no-nans-rtd . g$6245$Uaprr)
        (&no-infinities-rcd . g$6233$Uaprr)
        (&no-infinities-rtd . g$6232$Uaprr)
        (&i/o-encoding-rcd . g$6220$Uaprr)
        (&i/o-encoding-rtd . g$6219$Uaprr)
        (&i/o-decoding-rcd . g$6205$Uaprr)
        (&i/o-decoding-rtd . g$6204$Uaprr)
        (&i/o-port-rcd . g$6192$Uaprr)
        (&i/o-port-rtd . g$6191$Uaprr)
        (&i/o-file-does-not-exist-rcd . g$6177$Uaprr)
        (&i/o-file-does-not-exist-rtd . g$6176$Uaprr)
        (&i/o-file-already-exists-rcd . g$6164$Uaprr)
        (&i/o-file-already-exists-rtd . g$6163$Uaprr)
        (&i/o-file-is-read-only-rcd . g$6151$Uaprr)
        (&i/o-file-is-read-only-rtd . g$6150$Uaprr)
        (&i/o-file-protection-rcd . g$6138$Uaprr)
        (&i/o-file-protection-rtd . g$6137$Uaprr)
        (&i/o-filename-rcd . g$6125$Uaprr)
        (&i/o-filename-rtd . g$6124$Uaprr)
        (&i/o-invalid-position-rcd . g$6110$Uaprr)
        (&i/o-invalid-position-rtd . g$6109$Uaprr)
        (&i/o-write-rcd . g$6095$Uaprr)
        (&i/o-write-rtd . g$6094$Uaprr)
        (&i/o-read-rcd . g$6082$Uaprr)
        (&i/o-read-rtd . g$6081$Uaprr)
        (&i/o-rcd . g$6069$Uaprr)
        (&i/o-rtd . g$6068$Uaprr)
        (&undefined-rcd . g$6056$Uaprr)
        (&undefined-rtd . g$6055$Uaprr)
        (&syntax-rcd . g$6043$Uaprr)
        (&syntax-rtd . g$6042$Uaprr)
        (&lexical-rcd . g$6026$Uaprr)
        (&lexical-rtd . g$6025$Uaprr)
        (&implementation-restriction-rcd . g$6013$Uaprr)
        (&implementation-restriction-rtd . g$6012$Uaprr)
        (&non-continuable-rcd . g$6000$Uaprr)
        (&non-continuable-rtd . g$5999$Uaprr)
        (&who-rcd . g$5987$Uaprr)
        (&who-rtd . g$5986$Uaprr)
        (&irritants-rcd . g$5972$Uaprr)
        (&irritants-rtd . g$5971$Uaprr)
        (&assertion-rcd . g$5957$Uaprr)
        (&assertion-rtd . g$5956$Uaprr)
        (&violation-rcd . g$5944$Uaprr)
        (&violation-rtd . g$5943$Uaprr)
        (&error-rcd . g$5931$Uaprr)
        (&error-rtd . g$5930$Uaprr)
        (&serious-rcd . g$5918$Uaprr)
        (&serious-rtd . g$5917$Uaprr)
        (&warning-rcd . g$5905$Uaprr)
        (&warning-rtd . g$5904$Uaprr)
        (&message-rcd . g$5892$Uaprr)
        (&message-rtd . g$5891$Uaprr)
        (&condition-rcd . g$5852$Uaprr)
        (&condition-rtd . g$5851$Uaprr)
        (library-letrec* . g$11776$Uaprr)
        (annotation-stripped . g$11775$Uaprr)
        (annotation-source . g$11774$Uaprr)
        (annotation-expression . g$11773$Uaprr)
        (annotation? . g$11772$Uaprr)
        (read-annotated . g$11771$Uaprr)
        (tanh . g$11770$Uaprr)
        (cosh . g$11769$Uaprr)
        (sinh . g$11768$Uaprr)
        (make-guid . g$11767$Uaprr)
        (unspecified? . g$11766$Uaprr)
        (make-list . g$5107$Uaprr)
        (last-pair . g$5106$Uaprr)
        (load-r5rs . g$11765$Uaprr)
        (license . g$11764$Uaprr)
        (stacktrace . g$11763$Uaprr)
        (ironscheme-build . g$11248$Uaprr)
        (define-clr-class-internal . g$11762$Uaprr)
        (clr-field-set!-internal . g$11761$Uaprr)
        (clr-field-get-internal . g$11760$Uaprr)
        (clr-cast-internal . g$11759$Uaprr)
        (clr-call-internal . g$11758$Uaprr)
        (clr-new-internal . g$11757$Uaprr)
        (clr-new-array-internal . g$11756$Uaprr)
        (clr-is-internal . g$11755$Uaprr)
        (clr-reference-internal . g$11754$Uaprr)
        (clr-using-internal . g$11753$Uaprr)
        (syntax-error . g$8221$Uaprr)
        (syntax-dispatch . g$8096$Uaprr)
        (compile-core . g$11752$Uaprr)
        (eval-core . g$11751$Uaprr)
        (remove-location . g$11750$Uaprr)
        (set-symbol-value! . g$11749$Uaprr)
        (symbol-value . g$11748$Uaprr)
        (symbol-bound? . g$11747$Uaprr)
        (ungensym . g$11746$Uaprr)
        (gensym . g$11745$Uaprr)
        (void . g$11744$Uaprr)
        (load-serialized-library . g$11743$Uaprr)
        (serialize-library . g$11742$Uaprr)
        (compile-system-libraries . g$11252$Uaprr)
        (compile->closure . g$11254$Uaprr)
        (compile . g$11253$Uaprr)
        (load . g$11247$Uaprr)
        (string-normalize . g$11741$Uaprr)
        (interaction-environment . g$8231$Uaprr)
        (char-ready? . g$11740$Uaprr)
        (string-upcase . g$11739$Uaprr)
        (string-titlecase . g$11738$Uaprr)
        (string-normalize-nfkd . g$6329$Uaprr)
        (string-normalize-nfkc . g$6328$Uaprr)
        (string-normalize-nfd . g$6327$Uaprr)
        (string-normalize-nfc . g$6326$Uaprr)
        (string-foldcase . g$11737$Uaprr)
        (string-downcase . g$11736$Uaprr)
        (string-ci>? . g$6313$Uaprr)
        (string-ci>=? . g$6315$Uaprr)
        (string-ci=? . g$6311$Uaprr)
        (string-ci<? . g$6312$Uaprr)
        (string-ci<=? . g$6314$Uaprr)
        (char-whitespace? . g$11735$Uaprr)
        (char-upper-case? . g$11734$Uaprr)
        (char-title-case? . g$11733$Uaprr)
        (char-numeric? . g$11732$Uaprr)
        (char-lower-case? . g$11731$Uaprr)
        (char-general-category . g$11730$Uaprr)
        (char-upcase . g$11729$Uaprr)
        (char-titlecase . g$11728$Uaprr)
        (char-foldcase . g$11727$Uaprr)
        (char-downcase . g$11726$Uaprr)
        (char-ci>? . g$6323$Uaprr)
        (char-ci>=? . g$6325$Uaprr)
        (char-ci=? . g$6321$Uaprr)
        (char-ci<? . g$6322$Uaprr)
        (char-ci<=? . g$6324$Uaprr)
        (char-alphabetic? . g$11725$Uaprr)
        (variable-transformer-procedure . g$7908$Uaprr)
        (variable-transformer? . g$7907$Uaprr)
        (make-variable-transformer . g$7905$Uaprr)
        (identifier? . g$8225$Uaprr)
        (generate-temporaries . g$8214$Uaprr)
        (free-identifier=? . g$8215$Uaprr)
        (syntax->datum . g$8227$Uaprr)
        (datum->syntax . g$8226$Uaprr)
        (bound-identifier=? . g$8216$Uaprr)
        (record-type-descriptor? . g$11724$Uaprr)
        (record-predicate . g$11723$Uaprr)
        (record-mutator . g$11722$Uaprr)
        (record-constructor . g$11721$Uaprr)
        (record-accessor . g$11720$Uaprr)
        (make-record-type-descriptor . g$11719$Uaprr)
        (make-record-constructor-descriptor . g$11718$Uaprr)
        (record? . g$11717$Uaprr)
        (record-type-uid . g$11716$Uaprr)
        (record-type-sealed? . g$11715$Uaprr)
        (record-type-parent . g$11714$Uaprr)
        (record-type-opaque? . g$11713$Uaprr)
        (record-type-name . g$11712$Uaprr)
        (record-type-generative? . g$11711$Uaprr)
        (record-type-field-names . g$11710$Uaprr)
        (record-rtd . g$11709$Uaprr)
        (record-field-mutable? . g$11708$Uaprr)
        (delete-file . g$5720$Uaprr)
        (file-exists? . g$5719$Uaprr)
        (vector-sort! . g$11707$Uaprr)
        (vector-sort . g$11706$Uaprr)
        (list-sort . g$6282$Uaprr)
        (symbol-hash . g$11705$Uaprr)
        (string-ci-hash . g$11704$Uaprr)
        (string-hash . g$11703$Uaprr)
        (equal-hash . g$11702$Uaprr)
        (hashtable-equivalence-function . g$11701$Uaprr)
        (make-hashtable . g$11700$Uaprr)
        (hashtable-hash-function . g$11699$Uaprr)
        (make-eqv-hashtable . g$5687$Uaprr)
        (make-eq-hashtable . g$5686$Uaprr)
        (hashtable? . g$11698$Uaprr)
        (hashtable-update! . g$5693$Uaprr)
        (hashtable-size . g$5688$Uaprr)
        (hashtable-set! . g$5690$Uaprr)
        (hashtable-ref . g$5689$Uaprr)
        (hashtable-mutable? . g$11697$Uaprr)
        (hashtable-keys . g$11696$Uaprr)
        (hashtable-entries . g$11695$Uaprr)
        (hashtable-delete! . g$5691$Uaprr)
        (hashtable-copy . g$11694$Uaprr)
        (hashtable-contains? . g$5692$Uaprr)
        (hashtable-clear! . g$5694$Uaprr)
        (call-with-output-file . g$6730$Uaprr)
        (call-with-input-file . g$6729$Uaprr)
        (write-char . g$6721$Uaprr)
        (write . g$11693$Uaprr)
        (with-output-to-file . g$6728$Uaprr)
        (with-input-from-file . g$6727$Uaprr)
        (read-char . g$6720$Uaprr)
        (read . g$11692$Uaprr)
        (peek-char . g$6719$Uaprr)
        (open-output-file . g$11691$Uaprr)
        (open-input-file . g$11690$Uaprr)
        (newline . g$6731$Uaprr)
        (display . g$11689$Uaprr)
        (close-output-port . g$11688$Uaprr)
        (close-input-port . g$11687$Uaprr)
        (eof-object? . g$11686$Uaprr)
        (eof-object . g$11685$Uaprr)
        (current-error-port . g$11684$Uaprr)
        (current-output-port . g$11683$Uaprr)
        (current-input-port . g$11682$Uaprr)
        (output-port? . g$11681$Uaprr)
        (input-port? . g$11680$Uaprr)
        (utf-8-codec . g$11679$Uaprr)
        (utf-16-codec . g$11678$Uaprr)
        (transcoder-error-handling-mode . g$11677$Uaprr)
        (transcoder-eol-style . g$11676$Uaprr)
        (transcoder-codec . g$11675$Uaprr)
        (transcoded-port . g$11674$Uaprr)
        (textual-port? . g$11673$Uaprr)
        (string->bytevector . g$11672$Uaprr)
        (standard-output-port . g$11671$Uaprr)
        (standard-input-port . g$11670$Uaprr)
        (standard-error-port . g$11669$Uaprr)
        (set-port-position! . g$11668$Uaprr)
        (put-u8 . g$11667$Uaprr)
        (put-string . g$11666$Uaprr)
        (put-datum . g$6699$Uaprr)
        (put-char . g$11665$Uaprr)
        (put-bytevector . g$11664$Uaprr)
        (port? . g$6704$Uaprr)
        (port-transcoder . g$11663$Uaprr)
        (port-position . g$11662$Uaprr)
        (port-has-set-port-position!? . g$11661$Uaprr)
        (port-has-port-position? . g$11660$Uaprr)
        (port-eof? . g$11659$Uaprr)
        (output-port-buffer-mode . g$11658$Uaprr)
        (open-string-output-port . g$6703$Uaprr)
        (open-string-input-port . g$11657$Uaprr)
        (open-file-output-port . g$11656$Uaprr)
        (open-file-input/output-port . g$11655$Uaprr)
        (open-file-input-port . g$11654$Uaprr)
        (open-bytevector-output-port . g$11653$Uaprr)
        (open-bytevector-input-port . g$11652$Uaprr)
        (native-transcoder . g$11651$Uaprr)
        (native-eol-style . g$11650$Uaprr)
        (make-transcoder . g$11649$Uaprr)
        (latin-1-codec . g$11648$Uaprr)
        (make-i/o-write-error . g$6092$Uaprr)
        (make-i/o-read-error . g$6079$Uaprr)
        (make-i/o-port-error . g$6187$Uaprr)
        (make-i/o-invalid-position-error . g$6105$Uaprr)
        (make-i/o-filename-error . g$6120$Uaprr)
        (make-i/o-file-protection-error . g$6135$Uaprr)
        (make-i/o-file-is-read-only-error . g$6148$Uaprr)
        (make-i/o-file-does-not-exist-error . g$6174$Uaprr)
        (make-i/o-file-already-exists-error . g$6161$Uaprr)
        (make-i/o-error . g$6066$Uaprr)
        (make-i/o-encoding-error . g$6215$Uaprr)
        (make-i/o-decoding-error . g$6202$Uaprr)
        (make-custom-textual-output-port . g$11647$Uaprr)
        (make-custom-textual-input/output-port . g$11646$Uaprr)
        (make-custom-textual-input-port . g$11645$Uaprr)
        (make-custom-binary-output-port . g$11644$Uaprr)
        (make-custom-binary-input/output-port . g$11643$Uaprr)
        (make-custom-binary-input-port . g$11642$Uaprr)
        (make-bytevector . g$11641$Uaprr)
        (lookahead-u8 . g$11640$Uaprr)
        (lookahead-char . g$11639$Uaprr)
        (i/o-write-error? . g$6093$Uaprr)
        (i/o-read-error? . g$6080$Uaprr)
        (i/o-port-error? . g$6189$Uaprr)
        (i/o-invalid-position-error? . g$6107$Uaprr)
        (i/o-error-position . g$6108$Uaprr)
        (i/o-filename-error? . g$6122$Uaprr)
        (i/o-file-protection-error? . g$6136$Uaprr)
        (i/o-file-is-read-only-error? . g$6149$Uaprr)
        (i/o-file-does-not-exist-error? . g$6175$Uaprr)
        (i/o-file-already-exists-error? . g$6162$Uaprr)
        (i/o-error? . g$6067$Uaprr)
        (i/o-error-port . g$6190$Uaprr)
        (i/o-error-filename . g$6123$Uaprr)
        (i/o-encoding-error? . g$6217$Uaprr)
        (i/o-encoding-error-char . g$6218$Uaprr)
        (i/o-decoding-error? . g$6203$Uaprr)
        (get-u8 . g$11638$Uaprr)
        (get-string-n! . g$11637$Uaprr)
        (get-string-n . g$11636$Uaprr)
        (get-string-all . g$11635$Uaprr)
        (get-line . g$11634$Uaprr)
        (get-datum . g$6700$Uaprr)
        (get-char . g$11633$Uaprr)
        (get-bytevector-some . g$11632$Uaprr)
        (get-bytevector-n! . g$11631$Uaprr)
        (get-bytevector-n . g$11630$Uaprr)
        (get-bytevector-all . g$11629$Uaprr)
        (flush-output-port . g$11628$Uaprr)
        (close-port . g$11627$Uaprr)
        (call-with-string-output-port . g$6705$Uaprr)
        (call-with-port . g$6706$Uaprr)
        (call-with-bytevector-output-port . g$11626$Uaprr)
        (bytevector->string . g$11625$Uaprr)
        (buffer-mode? . g$11624$Uaprr)
        (binary-port? . g$11623$Uaprr)
        (scheme-report-environment . g$8204$Uaprr)
        (quotient . g$6261$Uaprr)
        (null-environment . g$8203$Uaprr)
        (remainder . g$6262$Uaprr)
        (modulo . g$6263$Uaprr)
        (inexact->exact . g$6258$Uaprr)
        (force . g$6265$Uaprr)
        (exact->inexact . g$6259$Uaprr)
        (exit . g$11622$Uaprr)
        (command-line . g$11243$Uaprr)
        (string-fill! . g$11621$Uaprr)
        (string-set! . g$11620$Uaprr)
        (set-cdr! . g$11619$Uaprr)
        (set-car! . g$11618$Uaprr)
        (remove . g$5129$Uaprr)
        (remv . g$5130$Uaprr)
        (remp . g$5110$Uaprr)
        (remq . g$5131$Uaprr)
        (partition . g$5109$Uaprr)
        (memv . g$5117$Uaprr)
        (memq . g$5116$Uaprr)
        (memp . g$5119$Uaprr)
        (member . g$5118$Uaprr)
        (exists . g$5123$Uaprr)
        (for-all . g$5122$Uaprr)
        (fold-right . g$5128$Uaprr)
        (fold-left . g$5127$Uaprr)
        (find . g$5108$Uaprr)
        (filter . g$5111$Uaprr)
        (cons* . g$5126$Uaprr)
        (assv . g$5113$Uaprr)
        (assq . g$5112$Uaprr)
        (assp . g$5115$Uaprr)
        (assoc . g$5114$Uaprr)
        (with-exception-handler . g$11617$Uaprr)
        (raise-continuable . g$11616$Uaprr)
        (raise . g$11615$Uaprr)
        (eval . g$8206$Uaprr)
        (environment . g$8202$Uaprr)
        (make-enumeration . g$6791$Uaprr)
        (enum-set=? . g$6798$Uaprr)
        (enum-set-universe . g$6792$Uaprr)
        (enum-set-union . g$6799$Uaprr)
        (enum-set-subset? . g$6797$Uaprr)
        (enum-set-projection . g$6803$Uaprr)
        (enum-set-member? . g$6796$Uaprr)
        (enum-set-intersection . g$6800$Uaprr)
        (enum-set-indexer . g$6793$Uaprr)
        (enum-set-difference . g$6801$Uaprr)
        (enum-set-constructor . g$6794$Uaprr)
        (enum-set-complement . g$6802$Uaprr)
        (enum-set->list . g$6795$Uaprr)
        (who-condition? . g$5984$Uaprr)
        (warning? . g$5903$Uaprr)
        (violation? . g$5942$Uaprr)
        (undefined-violation? . g$6054$Uaprr)
        (syntax-violation? . g$6039$Uaprr)
        (syntax-violation-subform . g$6041$Uaprr)
        (syntax-violation-form . g$6040$Uaprr)
        (syntax-violation . g$8224$Uaprr)
        (simple-conditions . g$11614$Uaprr)
        (serious-condition? . g$5916$Uaprr)
        (non-continuable-violation? . g$5998$Uaprr)
        (message-condition? . g$5889$Uaprr)
        (make-who-condition . g$5982$Uaprr)
        (make-warning . g$5902$Uaprr)
        (make-violation . g$5941$Uaprr)
        (make-undefined-violation . g$6053$Uaprr)
        (make-syntax-violation . g$6036$Uaprr)
        (make-serious-condition . g$5915$Uaprr)
        (make-non-continuable-violation . g$5997$Uaprr)
        (make-message-condition . g$5887$Uaprr)
        (make-lexical-violation . g$6023$Uaprr)
        (make-irritants-condition . g$5967$Uaprr)
        (make-implementation-restriction-violation . g$6010$Uaprr)
        (make-error . g$5928$Uaprr)
        (make-assertion-violation . g$5954$Uaprr)
        (lexical-violation? . g$6024$Uaprr)
        (irritants-condition? . g$5969$Uaprr)
        (implementation-restriction-violation? . g$6011$Uaprr)
        (error? . g$5929$Uaprr)
        (condition-who . g$5985$Uaprr)
        (condition-predicate . g$11613$Uaprr)
        (condition-message . g$5890$Uaprr)
        (condition-irritants . g$5970$Uaprr)
        (condition-accessor . g$11612$Uaprr)
        (condition . g$11611$Uaprr)
        (assertion-violation? . g$5955$Uaprr)
        (condition? . g$11610$Uaprr)
        (utf32->string . g$11609$Uaprr)
        (utf16->string . g$11608$Uaprr)
        (utf8->string . g$11607$Uaprr)
        (uint-list->bytevector . g$11606$Uaprr)
        (u8-list->bytevector . g$11605$Uaprr)
        (string->utf8 . g$11604$Uaprr)
        (string->utf32 . g$11603$Uaprr)
        (string->utf16 . g$11602$Uaprr)
        (sint-list->bytevector . g$11601$Uaprr)
        (native-endianness . g$5726$Uaprr)
        (bytevector? . g$5428$Uaprr)
        (bytevector=? . g$11600$Uaprr)
        (bytevector-uint-set! . g$11599$Uaprr)
        (bytevector-uint-ref . g$11598$Uaprr)
        (bytevector-u8-set! . g$11597$Uaprr)
        (bytevector-u8-ref . g$11596$Uaprr)
        (bytevector-u64-set! . g$5747$Uaprr)
        (bytevector-u64-ref . g$5743$Uaprr)
        (bytevector-u64-native-set! . g$5749$Uaprr)
        (bytevector-u64-native-ref . g$5745$Uaprr)
        (bytevector-u32-set! . g$5739$Uaprr)
        (bytevector-u32-ref . g$5735$Uaprr)
        (bytevector-u32-native-set! . g$5741$Uaprr)
        (bytevector-u32-native-ref . g$5737$Uaprr)
        (bytevector-u16-set! . g$5731$Uaprr)
        (bytevector-u16-ref . g$5727$Uaprr)
        (bytevector-u16-native-set! . g$5733$Uaprr)
        (bytevector-u16-native-ref . g$5729$Uaprr)
        (bytevector-sint-set! . g$11595$Uaprr)
        (bytevector-sint-ref . g$11594$Uaprr)
        (bytevector-s8-set! . g$11593$Uaprr)
        (bytevector-s8-ref . g$11592$Uaprr)
        (bytevector-s64-set! . g$5748$Uaprr)
        (bytevector-s64-ref . g$5744$Uaprr)
        (bytevector-s64-native-set! . g$5750$Uaprr)
        (bytevector-s64-native-ref . g$5746$Uaprr)
        (bytevector-s32-set! . g$5740$Uaprr)
        (bytevector-s32-ref . g$5736$Uaprr)
        (bytevector-s32-native-set! . g$5742$Uaprr)
        (bytevector-s32-native-ref . g$5738$Uaprr)
        (bytevector-s16-set! . g$5732$Uaprr)
        (bytevector-s16-ref . g$5728$Uaprr)
        (bytevector-s16-native-set! . g$5734$Uaprr)
        (bytevector-s16-native-ref . g$5730$Uaprr)
        (bytevector-length . g$11591$Uaprr)
        (bytevector-ieee-single-set! . g$11590$Uaprr)
        (bytevector-ieee-single-ref . g$11589$Uaprr)
        (bytevector-ieee-single-native-set! . g$5753$Uaprr)
        (bytevector-ieee-single-native-ref . g$5751$Uaprr)
        (bytevector-ieee-double-set! . g$11588$Uaprr)
        (bytevector-ieee-double-ref . g$11587$Uaprr)
        (bytevector-ieee-double-native-set! . g$5754$Uaprr)
        (bytevector-ieee-double-native-ref . g$5752$Uaprr)
        (bytevector-fill! . g$11586$Uaprr)
        (bytevector-copy! . g$11585$Uaprr)
        (bytevector-copy . g$11584$Uaprr)
        (bytevector->uint-list . g$11583$Uaprr)
        (bytevector->u8-list . g$11582$Uaprr)
        (bytevector->sint-list . g$11581$Uaprr)
        (no-nans-violation? . g$6244$Uaprr)
        (no-infinities-violation? . g$6231$Uaprr)
        (make-no-nans-violation . g$6243$Uaprr)
        (make-no-infinities-violation . g$6230$Uaprr)
        (real->flonum . g$11580$Uaprr)
        (flzero? . g$6645$Uaprr)
        (fltruncate . g$6640$Uaprr)
        (fltan . g$6630$Uaprr)
        (flsqrt . g$6635$Uaprr)
        (flsin . g$6628$Uaprr)
        (flround . g$6641$Uaprr)
        (flpositive? . g$6643$Uaprr)
        (flonum? . g$5433$Uaprr)
        (flodd? . g$6647$Uaprr)
        (flnumerator . g$11579$Uaprr)
        (flnegative? . g$6644$Uaprr)
        (flnan? . g$6627$Uaprr)
        (flmod0 . g$6621$Uaprr)
        (flmod . g$6620$Uaprr)
        (flmin . g$6649$Uaprr)
        (flmax . g$6648$Uaprr)
        (fllog . g$6634$Uaprr)
        (flinteger? . g$6624$Uaprr)
        (flinfinite? . g$6626$Uaprr)
        (flfloor . g$6639$Uaprr)
        (flfinite? . g$6625$Uaprr)
        (flexpt . g$6637$Uaprr)
        (flexp . g$6636$Uaprr)
        (fleven? . g$6646$Uaprr)
        (fldiv0-and-mod0 . g$6623$Uaprr)
        (fldiv0 . g$11578$Uaprr)
        (fldiv-and-mod . g$6622$Uaprr)
        (fldiv . g$11577$Uaprr)
        (fldenominator . g$11576$Uaprr)
        (flcos . g$6629$Uaprr)
        (flceiling . g$6638$Uaprr)
        (flatan . g$6633$Uaprr)
        (flasin . g$6631$Uaprr)
        (flacos . g$6632$Uaprr)
        (flabs . g$6642$Uaprr)
        (fl>? . g$11575$Uaprr)
        (fl>=? . g$11574$Uaprr)
        (fl=? . g$11573$Uaprr)
        (fl<? . g$11572$Uaprr)
        (fl<=? . g$11571$Uaprr)
        (fl/ . g$11570$Uaprr)
        (fl- . g$11569$Uaprr)
        (fl+ . g$11568$Uaprr)
        (fl* . g$11567$Uaprr)
        (fixnum->flonum . g$11566$Uaprr)
        (fxzero? . g$6465$Uaprr)
        (fxxor . g$6456$Uaprr)
        (fxrotate-bit-field . g$6479$Uaprr)
        (fxreverse-bit-field . g$11565$Uaprr)
        (fxpositive? . g$6463$Uaprr)
        (fxodd? . g$6467$Uaprr)
        (fxnot . g$6437$Uaprr)
        (fxnegative? . g$6464$Uaprr)
        (fxmod0 . g$6459$Uaprr)
        (fxmod . g$6458$Uaprr)
        (fxmin . g$6469$Uaprr)
        (fxmax . g$6468$Uaprr)
        (fxlength . g$6434$Uaprr)
        (fxior . g$6455$Uaprr)
        (fxif . g$6473$Uaprr)
        (fxfirst-bit-set . g$6435$Uaprr)
        (fxeven? . g$6466$Uaprr)
        (fxdiv0-and-mod0 . g$6462$Uaprr)
        (fxdiv0 . g$6461$Uaprr)
        (fxdiv-and-mod . g$6460$Uaprr)
        (fxdiv . g$6457$Uaprr)
        (fxcopy-bit-field . g$6476$Uaprr)
        (fxcopy-bit . g$6474$Uaprr)
        (fxbit-set? . g$6436$Uaprr)
        (fxbit-field . g$6475$Uaprr)
        (fxbit-count . g$6433$Uaprr)
        (fxarithmetic-shift-right . g$6478$Uaprr)
        (fxarithmetic-shift-left . g$6477$Uaprr)
        (fxarithmetic-shift . g$6432$Uaprr)
        (fxand . g$6454$Uaprr)
        (fx>? . g$6446$Uaprr)
        (fx>=? . g$6447$Uaprr)
        (fx=? . g$6443$Uaprr)
        (fx<? . g$6444$Uaprr)
        (fx<=? . g$6445$Uaprr)
        (fx-/carry . g$6471$Uaprr)
        (fx- . g$11564$Uaprr)
        (fx+/carry . g$6472$Uaprr)
        (fx+ . g$11563$Uaprr)
        (fx*/carry . g$6470$Uaprr)
        (fx* . g$11562$Uaprr)
        (greatest-fixnum . g$6430$Uaprr)
        (least-fixnum . g$6431$Uaprr)
        (fixnum-width . g$5434$Uaprr)
        (fixnum? . g$5432$Uaprr)
        (bitwise-rotate-bit-field . g$6393$Uaprr)
        (bitwise-reverse-bit-field . g$11561$Uaprr)
        (bitwise-length . g$11560$Uaprr)
        (bitwise-if . g$6387$Uaprr)
        (bitwise-first-bit-set . g$11559$Uaprr)
        (bitwise-copy-bit-field . g$6390$Uaprr)
        (bitwise-copy-bit . g$6388$Uaprr)
        (bitwise-bit-set? . g$11558$Uaprr)
        (bitwise-bit-field . g$6389$Uaprr)
        (bitwise-bit-count . g$11557$Uaprr)
        (bitwise-xor . g$11556$Uaprr)
        (bitwise-ior . g$11555$Uaprr)
        (bitwise-and . g$11554$Uaprr)
        (bitwise-not . g$11553$Uaprr)
        (bitwise-arithmetic-shift-right . g$6392$Uaprr)
        (bitwise-arithmetic-shift-left . g$6391$Uaprr)
        (bitwise-arithmetic-shift . g$11552$Uaprr)
        (zero? . g$5468$Uaprr)
        (vector? . g$5427$Uaprr)
        (vector-set! . g$11551$Uaprr)
        (vector-ref . g$11550$Uaprr)
        (vector-map . g$5500$Uaprr)
        (vector-length . g$11549$Uaprr)
        (vector-for-each . g$5501$Uaprr)
        (vector-fill! . g$5435$Uaprr)
        (vector->list . g$11548$Uaprr)
        (vector . g$11547$Uaprr)
        (values . g$11546$Uaprr)
        (truncate . g$11545$Uaprr)
        (tan . g$11544$Uaprr)
        (symbol? . g$5429$Uaprr)
        (symbol=? . g$5485$Uaprr)
        (symbol->string . g$11543$Uaprr)
        (substring . g$11542$Uaprr)
        (string? . g$11541$Uaprr)
        (string>? . g$5482$Uaprr)
        (string>=? . g$5484$Uaprr)
        (string=? . g$5480$Uaprr)
        (string<? . g$5481$Uaprr)
        (string<=? . g$5483$Uaprr)
        (string-ref . g$11540$Uaprr)
        (string-length . g$11539$Uaprr)
        (string-for-each . g$5502$Uaprr)
        (string-copy . g$11538$Uaprr)
        (string-append . g$11537$Uaprr)
        (string->symbol . g$11536$Uaprr)
        (string->number . g$11535$Uaprr)
        (string->list . g$11534$Uaprr)
        (string . g$11533$Uaprr)
        (sqrt . g$11532$Uaprr)
        (sin . g$11531$Uaprr)
        (round . g$11530$Uaprr)
        (reverse . g$5437$Uaprr)
        (real? . g$11529$Uaprr)
        (real-valued? . g$11528$Uaprr)
        (real-part . g$11527$Uaprr)
        (rationalize . g$5497$Uaprr)
        (rational? . g$11526$Uaprr)
        (rational-valued? . g$11525$Uaprr)
        (procedure? . g$5431$Uaprr)
        (positive? . g$5466$Uaprr)
        (pair? . g$11524$Uaprr)
        (odd? . g$5470$Uaprr)
        (numerator . g$11523$Uaprr)
        (number? . g$11522$Uaprr)
        (number->string . g$11521$Uaprr)
        (null? . g$11520$Uaprr)
        (not . g$11519$Uaprr)
        (negative? . g$5467$Uaprr)
        (nan? . g$11518$Uaprr)
        (min . g$5472$Uaprr)
        (max . g$5471$Uaprr)
        (map . g$5124$Uaprr)
        (make-vector . g$11517$Uaprr)
        (make-string . g$11516$Uaprr)
        (make-rectangular . g$11515$Uaprr)
        (make-polar . g$11514$Uaprr)
        (magnitude . g$11513$Uaprr)
        (log . g$11512$Uaprr)
        (list? . g$11511$Uaprr)
        (list-tail . g$5104$Uaprr)
        (list-ref . g$5105$Uaprr)
        (list->vector . g$5424$Uaprr)
        (list->string . g$5425$Uaprr)
        (list . g$11510$Uaprr)
        (length . g$11509$Uaprr)
        (lcm . g$5474$Uaprr)
        (integer? . g$11508$Uaprr)
        (integer-valued? . g$11507$Uaprr)
        (integer->char . g$11506$Uaprr)
        (infinite? . g$11505$Uaprr)
        (inexact? . g$11504$Uaprr)
        (inexact . g$11503$Uaprr)
        (imag-part . g$11502$Uaprr)
        (gcd . g$5473$Uaprr)
        (for-each . g$5125$Uaprr)
        (floor . g$11501$Uaprr)
        (finite? . g$11500$Uaprr)
        (expt . g$11499$Uaprr)
        (exp . g$11498$Uaprr)
        (exact? . g$11497$Uaprr)
        (exact-integer-sqrt . g$11496$Uaprr)
        (exact . g$11495$Uaprr)
        (even? . g$5469$Uaprr)
        (error . g$11494$Uaprr)
        (eqv? . g$11493$Uaprr)
        (equal? . g$11492$Uaprr)
        (eq? . g$11491$Uaprr)
        (dynamic-wind . g$11490$Uaprr)
        (div0-and-mod0 . g$5423$Uaprr)
        (mod0 . g$5421$Uaprr)
        (div0 . g$11489$Uaprr)
        (div-and-mod . g$5422$Uaprr)
        (mod . g$5420$Uaprr)
        (div . g$11488$Uaprr)
        (denominator . g$11487$Uaprr)
        (cos . g$11486$Uaprr)
        (cons . g$11485$Uaprr)
        (complex? . g$11484$Uaprr)
        (char? . g$5426$Uaprr)
        (char>? . g$5494$Uaprr)
        (char>=? . g$5496$Uaprr)
        (char=? . g$5492$Uaprr)
        (char<? . g$5493$Uaprr)
        (char<=? . g$5495$Uaprr)
        (char->integer . g$11483$Uaprr)
        (ceiling . g$11482$Uaprr)
        (call-with-values . g$11481$Uaprr)
        (call/cc . g$11480$Uaprr)
        (call-with-current-continuation . g$11479$Uaprr)
        (cddddr . g$5465$Uaprr)
        (cdddar . g$5464$Uaprr)
        (cddadr . g$5463$Uaprr)
        (cddaar . g$5462$Uaprr)
        (cdaddr . g$5461$Uaprr)
        (cdadar . g$5460$Uaprr)
        (cdaadr . g$5459$Uaprr)
        (cdaaar . g$5458$Uaprr)
        (cadddr . g$5457$Uaprr)
        (caddar . g$5456$Uaprr)
        (cadadr . g$5455$Uaprr)
        (cadaar . g$5454$Uaprr)
        (caaddr . g$5453$Uaprr)
        (caadar . g$5452$Uaprr)
        (caaadr . g$5451$Uaprr)
        (caaaar . g$5450$Uaprr)
        (cdddr . g$5449$Uaprr)
        (cddar . g$5448$Uaprr)
        (cdadr . g$5447$Uaprr)
        (cdaar . g$5446$Uaprr)
        (caddr . g$5445$Uaprr)
        (cadar . g$5444$Uaprr)
        (caadr . g$5443$Uaprr)
        (caaar . g$5442$Uaprr)
        (cddr . g$5441$Uaprr)
        (cdar . g$5440$Uaprr)
        (cadr . g$5439$Uaprr)
        (caar . g$5438$Uaprr)
        (cdr . g$11478$Uaprr)
        (car . g$11477$Uaprr)
        (boolean? . g$5430$Uaprr)
        (boolean=? . g$5486$Uaprr)
        (atan . g$11476$Uaprr)
        (assertion-violation . g$11475$Uaprr)
        (asin . g$11474$Uaprr)
        (apply . g$11473$Uaprr)
        (append . g$11472$Uaprr)
        (angle . g$11471$Uaprr)
        (acos . g$11470$Uaprr)
        (abs . g$11469$Uaprr)
        (/ . g$11468$Uaprr)
        (* . g$11467$Uaprr)
        (- . g$11466$Uaprr)
        (+ . g$11465$Uaprr)
        (>= . g$11464$Uaprr)
        (> . g$11463$Uaprr)
        (= . g$11462$Uaprr)
        (<= . g$11461$Uaprr)
        (< . g$11460$Uaprr)
        ($fxarithmetic-shift-right . g$11459$Uaprr)
        ($fxarithmetic-shift-left . g$11458$Uaprr)
        ($$fx- . g$11457$Uaprr)
        ($$fx* . g$11456$Uaprr)
        ($$fx+ . g$11455$Uaprr)
        ($fxnot . g$11454$Uaprr)
        ($fxxor . g$11453$Uaprr)
        ($fxior . g$11452$Uaprr)
        ($fxand . g$11451$Uaprr)
        ($fx>=? . g$11450$Uaprr)
        ($fx>? . g$11449$Uaprr)
        ($fx<=? . g$11448$Uaprr)
        ($fx<? . g$11447$Uaprr)
        ($fx- . g$11446$Uaprr)
        ($fxmod0 . g$11445$Uaprr)
        ($fxdiv0 . g$11444$Uaprr)
        ($fx* . g$11443$Uaprr)
        ($fx+ . g$11442$Uaprr)
        ($fx=? . g$11441$Uaprr)
        ($vector-set! . g$11440$Uaprr)
        ($vector-ref . g$11439$Uaprr)
        ($cdr . g$11438$Uaprr)
        ($car . g$11437$Uaprr)
        (make-record-printer . g$11436$Uaprr)
        (eqv-hash . g$11435$Uaprr)
        (reverse! . g$11434$Uaprr)
        (deserialize-port . g$11433$Uaprr)
        (serialize-port . g$11432$Uaprr)
        (enum-set? . g$6768$Uaprr)
        (make-promise . g$6264$Uaprr)
        (load/unload . g$11246$Uaprr)
        (load/args . g$11245$Uaprr)
        (printf . g$6877$Uaprr)
        (fprintf . g$6878$Uaprr)
        (format . g$6879$Uaprr)
        (procedure-form . g$11431$Uaprr)
        (procedure-environment . g$11430$Uaprr)
        (procedure-name . g$11429$Uaprr)
        (procedure-arity . g$11428$Uaprr)
        (gc-collect . g$11427$Uaprr)
        (typeof . g$11426$Uaprr)
        (clr-type? . g$11425$Uaprr)
        (get-clr-type . g$11424$Uaprr)
        (get-command-line . g$11423$Uaprr)
        (vector-append . g$11422$Uaprr)
        (vector-filter . g$11421$Uaprr)
        (vector-reverse! . g$11420$Uaprr)
        (vector-contains? . g$11419$Uaprr)
        (vector-index-of . g$11418$Uaprr)
        (vector-copy . g$11417$Uaprr)
        (vector-binary-search . g$11416$Uaprr)
        (string-ci-compare . g$11415$Uaprr)
        (string-compare . g$11414$Uaprr)
        (string-format . g$11413$Uaprr)
        (trace-printer . g$11242$Uaprr)
        (make-traced-procedure . g$11412$Uaprr)
        (make-traced-macro . g$6899$Uaprr)
        (assertion-error . g$8220$Uaprr)
        (time-it . g$11411$Uaprr)
        (make-parameter . g$6906$Uaprr)
        (library-locator . g$11410$Uaprr)
        (get-library-paths . g$11409$Uaprr)
        (open-tcp-input/output-port . g$11408$Uaprr)
        (hashtable-for-each . g$11407$Uaprr)
        (hashtable-map . g$11406$Uaprr)
        (environment-bindings . g$8198$Uaprr)
        (environment-symbols . g$8201$Uaprr)
        (interaction-environment-symbols . g$8197$Uaprr)
        (optimization-level . g$11405$Uaprr)
        (library-path . g$7528$Uaprr)
        (make-compile-time-value . g$7906$Uaprr)
        (expand->core . g$8207$Uaprr)
        (expand . g$8205$Uaprr)
        (syntax-transpose . g$8144$Uaprr)
        (convert->cps . g$7225$Uaprr)
        (installed-libraries . g$7549$Uaprr)
        (uninstall-library . g$7540$Uaprr)
        (pretty-gensyms . g$6989$Uaprr)
        (pretty-width . g$6986$Uaprr)
        (pretty-print . g$6991$Uaprr)
        (&no-nans . g$11404$Uaprr)
        (&no-infinities . g$11403$Uaprr)
        (&i/o-encoding . g$11402$Uaprr)
        (&i/o-decoding . g$11401$Uaprr)
        (&i/o-port . g$11400$Uaprr)
        (&i/o-file-does-not-exist . g$11399$Uaprr)
        (&i/o-file-already-exists . g$11398$Uaprr)
        (&i/o-file-is-read-only . g$11397$Uaprr)
        (&i/o-file-protection . g$11396$Uaprr)
        (&i/o-filename . g$11395$Uaprr)
        (&i/o-invalid-position . g$11394$Uaprr)
        (&i/o-write . g$11393$Uaprr)
        (&i/o-read . g$11392$Uaprr)
        (&i/o . g$11391$Uaprr)
        (&non-continuable . g$11390$Uaprr)
        (&undefined . g$11389$Uaprr)
        (&syntax . g$11388$Uaprr)
        (&lexical . g$11387$Uaprr)
        (&implementation-restriction . g$11386$Uaprr)
        (&who . g$11385$Uaprr)
        (&irritants . g$11384$Uaprr)
        (&assertion . g$11383$Uaprr)
        (&violation . g$11382$Uaprr)
        (&error . g$11381$Uaprr)
        (&serious . g$11380$Uaprr)
        (&warning . g$11379$Uaprr)
        (&message . g$11378$Uaprr)
        (&condition . g$11377$Uaprr)
        (define-condition-type . g$11376$Uaprr)
        (define-enumeration . g$11375$Uaprr)
        (define-record-type . g$11374$Uaprr)
        (parent-rtd . g$11373$Uaprr)
        (nongenerative . g$11372$Uaprr)
        (opaque . g$11371$Uaprr)
        (sealed . g$11370$Uaprr)
        (protocol . g$11369$Uaprr)
        (parent . g$11368$Uaprr)
        (immutable . g$11367$Uaprr)
        (mutable . g$11366$Uaprr)
        (fields . g$11365$Uaprr)
        (error-handling-mode . g$11364$Uaprr)
        (file-options . g$11363$Uaprr)
        (buffer-mode . g$11362$Uaprr)
        (eol-style . g$11361$Uaprr)
        (guard . g$11360$Uaprr)
        (trace-letrec-syntax . g$11359$Uaprr)
        (trace-let-syntax . g$11358$Uaprr)
        (trace-define-syntax . g$11357$Uaprr)
        (trace-define . g$11356$Uaprr)
        (trace-lambda . g$11355$Uaprr)
        (unsyntax-splicing . g$11354$Uaprr)
        (unsyntax . g$11353$Uaprr)
        (unquote-splicing . g$11352$Uaprr)
        (unquote . g$11351$Uaprr)
        (_ . g$11350$Uaprr)
        (else . g$11349$Uaprr)
        (=> . g$11348$Uaprr)
        (... . g$11347$Uaprr)
        (assert . g$11346$Uaprr)
        (endianness . g$11345$Uaprr)
        (delay . g$11344$Uaprr)
        (time . g$11343$Uaprr)
        (or . g$11342$Uaprr)
        (and . g$11341$Uaprr)
        (do . g$11340$Uaprr)
        (cond . g$11339$Uaprr)
        (let* . g$11338$Uaprr)
        (let . g$11337$Uaprr)
        (identifier-syntax . g$11336$Uaprr)
        (with-syntax . g$11335$Uaprr)
        (quasisyntax . g$11334$Uaprr)
        (quasiquote . g$11333$Uaprr)
        (syntax-rules . g$11332$Uaprr)
        (include-into . g$11331$Uaprr)
        (include . g$11330$Uaprr)
        (define-struct . g$11329$Uaprr)
        (let-values . g$11328$Uaprr)
        (let*-values . g$11327$Uaprr)
        (record-constructor-descriptor . g$11326$Uaprr)
        (record-type-descriptor . g$11325$Uaprr)
        (fluid-let-syntax . g$11324$Uaprr)
        (case . g$11323$Uaprr)
        (parameterize . g$11322$Uaprr)
        (unless . g$11321$Uaprr)
        (when . g$11320$Uaprr)
        (if . g$11319$Uaprr)
        (letrec* . g$11318$Uaprr)
        (letrec . g$11317$Uaprr)
        (type-descriptor . g$11316$Uaprr)
        (case-lambda . g$11315$Uaprr)
        (lambda . g$11314$Uaprr)
        (syntax . g$11313$Uaprr)
        (syntax-case . g$11312$Uaprr)
        (quote . g$11311$Uaprr)
        (foreign-call . g$11310$Uaprr)
        (letrec-syntax . g$11309$Uaprr)
        (let-syntax . g$11308$Uaprr)
        (set! . g$11307$Uaprr)
        (export . g$11306$Uaprr)
        (import . g$11305$Uaprr)
        (library . g$11304$Uaprr)
        (begin . g$11303$Uaprr)
        (module . g$11302$Uaprr)
        (define-syntax . g$11301$Uaprr)
        (define . g$11300$Uaprr))
      '((g$8101$Uaprr core-prim . ellipsis-map)
        (g$6246$Uaprr core-prim . &no-nans-rcd)
        (g$6245$Uaprr core-prim . &no-nans-rtd)
        (g$6233$Uaprr core-prim . &no-infinities-rcd)
        (g$6232$Uaprr core-prim . &no-infinities-rtd)
        (g$6220$Uaprr core-prim . &i/o-encoding-rcd)
        (g$6219$Uaprr core-prim . &i/o-encoding-rtd)
        (g$6205$Uaprr core-prim . &i/o-decoding-rcd)
        (g$6204$Uaprr core-prim . &i/o-decoding-rtd)
        (g$6192$Uaprr core-prim . &i/o-port-rcd)
        (g$6191$Uaprr core-prim . &i/o-port-rtd)
        (g$6177$Uaprr core-prim . &i/o-file-does-not-exist-rcd)
        (g$6176$Uaprr core-prim . &i/o-file-does-not-exist-rtd)
        (g$6164$Uaprr core-prim . &i/o-file-already-exists-rcd)
        (g$6163$Uaprr core-prim . &i/o-file-already-exists-rtd)
        (g$6151$Uaprr core-prim . &i/o-file-is-read-only-rcd)
        (g$6150$Uaprr core-prim . &i/o-file-is-read-only-rtd)
        (g$6138$Uaprr core-prim . &i/o-file-protection-rcd)
        (g$6137$Uaprr core-prim . &i/o-file-protection-rtd)
        (g$6125$Uaprr core-prim . &i/o-filename-rcd)
        (g$6124$Uaprr core-prim . &i/o-filename-rtd)
        (g$6110$Uaprr core-prim . &i/o-invalid-position-rcd)
        (g$6109$Uaprr core-prim . &i/o-invalid-position-rtd)
        (g$6095$Uaprr core-prim . &i/o-write-rcd)
        (g$6094$Uaprr core-prim . &i/o-write-rtd)
        (g$6082$Uaprr core-prim . &i/o-read-rcd)
        (g$6081$Uaprr core-prim . &i/o-read-rtd)
        (g$6069$Uaprr core-prim . &i/o-rcd)
        (g$6068$Uaprr core-prim . &i/o-rtd)
        (g$6056$Uaprr core-prim . &undefined-rcd)
        (g$6055$Uaprr core-prim . &undefined-rtd)
        (g$6043$Uaprr core-prim . &syntax-rcd)
        (g$6042$Uaprr core-prim . &syntax-rtd)
        (g$6026$Uaprr core-prim . &lexical-rcd)
        (g$6025$Uaprr core-prim . &lexical-rtd)
        (g$6013$Uaprr core-prim . &implementation-restriction-rcd)
        (g$6012$Uaprr core-prim . &implementation-restriction-rtd)
        (g$6000$Uaprr core-prim . &non-continuable-rcd)
        (g$5999$Uaprr core-prim . &non-continuable-rtd)
        (g$5987$Uaprr core-prim . &who-rcd)
        (g$5986$Uaprr core-prim . &who-rtd)
        (g$5972$Uaprr core-prim . &irritants-rcd)
        (g$5971$Uaprr core-prim . &irritants-rtd)
        (g$5957$Uaprr core-prim . &assertion-rcd)
        (g$5956$Uaprr core-prim . &assertion-rtd)
        (g$5944$Uaprr core-prim . &violation-rcd)
        (g$5943$Uaprr core-prim . &violation-rtd)
        (g$5931$Uaprr core-prim . &error-rcd)
        (g$5930$Uaprr core-prim . &error-rtd)
        (g$5918$Uaprr core-prim . &serious-rcd)
        (g$5917$Uaprr core-prim . &serious-rtd)
        (g$5905$Uaprr core-prim . &warning-rcd)
        (g$5904$Uaprr core-prim . &warning-rtd)
        (g$5892$Uaprr core-prim . &message-rcd)
        (g$5891$Uaprr core-prim . &message-rtd)
        (g$5852$Uaprr core-prim . &condition-rcd)
        (g$5851$Uaprr core-prim . &condition-rtd)
        (g$11776$Uaprr core-prim . library-letrec*)
        (g$11775$Uaprr core-prim . annotation-stripped)
        (g$11774$Uaprr core-prim . annotation-source)
        (g$11773$Uaprr core-prim . annotation-expression)
        (g$11772$Uaprr core-prim . annotation?)
        (g$11771$Uaprr core-prim . read-annotated)
        (g$11770$Uaprr core-prim . tanh)
        (g$11769$Uaprr core-prim . cosh)
        (g$11768$Uaprr core-prim . sinh)
        (g$11767$Uaprr core-prim . make-guid)
        (g$11766$Uaprr core-prim . unspecified?)
        (g$5107$Uaprr core-prim . make-list)
        (g$5106$Uaprr core-prim . last-pair)
        (g$11765$Uaprr core-prim . load-r5rs)
        (g$11764$Uaprr core-prim . license)
        (g$11763$Uaprr core-prim . stacktrace)
        (g$11248$Uaprr core-prim . ironscheme-build)
        (g$11762$Uaprr core-prim . define-clr-class-internal)
        (g$11761$Uaprr core-prim . clr-field-set!-internal)
        (g$11760$Uaprr core-prim . clr-field-get-internal)
        (g$11759$Uaprr core-prim . clr-cast-internal)
        (g$11758$Uaprr core-prim . clr-call-internal)
        (g$11757$Uaprr core-prim . clr-new-internal)
        (g$11756$Uaprr core-prim . clr-new-array-internal)
        (g$11755$Uaprr core-prim . clr-is-internal)
        (g$11754$Uaprr core-prim . clr-reference-internal)
        (g$11753$Uaprr core-prim . clr-using-internal)
        (g$8221$Uaprr core-prim . syntax-error)
        (g$8096$Uaprr core-prim . syntax-dispatch)
        (g$11752$Uaprr core-prim . compile-core)
        (g$11751$Uaprr core-prim . eval-core)
        (g$11750$Uaprr core-prim . remove-location)
        (g$11749$Uaprr core-prim . set-symbol-value!)
        (g$11748$Uaprr core-prim . symbol-value)
        (g$11747$Uaprr core-prim . symbol-bound?)
        (g$11746$Uaprr core-prim . ungensym)
        (g$11745$Uaprr core-prim . gensym)
        (g$11744$Uaprr core-prim . void)
        (g$11743$Uaprr core-prim . load-serialized-library)
        (g$11742$Uaprr core-prim . serialize-library)
        (g$11252$Uaprr core-prim . compile-system-libraries)
        (g$11254$Uaprr core-prim . compile->closure)
        (g$11253$Uaprr core-prim . compile)
        (g$11247$Uaprr core-prim . load)
        (g$11741$Uaprr core-prim . string-normalize)
        (g$8231$Uaprr core-prim . interaction-environment)
        (g$11740$Uaprr core-prim . char-ready?)
        (g$11739$Uaprr core-prim . string-upcase)
        (g$11738$Uaprr core-prim . string-titlecase)
        (g$6329$Uaprr core-prim . string-normalize-nfkd)
        (g$6328$Uaprr core-prim . string-normalize-nfkc)
        (g$6327$Uaprr core-prim . string-normalize-nfd)
        (g$6326$Uaprr core-prim . string-normalize-nfc)
        (g$11737$Uaprr core-prim . string-foldcase)
        (g$11736$Uaprr core-prim . string-downcase)
        (g$6313$Uaprr core-prim . string-ci>?)
        (g$6315$Uaprr core-prim . string-ci>=?)
        (g$6311$Uaprr core-prim . string-ci=?)
        (g$6312$Uaprr core-prim . string-ci<?)
        (g$6314$Uaprr core-prim . string-ci<=?)
        (g$11735$Uaprr core-prim . char-whitespace?)
        (g$11734$Uaprr core-prim . char-upper-case?)
        (g$11733$Uaprr core-prim . char-title-case?)
        (g$11732$Uaprr core-prim . char-numeric?)
        (g$11731$Uaprr core-prim . char-lower-case?)
        (g$11730$Uaprr core-prim . char-general-category)
        (g$11729$Uaprr core-prim . char-upcase)
        (g$11728$Uaprr core-prim . char-titlecase)
        (g$11727$Uaprr core-prim . char-foldcase)
        (g$11726$Uaprr core-prim . char-downcase)
        (g$6323$Uaprr core-prim . char-ci>?)
        (g$6325$Uaprr core-prim . char-ci>=?)
        (g$6321$Uaprr core-prim . char-ci=?)
        (g$6322$Uaprr core-prim . char-ci<?)
        (g$6324$Uaprr core-prim . char-ci<=?)
        (g$11725$Uaprr core-prim . char-alphabetic?)
        (g$7908$Uaprr core-prim . variable-transformer-procedure)
        (g$7907$Uaprr core-prim . variable-transformer?)
        (g$7905$Uaprr core-prim . make-variable-transformer)
        (g$8225$Uaprr core-prim . identifier?)
        (g$8214$Uaprr core-prim . generate-temporaries)
        (g$8215$Uaprr core-prim . free-identifier=?)
        (g$8227$Uaprr core-prim . syntax->datum)
        (g$8226$Uaprr core-prim . datum->syntax)
        (g$8216$Uaprr core-prim . bound-identifier=?)
        (g$11724$Uaprr core-prim . record-type-descriptor?)
        (g$11723$Uaprr core-prim . record-predicate)
        (g$11722$Uaprr core-prim . record-mutator)
        (g$11721$Uaprr core-prim . record-constructor)
        (g$11720$Uaprr core-prim . record-accessor)
        (g$11719$Uaprr core-prim . make-record-type-descriptor)
        (g$11718$Uaprr core-prim . make-record-constructor-descriptor)
        (g$11717$Uaprr core-prim . record?)
        (g$11716$Uaprr core-prim . record-type-uid)
        (g$11715$Uaprr core-prim . record-type-sealed?)
        (g$11714$Uaprr core-prim . record-type-parent)
        (g$11713$Uaprr core-prim . record-type-opaque?)
        (g$11712$Uaprr core-prim . record-type-name)
        (g$11711$Uaprr core-prim . record-type-generative?)
        (g$11710$Uaprr core-prim . record-type-field-names)
        (g$11709$Uaprr core-prim . record-rtd)
        (g$11708$Uaprr core-prim . record-field-mutable?)
        (g$5720$Uaprr core-prim . delete-file)
        (g$5719$Uaprr core-prim . file-exists?)
        (g$11707$Uaprr core-prim . vector-sort!)
        (g$11706$Uaprr core-prim . vector-sort)
        (g$6282$Uaprr core-prim . list-sort)
        (g$11705$Uaprr core-prim . symbol-hash)
        (g$11704$Uaprr core-prim . string-ci-hash)
        (g$11703$Uaprr core-prim . string-hash)
        (g$11702$Uaprr core-prim . equal-hash)
        (g$11701$Uaprr core-prim . hashtable-equivalence-function)
        (g$11700$Uaprr core-prim . make-hashtable)
        (g$11699$Uaprr core-prim . hashtable-hash-function)
        (g$5687$Uaprr core-prim . make-eqv-hashtable)
        (g$5686$Uaprr core-prim . make-eq-hashtable)
        (g$11698$Uaprr core-prim . hashtable?)
        (g$5693$Uaprr core-prim . hashtable-update!)
        (g$5688$Uaprr core-prim . hashtable-size)
        (g$5690$Uaprr core-prim . hashtable-set!)
        (g$5689$Uaprr core-prim . hashtable-ref)
        (g$11697$Uaprr core-prim . hashtable-mutable?)
        (g$11696$Uaprr core-prim . hashtable-keys)
        (g$11695$Uaprr core-prim . hashtable-entries)
        (g$5691$Uaprr core-prim . hashtable-delete!)
        (g$11694$Uaprr core-prim . hashtable-copy)
        (g$5692$Uaprr core-prim . hashtable-contains?)
        (g$5694$Uaprr core-prim . hashtable-clear!)
        (g$6730$Uaprr core-prim . call-with-output-file)
        (g$6729$Uaprr core-prim . call-with-input-file)
        (g$6721$Uaprr core-prim . write-char)
        (g$11693$Uaprr core-prim . write)
        (g$6728$Uaprr core-prim . with-output-to-file)
        (g$6727$Uaprr core-prim . with-input-from-file)
        (g$6720$Uaprr core-prim . read-char)
        (g$11692$Uaprr core-prim . read)
        (g$6719$Uaprr core-prim . peek-char)
        (g$11691$Uaprr core-prim . open-output-file)
        (g$11690$Uaprr core-prim . open-input-file)
        (g$6731$Uaprr core-prim . newline)
        (g$11689$Uaprr core-prim . display)
        (g$11688$Uaprr core-prim . close-output-port)
        (g$11687$Uaprr core-prim . close-input-port)
        (g$11686$Uaprr core-prim . eof-object?)
        (g$11685$Uaprr core-prim . eof-object)
        (g$11684$Uaprr core-prim . current-error-port)
        (g$11683$Uaprr core-prim . current-output-port)
        (g$11682$Uaprr core-prim . current-input-port)
        (g$11681$Uaprr core-prim . output-port?)
        (g$11680$Uaprr core-prim . input-port?)
        (g$11679$Uaprr core-prim . utf-8-codec)
        (g$11678$Uaprr core-prim . utf-16-codec)
        (g$11677$Uaprr core-prim . transcoder-error-handling-mode)
        (g$11676$Uaprr core-prim . transcoder-eol-style)
        (g$11675$Uaprr core-prim . transcoder-codec)
        (g$11674$Uaprr core-prim . transcoded-port)
        (g$11673$Uaprr core-prim . textual-port?)
        (g$11672$Uaprr core-prim . string->bytevector)
        (g$11671$Uaprr core-prim . standard-output-port)
        (g$11670$Uaprr core-prim . standard-input-port)
        (g$11669$Uaprr core-prim . standard-error-port)
        (g$11668$Uaprr core-prim . set-port-position!)
        (g$11667$Uaprr core-prim . put-u8)
        (g$11666$Uaprr core-prim . put-string)
        (g$6699$Uaprr core-prim . put-datum)
        (g$11665$Uaprr core-prim . put-char)
        (g$11664$Uaprr core-prim . put-bytevector)
        (g$6704$Uaprr core-prim . port?)
        (g$11663$Uaprr core-prim . port-transcoder)
        (g$11662$Uaprr core-prim . port-position)
        (g$11661$Uaprr core-prim . port-has-set-port-position!?)
        (g$11660$Uaprr core-prim . port-has-port-position?)
        (g$11659$Uaprr core-prim . port-eof?)
        (g$11658$Uaprr core-prim . output-port-buffer-mode)
        (g$6703$Uaprr core-prim . open-string-output-port)
        (g$11657$Uaprr core-prim . open-string-input-port)
        (g$11656$Uaprr core-prim . open-file-output-port)
        (g$11655$Uaprr core-prim . open-file-input/output-port)
        (g$11654$Uaprr core-prim . open-file-input-port)
        (g$11653$Uaprr core-prim . open-bytevector-output-port)
        (g$11652$Uaprr core-prim . open-bytevector-input-port)
        (g$11651$Uaprr core-prim . native-transcoder)
        (g$11650$Uaprr core-prim . native-eol-style)
        (g$11649$Uaprr core-prim . make-transcoder)
        (g$11648$Uaprr core-prim . latin-1-codec)
        (g$6092$Uaprr core-prim . make-i/o-write-error)
        (g$6079$Uaprr core-prim . make-i/o-read-error)
        (g$6187$Uaprr core-prim . make-i/o-port-error)
        (g$6105$Uaprr core-prim . make-i/o-invalid-position-error)
        (g$6120$Uaprr core-prim . make-i/o-filename-error)
        (g$6135$Uaprr core-prim . make-i/o-file-protection-error)
        (g$6148$Uaprr core-prim . make-i/o-file-is-read-only-error)
        (g$6174$Uaprr core-prim . make-i/o-file-does-not-exist-error)
        (g$6161$Uaprr core-prim . make-i/o-file-already-exists-error)
        (g$6066$Uaprr core-prim . make-i/o-error)
        (g$6215$Uaprr core-prim . make-i/o-encoding-error)
        (g$6202$Uaprr core-prim . make-i/o-decoding-error)
        (g$11647$Uaprr core-prim . make-custom-textual-output-port)
        (g$11646$Uaprr
          core-prim
          .
          make-custom-textual-input/output-port)
        (g$11645$Uaprr core-prim . make-custom-textual-input-port)
        (g$11644$Uaprr core-prim . make-custom-binary-output-port)
        (g$11643$Uaprr core-prim . make-custom-binary-input/output-port)
        (g$11642$Uaprr core-prim . make-custom-binary-input-port)
        (g$11641$Uaprr core-prim . make-bytevector)
        (g$11640$Uaprr core-prim . lookahead-u8)
        (g$11639$Uaprr core-prim . lookahead-char)
        (g$6093$Uaprr core-prim . i/o-write-error?)
        (g$6080$Uaprr core-prim . i/o-read-error?)
        (g$6189$Uaprr core-prim . i/o-port-error?)
        (g$6107$Uaprr core-prim . i/o-invalid-position-error?)
        (g$6108$Uaprr core-prim . i/o-error-position)
        (g$6122$Uaprr core-prim . i/o-filename-error?)
        (g$6136$Uaprr core-prim . i/o-file-protection-error?)
        (g$6149$Uaprr core-prim . i/o-file-is-read-only-error?)
        (g$6175$Uaprr core-prim . i/o-file-does-not-exist-error?)
        (g$6162$Uaprr core-prim . i/o-file-already-exists-error?)
        (g$6067$Uaprr core-prim . i/o-error?)
        (g$6190$Uaprr core-prim . i/o-error-port)
        (g$6123$Uaprr core-prim . i/o-error-filename)
        (g$6217$Uaprr core-prim . i/o-encoding-error?)
        (g$6218$Uaprr core-prim . i/o-encoding-error-char)
        (g$6203$Uaprr core-prim . i/o-decoding-error?)
        (g$11638$Uaprr core-prim . get-u8)
        (g$11637$Uaprr core-prim . get-string-n!)
        (g$11636$Uaprr core-prim . get-string-n)
        (g$11635$Uaprr core-prim . get-string-all)
        (g$11634$Uaprr core-prim . get-line)
        (g$6700$Uaprr core-prim . get-datum)
        (g$11633$Uaprr core-prim . get-char)
        (g$11632$Uaprr core-prim . get-bytevector-some)
        (g$11631$Uaprr core-prim . get-bytevector-n!)
        (g$11630$Uaprr core-prim . get-bytevector-n)
        (g$11629$Uaprr core-prim . get-bytevector-all)
        (g$11628$Uaprr core-prim . flush-output-port)
        (g$11627$Uaprr core-prim . close-port)
        (g$6705$Uaprr core-prim . call-with-string-output-port)
        (g$6706$Uaprr core-prim . call-with-port)
        (g$11626$Uaprr core-prim . call-with-bytevector-output-port)
        (g$11625$Uaprr core-prim . bytevector->string)
        (g$11624$Uaprr core-prim . buffer-mode?)
        (g$11623$Uaprr core-prim . binary-port?)
        (g$8204$Uaprr core-prim . scheme-report-environment)
        (g$6261$Uaprr core-prim . quotient)
        (g$8203$Uaprr core-prim . null-environment)
        (g$6262$Uaprr core-prim . remainder)
        (g$6263$Uaprr core-prim . modulo)
        (g$6258$Uaprr core-prim . inexact->exact)
        (g$6265$Uaprr core-prim . force)
        (g$6259$Uaprr core-prim . exact->inexact)
        (g$11622$Uaprr core-prim . exit)
        (g$11243$Uaprr core-prim . command-line)
        (g$11621$Uaprr core-prim . string-fill!)
        (g$11620$Uaprr core-prim . string-set!)
        (g$11619$Uaprr core-prim . set-cdr!)
        (g$11618$Uaprr core-prim . set-car!)
        (g$5129$Uaprr core-prim . remove)
        (g$5130$Uaprr core-prim . remv)
        (g$5110$Uaprr core-prim . remp)
        (g$5131$Uaprr core-prim . remq)
        (g$5109$Uaprr core-prim . partition)
        (g$5117$Uaprr core-prim . memv)
        (g$5116$Uaprr core-prim . memq)
        (g$5119$Uaprr core-prim . memp)
        (g$5118$Uaprr core-prim . member)
        (g$5123$Uaprr core-prim . exists)
        (g$5122$Uaprr core-prim . for-all)
        (g$5128$Uaprr core-prim . fold-right)
        (g$5127$Uaprr core-prim . fold-left)
        (g$5108$Uaprr core-prim . find)
        (g$5111$Uaprr core-prim . filter)
        (g$5126$Uaprr core-prim . cons*)
        (g$5113$Uaprr core-prim . assv)
        (g$5112$Uaprr core-prim . assq)
        (g$5115$Uaprr core-prim . assp)
        (g$5114$Uaprr core-prim . assoc)
        (g$11617$Uaprr core-prim . with-exception-handler)
        (g$11616$Uaprr core-prim . raise-continuable)
        (g$11615$Uaprr core-prim . raise)
        (g$8206$Uaprr core-prim . eval)
        (g$8202$Uaprr core-prim . environment)
        (g$6791$Uaprr core-prim . make-enumeration)
        (g$6798$Uaprr core-prim . enum-set=?)
        (g$6792$Uaprr core-prim . enum-set-universe)
        (g$6799$Uaprr core-prim . enum-set-union)
        (g$6797$Uaprr core-prim . enum-set-subset?)
        (g$6803$Uaprr core-prim . enum-set-projection)
        (g$6796$Uaprr core-prim . enum-set-member?)
        (g$6800$Uaprr core-prim . enum-set-intersection)
        (g$6793$Uaprr core-prim . enum-set-indexer)
        (g$6801$Uaprr core-prim . enum-set-difference)
        (g$6794$Uaprr core-prim . enum-set-constructor)
        (g$6802$Uaprr core-prim . enum-set-complement)
        (g$6795$Uaprr core-prim . enum-set->list)
        (g$5984$Uaprr core-prim . who-condition?)
        (g$5903$Uaprr core-prim . warning?)
        (g$5942$Uaprr core-prim . violation?)
        (g$6054$Uaprr core-prim . undefined-violation?)
        (g$6039$Uaprr core-prim . syntax-violation?)
        (g$6041$Uaprr core-prim . syntax-violation-subform)
        (g$6040$Uaprr core-prim . syntax-violation-form)
        (g$8224$Uaprr core-prim . syntax-violation)
        (g$11614$Uaprr core-prim . simple-conditions)
        (g$5916$Uaprr core-prim . serious-condition?)
        (g$5998$Uaprr core-prim . non-continuable-violation?)
        (g$5889$Uaprr core-prim . message-condition?)
        (g$5982$Uaprr core-prim . make-who-condition)
        (g$5902$Uaprr core-prim . make-warning)
        (g$5941$Uaprr core-prim . make-violation)
        (g$6053$Uaprr core-prim . make-undefined-violation)
        (g$6036$Uaprr core-prim . make-syntax-violation)
        (g$5915$Uaprr core-prim . make-serious-condition)
        (g$5997$Uaprr core-prim . make-non-continuable-violation)
        (g$5887$Uaprr core-prim . make-message-condition)
        (g$6023$Uaprr core-prim . make-lexical-violation)
        (g$5967$Uaprr core-prim . make-irritants-condition)
        (g$6010$Uaprr
          core-prim
          .
          make-implementation-restriction-violation)
        (g$5928$Uaprr core-prim . make-error)
        (g$5954$Uaprr core-prim . make-assertion-violation)
        (g$6024$Uaprr core-prim . lexical-violation?)
        (g$5969$Uaprr core-prim . irritants-condition?)
        (g$6011$Uaprr core-prim . implementation-restriction-violation?)
        (g$5929$Uaprr core-prim . error?)
        (g$5985$Uaprr core-prim . condition-who)
        (g$11613$Uaprr core-prim . condition-predicate)
        (g$5890$Uaprr core-prim . condition-message)
        (g$5970$Uaprr core-prim . condition-irritants)
        (g$11612$Uaprr core-prim . condition-accessor)
        (g$11611$Uaprr core-prim . condition)
        (g$5955$Uaprr core-prim . assertion-violation?)
        (g$11610$Uaprr core-prim . condition?)
        (g$11609$Uaprr core-prim . utf32->string)
        (g$11608$Uaprr core-prim . utf16->string)
        (g$11607$Uaprr core-prim . utf8->string)
        (g$11606$Uaprr core-prim . uint-list->bytevector)
        (g$11605$Uaprr core-prim . u8-list->bytevector)
        (g$11604$Uaprr core-prim . string->utf8)
        (g$11603$Uaprr core-prim . string->utf32)
        (g$11602$Uaprr core-prim . string->utf16)
        (g$11601$Uaprr core-prim . sint-list->bytevector)
        (g$5726$Uaprr core-prim . native-endianness)
        (g$5428$Uaprr core-prim . bytevector?)
        (g$11600$Uaprr core-prim . bytevector=?)
        (g$11599$Uaprr core-prim . bytevector-uint-set!)
        (g$11598$Uaprr core-prim . bytevector-uint-ref)
        (g$11597$Uaprr core-prim . bytevector-u8-set!)
        (g$11596$Uaprr core-prim . bytevector-u8-ref)
        (g$5747$Uaprr core-prim . bytevector-u64-set!)
        (g$5743$Uaprr core-prim . bytevector-u64-ref)
        (g$5749$Uaprr core-prim . bytevector-u64-native-set!)
        (g$5745$Uaprr core-prim . bytevector-u64-native-ref)
        (g$5739$Uaprr core-prim . bytevector-u32-set!)
        (g$5735$Uaprr core-prim . bytevector-u32-ref)
        (g$5741$Uaprr core-prim . bytevector-u32-native-set!)
        (g$5737$Uaprr core-prim . bytevector-u32-native-ref)
        (g$5731$Uaprr core-prim . bytevector-u16-set!)
        (g$5727$Uaprr core-prim . bytevector-u16-ref)
        (g$5733$Uaprr core-prim . bytevector-u16-native-set!)
        (g$5729$Uaprr core-prim . bytevector-u16-native-ref)
        (g$11595$Uaprr core-prim . bytevector-sint-set!)
        (g$11594$Uaprr core-prim . bytevector-sint-ref)
        (g$11593$Uaprr core-prim . bytevector-s8-set!)
        (g$11592$Uaprr core-prim . bytevector-s8-ref)
        (g$5748$Uaprr core-prim . bytevector-s64-set!)
        (g$5744$Uaprr core-prim . bytevector-s64-ref)
        (g$5750$Uaprr core-prim . bytevector-s64-native-set!)
        (g$5746$Uaprr core-prim . bytevector-s64-native-ref)
        (g$5740$Uaprr core-prim . bytevector-s32-set!)
        (g$5736$Uaprr core-prim . bytevector-s32-ref)
        (g$5742$Uaprr core-prim . bytevector-s32-native-set!)
        (g$5738$Uaprr core-prim . bytevector-s32-native-ref)
        (g$5732$Uaprr core-prim . bytevector-s16-set!)
        (g$5728$Uaprr core-prim . bytevector-s16-ref)
        (g$5734$Uaprr core-prim . bytevector-s16-native-set!)
        (g$5730$Uaprr core-prim . bytevector-s16-native-ref)
        (g$11591$Uaprr core-prim . bytevector-length)
        (g$11590$Uaprr core-prim . bytevector-ieee-single-set!)
        (g$11589$Uaprr core-prim . bytevector-ieee-single-ref)
        (g$5753$Uaprr core-prim . bytevector-ieee-single-native-set!)
        (g$5751$Uaprr core-prim . bytevector-ieee-single-native-ref)
        (g$11588$Uaprr core-prim . bytevector-ieee-double-set!)
        (g$11587$Uaprr core-prim . bytevector-ieee-double-ref)
        (g$5754$Uaprr core-prim . bytevector-ieee-double-native-set!)
        (g$5752$Uaprr core-prim . bytevector-ieee-double-native-ref)
        (g$11586$Uaprr core-prim . bytevector-fill!)
        (g$11585$Uaprr core-prim . bytevector-copy!)
        (g$11584$Uaprr core-prim . bytevector-copy)
        (g$11583$Uaprr core-prim . bytevector->uint-list)
        (g$11582$Uaprr core-prim . bytevector->u8-list)
        (g$11581$Uaprr core-prim . bytevector->sint-list)
        (g$6244$Uaprr core-prim . no-nans-violation?)
        (g$6231$Uaprr core-prim . no-infinities-violation?)
        (g$6243$Uaprr core-prim . make-no-nans-violation)
        (g$6230$Uaprr core-prim . make-no-infinities-violation)
        (g$11580$Uaprr core-prim . real->flonum)
        (g$6645$Uaprr core-prim . flzero?)
        (g$6640$Uaprr core-prim . fltruncate)
        (g$6630$Uaprr core-prim . fltan)
        (g$6635$Uaprr core-prim . flsqrt)
        (g$6628$Uaprr core-prim . flsin)
        (g$6641$Uaprr core-prim . flround)
        (g$6643$Uaprr core-prim . flpositive?)
        (g$5433$Uaprr core-prim . flonum?)
        (g$6647$Uaprr core-prim . flodd?)
        (g$11579$Uaprr core-prim . flnumerator)
        (g$6644$Uaprr core-prim . flnegative?)
        (g$6627$Uaprr core-prim . flnan?)
        (g$6621$Uaprr core-prim . flmod0)
        (g$6620$Uaprr core-prim . flmod)
        (g$6649$Uaprr core-prim . flmin)
        (g$6648$Uaprr core-prim . flmax)
        (g$6634$Uaprr core-prim . fllog)
        (g$6624$Uaprr core-prim . flinteger?)
        (g$6626$Uaprr core-prim . flinfinite?)
        (g$6639$Uaprr core-prim . flfloor)
        (g$6625$Uaprr core-prim . flfinite?)
        (g$6637$Uaprr core-prim . flexpt)
        (g$6636$Uaprr core-prim . flexp)
        (g$6646$Uaprr core-prim . fleven?)
        (g$6623$Uaprr core-prim . fldiv0-and-mod0)
        (g$11578$Uaprr core-prim . fldiv0)
        (g$6622$Uaprr core-prim . fldiv-and-mod)
        (g$11577$Uaprr core-prim . fldiv)
        (g$11576$Uaprr core-prim . fldenominator)
        (g$6629$Uaprr core-prim . flcos)
        (g$6638$Uaprr core-prim . flceiling)
        (g$6633$Uaprr core-prim . flatan)
        (g$6631$Uaprr core-prim . flasin)
        (g$6632$Uaprr core-prim . flacos)
        (g$6642$Uaprr core-prim . flabs)
        (g$11575$Uaprr core-prim . fl>?)
        (g$11574$Uaprr core-prim . fl>=?)
        (g$11573$Uaprr core-prim . fl=?)
        (g$11572$Uaprr core-prim . fl<?)
        (g$11571$Uaprr core-prim . fl<=?)
        (g$11570$Uaprr core-prim . fl/)
        (g$11569$Uaprr core-prim . fl-)
        (g$11568$Uaprr core-prim . fl+)
        (g$11567$Uaprr core-prim . fl*)
        (g$11566$Uaprr core-prim . fixnum->flonum)
        (g$6465$Uaprr core-prim . fxzero?)
        (g$6456$Uaprr core-prim . fxxor)
        (g$6479$Uaprr core-prim . fxrotate-bit-field)
        (g$11565$Uaprr core-prim . fxreverse-bit-field)
        (g$6463$Uaprr core-prim . fxpositive?)
        (g$6467$Uaprr core-prim . fxodd?)
        (g$6437$Uaprr core-prim . fxnot)
        (g$6464$Uaprr core-prim . fxnegative?)
        (g$6459$Uaprr core-prim . fxmod0)
        (g$6458$Uaprr core-prim . fxmod)
        (g$6469$Uaprr core-prim . fxmin)
        (g$6468$Uaprr core-prim . fxmax)
        (g$6434$Uaprr core-prim . fxlength)
        (g$6455$Uaprr core-prim . fxior)
        (g$6473$Uaprr core-prim . fxif)
        (g$6435$Uaprr core-prim . fxfirst-bit-set)
        (g$6466$Uaprr core-prim . fxeven?)
        (g$6462$Uaprr core-prim . fxdiv0-and-mod0)
        (g$6461$Uaprr core-prim . fxdiv0)
        (g$6460$Uaprr core-prim . fxdiv-and-mod)
        (g$6457$Uaprr core-prim . fxdiv)
        (g$6476$Uaprr core-prim . fxcopy-bit-field)
        (g$6474$Uaprr core-prim . fxcopy-bit)
        (g$6436$Uaprr core-prim . fxbit-set?)
        (g$6475$Uaprr core-prim . fxbit-field)
        (g$6433$Uaprr core-prim . fxbit-count)
        (g$6478$Uaprr core-prim . fxarithmetic-shift-right)
        (g$6477$Uaprr core-prim . fxarithmetic-shift-left)
        (g$6432$Uaprr core-prim . fxarithmetic-shift)
        (g$6454$Uaprr core-prim . fxand)
        (g$6446$Uaprr core-prim . fx>?)
        (g$6447$Uaprr core-prim . fx>=?)
        (g$6443$Uaprr core-prim . fx=?)
        (g$6444$Uaprr core-prim . fx<?)
        (g$6445$Uaprr core-prim . fx<=?)
        (g$6471$Uaprr core-prim . fx-/carry)
        (g$11564$Uaprr core-prim . fx-)
        (g$6472$Uaprr core-prim . fx+/carry)
        (g$11563$Uaprr core-prim . fx+)
        (g$6470$Uaprr core-prim . fx*/carry)
        (g$11562$Uaprr core-prim . fx*)
        (g$6430$Uaprr core-prim . greatest-fixnum)
        (g$6431$Uaprr core-prim . least-fixnum)
        (g$5434$Uaprr core-prim . fixnum-width)
        (g$5432$Uaprr core-prim . fixnum?)
        (g$6393$Uaprr core-prim . bitwise-rotate-bit-field)
        (g$11561$Uaprr core-prim . bitwise-reverse-bit-field)
        (g$11560$Uaprr core-prim . bitwise-length)
        (g$6387$Uaprr core-prim . bitwise-if)
        (g$11559$Uaprr core-prim . bitwise-first-bit-set)
        (g$6390$Uaprr core-prim . bitwise-copy-bit-field)
        (g$6388$Uaprr core-prim . bitwise-copy-bit)
        (g$11558$Uaprr core-prim . bitwise-bit-set?)
        (g$6389$Uaprr core-prim . bitwise-bit-field)
        (g$11557$Uaprr core-prim . bitwise-bit-count)
        (g$11556$Uaprr core-prim . bitwise-xor)
        (g$11555$Uaprr core-prim . bitwise-ior)
        (g$11554$Uaprr core-prim . bitwise-and)
        (g$11553$Uaprr core-prim . bitwise-not)
        (g$6392$Uaprr core-prim . bitwise-arithmetic-shift-right)
        (g$6391$Uaprr core-prim . bitwise-arithmetic-shift-left)
        (g$11552$Uaprr core-prim . bitwise-arithmetic-shift)
        (g$5468$Uaprr core-prim . zero?)
        (g$5427$Uaprr core-prim . vector?)
        (g$11551$Uaprr core-prim . vector-set!)
        (g$11550$Uaprr core-prim . vector-ref)
        (g$5500$Uaprr core-prim . vector-map)
        (g$11549$Uaprr core-prim . vector-length)
        (g$5501$Uaprr core-prim . vector-for-each)
        (g$5435$Uaprr core-prim . vector-fill!)
        (g$11548$Uaprr core-prim . vector->list)
        (g$11547$Uaprr core-prim . vector)
        (g$11546$Uaprr core-prim . values)
        (g$11545$Uaprr core-prim . truncate)
        (g$11544$Uaprr core-prim . tan)
        (g$5429$Uaprr core-prim . symbol?)
        (g$5485$Uaprr core-prim . symbol=?)
        (g$11543$Uaprr core-prim . symbol->string)
        (g$11542$Uaprr core-prim . substring)
        (g$11541$Uaprr core-prim . string?)
        (g$5482$Uaprr core-prim . string>?)
        (g$5484$Uaprr core-prim . string>=?)
        (g$5480$Uaprr core-prim . string=?)
        (g$5481$Uaprr core-prim . string<?)
        (g$5483$Uaprr core-prim . string<=?)
        (g$11540$Uaprr core-prim . string-ref)
        (g$11539$Uaprr core-prim . string-length)
        (g$5502$Uaprr core-prim . string-for-each)
        (g$11538$Uaprr core-prim . string-copy)
        (g$11537$Uaprr core-prim . string-append)
        (g$11536$Uaprr core-prim . string->symbol)
        (g$11535$Uaprr core-prim . string->number)
        (g$11534$Uaprr core-prim . string->list)
        (g$11533$Uaprr core-prim . string)
        (g$11532$Uaprr core-prim . sqrt)
        (g$11531$Uaprr core-prim . sin)
        (g$11530$Uaprr core-prim . round)
        (g$5437$Uaprr core-prim . reverse)
        (g$11529$Uaprr core-prim . real?)
        (g$11528$Uaprr core-prim . real-valued?)
        (g$11527$Uaprr core-prim . real-part)
        (g$5497$Uaprr core-prim . rationalize)
        (g$11526$Uaprr core-prim . rational?)
        (g$11525$Uaprr core-prim . rational-valued?)
        (g$5431$Uaprr core-prim . procedure?)
        (g$5466$Uaprr core-prim . positive?)
        (g$11524$Uaprr core-prim . pair?)
        (g$5470$Uaprr core-prim . odd?)
        (g$11523$Uaprr core-prim . numerator)
        (g$11522$Uaprr core-prim . number?)
        (g$11521$Uaprr core-prim . number->string)
        (g$11520$Uaprr core-prim . null?)
        (g$11519$Uaprr core-prim . not)
        (g$5467$Uaprr core-prim . negative?)
        (g$11518$Uaprr core-prim . nan?)
        (g$5472$Uaprr core-prim . min)
        (g$5471$Uaprr core-prim . max)
        (g$5124$Uaprr core-prim . map)
        (g$11517$Uaprr core-prim . make-vector)
        (g$11516$Uaprr core-prim . make-string)
        (g$11515$Uaprr core-prim . make-rectangular)
        (g$11514$Uaprr core-prim . make-polar)
        (g$11513$Uaprr core-prim . magnitude)
        (g$11512$Uaprr core-prim . log)
        (g$11511$Uaprr core-prim . list?)
        (g$5104$Uaprr core-prim . list-tail)
        (g$5105$Uaprr core-prim . list-ref)
        (g$5424$Uaprr core-prim . list->vector)
        (g$5425$Uaprr core-prim . list->string)
        (g$11510$Uaprr core-prim . list)
        (g$11509$Uaprr core-prim . length)
        (g$5474$Uaprr core-prim . lcm)
        (g$11508$Uaprr core-prim . integer?)
        (g$11507$Uaprr core-prim . integer-valued?)
        (g$11506$Uaprr core-prim . integer->char)
        (g$11505$Uaprr core-prim . infinite?)
        (g$11504$Uaprr core-prim . inexact?)
        (g$11503$Uaprr core-prim . inexact)
        (g$11502$Uaprr core-prim . imag-part)
        (g$5473$Uaprr core-prim . gcd)
        (g$5125$Uaprr core-prim . for-each)
        (g$11501$Uaprr core-prim . floor)
        (g$11500$Uaprr core-prim . finite?)
        (g$11499$Uaprr core-prim . expt)
        (g$11498$Uaprr core-prim . exp)
        (g$11497$Uaprr core-prim . exact?)
        (g$11496$Uaprr core-prim . exact-integer-sqrt)
        (g$11495$Uaprr core-prim . exact)
        (g$5469$Uaprr core-prim . even?)
        (g$11494$Uaprr core-prim . error)
        (g$11493$Uaprr core-prim . eqv?)
        (g$11492$Uaprr core-prim . equal?)
        (g$11491$Uaprr core-prim . eq?)
        (g$11490$Uaprr core-prim . dynamic-wind)
        (g$5423$Uaprr core-prim . div0-and-mod0)
        (g$5421$Uaprr core-prim . mod0)
        (g$11489$Uaprr core-prim . div0)
        (g$5422$Uaprr core-prim . div-and-mod)
        (g$5420$Uaprr core-prim . mod)
        (g$11488$Uaprr core-prim . div)
        (g$11487$Uaprr core-prim . denominator)
        (g$11486$Uaprr core-prim . cos)
        (g$11485$Uaprr core-prim . cons)
        (g$11484$Uaprr core-prim . complex?)
        (g$5426$Uaprr core-prim . char?)
        (g$5494$Uaprr core-prim . char>?)
        (g$5496$Uaprr core-prim . char>=?)
        (g$5492$Uaprr core-prim . char=?)
        (g$5493$Uaprr core-prim . char<?)
        (g$5495$Uaprr core-prim . char<=?)
        (g$11483$Uaprr core-prim . char->integer)
        (g$11482$Uaprr core-prim . ceiling)
        (g$11481$Uaprr core-prim . call-with-values)
        (g$11480$Uaprr core-prim . call/cc)
        (g$11479$Uaprr core-prim . call-with-current-continuation)
        (g$5465$Uaprr core-prim . cddddr)
        (g$5464$Uaprr core-prim . cdddar)
        (g$5463$Uaprr core-prim . cddadr)
        (g$5462$Uaprr core-prim . cddaar)
        (g$5461$Uaprr core-prim . cdaddr)
        (g$5460$Uaprr core-prim . cdadar)
        (g$5459$Uaprr core-prim . cdaadr)
        (g$5458$Uaprr core-prim . cdaaar)
        (g$5457$Uaprr core-prim . cadddr)
        (g$5456$Uaprr core-prim . caddar)
        (g$5455$Uaprr core-prim . cadadr)
        (g$5454$Uaprr core-prim . cadaar)
        (g$5453$Uaprr core-prim . caaddr)
        (g$5452$Uaprr core-prim . caadar)
        (g$5451$Uaprr core-prim . caaadr)
        (g$5450$Uaprr core-prim . caaaar)
        (g$5449$Uaprr core-prim . cdddr)
        (g$5448$Uaprr core-prim . cddar)
        (g$5447$Uaprr core-prim . cdadr)
        (g$5446$Uaprr core-prim . cdaar)
        (g$5445$Uaprr core-prim . caddr)
        (g$5444$Uaprr core-prim . cadar)
        (g$5443$Uaprr core-prim . caadr)
        (g$5442$Uaprr core-prim . caaar)
        (g$5441$Uaprr core-prim . cddr)
        (g$5440$Uaprr core-prim . cdar)
        (g$5439$Uaprr core-prim . cadr)
        (g$5438$Uaprr core-prim . caar)
        (g$11478$Uaprr core-prim . cdr)
        (g$11477$Uaprr core-prim . car)
        (g$5430$Uaprr core-prim . boolean?)
        (g$5486$Uaprr core-prim . boolean=?)
        (g$11476$Uaprr core-prim . atan)
        (g$11475$Uaprr core-prim . assertion-violation)
        (g$11474$Uaprr core-prim . asin)
        (g$11473$Uaprr core-prim . apply)
        (g$11472$Uaprr core-prim . append)
        (g$11471$Uaprr core-prim . angle)
        (g$11470$Uaprr core-prim . acos)
        (g$11469$Uaprr core-prim . abs)
        (g$11468$Uaprr core-prim . /)
        (g$11467$Uaprr core-prim . *)
        (g$11466$Uaprr core-prim . -)
        (g$11465$Uaprr core-prim . +)
        (g$11464$Uaprr core-prim . >=)
        (g$11463$Uaprr core-prim . >)
        (g$11462$Uaprr core-prim . =)
        (g$11461$Uaprr core-prim . <=)
        (g$11460$Uaprr core-prim . <)
        (g$11459$Uaprr core-prim . $fxarithmetic-shift-right)
        (g$11458$Uaprr core-prim . $fxarithmetic-shift-left)
        (g$11457$Uaprr core-prim . $$fx-)
        (g$11456$Uaprr core-prim . $$fx*)
        (g$11455$Uaprr core-prim . $$fx+)
        (g$11454$Uaprr core-prim . $fxnot)
        (g$11453$Uaprr core-prim . $fxxor)
        (g$11452$Uaprr core-prim . $fxior)
        (g$11451$Uaprr core-prim . $fxand)
        (g$11450$Uaprr core-prim . $fx>=?)
        (g$11449$Uaprr core-prim . $fx>?)
        (g$11448$Uaprr core-prim . $fx<=?)
        (g$11447$Uaprr core-prim . $fx<?)
        (g$11446$Uaprr core-prim . $fx-)
        (g$11445$Uaprr core-prim . $fxmod0)
        (g$11444$Uaprr core-prim . $fxdiv0)
        (g$11443$Uaprr core-prim . $fx*)
        (g$11442$Uaprr core-prim . $fx+)
        (g$11441$Uaprr core-prim . $fx=?)
        (g$11440$Uaprr core-prim . $vector-set!)
        (g$11439$Uaprr core-prim . $vector-ref)
        (g$11438$Uaprr core-prim . $cdr)
        (g$11437$Uaprr core-prim . $car)
        (g$11436$Uaprr core-prim . make-record-printer)
        (g$11435$Uaprr core-prim . eqv-hash)
        (g$11434$Uaprr core-prim . reverse!)
        (g$11433$Uaprr core-prim . deserialize-port)
        (g$11432$Uaprr core-prim . serialize-port)
        (g$6768$Uaprr core-prim . enum-set?)
        (g$6264$Uaprr core-prim . make-promise)
        (g$11246$Uaprr core-prim . load/unload)
        (g$11245$Uaprr core-prim . load/args)
        (g$6877$Uaprr core-prim . printf)
        (g$6878$Uaprr core-prim . fprintf)
        (g$6879$Uaprr core-prim . format)
        (g$11431$Uaprr core-prim . procedure-form)
        (g$11430$Uaprr core-prim . procedure-environment)
        (g$11429$Uaprr core-prim . procedure-name)
        (g$11428$Uaprr core-prim . procedure-arity)
        (g$11427$Uaprr core-prim . gc-collect)
        (g$11426$Uaprr core-prim . typeof)
        (g$11425$Uaprr core-prim . clr-type?)
        (g$11424$Uaprr core-prim . get-clr-type)
        (g$11423$Uaprr core-prim . get-command-line)
        (g$11422$Uaprr core-prim . vector-append)
        (g$11421$Uaprr core-prim . vector-filter)
        (g$11420$Uaprr core-prim . vector-reverse!)
        (g$11419$Uaprr core-prim . vector-contains?)
        (g$11418$Uaprr core-prim . vector-index-of)
        (g$11417$Uaprr core-prim . vector-copy)
        (g$11416$Uaprr core-prim . vector-binary-search)
        (g$11415$Uaprr core-prim . string-ci-compare)
        (g$11414$Uaprr core-prim . string-compare)
        (g$11413$Uaprr core-prim . string-format)
        (g$11242$Uaprr core-prim . trace-printer)
        (g$11412$Uaprr core-prim . make-traced-procedure)
        (g$6899$Uaprr core-prim . make-traced-macro)
        (g$8220$Uaprr core-prim . assertion-error)
        (g$11411$Uaprr core-prim . time-it)
        (g$6906$Uaprr core-prim . make-parameter)
        (g$11410$Uaprr core-prim . library-locator)
        (g$11409$Uaprr core-prim . get-library-paths)
        (g$11408$Uaprr core-prim . open-tcp-input/output-port)
        (g$11407$Uaprr core-prim . hashtable-for-each)
        (g$11406$Uaprr core-prim . hashtable-map)
        (g$8198$Uaprr core-prim . environment-bindings)
        (g$8201$Uaprr core-prim . environment-symbols)
        (g$8197$Uaprr core-prim . interaction-environment-symbols)
        (g$11405$Uaprr core-prim . optimization-level)
        (g$7528$Uaprr core-prim . library-path)
        (g$7906$Uaprr core-prim . make-compile-time-value)
        (g$8207$Uaprr core-prim . expand->core)
        (g$8205$Uaprr core-prim . expand)
        (g$8144$Uaprr core-prim . syntax-transpose)
        (g$7225$Uaprr core-prim . convert->cps)
        (g$7549$Uaprr core-prim . installed-libraries)
        (g$7540$Uaprr core-prim . uninstall-library)
        (g$6989$Uaprr core-prim . pretty-gensyms)
        (g$6986$Uaprr core-prim . pretty-width)
        (g$6991$Uaprr core-prim . pretty-print)
        (g$11404$Uaprr $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$11403$Uaprr $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$11402$Uaprr $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$11401$Uaprr $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$11400$Uaprr $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$11399$Uaprr
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$11398$Uaprr
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$11397$Uaprr
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$11396$Uaprr
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$11395$Uaprr $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$11394$Uaprr
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$11393$Uaprr $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$11392$Uaprr $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$11391$Uaprr $core-rtd &i/o-rtd &i/o-rcd)
        (g$11390$Uaprr
          $core-rtd
          &non-continuable-rtd
          &non-continuable-rcd)
        (g$11389$Uaprr $core-rtd &undefined-rtd &undefined-rcd)
        (g$11388$Uaprr $core-rtd &syntax-rtd &syntax-rcd)
        (g$11387$Uaprr $core-rtd &lexical-rtd &lexical-rcd)
        (g$11386$Uaprr
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$11385$Uaprr $core-rtd &who-rtd &who-rcd)
        (g$11384$Uaprr $core-rtd &irritants-rtd &irritants-rcd)
        (g$11383$Uaprr $core-rtd &assertion-rtd &assertion-rcd)
        (g$11382$Uaprr $core-rtd &violation-rtd &violation-rcd)
        (g$11381$Uaprr $core-rtd &error-rtd &error-rcd)
        (g$11380$Uaprr $core-rtd &serious-rtd &serious-rcd)
        (g$11379$Uaprr $core-rtd &warning-rtd &warning-rcd)
        (g$11378$Uaprr $core-rtd &message-rtd &message-rcd)
        (g$11377$Uaprr $core-rtd &condition-rtd &condition-rcd)
        (g$11376$Uaprr macro . define-condition-type)
        (g$11375$Uaprr macro . define-enumeration)
        (g$11374$Uaprr macro . define-record-type)
        (g$11373$Uaprr macro . parent-rtd)
        (g$11372$Uaprr macro . nongenerative)
        (g$11371$Uaprr macro . opaque)
        (g$11370$Uaprr macro . sealed)
        (g$11369$Uaprr macro . protocol)
        (g$11368$Uaprr macro . parent)
        (g$11367$Uaprr macro . immutable)
        (g$11366$Uaprr macro . mutable)
        (g$11365$Uaprr macro . fields)
        (g$11364$Uaprr macro . error-handling-mode)
        (g$11363$Uaprr macro . file-options)
        (g$11362$Uaprr macro . buffer-mode)
        (g$11361$Uaprr macro . eol-style)
        (g$11360$Uaprr macro . guard)
        (g$11359$Uaprr macro . trace-letrec-syntax)
        (g$11358$Uaprr macro . trace-let-syntax)
        (g$11357$Uaprr macro . trace-define-syntax)
        (g$11356$Uaprr macro . trace-define)
        (g$11355$Uaprr macro . trace-lambda)
        (g$11354$Uaprr macro . unsyntax-splicing)
        (g$11353$Uaprr macro . unsyntax)
        (g$11352$Uaprr macro . unquote-splicing)
        (g$11351$Uaprr macro . unquote)
        (g$11350$Uaprr macro . _)
        (g$11349$Uaprr macro . else)
        (g$11348$Uaprr macro . =>)
        (g$11347$Uaprr macro . ...)
        (g$11346$Uaprr macro . assert)
        (g$11345$Uaprr macro . endianness)
        (g$11344$Uaprr macro . delay)
        (g$11343$Uaprr macro . time)
        (g$11342$Uaprr macro . or)
        (g$11341$Uaprr macro . and)
        (g$11340$Uaprr macro . do)
        (g$11339$Uaprr macro . cond)
        (g$11338$Uaprr macro . let*)
        (g$11337$Uaprr macro . let)
        (g$11336$Uaprr macro . identifier-syntax)
        (g$11335$Uaprr macro . with-syntax)
        (g$11334$Uaprr macro . quasisyntax)
        (g$11333$Uaprr macro . quasiquote)
        (g$11332$Uaprr macro . syntax-rules)
        (g$11331$Uaprr macro . include-into)
        (g$11330$Uaprr macro . include)
        (g$11329$Uaprr macro . define-struct)
        (g$11328$Uaprr macro . let-values)
        (g$11327$Uaprr macro . let*-values)
        (g$11326$Uaprr core-macro . record-constructor-descriptor)
        (g$11325$Uaprr core-macro . record-type-descriptor)
        (g$11324$Uaprr core-macro . fluid-let-syntax)
        (g$11323$Uaprr macro . case)
        (g$11322$Uaprr macro . parameterize)
        (g$11321$Uaprr macro . unless)
        (g$11320$Uaprr macro . when)
        (g$11319$Uaprr core-macro . if)
        (g$11318$Uaprr core-macro . letrec*)
        (g$11317$Uaprr core-macro . letrec)
        (g$11316$Uaprr core-macro . type-descriptor)
        (g$11315$Uaprr core-macro . case-lambda)
        (g$11314$Uaprr core-macro . lambda)
        (g$11313$Uaprr core-macro . syntax)
        (g$11312$Uaprr core-macro . syntax-case)
        (g$11311$Uaprr core-macro . quote)
        (g$11310$Uaprr core-macro . foreign-call)
        (g$11309$Uaprr letrec-syntax)
        (g$11308$Uaprr let-syntax)
        (g$11307$Uaprr set!)
        (g$11306$Uaprr export)
        (g$11305$Uaprr import)
        (g$11304$Uaprr library)
        (g$11303$Uaprr begin)
        (g$11302$Uaprr module)
        (g$11301$Uaprr define-syntax)
        (g$11300$Uaprr define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$15416$Uaprr
      'g$11814$Uaprr
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$11752$Uaprr)
        (eval-core . g$11751$Uaprr)
        (set-symbol-value! . g$11749$Uaprr)
        (symbol-value . g$11748$Uaprr)
        (gensym . g$11745$Uaprr)
        (void . g$11744$Uaprr))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$19928$Uaprr
     g$trace-printer$19993$Uaprr
     (g$make-parameter$14574$Uaprr g$pretty-print$14784$Uaprr))
   (g$command-line$19929$Uaprr
     g$command-line$19994$Uaprr
     (g$make-parameter$14574$Uaprr (get-command-line)))
   (g$local-library-path$19930$Uaprr
     g$local-library-path$19995$Uaprr
     (case-lambda
       ((g$filename$19944$Uaprr)
        (cons
          (g$get-directory-name$12586$Uaprr g$filename$19944$Uaprr)
          (g$library-path$15400$Uaprr)))))
   (g$load/args$19931$Uaprr
     g$load/args$19996$Uaprr
     (case-lambda
       ((g$filename$19945$Uaprr . g$args$19946$Uaprr)
        (begin
          (apply
            g$load-r6rs-top-level$19941$Uaprr
            g$filename$19945$Uaprr
            'load
            g$args$19946$Uaprr)
          (void)))))
   (g$load/unload$19932$Uaprr
     g$load/unload$19997$Uaprr
     (case-lambda
       ((g$filename$19947$Uaprr)
        ((case-lambda
           ((g$libs$19948$Uaprr)
            (begin
              (g$load$19933$Uaprr g$filename$19947$Uaprr)
              (g$for-each$11723$Uaprr
                (case-lambda
                  ((g$lib$19949$Uaprr)
                   (if (not (g$memq$11714$Uaprr
                              g$lib$19949$Uaprr
                              g$libs$19948$Uaprr))
                     (g$uninstall-library$15412$Uaprr g$lib$19949$Uaprr)
                     (void))))
                (g$installed-libraries$15421$Uaprr)))))
         (g$installed-libraries$15421$Uaprr)))))
   (g$load$19933$Uaprr
     g$load$19998$Uaprr
     (case-lambda
       ((g$filename$19950$Uaprr)
        (begin
          (apply
            g$load-r6rs-top-level$19941$Uaprr
            g$filename$19950$Uaprr
            'load
            (cdr (g$command-line$19929$Uaprr)))
          (void)))))
   (g$ironscheme-build$19934$Uaprr
     g$ironscheme-build$19999$Uaprr
     (case-lambda
       (() (g$ironscheme-build$19934$Uaprr '#f))
       ((g$cps?$19951$Uaprr)
        (begin
          (g$call-with-output-file$14190$Uaprr
            '"build-options.ss"
            (case-lambda
              ((g$p$19952$Uaprr)
               (begin
                 (write
                   (list 'define-option 'cps-mode g$cps?$19951$Uaprr)
                   g$p$19952$Uaprr)
                 (write
                   (list
                     'define-option
                     'if-wants-letrec*
                     (not g$cps?$19951$Uaprr))
                   g$p$19952$Uaprr)
                 (g$newline$14191$Uaprr g$p$19952$Uaprr)))))
          (g$load$19933$Uaprr '"ironscheme-buildscript.ss")))))
   (g$foreground-color$19935$Uaprr
     g$foreground-color$20000$Uaprr
     (case-lambda
       (() (clr-call-internal 'console 'get_foregroundcolor '()))
       ((g$color$19953$Uaprr)
        (clr-call-internal
          'console
          'set_foregroundcolor
          '()
          g$color$19953$Uaprr))))
   (g$system-exception?$19936$Uaprr
     g$system-exception?$20001$Uaprr
     (case-lambda
       ((g$e$19954$Uaprr)
        (clr-is-internal 'SystemException g$e$19954$Uaprr))))
   (g$eval-top-level$19937$Uaprr
     g$eval-top-level$20002$Uaprr
     (case-lambda
       ((g$x$19955$Uaprr)
        (call/cc
          (case-lambda
            ((g$k$19956$Uaprr)
             (with-exception-handler
               (case-lambda
                 ((g$e$19957$Uaprr)
                  ((case-lambda
                     ((g$serious?$19958$Uaprr)
                      (begin
                        ((case-lambda
                           ((g$foreground-color$19963$Uaprr
                              g$current-output-port$19964$Uaprr
                              g$foreground-color$19965$Uaprr
                              g$current-output-port$19966$Uaprr)
                            ((case-lambda
                               ((g$swap$19967$Uaprr)
                                (dynamic-wind
                                  g$swap$19967$Uaprr
                                  (case-lambda
                                    (()
                                     (begin
                                       (if g$serious?$19958$Uaprr
                                         (display
                                           '"Unhandled exception during evaluation:
")
                                         (void))
                                       (display g$e$19957$Uaprr)
                                       (g$newline$14191$Uaprr))))
                                  g$swap$19967$Uaprr)))
                             (case-lambda
                               (()
                                (begin
                                  ((case-lambda
                                     ((g$t$19968$Uaprr)
                                      (begin
                                        (g$foreground-color$19963$Uaprr
                                          g$foreground-color$19965$Uaprr)
                                        (set! g$foreground-color$19965$Uaprr
                                          g$t$19968$Uaprr))))
                                   (g$foreground-color$19963$Uaprr))
                                  ((case-lambda
                                     ((g$t$19969$Uaprr)
                                      (begin
                                        (g$current-output-port$19964$Uaprr
                                          g$current-output-port$19966$Uaprr)
                                        (set! g$current-output-port$19966$Uaprr
                                          g$t$19969$Uaprr))))
                                   (g$current-output-port$19964$Uaprr))))))))
                         g$foreground-color$19935$Uaprr
                         current-output-port
                         (if g$serious?$19958$Uaprr 'red 'yellow)
                         (current-error-port))
                        (if g$serious?$19958$Uaprr
                          (g$k$19956$Uaprr)
                          (void)))))
                   ((case-lambda
                      ((g$t$19970$Uaprr)
                       (if g$t$19970$Uaprr
                         g$t$19970$Uaprr
                         (begin
                           '#f
                           (g$system-exception?$19936$Uaprr
                             g$e$19957$Uaprr)))))
                    (g$serious-condition?$13159$Uaprr
                      g$e$19957$Uaprr)))))
               (case-lambda
                 (()
                  (g$eval$19901$Uaprr
                    g$x$19955$Uaprr
                    (g$interaction-environment$19926$Uaprr)))))))))))
   (g$compile-system-libraries$19938$Uaprr
     g$compile-system-libraries$20003$Uaprr
     (case-lambda
       (()
        (g$eval-top-level$19937$Uaprr
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$19939$Uaprr
     g$compile$20004$Uaprr
     (case-lambda
       ((g$filename$19971$Uaprr)
        (g$load-r6rs-top-level$19941$Uaprr
          g$filename$19971$Uaprr
          'compile))))
   (g$compile->closure$19940$Uaprr
     g$compile->closure$20005$Uaprr
     (case-lambda
       ((g$filename$19972$Uaprr)
        (g$load-r6rs-top-level$19941$Uaprr
          g$filename$19972$Uaprr
          'closure))))
   (g$load-r6rs-top-level$19941$Uaprr
     g$load-r6rs-top-level$20006$Uaprr
     (case-lambda
       ((g$filename$19973$Uaprr g$how$19974$Uaprr . g$args$19975$Uaprr)
        ((case-lambda
           ((g$library-path$19978$Uaprr g$library-path$19979$Uaprr)
            ((case-lambda
               ((g$swap$19980$Uaprr)
                (dynamic-wind
                  g$swap$19980$Uaprr
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$19981$Uaprr)
                         ((case-lambda
                            ((g$t$19982$Uaprr)
                             (if (eqv? g$t$19982$Uaprr 'closure)
                               (g$pre-compile-r6rs-top-level$19924$Uaprr
                                 g$x*$19981$Uaprr)
                               (if (eqv? g$t$19982$Uaprr 'load)
                                 ((case-lambda
                                    ((g$command-line$19985$Uaprr
                                       g$command-line$19986$Uaprr)
                                     ((case-lambda
                                        ((g$swap$19987$Uaprr)
                                         (dynamic-wind
                                           g$swap$19987$Uaprr
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$19923$Uaprr
                                                 g$x*$19981$Uaprr))))
                                           g$swap$19987$Uaprr)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$19988$Uaprr)
                                             (begin
                                               (g$command-line$19985$Uaprr
                                                 g$command-line$19986$Uaprr)
                                               (set! g$command-line$19986$Uaprr
                                                 g$t$19988$Uaprr))))
                                          (g$command-line$19985$Uaprr)))))))
                                  g$command-line$19929$Uaprr
                                  (cons
                                    g$filename$19973$Uaprr
                                    (g$map$11722$Uaprr
                                      (case-lambda
                                        ((g$x$19989$Uaprr)
                                         (g$format$14365$Uaprr
                                           '"~a"
                                           g$x$19989$Uaprr)))
                                      g$args$19975$Uaprr)))
                                 (if (eqv? g$t$19982$Uaprr 'compile)
                                   (begin
                                     (g$compile-r6rs-top-level$19923$Uaprr
                                       g$x*$19981$Uaprr)
                                     (g$serialize-all$15404$Uaprr
                                       serialize-library
                                       g$compile-core-expr$15152$Uaprr))
                                   (if '#f '#f (void)))))))
                          g$how$19974$Uaprr)))
                      (g$with-input-from-file$14187$Uaprr
                        g$filename$19973$Uaprr
                        (case-lambda
                          (()
                           ((letrec ((g$f$19990$Uaprr
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$19991$Uaprr)
                                              (if (eof-object?
                                                    g$x$19991$Uaprr)
                                                '()
                                                (cons
                                                  g$x$19991$Uaprr
                                                  (g$f$19990$Uaprr)))))
                                           (read-annotated))))))
                              g$f$19990$Uaprr))))))))
                  g$swap$19980$Uaprr)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$19992$Uaprr)
                    (begin
                      (g$library-path$19978$Uaprr
                        g$library-path$19979$Uaprr)
                      (set! g$library-path$19979$Uaprr
                        g$t$19992$Uaprr))))
                 (g$library-path$19978$Uaprr)))))))
         g$library-path$15400$Uaprr
         (g$local-library-path$19930$Uaprr g$filename$19973$Uaprr)))))
   (g$fo$19942$Uaprr
     g$fo$20007$Uaprr
     (g$make-enumeration$14327$Uaprr '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$15405$Uaprr
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$19943$Uaprr)
         (if (g$serious-condition?$13159$Uaprr g$ex$19943$Uaprr)
           (raise g$ex$19943$Uaprr)
           (begin
             (display g$ex$19943$Uaprr)
             (g$newline$14191$Uaprr))))))
    (set-symbol-value! 'load g$load$19933$Uaprr)
    (set-symbol-value! 'compile g$compile$19939$Uaprr)
    (set-symbol-value! 'compile->closure g$compile->closure$19940$Uaprr)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$19937$Uaprr)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$19892$Uaprr)
    (set-symbol-value! 'expanded2core g$expanded->core$15151$Uaprr)
    (set-symbol-value! 'trace-printer g$trace-printer$19928$Uaprr)
    (set-symbol-value! 'convert->cps g$convert->cps$15102$Uaprr)
    (set-symbol-value! 'assertion-violation assertion-violation)
    (set-symbol-value! 'raise raise)
    (g$file-options-constructor$14575$Uaprr
      (g$enum-set-constructor$14330$Uaprr g$fo$19942$Uaprr))
    (g$library-path$15400$Uaprr (get-library-paths))
    (g$library-extensions$15401$Uaprr
      (cons '".ironscheme.sls" (g$library-extensions$15401$Uaprr)))))

